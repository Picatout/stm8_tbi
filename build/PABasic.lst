ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 	
                                     39 ;--------------------------------------
                                     40     .area DATA 
                                     41 ;--------------------------------------	
                                     42 
                           000050    43 	TIB_SIZE=80
                           000028    44     PAD_SIZE=40
                           000020    45 	DSTACK_SIZE=32 
                           000080    46 	STACK_SIZE=128
                           0017FF    47 	STACK_EMPTY=RAM_SIZE-1  
                           000000    48 	FRUN=0 ; flags run code in variable flags
                           000001    49 	FTRAP=1 ; inside trap handler 
                           000002    50 	FLOOP=2 ; FOR loop in preparation 
                           000003    51 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    52 	FBREAK=4 ; break point flag 
                           000005    53 	FCOMP=5  ; compiling flags 
                                     54 
                           004000    55 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     56 
                           000006    57     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     58 
      000000                         59 in.w:  .blkb 1 ; parser position in text line
      000001                         60 in:    .blkb 1 ; low byte of in.w
      000002                         61 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         62 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         63 basicptr:  .blkb 2  ; point to current BASIC line address.
      000006                         64 data_ptr:  .blkw 1  ; point to DATA address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000008                         65 data_ofs:  .blkb 1  ; index to next data item 
      000009                         66 data_len:  .blkb 1  ; length of data line 
      00000A                         67 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         68 acc24: .blkb 1 ; 24 bit accumulator
      00000C                         69 acc16: .blkb 1 ; 16 bit accumulator, middle byte of acc24
      00000D                         70 acc8:  .blkb 1 ;  8 bit accumulator, least byte of acc24 
      00000E                         71 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         72 timer: .blkw 1 ;  milliseconds count down timer 
      000012                         73 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         74 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         75 farptr: .blkb 1 ; 24 bits pointer used by file system
      000017                         76 ptr16:  .blkb 1 ; 16 bits pointer ,  middle byte of farptr
      000018                         77 ptr8:   .blkb 1 ; 8 bits pointer, least byte of farptr 
      000019                         78 ffree: .blkb 3 ; flash free address ; file system free space pointer
      00001C                         79 dstkptr: .blkw 1  ; data stack pointer 
      00001E                         80 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      000020                         81 txtend: .blkw 1 ; tokenized BASIC text end address 
      000022                         82 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000023                         83 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000025                         84 flags: .blkb 1 ; various boolean flags
      000026                         85 tab_width: .blkb 1 ; print colon width (4)
      000027                         86 rx_char: .blkb 1 ; last received character 
      000028                         87 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     88 ; keep as last variable 
      00005C                         89 free_ram: ; from here RAM free for BASIC text 
                                     90 
                                     91 ;-----------------------------------
                                     92     .area SSEG (ABS)
                                     93 ;-----------------------------------
                                     94 ;;;; working buffers and stacks at end of RAM. 	
      0016E8                         95     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016E8                         96 tib: .ds TIB_SIZE             ; transaction input buffer
      001738                         97 pad: .ds PAD_SIZE             ; working buffer
      001760                         98 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT, and func/proc arguments  
      001780                         99 dstack_empty: ; dstack underflow ; data stack bottom 
      001780                        100 stack_full: .ds STACK_SIZE   ; control stack 
      001800                        101 stack_unf: ; stack underflow ; control_stack bottom 
                                    102 
                                    103 ;--------------------------------------
                                    104     .area HOME 
                                    105 ;--------------------------------------
      000000 82 00 05 7A            106     int cold_start			; RESET vector 
                           000001   107 .if DEBUG
      000004 82 00 00 2F            108 	int TrapHandler 		;TRAP  software interrupt
                           000000   109 .else
                                    110 	int NonHandledInterrupt ;TRAP  software interrupt
                                    111 .endif
      000008 82 00 00 09            112 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 0A            113 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            114 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            115 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            116 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            117 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            118 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 54            119 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000028 82 00 00 09            120 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            121 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            122 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            123 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            124 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            125 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            126 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            127 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            128 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            129 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 18            130 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 09            131 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            132 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 09            133 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 09            134 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 3E            135 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 09            136 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            137 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            138 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            139 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            140 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            141 	int NonHandledInterrupt ;int29  not used
                                    142 
                                    143 ;---------------------------------------
                                    144     .area CODE
                                    145 ;---------------------------------------
                           000001   146 .if DEBUG
      000000 53 54 4D 38 5F 54 42   147 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    148 .endif 
                                    149 
                                    150 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    151 ; non handled interrupt 
                                    152 ; reset MCU
                                    153 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000009                        154 NonHandledInterrupt:
      000009 71                     155     .byte 0x71  ; invalid opcode reinitialize MCU
                                    156 
                                    157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    158 ; auto wakeup from halt
                                    159 ; at iret, program continue 
                                    160 ; after hatl instruction
                                    161 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00000A                        162 AWUHandler:
      00000A 72 19 50 F0      [ 1]  163 	bres AWU_CSR,#AWU_CSR_AWUEN
      00000E 55 00 3F 50 F1   [ 1]  164 	mov AWU_APR,0x3F
      000013 72 5F 50 F2      [ 1]  165 	clr AWU_TBR 
      000017 80               [11]  166 	iret
                                    167 
                                    168 ;--------------------------
                                    169 ; UART1 receive character
                                    170 ; CTRL-C (ASCII 3)
                                    171 ; cancel program execution
                                    172 ; and fall back to command line
                                    173 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000018                        174 Uart1RxHandler:
      000018 72 0B 52 30 FB   [ 2]  175 	btjf UART1_SR,#UART_SR_RXNE,.
      00001D C6 52 31         [ 1]  176 	ld a,UART1_DR 
      000020 A1 03            [ 1]  177 	cp a,#CTRL_C 
      000022 26 07            [ 1]  178 	jrne 1$
      000024 72 5F 00 27      [ 1]  179 	clr rx_char 
      000028 CC 00 67         [ 2]  180 	jp user_interrupted
      00002B                        181 1$:
      00002B C7 00 27         [ 1]  182 	ld rx_char,a 	
      00002E 80               [11]  183 	iret 
                                    184 
                                    185 ;------------------------------------
                                    186 ; software interrupt handler  
                                    187 ;------------------------------------
                           000001   188 .if DEBUG 
      00002F                        189 TrapHandler:
      00002F 72 12 00 25      [ 1]  190 	bset flags,#FTRAP 
      000033 CD 09 23         [ 4]  191 	call print_registers
      000036 CD 0B 90         [ 4]  192 	call cmd_itf
      000039 72 13 00 25      [ 1]  193 	bres flags,#FTRAP 	
      00003D 80               [11]  194 	iret
                                    195 .endif 
                                    196 
                                    197 ;------------------------------
                                    198 ; TIMER 4 is used to maintain 
                                    199 ; a milliseconds 'ticks' counter
                                    200 ; and decrement 'timer' varaiable
                                    201 ;--------------------------------
      00003E                        202 Timer4UpdateHandler:
      00003E 72 5F 53 42      [ 1]  203 	clr TIM4_SR 
      000042 CE 00 0E         [ 2]  204 	ldw x,ticks
      000045 5C               [ 2]  205 	incw x
      000046 CF 00 0E         [ 2]  206 	ldw ticks,x 
      000049 CE 00 10         [ 2]  207 	ldw x,timer
      00004C 5D               [ 2]  208 	tnzw x 
      00004D 27 04            [ 1]  209 	jreq 1$
      00004F 5A               [ 2]  210 	decw x 
      000050 CF 00 10         [ 2]  211 	ldw timer,x 
      000053                        212 1$:	
      000053 80               [11]  213 	iret 
                                    214 
                                    215 
                                    216 ;------------------------------------
                                    217 ; Triggered by pressing USER UserButton 
                                    218 ; on NUCLEO card.
                                    219 ; This is used to abort a progam lock 
                                    220 ; in infinite loop. 
                                    221 ;------------------------------------
      000054                        222 UserButtonHandler:
                                    223 ; wait button release
      000054 5F               [ 1]  224 	clrw x
      000055 5A               [ 2]  225 1$: decw x 
      000056 26 FD            [ 1]  226 	jrne 1$
      000058 72 09 50 15 F8   [ 2]  227 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    228 ; if MCU suspended by SLEEP resume program
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      00005D 72 07 00 25 05   [ 2]  229     btjf flags,#FSLEEP,2$
      000062 72 17 00 25      [ 1]  230 	bres flags,#FSLEEP 
      000066 80               [11]  231 	iret
      000067                        232 2$:	
      000067                        233 user_interrupted:
      000067 72 00 00 25 02   [ 2]  234     btjt flags,#FRUN,4$
      00006C 20 13            [ 2]  235 	jra UBTN_Handler_exit 
      00006E                        236 4$:	; program interrupted by user 
      00006E 72 11 00 25      [ 1]  237 	bres flags,#FRUN 
      000072 AE 00 89         [ 2]  238 	ldw x,#USER_ABORT
      000075 CD 01 DE         [ 4]  239 	call puts 
      000078 CE 00 04         [ 2]  240 	ldw x,basicptr 
      00007B C6 00 01         [ 1]  241 	ld a,in 
      00007E CD 14 F3         [ 4]  242 	call prt_basic_line
      000081                        243 UBTN_Handler_exit:
      000081 AE 17 FF         [ 2]  244     ldw x,#STACK_EMPTY 
      000084 94               [ 1]  245     ldw sp,x
      000085 9A               [ 1]  246 	rim 
      000086 CC 07 FB         [ 2]  247 	jp warm_start
                                    248 
      000089 0A 50 72 6F 67 72 61   249 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    250 
                                    251 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    252 ;    peripherals initialization
                                    253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    254 
                                    255 ;----------------------------------------
                                    256 ; inialize MCU clock 
                                    257 ; input:
                                    258 ;   A 		source  HSI | 1 HSE 
                                    259 ;   XL      CLK_CKDIVR , clock divisor 
                                    260 ; output:
                                    261 ;   none 
                                    262 ;----------------------------------------
      0000A4                        263 clock_init:	
      0000A4 C1 50 C3         [ 1]  264 	cp a,CLK_CMSR 
      0000A7 27 0C            [ 1]  265 	jreq 2$ ; no switching required 
                                    266 ; select clock source 
      0000A9 72 12 50 C5      [ 1]  267 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000AD C7 50 C4         [ 1]  268 	ld CLK_SWR,a
      0000B0 C1 50 C3         [ 1]  269 1$:	cp a,CLK_CMSR
      0000B3 26 FB            [ 1]  270 	jrne 1$
      0000B5                        271 2$: 	
                                    272 ; HSI and cpu clock divisor 
      0000B5 9F               [ 1]  273 	ld a,xl 
      0000B6 C7 50 C6         [ 1]  274 	ld CLK_CKDIVR,a  
      0000B9 81               [ 4]  275 	ret
                                    276 
                                    277 ;----------------------------------
                                    278 ; TIMER2 used as audio tone output 
                                    279 ; on port D:5.
                                    280 ; channel 1 configured as PWM mode 1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    281 ;-----------------------------------  
                           00F424   282 TIM2_CLK_FREQ=62500
      0000BA                        283 timer2_init:
      0000BA 72 1A 50 C7      [ 1]  284 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000BE 35 60 53 05      [ 1]  285  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000C2 35 08 53 0C      [ 1]  286 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000C6 81               [ 4]  287 	ret 
                                    288 
                                    289 ;---------------------------------
                                    290 ; TIM4 is configured to generate an 
                                    291 ; interrupt every millisecond 
                                    292 ;----------------------------------
      0000C7                        293 timer4_init:
      0000C7 72 18 50 C7      [ 1]  294 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000CB 35 07 53 45      [ 1]  295 	mov TIM4_PSCR,#7 ; prescale 128  
      0000CF 35 7D 53 46      [ 1]  296 	mov TIM4_ARR,#125 ; set for 1msec.
      0000D3 35 05 53 40      [ 1]  297 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D7 72 10 53 41      [ 1]  298 	bset TIM4_IER,#TIM4_IER_UIE
      0000DB 81               [ 4]  299 	ret
                                    300 
                                    301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    302 ;  routines to write to FLASH, EEPROM 
                                    303 ;  and OPTION 
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    305 
                                    306 ;----------------------------------
                                    307 ; unlock EEPROM/OPT for writing/erasing
                                    308 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    309 ; input:
                                    310 ;  none
                                    311 ; output:
                                    312 ;  none 
                                    313 ;----------------------------------
      0000DC                        314 unlock_eeprom:
      0000DC 35 AE 50 64      [ 1]  315 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000E0 35 56 50 64      [ 1]  316     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000E4 72 07 50 5F FB   [ 2]  317 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000E9 81               [ 4]  318 	ret
                                    319 
                                    320 ;----------------------------------
                                    321 ; unlock FLASH for writing/erasing
                                    322 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    323 ; input:
                                    324 ;  none
                                    325 ; output:
                                    326 ;  none
                                    327 ;----------------------------------
      0000EA                        328 unlock_flash:
      0000EA 35 56 50 62      [ 1]  329 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000EE 35 AE 50 62      [ 1]  330 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000F2 72 03 50 5F FB   [ 2]  331 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000F7 81               [ 4]  332 	ret
                                    333 
                           000000   334 USE_BLOCK_ERASE=0 
                           000000   335 .if USE_BLOCK_ERASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    336 ; this code is copied to RAM 
                                    337 
                                    338 ;----------------------------
                                    339 ; erase block code must be 
                                    340 ; executed from RAM
                                    341 ;-----------------------------
                                    342 erase_start:
                                    343 	clr a 
                                    344     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    345     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    346 	ldf [farptr],a
                                    347     inc farptr+2 
                                    348     ldf [farptr],a
                                    349     inc farptr+2 
                                    350     ldf [farptr],a
                                    351     inc farptr+2 
                                    352     ldf [farptr],a
                                    353 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    354 	ret
                                    355 erase_end:
                                    356 
                                    357 ; copy erase_start in RAM 
                                    358 move_code_in_ram:
                                    359 	ldw x,#erase_end 
                                    360 	subw x,#erase_start
                                    361 	ldw acc16,x 
                                    362 	ldw x,#pad 
                                    363 	ldw y,#erase_start 
                                    364 	call move 
                                    365 	ret 
                                    366 
                                    367 ;-----------------------------------
                                    368 ; erase flash or EEPROM block 
                                    369 ; a block is 128 bytes 
                                    370 ; input:
                                    371 ;   farptr  address block begin
                                    372 ; output:
                                    373 ;   none
                                    374 ;--------------------------------------
                                    375 erase_block:
                                    376 	ldw x,farptr+1 
                                    377 	pushw x 
                                    378 	call move_code_in_ram 
                                    379 	popw x 
                                    380 	ldw farptr+1,x 
                                    381 	tnz farptr
                                    382 	jrne erase_flash 
                                    383 	ldw x,#FLASH_BASE 
                                    384 	cpw x,farptr+1 
                                    385 	jrpl erase_flash 
                                    386 ; erase eeprom block
                                    387 	call unlock_eeprom 
                                    388 	sim 
                                    389 	call pad   
                                    390 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    391 	rim 
                                    392 	ret 
                                    393 ; erase flash block:
                                    394 erase_flash:
                                    395 	call unlock_flash 
                                    396 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    397 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    398 	clr a 
                                    399 	sim 
                                    400 	call pad 
                                    401     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    402 	rim 
                                    403 	ret 
                                    404 .endif ;;;; USE_BLOCK_ERASE ;;;;
                                    405 
                                    406 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    407 ; write a byte to FLASH or EEPROM/OPTION  
                                    408 ; input:
                                    409 ;    a  		byte to write
                                    410 ;    farptr  	address
                                    411 ;    x          farptr[x]
                                    412 ; output:
                                    413 ;    none
                                    414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    415 	; variables locales
                           000001   416 	BTW = 1   ; byte to write offset on stack
                           000002   417 	OPT = 2   ; OPTION flag offset on stack
                           000002   418 	VSIZE = 2
      0000F8                        419 write_byte:
      0000F8 90 89            [ 2]  420 	pushw y
      0000FA                        421 	_vars VSIZE
      0000FA 52 02            [ 2]    1     sub sp,#VSIZE 
      0000FC 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      0000FE 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
                                    424 ; put addr[15:0] in Y, for bounds check.
      000100 90 CE 00 17      [ 2]  425 	ldw y,farptr+1   ; Y=addr15:0
                                    426 ; check addr[23:16], if <> 0 then it is extened flash memory
      000104 72 5D 00 16      [ 1]  427 	tnz farptr 
      000108 26 14            [ 1]  428 	jrne write_flash
      00010A 90 A3 27 80      [ 2]  429     cpw y,#user_space
      00010E 24 0E            [ 1]  430     jruge write_flash
      000110 90 A3 40 00      [ 2]  431 	cpw y,#EEPROM_BASE  
      000114 25 52            [ 1]  432     jrult write_exit
      000116 90 A3 48 7F      [ 2]  433 	cpw y,#OPTION_END 
      00011A 22 4C            [ 1]  434 	jrugt write_exit
      00011C 20 16            [ 2]  435 	jra write_eeprom 
                                    436 ; write program memory
      00011E                        437 write_flash:
      00011E CD 00 EA         [ 4]  438 	call unlock_flash 
      000121 9B               [ 1]  439 1$:	sim 
      000122 7B 01            [ 1]  440 	ld a,(BTW,sp)
      000124 92 A7 00 16      [ 4]  441 	ldf ([farptr],x),a ; farptr[x]=A
      000128 72 05 50 5F FB   [ 2]  442 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00012D 9A               [ 1]  443     rim 
      00012E 72 13 50 5F      [ 1]  444     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000132 20 34            [ 2]  445     jra write_exit
                                    446 ; write eeprom and option
      000134                        447 write_eeprom:
      000134 CD 00 DC         [ 4]  448 	call unlock_eeprom
                                    449 	; check for data eeprom or option eeprom
      000137 90 A3 48 00      [ 2]  450 	cpw y,#OPTION_BASE
      00013B 2B 08            [ 1]  451 	jrmi 1$
      00013D 90 A3 48 80      [ 2]  452 	cpw y,#OPTION_END+1
      000141 2A 02            [ 1]  453 	jrpl 1$
      000143 03 02            [ 1]  454 	cpl (OPT,sp)
      000145                        455 1$: 
      000145 0D 02            [ 1]  456     tnz (OPT,sp)
      000147 27 08            [ 1]  457     jreq 2$
                                    458 	; pour modifier une option il faut modifier ces 2 bits
      000149 72 1E 50 5B      [ 1]  459     bset FLASH_CR2,#FLASH_CR2_OPT
      00014D 72 1F 50 5C      [ 1]  460     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000151                        461 2$: 
      000151 7B 01            [ 1]  462     ld a,(BTW,sp)
      000153 92 A7 00 16      [ 4]  463     ldf ([farptr],x),a
      000157 0D 02            [ 1]  464     tnz (OPT,sp)
      000159 27 08            [ 1]  465     jreq 3$
      00015B 5C               [ 2]  466     incw x
      00015C 7B 01            [ 1]  467     ld a,(BTW,sp)
      00015E 43               [ 1]  468     cpl a
      00015F 92 A7 00 16      [ 4]  469     ldf ([farptr],x),a
      000163 72 05 50 5F FB   [ 2]  470 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000168                        471 write_exit:
      000168                        472 	_drop VSIZE 
      000168 5B 02            [ 2]    1     addw sp,#VSIZE 
      00016A 90 85            [ 2]  473 	popw y
      00016C 81               [ 4]  474     ret
                                    475 
                                    476 ;--------------------------------------------
                                    477 ; write a data block to eeprom or flash 
                                    478 ; input:
                                    479 ;   Y        source address   
                                    480 ;   X        array index  destination  farptr[x]
                                    481 ;   BSIZE    block size bytes 
                                    482 ;   farptr   write address , byte* 
                                    483 ; output:
                                    484 ;	X 		after last byte written 
                                    485 ;   Y 		after last byte read 
                                    486 ;  farptr   point after block
                                    487 ;---------------------------------------------
      00016D                        488 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00016D                        489 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    490 	; local var 
                           000001   491 	XSAVE=1 
                           000002   492 	VSIZE=2 
      00016D                        493 write_block:
      00016D                        494 	_vars VSIZE
      00016D 52 02            [ 2]    1     sub sp,#VSIZE 
      00016F 1F 01            [ 2]  495 	ldw (XSAVE,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000171 1E 05            [ 2]  496 	ldw x,(BSIZE,sp) 
      000173 27 13            [ 1]  497 	jreq 9$
      000175 1E 01            [ 2]  498 1$:	ldw x,(XSAVE,sp)
      000177 90 F6            [ 1]  499 	ld a,(y)
      000179 CD 00 F8         [ 4]  500 	call write_byte 
      00017C 5C               [ 2]  501 	incw x 
      00017D 90 5C            [ 2]  502 	incw y 
      00017F 1F 01            [ 2]  503 	ldw (XSAVE,sp),x
      000181 1E 05            [ 2]  504 	ldw x,(BSIZE,sp)
      000183 5A               [ 2]  505 	decw x
      000184 1F 05            [ 2]  506 	ldw (BSIZE,sp),x 
      000186 26 ED            [ 1]  507 	jrne 1$
      000188                        508 9$:
      000188 1E 01            [ 2]  509 	ldw x,(XSAVE,sp)
      00018A CD 1B 96         [ 4]  510 	call incr_farptr
      00018D                        511 	_drop VSIZE
      00018D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00018F 81               [ 4]  512 	ret 
                                    513 
                                    514 
                                    515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    516 ;;   UART1 subroutines
                                    517 ;;   used for user interface 
                                    518 ;;   communication channel.
                                    519 ;;   settings: 
                                    520 ;;		115200 8N1 no flow control
                                    521 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    522 
                                    523 ;---------------------------------------------
                                    524 ; initialize UART1, 115200 8N1
                                    525 ; input:
                                    526 ;	none
                                    527 ; output:
                                    528 ;   none
                                    529 ;---------------------------------------------
      000190                        530 uart1_init:
      000190 72 1A 50 02      [ 1]  531     bset PA_DDR,#UART1_TX_PIN
      000194 72 1A 50 03      [ 1]  532     bset PA_CR1,#UART1_TX_PIN 
      000198 72 1A 50 04      [ 1]  533     bset PA_CR2,#UART1_TX_PIN 
                                    534 ; enable UART1 clock
      00019C 72 14 50 C7      [ 1]  535 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0001A0                        536 uart1_set_baud: 
                                    537 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    538 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0001A0 A6 E1            [ 1]  539 	ld a,#CLK_SWR_HSI
      0001A2 C1 50 C3         [ 1]  540 	cp a,CLK_CMSR 
      0001A5 27 0A            [ 1]  541 	jreq 2$ 
      0001A7                        542 1$: ; 8 Mhz 	
      0001A7 35 05 52 33      [ 1]  543 	mov UART1_BRR2,#0x05 ; must be loaded first
      0001AB 35 04 52 32      [ 1]  544 	mov UART1_BRR1,#0x4
      0001AF 20 08            [ 2]  545 	jra 3$
      0001B1                        546 2$: ; 16 Mhz 	
      0001B1 35 0B 52 33      [ 1]  547 	mov UART1_BRR2,#0x0b ; must be loaded first
      0001B5 35 08 52 32      [ 1]  548 	mov UART1_BRR1,#0x08
      0001B9                        549 3$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001B9 72 5F 52 31      [ 1]  550     clr UART1_DR
      0001BD 35 2C 52 35      [ 1]  551 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0001C1 72 10 52 35      [ 1]  552 	bset UART1_CR2,#UART_CR2_SBK
      0001C5 72 0D 52 30 FB   [ 2]  553     btjf UART1_SR,#UART_SR_TC,.
      0001CA 81               [ 4]  554     ret
                                    555 
                                    556 ;---------------------------------
                                    557 ; send character to UART1 
                                    558 ; input:
                                    559 ;   A 
                                    560 ; output:
                                    561 ;   none 
                                    562 ;--------------------------------	
      0001CB                        563 putc:
      0001CB 72 0F 52 30 FB   [ 2]  564 	btjf UART1_SR,#UART_SR_TXE,.
      0001D0 C7 52 31         [ 1]  565 	ld UART1_DR,a 
      0001D3 81               [ 4]  566 	ret 
                                    567 
                                    568 ;---------------------------------
                                    569 ; wait character from UART1 
                                    570 ; input:
                                    571 ;   none
                                    572 ; output:
                                    573 ;   A 			char  
                                    574 ;--------------------------------	
      0001D4                        575 getc:
      0001D4 C6 00 27         [ 1]  576 	ld a,rx_char 
      0001D7 27 FB            [ 1]  577 	jreq getc 
      0001D9 72 5F 00 27      [ 1]  578 	clr rx_char 
      0001DD 81               [ 4]  579 	ret 
                                    580 
                                    581 ;-----------------------------
                                    582 ; send an ASCIZ string to UART1 
                                    583 ; input: 
                                    584 ;   x 		char * 
                                    585 ; output:
                                    586 ;   none 
                                    587 ;-------------------------------
      0001DE                        588 puts:
      0001DE F6               [ 1]  589     ld a,(x)
      0001DF 27 06            [ 1]  590 	jreq 1$
      0001E1 CD 01 CB         [ 4]  591 	call putc 
      0001E4 5C               [ 2]  592 	incw x 
      0001E5 20 F7            [ 2]  593 	jra puts 
      0001E7 81               [ 4]  594 1$:	ret 
                                    595 
                                    596 
                                    597 ;---------------------------
                                    598 ; delete character at left 
                                    599 ; of cursor on terminal 
                                    600 ; input:
                                    601 ;   none 
                                    602 ; output:
                                    603 ;	none 
                                    604 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E8                        605 bksp:
      0001E8 A6 08            [ 1]  606 	ld a,#BSP 
      0001EA CD 01 CB         [ 4]  607 	call putc 
      0001ED A6 20            [ 1]  608 	ld a,#SPACE 
      0001EF CD 01 CB         [ 4]  609 	call putc 
      0001F2 A6 08            [ 1]  610 	ld a,#BSP 
      0001F4 CD 01 CB         [ 4]  611 	call putc 
      0001F7 81               [ 4]  612 	ret 
                                    613 ;---------------------------
                                    614 ; delete n character left of cursor 
                                    615 ; at terminal.
                                    616 ; input: 
                                    617 ;   A   number of characters to delete.
                                    618 ; output:
                                    619 ;    none 
                                    620 ;--------------------------	
      0001F8                        621 delete:
      0001F8 88               [ 1]  622 	push a 
      0001F9 0D 01            [ 1]  623 0$:	tnz (1,sp)
      0001FB 27 07            [ 1]  624 	jreq 1$
      0001FD CD 01 E8         [ 4]  625 	call bksp 
      000200 0A 01            [ 1]  626 	dec (1,sp)
      000202 20 F5            [ 2]  627 	jra 0$
      000204 84               [ 1]  628 1$:	pop a 
      000205 81               [ 4]  629 	ret
                                    630 
                                    631 ;--------------------------
                                    632 ; print n spaces on terminal
                                    633 ; input:
                                    634 ;  X 		number of spaces 
                                    635 ; output:
                                    636 ;	none 
                                    637 ;---------------------------
      000206                        638 spaces:
      000206 A6 20            [ 1]  639 	ld a,#SPACE 
      000208 5D               [ 2]  640 1$:	tnzw x
      000209 27 06            [ 1]  641 	jreq 9$
      00020B CD 01 CB         [ 4]  642 	call putc 
      00020E 5A               [ 2]  643 	decw x
      00020F 20 F7            [ 2]  644 	jra 1$
      000211                        645 9$: 
      000211 81               [ 4]  646 	ret 
                                    647 
                           000001   648 .if DEBUG 
                                    649 ;---------------------------------
                                    650 ;; print actual registers states 
                                    651 ;; as pushed on stack 
                                    652 ;; {Y,X,CC,A}
                                    653 ;---------------------------------
      000212                        654 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      000212                        655 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      000212                        656 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000212                        657 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      000212                        658 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      000212                        659 prt_regs:
      000212 AE 02 55         [ 2]  660 	ldw x,#regs_state 
      000215 CD 01 DE         [ 4]  661 	call puts
                                    662 ; register PC
      000218 16 01            [ 2]  663 	ldw y,(1,sp)
      00021A AE 09 B3         [ 2]  664 	ldw x,#REG_EPC 
      00021D CD 09 04         [ 4]  665 	call prt_reg16 
                                    666 ; register CC 
      000220 7B 08            [ 1]  667 	ld a,(R_CC,sp)
      000222 AE 09 C4         [ 2]  668 	ldw x,#REG_CC 
      000225 CD 08 DF         [ 4]  669 	call prt_reg8 
                                    670 ; register A 
      000228 7B 07            [ 1]  671 	ld a,(R_A,sp)
      00022A AE 09 C0         [ 2]  672 	ldw x,#REG_A 
      00022D CD 08 DF         [ 4]  673 	call prt_reg8 
                                    674 ; register X 
      000230 16 05            [ 2]  675 	ldw y,(R_X,sp)
      000232 AE 09 BC         [ 2]  676 	ldw x,#REG_X 
      000235 CD 09 04         [ 4]  677 	call prt_reg16 
                                    678 ; register Y 
      000238 16 03            [ 2]  679 	ldw y,(R_Y,sp)
      00023A AE 09 B8         [ 2]  680 	ldw x,#REG_Y 
      00023D CD 09 04         [ 4]  681 	call prt_reg16 
                                    682 ; register SP 
      000240 90 96            [ 1]  683 	ldw y,sp
      000242 72 A9 00 08      [ 2]  684 	addw y,#6+ARG_OFS  
      000246 AE 09 C9         [ 2]  685 	ldw x,#REG_SP
      000249 CD 09 04         [ 4]  686 	call prt_reg16
      00024C A6 0D            [ 1]  687 	ld a,#CR 
      00024E CD 01 CB         [ 4]  688 	call putc
      000251 CD 01 CB         [ 4]  689 	call putc   
      000254 81               [ 4]  690 	ret 
                                    691 
      000255 0A 72 65 67 69 73 74   692 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    693 
                                    694 
                                    695 ;--------------------
                                    696 ; print content at address in hex.
                                    697 ; input:
                                    698 ;   X 	address to peek 
                                    699 ; output:
                                    700 ;	none 
                                    701 ;--------------------	
      00027C                        702 prt_peek:
      00027C 89               [ 2]  703 	pushw x 
      00027D CF 00 0C         [ 2]  704 	ldw acc16,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      000280 72 5F 00 0B      [ 1]  705 	clr acc24 
      000284 5F               [ 1]  706 	clrw x 
      000285 A6 10            [ 1]  707 	ld a,#16 
      000287 CD 09 CE         [ 4]  708 	call prti24 
      00028A A6 3A            [ 1]  709 	ld a,#': 
      00028C CD 01 CB         [ 4]  710 	call putc 
      00028F A6 20            [ 1]  711 	ld a,#SPACE 
      000291 CD 01 CB         [ 4]  712 	call putc 
      000294 85               [ 2]  713 	popw x 
      000295 F6               [ 1]  714 	ld a,(x)
      000296 C7 00 0D         [ 1]  715 	ld acc8,a 
      000299 5F               [ 1]  716 	clrw x 
      00029A A6 10            [ 1]  717 	ld a,#16 
      00029C CD 09 CE         [ 4]  718 	call prti24
      00029F 81               [ 4]  719 	ret 
                                    720 .endif ; DEBUG  
                                    721 
                                    722 ;-------------------------------------
                                    723 ; retrun string length
                                    724 ; input:
                                    725 ;   X         .asciz  pointer 
                                    726 ; output:
                                    727 ;   X         length 
                                    728 ;-------------------------------------
      0002A0                        729 strlen:
      0002A0 90 93            [ 1]  730 	ldw y,x 
      0002A2 5F               [ 1]  731 	clrw x 
      0002A3 90 7D            [ 1]  732 1$:	tnz (y) 
      0002A5 27 05            [ 1]  733 	jreq 9$ 
      0002A7 5C               [ 2]  734 	incw x
      0002A8 90 5C            [ 2]  735 	incw y 
      0002AA 20 F7            [ 2]  736 	jra 1$ 
      0002AC 81               [ 4]  737 9$: ret 
                                    738 
                                    739 ;------------------------------------
                                    740 ; compare 2 strings
                                    741 ; input:
                                    742 ;   X 		char* first string 
                                    743 ;   Y       char* second string 
                                    744 ; output:
                                    745 ;   A 		0|1 
                                    746 ;-------------------------------------
      0002AD                        747 strcmp:
      0002AD F6               [ 1]  748 	ld a,(x)
      0002AE 27 0B            [ 1]  749 	jreq 5$ 
      0002B0 90 F1            [ 1]  750 	cp a,(y) 
      0002B2 26 05            [ 1]  751 	jrne 4$ 
      0002B4 5C               [ 2]  752 	incw x 
      0002B5 90 5C            [ 2]  753 	incw y 
      0002B7 20 F4            [ 2]  754 	jra strcmp 
      0002B9                        755 4$: ; not same  
      0002B9 4F               [ 1]  756 	clr a 
      0002BA 81               [ 4]  757 	ret 
      0002BB                        758 5$: ; same 
      0002BB A6 01            [ 1]  759 	ld a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002BD 81               [ 4]  760 	ret 
                                    761 
                                    762 
                                    763 ;---------------------------------------
                                    764 ;  copy src to dest 
                                    765 ; input:
                                    766 ;   X 		dest 
                                    767 ;   Y 		src 
                                    768 ; output: 
                                    769 ;   X 		dest 
                                    770 ;----------------------------------
      0002BE                        771 strcpy:
      0002BE 89               [ 2]  772 	pushw x 
      0002BF 90 F6            [ 1]  773 1$: ld a,(y)
      0002C1 27 06            [ 1]  774 	jreq 9$ 
      0002C3 F7               [ 1]  775 	ld (x),a 
      0002C4 5C               [ 2]  776 	incw x 
      0002C5 90 5C            [ 2]  777 	incw y 
      0002C7 20 F6            [ 2]  778 	jra 1$ 
      0002C9 7F               [ 1]  779 9$:	clr (x)
      0002CA 85               [ 2]  780 	popw x 
      0002CB 81               [ 4]  781 	ret 
                                    782 
                                    783 ;---------------------------------------
                                    784 ; move memory block 
                                    785 ; input:
                                    786 ;   X 		destination 
                                    787 ;   Y 	    source 
                                    788 ;   acc16	bytes count 
                                    789 ; output:
                                    790 ;   none 
                                    791 ;--------------------------------------
                           000001   792 	INCR=1 ; increament high byte 
                           000002   793 	LB=2 ; increament low byte 
                           000002   794 	VSIZE=2
      0002CC                        795 move:
      0002CC                        796 	_vars VSIZE 
      0002CC 52 02            [ 2]    1     sub sp,#VSIZE 
      0002CE 0F 01            [ 1]  797 	clr (INCR,sp)
      0002D0 0F 02            [ 1]  798 	clr (LB,sp)
      0002D2 90 89            [ 2]  799 	pushw y 
      0002D4 13 01            [ 2]  800 	cpw x,(1,sp) ; compare DEST to SRC 
      0002D6 90 85            [ 2]  801 	popw y 
      0002D8 27 31            [ 1]  802 	jreq move_exit ; x==y 
      0002DA 2B 0E            [ 1]  803 	jrmi move_down
      0002DC                        804 move_up: ; start from top address with incr=-1
      0002DC 72 BB 00 0C      [ 2]  805 	addw x,acc16
      0002E0 72 B9 00 0C      [ 2]  806 	addw y,acc16
      0002E4 03 01            [ 1]  807 	cpl (INCR,sp)
      0002E6 03 02            [ 1]  808 	cpl (LB,sp)   ; increment = -1 
      0002E8 20 05            [ 2]  809 	jra move_loop  
      0002EA                        810 move_down: ; start from bottom address with incr=1 
      0002EA 5A               [ 2]  811     decw x 
      0002EB 90 5A            [ 2]  812 	decw y
      0002ED 0C 02            [ 1]  813 	inc (LB,sp) ; incr=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0002EF                        814 move_loop:	
      0002EF C6 00 0C         [ 1]  815     ld a, acc16 
      0002F2 CA 00 0D         [ 1]  816 	or a, acc8
      0002F5 27 14            [ 1]  817 	jreq move_exit 
      0002F7 72 FB 01         [ 2]  818 	addw x,(INCR,sp)
      0002FA 72 F9 01         [ 2]  819 	addw y,(INCR,sp) 
      0002FD 90 F6            [ 1]  820 	ld a,(y)
      0002FF F7               [ 1]  821 	ld (x),a 
      000300 89               [ 2]  822 	pushw x 
      000301 CE 00 0C         [ 2]  823 	ldw x,acc16 
      000304 5A               [ 2]  824 	decw x 
      000305 CF 00 0C         [ 2]  825 	ldw acc16,x 
      000308 85               [ 2]  826 	popw x 
      000309 20 E4            [ 2]  827 	jra move_loop
      00030B                        828 move_exit:
      00030B                        829 	_drop VSIZE
      00030B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00030D 81               [ 4]  830 	ret 	
                                    831 
                                    832 ;-------------------------------------
                                    833 ; search text area for a line with 
                                    834 ; same number as line#  
                                    835 ; input:
                                    836 ;	X 			line# 
                                    837 ; output:
                                    838 ;   X 			addr of line | 0 
                                    839 ;   Y           line#|insert address if not found  
                                    840 ;-------------------------------------
                           000001   841 	LL=1 ; line length 
                           000002   842 	LB=2 ; line length low byte 
                           000002   843 	VSIZE=2 
      00030E                        844 search_lineno:
      00030E                        845 	_vars VSIZE
      00030E 52 02            [ 2]    1     sub sp,#VSIZE 
      000310 0F 01            [ 1]  846 	clr (LL,sp)
      000312 90 CE 00 1E      [ 2]  847 	ldw y,txtbgn
      000316                        848 search_ln_loop:
      000316 90 C3 00 20      [ 2]  849 	cpw y,txtend 
      00031A 2A 10            [ 1]  850 	jrpl 8$
      00031C 90 F3            [ 1]  851 	cpw x,(y)
      00031E 27 0E            [ 1]  852 	jreq 9$
      000320 2B 0A            [ 1]  853 	jrmi 8$ 
      000322 90 E6 02         [ 1]  854 	ld a,(2,y)
      000325 6B 02            [ 1]  855 	ld (LB,sp),a 
      000327 72 F9 01         [ 2]  856 	addw y,(LL,sp)
      00032A 20 EA            [ 2]  857 	jra search_ln_loop 
      00032C                        858 8$: 
      00032C 5F               [ 1]  859 	clrw x 	
      00032D 51               [ 1]  860 	exgw x,y 
      00032E                        861 9$: _drop VSIZE
      00032E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000330 51               [ 1]  862 	exgw x,y   
      000331 81               [ 4]  863 	ret 
                                    864 
                                    865 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    866 ; delete line at addr
                                    867 ; move new line to insert with end of text 
                                    868 ; otherwise it would be overwritten.
                                    869 ; input:
                                    870 ;   X 		addr of line i.e DEST for move 
                                    871 ;-------------------------------------
                           000001   872 	LLEN=1
                           000003   873 	SRC=3
                           000004   874 	VSIZE=4
      000332                        875 del_line: 
      000332                        876 	_vars VSIZE 
      000332 52 04            [ 2]    1     sub sp,#VSIZE 
      000334 E6 02            [ 1]  877 	ld a,(2,x) ; line length
      000336 6B 02            [ 1]  878 	ld (LLEN+1,sp),a 
      000338 0F 01            [ 1]  879 	clr (LLEN,sp)
      00033A 90 93            [ 1]  880 	ldw y,x  
      00033C 72 F9 01         [ 2]  881 	addw y,(LLEN,sp) ;SRC  
      00033F 17 03            [ 2]  882 	ldw (SRC,sp),y  ;save source 
      000341 90 CE 00 20      [ 2]  883 	ldw y,txtend 
      000345 90 E6 02         [ 1]  884 	ld a,(2,y)
      000348 90 5F            [ 1]  885 	clrw y 
      00034A 90 97            [ 1]  886 	ld yl,a  
      00034C 72 B9 00 20      [ 2]  887 	addw y,txtend
      000350 72 F2 03         [ 2]  888 	subw y,(SRC,sp) ; y=count 
      000353 90 CF 00 0C      [ 2]  889 	ldw acc16,y 
      000357 16 03            [ 2]  890 	ldw y,(SRC,sp)    ; source
      000359 CD 02 CC         [ 4]  891 	call move
      00035C 90 CE 00 20      [ 2]  892 	ldw y,txtend 
      000360 72 F2 01         [ 2]  893 	subw y,(LLEN,sp)
      000363 90 CF 00 20      [ 2]  894 	ldw txtend,y  
      000367                        895 	_drop VSIZE     
      000367 5B 04            [ 2]    1     addw sp,#VSIZE 
      000369 81               [ 4]  896 	ret 
                                    897 
                                    898 ;---------------------------------------------
                                    899 ; create a gap in text area 
                                    900 ; move new line to insert in gap with end of text
                                    901 ; otherwise it would be overwritten.
                                    902 ; input:
                                    903 ;    X 			addr gap start 
                                    904 ;    Y 			gap length 
                                    905 ; output:
                                    906 ;    X 			addr gap start 
                                    907 ;--------------------------------------------
                           000001   908 	DEST=1
                           000003   909 	SRC=3
                           000005   910 	LEN=5
                           000006   911 	VSIZE=6 
      00036A                        912 create_gap:
      00036A                        913 	_vars VSIZE
      00036A 52 06            [ 2]    1     sub sp,#VSIZE 
      00036C 1F 03            [ 2]  914 	ldw (SRC,sp),x 
      00036E 17 05            [ 2]  915 	ldw (LEN,sp),y 
      000370 90 CF 00 0C      [ 2]  916 	ldw acc16,y 
      000374 90 93            [ 1]  917 	ldw y,x ; SRC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000376 72 BB 00 0C      [ 2]  918 	addw x,acc16  
      00037A 1F 01            [ 2]  919 	ldw (DEST,sp),x 
                                    920 ;compute size to move 	
      00037C CE 00 20         [ 2]  921 	ldw x,txtend 
      00037F E6 02            [ 1]  922 	ld a,(2,x) ; pending line length 
      000381 C7 00 0D         [ 1]  923 	ld acc8,a 
      000384 72 5F 00 0C      [ 1]  924 	clr acc16 
      000388 72 BB 00 0C      [ 2]  925 	addw x,acc16 
      00038C 72 F0 03         [ 2]  926 	subw x,(SRC,sp)
      00038F CF 00 0C         [ 2]  927 	ldw acc16,x ; size to move
      000392 1E 01            [ 2]  928 	ldw x,(DEST,sp) 
      000394 CD 02 CC         [ 4]  929 	call move
      000397 CE 00 20         [ 2]  930 	ldw x,txtend
      00039A 72 FB 05         [ 2]  931 	addw x,(LEN,sp)
      00039D CF 00 20         [ 2]  932 	ldw txtend,x
      0003A0                        933 9$:	_drop VSIZE 
      0003A0 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A2 81               [ 4]  934 	ret 
                                    935 
                                    936 
                                    937 ;--------------------------------------------
                                    938 ; insert line in tib into text area 
                                    939 ; first search for already existing 
                                    940 ; replace existing 
                                    941 ; if strlen(tib)==0 delete existing line
                                    942 ; input:
                                    943 ;   ptr16 				pointer to tokenized line  
                                    944 ; output:
                                    945 ;   none
                                    946 ;---------------------------------------------
                           000001   947 	DEST=1  ; text area insertion address 
                           000003   948 	SRC=3   ; str to insert address 
                           000005   949 	LINENO=5 ; line number 
                           000007   950 	LLEN=7 ; line length 
                           000008   951 	VSIZE=8  
      0003A3                        952 insert_line:
      0003A3                        953 	_vars VSIZE 
      0003A3 52 08            [ 2]    1     sub sp,#VSIZE 
      0003A5 CE 00 17         [ 2]  954 	ldw x,ptr16  
      0003A8 C3 00 1E         [ 2]  955 	cpw x,txtbgn 
      0003AB 26 0D            [ 1]  956 	jrne 0$
                                    957 ;first text line 
      0003AD AE 00 02         [ 2]  958 	ldw x,#2 
      0003B0 72 D6 00 17      [ 4]  959 	ld a,([ptr16],x)
      0003B4 5F               [ 1]  960 	clrw x 
      0003B5 97               [ 1]  961 	ld xl,a
      0003B6 1F 07            [ 2]  962 	ldw (LLEN,sp),x  
      0003B8 20 45            [ 2]  963 	jra 5$
      0003BA 72 CE 00 17      [ 5]  964 0$:	ldw x,[ptr16]
                                    965 ; new line number
      0003BE 1F 05            [ 2]  966 	ldw (LINENO,sp),x 
      0003C0 AE 00 02         [ 2]  967 	ldw x,#2 
      0003C3 72 D6 00 17      [ 4]  968 	ld a,([ptr16],x)
      0003C7 97               [ 1]  969 	ld xl,a
                                    970 ; new line length
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003C8 1F 07            [ 2]  971 	ldw (LLEN,sp),x
                                    972 ; check if that line number already exit 	
      0003CA 1E 05            [ 2]  973 	ldw x,(LINENO,sp)
      0003CC CD 03 0E         [ 4]  974 	call search_lineno 
      0003CF 5D               [ 2]  975 	tnzw x 
      0003D0 26 04            [ 1]  976 	jrne 2$
                                    977 ; line doesn't exit
                                    978 ; it will be inserted at this point.  	
      0003D2 17 01            [ 2]  979 	ldw (DEST,sp),y 
      0003D4 20 05            [ 2]  980 	jra 3$
                                    981 ; line exit delete it.
                                    982 ; it will be replaced by new one 	
      0003D6 1F 01            [ 2]  983 2$: ldw (DEST,sp),x 
      0003D8 CD 03 32         [ 4]  984 	call del_line
      0003DB                        985 3$: 
                                    986 ; insert new line or leave if LLEN==3
                                    987 ; LLEN==3 means empty line 
      0003DB A6 03            [ 1]  988 	ld a,#3
      0003DD 11 08            [ 1]  989 	cp a,(LLEN+1,sp)
      0003DF 27 27            [ 1]  990 	jreq insert_ln_exit ; empty line exit.
                                    991 ; if insertion point at txtend 
                                    992 ; no move required 
      0003E1 1E 01            [ 2]  993 	ldw x,(DEST,sp)
      0003E3 C3 00 20         [ 2]  994 	cpw x,txtend 
      0003E6 2A 17            [ 1]  995 	jrpl 5$ 
                                    996 ; must create a gap
                                    997 ; at insertion point  
      0003E8 1E 01            [ 2]  998 	ldw x,(DEST,sp)
      0003EA 16 07            [ 2]  999 	ldw y,(LLEN,sp)
      0003EC CD 03 6A         [ 4] 1000 	call create_gap 
                                   1001 ; move new line in gap 
      0003EF 1E 07            [ 2] 1002 	ldw x,(LLEN,sp)
      0003F1 CF 00 0C         [ 2] 1003 	ldw acc16,x 
      0003F4 90 CE 00 20      [ 2] 1004 	ldw y,txtend ;SRC 
      0003F8 1E 01            [ 2] 1005 	ldw x,(DEST,sp) ; dest address 
      0003FA CD 02 CC         [ 4] 1006 	call move 
      0003FD 20 09            [ 2] 1007 	jra insert_ln_exit  
      0003FF                       1008 5$: ; no move required 
      0003FF 1E 07            [ 2] 1009 	ldw x,(LLEN,sp) 
      000401 72 BB 00 20      [ 2] 1010 	addw x,txtend 
      000405 CF 00 20         [ 2] 1011 	ldw txtend,x 
      000408                       1012 insert_ln_exit:	
      000408                       1013 	_drop VSIZE
      000408 5B 08            [ 2]    1     addw sp,#VSIZE 
      00040A 81               [ 4] 1014 	ret
                                   1015 
                                   1016 
                                   1017 ;-----------------------------
                                   1018 ; check if text buffer full
                                   1019 ; input:
                                   1020 ;   ptr16     addr start tokenize line 
                                   1021 ;   X         buffer index 
                                   1022 ; output:
                                   1023 ;   none 
                                   1024 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00040B                       1025 check_full:
      00040B 72 BB 00 17      [ 2] 1026 	addw x,ptr16 
      00040F A3 16 E8         [ 2] 1027 	cpw x,#tib 
      000412 25 05            [ 1] 1028 	jrult 1$
      000414 A6 01            [ 1] 1029 	ld a,#ERR_MEM_FULL
      000416 CC 07 BA         [ 2] 1030 	jp tb_error 
      000419 81               [ 4] 1031 1$: ret 
                                   1032 
                                   1033 
                                   1034 ;-----------------------------------
                                   1035 ; create token list form text line 
                                   1036 ; save this list in text area
                                   1037 ;  compiled line format: 
                                   1038 ;    line_no  2 bytes {0...32767}
                                   1039 ;    count    1 byte 
                                   1040 ;    tokens   variable 
                                   1041 ;   
                                   1042 ; input:
                                   1043 ;   none
                                   1044 ; output:
                                   1045 ;   basicptr     token list buffer address 
                                   1046 ;   in.w  		 cleared, index in buffer 
                                   1047 ;-----------------------------------
                           000001  1048 	XSAVE=1
                           000003  1049 	BUFIDX=3
                           000004  1050 	VSIZE=4
      00041A                       1051 compile:
      00041A                       1052 	_vars VSIZE 
      00041A 52 04            [ 2]    1     sub sp,#VSIZE 
      00041C 72 1A 00 25      [ 1] 1053 	bset flags,#FCOMP 
      000420 CE 00 20         [ 2] 1054 	ldw x,txtend
      000423 CF 00 17         [ 2] 1055 	ldw ptr16,x ; code buffer start address 
      000426 5F               [ 1] 1056 	clrw x 
      000427 AE 00 03         [ 2] 1057 	ldw x,#3
      00042A 1F 03            [ 2] 1058 	ldw (BUFIDX,sp),X  
      00042C CD 04 0B         [ 4] 1059 	call check_full
      00042F 5F               [ 1] 1060 	clrw x 
      000430 72 CF 00 17      [ 5] 1061 	ldw [ptr16],x ; initialize line# to zero 
      000434 CD 0D 7F         [ 4] 1062 	call get_token
      000437 1F 01            [ 2] 1063 	ldw (XSAVE,sp),x 
      000439 A1 04            [ 1] 1064 	cp a,#TK_INTGR 
      00043B 26 13            [ 1] 1065 	jrne 3$
      00043D A3 00 00         [ 2] 1066 	cpw x,#0 
      000440 2C 05            [ 1] 1067 	jrsgt 1$
      000442 A6 0A            [ 1] 1068 	ld a,#ERR_BAD_VALUE 
      000444 CC 07 BA         [ 2] 1069 	jp tb_error ; line number must be in range {1..32767}
      000447 72 CF 00 17      [ 5] 1070 1$:	ldw [ptr16],x; line number
      00044B CD 0D 7F         [ 4] 1071 2$:	call get_token
      00044E 1F 01            [ 2] 1072 	ldw (XSAVE,sp),x 
      000450 A1 00            [ 1] 1073 3$:	cp a,#TK_NONE 
      000452 26 03            [ 1] 1074 	jrne 30$
      000454 CC 04 E5         [ 2] 1075 	jp 9$ ; end of line. 
      000457                       1076 30$: 	 
      000457 1E 03            [ 2] 1077 	ldw x,(BUFIDX,sp)
      000459 CD 04 0B         [ 4] 1078 	call check_full 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00045C 16 03            [ 2] 1079 	ldw y,(BUFIDX,sp) 
      00045E 91 D7 17         [ 4] 1080 	ld ([ptr16],y),a ; token attribute 
      000461 90 5C            [ 2] 1081 	incw y
      000463 17 03            [ 2] 1082 	ldw (BUFIDX,sp),y
      000465 A1 01            [ 1] 1083 	cp a,#TK_COLON 
      000467 26 02            [ 1] 1084 	jrne 31$
      000469 20 E0            [ 2] 1085 	jra 2$ ; loop for next token 
      00046B                       1086 31$: ; check for token type 
                                   1087 ; character token have 1 byte attribute, i.e. ASCII character 
      00046B A1 03            [ 1] 1088 	cp a,#TK_CHAR
      00046D 26 0C            [ 1] 1089 	jrne 32$ 
      00046F 1E 01            [ 2] 1090 	ldw x,(XSAVE,sp)
      000471 9F               [ 1] 1091 	ld a,xl 
      000472 91 D7 17         [ 4] 1092 	ld ([ptr16],y),a
      000475 90 5C            [ 2] 1093 	incw y 
      000477 17 03            [ 2] 1094 	ldw (BUFIDX,sp),y 
      000479 20 D0            [ 2] 1095 	jra 2$ 
      00047B                       1096 32$:
      00047B A1 02            [ 1] 1097 	cp a,#TK_ARRAY 
                                   1098 ; this token have not attribute. 
      00047D 27 CC            [ 1] 1099 	jreq 2$ 
      00047F A1 0A            [ 1] 1100 	cp a,#TK_QSTR 
      000481 26 25            [ 1] 1101 	jrne 4$
                                   1102 ; copy string as C string.	
      000483 AE 17 38         [ 2] 1103 	ldw x,#pad 
      000486 CD 02 A0         [ 4] 1104 	call strlen
      000489 5C               [ 2] 1105 	incw x  
      00048A CD 04 0B         [ 4] 1106 	call check_full 
      00048D 90 AE 17 38      [ 2] 1107 	ldw y,#pad 
      000491 CE 00 17         [ 2] 1108 	ldw x,ptr16
      000494 72 FB 03         [ 2] 1109 	addw x,(BUFIDX,sp)	
      000497 CD 02 BE         [ 4] 1110 	call strcpy 
      00049A AE 17 38         [ 2] 1111 	ldw x,#pad 
      00049D CD 02 A0         [ 4] 1112 	call strlen 
      0004A0 5C               [ 2] 1113 	incw x
      0004A1 72 FB 03         [ 2] 1114 	addw x,(BUFIDX,sp) 
      0004A4 1F 03            [ 2] 1115 	ldw (BUFIDX,sp),x
      0004A6 20 A3            [ 2] 1116 	jra 2$  
      0004A8 A1 04            [ 1] 1117 4$: cp a,#TK_INTGR
      0004AA 25 9F            [ 1] 1118 	jrult 2$ ; 
      0004AC A1 08            [ 1] 1119 	cp a,#TK_CFUNC 
      0004AE 22 9B            [ 1] 1120 	Jrugt 2$ ; those tokens have no attributes 
      0004B0 1E 01            [ 2] 1121 	ldw x,(XSAVE,sp) 
      0004B2 16 03            [ 2] 1122 	ldw y,(BUFIDX,sp)
      0004B4 91 DF 17         [ 5] 1123 	ldw ([ptr16],y),x ; the attribute is an address or integer. 
      0004B7 A3 17 49         [ 2] 1124 	cpw x,#rem ; is this a comment? 
      0004BA 27 09            [ 1] 1125 	jreq 5$	
      0004BC 72 A9 00 02      [ 2] 1126 	addw y,#2 
      0004C0 17 03            [ 2] 1127 	ldw (BUFIDX,sp),y 
      0004C2 CC 04 4B         [ 2] 1128 	jp 2$
      0004C5                       1129 5$:
                                   1130 ; copy commment in code buffer and
                                   1131 ; skip to end of line.  
      0004C5 72 A9 00 02      [ 2] 1132 	addw y,#2 ; skip exec address 
      0004C9 17 03            [ 2] 1133 	ldw (BUFIDX,sp),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      0004CB CE 00 17         [ 2] 1134 	ldw x,ptr16 
      0004CE 72 FB 03         [ 2] 1135 	addw x,(BUFIDX,sp)
      0004D1 90 CE 00 00      [ 2] 1136 	ldw y,in.w 
      0004D5 72 A9 16 E8      [ 2] 1137 	addw y,#tib 
      0004D9 CD 02 BE         [ 4] 1138 	call strcpy 	
      0004DC CD 02 A0         [ 4] 1139 	call strlen 
      0004DF 5C               [ 2] 1140 	incw x ; skip string 0. 
      0004E0 72 FB 03         [ 2] 1141 	addw x,(BUFIDX,sp)
      0004E3 1F 03            [ 2] 1142 	ldw (BUFIDX,sp),x 
      0004E5                       1143 9$: 
      0004E5 AE 00 02         [ 2] 1144 	ldw x,#2
      0004E8 16 03            [ 2] 1145 	ldw y,(BUFIDX,sp)
      0004EA 90 9F            [ 1] 1146 	ld a,yl 
      0004EC 72 D7 00 17      [ 4] 1147 	ld ([ptr16],x),a ; code byte count   	
      0004F0 72 CE 00 17      [ 5] 1148 	ldw x,[ptr16]
      0004F4 27 09            [ 1] 1149 	jreq 10$
      0004F6 CD 03 A3         [ 4] 1150 	call insert_line
      0004F9 72 5F 00 03      [ 1] 1151 	clr  count 
      0004FD 20 0F            [ 2] 1152 	jra  11$ 
      0004FF                       1153 10$: ; line# is zero 
      0004FF CE 00 17         [ 2] 1154 	ldw x,ptr16 
      000502 CF 00 04         [ 2] 1155 	ldw basicptr,x 
      000505 E6 02            [ 1] 1156 	ld a,(2,x)
      000507 C7 00 03         [ 1] 1157 	ld count,a 
      00050A 35 03 00 01      [ 1] 1158 	mov in,#3 
      00050E                       1159 11$:
      00050E                       1160 	_drop VSIZE 
      00050E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000510 72 1B 00 25      [ 1] 1161 	bres flags,#FCOMP 
      000514 81               [ 4] 1162 	ret 
                                   1163 
                                   1164 
                                   1165 ;------------------------------------
                                   1166 ;  set all variables to zero 
                                   1167 ; input:
                                   1168 ;   none 
                                   1169 ; output:
                                   1170 ;	none
                                   1171 ;------------------------------------
      000515                       1172 clear_vars:
      000515 AE 00 28         [ 2] 1173 	ldw x,#vars 
      000518 90 AE 00 34      [ 2] 1174 	ldw y,#2*26 
      00051C 7F               [ 1] 1175 1$:	clr (x)
      00051D 5C               [ 2] 1176 	incw x 
      00051E 90 5A            [ 2] 1177 	decw y 
      000520 26 FA            [ 1] 1178 	jrne 1$
      000522 81               [ 4] 1179 	ret 
                                   1180 
                                   1181 ;-------------------------------------
                                   1182 ; check if A is a letter 
                                   1183 ; input:
                                   1184 ;   A 			character to test 
                                   1185 ; output:
                                   1186 ;   C flag      1 true, 0 false 
                                   1187 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000523                       1188 is_alpha:
      000523 A1 41            [ 1] 1189 	cp a,#'A 
      000525 8C               [ 1] 1190 	ccf
      000526 24 0B            [ 1] 1191 	jrnc 9$ 
      000528 A1 5B            [ 1] 1192 	cp a,#'Z+1 
      00052A 25 07            [ 1] 1193 	jrc 9$ 
      00052C A1 61            [ 1] 1194 	cp a,#'a 
      00052E 8C               [ 1] 1195 	ccf 
      00052F 24 02            [ 1] 1196 	jrnc 9$
      000531 A1 7B            [ 1] 1197 	cp a,#'z+1   
      000533 81               [ 4] 1198 9$: ret 	
                                   1199 
                                   1200 ;-------------------------------------
                                   1201 ;  program initialization entry point 
                                   1202 ;-------------------------------------
                           000001  1203 	MAJOR=1
                           000000  1204 	MINOR=0
      000534 0A 0A 54 69 6E 79 20  1205 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00057A                       1206 cold_start:
                                   1207 ;set stack 
      00057A AE 17 FF         [ 2] 1208 	ldw x,#STACK_EMPTY
      00057D 94               [ 1] 1209 	ldw sp,x   
                                   1210 ; clear all ram 
      00057E 7F               [ 1] 1211 0$: clr (x)
      00057F 5A               [ 2] 1212 	decw x 
      000580 26 FC            [ 1] 1213 	jrne 0$
                                   1214 ; activate pull up on all inputs 
      000582 A6 FF            [ 1] 1215 	ld a,#255 
      000584 C7 50 03         [ 1] 1216 	ld PA_CR1,a 
      000587 C7 50 08         [ 1] 1217 	ld PB_CR1,a 
      00058A C7 50 0D         [ 1] 1218 	ld PC_CR1,a 
      00058D C7 50 12         [ 1] 1219 	ld PD_CR1,a 
      000590 C7 50 17         [ 1] 1220 	ld PE_CR1,a 
      000593 C7 50 1C         [ 1] 1221 	ld PF_CR1,a 
      000596 C7 50 21         [ 1] 1222 	ld PG_CR1,a 
      000599 C7 50 2B         [ 1] 1223 	ld PI_CR1,a
                                   1224 ; set LD2 pin as output and turn on LD2 
      00059C 72 1A 50 0D      [ 1] 1225     bset PC_CR1,#LED2_BIT
      0005A0 72 1A 50 0E      [ 1] 1226     bset PC_CR2,#LED2_BIT
      0005A4 72 1A 50 0C      [ 1] 1227     bset PC_DDR,#LED2_BIT
      0005A8 72 1A 50 0A      [ 1] 1228 	bset PC_ODR,#LED2_BIT 
                                   1229 ; disable schmitt triggers on Arduino CN4 analog inputs
      0005AC 55 00 3F 54 07   [ 1] 1230 	mov ADC_TDRL,0x3f
                                   1231 ; disable peripherals clocks
                                   1232 ;	clr CLK_PCKENR1 
                                   1233 ;	clr CLK_PCKENR2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005B1 72 5F 50 F2      [ 1] 1234 	clr AWU_TBR 
      0005B5 72 14 50 CA      [ 1] 1235 	bset CLK_PCKENR2,#2 ; enable LSI for beeper
                                   1236 ; select internal clock no divisor: 16 Mhz 	
      0005B9 A6 E1            [ 1] 1237 	ld a,#CLK_SWR_HSI 
      0005BB 5F               [ 1] 1238 	clrw x  
      0005BC CD 00 A4         [ 4] 1239     call clock_init 
      0005BF CD 00 C7         [ 4] 1240 	call timer4_init
      0005C2 CD 00 BA         [ 4] 1241 	call timer2_init
                                   1242 ; UART1 at 115200 BAUD
      0005C5 CD 01 90         [ 4] 1243 	call uart1_init
                                   1244 ; activate PE_4 (user button interrupt)
      0005C8 72 18 50 18      [ 1] 1245     bset PE_CR2,#USR_BTN_BIT 
                                   1246 ; display system information
      0005CC AE 05 34         [ 2] 1247 	ldw x,#software 
      0005CF CD 01 DE         [ 4] 1248 	call puts 
      0005D2 A6 01            [ 1] 1249 	ld a,#MAJOR 
      0005D4 C7 00 0D         [ 1] 1250 	ld acc8,a 
      0005D7 5F               [ 1] 1251 	clrw x 
      0005D8 CF 00 0B         [ 2] 1252 	ldw acc24,x 
      0005DB A6 0A            [ 1] 1253 	ld a,#10 
      0005DD CD 09 CE         [ 4] 1254 	call prti24 
      0005E0 A6 2E            [ 1] 1255 	ld a,#'.
      0005E2 CD 01 CB         [ 4] 1256 	call putc 
      0005E5 A6 00            [ 1] 1257 	ld a,#MINOR 
      0005E7 C7 00 0D         [ 1] 1258 	ld acc8,a 
      0005EA 5F               [ 1] 1259 	clrw x 
      0005EB CF 00 0B         [ 2] 1260 	ldw acc24,x 
      0005EE A6 0A            [ 1] 1261 	ld a,#10 
      0005F0 CD 09 CE         [ 4] 1262 	call prti24 
      0005F3 A6 0D            [ 1] 1263 	ld a,#CR 
      0005F5 CD 01 CB         [ 4] 1264 	call putc 
      0005F8 CD 1B A4         [ 4] 1265 	call seek_fdrive 
      0005FB 9A               [ 1] 1266 	rim 
      0005FC 72 5C 00 15      [ 1] 1267 	inc seedy+1 
      000600 72 5C 00 13      [ 1] 1268 	inc seedx+1 
      000604 CD 06 82         [ 4] 1269 	call clear_basic
      000607 CD 13 D4         [ 4] 1270 	call ubound 
      00060A CD 10 1E         [ 4] 1271 	call dpop 
      00060D CF 00 23         [ 2] 1272 	ldw array_size,x
                                   1273 ; 200 msec beep
      000610 AE 03 DC         [ 2] 1274 	ldw x,#988 
      000613 CD 10 11         [ 4] 1275 	call dpush 
      000616 AE 00 96         [ 2] 1276 	ldw x,#150 
      000619 CD 10 11         [ 4] 1277 	call dpush 
      00061C CD 1A 07         [ 4] 1278 	call beep 
      00061F 72 1B 50 0A      [ 1] 1279 	bres PC_ODR,#LED2_BIT	
      000623 CD 06 2C         [ 4] 1280 	call warm_init
      000626 CD 06 49         [ 4] 1281 	call load_autorun
      000629 CC 07 FE         [ 2] 1282     jp interp 
                                   1283 
      00062C                       1284 warm_init:
      00062C 72 5F 00 25      [ 1] 1285 	clr flags 
      000630 72 5F 00 22      [ 1] 1286 	clr loop_depth 
      000634 AE 17 80         [ 2] 1287 	ldw x,#dstack_empty 
      000637 CF 00 1C         [ 2] 1288 	ldw dstkptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00063A 35 04 00 26      [ 1] 1289 	mov tab_width,#TAB_WIDTH 
      00063E 35 0A 00 0A      [ 1] 1290 	mov base,#10 
      000642 AE 16 E8         [ 2] 1291 	ldw x,#tib 
      000645 CF 00 04         [ 2] 1292 	ldw basicptr,x 
      000648 81               [ 4] 1293 	ret 
                                   1294 
                                   1295 ;--------------------------
                                   1296 ; if autorun file defined 
                                   1297 ; in eeprom address AUTORUN_NAME 
                                   1298 ; load and run it.
                                   1299 ;-------------------------
      000649                       1300 load_autorun:
      000649 AE 40 00         [ 2] 1301 	ldw x,#AUTORUN_NAME
      00064C F6               [ 1] 1302 	ld a,(x)
      00064D 27 1D            [ 1] 1303 	jreq 9$
      00064F 90 AE 40 00      [ 2] 1304 	ldw y,#AUTORUN_NAME
      000653 CD 1C 02         [ 4] 1305 	call search_file
      000656 25 02            [ 1] 1306 	jrc 2$ 
      000658 20 12            [ 2] 1307 	jra 9$ 
      00065A CD 1D 11         [ 4] 1308 2$:	call load_file
      00065D AE 40 00         [ 2] 1309 	ldw x,#AUTORUN_NAME 
      000660 CD 01 DE         [ 4] 1310 	call puts
      000663 AE 06 6D         [ 2] 1311 	ldw x,#autorun_msg 
      000666 CD 01 DE         [ 4] 1312 	call puts 
      000669 CC 19 C7         [ 2] 1313 	jp run_it    
      00066C 81               [ 4] 1314 9$: ret 	
                                   1315 
      00066D 20 6C 6F 61 64 65 64  1316 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1317 ;---------------------------
                                   1318 ; reset BASIC text variables 
                                   1319 ; and clear variables 
                                   1320 ;---------------------------
      000682                       1321 clear_basic:
      000682 72 5F 00 03      [ 1] 1322 	clr count 
      000686 AE 00 5C         [ 2] 1323 	ldw x,#free_ram 
      000689 CF 00 1E         [ 2] 1324 	ldw txtbgn,x 
      00068C CF 00 20         [ 2] 1325 	ldw txtend,x 
      00068F CD 05 15         [ 4] 1326 	call clear_vars 
      000692 81               [ 4] 1327 	ret 
                                   1328 
                                   1329 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1330 ;;   Tiny BASIC error messages     ;;
                                   1331 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000693                       1332 err_msg:
      000693 00 00 06 AD 06 BB 06  1333 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             CA 06 E4 06 F4
      00069F 07 0B 07 22 07 3D 07  1334 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             4F 07 61
      0006A9 07 6E 07 A2           1335 	.word err_no_access,err_no_data  
                                   1336 
      0006AD 0A 4D 65 6D 6F 72 79  1337 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      0006BB 0A 73 79 6E 74 61 78  1338 err_syntax: .asciz "\nsyntax error\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



             20 65 72 72 6F 72 0A
             00
      0006CA 0A 6D 61 74 68 20 6F  1339 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      0006E4 0A 64 69 76 69 73 69  1340 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      0006F4 0A 69 6E 76 61 6C 69  1341 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      00070B 0A 72 75 6E 20 74 69  1342 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000722 0A 63 6F 6D 6D 61 6E  1343 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      00073D 0A 64 75 70 6C 69 63  1344 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      00074F 0A 46 69 6C 65 20 6E  1345 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      000761 0A 62 61 64 20 76 61  1346 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      00076E 0A 46 69 6C 65 20 69  1347 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
      0007A2 0A 4E 6F 20 64 61 74  1348 err_no_data: .asciz "\nNo data line found.\n"
             61 20 6C 69 6E 65 20
             66 6F 75 6E 64 2E 0A
             00
                                   1349 
                                   1350 ;rt_msg: .asciz "last token id: "
                                   1351 
      0007B8                       1352 syntax_error:
      0007B8 A6 02            [ 1] 1353 	ld a,#ERR_SYNTAX 
                                   1354 
      0007BA                       1355 tb_error:
      0007BA AE 06 93         [ 2] 1356 	ldw x, #err_msg 
      0007BD 72 5F 00 0C      [ 1] 1357 	clr acc16 
      0007C1 48               [ 1] 1358 	sll a
      0007C2 72 59 00 0C      [ 1] 1359 	rlc acc16  
      0007C6 C7 00 0D         [ 1] 1360 	ld acc8, a 
      0007C9 72 BB 00 0C      [ 2] 1361 	addw x,acc16 
      0007CD FE               [ 2] 1362 	ldw x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0007CE CD 01 DE         [ 4] 1363 	call puts
      0007D1 72 0B 00 25 18   [ 2] 1364 	btjf flags,#FCOMP, 1$
      0007D6 AE 16 E8         [ 2] 1365 	ldw x,#tib
      0007D9 CD 01 DE         [ 4] 1366 	call puts 
      0007DC A6 0D            [ 1] 1367 	ld a,#CR 
      0007DE CD 01 CB         [ 4] 1368 	call putc
      0007E1 CE 00 00         [ 2] 1369 	ldw x,in.w
      0007E4 CD 02 06         [ 4] 1370 	call spaces
      0007E7 A6 5E            [ 1] 1371 	ld a,#'^
      0007E9 CD 01 CB         [ 4] 1372 	call putc 
      0007EC 20 09            [ 2] 1373 	jra 6$
      0007EE CE 00 04         [ 2] 1374 1$:	ldw x,basicptr
      0007F1 C6 00 01         [ 1] 1375 	ld a,in 
      0007F4 CD 14 F3         [ 4] 1376 	call prt_basic_line
                                   1377 ;	ldw x,#rt_msg 
                                   1378 ;	call puts 
                                   1379 ;	clrw x 
                                   1380 ;	ld a,in.saved 
                                   1381 ;	ld xl,a 
                                   1382 ;	ld a,([basicptr],x)
                                   1383 ;	clrw x 
                                   1384 ;	ld xl,a 
                                   1385 ;	call print_int 
      0007F7 AE 17 FF         [ 2] 1386 6$: ldw x,#STACK_EMPTY 
      0007FA 94               [ 1] 1387     ldw sp,x
      0007FB                       1388 warm_start:
      0007FB CD 06 2C         [ 4] 1389 	call warm_init
                                   1390 ;----------------------------
                                   1391 ;   BASIC interpreter
                                   1392 ;----------------------------
      0007FE                       1393 interp:
      0007FE 72 5F 00 00      [ 1] 1394 	clr in.w
      000802 72 01 00 25 23   [ 2] 1395 	btjf flags,#FRUN,cmd_line
                                   1396 ; flag FRUN is set 
                                   1397 ; running program
                                   1398 ; goto next basic line 
      000807 CE 00 04         [ 2] 1399 	ldw x,basicptr
      00080A E6 02            [ 1] 1400 	ld a,(2,x) ; line length 
      00080C C7 00 0D         [ 1] 1401 	ld acc8,a 
      00080F 72 5F 00 0C      [ 1] 1402 	clr acc16 
      000813 72 BB 00 0C      [ 2] 1403 	addw x,acc16
      000817 C3 00 20         [ 2] 1404 	cpw x,txtend 
      00081A 2A DF            [ 1] 1405 	jrpl warm_start
      00081C CF 00 04         [ 2] 1406 	ldw basicptr,x ; start of next line  
      00081F E6 02            [ 1] 1407 	ld a,(2,x)
      000821 C7 00 03         [ 1] 1408 	ld count,a 
      000824 35 03 00 01      [ 1] 1409 	mov in,#3 ; skip first 3 bytes of line 
      000828 20 14            [ 2] 1410 	jra interp_loop 
      00082A                       1411 cmd_line: ; commande line interface  	
      00082A 72 5F 00 01      [ 1] 1412 	clr in
      00082E A6 0D            [ 1] 1413 	ld a,#CR 
      000830 CD 01 CB         [ 4] 1414 	call putc 
      000833 A6 3E            [ 1] 1415 	ld a,#'> 
      000835 CD 01 CB         [ 4] 1416 	call putc 
      000838 CD 0B 06         [ 4] 1417 	call readln
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00083B CD 04 1A         [ 4] 1418 	call compile
                                   1419 ; if text begin with a line number
                                   1420 ; the compile set count=0   
                                   1421 ; so code is not interpreted
                                   1422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1423 ;; This is the interpreter loop
                                   1424 ;; for each BASIC code line. 
                                   1425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00083E                       1426 interp_loop:  
      00083E C6 00 01         [ 1] 1427 	ld a,in 
      000841 C1 00 03         [ 1] 1428 	cp a,count  
      000844 2A B8            [ 1] 1429 	jrpl interp
      000846 CD 08 6C         [ 4] 1430 	call next_token
      000849 A1 01            [ 1] 1431 	cp a,#TK_COLON 
      00084B 27 F1            [ 1] 1432 	jreq interp_loop 
      00084D                       1433 1$:
      00084D A1 05            [ 1] 1434 	cp a,#TK_VAR
      00084F 26 05            [ 1] 1435 	jrne 2$
      000851 CD 14 00         [ 4] 1436 	call let02  
      000854 20 E8            [ 2] 1437 	jra interp_loop 
      000856                       1438 2$:	
      000856 A1 02            [ 1] 1439 	cp a,#TK_ARRAY 
      000858 26 08            [ 1] 1440 	jrne 3$
      00085A CD 12 49         [ 4] 1441 	call get_array_element
      00085D CD 14 00         [ 4] 1442 	call let02 
      000860 20 DC            [ 2] 1443 	jra interp_loop 
      000862                       1444 3$:
      000862 A1 06            [ 1] 1445 	cp a,#TK_CMD
      000864 26 03            [ 1] 1446 	jrne 4$
      000866 FD               [ 4] 1447 	call (x) 
      000867 20 D5            [ 2] 1448 	jra interp_loop 
      000869                       1449 4$:	
      000869 CC 07 B8         [ 2] 1450 	jp syntax_error 
                                   1451 
                                   1452 ;--------------------------
                                   1453 ; extract next token from
                                   1454 ; token list 
                                   1455 ; basicptr -> base address 
                                   1456 ; in  -> offset in list array 
                                   1457 ; output:
                                   1458 ;   A 		token attribute
                                   1459 ;   X 		token value if there is one
                                   1460 ;----------------------------------------
      00086C                       1461 next_token:
      00086C C6 00 01         [ 1] 1462 	ld a,in 
      00086F C0 00 03         [ 1] 1463 	sub a,count ; don't replace sub by cp.  
      000872 27 4C            [ 1] 1464 	jreq 9$
      000874 55 00 01 00 02   [ 1] 1465 	mov in.saved,in 
      000879 CE 00 04         [ 2] 1466 	ldw x,basicptr 
      00087C 72 D6 00 00      [ 4] 1467 	ld a,([in.w],x)
      000880 72 5C 00 01      [ 1] 1468 	inc in 
      000884 A1 02            [ 1] 1469 	cp a,#TK_ARRAY  
      000886 23 38            [ 2] 1470 	jrule 9$
      000888 A1 03            [ 1] 1471 	cp a,#TK_CHAR
      00088A 26 0D            [ 1] 1472 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00088C 72 D6 00 00      [ 4] 1473 	ld a,([in.w],x)
      000890 72 5C 00 01      [ 1] 1474 	inc in
      000894 5F               [ 1] 1475 	clrw x 
      000895 97               [ 1] 1476 	ld xl,a 
      000896 A6 03            [ 1] 1477 	ld a,#TK_CHAR
      000898 81               [ 4] 1478 	ret 
      000899 A1 0A            [ 1] 1479 1$:	cp a,#TK_QSTR 
      00089B 25 17            [ 1] 1480 	jrult 4$
      00089D 26 21            [ 1] 1481 	jrne 9$
      00089F 72 BB 00 00      [ 2] 1482 	addw x,in.w 
      0008A3 89               [ 2] 1483 	pushw x 
      0008A4 7D               [ 1] 1484 2$:	tnz (x)
      0008A5 27 03            [ 1] 1485 	jreq 3$
      0008A7 5C               [ 2] 1486 	incw x 
      0008A8 20 FA            [ 2] 1487 	jra 2$ 
      0008AA 5C               [ 2] 1488 3$:	incw x 
      0008AB 72 B0 00 04      [ 2] 1489     subw x,basicptr 
      0008AF CF 00 00         [ 2] 1490 	ldw in.w,x 
      0008B2 85               [ 2] 1491 	popw x 
      0008B3 81               [ 4] 1492 	ret 
      0008B4 72 DE 00 00      [ 5] 1493 4$: ldw x,([in.w],x)
      0008B8 72 5C 00 01      [ 1] 1494 	inc in 
      0008BC 72 5C 00 01      [ 1] 1495 	inc in
      0008C0                       1496 9$: 
      0008C0 81               [ 4] 1497 	ret	
                                   1498 
                                   1499 
                                   1500 ;----------------------------------------
                                   1501 ;   DEBUG support functions
                                   1502 ;----------------------------------------
                           000001  1503 .if DEBUG 
                                   1504 
                                   1505 ; turn LED on 
      0008C1                       1506 ledon:
      0008C1 72 1A 50 0A      [ 1] 1507     bset PC_ODR,#LED2_BIT
      0008C5 81               [ 4] 1508     ret 
                                   1509 
                                   1510 ; turn LED off 
      0008C6                       1511 ledoff:
      0008C6 72 1B 50 0A      [ 1] 1512     bres PC_ODR,#LED2_BIT 
      0008CA 81               [ 4] 1513     ret 
                                   1514 
                                   1515 ; invert LED status 
      0008CB                       1516 ledtoggle:
      0008CB A6 20            [ 1] 1517     ld a,#LED2_MASK
      0008CD C8 50 0A         [ 1] 1518     xor a,PC_ODR
      0008D0 C7 50 0A         [ 1] 1519     ld PC_ODR,a
      0008D3 81               [ 4] 1520     ret 
                                   1521 
      0008D4                       1522 left_paren:
      0008D4 A6 20            [ 1] 1523 	ld a,#SPACE 
      0008D6 CD 01 CB         [ 4] 1524 	call putc
      0008D9 A6 28            [ 1] 1525 	ld a,#'( 
      0008DB CD 01 CB         [ 4] 1526 	call putc 	
      0008DE 81               [ 4] 1527 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1528 
                                   1529 ;------------------------------
                                   1530 ; print 8 bit register 
                                   1531 ; input:
                                   1532 ;   X  point to register name 
                                   1533 ;   A  register value to print 
                                   1534 ; output:
                                   1535 ;   none
                                   1536 ;------------------------------- 
      0008DF                       1537 prt_reg8:
      0008DF 88               [ 1] 1538 	push a 
      0008E0 CD 01 DE         [ 4] 1539 	call puts 
      0008E3 7B 01            [ 1] 1540 	ld a,(1,sp) 
      0008E5 C7 00 0D         [ 1] 1541 	ld acc8,a 
      0008E8 5F               [ 1] 1542 	clrw x 
      0008E9 97               [ 1] 1543 	ld xl,a 
      0008EA 35 10 00 0A      [ 1] 1544 	mov base,#16
      0008EE CD 0A 16         [ 4] 1545 	call print_int 
      0008F1 CD 08 D4         [ 4] 1546 	call left_paren 
      0008F4 84               [ 1] 1547 	pop a 
      0008F5 5F               [ 1] 1548 	clrw x 
      0008F6 97               [ 1] 1549 	ld xl,a 
      0008F7 35 0A 00 0A      [ 1] 1550 	mov base,#10 
      0008FB CD 0A 16         [ 4] 1551 	call print_int  
      0008FE A6 29            [ 1] 1552 	ld a,#') 
      000900 CD 01 CB         [ 4] 1553 	call putc
      000903 81               [ 4] 1554 	ret
                                   1555 
                                   1556 ;--------------------------------
                                   1557 ; print 16 bits register 
                                   1558 ; input:
                                   1559 ;   X   point register name 
                                   1560 ;   Y   register value to print 
                                   1561 ; output:
                                   1562 ;  none
                                   1563 ;--------------------------------
      000904                       1564 prt_reg16: 
      000904 90 89            [ 2] 1565 	pushw y 
      000906 CD 01 DE         [ 4] 1566 	call puts 
      000909 1E 01            [ 2] 1567 	ldw x,(1,sp) 
      00090B 35 10 00 0A      [ 1] 1568 	mov base,#16 
      00090F CD 0A 16         [ 4] 1569 	call print_int  
      000912 CD 08 D4         [ 4] 1570 	call left_paren 
      000915 85               [ 2] 1571 	popw x 
      000916 35 0A 00 0A      [ 1] 1572 	mov base,#10 
      00091A CD 0A 16         [ 4] 1573 	call print_int  
      00091D A6 29            [ 1] 1574 	ld a,#') 
      00091F CD 01 CB         [ 4] 1575 	call putc
      000922 81               [ 4] 1576 	ret 
                                   1577 
                                   1578 ;------------------------------------
                                   1579 ; print registers contents saved on
                                   1580 ; stack by trap interrupt.
                                   1581 ;------------------------------------
      000923                       1582 print_registers:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000923 AE 09 76         [ 2] 1583 	ldw x,#STATES
      000926 CD 01 DE         [ 4] 1584 	call puts
                                   1585 ; print EPC 
      000929 AE 09 B3         [ 2] 1586 	ldw x, #REG_EPC
      00092C CD 01 DE         [ 4] 1587 	call puts 
      00092F 7B 0B            [ 1] 1588 	ld a, (11,sp)
      000931 C7 00 0D         [ 1] 1589 	ld acc8,a 
      000934 7B 0A            [ 1] 1590 	ld a, (10,sp) 
      000936 C7 00 0C         [ 1] 1591 	ld acc16,a 
      000939 7B 09            [ 1] 1592 	ld a,(9,sp) 
      00093B C7 00 0B         [ 1] 1593 	ld acc24,a
      00093E 5F               [ 1] 1594 	clrw x  
      00093F A6 10            [ 1] 1595 	ld a,#16
      000941 CD 09 CE         [ 4] 1596 	call prti24  
                                   1597 ; print X
      000944 AE 09 BC         [ 2] 1598 	ldw x,#REG_X
      000947 16 05            [ 2] 1599 	ldw y,(5,sp)
      000949 CD 09 04         [ 4] 1600 	call prt_reg16  
                                   1601 ; print Y 
      00094C AE 09 B8         [ 2] 1602 	ldw x,#REG_Y
      00094F 16 07            [ 2] 1603 	ldw y, (7,sp)
      000951 CD 09 04         [ 4] 1604 	call prt_reg16  
                                   1605 ; print A 
      000954 AE 09 C0         [ 2] 1606 	ldw x,#REG_A
      000957 7B 04            [ 1] 1607 	ld a, (4,sp) 
      000959 CD 08 DF         [ 4] 1608 	call prt_reg8
                                   1609 ; print CC 
      00095C AE 09 C4         [ 2] 1610 	ldw x,#REG_CC 
      00095F 7B 03            [ 1] 1611 	ld a, (3,sp) 
      000961 CD 08 DF         [ 4] 1612 	call prt_reg8 
                                   1613 ; print SP 
      000964 AE 09 C9         [ 2] 1614 	ldw x,#REG_SP
      000967 90 96            [ 1] 1615 	ldw y,sp 
      000969 72 A9 00 0C      [ 2] 1616 	addw y,#12
      00096D CD 09 04         [ 4] 1617 	call prt_reg16  
      000970 A6 0A            [ 1] 1618 	ld a,#'\n' 
      000972 CD 01 CB         [ 4] 1619 	call putc
      000975 81               [ 4] 1620 	ret
                                   1621 
      000976 0A 52 65 67 69 73 74  1622 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0009B3 45 50 43 3A 00        1623 REG_EPC: .asciz "EPC:"
      0009B8 0A 59 3A 00           1624 REG_Y:   .asciz "\nY:" 
      0009BC 0A 58 3A 00           1625 REG_X:   .asciz "\nX:"
      0009C0 0A 41 3A 00           1626 REG_A:   .asciz "\nA:" 
      0009C4 0A 43 43 3A 00        1627 REG_CC:  .asciz "\nCC:"
      0009C9 0A 53 50 3A 00        1628 REG_SP:  .asciz "\nSP:"
                                   1629 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1630 .endif ; DEBUG 
                                   1631 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1632 
                                   1633 
                                   1634 ;------------------------------------
                                   1635 ; print integer in acc24 
                                   1636 ; input:
                                   1637 ;	acc24 		integer to print 
                                   1638 ;	A 			numerical base for conversion 
                                   1639 ;               if bit 7 is set add a space at print end.
                                   1640 ;   XL 			field width, 0 -> no fill.
                                   1641 ;  output:
                                   1642 ;    none 
                                   1643 ;------------------------------------
                           000001  1644 	WIDTH = 1
                           000002  1645 	BASE = 2
                           000003  1646 	ADD_SPACE=3 ; add a space after number 
                           000003  1647 	VSIZE = 3
      0009CE                       1648 prti24:
      0009CE                       1649 	_vars VSIZE 
      0009CE 52 03            [ 2]    1     sub sp,#VSIZE 
      0009D0 0F 03            [ 1] 1650 	clr (ADD_SPACE,sp)
      0009D2 A5 80            [ 1] 1651 	bcp a,#0x80 
      0009D4 27 02            [ 1] 1652 	jreq 0$ 
      0009D6 03 03            [ 1] 1653 	cpl (ADD_SPACE,sp)
      0009D8 A4 1F            [ 1] 1654 0$:	and a,#31 
      0009DA 6B 02            [ 1] 1655 	ld (BASE,sp),a
      0009DC 9F               [ 1] 1656 	ld a,xl
      0009DD 6B 01            [ 1] 1657 	ld (WIDTH,sp),a 
      0009DF 7B 02            [ 1] 1658 	ld a, (BASE,sp)  
      0009E1 CD 0A 74         [ 4] 1659     call itoa  ; conversion entier en  .asciz
      0009E4 7B 01            [ 1] 1660 1$: ld a,(WIDTH,sp)
      0009E6 27 1F            [ 1] 1661 	jreq 4$
      0009E8 C7 00 0D         [ 1] 1662 	ld acc8,a 
      0009EB 89               [ 2] 1663 	pushw x 
      0009EC CD 02 A0         [ 4] 1664 	call strlen 
      0009EF 9F               [ 1] 1665 	ld a,xl 
      0009F0 85               [ 2] 1666 	popw x 
      0009F1 31 00 0D         [ 3] 1667 	exg a,acc8 
      0009F4 C0 00 0D         [ 1] 1668 	sub a,acc8 
      0009F7 2B 0E            [ 1] 1669 	jrmi 4$
      0009F9 6B 01            [ 1] 1670 	ld (WIDTH,sp),a 
      0009FB A6 20            [ 1] 1671 	ld  a,#SPACE
      0009FD 0D 01            [ 1] 1672 3$: tnz (WIDTH,sp)
      0009FF 27 06            [ 1] 1673 	jreq 4$
      000A01 5A               [ 2] 1674 	decw x 
      000A02 F7               [ 1] 1675 	ld (x),a 
      000A03 0A 01            [ 1] 1676 	dec (WIDTH,sp) 
      000A05 20 F6            [ 2] 1677 	jra 3$
      000A07                       1678 4$: 
      000A07 CD 01 DE         [ 4] 1679 	call puts 
      000A0A 0D 03            [ 1] 1680 	tnz (ADD_SPACE,sp)
      000A0C 27 05            [ 1] 1681 	jreq 5$
      000A0E A6 20            [ 1] 1682     ld a,#SPACE 
      000A10 CD 01 CB         [ 4] 1683 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A13                       1684 5$: _drop VSIZE 
      000A13 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A15 81               [ 4] 1685     ret	
                                   1686 
                                   1687 ;-----------------------------------
                                   1688 ; print a 16 bit integer 
                                   1689 ; using variable 'base' as conversion
                                   1690 ; format.
                                   1691 ; input:
                                   1692 ;   X       integer to print 
                                   1693 ;   base    conversion base 
                                   1694 ; output:
                                   1695 ;   none 
                                   1696 ;-----------------------------------
                           000001  1697 	SIGN=1
                           000001  1698 	VSIZE=1
      000A16                       1699 print_int: 
      000A16                       1700 	_vars VSIZE 
      000A16 52 01            [ 2]    1     sub sp,#VSIZE 
      000A18 0F 01            [ 1] 1701 	clr (SIGN,sp)
      000A1A 90 AE 17 5F      [ 2] 1702 	ldw y,#pad+PAD_SIZE-1 
      000A1E 90 7F            [ 1] 1703 	clr (y)
      000A20 C6 00 0A         [ 1] 1704 	ld a,base  
      000A23 A1 0A            [ 1] 1705 	cp a,#10 
      000A25 26 06            [ 1] 1706 	jrne 1$ 
      000A27 5D               [ 2] 1707 	tnzw x 
      000A28 2A 03            [ 1] 1708 	jrpl 1$ 
      000A2A 03 01            [ 1] 1709 	cpl (SIGN,sp)
      000A2C 50               [ 2] 1710 	negw x 	 
      000A2D                       1711 1$:	
      000A2D C6 00 0A         [ 1] 1712 	ld a,base 
      000A30 62               [ 2] 1713 	div x,a 
      000A31 AB 30            [ 1] 1714 	add a,#'0 
      000A33 A1 3A            [ 1] 1715 	cp a,#'9+1 
      000A35 2B 02            [ 1] 1716 	jrmi 2$ 
      000A37 AB 07            [ 1] 1717 	add a,#7 
      000A39 90 5A            [ 2] 1718 2$: decw y 
      000A3B 90 F7            [ 1] 1719 	ld (y),a 
      000A3D 5D               [ 2] 1720 	tnzw x 
      000A3E 26 ED            [ 1] 1721 	jrne 1$ 
      000A40 A6 10            [ 1] 1722 	ld a,#16 
      000A42 C1 00 0A         [ 1] 1723 	cp a,base 
      000A45 26 08            [ 1] 1724 	jrne 3$
      000A47 A6 24            [ 1] 1725 	ld a,#'$
      000A49 90 5A            [ 2] 1726 	decw y  
      000A4B 90 F7            [ 1] 1727 	ld (y),a
      000A4D 20 0A            [ 2] 1728 	jra 9$ 
      000A4F 0D 01            [ 1] 1729 3$: tnz (SIGN,sp)
      000A51 27 06            [ 1] 1730 	jreq 9$ 
      000A53 A6 2D            [ 1] 1731 	ld a,#'-
      000A55 90 5A            [ 2] 1732 	decw y  
      000A57 90 F7            [ 1] 1733 	ld (y),a
      000A59                       1734 9$:	
      000A59 93               [ 1] 1735 	ldw x,y 
      000A5A 1D 17 5F         [ 2] 1736 	subw x,#pad+PAD_SIZE-1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A5D 50               [ 2] 1737 	negw x  
      000A5E                       1738 10$:
      000A5E 9F               [ 1] 1739 	ld a,xl 
      000A5F C1 00 26         [ 1] 1740 	cp a,tab_width
      000A62 24 09            [ 1] 1741 	jruge 12$
      000A64 90 5A            [ 2] 1742 	decw y 
      000A66 A6 20            [ 1] 1743 	ld a,#SPACE 
      000A68 90 F7            [ 1] 1744 	ld (y),a
      000A6A 5C               [ 2] 1745 	incw x 
      000A6B 20 F1            [ 2] 1746 	jra 10$ 
      000A6D                       1747 12$:
      000A6D 93               [ 1] 1748     ldw x,y 
      000A6E CD 01 DE         [ 4] 1749 	call puts  
      000A71                       1750 	_drop VSIZE 
      000A71 5B 01            [ 2]    1     addw sp,#VSIZE 
      000A73 81               [ 4] 1751 	ret 
                                   1752 
                                   1753 ;------------------------------------
                                   1754 ; convert integer in acc24 to string
                                   1755 ; input:
                                   1756 ;   A	  	base
                                   1757 ;	acc24	integer to convert
                                   1758 ; output:
                                   1759 ;   X  		pointer to string
                                   1760 ;------------------------------------
                           000001  1761 	SIGN=1  ; integer sign 
                           000002  1762 	BASE=2  ; numeric base 
                           000002  1763 	VSIZE=2  ;locals size
      000A74                       1764 itoa:
      000A74 52 02            [ 2] 1765 	sub sp,#VSIZE
      000A76 6B 02            [ 1] 1766 	ld (BASE,sp), a  ; base
      000A78 0F 01            [ 1] 1767 	clr (SIGN,sp)    ; sign
      000A7A A1 0A            [ 1] 1768 	cp a,#10
      000A7C 26 0A            [ 1] 1769 	jrne 1$
                                   1770 	; base 10 string display with negative sign if bit 23==1
      000A7E 72 0F 00 0B 05   [ 2] 1771 	btjf acc24,#7,1$
      000A83 03 01            [ 1] 1772 	cpl (SIGN,sp)
      000A85 CD 0A E3         [ 4] 1773 	call neg_acc24
      000A88                       1774 1$:
                                   1775 ; initialize string pointer 
      000A88 AE 17 5F         [ 2] 1776 	ldw x,#pad+PAD_SIZE-1
      000A8B 7F               [ 1] 1777 	clr (x)
      000A8C                       1778 itoa_loop:
      000A8C 7B 02            [ 1] 1779     ld a,(BASE,sp)
      000A8E CD 0A BB         [ 4] 1780     call divu24_8 ; acc24/A 
      000A91 AB 30            [ 1] 1781     add a,#'0  ; remainder of division
      000A93 A1 3A            [ 1] 1782     cp a,#'9+1
      000A95 2B 02            [ 1] 1783     jrmi 2$
      000A97 AB 07            [ 1] 1784     add a,#7 
      000A99 5A               [ 2] 1785 2$: decw x
      000A9A F7               [ 1] 1786     ld (x),a
                                   1787 	; if acc24==0 conversion done
      000A9B C6 00 0B         [ 1] 1788 	ld a,acc24
      000A9E CA 00 0C         [ 1] 1789 	or a,acc16
      000AA1 CA 00 0D         [ 1] 1790 	or a,acc8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AA4 26 E6            [ 1] 1791     jrne itoa_loop
                                   1792 	;conversion done, next add '$' or '-' as required
      000AA6 7B 02            [ 1] 1793 	ld a,(BASE,sp)
      000AA8 A1 10            [ 1] 1794 	cp a,#16
      000AAA 27 08            [ 1] 1795 	jreq 8$
      000AAC 7B 01            [ 1] 1796 	ld a,(SIGN,sp)
      000AAE 27 08            [ 1] 1797     jreq 10$
      000AB0 A6 2D            [ 1] 1798     ld a,#'-
      000AB2 20 02            [ 2] 1799 	jra 9$ 
      000AB4 A6 24            [ 1] 1800 8$: ld a,#'$ 
      000AB6 5A               [ 2] 1801 9$: decw x
      000AB7 F7               [ 1] 1802     ld (x),a
      000AB8                       1803 10$:
      000AB8 5B 02            [ 2] 1804 	addw sp,#VSIZE
      000ABA 81               [ 4] 1805 	ret
                                   1806 
                                   1807 ;-------------------------------------
                                   1808 ; divide uint24_t by uint8_t
                                   1809 ; used to convert uint24_t to string
                                   1810 ; input:
                                   1811 ;	acc24	dividend
                                   1812 ;   A 		divisor
                                   1813 ; output:
                                   1814 ;   acc24	quotient
                                   1815 ;   A		remainder
                                   1816 ;------------------------------------- 
                                   1817 ; offset  on sp of arguments and locals
                           000001  1818 	U8   = 1   ; divisor on stack
                           000001  1819 	VSIZE =1
      000ABB                       1820 divu24_8:
      000ABB 89               [ 2] 1821 	pushw x ; save x
      000ABC 88               [ 1] 1822 	push a 
                                   1823 	; ld dividend UU:MM bytes in X
      000ABD C6 00 0B         [ 1] 1824 	ld a, acc24
      000AC0 95               [ 1] 1825 	ld xh,a
      000AC1 C6 00 0C         [ 1] 1826 	ld a,acc24+1
      000AC4 97               [ 1] 1827 	ld xl,a
      000AC5 7B 01            [ 1] 1828 	ld a,(U8,SP) ; divisor
      000AC7 62               [ 2] 1829 	div x,a ; UU:MM/U8
      000AC8 88               [ 1] 1830 	push a  ;save remainder
      000AC9 9E               [ 1] 1831 	ld a,xh
      000ACA C7 00 0B         [ 1] 1832 	ld acc24,a
      000ACD 9F               [ 1] 1833 	ld a,xl
      000ACE C7 00 0C         [ 1] 1834 	ld acc24+1,a
      000AD1 84               [ 1] 1835 	pop a
      000AD2 95               [ 1] 1836 	ld xh,a
      000AD3 C6 00 0D         [ 1] 1837 	ld a,acc24+2
      000AD6 97               [ 1] 1838 	ld xl,a
      000AD7 7B 01            [ 1] 1839 	ld a,(U8,sp) ; divisor
      000AD9 62               [ 2] 1840 	div x,a  ; R:LL/U8
      000ADA 6B 01            [ 1] 1841 	ld (U8,sp),a ; save remainder
      000ADC 9F               [ 1] 1842 	ld a,xl
      000ADD C7 00 0D         [ 1] 1843 	ld acc24+2,a
      000AE0 84               [ 1] 1844 	pop a
      000AE1 85               [ 2] 1845 	popw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AE2 81               [ 4] 1846 	ret
                                   1847 
                                   1848 ;------------------------------------
                                   1849 ;  two's complement acc24
                                   1850 ;  input:
                                   1851 ;		acc24 variable
                                   1852 ;  output:
                                   1853 ;		acc24 variable
                                   1854 ;-------------------------------------
      000AE3                       1855 neg_acc24:
      000AE3 72 53 00 0D      [ 1] 1856 	cpl acc24+2
      000AE7 72 53 00 0C      [ 1] 1857 	cpl acc24+1
      000AEB 72 53 00 0B      [ 1] 1858 	cpl acc24
      000AEF A6 01            [ 1] 1859 	ld a,#1
      000AF1 CB 00 0D         [ 1] 1860 	add a,acc24+2
      000AF4 C7 00 0D         [ 1] 1861 	ld acc24+2,a
      000AF7 4F               [ 1] 1862 	clr a
      000AF8 C9 00 0C         [ 1] 1863 	adc a,acc24+1
      000AFB C7 00 0C         [ 1] 1864 	ld acc24+1,a 
      000AFE 4F               [ 1] 1865 	clr a 
      000AFF C9 00 0B         [ 1] 1866 	adc a,acc24 
      000B02 C7 00 0B         [ 1] 1867 	ld acc24,a 
      000B05 81               [ 4] 1868 	ret
                                   1869 
                                   1870 
                                   1871 ;------------------------------------
                                   1872 ; read a line of text from terminal
                                   1873 ; input:
                                   1874 ;	none
                                   1875 ; local variable on stack:
                                   1876 ;	LL  line length
                                   1877 ;   RXCHAR last received chaaracte 
                                   1878 ; output:
                                   1879 ;   text in tib  buffer
                                   1880 ;------------------------------------
                                   1881 	; local variables
                           000001  1882 	LL_HB=1
                           000001  1883 	RXCHAR = 1 ; last char received
                           000002  1884 	LL = 2  ; accepted line length
                           000002  1885 	VSIZE=2 
      000B06                       1886 readln:
      000B06 5F               [ 1] 1887 	clrw x 
      000B07 89               [ 2] 1888 	pushw x 
      000B08 90 AE 16 E8      [ 2] 1889  	ldw y,#tib ; input buffer
      000B0C                       1890 readln_loop:
      000B0C CD 01 D4         [ 4] 1891 	call getc
      000B0F 6B 01            [ 1] 1892 	ld (RXCHAR,sp),a
      000B11 A1 0D            [ 1] 1893 	cp a,#CR
      000B13 26 03            [ 1] 1894 	jrne 1$
      000B15 CC 0B 81         [ 2] 1895 	jp readln_quit
      000B18 A1 0A            [ 1] 1896 1$:	cp a,#NL
      000B1A 27 65            [ 1] 1897 	jreq readln_quit
      000B1C A1 08            [ 1] 1898 	cp a,#BSP
      000B1E 27 3D            [ 1] 1899 	jreq del_back
      000B20 A1 04            [ 1] 1900 	cp a,#CTRL_D
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B22 27 2A            [ 1] 1901 	jreq del_ln
      000B24 A1 12            [ 1] 1902 	cp a,#CTRL_R 
      000B26 27 06            [ 1] 1903 	jreq reprint 
                                   1904 ;	cp a,#'[
                                   1905 ;	jreq ansi_seq
      000B28                       1906 final_test:
      000B28 A1 20            [ 1] 1907 	cp a,#SPACE
      000B2A 2A 40            [ 1] 1908 	jrpl accept_char
      000B2C 20 DE            [ 2] 1909 	jra readln_loop
      000B2E                       1910 ansi_seq:
                                   1911 ;	call getc
                                   1912 ;	cp a,#'C 
                                   1913 ;	jreq rigth_arrow
                                   1914 ;	cp a,#'D 
                                   1915 ;	jreq left_arrow 
                                   1916 ;	jra final_test
      000B2E                       1917 right_arrow:
                                   1918 ;	ld a,#BSP 
                                   1919 ;	call putc 
                                   1920 ;	jra realn_loop 
      000B2E                       1921 left_arrow:
                                   1922 
                                   1923 ;	jra readln_loop
      000B2E                       1924 reprint: 
      000B2E 0D 02            [ 1] 1925 	tnz (LL,sp)
      000B30 26 DA            [ 1] 1926 	jrne readln_loop
      000B32 AE 16 E8         [ 2] 1927 	ldw x,#tib 
      000B35 CD 02 A0         [ 4] 1928 	call strlen 
      000B38 90 AE 16 E8      [ 2] 1929 	ldw y,#tib 
      000B3C 9F               [ 1] 1930 	ld a,xl
      000B3D 27 CD            [ 1] 1931 	jreq readln_loop
      000B3F 6B 02            [ 1] 1932 	ld (LL,sp),a 
      000B41 AE 16 E8         [ 2] 1933 	ldw x,#tib 
      000B44 CD 01 DE         [ 4] 1934 	call puts
      000B47 0F 01            [ 1] 1935 	clr (LL_HB,sp)
      000B49 72 F9 01         [ 2] 1936 	addw y,(LL_HB,sp)
      000B4C 20 BE            [ 2] 1937 	jra readln_loop 
      000B4E                       1938 del_ln:
      000B4E 7B 02            [ 1] 1939 	ld a,(LL,sp)
      000B50 CD 01 F8         [ 4] 1940 	call delete
      000B53 90 AE 16 E8      [ 2] 1941 	ldw y,#tib
      000B57 90 7F            [ 1] 1942 	clr (y)
      000B59 0F 02            [ 1] 1943 	clr (LL,sp)
      000B5B 20 AF            [ 2] 1944 	jra readln_loop
      000B5D                       1945 del_back:
      000B5D 0D 02            [ 1] 1946     tnz (LL,sp)
      000B5F 27 AB            [ 1] 1947     jreq readln_loop
      000B61 0A 02            [ 1] 1948     dec (LL,sp)
      000B63 90 5A            [ 2] 1949     decw y
      000B65 90 7F            [ 1] 1950     clr  (y)
      000B67 CD 01 E8         [ 4] 1951     call bksp 
      000B6A 20 A0            [ 2] 1952     jra readln_loop	
      000B6C                       1953 accept_char:
      000B6C A6 4F            [ 1] 1954 	ld a,#TIB_SIZE-1
      000B6E 11 02            [ 1] 1955 	cp a, (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000B70 27 9A            [ 1] 1956 	jreq readln_loop
      000B72 7B 01            [ 1] 1957 	ld a,(RXCHAR,sp)
      000B74 90 F7            [ 1] 1958 	ld (y),a
      000B76 0C 02            [ 1] 1959 	inc (LL,sp)
      000B78 90 5C            [ 2] 1960 	incw y
      000B7A 90 7F            [ 1] 1961 	clr (y)
      000B7C CD 01 CB         [ 4] 1962 	call putc 
      000B7F 20 8B            [ 2] 1963 	jra readln_loop
      000B81                       1964 readln_quit:
      000B81 90 7F            [ 1] 1965 	clr (y)
      000B83 7B 02            [ 1] 1966 	ld a,(LL,sp)
      000B85 C7 00 03         [ 1] 1967 	ld count,a 
      000B88                       1968 	_drop VSIZE 
      000B88 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B8A A6 0D            [ 1] 1969 	ld a,#CR
      000B8C CD 01 CB         [ 4] 1970 	call putc
      000B8F 81               [ 4] 1971 	ret
                                   1972 
                           000001  1973 .if DEBUG 	
                                   1974 ;----------------------------
                                   1975 ; command interface
                                   1976 ; only 3 commands:
                                   1977 ;  'q' to resume application
                                   1978 ;  'p [addr]' to print memory values 
                                   1979 ;  's addr' to print string 
                                   1980 ;----------------------------
                                   1981 ;local variable 
                           000001  1982 	PSIZE=1
                           000001  1983 	VSIZE=1 
      000B90                       1984 cmd_itf:
      000B90 52 01            [ 2] 1985 	sub sp,#VSIZE 
      000B92 72 5F 00 16      [ 1] 1986 	clr farptr 
      000B96 72 5F 00 17      [ 1] 1987 	clr farptr+1 
      000B9A 72 5F 00 18      [ 1] 1988 	clr farptr+2  
      000B9E                       1989 repl:
      000B9E A6 0D            [ 1] 1990 	ld a,#CR 
      000BA0 CD 01 CB         [ 4] 1991 	call putc 
      000BA3 A6 3F            [ 1] 1992 	ld a,#'? 
      000BA5 CD 01 CB         [ 4] 1993 	call putc
      000BA8 72 5F 00 00      [ 1] 1994 	clr in.w 
      000BAC 72 5F 00 01      [ 1] 1995 	clr in 
      000BB0 CD 0B 06         [ 4] 1996 	call readln
      000BB3 90 AE 16 E8      [ 2] 1997 	ldw y,#tib  
      000BB7 90 F6            [ 1] 1998 	ld a,(y)
      000BB9 27 E3            [ 1] 1999 	jreq repl  
      000BBB 72 5C 00 01      [ 1] 2000 	inc in 
      000BBF CD 0F 40         [ 4] 2001 	call to_upper 
      000BC2 A1 51            [ 1] 2002 	cp a,#'Q 
      000BC4 26 17            [ 1] 2003 	jrne test_p
      000BC6                       2004 repl_exit:
      000BC6 72 5F 16 E8      [ 1] 2005 	clr tib 
      000BCA 72 5F 00 03      [ 1] 2006 	clr count 
      000BCE 72 5F 00 01      [ 1] 2007 	clr in 
      000BD2                       2008 	_drop #VSIZE 	
      000BD2 5B 01            [ 2]    1     addw sp,##VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BD4 81               [ 4] 2009 	ret  
      000BD5                       2010 invalid:
      000BD5 AE 0C 53         [ 2] 2011 	ldw x,#invalid_cmd 
      000BD8 CD 01 DE         [ 4] 2012 	call puts 
      000BDB 20 C1            [ 2] 2013 	jra repl 
      000BDD                       2014 test_p:	
      000BDD A1 50            [ 1] 2015     cp a,#'P 
      000BDF 27 11            [ 1] 2016 	jreq mem_peek
      000BE1 A1 53            [ 1] 2017     cp a,#'S 
      000BE3 26 F0            [ 1] 2018 	jrne invalid 
      000BE5                       2019 print_string:	
      000BE5 CD 0D 7F         [ 4] 2020 	call get_token
      000BE8 A1 04            [ 1] 2021 	cp a,#TK_INTGR 
      000BEA 26 E9            [ 1] 2022 	jrne invalid 
      000BEC CD 01 DE         [ 4] 2023 	call puts
      000BEF CC 0B 9E         [ 2] 2024 	jp repl 	
      000BF2                       2025 mem_peek:
      000BF2 A6 20            [ 1] 2026 	ld a,#SPACE 
      000BF4 CD 0F F8         [ 4] 2027 	call skip  	 
      000BF7 72 B9 00 00      [ 2] 2028 	addw y,in.w 
      000BFB AE 17 38         [ 2] 2029 	ldw x,#pad 
      000BFE CD 02 BE         [ 4] 2030 	call strcpy
      000C01 CD 0F 4C         [ 4] 2031 	call atoi24 	
      000C04 C6 00 0B         [ 1] 2032 	ld a, acc24 
      000C07 CA 00 0C         [ 1] 2033 	or a,acc16 
      000C0A CA 00 0D         [ 1] 2034 	or a,acc8 
      000C0D 26 02            [ 1] 2035 	jrne 1$ 
      000C0F 20 0C            [ 2] 2036 	jra peek_byte  
      000C11 CE 00 0B         [ 2] 2037 1$:	ldw x,acc24 
      000C14 CF 00 16         [ 2] 2038 	ldw farptr,x 
      000C17 C6 00 0D         [ 1] 2039 	ld a,acc8 
      000C1A C7 00 18         [ 1] 2040 	ld farptr+2,a 
      000C1D                       2041 peek_byte:
      000C1D CD 0C 62         [ 4] 2042 	call print_farptr 
      000C20 A6 08            [ 1] 2043 	ld a,#8 
      000C22 6B 01            [ 1] 2044 	ld (PSIZE,sp),a 
      000C24 5F               [ 1] 2045 	clrw x 
      000C25 CD 0C 7D         [ 4] 2046 1$:	call fetchc  
      000C28 89               [ 2] 2047 	pushw x 
      000C29 C7 00 0D         [ 1] 2048 	ld acc8,a 
      000C2C 5F               [ 1] 2049 	clrw x 
      000C2D CF 00 0B         [ 2] 2050 	ldw acc24,x 
      000C30 A6 90            [ 1] 2051 	ld a,#16+128
      000C32 CD 09 CE         [ 4] 2052 	call prti24
      000C35 85               [ 2] 2053 	popw x 
      000C36 0A 01            [ 1] 2054 	dec (PSIZE,sp)
      000C38 26 EB            [ 1] 2055 	jrne 1$ 
      000C3A A6 08            [ 1] 2056 	ld a,#8 
      000C3C CB 00 18         [ 1] 2057 	add a,farptr+2 
      000C3F C7 00 18         [ 1] 2058 	ld farptr+2,a
      000C42 4F               [ 1] 2059 	clr a 
      000C43 C9 00 17         [ 1] 2060 	adc a,farptr+1 
      000C46 C7 00 17         [ 1] 2061 	ld farptr+1,a 
      000C49 4F               [ 1] 2062 	clr a 
      000C4A C9 00 16         [ 1] 2063 	adc a,farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C4D C7 00 16         [ 1] 2064 	ld farptr,a 
      000C50 CC 0B 9E         [ 2] 2065 	jp repl  
                                   2066 
      000C53 6E 6F 74 20 61 20 63  2067 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   2068 
                                   2069 ;----------------------------
                                   2070 ; display farptr address
                                   2071 ;----------------------------
      000C62                       2072 print_farptr:
      000C62 C6 00 18         [ 1] 2073 	ld a ,farptr+2 
      000C65 C7 00 0D         [ 1] 2074 	ld acc8,a 
      000C68 CE 00 16         [ 2] 2075 	ldw x,farptr 
      000C6B CF 00 0B         [ 2] 2076 	ldw acc24,x 
      000C6E 5F               [ 1] 2077 	clrw x 
      000C6F A6 10            [ 1] 2078 	ld a,#16 
      000C71 CD 09 CE         [ 4] 2079 	call prti24
      000C74 A6 20            [ 1] 2080 	ld a,#SPACE 
      000C76 CD 01 CB         [ 4] 2081 	call putc 
      000C79 CD 01 CB         [ 4] 2082 	call putc 
      000C7C 81               [ 4] 2083 	ret
                                   2084 
                                   2085 ;------------------------------------
                                   2086 ; get byte at address farptr[X]
                                   2087 ; input:
                                   2088 ;	 farptr   address to peek
                                   2089 ;    X		  farptr index 	
                                   2090 ; output:
                                   2091 ;	 A 		  byte from memory  
                                   2092 ;    x		  incremented by 1
                                   2093 ;------------------------------------
      000C7D                       2094 fetchc: ; @C
      000C7D 92 AF 00 16      [ 5] 2095 	ldf a,([farptr],x)
      000C81 5C               [ 2] 2096 	incw x
      000C82 81               [ 4] 2097 	ret
                                   2098 
                                   2099 
                                   2100 ;------------------------------------
                                   2101 ; expect a number from command line 
                                   2102 ; next argument
                                   2103 ;  input:
                                   2104 ;	  none
                                   2105 ;  output:
                                   2106 ;    acc24   int24_t 
                                   2107 ;------------------------------------
      000C83                       2108 number::
      000C83 CD 0D 7F         [ 4] 2109 	call get_token
      000C86 CD 0F 4C         [ 4] 2110 	call atoi24
      000C89 81               [ 4] 2111 	ret
                                   2112 .endif ; DEBUG 
                                   2113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2114 
                                   2115 
                                   2116 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2117 ;; compiler routines        ;;
                                   2118 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2119 ;------------------------------------
                                   2120 ; parse quoted string 
                                   2121 ; input:
                                   2122 ;   Y 	pointer to tib 
                                   2123 ;   X   pointer to pad
                                   2124 ; output:
                                   2125 ;	pad   parsed string
                                   2126 ;   TOS  char* to pad  
                                   2127 ;------------------------------------
                           000001  2128 	PREV = 1
                           000002  2129 	CURR =2 
                           000002  2130 	VSIZE=2 
      000C8A                       2131 parse_quote: ; { -- addr }
      000C8A                       2132 	_vars VSIZE 
      000C8A 52 02            [ 2]    1     sub sp,#VSIZE 
      000C8C 4F               [ 1] 2133 	clr a
      000C8D 6B 01            [ 1] 2134 1$:	ld (PREV,sp),a 
      000C8F 72 5C 00 01      [ 1] 2135 2$:	inc in
      000C93 91 D6 00         [ 4] 2136 	ld a,([in.w],y)
      000C96 27 24            [ 1] 2137 	jreq 6$
      000C98 6B 02            [ 1] 2138 	ld (CURR,sp),a 
      000C9A A6 5C            [ 1] 2139 	ld a,#'\
      000C9C 11 01            [ 1] 2140 	cp a, (PREV,sp)
      000C9E 26 0A            [ 1] 2141 	jrne 3$
      000CA0 0F 01            [ 1] 2142 	clr (PREV,sp)
      000CA2 7B 02            [ 1] 2143 	ld a,(CURR,sp)
      000CA4 AD 1F            [ 4] 2144 	callr convert_escape
      000CA6 F7               [ 1] 2145 	ld (x),a 
      000CA7 5C               [ 2] 2146 	incw x 
      000CA8 20 E5            [ 2] 2147 	jra 2$
      000CAA                       2148 3$:
      000CAA 7B 02            [ 1] 2149 	ld a,(CURR,sp)
      000CAC A1 5C            [ 1] 2150 	cp a,#'\'
      000CAE 27 DD            [ 1] 2151 	jreq 1$
      000CB0 A1 22            [ 1] 2152 	cp a,#'"
      000CB2 27 04            [ 1] 2153 	jreq 5$ 
      000CB4 F7               [ 1] 2154 	ld (x),a 
      000CB5 5C               [ 2] 2155 	incw x 
      000CB6 20 D7            [ 2] 2156 	jra 2$
      000CB8 72 5C 00 01      [ 1] 2157 5$:	inc in 
      000CBC 7F               [ 1] 2158 6$: clr (x)
      000CBD AE 17 38         [ 2] 2159 	ldw x,#pad 
      000CC0                       2160 	_drop VSIZE
      000CC0 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CC2 A6 0A            [ 1] 2161 	ld a,#TK_QSTR  
      000CC4 81               [ 4] 2162 	ret 
                                   2163 
                                   2164 ;---------------------------------------
                                   2165 ; called by parse_quote
                                   2166 ; subtitute escaped character 
                                   2167 ; by their ASCII value .
                                   2168 ; input:
                                   2169 ;   A  character following '\'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2170 ; output:
                                   2171 ;   A  substitued char or same if not valid.
                                   2172 ;---------------------------------------
      000CC5                       2173 convert_escape:
      000CC5 89               [ 2] 2174 	pushw x 
      000CC6 AE 0C DA         [ 2] 2175 	ldw x,#escaped 
      000CC9 F1               [ 1] 2176 1$:	cp a,(x)
      000CCA 27 06            [ 1] 2177 	jreq 2$
      000CCC 7D               [ 1] 2178 	tnz (x)
      000CCD 27 09            [ 1] 2179 	jreq 3$
      000CCF 5C               [ 2] 2180 	incw x 
      000CD0 20 F7            [ 2] 2181 	jra 1$
      000CD2 1D 0C DA         [ 2] 2182 2$: subw x,#escaped 
      000CD5 9F               [ 1] 2183 	ld a,xl 
      000CD6 AB 07            [ 1] 2184 	add a,#7
      000CD8 85               [ 2] 2185 3$:	popw x 
      000CD9 81               [ 4] 2186 	ret 
                                   2187 
      000CDA 61 62 74 6E 76 66 72  2188 escaped: .asciz "abtnvfr"
             00
                                   2189 
                                   2190 ;-------------------------
                                   2191 ; integer parser 
                                   2192 ; input:
                                   2193 ;   X 		point to pad 
                                   2194 ;   Y 		point to tib 
                                   2195 ;   A 	    first digit|'$' 
                                   2196 ; output:  
                                   2197 ;   pad     number string 
                                   2198 ;   X 		integer 
                                   2199 ;   A 		TK_INTGR
                                   2200 ;-------------------------
                           000001  2201 	BASE=1
                           000002  2202 	TCHAR=2 
                           000002  2203 	VSIZE=2 
      000CE2                       2204 parse_integer: ; { -- n }
      000CE2 4B 00            [ 1] 2205 	push #0 ; TCHAR 
      000CE4 A1 24            [ 1] 2206 	cp a,#'$
      000CE6 27 04            [ 1] 2207 	jreq 1$ 
      000CE8 4B 0A            [ 1] 2208 	push #10 ; BASE=10 
      000CEA 20 02            [ 2] 2209 	jra 2$ 
      000CEC 4B 10            [ 1] 2210 1$: push #16  ; BASE=16
      000CEE F7               [ 1] 2211 2$:	ld (x),a 
      000CEF 5C               [ 2] 2212 	incw x 
      000CF0 72 5C 00 01      [ 1] 2213 	inc in 
      000CF4 91 D6 00         [ 4] 2214 	ld a,([in.w],y)
      000CF7 CD 0F 40         [ 4] 2215 	call to_upper 
      000CFA 6B 02            [ 1] 2216 	ld (TCHAR,sp),a 
      000CFC CD 0F 37         [ 4] 2217 	call is_digit 
      000CFF 25 ED            [ 1] 2218 	jrc 2$
      000D01 A6 10            [ 1] 2219 	ld a,#16 
      000D03 11 01            [ 1] 2220 	cp a,(BASE,sp)
      000D05 26 0A            [ 1] 2221 	jrne 3$ 
      000D07 7B 02            [ 1] 2222 	ld a,(TCHAR,sp)
      000D09 A1 41            [ 1] 2223 	cp a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D0B 2B 04            [ 1] 2224 	jrmi 3$ 
      000D0D A1 47            [ 1] 2225 	cp a,#'G 
      000D0F 2B DD            [ 1] 2226 	jrmi 2$ 
      000D11 7F               [ 1] 2227 3$:	clr (x)
      000D12 CD 0F 4C         [ 4] 2228 	call atoi24
      000D15 CE 00 0C         [ 2] 2229 	ldw x,acc16 
      000D18 A6 04            [ 1] 2230 	ld a,#TK_INTGR
      000D1A                       2231 	_drop VSIZE  
      000D1A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D1C 81               [ 4] 2232 	ret 	
                                   2233 
                                   2234 ;-------------------------
                                   2235 ; binary integer parser 
                                   2236 ; input:
                                   2237 ;   X 		point to pad 
                                   2238 ;   Y 		point to tib 
                                   2239 ;   A 	    '%' 
                                   2240 ; output:  
                                   2241 ;   pad     number string 
                                   2242 ;   X 		integer 
                                   2243 ;   A 		TK_INTGR
                                   2244 ;   TOS     integer 
                                   2245 ;-------------------------
                           000001  2246 	BINARY=1
                           000002  2247 	VSIZE=2
      000D1D                       2248 parse_binary: ; { -- n }
      000D1D 4B 00            [ 1] 2249 	push #0
      000D1F 4B 00            [ 1] 2250 	push #0
      000D21 F7               [ 1] 2251 1$: ld (x),a 
      000D22 5C               [ 2] 2252 	incw x 
      000D23 72 5C 00 01      [ 1] 2253 	inc in 
      000D27 91 D6 00         [ 4] 2254 	ld a,([in.w],y)
      000D2A A1 30            [ 1] 2255 	cp a,#'0 
      000D2C 27 06            [ 1] 2256 	jreq 2$
      000D2E A1 31            [ 1] 2257 	cp a,#'1 
      000D30 27 02            [ 1] 2258 	jreq 2$ 
      000D32 20 09            [ 2] 2259 	jra bin_exit 
      000D34 A0 30            [ 1] 2260 2$: sub a,#'0	
      000D36 46               [ 1] 2261 	rrc a 
      000D37 09 02            [ 1] 2262 	rlc (BINARY+1,sp)
      000D39 09 01            [ 1] 2263 	rlc (BINARY,sp)
      000D3B 20 E4            [ 2] 2264 	jra 1$  
      000D3D                       2265 bin_exit:
      000D3D 7F               [ 1] 2266 	clr (x)
      000D3E 1E 01            [ 2] 2267 	ldw x,(BINARY,sp)
      000D40 A6 04            [ 1] 2268 	ld a,#TK_INTGR 	
      000D42                       2269 	_drop VSIZE 
      000D42 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D44 81               [ 4] 2270 	ret
                                   2271 
                                   2272 ;---------------------------
                                   2273 ;  token begin with a letter,
                                   2274 ;  is keyword or variable. 	
                                   2275 ; input:
                                   2276 ;   X 		point to pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2277 ;   Y 		point to text
                                   2278 ;   A 	    first letter  
                                   2279 ; output:
                                   2280 ;   X		exec_addr|var_addr 
                                   2281 ;   A 		TK_CMD 
                                   2282 ;   pad 	keyword|var_name  
                                   2283 ;   TOS     exec_addr|var_addr 
                                   2284 ;--------------------------  
      000D45                       2285 parse_keyword: ; { -- exec_addr|var_addr}
      000D45 CD 0F 40         [ 4] 2286 	call to_upper 
      000D48 F7               [ 1] 2287 	ld (x),a 
      000D49 5C               [ 2] 2288 	incw x 
      000D4A 72 5C 00 01      [ 1] 2289 	inc in 
      000D4E 91 D6 00         [ 4] 2290 	ld a,([in.w],y)
      000D51 CD 05 23         [ 4] 2291 	call is_alpha 
      000D54 25 EF            [ 1] 2292 	jrc parse_keyword 
      000D56 7F               [ 1] 2293 1$: clr (x)
      000D57 72 5D 17 39      [ 1] 2294 	tnz pad+1 
      000D5B 26 15            [ 1] 2295 	jrne 2$
                                   2296 ; one letter variable name 
      000D5D C6 17 38         [ 1] 2297 	ld a,pad 
      000D60 A0 41            [ 1] 2298 	sub a,#'A 
      000D62 48               [ 1] 2299 	sll a 
      000D63 88               [ 1] 2300 	push a 
      000D64 4B 00            [ 1] 2301 	push #0
      000D66 AE 00 28         [ 2] 2302 	ldw x,#vars 
      000D69 72 FB 01         [ 2] 2303 	addw x,(1,sp) ; X=var address 
      000D6C                       2304 	_drop 2 
      000D6C 5B 02            [ 2]    1     addw sp,#2 
      000D6E A6 05            [ 1] 2305 	ld a,#TK_VAR 
      000D70 20 0C            [ 2] 2306 	jra 4$ 
      000D72                       2307 2$: ; check for keyword, otherwise syntax error.
      000D72                       2308 	_ldx_dict kword_dict
      000D72 AE 27 3F         [ 2]    1     ldw x,#kword_dict+2
      000D75 CD 11 B3         [ 4] 2309 	call search_dict
      000D78 4D               [ 1] 2310 	tnz a
      000D79 26 03            [ 1] 2311 	jrne 4$ 
      000D7B CC 07 B8         [ 2] 2312 	jp syntax_error
      000D7E 81               [ 4] 2313 4$:	ret  	
                                   2314 
                                   2315 
                                   2316 ;------------------------------------
                                   2317 ; scan text for next token
                                   2318 ; move token in 'pad'
                                   2319 ; input: 
      000D7F                       2320 	none: 
                                   2321 ; use:
                                   2322 ;	Y   pointer to text
                                   2323 ;   X	pointer to pad 
                                   2324 ;   in.w   index in text buffer
                                   2325 ; output:
                                   2326 ;   A       token attribute 
                                   2327 ;   pad 	token as .asciz
                                   2328 ;   X 		token value   
                                   2329 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2330 	; use to check special character 
                                   2331 	.macro _case c t  
                                   2332 	ld a,#c 
                                   2333 	cp a,(TCHAR,sp) 
                                   2334 	jrne t
                                   2335 	.endm 
                                   2336 
                           000001  2337 	TCHAR=1
                           000002  2338 	ATTRIB=2 
                           000002  2339 	VSIZE=2
      000D7F                       2340 get_token: 
      000D7F 90 AE 16 E8      [ 2] 2341 	ldw y,#tib    	
      000D83 C6 00 01         [ 1] 2342 	ld a,in 
      000D86 C1 00 03         [ 1] 2343 	cp a,count 
      000D89 2B 03            [ 1] 2344 	jrmi 1$
      000D8B A6 00            [ 1] 2345 	ld a,#TK_NONE 
      000D8D 81               [ 4] 2346 	ret 
      000D8E                       2347 1$:	
      000D8E                       2348 	_vars VSIZE
      000D8E 52 02            [ 2]    1     sub sp,#VSIZE 
      000D90 AE 17 38         [ 2] 2349 	ldw x, #pad
      000D93 A6 20            [ 1] 2350 	ld a,#SPACE
      000D95 CD 0F F8         [ 4] 2351 	call skip
      000D98 55 00 01 00 02   [ 1] 2352 	mov in.saved,in 
      000D9D 91 D6 00         [ 4] 2353 	ld a,([in.w],y)
      000DA0 26 07            [ 1] 2354 	jrne str_tst
      000DA2 72 5F 17 38      [ 1] 2355 	clr pad 
      000DA6 CC 0F 34         [ 2] 2356 	jp token_exit ; end of line 
                                   2357 
      000DA9                       2358 str_tst: ; check for quoted string  	
      000DA9 CD 0F 40         [ 4] 2359 	call to_upper 
      000DAC 6B 01            [ 1] 2360 	ld (TCHAR,sp),a 
      000DAE                       2361 	_case '"' nbr_tst
      000DAE A6 22            [ 1]    1 	ld a,#'"' 
      000DB0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DB2 26 06            [ 1]    3 	jrne nbr_tst
      000DB4 CD 0C 8A         [ 4] 2362 	call parse_quote
      000DB7 CC 0F 34         [ 2] 2363 	jp token_exit
      000DBA                       2364 nbr_tst: ; check for number 
      000DBA A6 24            [ 1] 2365 	ld a,#'$'
      000DBC 11 01            [ 1] 2366 	cp a,(TCHAR,sp) 
      000DBE 27 13            [ 1] 2367 	jreq 1$
      000DC0 A6 26            [ 1] 2368 	ld a,#'&
      000DC2 11 01            [ 1] 2369 	cp a,(TCHAR,sp)
      000DC4 26 06            [ 1] 2370 	jrne 0$
      000DC6 CD 0D 1D         [ 4] 2371 	call parse_binary ; expect binary integer 
      000DC9 CC 0F 34         [ 2] 2372 	jp token_exit 
      000DCC 7B 01            [ 1] 2373 0$:	ld a,(TCHAR,sp)
      000DCE CD 0F 37         [ 4] 2374 	call is_digit
      000DD1 24 06            [ 1] 2375 	jrnc 3$
      000DD3 CD 0C E2         [ 4] 2376 1$:	call parse_integer 
      000DD6 CC 0F 34         [ 2] 2377 	jp token_exit 
      000DD9                       2378 3$: 
      000DD9                       2379 	_case '(' bkslsh_tst 
      000DD9 A6 28            [ 1]    1 	ld a,#'(' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000DDB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DDD 26 05            [ 1]    3 	jrne bkslsh_tst
      000DDF A6 0B            [ 1] 2380 	ld a,#TK_LPAREN
      000DE1 CC 0F 24         [ 2] 2381 	jp token_char   	
      000DE4                       2382 bkslsh_tst: ; character token 
      000DE4                       2383 	_case '\',rparnt_tst
      000DE4 A6 5C            [ 1]    1 	ld a,#'\' 
      000DE6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE8 26 18            [ 1]    3 	jrne rparnt_tst
      000DEA 7B 01            [ 1] 2384 	ld a,(TCHAR,sp)
      000DEC F7               [ 1] 2385 	ld (x),a 
      000DED 5C               [ 2] 2386 	incw x 
      000DEE 72 5C 00 01      [ 1] 2387 	inc in 
      000DF2 91 D6 00         [ 4] 2388 	ld a,([in.w],y)
      000DF5 F7               [ 1] 2389 	ld (x),a 
      000DF6 5C               [ 2] 2390 	incw x 
      000DF7 72 5C 00 01      [ 1] 2391 	inc in  
      000DFB 7F               [ 1] 2392 	clr (x) 
      000DFC 97               [ 1] 2393 	ld xl,a 
      000DFD A6 03            [ 1] 2394 	ld a,#TK_CHAR 
      000DFF CC 0F 34         [ 2] 2395 	jp token_exit 
      000E02                       2396 rparnt_tst:		
      000E02                       2397 	_case ')' colon_tst 
      000E02 A6 29            [ 1]    1 	ld a,#')' 
      000E04 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E06 26 05            [ 1]    3 	jrne colon_tst
      000E08 A6 0C            [ 1] 2398 	ld a,#TK_RPAREN 
      000E0A CC 0F 24         [ 2] 2399 	jp token_char 
      000E0D                       2400 colon_tst:
      000E0D                       2401 	_case ':' comma_tst 
      000E0D A6 3A            [ 1]    1 	ld a,#':' 
      000E0F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E11 26 05            [ 1]    3 	jrne comma_tst
      000E13 A6 01            [ 1] 2402 	ld a,#TK_COLON 
      000E15 CC 0F 24         [ 2] 2403 	jp token_char 
      000E18                       2404 comma_tst:
      000E18                       2405 	_case COMMA sharp_tst 
      000E18 A6 2C            [ 1]    1 	ld a,#COMMA 
      000E1A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E1C 26 05            [ 1]    3 	jrne sharp_tst
      000E1E A6 0D            [ 1] 2406 	ld a,#TK_COMMA
      000E20 CC 0F 24         [ 2] 2407 	jp token_char
      000E23                       2408 sharp_tst:
      000E23                       2409 	_case SHARP dash_tst 
      000E23 A6 23            [ 1]    1 	ld a,#SHARP 
      000E25 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E27 26 05            [ 1]    3 	jrne dash_tst
      000E29 A6 0E            [ 1] 2410 	ld a,#TK_SHARP
      000E2B CC 0F 24         [ 2] 2411 	jp token_char  	 	 
      000E2E                       2412 dash_tst: 	
      000E2E                       2413 	_case '-' at_tst 
      000E2E A6 2D            [ 1]    1 	ld a,#'-' 
      000E30 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E32 26 05            [ 1]    3 	jrne at_tst
      000E34 A6 11            [ 1] 2414 	ld a,#TK_MINUS  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E36 CC 0F 24         [ 2] 2415 	jp token_char 
      000E39                       2416 at_tst:
      000E39                       2417 	_case '@' qmark_tst 
      000E39 A6 40            [ 1]    1 	ld a,#'@' 
      000E3B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E3D 26 05            [ 1]    3 	jrne qmark_tst
      000E3F A6 02            [ 1] 2418 	ld a,#TK_ARRAY 
      000E41 CC 0F 24         [ 2] 2419 	jp token_char
      000E44                       2420 qmark_tst:
      000E44                       2421 	_case '?' tick_tst 
      000E44 A6 3F            [ 1]    1 	ld a,#'?' 
      000E46 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E48 26 11            [ 1]    3 	jrne tick_tst
      000E4A 7B 01            [ 1] 2422 	ld a,(TCHAR,sp)
      000E4C F7               [ 1] 2423 	ld (x),a 
      000E4D 5C               [ 2] 2424 	incw x 
      000E4E 7F               [ 1] 2425 	clr (x)
      000E4F 72 5C 00 01      [ 1] 2426 	inc in 
      000E53 A6 06            [ 1] 2427 	ld a,#TK_CMD 
      000E55 AE 16 5A         [ 2] 2428 	ldw x,#print 
      000E58 CC 0F 34         [ 2] 2429 	jp token_exit
      000E5B                       2430 tick_tst: ; ignore comment 
      000E5B                       2431 	_case TICK plus_tst 
      000E5B A6 27            [ 1]    1 	ld a,#TICK 
      000E5D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E5F 26 0C            [ 1]    3 	jrne plus_tst
      000E61 72 5C 00 01      [ 1] 2432 	inc in 
      000E65 A6 06            [ 1] 2433 	ld a,#TK_CMD 
      000E67 AE 17 49         [ 2] 2434 	ldw x,#rem 
      000E6A CC 0F 34         [ 2] 2435 	jp token_exit 
      000E6D                       2436 plus_tst:
      000E6D                       2437 	_case '+' star_tst 
      000E6D A6 2B            [ 1]    1 	ld a,#'+' 
      000E6F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E71 26 05            [ 1]    3 	jrne star_tst
      000E73 A6 10            [ 1] 2438 	ld a,#TK_PLUS  
      000E75 CC 0F 24         [ 2] 2439 	jp token_char 
      000E78                       2440 star_tst:
      000E78                       2441 	_case '*' slash_tst 
      000E78 A6 2A            [ 1]    1 	ld a,#'*' 
      000E7A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E7C 26 05            [ 1]    3 	jrne slash_tst
      000E7E A6 20            [ 1] 2442 	ld a,#TK_MULT 
      000E80 CC 0F 24         [ 2] 2443 	jp token_char 
      000E83                       2444 slash_tst: 
      000E83                       2445 	_case '/' prcnt_tst 
      000E83 A6 2F            [ 1]    1 	ld a,#'/' 
      000E85 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E87 26 05            [ 1]    3 	jrne prcnt_tst
      000E89 A6 21            [ 1] 2446 	ld a,#TK_DIV 
      000E8B CC 0F 24         [ 2] 2447 	jp token_char 
      000E8E                       2448 prcnt_tst:
      000E8E                       2449 	_case '%' eql_tst 
      000E8E A6 25            [ 1]    1 	ld a,#'%' 
      000E90 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000E92 26 05            [ 1]    3 	jrne eql_tst
      000E94 A6 22            [ 1] 2450 	ld a,#TK_MOD
      000E96 CC 0F 24         [ 2] 2451 	jp token_char  
                                   2452 ; 1 or 2 character tokens 	
      000E99                       2453 eql_tst:
      000E99                       2454 	_case '=' gt_tst 		
      000E99 A6 3D            [ 1]    1 	ld a,#'=' 
      000E9B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E9D 26 05            [ 1]    3 	jrne gt_tst
      000E9F A6 32            [ 1] 2455 	ld a,#TK_EQUAL
      000EA1 CC 0F 24         [ 2] 2456 	jp token_char 
      000EA4                       2457 gt_tst:
      000EA4                       2458 	_case '>' lt_tst 
      000EA4 A6 3E            [ 1]    1 	ld a,#'>' 
      000EA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EA8 26 33            [ 1]    3 	jrne lt_tst
      000EAA A6 31            [ 1] 2459 	ld a,#TK_GT 
      000EAC 6B 02            [ 1] 2460 	ld (ATTRIB,sp),a 
      000EAE 72 5C 00 01      [ 1] 2461 	inc in 
      000EB2 91 D6 00         [ 4] 2462 	ld a,([in.w],y)
      000EB5 A1 3D            [ 1] 2463 	cp a,#'=
      000EB7 26 0C            [ 1] 2464 	jrne 1$
      000EB9 7B 01            [ 1] 2465 	ld a,(TCHAR,sp)
      000EBB F7               [ 1] 2466 	ld (x),a
      000EBC 5C               [ 2] 2467 	incw x 
      000EBD A6 3D            [ 1] 2468 	ld a,#'=
      000EBF 6B 01            [ 1] 2469 	ld (TCHAR,sp),a 
      000EC1 A6 33            [ 1] 2470 	ld a,#TK_GE 
      000EC3 20 5F            [ 2] 2471 	jra token_char  
      000EC5 A1 3C            [ 1] 2472 1$: cp a,#'<
      000EC7 26 0C            [ 1] 2473 	jrne 2$
      000EC9 7B 01            [ 1] 2474 	ld a,(TCHAR,sp)
      000ECB F7               [ 1] 2475 	ld (x),a
      000ECC 5C               [ 2] 2476 	incw x 
      000ECD A6 3C            [ 1] 2477 	ld a,#'<	
      000ECF 6B 01            [ 1] 2478 	ld (TCHAR,sp),a 
      000ED1 A6 35            [ 1] 2479 	ld a,#TK_NE 
      000ED3 20 4F            [ 2] 2480 	jra token_char 
      000ED5 72 5A 00 01      [ 1] 2481 2$: dec in
      000ED9 7B 02            [ 1] 2482 	ld a,(ATTRIB,sp)
      000EDB 20 47            [ 2] 2483 	jra token_char 
      000EDD                       2484 lt_tst:
      000EDD                       2485 	_case '<' other
      000EDD A6 3C            [ 1]    1 	ld a,#'<' 
      000EDF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EE1 26 32            [ 1]    3 	jrne other
      000EE3 A6 34            [ 1] 2486 	ld a,#TK_LT 
      000EE5 6B 02            [ 1] 2487 	ld (ATTRIB,sp),a 
      000EE7 72 5C 00 01      [ 1] 2488 	inc in 
      000EEB 91 D6 00         [ 4] 2489 	ld a,([in.w],y)
      000EEE A1 3D            [ 1] 2490 	cp a,#'=
      000EF0 26 0B            [ 1] 2491 	jrne 1$
      000EF2 7B 01            [ 1] 2492 	ld a,(TCHAR,sp)
      000EF4 F7               [ 1] 2493 	ld (x),a 
      000EF5 A6 3D            [ 1] 2494 	ld a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000EF7 6B 01            [ 1] 2495 	ld (TCHAR,sp),a 
      000EF9 A6 36            [ 1] 2496 	ld a,#TK_LE 
      000EFB 20 27            [ 2] 2497 	jra token_char 
      000EFD A1 3E            [ 1] 2498 1$: cp a,#'>
      000EFF 26 0C            [ 1] 2499 	jrne 2$
      000F01 7B 01            [ 1] 2500 	ld a,(TCHAR,sp)
      000F03 F7               [ 1] 2501 	ld (x),a 
      000F04 5C               [ 2] 2502 	incw x 
      000F05 A6 3E            [ 1] 2503 	ld a,#'>
      000F07 6B 01            [ 1] 2504 	ld (TCHAR,sp),a 
      000F09 A6 35            [ 1] 2505 	ld a,#TK_NE 
      000F0B 20 17            [ 2] 2506 	jra token_char 
      000F0D 72 5A 00 01      [ 1] 2507 2$: dec in 
      000F11 7B 02            [ 1] 2508 	ld a,(ATTRIB,sp)
      000F13 20 0F            [ 2] 2509 	jra token_char 	
      000F15                       2510 other: ; not a special character 	 
      000F15 7B 01            [ 1] 2511 	ld a,(TCHAR,sp)
      000F17 CD 05 23         [ 4] 2512 	call is_alpha 
      000F1A 25 03            [ 1] 2513 	jrc 30$ 
      000F1C CC 07 B8         [ 2] 2514 	jp syntax_error 
      000F1F                       2515 30$: 
      000F1F CD 0D 45         [ 4] 2516 	call parse_keyword
      000F22 20 10            [ 2] 2517 	jra token_exit 
      000F24                       2518 token_char:
      000F24 6B 02            [ 1] 2519 	ld (ATTRIB,sp),a 
      000F26 7B 01            [ 1] 2520 	ld a,(TCHAR,sp)
      000F28 F7               [ 1] 2521 	ld (x),a 
      000F29 5C               [ 2] 2522 	incw x 
      000F2A 7F               [ 1] 2523 	clr(x)
      000F2B 72 5C 00 01      [ 1] 2524 	inc in 
      000F2F 7B 02            [ 1] 2525 	ld a,(ATTRIB,sp)
      000F31 AE 17 38         [ 2] 2526 	ldw x,#pad 
      000F34                       2527 token_exit:
      000F34                       2528 	_drop VSIZE 
      000F34 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F36 81               [ 4] 2529 	ret
                                   2530 
                                   2531 ;------------------------------------
                                   2532 ; check if character in {'0'..'9'}
                                   2533 ; input:
                                   2534 ;    A  character to test
                                   2535 ; output:
                                   2536 ;    Carry  0 not digit | 1 digit
                                   2537 ;------------------------------------
      000F37                       2538 is_digit:
      000F37 A1 30            [ 1] 2539 	cp a,#'0
      000F39 25 03            [ 1] 2540 	jrc 1$
      000F3B A1 3A            [ 1] 2541     cp a,#'9+1
      000F3D 8C               [ 1] 2542 	ccf 
      000F3E 8C               [ 1] 2543 1$:	ccf 
      000F3F 81               [ 4] 2544     ret
                                   2545 
                                   2546 ;------------------------------------
                                   2547 ; convert alpha to uppercase
                                   2548 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2549 ;    a  character to convert
                                   2550 ; output:
                                   2551 ;    a  uppercase character
                                   2552 ;------------------------------------
      000F40                       2553 to_upper::
      000F40 A1 61            [ 1] 2554 	cp a,#'a
      000F42 2A 01            [ 1] 2555 	jrpl 1$
      000F44 81               [ 4] 2556 0$:	ret
      000F45 A1 7A            [ 1] 2557 1$: cp a,#'z	
      000F47 22 FB            [ 1] 2558 	jrugt 0$
      000F49 A0 20            [ 1] 2559 	sub a,#32
      000F4B 81               [ 4] 2560 	ret
                                   2561 	
                                   2562 ;------------------------------------
                                   2563 ; convert pad content in integer
                                   2564 ; input:
                                   2565 ;    pad		.asciz to convert
                                   2566 ; output:
                                   2567 ;    acc24      int24_t
                                   2568 ;------------------------------------
                                   2569 	; local variables
                           000001  2570 	SIGN=1 ; 1 byte, 
                           000002  2571 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2572 	TEMP=3 ; 1 byte, temporary storage
                           000003  2573 	VSIZE=3 ; 3 bytes reserved for local storage
      000F4C                       2574 atoi24:
      000F4C 89               [ 2] 2575 	pushw x ;save x
      000F4D 52 03            [ 2] 2576 	sub sp,#VSIZE
                                   2577 	; acc24=0 
      000F4F 72 5F 00 0B      [ 1] 2578 	clr acc24    
      000F53 72 5F 00 0C      [ 1] 2579 	clr acc16
      000F57 72 5F 00 0D      [ 1] 2580 	clr acc8 
      000F5B C6 17 38         [ 1] 2581 	ld a, pad 
      000F5E 27 5A            [ 1] 2582 	jreq atoi_exit
      000F60 0F 01            [ 1] 2583 	clr (SIGN,sp)
      000F62 A6 0A            [ 1] 2584 	ld a,#10
      000F64 6B 02            [ 1] 2585 	ld (BASE,sp),a ; default base decimal
      000F66 AE 17 38         [ 2] 2586 	ldw x,#pad ; pointer to string to convert
      000F69 F6               [ 1] 2587 	ld a,(x)
      000F6A 27 47            [ 1] 2588 	jreq 9$  ; completed if 0
      000F6C A1 2D            [ 1] 2589 	cp a,#'-
      000F6E 26 04            [ 1] 2590 	jrne 1$
      000F70 03 01            [ 1] 2591 	cpl (SIGN,sp)
      000F72 20 08            [ 2] 2592 	jra 2$
      000F74 A1 24            [ 1] 2593 1$: cp a,#'$
      000F76 26 06            [ 1] 2594 	jrne 3$
      000F78 A6 10            [ 1] 2595 	ld a,#16
      000F7A 6B 02            [ 1] 2596 	ld (BASE,sp),a
      000F7C 5C               [ 2] 2597 2$:	incw x
      000F7D F6               [ 1] 2598 	ld a,(x)
      000F7E                       2599 3$:	
      000F7E A1 61            [ 1] 2600 	cp a,#'a
      000F80 2B 02            [ 1] 2601 	jrmi 4$
      000F82 A0 20            [ 1] 2602 	sub a,#32
      000F84 A1 30            [ 1] 2603 4$:	cp a,#'0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F86 2B 2B            [ 1] 2604 	jrmi 9$
      000F88 A0 30            [ 1] 2605 	sub a,#'0
      000F8A A1 0A            [ 1] 2606 	cp a,#10
      000F8C 2B 06            [ 1] 2607 	jrmi 5$
      000F8E A0 07            [ 1] 2608 	sub a,#7
      000F90 11 02            [ 1] 2609 	cp a,(BASE,sp)
      000F92 2A 1F            [ 1] 2610 	jrpl 9$
      000F94 6B 03            [ 1] 2611 5$:	ld (TEMP,sp),a
      000F96 7B 02            [ 1] 2612 	ld a,(BASE,sp)
      000F98 CD 0F BE         [ 4] 2613 	call mulu24_8
      000F9B 7B 03            [ 1] 2614 	ld a,(TEMP,sp)
      000F9D CB 00 0D         [ 1] 2615 	add a,acc24+2
      000FA0 C7 00 0D         [ 1] 2616 	ld acc24+2,a
      000FA3 4F               [ 1] 2617 	clr a
      000FA4 C9 00 0C         [ 1] 2618 	adc a,acc24+1
      000FA7 C7 00 0C         [ 1] 2619 	ld acc24+1,a
      000FAA 4F               [ 1] 2620 	clr a
      000FAB C9 00 0B         [ 1] 2621 	adc a,acc24
      000FAE C7 00 0B         [ 1] 2622 	ld acc24,a
      000FB1 20 C9            [ 2] 2623 	jra 2$
      000FB3 0D 01            [ 1] 2624 9$:	tnz (SIGN,sp)
      000FB5 27 03            [ 1] 2625     jreq atoi_exit
      000FB7 CD 0A E3         [ 4] 2626     call neg_acc24
      000FBA                       2627 atoi_exit: 
      000FBA 5B 03            [ 2] 2628 	addw sp,#VSIZE
      000FBC 85               [ 2] 2629 	popw x ; restore x
      000FBD 81               [ 4] 2630 	ret
                                   2631 
                                   2632 ;--------------------------------------
                                   2633 ; unsigned multiply uint24_t by uint8_t
                                   2634 ; use to convert numerical string to uint24_t
                                   2635 ; input:
                                   2636 ;	acc24	uint24_t 
                                   2637 ;   A		uint8_t
                                   2638 ; output:
                                   2639 ;   acc24   A*acc24
                                   2640 ;-------------------------------------
                                   2641 ; local variables offset  on sp
                           000003  2642 	U8   = 3   ; A pushed on stack
                           000002  2643 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2644 	OVFH = 1  ; multiplication overflow high byte
                           000003  2645 	VSIZE = 3
      000FBE                       2646 mulu24_8:
      000FBE 89               [ 2] 2647 	pushw x    ; save X
                                   2648 	; local variables
      000FBF 88               [ 1] 2649 	push a     ; U8
      000FC0 5F               [ 1] 2650 	clrw x     ; initialize overflow to 0
      000FC1 89               [ 2] 2651 	pushw x    ; multiplication overflow
                                   2652 ; multiply low byte.
      000FC2 C6 00 0D         [ 1] 2653 	ld a,acc24+2
      000FC5 97               [ 1] 2654 	ld xl,a
      000FC6 7B 03            [ 1] 2655 	ld a,(U8,sp)
      000FC8 42               [ 4] 2656 	mul x,a
      000FC9 9F               [ 1] 2657 	ld a,xl
      000FCA C7 00 0D         [ 1] 2658 	ld acc24+2,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FCD 9E               [ 1] 2659 	ld a, xh
      000FCE 6B 02            [ 1] 2660 	ld (OVFL,sp),a
                                   2661 ; multipy middle byte
      000FD0 C6 00 0C         [ 1] 2662 	ld a,acc24+1
      000FD3 97               [ 1] 2663 	ld xl,a
      000FD4 7B 03            [ 1] 2664 	ld a, (U8,sp)
      000FD6 42               [ 4] 2665 	mul x,a
                                   2666 ; add overflow to this partial product
      000FD7 72 FB 01         [ 2] 2667 	addw x,(OVFH,sp)
      000FDA 9F               [ 1] 2668 	ld a,xl
      000FDB C7 00 0C         [ 1] 2669 	ld acc24+1,a
      000FDE 4F               [ 1] 2670 	clr a
      000FDF A9 00            [ 1] 2671 	adc a,#0
      000FE1 6B 01            [ 1] 2672 	ld (OVFH,sp),a
      000FE3 9E               [ 1] 2673 	ld a,xh
      000FE4 6B 02            [ 1] 2674 	ld (OVFL,sp),a
                                   2675 ; multiply most signficant byte	
      000FE6 C6 00 0B         [ 1] 2676 	ld a, acc24
      000FE9 97               [ 1] 2677 	ld xl, a
      000FEA 7B 03            [ 1] 2678 	ld a, (U8,sp)
      000FEC 42               [ 4] 2679 	mul x,a
      000FED 72 FB 01         [ 2] 2680 	addw x, (OVFH,sp)
      000FF0 9F               [ 1] 2681 	ld a, xl
      000FF1 C7 00 0B         [ 1] 2682 	ld acc24,a
      000FF4 5B 03            [ 2] 2683     addw sp,#VSIZE
      000FF6 85               [ 2] 2684 	popw x
      000FF7 81               [ 4] 2685 	ret
                                   2686 
                                   2687 ;------------------------------------
                                   2688 ; skip character c in text starting from 'in'
                                   2689 ; input:
                                   2690 ;	 y 		point to text buffer
                                   2691 ;    a 		character to skip
                                   2692 ; output:  
                                   2693 ;	'in' ajusted to new position
                                   2694 ;------------------------------------
                           000001  2695 	C = 1 ; local var
      000FF8                       2696 skip:
      000FF8 88               [ 1] 2697 	push a
      000FF9 91 D6 00         [ 4] 2698 1$:	ld a,([in.w],y)
      000FFC 27 0A            [ 1] 2699 	jreq 2$
      000FFE 11 01            [ 1] 2700 	cp a,(C,sp)
      001000 26 06            [ 1] 2701 	jrne 2$
      001002 72 5C 00 01      [ 1] 2702 	inc in
      001006 20 F1            [ 2] 2703 	jra 1$
      001008                       2704 2$: _drop 1 
      001008 5B 01            [ 2]    1     addw sp,#1 
      00100A 81               [ 4] 2705 	ret
                                   2706 	
                                   2707 ;------------------------------
                                   2708 ; restore 'in.w' variable to 
                                   2709 ; its value before last call
                                   2710 ; to get_token.
                                   2711 ;------------------------------
      00100B                       2712 unget_token:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00100B 55 00 02 00 01   [ 1] 2713 	mov in,in.saved
      001010 81               [ 4] 2714 	ret 
                                   2715 
                                   2716 
                                   2717 ;******************************
                                   2718 ;  data stack manipulation
                                   2719 ;*****************************
                                   2720 ;----------------------	
                                   2721 ; push X on data stack 
                                   2722 ; input:
                                   2723 ;	X 
                                   2724 ; output:
                                   2725 ;	none 
                                   2726 ;----------------------	
      001011                       2727 dpush:
      001011                       2728     _dp_down
      001011 72 5A 00 1D      [ 1]    1     dec dstkptr+1 
      001015 72 5A 00 1D      [ 1]    2     dec dstkptr+1
      001019 72 CF 00 1C      [ 5] 2729     ldw [dstkptr],x  
      00101D 81               [ 4] 2730 	ret 
                                   2731 
                                   2732 
                                   2733 ;----------------------	
                                   2734 ; pop data stack in X 
                                   2735 ; input:
                                   2736 ;	none
                                   2737 ; output:
                                   2738 ;	X   
                                   2739 ;----------------------	
      00101E                       2740 dpop: 
      00101E 72 CE 00 1C      [ 5] 2741     ldw x, [dstkptr]
      001022                       2742 	_dp_up
      001022 72 5C 00 1D      [ 1]    1     inc dstkptr+1
      001026 72 5C 00 1D      [ 1]    2     inc dstkptr+1
      00102A 81               [ 4] 2743 	ret 
                                   2744 
                                   2745 ;-----------------------------
                                   2746 ; swap top 2 elements of dstack
                                   2747 ;  {n1 n2 -- n2 n1 }
                                   2748 ;-----------------------------
      00102B                       2749 dswap:
      00102B 72 CE 00 1C      [ 5] 2750 	ldw x,[dstkptr]
      00102F 89               [ 2] 2751 	pushw x 
      001030 AE 00 02         [ 2] 2752 	ldw x,#2 
      001033 72 DE 00 1C      [ 5] 2753 	ldw x,([dstkptr],x) 
      001037 72 CF 00 1C      [ 5] 2754 	ldw [dstkptr],x 
      00103B AE 00 02         [ 2] 2755 	ldw x,#2
      00103E 90 85            [ 2] 2756 	popw y 
      001040 72 DF 00 1C      [ 5] 2757 	ldw ([dstkptr],x),y 
      001044 81               [ 4] 2758 	ret
                                   2759 
                                   2760 ;-----------------------------
                                   2761 ; drop TOS 
                                   2762 ;-----------------------------
      001045                       2763 ddrop: ; { n -- }
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001045                       2764 	_dp_up 
      001045 72 5C 00 1D      [ 1]    1     inc dstkptr+1
      001049 72 5C 00 1D      [ 1]    2     inc dstkptr+1
      00104D 81               [ 4] 2765 	ret
                                   2766 	
                                   2767 ;-----------------------------
                                   2768 ; duplicate TOS 
                                   2769 ;  dstack: { ix...n -- ix...n n }
                                   2770 ;-----------------------------
      00104E                       2771 ddup:
                                   2772 ;	ldw x,[dstkptr]
                                   2773 ;	_dp_down
                                   2774 ;   ldw [dstkptr],x  
                                   2775 ;	ret 
                                   2776 
                                   2777 
                                   2778 ;----------------------------------
                                   2779 ; pick value n from dstack 
                                   2780 ; put it on TOS
                                   2781 ; dstack: {ix,..,p -- ix,...,np }
                                   2782 ;-----------------------------------
      00104E                       2783 dpick:
                                   2784 ;	ldw x,[dstkptr]
                                   2785 ;	sllw x 
                                   2786 ;	addw x,dstkptr 
                                   2787 ;	ldw x,(x)
                                   2788 ;	ldw [dstkptr],x 
                                   2789 ;	ret
                                   2790 
                                   2791 ;---------------------------
                                   2792 ;  fetch variable in X 
                                   2793 ;  dstack:{ addr -- value }
                                   2794 ;---------------------------
      00104E                       2795 fetch:
      00104E 72 CE 00 1C      [ 5] 2796 	ldw x,[dstkptr]
      001052 FE               [ 2] 2797 	ldw x,(x)
      001053 72 CF 00 1C      [ 5] 2798 	ldw [dstkptr],x
      001057 81               [ 4] 2799 	ret 
                                   2800 
                                   2801 ;----------------------------
                                   2802 ; store variable 
                                   2803 ; dstack: {addr value -- }
                                   2804 ;----------------------------
      001058                       2805 store:
      001058 CD 10 1E         [ 4] 2806 	call dpop 
      00105B 90 93            [ 1] 2807 	ldw y,x   ; y=value 
      00105D CD 10 1E         [ 4] 2808 	call dpop 
      001060 FF               [ 2] 2809 	ldw (x),y 
      001061 81               [ 4] 2810 	ret 
                                   2811 
                                   2812 ;---------------------------------
                                   2813 ; drop n elements from data stack 
                                   2814 ; input: 
                                   2815 ;   X 		n 
                                   2816 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2817 ;   none 
                                   2818 ;-------------------------------------
      001062                       2819 ddrop_n:
      001062 58               [ 2] 2820 	sllw x
      001063 72 BB 00 1C      [ 2] 2821 	addw x,dstkptr 
      001067 CF 00 1C         [ 2] 2822 	ldw dstkptr,x  
      00106A 81               [ 4] 2823 	ret 
                                   2824 
      00106B 0A 64 73 74 61 63 6B  2825 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2826 ;----------------------------
                                   2827 ; print dstack content 
                                   2828 ;---------------------------
                           000001  2829 	XSAVE=1
                           000002  2830 	VSIZE=2
      001075                       2831 dots:
      001075                       2832 	_vars VSIZE 
      001075 52 02            [ 2]    1     sub sp,#VSIZE 
      001077 AE 10 6B         [ 2] 2833 	ldw x,#dstk_prompt 
      00107A CD 01 DE         [ 4] 2834 	call puts
      00107D AE 17 7E         [ 2] 2835 	ldw x,#dstack_empty-CELL_SIZE
      001080 35 0A 00 0A      [ 1] 2836 	mov base,#10 
      001084 C3 00 1C         [ 2] 2837 1$:	cpw x,dstkptr 
      001087 25 0D            [ 1] 2838 	jrult 4$ 
      001089 1F 01            [ 2] 2839 	ldw (XSAVE,sp),x
      00108B FE               [ 2] 2840 	ldw  x,(x)
      00108C CD 0A 16         [ 4] 2841 	call print_int 
      00108F 1E 01            [ 2] 2842 	ldw x,(XSAVE,sp)
      001091 1D 00 02         [ 2] 2843 	subw x,#CELL_SIZE 
      001094 20 EE            [ 2] 2844 	jra 1$ 
      001096 A6 0D            [ 1] 2845 4$: ld a,#CR 
      001098 CD 01 CB         [ 4] 2846 	call putc 
      00109B                       2847 	_drop VSIZE
      00109B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00109D 4F               [ 1] 2848 	clr a 
      00109E 81               [ 4] 2849 	ret
                                   2850 
      00109F 0A 63 73 74 61 63 6B  2851 cstk_prompt: .asciz "\ncstack: "
             3A 20 00
                                   2852 ;--------------------------------
                                   2853 ; print cstack content
                                   2854 ;--------------------------------
                           000001  2855 	XSAVE=1
                           000002  2856 	VSIZE=2 
      0010A9                       2857 dotr:
      0010A9                       2858 	_vars VSIZE 
      0010A9 52 02            [ 2]    1     sub sp,#VSIZE 
      0010AB AE 10 9F         [ 2] 2859 	ldw x,#cstk_prompt
      0010AE CD 01 DE         [ 4] 2860 	call puts 
      0010B1 96               [ 1] 2861 	ldw x,sp 
      0010B2 1C 00 07         [ 2] 2862 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      0010B5 1F 01            [ 2] 2863 	ldw (XSAVE,sp),x  
      0010B7 AE 17 FE         [ 2] 2864 	ldw x,#RAM_SIZE-2
      0010BA 35 10 00 0A      [ 1] 2865 	mov base,#16
      0010BE                       2866 dotr_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010BE 13 01            [ 2] 2867 	cpw x,(XSAVE,sp)
      0010C0 2B 0B            [ 1] 2868 	jrmi 9$
      0010C2 89               [ 2] 2869 	pushw x  
      0010C3 FE               [ 2] 2870 	ldw x,(x)
      0010C4 CD 0A 16         [ 4] 2871 	call print_int 
      0010C7 85               [ 2] 2872 	popw x  
      0010C8 1D 00 02         [ 2] 2873 	subw x,#CELL_SIZE
      0010CB 20 F1            [ 2] 2874 	jra dotr_loop 
      0010CD A6 0D            [ 1] 2875 9$:	ld a,#CR 
      0010CF CD 01 CB         [ 4] 2876 	call putc 
      0010D2                       2877 	_drop VSIZE 
      0010D2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010D4 4F               [ 1] 2878 	clr a 
      0010D5 81               [ 4] 2879 	ret
                                   2880 
                                   2881 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2882 ;;   TINY BASIC  operators,
                                   2883 ;;   commands and functions 
                                   2884 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2885 
                                   2886 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2887 ;;  Arithmetic operators
                                   2888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2889 
                                   2890 ;--------------------------------
                                   2891 ;  add 2 integers
                                   2892 ;  input:
                                   2893 ;    N1     on cstack 
                                   2894 ;    N2     on cstack 
                                   2895 ;  output:
                                   2896 ;    X 		n2+n1 
                                   2897 ;--------------------------------
                                   2898 	;arugments on cstack 
      0010D6                       2899 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0010D6                       2900 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      0010D6                       2901 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      0010D6                       2902 add:
      0010D6 1E 05            [ 2] 2903 	ldw x ,(N2,sp)
      0010D8 72 FB 03         [ 2] 2904 	addw x,(N1,sp)
      0010DB 1F 03            [ 2] 2905 	ldw (N1,sp),x 
      0010DD 81               [ 4] 2906 	ret 
                                   2907 
                                   2908 ;--------------------------------
                                   2909 ;  substract 2 ntegers
                                   2910 ;  input:
                                   2911 ;    N1     on cstack 
                                   2912 ;    N2     on cstack 
                                   2913 ;  output:
                                   2914 ;    X 		n2+n1 
                                   2915 ;--------------------------------
      0010DE                       2916 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010DE                       2917 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      0010DE                       2918 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      0010DE                       2919 substract:
      0010DE 1E 05            [ 2] 2920 	ldw x,(N2,sp)
      0010E0 72 F0 03         [ 2] 2921 	subw x,(N1,sp)
      0010E3 81               [ 4] 2922 	ret 
                                   2923 
                                   2924 ;-------------------------------------
                                   2925 ; multiply 2 integers
                                   2926 ; product overflow is ignored unless
                                   2927 ; MATH_OVF assembler flag is set to 1
                                   2928 ; input:
                                   2929 ;  	N1      on cstack
                                   2930 ;   N2 		on cstack 
                                   2931 ; output:
                                   2932 ;	X        N1*N2 
                                   2933 ;-------------------------------------
                                   2934 	;arguments 
      0010E4                       2935 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      0010E4                       2936 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      0010E4                       2937 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      0010E4                       2938 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      0010E4                       2939 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2940    ; local variables 
                           000001  2941 	SIGN=1
                           000002  2942 	PROD=2
                           000003  2943 	VSIZE=3
      0010E4                       2944 multiply:
      0010E4                       2945 	_vars VSIZE 
      0010E4 52 03            [ 2]    1     sub sp,#VSIZE 
      0010E6 0F 01            [ 1] 2946 	clr (SIGN,sp)
      0010E8 1E 06            [ 2] 2947 	ldw x,(N1_HB,sp)
      0010EA 9E               [ 1] 2948 	ld a,xh  
      0010EB A5 80            [ 1] 2949 	bcp a,#0x80 
      0010ED 27 05            [ 1] 2950 	jreq 2$
      0010EF 03 01            [ 1] 2951 	cpl (SIGN,sp)
      0010F1 50               [ 2] 2952 	negw x 
      0010F2 1F 06            [ 2] 2953 	ldw (N1_HB,sp),x 
      0010F4 1E 08            [ 2] 2954 2$: ldw x,(N2_HB,sp)
      0010F6 9E               [ 1] 2955 	ld a,xh  
      0010F7 A5 80            [ 1] 2956 	bcp a,#0x80 
      0010F9 27 05            [ 1] 2957 	jreq 3$
      0010FB 03 01            [ 1] 2958 	cpl (SIGN,sp)
      0010FD 50               [ 2] 2959 	negw x 
      0010FE 1F 08            [ 2] 2960 	ldw (N2_HB,sp),x 
                                   2961 ; N1_LB * N2_LB 	
      001100 7B 07            [ 1] 2962 3$:	ld a,(N1_LB,sp)
      001102 97               [ 1] 2963 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001103 7B 09            [ 1] 2964 	ld a,(N2_LB,sp) 
      001105 42               [ 4] 2965 	mul x,a 
                           000000  2966 .if MATH_OVF 	
                                   2967 	ld a,xh 
                                   2968 	bcp a,#0x80 
                                   2969 	jreq 4$ 
                                   2970 	ld a,#ERR_MATH_OVF 
                                   2971 	jp tb_error
                                   2972 .endif 	 
      001106 1F 02            [ 2] 2973 4$:	ldw (PROD,sp),x
                                   2974 ; N1_LB * N2_HB	 
      001108 7B 07            [ 1] 2975 	ld a,(N1_LB,sp) 
      00110A 97               [ 1] 2976 	ld xl,a 
      00110B 7B 08            [ 1] 2977 	ld a,(N2_HB,sp)
      00110D 42               [ 4] 2978 	mul x,a
      00110E 9F               [ 1] 2979 	ld a,xl 
      00110F 1B 02            [ 1] 2980 	add a,(PROD,sp)
                           000000  2981 .if MATH_OVF 	
                                   2982 	bcp a,#0x80 
                                   2983 	jreq 5$ 
                                   2984 	ld a,#ERR_MATH_OVF 
                                   2985 	jp tb_error
                                   2986 .endif 	 
      001111 6B 02            [ 1] 2987 5$:	ld (PROD,sp),a 
                                   2988 ; N1_HB * N2_LB 
      001113 7B 06            [ 1] 2989 	ld a,(N1_HB,sp)
      001115 97               [ 1] 2990 	ld xl,a 
      001116 7B 09            [ 1] 2991 	ld a,(N2_LB,sp)
      001118 42               [ 4] 2992 	mul x,a 
      001119 9F               [ 1] 2993 	ld a,xl 
      00111A 1B 02            [ 1] 2994 	add a,(PROD,sp)
                           000000  2995 .if MATH_OVF 	
                                   2996 	bcp a,#0x80 
                                   2997 	jreq 6$ 
                                   2998 	ld a,#ERR_MATH_OVF 
                                   2999 	jp tb_error
                                   3000 .endif 	 
      00111C 6B 02            [ 1] 3001 6$:	ld (PROD,sp),a 
                                   3002 ; N1_HB * N2_HB 	
                                   3003 ; it is pointless to multiply N1_HB*N2_HB 
                                   3004 ; as this product is over 65535 or 0 
                                   3005 ;
                                   3006 ; sign adjust product
      00111E 0D 01            [ 1] 3007 	tnz (SIGN,sp)
      001120 27 05            [ 1] 3008 	jreq 7$
      001122 1E 02            [ 2] 3009 	ldw x, (PROD,sp)
      001124 50               [ 2] 3010 	negw x
      001125 1F 02            [ 2] 3011 	ldw (PROD,sp),x  
      001127                       3012 7$: 
      001127 1E 02            [ 2] 3013 	ldw x,(PROD,sp) 
      001129                       3014 	_drop VSIZE 
      001129 5B 03            [ 2]    1     addw sp,#VSIZE 
      00112B 81               [ 4] 3015 	ret
                                   3016 
                                   3017 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3018 ;  euclidian divide n2/n1 
                                   3019 ; input:
                                   3020 ;    N2 	on cstack
                                   3021 ;    N1 	on cstack
                                   3022 ; output:
                                   3023 ;    X      n2/n1 
                                   3024 ;    Y      remainder 
                                   3025 ;----------------------------------
      00112C                       3026 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      00112C                       3027 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      00112C                       3028 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   3029 	; local variables
                           000001  3030 	SQUOT=1 ; sign quotient
                           000002  3031 	SDIVD=2 ; sign dividend  
                           000002  3032 	VSIZE=2
      00112C                       3033 divide:
      00112C                       3034 	_vars VSIZE 
      00112C 52 02            [ 2]    1     sub sp,#VSIZE 
      00112E 0F 01            [ 1] 3035 	clr (SQUOT,sp)
      001130 0F 02            [ 1] 3036 	clr (SDIVD,sp)
                                   3037 ; check for 0 divisor
      001132 1E 05            [ 2] 3038 	ldw x,(DIVISR,sp)
      001134 5D               [ 2] 3039 	tnzw x 
      001135 26 05            [ 1] 3040     jrne 0$
      001137 A6 04            [ 1] 3041 	ld a,#ERR_DIV0 
      001139 CC 07 BA         [ 2] 3042 	jp tb_error 
                                   3043 ; check divisor sign 	
      00113C 9E               [ 1] 3044 0$:	ld a,xh 
      00113D A5 80            [ 1] 3045 	bcp a,#0x80 
      00113F 27 03            [ 1] 3046 	jreq 1$
      001141 03 01            [ 1] 3047 	cpl (SQUOT,sp)
      001143 50               [ 2] 3048 	negw x 
      001144 1F 05            [ 2] 3049 1$:	ldw (DIVISR,sp),x
                                   3050 ; check dividend sign 	 
      001146 1E 07            [ 2] 3051     ldw x,(DIVIDND,sp)
      001148 9E               [ 1] 3052 	ld a,xh 
      001149 A5 80            [ 1] 3053 	bcp a,#0x80 
      00114B 27 05            [ 1] 3054 	jreq 2$ 
      00114D 03 01            [ 1] 3055 	cpl (SQUOT,sp)
      00114F 03 02            [ 1] 3056 	cpl (SDIVD,sp)
      001151 50               [ 2] 3057 	negw x 
      001152 16 05            [ 2] 3058 2$:	ldw y,(DIVISR,sp)
      001154 65               [ 2] 3059 	divw x,y
      001155 90 CF 00 0C      [ 2] 3060 	ldw acc16,y 
                                   3061 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      001159 0D 02            [ 1] 3062 	tnz (SDIVD,sp)
      00115B 27 0B            [ 1] 3063 	jreq 7$
      00115D 90 5D            [ 2] 3064 	tnzw y 
      00115F 27 07            [ 1] 3065 	jreq 7$
      001161 5C               [ 2] 3066 	incw x
      001162 16 05            [ 2] 3067 	ldw y,(DIVISR,sp)
      001164 72 B2 00 0C      [ 2] 3068 	subw y,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001168 0D 01            [ 1] 3069 7$: tnz (SQUOT,sp)
      00116A 27 01            [ 1] 3070 	jreq 9$ 	 
      00116C 50               [ 2] 3071 8$:	negw x 
      00116D                       3072 9$: 
      00116D                       3073 	_drop VSIZE 
      00116D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00116F 81               [ 4] 3074 	ret 
                                   3075 
                                   3076 
                                   3077 ;----------------------------------
                                   3078 ;  remainder resulting from euclidian 
                                   3079 ;  division of n2/n1 
                                   3080 ; input:
                                   3081 ;   N1 		cstack 
                                   3082 ;   N2      cstack
                                   3083 ; output:
                                   3084 ;   X       N2%N1 
                                   3085 ;----------------------------------
                           000003  3086 	N1=3
                           000005  3087 	N2=5
                           000004  3088 	VSIZE=4
      001170                       3089 modulo:
      001170 1E 03            [ 2] 3090 	Ldw x,(N1,sp)
      001172 16 05            [ 2] 3091 	ldw y,(N2,sp)
      001174                       3092 	_vars VSIZE 
      001174 52 04            [ 2]    1     sub sp,#VSIZE 
      001176 1F 01            [ 2] 3093 	ldw (1,sp),x 
      001178 17 03            [ 2] 3094 	ldw (3,sp),y 
      00117A CD 11 2C         [ 4] 3095 	call divide 
      00117D 93               [ 1] 3096 	ldw x,y
      00117E                       3097 	_drop VSIZE 
      00117E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001180 81               [ 4] 3098 	ret 
                                   3099 
                                   3100 
                                   3101 ;----------------------------------
                                   3102 ; search in kword_dict name
                                   3103 ; from its execution address 
                                   3104 ; input:
                                   3105 ;   X       	execution address 
                                   3106 ; output:
                                   3107 ;   X 			cstr*  | 0 
                                   3108 ;--------------------------------
                           000001  3109 	XADR=1 
                           000003  3110 	LINK=3 
                           000004  3111 	VSIZE=4
      001181                       3112 cmd_name:
      001181                       3113 	_vars VSIZE 
      001181 52 04            [ 2]    1     sub sp,#VSIZE 
      001183 72 5F 00 0C      [ 1] 3114 	clr acc16 
      001187 1F 01            [ 2] 3115 	ldw (XADR,sp),x  
      001189 AE 27 3D         [ 2] 3116 	ldw x,#kword_dict	
      00118C 1F 03            [ 2] 3117 1$:	ldw (LINK,sp),x
      00118E E6 02            [ 1] 3118 	ld a,(2,x)
      001190 A4 0F            [ 1] 3119 	and a,#15 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001192 C7 00 0D         [ 1] 3120 	ld acc8,a 
      001195 1C 00 03         [ 2] 3121 	addw x,#3
      001198 72 BB 00 0C      [ 2] 3122 	addw x,acc16
      00119C FE               [ 2] 3123 	ldw x,(x) ; execution address 
      00119D 13 01            [ 2] 3124 	cpw x,(XADR,sp)
      00119F 27 0A            [ 1] 3125 	jreq 2$
      0011A1 1E 03            [ 2] 3126 	ldw x,(LINK,sp)
      0011A3 FE               [ 2] 3127 	ldw x,(x) 
      0011A4 1D 00 02         [ 2] 3128 	subw x,#2  
      0011A7 26 E3            [ 1] 3129 	jrne 1$
      0011A9 20 05            [ 2] 3130 	jra 9$
      0011AB 1E 03            [ 2] 3131 2$: ldw x,(LINK,sp)
      0011AD 1C 00 02         [ 2] 3132 	addw x,#2 	
      0011B0                       3133 9$:	_drop VSIZE
      0011B0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0011B2 81               [ 4] 3134 	ret
                                   3135 
                                   3136 
                                   3137 ;---------------------------------
                                   3138 ; dictionary search 
                                   3139 ; input:
                                   3140 ;	X 		dictionary entry point 
                                   3141 ;  pad		.asciz name to search 
                                   3142 ; output:
                                   3143 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3144 ;  X		execution address | 0 
                                   3145 ;---------------------------------
                           000001  3146 	NLEN=1 ; cmd length 
                           000002  3147 	YSAVE=2
                           000003  3148 	VSIZE=3 
      0011B3                       3149 search_dict:
      0011B3                       3150 	_vars VSIZE 
      0011B3 52 03            [ 2]    1     sub sp,#VSIZE 
      0011B5 90 93            [ 1] 3151 	ldw y,x 
      0011B7                       3152 search_next:	
      0011B7 90 F6            [ 1] 3153 	ld a,(y)
      0011B9 A4 0F            [ 1] 3154 	and a,#0xf 
      0011BB 6B 01            [ 1] 3155 	ld (NLEN,sp),a  
      0011BD AE 17 38         [ 2] 3156 	ldw x,#pad 
      0011C0 17 02            [ 2] 3157 	ldw (YSAVE,sp),y
      0011C2 90 5C            [ 2] 3158 	incw y  
      0011C4                       3159 cp_loop:
      0011C4 F6               [ 1] 3160 	ld a,(x)
      0011C5 27 1E            [ 1] 3161 	jreq str_match 
      0011C7 0D 01            [ 1] 3162 	tnz (NLEN,sp)
      0011C9 27 0B            [ 1] 3163 	jreq no_match  
      0011CB 90 F1            [ 1] 3164 	cp a,(y)
      0011CD 26 07            [ 1] 3165 	jrne no_match 
      0011CF 90 5C            [ 2] 3166 	incw y 
      0011D1 5C               [ 2] 3167 	incw x
      0011D2 0A 01            [ 1] 3168 	dec (NLEN,sp)
      0011D4 20 EE            [ 2] 3169 	jra cp_loop 
      0011D6                       3170 no_match:
      0011D6 16 02            [ 2] 3171 	ldw y,(YSAVE,sp) 
      0011D8 72 A2 00 02      [ 2] 3172 	subw y,#2 ; move Y to link field
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011DC 4B 00            [ 1] 3173 	push #TK_NONE 
      0011DE 90 FE            [ 2] 3174 	ldw y,(y) ; next word link 
      0011E0 84               [ 1] 3175 	pop a ; TK_NONE 
      0011E1 27 21            [ 1] 3176 	jreq search_exit  ; not found  
                                   3177 ;try next 
      0011E3 20 D2            [ 2] 3178 	jra search_next
      0011E5                       3179 str_match:
      0011E5 16 02            [ 2] 3180 	ldw y,(YSAVE,sp)
      0011E7 90 F6            [ 1] 3181 	ld a,(y)
      0011E9 6B 01            [ 1] 3182 	ld (NLEN,sp),a ; needed to test keyword type  
      0011EB A4 0F            [ 1] 3183 	and a,#0xf 
                                   3184 ; move y to procedure address field 	
      0011ED 4C               [ 1] 3185 	inc a 
      0011EE C7 00 0D         [ 1] 3186 	ld acc8,a 
      0011F1 72 5F 00 0C      [ 1] 3187 	clr acc16 
      0011F5 72 B9 00 0C      [ 2] 3188 	addw y,acc16 
      0011F9 90 FE            [ 2] 3189 	ldw y,(y) ; routine entry point 
                                   3190 ;determine keyword type bits 7:6 
      0011FB 7B 01            [ 1] 3191 	ld a,(NLEN,sp)
      0011FD 4E               [ 1] 3192 	swap a 
      0011FE A4 0C            [ 1] 3193 	and a,#0xc
      001200 44               [ 1] 3194 	srl a
      001201 44               [ 1] 3195 	srl a 
      001202 AB 06            [ 1] 3196 	add a,#6
      001204                       3197 search_exit: 
      001204 93               [ 1] 3198 	ldw x,y ; x=routine address 
      001205                       3199 	_drop VSIZE 	 
      001205 5B 03            [ 2]    1     addw sp,#VSIZE 
      001207 81               [ 4] 3200 	ret 
                                   3201 
                                   3202 ;---------------------
                                   3203 ; check if next token
                                   3204 ;  is of expected type 
                                   3205 ; input:
                                   3206 ;   A 		 expected token attribute
                                   3207 ;  ouput:
                                   3208 ;   none     if fail call syntax_error 
                                   3209 ;--------------------
      001208                       3210 expect:
      001208 88               [ 1] 3211 	push a 
      001209 CD 08 6C         [ 4] 3212 	call next_token 
      00120C 11 01            [ 1] 3213 	cp a,(1,sp)
      00120E 27 03            [ 1] 3214 	jreq 1$
      001210 CC 07 B8         [ 2] 3215 	jp syntax_error
      001213 84               [ 1] 3216 1$: pop a 
      001214 81               [ 4] 3217 	ret 
                                   3218 
                                   3219 
                                   3220 ;-------------------------------
                                   3221 ; parse embedded BASIC routines 
                                   3222 ; arguments list.
                                   3223 ; arg_list::=  rel[','rel]*
                                   3224 ; all arguments are of integer type
                                   3225 ; and pushed on dstack 
                                   3226 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3227 ;   none
                                   3228 ; output:
                                   3229 ;   A 	number of arguments pushed on dstack  
                                   3230 ;--------------------------------
                           000001  3231 	ARG_CNT=1 
      001215                       3232 arg_list:
      001215 4B 00            [ 1] 3233 	push #0  
      001217 CD 13 59         [ 4] 3234 1$: call relation
      00121A A1 00            [ 1] 3235 	cp a,#TK_NONE 
      00121C 27 19            [ 1] 3236 	jreq 5$
      00121E A1 04            [ 1] 3237 	cp a,#TK_INTGR
      001220 26 12            [ 1] 3238 	jrne 4$
      001222 CD 10 11         [ 4] 3239 3$: call dpush 
      001225 0C 01            [ 1] 3240     inc (ARG_CNT,sp)
      001227 CD 08 6C         [ 4] 3241 	call next_token 
      00122A A1 00            [ 1] 3242 	cp a,#TK_NONE 
      00122C 27 09            [ 1] 3243 	jreq 5$ 
      00122E A1 0D            [ 1] 3244 	cp a,#TK_COMMA 
      001230 26 02            [ 1] 3245 	jrne 4$
      001232 20 E3            [ 2] 3246 	jra 1$ 
      001234 CD 10 0B         [ 4] 3247 4$:	call unget_token 
      001237 84               [ 1] 3248 5$:	pop a 
      001238 81               [ 4] 3249 	ret 
                                   3250 
                                   3251 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3252 ; parse arguments list 
                                   3253 ; between ()
                                   3254 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001239                       3255 func_args:
      001239 A6 0B            [ 1] 3256 	ld a,#TK_LPAREN 
      00123B CD 12 08         [ 4] 3257 	call expect 
      00123E CD 12 15         [ 4] 3258 	call arg_list 
      001241 88               [ 1] 3259 	push a 
      001242 A6 0C            [ 1] 3260 	ld a,#TK_RPAREN 
      001244 CD 12 08         [ 4] 3261 	call expect 
      001247 84               [ 1] 3262 	pop a 
      001248 81               [ 4] 3263 	ret 
                                   3264 
                                   3265 
                                   3266 ;--------------------------------
                                   3267 ;   BASIC commnands 
                                   3268 ;--------------------------------
                                   3269 
                                   3270 ;--------------------------------
                                   3271 ;  arithmetic and relational 
                                   3272 ;  routines
                                   3273 ;  operators precedence
                                   3274 ;  highest to lowest
                                   3275 ;  operators on same row have 
                                   3276 ;  same precedence and are executed
                                   3277 ;  from left to right.
                                   3278 ;	'*','/','%'
                                   3279 ;   '-','+'
                                   3280 ;   '=','>','<','>=','<=','<>','><'
                                   3281 ;   '<>' and '><' are equivalent for not equal.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3282 ;--------------------------------
                                   3283 
                                   3284 ;---------------------
                                   3285 ; return array element
                                   3286 ; address from @(expr)
                                   3287 ; input:
                                   3288 ;   A 		TK_ARRAY
                                   3289 ; output:
                                   3290 ;   A 		TK_INTGR
                                   3291 ;	X 		element address 
                                   3292 ;----------------------
      001249                       3293 get_array_element:
      001249 CD 12 39         [ 4] 3294 	call func_args 
      00124C A1 01            [ 1] 3295 	cp a,#1
      00124E 27 03            [ 1] 3296 	jreq 1$
      001250 CC 07 B8         [ 2] 3297 	jp syntax_error
      001253 CD 10 1E         [ 4] 3298 1$: call dpop  
                                   3299 	; check for bounds 
      001256 C3 00 23         [ 2] 3300 	cpw x,array_size 
      001259 23 05            [ 2] 3301 	jrule 3$
                                   3302 ; bounds {1..array_size}	
      00125B A6 0A            [ 1] 3303 2$: ld a,#ERR_BAD_VALUE 
      00125D CC 07 BA         [ 2] 3304 	jp tb_error 
      001260 5D               [ 2] 3305 3$: tnzw  x
      001261 27 F8            [ 1] 3306 	jreq 2$ 
      001263 58               [ 2] 3307 	sllw x 
      001264 89               [ 2] 3308 	pushw x 
      001265 AE 16 E8         [ 2] 3309 	ldw x,#tib
      001268 72 F0 01         [ 2] 3310 	subw x,(1,sp)
      00126B                       3311 	_drop 2   
      00126B 5B 02            [ 2]    1     addw sp,#2 
      00126D A6 04            [ 1] 3312 	ld a,#TK_INTGR
      00126F 81               [ 4] 3313 	ret 
                                   3314 
                                   3315 ;***********************************
                                   3316 ;   expression parse,execute 
                                   3317 ;***********************************
                                   3318 ;-----------------------------------
                                   3319 ; factor ::= ['+'|'-'|e] var | @ |
                                   3320 ;			 integer | function |
                                   3321 ;			 '('relation')' 
                                   3322 ; output:
                                   3323 ;   A    token attribute 
                                   3324 ;   X 	 integer
                                   3325 ; ---------------------------------
                           000001  3326 	NEG=1
                           000001  3327 	VSIZE=1
      001270                       3328 factor:
      001270                       3329 	_vars VSIZE 
      001270 52 01            [ 2]    1     sub sp,#VSIZE 
      001272 CD 08 6C         [ 4] 3330 	call next_token
      001275 A1 02            [ 1] 3331 	cp a,#CMD_END 
      001277 2B 4C            [ 1] 3332 	jrmi 20$
      001279 6B 01            [ 1] 3333 1$:	ld (NEG,sp),a 
      00127B A4 30            [ 1] 3334 	and a,#TK_GRP_MASK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00127D A1 10            [ 1] 3335 	cp a,#TK_GRP_ADD 
      00127F 27 04            [ 1] 3336 	jreq 2$
      001281 7B 01            [ 1] 3337 	ld a,(NEG,sp)
      001283 20 03            [ 2] 3338 	jra 4$  
      001285                       3339 2$:	
      001285 CD 08 6C         [ 4] 3340 	call next_token 
      001288                       3341 4$:	
      001288 A1 07            [ 1] 3342 	cp a,#TK_IFUNC 
      00128A 26 03            [ 1] 3343 	jrne 5$ 
      00128C FD               [ 4] 3344 	call (x) 
      00128D 20 2D            [ 2] 3345 	jra 18$ 
      00128F                       3346 5$:
      00128F A1 04            [ 1] 3347 	cp a,#TK_INTGR
      001291 26 02            [ 1] 3348 	jrne 6$
      001293 20 27            [ 2] 3349 	jra 18$
      001295                       3350 6$:
      001295 A1 02            [ 1] 3351 	cp a,#TK_ARRAY
      001297 26 06            [ 1] 3352 	jrne 10$
      001299 CD 12 49         [ 4] 3353 	call get_array_element
      00129C FE               [ 2] 3354 	ldw x,(x)
      00129D 20 1D            [ 2] 3355 	jra 18$ 
      00129F                       3356 10$:
      00129F A1 05            [ 1] 3357 	cp a,#TK_VAR 
      0012A1 26 03            [ 1] 3358 	jrne 12$
      0012A3 FE               [ 2] 3359 	ldw x,(x)
      0012A4 20 16            [ 2] 3360 	jra 18$
      0012A6                       3361 12$:			
      0012A6 A1 0B            [ 1] 3362 	cp a,#TK_LPAREN
      0012A8 26 0C            [ 1] 3363 	jrne 16$
      0012AA CD 13 59         [ 4] 3364 	call relation
      0012AD 89               [ 2] 3365 	pushw x 
      0012AE A6 0C            [ 1] 3366 	ld a,#TK_RPAREN 
      0012B0 CD 12 08         [ 4] 3367 	call expect
      0012B3 85               [ 2] 3368 	popw x 
      0012B4 20 06            [ 2] 3369 	jra 18$	
      0012B6                       3370 16$:
      0012B6 CD 10 0B         [ 4] 3371 	call unget_token
      0012B9 4F               [ 1] 3372 	clr a 
      0012BA 20 09            [ 2] 3373 	jra 20$ 
      0012BC                       3374 18$: 
      0012BC A6 11            [ 1] 3375 	ld a,#TK_MINUS 
      0012BE 11 01            [ 1] 3376 	cp a,(NEG,sp)
      0012C0 26 01            [ 1] 3377 	jrne 19$
      0012C2 50               [ 2] 3378 	negw x
      0012C3                       3379 19$:
      0012C3 A6 04            [ 1] 3380 	ld a,#TK_INTGR
      0012C5                       3381 20$:
      0012C5                       3382 	_drop VSIZE
      0012C5 5B 01            [ 2]    1     addw sp,#VSIZE 
      0012C7 81               [ 4] 3383 	ret
                                   3384 
                                   3385 ;-----------------------------------
                                   3386 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3387 ; output:
                                   3388 ;   A    	token attribute 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3389 ;	X		integer
                                   3390 ;-----------------------------------
                           000001  3391 	N1=1
                           000003  3392 	N2=3
                           000005  3393 	MULOP=5
                           000005  3394 	VSIZE=5
      0012C8                       3395 term:
      0012C8                       3396 	_vars VSIZE
      0012C8 52 05            [ 2]    1     sub sp,#VSIZE 
      0012CA CD 12 70         [ 4] 3397 	call factor
      0012CD A1 02            [ 1] 3398 	cp a,#CMD_END
      0012CF 2B 41            [ 1] 3399 	jrmi term_exit
      0012D1                       3400 term01:	 ; check for  operator 
      0012D1 1F 03            [ 2] 3401 	ldw (N2,sp),x  ; save first factor 
      0012D3 CD 08 6C         [ 4] 3402 	call next_token
      0012D6 A1 02            [ 1] 3403 	cp a,#2
      0012D8 2B 34            [ 1] 3404 	jrmi 9$
      0012DA 6B 05            [ 1] 3405 0$:	ld (MULOP,sp),a
      0012DC A4 30            [ 1] 3406 	and a,#TK_GRP_MASK
      0012DE A1 20            [ 1] 3407 	cp a,#TK_GRP_MULT
      0012E0 27 07            [ 1] 3408 	jreq 1$
      0012E2 7B 05            [ 1] 3409 	ld a,(MULOP,sp) 
      0012E4 CD 10 0B         [ 4] 3410 	call unget_token 
      0012E7 20 25            [ 2] 3411 	jra 9$
      0012E9                       3412 1$:	; got *|/|%
      0012E9 CD 12 70         [ 4] 3413 	call factor
      0012EC A1 04            [ 1] 3414 	cp a,#TK_INTGR
      0012EE 27 03            [ 1] 3415 	jreq 2$ 
      0012F0 CC 07 B8         [ 2] 3416 	jp syntax_error
      0012F3 1F 01            [ 2] 3417 2$:	ldw (N1,sp),x  
      0012F5 7B 05            [ 1] 3418 	ld a,(MULOP,sp) 
      0012F7 A1 20            [ 1] 3419 	cp a,#TK_MULT 
      0012F9 26 05            [ 1] 3420 	jrne 3$
      0012FB CD 10 E4         [ 4] 3421 	call multiply 
      0012FE 20 D1            [ 2] 3422 	jra term01
      001300 A1 21            [ 1] 3423 3$: cp a,#TK_DIV 
      001302 26 05            [ 1] 3424 	jrne 4$ 
      001304 CD 11 2C         [ 4] 3425 	call divide 
      001307 20 C8            [ 2] 3426 	jra term01 
      001309 CD 11 70         [ 4] 3427 4$: call modulo
      00130C 20 C3            [ 2] 3428 	jra term01 
      00130E 1E 03            [ 2] 3429 9$: ldw x,(N2,sp)  
      001310 A6 04            [ 1] 3430 	ld a,#TK_INTGR 	
      001312                       3431 term_exit:
      001312                       3432 	_drop VSIZE 
      001312 5B 05            [ 2]    1     addw sp,#VSIZE 
      001314 81               [ 4] 3433 	ret 
                                   3434 
                                   3435 ;-------------------------------
                                   3436 ;  expr ::= term [['+'|'-'] term]*
                                   3437 ;  result range {-32768..32767}
                                   3438 ;  output:
                                   3439 ;   A    token attribute 
                                   3440 ;   X	 integer   
                                   3441 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                           000001  3442 	N1=1 
                           000003  3443 	N2=3
                           000005  3444 	OP=5 
                           000005  3445 	VSIZE=5 
      001315                       3446 expression:
      001315                       3447 	_vars VSIZE 
      001315 52 05            [ 2]    1     sub sp,#VSIZE 
      001317 CD 12 C8         [ 4] 3448 	call term
      00131A A1 02            [ 1] 3449 	cp a,#CMD_END 
      00131C 2B 38            [ 1] 3450 	jrmi expr_exit 
      00131E 1F 03            [ 2] 3451 0$:	ldw (N2,sp),x 
      001320 CD 08 6C         [ 4] 3452 	call next_token
      001323 A1 02            [ 1] 3453 	cp a,#2
      001325 2B 2B            [ 1] 3454 	jrmi 9$ 
      001327 6B 05            [ 1] 3455 1$:	ld (OP,sp),a  
      001329 A4 30            [ 1] 3456 	and a,#TK_GRP_MASK
      00132B A1 10            [ 1] 3457 	cp a,#TK_GRP_ADD 
      00132D 27 07            [ 1] 3458 	jreq 2$ 
      00132F 7B 05            [ 1] 3459 	ld a,(OP,sp)
      001331 CD 10 0B         [ 4] 3460 	call unget_token
      001334 20 1C            [ 2] 3461 	jra 9$
      001336                       3462 2$: 
      001336 CD 12 C8         [ 4] 3463 	call term
      001339 A1 04            [ 1] 3464 	cp a,#TK_INTGR 
      00133B 27 03            [ 1] 3465 	jreq 3$
      00133D CC 07 B8         [ 2] 3466 	jp syntax_error
      001340 1F 01            [ 2] 3467 3$:	ldw (N1,sp),x 
      001342 7B 05            [ 1] 3468 	ld a,(OP,sp)
      001344 A1 10            [ 1] 3469 	cp a,#TK_PLUS 
      001346 26 05            [ 1] 3470 	jrne 4$
      001348 CD 10 D6         [ 4] 3471 	call add 
      00134B 20 D1            [ 2] 3472 	jra 0$ 
      00134D CD 10 DE         [ 4] 3473 4$:	call substract
      001350 20 CC            [ 2] 3474 	jra 0$
      001352 1E 03            [ 2] 3475 9$: ldw x,(N2,sp)
      001354 A6 04            [ 1] 3476 	ld a,#TK_INTGR	
      001356                       3477 expr_exit:
      001356                       3478 	_drop VSIZE 
      001356 5B 05            [ 2]    1     addw sp,#VSIZE 
      001358 81               [ 4] 3479 	ret 
                                   3480 
                                   3481 ;---------------------------------------------
                                   3482 ; rel ::= expr rel_op expr
                                   3483 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3484 ;  relation return 1 | 0  for true | false 
                                   3485 ;  output:
                                   3486 ;    A 		token attribute  
                                   3487 ;	 X		1|0
                                   3488 ;---------------------------------------------
                           000001  3489 	N1=1
                           000003  3490 	N2=3
                           000005  3491 	RELOP=5
                           000005  3492 	VSIZE=5 
      001359                       3493 relation: 
      001359                       3494 	_vars VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001359 52 05            [ 2]    1     sub sp,#VSIZE 
      00135B CD 13 15         [ 4] 3495 	call expression
      00135E A1 02            [ 1] 3496 	cp a,#CMD_END  
      001360 2B 4B            [ 1] 3497 	jrmi rel_exit 
                                   3498 	; expect rel_op or leave 
      001362 1F 03            [ 2] 3499 	ldw (N2,sp),x 
      001364 CD 08 6C         [ 4] 3500 	call next_token 
      001367 A1 02            [ 1] 3501 	cp a,#2
      001369 2B 3E            [ 1] 3502 	jrmi 9$
      00136B                       3503 1$:	
      00136B 6B 05            [ 1] 3504 	ld (RELOP,sp),a 
      00136D A4 30            [ 1] 3505 	and a,#TK_GRP_MASK
      00136F A1 30            [ 1] 3506 	cp a,#TK_GRP_RELOP 
      001371 27 07            [ 1] 3507 	jreq 2$
      001373 7B 05            [ 1] 3508 	ld a,(RELOP,sp)
      001375 CD 10 0B         [ 4] 3509 	call unget_token  
      001378 20 2F            [ 2] 3510 	jra 9$
      00137A                       3511 2$:	; expect another expression or error 
      00137A CD 13 15         [ 4] 3512 	call expression
      00137D A1 04            [ 1] 3513 	cp a,#TK_INTGR 
      00137F 27 03            [ 1] 3514 	jreq 3$
      001381 CC 07 B8         [ 2] 3515 	jp syntax_error 
      001384 1F 01            [ 2] 3516 3$:	ldw (N1,sp),x 
      001386 CD 10 DE         [ 4] 3517 	call substract
      001389 26 06            [ 1] 3518 	jrne 4$
      00138B 35 02 00 0D      [ 1] 3519 	mov acc8,#2 ; n1==n2
      00138F 20 0C            [ 2] 3520 	jra 6$ 
      001391                       3521 4$: 
      001391 2C 06            [ 1] 3522 	jrsgt 5$  
      001393 35 04 00 0D      [ 1] 3523 	mov acc8,#4 ; n1<2 
      001397 20 04            [ 2] 3524 	jra 6$
      001399                       3525 5$:
      001399 35 01 00 0D      [ 1] 3526 	mov acc8,#1 ; n1>n2 
      00139D                       3527 6$:
      00139D 5F               [ 1] 3528 	clrw x 
      00139E C6 00 0D         [ 1] 3529 	ld a, acc8  
      0013A1 14 05            [ 1] 3530 	and a,(RELOP,sp)
      0013A3 4D               [ 1] 3531 	tnz a 
      0013A4 27 05            [ 1] 3532 	jreq 10$
      0013A6 5C               [ 2] 3533 	incw x 
      0013A7                       3534 7$:	 
      0013A7 20 02            [ 2] 3535 	jra 10$  	
      0013A9 1E 03            [ 2] 3536 9$: ldw x,(N2,sp)
      0013AB                       3537 10$:
      0013AB A6 04            [ 1] 3538 	ld a,#TK_INTGR
      0013AD                       3539 rel_exit: 	 
      0013AD                       3540 	_drop VSIZE
      0013AD 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013AF 81               [ 4] 3541 	ret 
                                   3542 
                                   3543 ;--------------------------------
                                   3544 ; BASIC: SHOW 
                                   3545 ;  show content of dstack,cstack
                                   3546 ;--------------------------------
      0013B0                       3547 show:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013B0 C6 00 0A         [ 1] 3548 	ld a,base 
      0013B3 88               [ 1] 3549 	push a 
      0013B4 CD 10 75         [ 4] 3550 	call dots
      0013B7 CD 10 A9         [ 4] 3551 	call dotr 
      0013BA 84               [ 1] 3552 	pop a 
      0013BB C7 00 0A         [ 1] 3553 	ld base,a 
      0013BE 4F               [ 1] 3554 	clr a 
      0013BF 81               [ 4] 3555 	ret
                                   3556 
                                   3557 ;--------------------------------------------
                                   3558 ; BASIC: HEX 
                                   3559 ; select hexadecimal base for integer print
                                   3560 ;---------------------------------------------
      0013C0                       3561 hex_base:
      0013C0 35 10 00 0A      [ 1] 3562 	mov base,#16 
      0013C4 81               [ 4] 3563 	ret 
                                   3564 
                                   3565 ;--------------------------------------------
                                   3566 ; BASIC: DEC 
                                   3567 ; select decimal base for integer print
                                   3568 ;---------------------------------------------
      0013C5                       3569 dec_base:
      0013C5 35 0A 00 0A      [ 1] 3570 	mov base,#10
      0013C9 81               [ 4] 3571 	ret 
                                   3572 
                                   3573 ;------------------------
                                   3574 ; BASIC: SIZE 
                                   3575 ; return free size in text area
                                   3576 ; output:
                                   3577 ;   A 		TK_INTGR
                                   3578 ;   X 	    size integer
                                   3579 ;--------------------------
      0013CA                       3580 size:
      0013CA AE 16 E8         [ 2] 3581 	ldw x,#tib 
      0013CD 72 B0 00 20      [ 2] 3582 	subw x,txtend 
      0013D1 A6 04            [ 1] 3583 	ld a,#TK_INTGR
      0013D3 81               [ 4] 3584 	ret 
                                   3585 
                                   3586 
                                   3587 ;------------------------
                                   3588 ; BASIC: UBOUND  
                                   3589 ; return array variable size 
                                   3590 ; output:
                                   3591 ;   A 		TK_INTGR
                                   3592 ;   X 	    array size 
                                   3593 ;--------------------------
      0013D4                       3594 ubound:
      0013D4 AE 16 E8         [ 2] 3595 	ldw x,#tib
      0013D7 72 B0 00 20      [ 2] 3596 	subw x,txtend 
      0013DB 90 CE 00 04      [ 2] 3597 	ldw y,basicptr 
      0013DF 90 C3 00 20      [ 2] 3598 	cpw y,txtend 
      0013E3 25 0A            [ 1] 3599 	jrult 1$
      0013E5 3B 00 03         [ 1] 3600 	push count 
      0013E8 4B 00            [ 1] 3601 	push #0 
      0013EA 72 F0 01         [ 2] 3602 	subw x,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0013ED                       3603 	_drop 2 
      0013ED 5B 02            [ 2]    1     addw sp,#2 
      0013EF 54               [ 2] 3604 1$:	srlw x 
      0013F0 CF 00 23         [ 2] 3605 	ldw array_size,x
      0013F3 A6 04            [ 1] 3606 	ld a,#TK_INTGR
      0013F5 81               [ 4] 3607 	ret 
                                   3608 
                                   3609 ;-----------------------------
                                   3610 ; BASIC: LET var=expr 
                                   3611 ; variable assignement 
                                   3612 ; output:
                                   3613 ;   A 		TK_NONE 
                                   3614 ;-----------------------------
      0013F6                       3615 let:
      0013F6 CD 08 6C         [ 4] 3616 	call next_token 
      0013F9 A1 05            [ 1] 3617 	cp a,#TK_VAR 
      0013FB 27 03            [ 1] 3618 	jreq let02
      0013FD CC 07 B8         [ 2] 3619 	jp syntax_error
      001400                       3620 let02:
      001400 CD 10 11         [ 4] 3621 	call dpush 
      001403 CD 08 6C         [ 4] 3622 	call next_token 
      001406 A1 32            [ 1] 3623 	cp a,#TK_EQUAL
      001408 27 03            [ 1] 3624 	jreq 1$
      00140A CC 07 B8         [ 2] 3625 	jp syntax_error
      00140D                       3626 1$:	
      00140D CD 13 59         [ 4] 3627 	call relation   
      001410 A1 04            [ 1] 3628 	cp a,#TK_INTGR 
      001412 27 03            [ 1] 3629 	jreq 2$
      001414 CC 07 B8         [ 2] 3630 	jp syntax_error
      001417                       3631 2$:	
      001417 90 93            [ 1] 3632 	ldw y,x 
      001419 CD 10 1E         [ 4] 3633 	call dpop  
      00141C FF               [ 2] 3634 	ldw (x),y   
      00141D 81               [ 4] 3635 	ret 
                                   3636 
                                   3637 ;----------------------------
                                   3638 ; BASIC: LIST [[start][,end]]
                                   3639 ; list program lines 
                                   3640 ; form start to end 
                                   3641 ; if empty argument list then 
                                   3642 ; list all.
                                   3643 ;----------------------------
                           000001  3644 	FIRST=1
                           000003  3645 	LAST=3 
                           000005  3646 	LN_PTR=5
                           000006  3647 	VSIZE=6 
      00141E                       3648 list:
      00141E                       3649 	_vars VSIZE
      00141E 52 06            [ 2]    1     sub sp,#VSIZE 
      001420 CE 00 1E         [ 2] 3650 	ldw x,txtbgn 
      001423 C3 00 20         [ 2] 3651 	cpw x,txtend 
      001426 2B 03            [ 1] 3652 	jrmi 1$
      001428 CC 14 A0         [ 2] 3653 	jp list_exit ; nothing to list 
      00142B 1F 05            [ 2] 3654 1$:	ldw (LN_PTR,sp),x 
      00142D FE               [ 2] 3655 	ldw x,(x) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00142E 1F 01            [ 2] 3656 	ldw (FIRST,sp),x ; list from first line 
      001430 AE 7F FF         [ 2] 3657 	ldw x,#0x7fff ; biggest line number 
      001433 1F 03            [ 2] 3658 	ldw (LAST,sp),x 
      001435 CD 12 15         [ 4] 3659 	call arg_list
      001438 4D               [ 1] 3660 	tnz a
      001439 27 3F            [ 1] 3661 	jreq list_start 
      00143B A1 02            [ 1] 3662 	cp a,#2 
      00143D 27 07            [ 1] 3663 	jreq 4$
      00143F A1 01            [ 1] 3664 	cp a,#1 
      001441 27 06            [ 1] 3665 	jreq first_line 
      001443 CC 07 B8         [ 2] 3666 	jp syntax_error 
      001446 CD 10 2B         [ 4] 3667 4$:	call dswap
      001449                       3668 first_line:
      001449 CD 10 1E         [ 4] 3669 	call dpop 
      00144C 1F 01            [ 2] 3670 	ldw (FIRST,sp),x 
      00144E A1 01            [ 1] 3671 	cp a,#1 
      001450 27 05            [ 1] 3672 	jreq lines_skip 	
      001452                       3673 last_line:
      001452 CD 10 1E         [ 4] 3674 	call dpop 
      001455 1F 03            [ 2] 3675 	ldw (LAST,sp),x 
      001457                       3676 lines_skip:
      001457 CE 00 1E         [ 2] 3677 	ldw x,txtbgn
      00145A 1F 05            [ 2] 3678 2$:	ldw (LN_PTR,sp),x 
      00145C C3 00 20         [ 2] 3679 	cpw x,txtend 
      00145F 2A 3F            [ 1] 3680 	jrpl list_exit 
      001461 FE               [ 2] 3681 	ldw x,(x) ;line# 
      001462 13 01            [ 2] 3682 	cpw x,(FIRST,sp)
      001464 2A 14            [ 1] 3683 	jrpl list_start 
      001466 1E 05            [ 2] 3684 	ldw x,(LN_PTR,sp) 
      001468 1C 00 02         [ 2] 3685 	addw x,#2 
      00146B F6               [ 1] 3686 	ld a,(x)
      00146C 5C               [ 2] 3687 	incw x 
      00146D C7 00 0D         [ 1] 3688 	ld acc8,a 
      001470 72 5F 00 0C      [ 1] 3689 	clr acc16 
      001474 72 BB 00 0C      [ 2] 3690 	addw x,acc16
      001478 20 E0            [ 2] 3691 	jra 2$ 
                                   3692 ; print loop
      00147A                       3693 list_start:
      00147A 1E 05            [ 2] 3694 	ldw x,(LN_PTR,sp)
      00147C E6 02            [ 1] 3695 3$:	ld a,(2,x) 
      00147E CD 14 F3         [ 4] 3696 	call prt_basic_line
      001481 1E 05            [ 2] 3697 	ldw x,(LN_PTR,sp)
      001483 E6 02            [ 1] 3698 	ld a,(2,x)
      001485 C7 00 0D         [ 1] 3699 	ld acc8,a 
      001488 72 5F 00 0C      [ 1] 3700 	clr acc16 
      00148C 72 BB 00 0C      [ 2] 3701 	addw x,acc16
      001490 C3 00 20         [ 2] 3702 	cpw x,txtend 
      001493 2A 0B            [ 1] 3703 	jrpl list_exit
      001495 1F 05            [ 2] 3704 	ldw (LN_PTR,sp),x
      001497 FE               [ 2] 3705 	ldw x,(x)
      001498 13 03            [ 2] 3706 	cpw x,(LAST,sp)  
      00149A 2C 04            [ 1] 3707 	jrsgt list_exit 
      00149C 1E 05            [ 2] 3708 	ldw x,(LN_PTR,sp)
      00149E 20 DC            [ 2] 3709 	jra 3$
      0014A0                       3710 list_exit:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0014A0                       3711 	_drop VSIZE 
      0014A0 5B 06            [ 2]    1     addw sp,#VSIZE 
      0014A2 81               [ 4] 3712 	ret
                                   3713 
                                   3714 ;-------------------------
                                   3715 ; print counted string 
                                   3716 ; input:
                                   3717 ;   X 	address of string
                                   3718 ;--------------------------
      0014A3                       3719 prt_cmd_name:
      0014A3 F6               [ 1] 3720 	ld a,(x)
      0014A4 5C               [ 2] 3721 	incw x
      0014A5 A4 0F            [ 1] 3722 	and a,#15  
      0014A7 88               [ 1] 3723 	push a 
      0014A8 0D 01            [ 1] 3724 1$: tnz (1,sp) 
      0014AA 27 09            [ 1] 3725 	jreq 9$
      0014AC F6               [ 1] 3726 	ld a,(x)
      0014AD CD 01 CB         [ 4] 3727 	call putc 
      0014B0 5C               [ 2] 3728 	incw x
      0014B1 0A 01            [ 1] 3729 	dec (1,sp)	 
      0014B3 20 F3            [ 2] 3730 	jra 1$
      0014B5 84               [ 1] 3731 9$: pop a 
      0014B6 81               [ 4] 3732 	ret	
                                   3733 
                                   3734 ;--------------------------
                                   3735 ; print TK_QSTR
                                   3736 ; converting control character
                                   3737 ; to backslash sequence
                                   3738 ; input:
                                   3739 ;   X        char *
                                   3740 ;-----------------------------
      0014B7                       3741 prt_quote:
      0014B7 A6 22            [ 1] 3742 	ld a,#'"
      0014B9 CD 01 CB         [ 4] 3743 	call putc 
      0014BC F6               [ 1] 3744 1$:	ld a,(x)
      0014BD 27 2D            [ 1] 3745 	jreq 9$
      0014BF 5C               [ 2] 3746 	incw x 
      0014C0 A1 20            [ 1] 3747 	cp a,#SPACE 
      0014C2 25 0C            [ 1] 3748 	jrult 3$
      0014C4 CD 01 CB         [ 4] 3749 	call putc
      0014C7 A1 5C            [ 1] 3750 	cp a,#'\ 
      0014C9 26 F1            [ 1] 3751 	jrne 1$ 
      0014CB                       3752 2$:
      0014CB CD 01 CB         [ 4] 3753 	call putc 
      0014CE 20 EC            [ 2] 3754 	jra 1$
      0014D0 88               [ 1] 3755 3$: push a 
      0014D1 A6 5C            [ 1] 3756 	ld a,#'\
      0014D3 CD 01 CB         [ 4] 3757 	call putc 
      0014D6 84               [ 1] 3758 	pop a 
      0014D7 A0 07            [ 1] 3759 	sub a,#7
      0014D9 C7 00 0D         [ 1] 3760 	ld acc8,a 
      0014DC 72 5F 00 0C      [ 1] 3761 	clr acc16
      0014E0 90 AE 0C DA      [ 2] 3762 	ldw y,#escaped 
      0014E4 72 B9 00 0C      [ 2] 3763 	addw y,acc16 
      0014E8 90 F6            [ 1] 3764 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0014EA 20 DF            [ 2] 3765 	jra 2$
      0014EC A6 22            [ 1] 3766 9$: ld a,#'"
      0014EE CD 01 CB         [ 4] 3767 	call putc 
      0014F1 5C               [ 2] 3768 	incw x 
      0014F2 81               [ 4] 3769 	ret
                                   3770 
                                   3771 
                                   3772 ;--------------------------
                                   3773 ; decompile line from token list 
                                   3774 ; input:
                                   3775 ;   A       stop at this position 
                                   3776 ;   X 		pointer at line
                                   3777 ; output:
                                   3778 ;   none 
                                   3779 ;--------------------------	
                           000001  3780 	BASE_SAV=1
                           000002  3781 	WIDTH_SAV=2
                           000003  3782 	XSAVE=3
                           000005  3783 	LLEN=5
                           000005  3784 	VSIZE=5 
      0014F3                       3785 prt_basic_line:
      0014F3                       3786 	_vars VSIZE
      0014F3 52 05            [ 2]    1     sub sp,#VSIZE 
      0014F5 6B 05            [ 1] 3787 	ld (LLEN,sp),a  
      0014F7 C6 00 0A         [ 1] 3788 	ld a,base
      0014FA 6B 01            [ 1] 3789 	ld (BASE_SAV,sp),a  
      0014FC C6 00 26         [ 1] 3790 	ld a,tab_width 
      0014FF 6B 02            [ 1] 3791 	ld (WIDTH_SAV,sp),a 
      001501 CF 00 17         [ 2] 3792 	ldw ptr16,x
      001504 FE               [ 2] 3793 	ldw x,(x)
      001505 35 0A 00 0A      [ 1] 3794 	mov base,#10
      001509 35 05 00 26      [ 1] 3795 	mov tab_width,#5
      00150D CD 0A 16         [ 4] 3796 	call print_int ; print line number 
      001510 A6 20            [ 1] 3797 	ld a,#SPACE 
      001512 CD 01 CB         [ 4] 3798 	call putc 
      001515 72 5F 00 26      [ 1] 3799 	clr tab_width
      001519 AE 00 03         [ 2] 3800 	ldw x,#3
      00151C 9F               [ 1] 3801 1$:	ld a,xl 
      00151D 11 05            [ 1] 3802 	cp a,(LLEN,sp)
      00151F 2B 03            [ 1] 3803 	jrmi 20$
      001521 CC 16 26         [ 2] 3804 	jp 90$
      001524                       3805 20$:	 
      001524 72 D6 00 17      [ 4] 3806 	ld a,([ptr16],x)
      001528 5C               [ 2] 3807 	incw x 
      001529 1F 03            [ 2] 3808 	ldw (XSAVE,sp),x 
      00152B A1 06            [ 1] 3809 	cp a,#TK_CMD 
      00152D 25 44            [ 1] 3810 	jrult 5$
      00152F A1 08            [ 1] 3811 	cp a,#TK_CFUNC 
      001531 22 2F            [ 1] 3812 	jrugt 4$
      001533                       3813 2$:	
      001533 72 DE 00 17      [ 5] 3814 	ldw x,([ptr16],x)
      001537 A3 17 49         [ 2] 3815 	cpw x,#rem 
      00153A 26 14            [ 1] 3816 	jrne 3$
      00153C A6 27            [ 1] 3817 	ld a,#''
      00153E CD 01 CB         [ 4] 3818 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001541 1E 03            [ 2] 3819 	ldw x,(XSAVE,sp)
      001543 1C 00 02         [ 2] 3820 	addw x,#2
      001546 72 BB 00 17      [ 2] 3821 	addw x,ptr16  
      00154A CD 01 DE         [ 4] 3822 	call puts 
      00154D CC 16 26         [ 2] 3823 	jp 90$ 
      001550 CD 11 81         [ 4] 3824 3$:	call cmd_name
      001553 CD 14 A3         [ 4] 3825 	call prt_cmd_name
      001556 A6 20            [ 1] 3826 	ld a,#SPACE 
      001558 CD 01 CB         [ 4] 3827 	call putc 
      00155B 1E 03            [ 2] 3828 	ldw x,(XSAVE,sp)
      00155D 1C 00 02         [ 2] 3829 	addw x,#2
      001560 20 BA            [ 2] 3830 	jra 1$
      001562 A1 0A            [ 1] 3831 4$: cp a,#TK_QSTR 
      001564 26 0D            [ 1] 3832 	jrne 5$
      001566 72 BB 00 17      [ 2] 3833 	addw x,ptr16
      00156A CD 14 B7         [ 4] 3834 	call prt_quote 
      00156D 72 B0 00 17      [ 2] 3835 	subw x,ptr16  
      001571 20 A9            [ 2] 3836 	jra 1$
      001573 A1 05            [ 1] 3837 5$:	cp a,#TK_VAR
      001575 26 1A            [ 1] 3838 	jrne 6$ 
      001577 72 DE 00 17      [ 5] 3839 	ldw x,([ptr16],x)
      00157B 1D 00 28         [ 2] 3840 	subw x,#vars 
      00157E 9F               [ 1] 3841 	ld a,xl
      00157F 44               [ 1] 3842 	srl a 
      001580 AB 41            [ 1] 3843 	add a,#'A 
      001582 CD 01 CB         [ 4] 3844 	call putc 
      001585 A6 20            [ 1] 3845 	ld a,#SPACE 
      001587 CD 01 CB         [ 4] 3846 	call putc 
      00158A 1E 03            [ 2] 3847 	ldw x,(XSAVE,sp)
      00158C 1C 00 02         [ 2] 3848 	addw x,#2 
      00158F 20 8B            [ 2] 3849 	jra 1$ 
      001591 A1 02            [ 1] 3850 6$: cp a,#TK_ARRAY 
      001593 26 0A            [ 1] 3851 	jrne 7$
      001595 A6 40            [ 1] 3852 	ld a,#'@ 
      001597 CD 01 CB         [ 4] 3853 	call putc 
      00159A 1E 03            [ 2] 3854 	ldw x,(XSAVE,sp)
      00159C CC 15 1C         [ 2] 3855 	jp 1$ 
      00159F A1 04            [ 1] 3856 7$: cp a,#TK_INTGR 
      0015A1 26 0F            [ 1] 3857 	jrne 8$
      0015A3 72 DE 00 17      [ 5] 3858 	ldw x,([ptr16],x)
      0015A7 CD 0A 16         [ 4] 3859 	call print_int
                                   3860 ;	ld a,#SPACE 
                                   3861 ;	call putc 
      0015AA 1E 03            [ 2] 3862 	ldw x,(XSAVE,sp)
      0015AC 1C 00 02         [ 2] 3863 	addw x,#2 
      0015AF CC 15 1C         [ 2] 3864 	jp 1$
      0015B2 A1 31            [ 1] 3865 8$: cp a,#TK_GT 
      0015B4 2B 1A            [ 1] 3866 	jrmi 9$
      0015B6 A1 35            [ 1] 3867 	cp a,#TK_NE 
      0015B8 22 16            [ 1] 3868 	jrugt 9$
      0015BA A0 31            [ 1] 3869 	sub a,#TK_GT  
      0015BC 48               [ 1] 3870 	sll a 
      0015BD 90 5F            [ 1] 3871 	clrw y 
      0015BF 90 97            [ 1] 3872 	ld yl,a 
      0015C1 72 A9 16 3F      [ 2] 3873 	addw y,#relop_str 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0015C5 90 FE            [ 2] 3874 	ldw y,(y)
      0015C7 93               [ 1] 3875 	ldw x,y 
      0015C8 CD 01 DE         [ 4] 3876 	call puts 
      0015CB 1E 03            [ 2] 3877 	ldw x,(XSAVE,sp)
      0015CD CC 15 1C         [ 2] 3878 	jp 1$
      0015D0 A1 10            [ 1] 3879 9$: cp a,#TK_PLUS 
      0015D2 26 04            [ 1] 3880 	jrne 10$
      0015D4 A6 2B            [ 1] 3881 	ld a,#'+
      0015D6 20 46            [ 2] 3882 	jra 80$ 
      0015D8 A1 11            [ 1] 3883 10$: cp a,#TK_MINUS
      0015DA 26 04            [ 1] 3884 	jrne 11$
      0015DC A6 2D            [ 1] 3885 	ld a,#'-
      0015DE 20 3E            [ 2] 3886 	jra 80$
      0015E0 A1 20            [ 1] 3887 11$: cp a,#TK_MULT 
      0015E2 2B 0E            [ 1] 3888 	jrmi 12$
      0015E4 A1 22            [ 1] 3889 	cp a,#TK_MOD 
      0015E6 22 0A            [ 1] 3890 	jrugt 12$
      0015E8 A0 20            [ 1] 3891 	sub a,#0x20
      0015EA 5F               [ 1] 3892 	clrw x 
      0015EB 97               [ 1] 3893 	ld xl,a 
      0015EC 1C 16 3C         [ 2] 3894 	addw x,#mul_char 
      0015EF F6               [ 1] 3895 	ld a,(x)
      0015F0 20 2C            [ 2] 3896 	jra 80$ 
      0015F2 A1 0B            [ 1] 3897 12$: cp a,#TK_LPAREN 
      0015F4 2B 0E            [ 1] 3898 	jrmi 13$
      0015F6 A1 0E            [ 1] 3899 	cp a,#TK_SHARP 
      0015F8 22 0A            [ 1] 3900 	jrugt 13$
      0015FA A0 0B            [ 1] 3901 	sub a,#TK_LPAREN
      0015FC 5F               [ 1] 3902 	clrw x 
      0015FD 97               [ 1] 3903 	ld xl,a 
      0015FE 1C 16 38         [ 2] 3904 	addw x,#single_char 
      001601 F6               [ 1] 3905 	ld a,(x)
      001602 20 1A            [ 2] 3906 	jra 80$
      001604 A1 03            [ 1] 3907 13$: cp a,#TK_CHAR 
      001606 26 14            [ 1] 3908 	jrne 14$
      001608 A6 5C            [ 1] 3909 	ld a,#'\
      00160A CD 01 CB         [ 4] 3910 	call putc 
      00160D 1E 03            [ 2] 3911 	ldw x,(XSAVE,sp)
      00160F 72 D6 00 17      [ 4] 3912 	ld a,([ptr16],x)
      001613 5C               [ 2] 3913 	incw x 
      001614 1F 03            [ 2] 3914 	ldw (XSAVE,sp),x 
      001616 CD 01 CB         [ 4] 3915 	call putc 
      001619 CC 15 1C         [ 2] 3916 	jp 1$ 
      00161C A6 3A            [ 1] 3917 14$: ld a,#':
      00161E CD 01 CB         [ 4] 3918 80$: call putc 
      001621 1E 03            [ 2] 3919 	ldw x,(XSAVE,sp)
      001623 CC 15 1C         [ 2] 3920 	jp 1$ 
      001626                       3921 90$: 
      001626 A6 0D            [ 1] 3922 	ld a,#CR 
      001628 CD 01 CB         [ 4] 3923 	call putc
      00162B 7B 02            [ 1] 3924 	ld a,(WIDTH_SAV,sp) 
      00162D C7 00 26         [ 1] 3925 	ld tab_width,a 
      001630 7B 01            [ 1] 3926 	ld a,(BASE_SAV,sp) 
      001632 C7 00 0A         [ 1] 3927 	ld base,a
      001635                       3928 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001635 5B 05            [ 2]    1     addw sp,#VSIZE 
      001637 81               [ 4] 3929 	ret 	
      001638 28 29 2C 23           3930 single_char: .byte '(',')',',','#'
      00163C 2A 2F 25              3931 mul_char: .byte '*','/','%'
      00163F 16 4B 16 4D 16 4F 16  3932 relop_str: .word gt,equal,ge,lt,le,ne 
             52 16 54 16 57
      00164B 3E 00                 3933 gt: .asciz ">"
      00164D 3D 00                 3934 equal: .asciz "="
      00164F 3E 3D 00              3935 ge: .asciz ">="
      001652 3C 00                 3936 lt: .asciz "<"
      001654 3C 3D 00              3937 le: .asciz "<="
      001657 3C 3E 00              3938 ne:  .asciz "<>"
                                   3939 
                                   3940 
                                   3941 ;---------------------------------
                                   3942 ; BASIC: PRINT|? arg_list 
                                   3943 ; print values from argument list
                                   3944 ;----------------------------------
                           000001  3945 	COMMA=1
                           000001  3946 	VSIZE=1
      00165A                       3947 print:
      00165A 4B 00            [ 1] 3948 push #0 ; local variable COMMA 
      00165C                       3949 reset_comma:
      00165C 0F 01            [ 1] 3950 	clr (COMMA,sp)
      00165E                       3951 prt_loop:
      00165E CD 13 59         [ 4] 3952 	call relation 
      001661 A1 01            [ 1] 3953 	cp a,#TK_COLON 
      001663 27 51            [ 1] 3954 	jreq print_exit   
      001665 A1 04            [ 1] 3955 	cp a,#TK_INTGR 
      001667 26 05            [ 1] 3956 	jrne 0$ 
      001669 CD 0A 16         [ 4] 3957 	call print_int 
      00166C 20 EE            [ 2] 3958 	jra reset_comma
      00166E                       3959 0$: 	
      00166E CD 08 6C         [ 4] 3960 	call next_token
      001671 A1 00            [ 1] 3961 	cp a,#TK_NONE 
      001673 27 41            [ 1] 3962 	jreq print_exit 
      001675 A1 0A            [ 1] 3963 1$:	cp a,#TK_QSTR
      001677 26 05            [ 1] 3964 	jrne 2$   
      001679 CD 01 DE         [ 4] 3965 	call puts
      00167C 20 DE            [ 2] 3966 	jra reset_comma
      00167E A1 03            [ 1] 3967 2$: cp a,#TK_CHAR 
      001680 26 06            [ 1] 3968 	jrne 3$
      001682 9F               [ 1] 3969 	ld a,xl 
      001683 CD 01 CB         [ 4] 3970 	call putc 
      001686 20 D4            [ 2] 3971 	jra reset_comma 
      001688                       3972 3$: 	
      001688 A1 08            [ 1] 3973 	cp a,#TK_CFUNC 
      00168A 26 07            [ 1] 3974 	jrne 4$ 
      00168C FD               [ 4] 3975 	call (x)
      00168D 9F               [ 1] 3976 	ld a,xl 
      00168E CD 01 CB         [ 4] 3977 	call putc
      001691 20 C9            [ 2] 3978 	jra reset_comma 
      001693                       3979 4$: 
      001693 A1 0D            [ 1] 3980 	cp a,#TK_COMMA 
      001695 26 05            [ 1] 3981 	jrne 5$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001697 03 01            [ 1] 3982 	cpl (COMMA,sp) 
      001699 CC 16 5E         [ 2] 3983 	jp prt_loop   
      00169C                       3984 5$: 
      00169C A1 0E            [ 1] 3985 	cp a,#TK_SHARP
      00169E 26 13            [ 1] 3986 	jrne 7$
      0016A0 CD 08 6C         [ 4] 3987 	call next_token
      0016A3 A1 04            [ 1] 3988 	cp a,#TK_INTGR 
      0016A5 27 03            [ 1] 3989 	jreq 6$
      0016A7 CC 07 B8         [ 2] 3990 	jp syntax_error 
      0016AA                       3991 6$:
      0016AA 9F               [ 1] 3992 	ld a,xl 
      0016AB A4 0F            [ 1] 3993 	and a,#15 
      0016AD C7 00 26         [ 1] 3994 	ld tab_width,a 
      0016B0 CC 16 5C         [ 2] 3995 	jp reset_comma 
      0016B3                       3996 7$:	
      0016B3 CD 10 0B         [ 4] 3997 	call unget_token
      0016B6                       3998 print_exit:
      0016B6 0D 01            [ 1] 3999 	tnz (COMMA,sp)
      0016B8 26 05            [ 1] 4000 	jrne 9$
      0016BA A6 0D            [ 1] 4001 	ld a,#CR 
      0016BC CD 01 CB         [ 4] 4002     call putc 
      0016BF                       4003 9$:	_drop VSIZE 
      0016BF 5B 01            [ 2]    1     addw sp,#VSIZE 
      0016C1 81               [ 4] 4004 	ret 
                                   4005 
                                   4006 ;----------------------
                                   4007 ; 'save_context' and
                                   4008 ; 'rest_context' must be 
                                   4009 ; called at the same 
                                   4010 ; call stack depth 
                                   4011 ; i.e. SP must have the 
                                   4012 ; save value at  
                                   4013 ; entry point of both 
                                   4014 ; routine. 
                                   4015 ;---------------------
                           000004  4016 	CTXT_SIZE=4 ; size of saved data 
                                   4017 ;--------------------
                                   4018 ; save current BASIC
                                   4019 ; interpreter context 
                                   4020 ; on cstack 
                                   4021 ;--------------------
      0016C2                       4022 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0016C2                       4023 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      0016C2                       4024 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      0016C2                       4025 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      0016C2                       4026 save_context:
      0016C2 CE 00 04         [ 2] 4027 	ldw x,basicptr 
      0016C5 1F 03            [ 2] 4028 	ldw (BPTR,sp),x
      0016C7 C6 00 01         [ 1] 4029 	ld a,in 
      0016CA 6B 05            [ 1] 4030 	ld (IN,sp),a
      0016CC C6 00 03         [ 1] 4031 	ld a,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016CF 6B 06            [ 1] 4032 	ld (CNT,sp),a  
      0016D1 81               [ 4] 4033 	ret
                                   4034 
                                   4035 ;-----------------------
                                   4036 ; restore previously saved 
                                   4037 ; BASIC interpreter context 
                                   4038 ; from cstack 
                                   4039 ;-------------------------
      0016D2                       4040 rest_context:
      0016D2 1E 03            [ 2] 4041 	ldw x,(BPTR,sp)
      0016D4 CF 00 04         [ 2] 4042 	ldw basicptr,x 
      0016D7 7B 05            [ 1] 4043 	ld a,(IN,sp)
      0016D9 C7 00 01         [ 1] 4044 	ld in,a
      0016DC 7B 06            [ 1] 4045 	ld a,(CNT,sp)
      0016DE C7 00 03         [ 1] 4046 	ld count,a  
      0016E1 81               [ 4] 4047 	ret
                                   4048 
                                   4049 ;------------------------------------------
                                   4050 ; BASIC: INPUT [string],var[,[string],var]
                                   4051 ; input value in variables 
                                   4052 ; [string] optionally can be used as prompt 
                                   4053 ;-----------------------------------------
                           000001  4054 	CX_BPTR=1
                           000003  4055 	CX_IN=3
                           000004  4056 	CX_CNT=4
                           000005  4057 	SKIP=5
                           000005  4058 	VSIZE=5
      0016E2                       4059 input_var:
      0016E2                       4060 	_vars VSIZE 
      0016E2 52 05            [ 2]    1     sub sp,#VSIZE 
      0016E4                       4061 input_loop:
      0016E4 0F 05            [ 1] 4062 	clr (SKIP,sp)
      0016E6 CD 08 6C         [ 4] 4063 	call next_token 
      0016E9 A1 0A            [ 1] 4064 	cp a,#TK_QSTR 
      0016EB 26 08            [ 1] 4065 	jrne 1$ 
      0016ED CD 01 DE         [ 4] 4066 	call puts 
      0016F0 03 05            [ 1] 4067 	cpl (SKIP,sp)
      0016F2 CD 08 6C         [ 4] 4068 	call next_token 
      0016F5 A1 05            [ 1] 4069 1$: cp a,#TK_VAR  
      0016F7 27 03            [ 1] 4070 	jreq 2$ 
      0016F9 CC 07 B8         [ 2] 4071 	jp syntax_error
      0016FC CD 10 11         [ 4] 4072 2$:	call dpush 
      0016FF 0D 05            [ 1] 4073 	tnz (SKIP,sp)
      001701 26 06            [ 1] 4074 	jrne 21$ 
                                   4075 ;	clr pad+2
      001703 AE 17 38         [ 2] 4076 	ldw x,#pad 
      001706 CD 01 DE         [ 4] 4077 	call puts   
      001709                       4078 21$:
      001709 A6 3A            [ 1] 4079 	ld a,#':
      00170B CD 01 CB         [ 4] 4080 	call putc 
      00170E CD 16 C2         [ 4] 4081 	call save_context 
      001711 72 5F 00 03      [ 1] 4082 	clr count  
      001715 CD 0B 06         [ 4] 4083 	call readln 
      001718 AE 16 E8         [ 2] 4084 	ldw x,#tib 
      00171B CF 00 04         [ 2] 4085 	ldw basicptr,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00171E 72 5F 00 01      [ 1] 4086 	clr in 
      001722 CD 0D 7F         [ 4] 4087 	call get_token
      001725 A1 04            [ 1] 4088 	cp a,#TK_INTGR
      001727 27 06            [ 1] 4089 	jreq 3$ 
      001729 CD 16 D2         [ 4] 4090 	call rest_context 
      00172C CC 07 B8         [ 2] 4091 	jp syntax_error
      00172F CD 10 11         [ 4] 4092 3$: call dpush 
      001732 CD 10 58         [ 4] 4093 	call store 
      001735 CD 16 D2         [ 4] 4094 	call rest_context
      001738 CD 08 6C         [ 4] 4095 	call next_token 
      00173B A1 0D            [ 1] 4096 	cp a,#TK_COMMA 
      00173D 27 A5            [ 1] 4097 	jreq input_loop 
      00173F A1 01            [ 1] 4098 	cp a,#TK_COLON 
      001741 23 03            [ 2] 4099     jrule input_exit 
      001743 CC 07 B8         [ 2] 4100 	jp syntax_error 
      001746                       4101 input_exit:
      001746                       4102 	_drop VSIZE 
      001746 5B 05            [ 2]    1     addw sp,#VSIZE 
      001748 81               [ 4] 4103 	ret 
                                   4104 
                                   4105 
                                   4106 ;---------------------
                                   4107 ; BASIC: REMARK | ' 
                                   4108 ; skip comment to end of line 
                                   4109 ;---------------------- 
      001749                       4110 rem:
      001749 55 00 01 00 03   [ 1] 4111  	mov count,in 
      00174E 81               [ 4] 4112 	ret 
                                   4113 
                                   4114 ;---------------------
                                   4115 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   4116 ; read in loop 'addr'  
                                   4117 ; apply & 'mask' to value 
                                   4118 ; loop while result==0.  
                                   4119 ; if 'xor_mask' given 
                                   4120 ; apply ^ in second  
                                   4121 ; loop while result==0 
                                   4122 ;---------------------
                           000001  4123 	XMASK=1 
                           000002  4124 	MASK=2
                           000003  4125 	ADDR=3
                           000004  4126 	VSIZE=4
      00174F                       4127 wait: 
      00174F                       4128 	_vars VSIZE
      00174F 52 04            [ 2]    1     sub sp,#VSIZE 
      001751 0F 01            [ 1] 4129 	clr (XMASK,sp) 
      001753 CD 12 15         [ 4] 4130 	call arg_list 
      001756 A1 02            [ 1] 4131 	cp a,#2
      001758 24 03            [ 1] 4132 	jruge 0$
      00175A CC 07 B8         [ 2] 4133 	jp syntax_error 
      00175D A1 03            [ 1] 4134 0$:	cp a,#3
      00175F 25 06            [ 1] 4135 	jrult 1$
      001761 CD 10 1E         [ 4] 4136 	call dpop 
      001764 9F               [ 1] 4137 	ld a,xl
      001765 6B 01            [ 1] 4138 	ld (XMASK,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001767 CD 10 1E         [ 4] 4139 1$: call dpop ; mask 
      00176A 9F               [ 1] 4140 	ld a,xl 
      00176B 6B 02            [ 1] 4141 	ld (MASK,sp),a 
      00176D CD 10 1E         [ 4] 4142 	call dpop ; address 
      001770 F6               [ 1] 4143 2$:	ld a,(x)
      001771 14 02            [ 1] 4144 	and a,(MASK,sp)
      001773 18 01            [ 1] 4145 	xor a,(XMASK,sp)
      001775 27 F9            [ 1] 4146 	jreq 2$ 
      001777                       4147 	_drop VSIZE 
      001777 5B 04            [ 2]    1     addw sp,#VSIZE 
      001779 81               [ 4] 4148 	ret 
                                   4149 
                                   4150 ;---------------------
                                   4151 ; BASIC: BSET addr,mask
                                   4152 ; set bits at 'addr' corresponding 
                                   4153 ; to those of 'mask' that are at 1.
                                   4154 ; arguments:
                                   4155 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4156 ;   mask        mask|addr
                                   4157 ; output:
                                   4158 ;	none 
                                   4159 ;--------------------------
      00177A                       4160 bit_set:
      00177A CD 12 15         [ 4] 4161 	call arg_list 
      00177D A1 02            [ 1] 4162 	cp a,#2	 
      00177F 27 03            [ 1] 4163 	jreq 1$ 
      001781 CC 07 B8         [ 2] 4164 	jp syntax_error
      001784                       4165 1$: 
      001784 CD 10 1E         [ 4] 4166 	call dpop ; mask 
      001787 9F               [ 1] 4167 	ld a,xl 
      001788 CD 10 1E         [ 4] 4168 	call dpop ; addr  
      00178B FA               [ 1] 4169 	or a,(x)
      00178C F7               [ 1] 4170 	ld (x),a
      00178D 81               [ 4] 4171 	ret 
                                   4172 
                                   4173 ;---------------------
                                   4174 ; BASIC: BRES addr,mask
                                   4175 ; reset bits at 'addr' corresponding 
                                   4176 ; to those of 'mask' that are at 1.
                                   4177 ; arguments:
                                   4178 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4179 ;   mask	    ~mask&*addr  
                                   4180 ; output:
                                   4181 ;	none 
                                   4182 ;--------------------------
      00178E                       4183 bit_reset:
      00178E CD 12 15         [ 4] 4184 	call arg_list 
      001791 A1 02            [ 1] 4185 	cp a,#2  
      001793 27 03            [ 1] 4186 	jreq 1$ 
      001795 CC 07 B8         [ 2] 4187 	jp syntax_error
      001798                       4188 1$: 
      001798 CD 10 1E         [ 4] 4189 	call dpop ; mask 
      00179B 9F               [ 1] 4190 	ld a,xl 
      00179C 43               [ 1] 4191 	cpl a 
      00179D CD 10 1E         [ 4] 4192 	call dpop ; addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0017A0 F4               [ 1] 4193 	and a,(x)
      0017A1 F7               [ 1] 4194 	ld (x),a 
      0017A2 81               [ 4] 4195 	ret 
                                   4196 
                                   4197 ;---------------------
                                   4198 ; BASIC: BTOGL addr,mask
                                   4199 ; toggle bits at 'addr' corresponding 
                                   4200 ; to those of 'mask' that are at 1.
                                   4201 ; arguments:
                                   4202 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4203 ;   mask	    mask^*addr  
                                   4204 ; output:
                                   4205 ;	none 
                                   4206 ;--------------------------
      0017A3                       4207 bit_toggle:
      0017A3 CD 12 15         [ 4] 4208 	call arg_list 
      0017A6 A1 02            [ 1] 4209 	cp a,#2 
      0017A8 27 03            [ 1] 4210 	jreq 1$ 
      0017AA CC 07 B8         [ 2] 4211 	jp syntax_error
      0017AD CD 10 1E         [ 4] 4212 1$: call dpop ; mask 
      0017B0 9F               [ 1] 4213 	ld a,xl 
      0017B1 CD 10 1E         [ 4] 4214 	call dpop ; addr  
      0017B4 F8               [ 1] 4215 	xor a,(x)
      0017B5 F7               [ 1] 4216 	ld (x),a 
      0017B6 81               [ 4] 4217 	ret 
                                   4218 
                                   4219 
                                   4220 ;---------------------
                                   4221 ; BASIC: BTEST(addr,bit)
                                   4222 ; return bit value at 'addr' 
                                   4223 ; bit is in range {0..7}.
                                   4224 ; arguments:
                                   4225 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4226 ;   bit 	    bit position {0..7}  
                                   4227 ; output:
                                   4228 ;	none 
                                   4229 ;--------------------------
      0017B7                       4230 bit_test:
      0017B7 CD 12 39         [ 4] 4231 	call func_args 
      0017BA A1 02            [ 1] 4232 	cp a,#2
      0017BC 27 03            [ 1] 4233 	jreq 0$
      0017BE CC 07 B8         [ 2] 4234 	jp syntax_error
      0017C1                       4235 0$:	
      0017C1 CD 10 1E         [ 4] 4236 	call dpop 
      0017C4 9F               [ 1] 4237 	ld a,xl 
      0017C5 A4 07            [ 1] 4238 	and a,#7
      0017C7 88               [ 1] 4239 	push a 
      0017C8 A6 01            [ 1] 4240 	ld a,#1 
      0017CA 0D 01            [ 1] 4241 1$: tnz (1,sp)
      0017CC 27 05            [ 1] 4242 	jreq 2$
      0017CE 48               [ 1] 4243 	sll a 
      0017CF 0A 01            [ 1] 4244 	dec (1,sp)
      0017D1 20 F7            [ 2] 4245 	jra 1$
      0017D3 CD 10 1E         [ 4] 4246 2$: call dpop 
      0017D6 F4               [ 1] 4247 	and a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0017D7 27 02            [ 1] 4248 	jreq 3$
      0017D9 A6 01            [ 1] 4249 	ld a,#1 
      0017DB 5F               [ 1] 4250 3$:	clrw x 
      0017DC 97               [ 1] 4251 	ld xl,a 
      0017DD A6 04            [ 1] 4252 	ld a,#TK_INTGR
      0017DF                       4253 	_drop 1 
      0017DF 5B 01            [ 2]    1     addw sp,#1 
      0017E1 81               [ 4] 4254 	ret
                                   4255 
                                   4256 
                                   4257 ;--------------------
                                   4258 ; BASIC: POKE addr,byte
                                   4259 ; put a byte at addr 
                                   4260 ;--------------------
      0017E2                       4261 poke:
      0017E2 CD 12 15         [ 4] 4262 	call arg_list 
      0017E5 A1 02            [ 1] 4263 	cp a,#2
      0017E7 27 03            [ 1] 4264 	jreq 1$
      0017E9 CC 07 B8         [ 2] 4265 	jp syntax_error
      0017EC                       4266 1$:	
      0017EC CD 10 1E         [ 4] 4267 	call dpop 
      0017EF 9F               [ 1] 4268     ld a,xl 
      0017F0 CD 10 1E         [ 4] 4269 	call dpop 
      0017F3 F7               [ 1] 4270 	ld (x),a 
      0017F4 81               [ 4] 4271 	ret 
                                   4272 
                                   4273 ;-----------------------
                                   4274 ; BASIC: PEEK(addr)
                                   4275 ; get the byte at addr 
                                   4276 ; input:
                                   4277 ;	none 
                                   4278 ; output:
                                   4279 ;	X 		value 
                                   4280 ;-----------------------
      0017F5                       4281 peek:
      0017F5 CD 12 39         [ 4] 4282 	call func_args
      0017F8 A1 01            [ 1] 4283 	cp a,#1
      0017FA 27 03            [ 1] 4284 	jreq 1$
      0017FC CC 07 B8         [ 2] 4285 	jp syntax_error
      0017FF CD 10 1E         [ 4] 4286 1$:	call dpop 
      001802 F6               [ 1] 4287 	ld a,(x)
      001803 5F               [ 1] 4288 	clrw x 
      001804 97               [ 1] 4289 	ld xl,a 
      001805 A6 04            [ 1] 4290 	ld a,#TK_INTGR
      001807 81               [ 4] 4291 	ret 
                                   4292 
                                   4293 ;----------------------------
                                   4294 ; BASIC: XPEEK(page,addr)
                                   4295 ; read extended memory byte
                                   4296 ; page in range {0,1,2}
                                   4297 ;----------------------------
      001808                       4298 xpeek:
      001808 CD 12 39         [ 4] 4299 	call func_args 
      00180B A1 02            [ 1] 4300 	cp a,#2 
      00180D 27 03            [ 1] 4301 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00180F CC 07 B8         [ 2] 4302 	jp syntax_error
      001812                       4303 1$: 
      001812 CD 10 1E         [ 4] 4304 	call dpop 
      001815 CF 00 17         [ 2] 4305 	ldw farptr+1,x 
      001818 CD 10 1E         [ 4] 4306 	call dpop 
      00181B 9F               [ 1] 4307 	ld a,xl 
      00181C C7 00 16         [ 1] 4308 	ld farptr,a 
      00181F 5F               [ 1] 4309 	clrw x
      001820 92 BC 00 16      [ 5] 4310 	ldf a,[farptr]
      001824 97               [ 1] 4311 	ld xl,a 
      001825 A6 04            [ 1] 4312 	ld a,#TK_INTGR 
      001827 81               [ 4] 4313 	ret 
                                   4314 
                                   4315 ;---------------------------
                                   4316 ; BASIC IF expr : instructions
                                   4317 ; evaluate expr and if true 
                                   4318 ; execute instructions on same line. 
                                   4319 ;----------------------------
      001828                       4320 if: 
      001828 CD 13 59         [ 4] 4321 	call relation 
      00182B A1 04            [ 1] 4322 	cp a,#TK_INTGR
      00182D 27 03            [ 1] 4323 	jreq 1$ 
      00182F CC 07 B8         [ 2] 4324 	jp syntax_error
      001832 4F               [ 1] 4325 1$:	clr a 
      001833 5D               [ 2] 4326 	tnzw x 
      001834 26 05            [ 1] 4327 	jrne 9$  
                                   4328 ;skip to next line
      001836 55 00 03 00 01   [ 1] 4329 	mov in,count
      00183B 81               [ 4] 4330 9$:	ret 
                                   4331 
                                   4332 ;------------------------
                                   4333 ; BASIC: FOR var=expr 
                                   4334 ; set variable to expression 
                                   4335 ; leave variable address 
                                   4336 ; on dstack and set
                                   4337 ; FLOOP bit in 'flags'
                                   4338 ;-----------------
                           000001  4339 	RETL1=1
                           000003  4340 	INW=3
                           000005  4341 	BPTR=5
      00183C                       4342 for: ; { -- var_addr }
      00183C A6 05            [ 1] 4343 	ld a,#TK_VAR 
      00183E CD 12 08         [ 4] 4344 	call expect
      001841 CD 10 11         [ 4] 4345 	call dpush 
      001844 CD 14 00         [ 4] 4346 	call let02 
      001847 72 14 00 25      [ 1] 4347 	bset flags,#FLOOP 
                                   4348 ; open space on cstack for BPTR and INW 
      00184B 85               [ 2] 4349 	popw x ; call return address 
      00184C                       4350 	_vars 4
      00184C 52 04            [ 2]    1     sub sp,#4 
      00184E 89               [ 2] 4351 	pushw x  ; RETL1 
      00184F 5F               [ 1] 4352 	clrw x 
      001850 1F 05            [ 2] 4353 	ldw (BPTR,sp),x 
      001852 1F 03            [ 2] 4354 	ldw (INW,sp),x 
      001854 CD 08 6C         [ 4] 4355 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001857 A1 06            [ 1] 4356 	cp a,#TK_CMD 
      001859 27 03            [ 1] 4357 	jreq 1$
      00185B CC 07 B8         [ 2] 4358 	jp syntax_error
      00185E                       4359 1$:  
      00185E A3 18 66         [ 2] 4360 	cpw x,#to 
      001861 27 03            [ 1] 4361 	jreq to
      001863 CC 07 B8         [ 2] 4362 	jp syntax_error 
                                   4363 
                                   4364 ;-----------------------------------
                                   4365 ; BASIC: TO expr 
                                   4366 ; second part of FOR loop initilization
                                   4367 ; leave limit on dstack and set 
                                   4368 ; FTO bit in 'flags'
                                   4369 ;-----------------------------------
      001866                       4370 to: ; { var_addr -- var_addr limit step }
      001866 72 04 00 25 03   [ 2] 4371 	btjt flags,#FLOOP,1$
      00186B CC 07 B8         [ 2] 4372 	jp syntax_error
      00186E CD 13 59         [ 4] 4373 1$: call relation  
      001871 A1 04            [ 1] 4374 	cp a,#TK_INTGR 
      001873 27 03            [ 1] 4375 	jreq 2$ 
      001875 CC 07 B8         [ 2] 4376 	jp syntax_error
      001878                       4377 2$: 
      001878 CD 10 11         [ 4] 4378     call dpush ; limit
      00187B CE 00 00         [ 2] 4379 	ldw x,in.w 
      00187E CD 08 6C         [ 4] 4380 	call next_token
      001881 A1 00            [ 1] 4381 	cp a,#TK_NONE  
      001883 27 0C            [ 1] 4382 	jreq 4$ 
      001885 A1 06            [ 1] 4383 	cp a,#TK_CMD
      001887 26 05            [ 1] 4384 	jrne 3$
      001889 A3 18 99         [ 2] 4385 	cpw x,#step 
      00188C 27 0B            [ 1] 4386 	jreq step
      00188E                       4387 3$:	
      00188E CD 10 0B         [ 4] 4388 	call unget_token   	 
      001891                       4389 4$:	
      001891 AE 00 01         [ 2] 4390 	ldw x,#1   ; default step  
      001894 CD 10 11         [ 4] 4391 	call dpush
      001897 20 15            [ 2] 4392 	jra store_loop_addr 
                                   4393 
                                   4394 
                                   4395 ;----------------------------------
                                   4396 ; BASIC: STEP expr 
                                   4397 ; optional third par of FOR loop
                                   4398 ; initialization. 	
                                   4399 ;------------------------------------
      001899                       4400 step: ; {var limit -- var limit step}
      001899 72 04 00 25 03   [ 2] 4401 	btjt flags,#FLOOP,1$
      00189E CC 07 B8         [ 2] 4402 	jp syntax_error
      0018A1 CD 13 59         [ 4] 4403 1$: call relation
      0018A4 A1 04            [ 1] 4404 	cp a,#TK_INTGR
      0018A6 27 03            [ 1] 4405 	jreq 2$
      0018A8 CC 07 B8         [ 2] 4406 	jp syntax_error
      0018AB CD 10 11         [ 4] 4407 2$:	call dpush
                                   4408 ; leave loop back entry point on cstack 
                                   4409 ; cstack is 2 call deep from interp_loop
      0018AE                       4410 store_loop_addr:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0018AE CE 00 04         [ 2] 4411 	ldw x,basicptr  
      0018B1 1F 05            [ 2] 4412 	ldw (BPTR,sp),x 
      0018B3 CE 00 00         [ 2] 4413 	ldw x,in.w 
      0018B6 1F 03            [ 2] 4414 	ldw (INW,sp),x   
      0018B8 72 15 00 25      [ 1] 4415 	bres flags,#FLOOP 
      0018BC 72 5C 00 22      [ 1] 4416 	inc loop_depth  
      0018C0 81               [ 4] 4417 	ret 
                                   4418 
                                   4419 ;--------------------------------
                                   4420 ; BASIC: NEXT var 
                                   4421 ; FOR loop control 
                                   4422 ; increment variable with step 
                                   4423 ; and compare with limit 
                                   4424 ; loop if threshold not crossed.
                                   4425 ; else clean both stacks. 
                                   4426 ; and decrement 'loop_depth' 
                                   4427 ;--------------------------------
      0018C1                       4428 next: ; {var limit step -- [var limit step ] }
      0018C1 72 5D 00 22      [ 1] 4429 	tnz loop_depth 
      0018C5 26 03            [ 1] 4430 	jrne 1$ 
      0018C7 CC 07 B8         [ 2] 4431 	jp syntax_error 
      0018CA                       4432 1$: 
      0018CA A6 05            [ 1] 4433 	ld a,#TK_VAR 
      0018CC CD 12 08         [ 4] 4434 	call expect
                                   4435 ; check for good variable after NEXT 	 
      0018CF 90 93            [ 1] 4436 	ldw y,x 
      0018D1 AE 00 04         [ 2] 4437 	ldw x,#4  
      0018D4 72 D3 00 1C      [ 4] 4438 	cpw y,([dstkptr],x) ; compare variables address 
      0018D8 27 03            [ 1] 4439 	jreq 2$  
      0018DA CC 07 B8         [ 2] 4440 	jp syntax_error ; not the good one 
      0018DD                       4441 2$: ; increment variable 
      0018DD 93               [ 1] 4442 	ldw x,y
      0018DE FE               [ 2] 4443 	ldw x,(x)  ; get var value 
      0018DF CF 00 0C         [ 2] 4444 	ldw acc16,x 
      0018E2 72 CE 00 1C      [ 5] 4445 	ldw x,[dstkptr] ; step
      0018E6 72 BB 00 0C      [ 2] 4446 	addw x,acc16 ; var+step 
      0018EA 90 FF            [ 2] 4447 	ldw (y),x ; save var new value 
                                   4448 ; compare with limit 
      0018EC 90 93            [ 1] 4449 	ldw y,x 
      0018EE 72 CE 00 1C      [ 5] 4450 	ldw x,[dstkptr] ; step in x 
      0018F2 5D               [ 2] 4451 	tnzw x  
      0018F3 2A 0B            [ 1] 4452 	jrpl 4$ ; positive step 
                                   4453 ;negative step 
      0018F5 AE 00 02         [ 2] 4454 	ldw x,#2
      0018F8 72 D3 00 1C      [ 4] 4455 	cpw y,([dstkptr],x)
      0018FC 2F 20            [ 1] 4456 	jrslt loop_done
      0018FE 20 09            [ 2] 4457 	jra loop_back 
      001900                       4458 4$: ; positive step
      001900 AE 00 02         [ 2] 4459 	ldw x,#2 
      001903 72 D3 00 1C      [ 4] 4460 	cpw y,([dstkptr],x)
      001907 2C 15            [ 1] 4461 	jrsgt loop_done
      001909                       4462 loop_back:
      001909 1E 05            [ 2] 4463 	ldw x,(BPTR,sp)
      00190B CF 00 04         [ 2] 4464 	ldw basicptr,x 
      00190E 72 01 00 25 05   [ 2] 4465 	btjf flags,#FRUN,1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001913 E6 02            [ 1] 4466 	ld a,(2,x)
      001915 C7 00 03         [ 1] 4467 	ld count,a
      001918 1E 03            [ 2] 4468 1$:	ldw x,(INW,sp)
      00191A CF 00 00         [ 2] 4469 	ldw in.w,x 
      00191D 81               [ 4] 4470 	ret 
      00191E                       4471 loop_done:
                                   4472 	; remove var limit step on dstack 
      00191E CE 00 1C         [ 2] 4473 	ldw x,dstkptr 
      001921 1C 00 06         [ 2] 4474 	addw x,#3*CELL_SIZE
      001924 CF 00 1C         [ 2] 4475 	ldw dstkptr,x 
                                   4476 	; remove 2 return address on cstack 
      001927 85               [ 2] 4477 	popw x
      001928                       4478 	_drop 4
      001928 5B 04            [ 2]    1     addw sp,#4 
      00192A 89               [ 2] 4479 	pushw x 
      00192B 72 5A 00 22      [ 1] 4480 	dec loop_depth 
      00192F 81               [ 4] 4481 	ret 
                                   4482 
                                   4483 ;----------------------------
                                   4484 ; called by goto/gosub
                                   4485 ; to get target line number 
                                   4486 ;---------------------------
      001930                       4487 get_target_line:
      001930 CD 13 59         [ 4] 4488 	call relation 
      001933 A1 04            [ 1] 4489 	cp a,#TK_INTGR
      001935 27 03            [ 1] 4490 	jreq 1$
      001937 CC 07 B8         [ 2] 4491 	jp syntax_error
      00193A CD 03 0E         [ 4] 4492 1$:	call search_lineno  
      00193D 5D               [ 2] 4493 	tnzw x 
      00193E 26 05            [ 1] 4494 	jrne 2$ 
      001940 A6 05            [ 1] 4495 	ld a,#ERR_NO_LINE 
      001942 CC 07 BA         [ 2] 4496 	jp tb_error 
      001945 81               [ 4] 4497 2$:	ret 
                                   4498 
                                   4499 ;------------------------
                                   4500 ; BASIC: GOTO line# 
                                   4501 ; jump to line# 
                                   4502 ; here cstack is 2 call deep from interp_loop 
                                   4503 ;------------------------
      001946                       4504 goto:
      001946 72 00 00 25 06   [ 2] 4505 	btjt flags,#FRUN,0$ 
      00194B A6 06            [ 1] 4506 	ld a,#ERR_RUN_ONLY
      00194D CC 07 BA         [ 2] 4507 	jp tb_error 
      001950 81               [ 4] 4508 	ret 
      001951 CD 19 30         [ 4] 4509 0$:	call get_target_line
      001954                       4510 jp_to_target:
      001954 CF 00 04         [ 2] 4511 	ldw basicptr,x 
      001957 E6 02            [ 1] 4512 	ld a,(2,x)
      001959 C7 00 03         [ 1] 4513 	ld count,a 
      00195C 35 03 00 01      [ 1] 4514 	mov in,#3 
      001960 81               [ 4] 4515 	ret 
                                   4516 
                                   4517 
                                   4518 ;--------------------
                                   4519 ; BASIC: GOSUB line#
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4520 ; basic subroutine call
                                   4521 ; actual line# and basicptr 
                                   4522 ; are saved on cstack
                                   4523 ; here cstack is 2 call deep from interp_loop 
                                   4524 ;--------------------
                           000003  4525 	RET_ADDR=3
                           000005  4526 	RET_INW=5
                           000004  4527 	VSIZE=4  
      001961                       4528 gosub:
      001961 72 00 00 25 06   [ 2] 4529 	btjt flags,#FRUN,0$ 
      001966 A6 06            [ 1] 4530 	ld a,#ERR_RUN_ONLY
      001968 CC 07 BA         [ 2] 4531 	jp tb_error 
      00196B 81               [ 4] 4532 	ret 
      00196C 85               [ 2] 4533 0$:	popw x 
      00196D                       4534 	_vars VSIZE  
      00196D 52 04            [ 2]    1     sub sp,#VSIZE 
      00196F 89               [ 2] 4535 	pushw x 
      001970 CE 00 04         [ 2] 4536 	ldw x,basicptr
      001973 1F 03            [ 2] 4537 	ldw (RET_ADDR,sp),x 
      001975 CD 19 30         [ 4] 4538 	call get_target_line  
      001978 89               [ 2] 4539 	pushw x 
      001979 CE 00 00         [ 2] 4540 	ldw x,in.w 
      00197C 1F 07            [ 2] 4541 	ldw (RET_INW+2,sp),x
      00197E 85               [ 2] 4542 	popw x 
      00197F 20 D3            [ 2] 4543 	jra jp_to_target
                                   4544 
                                   4545 ;------------------------
                                   4546 ; BASIC: RETURN 
                                   4547 ; exit from a subroutine 
                                   4548 ; 
                                   4549 ;------------------------
      001981                       4550 return:
      001981 72 00 00 25 05   [ 2] 4551 	btjt flags,#FRUN,0$ 
      001986 A6 06            [ 1] 4552 	ld a,#ERR_RUN_ONLY
      001988 CC 07 BA         [ 2] 4553 	jp tb_error 
      00198B                       4554 0$:	
      00198B 1E 03            [ 2] 4555 	ldw x,(RET_ADDR,sp) 
      00198D CF 00 04         [ 2] 4556 	ldw basicptr,x
      001990 E6 02            [ 1] 4557 	ld a,(2,x)
      001992 C7 00 03         [ 1] 4558 	ld count,a  
      001995 1E 05            [ 2] 4559 	ldw x,(RET_INW,sp)
      001997 CF 00 00         [ 2] 4560 	ldw in.w,x 
      00199A 85               [ 2] 4561 	popw x 
      00199B                       4562 	_drop VSIZE 
      00199B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00199D 89               [ 2] 4563 	pushw x
      00199E 81               [ 4] 4564 	ret  
                                   4565 
                                   4566 
                                   4567 ;----------------------------------
                                   4568 ; BASIC: RUN
                                   4569 ; run BASIC program in RAM
                                   4570 ;----------------------------------- 
      00199F                       4571 run: 
      00199F 72 01 00 25 02   [ 2] 4572 	btjf flags,#FRUN,0$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      0019A4 4F               [ 1] 4573 	clr a 
      0019A5 81               [ 4] 4574 	ret
      0019A6                       4575 0$: 
      0019A6 72 09 00 25 12   [ 2] 4576 	btjf flags,#FBREAK,1$
      0019AB                       4577 	_drop 2 
      0019AB 5B 02            [ 2]    1     addw sp,#2 
      0019AD CD 16 D2         [ 4] 4578 	call rest_context
      0019B0                       4579 	_drop CTXT_SIZE 
      0019B0 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0019B2 72 19 00 25      [ 1] 4580 	bres flags,#FBREAK 
      0019B6 72 10 00 25      [ 1] 4581 	bset flags,#FRUN 
      0019BA CC 08 3E         [ 2] 4582 	jp interp_loop 
      0019BD CE 00 1E         [ 2] 4583 1$:	ldw x,txtbgn
      0019C0 C3 00 20         [ 2] 4584 	cpw x,txtend 
      0019C3 2B 02            [ 1] 4585 	jrmi run_it 
      0019C5 4F               [ 1] 4586 	clr a 
      0019C6 81               [ 4] 4587 	ret
                                   4588 
      0019C7                       4589 run_it:	 
      0019C7 CD 13 D4         [ 4] 4590     call ubound 
      0019CA                       4591 	_drop 2 ; drop return address 
      0019CA 5B 02            [ 2]    1     addw sp,#2 
                                   4592 ; clear data pointer 
      0019CC 5F               [ 1] 4593 	clrw x 
      0019CD CF 00 06         [ 2] 4594 	ldw data_ptr,x 
      0019D0 72 5F 00 08      [ 1] 4595 	clr data_ofs 
      0019D4 72 5F 00 09      [ 1] 4596 	clr data_len 
                                   4597 ; initialize BASIC pointer 
      0019D8 CE 00 1E         [ 2] 4598 	ldw x,txtbgn 
      0019DB CF 00 04         [ 2] 4599 	ldw basicptr,x 
      0019DE E6 02            [ 1] 4600 	ld a,(2,x)
      0019E0 C7 00 03         [ 1] 4601 	ld count,a
      0019E3 35 03 00 01      [ 1] 4602 	mov in,#3	
      0019E7 72 10 00 25      [ 1] 4603 	bset flags,#FRUN 
      0019EB CC 08 3E         [ 2] 4604 	jp interp_loop 
                                   4605 
                                   4606 
                                   4607 ;----------------------
                                   4608 ; BASIC: STOP 
                                   4609 ; stop running program
                                   4610 ;---------------------- 
      0019EE                       4611 stop: 
                                   4612 ; clean dstack and cstack 
      0019EE AE 17 FF         [ 2] 4613 	ldw x,#STACK_EMPTY 
      0019F1 94               [ 1] 4614 	ldw sp,x 
      0019F2 72 11 00 25      [ 1] 4615 	bres flags,#FRUN 
      0019F6 72 19 00 25      [ 1] 4616 	bres flags,#FBREAK
      0019FA CC 07 FB         [ 2] 4617 	jp warm_start
                                   4618 
                                   4619 
                                   4620 ;-----------------------
                                   4621 ; BASIC: TONE expr1,expr2
                                   4622 ; used TIMER2 channel 1
                                   4623 ; to produce a tone 
                                   4624 ; arguments:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4625 ;    expr1   frequency 
                                   4626 ;    expr2   duration msec.
                                   4627 ;---------------------------
      0019FD                       4628 tone:
      0019FD CD 12 15         [ 4] 4629 	call arg_list 
      001A00 A1 02            [ 1] 4630 	cp a,#2 
      001A02 27 03            [ 1] 4631 	jreq 1$
      001A04 CC 07 B8         [ 2] 4632 	jp syntax_error 
      001A07                       4633 1$: 
      001A07                       4634 beep:
      001A07 CD 10 1E         [ 4] 4635 	call dpop ; duration
      001A0A 89               [ 2] 4636 	pushw x 
      001A0B CD 10 1E         [ 4] 4637 	call dpop ; frequency
      001A0E 90 93            [ 1] 4638 	ldw y,x 
      001A10 AE F4 24         [ 2] 4639 	ldw x,#TIM2_CLK_FREQ
      001A13 65               [ 2] 4640 	divw x,y 
                                   4641 ; round to nearest integer 
      001A14 90 A3 7A 12      [ 2] 4642 	cpw y,#TIM2_CLK_FREQ/2
      001A18 2B 01            [ 1] 4643 	jrmi 2$
      001A1A 5C               [ 2] 4644 	incw x 
      001A1B                       4645 2$:	 
      001A1B 9E               [ 1] 4646 	ld a,xh 
      001A1C C7 53 0D         [ 1] 4647 	ld TIM2_ARRH,a 
      001A1F 9F               [ 1] 4648 	ld a,xl 
      001A20 C7 53 0E         [ 1] 4649 	ld TIM2_ARRL,a 
                                   4650 ; 50% duty cycle 
      001A23 8C               [ 1] 4651 	ccf 
      001A24 56               [ 2] 4652 	rrcw x 
      001A25 9E               [ 1] 4653 	ld a,xh 
      001A26 C7 53 0F         [ 1] 4654 	ld TIM2_CCR1H,a 
      001A29 9F               [ 1] 4655 	ld a,xl
      001A2A C7 53 10         [ 1] 4656 	ld TIM2_CCR1L,a
      001A2D 72 10 53 08      [ 1] 4657 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001A31 72 10 53 00      [ 1] 4658 	bset TIM2_CR1,#TIM2_CR1_CEN
      001A35 72 10 53 04      [ 1] 4659 	bset TIM2_EGR,#TIM2_EGR_UG
      001A39 85               [ 2] 4660 	popw x 
      001A3A CF 00 10         [ 2] 4661 	ldw timer,x 
      001A3D CE 00 10         [ 2] 4662 3$: ldw x,timer 	
      001A40 26 FB            [ 1] 4663 	jrne 3$ 
      001A42 72 11 53 08      [ 1] 4664 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001A46 72 11 53 00      [ 1] 4665 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001A4A 81               [ 4] 4666 	ret 
                                   4667 
                                   4668 ;-------------------------------
                                   4669 ; BASIC: ADCON 0|1 [,divisor]  
                                   4670 ; disable/enanble ADC 
                                   4671 ;-------------------------------
      001A4B                       4672 power_adc:
      001A4B CD 12 15         [ 4] 4673 	call arg_list 
      001A4E A1 02            [ 1] 4674 	cp a,#2	
      001A50 27 0D            [ 1] 4675 	jreq 1$
      001A52 A1 01            [ 1] 4676 	cp a,#1 
      001A54 27 03            [ 1] 4677 	jreq 0$ 
      001A56 CC 07 B8         [ 2] 4678 	jp syntax_error 
      001A59 AE 00 00         [ 2] 4679 0$: ldw x,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001A5C CD 10 11         [ 4] 4680 	call dpush 
      001A5F AE 00 02         [ 2] 4681 1$: ldw x,#2
      001A62 72 DE 00 1C      [ 5] 4682 	ldw x,([dstkptr],x) ; on|off
      001A66 5D               [ 2] 4683 	tnzw x 
      001A67 27 1C            [ 1] 4684 	jreq 2$ 
      001A69 72 CE 00 1C      [ 5] 4685 	ldw x,[dstkptr] ; divisor 
      001A6D 9F               [ 1] 4686 	ld a,xl
      001A6E A4 07            [ 1] 4687 	and a,#7
      001A70 4E               [ 1] 4688 	swap a 
      001A71 C7 54 01         [ 1] 4689 	ld ADC_CR1,a
      001A74 72 16 50 CA      [ 1] 4690 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001A78 72 10 54 01      [ 1] 4691 	bset ADC_CR1,#ADC_CR1_ADON 
      001A7C                       4692 	_usec_dly 7 
      001A7C AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001A7F 5A               [ 2]    2     decw x
      001A80 9D               [ 1]    3     nop 
      001A81 26 FA            [ 1]    4     jrne .-4
      001A83 20 08            [ 2] 4693 	jra 3$
      001A85 72 11 54 01      [ 1] 4694 2$: bres ADC_CR1,#ADC_CR1_ADON
      001A89 72 17 50 CA      [ 1] 4695 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001A8D AE 00 04         [ 2] 4696 3$:	ldw x,#4 ; drop 2 elements on dstack 
      001A90 72 BB 00 1C      [ 2] 4697 	addw x,dstkptr
      001A94 CF 00 1C         [ 2] 4698 	ldw dstkptr,x 
      001A97 81               [ 4] 4699 	ret
                                   4700 
                                   4701 ;-----------------------------
                                   4702 ; BASIC: ADCREAD (channel)
                                   4703 ; read adc channel {0..5}
                                   4704 ; output:
                                   4705 ;   A 		TK_INTGR 
                                   4706 ;   X 		value 
                                   4707 ;-----------------------------
      001A98                       4708 analog_read:
      001A98 CD 12 39         [ 4] 4709 	call func_args 
      001A9B A1 01            [ 1] 4710 	cp a,#1 
      001A9D 27 03            [ 1] 4711 	jreq 1$
      001A9F CC 07 B8         [ 2] 4712 	jp syntax_error
      001AA2 CD 10 1E         [ 4] 4713 1$: call dpop 
      001AA5 A3 00 05         [ 2] 4714 	cpw x,#5 
      001AA8 23 05            [ 2] 4715 	jrule 2$
      001AAA A6 0A            [ 1] 4716 	ld a,#ERR_BAD_VALUE
      001AAC CC 07 BA         [ 2] 4717 	jp tb_error 
      001AAF 9F               [ 1] 4718 2$: ld a,xl
      001AB0 C7 00 0D         [ 1] 4719 	ld acc8,a 
      001AB3 A6 05            [ 1] 4720 	ld a,#5
      001AB5 C0 00 0D         [ 1] 4721 	sub a,acc8 
      001AB8 C7 54 00         [ 1] 4722 	ld ADC_CSR,a
      001ABB 72 16 54 02      [ 1] 4723 	bset ADC_CR2,#ADC_CR2_ALIGN
      001ABF 72 10 54 01      [ 1] 4724 	bset ADC_CR1,#ADC_CR1_ADON
      001AC3 72 0F 54 00 FB   [ 2] 4725 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001AC8 CE 54 04         [ 2] 4726 	ldw x,ADC_DRH
      001ACB A6 04            [ 1] 4727 	ld a,#TK_INTGR
      001ACD 81               [ 4] 4728 	ret 
                                   4729 
                                   4730 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4731 ; BASIC: DREAD(pin)
                                   4732 ; Arduino pins 
                                   4733 ; read state of a digital pin 
                                   4734 ; pin# {0..15}
                                   4735 ; output:
                                   4736 ;    A 		TK_INTGR
                                   4737 ;    X      0|1 
                                   4738 ;-------------------------
                           000001  4739 	PINNO=1
                           000001  4740 	VSIZE=1
      001ACE                       4741 digital_read:
      001ACE                       4742 	_vars VSIZE 
      001ACE 52 01            [ 2]    1     sub sp,#VSIZE 
      001AD0 CD 12 39         [ 4] 4743 	call func_args
      001AD3 A1 01            [ 1] 4744 	cp a,#1
      001AD5 27 03            [ 1] 4745 	jreq 1$
      001AD7 CC 07 B8         [ 2] 4746 	jp syntax_error
      001ADA CD 10 1E         [ 4] 4747 1$: call dpop 
      001ADD A3 00 0F         [ 2] 4748 	cpw x,#15 
      001AE0 23 05            [ 2] 4749 	jrule 2$
      001AE2 A6 0A            [ 1] 4750 	ld a,#ERR_BAD_VALUE
      001AE4 CC 07 BA         [ 2] 4751 	jp tb_error 
      001AE7 CD 20 E5         [ 4] 4752 2$:	call select_pin 
      001AEA 6B 01            [ 1] 4753 	ld (PINNO,sp),a
      001AEC E6 01            [ 1] 4754 	ld a,(GPIO_IDR,x)
      001AEE 0D 01            [ 1] 4755 	tnz (PINNO,sp)
      001AF0 27 05            [ 1] 4756 	jreq 8$
      001AF2 44               [ 1] 4757 3$: srl a 
      001AF3 0A 01            [ 1] 4758 	dec (PINNO,sp)
      001AF5 26 FB            [ 1] 4759 	jrne 3$ 
      001AF7 A4 01            [ 1] 4760 8$: and a,#1 
      001AF9 5F               [ 1] 4761 	clrw x 
      001AFA 97               [ 1] 4762 	ld xl,a 
      001AFB A6 04            [ 1] 4763 	ld a,#TK_INTGR
      001AFD                       4764 	_drop VSIZE
      001AFD 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AFF 81               [ 4] 4765 	ret
                                   4766 
                                   4767 ;-----------------------
                                   4768 ; BASIC: DWRITE pin,0|1
                                   4769 ; Arduino pins 
                                   4770 ; write to a digital pin 
                                   4771 ; pin# {0..15}
                                   4772 ; output:
                                   4773 ;    A 		TK_INTGR
                                   4774 ;    X      0|1 
                                   4775 ;-------------------------
                           000001  4776 	PINNO=1
                           000002  4777 	PINVAL=2
                           000002  4778 	VSIZE=2
      001B00                       4779 digital_write:
      001B00                       4780 	_vars VSIZE 
      001B00 52 02            [ 2]    1     sub sp,#VSIZE 
      001B02 CD 12 15         [ 4] 4781 	call arg_list  
      001B05 A1 02            [ 1] 4782 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B07 27 03            [ 1] 4783 	jreq 1$
      001B09 CC 07 B8         [ 2] 4784 	jp syntax_error
      001B0C CD 10 1E         [ 4] 4785 1$: call dpop 
      001B0F 9F               [ 1] 4786 	ld a,xl 
      001B10 6B 02            [ 1] 4787 	ld (PINVAL,sp),a
      001B12 CD 10 1E         [ 4] 4788 	call dpop
      001B15 A3 00 0F         [ 2] 4789 	cpw x,#15 
      001B18 23 05            [ 2] 4790 	jrule 2$
      001B1A A6 0A            [ 1] 4791 	ld a,#ERR_BAD_VALUE
      001B1C CC 07 BA         [ 2] 4792 	jp tb_error 
      001B1F CD 20 E5         [ 4] 4793 2$:	call select_pin 
      001B22 6B 01            [ 1] 4794 	ld (PINNO,sp),a 
      001B24 A6 01            [ 1] 4795 	ld a,#1
      001B26 0D 01            [ 1] 4796 	tnz (PINNO,sp)
      001B28 27 05            [ 1] 4797 	jreq 4$
      001B2A 48               [ 1] 4798 3$: sll a
      001B2B 0A 01            [ 1] 4799 	dec (PINNO,sp)
      001B2D 26 FB            [ 1] 4800 	jrne 3$
      001B2F 0D 02            [ 1] 4801 4$: tnz (PINVAL,sp)
      001B31 26 05            [ 1] 4802 	jrne 5$
      001B33 43               [ 1] 4803 	cpl a 
      001B34 E4 00            [ 1] 4804 	and a,(GPIO_ODR,x)
      001B36 20 02            [ 2] 4805 	jra 8$
      001B38 EA 00            [ 1] 4806 5$: or a,(GPIO_ODR,x)
      001B3A E7 00            [ 1] 4807 8$: ld (GPIO_ODR,x),a 
      001B3C                       4808 	_drop VSIZE 
      001B3C 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B3E 81               [ 4] 4809 	ret
                                   4810 
                                   4811 
                                   4812 ;-----------------------
                                   4813 ; BASIC: BREAK 
                                   4814 ; insert a breakpoint 
                                   4815 ; in pogram. 
                                   4816 ; the program is resumed
                                   4817 ; with RUN 
                                   4818 ;-------------------------
      001B3F                       4819 break:
      001B3F 72 00 00 25 02   [ 2] 4820 	btjt flags,#FRUN,2$
      001B44 4F               [ 1] 4821 	clr a
      001B45 81               [ 4] 4822 	ret 
      001B46                       4823 2$:	 
                                   4824 ; create space on cstack to save context 
      001B46 AE 1B 6D         [ 2] 4825 	ldw x,#break_point 
      001B49 CD 01 DE         [ 4] 4826 	call puts 
      001B4C                       4827 	_drop 2 ;drop return address 
      001B4C 5B 02            [ 2]    1     addw sp,#2 
      001B4E                       4828 	_vars CTXT_SIZE ; context size 
      001B4E 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      001B50 CD 16 C2         [ 4] 4829 	call save_context 
      001B53 AE 16 E8         [ 2] 4830 	ldw x,#tib 
      001B56 CF 00 04         [ 2] 4831 	ldw basicptr,x
      001B59 7F               [ 1] 4832 	clr (x)
      001B5A 72 5F 00 03      [ 1] 4833 	clr count  
      001B5E 5F               [ 1] 4834 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B5F CF 00 00         [ 2] 4835 	ldw in.w,x
      001B62 72 11 00 25      [ 1] 4836 	bres flags,#FRUN 
      001B66 72 18 00 25      [ 1] 4837 	bset flags,#FBREAK
      001B6A CC 08 3E         [ 2] 4838 	jp interp_loop 
      001B6D 0A 62 72 65 61 6B 20  4839 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4840 
                                   4841 ;-----------------------
                                   4842 ; BASIC: NEW
                                   4843 ; from command line only 
                                   4844 ; free program memory
                                   4845 ; and clear variables 
                                   4846 ;------------------------
      001B8B                       4847 new: 
      001B8B 72 01 00 25 02   [ 2] 4848 	btjf flags,#FRUN,0$ 
      001B90 4F               [ 1] 4849 	clr a 
      001B91 81               [ 4] 4850 	ret 
      001B92                       4851 0$:	
      001B92 CD 06 82         [ 4] 4852 	call clear_basic 
      001B95 81               [ 4] 4853 	ret 
                                   4854 	 
                                   4855 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4856 ;  file system routines
                                   4857 ;  MCU flash memory from
                                   4858 ;  0x10000-0x27fff is 
                                   4859 ;  used to store BASIC 
                                   4860 ;  program files. 
                                   4861 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4862 
                                   4863 ;--------------------
                                   4864 ; input:
                                   4865 ;   X     increment 
                                   4866 ; output:
                                   4867 ;   farptr  incremented 
                                   4868 ;---------------------
      001B96                       4869 incr_farptr:
      001B96 72 BB 00 17      [ 2] 4870 	addw x,farptr+1 
      001B9A 24 04            [ 1] 4871 	jrnc 1$
      001B9C 72 5C 00 16      [ 1] 4872 	inc farptr 
      001BA0 CF 00 17         [ 2] 4873 1$:	ldw farptr+1,x  
      001BA3 81               [ 4] 4874 	ret 
                                   4875 
                                   4876 ;------------------------------
                                   4877 ; extended flash memory used as FLASH_DRIVE 
                                   4878 ; seek end of used flash drive   
                                   4879 ; starting at 0x10000 address.
                                   4880 ; 4 consecutives 0 bytes signal free space. 
                                   4881 ; input:
                                   4882 ;	none
                                   4883 ; output:
                                   4884 ;   ffree     free_addr| 0 if memory full.
                                   4885 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001BA4                       4886 seek_fdrive:
                                   4887 ; start scan at 0x10000 address 
      001BA4 A6 01            [ 1] 4888 	ld a,#1
      001BA6 C7 00 16         [ 1] 4889 	ld farptr,a 
      001BA9 5F               [ 1] 4890 	clrw x 
      001BAA CF 00 17         [ 2] 4891 	ldw farptr+1,x 
      001BAD                       4892 1$:
      001BAD AE 00 03         [ 2] 4893 	ldw x,#3  
      001BB0 92 AF 00 16      [ 5] 4894 2$:	ldf a,([farptr],x) 
      001BB4 26 05            [ 1] 4895 	jrne 3$
      001BB6 5A               [ 2] 4896 	decw x
      001BB7 2A F7            [ 1] 4897 	jrpl 2$
      001BB9 20 19            [ 2] 4898 	jra 4$ 
      001BBB 5C               [ 2] 4899 3$:	incw x 
      001BBC CD 1B 96         [ 4] 4900 	call incr_farptr
      001BBF AE 02 7F         [ 2] 4901 	ldw x,#0x27f 
      001BC2 C3 00 16         [ 2] 4902 	cpw x,farptr
      001BC5 2A E6            [ 1] 4903 	jrpl 1$
                                   4904 ; drive full 
      001BC7 72 5F 00 19      [ 1] 4905 	clr ffree 
      001BCB 72 5F 00 1A      [ 1] 4906 	clr ffree+1 
      001BCF 72 5F 00 1B      [ 1] 4907 	clr ffree+2 
      001BD3 81               [ 4] 4908 	ret
      001BD4                       4909 4$: ; copy farptr to ffree	 
      001BD4 CE 00 16         [ 2] 4910 	ldw x,farptr 
      001BD7 C6 00 18         [ 1] 4911 	ld a,farptr+2 
      001BDA CF 00 19         [ 2] 4912 	ldw ffree,x 
      001BDD C7 00 1B         [ 1] 4913 	ld ffree+2,a  
      001BE0 81               [ 4] 4914 	ret 
                                   4915 
                                   4916 ;-----------------------
                                   4917 ; compare file name 
                                   4918 ; with name pointed by Y  
                                   4919 ; input:
                                   4920 ;   farptr   file name 
                                   4921 ;   Y        target name 
                                   4922 ; output:
                                   4923 ;   farptr 	 at file_name
                                   4924 ;   X 		 farptr[x] point at size field  
                                   4925 ;   Carry    0|1 no match|match  
                                   4926 ;----------------------
      001BE1                       4927 cmp_name:
      001BE1 5F               [ 1] 4928 	clrw x
      001BE2 92 AF 00 16      [ 5] 4929 1$:	ldf a,([farptr],x)
      001BE6 90 F1            [ 1] 4930 	cp a,(y)
      001BE8 26 08            [ 1] 4931 	jrne 4$
      001BEA 4D               [ 1] 4932 	tnz a 
      001BEB 27 12            [ 1] 4933 	jreq 9$ 
      001BED 5C               [ 2] 4934     incw x 
      001BEE 90 5C            [ 2] 4935 	incw y 
      001BF0 20 F0            [ 2] 4936 	jra 1$
      001BF2                       4937 4$: ;no match 
      001BF2 4D               [ 1] 4938 	tnz a 
      001BF3 27 07            [ 1] 4939 	jreq 5$
      001BF5 5C               [ 2] 4940 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BF6 92 AF 00 16      [ 5] 4941 	ldf a,([farptr],x)
      001BFA 20 F6            [ 2] 4942 	jra 4$  
      001BFC 5C               [ 2] 4943 5$:	incw x ; farptr[x] point at 'size' field 
      001BFD 98               [ 1] 4944 	rcf 
      001BFE 81               [ 4] 4945 	ret
      001BFF                       4946 9$: ; match  
      001BFF 5C               [ 2] 4947 	incw x  ; farptr[x] at 'size' field 
      001C00 99               [ 1] 4948 	scf 
      001C01 81               [ 4] 4949 	ret 
                                   4950 
                                   4951 ;-----------------------
                                   4952 ; search file in 
                                   4953 ; flash memory 
                                   4954 ; input:
                                   4955 ;   Y       file name  
                                   4956 ; output:
                                   4957 ;   farptr  addr at name|0
                                   4958 ;-----------------------
                           000001  4959 	FSIZE=1
                           000003  4960 	YSAVE=3
                           000004  4961 	VSIZE=4 
      001C02                       4962 search_file: 
      001C02                       4963 	_vars VSIZE
      001C02 52 04            [ 2]    1     sub sp,#VSIZE 
      001C04 17 03            [ 2] 4964 	ldw (YSAVE,sp),y  
      001C06 5F               [ 1] 4965 	clrw x 
      001C07 CF 00 17         [ 2] 4966 	ldw farptr+1,x 
      001C0A 35 01 00 16      [ 1] 4967 	mov farptr,#1
      001C0E                       4968 1$:	
                                   4969 ; check if farptr is after any file 
                                   4970 ; if  0 then so.
      001C0E 92 BC 00 16      [ 5] 4971 	ldf a,[farptr]
      001C12 27 25            [ 1] 4972 	jreq 6$
      001C14 5F               [ 1] 4973 2$: clrw x 	
      001C15 16 03            [ 2] 4974 	ldw y,(YSAVE,sp) 
      001C17 CD 1B E1         [ 4] 4975 	call cmp_name
      001C1A 25 2D            [ 1] 4976 	jrc 9$
      001C1C 92 AF 00 16      [ 5] 4977 	ldf a,([farptr],x)
      001C20 6B 01            [ 1] 4978 	ld (FSIZE,sp),a 
      001C22 5C               [ 2] 4979 	incw x 
      001C23 92 AF 00 16      [ 5] 4980 	ldf a,([farptr],x)
      001C27 6B 02            [ 1] 4981 	ld (FSIZE+1,sp),a 
      001C29 5C               [ 2] 4982 	incw x 
      001C2A 72 FB 01         [ 2] 4983 	addw x,(FSIZE,sp) ; count to skip 
      001C2D 5C               [ 2] 4984 	incw x ; skip over EOF marker 
      001C2E CD 1B 96         [ 4] 4985 	call incr_farptr ; now at next file 'name_field'
      001C31 AE 02 80         [ 2] 4986 	ldw x,#0x280
      001C34 C3 00 16         [ 2] 4987 	cpw x,farptr 
      001C37 2A D5            [ 1] 4988 	jrpl 1$
      001C39                       4989 6$: ; file not found 
      001C39 72 5F 00 16      [ 1] 4990 	clr farptr
      001C3D 72 5F 00 17      [ 1] 4991 	clr farptr+1 
      001C41 72 5F 00 18      [ 1] 4992 	clr farptr+2 
      001C45                       4993 	_drop VSIZE 
      001C45 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C47 98               [ 1] 4994 	rcf
      001C48 81               [ 4] 4995 	ret
      001C49                       4996 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001C49                       4997 	_drop VSIZE 
      001C49 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C4B 99               [ 1] 4998 	scf 	
      001C4C 81               [ 4] 4999 	ret
                                   5000 
                                   5001 ;--------------------------------
                                   5002 ; BASIC: SAVE "name" 
                                   5003 ; save text program in 
                                   5004 ; flash memory used as 
                                   5005 ;--------------------------------
                           000001  5006 	BSIZE=1
                           000003  5007 	NAMEPTR=3
                           000004  5008 	VSIZE=4
      001C4D                       5009 save:
      001C4D 72 01 00 25 05   [ 2] 5010 	btjf flags,#FRUN,0$ 
      001C52 A6 07            [ 1] 5011 	ld a,#ERR_CMD_ONLY 
      001C54 CC 07 BA         [ 2] 5012 	jp tb_error
      001C57                       5013 0$:	 
      001C57 CE 00 20         [ 2] 5014 	ldw x,txtend 
      001C5A 72 B0 00 1E      [ 2] 5015 	subw x,txtbgn
      001C5E 26 01            [ 1] 5016 	jrne 1$
                                   5017 ; nothing to save 
      001C60 81               [ 4] 5018 	ret 
      001C61                       5019 1$:	
      001C61                       5020 	_vars VSIZE 
      001C61 52 04            [ 2]    1     sub sp,#VSIZE 
      001C63 1F 01            [ 2] 5021 	ldw (BSIZE,sp),x 
      001C65 CD 08 6C         [ 4] 5022 	call next_token	
      001C68 A1 0A            [ 1] 5023 	cp a,#TK_QSTR
      001C6A 27 03            [ 1] 5024 	jreq 2$
      001C6C CC 07 B8         [ 2] 5025 	jp syntax_error
      001C6F                       5026 2$: 
      001C6F 90 CE 00 04      [ 2] 5027 	ldw y,basicptr 
      001C73 72 B9 00 00      [ 2] 5028 	addw y,in.w
      001C77 17 03            [ 2] 5029 	ldw (NAMEPTR,sp),y  
      001C79 55 00 03 00 01   [ 1] 5030 	mov in,count 
                                   5031 ; check if enough free space 
      001C7E 93               [ 1] 5032 	ldw x,y 
      001C7F CD 02 A0         [ 4] 5033 	call strlen 
      001C82 1C 00 03         [ 2] 5034 	addw x,#3 
      001C85 72 FB 01         [ 2] 5035 	addw x,(BSIZE,sp)
      001C88 72 5D 00 19      [ 1] 5036 	tnz ffree 
      001C8C 26 0B            [ 1] 5037 	jrne 21$
      001C8E 72 B0 00 1A      [ 2] 5038 	subw x,ffree+1 
      001C92 23 05            [ 2] 5039 	jrule 21$
      001C94 A6 01            [ 1] 5040 	ld a,#ERR_MEM_FULL 
      001C96 CC 07 BA         [ 2] 5041 	jp tb_error
      001C99                       5042 21$: 
                                   5043 ; check for existing file of that name 
      001C99 16 03            [ 2] 5044 	ldw y,(NAMEPTR,sp)	
      001C9B CD 1C 02         [ 4] 5045 	call search_file 
      001C9E 24 05            [ 1] 5046 	jrnc 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001CA0 A6 08            [ 1] 5047 	ld a,#ERR_DUPLICATE 
      001CA2 CC 07 BA         [ 2] 5048 	jp tb_error 
      001CA5                       5049 3$:	;** write file name to flash **
      001CA5 CE 00 19         [ 2] 5050 	ldw x,ffree 
      001CA8 C6 00 1B         [ 1] 5051 	ld a,ffree+2 
      001CAB CF 00 16         [ 2] 5052 	ldw farptr,x 
      001CAE C7 00 18         [ 1] 5053 	ld farptr+2,a 
      001CB1 1E 03            [ 2] 5054 	ldw x,(NAMEPTR,sp)  
      001CB3 CD 02 A0         [ 4] 5055 	call strlen 
      001CB6 5C               [ 2] 5056 	incw  x
      001CB7 1F 01            [ 2] 5057 	ldw (BSIZE,sp),x  
      001CB9 5F               [ 1] 5058 	clrw x   
      001CBA 16 03            [ 2] 5059 	ldw y,(NAMEPTR,sp)
      001CBC CD 01 6D         [ 4] 5060 	call write_block  
                                   5061 ;** write file length after name **
      001CBF CE 00 20         [ 2] 5062 	ldw x,txtend 
      001CC2 72 B0 00 1E      [ 2] 5063 	subw x,txtbgn
      001CC6 1F 01            [ 2] 5064 	ldw (BSIZE,sp),x 
      001CC8 5F               [ 1] 5065 	clrw x 
      001CC9 7B 01            [ 1] 5066 	ld a,(1,sp)
      001CCB CD 00 F8         [ 4] 5067 	call write_byte 
      001CCE 5C               [ 2] 5068 	incw x 
      001CCF 7B 02            [ 1] 5069 	ld a,(2,sp)
      001CD1 CD 00 F8         [ 4] 5070 	call write_byte
      001CD4 5C               [ 2] 5071 	incw x  
      001CD5 CD 1B 96         [ 4] 5072 	call incr_farptr ; move farptr after SIZE field 
                                   5073 ;** write BASIC text **
                                   5074 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001CD8 1E 01            [ 2] 5075 	ldw x,(BSIZE,sp)
      001CDA 89               [ 2] 5076 	pushw x ; write_block argument 
      001CDB 5F               [ 1] 5077 	clrw x 
      001CDC 90 CE 00 1E      [ 2] 5078 	ldw y,txtbgn  ; BASIC text to save 
      001CE0 CD 01 6D         [ 4] 5079 	call write_block 
      001CE3                       5080 	_drop 2 ;  drop write_block argument  
      001CE3 5B 02            [ 2]    1     addw sp,#2 
                                   5081 ; write en end of file marker 
      001CE5 AE 00 01         [ 2] 5082 	ldw x,#1
      001CE8 A6 FF            [ 1] 5083 	ld a,#EOF  
      001CEA CD 00 F8         [ 4] 5084 	call write_byte 
      001CED CD 1B 96         [ 4] 5085 	call incr_farptr
                                   5086 ; save farptr in ffree
      001CF0 CE 00 16         [ 2] 5087 	ldw x,farptr 
      001CF3 C6 00 18         [ 1] 5088 	ld a,farptr+2 
      001CF6 CF 00 19         [ 2] 5089 	ldw ffree,x 
      001CF9 C7 00 1B         [ 1] 5090 	ld ffree+2,a
                                   5091 ;write 4 zero bytes as an end of all files marker 
      001CFC 5F               [ 1] 5092     clrw x 
      001CFD 4B 04            [ 1] 5093 	push #4 
      001CFF                       5094 4$:
      001CFF 4F               [ 1] 5095 	clr a 
      001D00 CD 00 F8         [ 4] 5096 	call write_byte 
      001D03 5C               [ 2] 5097 	incw x 
      001D04 0A 01            [ 1] 5098 	dec (1,sp)
      001D06 26 F7            [ 1] 5099 	jrne 4$
      001D08 84               [ 1] 5100 5$: pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5101 ; display saved size  
      001D09 1E 01            [ 2] 5102 	ldw x,(BSIZE,sp) 
      001D0B CD 0A 16         [ 4] 5103 	call print_int 
      001D0E                       5104 	_drop VSIZE 
      001D0E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D10 81               [ 4] 5105 	ret 
                                   5106 
                                   5107 ;----------------------
                                   5108 ; load file in RAM memory
                                   5109 ; input:
                                   5110 ;    farptr point at file size 
                                   5111 ; output:
                                   5112 ;   y point after BASIC program in RAM.
                                   5113 ;------------------------
      001D11                       5114 load_file:
      001D11 CD 1B 96         [ 4] 5115 	call incr_farptr  
      001D14 CD 06 82         [ 4] 5116 	call clear_basic  
      001D17 5F               [ 1] 5117 	clrw x
      001D18 92 AF 00 16      [ 5] 5118 	ldf a,([farptr],x)
      001D1C 90 95            [ 1] 5119 	ld yh,a 
      001D1E 5C               [ 2] 5120 	incw x  
      001D1F 92 AF 00 16      [ 5] 5121 	ldf a,([farptr],x)
      001D23 5C               [ 2] 5122 	incw x 
      001D24 90 97            [ 1] 5123 	ld yl,a 
      001D26 72 B9 00 1E      [ 2] 5124 	addw y,txtbgn
      001D2A 90 CF 00 20      [ 2] 5125 	ldw txtend,y
      001D2E 90 CE 00 1E      [ 2] 5126 	ldw y,txtbgn
      001D32                       5127 3$:	; load BASIC text 	
      001D32 92 AF 00 16      [ 5] 5128 	ldf a,([farptr],x)
      001D36 90 F7            [ 1] 5129 	ld (y),a 
      001D38 5C               [ 2] 5130 	incw x 
      001D39 90 5C            [ 2] 5131 	incw y 
      001D3B 90 C3 00 20      [ 2] 5132 	cpw y,txtend 
      001D3F 2B F1            [ 1] 5133 	jrmi 3$
      001D41 81               [ 4] 5134 	ret 
                                   5135 
                                   5136 ;------------------------
                                   5137 ; BASIC: LOAD "file" 
                                   5138 ; load file to RAM 
                                   5139 ; for execution 
                                   5140 ;------------------------
      001D42                       5141 load:
      001D42 72 01 00 25 07   [ 2] 5142 	btjf flags,#FRUN,0$ 
      001D47 27 05            [ 1] 5143 	jreq 0$ 
      001D49 A6 07            [ 1] 5144 	ld a,#ERR_CMD_ONLY 
      001D4B CC 07 BA         [ 2] 5145 	jp tb_error 
      001D4E                       5146 0$:	
      001D4E CD 08 6C         [ 4] 5147 	call next_token 
      001D51 A1 0A            [ 1] 5148 	cp a,#TK_QSTR
      001D53 27 03            [ 1] 5149 	jreq 1$
      001D55 CC 07 B8         [ 2] 5150 	jp syntax_error 
      001D58                       5151 1$:	
      001D58 90 CE 00 04      [ 2] 5152 	ldw y,basicptr
      001D5C 72 B9 00 00      [ 2] 5153 	addw y,in.w 
      001D60 55 00 03 00 01   [ 1] 5154 	mov in,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D65 CD 1C 02         [ 4] 5155 	call search_file 
      001D68 25 05            [ 1] 5156 	jrc 2$ 
      001D6A A6 09            [ 1] 5157 	ld a,#ERR_NOT_FILE
      001D6C CC 07 BA         [ 2] 5158 	jp tb_error  
      001D6F                       5159 2$:
      001D6F CD 1D 11         [ 4] 5160 	call load_file
                                   5161 ; print loaded size 	 
      001D72 CE 00 20         [ 2] 5162 	ldw x,txtend 
      001D75 72 B0 00 1E      [ 2] 5163 	subw x,txtbgn
      001D79 CD 0A 16         [ 4] 5164 	call print_int 
      001D7C 81               [ 4] 5165 	ret 
                                   5166 
                                   5167 ;-----------------------------------
                                   5168 ; BASIC: FORGET ["file_name"] 
                                   5169 ; erase file_name and all others 
                                   5170 ; after it. 
                                   5171 ; without argument erase all files 
                                   5172 ;-----------------------------------
      001D7D                       5173 forget:
      001D7D CD 08 6C         [ 4] 5174 	call next_token 
      001D80 A1 00            [ 1] 5175 	cp a,#TK_NONE 
      001D82 27 26            [ 1] 5176 	jreq 3$ 
      001D84 A1 0A            [ 1] 5177 	cp a,#TK_QSTR
      001D86 27 03            [ 1] 5178 	jreq 1$
      001D88 CC 07 B8         [ 2] 5179 	jp syntax_error
      001D8B 90 CE 00 04      [ 2] 5180 1$: ldw y,basicptr
      001D8F 72 B9 00 00      [ 2] 5181 	addw y,in.w
      001D93 55 00 03 00 01   [ 1] 5182 	mov in,count 
      001D98 CD 1C 02         [ 4] 5183 	call search_file
      001D9B 25 05            [ 1] 5184 	jrc 2$
      001D9D A6 09            [ 1] 5185 	ld a,#ERR_NOT_FILE 
      001D9F CC 07 BA         [ 2] 5186 	jp tb_error 
      001DA2                       5187 2$: 
      001DA2 CE 00 16         [ 2] 5188 	ldw x,farptr
      001DA5 C6 00 18         [ 1] 5189 	ld a,farptr+2
      001DA8 20 0A            [ 2] 5190 	jra 4$ 
      001DAA                       5191 3$: ; forget all files 
      001DAA AE 01 00         [ 2] 5192 	ldw x,#0x100
      001DAD 4F               [ 1] 5193 	clr a 
      001DAE CF 00 16         [ 2] 5194 	ldw farptr,x 
      001DB1 C7 00 18         [ 1] 5195 	ld farptr+2,a 
      001DB4                       5196 4$:
      001DB4 CF 00 19         [ 2] 5197 	ldw ffree,x 
      001DB7 C7 00 1B         [ 1] 5198 	ld ffree+2,a 
      001DBA 4B 04            [ 1] 5199 	push #4
      001DBC 5F               [ 1] 5200 	clrw x 
      001DBD                       5201 5$: 
      001DBD 4F               [ 1] 5202 	clr a  
      001DBE CD 00 F8         [ 4] 5203 	call write_byte 
      001DC1 5C               [ 2] 5204 	incw x 
      001DC2 0A 01            [ 1] 5205 	dec (1,sp)
      001DC4 26 F7            [ 1] 5206 	jrne 5$	
      001DC6 84               [ 1] 5207 6$: pop a 
      001DC7 81               [ 4] 5208 	ret 
                                   5209 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   5210 ;----------------------
                                   5211 ; BASIC: DIR 
                                   5212 ; list saved files 
                                   5213 ;----------------------
                           000001  5214 	COUNT=1 ; files counter 
                           000002  5215 	VSIZE=2 
      001DC8                       5216 directory:
      001DC8                       5217 	_vars VSIZE 
      001DC8 52 02            [ 2]    1     sub sp,#VSIZE 
      001DCA 5F               [ 1] 5218 	clrw x 
      001DCB 1F 01            [ 2] 5219 	ldw (COUNT,sp),x 
      001DCD CF 00 17         [ 2] 5220 	ldw farptr+1,x 
      001DD0 35 01 00 16      [ 1] 5221 	mov farptr,#1 
      001DD4                       5222 dir_loop:
      001DD4 5F               [ 1] 5223 	clrw x 
      001DD5 92 AF 00 16      [ 5] 5224 	ldf a,([farptr],x)
      001DD9 27 39            [ 1] 5225 	jreq 8$ 
      001DDB                       5226 1$: ;name loop 	
      001DDB 92 AF 00 16      [ 5] 5227 	ldf a,([farptr],x)
      001DDF 27 06            [ 1] 5228 	jreq 2$ 
      001DE1 CD 01 CB         [ 4] 5229 	call putc 
      001DE4 5C               [ 2] 5230 	incw x 
      001DE5 20 F4            [ 2] 5231 	jra 1$
      001DE7 5C               [ 2] 5232 2$: incw x ; skip ending 0. 
      001DE8 A6 20            [ 1] 5233 	ld a,#SPACE 
      001DEA CD 01 CB         [ 4] 5234 	call putc 
                                   5235 ; get file size 	
      001DED 92 AF 00 16      [ 5] 5236 	ldf a,([farptr],x)
      001DF1 90 95            [ 1] 5237 	ld yh,a 
      001DF3 5C               [ 2] 5238 	incw x 
      001DF4 92 AF 00 16      [ 5] 5239 	ldf a,([farptr],x)
      001DF8 5C               [ 2] 5240 	incw x 
      001DF9 90 97            [ 1] 5241 	ld yl,a 
      001DFB 90 89            [ 2] 5242 	pushw y 
      001DFD 72 FB 01         [ 2] 5243 	addw x,(1,sp)
      001E00 5C               [ 2] 5244 	incw x ; skip EOF marker 
                                   5245 ; skip to next file 
      001E01 CD 1B 96         [ 4] 5246 	call incr_farptr 
                                   5247 ; print file size 
      001E04 85               [ 2] 5248 	popw x ; file size 
      001E05 CD 0A 16         [ 4] 5249 	call print_int 
      001E08 A6 0D            [ 1] 5250 	ld a,#CR 
      001E0A CD 01 CB         [ 4] 5251 	call putc
      001E0D 1E 01            [ 2] 5252 	ldw x,(COUNT,sp)
      001E0F 5C               [ 2] 5253 	incw x
      001E10 1F 01            [ 2] 5254 	ldw (COUNT,sp),x  
      001E12 20 C0            [ 2] 5255 	jra dir_loop 
      001E14                       5256 8$: ; print number of files 
      001E14 1E 01            [ 2] 5257 	ldw x,(COUNT,sp)
      001E16 CD 0A 16         [ 4] 5258 	call print_int 
      001E19 AE 1E 49         [ 2] 5259 	ldw x,#file_count 
      001E1C CD 01 DE         [ 4] 5260 	call puts  
                                   5261 ; print drive free space 	
      001E1F A6 FF            [ 1] 5262 	ld a,#0xff 
      001E21 C0 00 1B         [ 1] 5263 	sub a,ffree+2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E24 C7 00 0D         [ 1] 5264 	ld acc8,a 
      001E27 A6 7F            [ 1] 5265 	ld a,#0x7f 
      001E29 C2 00 1A         [ 1] 5266 	sbc a,ffree+1 
      001E2C C7 00 0C         [ 1] 5267 	ld acc16,a 
      001E2F A6 02            [ 1] 5268 	ld a,#2 
      001E31 C2 00 19         [ 1] 5269 	sbc a,ffree 
      001E34 C7 00 0B         [ 1] 5270 	ld acc24,a 
      001E37 5F               [ 1] 5271 	clrw x  
      001E38 A6 06            [ 1] 5272 	ld a,#6 
      001E3A 97               [ 1] 5273 	ld xl,a 
      001E3B A6 0A            [ 1] 5274 	ld a,#10 
      001E3D CD 09 CE         [ 4] 5275 	call prti24 
      001E40 AE 1E 51         [ 2] 5276 	ldw x,#drive_free
      001E43 CD 01 DE         [ 4] 5277 	call puts 
      001E46                       5278 	_drop VSIZE 
      001E46 5B 02            [ 2]    1     addw sp,#VSIZE 
      001E48 81               [ 4] 5279 	ret
      001E49 20 66 69 6C 65 73 0A  5280 file_count: .asciz " files\n"
             00
      001E51 20 62 79 74 65 73 20  5281 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5282 
                                   5283 ;---------------------
                                   5284 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5285 ; write 1 or more byte to FLASH or EEPROM
                                   5286 ; starting at address  
                                   5287 ; input:
                                   5288 ;   expr1  	is address 
                                   5289 ;   expr2,...,exprn   are bytes to write
                                   5290 ; output:
                                   5291 ;   none 
                                   5292 ;---------------------
                           000001  5293 	ADDR=1
                           000002  5294 	VSIZ=2 
      001E5E                       5295 write:
      001E5E                       5296 	_vars VSIZE 
      001E5E 52 02            [ 2]    1     sub sp,#VSIZE 
      001E60 72 5F 00 16      [ 1] 5297 	clr farptr ; expect 16 bits address 
      001E64 CD 13 15         [ 4] 5298 	call expression
      001E67 A1 04            [ 1] 5299 	cp a,#TK_INTGR 
      001E69 27 03            [ 1] 5300 	jreq 0$
      001E6B CC 07 B8         [ 2] 5301 	jp syntax_error
      001E6E 1F 01            [ 2] 5302 0$: ldw (ADDR,sp),x 
      001E70 CD 08 6C         [ 4] 5303 	call next_token 
      001E73 A1 0D            [ 1] 5304 	cp a,#TK_COMMA 
      001E75 27 02            [ 1] 5305 	jreq 1$ 
      001E77 20 19            [ 2] 5306 	jra 9$ 
      001E79 CD 13 15         [ 4] 5307 1$:	call expression
      001E7C A1 04            [ 1] 5308 	cp a,#TK_INTGR
      001E7E 27 03            [ 1] 5309 	jreq 2$
      001E80 CC 07 B8         [ 2] 5310 	jp syntax_error
      001E83 9F               [ 1] 5311 2$:	ld a,xl 
      001E84 1E 01            [ 2] 5312 	ldw x,(ADDR,sp) 
      001E86 CF 00 17         [ 2] 5313 	ldw farptr+1,x 
      001E89 5F               [ 1] 5314 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E8A CD 00 F8         [ 4] 5315 	call write_byte
      001E8D 1E 01            [ 2] 5316 	ldw x,(ADDR,sp)
      001E8F 5C               [ 2] 5317 	incw x 
      001E90 20 DC            [ 2] 5318 	jra 0$ 
      001E92                       5319 9$:
      001E92                       5320 	_drop VSIZE
      001E92 5B 02            [ 2]    1     addw sp,#VSIZE 
      001E94 81               [ 4] 5321 	ret 
                                   5322 
                                   5323 
                                   5324 ;---------------------
                                   5325 ;BASIC: CHAR(expr)
                                   5326 ; évaluate expression 
                                   5327 ; and take the 7 least 
                                   5328 ; bits as ASCII character
                                   5329 ;---------------------
      001E95                       5330 char:
      001E95 CD 12 39         [ 4] 5331 	call func_args 
      001E98 A1 01            [ 1] 5332 	cp a,#1
      001E9A 27 03            [ 1] 5333 	jreq 1$
      001E9C CC 07 B8         [ 2] 5334 	jp syntax_error
      001E9F CD 10 1E         [ 4] 5335 1$:	call dpop 
      001EA2 9F               [ 1] 5336 	ld a,xl 
      001EA3 A4 7F            [ 1] 5337 	and a,#0x7f 
      001EA5 97               [ 1] 5338 	ld xl,a
      001EA6 A6 03            [ 1] 5339 	ld a,#TK_CHAR
      001EA8 81               [ 4] 5340 	ret
                                   5341 
                                   5342 ;---------------------
                                   5343 ; BASIC: ASC(string|char)
                                   5344 ; extract first character 
                                   5345 ; of string argument 
                                   5346 ; return it as TK_INTGR 
                                   5347 ;---------------------
      001EA9                       5348 ascii:
      001EA9 A6 0B            [ 1] 5349 	ld a,#TK_LPAREN
      001EAB CD 12 08         [ 4] 5350 	call expect 
      001EAE CD 08 6C         [ 4] 5351 	call next_token 
      001EB1 A1 0A            [ 1] 5352 	cp a,#TK_QSTR 
      001EB3 27 07            [ 1] 5353 	jreq 1$
      001EB5 A1 03            [ 1] 5354 	cp a,#TK_CHAR 
      001EB7 27 06            [ 1] 5355 	jreq 2$ 
      001EB9 CC 07 B8         [ 2] 5356 	jp syntax_error
      001EBC                       5357 1$: 
      001EBC F6               [ 1] 5358 	ld a,(x) 
      001EBD 5F               [ 1] 5359 	clrw x
      001EBE 97               [ 1] 5360 	ld xl,a 
      001EBF                       5361 2$: 
      001EBF 89               [ 2] 5362 	pushw x 
      001EC0 A6 0C            [ 1] 5363 	ld a,#TK_RPAREN 
      001EC2 CD 12 08         [ 4] 5364 	call expect
      001EC5 85               [ 2] 5365 	popw x 
      001EC6 A6 04            [ 1] 5366 	ld a,#TK_INTGR 
      001EC8 81               [ 4] 5367 	ret 
                                   5368 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5369 ;---------------------
                                   5370 ;BASIC: KEY
                                   5371 ; wait for a character 
                                   5372 ; received from STDIN 
                                   5373 ; input:
                                   5374 ;	none 
                                   5375 ; output:
                                   5376 ;	X 		ASCII character 
                                   5377 ;---------------------
      001EC9                       5378 key:
      001EC9 CD 01 D4         [ 4] 5379 	call getc 
      001ECC 5F               [ 1] 5380 	clrw x 
      001ECD 97               [ 1] 5381 	ld xl,a 
      001ECE A6 04            [ 1] 5382 	ld a,#TK_INTGR
      001ED0 81               [ 4] 5383 	ret
                                   5384 
                                   5385 ;----------------------
                                   5386 ; BASIC: QKEY
                                   5387 ; Return true if there 
                                   5388 ; is a character in 
                                   5389 ; waiting in STDIN 
                                   5390 ; input:
                                   5391 ;  none 
                                   5392 ; output:
                                   5393 ;   X 		0|-1 
                                   5394 ;-----------------------
      001ED1                       5395 qkey: 
      001ED1 5F               [ 1] 5396 	clrw x 
      001ED2 72 5D 00 27      [ 1] 5397 	tnz rx_char
      001ED6 27 01            [ 1] 5398 	jreq 9$ 
      001ED8 53               [ 2] 5399 	cplw x 
      001ED9 A6 04            [ 1] 5400 9$: ld a,#TK_INTGR
      001EDB 81               [ 4] 5401 	ret 
                                   5402 
                                   5403 ;---------------------
                                   5404 ; BASIC: GPIO(expr,reg)
                                   5405 ; return gpio address 
                                   5406 ; expr {0..8}
                                   5407 ; input:
                                   5408 ;   none 
                                   5409 ; output:
                                   5410 ;   X 		gpio register address
                                   5411 ;----------------------------
      001EDC                       5412 gpio:
      001EDC CD 12 39         [ 4] 5413 	call func_args 
      001EDF A1 02            [ 1] 5414 	cp a,#2
      001EE1 27 03            [ 1] 5415 	jreq 1$
      001EE3 CC 07 B8         [ 2] 5416 	jp syntax_error  
      001EE6                       5417 1$:	
      001EE6 AE 00 02         [ 2] 5418 	ldw x,#2
      001EE9 72 DE 00 1C      [ 5] 5419 	ldw x,([dstkptr],x) ; port 
      001EED 2B 1B            [ 1] 5420 	jrmi bad_port
      001EEF A3 00 09         [ 2] 5421 	cpw x,#9
      001EF2 2A 16            [ 1] 5422 	jrpl bad_port
      001EF4 A6 05            [ 1] 5423 	ld a,#5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001EF6 42               [ 4] 5424 	mul x,a
      001EF7 1C 50 00         [ 2] 5425 	addw x,#GPIO_BASE 
      001EFA 89               [ 2] 5426 	pushw x 
      001EFB CD 10 1E         [ 4] 5427 	call dpop 
      001EFE 72 FB 01         [ 2] 5428 	addw x,(1,sp)
      001F01 1F 01            [ 2] 5429 	ldw (1,sp),x  
      001F03 CD 10 45         [ 4] 5430 	call ddrop  
      001F06 85               [ 2] 5431 	popw x 
      001F07 A6 04            [ 1] 5432 	ld a,#TK_INTGR
      001F09 81               [ 4] 5433 	ret
      001F0A                       5434 bad_port:
      001F0A A6 0A            [ 1] 5435 	ld a,#ERR_BAD_VALUE
      001F0C CC 07 BA         [ 2] 5436 	jp tb_error
                                   5437 
                                   5438 
                                   5439 ;-------------------------
                                   5440 ; BASIC: UFLASH 
                                   5441 ; return user flash address
                                   5442 ; input:
                                   5443 ;  none 
                                   5444 ; output:
                                   5445 ;	A		TK_INTGR
                                   5446 ;   X 		user address 
                                   5447 ;---------------------------
      001F0F                       5448 uflash:
      001F0F AE 27 80         [ 2] 5449 	ldw x,#user_space 
      001F12 A6 04            [ 1] 5450 	ld a,#TK_INTGR 
      001F14 81               [ 4] 5451 	ret 
                                   5452 
                                   5453 
                                   5454 ;---------------------
                                   5455 ; BASIC: USR(addr[,arg])
                                   5456 ; execute a function written 
                                   5457 ; in binary code.
                                   5458 ; binary fonction should 
                                   5459 ; return token attribute in A 
                                   5460 ; and value in X. 
                                   5461 ; input:
                                   5462 ;   addr	routine address 
                                   5463 ;   arg 	is an optional argument 
                                   5464 ; output:
                                   5465 ;   A 		token attribute 
                                   5466 ;   X       returned value 
                                   5467 ;---------------------
      001F15                       5468 usr:
      001F15 90 89            [ 2] 5469 	pushw y 	
      001F17 CD 12 39         [ 4] 5470 	call func_args 
      001F1A A1 01            [ 1] 5471 	cp a,#1 
      001F1C 2A 03            [ 1] 5472 	jrpl 2$ 
      001F1E CC 07 B8         [ 2] 5473 	jp syntax_error 
      001F21                       5474 2$: 
      001F21 CD 10 1E         [ 4] 5475 	call dpop 
      001F24 A1 02            [ 1] 5476 	cp a,#2 
      001F26 2B 05            [ 1] 5477 	jrmi 4$
      001F28 90 93            [ 1] 5478 	ldw y,x ; y=arg 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F2A CD 10 1E         [ 4] 5479 	call dpop ;x=addr 
      001F2D 51               [ 1] 5480 4$:	exgw y,x ; y=addr,x=arg 
      001F2E 90 FD            [ 4] 5481 	call (y)
      001F30 90 85            [ 2] 5482 	popw y 
      001F32 81               [ 4] 5483 	ret 
                                   5484 
                                   5485 ;------------------------------
                                   5486 ; BASIC: BYE 
                                   5487 ; halt mcu in its lowest power mode 
                                   5488 ; wait for reset or external interrupt
                                   5489 ; do a cold start on wakeup.
                                   5490 ;------------------------------
      001F33                       5491 bye:
      001F33 72 0D 52 30 FB   [ 2] 5492 	btjf UART1_SR,#UART_SR_TC,.
      001F38 8E               [10] 5493 	halt
      001F39 CC 05 7A         [ 2] 5494 	jp cold_start  
                                   5495 
                                   5496 ;----------------------------------
                                   5497 ; BASIC: AUTORUN "file_name" 
                                   5498 ; record in eeprom at adrress AUTORUN_NAME
                                   5499 ; the name of file to load and execute
                                   5500 ; at startup 
                                   5501 ; input:
                                   5502 ;   file_name   file to execute 
                                   5503 ; output:
                                   5504 ;   none
                                   5505 ;-----------------------------------
      001F3C                       5506 autorun: 
      001F3C 72 01 00 25 07   [ 2] 5507 	btjf flags,#FRUN,0$ 
      001F41 27 05            [ 1] 5508 	jreq 0$ 
      001F43 A6 07            [ 1] 5509 	ld a,#ERR_CMD_ONLY 
      001F45 CC 07 BA         [ 2] 5510 	jp tb_error 
      001F48                       5511 0$:	
      001F48 CD 08 6C         [ 4] 5512 	call next_token 
      001F4B A1 0A            [ 1] 5513 	cp a,#TK_QSTR
      001F4D 27 03            [ 1] 5514 	jreq 1$
      001F4F CC 07 B8         [ 2] 5515 	jp syntax_error 
      001F52                       5516 1$:	
      001F52 89               [ 2] 5517 	pushw x ; file name char*
      001F53 90 93            [ 1] 5518 	ldw y,x  
      001F55 CD 1C 02         [ 4] 5519 	call search_file 
      001F58 25 05            [ 1] 5520 	jrc 2$ 
      001F5A A6 09            [ 1] 5521 	ld a,#ERR_NOT_FILE
      001F5C CC 07 BA         [ 2] 5522 	jp tb_error  
      001F5F                       5523 2$: 
      001F5F 55 00 03 00 01   [ 1] 5524 	mov in,count 
      001F64 72 5F 00 16      [ 1] 5525 	clr farptr 
      001F68 AE 40 00         [ 2] 5526 	ldw x,#AUTORUN_NAME
      001F6B CF 00 17         [ 2] 5527 	ldw farptr+1,x 
      001F6E 1E 01            [ 2] 5528 	ldw x,(1,sp)  
      001F70 CD 02 A0         [ 4] 5529 	call strlen  ; return length in X 
      001F73 90 85            [ 2] 5530 	popw y 
      001F75 89               [ 2] 5531 	pushw x 
      001F76 5F               [ 1] 5532 	clrw x 
      001F77 CD 01 6D         [ 4] 5533 	call write_block 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001F7A                       5534 	_drop 2 
      001F7A 5B 02            [ 2]    1     addw sp,#2 
      001F7C 81               [ 4] 5535 	ret 
                                   5536 
                                   5537 ;----------------------------------
                                   5538 ; BASIC: SLEEP 
                                   5539 ; halt mcu until reset or external
                                   5540 ; interrupt.
                                   5541 ; Resume progam after SLEEP command
                                   5542 ;----------------------------------
      001F7D                       5543 sleep:
      001F7D 72 0D 52 30 FB   [ 2] 5544 	btjf UART1_SR,#UART_SR_TC,.
      001F82 72 16 00 25      [ 1] 5545 	bset flags,#FSLEEP
      001F86 8E               [10] 5546 	halt 
      001F87 81               [ 4] 5547 	ret 
                                   5548 
                                   5549 ;-------------------------------
                                   5550 ; BASIC: PAUSE expr 
                                   5551 ; suspend execution for n msec.
                                   5552 ; input:
                                   5553 ;	none
                                   5554 ; output:
                                   5555 ;	none 
                                   5556 ;------------------------------
      001F88                       5557 pause:
      001F88 CD 13 15         [ 4] 5558 	call expression
      001F8B A1 04            [ 1] 5559 	cp a,#TK_INTGR
      001F8D 27 03            [ 1] 5560 	jreq pause02 
      001F8F CC 07 B8         [ 2] 5561 	jp syntax_error
      001F92                       5562 pause02: 
      001F92 5D               [ 2] 5563 1$: tnzw x 
      001F93 27 04            [ 1] 5564 	jreq 2$
      001F95 8F               [10] 5565 	wfi 
      001F96 5A               [ 2] 5566 	decw x 
      001F97 26 F9            [ 1] 5567 	jrne 1$
      001F99 4F               [ 1] 5568 2$:	clr a 
      001F9A 81               [ 4] 5569 	ret 
                                   5570 
                                   5571 ;------------------------------
                                   5572 ; BASIC: AWU expr
                                   5573 ; halt mcu for 'expr' milliseconds
                                   5574 ; use Auto wakeup peripheral
                                   5575 ; all oscillators stopped except LSI
                                   5576 ; range: 1ms - 511ms
                                   5577 ; input:
                                   5578 ;  none
                                   5579 ; output:
                                   5580 ;  none:
                                   5581 ;------------------------------
      001F9B                       5582 awu:
      001F9B CD 13 15         [ 4] 5583   call expression
      001F9E A1 04            [ 1] 5584   cp a,#TK_INTGR
      001FA0 27 03            [ 1] 5585   jreq awu02
      001FA2 CC 07 B8         [ 2] 5586   jp syntax_error
      001FA5                       5587 awu02:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001FA5 A3 14 00         [ 2] 5588   cpw x,#5120
      001FA8 2B 0C            [ 1] 5589   jrmi 1$ 
      001FAA 35 0F 50 F2      [ 1] 5590   mov AWU_TBR,#15 
      001FAE A6 1E            [ 1] 5591   ld a,#30
      001FB0 62               [ 2] 5592   div x,a
      001FB1 A6 10            [ 1] 5593   ld a,#16
      001FB3 62               [ 2] 5594   div x,a 
      001FB4 20 1E            [ 2] 5595   jra 4$
      001FB6                       5596 1$: 
      001FB6 A3 08 00         [ 2] 5597   cpw x,#2048
      001FB9 2B 09            [ 1] 5598   jrmi 2$ 
      001FBB 35 0E 50 F2      [ 1] 5599   mov AWU_TBR,#14
      001FBF A6 50            [ 1] 5600   ld a,#80
      001FC1 62               [ 2] 5601   div x,a 
      001FC2 20 10            [ 2] 5602   jra 4$   
      001FC4                       5603 2$:
      001FC4 35 07 50 F2      [ 1] 5604   mov AWU_TBR,#7
      001FC8                       5605 3$:  
                                   5606 ; while X > 64  divide by 2 and increment AWU_TBR 
      001FC8 A3 00 40         [ 2] 5607   cpw x,#64 
      001FCB 23 07            [ 2] 5608   jrule 4$ 
      001FCD 72 5C 50 F2      [ 1] 5609   inc AWU_TBR 
      001FD1 54               [ 2] 5610   srlw x 
      001FD2 20 F4            [ 2] 5611   jra 3$ 
      001FD4                       5612 4$:
      001FD4 9F               [ 1] 5613   ld a, xl
      001FD5 4A               [ 1] 5614   dec a 
      001FD6 27 01            [ 1] 5615   jreq 5$
      001FD8 4A               [ 1] 5616   dec a 	
      001FD9                       5617 5$: 
      001FD9 A4 3E            [ 1] 5618   and a,#0x3e 
      001FDB C7 50 F1         [ 1] 5619   ld AWU_APR,a 
      001FDE 72 18 50 F0      [ 1] 5620   bset AWU_CSR,#AWU_CSR_AWUEN
      001FE2 8E               [10] 5621   halt 
                                   5622 
      001FE3 81               [ 4] 5623   ret 
                                   5624 
                                   5625 ;------------------------------
                                   5626 ; BASIC: TICKS
                                   5627 ; return msec ticks counter value 
                                   5628 ; input:
                                   5629 ; 	none 
                                   5630 ; output:
                                   5631 ;	X 		TK_INTGR
                                   5632 ;-------------------------------
      001FE4                       5633 get_ticks:
      001FE4 CE 00 0E         [ 2] 5634 	ldw x,ticks 
      001FE7 A6 04            [ 1] 5635 	ld a,#TK_INTGR
      001FE9 81               [ 4] 5636 	ret 
                                   5637 
                                   5638 
                                   5639 
                                   5640 ;------------------------------
                                   5641 ; BASIC: ABS(expr)
                                   5642 ; return absolute value of expr.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   5643 ; input:
                                   5644 ;   none
                                   5645 ; output:
                                   5646 ;   X     	positive integer
                                   5647 ;-------------------------------
      001FEA                       5648 abs:
      001FEA CD 12 39         [ 4] 5649 	call func_args 
      001FED A1 01            [ 1] 5650 	cp a,#1 
      001FEF 27 03            [ 1] 5651 	jreq 0$ 
      001FF1 CC 07 B8         [ 2] 5652 	jp syntax_error
      001FF4                       5653 0$:  
      001FF4 CD 10 1E         [ 4] 5654     call dpop   
      001FF7 9E               [ 1] 5655 	ld a,xh 
      001FF8 A5 80            [ 1] 5656 	bcp a,#0x80 
      001FFA 27 01            [ 1] 5657 	jreq 2$ 
      001FFC 50               [ 2] 5658 	negw x 
      001FFD A6 04            [ 1] 5659 2$: ld a,#TK_INTGR 
      001FFF 81               [ 4] 5660 	ret 
                                   5661 
                                   5662 ;------------------------------
                                   5663 ; BASIC: AND(expr1,expr2)
                                   5664 ; Apply bit AND relation between
                                   5665 ; the 2 arguments, i.e expr1 & expr2 
                                   5666 ; output:
                                   5667 ; 	A 		TK_INTGR
                                   5668 ;   X 		result 
                                   5669 ;------------------------------
      002000                       5670 bit_and:
      002000 CD 12 39         [ 4] 5671 	call func_args 
      002003 A1 02            [ 1] 5672 	cp a,#2
      002005 27 03            [ 1] 5673 	jreq 1$
      002007 CC 07 B8         [ 2] 5674 	jp syntax_error 
      00200A CD 10 1E         [ 4] 5675 1$:	call dpop 
      00200D 89               [ 2] 5676 	pushw x 
      00200E CD 10 1E         [ 4] 5677 	call dpop 
      002011 9E               [ 1] 5678 	ld a,xh 
      002012 14 01            [ 1] 5679 	and a,(1,sp)
      002014 95               [ 1] 5680 	ld xh,a 
      002015 9F               [ 1] 5681 	ld a,xl
      002016 14 02            [ 1] 5682 	and a,(2,sp)
      002018 97               [ 1] 5683 	ld xl,a 
      002019                       5684 	_drop 2 
      002019 5B 02            [ 2]    1     addw sp,#2 
      00201B A6 04            [ 1] 5685 	ld a,#TK_INTGR
      00201D 81               [ 4] 5686 	ret
                                   5687 
                                   5688 ;------------------------------
                                   5689 ; BASIC: OR(expr1,expr2)
                                   5690 ; Apply bit OR relation between
                                   5691 ; the 2 arguments, i.e expr1 | expr2 
                                   5692 ; output:
                                   5693 ; 	A 		TK_INTGR
                                   5694 ;   X 		result 
                                   5695 ;------------------------------
      00201E                       5696 bit_or:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00201E CD 12 39         [ 4] 5697 	call func_args 
      002021 A1 02            [ 1] 5698 	cp a,#2
      002023 27 03            [ 1] 5699 	jreq 1$
      002025 CC 07 B8         [ 2] 5700 	jp syntax_error 
      002028                       5701 1$: 
      002028 CD 10 1E         [ 4] 5702 	call dpop 
      00202B 89               [ 2] 5703 	pushw x 
      00202C CD 10 1E         [ 4] 5704 	call dpop 
      00202F 9E               [ 1] 5705 	ld a,xh 
      002030 1A 01            [ 1] 5706 	or a,(1,sp)
      002032 95               [ 1] 5707 	ld xh,a 
      002033 9F               [ 1] 5708 	ld a,xl 
      002034 1A 02            [ 1] 5709 	or a,(2,sp)
      002036 97               [ 1] 5710 	ld xl,a 
      002037                       5711 	_drop 2 
      002037 5B 02            [ 2]    1     addw sp,#2 
      002039 A6 04            [ 1] 5712 	ld a,#TK_INTGR 
      00203B 81               [ 4] 5713 	ret
                                   5714 
                                   5715 ;------------------------------
                                   5716 ; BASIC: XOR(expr1,expr2)
                                   5717 ; Apply bit XOR relation between
                                   5718 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5719 ; output:
                                   5720 ; 	A 		TK_INTGR
                                   5721 ;   X 		result 
                                   5722 ;------------------------------
      00203C                       5723 bit_xor:
      00203C CD 12 39         [ 4] 5724 	call func_args 
      00203F A1 02            [ 1] 5725 	cp a,#2
      002041 27 03            [ 1] 5726 	jreq 1$
      002043 CC 07 B8         [ 2] 5727 	jp syntax_error 
      002046                       5728 1$: 
      002046 CD 10 1E         [ 4] 5729 	call dpop 
      002049 89               [ 2] 5730 	pushw x 
      00204A CD 10 1E         [ 4] 5731 	call dpop 
      00204D 9E               [ 1] 5732 	ld a,xh 
      00204E 18 01            [ 1] 5733 	xor a,(1,sp)
      002050 95               [ 1] 5734 	ld xh,a 
      002051 9F               [ 1] 5735 	ld a,xl 
      002052 18 02            [ 1] 5736 	xor a,(2,sp)
      002054 97               [ 1] 5737 	ld xl,a 
      002055                       5738 	_drop 2 
      002055 5B 02            [ 2]    1     addw sp,#2 
      002057 A6 04            [ 1] 5739 	ld a,#TK_INTGR 
      002059 81               [ 4] 5740 	ret 
                                   5741 
                                   5742 ;------------------------------
                                   5743 ; BASIC: LSHIFT(expr1,expr2)
                                   5744 ; logical shift left expr1 by 
                                   5745 ; expr2 bits 
                                   5746 ; output:
                                   5747 ; 	A 		TK_INTGR
                                   5748 ;   X 		result 
                                   5749 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      00205A                       5750 lshift:
      00205A CD 12 39         [ 4] 5751 	call func_args
      00205D A1 02            [ 1] 5752 	cp a,#2 
      00205F 27 03            [ 1] 5753 	jreq 1$
      002061 CC 07 B8         [ 2] 5754 	jp syntax_error
      002064 CD 10 1E         [ 4] 5755 1$: call dpop  
      002067 51               [ 1] 5756 	exgw x,y 
      002068 CD 10 1E         [ 4] 5757 	call dpop
      00206B 90 5D            [ 2] 5758 	tnzw y 
      00206D 27 05            [ 1] 5759 	jreq 4$
      00206F 58               [ 2] 5760 2$:	sllw x 
      002070 90 5A            [ 2] 5761 	decw y 
      002072 26 FB            [ 1] 5762 	jrne 2$
      002074                       5763 4$:  
      002074 A6 04            [ 1] 5764 	ld a,#TK_INTGR
      002076 81               [ 4] 5765 	ret
                                   5766 
                                   5767 ;------------------------------
                                   5768 ; BASIC: RSHIFT(expr1,expr2)
                                   5769 ; logical shift right expr1 by 
                                   5770 ; expr2 bits.
                                   5771 ; output:
                                   5772 ; 	A 		TK_INTGR
                                   5773 ;   X 		result 
                                   5774 ;------------------------------
      002077                       5775 rshift:
      002077 CD 12 39         [ 4] 5776 	call func_args
      00207A A1 02            [ 1] 5777 	cp a,#2 
      00207C 27 03            [ 1] 5778 	jreq 1$
      00207E CC 07 B8         [ 2] 5779 	jp syntax_error
      002081 CD 10 1E         [ 4] 5780 1$: call dpop  
      002084 51               [ 1] 5781 	exgw x,y 
      002085 CD 10 1E         [ 4] 5782 	call dpop
      002088 90 5D            [ 2] 5783 	tnzw y 
      00208A 27 05            [ 1] 5784 	jreq 4$
      00208C 54               [ 2] 5785 2$:	srlw x 
      00208D 90 5A            [ 2] 5786 	decw y 
      00208F 26 FB            [ 1] 5787 	jrne 2$
      002091                       5788 4$:  
      002091 A6 04            [ 1] 5789 	ld a,#TK_INTGR
      002093 81               [ 4] 5790 	ret
                                   5791 
                                   5792 ;--------------------------
                                   5793 ; BASIC: FCPU integer
                                   5794 ; set CPU frequency 
                                   5795 ;-------------------------- 
                                   5796 
      002094                       5797 fcpu:
      002094 A6 04            [ 1] 5798 	ld a,#TK_INTGR
      002096 CD 12 08         [ 4] 5799 	call expect 
      002099 9F               [ 1] 5800 	ld a,xl 
      00209A A4 07            [ 1] 5801 	and a,#7 
      00209C C7 50 C6         [ 1] 5802 	ld CLK_CKDIVR,a 
      00209F 81               [ 4] 5803 	ret 
                                   5804 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   5805 ;------------------------------
                                   5806 ; BASIC: PMODE pin#, mode 
                                   5807 ; Arduino pin. 
                                   5808 ; define pin as input or output
                                   5809 ; pin#: {0..15}
                                   5810 ; mode: INPUT|OUTPUT  
                                   5811 ;------------------------------
                           000001  5812 	PINNO=1
                           000001  5813 	VSIZE=1
      0020A0                       5814 pin_mode:
      0020A0                       5815 	_vars VSIZE 
      0020A0 52 01            [ 2]    1     sub sp,#VSIZE 
      0020A2 CD 12 15         [ 4] 5816 	call arg_list 
      0020A5 A1 02            [ 1] 5817 	cp a,#2 
      0020A7 27 03            [ 1] 5818 	jreq 1$
      0020A9 CC 07 B8         [ 2] 5819 	jp syntax_error 
      0020AC CD 10 1E         [ 4] 5820 1$: call dpop ; mode 
      0020AF 51               [ 1] 5821 	exgw x,y 
      0020B0 CD 10 1E         [ 4] 5822 	call dpop ; Dx pin 
      0020B3 CD 20 E5         [ 4] 5823 	call select_pin 
      0020B6 6B 01            [ 1] 5824 	ld (PINNO,sp),a  
      0020B8 A6 01            [ 1] 5825 	ld a,#1 
      0020BA 0D 01            [ 1] 5826 	tnz (PINNO,sp)
      0020BC 27 0B            [ 1] 5827 	jreq 4$
      0020BE 48               [ 1] 5828 2$:	sll a 
      0020BF 0A 01            [ 1] 5829 	dec (PINNO,sp)
      0020C1 26 FB            [ 1] 5830 	jrne 2$ 
      0020C3 6B 01            [ 1] 5831 	ld (PINNO,sp),a
      0020C5 EA 03            [ 1] 5832 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      0020C7 E7 03            [ 1] 5833 	ld (GPIO_CR1,x),a 
      0020C9 90 A3 00 01      [ 2] 5834 4$:	cpw y,#OUTP 
      0020CD 27 07            [ 1] 5835 	jreq 6$
                                   5836 ; input mode
      0020CF 7B 01            [ 1] 5837 	ld a,(PINNO,sp)
      0020D1 43               [ 1] 5838 	cpl a 
      0020D2 E4 02            [ 1] 5839 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      0020D4 20 0A            [ 2] 5840 	jra 9$
      0020D6                       5841 6$: ;output mode  
      0020D6 7B 01            [ 1] 5842 	ld a,(PINNO,sp)
      0020D8 EA 04            [ 1] 5843 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0020DA E7 04            [ 1] 5844 	ld (GPIO_CR2,x),a 
      0020DC 7B 01            [ 1] 5845 	ld a,(PINNO,sp)
      0020DE EA 02            [ 1] 5846 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0020E0 E7 02            [ 1] 5847 9$:	ld (GPIO_DDR,x),a 
      0020E2                       5848 	_drop VSIZE 
      0020E2 5B 01            [ 2]    1     addw sp,#VSIZE 
      0020E4 81               [ 4] 5849 	ret
                                   5850 
                                   5851 ;------------------------
                                   5852 ; select Arduino pin 
                                   5853 ; input:
                                   5854 ;   X 	 {0..15} Arduino Dx 
                                   5855 ; output:
                                   5856 ;   A     stm8s208 pin 
                                   5857 ;   X     base address s208 GPIO port 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   5858 ;---------------------------
      0020E5                       5859 select_pin:
      0020E5 58               [ 2] 5860 	sllw x 
      0020E6 1C 20 F5         [ 2] 5861 	addw x,#arduino_to_8s208 
      0020E9 FE               [ 2] 5862 	ldw x,(x)
      0020EA 9F               [ 1] 5863 	ld a,xl 
      0020EB 88               [ 1] 5864 	push a 
      0020EC 5E               [ 1] 5865 	swapw x 
      0020ED A6 05            [ 1] 5866 	ld a,#5 
      0020EF 42               [ 4] 5867 	mul x,a 
      0020F0 1C 50 00         [ 2] 5868 	addw x,#GPIO_BASE 
      0020F3 84               [ 1] 5869 	pop a 
      0020F4 81               [ 4] 5870 	ret 
                                   5871 ; translation from Arduino D0..D15 to stm8s208rb 
      0020F5                       5872 arduino_to_8s208:
      0020F5 03 06                 5873 .byte 3,6 ; D0 
      0020F7 03 05                 5874 .byte 3,5 ; D1 
      0020F9 04 00                 5875 .byte 4,0 ; D2 
      0020FB 02 01                 5876 .byte 2,1 ; D3
      0020FD 06 00                 5877 .byte 6,0 ; D4
      0020FF 02 02                 5878 .byte 2,2 ; D5
      002101 02 03                 5879 .byte 2,3 ; D6
      002103 03 01                 5880 .byte 3,1 ; D7
      002105 03 03                 5881 .byte 3,3 ; D8
      002107 02 04                 5882 .byte 2,4 ; D9
      002109 04 05                 5883 .byte 4,5 ; D10
      00210B 02 06                 5884 .byte 2,6 ; D11
      00210D 02 07                 5885 .byte 2,7 ; D12
      00210F 02 05                 5886 .byte 2,5 ; D13
      002111 04 02                 5887 .byte 4,2 ; D14
      002113 04 01                 5888 .byte 4,1 ; D15
                                   5889 
                                   5890 
                                   5891 ;------------------------------
                                   5892 ; BASIC: RND(expr)
                                   5893 ; return random number 
                                   5894 ; between 1 and expr inclusive
                                   5895 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5896 ; input:
                                   5897 ; 	none 
                                   5898 ; output:
                                   5899 ;	X 		random positive integer 
                                   5900 ;------------------------------
      002115                       5901 random:
      002115 CD 12 39         [ 4] 5902 	call func_args 
      002118 A1 01            [ 1] 5903 	cp a,#1
      00211A 27 03            [ 1] 5904 	jreq 1$
      00211C CC 07 B8         [ 2] 5905 	jp syntax_error
      00211F                       5906 1$: 
      00211F CD 10 1E         [ 4] 5907 	call dpop 
      002122 89               [ 2] 5908 	pushw x 
      002123 9E               [ 1] 5909 	ld a,xh 
      002124 A5 80            [ 1] 5910 	bcp a,#0x80 
      002126 27 05            [ 1] 5911 	jreq 2$
      002128 A6 0A            [ 1] 5912 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00212A CC 07 BA         [ 2] 5913 	jp tb_error
      00212D                       5914 2$: 
                                   5915 ; acc16=(x<<5)^x 
      00212D CE 00 12         [ 2] 5916 	ldw x,seedx 
      002130 58               [ 2] 5917 	sllw x 
      002131 58               [ 2] 5918 	sllw x 
      002132 58               [ 2] 5919 	sllw x 
      002133 58               [ 2] 5920 	sllw x 
      002134 58               [ 2] 5921 	sllw x 
      002135 9E               [ 1] 5922 	ld a,xh 
      002136 C8 00 12         [ 1] 5923 	xor a,seedx 
      002139 C7 00 0C         [ 1] 5924 	ld acc16,a 
      00213C 9F               [ 1] 5925 	ld a,xl 
      00213D C8 00 13         [ 1] 5926 	xor a,seedx+1 
      002140 C7 00 0D         [ 1] 5927 	ld acc8,a 
                                   5928 ; seedx=seedy 
      002143 CE 00 14         [ 2] 5929 	ldw x,seedy 
      002146 CF 00 12         [ 2] 5930 	ldw seedx,x  
                                   5931 ; seedy=seedy^(seedy>>1)
      002149 90 54            [ 2] 5932 	srlw y 
      00214B 90 9E            [ 1] 5933 	ld a,yh 
      00214D C8 00 14         [ 1] 5934 	xor a,seedy 
      002150 C7 00 14         [ 1] 5935 	ld seedy,a  
      002153 90 9F            [ 1] 5936 	ld a,yl 
      002155 C8 00 15         [ 1] 5937 	xor a,seedy+1 
      002158 C7 00 15         [ 1] 5938 	ld seedy+1,a 
                                   5939 ; acc16>>3 
      00215B CE 00 0C         [ 2] 5940 	ldw x,acc16 
      00215E 54               [ 2] 5941 	srlw x 
      00215F 54               [ 2] 5942 	srlw x 
      002160 54               [ 2] 5943 	srlw x 
                                   5944 ; x=acc16^x 
      002161 9E               [ 1] 5945 	ld a,xh 
      002162 C8 00 0C         [ 1] 5946 	xor a,acc16 
      002165 95               [ 1] 5947 	ld xh,a 
      002166 9F               [ 1] 5948 	ld a,xl 
      002167 C8 00 0D         [ 1] 5949 	xor a,acc8 
      00216A 97               [ 1] 5950 	ld xl,a 
                                   5951 ; seedy=x^seedy 
      00216B C8 00 15         [ 1] 5952 	xor a,seedy+1
      00216E 97               [ 1] 5953 	ld xl,a 
      00216F 9E               [ 1] 5954 	ld a,xh 
      002170 C8 00 14         [ 1] 5955 	xor a,seedy
      002173 95               [ 1] 5956 	ld xh,a 
      002174 CF 00 14         [ 2] 5957 	ldw seedy,x 
                                   5958 ; return seedy modulo expr + 1 
      002177 90 85            [ 2] 5959 	popw y 
      002179 65               [ 2] 5960 	divw x,y 
      00217A 93               [ 1] 5961 	ldw x,y 
      00217B 5C               [ 2] 5962 	incw x 
      00217C A6 04            [ 1] 5963 	ld a,#TK_INTGR
      00217E 81               [ 4] 5964 	ret 
                                   5965 
                                   5966 ;---------------------------------
                                   5967 ; BASIC: WORDS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                   5968 ; affiche la listes des mots du
                                   5969 ; dictionnaire.
                                   5970 ;---------------------------------
                           000001  5971 	WLEN=1
                           000002  5972 	LLEN=2  
                           000002  5973 	VSIZE=2 
      00217F                       5974 words:
      00217F                       5975 	_vars VSIZE
      00217F 52 02            [ 2]    1     sub sp,#VSIZE 
      002181 0F 02            [ 1] 5976 	clr (LLEN,sp)
      002183 90 AE 27 3F      [ 2] 5977 	ldw y,#kword_dict+2
      002187 93               [ 1] 5978 0$:	ldw x,y
      002188 F6               [ 1] 5979 	ld a,(x)
      002189 A4 0F            [ 1] 5980 	and a,#15 
      00218B 6B 01            [ 1] 5981 	ld (WLEN,sp),a 
      00218D 5C               [ 2] 5982 1$:	incw x 
      00218E F6               [ 1] 5983 	ld a,(x)
      00218F CD 01 CB         [ 4] 5984 	call putc 
      002192 0C 02            [ 1] 5985 	inc (LLEN,sp)
      002194 0A 01            [ 1] 5986 	dec (WLEN,sp)
      002196 26 F5            [ 1] 5987 	jrne 1$
      002198 A6 46            [ 1] 5988 	ld a,#70
      00219A 11 02            [ 1] 5989 	cp a,(LLEN,sp)
      00219C 2B 09            [ 1] 5990 	jrmi 2$   
      00219E A6 20            [ 1] 5991 	ld a,#SPACE 
      0021A0 CD 01 CB         [ 4] 5992 	call putc 
      0021A3 0C 02            [ 1] 5993 	inc (LLEN,sp) 
      0021A5 20 07            [ 2] 5994 	jra 3$
      0021A7 A6 0D            [ 1] 5995 2$: ld a,#CR 
      0021A9 CD 01 CB         [ 4] 5996 	call putc 
      0021AC 0F 02            [ 1] 5997 	clr (LLEN,sp)
      0021AE 72 A2 00 02      [ 2] 5998 3$:	subw y,#2 
      0021B2 90 FE            [ 2] 5999 	ldw y,(y)
      0021B4 26 D1            [ 1] 6000 	jrne 0$  
      0021B6                       6001 	_drop VSIZE 
      0021B6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0021B8 81               [ 4] 6002 	ret 
                                   6003 
                                   6004 
                                   6005 ;-----------------------------
                                   6006 ; BASIC: TIMER expr 
                                   6007 ; initialize count down timer 
                                   6008 ;-----------------------------
      0021B9                       6009 set_timer:
      0021B9 CD 12 15         [ 4] 6010 	call arg_list
      0021BC A1 01            [ 1] 6011 	cp a,#1 
      0021BE 27 03            [ 1] 6012 	jreq 1$
      0021C0 CC 07 B8         [ 2] 6013 	jp syntax_error
      0021C3                       6014 1$: 
      0021C3 CD 10 1E         [ 4] 6015 	call dpop 
      0021C6 CF 00 10         [ 2] 6016 	ldw timer,x 
      0021C9 81               [ 4] 6017 	ret 
                                   6018 
                                   6019 ;------------------------------
                                   6020 ; BASIC: TIMEOUT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   6021 ; return state of timer 
                                   6022 ;------------------------------
      0021CA                       6023 timeout:
      0021CA CE 00 10         [ 2] 6024 	ldw x,timer 
      0021CD                       6025 logical_complement:
      0021CD 53               [ 2] 6026 	cplw x 
      0021CE A3 FF FF         [ 2] 6027 	cpw x,#-1
      0021D1 27 01            [ 1] 6028 	jreq 2$
      0021D3 5F               [ 1] 6029 	clrw x 
      0021D4 A6 04            [ 1] 6030 2$:	ld a,#TK_INTGR
      0021D6 81               [ 4] 6031 	ret 
                                   6032 
                                   6033 ;--------------------------------
                                   6034 ; BASIC NOT(expr) 
                                   6035 ; return logical complement of expr
                                   6036 ;--------------------------------
      0021D7                       6037 func_not:
      0021D7 CD 12 39         [ 4] 6038 	call func_args  
      0021DA A1 01            [ 1] 6039 	cp a,#1
      0021DC 27 03            [ 1] 6040 	jreq 1$
      0021DE CC 07 B8         [ 2] 6041 	jp syntax_error
      0021E1 CD 10 1E         [ 4] 6042 1$:	call dpop 
      0021E4 20 E7            [ 2] 6043 	jra logical_complement
                                   6044 
                                   6045 
                                   6046 
                                   6047 ;-----------------------------------
                                   6048 ; BASIC: IWDGEN expr1 
                                   6049 ; enable independant watchdog timer
                                   6050 ; expr1 is delay in multiple of 62.5µsec
                                   6051 ; expr1 -> {1..16383}
                                   6052 ;-----------------------------------
      0021E6                       6053 enable_iwdg:
      0021E6 CD 12 15         [ 4] 6054 	call arg_list
      0021E9 A1 01            [ 1] 6055 	cp a,#1 
      0021EB 27 03            [ 1] 6056 	jreq 1$
      0021ED CC 07 B8         [ 2] 6057 	jp syntax_error 
      0021F0 4B 00            [ 1] 6058 1$: push #0
      0021F2 35 CC 50 E0      [ 1] 6059 	mov IWDG_KR,#IWDG_KEY_ENABLE
      0021F6 CD 10 1E         [ 4] 6060 	call dpop
      0021F9 9E               [ 1] 6061 	ld a,xh 
      0021FA A4 3F            [ 1] 6062 	and a,#0x3f
      0021FC 95               [ 1] 6063 	ld xh,a  
      0021FD A3 00 FF         [ 2] 6064 2$:	cpw x,#255
      002200 23 06            [ 2] 6065 	jrule 3$
      002202 0C 01            [ 1] 6066 	inc (1,sp)
      002204 98               [ 1] 6067 	rcf 
      002205 56               [ 2] 6068 	rrcw x 
      002206 20 F5            [ 2] 6069 	jra 2$
      002208 35 55 50 E0      [ 1] 6070 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      00220C 84               [ 1] 6071 	pop a  
      00220D C7 50 E1         [ 1] 6072 	ld IWDG_PR,a 
      002210 9F               [ 1] 6073 	ld a,xl
      002211 4A               [ 1] 6074 	dec a 
      002212 35 55 50 E0      [ 1] 6075 	mov IWDG_KR,#IWDG_KEY_ACCESS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002216 C7 50 E2         [ 1] 6076 	ld IWDG_RLR,a 
      002219 35 AA 50 E0      [ 1] 6077 	mov IWDG_KR,#IWDG_KEY_REFRESH
      00221D 81               [ 4] 6078 	ret 
                                   6079 
                                   6080 
                                   6081 ;-----------------------------------
                                   6082 ; BASIC: IWDGREF  
                                   6083 ; refresh independant watchdog count down 
                                   6084 ; timer before it reset MCU. 
                                   6085 ;-----------------------------------
      00221E                       6086 refresh_iwdg:
      00221E 35 AA 50 E0      [ 1] 6087 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002222 81               [ 4] 6088 	ret 
                                   6089 
                                   6090 
                                   6091 ;-------------------------------------
                                   6092 ; BASIC: LOG(expr)
                                   6093 ; return logarithm base 2 of expr 
                                   6094 ; this is the position of most significant
                                   6095 ; bit set. 
                                   6096 ; input: 
                                   6097 ; output:
                                   6098 ;   X     log2 
                                   6099 ;   A     TK_INTGR 
                                   6100 ;*********************************
      002223                       6101 log2:
      002223 CD 12 39         [ 4] 6102 	call func_args 
      002226 A1 01            [ 1] 6103 	cp a,#1 
      002228 27 03            [ 1] 6104 	jreq 1$
      00222A CC 07 B8         [ 2] 6105 	jp syntax_error 
      00222D CD 10 1E         [ 4] 6106 1$: call dpop
      002230                       6107 leading_one:
      002230 5D               [ 2] 6108 	tnzw x 
      002231 27 0A            [ 1] 6109 	jreq 4$
      002233 A6 0F            [ 1] 6110 	ld a,#15 
      002235 59               [ 2] 6111 2$: rlcw x 
      002236 25 03            [ 1] 6112     jrc 3$
      002238 4A               [ 1] 6113 	dec a 
      002239 20 FA            [ 2] 6114 	jra 2$
      00223B 5F               [ 1] 6115 3$: clrw x 
      00223C 97               [ 1] 6116     ld xl,a
      00223D A6 04            [ 1] 6117 4$:	ld a,#TK_INTGR
      00223F 81               [ 4] 6118 	ret 
                                   6119 
                                   6120 ;-----------------------------------
                                   6121 ; BASIC: BIT(expr) 
                                   6122 ; expr ->{0..15}
                                   6123 ; return 2^expr 
                                   6124 ; output:
                                   6125 ;    x    2^expr 
                                   6126 ;-----------------------------------
      002240                       6127 bitmask:
      002240 CD 12 39         [ 4] 6128     call func_args 
      002243 A1 01            [ 1] 6129 	cp a,#1
      002245 27 03            [ 1] 6130 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      002247 CC 07 B8         [ 2] 6131 	jp syntax_error 
      00224A CD 10 1E         [ 4] 6132 1$: call dpop 
      00224D 9F               [ 1] 6133 	ld a,xl 
      00224E A4 0F            [ 1] 6134 	and a,#15
      002250 5F               [ 1] 6135 	clrw x 
      002251 5C               [ 2] 6136 	incw x 
      002252 4D               [ 1] 6137 2$: tnz a 
      002253 27 04            [ 1] 6138 	jreq 3$
      002255 58               [ 2] 6139 	slaw x 
      002256 4A               [ 1] 6140 	dec a 
      002257 20 F9            [ 2] 6141 	jra 2$ 
      002259 A6 04            [ 1] 6142 3$: ld a,#TK_INTGR
      00225B 81               [ 4] 6143 	ret 
                                   6144 
                                   6145 ;------------------------------
                                   6146 ; BASIC: INVERT(expr)
                                   6147 ; 1's complement 
                                   6148 ;--------------------------------
      00225C                       6149 invert:
      00225C CD 12 39         [ 4] 6150 	call func_args
      00225F A1 01            [ 1] 6151 	cp a,#1 
      002261 27 03            [ 1] 6152 	jreq 1$
      002263 CC 07 B8         [ 2] 6153 	jp syntax_error
      002266 CD 10 1E         [ 4] 6154 1$: call dpop 
      002269 53               [ 2] 6155 	cplw x 
      00226A A6 04            [ 1] 6156 	ld a,#TK_INTGR 
      00226C 81               [ 4] 6157 	ret 
                                   6158 
                                   6159 ;------------------------------
                                   6160 ; BASIC: DO 
                                   6161 ; initiate a DO ... UNTIL loop 
                                   6162 ;------------------------------
      00226D                       6163 do_loop:
      00226D 85               [ 2] 6164 	popw x 
      00226E                       6165 	_vars 4 
      00226E 52 04            [ 2]    1     sub sp,#4 
      002270 89               [ 2] 6166 	pushw x 
      002271 CC 18 AE         [ 2] 6167 	jp store_loop_addr
                                   6168 
                                   6169 ;--------------------------------
                                   6170 ; BASIC: UNTIL expr 
                                   6171 ; loop if exprssion is false 
                                   6172 ; else terminate loop
                                   6173 ;--------------------------------
      002274                       6174 until: 
      002274 72 5D 00 22      [ 1] 6175 	tnz loop_depth 
      002278 26 03            [ 1] 6176 	jrne 1$ 
      00227A CC 07 B8         [ 2] 6177 	jp syntax_error 
      00227D                       6178 1$: 
      00227D CD 13 59         [ 4] 6179 	call relation 
      002280 A1 04            [ 1] 6180 	cp a,#TK_INTGR
      002282 27 03            [ 1] 6181 	jreq 2$
      002284 CC 07 B8         [ 2] 6182 	jp syntax_error
      002287                       6183 2$: 
      002287 5D               [ 2] 6184 	tnzw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      002288 26 03            [ 1] 6185 	jrne 9$
      00228A CC 19 09         [ 2] 6186 	jp loop_back 
      00228D                       6187 9$:	; remove loop info cstack  
      00228D 85               [ 2] 6188 	popw x
      00228E                       6189 	_drop 4
      00228E 5B 04            [ 2]    1     addw sp,#4 
      002290 89               [ 2] 6190 	pushw x 
      002291 72 5A 00 22      [ 1] 6191 	dec loop_depth 
      002295 81               [ 4] 6192 	ret 
                                   6193 
                                   6194 ;--------------------------
                                   6195 ; BASIC: PRTA...PRTI  
                                   6196 ;  return constant value 
                                   6197 ;  PORT  offset in GPIO
                                   6198 ;  array
                                   6199 ;---------------------------
      002296                       6200 const_porta:
      002296 AE 00 00         [ 2] 6201 	ldw x,#0
      002299 A6 04            [ 1] 6202 	ld a,#TK_INTGR 
      00229B 81               [ 4] 6203 	ret 
      00229C                       6204 const_portb:
      00229C AE 00 01         [ 2] 6205 	ldw x,#1
      00229F A6 04            [ 1] 6206 	ld a,#TK_INTGR 
      0022A1 81               [ 4] 6207 	ret 
      0022A2                       6208 const_portc:
      0022A2 AE 00 02         [ 2] 6209 	ldw x,#2
      0022A5 A6 04            [ 1] 6210 	ld a,#TK_INTGR 
      0022A7 81               [ 4] 6211 	ret 
      0022A8                       6212 const_portd:
      0022A8 AE 00 03         [ 2] 6213 	ldw x,#3
      0022AB A6 04            [ 1] 6214 	ld a,#TK_INTGR 
      0022AD 81               [ 4] 6215 	ret 
      0022AE                       6216 const_porte:
      0022AE AE 00 04         [ 2] 6217 	ldw x,#4
      0022B1 A6 04            [ 1] 6218 	ld a,#TK_INTGR 
      0022B3 81               [ 4] 6219 	ret 
      0022B4                       6220 const_portf:
      0022B4 AE 00 05         [ 2] 6221 	ldw x,#5
      0022B7 A6 04            [ 1] 6222 	ld a,#TK_INTGR 
      0022B9 81               [ 4] 6223 	ret 
      0022BA                       6224 const_portg:
      0022BA AE 00 06         [ 2] 6225 	ldw x,#6
      0022BD A6 04            [ 1] 6226 	ld a,#TK_INTGR 
      0022BF 81               [ 4] 6227 	ret 
      0022C0                       6228 const_porth:
      0022C0 AE 00 07         [ 2] 6229 	ldw x,#7
      0022C3 A6 04            [ 1] 6230 	ld a,#TK_INTGR 
      0022C5 81               [ 4] 6231 	ret 
      0022C6                       6232 const_porti:
      0022C6 AE 00 08         [ 2] 6233 	ldw x,#8
      0022C9 A6 04            [ 1] 6234 	ld a,#TK_INTGR 
      0022CB 81               [ 4] 6235 	ret 
                                   6236 
                                   6237 ;-------------------------------
                                   6238 ; following return constant 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                   6239 ; related to GPIO register offset 
                                   6240 ;---------------------------------
      0022CC                       6241 const_odr:
      0022CC A6 04            [ 1] 6242 	ld a,#TK_INTGR 
      0022CE AE 00 00         [ 2] 6243 	ldw x,#GPIO_ODR
      0022D1 81               [ 4] 6244 	ret 
      0022D2                       6245 const_idr:
      0022D2 A6 04            [ 1] 6246 	ld a,#TK_INTGR 
      0022D4 AE 00 01         [ 2] 6247 	ldw x,#GPIO_IDR
      0022D7 81               [ 4] 6248 	ret 
      0022D8                       6249 const_ddr:
      0022D8 A6 04            [ 1] 6250 	ld a,#TK_INTGR 
      0022DA AE 00 02         [ 2] 6251 	ldw x,#GPIO_DDR
      0022DD 81               [ 4] 6252 	ret 
      0022DE                       6253 const_cr1:
      0022DE A6 04            [ 1] 6254 	ld a,#TK_INTGR 
      0022E0 AE 00 03         [ 2] 6255 	ldw x,#GPIO_CR1
      0022E3 81               [ 4] 6256 	ret 
      0022E4                       6257 const_cr2:
      0022E4 A6 04            [ 1] 6258 	ld a,#TK_INTGR 
      0022E6 AE 00 04         [ 2] 6259 	ldw x,#GPIO_CR2
      0022E9 81               [ 4] 6260 	ret 
                                   6261 ;-------------------------
                                   6262 ;  constant for port mode
                                   6263 ;  used by PMODE 
                                   6264 ;  input or output
                                   6265 ;------------------------
      0022EA                       6266 const_output:
      0022EA A6 04            [ 1] 6267 	ld a,#TK_INTGR 
      0022EC AE 00 01         [ 2] 6268 	ldw x,#OUTP
      0022EF 81               [ 4] 6269 	ret 
      0022F0                       6270 const_input:
      0022F0 A6 04            [ 1] 6271 	ld a,#TK_INTGR 
      0022F2 AE 00 00         [ 2] 6272 	ldw x,#INP 
      0022F5 81               [ 4] 6273 	ret 
                                   6274 ;-----------------------
                                   6275 ; memory area constants
                                   6276 ;-----------------------
      0022F6                       6277 const_eeprom_base:
      0022F6 A6 04            [ 1] 6278 	ld a,#TK_INTGR 
      0022F8 AE 40 00         [ 2] 6279 	ldw x,#EEPROM_BASE 
      0022FB 81               [ 4] 6280 	ret 
                                   6281 
                                   6282 ;---------------------------
                                   6283 ; BASIC: DATA 
                                   6284 ; when the interpreter find 
                                   6285 ; a DATA line it skip it.
                                   6286 ;---------------------------
      0022FC                       6287 data:
      0022FC 55 00 03 00 01   [ 1] 6288 	mov in,count
      002301 81               [ 4] 6289 	ret 
                                   6290 
                                   6291 ;---------------------------
                                   6292 ; BASIC: DATLN  *expr*
                                   6293 ; set DATA pointer at line# 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                   6294 ; specified by *expr* 
                                   6295 ;---------------------------
      002302                       6296 data_line:
      002302 CD 13 15         [ 4] 6297 	call expression
      002305 A1 04            [ 1] 6298 	cp a,#TK_INTGR
      002307 27 03            [ 1] 6299 	jreq 1$
      002309 CC 07 B8         [ 2] 6300 	jp syntax_error 
      00230C CD 03 0E         [ 4] 6301 1$: call search_lineno
      00230F 5D               [ 2] 6302 	tnzw x 
      002310 26 05            [ 1] 6303 	jrne 3$
      002312 A6 05            [ 1] 6304 2$:	ld a,#ERR_NO_LINE 
      002314 CC 07 BA         [ 2] 6305 	jp tb_error
      002317                       6306 3$: ; check if valid data line 
      002317 90 93            [ 1] 6307     ldw y,x 
      002319 EE 04            [ 2] 6308 	ldw x,(4,x)
      00231B A3 22 FC         [ 2] 6309 	cpw x,#data 
      00231E 26 F2            [ 1] 6310 	jrne 2$ 
      002320 90 CF 00 06      [ 2] 6311 	ldw data_ptr,y
      002324 90 E6 02         [ 1] 6312 	ld a,(2,y)
      002327 C7 00 09         [ 1] 6313 	ld data_len,a 
      00232A 35 06 00 08      [ 1] 6314 	mov data_ofs,#FIRST_DATA_ITEM 
      00232E 81               [ 4] 6315 	ret
                                   6316 
                                   6317 ;---------------------------------
                                   6318 ; BASIC: RESTORE 
                                   6319 ; set data_ptr to first data line
                                   6320 ; if not DATA found pointer set to
                                   6321 ; zero 
                                   6322 ;---------------------------------
      00232F                       6323 restore:
      00232F 72 5F 00 06      [ 1] 6324 	clr data_ptr 
      002333 72 5F 00 07      [ 1] 6325 	clr data_ptr+1
      002337 72 5F 00 08      [ 1] 6326 	clr data_ofs 
      00233B 72 5F 00 09      [ 1] 6327 	clr data_len
      00233F CE 00 1E         [ 2] 6328 	ldw x,txtbgn
      002342                       6329 data_search_loop: 	
      002342 C3 00 20         [ 2] 6330 	cpw x,txtend
      002345 24 17            [ 1] 6331 	jruge 9$
      002347 90 93            [ 1] 6332 	ldw y,x 
      002349 EE 04            [ 2] 6333 	ldw x,(4,x)
      00234B A3 22 FC         [ 2] 6334 	cpw x,#data 
      00234E 26 1A            [ 1] 6335 	jrne try_next_line 
      002350 90 CF 00 06      [ 2] 6336 	ldw data_ptr,y 
      002354 90 E6 02         [ 1] 6337 	ld a,(2,y)
      002357 C7 00 09         [ 1] 6338 	ld data_len,a 
      00235A 35 06 00 08      [ 1] 6339 	mov data_ofs,#FIRST_DATA_ITEM
      00235E 72 5D 00 09      [ 1] 6340 9$:	tnz data_len 
      002362 26 05            [ 1] 6341     jrne 10$
      002364 A6 0C            [ 1] 6342 	ld a,#ERR_NO_DATA 
      002366 CC 07 BA         [ 2] 6343 	jp tb_error 
      002369 81               [ 4] 6344 10$:ret
      00236A                       6345 try_next_line:
      00236A 93               [ 1] 6346 	ldw x,y 
      00236B E6 02            [ 1] 6347 	ld a,(2,x)
      00236D C7 00 0D         [ 1] 6348 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002370 72 5F 00 0C      [ 1] 6349 	clr acc16 
      002374 72 BB 00 0C      [ 2] 6350 	addw x,acc16 
      002378 20 C8            [ 2] 6351 	jra data_search_loop
                                   6352 
                                   6353 
                                   6354 ;---------------------------------
                                   6355 ; BASIC: READ 
                                   6356 ; return next data item | 0 
                                   6357 ;---------------------------------
                           000001  6358 	CTX_BPTR=1 
                           000003  6359 	CTX_IN=3 
                           000004  6360 	CTX_COUNT=4 
                           000005  6361 	XSAVE=5
                           000006  6362 	VSIZE=6
      00237A                       6363 read:
      00237A                       6364 	_vars  VSIZE 
      00237A 52 06            [ 2]    1     sub sp,#VSIZE 
      00237C                       6365 read01:	
      00237C C6 00 08         [ 1] 6366 	ld a,data_ofs
      00237F C1 00 09         [ 1] 6367 	cp a,data_len 
      002382 27 37            [ 1] 6368 	jreq 2$ ; end of line  
      002384 CD 16 C2         [ 4] 6369 	call save_context
      002387 CE 00 06         [ 2] 6370 	ldw x,data_ptr 
      00238A CF 00 04         [ 2] 6371 	ldw basicptr,x 
      00238D 55 00 08 00 01   [ 1] 6372 	mov in,data_ofs 
      002392 55 00 09 00 03   [ 1] 6373 	mov count,data_len  
      002397 CD 13 15         [ 4] 6374 	call expression 
      00239A A1 04            [ 1] 6375 	cp a,#TK_INTGR 
      00239C 27 03            [ 1] 6376 	jreq 1$ 
      00239E CC 07 B8         [ 2] 6377 	jp syntax_error 
      0023A1                       6378 1$:
      0023A1 1F 05            [ 2] 6379 	ldw (XSAVE,SP),x
      0023A3 CD 08 6C         [ 4] 6380 	call next_token ; skip comma
      0023A6 CE 00 04         [ 2] 6381 	ldw x,basicptr 
      0023A9 CF 00 06         [ 2] 6382 	ldw data_ptr,x 
      0023AC 55 00 01 00 08   [ 1] 6383 	mov data_ofs,in 
      0023B1 CD 16 D2         [ 4] 6384 	call rest_context
      0023B4 1E 05            [ 2] 6385 	ldw x,(XSAVE,sp)
      0023B6 A6 04            [ 1] 6386 	ld a,#TK_INTGR
      0023B8                       6387 	_drop VSIZE 
      0023B8 5B 06            [ 2]    1     addw sp,#VSIZE 
      0023BA 81               [ 4] 6388 	ret 
      0023BB                       6389 2$: ; end of line reached 
      0023BB 90 CE 00 06      [ 2] 6390 	ldw y, data_ptr 
      0023BF 72 5F 00 06      [ 1] 6391 	clr data_ptr
      0023C3 72 5F 00 07      [ 1] 6392 	clr data_ptr+1   
      0023C7 72 5F 00 08      [ 1] 6393 	clr data_ofs 
      0023CB 72 5F 00 09      [ 1] 6394 	clr data_len 
      0023CF CD 23 6A         [ 4] 6395 	call try_next_line 
      0023D2 20 A8            [ 2] 6396 	jra read01
                                   6397 
                                   6398 
                                   6399 ;------------------------------
                                   6400 ;      dictionary 
                                   6401 ; format:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                   6402 ;   link:   2 bytes 
                                   6403 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6404 ;   cmd_name: 16 byte max 
                                   6405 ;   code_address: 2 bytes 
                                   6406 ;------------------------------
                                   6407 	.macro _dict_entry len,name,cmd 
                                   6408 	.word LINK 
                                   6409 	LINK=.
                                   6410 name:
                                   6411 	.byte len 	
                                   6412 	.ascii "name"
                                   6413 	.word cmd 
                                   6414 	.endm 
                                   6415 
                           000000  6416 	LINK=0
                                   6417 ; respect alphabetic order for BASIC names from Z-A
                                   6418 ; this sort order is for a cleaner WORDS cmd output. 	
      0023D4                       6419 kword_end:
      0023D4                       6420 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      0023D4 00 00                    1 	.word LINK 
                           0023D6     2 	LINK=.
      0023D6                          3 XPEEK:
      0023D6 45                       4 	.byte 5+F_IFUNC 	
      0023D7 58 50 45 45 4B           5 	.ascii "XPEEK"
      0023DC 18 08                    6 	.word xpeek 
      0023DE                       6421 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      0023DE 23 D6                    1 	.word LINK 
                           0023E0     2 	LINK=.
      0023E0                          3 XOR:
      0023E0 43                       4 	.byte 3+F_IFUNC 	
      0023E1 58 4F 52                 5 	.ascii "XOR"
      0023E4 20 3C                    6 	.word bit_xor 
      0023E6                       6422 	_dict_entry,5,WRITE,write  
      0023E6 23 E0                    1 	.word LINK 
                           0023E8     2 	LINK=.
      0023E8                          3 WRITE:
      0023E8 05                       4 	.byte 5 	
      0023E9 57 52 49 54 45           5 	.ascii "WRITE"
      0023EE 1E 5E                    6 	.word write 
      0023F0                       6423 	_dict_entry,5,WORDS,words 
      0023F0 23 E8                    1 	.word LINK 
                           0023F2     2 	LINK=.
      0023F2                          3 WORDS:
      0023F2 05                       4 	.byte 5 	
      0023F3 57 4F 52 44 53           5 	.ascii "WORDS"
      0023F8 21 7F                    6 	.word words 
      0023FA                       6424 	_dict_entry 4,WAIT,wait 
      0023FA 23 F2                    1 	.word LINK 
                           0023FC     2 	LINK=.
      0023FC                          3 WAIT:
      0023FC 04                       4 	.byte 4 	
      0023FD 57 41 49 54              5 	.ascii "WAIT"
      002401 17 4F                    6 	.word wait 
      002403                       6425 	_dict_entry,3+F_IFUNC,USR,usr
      002403 23 FC                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                           002405     2 	LINK=.
      002405                          3 USR:
      002405 43                       4 	.byte 3+F_IFUNC 	
      002406 55 53 52                 5 	.ascii "USR"
      002409 1F 15                    6 	.word usr 
      00240B                       6426 	_dict_entry,5,UNTIL,until 
      00240B 24 05                    1 	.word LINK 
                           00240D     2 	LINK=.
      00240D                          3 UNTIL:
      00240D 05                       4 	.byte 5 	
      00240E 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002413 22 74                    6 	.word until 
      002415                       6427 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      002415 24 0D                    1 	.word LINK 
                           002417     2 	LINK=.
      002417                          3 UFLASH:
      002417 46                       4 	.byte 6+F_IFUNC 	
      002418 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      00241E 1F 0F                    6 	.word uflash 
      002420                       6428 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      002420 24 17                    1 	.word LINK 
                           002422     2 	LINK=.
      002422                          3 UBOUND:
      002422 46                       4 	.byte 6+F_IFUNC 	
      002423 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002429 13 D4                    6 	.word ubound 
      00242B                       6429 	_dict_entry,4,TONE,tone  
      00242B 24 22                    1 	.word LINK 
                           00242D     2 	LINK=.
      00242D                          3 TONE:
      00242D 04                       4 	.byte 4 	
      00242E 54 4F 4E 45              5 	.ascii "TONE"
      002432 19 FD                    6 	.word tone 
      002434                       6430 	_dict_entry,2,TO,to
      002434 24 2D                    1 	.word LINK 
                           002436     2 	LINK=.
      002436                          3 TO:
      002436 02                       4 	.byte 2 	
      002437 54 4F                    5 	.ascii "TO"
      002439 18 66                    6 	.word to 
      00243B                       6431 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      00243B 24 36                    1 	.word LINK 
                           00243D     2 	LINK=.
      00243D                          3 TIMEOUT:
      00243D 47                       4 	.byte 7+F_IFUNC 	
      00243E 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002445 21 CA                    6 	.word timeout 
      002447                       6432 	_dict_entry,5,TIMER,set_timer
      002447 24 3D                    1 	.word LINK 
                           002449     2 	LINK=.
      002449                          3 TIMER:
      002449 05                       4 	.byte 5 	
      00244A 54 49 4D 45 52           5 	.ascii "TIMER"
      00244F 21 B9                    6 	.word set_timer 
      002451                       6433 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      002451 24 49                    1 	.word LINK 
                           002453     2 	LINK=.
      002453                          3 TICKS:
      002453 45                       4 	.byte 5+F_IFUNC 	
      002454 54 49 43 4B 53           5 	.ascii "TICKS"
      002459 1F E4                    6 	.word get_ticks 
      00245B                       6434 	_dict_entry,4,STOP,stop 
      00245B 24 53                    1 	.word LINK 
                           00245D     2 	LINK=.
      00245D                          3 STOP:
      00245D 04                       4 	.byte 4 	
      00245E 53 54 4F 50              5 	.ascii "STOP"
      002462 19 EE                    6 	.word stop 
      002464                       6435 	_dict_entry,4,STEP,step 
      002464 24 5D                    1 	.word LINK 
                           002466     2 	LINK=.
      002466                          3 STEP:
      002466 04                       4 	.byte 4 	
      002467 53 54 45 50              5 	.ascii "STEP"
      00246B 18 99                    6 	.word step 
      00246D                       6436 	_dict_entry,5,SLEEP,sleep 
      00246D 24 66                    1 	.word LINK 
                           00246F     2 	LINK=.
      00246F                          3 SLEEP:
      00246F 05                       4 	.byte 5 	
      002470 53 4C 45 45 50           5 	.ascii "SLEEP"
      002475 1F 7D                    6 	.word sleep 
      002477                       6437 	_dict_entry,4+F_IFUNC,SIZE,size
      002477 24 6F                    1 	.word LINK 
                           002479     2 	LINK=.
      002479                          3 SIZE:
      002479 44                       4 	.byte 4+F_IFUNC 	
      00247A 53 49 5A 45              5 	.ascii "SIZE"
      00247E 13 CA                    6 	.word size 
      002480                       6438     _dict_entry,4,SHOW,show 
      002480 24 79                    1 	.word LINK 
                           002482     2 	LINK=.
      002482                          3 SHOW:
      002482 04                       4 	.byte 4 	
      002483 53 48 4F 57              5 	.ascii "SHOW"
      002487 13 B0                    6 	.word show 
      002489                       6439 	_dict_entry,4,SAVE,save
      002489 24 82                    1 	.word LINK 
                           00248B     2 	LINK=.
      00248B                          3 SAVE:
      00248B 04                       4 	.byte 4 	
      00248C 53 41 56 45              5 	.ascii "SAVE"
      002490 1C 4D                    6 	.word save 
      002492                       6440 	_dict_entry 3,RUN,run
      002492 24 8B                    1 	.word LINK 
                           002494     2 	LINK=.
      002494                          3 RUN:
      002494 03                       4 	.byte 3 	
      002495 52 55 4E                 5 	.ascii "RUN"
      002498 19 9F                    6 	.word run 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      00249A                       6441 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      00249A 24 94                    1 	.word LINK 
                           00249C     2 	LINK=.
      00249C                          3 RSHIFT:
      00249C 46                       4 	.byte 6+F_IFUNC 	
      00249D 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0024A3 20 77                    6 	.word rshift 
      0024A5                       6442 	_dict_entry,3+F_IFUNC,RND,random 
      0024A5 24 9C                    1 	.word LINK 
                           0024A7     2 	LINK=.
      0024A7                          3 RND:
      0024A7 43                       4 	.byte 3+F_IFUNC 	
      0024A8 52 4E 44                 5 	.ascii "RND"
      0024AB 21 15                    6 	.word random 
      0024AD                       6443 	_dict_entry,6,RETURN,return 
      0024AD 24 A7                    1 	.word LINK 
                           0024AF     2 	LINK=.
      0024AF                          3 RETURN:
      0024AF 06                       4 	.byte 6 	
      0024B0 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0024B6 19 81                    6 	.word return 
      0024B8                       6444 	_dict_entry,7,RESTORE,restore 
      0024B8 24 AF                    1 	.word LINK 
                           0024BA     2 	LINK=.
      0024BA                          3 RESTORE:
      0024BA 07                       4 	.byte 7 	
      0024BB 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0024C2 23 2F                    6 	.word restore 
      0024C4                       6445 	_dict_entry 6,REMARK,rem 
      0024C4 24 BA                    1 	.word LINK 
                           0024C6     2 	LINK=.
      0024C6                          3 REMARK:
      0024C6 06                       4 	.byte 6 	
      0024C7 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0024CD 17 49                    6 	.word rem 
      0024CF                       6446 	_dict_entry,6,REBOOT,cold_start
      0024CF 24 C6                    1 	.word LINK 
                           0024D1     2 	LINK=.
      0024D1                          3 REBOOT:
      0024D1 06                       4 	.byte 6 	
      0024D2 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0024D8 05 7A                    6 	.word cold_start 
      0024DA                       6447 	_dict_entry,4+F_IFUNC,READ,read  
      0024DA 24 D1                    1 	.word LINK 
                           0024DC     2 	LINK=.
      0024DC                          3 READ:
      0024DC 44                       4 	.byte 4+F_IFUNC 	
      0024DD 52 45 41 44              5 	.ascii "READ"
      0024E1 23 7A                    6 	.word read 
      0024E3                       6448 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      0024E3 24 DC                    1 	.word LINK 
                           0024E5     2 	LINK=.
      0024E5                          3 QKEY:
      0024E5 44                       4 	.byte 4+F_IFUNC 	
      0024E6 51 4B 45 59              5 	.ascii "QKEY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0024EA 1E D1                    6 	.word qkey 
      0024EC                       6449 	_dict_entry,4+F_IFUNC,PRTI,const_porti 
      0024EC 24 E5                    1 	.word LINK 
                           0024EE     2 	LINK=.
      0024EE                          3 PRTI:
      0024EE 44                       4 	.byte 4+F_IFUNC 	
      0024EF 50 52 54 49              5 	.ascii "PRTI"
      0024F3 22 C6                    6 	.word const_porti 
      0024F5                       6450 	_dict_entry,4+F_IFUNC,PRTH,const_porth 
      0024F5 24 EE                    1 	.word LINK 
                           0024F7     2 	LINK=.
      0024F7                          3 PRTH:
      0024F7 44                       4 	.byte 4+F_IFUNC 	
      0024F8 50 52 54 48              5 	.ascii "PRTH"
      0024FC 22 C0                    6 	.word const_porth 
      0024FE                       6451 	_dict_entry,4+F_IFUNC,PRTG,const_portg 
      0024FE 24 F7                    1 	.word LINK 
                           002500     2 	LINK=.
      002500                          3 PRTG:
      002500 44                       4 	.byte 4+F_IFUNC 	
      002501 50 52 54 47              5 	.ascii "PRTG"
      002505 22 BA                    6 	.word const_portg 
      002507                       6452 	_dict_entry,4+F_IFUNC,PRTF,const_portf
      002507 25 00                    1 	.word LINK 
                           002509     2 	LINK=.
      002509                          3 PRTF:
      002509 44                       4 	.byte 4+F_IFUNC 	
      00250A 50 52 54 46              5 	.ascii "PRTF"
      00250E 22 B4                    6 	.word const_portf 
      002510                       6453 	_dict_entry,4+F_IFUNC,PRTE,const_porte
      002510 25 09                    1 	.word LINK 
                           002512     2 	LINK=.
      002512                          3 PRTE:
      002512 44                       4 	.byte 4+F_IFUNC 	
      002513 50 52 54 45              5 	.ascii "PRTE"
      002517 22 AE                    6 	.word const_porte 
      002519                       6454 	_dict_entry,4+F_IFUNC,PRTD,const_portd
      002519 25 12                    1 	.word LINK 
                           00251B     2 	LINK=.
      00251B                          3 PRTD:
      00251B 44                       4 	.byte 4+F_IFUNC 	
      00251C 50 52 54 44              5 	.ascii "PRTD"
      002520 22 A8                    6 	.word const_portd 
      002522                       6455 	_dict_entry,4+F_IFUNC,PRTC,const_portc
      002522 25 1B                    1 	.word LINK 
                           002524     2 	LINK=.
      002524                          3 PRTC:
      002524 44                       4 	.byte 4+F_IFUNC 	
      002525 50 52 54 43              5 	.ascii "PRTC"
      002529 22 A2                    6 	.word const_portc 
      00252B                       6456 	_dict_entry,4+F_IFUNC,PRTB,const_portb
      00252B 25 24                    1 	.word LINK 
                           00252D     2 	LINK=.
      00252D                          3 PRTB:
      00252D 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00252E 50 52 54 42              5 	.ascii "PRTB"
      002532 22 9C                    6 	.word const_portb 
      002534                       6457 	_dict_entry,4+F_IFUNC,PRTA,const_porta 
      002534 25 2D                    1 	.word LINK 
                           002536     2 	LINK=.
      002536                          3 PRTA:
      002536 44                       4 	.byte 4+F_IFUNC 	
      002537 50 52 54 41              5 	.ascii "PRTA"
      00253B 22 96                    6 	.word const_porta 
      00253D                       6458 	_dict_entry 5,PRINT,print 
      00253D 25 36                    1 	.word LINK 
                           00253F     2 	LINK=.
      00253F                          3 PRINT:
      00253F 05                       4 	.byte 5 	
      002540 50 52 49 4E 54           5 	.ascii "PRINT"
      002545 16 5A                    6 	.word print 
      002547                       6459 	_dict_entry,4+F_IFUNC,POUT,const_output
      002547 25 3F                    1 	.word LINK 
                           002549     2 	LINK=.
      002549                          3 POUT:
      002549 44                       4 	.byte 4+F_IFUNC 	
      00254A 50 4F 55 54              5 	.ascii "POUT"
      00254E 22 EA                    6 	.word const_output 
      002550                       6460 	_dict_entry,4,POKE,poke 
      002550 25 49                    1 	.word LINK 
                           002552     2 	LINK=.
      002552                          3 POKE:
      002552 04                       4 	.byte 4 	
      002553 50 4F 4B 45              5 	.ascii "POKE"
      002557 17 E2                    6 	.word poke 
      002559                       6461 	_dict_entry,4+F_IFUNC,PINP,const_input
      002559 25 52                    1 	.word LINK 
                           00255B     2 	LINK=.
      00255B                          3 PINP:
      00255B 44                       4 	.byte 4+F_IFUNC 	
      00255C 50 49 4E 50              5 	.ascii "PINP"
      002560 22 F0                    6 	.word const_input 
      002562                       6462 	_dict_entry,4+F_IFUNC,PEEK,peek 
      002562 25 5B                    1 	.word LINK 
                           002564     2 	LINK=.
      002564                          3 PEEK:
      002564 44                       4 	.byte 4+F_IFUNC 	
      002565 50 45 45 4B              5 	.ascii "PEEK"
      002569 17 F5                    6 	.word peek 
      00256B                       6463 	_dict_entry,5,PMODE,pin_mode 
      00256B 25 64                    1 	.word LINK 
                           00256D     2 	LINK=.
      00256D                          3 PMODE:
      00256D 05                       4 	.byte 5 	
      00256E 50 4D 4F 44 45           5 	.ascii "PMODE"
      002573 20 A0                    6 	.word pin_mode 
      002575                       6464 	_dict_entry,5,PAUSE,pause 
      002575 25 6D                    1 	.word LINK 
                           002577     2 	LINK=.
      002577                          3 PAUSE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002577 05                       4 	.byte 5 	
      002578 50 41 55 53 45           5 	.ascii "PAUSE"
      00257D 1F 88                    6 	.word pause 
      00257F                       6465 	_dict_entry,2+F_IFUNC,OR,bit_or
      00257F 25 77                    1 	.word LINK 
                           002581     2 	LINK=.
      002581                          3 OR:
      002581 42                       4 	.byte 2+F_IFUNC 	
      002582 4F 52                    5 	.ascii "OR"
      002584 20 1E                    6 	.word bit_or 
      002586                       6466 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      002586 25 81                    1 	.word LINK 
                           002588     2 	LINK=.
      002588                          3 ODR:
      002588 43                       4 	.byte 3+F_IFUNC 	
      002589 4F 44 52                 5 	.ascii "ODR"
      00258C 22 CC                    6 	.word const_odr 
      00258E                       6467 	_dict_entry,3+F_IFUNC,NOT,func_not 
      00258E 25 88                    1 	.word LINK 
                           002590     2 	LINK=.
      002590                          3 NOT:
      002590 43                       4 	.byte 3+F_IFUNC 	
      002591 4E 4F 54                 5 	.ascii "NOT"
      002594 21 D7                    6 	.word func_not 
      002596                       6468 	_dict_entry,3,NEW,new
      002596 25 90                    1 	.word LINK 
                           002598     2 	LINK=.
      002598                          3 NEW:
      002598 03                       4 	.byte 3 	
      002599 4E 45 57                 5 	.ascii "NEW"
      00259C 1B 8B                    6 	.word new 
      00259E                       6469 	_dict_entry,4,NEXT,next 
      00259E 25 98                    1 	.word LINK 
                           0025A0     2 	LINK=.
      0025A0                          3 NEXT:
      0025A0 04                       4 	.byte 4 	
      0025A1 4E 45 58 54              5 	.ascii "NEXT"
      0025A5 18 C1                    6 	.word next 
      0025A7                       6470 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0025A7 25 A0                    1 	.word LINK 
                           0025A9     2 	LINK=.
      0025A9                          3 LSHIFT:
      0025A9 46                       4 	.byte 6+F_IFUNC 	
      0025AA 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0025B0 20 5A                    6 	.word lshift 
      0025B2                       6471 	_dict_entry,3+F_IFUNC,LOG,log2 
      0025B2 25 A9                    1 	.word LINK 
                           0025B4     2 	LINK=.
      0025B4                          3 LOG:
      0025B4 43                       4 	.byte 3+F_IFUNC 	
      0025B5 4C 4F 47                 5 	.ascii "LOG"
      0025B8 22 23                    6 	.word log2 
      0025BA                       6472 	_dict_entry,4,LOAD,load 
      0025BA 25 B4                    1 	.word LINK 
                           0025BC     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0025BC                          3 LOAD:
      0025BC 04                       4 	.byte 4 	
      0025BD 4C 4F 41 44              5 	.ascii "LOAD"
      0025C1 1D 42                    6 	.word load 
      0025C3                       6473 	_dict_entry 4,LIST,list
      0025C3 25 BC                    1 	.word LINK 
                           0025C5     2 	LINK=.
      0025C5                          3 LIST:
      0025C5 04                       4 	.byte 4 	
      0025C6 4C 49 53 54              5 	.ascii "LIST"
      0025CA 14 1E                    6 	.word list 
      0025CC                       6474 	_dict_entry 3,LET,let 
      0025CC 25 C5                    1 	.word LINK 
                           0025CE     2 	LINK=.
      0025CE                          3 LET:
      0025CE 03                       4 	.byte 3 	
      0025CF 4C 45 54                 5 	.ascii "LET"
      0025D2 13 F6                    6 	.word let 
      0025D4                       6475 	_dict_entry,3+F_IFUNC,KEY,key 
      0025D4 25 CE                    1 	.word LINK 
                           0025D6     2 	LINK=.
      0025D6                          3 KEY:
      0025D6 43                       4 	.byte 3+F_IFUNC 	
      0025D7 4B 45 59                 5 	.ascii "KEY"
      0025DA 1E C9                    6 	.word key 
      0025DC                       6476 	_dict_entry,7,IWDGREF,refresh_iwdg
      0025DC 25 D6                    1 	.word LINK 
                           0025DE     2 	LINK=.
      0025DE                          3 IWDGREF:
      0025DE 07                       4 	.byte 7 	
      0025DF 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0025E6 22 1E                    6 	.word refresh_iwdg 
      0025E8                       6477 	_dict_entry,6,IWDGEN,enable_iwdg
      0025E8 25 DE                    1 	.word LINK 
                           0025EA     2 	LINK=.
      0025EA                          3 IWDGEN:
      0025EA 06                       4 	.byte 6 	
      0025EB 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      0025F1 21 E6                    6 	.word enable_iwdg 
      0025F3                       6478 	_dict_entry,6+F_IFUNC,INVERT,invert 
      0025F3 25 EA                    1 	.word LINK 
                           0025F5     2 	LINK=.
      0025F5                          3 INVERT:
      0025F5 46                       4 	.byte 6+F_IFUNC 	
      0025F6 49 4E 56 45 52 54        5 	.ascii "INVERT"
      0025FC 22 5C                    6 	.word invert 
      0025FE                       6479 	_dict_entry,5,INPUT,input_var  
      0025FE 25 F5                    1 	.word LINK 
                           002600     2 	LINK=.
      002600                          3 INPUT:
      002600 05                       4 	.byte 5 	
      002601 49 4E 50 55 54           5 	.ascii "INPUT"
      002606 16 E2                    6 	.word input_var 
      002608                       6480 	_dict_entry,2,IF,if 
      002608 26 00                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                           00260A     2 	LINK=.
      00260A                          3 IF:
      00260A 02                       4 	.byte 2 	
      00260B 49 46                    5 	.ascii "IF"
      00260D 18 28                    6 	.word if 
      00260F                       6481 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      00260F 26 0A                    1 	.word LINK 
                           002611     2 	LINK=.
      002611                          3 IDR:
      002611 43                       4 	.byte 3+F_IFUNC 	
      002612 49 44 52                 5 	.ascii "IDR"
      002615 22 D2                    6 	.word const_idr 
      002617                       6482 	_dict_entry,3,HEX,hex_base
      002617 26 11                    1 	.word LINK 
                           002619     2 	LINK=.
      002619                          3 HEX:
      002619 03                       4 	.byte 3 	
      00261A 48 45 58                 5 	.ascii "HEX"
      00261D 13 C0                    6 	.word hex_base 
      00261F                       6483 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      00261F 26 19                    1 	.word LINK 
                           002621     2 	LINK=.
      002621                          3 GPIO:
      002621 44                       4 	.byte 4+F_IFUNC 	
      002622 47 50 49 4F              5 	.ascii "GPIO"
      002626 1E DC                    6 	.word gpio 
      002628                       6484 	_dict_entry,4,GOTO,goto 
      002628 26 21                    1 	.word LINK 
                           00262A     2 	LINK=.
      00262A                          3 GOTO:
      00262A 04                       4 	.byte 4 	
      00262B 47 4F 54 4F              5 	.ascii "GOTO"
      00262F 19 46                    6 	.word goto 
      002631                       6485 	_dict_entry,5,GOSUB,gosub 
      002631 26 2A                    1 	.word LINK 
                           002633     2 	LINK=.
      002633                          3 GOSUB:
      002633 05                       4 	.byte 5 	
      002634 47 4F 53 55 42           5 	.ascii "GOSUB"
      002639 19 61                    6 	.word gosub 
      00263B                       6486 	_dict_entry,6,FORGET,forget 
      00263B 26 33                    1 	.word LINK 
                           00263D     2 	LINK=.
      00263D                          3 FORGET:
      00263D 06                       4 	.byte 6 	
      00263E 46 4F 52 47 45 54        5 	.ascii "FORGET"
      002644 1D 7D                    6 	.word forget 
      002646                       6487 	_dict_entry,3,FOR,for 
      002646 26 3D                    1 	.word LINK 
                           002648     2 	LINK=.
      002648                          3 FOR:
      002648 03                       4 	.byte 3 	
      002649 46 4F 52                 5 	.ascii "FOR"
      00264C 18 3C                    6 	.word for 
      00264E                       6488 	_dict_entry,4,FCPU,fcpu 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00264E 26 48                    1 	.word LINK 
                           002650     2 	LINK=.
      002650                          3 FCPU:
      002650 04                       4 	.byte 4 	
      002651 46 43 50 55              5 	.ascii "FCPU"
      002655 20 94                    6 	.word fcpu 
      002657                       6489 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      002657 26 50                    1 	.word LINK 
                           002659     2 	LINK=.
      002659                          3 EEPROM:
      002659 46                       4 	.byte 6+F_IFUNC 	
      00265A 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      002660 22 F6                    6 	.word const_eeprom_base 
      002662                       6490 	_dict_entry,6+F_CMD,DWRITE,digital_write
      002662 26 59                    1 	.word LINK 
                           002664     2 	LINK=.
      002664                          3 DWRITE:
      002664 06                       4 	.byte 6+F_CMD 	
      002665 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00266B 1B 00                    6 	.word digital_write 
      00266D                       6491 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00266D 26 64                    1 	.word LINK 
                           00266F     2 	LINK=.
      00266F                          3 DREAD:
      00266F 45                       4 	.byte 5+F_IFUNC 	
      002670 44 52 45 41 44           5 	.ascii "DREAD"
      002675 1A CE                    6 	.word digital_read 
      002677                       6492 	_dict_entry,2,DO,do_loop
      002677 26 6F                    1 	.word LINK 
                           002679     2 	LINK=.
      002679                          3 DO:
      002679 02                       4 	.byte 2 	
      00267A 44 4F                    5 	.ascii "DO"
      00267C 22 6D                    6 	.word do_loop 
      00267E                       6493 	_dict_entry,3,DIR,directory 
      00267E 26 79                    1 	.word LINK 
                           002680     2 	LINK=.
      002680                          3 DIR:
      002680 03                       4 	.byte 3 	
      002681 44 49 52                 5 	.ascii "DIR"
      002684 1D C8                    6 	.word directory 
      002686                       6494 	_dict_entry,3,DEC,dec_base
      002686 26 80                    1 	.word LINK 
                           002688     2 	LINK=.
      002688                          3 DEC:
      002688 03                       4 	.byte 3 	
      002689 44 45 43                 5 	.ascii "DEC"
      00268C 13 C5                    6 	.word dec_base 
      00268E                       6495 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      00268E 26 88                    1 	.word LINK 
                           002690     2 	LINK=.
      002690                          3 DDR:
      002690 43                       4 	.byte 3+F_IFUNC 	
      002691 44 44 52                 5 	.ascii "DDR"
      002694 22 D8                    6 	.word const_ddr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      002696                       6496 	_dict_entry,6,DATALN,data_line  
      002696 26 90                    1 	.word LINK 
                           002698     2 	LINK=.
      002698                          3 DATALN:
      002698 06                       4 	.byte 6 	
      002699 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      00269F 23 02                    6 	.word data_line 
      0026A1                       6497 	_dict_entry,4,DATA,data  
      0026A1 26 98                    1 	.word LINK 
                           0026A3     2 	LINK=.
      0026A3                          3 DATA:
      0026A3 04                       4 	.byte 4 	
      0026A4 44 41 54 41              5 	.ascii "DATA"
      0026A8 22 FC                    6 	.word data 
      0026AA                       6498 	_dict_entry,3+F_IFUNC,CRL,const_cr1 
      0026AA 26 A3                    1 	.word LINK 
                           0026AC     2 	LINK=.
      0026AC                          3 CRL:
      0026AC 43                       4 	.byte 3+F_IFUNC 	
      0026AD 43 52 4C                 5 	.ascii "CRL"
      0026B0 22 DE                    6 	.word const_cr1 
      0026B2                       6499 	_dict_entry,3+F_IFUNC,CRH,const_cr2 
      0026B2 26 AC                    1 	.word LINK 
                           0026B4     2 	LINK=.
      0026B4                          3 CRH:
      0026B4 43                       4 	.byte 3+F_IFUNC 	
      0026B5 43 52 48                 5 	.ascii "CRH"
      0026B8 22 E4                    6 	.word const_cr2 
      0026BA                       6500 	_dict_entry,4+F_CFUNC,CHAR,char
      0026BA 26 B4                    1 	.word LINK 
                           0026BC     2 	LINK=.
      0026BC                          3 CHAR:
      0026BC 84                       4 	.byte 4+F_CFUNC 	
      0026BD 43 48 41 52              5 	.ascii "CHAR"
      0026C1 1E 95                    6 	.word char 
      0026C3                       6501 	_dict_entry,3,BYE,bye 
      0026C3 26 BC                    1 	.word LINK 
                           0026C5     2 	LINK=.
      0026C5                          3 BYE:
      0026C5 03                       4 	.byte 3 	
      0026C6 42 59 45                 5 	.ascii "BYE"
      0026C9 1F 33                    6 	.word bye 
      0026CB                       6502 	_dict_entry,5,BTOGL,bit_toggle
      0026CB 26 C5                    1 	.word LINK 
                           0026CD     2 	LINK=.
      0026CD                          3 BTOGL:
      0026CD 05                       4 	.byte 5 	
      0026CE 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0026D3 17 A3                    6 	.word bit_toggle 
      0026D5                       6503 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      0026D5 26 CD                    1 	.word LINK 
                           0026D7     2 	LINK=.
      0026D7                          3 BTEST:
      0026D7 45                       4 	.byte 5+F_IFUNC 	
      0026D8 42 54 45 53 54           5 	.ascii "BTEST"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      0026DD 17 B7                    6 	.word bit_test 
      0026DF                       6504 	_dict_entry,4,BSET,bit_set 
      0026DF 26 D7                    1 	.word LINK 
                           0026E1     2 	LINK=.
      0026E1                          3 BSET:
      0026E1 04                       4 	.byte 4 	
      0026E2 42 53 45 54              5 	.ascii "BSET"
      0026E6 17 7A                    6 	.word bit_set 
      0026E8                       6505 	_dict_entry,4,BRES,bit_reset
      0026E8 26 E1                    1 	.word LINK 
                           0026EA     2 	LINK=.
      0026EA                          3 BRES:
      0026EA 04                       4 	.byte 4 	
      0026EB 42 52 45 53              5 	.ascii "BRES"
      0026EF 17 8E                    6 	.word bit_reset 
      0026F1                       6506 	_dict_entry,5,BREAK,break 
      0026F1 26 EA                    1 	.word LINK 
                           0026F3     2 	LINK=.
      0026F3                          3 BREAK:
      0026F3 05                       4 	.byte 5 	
      0026F4 42 52 45 41 4B           5 	.ascii "BREAK"
      0026F9 1B 3F                    6 	.word break 
      0026FB                       6507 	_dict_entry,3+F_IFUNC,BIT,bitmask
      0026FB 26 F3                    1 	.word LINK 
                           0026FD     2 	LINK=.
      0026FD                          3 BIT:
      0026FD 43                       4 	.byte 3+F_IFUNC 	
      0026FE 42 49 54                 5 	.ascii "BIT"
      002701 22 40                    6 	.word bitmask 
      002703                       6508 	_dict_entry,3,AWU,awu 
      002703 26 FD                    1 	.word LINK 
                           002705     2 	LINK=.
      002705                          3 AWU:
      002705 03                       4 	.byte 3 	
      002706 41 57 55                 5 	.ascii "AWU"
      002709 1F 9B                    6 	.word awu 
      00270B                       6509 	_dict_entry,7,AUTORUN,autorun
      00270B 27 05                    1 	.word LINK 
                           00270D     2 	LINK=.
      00270D                          3 AUTORUN:
      00270D 07                       4 	.byte 7 	
      00270E 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002715 1F 3C                    6 	.word autorun 
      002717                       6510 	_dict_entry,3+F_IFUNC,ASC,ascii
      002717 27 0D                    1 	.word LINK 
                           002719     2 	LINK=.
      002719                          3 ASC:
      002719 43                       4 	.byte 3+F_IFUNC 	
      00271A 41 53 43                 5 	.ascii "ASC"
      00271D 1E A9                    6 	.word ascii 
      00271F                       6511 	_dict_entry,3+F_IFUNC,AND,bit_and
      00271F 27 19                    1 	.word LINK 
                           002721     2 	LINK=.
      002721                          3 AND:
      002721 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      002722 41 4E 44                 5 	.ascii "AND"
      002725 20 00                    6 	.word bit_and 
      002727                       6512 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      002727 27 21                    1 	.word LINK 
                           002729     2 	LINK=.
      002729                          3 ADCREAD:
      002729 47                       4 	.byte 7+F_IFUNC 	
      00272A 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002731 1A 98                    6 	.word analog_read 
      002733                       6513 	_dict_entry,5,ADCON,power_adc 
      002733 27 29                    1 	.word LINK 
                           002735     2 	LINK=.
      002735                          3 ADCON:
      002735 05                       4 	.byte 5 	
      002736 41 44 43 4F 4E           5 	.ascii "ADCON"
      00273B 1A 4B                    6 	.word power_adc 
      00273D                       6514 kword_dict:
      00273D                       6515 	_dict_entry,3+F_IFUNC,ABS,abs
      00273D 27 35                    1 	.word LINK 
                           00273F     2 	LINK=.
      00273F                          3 ABS:
      00273F 43                       4 	.byte 3+F_IFUNC 	
      002740 41 42 53                 5 	.ascii "ABS"
      002743 1F EA                    6 	.word abs 
                                   6516 	
                                   6517 
      002780                       6518 	.bndry 128 ; align on FLASH block.
                                   6519 ; free space for user application  
      002780                       6520 user_space:
                                   6521 ; USR() function test
      002780 89               [ 2] 6522 	pushw x 
      002781 72 1A 50 0A      [ 1] 6523 	bset PC_ODR,#5 
      002785 85               [ 2] 6524 	popw x 
      002786 CD 1F 92         [ 4] 6525 	call pause02 
      002789 72 1B 50 0A      [ 1] 6526 	bres PC_ODR,#5 
      00278D 81               [ 4] 6527 	ret
                                   6528 
                                   6529 	.area FLASH_DRIVE (ABS)
      010000                       6530 	.org 0x10000
      010000                       6531 fdrive:
                                   6532 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00273F R   |   5 ADCON      002735 R
  5 ADCREAD    002729 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDR    =  000001 
    ADD_SPAC=  000003     |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   5 AND        002721 R   |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        002719 R   |     ATTRIB  =  000002 
  5 AUTORUN    00270D R   |     AUTORUN_=  004000     |   5 AWU        002705 R
  5 AWUHandl   00000A R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   5 BIT        0026FD R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  000005     |   5 BREAK      0026F3 R
  5 BRES       0026EA R   |   5 BSET       0026E1 R   |     BSIZE   =  000001 
    BSP     =  000008     |   5 BTEST      0026D7 R   |   5 BTOGL      0026CD R
    BTW     =  000001     |     BUFIDX  =  000003     |   5 BYE        0026C5 R
    C       =  000001     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       0026BC R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        0026B4 R
  5 CRL        0026AC R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   5 DATA       0026A3 R
  5 DATALN     002698 R   |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |   5 DDR        002690 R
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  5 DEC        002688 R   |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        002680 R   |     DIVIDND =  000007 
    DIVISR  =  000005     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  5 DO         002679 R   |   5 DREAD      00266F R   |     DSTACK_S=  000020 
  5 DWRITE     002664 R   |   5 EEPROM     002659 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     EOF     =  0000FF 
    ERR_BAD_=  00000A     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_D=  00000C     |     ERR_NO_L=  000005     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       002650 R   |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FIRST_DA=  000006 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLOOP   =  000002     |     FLSI    =  01F400     |   5 FOR        002648 R
  5 FORGET     00263D R   |     FRUN    =  000000     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FTRAP   =  000001     |     F_CFUNC =  000080 
    F_CMD   =  000000     |     F_CONST =  0000C0     |     F_IFUNC =  000040 
  5 GOSUB      002633 R   |   5 GOTO       00262A R   |   5 GPIO       002621 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   5 HEX        002619 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        002611 R   |   5 IF         00260A R   |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      002600 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   5 INVERT     0025F5 R
    INW     =  000003     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  5 IWDGEN     0025EA R   |   5 IWDGREF    0025DE R   |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   5 KEY        0025D6 R
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000005 
  5 LET        0025CE R   |     LINENO  =  000005     |   5 LINK    =  00273F R
  5 LIST       0025C5 R   |     LL      =  000002     |     LLEN    =  000002 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   5 LOAD       0025BC R
  5 LOG        0025B4 R   |   5 LSHIFT     0025A9 R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        002598 R
  5 NEXT       0025A0 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NL      =  00000A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   5 NOT        002590 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R
  5 ODR        002588 R   |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         002581 R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000028     |   5 PAUSE      002577 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       002564 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       00255B R   |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      00256D R
  5 POKE       002552 R   |   5 POUT       002549 R   |     PREV    =  000001 
  5 PRINT      00253F R   |     PROD    =  000002     |   5 PRTA       002536 R
  5 PRTB       00252D R   |   5 PRTC       002524 R   |   5 PRTD       00251B R
  5 PRTE       002512 R   |   5 PRTF       002509 R   |   5 PRTG       002500 R
  5 PRTH       0024F7 R   |   5 PRTI       0024EE R   |     PSIZE   =  000001 
  5 QKEY       0024E5 R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 READ       0024DC R   |   5 REBOOT     0024D1 R
  5 REG_A      0009C0 R   |   5 REG_CC     0009C4 R   |   5 REG_EPC    0009B3 R
  5 REG_SP     0009C9 R   |   5 REG_X      0009BC R   |   5 REG_Y      0009B8 R
    RELOP   =  000005     |   5 REMARK     0024C6 R   |   5 RESTORE    0024BA R
    RETL1   =  000001     |   5 RETURN     0024AF R   |     RET_ADDR=  000003 
    RET_INW =  000005     |   5 RND        0024A7 R   |     ROP     =  004800 
  5 RSHIFT     00249C R   |     RST_SR  =  0050B3     |   5 RUN        002494 R
    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       00248B R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       002482 R   |     SIGN    =  000001 
  5 SIZE       002479 R   |     SKIP    =  000005     |   5 SLEEP      00246F R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     000976 R   |   5 STEP       002466 R
  5 STOP       00245D R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      002453 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_SR_=  000000     |   5 TIMEOUT    00243D R   |   5 TIMER      002449 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000002 
    TK_CFUNC=  000008     |     TK_CHAR =  000003     |     TK_CMD  =  000006 
    TK_COLON=  000001     |     TK_COMMA=  00000D     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000007 
    TK_INTGR=  000004     |     TK_LE   =  000036     |     TK_LPARE=  00000B 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  00000A     |     TK_RPARE=  00000C 
    TK_SHARP=  00000E     |     TK_VAR  =  000005     |   5 TO         002436 R
  5 TONE       00242D R   |   5 Timer4Up   00003E R   |   5 TrapHand   00002F R
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     002422 R   |   5 UBTN_Han   000081 R   |   5 UFLASH     002417 R
  5 UNTIL      00240D R   |   5 USER_ABO   000089 R   |     USE_BLOC=  000000 
  5 USR        002405 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   5 Uart1RxH   000018 R   |   5 UserButt   000054 R
    VSIZ    =  000002     |     VSIZE   =  000006     |     VT      =  00000B 
  5 WAIT       0023FC R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      0023F2 R   |   5 WRITE      0023E8 R   |     WWDG_CR =  0050D1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

    WWDG_WR =  0050D2     |     XADR    =  000001     |     XMASK   =  000001 
  5 XOR        0023E0 R   |   5 XPEEK      0023D6 R   |     XSAVE   =  000005 
    YSAVE   =  000003     |   5 abs        001FEA R   |   1 acc16      00000C R
  1 acc24      00000B R   |   1 acc8       00000D R   |   5 accept_c   000B6C R
  5 add        0010D6 R   |   5 analog_r   001A98 R   |   5 ansi_seq   000B2E R
  5 arduino_   0020F5 R   |   5 arg_list   001215 R   |   1 array_si   000023 R
  5 ascii      001EA9 R   |   5 at_tst     000E39 R   |   5 atoi24     000F4C R
  5 atoi_exi   000FBA R   |   5 autorun    001F3C R   |   5 autorun_   00066D R
  5 awu        001F9B R   |   5 awu02      001FA5 R   |   5 bad_port   001F0A R
  1 base       00000A R   |   1 basicptr   000004 R   |   5 beep       001A07 R
  5 bin_exit   000D3D R   |   5 bit_and    002000 R   |   5 bit_or     00201E R
  5 bit_rese   00178E R   |   5 bit_set    00177A R   |   5 bit_test   0017B7 R
  5 bit_togg   0017A3 R   |   5 bit_xor    00203C R   |   5 bitmask    002240 R
  5 bkslsh_t   000DE4 R   |   5 bksp       0001E8 R   |   5 break      001B3F R
  5 break_po   001B6D R   |   5 bye        001F33 R   |   5 char       001E95 R
  5 check_fu   00040B R   |   5 clear_ba   000682 R   |   5 clear_va   000515 R
  5 clock_in   0000A4 R   |   5 cmd_itf    000B90 R   |   5 cmd_line   00082A R
  5 cmd_name   001181 R   |   5 cmp_name   001BE1 R   |   5 cold_sta   00057A R
  5 colon_ts   000E0D R   |   5 comma_ts   000E18 R   |   5 compile    00041A R
  5 const_cr   0022DE R   |   5 const_cr   0022E4 R   |   5 const_dd   0022D8 R
  5 const_ee   0022F6 R   |   5 const_id   0022D2 R   |   5 const_in   0022F0 R
  5 const_od   0022CC R   |   5 const_ou   0022EA R   |   5 const_po   002296 R
  5 const_po   00229C R   |   5 const_po   0022A2 R   |   5 const_po   0022A8 R
  5 const_po   0022AE R   |   5 const_po   0022B4 R   |   5 const_po   0022BA R
  5 const_po   0022C0 R   |   5 const_po   0022C6 R   |   5 convert_   000CC5 R
  1 count      000003 R   |   5 cp_loop    0011C4 R   |   5 create_g   00036A R
  5 cstk_pro   00109F R   |   5 dash_tst   000E2E R   |   5 data       0022FC R
  1 data_len   000009 R   |   5 data_lin   002302 R   |   1 data_ofs   000008 R
  1 data_ptr   000006 R   |   5 data_sea   002342 R   |   5 ddrop      001045 R
  5 ddrop_n    001062 R   |   5 ddup       00104E R   |   5 dec_base   0013C5 R
  5 del_back   000B5D R   |   5 del_line   000332 R   |   5 del_ln     000B4E R
  5 delete     0001F8 R   |   5 digital_   001ACE R   |   5 digital_   001B00 R
  5 dir_loop   001DD4 R   |   5 director   001DC8 R   |   5 divide     00112C R
  5 divu24_8   000ABB R   |   5 do_loop    00226D R   |   5 dotr       0010A9 R
  5 dotr_loo   0010BE R   |   5 dots       001075 R   |   5 dpick      00104E R
  5 dpop       00101E R   |   5 dpush      001011 R   |   5 drive_fr   001E51 R
  3 dstack     001760 R   |   3 dstack_e   001780 R   |   5 dstk_pro   00106B R
  1 dstkptr    00001C R   |   5 dswap      00102B R   |   5 enable_i   0021E6 R
  5 eql_tst    000E99 R   |   5 equal      00164D R   |   5 err_bad_   000761 R
  5 err_cmd_   000722 R   |   5 err_div0   0006E4 R   |   5 err_dupl   00073D R
  5 err_math   0006CA R   |   5 err_mem_   0006AD R   |   5 err_msg    000693 R
  5 err_no_a   00076E R   |   5 err_no_d   0007A2 R   |   5 err_no_l   0006F4 R
  5 err_not_   00074F R   |   5 err_run_   00070B R   |   5 err_synt   0006BB R
  5 escaped    000CDA R   |   5 expect     001208 R   |   5 expr_exi   001356 R
  5 expressi   001315 R   |   5 factor     001270 R   |   1 farptr     000016 R
  5 fcpu       002094 R   |   7 fdrive     010000 R   |   5 fetch      00104E R
  5 fetchc     000C7D R   |   1 ffree      000019 R   |   5 file_cou   001E49 R
  5 final_te   000B28 R   |   5 first_li   001449 R   |   1 flags      000025 R
  5 for        00183C R   |   5 forget     001D7D R   |   1 free_ram   00005C R
  5 func_arg   001239 R   |   5 func_not   0021D7 R   |   5 ge         00164F R
  5 get_arra   001249 R   |   5 get_targ   001930 R   |   5 get_tick   001FE4 R
  5 get_toke   000D7F R   |   5 getc       0001D4 R   |   5 gosub      001961 R
  5 goto       001946 R   |   5 gpio       001EDC R   |   5 gt         00164B R
  5 gt_tst     000EA4 R   |   5 hex_base   0013C0 R   |   5 if         001828 R
  1 in         000001 R   |   1 in.saved   000002 R   |   1 in.w       000000 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

  5 incr_far   001B96 R   |   5 input_ex   001746 R   |   5 input_lo   0016E4 R
  5 input_va   0016E2 R   |   5 insert_l   0003A3 R   |   5 insert_l   000408 R
  5 interp     0007FE R   |   5 interp_l   00083E R   |   5 invalid    000BD5 R
  5 invalid_   000C53 R   |   5 invert     00225C R   |   5 is_alpha   000523 R
  5 is_digit   000F37 R   |   5 itoa       000A74 R   |   5 itoa_loo   000A8C R
  5 jp_to_ta   001954 R   |   5 key        001EC9 R   |   5 kword_di   00273D R
  5 kword_en   0023D4 R   |   5 last_lin   001452 R   |   5 le         001654 R
  5 leading_   002230 R   |   5 ledoff     0008C6 R   |   5 ledon      0008C1 R
  5 ledtoggl   0008CB R   |   5 left_arr   000B2E R   |   5 left_par   0008D4 R
  5 let        0013F6 R   |   5 let02      001400 R   |   5 lines_sk   001457 R
  5 list       00141E R   |   5 list_exi   0014A0 R   |   5 list_sta   00147A R
  5 load       001D42 R   |   5 load_aut   000649 R   |   5 load_fil   001D11 R
  5 log2       002223 R   |   5 logical_   0021CD R   |   5 loop_bac   001909 R
  1 loop_dep   000022 R   |   5 loop_don   00191E R   |   5 lshift     00205A R
  5 lt         001652 R   |   5 lt_tst     000EDD R   |   5 mem_peek   000BF2 R
  5 modulo     001170 R   |   5 move       0002CC R   |   5 move_dow   0002EA R
  5 move_exi   00030B R   |   5 move_loo   0002EF R   |   5 move_up    0002DC R
  5 mul_char   00163C R   |   5 multiply   0010E4 R   |   5 mulu24_8   000FBE R
  5 nbr_tst    000DBA R   |   5 ne         001657 R   |   5 neg_acc2   000AE3 R
  5 new        001B8B R   |   5 next       0018C1 R   |   5 next_tok   00086C R
  5 no_match   0011D6 R   |   5 none       000D7F R   |   5 number     000C83 GR
  5 other      000F15 R   |   3 pad        001738 R   |   5 parse_bi   000D1D R
  5 parse_in   000CE2 R   |   5 parse_ke   000D45 R   |   5 parse_qu   000C8A R
  5 pause      001F88 R   |   5 pause02    001F92 R   |   5 peek       0017F5 R
  5 peek_byt   000C1D R   |   5 pin_mode   0020A0 R   |   5 plus_tst   000E6D R
  5 poke       0017E2 R   |   5 power_ad   001A4B R   |   5 prcnt_ts   000E8E R
  5 print      00165A R   |   5 print_ex   0016B6 R   |   5 print_fa   000C62 R
  5 print_in   000A16 R   |   5 print_re   000923 R   |   5 print_st   000BE5 R
  5 prt_basi   0014F3 R   |   5 prt_cmd_   0014A3 R   |   5 prt_loop   00165E R
  5 prt_peek   00027C R   |   5 prt_quot   0014B7 R   |   5 prt_reg1   000904 R
  5 prt_reg8   0008DF R   |   5 prt_regs   000212 R   |   5 prti24     0009CE R
  1 ptr16      000017 R   |   1 ptr8       000018 R   |   5 putc       0001CB R
  5 puts       0001DE R   |   5 qkey       001ED1 R   |   5 qmark_ts   000E44 R
  5 random     002115 R   |   5 read       00237A R   |   5 read01     00237C R
  5 readln     000B06 R   |   5 readln_l   000B0C R   |   5 readln_q   000B81 R
  5 refresh_   00221E R   |   5 regs_sta   000255 R   |   5 rel_exit   0013AD R
  5 relation   001359 R   |   5 relop_st   00163F R   |   5 rem        001749 R
  5 repl       000B9E R   |   5 repl_exi   000BC6 R   |   5 reprint    000B2E R
  5 reset_co   00165C R   |   5 rest_con   0016D2 R   |   5 restore    00232F R
  5 return     001981 R   |   5 right_ar   000B2E R   |   5 rparnt_t   000E02 R
  5 rshift     002077 R   |   5 run        00199F R   |   5 run_it     0019C7 R
  1 rx_char    000027 R   |   5 save       001C4D R   |   5 save_con   0016C2 R
  5 search_d   0011B3 R   |   5 search_e   001204 R   |   5 search_f   001C02 R
  5 search_l   00030E R   |   5 search_l   000316 R   |   5 search_n   0011B7 R
  1 seedx      000012 R   |   1 seedy      000014 R   |   5 seek_fdr   001BA4 R
  5 select_p   0020E5 R   |   5 set_time   0021B9 R   |   5 sharp_ts   000E23 R
  5 show       0013B0 R   |   5 single_c   001638 R   |   5 size       0013CA R
  5 skip       000FF8 R   |   5 slash_ts   000E83 R   |   5 sleep      001F7D R
  5 software   000534 R   |   5 spaces     000206 R   |   3 stack_fu   001780 R
  3 stack_un   001800 R   |   5 star_tst   000E78 R   |   5 step       001899 R
  5 stop       0019EE R   |   5 store      001058 R   |   5 store_lo   0018AE R
  5 str_matc   0011E5 R   |   5 str_tst    000DA9 R   |   5 strcmp     0002AD R
  5 strcpy     0002BE R   |   5 strlen     0002A0 R   |   5 substrac   0010DE R
  5 syntax_e   0007B8 R   |   1 tab_widt   000026 R   |   5 tb_error   0007BA R
  5 term       0012C8 R   |   5 term01     0012D1 R   |   5 term_exi   001312 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

  5 test_p     000BDD R   |   3 tib        0016E8 R   |   5 tick_tst   000E5B R
  1 ticks      00000E R   |   5 timeout    0021CA R   |   1 timer      000010 R
  5 timer2_i   0000BA R   |   5 timer4_i   0000C7 R   |   5 to         001866 R
  5 to_upper   000F40 GR  |   5 token_ch   000F24 R   |   5 token_ex   000F34 R
  5 tone       0019FD R   |   5 try_next   00236A R   |   1 txtbgn     00001E R
  1 txtend     000020 R   |   5 uart1_in   000190 R   |   5 uart1_se   0001A0 R
  5 ubound     0013D4 R   |   5 uflash     001F0F R   |   5 unget_to   00100B R
  5 unlock_e   0000DC R   |   5 unlock_f   0000EA R   |   5 until      002274 R
  5 user_int   000067 R   |   5 user_spa   002780 R   |   5 usr        001F15 R
  1 vars       000028 R   |   5 wait       00174F R   |   5 warm_ini   00062C R
  5 warm_sta   0007FB R   |   5 words      00217F R   |   5 write      001E5E R
  5 write_bl   00016D R   |   5 write_by   0000F8 R   |   5 write_ee   000134 R
  5 write_ex   000168 R   |   5 write_fl   00011E R   |   5 xpeek      001808 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5C   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    118   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   278E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

