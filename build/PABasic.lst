ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask with CC.
                                                ; bits 4:5 identify group 
                                                ; bits 0:2 are CC mask 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number 	_dbg_prt_regs 
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           000040    44 	DSTACK_SIZE=64 
                           000080    45 	STACK_SIZE=128
                           0017FF    46 	STACK_EMPTY=RAM_SIZE-1  
                           000000    47 	FRUN=0 ; flags run code in variable flags
                           000001    48 	FTRAP=1 ; inside trap handler 
                           000002    49 	FFOR=2 ; FOR loop in preparation 
                           000003    50 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    51 	FBREAK=4 ; break point flag 
                                     52 
      000000                         53 in.w:  .blkb 1 ; parser position in text line
      000001                         54 in:    .blkb 1 ; low byte of in.w
      000002                         55 count: .blkb 1 ; length of string in text line  
      000003                         56 basicptr:  .blkb 2  ; point to text buffer 
      000005                         57 lineno: .blkb 2  ; BASIC line number 
      000007                         58 base:  .blkb 1 ; nemeric base used to print integer 
      000008                         59 acc24: .blkb 1 ; 24 accumulator
      000009                         60 acc16: .blkb 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      00000A                         61 acc8:  .blkb 1
      00000B                         62 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000D                         63 seedx: .blkw 1  ; xorshift 16 seed x 
      00000F                         64 seedy: .blkw 1  ; xorshift 16 seed y 
      000011                         65 in.w.saved: .blkw 1 ; last parsed token value  
      000013                         66 farptr: .blkb 3 ; far pointer 
      000016                         67 ffree: .blkb 3 ; flash free address 
      000019                         68 dstkptr: .blkw 1  ; data stack pointer 
      00001B                         69 txtbgn: .ds 2 ; BASIC text beginning address 
      00001D                         70 txtend: .ds 2 ; BASIC text end address 
      00001F                         71 loop_depth: .ds 1 ; FOR loop depth 
      000020                         72 array_addr: .ds 2 ; address of @ array 
      000022                         73 array_size: .ds 2 ; array size 
      000024                         74 flags: .ds 1 ; boolean flags
      000025                         75 tab_width: .ds 1 ; print colon width (4)
      000026                         76 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     77 ; keep as last variable 
      00005A                         78 free_ram: ; from here RAM free for BASIC text 
                                     79 
                                     80 ;-----------------------------------
                                     81     .area SSEG (ABS)
                                     82 ;-----------------------------------	
      0016C8                         83     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         84 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         85 pad: .ds PAD_SIZE             ; working buffer
      001740                         86 dstack: .ds DSTACK_SIZE 
      001780                         87 dstack_unf: ; dstack underflow 
      001780                         88 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         89 stack_unf: ; stack underflow  
                                     90 
                                     91 
                                     92 ;--------------------------------------
                                     93     .area HOME 
                                     94 ;--------------------------------------
      000000 82 00 04 E4             95     int cold_start
                           000001    96 .if DEBUG
      000004 82 00 00 0A             97 	int TrapHandler 		;TRAP  software interrupt
                           000000    98 .else
                                     99 	int NonHandledInterrupt ;TRAP  software interrupt
                                    100 .endif
      000008 82 00 00 09            101 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            102 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            103 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            104 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            105 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            106 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            107 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 25            108 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            109 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            110 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            111 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            112 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            113 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            114 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            115 	int NonHandledInterrupt ;int14 TIM2 capture/compare
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000044 82 00 00 09            116 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            117 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            118 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            119 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            120 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            121 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            122 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            123 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            124 	int Timer4UpdateHandler	;int23 TIM4 update/overflow
      000068 82 00 00 09            125 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            126 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            127 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            128 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            129 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            130 	int NonHandledInterrupt ;int29  not used
                                    131 
                                    132 ;---------------------------------------
                                    133     .area CODE
                                    134 ;---------------------------------------
                           000001   135 .if DEBUG
      000000 54 42 49 5F 53 54 4D   136 .asciz "TBI_STM8" ; I like to put module name here.
             38 00
                                    137 .endif 
                                    138 
      000009                        139 NonHandledInterrupt:
      000009 71                     140     .byte 0x71  ; reinitialize MCU
                                    141 
                                    142 
                                    143 ;------------------------------------
                                    144 ; software interrupt handler  
                                    145 ;------------------------------------
                           000001   146 .if DEBUG 
      00000A                        147 TrapHandler:
      00000A 72 12 00 24      [ 1]  148 	bset flags,#FTRAP 
      00000E CD 08 05         [ 4]  149 	call print_registers
      000011 CD 0A 81         [ 4]  150 	call cmd_itf
      000014 72 13 00 24      [ 1]  151 	bres flags,#FTRAP 	
      000018 80               [11]  152 	iret
                                    153 .endif 
                                    154 
      000019                        155 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  156 	clr TIM4_SR 
      00001D CE 00 0B         [ 2]  157 	ldw x,ticks
      000020 5C               [ 1]  158 	incw x
      000021 CF 00 0B         [ 2]  159 	ldw ticks,x 
      000024 80               [11]  160 	iret 
                                    161 
                                    162 
                                    163 ;------------------------------------
                                    164 ; Triggered by pressing USER UserButton 
                                    165 ; on NUCLEO card.
                                    166 ;------------------------------------
      000025                        167 UserButtonHandler:
                                    168 ; wait button release
      000025 5F               [ 1]  169 	clrw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000026 5A               [ 2]  170 1$: decw x 
      000027 26 FD            [ 1]  171 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  172 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
      00002E 72 07 00 24 05   [ 2]  173     btjf flags,#FSLEEP,2$
      000033 72 17 00 24      [ 1]  174 	bres flags,#FSLEEP 
      000037 80               [11]  175 	iret
      000038 72 00 00 24 03   [ 2]  176 2$:	btjt flags,#FRUN,4$
      00003D CC 00 7B         [ 2]  177 	jp 9$ 
      000040 72 11 00 24      [ 1]  178 4$:	bres flags,#FRUN 
      000044 AE 00 83         [ 2]  179 	ldw x,#USER_ABORT
      000047 CD 02 30         [ 4]  180 	call puts 
      00004A CE 00 03         [ 2]  181 	ldw x,basicptr
      00004D FE               [ 2]  182 	ldw x,(x)
      00004E CF 00 09         [ 2]  183 	ldw acc16,x 
      000051 72 5F 00 08      [ 1]  184 	clr acc24 
      000055 5F               [ 1]  185 	clrw x 
      000056 A6 05            [ 1]  186 	ld a,#5
      000058 97               [ 1]  187 	ld xl,a 
      000059 A6 0A            [ 1]  188 	ld a,#10 
      00005B CD 08 B0         [ 4]  189 	call prti24
      00005E CE 00 03         [ 2]  190 	ldw x,basicptr 
      000061 1C 00 03         [ 2]  191 	addw x,#3  
      000064 CD 02 30         [ 4]  192 	call puts 
      000067 A6 0D            [ 1]  193 	ld a,#CR 
      000069 CD 02 1E         [ 4]  194 	call putc
      00006C 5F               [ 1]  195 	clrw x  
      00006D C6 00 01         [ 1]  196 	ld a,in 
      000070 AB 02            [ 1]  197 	add a,#2 ; adjustment for line number display 
      000072 97               [ 1]  198 	ld xl,a 
      000073 CD 02 58         [ 4]  199 	call spaces 
      000076 A6 5E            [ 1]  200 	ld a,#'^
      000078 CD 02 1E         [ 4]  201 	call putc 
      00007B                        202 9$:
      00007B AE 17 FF         [ 2]  203     ldw x,#STACK_EMPTY 
      00007E 94               [ 1]  204     ldw sp,x
      00007F 9A               [ 1]  205 	rim 
      000080 CC 07 01         [ 2]  206 	jp warm_start
                                    207 
                                    208 
      000083 0A 50 72 6F 67 72 61   209 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    210 
                                    211 
                                    212 ;----------------------------------------
                                    213 ; inialize MCU clock 
                                    214 ; input:
                                    215 ;   A 		source  HSI | 1 HSE 
                                    216 ;   XL      CLK_CKDIVR , clock divisor 
                                    217 ; output:
                                    218 ;   none 
                                    219 ;----------------------------------------
      00009E                        220 clock_init:	
      00009E C1 50 C3         [ 1]  221 	cp a,CLK_CMSR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      0000A1 27 0C            [ 1]  222 	jreq 2$ ; no switching required 
                                    223 ; select clock source 
      0000A3 72 12 50 C5      [ 1]  224 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A7 C7 50 C4         [ 1]  225 	ld CLK_SWR,a
      0000AA C1 50 C3         [ 1]  226 1$:	cp a,CLK_CMSR
      0000AD 26 FB            [ 1]  227 	jrne 1$
      0000AF                        228 2$: 	
                                    229 ; HSI and cpu clock divisor 
      0000AF 9F               [ 1]  230 	ld a,xl 
      0000B0 C7 50 C6         [ 1]  231 	ld CLK_CKDIVR,a  
      0000B3 81               [ 4]  232 	ret
                                    233 
                                    234 ;---------------------------------
                                    235 ; TIM4 is configured to generate an 
                                    236 ; interrupt every millisecond 
                                    237 ;----------------------------------
      0000B4                        238 timer4_init:
      0000B4 35 07 53 45      [ 1]  239 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B8 35 7D 53 46      [ 1]  240 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BC 35 05 53 40      [ 1]  241 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000C0 72 10 53 41      [ 1]  242 	bset TIM4_IER,#TIM4_IER_UIE 
      0000C4 81               [ 4]  243 	ret
                                    244 
                                    245 ;----------------------------------
                                    246 ; unlock EEPROM for writing/erasing
                                    247 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    248 ; input:
                                    249 ;  none
                                    250 ; output:
                                    251 ;  none 
                                    252 ;----------------------------------
      0000C5                        253 unlock_eeprom:
      0000C5 35 AE 50 64      [ 1]  254 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C9 35 56 50 64      [ 1]  255     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000CD 72 07 50 5F FB   [ 2]  256 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000D2 81               [ 4]  257 	ret
                                    258 
                                    259 ;----------------------------------
                                    260 ; unlock FLASH for writing/erasing
                                    261 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    262 ; input:
                                    263 ;  none
                                    264 ; output:
                                    265 ;  none
                                    266 ;----------------------------------
      0000D3                        267 unlock_flash:
      0000D3 35 56 50 62      [ 1]  268 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D7 35 AE 50 62      [ 1]  269 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000DB 72 03 50 5F FB   [ 2]  270 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000E0 81               [ 4]  271 	ret
                                    272 
                                    273 ;----------------------------
                                    274 ; erase block code must be 
                                    275 ;executed from RAM
                                    276 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    277 
                                    278 ; this code is copied to RAM 
      0000E1                        279 erase_start:
      0000E1 4F               [ 1]  280 	clr a 
      0000E2 72 1A 50 5B      [ 1]  281     bset FLASH_CR2,#FLASH_CR2_ERASE
      0000E6 72 1B 50 5C      [ 1]  282     bres FLASH_NCR2,#FLASH_CR2_ERASE
      0000EA 92 BD 00 13      [ 4]  283 	ldf [farptr],a
      0000EE 72 5C 00 15      [ 1]  284     inc farptr+2 
      0000F2 92 BD 00 13      [ 4]  285     ldf [farptr],a
      0000F6 72 5C 00 15      [ 1]  286     inc farptr+2 
      0000FA 92 BD 00 13      [ 4]  287     ldf [farptr],a
      0000FE 72 5C 00 15      [ 1]  288     inc farptr+2 
      000102 92 BD 00 13      [ 4]  289     ldf [farptr],a
      000106 72 05 50 5F FB   [ 2]  290 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00010B 81               [ 4]  291 	ret
      00010C                        292 erase_end:
                                    293 
                                    294 
      00010C                        295 move_code_in_ram:
      00010C AE 01 0C         [ 2]  296 	ldw x,#erase_end 
      00010F 1D 00 E1         [ 2]  297 	subw x,#erase_start
      000112 CF 00 09         [ 2]  298 	ldw acc16,x 
      000115 AE 17 18         [ 2]  299 	ldw x,#pad 
      000118 90 AE 00 E1      [ 2]  300 	ldw y,#erase_start 
      00011C CD 03 1E         [ 4]  301 	call move 
      00011F 81               [ 4]  302 	ret 
                                    303 
                                    304 ;-----------------------------------
                                    305 ; erase flash or EEPROM block 
                                    306 ; a block is 128 bytes 
                                    307 ; input:
                                    308 ;   farptr  address block begin
                                    309 ; output:
                                    310 ;   none
                                    311 ;--------------------------------------
      000120                        312 erase_block:
      000120 CE 00 14         [ 2]  313 	ldw x,farptr+1 
      000123 89               [ 2]  314 	pushw x 
      000124 CD 01 0C         [ 4]  315 	call move_code_in_ram 
      000127 85               [ 2]  316 	popw x 
      000128 CF 00 14         [ 2]  317 	ldw farptr+1,x 
      00012B 72 5D 00 13      [ 1]  318 	tnz farptr
      00012F 26 15            [ 1]  319 	jrne erase_flash 
      000131 AE 80 00         [ 2]  320 	ldw x,#FLASH_BASE 
      000134 C3 00 14         [ 2]  321 	cpw x,farptr+1 
      000137 2A 0D            [ 1]  322 	jrpl erase_flash 
                                    323 ; erase eeprom block
      000139 CD 00 C5         [ 4]  324 	call unlock_eeprom 
      00013C 9B               [ 1]  325 	sim 
      00013D CD 00 E1         [ 4]  326 	call erase_start  
      000140 72 17 50 5F      [ 1]  327 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000144 9A               [ 1]  328 	rim 
      000145 81               [ 4]  329 	ret 
                                    330 ; erase flash block:
      000146                        331 erase_flash:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000146 CD 00 D3         [ 4]  332 	call unlock_flash 
      000149 72 1A 50 5B      [ 1]  333 	bset FLASH_CR2,#FLASH_CR2_ERASE
      00014D 72 1B 50 5C      [ 1]  334 	bres FLASH_NCR2,#FLASH_CR2_ERASE
      000151 4F               [ 1]  335 	clr a 
      000152 9B               [ 1]  336 	sim 
      000153 CD 17 18         [ 4]  337 	call pad 
      000156 72 13 50 5F      [ 1]  338     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00015A 9A               [ 1]  339 	rim 
      00015B 81               [ 4]  340 	ret 
                                    341 
                                    342 
                                    343 
                                    344 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    345 ; write a byte to FLASH or EEPROM 
                                    346 ; input:
                                    347 ;    a  		byte to write
                                    348 ;    farptr  	address
                                    349 ;    x          farptr[x]
                                    350 ; output:
                                    351 ;    none
                                    352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    353 	; variables locales
                           000001   354 	BTW = 1   ; byte to write offset on stack
                           000002   355 	OPT = 2   ; OPTION flag offset on stack
                           000002   356 	VSIZE = 2
      00015C                        357 write_byte:
      00015C 90 89            [ 2]  358 	pushw y
      00015E                        359 	_vars VSIZE
      00015E 52 02            [ 2]    1     sub sp,#VSIZE 
      000160 6B 01            [ 1]  360 	ld (BTW,sp),a ; byte to write 
      000162 0F 02            [ 1]  361 	clr (OPT,sp)  ; OPTION flag
                                    362 ; put addr[15:0] in Y, for bounds check.
      000164 90 CE 00 14      [ 2]  363 	ldw y,farptr+1   ; Y=addr15:0
                                    364 ; check addr[23:16], if <> 0 then it is extened flash memory
      000168 72 5D 00 13      [ 1]  365 	tnz farptr 
      00016C 26 14            [ 1]  366 	jrne write_flash
      00016E 90 A3 1E 00      [ 2]  367     cpw y,#user_space
      000172 24 0E            [ 1]  368     jruge write_flash
      000174 90 A3 40 00      [ 2]  369 	cpw y,#EEPROM_BASE  
      000178 25 52            [ 1]  370     jrult write_exit
      00017A 90 A3 48 00      [ 2]  371 	cpw y,#OPTION_BASE
      00017E 25 18            [ 1]  372 	jrult write_eeprom
      000180 20 4A            [ 2]  373     jra write_exit
                                    374 ; write program memory
      000182                        375 write_flash:
      000182 CD 00 D3         [ 4]  376 	call unlock_flash 
      000185 9B               [ 1]  377 1$:	sim 
      000186 7B 01            [ 1]  378 	ld a,(BTW,sp)
      000188 92 A7 00 13      [ 4]  379 	ldf ([farptr],x),a ; farptr[x]=A
      00018C 72 05 50 5F FB   [ 2]  380 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000191 9A               [ 1]  381     rim 
      000192 72 13 50 5F      [ 1]  382     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000196 20 34            [ 2]  383     jra write_exit
                                    384 ; write eeprom and option
      000198                        385 write_eeprom:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000198 CD 00 C5         [ 4]  386 	call unlock_eeprom
                                    387 	; check for data eeprom or option eeprom
      00019B 90 A3 48 00      [ 2]  388 	cpw y,#OPTION_BASE
      00019F 2B 08            [ 1]  389 	jrmi 1$
      0001A1 90 A3 48 80      [ 2]  390 	cpw y,#OPTION_END+1
      0001A5 2A 02            [ 1]  391 	jrpl 1$
      0001A7 03 02            [ 1]  392 	cpl (OPT,sp)
      0001A9                        393 1$: 
      0001A9 0D 02            [ 1]  394     tnz (OPT,sp)
      0001AB 27 08            [ 1]  395     jreq 2$
                                    396 	; pour modifier une option il faut modifier ces 2 bits
      0001AD 72 1E 50 5B      [ 1]  397     bset FLASH_CR2,#FLASH_CR2_OPT
      0001B1 72 1F 50 5C      [ 1]  398     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0001B5                        399 2$: 
      0001B5 7B 01            [ 1]  400     ld a,(BTW,sp)
      0001B7 92 A7 00 13      [ 4]  401     ldf ([farptr],x),a
      0001BB 0D 02            [ 1]  402     tnz (OPT,sp)
      0001BD 27 08            [ 1]  403     jreq 3$
      0001BF 5C               [ 1]  404     incw x
      0001C0 7B 01            [ 1]  405     ld a,(BTW,sp)
      0001C2 43               [ 1]  406     cpl a
      0001C3 92 A7 00 13      [ 4]  407     ldf ([farptr],x),a
      0001C7 72 05 50 5F FB   [ 2]  408 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0001CC                        409 write_exit:
      0001CC                        410 	_drop VSIZE 
      0001CC 5B 02            [ 2]    1     addw sp,#VSIZE 
      0001CE 90 85            [ 2]  411 	popw y
      0001D0 81               [ 4]  412     ret
                                    413 
                                    414 ;--------------------------------------------
                                    415 ; write a data block to eeprom or flash 
                                    416 ; input:
                                    417 ;   Y        source address   
                                    418 ;   X        array index  destination  farptr[x]
                                    419 ;   BSIZE    block size bytes 
                                    420 ;   farptr   write address , byte* 
                                    421 ; output:
                                    422 ;	X 		after last byte written 
                                    423 ;   Y 		after last byte read 
                                    424 ;  farptr   point after block
                                    425 ;---------------------------------------------
      0001D1                        426 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      0001D1                        427 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    428 	; local var 
                           000001   429 	XSAVE=1 
                           000002   430 	VSIZE=2 
      0001D1                        431 write_block:
      0001D1                        432 	_vars VSIZE
      0001D1 52 02            [ 2]    1     sub sp,#VSIZE 
      0001D3 1F 01            [ 2]  433 	ldw (XSAVE,sp),x 
      0001D5 1E 05            [ 2]  434 	ldw x,(BSIZE,sp) 
      0001D7 27 13            [ 1]  435 	jreq 9$
      0001D9 1E 01            [ 2]  436 1$:	ldw x,(XSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0001DB 90 F6            [ 1]  437 	ld a,(y)
      0001DD CD 01 5C         [ 4]  438 	call write_byte 
      0001E0 5C               [ 1]  439 	incw x 
      0001E1 90 5C            [ 1]  440 	incw y 
      0001E3 1F 01            [ 2]  441 	ldw (XSAVE,sp),x
      0001E5 1E 05            [ 2]  442 	ldw x,(BSIZE,sp)
      0001E7 5A               [ 2]  443 	decw x
      0001E8 1F 05            [ 2]  444 	ldw (BSIZE,sp),x 
      0001EA 26 ED            [ 1]  445 	jrne 1$
      0001EC                        446 9$:
      0001EC 1E 01            [ 2]  447 	ldw x,(XSAVE,sp)
      0001EE CD 17 B2         [ 4]  448 	call incr_farptr
      0001F1                        449 	_drop VSIZE
      0001F1 5B 02            [ 2]    1     addw sp,#VSIZE 
      0001F3 81               [ 4]  450 	ret 
                                    451 
                                    452 
                                    453 
                                    454 ;---------------------------------------------
                                    455 ;   UART3 subroutines
                                    456 ;---------------------------------------------
                                    457 
                                    458 ;---------------------------------------------
                                    459 ; initialize UART3, 115200 8N1
                                    460 ; input:
                                    461 ;	none
                                    462 ; output:
                                    463 ;   none
                                    464 ;---------------------------------------------
      0001F4                        465 uart3_init:
                                    466 	; configure tx pin
      0001F4 72 1A 50 11      [ 1]  467 	bset PD_DDR,#BIT5 ; tx pin
      0001F8 72 1A 50 12      [ 1]  468 	bset PD_CR1,#BIT5 ; push-pull output
      0001FC 72 1A 50 13      [ 1]  469 	bset PD_CR2,#BIT5 ; fast output
      000200                        470 uart3_set_baud: 
                                    471 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    472 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000200 A6 E1            [ 1]  473 	ld a,#CLK_SWR_HSI
      000202 C1 50 C3         [ 1]  474 	cp a,CLK_CMSR 
      000205 27 0A            [ 1]  475 	jreq hsi_clock 
      000207                        476 hse_clock: ; 8 Mhz 	
      000207 35 05 52 43      [ 1]  477 	mov UART3_BRR2,#0x05 ; must be loaded first
      00020B 35 04 52 42      [ 1]  478 	mov UART3_BRR1,#0x4
      00020F 20 08            [ 2]  479 	jra uart_enable
      000211                        480 hsi_clock: ; 16 Mhz 	
      000211 35 0B 52 43      [ 1]  481 	mov UART3_BRR2,#0x0b ; must be loaded first
      000215 35 08 52 42      [ 1]  482 	mov UART3_BRR1,#0x08
      000219                        483 uart_enable:	
      000219 35 0C 52 45      [ 1]  484 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      00021D 81               [ 4]  485 	ret
                                    486 	
                                    487 ;---------------------------------
                                    488 ; send character to UART3 
                                    489 ; input:
                                    490 ;   A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    491 ; output:
                                    492 ;   none 
                                    493 ;--------------------------------	
      00021E                        494 putc:
      00021E 72 0F 52 40 FB   [ 2]  495 	btjf UART3_SR,#UART_SR_TXE,.
      000223 C7 52 41         [ 1]  496 	ld UART3_DR,a 
      000226 81               [ 4]  497 	ret 
                                    498 
                                    499 ;---------------------------------
                                    500 ; wait character from UART3 
                                    501 ; input:
                                    502 ;   none
                                    503 ; output:
                                    504 ;   A 			char  
                                    505 ;--------------------------------	
      000227                        506 getc:
      000227 72 0B 52 40 FB   [ 2]  507 	btjf UART3_SR,#UART_SR_RXNE,.
      00022C C6 52 41         [ 1]  508 	ld a,UART3_DR 
      00022F 81               [ 4]  509 	ret 
                                    510 
                                    511 ;-----------------------------
                                    512 ; send an ASCIZ string to UART3 
                                    513 ; input: 
                                    514 ;   x 		char * 
                                    515 ; output:
                                    516 ;   none 
                                    517 ;-------------------------------
      000230                        518 puts:
      000230 F6               [ 1]  519     ld a,(x)
      000231 27 06            [ 1]  520 	jreq 1$
      000233 CD 02 1E         [ 4]  521 	call putc 
      000236 5C               [ 1]  522 	incw x 
      000237 20 F7            [ 2]  523 	jra puts 
      000239 81               [ 4]  524 1$:	ret 
                                    525 
                                    526 
                                    527 ;---------------------------
                                    528 ; delete character at left 
                                    529 ; of cursor on terminal 
                                    530 ; input:
                                    531 ;   none 
                                    532 ; output:
                                    533 ;	none 
                                    534 ;---------------------------
      00023A                        535 bksp:
      00023A A6 08            [ 1]  536 	ld a,#BSP 
      00023C CD 02 1E         [ 4]  537 	call putc 
      00023F A6 20            [ 1]  538 	ld a,#SPACE 
      000241 CD 02 1E         [ 4]  539 	call putc 
      000244 A6 08            [ 1]  540 	ld a,#BSP 
      000246 CD 02 1E         [ 4]  541 	call putc 
      000249 81               [ 4]  542 	ret 
                                    543 ;---------------------------
                                    544 ; delete n character left of cursor 
                                    545 ; at terminal.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    546 ; input: 
                                    547 ;   A   	number of characters to delete.
                                    548 ; output:
                                    549 ;    none 
                                    550 ;--------------------------	
      00024A                        551 delete:
      00024A 88               [ 1]  552 	push a 
      00024B 0D 01            [ 1]  553 0$:	tnz (1,sp)
      00024D 27 07            [ 1]  554 	jreq 1$
      00024F CD 02 3A         [ 4]  555 	call bksp 
      000252 0A 01            [ 1]  556 	dec (1,sp)
      000254 20 F5            [ 2]  557 	jra 0$
      000256 84               [ 1]  558 1$:	pop a 
      000257 81               [ 4]  559 	ret
                                    560 
                                    561 ;--------------------------
                                    562 ; print n spaces on terminal
                                    563 ; input:
                                    564 ;  X 		number of spaces 
                                    565 ; output:
                                    566 ;	none 
                                    567 ;---------------------------
      000258                        568 spaces:
      000258 A6 20            [ 1]  569 	ld a,#SPACE 
      00025A 5D               [ 2]  570 1$:	tnzw x
      00025B 27 06            [ 1]  571 	jreq 9$
      00025D CD 02 1E         [ 4]  572 	call putc 
      000260 5A               [ 2]  573 	decw x
      000261 20 F7            [ 2]  574 	jra 1$
      000263                        575 9$: 
      000263 81               [ 4]  576 	ret 
                                    577 
                           000001   578 .if DEBUG 
                                    579 ;---------------------------------
                                    580 ;; print actual registers states 
                                    581 ;; as pushed on stack 
                                    582 ;; {Y,X,CC,A}
                                    583 ;---------------------------------
      000264                        584 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      000264                        585 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      000264                        586 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      000264                        587 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      000264                        588 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      000264                        589 prt_regs:
      000264 AE 02 A7         [ 2]  590 	ldw x,#regs_state 
      000267 CD 02 30         [ 4]  591 	call puts
                                    592 ; register PC
      00026A 16 01            [ 2]  593 	ldw y,(1,sp)
      00026C AE 08 95         [ 2]  594 	ldw x,#REG_EPC 
      00026F CD 07 E6         [ 4]  595 	call prt_reg16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    596 ; register CC 
      000272 7B 08            [ 1]  597 	ld a,(R_CC,sp)
      000274 AE 08 A6         [ 2]  598 	ldw x,#REG_CC 
      000277 CD 07 C1         [ 4]  599 	call prt_reg8 
                                    600 ; register A 
      00027A 7B 07            [ 1]  601 	ld a,(R_A,sp)
      00027C AE 08 A2         [ 2]  602 	ldw x,#REG_A 
      00027F CD 07 C1         [ 4]  603 	call prt_reg8 
                                    604 ; register X 
      000282 16 05            [ 2]  605 	ldw y,(R_X,sp)
      000284 AE 08 9E         [ 2]  606 	ldw x,#REG_X 
      000287 CD 07 E6         [ 4]  607 	call prt_reg16 
                                    608 ; register Y 
      00028A 16 03            [ 2]  609 	ldw y,(R_Y,sp)
      00028C AE 08 9A         [ 2]  610 	ldw x,#REG_Y 
      00028F CD 07 E6         [ 4]  611 	call prt_reg16 
                                    612 ; register SP 
      000292 90 96            [ 1]  613 	ldw y,sp
      000294 72 A9 00 08      [ 2]  614 	addw y,#6+ARG_OFS  
      000298 AE 08 AB         [ 2]  615 	ldw x,#REG_SP
      00029B CD 07 E6         [ 4]  616 	call prt_reg16
      00029E A6 0D            [ 1]  617 	ld a,#CR 
      0002A0 CD 02 1E         [ 4]  618 	call putc
      0002A3 CD 02 1E         [ 4]  619 	call putc   
      0002A6 81               [ 4]  620 	ret 
                                    621 
      0002A7 0A 72 65 67 69 73 74   622 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    623 
                                    624 
                                    625 ;--------------------
                                    626 ; print content at address in hex.
                                    627 ; input:
                                    628 ;   X 	address to peek 
                                    629 ; output:
                                    630 ;	none 
                                    631 ;--------------------	
      0002CE                        632 prt_peek:
      0002CE 89               [ 2]  633 	pushw x 
      0002CF CF 00 09         [ 2]  634 	ldw acc16,x 
      0002D2 72 5F 00 08      [ 1]  635 	clr acc24 
      0002D6 5F               [ 1]  636 	clrw x 
      0002D7 A6 10            [ 1]  637 	ld a,#16 
      0002D9 CD 08 B0         [ 4]  638 	call prti24 
      0002DC A6 3A            [ 1]  639 	ld a,#': 
      0002DE CD 02 1E         [ 4]  640 	call putc 
      0002E1 A6 20            [ 1]  641 	ld a,#SPACE 
      0002E3 CD 02 1E         [ 4]  642 	call putc 
      0002E6 85               [ 2]  643 	popw x 
      0002E7 F6               [ 1]  644 	ld a,(x)
      0002E8 C7 00 0A         [ 1]  645 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002EB 5F               [ 1]  646 	clrw x 
      0002EC A6 10            [ 1]  647 	ld a,#16 
      0002EE CD 08 B0         [ 4]  648 	call prti24
      0002F1 81               [ 4]  649 	ret 
                                    650 .endif 
                                    651 
                                    652 ;-------------------------------------
                                    653 ; retrun string length
                                    654 ; input:
                                    655 ;   X         .asciz  
                                    656 ; output:
                                    657 ;   X         length 
                                    658 ;-------------------------------------
      0002F2                        659 strlen:
      0002F2 90 93            [ 1]  660 	ldw y,x 
      0002F4 5F               [ 1]  661 	clrw x 
      0002F5 90 7D            [ 1]  662 1$:	tnz (y) 
      0002F7 27 05            [ 1]  663 	jreq 9$ 
      0002F9 5C               [ 1]  664 	incw x
      0002FA 90 5C            [ 1]  665 	incw y 
      0002FC 20 F7            [ 2]  666 	jra 1$ 
      0002FE 81               [ 4]  667 9$: ret 
                                    668 
                                    669 ;------------------------------------
                                    670 ; compare 2 strings
                                    671 ; input:
                                    672 ;   X 		char* first string 
                                    673 ;   Y       char* second string 
                                    674 ; output:
                                    675 ;   A 		0|1 
                                    676 ;-------------------------------------
      0002FF                        677 strcmp:
      0002FF F6               [ 1]  678 	ld a,(x)
      000300 27 0B            [ 1]  679 	jreq 5$ 
      000302 90 F1            [ 1]  680 	cp a,(y) 
      000304 26 05            [ 1]  681 	jrne 4$ 
      000306 5C               [ 1]  682 	incw x 
      000307 90 5C            [ 1]  683 	incw y 
      000309 20 F4            [ 2]  684 	jra strcmp 
      00030B                        685 4$: ; not same  
      00030B 4F               [ 1]  686 	clr a 
      00030C 81               [ 4]  687 	ret 
      00030D                        688 5$: ; same 
      00030D A6 01            [ 1]  689 	ld a,#1 
      00030F 81               [ 4]  690 	ret 
                                    691 
                                    692 
                                    693 ;---------------------------------------
                                    694 ;  copy src to dest 
                                    695 ; input:
                                    696 ;   X 		dest 
                                    697 ;   Y 		src 
                                    698 ; output: 
                                    699 ;   X 		dest 
                                    700 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      000310                        701 strcpy:
      000310 89               [ 2]  702 	pushw x 
      000311 90 F6            [ 1]  703 1$: ld a,(y)
      000313 27 06            [ 1]  704 	jreq 9$ 
      000315 F7               [ 1]  705 	ld (x),a 
      000316 5C               [ 1]  706 	incw x 
      000317 90 5C            [ 1]  707 	incw y 
      000319 20 F6            [ 2]  708 	jra 1$ 
      00031B 7F               [ 1]  709 9$:	clr (x)
      00031C 85               [ 2]  710 	popw x 
      00031D 81               [ 4]  711 	ret 
                                    712 
                                    713 ;---------------------------------------
                                    714 ; move memory block 
                                    715 ; input:
                                    716 ;   X 		destination 
                                    717 ;   Y 	    source 
                                    718 ;   acc16	size 
                                    719 ; output:
                                    720 ;   none 
                                    721 ;--------------------------------------
                           000001   722 	INCR=1 ; increament high byte 
                           000002   723 	LB=2 ; increament low byte 
                           000002   724 	VSIZE=2
      00031E                        725 move:
      00031E                        726 	_vars VSIZE 
      00031E 52 02            [ 2]    1     sub sp,#VSIZE 
      000320 0F 01            [ 1]  727 	clr (INCR,sp)
      000322 0F 02            [ 1]  728 	clr (LB,sp)
      000324 90 89            [ 2]  729 	pushw y 
      000326 13 01            [ 2]  730 	cpw x,(1,sp) ; compare DEST to SRC 
      000328 90 85            [ 2]  731 	popw y 
      00032A 27 32            [ 1]  732 	jreq move_exit ; x==y 
      00032C 2B 0E            [ 1]  733 	jrmi move_down
      00032E                        734 move_up: ; start from top address with incr=-1
      00032E 72 BB 00 09      [ 2]  735 	addw x,acc16
      000332 72 B9 00 09      [ 2]  736 	addw y,acc16
      000336 03 01            [ 1]  737 	cpl (INCR,sp)
      000338 03 02            [ 1]  738 	cpl (LB,sp)   ; increment = -1 
      00033A 20 05            [ 2]  739 	jra move_loop  
      00033C                        740 move_down: ; start from bottom address with incr=1 
      00033C 5A               [ 2]  741     decw x 
      00033D 90 5A            [ 2]  742 	decw y
      00033F 0C 02            [ 1]  743 	inc (LB,sp) ; incr=1 
      000341                        744 move_loop:	
      000341 C6 00 09         [ 1]  745     ld a, acc16 
      000344 CA 00 0A         [ 1]  746 	or a, acc8
      000347 27 15            [ 1]  747 	jreq move_exit 
      000349 72 FB 01         [ 2]  748 	addw x,(INCR,sp)
      00034C 72 F9 01         [ 2]  749 	addw y,(INCR,sp) 
      00034F 90 F6            [ 1]  750 	ld a,(y)
      000351 F7               [ 1]  751 	ld (x),a 
      000352 72 5A 00 0A      [ 1]  752 	dec acc8
      000356 2A E9            [ 1]  753 	jrpl move_loop
      000358 72 5A 00 09      [ 1]  754 	dec acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00035C 20 E3            [ 2]  755 	jra move_loop
      00035E                        756 move_exit:
      00035E                        757 	_drop VSIZE
      00035E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000360 81               [ 4]  758 	ret 	
                                    759 
                                    760 ;-------------------------------------
                                    761 ; search text area for a line with 
                                    762 ; same number as lineno  
                                    763 ; input:
                                    764 ;	X 			lineno 
                                    765 ; output:
                                    766 ;   X 			addr of line | 0 
                                    767 ;   Y           lineno|insert address if not found  
                                    768 ;-------------------------------------
                           000001   769 	LL=1 ; line length 
                           000002   770 	LB=2 ; line length low byte 
                           000002   771 	VSIZE=2 
      000361                        772 search_lineno:
      000361                        773 	_vars VSIZE
      000361 52 02            [ 2]    1     sub sp,#VSIZE 
      000363 CF 00 09         [ 2]  774 	ldw acc16,x 
      000366 0F 01            [ 1]  775 	clr (LL,sp)
      000368 90 CE 00 1B      [ 2]  776 	ldw y,txtbgn
      00036C                        777 search_ln_loop:
      00036C 90 C3 00 1D      [ 2]  778 	cpw y,txtend 
      000370 2A 17            [ 1]  779 	jrpl 8$
      000372 93               [ 1]  780 	ldw x,y 
      000373 FE               [ 2]  781 	ldw x,(x) ; x=line number 
      000374 C3 00 09         [ 2]  782 	cpw x,acc16 
      000377 27 13            [ 1]  783 	jreq 9$ 
      000379 2A 0E            [ 1]  784 	jrpl 8$ ; from here all lines are > lineno 
      00037B 90 E6 02         [ 1]  785 	ld a,(2,y)
      00037E 6B 02            [ 1]  786 	ld (LB,sp),a 
      000380 72 A9 00 03      [ 2]  787 	addw y,#3 
      000384 72 F9 01         [ 2]  788 	addw y,(LL,sp)
      000387 20 E3            [ 2]  789 	jra search_ln_loop 
      000389 51               [ 1]  790 8$: exgw x,y 
      00038A 90 5F            [ 1]  791 	clrw y 	
      00038C                        792 9$: _drop VSIZE
      00038C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00038E 51               [ 1]  793 	exgw x,y   
      00038F 81               [ 4]  794 	ret 
                                    795 
                                    796 ;-------------------------------------
                                    797 ; delete line at addr
                                    798 ; input:
                                    799 ;   X 		addr of line i.e DEST for move 
                                    800 ;-------------------------------------
                           000001   801 	LLEN=1
                           000003   802 	SRC=3
                           000004   803 	VSIZE=4
      000390                        804 del_line: 
      000390                        805 	_vars VSIZE 
      000390 52 04            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000392 E6 02            [ 1]  806 	ld a,(2,x) ; line length
      000394 AB 03            [ 1]  807 	add a,#3
      000396 6B 02            [ 1]  808 	ld (LLEN+1,sp),a 
      000398 0F 01            [ 1]  809 	clr (LLEN,sp)
      00039A 90 93            [ 1]  810 	ldw y,x  
      00039C 72 F9 01         [ 2]  811 	addw y,(LLEN,sp) ;SRC  
      00039F 17 03            [ 2]  812 	ldw (SRC,sp),y  ;save source 
      0003A1 90 CE 00 1D      [ 2]  813 	ldw y,txtend 
      0003A5 72 F2 03         [ 2]  814 	subw y,(SRC,sp) ; y=count 
      0003A8 90 CF 00 09      [ 2]  815 	ldw acc16,y 
      0003AC 16 03            [ 2]  816 	ldw y,(SRC,sp)    ; source
      0003AE CD 03 1E         [ 4]  817 	call move
      0003B1 90 CE 00 1D      [ 2]  818 	ldw y,txtend 
      0003B5 72 F2 01         [ 2]  819 	subw y,(LLEN,sp)
      0003B8 90 CF 00 1D      [ 2]  820 	ldw txtend,y  
      0003BC                        821 	_drop VSIZE     
      0003BC 5B 04            [ 2]    1     addw sp,#VSIZE 
      0003BE 81               [ 4]  822 	ret 
                                    823 
                                    824 
                                    825 ;---------------------------------------------
                                    826 ; create a gap in text area 
                                    827 ; input:
                                    828 ;    X 			addr gap start 
                                    829 ;    Y 			gap length 
                                    830 ; output:
                                    831 ;    X 			addr gap start 
                                    832 ;--------------------------------------------
                           000001   833 	DEST=1
                           000003   834 	SRC=3
                           000005   835 	LEN=5
                           000006   836 	VSIZE=6 
      0003BF                        837 create_gap:
      0003BF                        838 	_vars VSIZE
      0003BF 52 06            [ 2]    1     sub sp,#VSIZE 
      0003C1 C3 00 1D         [ 2]  839 	cpw x,txtend 
      0003C4 2A 27            [ 1]  840 	jrpl 9$ ; no need for a gap since at end of text.
      0003C6 1F 03            [ 2]  841 	ldw (SRC,sp),x 
      0003C8 17 05            [ 2]  842 	ldw (LEN,sp),y 
      0003CA 90 CF 00 09      [ 2]  843 	ldw acc16,y 
      0003CE 90 93            [ 1]  844 	ldw y,x ; SRC
      0003D0 72 BB 00 09      [ 2]  845 	addw x,acc16  
      0003D4 1F 01            [ 2]  846 	ldw (DEST,sp),x 
                                    847 ;compute size to move 	
      0003D6 CE 00 1D         [ 2]  848 	ldw x,txtend 
      0003D9 72 F0 03         [ 2]  849 	subw x,(SRC,sp)
      0003DC CF 00 09         [ 2]  850 	ldw acc16,x
      0003DF 1E 01            [ 2]  851 	ldw x,(DEST,sp) 
      0003E1 CD 03 1E         [ 4]  852 	call move
      0003E4 CE 00 1D         [ 2]  853 	ldw x,txtend
      0003E7 72 FB 05         [ 2]  854 	addw x,(LEN,sp)
      0003EA CF 00 1D         [ 2]  855 	ldw txtend,x
      0003ED                        856 9$:	_drop VSIZE 
      0003ED 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003EF 81               [ 4]  857 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    858 
                                    859 
                                    860 ;--------------------------------------------
                                    861 ; insert line in tib into text area 
                                    862 ; first search for already existing 
                                    863 ; replace existing 
                                    864 ; if strlen(tib)==0 delete existing 
                                    865 ; input:
                                    866 ;   X 				line number 
                                    867 ;   tib[in.w]  		text to insert  
                                    868 ; output:
                                    869 ;   none
                                    870 ;---------------------------------------------
                           000001   871 	DEST=1  ; text area insertion address 
                           000003   872 	SRC=3   ; str to insert address 
                           000005   873 	LINENO=5 ; line number 
                           000007   874 	LLEN=7 ; line length 
                           000008   875 	VSIZE=8  
      0003F0                        876 insert_line:
      0003F0                        877 	_vars VSIZE 
      0003F0 52 08            [ 2]    1     sub sp,#VSIZE 
      0003F2 A3 00 00         [ 2]  878 	cpw x,#0  
      0003F5 22 03            [ 1]  879 	jrugt 0$ 
      0003F7 CC 06 A1         [ 2]  880 	jp syntax_error ; negative line number 
      0003FA                        881 0$: 
      0003FA 1F 05            [ 2]  882 	ldw (LINENO,sp),x 
      0003FC AE 16 C8         [ 2]  883 	ldw x,#tib 
      0003FF 72 BB 00 00      [ 2]  884 	addw x,in.w 
      000403 1F 03            [ 2]  885 	ldw (SRC,sp),x 
      000405 CD 02 F2         [ 4]  886 	call strlen
      000408 5D               [ 2]  887 	tnzw x 
      000409 27 01            [ 1]  888 	jreq 1$
      00040B 5C               [ 1]  889 	incw x 
      00040C 1F 07            [ 2]  890 1$:	ldw (LLEN,sp),x
      00040E 1E 05            [ 2]  891 	ldw x,(LINENO,sp)
      000410 CD 03 61         [ 4]  892 	call search_lineno 
      000413 5D               [ 2]  893 	tnzw x 
      000414 26 04            [ 1]  894 	jrne 2$
                                    895 ; line doesn't exit 	
      000416 17 01            [ 2]  896 	ldw (DEST,sp),y 
      000418 20 05            [ 2]  897 	jra 3$
                                    898 ; line exit delete it.	
      00041A 1F 01            [ 2]  899 2$: ldw (DEST,sp),x 
      00041C CD 03 90         [ 4]  900 	call del_line
                                    901 ; leave or insert new line if LLEN>0
      00041F                        902 3$: 
                                    903 ; check for available space 
      00041F CD 12 E6         [ 4]  904 	call size 
      000422 1D 00 03         [ 2]  905 	subw x,#3 
      000425 72 F0 07         [ 2]  906     subw x,(LLEN,sp)
      000428 2A 05            [ 1]  907 	jrpl 31$
      00042A A6 01            [ 1]  908 	ld a,#ERR_MEM_FULL
      00042C CC 06 A3         [ 2]  909 	jp tb_error 
      00042F                        910 31$:	
      00042F 0D 08            [ 1]  911 	tnz (LLEN+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000431 27 34            [ 1]  912 	jreq insert_ln_exit ; empty line forget it.
      000433 1E 01            [ 2]  913 	ldw x,(DEST,sp)
      000435 C3 00 1D         [ 2]  914 	cpw x,txtend 
      000438 2A 0B            [ 1]  915 	jrpl 4$ 
                                    916 ; must create a gap 
      00043A 16 07            [ 2]  917 	ldw y,(LLEN,sp)
      00043C 72 A9 00 03      [ 2]  918 	addw y,#3 ; space for lineno and linelen 
      000440 CD 03 BF         [ 4]  919 	call create_gap 
      000443 20 11            [ 2]  920 	jra 5$ 
      000445                        921 4$: ; insert at end. 
      000445 90 CE 00 1D      [ 2]  922 	ldw y,txtend
      000449 17 01            [ 2]  923 	ldw (DEST,sp),y
      00044B 72 F9 07         [ 2]  924 	addw y,(LLEN,sp)
      00044E 72 A9 00 03      [ 2]  925 	addw y,#3 
      000452 90 CF 00 1D      [ 2]  926 	ldw txtend,y  
      000456                        927 5$:	
      000456 1E 01            [ 2]  928 	ldw x,(DEST,sp) ; dest address 
      000458 16 05            [ 2]  929 	ldw y,(LINENO,sp) ; line number 
      00045A FF               [ 2]  930 	ldw (x),y 
      00045B 1C 00 02         [ 2]  931 	addw x,#2
      00045E 7B 08            [ 1]  932 	ld a,(LLEN+1,sp)
      000460 F7               [ 1]  933 	ld (x),a 
      000461 5C               [ 1]  934 	incw x 
      000462 16 03            [ 2]  935 	ldw y,(SRC,sp) ; src addr  
      000464 CD 03 10         [ 4]  936 	call strcpy   
      000467                        937 insert_ln_exit:	
      000467                        938 	_drop VSIZE
      000467 5B 08            [ 2]    1     addw sp,#VSIZE 
      000469 81               [ 4]  939 	ret
                                    940 	
                                    941 ;------------------------------------
                                    942 ;  set all variables to zero 
                                    943 ; input:
                                    944 ;   none 
                                    945 ; output:
                                    946 ;	none
                                    947 ;------------------------------------
      00046A                        948 clear_vars:
      00046A AE 00 26         [ 2]  949 	ldw x,#vars 
      00046D 90 AE 00 34      [ 2]  950 	ldw y,#2*26 
      000471 7F               [ 1]  951 1$:	clr (x)
      000472 5C               [ 1]  952 	incw x 
      000473 90 5A            [ 2]  953 	decw y 
      000475 26 FA            [ 1]  954 	jrne 1$
      000477 81               [ 4]  955 	ret 
                                    956 
                                    957 ;-------------------------------------
                                    958 ; check if A is a letter
                                    959 ; input:
                                    960 ;   A 			character to test 
                                    961 ; output:
                                    962 ;   C flag      1 true, 0 false 
                                    963 ;-------------------------------------
      000478                        964 is_alpha:
      000478 A1 41            [ 1]  965 	cp a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00047A 8C               [ 1]  966 	ccf
      00047B 24 0B            [ 1]  967 	jrnc 9$ 
      00047D A1 5B            [ 1]  968 	cp a,#'Z+1 
      00047F 25 07            [ 1]  969 	jrc 9$ 
      000481 A1 61            [ 1]  970 	cp a,#'a 
      000483 8C               [ 1]  971 	ccf 
      000484 24 02            [ 1]  972 	jrnc 9$
      000486 A1 7B            [ 1]  973 	cp a,#'z+1   
      000488 81               [ 4]  974 9$: ret 	
                                    975 
                                    976 ;-------------------------------------
                                    977 ;  program initialization entry point 
                                    978 ;-------------------------------------
                           000001   979 	MAJOR=1
                           000000   980 	MINOR=0
      000489 0A 0A 54 69 6E 79 20   981 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0004CF 75 73 65 72 20 73 70   982 usr_addr: .asciz "user space address: " 
             61 63 65 20 61 64 64
             72 65 73 73 3A 20 00
      0004E4                        983 cold_start:
                                    984 ;set stack 
      0004E4 AE 17 FF         [ 2]  985 	ldw x,#STACK_EMPTY
      0004E7 94               [ 1]  986 	ldw sp,x   
                                    987 ; clear all ram 
      0004E8 7F               [ 1]  988 0$: clr (x)
      0004E9 5A               [ 2]  989 	decw x 
      0004EA 26 FC            [ 1]  990 	jrne 0$
                                    991 ; activate pull up on all inputs 
      0004EC A6 FF            [ 1]  992 	ld a,#255 
      0004EE C7 50 03         [ 1]  993 	ld PA_CR1,a 
      0004F1 C7 50 08         [ 1]  994 	ld PB_CR1,a 
      0004F4 C7 50 0D         [ 1]  995 	ld PC_CR1,a 
      0004F7 C7 50 12         [ 1]  996 	ld PD_CR1,a 
      0004FA C7 50 17         [ 1]  997 	ld PE_CR1,a 
      0004FD C7 50 1C         [ 1]  998 	ld PF_CR1,a 
      000500 C7 50 21         [ 1]  999 	ld PG_CR1,a 
      000503 C7 50 2B         [ 1] 1000 	ld PI_CR1,a 
                                   1001 ; select internal clock no divisor: 16 Mhz 	
      000506 A6 E1            [ 1] 1002 	ld a,#CLK_SWR_HSI 
      000508 5F               [ 1] 1003 	clrw x  
      000509 CD 00 9E         [ 4] 1004     call clock_init 
      00050C CD 00 B4         [ 4] 1005 	call timer4_init
                                   1006 ; UART3 at 115200 BAUD
      00050F CD 01 F4         [ 4] 1007 	call uart3_init
                                   1008 ; activate PE_4 (user button interrupt)
      000512 72 18 50 18      [ 1] 1009     bset PE_CR2,#USR_BTN_BIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1010 ; display system information
      000516 AE 04 89         [ 2] 1011 	ldw x,#software 
      000519 CD 02 30         [ 4] 1012 	call puts 
      00051C A6 01            [ 1] 1013 	ld a,#MAJOR 
      00051E C7 00 0A         [ 1] 1014 	ld acc8,a 
      000521 5F               [ 1] 1015 	clrw x 
      000522 CF 00 08         [ 2] 1016 	ldw acc24,x 
      000525 A6 0A            [ 1] 1017 	ld a,#10 
      000527 CD 08 B0         [ 4] 1018 	call prti24 
      00052A A6 2E            [ 1] 1019 	ld a,#'.
      00052C CD 02 1E         [ 4] 1020 	call putc 
      00052F A6 00            [ 1] 1021 	ld a,#MINOR 
      000531 C7 00 0A         [ 1] 1022 	ld acc8,a 
      000534 5F               [ 1] 1023 	clrw x 
      000535 CF 00 08         [ 2] 1024 	ldw acc24,x 
      000538 A6 0A            [ 1] 1025 	ld a,#10 
      00053A CD 08 B0         [ 4] 1026 	call prti24 
      00053D A6 0D            [ 1] 1027 	ld a,#CR 
      00053F CD 02 1E         [ 4] 1028 	call putc 
      000542 CD 17 C0         [ 4] 1029 	call seek_fdrive 
      000545 AE 04 CF         [ 2] 1030 	ldw x,#usr_addr
      000548 CD 02 30         [ 4] 1031 	call puts  
      00054B AE 1E 00         [ 2] 1032 	ldw x,#user_space
      00054E 35 10 00 07      [ 1] 1033 	mov base,#16
      000552 CD 09 05         [ 4] 1034 	call print_int 
                                   1035 ; configure LED2 pin 
      000555 72 1A 50 0D      [ 1] 1036     bset PC_CR1,#LED2_BIT
      000559 72 1A 50 0E      [ 1] 1037     bset PC_CR2,#LED2_BIT
      00055D 72 1A 50 0C      [ 1] 1038     bset PC_DDR,#LED2_BIT
      000561 9A               [ 1] 1039 	rim 
      000562 AE 16 C8         [ 2] 1040 	ldw x,#tib
      000565 CF 00 20         [ 2] 1041 	ldw array_addr,x 
      000568 72 5C 00 10      [ 1] 1042 	inc seedy+1 
      00056C 72 5C 00 0E      [ 1] 1043 	inc seedx+1 
      000570 CD 05 7F         [ 4] 1044 	call clear_basic
      000573 CD 12 F0         [ 4] 1045 	call ubound 
      000576 CD 0F 3D         [ 4] 1046 	call dpop 
      000579 CF 00 22         [ 2] 1047 	ldw array_size,x 
      00057C CC 07 01         [ 2] 1048     jp warm_start 
                                   1049 
      00057F                       1050 clear_basic:
      00057F 5F               [ 1] 1051 	clrw x 
      000580 CF 00 05         [ 2] 1052 	ldw lineno,x
      000583 72 5F 00 02      [ 1] 1053 	clr count 
      000587 AE 00 5A         [ 2] 1054 	ldw x,#free_ram 
      00058A CF 00 1B         [ 2] 1055 	ldw txtbgn,x 
      00058D CF 00 1D         [ 2] 1056 	ldw txtend,x 
      000590 CD 04 6A         [ 4] 1057 	call clear_vars 
      000593 81               [ 4] 1058 	ret 
                                   1059 
      000594                       1060 err_msg:
      000594 00 00 05 AC 05 BA 05  1061 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             C9 05 E3 05 F3
      0005A0 06 0A 06 21 06 3C 06  1062 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             4E 06 60
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0005AA 06 6D                 1063 	.word err_no_access 
                                   1064 
      0005AC 0A 4D 65 6D 6F 72 79  1065 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      0005BA 0A 73 79 6E 74 61 78  1066 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      0005C9 0A 6D 61 74 68 20 6F  1067 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      0005E3 0A 64 69 76 69 73 69  1068 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      0005F3 0A 69 6E 76 61 6C 69  1069 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      00060A 0A 72 75 6E 20 74 69  1070 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000621 0A 63 6F 6D 6D 61 6E  1071 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      00063C 0A 64 75 70 6C 69 63  1072 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      00064E 0A 46 69 6C 65 20 6E  1073 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      000660 0A 62 61 64 20 76 61  1074 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      00066D 0A 46 69 6C 65 20 69  1075 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1076 
      0006A1                       1077 syntax_error:
      0006A1 A6 02            [ 1] 1078 	ld a,#ERR_SYNTAX 
                                   1079 
      0006A3                       1080 tb_error:
      0006A3 AE 05 94         [ 2] 1081 	ldw x, #err_msg 
      0006A6 72 5F 00 09      [ 1] 1082 	clr acc16 
      0006AA 48               [ 1] 1083 	sll a
      0006AB 72 59 00 09      [ 1] 1084 	rlc acc16  
      0006AF C7 00 0A         [ 1] 1085 	ld acc8, a 
      0006B2 72 BB 00 09      [ 2] 1086 	addw x,acc16 
      0006B6 FE               [ 2] 1087 	ldw x,(x)
      0006B7 CD 02 30         [ 4] 1088 	call puts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      0006BA CE 00 05         [ 2] 1089 	ldw x,lineno 
      0006BD 5D               [ 2] 1090 	tnzw x 
      0006BE 27 0F            [ 1] 1091 	jreq 2$
      0006C0 CF 00 09         [ 2] 1092 	ldw acc16,x 
      0006C3 72 5F 00 08      [ 1] 1093 	clr acc24 
      0006C7 AE 00 05         [ 2] 1094 	ldw x,#5 
      0006CA A6 0A            [ 1] 1095 	ld a,#10 
      0006CC CD 08 B0         [ 4] 1096 	call prti24
      0006CF                       1097 2$:	 
      0006CF CE 00 03         [ 2] 1098 	ldw x,basicptr   
      0006D2 C6 00 05         [ 1] 1099 	ld a,lineno 
      0006D5 CA 00 06         [ 1] 1100 	or a,lineno+1
      0006D8 27 03            [ 1] 1101 	jreq 3$
      0006DA 1C 00 03         [ 2] 1102 	addw x,#3 
      0006DD CD 02 30         [ 4] 1103 3$:	call puts 
      0006E0 A6 0D            [ 1] 1104 	ld a,#CR 
      0006E2 CD 02 1E         [ 4] 1105 	call putc 
      0006E5 5F               [ 1] 1106 	clrw x 
      0006E6 C6 00 05         [ 1] 1107 	ld a,lineno 
      0006E9 CA 00 06         [ 1] 1108 	or a,lineno+1
      0006EC 27 03            [ 1] 1109 	jreq 4$
      0006EE AE 00 05         [ 2] 1110 	ldw x,#5 
      0006F1 72 BB 00 00      [ 2] 1111 4$:	addw x,in.w 
      0006F5 CD 02 58         [ 4] 1112 	call spaces
      0006F8 A6 5E            [ 1] 1113 	ld a,#'^ 
      0006FA CD 02 1E         [ 4] 1114 	call putc 
      0006FD AE 17 FF         [ 2] 1115 1$: ldw x,#STACK_EMPTY 
      000700 94               [ 1] 1116     ldw sp,x
      000701                       1117 warm_start:
      000701 72 5F 00 24      [ 1] 1118 	clr flags 
      000705 72 5F 00 1F      [ 1] 1119 	clr loop_depth 
      000709 AE 17 80         [ 2] 1120 	ldw x,#dstack_unf 
      00070C CF 00 19         [ 2] 1121 	ldw dstkptr,x 
      00070F 35 04 00 25      [ 1] 1122 	mov tab_width,#TAB_WIDTH 
      000713 35 0A 00 07      [ 1] 1123 	mov base,#10 
      000717 5F               [ 1] 1124 	clrw x 
      000718 CF 00 05         [ 2] 1125 	ldw lineno,x 
      00071B AE 16 C8         [ 2] 1126 	ldw x,#tib 
      00071E CF 00 03         [ 2] 1127 	ldw basicptr,x 
                                   1128 ;----------------------------
                                   1129 ; tokenizer test
                                   1130 ;----------------------------
                           000000  1131   TOK_TEST=0 
                           000000  1132 .if TOK_TEST 
                                   1133 test_tok:
                                   1134 	clr in.w 
                                   1135 	clr in 
                                   1136 	ld a,#CR 
                                   1137 	call putc 
                                   1138 	ld a,#'> 
                                   1139 	call putc 
                                   1140 	call readln
                                   1141 	ldw x,#tib 
                                   1142 1$:	call get_token	
                                   1143 	tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1144 	jrne 2$
                                   1145 	jra test_tok 
                                   1146 2$:	push a 
                                   1147 	cp a,#TK_INTGR
                                   1148 	jrne 3$
                                   1149 	ld a,#10 
                                   1150 	clrw x
                                   1151 	call itoa
                                   1152 	ldw y,x 
                                   1153 	ldw x,#pad 
                                   1154 	call strcpy    
                                   1155 3$:	ld a,(1,sp) 
                                   1156 	cp a,#20
                                   1157 	jrmi 34$
                                   1158 	ld a,#'2 
                                   1159 	call putc 
                                   1160 	ld a,(1,sp)
                                   1161 	sub a,#20
                                   1162 	ld (1,sp),a
                                   1163 	jra 36$   
                                   1164 34$: 
                                   1165 	cp a,#10
                                   1166 	jrmi 36$ 
                                   1167 	ld a,#'1 
                                   1168 	call putc
                                   1169 	ld a,(1,sp)
                                   1170 	sub a,#10 
                                   1171 	ld (1,sp),a  
                                   1172 36$:
                                   1173 	pop a 
                                   1174 	add a,#'0 
                                   1175 	call putc 
                                   1176 	ld a,#SPACE 
                                   1177 	call putc 
                                   1178 	ldw x,#pad 
                                   1179 	call puts 
                                   1180 	ld a,#CR 
                                   1181 	call putc 
                                   1182 	jra 1$
                                   1183 .endif
                                   1184 ;----------------------------
      000721                       1185 interp:
      000721 72 5F 00 00      [ 1] 1186 	clr in.w
      000725 72 01 00 24 2C   [ 2] 1187 	btjf flags,#FRUN,4$ 
                                   1188 ; running program
                                   1189 ; goto next basic line 
      00072A CE 00 03         [ 2] 1190 	ldw x,basicptr
      00072D E6 02            [ 1] 1191 	ld a,(2,x) ; line length 
      00072F C7 00 0A         [ 1] 1192 	ld acc8,a 
      000732 72 5F 00 09      [ 1] 1193 	clr acc16 
      000736 1C 00 03         [ 2] 1194 	addw x,#3 
      000739 72 BB 00 09      [ 2] 1195 	addw x,acc16
      00073D C3 00 1D         [ 2] 1196 	cpw x,txtend 
      000740 2A BF            [ 1] 1197 	jrpl warm_start
      000742 CF 00 03         [ 2] 1198 	ldw basicptr,x ; start of next line  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000745 E6 02            [ 1] 1199 	ld a,(2,x)
      000747 AB 02            [ 1] 1200 	add a,#2 ; because 'in' start at 3.
      000749 C7 00 02         [ 1] 1201 	ld count,a 
      00074C FE               [ 2] 1202 	ldw x,(x) ; line no 
      00074D CF 00 05         [ 2] 1203 	ldw lineno,x 
      000750 35 03 00 01      [ 1] 1204 	mov in,#3 ; skip first 3 bytes of line 
      000754 20 11            [ 2] 1205 	jra interp_loop 
      000756                       1206 4$: ; commande line mode 	
      000756 72 5F 00 01      [ 1] 1207 	clr in 
      00075A A6 0D            [ 1] 1208 	ld a,#CR 
      00075C CD 02 1E         [ 4] 1209 	call putc 
      00075F A6 3E            [ 1] 1210 	ld a,#'> 
      000761 CD 02 1E         [ 4] 1211 	call putc 
      000764 CD 09 F3         [ 4] 1212 	call readln
      000767                       1213 interp_loop:
      000767 C6 00 01         [ 1] 1214 	ld a,in 
      00076A C1 00 02         [ 1] 1215 	cp a,count 
      00076D 2A B2            [ 1] 1216 	jrpl interp
      00076F CD 0C 7D         [ 4] 1217 	call get_token
      000772 A1 01            [ 1] 1218 	cp a,#TK_COLON 
      000774 27 F1            [ 1] 1219 	jreq interp_loop 
      000776 A1 00            [ 1] 1220 	cp a,#TK_NONE 
      000778 27 A7            [ 1] 1221 	jreq interp 
      00077A                       1222 1$:
      00077A A1 02            [ 1] 1223 	cp a,#TK_VAR
      00077C 26 05            [ 1] 1224 	jrne 2$
      00077E CD 13 08         [ 4] 1225 	call let02  
      000781 20 E4            [ 2] 1226 	jra interp_loop 
      000783                       1227 2$:	
      000783 A1 03            [ 1] 1228 	cp a,#TK_ARRAY 
      000785 26 08            [ 1] 1229 	jrne 3$
      000787 CD 11 6D         [ 4] 1230 	call get_array_element
      00078A CD 13 08         [ 4] 1231 	call let02 
      00078D 20 D8            [ 2] 1232 	jra interp_loop 
      00078F                       1233 3$:
      00078F A1 07            [ 1] 1234 	cp a,#TK_CMD
      000791 26 03            [ 1] 1235 	jrne 4$
      000793 FD               [ 4] 1236 	call (x) 
      000794 20 D1            [ 2] 1237 	jra interp_loop 
      000796                       1238 4$:	
      000796 A1 0A            [ 1] 1239 	cp a,#TK_INTGR
      000798 26 06            [ 1] 1240 	jrne 5$
      00079A CD 03 F0         [ 4] 1241 	call insert_line 
      00079D CC 07 21         [ 2] 1242 	jp interp
      0007A0                       1243 5$: 
      0007A0 CC 06 A1         [ 2] 1244 	jp syntax_error 
                                   1245 
                                   1246 ;----------------------------------------
                                   1247 ;   DEBUG support functions
                                   1248 ;----------------------------------------
                           000001  1249 .if DEBUG 
                                   1250 ; turn LED on 
      0007A3                       1251 ledon:
      0007A3 72 1A 50 0A      [ 1] 1252     bset PC_ODR,#LED2_BIT
      0007A7 81               [ 4] 1253     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1254 
                                   1255 ; turn LED off 
      0007A8                       1256 ledoff:
      0007A8 72 1B 50 0A      [ 1] 1257     bres PC_ODR,#LED2_BIT 
      0007AC 81               [ 4] 1258     ret 
                                   1259 
                                   1260 ; invert LED status 
      0007AD                       1261 ledtoggle:
      0007AD A6 20            [ 1] 1262     ld a,#LED2_MASK
      0007AF C8 50 0A         [ 1] 1263     xor a,PC_ODR
      0007B2 C7 50 0A         [ 1] 1264     ld PC_ODR,a
      0007B5 81               [ 4] 1265     ret 
                                   1266 
      0007B6                       1267 left_paren:
      0007B6 A6 20            [ 1] 1268 	ld a,#SPACE 
      0007B8 CD 02 1E         [ 4] 1269 	call putc
      0007BB A6 28            [ 1] 1270 	ld a,#'( 
      0007BD CD 02 1E         [ 4] 1271 	call putc 	
      0007C0 81               [ 4] 1272 	ret 
                                   1273 
                                   1274 ;------------------------------
                                   1275 ; print 8 bit register 
                                   1276 ; input:
                                   1277 ;   X  point to register name 
                                   1278 ;   A  register value to print 
                                   1279 ; output:
                                   1280 ;   none
                                   1281 ;------------------------------- 
      0007C1                       1282 prt_reg8:
      0007C1 88               [ 1] 1283 	push a 
      0007C2 CD 02 30         [ 4] 1284 	call puts 
      0007C5 7B 01            [ 1] 1285 	ld a,(1,sp) 
      0007C7 C7 00 0A         [ 1] 1286 	ld acc8,a 
      0007CA 5F               [ 1] 1287 	clrw x 
      0007CB 97               [ 1] 1288 	ld xl,a 
      0007CC 35 10 00 07      [ 1] 1289 	mov base,#16
      0007D0 CD 09 05         [ 4] 1290 	call print_int 
      0007D3 CD 07 B6         [ 4] 1291 	call left_paren 
      0007D6 84               [ 1] 1292 	pop a 
      0007D7 5F               [ 1] 1293 	clrw x 
      0007D8 97               [ 1] 1294 	ld xl,a 
      0007D9 35 0A 00 07      [ 1] 1295 	mov base,#10 
      0007DD CD 09 05         [ 4] 1296 	call print_int  
      0007E0 A6 29            [ 1] 1297 	ld a,#') 
      0007E2 CD 02 1E         [ 4] 1298 	call putc
      0007E5 81               [ 4] 1299 	ret
                                   1300 
                                   1301 ;--------------------------------
                                   1302 ; print 16 bits register 
                                   1303 ; input:
                                   1304 ;   X   point register name 
                                   1305 ;   Y   register value to print 
                                   1306 ; output:
                                   1307 ;  none
                                   1308 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0007E6                       1309 prt_reg16: 
      0007E6 90 89            [ 2] 1310 	pushw y 
      0007E8 CD 02 30         [ 4] 1311 	call puts 
      0007EB 1E 01            [ 2] 1312 	ldw x,(1,sp) 
      0007ED 35 10 00 07      [ 1] 1313 	mov base,#16 
      0007F1 CD 09 05         [ 4] 1314 	call print_int  
      0007F4 CD 07 B6         [ 4] 1315 	call left_paren 
      0007F7 85               [ 2] 1316 	popw x 
      0007F8 35 0A 00 07      [ 1] 1317 	mov base,#10 
      0007FC CD 09 05         [ 4] 1318 	call print_int  
      0007FF A6 29            [ 1] 1319 	ld a,#') 
      000801 CD 02 1E         [ 4] 1320 	call putc
      000804 81               [ 4] 1321 	ret 
                                   1322 
                                   1323 ;------------------------------------
                                   1324 ; print registers contents saved on
                                   1325 ; stack by trap interrupt.
                                   1326 ;------------------------------------
      000805                       1327 print_registers:
      000805 AE 08 58         [ 2] 1328 	ldw x,#STATES
      000808 CD 02 30         [ 4] 1329 	call puts
                                   1330 ; print EPC 
      00080B AE 08 95         [ 2] 1331 	ldw x, #REG_EPC
      00080E CD 02 30         [ 4] 1332 	call puts 
      000811 7B 0B            [ 1] 1333 	ld a, (11,sp)
      000813 C7 00 0A         [ 1] 1334 	ld acc8,a 
      000816 7B 0A            [ 1] 1335 	ld a, (10,sp) 
      000818 C7 00 09         [ 1] 1336 	ld acc16,a 
      00081B 7B 09            [ 1] 1337 	ld a,(9,sp) 
      00081D C7 00 08         [ 1] 1338 	ld acc24,a
      000820 5F               [ 1] 1339 	clrw x  
      000821 A6 10            [ 1] 1340 	ld a,#16
      000823 CD 08 B0         [ 4] 1341 	call prti24  
                                   1342 ; print X
      000826 AE 08 9E         [ 2] 1343 	ldw x,#REG_X
      000829 16 05            [ 2] 1344 	ldw y,(5,sp)
      00082B CD 07 E6         [ 4] 1345 	call prt_reg16  
                                   1346 ; print Y 
      00082E AE 08 9A         [ 2] 1347 	ldw x,#REG_Y
      000831 16 07            [ 2] 1348 	ldw y, (7,sp)
      000833 CD 07 E6         [ 4] 1349 	call prt_reg16  
                                   1350 ; print A 
      000836 AE 08 A2         [ 2] 1351 	ldw x,#REG_A
      000839 7B 04            [ 1] 1352 	ld a, (4,sp) 
      00083B CD 07 C1         [ 4] 1353 	call prt_reg8
                                   1354 ; print CC 
      00083E AE 08 A6         [ 2] 1355 	ldw x,#REG_CC 
      000841 7B 03            [ 1] 1356 	ld a, (3,sp) 
      000843 CD 07 C1         [ 4] 1357 	call prt_reg8 
                                   1358 ; print SP 
      000846 AE 08 AB         [ 2] 1359 	ldw x,#REG_SP
      000849 90 96            [ 1] 1360 	ldw y,sp 
      00084B 72 A9 00 0C      [ 2] 1361 	addw y,#12
      00084F CD 07 E6         [ 4] 1362 	call prt_reg16  
      000852 A6 0A            [ 1] 1363 	ld a,#'\n' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000854 CD 02 1E         [ 4] 1364 	call putc
      000857 81               [ 4] 1365 	ret
                                   1366 
      000858 0A 52 65 67 69 73 74  1367 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000895 45 50 43 3A 00        1368 REG_EPC: .asciz "EPC:"
      00089A 0A 59 3A 00           1369 REG_Y:   .asciz "\nY:" 
      00089E 0A 58 3A 00           1370 REG_X:   .asciz "\nX:"
      0008A2 0A 41 3A 00           1371 REG_A:   .asciz "\nA:" 
      0008A6 0A 43 43 3A 00        1372 REG_CC:  .asciz "\nCC:"
      0008AB 0A 53 50 3A 00        1373 REG_SP:  .asciz "\nSP:"
                                   1374 .endif 
                                   1375 
                                   1376 ;------------------------------------
                                   1377 ; print integer in acc24 
                                   1378 ; input:
                                   1379 ;	acc24 		integer to print 
                                   1380 ;	A 			numerical base for conversion 
                                   1381 ;               if bit 7 is set add a space at print end.
                                   1382 ;   XL 			field width, 0 -> no fill.
                                   1383 ;  output:
                                   1384 ;    none 
                                   1385 ;------------------------------------
                           000001  1386 	WIDTH = 1
                           000002  1387 	BASE = 2
                           000003  1388 	ADD_SPACE=3 ; add a space after number 
                           000003  1389 	VSIZE = 3
      0008B0                       1390 prti24:
      0008B0                       1391 	_vars VSIZE 
      0008B0 52 03            [ 2]    1     sub sp,#VSIZE 
      0008B2 0F 03            [ 1] 1392 	clr (ADD_SPACE,sp)
      0008B4 A5 80            [ 1] 1393 	bcp a,#0x80 
      0008B6 27 02            [ 1] 1394 	jreq 0$ 
      0008B8 03 03            [ 1] 1395 	cpl (ADD_SPACE,sp)
      0008BA A4 1F            [ 1] 1396 0$:	and a,#31 
      0008BC 6B 02            [ 1] 1397 	ld (BASE,sp),a
      0008BE 9F               [ 1] 1398 	ld a,xl
      0008BF 6B 01            [ 1] 1399 	ld (WIDTH,sp),a 
      0008C1 7B 02            [ 1] 1400 	ld a, (BASE,sp)  
      0008C3 CD 09 61         [ 4] 1401     call itoa  ; conversion entier en  .asciz
      0008C6 7B 01            [ 1] 1402 1$: ld a,(WIDTH,sp)
      0008C8 27 1F            [ 1] 1403 	jreq 4$
      0008CA C7 00 0A         [ 1] 1404 	ld acc8,a 
      0008CD 89               [ 2] 1405 	pushw x 
      0008CE CD 02 F2         [ 4] 1406 	call strlen 
      0008D1 9F               [ 1] 1407 	ld a,xl 
      0008D2 85               [ 2] 1408 	popw x 
      0008D3 31 00 0A         [ 3] 1409 	exg a,acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008D6 C0 00 0A         [ 1] 1410 	sub a,acc8 
      0008D9 2B 0E            [ 1] 1411 	jrmi 4$
      0008DB 6B 01            [ 1] 1412 	ld (WIDTH,sp),a 
      0008DD A6 20            [ 1] 1413 	ld  a,#SPACE
      0008DF 0D 01            [ 1] 1414 3$: tnz (WIDTH,sp)
      0008E1 27 06            [ 1] 1415 	jreq 4$
      0008E3 5A               [ 2] 1416 	decw x 
      0008E4 F7               [ 1] 1417 	ld (x),a 
      0008E5 0A 01            [ 1] 1418 	dec (WIDTH,sp) 
      0008E7 20 F6            [ 2] 1419 	jra 3$
      0008E9                       1420 4$: 
      0008E9 CD 02 30         [ 4] 1421 	call puts 
      0008EC 0D 03            [ 1] 1422 	tnz (ADD_SPACE,sp)
      0008EE 27 05            [ 1] 1423 	jreq 5$
      0008F0 A6 20            [ 1] 1424     ld a,#SPACE 
      0008F2 CD 02 1E         [ 4] 1425 	call putc 
      0008F5                       1426 5$: _drop VSIZE 
      0008F5 5B 03            [ 2]    1     addw sp,#VSIZE 
      0008F7 81               [ 4] 1427     ret	
                                   1428 
                                   1429 ;-----------------------------
                                   1430 ; intialize parser ready for
                                   1431 ; for a new line analysis
                                   1432 ; input:
                                   1433 ;   none
                                   1434 ; output:
                                   1435 ;	none 
                                   1436 ;------------------------------
      0008F8                       1437 parser_init::
      0008F8 72 5F 00 00      [ 1] 1438 	clr in.w 
      0008FC 72 5F 00 01      [ 1] 1439 	clr in
      000900 72 5F 17 18      [ 1] 1440 	clr pad  
      000904 81               [ 4] 1441 	ret 
                                   1442 
                                   1443 ;-----------------------------------
                                   1444 ; print a 16 bit integer 
                                   1445 ; using variable 'base' as conversion
                                   1446 ; format.
                                   1447 ; input:
                                   1448 ;   X       integer to print 
                                   1449 ;   base    conversion base 
                                   1450 ; output:
                                   1451 ;   none 
                                   1452 ;-----------------------------------
                           000001  1453 	SIGN=1
                           000001  1454 	VSIZE=1
      000905                       1455 print_int: 
      000905                       1456 	_vars VSIZE 
      000905 52 01            [ 2]    1     sub sp,#VSIZE 
      000907 0F 01            [ 1] 1457 	clr (SIGN,sp)
      000909 90 AE 17 3F      [ 2] 1458 	ldw y,#pad+PAD_SIZE-1 
      00090D 90 7F            [ 1] 1459 	clr (y)
      00090F C6 00 07         [ 1] 1460 	ld a,base  
      000912 A1 0A            [ 1] 1461 	cp a,#10 
      000914 26 06            [ 1] 1462 	jrne 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000916 5D               [ 2] 1463 	tnzw x 
      000917 2A 03            [ 1] 1464 	jrpl 1$ 
      000919 03 01            [ 1] 1465 	cpl (SIGN,sp)
      00091B 50               [ 2] 1466 	negw x 	 
      00091C                       1467 1$:	
      00091C C6 00 07         [ 1] 1468 	ld a,base 
      00091F 62               [ 2] 1469 	div x,a 
      000920 AB 30            [ 1] 1470 	add a,#'0 
      000922 A1 3A            [ 1] 1471 	cp a,#'9+1 
      000924 2B 02            [ 1] 1472 	jrmi 2$ 
      000926 AB 07            [ 1] 1473 	add a,#7 
      000928 90 5A            [ 2] 1474 2$: decw y 
      00092A 90 F7            [ 1] 1475 	ld (y),a 
      00092C 5D               [ 2] 1476 	tnzw x 
      00092D 26 ED            [ 1] 1477 	jrne 1$ 
      00092F A6 10            [ 1] 1478 	ld a,#16 
      000931 C1 00 07         [ 1] 1479 	cp a,base 
      000934 26 08            [ 1] 1480 	jrne 3$
      000936 A6 24            [ 1] 1481 	ld a,#'$
      000938 90 5A            [ 2] 1482 	decw y  
      00093A 90 F7            [ 1] 1483 	ld (y),a
      00093C 20 0A            [ 2] 1484 	jra 9$ 
      00093E 0D 01            [ 1] 1485 3$: tnz (SIGN,sp)
      000940 27 06            [ 1] 1486 	jreq 9$ 
      000942 A6 2D            [ 1] 1487 	ld a,#'-
      000944 90 5A            [ 2] 1488 	decw y  
      000946 90 F7            [ 1] 1489 	ld (y),a
      000948                       1490 9$:	
      000948 93               [ 1] 1491 	ldw x,y 
      000949 1D 17 3F         [ 2] 1492 	subw x,#pad+PAD_SIZE-1 
      00094C 50               [ 2] 1493 	negw x  
      00094D                       1494 10$:
      00094D 90 5A            [ 2] 1495 	decw y 
      00094F A6 20            [ 1] 1496 	ld a,#SPACE 
      000951 90 F7            [ 1] 1497 	ld (y),a
      000953 5C               [ 1] 1498 	incw x 
      000954 9F               [ 1] 1499 	ld a,xl 
      000955 C1 00 25         [ 1] 1500 	cp a,tab_width
      000958 2B F3            [ 1] 1501 	jrmi 10$ 
      00095A                       1502 12$:
      00095A 93               [ 1] 1503     ldw x,y 
      00095B CD 02 30         [ 4] 1504 	call puts  
      00095E                       1505 	_drop VSIZE 
      00095E 5B 01            [ 2]    1     addw sp,#VSIZE 
      000960 81               [ 4] 1506 	ret 
                                   1507 
                                   1508 ;------------------------------------
                                   1509 ; convert integer to string
                                   1510 ; input:
                                   1511 ;   A	  	base
                                   1512 ;	acc24	integer to convert
                                   1513 ; output:
                                   1514 ;   X  		pointer to string
                                   1515 ;------------------------------------
                           000001  1516 	SIGN=1  ; integer sign 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                           000002  1517 	BASE=2  ; numeric base 
                           000002  1518 	VSIZE=2  ;locals size
      000961                       1519 itoa:
      000961 52 02            [ 2] 1520 	sub sp,#VSIZE
      000963 6B 02            [ 1] 1521 	ld (BASE,sp), a  ; base
      000965 0F 01            [ 1] 1522 	clr (SIGN,sp)    ; sign
      000967 A1 0A            [ 1] 1523 	cp a,#10
      000969 26 0A            [ 1] 1524 	jrne 1$
                                   1525 	; base 10 string display with negative sign if bit 23==1
      00096B 72 0F 00 08 05   [ 2] 1526 	btjf acc24,#7,1$
      000970 03 01            [ 1] 1527 	cpl (SIGN,sp)
      000972 CD 09 D0         [ 4] 1528 	call neg_acc24
      000975                       1529 1$:
                                   1530 ; initialize string pointer 
      000975 AE 17 3F         [ 2] 1531 	ldw x,#pad+PAD_SIZE-1
      000978 7F               [ 1] 1532 	clr (x)
      000979                       1533 itoa_loop:
      000979 7B 02            [ 1] 1534     ld a,(BASE,sp)
      00097B CD 09 A8         [ 4] 1535     call divu24_8 ; acc24/A 
      00097E AB 30            [ 1] 1536     add a,#'0  ; remainder of division
      000980 A1 3A            [ 1] 1537     cp a,#'9+1
      000982 2B 02            [ 1] 1538     jrmi 2$
      000984 AB 07            [ 1] 1539     add a,#7 
      000986 5A               [ 2] 1540 2$: decw x
      000987 F7               [ 1] 1541     ld (x),a
                                   1542 	; if acc24==0 conversion done
      000988 C6 00 08         [ 1] 1543 	ld a,acc24
      00098B CA 00 09         [ 1] 1544 	or a,acc16
      00098E CA 00 0A         [ 1] 1545 	or a,acc8
      000991 26 E6            [ 1] 1546     jrne itoa_loop
                                   1547 	;conversion done, next add '$' or '-' as required
      000993 7B 02            [ 1] 1548 	ld a,(BASE,sp)
      000995 A1 10            [ 1] 1549 	cp a,#16
      000997 27 08            [ 1] 1550 	jreq 8$
      000999 7B 01            [ 1] 1551 	ld a,(SIGN,sp)
      00099B 27 08            [ 1] 1552     jreq 10$
      00099D A6 2D            [ 1] 1553     ld a,#'-
      00099F 20 02            [ 2] 1554 	jra 9$ 
      0009A1 A6 24            [ 1] 1555 8$: ld a,#'$ 
      0009A3 5A               [ 2] 1556 9$: decw x
      0009A4 F7               [ 1] 1557     ld (x),a
      0009A5                       1558 10$:
      0009A5 5B 02            [ 2] 1559 	addw sp,#VSIZE
      0009A7 81               [ 4] 1560 	ret
                                   1561 
                                   1562 ;-------------------------------------
                                   1563 ; divide uint24_t by uint8_t
                                   1564 ; used to convert uint24_t to string
                                   1565 ; input:
                                   1566 ;	acc24	dividend
                                   1567 ;   A 		divisor
                                   1568 ; output:
                                   1569 ;   acc24	quotient
                                   1570 ;   A		remainder
                                   1571 ;------------------------------------- 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1572 ; offset  on sp of arguments and locals
                           000001  1573 	U8   = 1   ; divisor on stack
                           000001  1574 	VSIZE =1
      0009A8                       1575 divu24_8:
      0009A8 89               [ 2] 1576 	pushw x ; save x
      0009A9 88               [ 1] 1577 	push a 
                                   1578 	; ld dividend UU:MM bytes in X
      0009AA C6 00 08         [ 1] 1579 	ld a, acc24
      0009AD 95               [ 1] 1580 	ld xh,a
      0009AE C6 00 09         [ 1] 1581 	ld a,acc24+1
      0009B1 97               [ 1] 1582 	ld xl,a
      0009B2 7B 01            [ 1] 1583 	ld a,(U8,SP) ; divisor
      0009B4 62               [ 2] 1584 	div x,a ; UU:MM/U8
      0009B5 88               [ 1] 1585 	push a  ;save remainder
      0009B6 9E               [ 1] 1586 	ld a,xh
      0009B7 C7 00 08         [ 1] 1587 	ld acc24,a
      0009BA 9F               [ 1] 1588 	ld a,xl
      0009BB C7 00 09         [ 1] 1589 	ld acc24+1,a
      0009BE 84               [ 1] 1590 	pop a
      0009BF 95               [ 1] 1591 	ld xh,a
      0009C0 C6 00 0A         [ 1] 1592 	ld a,acc24+2
      0009C3 97               [ 1] 1593 	ld xl,a
      0009C4 7B 01            [ 1] 1594 	ld a,(U8,sp) ; divisor
      0009C6 62               [ 2] 1595 	div x,a  ; R:LL/U8
      0009C7 6B 01            [ 1] 1596 	ld (U8,sp),a ; save remainder
      0009C9 9F               [ 1] 1597 	ld a,xl
      0009CA C7 00 0A         [ 1] 1598 	ld acc24+2,a
      0009CD 84               [ 1] 1599 	pop a
      0009CE 85               [ 2] 1600 	popw x
      0009CF 81               [ 4] 1601 	ret
                                   1602 
                                   1603 ;------------------------------------
                                   1604 ;  two's complement acc24
                                   1605 ;  input:
                                   1606 ;		acc24 variable
                                   1607 ;  output:
                                   1608 ;		acc24 variable
                                   1609 ;-------------------------------------
      0009D0                       1610 neg_acc24:
      0009D0 72 53 00 0A      [ 1] 1611 	cpl acc24+2
      0009D4 72 53 00 09      [ 1] 1612 	cpl acc24+1
      0009D8 72 53 00 08      [ 1] 1613 	cpl acc24
      0009DC A6 01            [ 1] 1614 	ld a,#1
      0009DE CB 00 0A         [ 1] 1615 	add a,acc24+2
      0009E1 C7 00 0A         [ 1] 1616 	ld acc24+2,a
      0009E4 4F               [ 1] 1617 	clr a
      0009E5 C9 00 09         [ 1] 1618 	adc a,acc24+1
      0009E8 C7 00 09         [ 1] 1619 	ld acc24+1,a 
      0009EB 4F               [ 1] 1620 	clr a 
      0009EC C9 00 08         [ 1] 1621 	adc a,acc24 
      0009EF C7 00 08         [ 1] 1622 	ld acc24,a 
      0009F2 81               [ 4] 1623 	ret
                                   1624 
                                   1625 
                                   1626 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1627 ; read a line of text from terminal
                                   1628 ; input:
                                   1629 ;	none
                                   1630 ; local variable on stack:
                                   1631 ;	LL (1,sp)
                                   1632 ;   RXCHAR (2,sp)
                                   1633 ; output:
                                   1634 ;   text in tib  buffer
                                   1635 ;------------------------------------
                                   1636 	; local variables
                           000001  1637 	LL_HB=1
                           000001  1638 	RXCHAR = 1 ; last char received
                           000002  1639 	LL = 2  ; accepted line length
                           000002  1640 	VSIZE=2 
      0009F3                       1641 readln:
      0009F3 5F               [ 1] 1642 	clrw x 
      0009F4 89               [ 2] 1643 	pushw x 
      0009F5 90 AE 16 C8      [ 2] 1644  	ldw y,#tib ; input buffer
      0009F9                       1645 readln_loop:
      0009F9 CD 02 27         [ 4] 1646 	call getc
      0009FC 6B 01            [ 1] 1647 	ld (RXCHAR,sp),a
      0009FE A1 0D            [ 1] 1648 	cp a,#CR
      000A00 26 03            [ 1] 1649 	jrne 1$
      000A02 CC 0A 72         [ 2] 1650 	jp readln_quit
      000A05 A1 0A            [ 1] 1651 1$:	cp a,#NL
      000A07 27 69            [ 1] 1652 	jreq readln_quit
      000A09 A1 08            [ 1] 1653 	cp a,#BSP
      000A0B 27 41            [ 1] 1654 	jreq del_back
      000A0D A1 04            [ 1] 1655 	cp a,#CTRL_D
      000A0F 27 2E            [ 1] 1656 	jreq del_ln
      000A11 A1 12            [ 1] 1657 	cp a,#CTRL_R 
      000A13 27 06            [ 1] 1658 	jreq reprint 
                                   1659 ;	cp a,#'[
                                   1660 ;	jreq ansi_seq
      000A15                       1661 final_test:
      000A15 A1 20            [ 1] 1662 	cp a,#SPACE
      000A17 2A 44            [ 1] 1663 	jrpl accept_char
      000A19 20 DE            [ 2] 1664 	jra readln_loop
      000A1B                       1665 ansi_seq:
                                   1666 ;	call getc
                                   1667 ;	cp a,#'C 
                                   1668 ;	jreq rigth_arrow
                                   1669 ;	cp a,#'D 
                                   1670 ;	jreq left_arrow 
                                   1671 ;	jra final_test
      000A1B                       1672 right_arrow:
                                   1673 ;	ld a,#BSP 
                                   1674 ;	call putc 
                                   1675 ;	jra realn_loop 
      000A1B                       1676 left_arrow:
                                   1677 
                                   1678 ;	jra readln_loop
      000A1B                       1679 reprint: 
      000A1B 72 5D 00 02      [ 1] 1680 	tnz count 
      000A1F 27 D8            [ 1] 1681 	jreq readln_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A21 0D 02            [ 1] 1682 	tnz (LL,sp)
      000A23 26 D4            [ 1] 1683 	jrne readln_loop
      000A25 AE 16 C8         [ 2] 1684 	ldw x,#tib 
      000A28 CD 02 30         [ 4] 1685 	call puts
      000A2B 90 AE 16 C8      [ 2] 1686 	ldw y,#tib 
      000A2F C6 00 02         [ 1] 1687 	ld a,count 
      000A32 6B 02            [ 1] 1688 	ld (LL,sp),a
      000A34 72 5F 00 02      [ 1] 1689 	clr count 
      000A38 0F 01            [ 1] 1690 	clr (LL_HB,sp)
      000A3A 72 F9 01         [ 2] 1691 	addw y,(LL_HB,sp)
      000A3D 20 BA            [ 2] 1692 	jra readln_loop 
      000A3F                       1693 del_ln:
      000A3F 7B 02            [ 1] 1694 	ld a,(LL,sp)
      000A41 CD 02 4A         [ 4] 1695 	call delete
      000A44 90 AE 16 C8      [ 2] 1696 	ldw y,#tib
      000A48 90 7F            [ 1] 1697 	clr (y)
      000A4A 0F 02            [ 1] 1698 	clr (LL,sp)
      000A4C 20 AB            [ 2] 1699 	jra readln_loop
      000A4E                       1700 del_back:
      000A4E 0D 02            [ 1] 1701     tnz (LL,sp)
      000A50 27 A7            [ 1] 1702     jreq readln_loop
      000A52 0A 02            [ 1] 1703     dec (LL,sp)
      000A54 90 5A            [ 2] 1704     decw y
      000A56 90 7F            [ 1] 1705     clr  (y)
      000A58 CD 02 3A         [ 4] 1706     call bksp 
      000A5B 20 9C            [ 2] 1707     jra readln_loop	
      000A5D                       1708 accept_char:
      000A5D A6 4F            [ 1] 1709 	ld a,#TIB_SIZE-1
      000A5F 11 02            [ 1] 1710 	cp a, (LL,sp)
      000A61 27 96            [ 1] 1711 	jreq readln_loop
      000A63 7B 01            [ 1] 1712 	ld a,(RXCHAR,sp)
      000A65 90 F7            [ 1] 1713 	ld (y),a
      000A67 0C 02            [ 1] 1714 	inc (LL,sp)
      000A69 90 5C            [ 1] 1715 	incw y
      000A6B 90 7F            [ 1] 1716 	clr (y)
      000A6D CD 02 1E         [ 4] 1717 	call putc 
      000A70 20 87            [ 2] 1718 	jra readln_loop
      000A72                       1719 readln_quit:
      000A72 90 7F            [ 1] 1720 	clr (y)
      000A74 7B 02            [ 1] 1721 	ld a,(LL,sp)
      000A76 C7 00 02         [ 1] 1722 	ld count,a 
      000A79                       1723 	_drop VSIZE 
      000A79 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A7B A6 0D            [ 1] 1724 	ld a,#CR
      000A7D CD 02 1E         [ 4] 1725 	call putc
      000A80 81               [ 4] 1726 	ret
                                   1727 
                           000001  1728 .if DEBUG 	
                                   1729 ;----------------------------
                                   1730 ; command interface
                                   1731 ; only 2 commands:
                                   1732 ;  'q' to resume application
                                   1733 ;  'p [addr]' to print memory values 
                                   1734 ;  's addr' to print string 
                                   1735 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1736 ;local variable 
                           000001  1737 	PSIZE=1
                           000001  1738 	VSIZE=1 
      000A81                       1739 cmd_itf:
      000A81 52 01            [ 2] 1740 	sub sp,#VSIZE 
      000A83 72 5F 00 13      [ 1] 1741 	clr farptr 
      000A87 72 5F 00 14      [ 1] 1742 	clr farptr+1 
      000A8B 72 5F 00 15      [ 1] 1743 	clr farptr+2  
      000A8F                       1744 repl:
      000A8F A6 0D            [ 1] 1745 	ld a,#CR 
      000A91 CD 02 1E         [ 4] 1746 	call putc 
      000A94 A6 3F            [ 1] 1747 	ld a,#'? 
      000A96 CD 02 1E         [ 4] 1748 	call putc
      000A99 72 5F 00 00      [ 1] 1749 	clr in.w 
      000A9D 72 5F 00 01      [ 1] 1750 	clr in 
      000AA1 CD 09 F3         [ 4] 1751 	call readln
      000AA4 CD 0C 7D         [ 4] 1752 	call get_token
      000AA7 90 AE 17 18      [ 2] 1753 	ldw y,#pad 
      000AAB 90 F6            [ 1] 1754 	ld a,(y)
      000AAD 90 5C            [ 1] 1755 	incw y
      000AAF A1 51            [ 1] 1756 	cp a,#'Q 
      000AB1 26 0B            [ 1] 1757 	jrne test_p
      000AB3                       1758 repl_exit:
      000AB3                       1759 	_drop #VSIZE 	
      000AB3 5B 01            [ 2]    1     addw sp,##VSIZE 
      000AB5 81               [ 4] 1760 	ret  
      000AB6                       1761 invalid:
      000AB6 AE 0B 24         [ 2] 1762 	ldw x,#invalid_cmd 
      000AB9 CD 02 30         [ 4] 1763 	call puts 
      000ABC 20 D1            [ 2] 1764 	jra repl 
      000ABE                       1765 test_p:	
      000ABE A1 50            [ 1] 1766     cp a,#'P 
      000AC0 27 10            [ 1] 1767 	jreq mem_peek
      000AC2 A1 53            [ 1] 1768     cp a,#'S 
      000AC4 26 F0            [ 1] 1769 	jrne invalid 
      000AC6                       1770 print_string:	
      000AC6 CD 0C 7D         [ 4] 1771 	call get_token
      000AC9 CE 00 09         [ 2] 1772 	ldw x,acc16 
      000ACC CD 02 30         [ 4] 1773 	call puts
      000ACF CC 0A 8F         [ 2] 1774 	jp repl 	
      000AD2                       1775 mem_peek:	 
      000AD2 CD 0C 7D         [ 4] 1776 	call get_token
      000AD5 C6 00 08         [ 1] 1777 	ld a, acc24 
      000AD8 CA 00 09         [ 1] 1778 	or a,acc16 
      000ADB CA 00 0A         [ 1] 1779 	or a,acc8 
      000ADE 26 02            [ 1] 1780 	jrne 1$ 
      000AE0 20 0C            [ 2] 1781 	jra peek_byte  
      000AE2 CE 00 08         [ 2] 1782 1$:	ldw x,acc24 
      000AE5 CF 00 13         [ 2] 1783 	ldw farptr,x 
      000AE8 C6 00 0A         [ 1] 1784 	ld a,acc8 
      000AEB C7 00 15         [ 1] 1785 	ld farptr+2,a 
      000AEE                       1786 peek_byte:
      000AEE CD 0B 33         [ 4] 1787 	call print_farptr 
      000AF1 A6 08            [ 1] 1788 	ld a,#8 
      000AF3 6B 01            [ 1] 1789 	ld (PSIZE,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AF5 5F               [ 1] 1790 	clrw x 
      000AF6 CD 0B 4E         [ 4] 1791 1$:	call fetchc  
      000AF9 89               [ 2] 1792 	pushw x 
      000AFA C7 00 0A         [ 1] 1793 	ld acc8,a 
      000AFD 5F               [ 1] 1794 	clrw x 
      000AFE CF 00 08         [ 2] 1795 	ldw acc24,x 
      000B01 A6 90            [ 1] 1796 	ld a,#16+128
      000B03 CD 08 B0         [ 4] 1797 	call prti24
      000B06 85               [ 2] 1798 	popw x 
      000B07 0A 01            [ 1] 1799 	dec (PSIZE,sp)
      000B09 26 EB            [ 1] 1800 	jrne 1$ 
      000B0B A6 08            [ 1] 1801 	ld a,#8 
      000B0D CB 00 15         [ 1] 1802 	add a,farptr+2 
      000B10 C7 00 15         [ 1] 1803 	ld farptr+2,a
      000B13 4F               [ 1] 1804 	clr a 
      000B14 C9 00 14         [ 1] 1805 	adc a,farptr+1 
      000B17 C7 00 14         [ 1] 1806 	ld farptr+1,a 
      000B1A 4F               [ 1] 1807 	clr a 
      000B1B C9 00 13         [ 1] 1808 	adc a,farptr 
      000B1E C7 00 13         [ 1] 1809 	ld farptr,a 
      000B21 CC 0A 8F         [ 2] 1810 	jp repl  
                                   1811 
                                   1812 
      000B24 6E 6F 74 20 61 20 63  1813 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1814 
                                   1815 ;----------------------------
                                   1816 ; display farptr address
                                   1817 ;----------------------------
      000B33                       1818 print_farptr:
      000B33 C6 00 15         [ 1] 1819 	ld a ,farptr+2 
      000B36 C7 00 0A         [ 1] 1820 	ld acc8,a 
      000B39 CE 00 13         [ 2] 1821 	ldw x,farptr 
      000B3C CF 00 08         [ 2] 1822 	ldw acc24,x 
      000B3F 5F               [ 1] 1823 	clrw x 
      000B40 A6 10            [ 1] 1824 	ld a,#16 
      000B42 CD 08 B0         [ 4] 1825 	call prti24
      000B45 A6 20            [ 1] 1826 	ld a,#SPACE 
      000B47 CD 02 1E         [ 4] 1827 	call putc 
      000B4A CD 02 1E         [ 4] 1828 	call putc 
      000B4D 81               [ 4] 1829 	ret
                                   1830 
                                   1831 ;------------------------------------
                                   1832 ; get byte at address farptr[X]
                                   1833 ; input:
                                   1834 ;	 farptr   address to peek
                                   1835 ;    X		  farptr index 	
                                   1836 ; output:
                                   1837 ;	 A 		  byte from memory  
                                   1838 ;    x		  incremented by 1
                                   1839 ;------------------------------------
      000B4E                       1840 fetchc: ; @C
      000B4E 92 AF 00 13      [ 5] 1841 	ldf a,([farptr],x)
      000B52 5C               [ 1] 1842 	incw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000B53 81               [ 4] 1843 	ret
                                   1844 
                                   1845 
                                   1846 ;------------------------------------
                                   1847 ; expect a number from command line 
                                   1848 ; next argument
                                   1849 ;  input:
                                   1850 ;	  none
                                   1851 ;  output:
                                   1852 ;    acc24   int24_t 
                                   1853 ;------------------------------------
      000B54                       1854 number::
      000B54 CD 0C 7D         [ 4] 1855 	call get_token
      000B57 CD 0E 71         [ 4] 1856 	call atoi
      000B5A 81               [ 4] 1857 	ret
                                   1858 .endif
                                   1859 
                                   1860 ;------------------------------------
                                   1861 ; parse quoted string 
                                   1862 ; input:
                                   1863 ;   Y 	pointer to tib 
                                   1864 ;   X   pointer to pad
                                   1865 ; output:
                                   1866 ;	pad   parsed string
                                   1867 ;   TOS  char* to pad  
                                   1868 ;------------------------------------
                           000001  1869 	PREV = 1
                           000002  1870 	CURR =2 
                           000002  1871 	VSIZE=2 
      000B5B                       1872 parse_quote: ; { -- addr }
      000B5B                       1873 	_vars VSIZE 
      000B5B 52 02            [ 2]    1     sub sp,#VSIZE 
      000B5D 4F               [ 1] 1874 	clr a
      000B5E 6B 01            [ 1] 1875 1$:	ld (PREV,sp),a 
      000B60 72 5C 00 01      [ 1] 1876 2$:	inc in
      000B64 91 D6 00         [ 4] 1877 	ld a,([in.w],y)
      000B67 27 24            [ 1] 1878 	jreq 6$
      000B69 6B 02            [ 1] 1879 	ld (CURR,sp),a 
      000B6B A6 5C            [ 1] 1880 	ld a,#'\
      000B6D 11 01            [ 1] 1881 	cp a, (PREV,sp)
      000B6F 26 0A            [ 1] 1882 	jrne 3$
      000B71 0F 01            [ 1] 1883 	clr (PREV,sp)
      000B73 7B 02            [ 1] 1884 	ld a,(CURR,sp)
      000B75 AD 1F            [ 4] 1885 	callr convert_escape
      000B77 F7               [ 1] 1886 	ld (x),a 
      000B78 5C               [ 1] 1887 	incw x 
      000B79 20 E5            [ 2] 1888 	jra 2$
      000B7B                       1889 3$:
      000B7B 7B 02            [ 1] 1890 	ld a,(CURR,sp)
      000B7D A1 5C            [ 1] 1891 	cp a,#'\'
      000B7F 27 DD            [ 1] 1892 	jreq 1$
      000B81 A1 22            [ 1] 1893 	cp a,#'"
      000B83 27 04            [ 1] 1894 	jreq 5$ 
      000B85 F7               [ 1] 1895 	ld (x),a 
      000B86 5C               [ 1] 1896 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B87 20 D7            [ 2] 1897 	jra 2$
      000B89 72 5C 00 01      [ 1] 1898 5$:	inc in 
      000B8D 7F               [ 1] 1899 6$: clr (x)
      000B8E AE 17 18         [ 2] 1900 	ldw x,#pad 
      000B91                       1901 	_drop VSIZE
      000B91 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B93 A6 06            [ 1] 1902 	ld a,#TK_QSTR  
      000B95 81               [ 4] 1903 	ret 
                                   1904 
                                   1905 ;---------------------------------------
                                   1906 ; called by parse_quote
                                   1907 ; subtitute escaped character 
                                   1908 ; by their ASCII value .
                                   1909 ; input:
                                   1910 ;   A  character following '\'
                                   1911 ; output:
                                   1912 ;   A  substitued char or same if not valid.
                                   1913 ;---------------------------------------
      000B96                       1914 convert_escape:
      000B96 A1 61            [ 1] 1915 	cp a,#'a'
      000B98 26 03            [ 1] 1916 	jrne 1$
      000B9A A6 07            [ 1] 1917 	ld a,#7
      000B9C 81               [ 4] 1918 	ret 
      000B9D A1 62            [ 1] 1919 1$: cp a,#'b'
      000B9F 26 03            [ 1] 1920 	jrne 2$
      000BA1 A6 08            [ 1] 1921 	ld a,#8
      000BA3 81               [ 4] 1922 	ret 
      000BA4 A1 65            [ 1] 1923 2$: cp a,#'e' 
      000BA6 26 03            [ 1] 1924     jrne 3$
      000BA8 A6 5C            [ 1] 1925 	ld a,#'\'
      000BAA 81               [ 4] 1926 	ret  
      000BAB A1 5C            [ 1] 1927 3$: cp a,#'\'
      000BAD 26 03            [ 1] 1928 	jrne 4$
      000BAF A6 5C            [ 1] 1929 	ld a,#'\'
      000BB1 81               [ 4] 1930 	ret 
      000BB2 A1 66            [ 1] 1931 4$: cp a,#'f' 
      000BB4 26 03            [ 1] 1932 	jrne 5$ 
      000BB6 A6 0C            [ 1] 1933 	ld a,#FF 
      000BB8 81               [ 4] 1934 	ret  
      000BB9 A1 6E            [ 1] 1935 5$: cp a,#'n' 
      000BBB 26 03            [ 1] 1936     jrne 6$ 
      000BBD A6 0A            [ 1] 1937 	ld a,#0xa 
      000BBF 81               [ 4] 1938 	ret  
      000BC0 A1 72            [ 1] 1939 6$: cp a,#'r' 
      000BC2 26 03            [ 1] 1940 	jrne 7$
      000BC4 A6 0D            [ 1] 1941 	ld a,#0xd 
      000BC6 81               [ 4] 1942 	ret  
      000BC7 A1 74            [ 1] 1943 7$: cp a,#'t' 
      000BC9 26 03            [ 1] 1944 	jrne 8$ 
      000BCB A6 09            [ 1] 1945 	ld a,#9 
      000BCD 81               [ 4] 1946 	ret  
      000BCE A1 76            [ 1] 1947 8$: cp a,#'v' 
      000BD0 26 02            [ 1] 1948 	jrne 9$  
      000BD2 A6 0B            [ 1] 1949 	ld a,#0xb 
      000BD4 81               [ 4] 1950 9$:	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1951 
                                   1952 ;-------------------------
                                   1953 ; integer parser 
                                   1954 ; input:
                                   1955 ;   X 		point to pad 
                                   1956 ;   Y 		point to tib 
                                   1957 ;   A 	    first digit|'$' 
                                   1958 ; output:  
                                   1959 ;   pad     number string 
                                   1960 ;   X 		integer 
                                   1961 ;   A 		TK_INTGR
                                   1962 ;   TOS     integer 
                                   1963 ;-------------------------
                           000001  1964 	BASE=1
                           000002  1965 	TCHAR=2 
                           000002  1966 	VSIZE=2 
      000BD5                       1967 parse_integer: ; { -- n }
      000BD5 4B 00            [ 1] 1968 	push #0 ; TCHAR 
      000BD7 A1 24            [ 1] 1969 	cp a,#'$
      000BD9 27 04            [ 1] 1970 	jreq 1$ 
      000BDB 4B 0A            [ 1] 1971 	push #10 ; BASE=10 
      000BDD 20 02            [ 2] 1972 	jra 2$ 
      000BDF 4B 10            [ 1] 1973 1$: push #16  ; BASE=16
      000BE1 F7               [ 1] 1974 2$:	ld (x),a 
      000BE2 5C               [ 1] 1975 	incw x 
      000BE3 72 5C 00 01      [ 1] 1976 	inc in 
      000BE7 91 D6 00         [ 4] 1977 	ld a,([in.w],y)
      000BEA CD 0E 4C         [ 4] 1978 	call to_upper 
      000BED 6B 02            [ 1] 1979 	ld (TCHAR,sp),a 
      000BEF CD 0E 38         [ 4] 1980 	call is_digit 
      000BF2 25 ED            [ 1] 1981 	jrc 2$
      000BF4 A6 10            [ 1] 1982 	ld a,#16 
      000BF6 11 01            [ 1] 1983 	cp a,(BASE,sp)
      000BF8 26 0A            [ 1] 1984 	jrne 3$ 
      000BFA 7B 02            [ 1] 1985 	ld a,(TCHAR,sp)
      000BFC A1 41            [ 1] 1986 	cp a,#'A 
      000BFE 2B 04            [ 1] 1987 	jrmi 3$ 
      000C00 A1 47            [ 1] 1988 	cp a,#'G 
      000C02 2B DD            [ 1] 1989 	jrmi 2$ 
      000C04 7F               [ 1] 1990 3$:	clr (x)
      000C05 CD 0E 71         [ 4] 1991 	call atoi
      000C08 CE 00 09         [ 2] 1992 	ldw x,acc16 
      000C0B A6 0A            [ 1] 1993 	ld a,#TK_INTGR
      000C0D                       1994 	_drop VSIZE  
      000C0D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C0F 81               [ 4] 1995 	ret 	
                                   1996 
                                   1997 ;-------------------------
                                   1998 ; binary integer parser 
                                   1999 ; input:
                                   2000 ;   X 		point to pad 
                                   2001 ;   Y 		point to tib 
                                   2002 ;   A 	    '%' 
                                   2003 ; output:  
                                   2004 ;   pad     number string 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2005 ;   X 		integer 
                                   2006 ;   A 		TK_INTGR
                                   2007 ;   TOS     integer 
                                   2008 ;-------------------------
                           000001  2009 	BINARY=1
                           000002  2010 	VSIZE=2
      000C10                       2011 parse_binary: ; { -- n }
      000C10 4B 00            [ 1] 2012 	push #0
      000C12 4B 00            [ 1] 2013 	push #0
      000C14 F7               [ 1] 2014 1$: ld (x),a 
      000C15 5C               [ 1] 2015 	incw x 
      000C16 72 5C 00 01      [ 1] 2016 	inc in 
      000C1A 91 D6 00         [ 4] 2017 	ld a,([in.w],y)
      000C1D A1 30            [ 1] 2018 	cp a,#'0 
      000C1F 27 06            [ 1] 2019 	jreq 2$
      000C21 A1 31            [ 1] 2020 	cp a,#'1 
      000C23 27 02            [ 1] 2021 	jreq 2$ 
      000C25 20 09            [ 2] 2022 	jra bin_exit 
      000C27 A0 30            [ 1] 2023 2$: sub a,#'0	
      000C29 46               [ 1] 2024 	rrc a 
      000C2A 09 02            [ 1] 2025 	rlc (BINARY+1,sp)
      000C2C 09 01            [ 1] 2026 	rlc (BINARY,sp)
      000C2E 20 E4            [ 2] 2027 	jra 1$  
      000C30                       2028 bin_exit:
      000C30 7F               [ 1] 2029 	clr (x)
      000C31 1E 01            [ 2] 2030 	ldw x,(BINARY,sp)
      000C33 A6 0A            [ 1] 2031 	ld a,#TK_INTGR 	
      000C35                       2032 	_drop VSIZE 
      000C35 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C37 81               [ 4] 2033 	ret
                                   2034 
                                   2035 ;---------------------------
                                   2036 ;  token begin with a letter,
                                   2037 ;  is keyword or variable. 	
                                   2038 ; input:
                                   2039 ;   X 		point to pad 
                                   2040 ;   Y 		point to text
                                   2041 ;   A 	    first letter  
                                   2042 ; output:
                                   2043 ;   X		exec_addr|var_addr 
                                   2044 ;   A 		TK_CMD 
                                   2045 ;   pad 	keyword|var_name  
                                   2046 ;   TOS     exec_addr|var_addr 
                                   2047 ;--------------------------  
      000C38                       2048 parse_keyword: ; { -- exec_addr|var_addr}
      000C38 CD 0E 4C         [ 4] 2049 	call to_upper 
      000C3B F7               [ 1] 2050 	ld (x),a 
      000C3C 5C               [ 1] 2051 	incw x 
      000C3D 72 5C 00 01      [ 1] 2052 	inc in 
      000C41 91 D6 00         [ 4] 2053 	ld a,([in.w],y)
      000C44 CD 04 78         [ 4] 2054 	call is_alpha 
      000C47 25 EF            [ 1] 2055 	jrc parse_keyword 
      000C49 7F               [ 1] 2056 1$: clr (x)
      000C4A 72 5D 17 19      [ 1] 2057 	tnz pad+1 
      000C4E 26 15            [ 1] 2058 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2059 ; one letter variable name 
      000C50 C6 17 18         [ 1] 2060 	ld a,pad 
      000C53 A0 41            [ 1] 2061 	sub a,#'A 
      000C55 48               [ 1] 2062 	sll a 
      000C56 88               [ 1] 2063 	push a 
      000C57 4B 00            [ 1] 2064 	push #0
      000C59 AE 00 26         [ 2] 2065 	ldw x,#vars 
      000C5C 72 FB 01         [ 2] 2066 	addw x,(1,sp) ; X=var address 
      000C5F                       2067 	_drop 2 
      000C5F 5B 02            [ 2]    1     addw sp,#2 
      000C61 A6 02            [ 1] 2068 	ld a,#TK_VAR 
      000C63 20 17            [ 2] 2069 	jra 4$ 
      000C65                       2070 2$: ; check for keyword, otherwise syntax error.
      000C65                       2071 	_ldx_dict kword_dict
      000C65 AE 1D F4         [ 2]    1     ldw x,#kword_dict+2
      000C68 CD 10 E4         [ 4] 2072 	call search_dict
      000C6B 4D               [ 1] 2073 	tnz a
      000C6C 26 03            [ 1] 2074 	jrne 3$ 
      000C6E CC 06 A1         [ 2] 2075 	jp syntax_error
      000C71 A3 14 E0         [ 2] 2076 3$: cpw x,#rem  
      000C74 26 06            [ 1] 2077 	jrne 4$
      000C76 55 00 02 00 01   [ 1] 2078 	mov in,count 
      000C7B 4F               [ 1] 2079 	clr a 
      000C7C 81               [ 4] 2080 4$:	ret  	
                                   2081 
                                   2082 
                                   2083 ;------------------------------------
                                   2084 ; Command line tokenizer
                                   2085 ; scan text for next token
                                   2086 ; move token in 'pad'
                                   2087 ; input: 
      000C7D                       2088 	none: 
                                   2089 ; use:
                                   2090 ;	Y   pointer to text
                                   2091 ;   X	pointer to pad 
                                   2092 ;   in.w   index in text buffer
                                   2093 ; output:
                                   2094 ;   A       token attribute 
                                   2095 ;   pad 	token as .asciz
                                   2096 ;   X 		token value   
                                   2097 ;------------------------------------
                                   2098 	; use to check special character 
                                   2099 	.macro _case c t  
                                   2100 	ld a,#c 
                                   2101 	cp a,(TCHAR,sp) 
                                   2102 	jrne t
                                   2103 	.endm 
                                   2104 
                           000001  2105 	TCHAR=1
                           000002  2106 	ATTRIB=2 
                           000002  2107 	VSIZE=2
      000C7D                       2108 get_token: 
      000C7D CE 00 00         [ 2] 2109 	ldw x,in.w 
      000C80 CF 00 11         [ 2] 2110 	ldw in.w.saved,x 
      000C83 90 CE 00 03      [ 2] 2111 	ldw y,basicptr   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C87 C6 00 01         [ 1] 2112 	ld a,in 
      000C8A C1 00 02         [ 1] 2113 	cp a,count 
      000C8D 2B 03            [ 1] 2114 	jrmi 1$
      000C8F A6 00            [ 1] 2115 	ld a,#TK_NONE 
      000C91 81               [ 4] 2116 	ret 
      000C92                       2117 1$:	
      000C92                       2118 	_vars VSIZE
      000C92 52 02            [ 2]    1     sub sp,#VSIZE 
      000C94 AE 17 18         [ 2] 2119 	ldw x, #pad
      000C97 A6 20            [ 1] 2120 	ld a,#SPACE
      000C99 CD 0F 1D         [ 4] 2121 	call skip
      000C9C 91 D6 00         [ 4] 2122 	ld a,([in.w],y)
      000C9F 26 07            [ 1] 2123 	jrne str_tst
      000CA1 72 5F 17 18      [ 1] 2124 	clr pad 
      000CA5 CC 0E 35         [ 2] 2125 	jp token_exit ; end of line 
                                   2126 
      000CA8                       2127 str_tst: ; check for quoted string  	
      000CA8 CD 0E 4C         [ 4] 2128 	call to_upper 
      000CAB 6B 01            [ 1] 2129 	ld (TCHAR,sp),a 
      000CAD                       2130 	_case '"' nbr_tst
      000CAD A6 22            [ 1]    1 	ld a,#'"' 
      000CAF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CB1 26 06            [ 1]    3 	jrne nbr_tst
      000CB3 CD 0B 5B         [ 4] 2131 	call parse_quote
      000CB6 CC 0E 35         [ 2] 2132 	jp token_exit
      000CB9                       2133 nbr_tst: ; check for number 
      000CB9 A6 24            [ 1] 2134 	ld a,#'$'
      000CBB 11 01            [ 1] 2135 	cp a,(TCHAR,sp) 
      000CBD 27 13            [ 1] 2136 	jreq 1$
      000CBF A6 26            [ 1] 2137 	ld a,#'&
      000CC1 11 01            [ 1] 2138 	cp a,(TCHAR,sp)
      000CC3 26 06            [ 1] 2139 	jrne 0$
      000CC5 CD 0C 10         [ 4] 2140 	call parse_binary ; expect binary integer 
      000CC8 CC 0E 35         [ 2] 2141 	jp token_exit 
      000CCB 7B 01            [ 1] 2142 0$:	ld a,(TCHAR,sp)
      000CCD CD 0E 38         [ 4] 2143 	call is_digit
      000CD0 24 06            [ 1] 2144 	jrnc 3$
      000CD2 CD 0B D5         [ 4] 2145 1$:	call parse_integer 
      000CD5 CC 0E 35         [ 2] 2146 	jp token_exit 
      000CD8                       2147 3$: 
      000CD8                       2148 	_case '(' bkslsh_tst 
      000CD8 A6 28            [ 1]    1 	ld a,#'(' 
      000CDA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CDC 26 05            [ 1]    3 	jrne bkslsh_tst
      000CDE A6 04            [ 1] 2149 	ld a,#TK_LPAREN
      000CE0 CC 0E 25         [ 2] 2150 	jp token_char   	
      000CE3                       2151 bkslsh_tst:
      000CE3                       2152 	_case '\',rparnt_tst
      000CE3 A6 5C            [ 1]    1 	ld a,#'\' 
      000CE5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CE7 26 18            [ 1]    3 	jrne rparnt_tst
      000CE9 7B 01            [ 1] 2153 	ld a,(TCHAR,sp)
      000CEB F7               [ 1] 2154 	ld (x),a 
      000CEC 5C               [ 1] 2155 	incw x 
      000CED 72 5C 00 01      [ 1] 2156 	inc in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CF1 91 D6 00         [ 4] 2157 	ld a,([in.w],y)
      000CF4 F7               [ 1] 2158 	ld (x),a 
      000CF5 5C               [ 1] 2159 	incw x 
      000CF6 72 5C 00 01      [ 1] 2160 	inc in  
      000CFA 7F               [ 1] 2161 	clr (x) 
      000CFB 97               [ 1] 2162 	ld xl,a 
      000CFC A6 0B            [ 1] 2163 	ld a,#TK_CHAR 
      000CFE CC 0E 35         [ 2] 2164 	jp token_exit 
      000D01                       2165 rparnt_tst:		
      000D01                       2166 	_case ')' colon_tst 
      000D01 A6 29            [ 1]    1 	ld a,#')' 
      000D03 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D05 26 05            [ 1]    3 	jrne colon_tst
      000D07 A6 05            [ 1] 2167 	ld a,#TK_RPAREN 
      000D09 CC 0E 25         [ 2] 2168 	jp token_char 
      000D0C                       2169 colon_tst:
      000D0C                       2170 	_case ':' comma_tst 
      000D0C A6 3A            [ 1]    1 	ld a,#':' 
      000D0E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D10 26 05            [ 1]    3 	jrne comma_tst
      000D12 A6 01            [ 1] 2171 	ld a,#TK_COLON 
      000D14 CC 0E 25         [ 2] 2172 	jp token_char 
      000D17                       2173 comma_tst:
      000D17                       2174 	_case COMMA sharp_tst 
      000D17 A6 2C            [ 1]    1 	ld a,#COMMA 
      000D19 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D1B 26 05            [ 1]    3 	jrne sharp_tst
      000D1D A6 08            [ 1] 2175 	ld a,#TK_COMMA
      000D1F CC 0E 25         [ 2] 2176 	jp token_char
      000D22                       2177 sharp_tst:
      000D22                       2178 	_case SHARP dash_tst 
      000D22 A6 23            [ 1]    1 	ld a,#SHARP 
      000D24 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D26 26 05            [ 1]    3 	jrne dash_tst
      000D28 A6 09            [ 1] 2179 	ld a,#TK_SHARP
      000D2A CC 0E 25         [ 2] 2180 	jp token_char  	 	 
      000D2D                       2181 dash_tst: 	
      000D2D                       2182 	_case '-' at_tst 
      000D2D A6 2D            [ 1]    1 	ld a,#'-' 
      000D2F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D31 26 05            [ 1]    3 	jrne at_tst
      000D33 A6 11            [ 1] 2183 	ld a,#TK_MINUS  
      000D35 CC 0E 25         [ 2] 2184 	jp token_char 
      000D38                       2185 at_tst:
      000D38                       2186 	_case '@' qmark_tst 
      000D38 A6 40            [ 1]    1 	ld a,#'@' 
      000D3A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3C 26 05            [ 1]    3 	jrne qmark_tst
      000D3E A6 03            [ 1] 2187 	ld a,#TK_ARRAY 
      000D40 CC 0E 25         [ 2] 2188 	jp token_char
      000D43                       2189 qmark_tst:
      000D43                       2190 	_case '?' tick_tst 
      000D43 A6 3F            [ 1]    1 	ld a,#'?' 
      000D45 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D47 26 11            [ 1]    3 	jrne tick_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D49 7B 01            [ 1] 2191 	ld a,(TCHAR,sp)
      000D4B F7               [ 1] 2192 	ld (x),a 
      000D4C 5C               [ 1] 2193 	incw x 
      000D4D 7F               [ 1] 2194 	clr (x)
      000D4E 72 5C 00 01      [ 1] 2195 	inc in 
      000D52 A6 07            [ 1] 2196 	ld a,#TK_CMD 
      000D54 AE 13 DB         [ 2] 2197 	ldw x,#print 
      000D57 CC 0E 35         [ 2] 2198 	jp token_exit
      000D5A                       2199 tick_tst: ; ignore comment 
      000D5A                       2200 	_case TICK plus_tst 
      000D5A A6 27            [ 1]    1 	ld a,#TICK 
      000D5C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D5E 26 0E            [ 1]    3 	jrne plus_tst
      000D60 7B 01            [ 1] 2201 	ld a,(TCHAR,sp)
      000D62 F7               [ 1] 2202 	ld (x),a 
      000D63 5C               [ 1] 2203 	incw x 
      000D64 7F               [ 1] 2204 	clr (x)
      000D65 55 00 02 00 01   [ 1] 2205 	mov in,count  
      000D6A 4F               [ 1] 2206 	clr a 
      000D6B CC 0E 35         [ 2] 2207 	jp token_exit 
      000D6E                       2208 plus_tst:
      000D6E                       2209 	_case '+' star_tst 
      000D6E A6 2B            [ 1]    1 	ld a,#'+' 
      000D70 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D72 26 05            [ 1]    3 	jrne star_tst
      000D74 A6 10            [ 1] 2210 	ld a,#TK_PLUS  
      000D76 CC 0E 25         [ 2] 2211 	jp token_char 
      000D79                       2212 star_tst:
      000D79                       2213 	_case '*' slash_tst 
      000D79 A6 2A            [ 1]    1 	ld a,#'*' 
      000D7B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D7D 26 05            [ 1]    3 	jrne slash_tst
      000D7F A6 20            [ 1] 2214 	ld a,#TK_MULT 
      000D81 CC 0E 25         [ 2] 2215 	jp token_char 
      000D84                       2216 slash_tst: 
      000D84                       2217 	_case '/' prcnt_tst 
      000D84 A6 2F            [ 1]    1 	ld a,#'/' 
      000D86 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D88 26 05            [ 1]    3 	jrne prcnt_tst
      000D8A A6 21            [ 1] 2218 	ld a,#TK_DIV 
      000D8C CC 0E 25         [ 2] 2219 	jp token_char 
      000D8F                       2220 prcnt_tst:
      000D8F                       2221 	_case '%' eql_tst 
      000D8F A6 25            [ 1]    1 	ld a,#'%' 
      000D91 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D93 26 05            [ 1]    3 	jrne eql_tst
      000D95 A6 22            [ 1] 2222 	ld a,#TK_MOD
      000D97 CC 0E 25         [ 2] 2223 	jp token_char  
                                   2224 ; 1 or 2 character tokens 	
      000D9A                       2225 eql_tst:
      000D9A                       2226 	_case '=' gt_tst 		
      000D9A A6 3D            [ 1]    1 	ld a,#'=' 
      000D9C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9E 26 05            [ 1]    3 	jrne gt_tst
      000DA0 A6 32            [ 1] 2227 	ld a,#TK_EQUAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000DA2 CC 0E 25         [ 2] 2228 	jp token_char 
      000DA5                       2229 gt_tst:
      000DA5                       2230 	_case '>' lt_tst 
      000DA5 A6 3E            [ 1]    1 	ld a,#'>' 
      000DA7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA9 26 33            [ 1]    3 	jrne lt_tst
      000DAB A6 31            [ 1] 2231 	ld a,#TK_GT 
      000DAD 6B 02            [ 1] 2232 	ld (ATTRIB,sp),a 
      000DAF 72 5C 00 01      [ 1] 2233 	inc in 
      000DB3 91 D6 00         [ 4] 2234 	ld a,([in.w],y)
      000DB6 A1 3D            [ 1] 2235 	cp a,#'=
      000DB8 26 0C            [ 1] 2236 	jrne 1$
      000DBA 7B 01            [ 1] 2237 	ld a,(TCHAR,sp)
      000DBC F7               [ 1] 2238 	ld (x),a
      000DBD 5C               [ 1] 2239 	incw x 
      000DBE A6 3D            [ 1] 2240 	ld a,#'=
      000DC0 6B 01            [ 1] 2241 	ld (TCHAR,sp),a 
      000DC2 A6 33            [ 1] 2242 	ld a,#TK_GE 
      000DC4 20 5F            [ 2] 2243 	jra token_char  
      000DC6 A1 3C            [ 1] 2244 1$: cp a,#'<
      000DC8 26 0C            [ 1] 2245 	jrne 2$
      000DCA 7B 01            [ 1] 2246 	ld a,(TCHAR,sp)
      000DCC F7               [ 1] 2247 	ld (x),a
      000DCD 5C               [ 1] 2248 	incw x 
      000DCE A6 3C            [ 1] 2249 	ld a,#'<	
      000DD0 6B 01            [ 1] 2250 	ld (TCHAR,sp),a 
      000DD2 A6 35            [ 1] 2251 	ld a,#TK_NE 
      000DD4 20 4F            [ 2] 2252 	jra token_char 
      000DD6 72 5A 00 01      [ 1] 2253 2$: dec in
      000DDA 7B 02            [ 1] 2254 	ld a,(ATTRIB,sp)
      000DDC 20 47            [ 2] 2255 	jra token_char 
      000DDE                       2256 lt_tst:
      000DDE                       2257 	_case '<' other
      000DDE A6 3C            [ 1]    1 	ld a,#'<' 
      000DE0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE2 26 32            [ 1]    3 	jrne other
      000DE4 A6 34            [ 1] 2258 	ld a,#TK_LT 
      000DE6 6B 02            [ 1] 2259 	ld (ATTRIB,sp),a 
      000DE8 72 5C 00 01      [ 1] 2260 	inc in 
      000DEC 91 D6 00         [ 4] 2261 	ld a,([in.w],y)
      000DEF A1 3D            [ 1] 2262 	cp a,#'=
      000DF1 26 0B            [ 1] 2263 	jrne 1$
      000DF3 7B 01            [ 1] 2264 	ld a,(TCHAR,sp)
      000DF5 F7               [ 1] 2265 	ld (x),a 
      000DF6 A6 3D            [ 1] 2266 	ld a,#'=
      000DF8 6B 01            [ 1] 2267 	ld (TCHAR,sp),a 
      000DFA A6 36            [ 1] 2268 	ld a,#TK_LE 
      000DFC 20 27            [ 2] 2269 	jra token_char 
      000DFE A1 3E            [ 1] 2270 1$: cp a,#'>
      000E00 26 0C            [ 1] 2271 	jrne 2$
      000E02 7B 01            [ 1] 2272 	ld a,(TCHAR,sp)
      000E04 F7               [ 1] 2273 	ld (x),a 
      000E05 5C               [ 1] 2274 	incw x 
      000E06 A6 3E            [ 1] 2275 	ld a,#'>
      000E08 6B 01            [ 1] 2276 	ld (TCHAR,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000E0A A6 35            [ 1] 2277 	ld a,#TK_NE 
      000E0C 20 17            [ 2] 2278 	jra token_char 
      000E0E 72 5A 00 01      [ 1] 2279 2$: dec in 
      000E12 7B 02            [ 1] 2280 	ld a,(ATTRIB,sp)
      000E14 20 0F            [ 2] 2281 	jra token_char 	
      000E16                       2282 other: ; not a special character 	 
      000E16 7B 01            [ 1] 2283 	ld a,(TCHAR,sp)
      000E18 CD 04 78         [ 4] 2284 	call is_alpha 
      000E1B 25 03            [ 1] 2285 	jrc 30$ 
      000E1D CC 06 A1         [ 2] 2286 	jp syntax_error 
      000E20                       2287 30$: 
      000E20 CD 0C 38         [ 4] 2288 	call parse_keyword
      000E23 20 10            [ 2] 2289 	jra token_exit 
      000E25                       2290 token_char:
      000E25 6B 02            [ 1] 2291 	ld (ATTRIB,sp),a 
      000E27 7B 01            [ 1] 2292 	ld a,(TCHAR,sp)
      000E29 F7               [ 1] 2293 	ld (x),a 
      000E2A 5C               [ 1] 2294 	incw x 
      000E2B 7F               [ 1] 2295 	clr(x)
      000E2C 72 5C 00 01      [ 1] 2296 	inc in 
      000E30 7B 02            [ 1] 2297 	ld a,(ATTRIB,sp)
      000E32 AE 17 18         [ 2] 2298 	ldw x,#pad 
      000E35                       2299 token_exit:
      000E35                       2300 	_drop VSIZE 
      000E35 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E37 81               [ 4] 2301 	ret
                                   2302 
                                   2303 
                                   2304 
                                   2305 ;------------------------------------
                                   2306 ; check if character in {'0'..'9'}
                                   2307 ; input:
                                   2308 ;    A  character to test
                                   2309 ; output:
                                   2310 ;    Carry  0 not digit | 1 digit
                                   2311 ;------------------------------------
      000E38                       2312 is_digit:
      000E38 A1 30            [ 1] 2313 	cp a,#'0
      000E3A 25 03            [ 1] 2314 	jrc 1$
      000E3C A1 3A            [ 1] 2315     cp a,#'9+1
      000E3E 8C               [ 1] 2316 	ccf 
      000E3F 8C               [ 1] 2317 1$:	ccf 
      000E40 81               [ 4] 2318     ret
                                   2319 
                                   2320 ;----------------------------------
                                   2321 ; convert to lower case
                                   2322 ; input: 
                                   2323 ;   A 		character to convert
                                   2324 ; output:
                                   2325 ;   A		result 
                                   2326 ;----------------------------------
      000E41                       2327 to_lower::
      000E41 A1 41            [ 1] 2328 	cp a,#'A
      000E43 25 06            [ 1] 2329 	jrult 9$
      000E45 A1 5A            [ 1] 2330 	cp a,#'Z 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E47 22 02            [ 1] 2331 	jrugt 9$
      000E49 AB 20            [ 1] 2332 	add a,#32
      000E4B 81               [ 4] 2333 9$: ret
                                   2334 
                                   2335 ;------------------------------------
                                   2336 ; convert alpha to uppercase
                                   2337 ; input:
                                   2338 ;    a  character to convert
                                   2339 ; output:
                                   2340 ;    a  uppercase character
                                   2341 ;------------------------------------
      000E4C                       2342 to_upper::
      000E4C A1 61            [ 1] 2343 	cp a,#'a
      000E4E 2A 01            [ 1] 2344 	jrpl 1$
      000E50 81               [ 4] 2345 0$:	ret
      000E51 A1 7A            [ 1] 2346 1$: cp a,#'z	
      000E53 22 FB            [ 1] 2347 	jrugt 0$
      000E55 A0 20            [ 1] 2348 	sub a,#32
      000E57 81               [ 4] 2349 	ret
                                   2350 	
                                   2351 ;------------------------------------
                                   2352 ; uppercase pad content
                                   2353 ; input:
                                   2354 ;	pad      .asciz 
                                   2355 ; output:
                                   2356 ;   pad      uppercase string 
                                   2357 ;------------------------------------
      000E58                       2358 upper:
      000E58 90 AE 17 18      [ 2] 2359 	ldw y,#pad 
      000E5C                       2360 upper_loop:	
      000E5C 90 F6            [ 1] 2361 	ld a,(y)
      000E5E 27 10            [ 1] 2362 	jreq 4$
      000E60 A1 61            [ 1] 2363 	cp a,#'a 
      000E62 2B 0C            [ 1] 2364 	jrmi 4$
      000E64 A1 7B            [ 1] 2365 	cp a,#'z+1 
      000E66 2A 08            [ 1] 2366 	jrpl 4$ 
      000E68 A0 20            [ 1] 2367 	sub a,#0x20 
      000E6A 90 F7            [ 1] 2368 	ld (y),a 
      000E6C 90 5C            [ 1] 2369 	incw y 
      000E6E 20 EC            [ 2] 2370 	jra upper_loop
      000E70 81               [ 4] 2371 4$: ret 
                                   2372 
                                   2373 ;------------------------------------
                                   2374 ; convert pad content in integer
                                   2375 ; input:
                                   2376 ;    pad		.asciz to convert
                                   2377 ; output:
                                   2378 ;    acc24      int24_t
                                   2379 ;------------------------------------
                                   2380 	; local variables
                           000001  2381 	SIGN=1 ; 1 byte, 
                           000002  2382 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2383 	TEMP=3 ; 1 byte, temporary storage
                           000003  2384 	VSIZE=3 ; 3 bytes reserved for local storage
      000E71                       2385 atoi:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E71 89               [ 2] 2386 	pushw x ;save x
      000E72 52 03            [ 2] 2387 	sub sp,#VSIZE
                                   2388 	; acc24=0 
      000E74 72 5F 00 08      [ 1] 2389 	clr acc24    
      000E78 72 5F 00 09      [ 1] 2390 	clr acc16
      000E7C 72 5F 00 0A      [ 1] 2391 	clr acc8 
      000E80 C6 17 18         [ 1] 2392 	ld a, pad 
      000E83 27 5A            [ 1] 2393 	jreq atoi_exit
      000E85 0F 01            [ 1] 2394 	clr (SIGN,sp)
      000E87 A6 0A            [ 1] 2395 	ld a,#10
      000E89 6B 02            [ 1] 2396 	ld (BASE,sp),a ; default base decimal
      000E8B AE 17 18         [ 2] 2397 	ldw x,#pad ; pointer to string to convert
      000E8E F6               [ 1] 2398 	ld a,(x)
      000E8F 27 47            [ 1] 2399 	jreq 9$  ; completed if 0
      000E91 A1 2D            [ 1] 2400 	cp a,#'-
      000E93 26 04            [ 1] 2401 	jrne 1$
      000E95 03 01            [ 1] 2402 	cpl (SIGN,sp)
      000E97 20 08            [ 2] 2403 	jra 2$
      000E99 A1 24            [ 1] 2404 1$: cp a,#'$
      000E9B 26 06            [ 1] 2405 	jrne 3$
      000E9D A6 10            [ 1] 2406 	ld a,#16
      000E9F 6B 02            [ 1] 2407 	ld (BASE,sp),a
      000EA1 5C               [ 1] 2408 2$:	incw x
      000EA2 F6               [ 1] 2409 	ld a,(x)
      000EA3                       2410 3$:	
      000EA3 A1 61            [ 1] 2411 	cp a,#'a
      000EA5 2B 02            [ 1] 2412 	jrmi 4$
      000EA7 A0 20            [ 1] 2413 	sub a,#32
      000EA9 A1 30            [ 1] 2414 4$:	cp a,#'0
      000EAB 2B 2B            [ 1] 2415 	jrmi 9$
      000EAD A0 30            [ 1] 2416 	sub a,#'0
      000EAF A1 0A            [ 1] 2417 	cp a,#10
      000EB1 2B 06            [ 1] 2418 	jrmi 5$
      000EB3 A0 07            [ 1] 2419 	sub a,#7
      000EB5 11 02            [ 1] 2420 	cp a,(BASE,sp)
      000EB7 2A 1F            [ 1] 2421 	jrpl 9$
      000EB9 6B 03            [ 1] 2422 5$:	ld (TEMP,sp),a
      000EBB 7B 02            [ 1] 2423 	ld a,(BASE,sp)
      000EBD CD 0E E3         [ 4] 2424 	call mulu24_8
      000EC0 7B 03            [ 1] 2425 	ld a,(TEMP,sp)
      000EC2 CB 00 0A         [ 1] 2426 	add a,acc24+2
      000EC5 C7 00 0A         [ 1] 2427 	ld acc24+2,a
      000EC8 4F               [ 1] 2428 	clr a
      000EC9 C9 00 09         [ 1] 2429 	adc a,acc24+1
      000ECC C7 00 09         [ 1] 2430 	ld acc24+1,a
      000ECF 4F               [ 1] 2431 	clr a
      000ED0 C9 00 08         [ 1] 2432 	adc a,acc24
      000ED3 C7 00 08         [ 1] 2433 	ld acc24,a
      000ED6 20 C9            [ 2] 2434 	jra 2$
      000ED8 0D 01            [ 1] 2435 9$:	tnz (SIGN,sp)
      000EDA 27 03            [ 1] 2436     jreq atoi_exit
      000EDC CD 09 D0         [ 4] 2437     call neg_acc24
      000EDF                       2438 atoi_exit: 
      000EDF 5B 03            [ 2] 2439 	addw sp,#VSIZE
      000EE1 85               [ 2] 2440 	popw x ; restore x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EE2 81               [ 4] 2441 	ret
                                   2442 
                                   2443 ;--------------------------------------
                                   2444 ; unsigned multiply uint24_t by uint8_t
                                   2445 ; use to convert numerical string to uint24_t
                                   2446 ; input:
                                   2447 ;	acc24	uint24_t 
                                   2448 ;   A		uint8_t
                                   2449 ; output:
                                   2450 ;   acc24   A*acc24
                                   2451 ;-------------------------------------
                                   2452 ; local variables offset  on sp
                           000003  2453 	U8   = 3   ; A pushed on stack
                           000002  2454 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2455 	OVFH = 1  ; multiplication overflow high byte
                           000003  2456 	VSIZE = 3
      000EE3                       2457 mulu24_8:
      000EE3 89               [ 2] 2458 	pushw x    ; save X
                                   2459 	; local variables
      000EE4 88               [ 1] 2460 	push a     ; U8
      000EE5 5F               [ 1] 2461 	clrw x     ; initialize overflow to 0
      000EE6 89               [ 2] 2462 	pushw x    ; multiplication overflow
                                   2463 ; multiply low byte.
      000EE7 C6 00 0A         [ 1] 2464 	ld a,acc24+2
      000EEA 97               [ 1] 2465 	ld xl,a
      000EEB 7B 03            [ 1] 2466 	ld a,(U8,sp)
      000EED 42               [ 4] 2467 	mul x,a
      000EEE 9F               [ 1] 2468 	ld a,xl
      000EEF C7 00 0A         [ 1] 2469 	ld acc24+2,a
      000EF2 9E               [ 1] 2470 	ld a, xh
      000EF3 6B 02            [ 1] 2471 	ld (OVFL,sp),a
                                   2472 ; multipy middle byte
      000EF5 C6 00 09         [ 1] 2473 	ld a,acc24+1
      000EF8 97               [ 1] 2474 	ld xl,a
      000EF9 7B 03            [ 1] 2475 	ld a, (U8,sp)
      000EFB 42               [ 4] 2476 	mul x,a
                                   2477 ; add overflow to this partial product
      000EFC 72 FB 01         [ 2] 2478 	addw x,(OVFH,sp)
      000EFF 9F               [ 1] 2479 	ld a,xl
      000F00 C7 00 09         [ 1] 2480 	ld acc24+1,a
      000F03 4F               [ 1] 2481 	clr a
      000F04 A9 00            [ 1] 2482 	adc a,#0
      000F06 6B 01            [ 1] 2483 	ld (OVFH,sp),a
      000F08 9E               [ 1] 2484 	ld a,xh
      000F09 6B 02            [ 1] 2485 	ld (OVFL,sp),a
                                   2486 ; multiply most signficant byte	
      000F0B C6 00 08         [ 1] 2487 	ld a, acc24
      000F0E 97               [ 1] 2488 	ld xl, a
      000F0F 7B 03            [ 1] 2489 	ld a, (U8,sp)
      000F11 42               [ 4] 2490 	mul x,a
      000F12 72 FB 01         [ 2] 2491 	addw x, (OVFH,sp)
      000F15 9F               [ 1] 2492 	ld a, xl
      000F16 C7 00 08         [ 1] 2493 	ld acc24,a
      000F19 5B 03            [ 2] 2494     addw sp,#VSIZE
      000F1B 85               [ 2] 2495 	popw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F1C 81               [ 4] 2496 	ret
                                   2497 
                                   2498 ;------------------------------------
                                   2499 ; skip character c in text starting from 'in'
                                   2500 ; input:
                                   2501 ;	 y 		point to text buffer
                                   2502 ;    a 		character to skip
                                   2503 ; output:  
                                   2504 ;	'in' ajusted to new position
                                   2505 ;------------------------------------
                           000001  2506 	C = 1 ; local var
      000F1D                       2507 skip:
      000F1D 88               [ 1] 2508 	push a
      000F1E 91 D6 00         [ 4] 2509 1$:	ld a,([in.w],y)
      000F21 27 0A            [ 1] 2510 	jreq 2$
      000F23 11 01            [ 1] 2511 	cp a,(C,sp)
      000F25 26 06            [ 1] 2512 	jrne 2$
      000F27 72 5C 00 01      [ 1] 2513 	inc in
      000F2B 20 F1            [ 2] 2514 	jra 1$
      000F2D                       2515 2$: _drop 1 
      000F2D 5B 01            [ 2]    1     addw sp,#1 
      000F2F 81               [ 4] 2516 	ret
                                   2517 
                                   2518 ;******************************
                                   2519 
                                   2520 ;----------------------	
                                   2521 ; push X on data stack 
                                   2522 ; input:
                                   2523 ;	X 
                                   2524 ; output:
                                   2525 ;	none 
                                   2526 ;----------------------	
      000F30                       2527 dpush:
      000F30                       2528     _dp_down
      000F30 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000F34 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000F38 72 CF 00 19      [ 5] 2529     ldw [dstkptr],x  
      000F3C 81               [ 4] 2530 	ret 
                                   2531 
                                   2532 
                                   2533 ;----------------------	
                                   2534 ; pop data stack in X 
                                   2535 ; input:
                                   2536 ;	none
                                   2537 ; output:
                                   2538 ;	X   
                                   2539 ;----------------------	
      000F3D                       2540 dpop: 
      000F3D 72 CE 00 19      [ 5] 2541     ldw x, [dstkptr]
      000F41                       2542 	_dp_up
      000F41 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000F45 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000F49 81               [ 4] 2543 	ret 
                                   2544 
                                   2545 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2546 ; swap top 2 elements of dstack
                                   2547 ;  {n1 n2 -- n2 n1 }
                                   2548 ;-----------------------------
      000F4A                       2549 dswap:
      000F4A 72 CE 00 19      [ 5] 2550 	ldw x,[dstkptr]
      000F4E 89               [ 2] 2551 	pushw x 
      000F4F AE 00 02         [ 2] 2552 	ldw x,#2 
      000F52 72 DE 00 19      [ 5] 2553 	ldw x,([dstkptr],x) 
      000F56 72 CF 00 19      [ 5] 2554 	ldw [dstkptr],x 
      000F5A AE 00 02         [ 2] 2555 	ldw x,#2
      000F5D 90 85            [ 2] 2556 	popw y 
      000F5F 72 DF 00 19      [ 5] 2557 	ldw ([dstkptr],x),y 
      000F63 81               [ 4] 2558 	ret
                                   2559 
                                   2560 ;-----------------------------
                                   2561 ; drop TOS 
                                   2562 ;-----------------------------
      000F64                       2563 ddrop: ; { n -- }
      000F64                       2564 	_dp_up 
      000F64 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000F68 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000F6C 81               [ 4] 2565 	ret
                                   2566 	
                                   2567 ;-----------------------------
                                   2568 ; duplicate TOS 
                                   2569 ;  dstack: { ix...n -- ix...n n }
                                   2570 ;-----------------------------
      000F6D                       2571 ddup:
      000F6D 72 CE 00 19      [ 5] 2572 	ldw x,[dstkptr]
      000F71                       2573 	_dp_down
      000F71 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000F75 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000F79 72 CF 00 19      [ 5] 2574     ldw [dstkptr],x  
      000F7D 81               [ 4] 2575 	ret 
                                   2576 
                                   2577 
                                   2578 ;----------------------------------
                                   2579 ; pick value n from dstack 
                                   2580 ; put it on TOS
                                   2581 ; dstack: {ix,..,p -- ix,...,np }
                                   2582 ;-----------------------------------
      000F7E                       2583 dpick:
      000F7E 72 CE 00 19      [ 5] 2584 	ldw x,[dstkptr]
      000F82 58               [ 2] 2585 	sllw x 
      000F83 72 BB 00 19      [ 2] 2586 	addw x,dstkptr 
      000F87 FE               [ 2] 2587 	ldw x,(x)
      000F88 72 CF 00 19      [ 5] 2588 	ldw [dstkptr],x 
      000F8C 81               [ 4] 2589 	ret
                                   2590 
                                   2591 ;---------------------------
                                   2592 ;  fetch variable in X 
                                   2593 ;  dstack:{ addr -- value }
                                   2594 ;---------------------------
      000F8D                       2595 fetch:
      000F8D 72 CE 00 19      [ 5] 2596 	ldw x,[dstkptr]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F91 FE               [ 2] 2597 	ldw x,(x)
      000F92 72 CF 00 19      [ 5] 2598 	ldw [dstkptr],x
      000F96 81               [ 4] 2599 	ret 
                                   2600 
                                   2601 ;----------------------------
                                   2602 ; store variable 
                                   2603 ; dstack: {addr value -- }
                                   2604 ;----------------------------
      000F97                       2605 store:
      000F97 CD 0F 3D         [ 4] 2606 	call dpop 
      000F9A 90 93            [ 1] 2607 	ldw y,x   ; y=value 
      000F9C CD 0F 3D         [ 4] 2608 	call dpop 
      000F9F FF               [ 2] 2609 	ldw (x),y 
      000FA0 81               [ 4] 2610 	ret 
                                   2611 
                                   2612 ;------------------------------
                                   2613 ; restore 'in.w' variable to 
                                   2614 ; its value before last call
                                   2615 ; to get_token.
                                   2616 ;------------------------------
      000FA1                       2617 unget_token:
      000FA1 CE 00 11         [ 2] 2618 	ldw x,in.w.saved
      000FA4 CF 00 00         [ 2] 2619 	ldw in.w,x 
      000FA7 81               [ 4] 2620 	ret 
                                   2621 
                                   2622 
      000FA8 0A 64 73 74 61 63 6B  2623 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2624 ;----------------------------
                                   2625 ; print dstack content 
                                   2626 ;---------------------------
                           000001  2627 	XSAVE=1
                           000002  2628 	VSIZE=2
      000FB2                       2629 dots:
      000FB2                       2630 	_vars VSIZE 
      000FB2 52 02            [ 2]    1     sub sp,#VSIZE 
      000FB4 AE 0F A8         [ 2] 2631 	ldw x,#dstk_prompt 
      000FB7 CD 02 30         [ 4] 2632 	call puts
      000FBA AE 17 7E         [ 2] 2633 	ldw x,#dstack_unf-CELL_SIZE
      000FBD 35 0A 00 07      [ 1] 2634 	mov base,#10 
      000FC1 C3 00 19         [ 2] 2635 1$:	cpw x,dstkptr 
      000FC4 25 0D            [ 1] 2636 	jrult 4$ 
      000FC6 1F 01            [ 2] 2637 	ldw (XSAVE,sp),x
      000FC8 FE               [ 2] 2638 	ldw  x,(x)
      000FC9 CD 09 05         [ 4] 2639 	call print_int 
      000FCC 1E 01            [ 2] 2640 	ldw x,(XSAVE,sp)
      000FCE 1D 00 02         [ 2] 2641 	subw x,#CELL_SIZE 
      000FD1 20 EE            [ 2] 2642 	jra 1$ 
      000FD3 A6 0D            [ 1] 2643 4$: ld a,#CR 
      000FD5 CD 02 1E         [ 4] 2644 	call putc 
      000FD8                       2645 	_drop VSIZE
      000FD8 5B 02            [ 2]    1     addw sp,#VSIZE 
      000FDA 4F               [ 1] 2646 	clr a 
      000FDB 81               [ 4] 2647 	ret
                                   2648 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FDC 0A 63 74 61 63 6B 3A  2649 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2650 ;--------------------------------
                                   2651 ; print cstack content
                                   2652 ;--------------------------------
                           000001  2653 	XSAVE=1
                           000002  2654 	VSIZE=2 
      000FE5                       2655 dotr:
      000FE5                       2656 	_vars VSIZE 
      000FE5 52 02            [ 2]    1     sub sp,#VSIZE 
      000FE7 AE 0F DC         [ 2] 2657 	ldw x,#cstk_prompt
      000FEA CD 02 30         [ 4] 2658 	call puts 
      000FED 96               [ 1] 2659 	ldw x,sp 
      000FEE 1C 00 07         [ 2] 2660 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      000FF1 1F 01            [ 2] 2661 	ldw (XSAVE,sp),x  
      000FF3 AE 17 FE         [ 2] 2662 	ldw x,#RAM_SIZE-2
      000FF6 35 10 00 07      [ 1] 2663 	mov base,#16
      000FFA                       2664 dotr_loop:
      000FFA 13 01            [ 2] 2665 	cpw x,(XSAVE,sp)
      000FFC 2B 0B            [ 1] 2666 	jrmi 9$
      000FFE 89               [ 2] 2667 	pushw x  
      000FFF FE               [ 2] 2668 	ldw x,(x)
      001000 CD 09 05         [ 4] 2669 	call print_int 
      001003 85               [ 2] 2670 	popw x  
      001004 1D 00 02         [ 2] 2671 	subw x,#CELL_SIZE
      001007 20 F1            [ 2] 2672 	jra dotr_loop 
      001009 A6 0D            [ 1] 2673 9$:	ld a,#CR 
      00100B CD 02 1E         [ 4] 2674 	call putc 
      00100E                       2675 	_drop VSIZE 
      00100E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001010 4F               [ 1] 2676 	clr a 
      001011 81               [ 4] 2677 	ret
                                   2678 
                                   2679 
                                   2680 ;--------------------------------
                                   2681 ; BASIC: SHOW 
                                   2682 ;  show content of dstack,cstack
                                   2683 ;--------------------------------
      001012                       2684 show:
      001012 C6 00 07         [ 1] 2685 	ld a,base 
      001015 88               [ 1] 2686 	push a 
      001016 CD 0F B2         [ 4] 2687 	call dots
      001019 CD 0F E5         [ 4] 2688 	call dotr 
      00101C 84               [ 1] 2689 	pop a 
      00101D C7 00 07         [ 1] 2690 	ld base,a 
      001020 4F               [ 1] 2691 	clr a 
      001021 81               [ 4] 2692 	ret
                                   2693 
                                   2694 
                                   2695 ;--------------------------------
                                   2696 ;  add 2 integers
                                   2697 ;  input:
                                   2698 ;    N1     on cstack 
                                   2699 ;    N2     on cstack 
                                   2700 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2701 ;    X 		n2+n1 
                                   2702 ;--------------------------------
                                   2703 	;arugments on cstack 
      001022                       2704 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001022                       2705 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001022                       2706 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001022                       2707 add:
      001022 1E 05            [ 2] 2708 	ldw x ,(N2,sp)
      001024 72 FB 03         [ 2] 2709 	addw x,(N1,sp)
      001027 1F 03            [ 2] 2710 	ldw (N1,sp),x 
      001029 81               [ 4] 2711 	ret 
                                   2712 
                                   2713 ;--------------------------------
                                   2714 ;  substract 2 ntegers
                                   2715 ;  input:
                                   2716 ;    N1     on cstack 
                                   2717 ;    N2     on cstack 
                                   2718 ;  output:
                                   2719 ;    X 		n2+n1 
                                   2720 ;--------------------------------
      00102A                       2721 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00102A                       2722 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      00102A                       2723 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00102A                       2724 substract:
      00102A 1E 05            [ 2] 2725 	ldw x,(N2,sp)
      00102C 72 F0 03         [ 2] 2726 	subw x,(N1,sp)
      00102F 81               [ 4] 2727 	ret 
                                   2728 
                                   2729 ;-------------------------------------
                                   2730 ; multiply 2 integers
                                   2731 ; product overflow is ignored unless
                                   2732 ; MATH_OVF assembler flag is set to 1
                                   2733 ; input:
                                   2734 ;  	N1      on cstack
                                   2735 ;   N2 		on cstack 
                                   2736 ; output:
                                   2737 ;	X        N1*N2 
                                   2738 ;-------------------------------------
                                   2739 	;arguments 
      001030                       2740 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      001030                       2741 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      001030                       2742 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      001030                       2743 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      001030                       2744 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2745    ; local variables 
                           000001  2746 	SIGN=1
                           000002  2747 	PROD=2
                           000003  2748 	VSIZE=3
      001030                       2749 multiply:
      001030                       2750 	_vars VSIZE 
      001030 52 03            [ 2]    1     sub sp,#VSIZE 
      001032 0F 01            [ 1] 2751 	clr (SIGN,sp)
      001034 1E 06            [ 2] 2752 	ldw x,(N1_HB,sp)
      001036 9E               [ 1] 2753 	ld a,xh  
      001037 A5 80            [ 1] 2754 	bcp a,#0x80 
      001039 27 05            [ 1] 2755 	jreq 2$
      00103B 03 01            [ 1] 2756 	cpl (SIGN,sp)
      00103D 50               [ 2] 2757 	negw x 
      00103E 1F 06            [ 2] 2758 	ldw (N1_HB,sp),x 
      001040 1E 08            [ 2] 2759 2$: ldw x,(N2_HB,sp)
      001042 9E               [ 1] 2760 	ld a,xh  
      001043 A5 80            [ 1] 2761 	bcp a,#0x80 
      001045 27 05            [ 1] 2762 	jreq 3$
      001047 03 01            [ 1] 2763 	cpl (SIGN,sp)
      001049 50               [ 2] 2764 	negw x 
      00104A 1F 08            [ 2] 2765 	ldw (N2_HB,sp),x 
                                   2766 ; N1_LB * N2_LB 	
      00104C 7B 07            [ 1] 2767 3$:	ld a,(N1_LB,sp)
      00104E 97               [ 1] 2768 	ld xl,a 
      00104F 7B 09            [ 1] 2769 	ld a,(N2_LB,sp) 
      001051 42               [ 4] 2770 	mul x,a 
                           000000  2771 .if MATH_OVF 	
                                   2772 	ld a,xh 
                                   2773 	bcp a,#0x80 
                                   2774 	jreq 4$ 
                                   2775 	ld a,#ERR_MATH_OVF 
                                   2776 	jp tb_error
                                   2777 .endif 	 
      001052 1F 02            [ 2] 2778 4$:	ldw (PROD,sp),x
                                   2779 ; N1_LB * N2_HB	 
      001054 7B 07            [ 1] 2780 	ld a,(N1_LB,sp) 
      001056 97               [ 1] 2781 	ld xl,a 
      001057 7B 08            [ 1] 2782 	ld a,(N2_HB,sp)
      001059 42               [ 4] 2783 	mul x,a
      00105A 9F               [ 1] 2784 	ld a,xl 
      00105B 1B 02            [ 1] 2785 	add a,(PROD,sp)
                           000000  2786 .if MATH_OVF 	
                                   2787 	bcp a,#0x80 
                                   2788 	jreq 5$ 
                                   2789 	ld a,#ERR_MATH_OVF 
                                   2790 	jp tb_error
                                   2791 .endif 	 
      00105D 6B 02            [ 1] 2792 5$:	ld (PROD,sp),a 
                                   2793 ; N1_HB * N2_LB 
      00105F 7B 06            [ 1] 2794 	ld a,(N1_HB,sp)
      001061 97               [ 1] 2795 	ld xl,a 
      001062 7B 09            [ 1] 2796 	ld a,(N2_LB,sp)
      001064 42               [ 4] 2797 	mul x,a 
      001065 9F               [ 1] 2798 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      001066 1B 02            [ 1] 2799 	add a,(PROD,sp)
                           000000  2800 .if MATH_OVF 	
                                   2801 	bcp a,#0x80 
                                   2802 	jreq 6$ 
                                   2803 	ld a,#ERR_MATH_OVF 
                                   2804 	jp tb_error
                                   2805 .endif 	 
      001068 6B 02            [ 1] 2806 6$:	ld (PROD,sp),a 
                                   2807 ; N1_HB * N2_HB 	
                                   2808 ; it is pointless to multiply N1_HB*N2_HB 
                                   2809 ; as this product is over 65535 or 0 
                                   2810 ;
                                   2811 ; sign adjust product
      00106A 0D 01            [ 1] 2812 	tnz (SIGN,sp)
      00106C 27 05            [ 1] 2813 	jreq 7$
      00106E 1E 02            [ 2] 2814 	ldw x, (PROD,sp)
      001070 50               [ 2] 2815 	negw x
      001071 1F 02            [ 2] 2816 	ldw (PROD,sp),x  
      001073                       2817 7$: 
      001073 1E 02            [ 2] 2818 	ldw x,(PROD,sp) 
      001075                       2819 	_drop VSIZE 
      001075 5B 03            [ 2]    1     addw sp,#VSIZE 
      001077 81               [ 4] 2820 	ret
                                   2821 
                                   2822 ;----------------------------------
                                   2823 ;  euclidian divide n2/n1 
                                   2824 ; input:
                                   2825 ;    N2 	on cstack
                                   2826 ;    N1 	on cstack
                                   2827 ; output:
                                   2828 ;    X      n2/n1 
                                   2829 ;    Y      remainder 
                                   2830 ;----------------------------------
      001078                       2831 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      001078                       2832 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      001078                       2833 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2834 	; local variables
                           000001  2835 	SQUOT=1 ; sign quotient
                           000002  2836 	SDIVD=2 ; sign dividend  
                           000002  2837 	VSIZE=2
      001078                       2838 divide:
      001078                       2839 	_vars VSIZE 
      001078 52 02            [ 2]    1     sub sp,#VSIZE 
      00107A 0F 01            [ 1] 2840 	clr (SQUOT,sp)
      00107C 0F 02            [ 1] 2841 	clr (SDIVD,sp)
                                   2842 ; check for 0 divisor
      00107E 1E 05            [ 2] 2843 	ldw x,(DIVISR,sp)
      001080 5D               [ 2] 2844 	tnzw x 
      001081 26 05            [ 1] 2845     jrne 0$
      001083 A6 04            [ 1] 2846 	ld a,#ERR_DIV0 
      001085 CC 06 A3         [ 2] 2847 	jp tb_error 
                                   2848 ; check divisor sign 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001088 9E               [ 1] 2849 0$:	ld a,xh 
      001089 A5 80            [ 1] 2850 	bcp a,#0x80 
      00108B 27 03            [ 1] 2851 	jreq 1$
      00108D 03 01            [ 1] 2852 	cpl (SQUOT,sp)
      00108F 50               [ 2] 2853 	negw x 
      001090 1F 05            [ 2] 2854 1$:	ldw (DIVISR,sp),x
                                   2855 ; check dividend sign 	 
      001092 1E 07            [ 2] 2856     ldw x,(DIVIDND,sp)
      001094 9E               [ 1] 2857 	ld a,xh 
      001095 A5 80            [ 1] 2858 	bcp a,#0x80 
      001097 27 05            [ 1] 2859 	jreq 2$ 
      001099 03 01            [ 1] 2860 	cpl (SQUOT,sp)
      00109B 03 02            [ 1] 2861 	cpl (SDIVD,sp)
      00109D 50               [ 2] 2862 	negw x 
      00109E 16 05            [ 2] 2863 2$:	ldw y,(DIVISR,sp)
      0010A0 65               [ 2] 2864 	divw x,y
      0010A1 90 CF 00 09      [ 2] 2865 	ldw acc16,y 
                                   2866 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      0010A5 0D 02            [ 1] 2867 	tnz (SDIVD,sp)
      0010A7 27 0B            [ 1] 2868 	jreq 7$
      0010A9 90 5D            [ 2] 2869 	tnzw y 
      0010AB 27 07            [ 1] 2870 	jreq 7$
      0010AD 5C               [ 1] 2871 	incw x
      0010AE 16 05            [ 2] 2872 	ldw y,(DIVISR,sp)
      0010B0 72 B2 00 09      [ 2] 2873 	subw y,acc16
      0010B4 0D 01            [ 1] 2874 7$: tnz (SQUOT,sp)
      0010B6 27 01            [ 1] 2875 	jreq 9$ 	 
      0010B8 50               [ 2] 2876 8$:	negw x 
      0010B9                       2877 9$: 
      0010B9                       2878 	_drop VSIZE 
      0010B9 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010BB 81               [ 4] 2879 	ret 
                                   2880 
                                   2881 
                                   2882 ;----------------------------------
                                   2883 ;  remainder resulting from euclidian 
                                   2884 ;  division of n2/n1 
                                   2885 ; input:
                                   2886 ;   N1 		cstack 
                                   2887 ;   N2      cstack
                                   2888 ; output:
                                   2889 ;   X       N2%N1 
                                   2890 ;----------------------------------
                                   2891 	
                           000003  2892 	N1=3
                           000005  2893 	N2=5
                           000004  2894 	VSIZE=4
      0010BC                       2895 modulo:
      0010BC 1E 03            [ 2] 2896 	Ldw x,(N1,sp)
      0010BE 16 05            [ 2] 2897 	ldw y,(N2,sp)
      0010C0                       2898 	_vars VSIZE 
      0010C0 52 04            [ 2]    1     sub sp,#VSIZE 
      0010C2 1F 01            [ 2] 2899 	ldw (1,sp),x 
      0010C4 17 03            [ 2] 2900 	ldw (3,sp),y 
      0010C6 CD 10 78         [ 4] 2901 	call divide 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010C9 93               [ 1] 2902 	ldw x,y
      0010CA                       2903 	_drop VSIZE 
      0010CA 5B 04            [ 2]    1     addw sp,#VSIZE 
      0010CC 81               [ 4] 2904 	ret 
                                   2905 
                                   2906 ;---------------------------------
                                   2907 ; drop n elements from data stack 
                                   2908 ; input: 
                                   2909 ;   X 		n 
                                   2910 ; output:
                                   2911 ;   none 
                                   2912 ;-------------------------------------
      0010CD                       2913 ddrop_n:
      0010CD 90 89            [ 2] 2914 	pushw y 
      0010CF 90 CE 00 19      [ 2] 2915 	ldw y,dstkptr 
      0010D3 58               [ 2] 2916 	sllw x 
      0010D4 89               [ 2] 2917 	pushw x 
      0010D5 72 F9 01         [ 2] 2918 	addw y,(1,sp)
      0010D8 90 CF 00 19      [ 2] 2919 	ldw dstkptr,y 
      0010DC 85               [ 2] 2920 	popw x 
      0010DD 90 85            [ 2] 2921 	popw y
      0010DF 81               [ 4] 2922 	ret 
                                   2923 
                                   2924 ;---------------------------------
                                   2925 ; execute procedure which address
                                   2926 ; is at TOS 
                                   2927 ; --------------------------------
      0010E0                       2928 execute: ; { addr -- ? }
      0010E0 CD 0F 3D         [ 4] 2929 	call dpop
      0010E3 FC               [ 2] 2930 	jp (x)
                                   2931 
                                   2932 
                                   2933 ;---------------------------------
                                   2934 ; input:
                                   2935 ;	X 		dictionary entry point 
                                   2936 ;  pad		.asciz name to search 
                                   2937 ; output:
                                   2938 ;  A 		TK_CMD|TK_FUNC|TK_NONE 
                                   2939 ;  X		execution address | 0 
                                   2940 ;---------------------------------
                           000001  2941 	NLEN=1 ; cmd length 
                           000002  2942 	YSAVE=2
                           000003  2943 	VSIZE=3 
      0010E4                       2944 search_dict:
      0010E4                       2945 	_vars VSIZE 
      0010E4 52 03            [ 2]    1     sub sp,#VSIZE 
      0010E6 90 93            [ 1] 2946 	ldw y,x 
      0010E8                       2947 search_next:	
      0010E8 90 F6            [ 1] 2948 	ld a,(y)
      0010EA A4 7F            [ 1] 2949 	and a,#0x7f 
      0010EC 6B 01            [ 1] 2950 	ld (NLEN,sp),a  
      0010EE AE 17 18         [ 2] 2951 	ldw x,#pad 
      0010F1 17 02            [ 2] 2952 	ldw (YSAVE,sp),y
      0010F3 90 5C            [ 1] 2953 	incw y  
      0010F5                       2954 cp_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010F5 F6               [ 1] 2955 	ld a,(x)
      0010F6 27 1E            [ 1] 2956 	jreq str_match 
      0010F8 0D 01            [ 1] 2957 	tnz (NLEN,sp)
      0010FA 27 0B            [ 1] 2958 	jreq no_match  
      0010FC 90 F1            [ 1] 2959 	cp a,(y)
      0010FE 26 07            [ 1] 2960 	jrne no_match 
      001100 90 5C            [ 1] 2961 	incw y 
      001102 5C               [ 1] 2962 	incw x
      001103 0A 01            [ 1] 2963 	dec (NLEN,sp)
      001105 20 EE            [ 2] 2964 	jra cp_loop 
      001107                       2965 no_match:
      001107 16 02            [ 2] 2966 	ldw y,(YSAVE,sp) 
      001109 72 A2 00 02      [ 2] 2967 	subw y,#2 ; move Y to link field
      00110D 4B 00            [ 1] 2968 	push #TK_NONE 
      00110F 90 FE            [ 2] 2969 	ldw y,(y) ; next word link 
      001111 84               [ 1] 2970 	pop a ; TK_NONE 
      001112 27 24            [ 1] 2971 	jreq search_exit  ; not found  
                                   2972 ;try next 
      001114 20 D2            [ 2] 2973 	jra search_next
      001116                       2974 str_match:
      001116 16 02            [ 2] 2975 	ldw y,(YSAVE,sp)
      001118 90 F6            [ 1] 2976 	ld a,(y)
      00111A 6B 01            [ 1] 2977 	ld (NLEN,sp),a ; needed to test bit 7 
      00111C A4 7F            [ 1] 2978 	and a,#0x7f 
                                   2979 ; move y to procedure address field 	
      00111E 4C               [ 1] 2980 	inc a 
      00111F C7 00 0A         [ 1] 2981 	ld acc8,a 
      001122 72 5F 00 09      [ 1] 2982 	clr acc16 
      001126 72 B9 00 09      [ 2] 2983 	addw y,acc16 
      00112A 90 FE            [ 2] 2984 	ldw y,(y) ; routine entry point 
      00112C 7B 01            [ 1] 2985 	ld a,(NLEN,sp)
      00112E A5 80            [ 1] 2986 	bcp a,#0x80 
      001130 27 04            [ 1] 2987 	jreq 1$
      001132 A6 0C            [ 1] 2988 	ld a,#TK_FUNC 
      001134 20 02            [ 2] 2989 	jra search_exit
      001136 A6 07            [ 1] 2990 1$: ld a,#TK_CMD 
      001138                       2991 search_exit: 
      001138 93               [ 1] 2992 	ldw x,y ; x=routine address 
      001139                       2993 	_drop VSIZE 	 
      001139 5B 03            [ 2]    1     addw sp,#VSIZE 
      00113B 81               [ 4] 2994 	ret 
                                   2995 
                                   2996 ;---------------------
                                   2997 ; check if next token
                                   2998 ;  is of expected type 
                                   2999 ; input:
                                   3000 ;   A 		 expected token attribute
                                   3001 ;  ouput:
                                   3002 ;   none     if fail call tb_error 
                                   3003 ;--------------------
      00113C                       3004 expect:
      00113C 88               [ 1] 3005 	push a 
      00113D CD 0C 7D         [ 4] 3006 	call get_token 
      001140 11 01            [ 1] 3007 	cp a,(1,sp)
      001142 27 03            [ 1] 3008 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001144 CC 06 A1         [ 2] 3009 	jp syntax_error
      001147 84               [ 1] 3010 1$: pop a 
      001148 81               [ 4] 3011 	ret 
                                   3012 
                                   3013 
                                   3014 ;-------------------------------
                                   3015 ; parse embedded BASIC routines 
                                   3016 ; arguments list.
                                   3017 ; arg_list::=  rel[','rel]*
                                   3018 ; all arguments are of integer type
                                   3019 ; input:
                                   3020 ;   none
                                   3021 ; output:
                                   3022 ;   A 			number of arguments pushed on dstack  
                                   3023 ;--------------------------------
                           000001  3024 	ARG_CNT=1 
      001149                       3025 arg_list:
      001149 4B 00            [ 1] 3026 	push #0  
      00114B CD 12 85         [ 4] 3027 1$: call relation
      00114E A1 00            [ 1] 3028 	cp a,#TK_NONE 
      001150 27 19            [ 1] 3029 	jreq 5$
      001152 A1 0A            [ 1] 3030 	cp a,#TK_INTGR
      001154 26 12            [ 1] 3031 	jrne 4$
      001156 CD 0F 30         [ 4] 3032 3$: call dpush 
      001159 0C 01            [ 1] 3033     inc (ARG_CNT,sp)
      00115B CD 0C 7D         [ 4] 3034 	call get_token 
      00115E A1 00            [ 1] 3035 	cp a,#TK_NONE 
      001160 27 09            [ 1] 3036 	jreq 5$ 
      001162 A1 08            [ 1] 3037 	cp a,#TK_COMMA 
      001164 26 02            [ 1] 3038 	jrne 4$
      001166 20 E3            [ 2] 3039 	jra 1$ 
      001168 CD 0F A1         [ 4] 3040 4$:	call unget_token 
      00116B 84               [ 1] 3041 5$:	pop a 
      00116C 81               [ 4] 3042 	ret 
                                   3043 
                                   3044 
                                   3045 
                                   3046 ;--------------------------------
                                   3047 ;   BASIC commnands 
                                   3048 ;--------------------------------
                                   3049 
                                   3050 ;--------------------------------
                                   3051 ;  arithmetic and relational 
                                   3052 ;  routines
                                   3053 ;  operators precedence
                                   3054 ;  highest to lowest
                                   3055 ;  operators on same row have 
                                   3056 ;  same precedence and are executed
                                   3057 ;  from left to right.
                                   3058 ;	'*','/','%'
                                   3059 ;   '-','+'
                                   3060 ;   '=','>','<','>=','<=','<>','><'
                                   3061 ;   '<>' and '><' are equivalent for not equal.
                                   3062 ;--------------------------------
                                   3063 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3064 ;---------------------
                                   3065 ; return array element
                                   3066 ; address from @(expr)
                                   3067 ; input:
                                   3068 ;   A 		TK_ARRAY
                                   3069 ; output:
                                   3070 ;   A 		TK_INTGR
                                   3071 ;	X 		element address 
                                   3072 ;----------------------
      00116D                       3073 get_array_element:
      00116D CD 0F 64         [ 4] 3074 	call ddrop 
      001170 A6 04            [ 1] 3075 	ld a,#TK_LPAREN 
      001172 CD 11 3C         [ 4] 3076 	call expect
      001175 CD 12 85         [ 4] 3077 	call relation 
      001178 A1 0A            [ 1] 3078 	cp a,#TK_INTGR 
      00117A 27 03            [ 1] 3079 	jreq 1$
      00117C CC 06 A1         [ 2] 3080 	jp syntax_error
      00117F 89               [ 2] 3081 1$: pushw x 
      001180 A6 05            [ 1] 3082 	ld a,#TK_RPAREN 
      001182 CD 11 3C         [ 4] 3083 	call expect
                                   3084 	; check for bounds 
      001185 85               [ 2] 3085 	popw x   
      001186 C3 00 22         [ 2] 3086 	cpw x,array_size 
      001189 23 05            [ 2] 3087 	jrule 3$
                                   3088 ; bounds {1..array_size}	
      00118B A6 0A            [ 1] 3089 2$: ld a,#ERR_BAD_VALUE 
      00118D CC 06 A3         [ 2] 3090 	jp tb_error 
      001190 5D               [ 2] 3091 3$: tnzw  x
      001191 27 F8            [ 1] 3092 	jreq 2$ 
      001193 58               [ 2] 3093 	sllw x 
      001194 89               [ 2] 3094 	pushw x 
      001195 CE 00 20         [ 2] 3095 	ldw x,array_addr  
      001198 72 F0 01         [ 2] 3096 	subw x,(1,sp)
      00119B                       3097 	_drop 2   
      00119B 5B 02            [ 2]    1     addw sp,#2 
      00119D A6 0A            [ 1] 3098 	ld a,#TK_INTGR
      00119F 81               [ 4] 3099 	ret 
                                   3100 
                                   3101 ;***********************************
                                   3102 ;   expression parse,execute 
                                   3103 ;***********************************
                                   3104 ;-----------------------------------
                                   3105 ; factor ::= ['+'|'-'|e] var | @ |
                                   3106 ;			 integer | function |
                                   3107 ;			 '('relation')' 
                                   3108 ; output:
                                   3109 ;   A    token attribute 
                                   3110 ;   X 	 integer
                                   3111 ; ---------------------------------
                           000001  3112 	NEG=1
                           000001  3113 	VSIZE=1
      0011A0                       3114 factor:
      0011A0                       3115 	_vars VSIZE 
      0011A0 52 01            [ 2]    1     sub sp,#VSIZE 
      0011A2 CD 0C 7D         [ 4] 3116 	call get_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011A5 A1 02            [ 1] 3117 	cp a,#2 
      0011A7 2B 48            [ 1] 3118 	jrmi 20$
      0011A9 6B 01            [ 1] 3119 1$:	ld (NEG,sp),a 
      0011AB A4 10            [ 1] 3120 	and a,#TK_GRP_ADD  
      0011AD 26 04            [ 1] 3121 	jrne 2$
      0011AF 7B 01            [ 1] 3122 	ld a,(NEG,sp)
      0011B1 20 03            [ 2] 3123 	jra 4$  
      0011B3                       3124 2$:	
      0011B3 CD 0C 7D         [ 4] 3125 	call get_token 
      0011B6                       3126 4$:	
      0011B6 A1 0C            [ 1] 3127 	cp a,#TK_FUNC 
      0011B8 26 03            [ 1] 3128 	jrne 5$ 
      0011BA FD               [ 4] 3129 	call (x) 
      0011BB 20 2B            [ 2] 3130 	jra 18$ 
      0011BD                       3131 5$:
      0011BD A1 0A            [ 1] 3132 	cp a,#TK_INTGR
      0011BF 26 02            [ 1] 3133 	jrne 6$
      0011C1 20 25            [ 2] 3134 	jra 18$
      0011C3                       3135 6$:
      0011C3 A1 03            [ 1] 3136 	cp a,#TK_ARRAY
      0011C5 26 06            [ 1] 3137 	jrne 10$
      0011C7 CD 11 6D         [ 4] 3138 	call get_array_element
      0011CA FE               [ 2] 3139 	ldw x,(x)
      0011CB 20 1B            [ 2] 3140 	jra 18$ 
      0011CD                       3141 10$:
      0011CD A1 02            [ 1] 3142 	cp a,#TK_VAR 
      0011CF 26 03            [ 1] 3143 	jrne 12$
      0011D1 FE               [ 2] 3144 	ldw x,(x)
      0011D2 20 14            [ 2] 3145 	jra 18$
      0011D4                       3146 12$:			
      0011D4 A1 04            [ 1] 3147 	cp a,#TK_LPAREN
      0011D6 26 0A            [ 1] 3148 	jrne 16$
      0011D8 CD 12 85         [ 4] 3149 	call relation
      0011DB A6 05            [ 1] 3150 	ld a,#TK_RPAREN 
      0011DD CD 11 3C         [ 4] 3151 	call expect
      0011E0 20 06            [ 2] 3152 	jra 18$	
      0011E2                       3153 16$:
      0011E2 CD 0F A1         [ 4] 3154 	call unget_token
      0011E5 4F               [ 1] 3155 	clr a 
      0011E6 20 09            [ 2] 3156 	jra 20$ 
      0011E8                       3157 18$: 
      0011E8 A6 11            [ 1] 3158 	ld a,#TK_MINUS 
      0011EA 11 01            [ 1] 3159 	cp a,(NEG,sp)
      0011EC 26 01            [ 1] 3160 	jrne 19$
      0011EE 50               [ 2] 3161 	negw x
      0011EF                       3162 19$:
      0011EF A6 0A            [ 1] 3163 	ld a,#TK_INTGR
      0011F1                       3164 20$:
      0011F1                       3165 	_drop VSIZE
      0011F1 5B 01            [ 2]    1     addw sp,#VSIZE 
      0011F3 81               [ 4] 3166 	ret
                                   3167 
                                   3168 ;-----------------------------------
                                   3169 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3170 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3171 ;   A    	token attribute 
                                   3172 ;	X		integer
                                   3173 ;-----------------------------------
                           000001  3174 	N1=1
                           000003  3175 	N2=3
                           000005  3176 	MULOP=5
                           000005  3177 	VSIZE=5
      0011F4                       3178 term:
      0011F4                       3179 	_vars VSIZE
      0011F4 52 05            [ 2]    1     sub sp,#VSIZE 
      0011F6 CD 11 A0         [ 4] 3180 	call factor
      0011F9 A1 02            [ 1] 3181 	cp a,#2
      0011FB 2B 41            [ 1] 3182 	jrmi term_exit
      0011FD                       3183 term01:	 ; check for  operator 
      0011FD 1F 03            [ 2] 3184 	ldw (N2,sp),x  ; save first factor 
      0011FF CD 0C 7D         [ 4] 3185 	call get_token
      001202 A1 02            [ 1] 3186 	cp a,#2
      001204 2B 34            [ 1] 3187 	jrmi 9$
      001206 6B 05            [ 1] 3188 0$:	ld (MULOP,sp),a
      001208 A4 30            [ 1] 3189 	and a,#TK_GRP_MASK
      00120A A1 20            [ 1] 3190 	cp a,#TK_GRP_MULT
      00120C 27 07            [ 1] 3191 	jreq 1$
      00120E 7B 05            [ 1] 3192 	ld a,(MULOP,sp) 
      001210 CD 0F A1         [ 4] 3193 	call unget_token 
      001213 20 25            [ 2] 3194 	jra 9$
      001215                       3195 1$:	; got *|/|%
      001215 CD 11 A0         [ 4] 3196 	call factor
      001218 A1 0A            [ 1] 3197 	cp a,#TK_INTGR
      00121A 27 03            [ 1] 3198 	jreq 2$ 
      00121C CC 06 A1         [ 2] 3199 	jp syntax_error
      00121F 1F 01            [ 2] 3200 2$:	ldw (N1,sp),x  
      001221 7B 05            [ 1] 3201 	ld a,(MULOP,sp) 
      001223 A1 20            [ 1] 3202 	cp a,#TK_MULT 
      001225 26 05            [ 1] 3203 	jrne 3$
      001227 CD 10 30         [ 4] 3204 	call multiply 
      00122A 20 D1            [ 2] 3205 	jra term01
      00122C A1 21            [ 1] 3206 3$: cp a,#TK_DIV 
      00122E 26 05            [ 1] 3207 	jrne 4$ 
      001230 CD 10 78         [ 4] 3208 	call divide 
      001233 20 C8            [ 2] 3209 	jra term01 
      001235 CD 10 BC         [ 4] 3210 4$: call modulo
      001238 20 C3            [ 2] 3211 	jra term01 
      00123A 1E 03            [ 2] 3212 9$: ldw x,(N2,sp)  
      00123C A6 0A            [ 1] 3213 	ld a,#TK_INTGR 	
      00123E                       3214 term_exit:
      00123E                       3215 	_drop VSIZE 
      00123E 5B 05            [ 2]    1     addw sp,#VSIZE 
      001240 81               [ 4] 3216 	ret 
                                   3217 
                                   3218 ;-------------------------------
                                   3219 ;  expr ::= term [['+'|'-'] term]*
                                   3220 ;  result range {-32768..32767}
                                   3221 ;  output:
                                   3222 ;   A    token attribute 
                                   3223 ;   X	 integer   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3224 ;-------------------------------
                           000001  3225 	N1=1 
                           000003  3226 	N2=3
                           000005  3227 	OP=5 
                           000005  3228 	VSIZE=5 
      001241                       3229 expression:
      001241                       3230 	_vars VSIZE 
      001241 52 05            [ 2]    1     sub sp,#VSIZE 
      001243 CD 11 F4         [ 4] 3231 	call term
      001246 A1 02            [ 1] 3232 	cp a,#2 
      001248 2B 38            [ 1] 3233 	jrmi expr_exit 
      00124A 1F 03            [ 2] 3234 0$:	ldw (N2,sp),x 
      00124C CD 0C 7D         [ 4] 3235 	call get_token
      00124F A1 02            [ 1] 3236 	cp a,#2
      001251 2B 2B            [ 1] 3237 	jrmi 9$ 
      001253 6B 05            [ 1] 3238 1$:	ld (OP,sp),a  
      001255 A4 30            [ 1] 3239 	and a,#TK_GRP_MASK
      001257 A1 10            [ 1] 3240 	cp a,#TK_GRP_ADD 
      001259 27 07            [ 1] 3241 	jreq 2$ 
      00125B 7B 05            [ 1] 3242 	ld a,(OP,sp)
      00125D CD 0F A1         [ 4] 3243 	call unget_token
      001260 20 1C            [ 2] 3244 	jra 9$
      001262                       3245 2$: 
      001262 CD 11 F4         [ 4] 3246 	call term
      001265 A1 0A            [ 1] 3247 	cp a,#TK_INTGR 
      001267 27 03            [ 1] 3248 	jreq 3$
      001269 CC 06 A1         [ 2] 3249 	jp syntax_error
      00126C 1F 01            [ 2] 3250 3$:	ldw (N1,sp),x 
      00126E 7B 05            [ 1] 3251 	ld a,(OP,sp)
      001270 A1 10            [ 1] 3252 	cp a,#TK_PLUS 
      001272 26 05            [ 1] 3253 	jrne 4$
      001274 CD 10 22         [ 4] 3254 	call add 
      001277 20 D1            [ 2] 3255 	jra 0$ 
      001279 CD 10 2A         [ 4] 3256 4$:	call substract
      00127C 20 CC            [ 2] 3257 	jra 0$
      00127E 1E 03            [ 2] 3258 9$: ldw x,(N2,sp)
      001280 A6 0A            [ 1] 3259 	ld a,#TK_INTGR	
      001282                       3260 expr_exit:
      001282                       3261 	_drop VSIZE 
      001282 5B 05            [ 2]    1     addw sp,#VSIZE 
      001284 81               [ 4] 3262 	ret 
                                   3263 
                                   3264 ;---------------------------------------------
                                   3265 ; rel ::= expr rel_op expr
                                   3266 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3267 ;  relation return 1 | 0  for true | false 
                                   3268 ;  output:
                                   3269 ;    A 		token attribute  
                                   3270 ;	 X		1|0
                                   3271 ;---------------------------------------------
                           000001  3272 	N1=1
                           000003  3273 	N2=3
                           000005  3274 	RELOP=5
                           000005  3275 	VSIZE=5 
      001285                       3276 relation: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001285                       3277 	_vars VSIZE
      001285 52 05            [ 2]    1     sub sp,#VSIZE 
      001287 CD 12 41         [ 4] 3278 	call expression
      00128A A1 02            [ 1] 3279 	cp a,#2 
      00128C 2B 4B            [ 1] 3280 	jrmi rel_exit 
                                   3281 	; expect rel_op or leave 
      00128E 1F 03            [ 2] 3282 	ldw (N2,sp),x 
      001290 CD 0C 7D         [ 4] 3283 	call get_token 
      001293 A1 02            [ 1] 3284 	cp a,#2
      001295 2B 3E            [ 1] 3285 	jrmi 9$
      001297                       3286 1$:	
      001297 6B 05            [ 1] 3287 	ld (RELOP,sp),a 
      001299 A4 30            [ 1] 3288 	and a,#TK_GRP_MASK
      00129B A1 30            [ 1] 3289 	cp a,#0x30 
      00129D 27 07            [ 1] 3290 	jreq 2$
      00129F 7B 05            [ 1] 3291 	ld a,(RELOP,sp)
      0012A1 CD 0F A1         [ 4] 3292 	call unget_token  
      0012A4 20 2F            [ 2] 3293 	jra 9$
      0012A6                       3294 2$:	; expect another expression or error 
      0012A6 CD 12 41         [ 4] 3295 	call expression
      0012A9 A1 0A            [ 1] 3296 	cp a,#TK_INTGR 
      0012AB 27 03            [ 1] 3297 	jreq 3$
      0012AD CC 06 A1         [ 2] 3298 	jp syntax_error 
      0012B0 1F 01            [ 2] 3299 3$:	ldw (N1,sp),x 
      0012B2 CD 10 2A         [ 4] 3300 	call substract
      0012B5 26 06            [ 1] 3301 	jrne 4$
      0012B7 35 02 00 0A      [ 1] 3302 	mov acc8,#2 ; n1==n2
      0012BB 20 0C            [ 2] 3303 	jra 6$ 
      0012BD                       3304 4$: 
      0012BD 2C 06            [ 1] 3305 	jrsgt 5$  
      0012BF 35 04 00 0A      [ 1] 3306 	mov acc8,#4 ; n1<2 
      0012C3 20 04            [ 2] 3307 	jra 6$
      0012C5                       3308 5$:
      0012C5 35 01 00 0A      [ 1] 3309 	mov acc8,#1 ; n1>n2 
      0012C9                       3310 6$:
      0012C9 5F               [ 1] 3311 	clrw x 
      0012CA C6 00 0A         [ 1] 3312 	ld a, acc8  
      0012CD 14 05            [ 1] 3313 	and a,(RELOP,sp)
      0012CF 4D               [ 1] 3314 	tnz a 
      0012D0 27 05            [ 1] 3315 	jreq 10$
      0012D2 5C               [ 1] 3316 	incw x 
      0012D3                       3317 7$:	 
      0012D3 20 02            [ 2] 3318 	jra 10$  	
      0012D5 1E 03            [ 2] 3319 9$: ldw x,(N2,sp)
      0012D7                       3320 10$:
      0012D7 A6 0A            [ 1] 3321 	ld a,#TK_INTGR
      0012D9                       3322 rel_exit: 	 
      0012D9                       3323 	_drop VSIZE
      0012D9 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012DB 81               [ 4] 3324 	ret 
                                   3325 
                                   3326 
                                   3327 ;--------------------------------------------
                                   3328 ; BASIC: HEX 
                                   3329 ; select hexadecimal base for integer print
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3330 ;---------------------------------------------
      0012DC                       3331 hex_base:
      0012DC 35 10 00 07      [ 1] 3332 	mov base,#16 
      0012E0 81               [ 4] 3333 	ret 
                                   3334 
                                   3335 ;--------------------------------------------
                                   3336 ; BASIC: DEC 
                                   3337 ; select decimal base for integer print
                                   3338 ;---------------------------------------------
      0012E1                       3339 dec_base:
      0012E1 35 0A 00 07      [ 1] 3340 	mov base,#10
      0012E5 81               [ 4] 3341 	ret 
                                   3342 
                                   3343 ;------------------------
                                   3344 ; BASIC: SIZE 
                                   3345 ; return free size in text area
                                   3346 ; output:
                                   3347 ;   A 		TK_INTGR
                                   3348 ;   X 	    size integer
                                   3349 ;--------------------------
      0012E6                       3350 size:
      0012E6 AE 16 C8         [ 2] 3351 	ldw x,#tib 
      0012E9 72 B0 00 1D      [ 2] 3352 	subw x,txtend 
      0012ED A6 0A            [ 1] 3353 	ld a,#TK_INTGR
      0012EF 81               [ 4] 3354 	ret 
                                   3355 
                                   3356 
                                   3357 ;------------------------
                                   3358 ; BASIC: UBOUND  
                                   3359 ; return array variable size 
                                   3360 ; output:
                                   3361 ;   A 		TK_INTGR
                                   3362 ;   X 	    array size 
                                   3363 ;--------------------------
      0012F0                       3364 ubound:
      0012F0 AE 16 C8         [ 2] 3365 	ldw x,#tib
      0012F3 72 B0 00 1D      [ 2] 3366 	subw x,txtend 
      0012F7 54               [ 2] 3367 	srlw x 
      0012F8 CF 00 22         [ 2] 3368 	ldw array_size,x
      0012FB A6 0A            [ 1] 3369 	ld a,#TK_INTGR
      0012FD 81               [ 4] 3370 	ret 
                                   3371 
      0012FE                       3372 let:
      0012FE CD 0C 7D         [ 4] 3373 	call get_token 
      001301 A1 02            [ 1] 3374 	cp a,#TK_VAR 
      001303 27 03            [ 1] 3375 	jreq let02
      001305 CC 06 A1         [ 2] 3376 	jp syntax_error
      001308                       3377 let02:
      001308 CD 0F 30         [ 4] 3378 	call dpush 
      00130B CD 0C 7D         [ 4] 3379 	call get_token 
      00130E A1 32            [ 1] 3380 	cp a,#TK_EQUAL
      001310 27 03            [ 1] 3381 	jreq 1$
      001312 CC 06 A1         [ 2] 3382 	jp syntax_error
      001315                       3383 1$:	
      001315 CD 12 85         [ 4] 3384 	call relation   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001318 A1 0A            [ 1] 3385 	cp a,#TK_INTGR 
      00131A 27 03            [ 1] 3386 	jreq 2$
      00131C CC 06 A1         [ 2] 3387 	jp syntax_error
      00131F                       3388 2$:	
      00131F 90 93            [ 1] 3389 	ldw y,x 
      001321 CD 0F 3D         [ 4] 3390 	call dpop  
      001324 FF               [ 2] 3391 	ldw (x),y   
      001325 81               [ 4] 3392 	ret 
                                   3393 
                                   3394 ;----------------------------
                                   3395 ; BASIC: LIST [[start][,end]]
                                   3396 ; list program lines 
                                   3397 ; form start to end 
                                   3398 ; if empty argument list then 
                                   3399 ; list all.
                                   3400 ;----------------------------
                           000001  3401 	FIRST=1
                           000003  3402 	LAST=3 
                           000005  3403 	LN_PTR=5
                           000006  3404 	VSIZE=6 
      001326                       3405 list:
      001326                       3406 	_vars VSIZE
      001326 52 06            [ 2]    1     sub sp,#VSIZE 
      001328 CE 00 1B         [ 2] 3407 	ldw x,txtbgn 
      00132B C3 00 1D         [ 2] 3408 	cpw x,txtend 
      00132E 2B 03            [ 1] 3409 	jrmi 1$
      001330 CC 13 A9         [ 2] 3410 	jp list_exit ; nothing to list 
      001333 1F 05            [ 2] 3411 1$:	ldw (LN_PTR,sp),x 
      001335 FE               [ 2] 3412 	ldw x,(x) 
      001336 1F 01            [ 2] 3413 	ldw (FIRST,sp),x ; list from first line 
      001338 AE 7F FF         [ 2] 3414 	ldw x,#0x7fff ; biggest line number 
      00133B 1F 03            [ 2] 3415 	ldw (LAST,sp),x 
      00133D CD 11 49         [ 4] 3416 	call arg_list
      001340 4D               [ 1] 3417 	tnz a
      001341 27 3F            [ 1] 3418 	jreq list_start 
      001343 A1 02            [ 1] 3419 	cp a,#2 
      001345 27 07            [ 1] 3420 	jreq 4$
      001347 A1 01            [ 1] 3421 	cp a,#1 
      001349 27 06            [ 1] 3422 	jreq first_line 
      00134B CC 06 A1         [ 2] 3423 	jp syntax_error 
      00134E CD 0F 4A         [ 4] 3424 4$:	call dswap
      001351                       3425 first_line:
      001351 CD 0F 3D         [ 4] 3426 	call dpop 
      001354 1F 01            [ 2] 3427 	ldw (FIRST,sp),x 
      001356 A1 01            [ 1] 3428 	cp a,#1 
      001358 27 05            [ 1] 3429 	jreq lines_skip 	
      00135A                       3430 last_line:
      00135A CD 0F 3D         [ 4] 3431 	call dpop 
      00135D 1F 03            [ 2] 3432 	ldw (LAST,sp),x 
      00135F                       3433 lines_skip:
      00135F CE 00 1B         [ 2] 3434 	ldw x,txtbgn
      001362 1F 05            [ 2] 3435 2$:	ldw (LN_PTR,sp),x 
      001364 C3 00 1D         [ 2] 3436 	cpw x,txtend 
      001367 2A 40            [ 1] 3437 	jrpl list_exit 
      001369 FE               [ 2] 3438 	ldw x,(x) ;lineno 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00136A 13 01            [ 2] 3439 	cpw x,(FIRST,sp)
      00136C 2A 14            [ 1] 3440 	jrpl list_start 
      00136E 1E 05            [ 2] 3441 	ldw x,(LN_PTR,sp) 
      001370 1C 00 02         [ 2] 3442 	addw x,#2 
      001373 F6               [ 1] 3443 	ld a,(x)
      001374 5C               [ 1] 3444 	incw x 
      001375 C7 00 0A         [ 1] 3445 	ld acc8,a 
      001378 72 5F 00 09      [ 1] 3446 	clr acc16 
      00137C 72 BB 00 09      [ 2] 3447 	addw x,acc16
      001380 20 E0            [ 2] 3448 	jra 2$ 
                                   3449 ; print loop
      001382                       3450 list_start:
      001382 1E 05            [ 2] 3451 	ldw x,(LN_PTR,sp)
      001384                       3452 3$:	
      001384 CD 13 BD         [ 4] 3453 	call prt_basic_line
      001387 1E 05            [ 2] 3454 	ldw x,(LN_PTR,sp)
      001389 1C 00 02         [ 2] 3455 	addw x,#2 
      00138C F6               [ 1] 3456 	ld a,(x)
      00138D 5C               [ 1] 3457 	incw x 
      00138E C7 00 0A         [ 1] 3458 	ld acc8,a 
      001391 72 5F 00 09      [ 1] 3459 	clr acc16 
      001395 72 BB 00 09      [ 2] 3460 	addw x,acc16
      001399 C3 00 1D         [ 2] 3461 	cpw x,txtend 
      00139C 2A 0B            [ 1] 3462 	jrpl list_exit
      00139E 1F 05            [ 2] 3463 	ldw (LN_PTR,sp),x
      0013A0 FE               [ 2] 3464 	ldw x,(x)
      0013A1 13 03            [ 2] 3465 	cpw x,(LAST,sp)  
      0013A3 2C 04            [ 1] 3466 	jrsgt list_exit 
      0013A5 1E 05            [ 2] 3467 	ldw x,(LN_PTR,sp)
      0013A7 20 DB            [ 2] 3468 	jra 3$
      0013A9                       3469 list_exit:
      0013A9                       3470 	_drop VSIZE 
      0013A9 5B 06            [ 2]    1     addw sp,#VSIZE 
      0013AB 81               [ 4] 3471 	ret
                                   3472 
      0013AC 4E 6F 74 68 69 6E 67  3473 empty: .asciz "Nothing to list\n"
             20 74 6F 20 6C 69 73
             74 0A 00
                                   3474 
                                   3475 ;--------------------------
                                   3476 ; input:
                                   3477 ;   X 		pointer at line
                                   3478 ; output:
                                   3479 ;   none 
                                   3480 ;--------------------------	
      0013BD                       3481 prt_basic_line:
      0013BD 89               [ 2] 3482 	pushw x 
      0013BE FE               [ 2] 3483 	ldw x,(x)
      0013BF CF 00 09         [ 2] 3484 	ldw acc16,x 
      0013C2 72 5F 00 08      [ 1] 3485 	clr acc24 
      0013C6 AE 00 05         [ 2] 3486 	ldw x,#5 
      0013C9 A6 0A            [ 1] 3487 	ld a,#10 
      0013CB CD 08 B0         [ 4] 3488 	call prti24 
      0013CE 85               [ 2] 3489 	popw x 
      0013CF 1C 00 03         [ 2] 3490 	addw x,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013D2 CD 02 30         [ 4] 3491 	call puts 
      0013D5 A6 0D            [ 1] 3492 	ld a,#CR 
      0013D7 CD 02 1E         [ 4] 3493 	call putc 
      0013DA 81               [ 4] 3494 	ret 	
                                   3495 
                                   3496 ;---------------------------------
                                   3497 ; BASIC: PRINT|? arg_list 
                                   3498 ; print values from argument list
                                   3499 ;----------------------------------
                           000001  3500 	COMMA=1
                           000001  3501 	VSIZE=1
      0013DB                       3502 print:
      0013DB 4B 00            [ 1] 3503 push #0 ; local variable COMMA 
      0013DD                       3504 reset_comma:
      0013DD 0F 01            [ 1] 3505 	clr (COMMA,sp)
      0013DF                       3506 prt_loop:
      0013DF CD 12 85         [ 4] 3507 	call relation
      0013E2 A1 01            [ 1] 3508 	cp a,#TK_COLON 
      0013E4 27 50            [ 1] 3509 	jreq print_exit   
      0013E6 A1 0A            [ 1] 3510 	cp a,#TK_INTGR 
      0013E8 26 05            [ 1] 3511 	jrne 0$ 
      0013EA CD 09 05         [ 4] 3512 	call print_int 
      0013ED 20 EE            [ 2] 3513 	jra reset_comma
      0013EF                       3514 0$: 	
      0013EF CD 0C 7D         [ 4] 3515 	call get_token
      0013F2 A1 00            [ 1] 3516 	cp a,#TK_NONE 
      0013F4 27 40            [ 1] 3517 	jreq print_exit 
      0013F6 A1 06            [ 1] 3518 1$:	cp a,#TK_QSTR
      0013F8 26 05            [ 1] 3519 	jrne 2$   
      0013FA CD 02 30         [ 4] 3520 	call puts 
      0013FD 20 DE            [ 2] 3521 	jra reset_comma
      0013FF A1 0B            [ 1] 3522 2$: cp a,#TK_CHAR 
      001401 26 06            [ 1] 3523 	jrne 3$
      001403 9F               [ 1] 3524 	ld a,xl 
      001404 CD 02 1E         [ 4] 3525 	call putc 
      001407 20 D4            [ 2] 3526 	jra reset_comma 
      001409                       3527 3$: 	
      001409 A1 0C            [ 1] 3528 	cp a,#TK_FUNC 
      00140B 26 06            [ 1] 3529 	jrne 4$ 
      00140D FD               [ 4] 3530 	call (x)
      00140E CD 09 05         [ 4] 3531 	call print_int 
      001411 20 CA            [ 2] 3532 	jra reset_comma 
      001413                       3533 4$: 
      001413 A1 08            [ 1] 3534 	cp a,#TK_COMMA 
      001415 26 05            [ 1] 3535 	jrne 5$
      001417 03 01            [ 1] 3536 	cpl (COMMA,sp) 
      001419 CC 13 DF         [ 2] 3537 	jp prt_loop   
      00141C                       3538 5$: 
      00141C A1 09            [ 1] 3539 	cp a,#TK_SHARP
      00141E 26 13            [ 1] 3540 	jrne 7$
      001420 CD 0C 7D         [ 4] 3541 	call get_token
      001423 A1 0A            [ 1] 3542 	cp a,#TK_INTGR 
      001425 27 03            [ 1] 3543 	jreq 6$
      001427 CC 06 A1         [ 2] 3544 	jp syntax_error 
      00142A                       3545 6$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00142A 9F               [ 1] 3546 	ld a,xl 
      00142B A4 0F            [ 1] 3547 	and a,#15 
      00142D C7 00 25         [ 1] 3548 	ld tab_width,a 
      001430 CC 13 DD         [ 2] 3549 	jp reset_comma 
      001433                       3550 7$:	
      001433 CD 0F A1         [ 4] 3551 	call unget_token
      001436                       3552 print_exit:
      001436 0D 01            [ 1] 3553 	tnz (COMMA,sp)
      001438 26 05            [ 1] 3554 	jrne 9$
      00143A A6 0D            [ 1] 3555 	ld a,#CR 
      00143C CD 02 1E         [ 4] 3556     call putc 
      00143F                       3557 9$:	_drop VSIZE 
      00143F 5B 01            [ 2]    1     addw sp,#VSIZE 
      001441 81               [ 4] 3558 	ret 
                                   3559 
                                   3560 ;----------------------
                                   3561 ; 'save_context' and
                                   3562 ; 'rest_context' must be 
                                   3563 ; called at the same 
                                   3564 ; call stack depth 
                                   3565 ; i.e. SP must have the 
                                   3566 ; save value at  
                                   3567 ; entry point of both 
                                   3568 ; routine. 
                                   3569 ;---------------------
                           000006  3570 	CTXT_SIZE=6 ; size of saved data 
                                   3571 ;--------------------
                                   3572 ; save current BASIC
                                   3573 ; interpreter context 
                                   3574 ; on cstack 
                                   3575 ;--------------------
      001442                       3576 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001442                       3577 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001442                       3578 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001442                       3579 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001442                       3580 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      001442                       3581 save_context:
      001442 CE 00 03         [ 2] 3582 	ldw x,basicptr 
      001445 1F 03            [ 2] 3583 	ldw (BPTR,sp),x
      001447 CE 00 05         [ 2] 3584 	ldw x,lineno 
      00144A 1F 05            [ 2] 3585 	ldw (LNO,sp),x 
      00144C C6 00 01         [ 1] 3586 	ld a,in 
      00144F 6B 07            [ 1] 3587 	ld (IN,sp),a
      001451 C6 00 02         [ 1] 3588 	ld a,count 
      001454 6B 08            [ 1] 3589 	ld (CNT,sp),a  
      001456 81               [ 4] 3590 	ret
                                   3591 
                                   3592 ;-----------------------
                                   3593 ; restore previously saved 
                                   3594 ; BASIC interpreter context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3595 ; from cstack 
                                   3596 ;-------------------------
      001457                       3597 rest_context:
      001457 1E 03            [ 2] 3598 	ldw x,(BPTR,sp)
      001459 CF 00 03         [ 2] 3599 	ldw basicptr,x 
      00145C 1E 05            [ 2] 3600 	ldw x,(LNO,sp)
      00145E CF 00 05         [ 2] 3601 	ldw lineno,x 
      001461 7B 07            [ 1] 3602 	ld a,(IN,sp)
      001463 C7 00 01         [ 1] 3603 	ld in,a
      001466 7B 08            [ 1] 3604 	ld a,(CNT,sp)
      001468 C7 00 02         [ 1] 3605 	ld count,a  
      00146B 81               [ 4] 3606 	ret
                                   3607 
                                   3608 ;------------------------------------------
                                   3609 ; BASIC: INPUT [string],var[,[string],var]
                                   3610 ; input value in variables 
                                   3611 ; [string] optionally can be used as prompt 
                                   3612 ;-----------------------------------------
                           000001  3613 	CX_BPTR=1
                           000003  3614 	CX_LNO=3
                           000004  3615 	CX_IN=4
                           000005  3616 	CX_CNT=5
                           000006  3617 	SKIP=6
                           000007  3618 	VSIZE=7
      00146C                       3619 input_var:
      00146C 72 00 00 24 05   [ 2] 3620 	btjt flags,#FRUN,1$ 
      001471 A6 06            [ 1] 3621 	ld a,#ERR_RUN_ONLY 
      001473 CC 06 A3         [ 2] 3622 	jp tb_error 
      001476                       3623 1$:	_vars VSIZE 
      001476 52 07            [ 2]    1     sub sp,#VSIZE 
      001478                       3624 input_loop:
      001478 0F 06            [ 1] 3625 	clr (SKIP,sp)
      00147A CD 0C 7D         [ 4] 3626 	call get_token 
      00147D A1 00            [ 1] 3627 	cp a,#TK_NONE 
      00147F 27 5C            [ 1] 3628 	jreq input_exit 
      001481 A1 06            [ 1] 3629 	cp a,#TK_QSTR 
      001483 26 08            [ 1] 3630 	jrne 1$ 
      001485 CD 02 30         [ 4] 3631 	call puts 
      001488 03 06            [ 1] 3632 	cpl (SKIP,sp)
      00148A CD 0C 7D         [ 4] 3633 	call get_token 
      00148D A1 02            [ 1] 3634 1$: cp a,#TK_VAR  
      00148F 27 03            [ 1] 3635 	jreq 2$ 
      001491 CC 06 A1         [ 2] 3636 	jp syntax_error
      001494 CD 0F 30         [ 4] 3637 2$:	call dpush 
      001497 0D 06            [ 1] 3638 	tnz (SKIP,sp)
      001499 26 0F            [ 1] 3639 	jrne 21$ 
      00149B A6 3A            [ 1] 3640 	ld a,#':
      00149D C7 17 19         [ 1] 3641 	ld pad+1,a 
      0014A0 72 5F 17 1A      [ 1] 3642 	clr pad+2
      0014A4 AE 17 18         [ 2] 3643 	ldw x,#pad 
      0014A7 CD 02 30         [ 4] 3644 	call puts   
      0014AA                       3645 21$:
      0014AA CD 14 42         [ 4] 3646 	call save_context 
      0014AD AE 16 C8         [ 2] 3647 	ldw x,#tib 
      0014B0 CF 00 03         [ 2] 3648 	ldw basicptr,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014B3 72 5F 00 02      [ 1] 3649 	clr count  
      0014B7 CD 09 F3         [ 4] 3650 	call readln 
      0014BA 72 5F 00 01      [ 1] 3651 	clr in 
      0014BE CD 12 85         [ 4] 3652 	call relation 
      0014C1 A1 0A            [ 1] 3653 	cp a,#TK_INTGR
      0014C3 27 03            [ 1] 3654 	jreq 3$ 
      0014C5 CC 06 A1         [ 2] 3655 	jp syntax_error
      0014C8 CD 0F 30         [ 4] 3656 3$: call dpush 
      0014CB CD 0F 97         [ 4] 3657 	call store 
      0014CE CD 14 57         [ 4] 3658 	call rest_context
      0014D1 CD 0C 7D         [ 4] 3659 	call get_token 
      0014D4 A1 08            [ 1] 3660 	cp a,#TK_COMMA 
      0014D6 26 02            [ 1] 3661 	jrne 4$
      0014D8 20 9E            [ 2] 3662 	jra input_loop 
      0014DA CD 0F A1         [ 4] 3663 4$:	call unget_token 
      0014DD                       3664 input_exit:
      0014DD                       3665 	_drop VSIZE 
      0014DD 5B 07            [ 2]    1     addw sp,#VSIZE 
      0014DF 81               [ 4] 3666 	ret 
                                   3667 
                                   3668 
                                   3669 ;---------------------
                                   3670 ; BASIC: REMARK | ' 
                                   3671 ; begin a comment 
                                   3672 ; comment are ignored 
                                   3673 ; use ' insted of REM 
                                   3674 ; This is never called
                                   3675 ; because get_token 
                                   3676 ; take care of skipping
                                   3677 ; comment. but required
                                   3678 ; for future use of 
                                   3679 ; keyword reverse search.  
                                   3680 ;---------------------- 
      0014E0                       3681 rem: 
      0014E0 81               [ 4] 3682 	ret 
                                   3683 
                                   3684 
                                   3685 ;---------------------
                                   3686 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3687 ; read in loop 'addr'  
                                   3688 ; apply & 'mask' to value 
                                   3689 ; loop while result==0.  
                                   3690 ; if 'xor_mask' given 
                                   3691 ; apply ^ in second  
                                   3692 ; loop while result==0 
                                   3693 ;---------------------
                           000001  3694 	XMASK=1 
                           000002  3695 	MASK=2
                           000003  3696 	ADDR=3
                           000004  3697 	VSIZE=4
      0014E1                       3698 wait: 
      0014E1                       3699 	_vars VSIZE
      0014E1 52 04            [ 2]    1     sub sp,#VSIZE 
      0014E3 0F 01            [ 1] 3700 	clr (XMASK,sp) 
      0014E5 CD 11 49         [ 4] 3701 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0014E8 A1 02            [ 1] 3702 	cp a,#2
      0014EA 24 03            [ 1] 3703 	jruge 0$
      0014EC CC 06 A1         [ 2] 3704 	jp syntax_error 
      0014EF A1 03            [ 1] 3705 0$:	cp a,#3
      0014F1 25 06            [ 1] 3706 	jrult 1$
      0014F3 CD 0F 3D         [ 4] 3707 	call dpop 
      0014F6 9F               [ 1] 3708 	ld a,xl
      0014F7 6B 01            [ 1] 3709 	ld (XMASK,sp),a 
      0014F9 CD 0F 3D         [ 4] 3710 1$: call dpop ; mask 
      0014FC 9F               [ 1] 3711 	ld a,xl 
      0014FD 6B 02            [ 1] 3712 	ld (MASK,sp),a 
      0014FF CD 0F 3D         [ 4] 3713 	call dpop ; address 
      001502 F6               [ 1] 3714 2$:	ld a,(x)
      001503 14 02            [ 1] 3715 	and a,(MASK,sp)
      001505 18 01            [ 1] 3716 	xor a,(XMASK,sp)
      001507 27 F9            [ 1] 3717 	jreq 2$ 
      001509                       3718 	_drop VSIZE 
      001509 5B 04            [ 2]    1     addw sp,#VSIZE 
      00150B 81               [ 4] 3719 	ret 
                                   3720 
                                   3721 ;---------------------
                                   3722 ; BASIC: BSET addr,mask
                                   3723 ; set bits at 'addr' corresponding 
                                   3724 ; to those of 'mask' that are at 1.
                                   3725 ; arguments:
                                   3726 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3727 ;   mask        mask|addr
                                   3728 ; output:
                                   3729 ;	none 
                                   3730 ;--------------------------
      00150C                       3731 bit_set:
      00150C CD 11 49         [ 4] 3732 	call arg_list 
      00150F A1 02            [ 1] 3733 	cp a,#2	 
      001511 27 03            [ 1] 3734 	jreq 1$ 
      001513 CC 06 A1         [ 2] 3735 	jp syntax_error
      001516 CD 0F 3D         [ 4] 3736 1$: call dpop ; mask 
      001519 9F               [ 1] 3737 	ld a,xl 
      00151A CD 0F 3D         [ 4] 3738 	call dpop ; addr  
      00151D FA               [ 1] 3739 	or a,(x)
      00151E F7               [ 1] 3740 	ld (x),a 
      00151F 81               [ 4] 3741 	ret 
                                   3742 
                                   3743 ;---------------------
                                   3744 ; BASIC: BRES addr,mask
                                   3745 ; reset bits at 'addr' corresponding 
                                   3746 ; to those of 'mask' that are at 1.
                                   3747 ; arguments:
                                   3748 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3749 ;   mask	    ~mask&*addr  
                                   3750 ; output:
                                   3751 ;	none 
                                   3752 ;--------------------------
      001520                       3753 bit_reset:
      001520 CD 11 49         [ 4] 3754 	call arg_list 
      001523 A1 02            [ 1] 3755 	cp a,#2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001525 27 03            [ 1] 3756 	jreq 1$ 
      001527 CC 06 A1         [ 2] 3757 	jp syntax_error
      00152A                       3758 1$: 
      00152A CD 0F 3D         [ 4] 3759 	call dpop ; mask 
      00152D 9F               [ 1] 3760 	ld a,xl 
      00152E 43               [ 1] 3761 	cpl a 
      00152F CD 0F 3D         [ 4] 3762 	call dpop ; addr  
      001532 F4               [ 1] 3763 	and a,(x)
      001533 F7               [ 1] 3764 	ld (x),a 
      001534 81               [ 4] 3765 	ret 
                                   3766 
                                   3767 ;---------------------
                                   3768 ; BASIC: BRES addr,mask
                                   3769 ; toggle bits at 'addr' corresponding 
                                   3770 ; to those of 'mask' that are at 1.
                                   3771 ; arguments:
                                   3772 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3773 ;   mask	    mask^*addr  
                                   3774 ; output:
                                   3775 ;	none 
                                   3776 ;--------------------------
      001535                       3777 bit_toggle:
      001535 CD 11 49         [ 4] 3778 	call arg_list 
      001538 A1 02            [ 1] 3779 	cp a,#2 
      00153A 27 03            [ 1] 3780 	jreq 1$ 
      00153C CC 06 A1         [ 2] 3781 	jp syntax_error
      00153F CD 0F 3D         [ 4] 3782 1$: call dpop ; mask 
      001542 9F               [ 1] 3783 	ld a,xl 
      001543 CD 0F 3D         [ 4] 3784 	call dpop ; addr  
      001546 F8               [ 1] 3785 	xor a,(x)
      001547 F7               [ 1] 3786 	ld (x),a 
      001548 81               [ 4] 3787 	ret 
                                   3788 
                                   3789 
                                   3790 ;--------------------
                                   3791 ; BASIC: POKE addr,byte
                                   3792 ; put a byte at addr 
                                   3793 ;--------------------
      001549                       3794 poke:
      001549 CD 11 49         [ 4] 3795 	call arg_list 
      00154C A1 02            [ 1] 3796 	cp a,#2
      00154E 27 03            [ 1] 3797 	jreq 1$
      001550 CC 06 A1         [ 2] 3798 	jp syntax_error
      001553                       3799 1$:	
      001553 CD 0F 3D         [ 4] 3800 	call dpop 
      001556 9F               [ 1] 3801     ld a,xl 
      001557 CD 0F 3D         [ 4] 3802 	call dpop 
      00155A F7               [ 1] 3803 	ld (x),a 
      00155B 81               [ 4] 3804 	ret 
                                   3805 
                                   3806 ;-----------------------
                                   3807 ; BASIC: PEEK(addr)
                                   3808 ; get the byte at addr 
                                   3809 ; input:
                                   3810 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3811 ; output:
                                   3812 ;	X 		value 
                                   3813 ;-----------------------
      00155C                       3814 peek:
      00155C A6 04            [ 1] 3815 	ld a,#TK_LPAREN 
      00155E CD 11 3C         [ 4] 3816 	call expect 
      001561 CD 11 49         [ 4] 3817 	call arg_list
      001564 A1 01            [ 1] 3818 	cp a,#1 
      001566 27 03            [ 1] 3819 	jreq 1$
      001568 CC 06 A1         [ 2] 3820 	jp syntax_error
      00156B A6 05            [ 1] 3821 1$:	ld a,#TK_RPAREN 
      00156D CD 11 3C         [ 4] 3822 	call expect 
      001570 CD 0F 3D         [ 4] 3823 	call dpop 
      001573 F6               [ 1] 3824 	ld a,(x)
      001574 5F               [ 1] 3825 	clrw x 
      001575 97               [ 1] 3826 	ld xl,a 
      001576 A6 0A            [ 1] 3827 	ld a,#TK_INTGR
      001578 81               [ 4] 3828 	ret 
                                   3829 
      001579                       3830 if: 
      001579 CD 12 85         [ 4] 3831 	call relation 
      00157C A1 0A            [ 1] 3832 	cp a,#TK_INTGR
      00157E 27 03            [ 1] 3833 	jreq 1$ 
      001580 CC 06 A1         [ 2] 3834 	jp syntax_error
      001583 4F               [ 1] 3835 1$:	clr a 
      001584 5D               [ 2] 3836 	tnzw x 
      001585 26 05            [ 1] 3837 	jrne 9$  
                                   3838 ;skip to next line
      001587 55 00 02 00 01   [ 1] 3839 	mov in,count
      00158C 81               [ 4] 3840 9$:	ret 
                                   3841 
                                   3842 ;------------------------
                                   3843 ; BASIC: FOR var=expr 
                                   3844 ; set variable to expression 
                                   3845 ; leave variable address 
                                   3846 ; on dstack and set
                                   3847 ; FFOR bit in 'flags'
                                   3848 ;-----------------
                           000001  3849 	RETL1=1
                           000003  3850 	INW=3
                           000005  3851 	BPTR=5
      00158D                       3852 for: ; { -- var_addr }
      00158D A6 02            [ 1] 3853 	ld a,#TK_VAR 
      00158F CD 11 3C         [ 4] 3854 	call expect
      001592 CD 0F 30         [ 4] 3855 	call dpush 
      001595 CD 13 08         [ 4] 3856 	call let02 
      001598 72 14 00 24      [ 1] 3857 	bset flags,#FFOR 
                                   3858 ; open space on cstack for BPTR and INW 
      00159C 85               [ 2] 3859 	popw x ; call return address 
      00159D                       3860 	_vars 4
      00159D 52 04            [ 2]    1     sub sp,#4 
      00159F 89               [ 2] 3861 	pushw x  ; RETL1 
      0015A0 5F               [ 1] 3862 	clrw x 
      0015A1 1F 05            [ 2] 3863 	ldw (BPTR,sp),x 
      0015A3 1F 03            [ 2] 3864 	ldw (INW,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0015A5 CD 0C 7D         [ 4] 3865 	call get_token 
      0015A8 A1 07            [ 1] 3866 	cp a,#TK_CMD 
      0015AA 27 03            [ 1] 3867 	jreq 1$
      0015AC CC 06 A1         [ 2] 3868 	jp syntax_error
      0015AF                       3869 1$:  
      0015AF A3 15 B7         [ 2] 3870 	cpw x,#to 
      0015B2 27 03            [ 1] 3871 	jreq to
      0015B4 CC 06 A1         [ 2] 3872 	jp syntax_error 
                                   3873 
                                   3874 ;-----------------------------------
                                   3875 ; BASIC: TO expr 
                                   3876 ; second part of FOR loop initilization
                                   3877 ; leave limit on dstack and set 
                                   3878 ; FTO bit in 'flags'
                                   3879 ;-----------------------------------
      0015B7                       3880 to: ; { var_addr -- var_addr limit step }
      0015B7 72 04 00 24 03   [ 2] 3881 	btjt flags,#FFOR,1$
      0015BC CC 06 A1         [ 2] 3882 	jp syntax_error
      0015BF CD 12 85         [ 4] 3883 1$: call relation  
      0015C2 A1 0A            [ 1] 3884 	cp a,#TK_INTGR 
      0015C4 27 03            [ 1] 3885 	jreq 2$ 
      0015C6 CC 06 A1         [ 2] 3886 	jp syntax_error
      0015C9 CD 0F 30         [ 4] 3887 2$: call dpush ; limit
      0015CC CE 00 00         [ 2] 3888 	ldw x,in.w 
      0015CF CD 0C 7D         [ 4] 3889 	call get_token
      0015D2 A1 00            [ 1] 3890 	cp a,#TK_NONE  
      0015D4 27 0C            [ 1] 3891 	jreq 4$ 
      0015D6 A1 07            [ 1] 3892 	cp a,#TK_CMD
      0015D8 26 05            [ 1] 3893 	jrne 3$
      0015DA A3 15 E7         [ 2] 3894 	cpw x,#step 
      0015DD 27 08            [ 1] 3895 	jreq step
      0015DF                       3896 3$:	
      0015DF CD 0F A1         [ 4] 3897 	call unget_token   	 
      0015E2                       3898 4$:	
      0015E2 AE 00 01         [ 2] 3899 	ldw x,#1   ; default step  
      0015E5 20 12            [ 2] 3900 	jra store_loop_addr 
                                   3901 
                                   3902 
                                   3903 ;----------------------------------
                                   3904 ; BASIC: STEP expr 
                                   3905 ; optional third par of FOR loop
                                   3906 ; initialization. 	
                                   3907 ;------------------------------------
      0015E7                       3908 step: ; {var limit -- var limit step}
      0015E7 72 04 00 24 03   [ 2] 3909 	btjt flags,#FFOR,1$
      0015EC CC 06 A1         [ 2] 3910 	jp syntax_error
      0015EF CD 12 85         [ 4] 3911 1$: call relation
      0015F2 A1 0A            [ 1] 3912 	cp a,#TK_INTGR
      0015F4 27 03            [ 1] 3913 	jreq store_loop_addr  
      0015F6 CC 06 A1         [ 2] 3914 	jp syntax_error
                                   3915 ; leave loop back entry point on cstack 
                                   3916 ; cstack is 2 call deep from interp_loop
      0015F9                       3917 store_loop_addr:
      0015F9 CD 0F 30         [ 4] 3918 	call dpush 
      0015FC CE 00 03         [ 2] 3919 	ldw x,basicptr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0015FF 1F 05            [ 2] 3920 	ldw (BPTR,sp),x 
      001601 CE 00 00         [ 2] 3921 	ldw x,in.w 
      001604 1F 03            [ 2] 3922 	ldw (INW,sp),x   
      001606 72 15 00 24      [ 1] 3923 	bres flags,#FFOR 
      00160A 72 5C 00 1F      [ 1] 3924 	inc loop_depth 
      00160E 81               [ 4] 3925 	ret 
                                   3926 
                                   3927 ;--------------------------------
                                   3928 ; BASIC: NEXT var 
                                   3929 ; FOR loop control 
                                   3930 ; increment variable with step 
                                   3931 ; and compare with limit 
                                   3932 ; loop if threshold not crossed.
                                   3933 ; else clean both stacks. 
                                   3934 ; and decrement 'loop_depth' 
                                   3935 ;--------------------------------
      00160F                       3936 next: ; {var limit step -- [var limit step ] }
      00160F 72 5D 00 1F      [ 1] 3937 	tnz loop_depth 
      001613 26 03            [ 1] 3938 	jrne 1$ 
      001615 CC 06 A1         [ 2] 3939 	jp syntax_error 
      001618                       3940 1$: 
      001618 A6 02            [ 1] 3941 	ld a,#TK_VAR 
      00161A CD 11 3C         [ 4] 3942 	call expect
                                   3943 ; check for good variable after NEXT 	 
      00161D 90 93            [ 1] 3944 	ldw y,x 
      00161F AE 00 04         [ 2] 3945 	ldw x,#4  
      001622 72 D3 00 19      [ 4] 3946 	cpw y,([dstkptr],x) ; compare variables address 
      001626 27 03            [ 1] 3947 	jreq 2$  
      001628 CC 06 A1         [ 2] 3948 	jp syntax_error ; not the good one 
      00162B                       3949 2$: ; increment variable 
      00162B 93               [ 1] 3950 	ldw x,y
      00162C FE               [ 2] 3951 	ldw x,(x)  ; get var value 
      00162D CF 00 09         [ 2] 3952 	ldw acc16,x 
      001630 72 CE 00 19      [ 5] 3953 	ldw x,[dstkptr] ; step
      001634 72 BB 00 09      [ 2] 3954 	addw x,acc16 ; var+step 
      001638 90 FF            [ 2] 3955 	ldw (y),x ; save var new value 
                                   3956 ; compare with limit 
      00163A 90 93            [ 1] 3957 	ldw y,x 
      00163C 72 CE 00 19      [ 5] 3958 	ldw x,[dstkptr] ; step in x 
      001640 5D               [ 2] 3959 	tnzw x  
      001641 2A 0B            [ 1] 3960 	jrpl 4$ ; positive step 
                                   3961 ;negative step 
      001643 AE 00 02         [ 2] 3962 	ldw x,#2
      001646 72 D3 00 19      [ 4] 3963 	cpw y,([dstkptr],x)
      00164A 2F 26            [ 1] 3964 	jrslt loop_done
      00164C 20 09            [ 2] 3965 	jra loop_back 
      00164E                       3966 4$: ; positive step
      00164E AE 00 02         [ 2] 3967 	ldw x,#2 
      001651 72 D3 00 19      [ 4] 3968 	cpw y,([dstkptr],x)
      001655 2C 1B            [ 1] 3969 	jrsgt loop_done
      001657                       3970 loop_back:
      001657 1E 05            [ 2] 3971 	ldw x,(BPTR,sp)
      001659 CF 00 03         [ 2] 3972 	ldw basicptr,x 
      00165C 72 01 00 24 0B   [ 2] 3973 	btjf flags,#FRUN,1$ 
      001661 E6 02            [ 1] 3974 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001663 AB 02            [ 1] 3975 	add a,#2 
      001665 C7 00 02         [ 1] 3976 	ld count,a
      001668 FE               [ 2] 3977 	ldw x,(x)
      001669 CF 00 05         [ 2] 3978 	ldw lineno,x
      00166C 1E 03            [ 2] 3979 1$:	ldw x,(INW,sp)
      00166E CF 00 00         [ 2] 3980 	ldw in.w,x 
      001671 81               [ 4] 3981 	ret 
      001672                       3982 loop_done:
                                   3983 	; remove var limit step on dstack 
      001672 CE 00 19         [ 2] 3984 	ldw x,dstkptr 
      001675 1C 00 06         [ 2] 3985 	addw x,#3*CELL_SIZE
      001678 CF 00 19         [ 2] 3986 	ldw dstkptr,x 
                                   3987 	; remove 2 return address on cstack 
      00167B 85               [ 2] 3988 	popw x
      00167C                       3989 	_drop 4
      00167C 5B 04            [ 2]    1     addw sp,#4 
      00167E 89               [ 2] 3990 	pushw x 
      00167F 72 5A 00 1F      [ 1] 3991 	dec loop_depth 
      001683 81               [ 4] 3992 	ret 
                                   3993 
                                   3994 
                                   3995 ;------------------------
                                   3996 ; BASIC: GOTO lineno 
                                   3997 ; jump to lineno 
                                   3998 ; here cstack is 2 call deep from interp_loop 
                                   3999 ;------------------------
      001684                       4000 goto:
      001684 72 00 00 24 06   [ 2] 4001 	btjt flags,#FRUN,0$ 
      001689 A6 06            [ 1] 4002 	ld a,#ERR_RUN_ONLY
      00168B CC 06 A3         [ 2] 4003 	jp tb_error 
      00168E 81               [ 4] 4004 	ret 
      00168F 20 23            [ 2] 4005 0$:	jra go_common
                                   4006 
                                   4007 ;--------------------
                                   4008 ; BASIC: GOSUB lineno
                                   4009 ; basic subroutine call
                                   4010 ; actual lineno and basicptr 
                                   4011 ; are saved on cstack
                                   4012 ; here cstack is 2 call deep from interp_loop 
                                   4013 ;--------------------
                           000003  4014 	GOS_RET=3
      001691                       4015 gosub:
      001691 72 00 00 24 06   [ 2] 4016 	btjt flags,#FRUN,0$ 
      001696 A6 06            [ 1] 4017 	ld a,#ERR_RUN_ONLY
      001698 CC 06 A3         [ 2] 4018 	jp tb_error 
      00169B 81               [ 4] 4019 	ret 
      00169C 85               [ 2] 4020 0$:	popw x 
      00169D 52 02            [ 2] 4021 	sub sp,#2 
      00169F 89               [ 2] 4022 	pushw x 
      0016A0 CE 00 03         [ 2] 4023 	ldw x,basicptr
      0016A3 E6 02            [ 1] 4024 	ld a,(2,x)
      0016A5 AB 03            [ 1] 4025 	add a,#3 
      0016A7 C7 00 0A         [ 1] 4026 	ld acc8,a 
      0016AA 72 5F 00 09      [ 1] 4027 	clr acc16 
      0016AE 72 BB 00 09      [ 2] 4028 	addw x,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016B2 1F 03            [ 2] 4029 	ldw (GOS_RET,sp),x 
      0016B4                       4030 go_common: 
      0016B4 CD 12 85         [ 4] 4031 	call relation 
      0016B7 A1 0A            [ 1] 4032 	cp a,#TK_INTGR
      0016B9 27 03            [ 1] 4033 	jreq 1$ 
      0016BB CC 06 A1         [ 2] 4034 	jp syntax_error
      0016BE                       4035 1$: 
      0016BE CD 03 61         [ 4] 4036 	call search_lineno  
      0016C1 5D               [ 2] 4037 	tnzw x 
      0016C2 26 05            [ 1] 4038 	jrne 2$ 
      0016C4 A6 05            [ 1] 4039 	ld a,#ERR_NO_LINE 
      0016C6 CC 06 A3         [ 2] 4040 	jp tb_error 
      0016C9                       4041 2$: 
      0016C9 CF 00 03         [ 2] 4042 	ldw basicptr,x 
      0016CC E6 02            [ 1] 4043 	ld a,(2,x)
      0016CE AB 03            [ 1] 4044 	add a,#3 
      0016D0 C7 00 02         [ 1] 4045 	ld count,a 
      0016D3 FE               [ 2] 4046 	ldw x,(x)
      0016D4 CF 00 05         [ 2] 4047 	ldw lineno,x 
      0016D7 35 03 00 01      [ 1] 4048 	mov in,#3 
      0016DB 81               [ 4] 4049 	ret 
                                   4050 
                                   4051 ;------------------------
                                   4052 ; BASIC: RETURN 
                                   4053 ; exit from a subroutine 
                                   4054 ; cstack is 2 level deep from interp_loop 
                                   4055 ;------------------------
      0016DC                       4056 return:
      0016DC 72 00 00 24 05   [ 2] 4057 	btjt flags,#FRUN,0$ 
      0016E1 A6 06            [ 1] 4058 	ld a,#ERR_RUN_ONLY
      0016E3 CC 06 A3         [ 2] 4059 	jp tb_error 
      0016E6                       4060 0$:	
      0016E6 1E 03            [ 2] 4061 	ldw x,(GOS_RET,sp) 
      0016E8 CF 00 03         [ 2] 4062 	ldw basicptr,x 
      0016EB E6 02            [ 1] 4063 	ld a,(2,x)
      0016ED AB 03            [ 1] 4064 	add a,#3 
      0016EF C7 00 02         [ 1] 4065 	ld count,a 
      0016F2 35 03 00 01      [ 1] 4066 	mov in,#3
      0016F6 FE               [ 2] 4067 	ldw x,(x)
      0016F7 CF 00 05         [ 2] 4068 	ldw lineno,x 
      0016FA 4F               [ 1] 4069 	clr a 
      0016FB 85               [ 2] 4070 	popw x 
      0016FC                       4071 	_drop 2
      0016FC 5B 02            [ 2]    1     addw sp,#2 
      0016FE 89               [ 2] 4072 	pushw x
      0016FF 81               [ 4] 4073 	ret  
                                   4074 
                                   4075 
                                   4076 ;----------------------------------
                                   4077 ; BASIC: RUN
                                   4078 ; run BASIC program in RAM
                                   4079 ;----------------------------------- 
      001700                       4080 run: 
      001700 72 01 00 24 02   [ 2] 4081 	btjf flags,#FRUN,0$  
      001705 4F               [ 1] 4082 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001706 81               [ 4] 4083 	ret
      001707                       4084 0$: 
      001707 72 09 00 24 12   [ 2] 4085 	btjf flags,#FBREAK,1$
      00170C                       4086 	_drop 2 
      00170C 5B 02            [ 2]    1     addw sp,#2 
      00170E CD 14 57         [ 4] 4087 	call rest_context
      001711                       4088 	_drop CTXT_SIZE 
      001711 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      001713 72 19 00 24      [ 1] 4089 	bres flags,#FBREAK 
      001717 72 10 00 24      [ 1] 4090 	bset flags,#FRUN 
      00171B CC 07 67         [ 2] 4091 	jp interp_loop 
      00171E CE 00 1B         [ 2] 4092 1$:	ldw x,txtbgn
      001721 C3 00 1D         [ 2] 4093 	cpw x,txtend 
      001724 2B 02            [ 1] 4094 	jrmi 2$ 
      001726 4F               [ 1] 4095 	clr a 
      001727 81               [ 4] 4096 	ret 
      001728 CD 12 F0         [ 4] 4097 2$: call ubound 
      00172B                       4098 	_drop 2 
      00172B 5B 02            [ 2]    1     addw sp,#2 
      00172D CE 00 1B         [ 2] 4099 	ldw x,txtbgn 
      001730 CF 00 03         [ 2] 4100 	ldw basicptr,x 
      001733 E6 02            [ 1] 4101 	ld a,(2,x)
      001735 AB 02            [ 1] 4102 	add a,#2 ; consider that in start at 3  
      001737 C7 00 02         [ 1] 4103 	ld count,a
      00173A FE               [ 2] 4104 	ldw x,(x)
      00173B CF 00 05         [ 2] 4105 	ldw lineno,x
      00173E 35 03 00 01      [ 1] 4106 	mov in,#3	
      001742 72 10 00 24      [ 1] 4107 	bset flags,#FRUN 
      001746 CC 07 67         [ 2] 4108 	jp interp_loop 
                                   4109 
                                   4110 
                                   4111 ;----------------------
                                   4112 ; BASIC: STOP 
                                   4113 ; stop running program
                                   4114 ;---------------------- 
      001749                       4115 stop: 
                                   4116 ; clean dstack and cstack 
      001749 AE 17 FF         [ 2] 4117 	ldw x,#STACK_EMPTY 
      00174C 94               [ 1] 4118 	ldw sp,x 
      00174D 72 11 00 24      [ 1] 4119 	bres flags,#FRUN 
      001751 72 19 00 24      [ 1] 4120 	bres flags,#FBREAK
      001755 CC 07 01         [ 2] 4121 	jp warm_start
                                   4122 
                                   4123 ;-----------------------
                                   4124 ; BASIC: BREAK 
                                   4125 ; insert a breakpoint 
                                   4126 ; in pogram. 
                                   4127 ; the program is resumed
                                   4128 ; with RUN 
                                   4129 ;-------------------------
      001758                       4130 break:
      001758 72 00 00 24 02   [ 2] 4131 	btjt flags,#FRUN,2$
      00175D 4F               [ 1] 4132 	clr a
      00175E 81               [ 4] 4133 	ret 
      00175F                       4134 2$:	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4135 ; create space on cstack to save context 
      00175F AE 17 89         [ 2] 4136 	ldw x,#break_point 
      001762 CD 02 30         [ 4] 4137 	call puts 
      001765                       4138 	_drop 2 ;drop return address 
      001765 5B 02            [ 2]    1     addw sp,#2 
      001767                       4139 	_vars CTXT_SIZE ; context size 
      001767 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001769 CD 14 42         [ 4] 4140 	call save_context 
      00176C AE 16 C8         [ 2] 4141 	ldw x,#tib 
      00176F CF 00 03         [ 2] 4142 	ldw basicptr,x
      001772 7F               [ 1] 4143 	clr (x)
      001773 72 5F 00 02      [ 1] 4144 	clr count  
      001777 5F               [ 1] 4145 	clrw x 
      001778 CF 00 05         [ 2] 4146 	ldw lineno,x 
      00177B CF 00 00         [ 2] 4147 	ldw in.w,x
      00177E 72 11 00 24      [ 1] 4148 	bres flags,#FRUN 
      001782 72 18 00 24      [ 1] 4149 	bset flags,#FBREAK
      001786 CC 07 67         [ 2] 4150 	jp interp_loop 
      001789 0A 62 72 65 61 6B 20  4151 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4152 
                                   4153 ;-----------------------
                                   4154 ; BASIC: NEW
                                   4155 ; from command line only 
                                   4156 ; free program memory
                                   4157 ; and clear variables 
                                   4158 ;------------------------
      0017A7                       4159 new: 
      0017A7 72 01 00 24 02   [ 2] 4160 	btjf flags,#FRUN,0$ 
      0017AC 4F               [ 1] 4161 	clr a 
      0017AD 81               [ 4] 4162 	ret 
      0017AE                       4163 0$:	
      0017AE CD 05 7F         [ 4] 4164 	call clear_basic 
      0017B1 81               [ 4] 4165 	ret 
                                   4166 	 
                                   4167 ;--------------------
                                   4168 ; input:
                                   4169 ;   X     increment 
                                   4170 ; output:
                                   4171 ;   farptr  incremented 
                                   4172 ;---------------------
      0017B2                       4173 incr_farptr:
      0017B2 72 BB 00 14      [ 2] 4174 	addw x,farptr+1 
      0017B6 24 04            [ 1] 4175 	jrnc 1$
      0017B8 72 5C 00 13      [ 1] 4176 	inc farptr 
      0017BC CF 00 14         [ 2] 4177 1$:	ldw farptr+1,x  
      0017BF 81               [ 4] 4178 	ret 
                                   4179 
                                   4180 ;------------------------------
                                   4181 ; extended flash memory used as FLASH_DRIVE 
                                   4182 ; seek end of used flash drive   
                                   4183 ; starting at 0x10000 address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4184 ; 4 consecutives 0 bytes signal free space. 
                                   4185 ; input:
                                   4186 ;	none
                                   4187 ; output:
                                   4188 ;   ffree     free_addr| 0 if memory full.
                                   4189 ;------------------------------
      0017C0                       4190 seek_fdrive:
      0017C0 A6 01            [ 1] 4191 	ld a,#1
      0017C2 C7 00 13         [ 1] 4192 	ld farptr,a 
      0017C5 5F               [ 1] 4193 	clrw x 
      0017C6 CF 00 14         [ 2] 4194 	ldw farptr+1,x 
      0017C9                       4195 1$:
      0017C9 5F               [ 1] 4196 	clrw x 
      0017CA 92 AF 00 13      [ 5] 4197 	ldf a,([farptr],x) 
      0017CE 26 15            [ 1] 4198 	jrne 2$
      0017D0 5C               [ 1] 4199 	incw x 
      0017D1 92 AF 00 13      [ 5] 4200 	ldf a,([farptr],x)
      0017D5 26 0E            [ 1] 4201 	jrne 2$ 
      0017D7 5C               [ 1] 4202 	incw x 
      0017D8 92 AF 00 13      [ 5] 4203 	ldf a,([farptr],x)
      0017DC 26 07            [ 1] 4204 	jrne 2$ 
      0017DE 5C               [ 1] 4205 	incw x 
      0017DF 92 AF 00 13      [ 5] 4206 	ldf a,([farptr],x)
      0017E3 27 28            [ 1] 4207 	jreq 4$ 
      0017E5                       4208 2$: 
      0017E5 1C 00 01         [ 2] 4209 	addw x,#1
      0017E8 CD 17 B2         [ 4] 4210 	call incr_farptr
      0017EB AE 02 7F         [ 2] 4211 	ldw x,#0x27f 
      0017EE C3 00 13         [ 2] 4212 	cpw x,farptr
      0017F1 2A D6            [ 1] 4213 	jrpl 1$
      0017F3 72 5F 00 16      [ 1] 4214 	clr ffree 
      0017F7 72 5F 00 17      [ 1] 4215 	clr ffree+1 
      0017FB 72 5F 00 18      [ 1] 4216 	clr ffree+2 
      0017FF 72 5F 00 08      [ 1] 4217 	clr acc24 
      001803 72 5F 00 09      [ 1] 4218 	clr acc16
      001807 72 5F 00 0A      [ 1] 4219 	clr acc8 
      00180B 20 38            [ 2] 4220 	jra 5$
      00180D                       4221 4$: ; copy farptr to ffree	 
      00180D CE 00 14         [ 2] 4222 	ldw x,farptr+1 
      001810 A3 00 00         [ 2] 4223 	cpw x,#fdrive 
      001813 27 06            [ 1] 4224 	jreq 41$
                                   4225 	; there is a file, last 0 of that file must be skipped.
      001815 AE 00 01         [ 2] 4226 	ldw x,#1
      001818 CD 17 B2         [ 4] 4227 	call incr_farptr
      00181B                       4228 41$: 
      00181B CE 00 13         [ 2] 4229 	ldw x,farptr 
      00181E C6 00 15         [ 1] 4230 	ld a,farptr+2 
      001821 CF 00 16         [ 2] 4231 	ldw ffree,x 
      001824 C7 00 18         [ 1] 4232 	ld ffree+2,a  
      001827 CF 00 08         [ 2] 4233 	ldw acc24,x 
      00182A C7 00 0A         [ 1] 4234 	ld acc8,a 
      00182D A6 FF            [ 1] 4235 	ld a,#0xff 
      00182F C0 00 0A         [ 1] 4236 	sub a,acc8 
      001832 C7 00 0A         [ 1] 4237 	ld acc8,a 
      001835 A6 7F            [ 1] 4238 	ld a,#0x7f 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001837 C2 00 09         [ 1] 4239 	sbc a,acc16 
      00183A C7 00 09         [ 1] 4240 	ld acc16,a 
      00183D A6 02            [ 1] 4241 	ld a,#0x2 
      00183F C2 00 08         [ 1] 4242 	sbc a,acc24 
      001842 C7 00 08         [ 1] 4243 	ld acc24,a 
      001845 AE 18 57         [ 2] 4244 5$:	ldw x,#ffree_msg 
      001848 CD 02 30         [ 4] 4245 	call puts 
      00184B 5F               [ 1] 4246 	clrw x 
      00184C A6 0A            [ 1] 4247 	ld a,#10
      00184E CD 08 B0         [ 4] 4248 	call prti24 
      001851 A6 0D            [ 1] 4249 	ld a,#CR 
      001853 CD 02 1E         [ 4] 4250 	call putc 
      001856 81               [ 4] 4251 	ret 
      001857 0A 66 6C 61 73 68 20  4252 ffree_msg: .asciz "\nflash drive bytes free: "
             64 72 69 76 65 20 62
             79 74 65 73 20 66 72
             65 65 3A 20 00
                                   4253 
                                   4254 ;-----------------------
                                   4255 ; compare file name 
                                   4256 ; with name pointed by Y  
                                   4257 ; input:
                                   4258 ;   farptr   file name 
                                   4259 ;   Y        target name 
                                   4260 ; output:
                                   4261 ;   farptr 	 at file_name
                                   4262 ;   X 		 farptr[x] point at size field  
                                   4263 ;   Carry    0|1 no match|match  
                                   4264 ;----------------------
      001871                       4265 cmp_name:
      001871 5F               [ 1] 4266 	clrw x
      001872 92 AF 00 13      [ 5] 4267 1$:	ldf a,([farptr],x)
      001876 90 F1            [ 1] 4268 	cp a,(y)
      001878 26 08            [ 1] 4269 	jrne 4$
      00187A 4D               [ 1] 4270 	tnz a 
      00187B 27 12            [ 1] 4271 	jreq 9$ 
      00187D 5C               [ 1] 4272     incw x 
      00187E 90 5C            [ 1] 4273 	incw y 
      001880 20 F0            [ 2] 4274 	jra 1$
      001882                       4275 4$: ;no match 
      001882 4D               [ 1] 4276 	tnz a 
      001883 27 07            [ 1] 4277 	jreq 5$
      001885 5C               [ 1] 4278 	incw x 
      001886 92 AF 00 13      [ 5] 4279 	ldf a,([farptr],x)
      00188A 20 F6            [ 2] 4280 	jra 4$  
      00188C 5C               [ 1] 4281 5$:	incw x ; farptr[x] point at 'size' field 
      00188D 98               [ 1] 4282 	rcf 
      00188E 81               [ 4] 4283 	ret
      00188F                       4284 9$: ; match  
      00188F 5C               [ 1] 4285 	incw x  ; farptr[x] at 'size' field 
      001890 99               [ 1] 4286 	scf 
      001891 81               [ 4] 4287 	ret 
                                   4288 
                                   4289 ;-----------------------
                                   4290 ; search file in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4291 ; flash memory 
                                   4292 ; input:
                                   4293 ;   Y       file name  
                                   4294 ; output:
                                   4295 ;   farptr  addr at name|0
                                   4296 ;-----------------------
                           000001  4297 	FSIZE=1
                           000003  4298 	YSAVE=3
                           000004  4299 	VSIZE=4 
      001892                       4300 search_file: 
      001892                       4301 	_vars VSIZE
      001892 52 04            [ 2]    1     sub sp,#VSIZE 
      001894 17 03            [ 2] 4302 	ldw (YSAVE,sp),y  
      001896 5F               [ 1] 4303 	clrw x 
      001897 CF 00 14         [ 2] 4304 	ldw farptr+1,x 
      00189A 35 01 00 13      [ 1] 4305 	mov farptr,#1
      00189E                       4306 1$:	
                                   4307 ; check if farptr is after any file 
                                   4308 ; if  0 then so.
      00189E 92 BC 00 13      [ 5] 4309 	ldf a,[farptr]
      0018A2 27 24            [ 1] 4310 	jreq 6$
      0018A4 5F               [ 1] 4311 2$: clrw x 	
      0018A5 16 03            [ 2] 4312 	ldw y,(YSAVE,sp) 
      0018A7 CD 18 71         [ 4] 4313 	call cmp_name
      0018AA 25 2C            [ 1] 4314 	jrc 9$
      0018AC 92 AF 00 13      [ 5] 4315 	ldf a,([farptr],x)
      0018B0 6B 01            [ 1] 4316 	ld (FSIZE,sp),a 
      0018B2 5C               [ 1] 4317 	incw x 
      0018B3 92 AF 00 13      [ 5] 4318 	ldf a,([farptr],x)
      0018B7 6B 02            [ 1] 4319 	ld (FSIZE+1,sp),a 
      0018B9 5C               [ 1] 4320 	incw x 
      0018BA 72 FB 01         [ 2] 4321 	addw x,(FSIZE,sp) ; count to skip 
      0018BD CD 17 B2         [ 4] 4322 	call incr_farptr ; now at next file 'name_field'
      0018C0 AE 02 80         [ 2] 4323 	ldw x,#0x280
      0018C3 C3 00 13         [ 2] 4324 	cpw x,farptr 
      0018C6 2A D6            [ 1] 4325 	jrpl 1$
      0018C8                       4326 6$: ; file not found 
      0018C8 72 5F 00 13      [ 1] 4327 	clr farptr
      0018CC 72 5F 00 14      [ 1] 4328 	clr farptr+1 
      0018D0 72 5F 00 15      [ 1] 4329 	clr farptr+2 
      0018D4                       4330 	_drop VSIZE 
      0018D4 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018D6 98               [ 1] 4331 	rcf
      0018D7 81               [ 4] 4332 	ret
      0018D8                       4333 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      0018D8                       4334 	_drop VSIZE 
      0018D8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018DA 99               [ 1] 4335 	scf 	
      0018DB 81               [ 4] 4336 	ret
                                   4337 
                                   4338 ;--------------------------------
                                   4339 ; BASIC: SAVE "name" 
                                   4340 ; save text program in 
                                   4341 ; flash memory used as 
                                   4342 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018DC                       4343 save:
      0018DC 72 01 00 24 05   [ 2] 4344 	btjf flags,#FRUN,0$ 
      0018E1 A6 07            [ 1] 4345 	ld a,#ERR_CMD_ONLY 
      0018E3 CC 06 A3         [ 2] 4346 	jp tb_error
      0018E6                       4347 0$:	 
      0018E6 CE 00 1D         [ 2] 4348 	ldw x,txtend 
      0018E9 72 B0 00 1B      [ 2] 4349 	subw x,txtbgn
      0018ED 26 02            [ 1] 4350 	jrne 10$
                                   4351 ; nothing to save 
      0018EF 4F               [ 1] 4352 	clr a 
      0018F0 81               [ 4] 4353 	ret 
      0018F1                       4354 10$:	
      0018F1 C6 00 16         [ 1] 4355 	ld a,ffree 
      0018F4 CA 00 17         [ 1] 4356 	or a,ffree+1
      0018F7 CA 00 18         [ 1] 4357 	or a,ffree+2 
      0018FA 26 05            [ 1] 4358 	jrne 1$
      0018FC A6 01            [ 1] 4359 	ld a,#ERR_MEM_FULL
      0018FE CC 06 A3         [ 2] 4360 	jp tb_error 
      001901 CD 0C 7D         [ 4] 4361 1$: call get_token	
      001904 A1 06            [ 1] 4362 	cp a,#TK_QSTR
      001906 27 03            [ 1] 4363 	jreq 2$
      001908 CC 06 A1         [ 2] 4364 	jp syntax_error
      00190B                       4365 2$: ; check for existing file of that name 
      00190B 90 93            [ 1] 4366 	ldw y,x ; file name pointer 
      00190D CD 18 92         [ 4] 4367 	call search_file 
      001910 24 05            [ 1] 4368 	jrnc 3$ 
      001912 A6 08            [ 1] 4369 	ld a,#ERR_DUPLICATE 
      001914 CC 06 A3         [ 2] 4370 	jp tb_error 
      001917                       4371 3$:	;** write file name to flash **
      001917 CE 00 16         [ 2] 4372 	ldw x,ffree 
      00191A C6 00 18         [ 1] 4373 	ld a,ffree+2 
      00191D CF 00 13         [ 2] 4374 	ldw farptr,x 
      001920 C7 00 15         [ 1] 4375 	ld farptr+2,a 
      001923 AE 17 18         [ 2] 4376 	ldw x,#pad  
      001926 CD 02 F2         [ 4] 4377 	call strlen 
      001929 5C               [ 1] 4378 	incw  x
      00192A 89               [ 2] 4379 	pushw x 
      00192B 5F               [ 1] 4380 	clrw x   
      00192C 90 AE 17 18      [ 2] 4381 	ldw y,#pad 
      001930 CD 01 D1         [ 4] 4382 	call write_block  
      001933                       4383 	_drop 2 ; drop pushed X 
      001933 5B 02            [ 2]    1     addw sp,#2 
                                   4384 ;** write file length after name **
      001935 CE 00 1D         [ 2] 4385 	ldw x,txtend 
      001938 72 B0 00 1B      [ 2] 4386 	subw x,txtbgn
      00193C 89               [ 2] 4387 	pushw x ; file size 
      00193D 5F               [ 1] 4388 	clrw x 
      00193E 7B 01            [ 1] 4389 	ld a,(1,sp)
      001940 CD 01 5C         [ 4] 4390 	call write_byte 
      001943 5C               [ 1] 4391 	incw x 
      001944 7B 02            [ 1] 4392 	ld a,(2,sp)
      001946 CD 01 5C         [ 4] 4393 	call write_byte
      001949 5C               [ 1] 4394 	incw x  
      00194A CD 17 B2         [ 4] 4395 	call incr_farptr ; move farptr after SIZE field 
                                   4396 ;** write BASIC text **
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4397 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      00194D 1E 01            [ 2] 4398 	ldw x,(1,sp)
      00194F 89               [ 2] 4399 	pushw x 
      001950 5F               [ 1] 4400 	clrw x 
      001951 90 CE 00 1B      [ 2] 4401 	ldw y,txtbgn  ; BASIC text to save 
      001955 CD 01 D1         [ 4] 4402 	call write_block 
      001958                       4403 	_drop 2 ;  drop BSIZE argument
      001958 5B 02            [ 2]    1     addw sp,#2 
                                   4404 ; save farptr in ffree
      00195A CE 00 13         [ 2] 4405 	ldw x,farptr 
      00195D C6 00 15         [ 1] 4406 	ld a,farptr+2 
      001960 CF 00 16         [ 2] 4407 	ldw ffree,x 
      001963 C7 00 18         [ 1] 4408 	ld ffree+2,a
                                   4409 ; write 4 zero bytes as a safe gard 
      001966 5F               [ 1] 4410     clrw x 
      001967 4F               [ 1] 4411 	clr a 
      001968 CD 01 5C         [ 4] 4412 	call write_byte 
      00196B 5C               [ 1] 4413 	incw x 
      00196C 4F               [ 1] 4414 	clr a 
      00196D CD 01 5C         [ 4] 4415 	call write_byte
      001970 5C               [ 1] 4416 	incw x 
      001971 4F               [ 1] 4417 	clr a 
      001972 CD 01 5C         [ 4] 4418 	call write_byte
                                   4419 ; display saved size  
      001975 85               [ 2] 4420 	popw x ; first copy of BSIZE 
      001976 A6 0A            [ 1] 4421 	ld a,#TK_INTGR 
      001978 81               [ 4] 4422 	ret 
                                   4423 
                                   4424 
                                   4425 ;------------------------
                                   4426 ; BASIC: LOAD "file" 
                                   4427 ; load file to RAM 
                                   4428 ; for execution 
                                   4429 ;------------------------
      001979                       4430 load:
      001979 72 01 00 24 07   [ 2] 4431 	btjf flags,#FRUN,0$ 
      00197E 27 05            [ 1] 4432 	jreq 0$ 
      001980 A6 07            [ 1] 4433 	ld a,#ERR_CMD_ONLY 
      001982 CC 06 A3         [ 2] 4434 	jp tb_error 
      001985                       4435 0$:	
      001985 CD 0C 7D         [ 4] 4436 	call get_token 
      001988 A1 06            [ 1] 4437 	cp a,#TK_QSTR
      00198A 27 03            [ 1] 4438 	jreq 1$
      00198C CC 06 A1         [ 2] 4439 	jp syntax_error 
      00198F                       4440 1$:	
      00198F 90 93            [ 1] 4441 	ldw y,x 
      001991 CD 18 92         [ 4] 4442 	call search_file 
      001994 25 05            [ 1] 4443 	jrc 2$ 
      001996 A6 09            [ 1] 4444 	ld a,#ERR_NOT_FILE
      001998 CC 06 A3         [ 2] 4445 	jp tb_error  
      00199B                       4446 2$:	
      00199B CD 17 B2         [ 4] 4447 	call incr_farptr  
      00199E CD 05 7F         [ 4] 4448 	call clear_basic  
      0019A1 5F               [ 1] 4449 	clrw x
      0019A2 92 AF 00 13      [ 5] 4450 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0019A6 90 95            [ 1] 4451 	ld yh,a 
      0019A8 5C               [ 1] 4452 	incw x  
      0019A9 92 AF 00 13      [ 5] 4453 	ldf a,([farptr],x)
      0019AD 5C               [ 1] 4454 	incw x 
      0019AE 90 97            [ 1] 4455 	ld yl,a 
      0019B0 72 B9 00 1B      [ 2] 4456 	addw y,txtbgn
      0019B4 90 CF 00 1D      [ 2] 4457 	ldw txtend,y
      0019B8 90 CE 00 1B      [ 2] 4458 	ldw y,txtbgn
      0019BC                       4459 3$:	; load BASIC text 	
      0019BC 92 AF 00 13      [ 5] 4460 	ldf a,([farptr],x)
      0019C0 90 F7            [ 1] 4461 	ld (y),a 
      0019C2 5C               [ 1] 4462 	incw x 
      0019C3 90 5C            [ 1] 4463 	incw y 
      0019C5 90 C3 00 1D      [ 2] 4464 	cpw y,txtend 
      0019C9 2B F1            [ 1] 4465 	jrmi 3$
                                   4466 ; return loaded size 	 
      0019CB CE 00 1D         [ 2] 4467 	ldw x,txtend 
      0019CE 72 B0 00 1B      [ 2] 4468 	subw x,txtbgn
      0019D2 CD 09 05         [ 4] 4469 	call print_int 
      0019D5 81               [ 4] 4470 	ret 
                                   4471 
                                   4472 ;-----------------------------------
                                   4473 ; BASIC: FORGET ["file_name"] 
                                   4474 ; erase file_name and all others 
                                   4475 ; after it. 
                                   4476 ; without argument erase all files 
                                   4477 ;-----------------------------------
      0019D6                       4478 forget:
      0019D6 CD 0C 7D         [ 4] 4479 	call get_token 
      0019D9 A1 00            [ 1] 4480 	cp a,#TK_NONE 
      0019DB 27 1B            [ 1] 4481 	jreq 3$ 
      0019DD A1 06            [ 1] 4482 	cp a,#TK_QSTR
      0019DF 27 03            [ 1] 4483 	jreq 1$
      0019E1 CC 06 A1         [ 2] 4484 	jp syntax_error
      0019E4 90 93            [ 1] 4485 1$: ldw y,x
      0019E6 CD 18 92         [ 4] 4486 	call search_file
      0019E9 25 05            [ 1] 4487 	jrc 2$
      0019EB A6 09            [ 1] 4488 	ld a,#ERR_NOT_FILE 
      0019ED CC 06 A3         [ 2] 4489 	jp tb_error 
      0019F0                       4490 2$: 
      0019F0 CE 00 13         [ 2] 4491 	ldw x,farptr
      0019F3 C6 00 15         [ 1] 4492 	ld a,farptr+2
      0019F6 20 0B            [ 2] 4493 	jra 4$ 
      0019F8                       4494 3$: ; forget all files 
      0019F8 AE 00 00         [ 2] 4495 	ldw x,#fdrive
      0019FB 4F               [ 1] 4496 	clr a 
      0019FC 01               [ 1] 4497 	rrwa x 
      0019FD CF 00 13         [ 2] 4498 	ldw farptr,x 
      001A00 C7 00 15         [ 1] 4499 	ld farptr+2,a 
      001A03                       4500 4$:
      001A03 CF 00 16         [ 2] 4501 	ldw ffree,x 
      001A06 C7 00 18         [ 1] 4502 	ld ffree+2,a 
      001A09 5F               [ 1] 4503 5$:	clrw x 
      001A0A 4F               [ 1] 4504 	clr a  
      001A0B CD 01 5C         [ 4] 4505 	call write_byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001A0E AE 00 01         [ 2] 4506 	ldw x,#1 
      001A11 CD 17 B2         [ 4] 4507 	call incr_farptr
      001A14 C6 00 13         [ 1] 4508 	ld a,farptr
      001A17 C1 00 16         [ 1] 4509 	cp a,ffree 
      001A1A 2B ED            [ 1] 4510 	jrmi 5$ 
      001A1C CE 00 14         [ 2] 4511 	ldw x,farptr+1 
      001A1F C3 00 17         [ 2] 4512 	cpw x,ffree+1
      001A22 2B E5            [ 1] 4513 	jrmi 5$
      001A24 81               [ 4] 4514 	ret 
                                   4515 
                                   4516 ;----------------------
                                   4517 ; BASIC: DIR 
                                   4518 ; list saved files 
                                   4519 ;----------------------
                           000001  4520 	COUNT=1 ; files counter 
                           000002  4521 	VSIZE=2 
      001A25                       4522 directory:
      001A25                       4523 	_vars VSIZE 
      001A25 52 02            [ 2]    1     sub sp,#VSIZE 
      001A27 5F               [ 1] 4524 	clrw x 
      001A28 1F 01            [ 2] 4525 	ldw (COUNT,sp),x 
      001A2A CF 00 14         [ 2] 4526 	ldw farptr+1,x 
      001A2D 35 01 00 13      [ 1] 4527 	mov farptr,#1 
      001A31                       4528 dir_loop:
      001A31 5F               [ 1] 4529 	clrw x 
      001A32 92 AF 00 13      [ 5] 4530 	ldf a,([farptr],x)
      001A36 27 38            [ 1] 4531 	jreq 8$ 
      001A38                       4532 1$: ;name loop 	
      001A38 92 AF 00 13      [ 5] 4533 	ldf a,([farptr],x)
      001A3C 27 06            [ 1] 4534 	jreq 2$ 
      001A3E CD 02 1E         [ 4] 4535 	call putc 
      001A41 5C               [ 1] 4536 	incw x 
      001A42 20 F4            [ 2] 4537 	jra 1$
      001A44 5C               [ 1] 4538 2$: incw x ; skip ending 0. 
      001A45 A6 20            [ 1] 4539 	ld a,#SPACE 
      001A47 CD 02 1E         [ 4] 4540 	call putc 
                                   4541 ; get file size 	
      001A4A 92 AF 00 13      [ 5] 4542 	ldf a,([farptr],x)
      001A4E 90 95            [ 1] 4543 	ld yh,a 
      001A50 5C               [ 1] 4544 	incw x 
      001A51 92 AF 00 13      [ 5] 4545 	ldf a,([farptr],x)
      001A55 5C               [ 1] 4546 	incw x 
      001A56 90 97            [ 1] 4547 	ld yl,a 
      001A58 90 89            [ 2] 4548 	pushw y 
      001A5A 72 FB 01         [ 2] 4549 	addw x,(1,sp)
      001A5D CD 17 B2         [ 4] 4550 	call incr_farptr 
      001A60 85               [ 2] 4551 	popw x ; file size 
      001A61 CD 09 05         [ 4] 4552 	call print_int 
      001A64 A6 0D            [ 1] 4553 	ld a,#CR 
      001A66 CD 02 1E         [ 4] 4554 	call putc
      001A69 1E 01            [ 2] 4555 	ldw x,(COUNT,sp)
      001A6B 5C               [ 1] 4556 	incw x
      001A6C 1F 01            [ 2] 4557 	ldw (COUNT,sp),x  
      001A6E 20 C1            [ 2] 4558 	jra dir_loop 
      001A70                       4559 8$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A70 1E 01            [ 2] 4560 	ldw x,(COUNT,sp)
      001A72 CD 09 05         [ 4] 4561 	call print_int 
      001A75 AE 1A 7E         [ 2] 4562 	ldw x,#file_count 
      001A78 CD 02 30         [ 4] 4563 	call puts  
      001A7B                       4564 	_drop VSIZE 
      001A7B 5B 02            [ 2]    1     addw sp,#VSIZE 
      001A7D 81               [ 4] 4565 	ret
      001A7E 20 66 69 6C 65 73 0A  4566 file_count: .asciz " files\n"
             00
                                   4567 
                                   4568 ;---------------------
                                   4569 ; BASIC: WRITE expr1,expr2 
                                   4570 ; write byte to FLASH or EEPROM 
                                   4571 ; input:
                                   4572 ;   expr1  	is address 
                                   4573 ;   expr2   is byte to write
                                   4574 ; output:
                                   4575 ;   none 
                                   4576 ;---------------------
      001A86                       4577 write:
      001A86 72 5F 00 13      [ 1] 4578 	clr farptr ; expect 16 bits address 
      001A8A CD 11 49         [ 4] 4579 	call arg_list  
      001A8D A1 02            [ 1] 4580 	cp a,#2
      001A8F 27 03            [ 1] 4581 	jreq 1$
      001A91 CC 06 A1         [ 2] 4582 	jp syntax_error
      001A94                       4583 1$:
      001A94 CD 0F 3D         [ 4] 4584 	call dpop 
      001A97 9F               [ 1] 4585 	ld a,xl 
      001A98 CD 0F 3D         [ 4] 4586 	call dpop 
      001A9B CF 00 14         [ 2] 4587 	ldw farptr+1,x 
      001A9E 5F               [ 1] 4588 	clrw x 
      001A9F CD 01 5C         [ 4] 4589 	call write_byte 
      001AA2 81               [ 4] 4590 	ret 
                                   4591 
                                   4592 
                                   4593 ;---------------------
                                   4594 ;BASIC: CHAR(expr)
                                   4595 ; évaluate expression 
                                   4596 ; and take the 7 least 
                                   4597 ; bits as ASCII character
                                   4598 ;---------------------
      001AA3                       4599 char:
      001AA3 A6 04            [ 1] 4600 	ld a,#TK_LPAREN 
      001AA5 CD 11 3C         [ 4] 4601 	call expect 
      001AA8 CD 12 85         [ 4] 4602 	call relation 
      001AAB A1 0A            [ 1] 4603 	cp a,#TK_INTGR 
      001AAD 27 03            [ 1] 4604 	jreq 1$
      001AAF CC 06 A1         [ 2] 4605 	jp syntax_error
      001AB2 89               [ 2] 4606 1$:	pushw x 
      001AB3 A6 05            [ 1] 4607 	ld a,#TK_RPAREN 
      001AB5 CD 11 3C         [ 4] 4608 	call expect
      001AB8 85               [ 2] 4609 	popw x  
      001AB9 9F               [ 1] 4610 	ld a,xl 
      001ABA A4 7F            [ 1] 4611 	and a,#0x7f 
      001ABC 97               [ 1] 4612 	ld xl,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001ABD A6 0B            [ 1] 4613 	ld a,#TK_CHAR
      001ABF 81               [ 4] 4614 	ret
                                   4615 
                                   4616 ;---------------------
                                   4617 ; BASIC: ASC(string|char)
                                   4618 ; extract first character 
                                   4619 ; of string argument 
                                   4620 ; return it as TK_INTGR 
                                   4621 ;---------------------
      001AC0                       4622 ascii:
      001AC0 A6 04            [ 1] 4623 	ld a,#TK_LPAREN
      001AC2 CD 11 3C         [ 4] 4624 	call expect 
      001AC5 CD 0C 7D         [ 4] 4625 	call get_token 
      001AC8 A1 06            [ 1] 4626 	cp a,#TK_QSTR 
      001ACA 27 07            [ 1] 4627 	jreq 1$
      001ACC A1 0B            [ 1] 4628 	cp a,#TK_CHAR 
      001ACE 27 06            [ 1] 4629 	jreq 2$ 
      001AD0 CC 06 A1         [ 2] 4630 	jp syntax_error
      001AD3                       4631 1$: 
      001AD3 F6               [ 1] 4632 	ld a,(x)
      001AD4 20 01            [ 2] 4633 	jra 3$
      001AD6                       4634 2$: 
      001AD6 9F               [ 1] 4635 	ld a,xl 
      001AD7 97               [ 1] 4636 3$:	ld xl,a 
      001AD8 4F               [ 1] 4637 	clr a  
      001AD9 95               [ 1] 4638 	ld xh,a 
      001ADA 89               [ 2] 4639 	pushw x  
      001ADB A6 05            [ 1] 4640 	ld a,#TK_RPAREN 
      001ADD CD 11 3C         [ 4] 4641 	call expect 
      001AE0 85               [ 2] 4642 	popw x 
      001AE1 A6 0A            [ 1] 4643 	ld a,#TK_INTGR 
      001AE3 81               [ 4] 4644 	ret 
                                   4645 
                                   4646 ;---------------------
                                   4647 ;BASIC: KEY
                                   4648 ; wait for a character 
                                   4649 ; received from STDIN 
                                   4650 ; input:
                                   4651 ;	none 
                                   4652 ; output:
                                   4653 ;	X 		ASCII character 
                                   4654 ;---------------------
      001AE4                       4655 key:
      001AE4 CD 02 27         [ 4] 4656 	call getc 
      001AE7 5F               [ 1] 4657 	clrw x 
      001AE8 97               [ 1] 4658 	ld xl,a 
      001AE9 A6 0A            [ 1] 4659 	ld a,#TK_INTGR
      001AEB 81               [ 4] 4660 	ret
                                   4661 
                                   4662 ;----------------------
                                   4663 ; BASIC: QKEY
                                   4664 ; Return true if there 
                                   4665 ; is a character in 
                                   4666 ; waiting in STDIN 
                                   4667 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4668 ;  none 
                                   4669 ; output:
                                   4670 ;   X 		0|1 
                                   4671 ;-----------------------
      001AEC                       4672 qkey: 
      001AEC 5F               [ 1] 4673 	clrw x 
      001AED 72 0B 52 40 01   [ 2] 4674 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001AF2 5C               [ 1] 4675 	incw x 
      001AF3 A6 0A            [ 1] 4676 9$: ld a,#TK_INTGR
      001AF5 81               [ 4] 4677 	ret 
                                   4678 
                                   4679 ;---------------------
                                   4680 ; BASIC: GPIO(expr,reg)
                                   4681 ; return gpio address 
                                   4682 ; expr {0..8}
                                   4683 ; input:
                                   4684 ;   none 
                                   4685 ; output:
                                   4686 ;   X 		gpio register address
                                   4687 ;----------------------------
      001AF6                       4688 gpio:
      001AF6 A6 04            [ 1] 4689 	ld a,#TK_LPAREN 
      001AF8 CD 11 3C         [ 4] 4690 	call expect 
      001AFB CD 11 49         [ 4] 4691 	call arg_list
      001AFE A1 02            [ 1] 4692 	cp a,#2
      001B00 27 03            [ 1] 4693 	jreq 1$
      001B02 CC 06 A1         [ 2] 4694 	jp syntax_error  
      001B05                       4695 1$:	
      001B05 A6 05            [ 1] 4696 	ld a,#TK_RPAREN 
      001B07 CD 11 3C         [ 4] 4697 	call expect 
      001B0A AE 00 02         [ 2] 4698 	ldw x,#2
      001B0D 72 DE 00 19      [ 5] 4699 	ldw x,([dstkptr],x) ; port 
      001B11 2B 1E            [ 1] 4700 	jrmi bad_port
      001B13 A3 00 09         [ 2] 4701 	cpw x,#9
      001B16 2A 19            [ 1] 4702 	jrpl bad_port
      001B18 A6 05            [ 1] 4703 	ld a,#5
      001B1A 42               [ 4] 4704 	mul x,a
      001B1B 1C 50 00         [ 2] 4705 	addw x,#GPIO_BASE 
      001B1E 89               [ 2] 4706 	pushw x 
      001B1F CD 0F 3D         [ 4] 4707 	call dpop 
      001B22 72 FB 01         [ 2] 4708 	addw x,(1,sp)
      001B25 1F 01            [ 2] 4709 	ldw (1,sp),x  
      001B27 AE 00 02         [ 2] 4710 	ldw x,#2 
      001B2A CD 10 CD         [ 4] 4711 	call ddrop_n 
      001B2D 85               [ 2] 4712 	popw x 
      001B2E A6 0A            [ 1] 4713 	ld a,#TK_INTGR
      001B30 81               [ 4] 4714 	ret
      001B31                       4715 bad_port:
      001B31 A6 0A            [ 1] 4716 	ld a,#ERR_BAD_VALUE
      001B33 CC 06 A3         [ 2] 4717 	jp tb_error
                                   4718 
                                   4719 ;----------------------
                                   4720 ; BASIC: ODR 
                                   4721 ; return offset of gpio
                                   4722 ; ODR register: 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4723 ; ---------------------
      001B36                       4724 port_odr:
      001B36 AE 00 00         [ 2] 4725 	ldw x,#GPIO_ODR
      001B39 A6 0A            [ 1] 4726 	ld a,#TK_INTGR
      001B3B 81               [ 4] 4727 	ret
                                   4728 
                                   4729 ;----------------------
                                   4730 ; BASIC: IDR 
                                   4731 ; return offset of gpio
                                   4732 ; IDR register: 1
                                   4733 ; ---------------------
      001B3C                       4734 port_idr:
      001B3C AE 00 01         [ 2] 4735 	ldw x,#GPIO_IDR
      001B3F A6 0A            [ 1] 4736 	ld a,#TK_INTGR
      001B41 81               [ 4] 4737 	ret
                                   4738 
                                   4739 ;----------------------
                                   4740 ; BASIC: DDR 
                                   4741 ; return offset of gpio
                                   4742 ; DDR register: 2
                                   4743 ; ---------------------
      001B42                       4744 port_ddr:
      001B42 AE 00 02         [ 2] 4745 	ldw x,#GPIO_DDR
      001B45 A6 0A            [ 1] 4746 	ld a,#TK_INTGR
      001B47 81               [ 4] 4747 	ret
                                   4748 
                                   4749 ;----------------------
                                   4750 ; BASIC: CRL  
                                   4751 ; return offset of gpio
                                   4752 ; CR1 register: 3
                                   4753 ; ---------------------
      001B48                       4754 port_cr1:
      001B48 AE 00 03         [ 2] 4755 	ldw x,#GPIO_CR1
      001B4B A6 0A            [ 1] 4756 	ld a,#TK_INTGR
      001B4D 81               [ 4] 4757 	ret
                                   4758 
                                   4759 ;----------------------
                                   4760 ; BASIC: CRH  
                                   4761 ; return offset of gpio
                                   4762 ; CR2 register: 4
                                   4763 ; ---------------------
      001B4E                       4764 port_cr2:
      001B4E AE 00 04         [ 2] 4765 	ldw x,#GPIO_CR2
      001B51 A6 0A            [ 1] 4766 	ld a,#TK_INTGR
      001B53 81               [ 4] 4767 	ret
                                   4768 
                                   4769 
                                   4770 ;---------------------
                                   4771 ; BASIC: USR(addr[,arg])
                                   4772 ; execute a function written 
                                   4773 ; in binary code.
                                   4774 ; binary fonction should 
                                   4775 ; return token attribute in A 
                                   4776 ; and value in X. 
                                   4777 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4778 ;   addr	routine address 
                                   4779 ;   arg 	is an optional argument 
                                   4780 ; output:
                                   4781 ;   A 		token attribute 
                                   4782 ;   X       returned value 
                                   4783 ;---------------------
      001B54                       4784 usr:
      001B54 90 89            [ 2] 4785 	pushw y 	
      001B56 A6 04            [ 1] 4786 	ld a,#TK_LPAREN 
      001B58 CD 11 3C         [ 4] 4787 	call expect 
      001B5B CD 11 49         [ 4] 4788 	call arg_list 
      001B5E A1 01            [ 1] 4789 	cp a,#1 
      001B60 2A 03            [ 1] 4790 	jrpl 2$ 
      001B62 CC 06 A1         [ 2] 4791 	jp syntax_error 
      001B65 A6 05            [ 1] 4792 2$: ld a,#TK_RPAREN
      001B67 CD 11 3C         [ 4] 4793 	call expect 
      001B6A CD 0F 3D         [ 4] 4794 	call dpop 
      001B6D A1 02            [ 1] 4795 	cp a,#2 
      001B6F 2B 05            [ 1] 4796 	jrmi 4$
      001B71 90 93            [ 1] 4797 	ldw y,x ; y=arg 
      001B73 CD 0F 3D         [ 4] 4798 	call dpop ;x=addr 
      001B76 51               [ 1] 4799 4$:	exgw y,x ; y=addr,x=arg 
      001B77 90 FD            [ 4] 4800 	call (y)
      001B79 90 85            [ 2] 4801 	popw y 
      001B7B 81               [ 4] 4802 	ret 
                                   4803 
                                   4804 ;------------------------------
                                   4805 ; BASIC: BYE 
                                   4806 ; halt mcu in its lowest power mode 
                                   4807 ; wait for reset or external interrupt
                                   4808 ; do a cold start on wakeup.
                                   4809 ;------------------------------
      001B7C                       4810 bye:
      001B7C 72 0D 52 40 FB   [ 2] 4811 	btjf UART3_SR,#UART_SR_TC,.
      001B81 8E               [10] 4812 	halt
      001B82 CC 04 E4         [ 2] 4813 	jp cold_start  
                                   4814 
                                   4815 ;----------------------------------
                                   4816 ; BASIC: SLEEP 
                                   4817 ; halt mcu until reset or external
                                   4818 ; interrupt.
                                   4819 ; Resume progam after SLEEP command
                                   4820 ;----------------------------------
      001B85                       4821 sleep:
      001B85 72 0D 52 40 FB   [ 2] 4822 	btjf UART3_SR,#UART_SR_TC,.
      001B8A 72 16 00 24      [ 1] 4823 	bset flags,#FSLEEP
      001B8E 8E               [10] 4824 	halt 
      001B8F 81               [ 4] 4825 	ret 
                                   4826 
                                   4827 ;-------------------------------
                                   4828 ; BASIC: PAUSE expr 
                                   4829 ; suspend execution for n msec.
                                   4830 ; input:
                                   4831 ;	none
                                   4832 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4833 ;	none 
                                   4834 ;------------------------------
      001B90                       4835 pause:
      001B90 CD 12 41         [ 4] 4836 	call expression
      001B93 A1 0A            [ 1] 4837 	cp a,#TK_INTGR
      001B95 27 03            [ 1] 4838 	jreq pause02 
      001B97 CC 06 A1         [ 2] 4839 	jp syntax_error
      001B9A                       4840 pause02: 
      001B9A 5D               [ 2] 4841 1$: tnzw x 
      001B9B 27 04            [ 1] 4842 	jreq 2$
      001B9D 8F               [10] 4843 	wfi 
      001B9E 5A               [ 2] 4844 	decw x 
      001B9F 26 F9            [ 1] 4845 	jrne 1$
      001BA1 4F               [ 1] 4846 2$:	clr a 
      001BA2 81               [ 4] 4847 	ret 
                                   4848 
                                   4849 ;------------------------------
                                   4850 ; BASIC: TICKS
                                   4851 ; return msec ticks counter value 
                                   4852 ; input:
                                   4853 ; 	none 
                                   4854 ; output:
                                   4855 ;	X 		TK_INTGR
                                   4856 ;-------------------------------
      001BA3                       4857 get_ticks:
      001BA3 CE 00 0B         [ 2] 4858 	ldw x,ticks 
      001BA6 A6 0A            [ 1] 4859 	ld a,#TK_INTGR
      001BA8 81               [ 4] 4860 	ret 
                                   4861 
                                   4862 
                                   4863 
                                   4864 ;------------------------------
                                   4865 ; BASIC: ABS(expr)
                                   4866 ; return absolute value of expr.
                                   4867 ; input:
                                   4868 ;   none
                                   4869 ; output:
                                   4870 ;   X     	positive integer
                                   4871 ;-------------------------------
      001BA9                       4872 abs:
      001BA9 A6 04            [ 1] 4873 	ld a,#TK_LPAREN
      001BAB CD 11 3C         [ 4] 4874 	call expect 
      001BAE CD 11 49         [ 4] 4875 	call arg_list
      001BB1 A1 01            [ 1] 4876 	cp a,#1 
      001BB3 27 03            [ 1] 4877 	jreq 0$ 
      001BB5 CC 06 A1         [ 2] 4878 	jp syntax_error
      001BB8                       4879 0$:  
      001BB8 A6 05            [ 1] 4880 	ld a,#TK_RPAREN 
      001BBA CD 11 3C         [ 4] 4881 	call expect 
      001BBD CD 0F 3D         [ 4] 4882     call dpop   
      001BC0 9E               [ 1] 4883 	ld a,xh 
      001BC1 A5 80            [ 1] 4884 	bcp a,#0x80 
      001BC3 27 01            [ 1] 4885 	jreq 2$ 
      001BC5 50               [ 2] 4886 	negw x 
      001BC6 A6 0A            [ 1] 4887 2$: ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001BC8 81               [ 4] 4888 	ret 
                                   4889 
                                   4890 ;------------------------------
                                   4891 ; BASIC: RND(expr)
                                   4892 ; return random number 
                                   4893 ; between 1 and expr inclusive
                                   4894 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4895 ; input:
                                   4896 ; 	none 
                                   4897 ; output:
                                   4898 ;	X 		random positive integer 
                                   4899 ;------------------------------
      001BC9                       4900 random:
      001BC9 A6 04            [ 1] 4901 	ld a,#TK_LPAREN 
      001BCB CD 11 3C         [ 4] 4902 	call expect 
      001BCE CD 11 49         [ 4] 4903 	call arg_list 
      001BD1 A1 01            [ 1] 4904 	cp a,#1
      001BD3 27 03            [ 1] 4905 	jreq 1$
      001BD5 CC 06 A1         [ 2] 4906 	jp syntax_error
      001BD8 A6 05            [ 1] 4907 1$: ld a,#TK_RPAREN
      001BDA CD 11 3C         [ 4] 4908 	call expect 
      001BDD CD 0F 3D         [ 4] 4909 	call dpop 
      001BE0 89               [ 2] 4910 	pushw x 
      001BE1 9E               [ 1] 4911 	ld a,xh 
      001BE2 A5 80            [ 1] 4912 	bcp a,#0x80 
      001BE4 27 05            [ 1] 4913 	jreq 2$
      001BE6 A6 0A            [ 1] 4914 	ld a,#ERR_BAD_VALUE
      001BE8 CC 06 A3         [ 2] 4915 	jp tb_error
      001BEB                       4916 2$: 
                                   4917 ; acc16=(x<<5)^x 
      001BEB CE 00 0D         [ 2] 4918 	ldw x,seedx 
      001BEE 58               [ 2] 4919 	sllw x 
      001BEF 58               [ 2] 4920 	sllw x 
      001BF0 58               [ 2] 4921 	sllw x 
      001BF1 58               [ 2] 4922 	sllw x 
      001BF2 58               [ 2] 4923 	sllw x 
      001BF3 9E               [ 1] 4924 	ld a,xh 
      001BF4 C8 00 0D         [ 1] 4925 	xor a,seedx 
      001BF7 C7 00 09         [ 1] 4926 	ld acc16,a 
      001BFA 9F               [ 1] 4927 	ld a,xl 
      001BFB C8 00 0E         [ 1] 4928 	xor a,seedx+1 
      001BFE C7 00 0A         [ 1] 4929 	ld acc8,a 
                                   4930 ; seedx=seedy 
      001C01 CE 00 0F         [ 2] 4931 	ldw x,seedy 
      001C04 CF 00 0D         [ 2] 4932 	ldw seedx,x  
                                   4933 ; seedy=seedy^(seedy>>1)
      001C07 90 54            [ 2] 4934 	srlw y 
      001C09 90 9E            [ 1] 4935 	ld a,yh 
      001C0B C8 00 0F         [ 1] 4936 	xor a,seedy 
      001C0E C7 00 0F         [ 1] 4937 	ld seedy,a  
      001C11 90 9F            [ 1] 4938 	ld a,yl 
      001C13 C8 00 10         [ 1] 4939 	xor a,seedy+1 
      001C16 C7 00 10         [ 1] 4940 	ld seedy+1,a 
                                   4941 ; acc16>>3 
      001C19 CE 00 09         [ 2] 4942 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001C1C 54               [ 2] 4943 	srlw x 
      001C1D 54               [ 2] 4944 	srlw x 
      001C1E 54               [ 2] 4945 	srlw x 
                                   4946 ; x=acc16^x 
      001C1F 9E               [ 1] 4947 	ld a,xh 
      001C20 C8 00 09         [ 1] 4948 	xor a,acc16 
      001C23 95               [ 1] 4949 	ld xh,a 
      001C24 9F               [ 1] 4950 	ld a,xl 
      001C25 C8 00 0A         [ 1] 4951 	xor a,acc8 
      001C28 97               [ 1] 4952 	ld xl,a 
                                   4953 ; seedy=x^seedy 
      001C29 C8 00 10         [ 1] 4954 	xor a,seedy+1
      001C2C 97               [ 1] 4955 	ld xl,a 
      001C2D 9E               [ 1] 4956 	ld a,xh 
      001C2E C8 00 0F         [ 1] 4957 	xor a,seedy
      001C31 95               [ 1] 4958 	ld xh,a 
      001C32 CF 00 0F         [ 2] 4959 	ldw seedy,x 
                                   4960 ; return seedy modulo expr + 1 
      001C35 90 85            [ 2] 4961 	popw y 
      001C37 65               [ 2] 4962 	divw x,y 
      001C38 93               [ 1] 4963 	ldw x,y 
      001C39 5C               [ 1] 4964 	incw x 
      001C3A A6 0A            [ 1] 4965 	ld a,#TK_INTGR
      001C3C 81               [ 4] 4966 	ret 
                                   4967 
                                   4968 ;*********************************
                                   4969 
                                   4970 ;------------------------------
                                   4971 ;      dictionary 
                                   4972 ; format:
                                   4973 ;   link   2 bytes 
                                   4974 ;   cmd_name 8 byte max 
                                   4975 ;   code_address 2 bytes 
                                   4976 ;------------------------------
                           000080  4977 	FFUNC=128 
                                   4978 	.macro _dict_entry len,name,cmd 
                                   4979 	.word LINK 
                                   4980 	LINK=.
                                   4981 name:
                                   4982 	.byte len 	
                                   4983 	.ascii "name"
                                   4984 	.word cmd 
                                   4985 	.endm 
                                   4986 
                           000000  4987 	LINK=0
      001C3D                       4988 kword_end:
      001C3D                       4989 	_dict_entry,3,BYE,bye 
      001C3D 00 00                    1 	.word LINK 
                           001C3F     2 	LINK=.
      001C3F                          3 BYE:
      001C3F 03                       4 	.byte 3 	
      001C40 42 59 45                 5 	.ascii "BYE"
      001C43 1B 7C                    6 	.word bye 
      001C45                       4990 	_dict_entry,5,SLEEP,sleep 
      001C45 1C 3F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                           001C47     2 	LINK=.
      001C47                          3 SLEEP:
      001C47 05                       4 	.byte 5 	
      001C48 53 4C 45 45 50           5 	.ascii "SLEEP"
      001C4D 1B 85                    6 	.word sleep 
      001C4F                       4991 	_dict_entry,6,FORGET,forget 
      001C4F 1C 47                    1 	.word LINK 
                           001C51     2 	LINK=.
      001C51                          3 FORGET:
      001C51 06                       4 	.byte 6 	
      001C52 46 4F 52 47 45 54        5 	.ascii "FORGET"
      001C58 19 D6                    6 	.word forget 
      001C5A                       4992 	_dict_entry,3,DIR,directory 
      001C5A 1C 51                    1 	.word LINK 
                           001C5C     2 	LINK=.
      001C5C                          3 DIR:
      001C5C 03                       4 	.byte 3 	
      001C5D 44 49 52                 5 	.ascii "DIR"
      001C60 1A 25                    6 	.word directory 
      001C62                       4993 	_dict_entry,4,LOAD,load 
      001C62 1C 5C                    1 	.word LINK 
                           001C64     2 	LINK=.
      001C64                          3 LOAD:
      001C64 04                       4 	.byte 4 	
      001C65 4C 4F 41 44              5 	.ascii "LOAD"
      001C69 19 79                    6 	.word load 
      001C6B                       4994 	_dict_entry,4,SAVE,save
      001C6B 1C 64                    1 	.word LINK 
                           001C6D     2 	LINK=.
      001C6D                          3 SAVE:
      001C6D 04                       4 	.byte 4 	
      001C6E 53 41 56 45              5 	.ascii "SAVE"
      001C72 18 DC                    6 	.word save 
      001C74                       4995 	_dict_entry,5,WRITE,write  
      001C74 1C 6D                    1 	.word LINK 
                           001C76     2 	LINK=.
      001C76                          3 WRITE:
      001C76 05                       4 	.byte 5 	
      001C77 57 52 49 54 45           5 	.ascii "WRITE"
      001C7C 1A 86                    6 	.word write 
      001C7E                       4996 	_dict_entry,3,NEW,new
      001C7E 1C 76                    1 	.word LINK 
                           001C80     2 	LINK=.
      001C80                          3 NEW:
      001C80 03                       4 	.byte 3 	
      001C81 4E 45 57                 5 	.ascii "NEW"
      001C84 17 A7                    6 	.word new 
      001C86                       4997 	_dict_entry,5,BREAK,break 
      001C86 1C 80                    1 	.word LINK 
                           001C88     2 	LINK=.
      001C88                          3 BREAK:
      001C88 05                       4 	.byte 5 	
      001C89 42 52 45 41 4B           5 	.ascii "BREAK"
      001C8E 17 58                    6 	.word break 
      001C90                       4998 	_dict_entry,4,STOP,stop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001C90 1C 88                    1 	.word LINK 
                           001C92     2 	LINK=.
      001C92                          3 STOP:
      001C92 04                       4 	.byte 4 	
      001C93 53 54 4F 50              5 	.ascii "STOP"
      001C97 17 49                    6 	.word stop 
      001C99                       4999     _dict_entry,4,SHOW,show 
      001C99 1C 92                    1 	.word LINK 
                           001C9B     2 	LINK=.
      001C9B                          3 SHOW:
      001C9B 04                       4 	.byte 4 	
      001C9C 53 48 4F 57              5 	.ascii "SHOW"
      001CA0 10 12                    6 	.word show 
      001CA2                       5000 	_dict_entry 3,RUN,run
      001CA2 1C 9B                    1 	.word LINK 
                           001CA4     2 	LINK=.
      001CA4                          3 RUN:
      001CA4 03                       4 	.byte 3 	
      001CA5 52 55 4E                 5 	.ascii "RUN"
      001CA8 17 00                    6 	.word run 
      001CAA                       5001 	_dict_entry 4,LIST,list
      001CAA 1C A4                    1 	.word LINK 
                           001CAC     2 	LINK=.
      001CAC                          3 LIST:
      001CAC 04                       4 	.byte 4 	
      001CAD 4C 49 53 54              5 	.ascii "LIST"
      001CB1 13 26                    6 	.word list 
      001CB3                       5002 	_dict_entry,3+FFUNC,USR,usr
      001CB3 1C AC                    1 	.word LINK 
                           001CB5     2 	LINK=.
      001CB5                          3 USR:
      001CB5 83                       4 	.byte 3+FFUNC 	
      001CB6 55 53 52                 5 	.ascii "USR"
      001CB9 1B 54                    6 	.word usr 
      001CBB                       5003 	_dict_entry,3+FFUNC,ODR,port_odr
      001CBB 1C B5                    1 	.word LINK 
                           001CBD     2 	LINK=.
      001CBD                          3 ODR:
      001CBD 83                       4 	.byte 3+FFUNC 	
      001CBE 4F 44 52                 5 	.ascii "ODR"
      001CC1 1B 36                    6 	.word port_odr 
      001CC3                       5004 	_dict_entry,3+FFUNC,IDR,port_idr
      001CC3 1C BD                    1 	.word LINK 
                           001CC5     2 	LINK=.
      001CC5                          3 IDR:
      001CC5 83                       4 	.byte 3+FFUNC 	
      001CC6 49 44 52                 5 	.ascii "IDR"
      001CC9 1B 3C                    6 	.word port_idr 
      001CCB                       5005 	_dict_entry,3+FFUNC,DDR,port_ddr 
      001CCB 1C C5                    1 	.word LINK 
                           001CCD     2 	LINK=.
      001CCD                          3 DDR:
      001CCD 83                       4 	.byte 3+FFUNC 	
      001CCE 44 44 52                 5 	.ascii "DDR"
      001CD1 1B 42                    6 	.word port_ddr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001CD3                       5006 	_dict_entry,3+FFUNC,CRL,port_cr1 
      001CD3 1C CD                    1 	.word LINK 
                           001CD5     2 	LINK=.
      001CD5                          3 CRL:
      001CD5 83                       4 	.byte 3+FFUNC 	
      001CD6 43 52 4C                 5 	.ascii "CRL"
      001CD9 1B 48                    6 	.word port_cr1 
      001CDB                       5007 	_dict_entry,3+FFUNC,CRH,port_cr2
      001CDB 1C D5                    1 	.word LINK 
                           001CDD     2 	LINK=.
      001CDD                          3 CRH:
      001CDD 83                       4 	.byte 3+FFUNC 	
      001CDE 43 52 48                 5 	.ascii "CRH"
      001CE1 1B 4E                    6 	.word port_cr2 
      001CE3                       5008 	_dict_entry,4+FFUNC,GPIO,gpio 
      001CE3 1C DD                    1 	.word LINK 
                           001CE5     2 	LINK=.
      001CE5                          3 GPIO:
      001CE5 84                       4 	.byte 4+FFUNC 	
      001CE6 47 50 49 4F              5 	.ascii "GPIO"
      001CEA 1A F6                    6 	.word gpio 
      001CEC                       5009 	_dict_entry,3+FFUNC,ASC,ascii  
      001CEC 1C E5                    1 	.word LINK 
                           001CEE     2 	LINK=.
      001CEE                          3 ASC:
      001CEE 83                       4 	.byte 3+FFUNC 	
      001CEF 41 53 43                 5 	.ascii "ASC"
      001CF2 1A C0                    6 	.word ascii 
      001CF4                       5010 	_dict_entry,4+FFUNC,CHAR,char
      001CF4 1C EE                    1 	.word LINK 
                           001CF6     2 	LINK=.
      001CF6                          3 CHAR:
      001CF6 84                       4 	.byte 4+FFUNC 	
      001CF7 43 48 41 52              5 	.ascii "CHAR"
      001CFB 1A A3                    6 	.word char 
      001CFD                       5011 	_dict_entry,4+FFUNC,QKEY,qkey  
      001CFD 1C F6                    1 	.word LINK 
                           001CFF     2 	LINK=.
      001CFF                          3 QKEY:
      001CFF 84                       4 	.byte 4+FFUNC 	
      001D00 51 4B 45 59              5 	.ascii "QKEY"
      001D04 1A EC                    6 	.word qkey 
      001D06                       5012 	_dict_entry,3+FFUNC,KEY,key 
      001D06 1C FF                    1 	.word LINK 
                           001D08     2 	LINK=.
      001D08                          3 KEY:
      001D08 83                       4 	.byte 3+FFUNC 	
      001D09 4B 45 59                 5 	.ascii "KEY"
      001D0C 1A E4                    6 	.word key 
      001D0E                       5013 	_dict_entry,4+FFUNC,SIZE,size
      001D0E 1D 08                    1 	.word LINK 
                           001D10     2 	LINK=.
      001D10                          3 SIZE:
      001D10 84                       4 	.byte 4+FFUNC 	
      001D11 53 49 5A 45              5 	.ascii "SIZE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D15 12 E6                    6 	.word size 
      001D17                       5014 	_dict_entry,3,HEX,hex_base
      001D17 1D 10                    1 	.word LINK 
                           001D19     2 	LINK=.
      001D19                          3 HEX:
      001D19 03                       4 	.byte 3 	
      001D1A 48 45 58                 5 	.ascii "HEX"
      001D1D 12 DC                    6 	.word hex_base 
      001D1F                       5015 	_dict_entry,3,DEC,dec_base
      001D1F 1D 19                    1 	.word LINK 
                           001D21     2 	LINK=.
      001D21                          3 DEC:
      001D21 03                       4 	.byte 3 	
      001D22 44 45 43                 5 	.ascii "DEC"
      001D25 12 E1                    6 	.word dec_base 
      001D27                       5016 	_dict_entry,5+FFUNC,TICKS,get_ticks
      001D27 1D 21                    1 	.word LINK 
                           001D29     2 	LINK=.
      001D29                          3 TICKS:
      001D29 85                       4 	.byte 5+FFUNC 	
      001D2A 54 49 43 4B 53           5 	.ascii "TICKS"
      001D2F 1B A3                    6 	.word get_ticks 
      001D31                       5017 	_dict_entry,3+FFUNC,ABS,abs
      001D31 1D 29                    1 	.word LINK 
                           001D33     2 	LINK=.
      001D33                          3 ABS:
      001D33 83                       4 	.byte 3+FFUNC 	
      001D34 41 42 53                 5 	.ascii "ABS"
      001D37 1B A9                    6 	.word abs 
      001D39                       5018 	_dict_entry,3+FFUNC,RND,random 
      001D39 1D 33                    1 	.word LINK 
                           001D3B     2 	LINK=.
      001D3B                          3 RND:
      001D3B 83                       4 	.byte 3+FFUNC 	
      001D3C 52 4E 44                 5 	.ascii "RND"
      001D3F 1B C9                    6 	.word random 
      001D41                       5019 	_dict_entry,5,PAUSE,pause 
      001D41 1D 3B                    1 	.word LINK 
                           001D43     2 	LINK=.
      001D43                          3 PAUSE:
      001D43 05                       4 	.byte 5 	
      001D44 50 41 55 53 45           5 	.ascii "PAUSE"
      001D49 1B 90                    6 	.word pause 
      001D4B                       5020 	_dict_entry,4,BSET,bit_set 
      001D4B 1D 43                    1 	.word LINK 
                           001D4D     2 	LINK=.
      001D4D                          3 BSET:
      001D4D 04                       4 	.byte 4 	
      001D4E 42 53 45 54              5 	.ascii "BSET"
      001D52 15 0C                    6 	.word bit_set 
      001D54                       5021 	_dict_entry,4,BRES,bit_reset
      001D54 1D 4D                    1 	.word LINK 
                           001D56     2 	LINK=.
      001D56                          3 BRES:
      001D56 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D57 42 52 45 53              5 	.ascii "BRES"
      001D5B 15 20                    6 	.word bit_reset 
      001D5D                       5022 	_dict_entry,5,BTOGL,bit_toggle
      001D5D 1D 56                    1 	.word LINK 
                           001D5F     2 	LINK=.
      001D5F                          3 BTOGL:
      001D5F 05                       4 	.byte 5 	
      001D60 42 54 4F 47 4C           5 	.ascii "BTOGL"
      001D65 15 35                    6 	.word bit_toggle 
      001D67                       5023 	_dict_entry 4,WAIT,wait 
      001D67 1D 5F                    1 	.word LINK 
                           001D69     2 	LINK=.
      001D69                          3 WAIT:
      001D69 04                       4 	.byte 4 	
      001D6A 57 41 49 54              5 	.ascii "WAIT"
      001D6E 14 E1                    6 	.word wait 
      001D70                       5024 	_dict_entry 6,REMARK,rem 
      001D70 1D 69                    1 	.word LINK 
                           001D72     2 	LINK=.
      001D72                          3 REMARK:
      001D72 06                       4 	.byte 6 	
      001D73 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001D79 14 E0                    6 	.word rem 
      001D7B                       5025 	_dict_entry 5,PRINT,print 
      001D7B 1D 72                    1 	.word LINK 
                           001D7D     2 	LINK=.
      001D7D                          3 PRINT:
      001D7D 05                       4 	.byte 5 	
      001D7E 50 52 49 4E 54           5 	.ascii "PRINT"
      001D83 13 DB                    6 	.word print 
      001D85                       5026 	_dict_entry,2,IF,if 
      001D85 1D 7D                    1 	.word LINK 
                           001D87     2 	LINK=.
      001D87                          3 IF:
      001D87 02                       4 	.byte 2 	
      001D88 49 46                    5 	.ascii "IF"
      001D8A 15 79                    6 	.word if 
      001D8C                       5027 	_dict_entry,5,GOSUB,gosub 
      001D8C 1D 87                    1 	.word LINK 
                           001D8E     2 	LINK=.
      001D8E                          3 GOSUB:
      001D8E 05                       4 	.byte 5 	
      001D8F 47 4F 53 55 42           5 	.ascii "GOSUB"
      001D94 16 91                    6 	.word gosub 
      001D96                       5028 	_dict_entry,4,GOTO,goto 
      001D96 1D 8E                    1 	.word LINK 
                           001D98     2 	LINK=.
      001D98                          3 GOTO:
      001D98 04                       4 	.byte 4 	
      001D99 47 4F 54 4F              5 	.ascii "GOTO"
      001D9D 16 84                    6 	.word goto 
      001D9F                       5029 	_dict_entry,3,FOR,for 
      001D9F 1D 98                    1 	.word LINK 
                           001DA1     2 	LINK=.
      001DA1                          3 FOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001DA1 03                       4 	.byte 3 	
      001DA2 46 4F 52                 5 	.ascii "FOR"
      001DA5 15 8D                    6 	.word for 
      001DA7                       5030 	_dict_entry,2,TO,to
      001DA7 1D A1                    1 	.word LINK 
                           001DA9     2 	LINK=.
      001DA9                          3 TO:
      001DA9 02                       4 	.byte 2 	
      001DAA 54 4F                    5 	.ascii "TO"
      001DAC 15 B7                    6 	.word to 
      001DAE                       5031 	_dict_entry,4,STEP,step 
      001DAE 1D A9                    1 	.word LINK 
                           001DB0     2 	LINK=.
      001DB0                          3 STEP:
      001DB0 04                       4 	.byte 4 	
      001DB1 53 54 45 50              5 	.ascii "STEP"
      001DB5 15 E7                    6 	.word step 
      001DB7                       5032 	_dict_entry,4,NEXT,next 
      001DB7 1D B0                    1 	.word LINK 
                           001DB9     2 	LINK=.
      001DB9                          3 NEXT:
      001DB9 04                       4 	.byte 4 	
      001DBA 4E 45 58 54              5 	.ascii "NEXT"
      001DBE 16 0F                    6 	.word next 
      001DC0                       5033 	_dict_entry,6+FFUNC,UBOUND,ubound 
      001DC0 1D B9                    1 	.word LINK 
                           001DC2     2 	LINK=.
      001DC2                          3 UBOUND:
      001DC2 86                       4 	.byte 6+FFUNC 	
      001DC3 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001DC9 12 F0                    6 	.word ubound 
      001DCB                       5034 	_dict_entry,6,RETURN,return 
      001DCB 1D C2                    1 	.word LINK 
                           001DCD     2 	LINK=.
      001DCD                          3 RETURN:
      001DCD 06                       4 	.byte 6 	
      001DCE 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001DD4 16 DC                    6 	.word return 
      001DD6                       5035 	_dict_entry,4+FFUNC,PEEK,peek 
      001DD6 1D CD                    1 	.word LINK 
                           001DD8     2 	LINK=.
      001DD8                          3 PEEK:
      001DD8 84                       4 	.byte 4+FFUNC 	
      001DD9 50 45 45 4B              5 	.ascii "PEEK"
      001DDD 15 5C                    6 	.word peek 
      001DDF                       5036 	_dict_entry,4,POKE,poke 
      001DDF 1D D8                    1 	.word LINK 
                           001DE1     2 	LINK=.
      001DE1                          3 POKE:
      001DE1 04                       4 	.byte 4 	
      001DE2 50 4F 4B 45              5 	.ascii "POKE"
      001DE6 15 49                    6 	.word poke 
      001DE8                       5037 	_dict_entry,5,INPUT,input_var  
      001DE8 1D E1                    1 	.word LINK 
                           001DEA     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001DEA                          3 INPUT:
      001DEA 05                       4 	.byte 5 	
      001DEB 49 4E 50 55 54           5 	.ascii "INPUT"
      001DF0 14 6C                    6 	.word input_var 
      001DF2                       5038 kword_dict:
      001DF2                       5039 	_dict_entry 3,LET,let 
      001DF2 1D EA                    1 	.word LINK 
                           001DF4     2 	LINK=.
      001DF4                          3 LET:
      001DF4 03                       4 	.byte 3 	
      001DF5 4C 45 54                 5 	.ascii "LET"
      001DF8 12 FE                    6 	.word let 
                                   5040 	
                                   5041 
      001E00                       5042 	.bndry 128 ; align on FLASH block.
                                   5043 ; free space for user application  
      001E00                       5044 user_space:
      001E00 89               [ 2] 5045 	pushw x 
      001E01 72 1A 50 0A      [ 1] 5046 	bset PC_ODR,#5 
      001E05 85               [ 2] 5047 	popw x 
      001E06 CD 1B 9A         [ 4] 5048 	call pause02 
      001E09 72 1B 50 0A      [ 1] 5049 	bres PC_ODR,#5 
      001E0D 81               [ 4] 5050 	ret
                                   5051 
                                   5052 	.area FLASH_DRIVE (ABS)
      010000                       5053 	.org 0x10000
      010000                       5054 fdrive:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        001D33 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000003     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        001CEE R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  000005     |   5 BREAK      001C88 R   |   5 BRES       001D56 R
  5 BSET       001D4D R   |     BSIZE   =  000005     |     BSP     =  000008 
  5 BTOGL      001D5F R   |     BTW     =  000001     |   5 BYE        001C3F R
    C       =  000001     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       001CF6 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CNT     =  000008     |     COMMA   =  000001 
    COUNT   =  000001     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   5 CRH        001CDD R   |   5 CRL        001CD5 R
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000006 
    CURR    =  000002     |     CX_BPTR =  000001     |     CX_CNT  =  000005 
    CX_IN   =  000004     |     CX_LNO  =  000003     |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
  5 DDR        001CCD R   |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   5 DEC        001D21 R   |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   5 DIR        001C5C R
    DIVIDND =  000007     |     DIVISR  =  000005     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |     DSTACK_S=  000040     |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_L=  000005 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FF      =  00000C     |     FFOR    =  000002     |     FFUNC   =  000080 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   5 FOR        001DA1 R   |   5 FORGET     001C51 R
    FRUN    =  000000     |     FSIZE   =  000001     |     FSLEEP  =  000003 
    FTRAP   =  000001     |   5 GOSUB      001D8E R   |     GOS_RET =  000003 
  5 GOTO       001D98 R   |   5 GPIO       001CE5 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  5 HEX        001D19 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        001CC5 R
  5 IF         001D87 R   |     IN      =  000007     |     INCR    =  000001 
  5 INPUT      001DEA R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  000003     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]

Symbol Table

    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        001D08 R   |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000005     |   5 LET        001DF4 R   |     LINENO  =  000005 
  5 LINK    =  001DF4 R   |   5 LIST       001CAC R   |     LL      =  000002 
    LLEN    =  000007     |     LL_HB   =  000001     |     LNO     =  000005 
    LN_PTR  =  000005     |   5 LOAD       001C64 R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NCLKOPT =  004808 
    NEG     =  000001     |   5 NEW        001C80 R   |   5 NEXT       001DB9 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NL      =  00000A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000009 R   |   5 ODR        001CBD R   |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     PA      =  000000     |     PAD_SIZE=  000028 
  5 PAUSE      001D43 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   5 PEEK       001DD8 R
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   5 POKE       001DE1 R   |     PREV    =  000001 
  5 PRINT      001D7D R   |     PROD    =  000002     |     PSIZE   =  000001 
  5 QKEY       001CFF R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 REG_A      0008A2 R   |   5 REG_CC     0008A6 R
  5 REG_EPC    000895 R   |   5 REG_SP     0008AB R   |   5 REG_X      00089E R
  5 REG_Y      00089A R   |     RELOP   =  000005     |   5 REMARK     001D72 R
    RETL1   =  000001     |   5 RETURN     001DCD R   |   5 RND        001D3B R
    ROP     =  004800     |     RST_SR  =  0050B3     |   5 RUN        001CA4 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       001C6D R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       001C9B R   |     SIGN    =  000001 
  5 SIZE       001D10 R   |     SKIP    =  000006     |   5 SLEEP      001C47 R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     000858 R   |   5 STEP       001DB0 R
  5 STOP       001C92 R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      001D29 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000003     |     TK_CHAR =  00000B     |     TK_CMD  =  000007 
    TK_COLON=  000001     |     TK_COMMA=  000008     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FUNC =  00000C     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_INTGR=  00000A     |     TK_LE   =  000036     |     TK_LPARE=  000004 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000006     |     TK_RPARE=  000005 
    TK_SHARP=  000009     |     TK_VAR  =  000002     |   5 TO         001DA9 R
    TOK_TEST=  000000     |   5 Timer4Up   000019 R   |   5 TrapHand   00000A R
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     001DC2 R   |   5 USER_ABO   000083 R   |   5 USR        001CB5 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  5 UserButt   000025 R   |     VSIZE   =  000002     |     VT      =  00000B 
  5 WAIT       001D69 R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |   5 WRITE      001C76 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMASK   =  000001     |     XSAVE   =  000001 
    YSAVE   =  000003     |   5 abs        001BA9 R   |   1 acc16      000009 R
  1 acc24      000008 R   |   1 acc8       00000A R   |   5 accept_c   000A5D R
  5 add        001022 R   |   5 ansi_seq   000A1B R   |   5 arg_list   001149 R
  1 array_ad   000020 R   |   1 array_si   000022 R   |   5 ascii      001AC0 R
  5 at_tst     000D38 R   |   5 atoi       000E71 R   |   5 atoi_exi   000EDF R
  5 bad_port   001B31 R   |   1 base       000007 R   |   1 basicptr   000003 R
  5 bin_exit   000C30 R   |   5 bit_rese   001520 R   |   5 bit_set    00150C R
  5 bit_togg   001535 R   |   5 bkslsh_t   000CE3 R   |   5 bksp       00023A R
  5 break      001758 R   |   5 break_po   001789 R   |   5 bye        001B7C R
  5 char       001AA3 R   |   5 clear_ba   00057F R   |   5 clear_va   00046A R
  5 clock_in   00009E R   |   5 cmd_itf    000A81 R   |   5 cmp_name   001871 R
  5 cold_sta   0004E4 R   |   5 colon_ts   000D0C R   |   5 comma_ts   000D17 R
  5 convert_   000B96 R   |   1 count      000002 R   |   5 cp_loop    0010F5 R
  5 create_g   0003BF R   |   5 cstk_pro   000FDC R   |   5 dash_tst   000D2D R
  5 ddrop      000F64 R   |   5 ddrop_n    0010CD R   |   5 ddup       000F6D R
  5 dec_base   0012E1 R   |   5 del_back   000A4E R   |   5 del_line   000390 R
  5 del_ln     000A3F R   |   5 delete     00024A R   |   5 dir_loop   001A31 R
  5 director   001A25 R   |   5 divide     001078 R   |   5 divu24_8   0009A8 R
  5 dotr       000FE5 R   |   5 dotr_loo   000FFA R   |   5 dots       000FB2 R
  5 dpick      000F7E R   |   5 dpop       000F3D R   |   5 dpush      000F30 R
  3 dstack     001740 R   |   3 dstack_u   001780 R   |   5 dstk_pro   000FA8 R
  1 dstkptr    000019 R   |   5 dswap      000F4A R   |   5 empty      0013AC R
  5 eql_tst    000D9A R   |   5 erase_bl   000120 R   |   5 erase_en   00010C R
  5 erase_fl   000146 R   |   5 erase_st   0000E1 R   |   5 err_bad_   000660 R
  5 err_cmd_   000621 R   |   5 err_div0   0005E3 R   |   5 err_dupl   00063C R
  5 err_math   0005C9 R   |   5 err_mem_   0005AC R   |   5 err_msg    000594 R
  5 err_no_a   00066D R   |   5 err_no_l   0005F3 R   |   5 err_not_   00064E R
  5 err_run_   00060A R   |   5 err_synt   0005BA R   |   5 execute    0010E0 R
  5 expect     00113C R   |   5 expr_exi   001282 R   |   5 expressi   001241 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

  5 factor     0011A0 R   |   1 farptr     000013 R   |   7 fdrive     010000 R
  5 fetch      000F8D R   |   5 fetchc     000B4E R   |   1 ffree      000016 R
  5 ffree_ms   001857 R   |   5 file_cou   001A7E R   |   5 final_te   000A15 R
  5 first_li   001351 R   |   1 flags      000024 R   |   5 for        00158D R
  5 forget     0019D6 R   |   1 free_ram   00005A R   |   5 get_arra   00116D R
  5 get_tick   001BA3 R   |   5 get_toke   000C7D R   |   5 getc       000227 R
  5 go_commo   0016B4 R   |   5 gosub      001691 R   |   5 goto       001684 R
  5 gpio       001AF6 R   |   5 gt_tst     000DA5 R   |   5 hex_base   0012DC R
  5 hse_cloc   000207 R   |   5 hsi_cloc   000211 R   |   5 if         001579 R
  1 in         000001 R   |   1 in.w       000000 R   |   1 in.w.sav   000011 R
  5 incr_far   0017B2 R   |   5 input_ex   0014DD R   |   5 input_lo   001478 R
  5 input_va   00146C R   |   5 insert_l   0003F0 R   |   5 insert_l   000467 R
  5 interp     000721 R   |   5 interp_l   000767 R   |   5 invalid    000AB6 R
  5 invalid_   000B24 R   |   5 is_alpha   000478 R   |   5 is_digit   000E38 R
  5 itoa       000961 R   |   5 itoa_loo   000979 R   |   5 key        001AE4 R
  5 kword_di   001DF2 R   |   5 kword_en   001C3D R   |   5 last_lin   00135A R
  5 ledoff     0007A8 R   |   5 ledon      0007A3 R   |   5 ledtoggl   0007AD R
  5 left_arr   000A1B R   |   5 left_par   0007B6 R   |   5 let        0012FE R
  5 let02      001308 R   |   1 lineno     000005 R   |   5 lines_sk   00135F R
  5 list       001326 R   |   5 list_exi   0013A9 R   |   5 list_sta   001382 R
  5 load       001979 R   |   5 loop_bac   001657 R   |   1 loop_dep   00001F R
  5 loop_don   001672 R   |   5 lt_tst     000DDE R   |   5 mem_peek   000AD2 R
  5 modulo     0010BC R   |   5 move       00031E R   |   5 move_cod   00010C R
  5 move_dow   00033C R   |   5 move_exi   00035E R   |   5 move_loo   000341 R
  5 move_up    00032E R   |   5 multiply   001030 R   |   5 mulu24_8   000EE3 R
  5 nbr_tst    000CB9 R   |   5 neg_acc2   0009D0 R   |   5 new        0017A7 R
  5 next       00160F R   |   5 no_match   001107 R   |   5 none       000C7D R
  5 number     000B54 GR  |   5 other      000E16 R   |   3 pad        001718 R
  5 parse_bi   000C10 R   |   5 parse_in   000BD5 R   |   5 parse_ke   000C38 R
  5 parse_qu   000B5B R   |   5 parser_i   0008F8 GR  |   5 pause      001B90 R
  5 pause02    001B9A R   |   5 peek       00155C R   |   5 peek_byt   000AEE R
  5 plus_tst   000D6E R   |   5 poke       001549 R   |   5 port_cr1   001B48 R
  5 port_cr2   001B4E R   |   5 port_ddr   001B42 R   |   5 port_idr   001B3C R
  5 port_odr   001B36 R   |   5 prcnt_ts   000D8F R   |   5 print      0013DB R
  5 print_ex   001436 R   |   5 print_fa   000B33 R   |   5 print_in   000905 R
  5 print_re   000805 R   |   5 print_st   000AC6 R   |   5 prt_basi   0013BD R
  5 prt_loop   0013DF R   |   5 prt_peek   0002CE R   |   5 prt_reg1   0007E6 R
  5 prt_reg8   0007C1 R   |   5 prt_regs   000264 R   |   5 prti24     0008B0 R
  5 putc       00021E R   |   5 puts       000230 R   |   5 qkey       001AEC R
  5 qmark_ts   000D43 R   |   5 random     001BC9 R   |   5 readln     0009F3 R
  5 readln_l   0009F9 R   |   5 readln_q   000A72 R   |   5 regs_sta   0002A7 R
  5 rel_exit   0012D9 R   |   5 relation   001285 R   |   5 rem        0014E0 R
  5 repl       000A8F R   |   5 repl_exi   000AB3 R   |   5 reprint    000A1B R
  5 reset_co   0013DD R   |   5 rest_con   001457 R   |   5 return     0016DC R
  5 right_ar   000A1B R   |   5 rparnt_t   000D01 R   |   5 run        001700 R
  5 save       0018DC R   |   5 save_con   001442 R   |   5 search_d   0010E4 R
  5 search_e   001138 R   |   5 search_f   001892 R   |   5 search_l   000361 R
  5 search_l   00036C R   |   5 search_n   0010E8 R   |   1 seedx      00000D R
  1 seedy      00000F R   |   5 seek_fdr   0017C0 R   |   5 sharp_ts   000D22 R
  5 show       001012 R   |   5 size       0012E6 R   |   5 skip       000F1D R
  5 slash_ts   000D84 R   |   5 sleep      001B85 R   |   5 software   000489 R
  5 spaces     000258 R   |   3 stack_fu   001780 R   |   3 stack_un   001800 R
  5 star_tst   000D79 R   |   5 step       0015E7 R   |   5 stop       001749 R
  5 store      000F97 R   |   5 store_lo   0015F9 R   |   5 str_matc   001116 R
  5 str_tst    000CA8 R   |   5 strcmp     0002FF R   |   5 strcpy     000310 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

  5 strlen     0002F2 R   |   5 substrac   00102A R   |   5 syntax_e   0006A1 R
  1 tab_widt   000025 R   |   5 tb_error   0006A3 R   |   5 term       0011F4 R
  5 term01     0011FD R   |   5 term_exi   00123E R   |   5 test_p     000ABE R
  3 tib        0016C8 R   |   5 tick_tst   000D5A R   |   1 ticks      00000B R
  5 timer4_i   0000B4 R   |   5 to         0015B7 R   |   5 to_lower   000E41 GR
  5 to_upper   000E4C GR  |   5 token_ch   000E25 R   |   5 token_ex   000E35 R
  1 txtbgn     00001B R   |   1 txtend     00001D R   |   5 uart3_in   0001F4 R
  5 uart3_se   000200 R   |   5 uart_ena   000219 R   |   5 ubound     0012F0 R
  5 unget_to   000FA1 R   |   5 unlock_e   0000C5 R   |   5 unlock_f   0000D3 R
  5 upper      000E58 R   |   5 upper_lo   000E5C R   |   5 user_spa   001E00 R
  5 usr        001B54 R   |   5 usr_addr   0004CF R   |   1 vars       000026 R
  5 wait       0014E1 R   |   5 warm_sta   000701 R   |   5 write      001A86 R
  5 write_bl   0001D1 R   |   5 write_by   00015C R   |   5 write_ee   000198 R
  5 write_ex   0001CC R   |   5 write_fl   000182 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   1E0E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

