ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask with CC.
                                                ; bits 4:5 identify group 
                                                ; bits 0:2 are CC mask 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           000040    44 	DSTACK_SIZE=64 
                           000080    45 	STACK_SIZE=128
                           0017FF    46 	STACK_EMPTY=RAM_SIZE-1  
                           000000    47 	FRUN=0 ; flags run code in variable flags
                           000001    48 	FTRAP=1 ; inside trap handler 
                           000002    49 	FFOR=2 ; FOR loop in preparation 
                           000003    50 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    51 	FBREAK=4 ; break point flag 
                                     52 
      000000                         53 in.w:  .blkb 1 ; parser position in text line
      000001                         54 in:    .blkb 1 ; low byte of in.w
      000002                         55 count: .blkb 1 ; length of string in text line  
      000003                         56 basicptr:  .blkb 2  ; point to text buffer 
      000005                         57 lineno: .blkb 2  ; BASIC line number 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000007                         58 base:  .blkb 1 ; nemeric base used to print integer 
      000008                         59 acc24: .blkb 1 ; 24 accumulator
      000009                         60 acc16: .blkb 1
      00000A                         61 acc8:  .blkb 1
      00000B                         62 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000D                         63 seedx: .blkw 1  ; xorshift 16 seed x 
      00000F                         64 seedy: .blkw 1  ; xorshift 16 seed y 
      000011                         65 in.w.saved: .blkw 1 ; set by get_token before parsing next token, used by unget_token
      000013                         66 farptr: .blkb 3 ; far pointer used by file system
      000016                         67 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000019                         68 dstkptr: .blkw 1  ; data stack pointer 
      00001B                         69 txtbgn: .ds 2 ; BASIC text beginning address 
      00001D                         70 txtend: .ds 2 ; BASIC text end address 
      00001F                         71 loop_depth: .ds 1 ; FOR loop depth, level of nested loop.  
      000020                         72 array_addr: .ds 2 ; address of @ array 
      000022                         73 array_size: .ds 2 ; array size 
      000024                         74 flags: .ds 1 ; boolean flags
      000025                         75 tab_width: .ds 1 ; print colon width (4)
      000026                         76 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     77 ; keep as last variable 
      00005A                         78 free_ram: ; from here RAM free for BASIC text 
                                     79 
                                     80 ;-----------------------------------
                                     81     .area SSEG (ABS)
                                     82 ;-----------------------------------	
      0016C8                         83     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         84 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         85 pad: .ds PAD_SIZE             ; working buffer
      001740                         86 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         87 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         88 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         89 stack_unf: ; stack underflow ; control_stack bottom 
                                     90 
                                     91 
                                     92 ;--------------------------------------
                                     93     .area HOME 
                                     94 ;--------------------------------------
      000000 82 00 04 4E             95     int cold_start
                           000001    96 .if DEBUG
      000004 82 00 00 0A             97 	int TrapHandler 		;TRAP  software interrupt
                           000000    98 .else
                                     99 	int NonHandledInterrupt ;TRAP  software interrupt
                                    100 .endif
      000008 82 00 00 09            101 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            102 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            103 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            104 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            105 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            106 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            107 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 25            108 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            109 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            110 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            111 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            112 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000038 82 00 00 09            113 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            114 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            115 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            116 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            117 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            118 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            119 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            120 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            121 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            122 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            123 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            124 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            125 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            126 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            127 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            128 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            129 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            130 	int NonHandledInterrupt ;int29  not used
                                    131 
                                    132 ;---------------------------------------
                                    133     .area CODE
                                    134 ;---------------------------------------
                           000001   135 .if DEBUG
      000000 53 54 4D 38 5F 54 42   136 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    137 .endif 
                                    138 
      000009                        139 NonHandledInterrupt:
      000009 71                     140     .byte 0x71  ; reinitialize MCU
                                    141 
                                    142 
                                    143 ;------------------------------------
                                    144 ; software interrupt handler  
                                    145 ;------------------------------------
                           000001   146 .if DEBUG 
      00000A                        147 TrapHandler:
      00000A 72 12 00 24      [ 1]  148 	bset flags,#FTRAP 
      00000E CD 07 5B         [ 4]  149 	call print_registers
      000011 CD 09 CA         [ 4]  150 	call cmd_itf
      000014 72 13 00 24      [ 1]  151 	bres flags,#FTRAP 	
      000018 80               [11]  152 	iret
                                    153 .endif 
                                    154 
      000019                        155 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  156 	clr TIM4_SR 
      00001D CE 00 0B         [ 2]  157 	ldw x,ticks
      000020 5C               [ 1]  158 	incw x
      000021 CF 00 0B         [ 2]  159 	ldw ticks,x 
      000024 80               [11]  160 	iret 
                                    161 
                                    162 
                                    163 ;------------------------------------
                                    164 ; Triggered by pressing USER UserButton 
                                    165 ; on NUCLEO card.
                                    166 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000025                        167 UserButtonHandler:
                                    168 ; wait button release
      000025 5F               [ 1]  169 	clrw x
      000026 5A               [ 2]  170 1$: decw x 
      000027 26 FD            [ 1]  171 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  172 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    173 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 24 05   [ 2]  174     btjf flags,#FSLEEP,2$
      000033 72 17 00 24      [ 1]  175 	bres flags,#FSLEEP 
      000037 80               [11]  176 	iret
      000038 72 00 00 24 03   [ 2]  177 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  178 	jp 9$ 
      000040                        179 4$:	; program interrupted by user 
      000040 72 11 00 24      [ 1]  180 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  181 	ldw x,#USER_ABORT
      000047 CD 01 B0         [ 4]  182 	call puts 
      00004A CE 00 03         [ 2]  183 	ldw x,basicptr
      00004D FE               [ 2]  184 	ldw x,(x)
                                    185 ; print line number 
      00004E 35 0A 00 07      [ 1]  186 	mov base,#10 
      000052 35 06 00 25      [ 1]  187 	mov tab_width,#6
      000056 CD 08 4E         [ 4]  188 	call print_int  	
      000059 CE 00 03         [ 2]  189 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  190 	addw x,#3  
      00005F CD 01 B0         [ 4]  191 	call puts 
      000062 A6 0D            [ 1]  192 	ld a,#CR 
      000064 CD 01 9E         [ 4]  193 	call putc
      000067 5F               [ 1]  194 	clrw x  
      000068 C6 00 01         [ 1]  195 	ld a,in 
      00006B AB 03            [ 1]  196 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  197 	ld xl,a 
      00006E CD 01 D8         [ 4]  198 	call spaces 
      000071 A6 5E            [ 1]  199 	ld a,#'^
      000073 CD 01 9E         [ 4]  200 	call putc 
      000076                        201 9$:
      000076 AE 17 FF         [ 2]  202     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  203     ldw sp,x
      00007A 9A               [ 1]  204 	rim 
      00007B CC 06 57         [ 2]  205 	jp warm_start
                                    206 
      00007E 0A 50 72 6F 67 72 61   207 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    208 
                                    209 
                                    210 ;----------------------------------------
                                    211 ; inialize MCU clock 
                                    212 ; input:
                                    213 ;   A 		source  HSI | 1 HSE 
                                    214 ;   XL      CLK_CKDIVR , clock divisor 
                                    215 ; output:
                                    216 ;   none 
                                    217 ;----------------------------------------
      000099                        218 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000099 C1 50 C3         [ 1]  219 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  220 	jreq 2$ ; no switching required 
                                    221 ; select clock source 
      00009E 72 12 50 C5      [ 1]  222 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  223 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  224 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  225 	jrne 1$
      0000AA                        226 2$: 	
                                    227 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  228 	ld a,xl 
      0000AB C7 50 C6         [ 1]  229 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  230 	ret
                                    231 
                                    232 ;---------------------------------
                                    233 ; TIM4 is configured to generate an 
                                    234 ; interrupt every millisecond 
                                    235 ;----------------------------------
      0000AF                        236 timer4_init:
      0000AF 35 07 53 45      [ 1]  237 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B3 35 7D 53 46      [ 1]  238 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B7 35 05 53 40      [ 1]  239 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BB 72 10 53 41      [ 1]  240 	bset TIM4_IER,#TIM4_IER_UIE 
      0000BF 81               [ 4]  241 	ret
                                    242 
                                    243 ;----------------------------------
                                    244 ; unlock EEPROM for writing/erasing
                                    245 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    246 ; input:
                                    247 ;  none
                                    248 ; output:
                                    249 ;  none 
                                    250 ;----------------------------------
      0000C0                        251 unlock_eeprom:
      0000C0 35 AE 50 64      [ 1]  252 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C4 35 56 50 64      [ 1]  253     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C8 72 07 50 5F FB   [ 2]  254 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000CD 81               [ 4]  255 	ret
                                    256 
                                    257 ;----------------------------------
                                    258 ; unlock FLASH for writing/erasing
                                    259 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    260 ; input:
                                    261 ;  none
                                    262 ; output:
                                    263 ;  none
                                    264 ;----------------------------------
      0000CE                        265 unlock_flash:
      0000CE 35 56 50 62      [ 1]  266 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D2 35 AE 50 62      [ 1]  267 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000D6 72 03 50 5F FB   [ 2]  268 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000DB 81               [ 4]  269 	ret
                                    270 
                           000000   271 	BLOCK_ERASE=0
                                    272 ;----------------------------
                                    273 ; erase block code must be 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    274 ;executed from RAM
                                    275 ;-----------------------------
                           000000   276 .if BLOCK_ERASE 
                                    277 ; this code is copied to RAM 
                                    278 erase_start:
                                    279 	clr a 
                                    280     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    281     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    282 	ldf [farptr],a
                                    283     inc farptr+2 
                                    284     ldf [farptr],a
                                    285     inc farptr+2 
                                    286     ldf [farptr],a
                                    287     inc farptr+2 
                                    288     ldf [farptr],a
                                    289 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    290 	ret
                                    291 erase_end:
                                    292 
                                    293 ; copy erase_start in RAM 
                                    294 move_code_in_ram:
                                    295 	ldw x,#erase_end 
                                    296 	subw x,#erase_start
                                    297 	ldw acc16,x 
                                    298 	ldw x,#pad 
                                    299 	ldw y,#erase_start 
                                    300 	call move 
                                    301 	ret 
                                    302 
                                    303 ;-----------------------------------
                                    304 ; erase flash or EEPROM block 
                                    305 ; a block is 128 bytes 
                                    306 ; input:
                                    307 ;   farptr  address block begin
                                    308 ; output:
                                    309 ;   none
                                    310 ;--------------------------------------
                                    311 erase_block:
                                    312 	ldw x,farptr+1 
                                    313 	pushw x 
                                    314 	call move_code_in_ram 
                                    315 	popw x 
                                    316 	ldw farptr+1,x 
                                    317 	tnz farptr
                                    318 	jrne erase_flash 
                                    319 	ldw x,#FLASH_BASE 
                                    320 	cpw x,farptr+1 
                                    321 	jrpl erase_flash 
                                    322 ; erase eeprom block
                                    323 	call unlock_eeprom 
                                    324 	sim 
                                    325 	call pad   
                                    326 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    327 	rim 
                                    328 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    329 ; erase flash block:
                                    330 erase_flash:
                                    331 	call unlock_flash 
                                    332 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    333 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    334 	clr a 
                                    335 	sim 
                                    336 	call pad 
                                    337     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    338 	rim 
                                    339 	ret 
                                    340 .endif ; BLOCK_ERASE 
                                    341 
                                    342 
                                    343 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    344 ; write a byte to FLASH or EEPROM 
                                    345 ; input:
                                    346 ;    a  		byte to write
                                    347 ;    farptr  	address
                                    348 ;    x          farptr[x]
                                    349 ; output:
                                    350 ;    none
                                    351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    352 	; variables locales
                           000001   353 	BTW = 1   ; byte to write offset on stack
                           000002   354 	OPT = 2   ; OPTION flag offset on stack
                           000002   355 	VSIZE = 2
      0000DC                        356 write_byte:
      0000DC 90 89            [ 2]  357 	pushw y
      0000DE                        358 	_vars VSIZE
      0000DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E0 6B 01            [ 1]  359 	ld (BTW,sp),a ; byte to write 
      0000E2 0F 02            [ 1]  360 	clr (OPT,sp)  ; OPTION flag
                                    361 ; put addr[15:0] in Y, for bounds check.
      0000E4 90 CE 00 14      [ 2]  362 	ldw y,farptr+1   ; Y=addr15:0
                                    363 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000E8 72 5D 00 13      [ 1]  364 	tnz farptr 
      0000EC 26 14            [ 1]  365 	jrne write_flash
      0000EE 90 A3 1E 80      [ 2]  366     cpw y,#user_space
      0000F2 24 0E            [ 1]  367     jruge write_flash
      0000F4 90 A3 40 00      [ 2]  368 	cpw y,#EEPROM_BASE  
      0000F8 25 52            [ 1]  369     jrult write_exit
      0000FA 90 A3 48 00      [ 2]  370 	cpw y,#OPTION_BASE
      0000FE 25 18            [ 1]  371 	jrult write_eeprom
      000100 20 4A            [ 2]  372     jra write_exit
                                    373 ; write program memory
      000102                        374 write_flash:
      000102 CD 00 CE         [ 4]  375 	call unlock_flash 
      000105 9B               [ 1]  376 1$:	sim 
      000106 7B 01            [ 1]  377 	ld a,(BTW,sp)
      000108 92 A7 00 13      [ 4]  378 	ldf ([farptr],x),a ; farptr[x]=A
      00010C 72 05 50 5F FB   [ 2]  379 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000111 9A               [ 1]  380     rim 
      000112 72 13 50 5F      [ 1]  381     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000116 20 34            [ 2]  382     jra write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    383 ; write eeprom and option
      000118                        384 write_eeprom:
      000118 CD 00 C0         [ 4]  385 	call unlock_eeprom
                                    386 	; check for data eeprom or option eeprom
      00011B 90 A3 48 00      [ 2]  387 	cpw y,#OPTION_BASE
      00011F 2B 08            [ 1]  388 	jrmi 1$
      000121 90 A3 48 80      [ 2]  389 	cpw y,#OPTION_END+1
      000125 2A 02            [ 1]  390 	jrpl 1$
      000127 03 02            [ 1]  391 	cpl (OPT,sp)
      000129                        392 1$: 
      000129 0D 02            [ 1]  393     tnz (OPT,sp)
      00012B 27 08            [ 1]  394     jreq 2$
                                    395 	; pour modifier une option il faut modifier ces 2 bits
      00012D 72 1E 50 5B      [ 1]  396     bset FLASH_CR2,#FLASH_CR2_OPT
      000131 72 1F 50 5C      [ 1]  397     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000135                        398 2$: 
      000135 7B 01            [ 1]  399     ld a,(BTW,sp)
      000137 92 A7 00 13      [ 4]  400     ldf ([farptr],x),a
      00013B 0D 02            [ 1]  401     tnz (OPT,sp)
      00013D 27 08            [ 1]  402     jreq 3$
      00013F 5C               [ 1]  403     incw x
      000140 7B 01            [ 1]  404     ld a,(BTW,sp)
      000142 43               [ 1]  405     cpl a
      000143 92 A7 00 13      [ 4]  406     ldf ([farptr],x),a
      000147 72 05 50 5F FB   [ 2]  407 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014C                        408 write_exit:
      00014C                        409 	_drop VSIZE 
      00014C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00014E 90 85            [ 2]  410 	popw y
      000150 81               [ 4]  411     ret
                                    412 
                                    413 ;--------------------------------------------
                                    414 ; write a data block to eeprom or flash 
                                    415 ; input:
                                    416 ;   Y        source address   
                                    417 ;   X        array index  destination  farptr[x]
                                    418 ;   BSIZE    block size bytes 
                                    419 ;   farptr   write address , byte* 
                                    420 ; output:
                                    421 ;	X 		after last byte written 
                                    422 ;   Y 		after last byte read 
                                    423 ;  farptr   point after block
                                    424 ;---------------------------------------------
      000151                        425 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000151                        426 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    427 	; local var 
                           000001   428 	XSAVE=1 
                           000002   429 	VSIZE=2 
      000151                        430 write_block:
      000151                        431 	_vars VSIZE
      000151 52 02            [ 2]    1     sub sp,#VSIZE 
      000153 1F 01            [ 2]  432 	ldw (XSAVE,sp),x 
      000155 1E 05            [ 2]  433 	ldw x,(BSIZE,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000157 27 13            [ 1]  434 	jreq 9$
      000159 1E 01            [ 2]  435 1$:	ldw x,(XSAVE,sp)
      00015B 90 F6            [ 1]  436 	ld a,(y)
      00015D CD 00 DC         [ 4]  437 	call write_byte 
      000160 5C               [ 1]  438 	incw x 
      000161 90 5C            [ 1]  439 	incw y 
      000163 1F 01            [ 2]  440 	ldw (XSAVE,sp),x
      000165 1E 05            [ 2]  441 	ldw x,(BSIZE,sp)
      000167 5A               [ 2]  442 	decw x
      000168 1F 05            [ 2]  443 	ldw (BSIZE,sp),x 
      00016A 26 ED            [ 1]  444 	jrne 1$
      00016C                        445 9$:
      00016C 1E 01            [ 2]  446 	ldw x,(XSAVE,sp)
      00016E CD 17 78         [ 4]  447 	call incr_farptr
      000171                        448 	_drop VSIZE
      000171 5B 02            [ 2]    1     addw sp,#VSIZE 
      000173 81               [ 4]  449 	ret 
                                    450 
                                    451 
                                    452 ;---------------------------------------------
                                    453 ;   UART3 subroutines
                                    454 ;---------------------------------------------
                                    455 
                                    456 ;---------------------------------------------
                                    457 ; initialize UART3, 115200 8N1
                                    458 ; input:
                                    459 ;	none
                                    460 ; output:
                                    461 ;   none
                                    462 ;---------------------------------------------
      000174                        463 uart3_init:
                                    464 	; configure tx pin
      000174 72 1A 50 11      [ 1]  465 	bset PD_DDR,#BIT5 ; tx pin
      000178 72 1A 50 12      [ 1]  466 	bset PD_CR1,#BIT5 ; push-pull output
      00017C 72 1A 50 13      [ 1]  467 	bset PD_CR2,#BIT5 ; fast output
      000180                        468 uart3_set_baud: 
                                    469 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    470 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000180 A6 E1            [ 1]  471 	ld a,#CLK_SWR_HSI
      000182 C1 50 C3         [ 1]  472 	cp a,CLK_CMSR 
      000185 27 0A            [ 1]  473 	jreq hsi_clock 
      000187                        474 hse_clock: ; 8 Mhz 	
      000187 35 05 52 43      [ 1]  475 	mov UART3_BRR2,#0x05 ; must be loaded first
      00018B 35 04 52 42      [ 1]  476 	mov UART3_BRR1,#0x4
      00018F 20 08            [ 2]  477 	jra uart_enable
      000191                        478 hsi_clock: ; 16 Mhz 	
      000191 35 0B 52 43      [ 1]  479 	mov UART3_BRR2,#0x0b ; must be loaded first
      000195 35 08 52 42      [ 1]  480 	mov UART3_BRR1,#0x08
      000199                        481 uart_enable:	
      000199 35 0C 52 45      [ 1]  482 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      00019D 81               [ 4]  483 	ret
                                    484 	
                                    485 ;---------------------------------
                                    486 ; send character to UART3 
                                    487 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    488 ;   A 
                                    489 ; output:
                                    490 ;   none 
                                    491 ;--------------------------------	
      00019E                        492 putc:
      00019E 72 0F 52 40 FB   [ 2]  493 	btjf UART3_SR,#UART_SR_TXE,.
      0001A3 C7 52 41         [ 1]  494 	ld UART3_DR,a 
      0001A6 81               [ 4]  495 	ret 
                                    496 
                                    497 ;---------------------------------
                                    498 ; wait character from UART3 
                                    499 ; input:
                                    500 ;   none
                                    501 ; output:
                                    502 ;   A 			char  
                                    503 ;--------------------------------	
      0001A7                        504 getc:
      0001A7 72 0B 52 40 FB   [ 2]  505 	btjf UART3_SR,#UART_SR_RXNE,.
      0001AC C6 52 41         [ 1]  506 	ld a,UART3_DR 
      0001AF 81               [ 4]  507 	ret 
                                    508 
                                    509 ;-----------------------------
                                    510 ; send an ASCIZ string to UART3 
                                    511 ; input: 
                                    512 ;   x 		char * 
                                    513 ; output:
                                    514 ;   none 
                                    515 ;-------------------------------
      0001B0                        516 puts:
      0001B0 F6               [ 1]  517     ld a,(x)
      0001B1 27 06            [ 1]  518 	jreq 1$
      0001B3 CD 01 9E         [ 4]  519 	call putc 
      0001B6 5C               [ 1]  520 	incw x 
      0001B7 20 F7            [ 2]  521 	jra puts 
      0001B9 81               [ 4]  522 1$:	ret 
                                    523 
                                    524 
                                    525 ;---------------------------
                                    526 ; delete character at left 
                                    527 ; of cursor on terminal 
                                    528 ; input:
                                    529 ;   none 
                                    530 ; output:
                                    531 ;	none 
                                    532 ;---------------------------
      0001BA                        533 bksp:
      0001BA A6 08            [ 1]  534 	ld a,#BSP 
      0001BC CD 01 9E         [ 4]  535 	call putc 
      0001BF A6 20            [ 1]  536 	ld a,#SPACE 
      0001C1 CD 01 9E         [ 4]  537 	call putc 
      0001C4 A6 08            [ 1]  538 	ld a,#BSP 
      0001C6 CD 01 9E         [ 4]  539 	call putc 
      0001C9 81               [ 4]  540 	ret 
                                    541 ;---------------------------
                                    542 ; delete n character left of cursor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    543 ; at terminal.
                                    544 ; input: 
                                    545 ;   A   	number of characters to delete.
                                    546 ; output:
                                    547 ;    none 
                                    548 ;--------------------------	
      0001CA                        549 delete:
      0001CA 88               [ 1]  550 	push a 
      0001CB 0D 01            [ 1]  551 0$:	tnz (1,sp)
      0001CD 27 07            [ 1]  552 	jreq 1$
      0001CF CD 01 BA         [ 4]  553 	call bksp 
      0001D2 0A 01            [ 1]  554 	dec (1,sp)
      0001D4 20 F5            [ 2]  555 	jra 0$
      0001D6 84               [ 1]  556 1$:	pop a 
      0001D7 81               [ 4]  557 	ret
                                    558 
                                    559 ;--------------------------
                                    560 ; print n spaces on terminal
                                    561 ; input:
                                    562 ;  X 		number of spaces 
                                    563 ; output:
                                    564 ;	none 
                                    565 ;---------------------------
      0001D8                        566 spaces:
      0001D8 A6 20            [ 1]  567 	ld a,#SPACE 
      0001DA 5D               [ 2]  568 1$:	tnzw x
      0001DB 27 06            [ 1]  569 	jreq 9$
      0001DD CD 01 9E         [ 4]  570 	call putc 
      0001E0 5A               [ 2]  571 	decw x
      0001E1 20 F7            [ 2]  572 	jra 1$
      0001E3                        573 9$: 
      0001E3 81               [ 4]  574 	ret 
                                    575 
                           000001   576 .if DEBUG 
                                    577 ;---------------------------------
                                    578 ;; print actual registers states 
                                    579 ;; as pushed on stack 
                                    580 ;; {Y,X,CC,A}
                                    581 ;---------------------------------
      0001E4                        582 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001E4                        583 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001E4                        584 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001E4                        585 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001E4                        586 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001E4                        587 prt_regs:
      0001E4 AE 02 27         [ 2]  588 	ldw x,#regs_state 
      0001E7 CD 01 B0         [ 4]  589 	call puts
                                    590 ; register PC
      0001EA 16 01            [ 2]  591 	ldw y,(1,sp)
      0001EC AE 07 EB         [ 2]  592 	ldw x,#REG_EPC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001EF CD 07 3C         [ 4]  593 	call prt_reg16 
                                    594 ; register CC 
      0001F2 7B 08            [ 1]  595 	ld a,(R_CC,sp)
      0001F4 AE 07 FC         [ 2]  596 	ldw x,#REG_CC 
      0001F7 CD 07 17         [ 4]  597 	call prt_reg8 
                                    598 ; register A 
      0001FA 7B 07            [ 1]  599 	ld a,(R_A,sp)
      0001FC AE 07 F8         [ 2]  600 	ldw x,#REG_A 
      0001FF CD 07 17         [ 4]  601 	call prt_reg8 
                                    602 ; register X 
      000202 16 05            [ 2]  603 	ldw y,(R_X,sp)
      000204 AE 07 F4         [ 2]  604 	ldw x,#REG_X 
      000207 CD 07 3C         [ 4]  605 	call prt_reg16 
                                    606 ; register Y 
      00020A 16 03            [ 2]  607 	ldw y,(R_Y,sp)
      00020C AE 07 F0         [ 2]  608 	ldw x,#REG_Y 
      00020F CD 07 3C         [ 4]  609 	call prt_reg16 
                                    610 ; register SP 
      000212 90 96            [ 1]  611 	ldw y,sp
      000214 72 A9 00 08      [ 2]  612 	addw y,#6+ARG_OFS  
      000218 AE 08 01         [ 2]  613 	ldw x,#REG_SP
      00021B CD 07 3C         [ 4]  614 	call prt_reg16
      00021E A6 0D            [ 1]  615 	ld a,#CR 
      000220 CD 01 9E         [ 4]  616 	call putc
      000223 CD 01 9E         [ 4]  617 	call putc   
      000226 81               [ 4]  618 	ret 
                                    619 
      000227 0A 72 65 67 69 73 74   620 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    621 
                                    622 
                                    623 ;--------------------
                                    624 ; print content at address in hex.
                                    625 ; input:
                                    626 ;   X 	address to peek 
                                    627 ; output:
                                    628 ;	none 
                                    629 ;--------------------	
      00024E                        630 prt_peek:
      00024E 89               [ 2]  631 	pushw x 
      00024F CF 00 09         [ 2]  632 	ldw acc16,x 
      000252 72 5F 00 08      [ 1]  633 	clr acc24 
      000256 5F               [ 1]  634 	clrw x 
      000257 A6 10            [ 1]  635 	ld a,#16 
      000259 CD 08 06         [ 4]  636 	call prti24 
      00025C A6 3A            [ 1]  637 	ld a,#': 
      00025E CD 01 9E         [ 4]  638 	call putc 
      000261 A6 20            [ 1]  639 	ld a,#SPACE 
      000263 CD 01 9E         [ 4]  640 	call putc 
      000266 85               [ 2]  641 	popw x 
      000267 F6               [ 1]  642 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000268 C7 00 0A         [ 1]  643 	ld acc8,a 
      00026B 5F               [ 1]  644 	clrw x 
      00026C A6 10            [ 1]  645 	ld a,#16 
      00026E CD 08 06         [ 4]  646 	call prti24
      000271 81               [ 4]  647 	ret 
                                    648 .endif ; DEBUG  
                                    649 
                                    650 ;-------------------------------------
                                    651 ; retrun string length
                                    652 ; input:
                                    653 ;   X         .asciz  
                                    654 ; output:
                                    655 ;   X         length 
                                    656 ;-------------------------------------
      000272                        657 strlen:
      000272 90 93            [ 1]  658 	ldw y,x 
      000274 5F               [ 1]  659 	clrw x 
      000275 90 7D            [ 1]  660 1$:	tnz (y) 
      000277 27 05            [ 1]  661 	jreq 9$ 
      000279 5C               [ 1]  662 	incw x
      00027A 90 5C            [ 1]  663 	incw y 
      00027C 20 F7            [ 2]  664 	jra 1$ 
      00027E 81               [ 4]  665 9$: ret 
                                    666 
                                    667 ;------------------------------------
                                    668 ; compare 2 strings
                                    669 ; input:
                                    670 ;   X 		char* first string 
                                    671 ;   Y       char* second string 
                                    672 ; output:
                                    673 ;   A 		0|1 
                                    674 ;-------------------------------------
      00027F                        675 strcmp:
      00027F F6               [ 1]  676 	ld a,(x)
      000280 27 0B            [ 1]  677 	jreq 5$ 
      000282 90 F1            [ 1]  678 	cp a,(y) 
      000284 26 05            [ 1]  679 	jrne 4$ 
      000286 5C               [ 1]  680 	incw x 
      000287 90 5C            [ 1]  681 	incw y 
      000289 20 F4            [ 2]  682 	jra strcmp 
      00028B                        683 4$: ; not same  
      00028B 4F               [ 1]  684 	clr a 
      00028C 81               [ 4]  685 	ret 
      00028D                        686 5$: ; same 
      00028D A6 01            [ 1]  687 	ld a,#1 
      00028F 81               [ 4]  688 	ret 
                                    689 
                                    690 
                                    691 ;---------------------------------------
                                    692 ;  copy src to dest 
                                    693 ; input:
                                    694 ;   X 		dest 
                                    695 ;   Y 		src 
                                    696 ; output: 
                                    697 ;   X 		dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    698 ;----------------------------------
      000290                        699 strcpy:
      000290 89               [ 2]  700 	pushw x 
      000291 90 F6            [ 1]  701 1$: ld a,(y)
      000293 27 06            [ 1]  702 	jreq 9$ 
      000295 F7               [ 1]  703 	ld (x),a 
      000296 5C               [ 1]  704 	incw x 
      000297 90 5C            [ 1]  705 	incw y 
      000299 20 F6            [ 2]  706 	jra 1$ 
      00029B 7F               [ 1]  707 9$:	clr (x)
      00029C 85               [ 2]  708 	popw x 
      00029D 81               [ 4]  709 	ret 
                                    710 
                                    711 ;---------------------------------------
                                    712 ; move memory block 
                                    713 ; input:
                                    714 ;   X 		destination 
                                    715 ;   Y 	    source 
                                    716 ;   acc16	size 
                                    717 ; output:
                                    718 ;   none 
                                    719 ;--------------------------------------
                           000001   720 	INCR=1 ; increament high byte 
                           000002   721 	LB=2 ; increament low byte 
                           000002   722 	VSIZE=2
      00029E                        723 move:
      00029E                        724 	_vars VSIZE 
      00029E 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A0 0F 01            [ 1]  725 	clr (INCR,sp)
      0002A2 0F 02            [ 1]  726 	clr (LB,sp)
      0002A4 90 89            [ 2]  727 	pushw y 
      0002A6 13 01            [ 2]  728 	cpw x,(1,sp) ; compare DEST to SRC 
      0002A8 90 85            [ 2]  729 	popw y 
      0002AA 27 31            [ 1]  730 	jreq move_exit ; x==y 
      0002AC 2B 0E            [ 1]  731 	jrmi move_down
      0002AE                        732 move_up: ; start from top address with incr=-1
      0002AE 72 BB 00 09      [ 2]  733 	addw x,acc16
      0002B2 72 B9 00 09      [ 2]  734 	addw y,acc16
      0002B6 03 01            [ 1]  735 	cpl (INCR,sp)
      0002B8 03 02            [ 1]  736 	cpl (LB,sp)   ; increment = -1 
      0002BA 20 05            [ 2]  737 	jra move_loop  
      0002BC                        738 move_down: ; start from bottom address with incr=1 
      0002BC 5A               [ 2]  739     decw x 
      0002BD 90 5A            [ 2]  740 	decw y
      0002BF 0C 02            [ 1]  741 	inc (LB,sp) ; incr=1 
      0002C1                        742 move_loop:	
      0002C1 C6 00 09         [ 1]  743     ld a, acc16 
      0002C4 CA 00 0A         [ 1]  744 	or a, acc8
      0002C7 27 14            [ 1]  745 	jreq move_exit 
      0002C9 72 FB 01         [ 2]  746 	addw x,(INCR,sp)
      0002CC 72 F9 01         [ 2]  747 	addw y,(INCR,sp) 
      0002CF 90 F6            [ 1]  748 	ld a,(y)
      0002D1 F7               [ 1]  749 	ld (x),a 
      0002D2 89               [ 2]  750 	pushw x 
      0002D3 CE 00 09         [ 2]  751 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002D6 5A               [ 2]  752 	decw x 
      0002D7 CF 00 09         [ 2]  753 	ldw acc16,x 
      0002DA 85               [ 2]  754 	popw x 
      0002DB 20 E4            [ 2]  755 	jra move_loop
      0002DD                        756 move_exit:
      0002DD                        757 	_drop VSIZE
      0002DD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002DF 81               [ 4]  758 	ret 	
                                    759 
                                    760 ;-------------------------------------
                                    761 ; search text area for a line with 
                                    762 ; same number as lineno  
                                    763 ; input:
                                    764 ;	X 			lineno 
                                    765 ; output:
                                    766 ;   X 			addr of line | 0 
                                    767 ;   Y           lineno|insert address if not found  
                                    768 ;-------------------------------------
                           000001   769 	LL=1 ; line length 
                           000002   770 	LB=2 ; line length low byte 
                           000002   771 	VSIZE=2 
      0002E0                        772 search_lineno:
      0002E0                        773 	_vars VSIZE
      0002E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E2 CF 00 09         [ 2]  774 	ldw acc16,x 
      0002E5 0F 01            [ 1]  775 	clr (LL,sp)
      0002E7 90 CE 00 1B      [ 2]  776 	ldw y,txtbgn
      0002EB                        777 search_ln_loop:
      0002EB 90 C3 00 1D      [ 2]  778 	cpw y,txtend 
      0002EF 2A 17            [ 1]  779 	jrpl 8$
      0002F1 93               [ 1]  780 	ldw x,y 
      0002F2 FE               [ 2]  781 	ldw x,(x) ; x=line number 
      0002F3 C3 00 09         [ 2]  782 	cpw x,acc16 
      0002F6 27 13            [ 1]  783 	jreq 9$ 
      0002F8 2A 0E            [ 1]  784 	jrpl 8$ ; from here all lines are > lineno 
      0002FA 90 E6 02         [ 1]  785 	ld a,(2,y)
      0002FD 6B 02            [ 1]  786 	ld (LB,sp),a 
      0002FF 72 A9 00 03      [ 2]  787 	addw y,#3 
      000303 72 F9 01         [ 2]  788 	addw y,(LL,sp)
      000306 20 E3            [ 2]  789 	jra search_ln_loop 
      000308 51               [ 1]  790 8$: exgw x,y 
      000309 90 5F            [ 1]  791 	clrw y 	
      00030B                        792 9$: _drop VSIZE
      00030B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00030D 51               [ 1]  793 	exgw x,y   
      00030E 81               [ 4]  794 	ret 
                                    795 
                                    796 ;-------------------------------------
                                    797 ; delete line at addr
                                    798 ; input:
                                    799 ;   X 		addr of line i.e DEST for move 
                                    800 ;-------------------------------------
                           000001   801 	LLEN=1
                           000003   802 	SRC=3
                           000004   803 	VSIZE=4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00030F                        804 del_line: 
      00030F                        805 	_vars VSIZE 
      00030F 52 04            [ 2]    1     sub sp,#VSIZE 
      000311 E6 02            [ 1]  806 	ld a,(2,x) ; line length
      000313 AB 03            [ 1]  807 	add a,#3
      000315 6B 02            [ 1]  808 	ld (LLEN+1,sp),a 
      000317 0F 01            [ 1]  809 	clr (LLEN,sp)
      000319 90 93            [ 1]  810 	ldw y,x  
      00031B 72 F9 01         [ 2]  811 	addw y,(LLEN,sp) ;SRC  
      00031E 17 03            [ 2]  812 	ldw (SRC,sp),y  ;save source 
      000320 90 CE 00 1D      [ 2]  813 	ldw y,txtend 
      000324 72 F2 03         [ 2]  814 	subw y,(SRC,sp) ; y=count 
      000327 90 CF 00 09      [ 2]  815 	ldw acc16,y 
      00032B 16 03            [ 2]  816 	ldw y,(SRC,sp)    ; source
      00032D CD 02 9E         [ 4]  817 	call move
      000330 90 CE 00 1D      [ 2]  818 	ldw y,txtend 
      000334 72 F2 01         [ 2]  819 	subw y,(LLEN,sp)
      000337 90 CF 00 1D      [ 2]  820 	ldw txtend,y  
      00033B                        821 	_drop VSIZE     
      00033B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00033D 81               [ 4]  822 	ret 
                                    823 
                                    824 
                                    825 ;---------------------------------------------
                                    826 ; create a gap in text area 
                                    827 ; input:
                                    828 ;    X 			addr gap start 
                                    829 ;    Y 			gap length 
                                    830 ; output:
                                    831 ;    X 			addr gap start 
                                    832 ;--------------------------------------------
                           000001   833 	DEST=1
                           000003   834 	SRC=3
                           000005   835 	LEN=5
                           000006   836 	VSIZE=6 
      00033E                        837 create_gap:
      00033E                        838 	_vars VSIZE
      00033E 52 06            [ 2]    1     sub sp,#VSIZE 
      000340 C3 00 1D         [ 2]  839 	cpw x,txtend 
      000343 2A 27            [ 1]  840 	jrpl 9$ ; no need for a gap since at end of text.
      000345 1F 03            [ 2]  841 	ldw (SRC,sp),x 
      000347 17 05            [ 2]  842 	ldw (LEN,sp),y 
      000349 90 CF 00 09      [ 2]  843 	ldw acc16,y 
      00034D 90 93            [ 1]  844 	ldw y,x ; SRC
      00034F 72 BB 00 09      [ 2]  845 	addw x,acc16  
      000353 1F 01            [ 2]  846 	ldw (DEST,sp),x 
                                    847 ;compute size to move 	
      000355 CE 00 1D         [ 2]  848 	ldw x,txtend 
      000358 72 F0 03         [ 2]  849 	subw x,(SRC,sp)
      00035B CF 00 09         [ 2]  850 	ldw acc16,x
      00035E 1E 01            [ 2]  851 	ldw x,(DEST,sp) 
      000360 CD 02 9E         [ 4]  852 	call move
      000363 CE 00 1D         [ 2]  853 	ldw x,txtend
      000366 72 FB 05         [ 2]  854 	addw x,(LEN,sp)
      000369 CF 00 1D         [ 2]  855 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00036C                        856 9$:	_drop VSIZE 
      00036C 5B 06            [ 2]    1     addw sp,#VSIZE 
      00036E 81               [ 4]  857 	ret 
                                    858 
                                    859 
                                    860 ;--------------------------------------------
                                    861 ; insert line in tib into text area 
                                    862 ; first search for already existing 
                                    863 ; replace existing 
                                    864 ; if strlen(tib)==0 delete existing 
                                    865 ; input:
                                    866 ;   X 				line number 
                                    867 ;   tib[in.w]  		text to insert  
                                    868 ; output:
                                    869 ;   none
                                    870 ;---------------------------------------------
                           000001   871 	DEST=1  ; text area insertion address 
                           000003   872 	SRC=3   ; str to insert address 
                           000005   873 	LINENO=5 ; line number 
                           000007   874 	LLEN=7 ; line length 
                           000008   875 	VSIZE=8  
      00036F                        876 insert_line:
      00036F                        877 	_vars VSIZE 
      00036F 52 08            [ 2]    1     sub sp,#VSIZE 
      000371 A3 00 00         [ 2]  878 	cpw x,#0  
      000374 22 03            [ 1]  879 	jrugt 0$ 
      000376 CC 05 FB         [ 2]  880 	jp syntax_error ; negative line number 
      000379                        881 0$: 
      000379 1F 05            [ 2]  882 	ldw (LINENO,sp),x 
      00037B AE 16 C8         [ 2]  883 	ldw x,#tib 
      00037E 72 BB 00 00      [ 2]  884 	addw x,in.w 
      000382 1F 03            [ 2]  885 	ldw (SRC,sp),x 
      000384 CD 02 72         [ 4]  886 	call strlen
      000387 5D               [ 2]  887 	tnzw x 
      000388 27 01            [ 1]  888 	jreq 1$
      00038A 5C               [ 1]  889 	incw x 
      00038B 1F 07            [ 2]  890 1$:	ldw (LLEN,sp),x
      00038D 1E 05            [ 2]  891 	ldw x,(LINENO,sp)
      00038F CD 02 E0         [ 4]  892 	call search_lineno 
      000392 5D               [ 2]  893 	tnzw x 
      000393 26 04            [ 1]  894 	jrne 2$
                                    895 ; line doesn't exit 	
      000395 17 01            [ 2]  896 	ldw (DEST,sp),y 
      000397 20 05            [ 2]  897 	jra 3$
                                    898 ; line exit delete it.	
      000399 1F 01            [ 2]  899 2$: ldw (DEST,sp),x 
      00039B CD 03 0F         [ 4]  900 	call del_line
                                    901 ; leave or insert new line if LLEN>0
      00039E                        902 3$: 
                                    903 ; check for available space 
      00039E CD 12 27         [ 4]  904 	call size 
      0003A1 1D 00 03         [ 2]  905 	subw x,#3 
      0003A4 72 F0 07         [ 2]  906     subw x,(LLEN,sp)
      0003A7 2A 05            [ 1]  907 	jrpl 31$
      0003A9 A6 01            [ 1]  908 	ld a,#ERR_MEM_FULL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003AB CC 05 FD         [ 2]  909 	jp tb_error 
      0003AE                        910 31$:	
      0003AE 0D 08            [ 1]  911 	tnz (LLEN+1,sp)
      0003B0 27 34            [ 1]  912 	jreq insert_ln_exit ; empty line forget it.
      0003B2 1E 01            [ 2]  913 	ldw x,(DEST,sp)
      0003B4 C3 00 1D         [ 2]  914 	cpw x,txtend 
      0003B7 2A 0B            [ 1]  915 	jrpl 4$ 
                                    916 ; must create a gap 
      0003B9 16 07            [ 2]  917 	ldw y,(LLEN,sp)
      0003BB 72 A9 00 03      [ 2]  918 	addw y,#3 ; space for lineno and linelen 
      0003BF CD 03 3E         [ 4]  919 	call create_gap 
      0003C2 20 11            [ 2]  920 	jra 5$ 
      0003C4                        921 4$: ; insert at end. 
      0003C4 90 CE 00 1D      [ 2]  922 	ldw y,txtend
      0003C8 17 01            [ 2]  923 	ldw (DEST,sp),y
      0003CA 72 F9 07         [ 2]  924 	addw y,(LLEN,sp)
      0003CD 72 A9 00 03      [ 2]  925 	addw y,#3 
      0003D1 90 CF 00 1D      [ 2]  926 	ldw txtend,y  
      0003D5                        927 5$:	
      0003D5 1E 01            [ 2]  928 	ldw x,(DEST,sp) ; dest address 
      0003D7 16 05            [ 2]  929 	ldw y,(LINENO,sp) ; line number 
      0003D9 FF               [ 2]  930 	ldw (x),y 
      0003DA 1C 00 02         [ 2]  931 	addw x,#2
      0003DD 7B 08            [ 1]  932 	ld a,(LLEN+1,sp)
      0003DF F7               [ 1]  933 	ld (x),a 
      0003E0 5C               [ 1]  934 	incw x 
      0003E1 16 03            [ 2]  935 	ldw y,(SRC,sp) ; src addr  
      0003E3 CD 02 90         [ 4]  936 	call strcpy   
      0003E6                        937 insert_ln_exit:	
      0003E6                        938 	_drop VSIZE
      0003E6 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003E8 81               [ 4]  939 	ret
                                    940 
                                    941 ;------------------------------------
                                    942 ;  set all variables to zero 
                                    943 ; input:
                                    944 ;   none 
                                    945 ; output:
                                    946 ;	none
                                    947 ;------------------------------------
      0003E9                        948 clear_vars:
      0003E9 AE 00 26         [ 2]  949 	ldw x,#vars 
      0003EC 90 AE 00 34      [ 2]  950 	ldw y,#2*26 
      0003F0 7F               [ 1]  951 1$:	clr (x)
      0003F1 5C               [ 1]  952 	incw x 
      0003F2 90 5A            [ 2]  953 	decw y 
      0003F4 26 FA            [ 1]  954 	jrne 1$
      0003F6 81               [ 4]  955 	ret 
                                    956 
                                    957 ;-------------------------------------
                                    958 ; check if A is a letter
                                    959 ; input:
                                    960 ;   A 			character to test 
                                    961 ; output:
                                    962 ;   C flag      1 true, 0 false 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    963 ;-------------------------------------
      0003F7                        964 is_alpha:
      0003F7 A1 41            [ 1]  965 	cp a,#'A 
      0003F9 8C               [ 1]  966 	ccf
      0003FA 24 0B            [ 1]  967 	jrnc 9$ 
      0003FC A1 5B            [ 1]  968 	cp a,#'Z+1 
      0003FE 25 07            [ 1]  969 	jrc 9$ 
      000400 A1 61            [ 1]  970 	cp a,#'a 
      000402 8C               [ 1]  971 	ccf 
      000403 24 02            [ 1]  972 	jrnc 9$
      000405 A1 7B            [ 1]  973 	cp a,#'z+1   
      000407 81               [ 4]  974 9$: ret 	
                                    975 
                                    976 ;-------------------------------------
                                    977 ;  program initialization entry point 
                                    978 ;-------------------------------------
                           000001   979 	MAJOR=1
                           000000   980 	MINOR=0
      000408 0A 0A 54 69 6E 79 20   981 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00044E                        982 cold_start:
                                    983 ;set stack 
      00044E AE 17 FF         [ 2]  984 	ldw x,#STACK_EMPTY
      000451 94               [ 1]  985 	ldw sp,x   
                                    986 ; clear all ram 
      000452 7F               [ 1]  987 0$: clr (x)
      000453 5A               [ 2]  988 	decw x 
      000454 26 FC            [ 1]  989 	jrne 0$
                                    990 ; activate pull up on all inputs 
      000456 A6 FF            [ 1]  991 	ld a,#255 
      000458 C7 50 03         [ 1]  992 	ld PA_CR1,a 
      00045B C7 50 08         [ 1]  993 	ld PB_CR1,a 
      00045E C7 50 0D         [ 1]  994 	ld PC_CR1,a 
      000461 C7 50 12         [ 1]  995 	ld PD_CR1,a 
      000464 C7 50 17         [ 1]  996 	ld PE_CR1,a 
      000467 C7 50 1C         [ 1]  997 	ld PF_CR1,a 
      00046A C7 50 21         [ 1]  998 	ld PG_CR1,a 
      00046D C7 50 2B         [ 1]  999 	ld PI_CR1,a 
                                   1000 ; select internal clock no divisor: 16 Mhz 	
      000470 A6 E1            [ 1] 1001 	ld a,#CLK_SWR_HSI 
      000472 5F               [ 1] 1002 	clrw x  
      000473 CD 00 99         [ 4] 1003     call clock_init 
      000476 CD 00 AF         [ 4] 1004 	call timer4_init
                                   1005 ; UART3 at 115200 BAUD
      000479 CD 01 74         [ 4] 1006 	call uart3_init
                                   1007 ; activate PE_4 (user button interrupt)
      00047C 72 18 50 18      [ 1] 1008     bset PE_CR2,#USR_BTN_BIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1009 ; display system information
      000480 AE 04 08         [ 2] 1010 	ldw x,#software 
      000483 CD 01 B0         [ 4] 1011 	call puts 
      000486 A6 01            [ 1] 1012 	ld a,#MAJOR 
      000488 C7 00 0A         [ 1] 1013 	ld acc8,a 
      00048B 5F               [ 1] 1014 	clrw x 
      00048C CF 00 08         [ 2] 1015 	ldw acc24,x 
      00048F A6 0A            [ 1] 1016 	ld a,#10 
      000491 CD 08 06         [ 4] 1017 	call prti24 
      000494 A6 2E            [ 1] 1018 	ld a,#'.
      000496 CD 01 9E         [ 4] 1019 	call putc 
      000499 A6 00            [ 1] 1020 	ld a,#MINOR 
      00049B C7 00 0A         [ 1] 1021 	ld acc8,a 
      00049E 5F               [ 1] 1022 	clrw x 
      00049F CF 00 08         [ 2] 1023 	ldw acc24,x 
      0004A2 A6 0A            [ 1] 1024 	ld a,#10 
      0004A4 CD 08 06         [ 4] 1025 	call prti24 
      0004A7 A6 0D            [ 1] 1026 	ld a,#CR 
      0004A9 CD 01 9E         [ 4] 1027 	call putc 
      0004AC CD 17 86         [ 4] 1028 	call seek_fdrive 
                                   1029 ; configure LED2 pin 
      0004AF 72 1A 50 0D      [ 1] 1030     bset PC_CR1,#LED2_BIT
      0004B3 72 1A 50 0E      [ 1] 1031     bset PC_CR2,#LED2_BIT
      0004B7 72 1A 50 0C      [ 1] 1032     bset PC_DDR,#LED2_BIT
      0004BB 9A               [ 1] 1033 	rim 
      0004BC AE 16 C8         [ 2] 1034 	ldw x,#tib
      0004BF CF 00 20         [ 2] 1035 	ldw array_addr,x 
      0004C2 72 5C 00 10      [ 1] 1036 	inc seedy+1 
      0004C6 72 5C 00 0E      [ 1] 1037 	inc seedx+1 
      0004CA CD 04 D9         [ 4] 1038 	call clear_basic
      0004CD CD 12 31         [ 4] 1039 	call ubound 
      0004D0 CD 0E 89         [ 4] 1040 	call dpop 
      0004D3 CF 00 22         [ 2] 1041 	ldw array_size,x 
      0004D6 CC 06 57         [ 2] 1042     jp warm_start 
                                   1043 
                                   1044 ;---------------------------
                                   1045 ; reset BASIC text variables 
                                   1046 ; and clear variables 
                                   1047 ;---------------------------
      0004D9                       1048 clear_basic:
      0004D9 5F               [ 1] 1049 	clrw x 
      0004DA CF 00 05         [ 2] 1050 	ldw lineno,x
      0004DD 72 5F 00 02      [ 1] 1051 	clr count 
      0004E1 AE 00 5A         [ 2] 1052 	ldw x,#free_ram 
      0004E4 CF 00 1B         [ 2] 1053 	ldw txtbgn,x 
      0004E7 CF 00 1D         [ 2] 1054 	ldw txtend,x 
      0004EA CD 03 E9         [ 4] 1055 	call clear_vars 
      0004ED 81               [ 4] 1056 	ret 
                                   1057 
                                   1058 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1059 ;;   Tiny BASIC error messages     ;;
                                   1060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EE                       1061 err_msg:
      0004EE 00 00 05 06 05 14 05  1062 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             23 05 3D 05 4D
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004FA 05 64 05 7B 05 96 05  1063 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             A8 05 BA
      000504 05 C7                 1064 	.word err_no_access 
                                   1065 
      000506 0A 4D 65 6D 6F 72 79  1066 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      000514 0A 73 79 6E 74 61 78  1067 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      000523 0A 6D 61 74 68 20 6F  1068 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      00053D 0A 64 69 76 69 73 69  1069 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      00054D 0A 69 6E 76 61 6C 69  1070 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      000564 0A 72 75 6E 20 74 69  1071 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      00057B 0A 63 6F 6D 6D 61 6E  1072 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      000596 0A 64 75 70 6C 69 63  1073 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      0005A8 0A 46 69 6C 65 20 6E  1074 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0005BA 0A 62 61 64 20 76 61  1075 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0005C7 0A 46 69 6C 65 20 69  1076 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1077 
      0005FB                       1078 syntax_error:
      0005FB A6 02            [ 1] 1079 	ld a,#ERR_SYNTAX 
                                   1080 
      0005FD                       1081 tb_error:
      0005FD AE 04 EE         [ 2] 1082 	ldw x, #err_msg 
      000600 72 5F 00 09      [ 1] 1083 	clr acc16 
      000604 48               [ 1] 1084 	sll a
      000605 72 59 00 09      [ 1] 1085 	rlc acc16  
      000609 C7 00 0A         [ 1] 1086 	ld acc8, a 
      00060C 72 BB 00 09      [ 2] 1087 	addw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000610 FE               [ 2] 1088 	ldw x,(x)
      000611 CD 01 B0         [ 4] 1089 	call puts
      000614 CE 00 05         [ 2] 1090 	ldw x,lineno 
      000617 5D               [ 2] 1091 	tnzw x 
      000618 27 0B            [ 1] 1092 	jreq 2$
      00061A 35 06 00 25      [ 1] 1093 	mov tab_width,#6
      00061E 35 0A 00 07      [ 1] 1094 	mov base,#10 
      000622 CD 08 4E         [ 4] 1095 	call print_int 
      000625                       1096 2$:	 
      000625 CE 00 03         [ 2] 1097 	ldw x,basicptr   
      000628 C6 00 05         [ 1] 1098 	ld a,lineno 
      00062B CA 00 06         [ 1] 1099 	or a,lineno+1
      00062E 27 03            [ 1] 1100 	jreq 3$
      000630 1C 00 03         [ 2] 1101 	addw x,#3 
      000633 CD 01 B0         [ 4] 1102 3$:	call puts 
      000636 A6 0D            [ 1] 1103 	ld a,#CR 
      000638 CD 01 9E         [ 4] 1104 	call putc 
      00063B 5F               [ 1] 1105 	clrw x 
      00063C C6 00 05         [ 1] 1106 	ld a,lineno 
      00063F CA 00 06         [ 1] 1107 	or a,lineno+1
      000642 27 03            [ 1] 1108 	jreq 4$
      000644 AE 00 03         [ 2] 1109 	ldw x,#3 
      000647 72 BB 00 00      [ 2] 1110 4$:	addw x,in.w 
      00064B CD 01 D8         [ 4] 1111 	call spaces
      00064E A6 5E            [ 1] 1112 	ld a,#'^ 
      000650 CD 01 9E         [ 4] 1113 	call putc 
      000653 AE 17 FF         [ 2] 1114 1$: ldw x,#STACK_EMPTY 
      000656 94               [ 1] 1115     ldw sp,x
      000657                       1116 warm_start:
      000657 72 5F 00 24      [ 1] 1117 	clr flags 
      00065B 72 5F 00 1F      [ 1] 1118 	clr loop_depth 
      00065F AE 17 80         [ 2] 1119 	ldw x,#dstack_unf 
      000662 CF 00 19         [ 2] 1120 	ldw dstkptr,x 
      000665 35 04 00 25      [ 1] 1121 	mov tab_width,#TAB_WIDTH 
      000669 35 0A 00 07      [ 1] 1122 	mov base,#10 
      00066D 5F               [ 1] 1123 	clrw x 
      00066E CF 00 05         [ 2] 1124 	ldw lineno,x 
      000671 AE 16 C8         [ 2] 1125 	ldw x,#tib 
      000674 CF 00 03         [ 2] 1126 	ldw basicptr,x 
                                   1127 ;----------------------------
                                   1128 ;   BASIC interpreter
                                   1129 ;----------------------------
      000677                       1130 interp:
      000677 72 5F 00 00      [ 1] 1131 	clr in.w
      00067B 72 01 00 24 2C   [ 2] 1132 	btjf flags,#FRUN,4$ 
                                   1133 ; running program
                                   1134 ; goto next basic line 
      000680 CE 00 03         [ 2] 1135 	ldw x,basicptr
      000683 E6 02            [ 1] 1136 	ld a,(2,x) ; line length 
      000685 C7 00 0A         [ 1] 1137 	ld acc8,a 
      000688 72 5F 00 09      [ 1] 1138 	clr acc16 
      00068C 1C 00 03         [ 2] 1139 	addw x,#3 
      00068F 72 BB 00 09      [ 2] 1140 	addw x,acc16
      000693 C3 00 1D         [ 2] 1141 	cpw x,txtend 
      000696 2A BF            [ 1] 1142 	jrpl warm_start
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000698 CF 00 03         [ 2] 1143 	ldw basicptr,x ; start of next line  
      00069B E6 02            [ 1] 1144 	ld a,(2,x)
      00069D AB 02            [ 1] 1145 	add a,#2 ; because 'in' start at 3.
      00069F C7 00 02         [ 1] 1146 	ld count,a 
      0006A2 FE               [ 2] 1147 	ldw x,(x) ; line no 
      0006A3 CF 00 05         [ 2] 1148 	ldw lineno,x 
      0006A6 35 03 00 01      [ 1] 1149 	mov in,#3 ; skip first 3 bytes of line 
      0006AA 20 11            [ 2] 1150 	jra interp_loop 
      0006AC                       1151 4$: ; commande line mode 	
      0006AC 72 5F 00 01      [ 1] 1152 	clr in 
      0006B0 A6 0D            [ 1] 1153 	ld a,#CR 
      0006B2 CD 01 9E         [ 4] 1154 	call putc 
      0006B5 A6 3E            [ 1] 1155 	ld a,#'> 
      0006B7 CD 01 9E         [ 4] 1156 	call putc 
      0006BA CD 09 3C         [ 4] 1157 	call readln
      0006BD                       1158 interp_loop:  
      0006BD C6 00 01         [ 1] 1159 	ld a,in 
      0006C0 C1 00 02         [ 1] 1160 	cp a,count 
      0006C3 2A B2            [ 1] 1161 	jrpl interp
      0006C5 CD 0B E6         [ 4] 1162 	call get_token
      0006C8 A1 01            [ 1] 1163 	cp a,#TK_COLON 
      0006CA 27 F1            [ 1] 1164 	jreq interp_loop 
      0006CC A1 00            [ 1] 1165 	cp a,#TK_NONE 
      0006CE 27 A7            [ 1] 1166 	jreq interp 
      0006D0                       1167 1$:
      0006D0 A1 02            [ 1] 1168 	cp a,#TK_VAR
      0006D2 26 05            [ 1] 1169 	jrne 2$
      0006D4 CD 12 49         [ 4] 1170 	call let02  
      0006D7 20 E4            [ 2] 1171 	jra interp_loop 
      0006D9                       1172 2$:	
      0006D9 A1 03            [ 1] 1173 	cp a,#TK_ARRAY 
      0006DB 26 08            [ 1] 1174 	jrne 3$
      0006DD CD 10 9E         [ 4] 1175 	call get_array_element
      0006E0 CD 12 49         [ 4] 1176 	call let02 
      0006E3 20 D8            [ 2] 1177 	jra interp_loop 
      0006E5                       1178 3$:
      0006E5 A1 07            [ 1] 1179 	cp a,#TK_CMD
      0006E7 26 03            [ 1] 1180 	jrne 4$
      0006E9 FD               [ 4] 1181 	call (x) 
      0006EA 20 D1            [ 2] 1182 	jra interp_loop 
      0006EC                       1183 4$:	
      0006EC A1 0A            [ 1] 1184 	cp a,#TK_INTGR
      0006EE 26 06            [ 1] 1185 	jrne 5$
      0006F0 CD 03 6F         [ 4] 1186 	call insert_line 
      0006F3 CC 06 77         [ 2] 1187 	jp interp
      0006F6                       1188 5$: 
      0006F6 CC 05 FB         [ 2] 1189 	jp syntax_error 
                                   1190 
                                   1191 ;----------------------------------------
                                   1192 ;   DEBUG support functions
                                   1193 ;----------------------------------------
                           000001  1194 .if DEBUG 
                                   1195 ; turn LED on 
      0006F9                       1196 ledon:
      0006F9 72 1A 50 0A      [ 1] 1197     bset PC_ODR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0006FD 81               [ 4] 1198     ret 
                                   1199 
                                   1200 ; turn LED off 
      0006FE                       1201 ledoff:
      0006FE 72 1B 50 0A      [ 1] 1202     bres PC_ODR,#LED2_BIT 
      000702 81               [ 4] 1203     ret 
                                   1204 
                                   1205 ; invert LED status 
      000703                       1206 ledtoggle:
      000703 A6 20            [ 1] 1207     ld a,#LED2_MASK
      000705 C8 50 0A         [ 1] 1208     xor a,PC_ODR
      000708 C7 50 0A         [ 1] 1209     ld PC_ODR,a
      00070B 81               [ 4] 1210     ret 
                                   1211 
      00070C                       1212 left_paren:
      00070C A6 20            [ 1] 1213 	ld a,#SPACE 
      00070E CD 01 9E         [ 4] 1214 	call putc
      000711 A6 28            [ 1] 1215 	ld a,#'( 
      000713 CD 01 9E         [ 4] 1216 	call putc 	
      000716 81               [ 4] 1217 	ret 
                                   1218 
                                   1219 ;------------------------------
                                   1220 ; print 8 bit register 
                                   1221 ; input:
                                   1222 ;   X  point to register name 
                                   1223 ;   A  register value to print 
                                   1224 ; output:
                                   1225 ;   none
                                   1226 ;------------------------------- 
      000717                       1227 prt_reg8:
      000717 88               [ 1] 1228 	push a 
      000718 CD 01 B0         [ 4] 1229 	call puts 
      00071B 7B 01            [ 1] 1230 	ld a,(1,sp) 
      00071D C7 00 0A         [ 1] 1231 	ld acc8,a 
      000720 5F               [ 1] 1232 	clrw x 
      000721 97               [ 1] 1233 	ld xl,a 
      000722 35 10 00 07      [ 1] 1234 	mov base,#16
      000726 CD 08 4E         [ 4] 1235 	call print_int 
      000729 CD 07 0C         [ 4] 1236 	call left_paren 
      00072C 84               [ 1] 1237 	pop a 
      00072D 5F               [ 1] 1238 	clrw x 
      00072E 97               [ 1] 1239 	ld xl,a 
      00072F 35 0A 00 07      [ 1] 1240 	mov base,#10 
      000733 CD 08 4E         [ 4] 1241 	call print_int  
      000736 A6 29            [ 1] 1242 	ld a,#') 
      000738 CD 01 9E         [ 4] 1243 	call putc
      00073B 81               [ 4] 1244 	ret
                                   1245 
                                   1246 ;--------------------------------
                                   1247 ; print 16 bits register 
                                   1248 ; input:
                                   1249 ;   X   point register name 
                                   1250 ;   Y   register value to print 
                                   1251 ; output:
                                   1252 ;  none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1253 ;--------------------------------
      00073C                       1254 prt_reg16: 
      00073C 90 89            [ 2] 1255 	pushw y 
      00073E CD 01 B0         [ 4] 1256 	call puts 
      000741 1E 01            [ 2] 1257 	ldw x,(1,sp) 
      000743 35 10 00 07      [ 1] 1258 	mov base,#16 
      000747 CD 08 4E         [ 4] 1259 	call print_int  
      00074A CD 07 0C         [ 4] 1260 	call left_paren 
      00074D 85               [ 2] 1261 	popw x 
      00074E 35 0A 00 07      [ 1] 1262 	mov base,#10 
      000752 CD 08 4E         [ 4] 1263 	call print_int  
      000755 A6 29            [ 1] 1264 	ld a,#') 
      000757 CD 01 9E         [ 4] 1265 	call putc
      00075A 81               [ 4] 1266 	ret 
                                   1267 
                                   1268 ;------------------------------------
                                   1269 ; print registers contents saved on
                                   1270 ; stack by trap interrupt.
                                   1271 ;------------------------------------
      00075B                       1272 print_registers:
      00075B AE 07 AE         [ 2] 1273 	ldw x,#STATES
      00075E CD 01 B0         [ 4] 1274 	call puts
                                   1275 ; print EPC 
      000761 AE 07 EB         [ 2] 1276 	ldw x, #REG_EPC
      000764 CD 01 B0         [ 4] 1277 	call puts 
      000767 7B 0B            [ 1] 1278 	ld a, (11,sp)
      000769 C7 00 0A         [ 1] 1279 	ld acc8,a 
      00076C 7B 0A            [ 1] 1280 	ld a, (10,sp) 
      00076E C7 00 09         [ 1] 1281 	ld acc16,a 
      000771 7B 09            [ 1] 1282 	ld a,(9,sp) 
      000773 C7 00 08         [ 1] 1283 	ld acc24,a
      000776 5F               [ 1] 1284 	clrw x  
      000777 A6 10            [ 1] 1285 	ld a,#16
      000779 CD 08 06         [ 4] 1286 	call prti24  
                                   1287 ; print X
      00077C AE 07 F4         [ 2] 1288 	ldw x,#REG_X
      00077F 16 05            [ 2] 1289 	ldw y,(5,sp)
      000781 CD 07 3C         [ 4] 1290 	call prt_reg16  
                                   1291 ; print Y 
      000784 AE 07 F0         [ 2] 1292 	ldw x,#REG_Y
      000787 16 07            [ 2] 1293 	ldw y, (7,sp)
      000789 CD 07 3C         [ 4] 1294 	call prt_reg16  
                                   1295 ; print A 
      00078C AE 07 F8         [ 2] 1296 	ldw x,#REG_A
      00078F 7B 04            [ 1] 1297 	ld a, (4,sp) 
      000791 CD 07 17         [ 4] 1298 	call prt_reg8
                                   1299 ; print CC 
      000794 AE 07 FC         [ 2] 1300 	ldw x,#REG_CC 
      000797 7B 03            [ 1] 1301 	ld a, (3,sp) 
      000799 CD 07 17         [ 4] 1302 	call prt_reg8 
                                   1303 ; print SP 
      00079C AE 08 01         [ 2] 1304 	ldw x,#REG_SP
      00079F 90 96            [ 1] 1305 	ldw y,sp 
      0007A1 72 A9 00 0C      [ 2] 1306 	addw y,#12
      0007A5 CD 07 3C         [ 4] 1307 	call prt_reg16  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0007A8 A6 0A            [ 1] 1308 	ld a,#'\n' 
      0007AA CD 01 9E         [ 4] 1309 	call putc
      0007AD 81               [ 4] 1310 	ret
                                   1311 
      0007AE 0A 52 65 67 69 73 74  1312 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0007EB 45 50 43 3A 00        1313 REG_EPC: .asciz "EPC:"
      0007F0 0A 59 3A 00           1314 REG_Y:   .asciz "\nY:" 
      0007F4 0A 58 3A 00           1315 REG_X:   .asciz "\nX:"
      0007F8 0A 41 3A 00           1316 REG_A:   .asciz "\nA:" 
      0007FC 0A 43 43 3A 00        1317 REG_CC:  .asciz "\nCC:"
      000801 0A 53 50 3A 00        1318 REG_SP:  .asciz "\nSP:"
                                   1319 .endif ; DEBUG 
                                   1320 
                                   1321 ;------------------------------------
                                   1322 ; print integer in acc24 
                                   1323 ; input:
                                   1324 ;	acc24 		integer to print 
                                   1325 ;	A 			numerical base for conversion 
                                   1326 ;               if bit 7 is set add a space at print end.
                                   1327 ;   XL 			field width, 0 -> no fill.
                                   1328 ;  output:
                                   1329 ;    none 
                                   1330 ;------------------------------------
                           000001  1331 	WIDTH = 1
                           000002  1332 	BASE = 2
                           000003  1333 	ADD_SPACE=3 ; add a space after number 
                           000003  1334 	VSIZE = 3
      000806                       1335 prti24:
      000806                       1336 	_vars VSIZE 
      000806 52 03            [ 2]    1     sub sp,#VSIZE 
      000808 0F 03            [ 1] 1337 	clr (ADD_SPACE,sp)
      00080A A5 80            [ 1] 1338 	bcp a,#0x80 
      00080C 27 02            [ 1] 1339 	jreq 0$ 
      00080E 03 03            [ 1] 1340 	cpl (ADD_SPACE,sp)
      000810 A4 1F            [ 1] 1341 0$:	and a,#31 
      000812 6B 02            [ 1] 1342 	ld (BASE,sp),a
      000814 9F               [ 1] 1343 	ld a,xl
      000815 6B 01            [ 1] 1344 	ld (WIDTH,sp),a 
      000817 7B 02            [ 1] 1345 	ld a, (BASE,sp)  
      000819 CD 08 AA         [ 4] 1346     call itoa  ; conversion entier en  .asciz
      00081C 7B 01            [ 1] 1347 1$: ld a,(WIDTH,sp)
      00081E 27 1F            [ 1] 1348 	jreq 4$
      000820 C7 00 0A         [ 1] 1349 	ld acc8,a 
      000823 89               [ 2] 1350 	pushw x 
      000824 CD 02 72         [ 4] 1351 	call strlen 
      000827 9F               [ 1] 1352 	ld a,xl 
      000828 85               [ 2] 1353 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000829 31 00 0A         [ 3] 1354 	exg a,acc8 
      00082C C0 00 0A         [ 1] 1355 	sub a,acc8 
      00082F 2B 0E            [ 1] 1356 	jrmi 4$
      000831 6B 01            [ 1] 1357 	ld (WIDTH,sp),a 
      000833 A6 20            [ 1] 1358 	ld  a,#SPACE
      000835 0D 01            [ 1] 1359 3$: tnz (WIDTH,sp)
      000837 27 06            [ 1] 1360 	jreq 4$
      000839 5A               [ 2] 1361 	decw x 
      00083A F7               [ 1] 1362 	ld (x),a 
      00083B 0A 01            [ 1] 1363 	dec (WIDTH,sp) 
      00083D 20 F6            [ 2] 1364 	jra 3$
      00083F                       1365 4$: 
      00083F CD 01 B0         [ 4] 1366 	call puts 
      000842 0D 03            [ 1] 1367 	tnz (ADD_SPACE,sp)
      000844 27 05            [ 1] 1368 	jreq 5$
      000846 A6 20            [ 1] 1369     ld a,#SPACE 
      000848 CD 01 9E         [ 4] 1370 	call putc 
      00084B                       1371 5$: _drop VSIZE 
      00084B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00084D 81               [ 4] 1372     ret	
                                   1373 
                                   1374 ;-----------------------------------
                                   1375 ; print a 16 bit integer 
                                   1376 ; using variable 'base' as conversion
                                   1377 ; format.
                                   1378 ; input:
                                   1379 ;   X       integer to print 
                                   1380 ;   base    conversion base 
                                   1381 ; output:
                                   1382 ;   none 
                                   1383 ;-----------------------------------
                           000001  1384 	SIGN=1
                           000001  1385 	VSIZE=1
      00084E                       1386 print_int: 
      00084E                       1387 	_vars VSIZE 
      00084E 52 01            [ 2]    1     sub sp,#VSIZE 
      000850 0F 01            [ 1] 1388 	clr (SIGN,sp)
      000852 90 AE 17 3F      [ 2] 1389 	ldw y,#pad+PAD_SIZE-1 
      000856 90 7F            [ 1] 1390 	clr (y)
      000858 C6 00 07         [ 1] 1391 	ld a,base  
      00085B A1 0A            [ 1] 1392 	cp a,#10 
      00085D 26 06            [ 1] 1393 	jrne 1$ 
      00085F 5D               [ 2] 1394 	tnzw x 
      000860 2A 03            [ 1] 1395 	jrpl 1$ 
      000862 03 01            [ 1] 1396 	cpl (SIGN,sp)
      000864 50               [ 2] 1397 	negw x 	 
      000865                       1398 1$:	
      000865 C6 00 07         [ 1] 1399 	ld a,base 
      000868 62               [ 2] 1400 	div x,a 
      000869 AB 30            [ 1] 1401 	add a,#'0 
      00086B A1 3A            [ 1] 1402 	cp a,#'9+1 
      00086D 2B 02            [ 1] 1403 	jrmi 2$ 
      00086F AB 07            [ 1] 1404 	add a,#7 
      000871 90 5A            [ 2] 1405 2$: decw y 
      000873 90 F7            [ 1] 1406 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000875 5D               [ 2] 1407 	tnzw x 
      000876 26 ED            [ 1] 1408 	jrne 1$ 
      000878 A6 10            [ 1] 1409 	ld a,#16 
      00087A C1 00 07         [ 1] 1410 	cp a,base 
      00087D 26 08            [ 1] 1411 	jrne 3$
      00087F A6 24            [ 1] 1412 	ld a,#'$
      000881 90 5A            [ 2] 1413 	decw y  
      000883 90 F7            [ 1] 1414 	ld (y),a
      000885 20 0A            [ 2] 1415 	jra 9$ 
      000887 0D 01            [ 1] 1416 3$: tnz (SIGN,sp)
      000889 27 06            [ 1] 1417 	jreq 9$ 
      00088B A6 2D            [ 1] 1418 	ld a,#'-
      00088D 90 5A            [ 2] 1419 	decw y  
      00088F 90 F7            [ 1] 1420 	ld (y),a
      000891                       1421 9$:	
      000891 93               [ 1] 1422 	ldw x,y 
      000892 1D 17 3F         [ 2] 1423 	subw x,#pad+PAD_SIZE-1 
      000895 50               [ 2] 1424 	negw x  
      000896                       1425 10$:
      000896 90 5A            [ 2] 1426 	decw y 
      000898 A6 20            [ 1] 1427 	ld a,#SPACE 
      00089A 90 F7            [ 1] 1428 	ld (y),a
      00089C 5C               [ 1] 1429 	incw x 
      00089D 9F               [ 1] 1430 	ld a,xl 
      00089E C1 00 25         [ 1] 1431 	cp a,tab_width
      0008A1 2B F3            [ 1] 1432 	jrmi 10$ 
      0008A3                       1433 12$:
      0008A3 93               [ 1] 1434     ldw x,y 
      0008A4 CD 01 B0         [ 4] 1435 	call puts  
      0008A7                       1436 	_drop VSIZE 
      0008A7 5B 01            [ 2]    1     addw sp,#VSIZE 
      0008A9 81               [ 4] 1437 	ret 
                                   1438 
                                   1439 ;------------------------------------
                                   1440 ; convert integer in acc24 to string
                                   1441 ; input:
                                   1442 ;   A	  	base
                                   1443 ;	acc24	integer to convert
                                   1444 ; output:
                                   1445 ;   X  		pointer to string
                                   1446 ;------------------------------------
                           000001  1447 	SIGN=1  ; integer sign 
                           000002  1448 	BASE=2  ; numeric base 
                           000002  1449 	VSIZE=2  ;locals size
      0008AA                       1450 itoa:
      0008AA 52 02            [ 2] 1451 	sub sp,#VSIZE
      0008AC 6B 02            [ 1] 1452 	ld (BASE,sp), a  ; base
      0008AE 0F 01            [ 1] 1453 	clr (SIGN,sp)    ; sign
      0008B0 A1 0A            [ 1] 1454 	cp a,#10
      0008B2 26 0A            [ 1] 1455 	jrne 1$
                                   1456 	; base 10 string display with negative sign if bit 23==1
      0008B4 72 0F 00 08 05   [ 2] 1457 	btjf acc24,#7,1$
      0008B9 03 01            [ 1] 1458 	cpl (SIGN,sp)
      0008BB CD 09 19         [ 4] 1459 	call neg_acc24
      0008BE                       1460 1$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1461 ; initialize string pointer 
      0008BE AE 17 3F         [ 2] 1462 	ldw x,#pad+PAD_SIZE-1
      0008C1 7F               [ 1] 1463 	clr (x)
      0008C2                       1464 itoa_loop:
      0008C2 7B 02            [ 1] 1465     ld a,(BASE,sp)
      0008C4 CD 08 F1         [ 4] 1466     call divu24_8 ; acc24/A 
      0008C7 AB 30            [ 1] 1467     add a,#'0  ; remainder of division
      0008C9 A1 3A            [ 1] 1468     cp a,#'9+1
      0008CB 2B 02            [ 1] 1469     jrmi 2$
      0008CD AB 07            [ 1] 1470     add a,#7 
      0008CF 5A               [ 2] 1471 2$: decw x
      0008D0 F7               [ 1] 1472     ld (x),a
                                   1473 	; if acc24==0 conversion done
      0008D1 C6 00 08         [ 1] 1474 	ld a,acc24
      0008D4 CA 00 09         [ 1] 1475 	or a,acc16
      0008D7 CA 00 0A         [ 1] 1476 	or a,acc8
      0008DA 26 E6            [ 1] 1477     jrne itoa_loop
                                   1478 	;conversion done, next add '$' or '-' as required
      0008DC 7B 02            [ 1] 1479 	ld a,(BASE,sp)
      0008DE A1 10            [ 1] 1480 	cp a,#16
      0008E0 27 08            [ 1] 1481 	jreq 8$
      0008E2 7B 01            [ 1] 1482 	ld a,(SIGN,sp)
      0008E4 27 08            [ 1] 1483     jreq 10$
      0008E6 A6 2D            [ 1] 1484     ld a,#'-
      0008E8 20 02            [ 2] 1485 	jra 9$ 
      0008EA A6 24            [ 1] 1486 8$: ld a,#'$ 
      0008EC 5A               [ 2] 1487 9$: decw x
      0008ED F7               [ 1] 1488     ld (x),a
      0008EE                       1489 10$:
      0008EE 5B 02            [ 2] 1490 	addw sp,#VSIZE
      0008F0 81               [ 4] 1491 	ret
                                   1492 
                                   1493 ;-------------------------------------
                                   1494 ; divide uint24_t by uint8_t
                                   1495 ; used to convert uint24_t to string
                                   1496 ; input:
                                   1497 ;	acc24	dividend
                                   1498 ;   A 		divisor
                                   1499 ; output:
                                   1500 ;   acc24	quotient
                                   1501 ;   A		remainder
                                   1502 ;------------------------------------- 
                                   1503 ; offset  on sp of arguments and locals
                           000001  1504 	U8   = 1   ; divisor on stack
                           000001  1505 	VSIZE =1
      0008F1                       1506 divu24_8:
      0008F1 89               [ 2] 1507 	pushw x ; save x
      0008F2 88               [ 1] 1508 	push a 
                                   1509 	; ld dividend UU:MM bytes in X
      0008F3 C6 00 08         [ 1] 1510 	ld a, acc24
      0008F6 95               [ 1] 1511 	ld xh,a
      0008F7 C6 00 09         [ 1] 1512 	ld a,acc24+1
      0008FA 97               [ 1] 1513 	ld xl,a
      0008FB 7B 01            [ 1] 1514 	ld a,(U8,SP) ; divisor
      0008FD 62               [ 2] 1515 	div x,a ; UU:MM/U8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0008FE 88               [ 1] 1516 	push a  ;save remainder
      0008FF 9E               [ 1] 1517 	ld a,xh
      000900 C7 00 08         [ 1] 1518 	ld acc24,a
      000903 9F               [ 1] 1519 	ld a,xl
      000904 C7 00 09         [ 1] 1520 	ld acc24+1,a
      000907 84               [ 1] 1521 	pop a
      000908 95               [ 1] 1522 	ld xh,a
      000909 C6 00 0A         [ 1] 1523 	ld a,acc24+2
      00090C 97               [ 1] 1524 	ld xl,a
      00090D 7B 01            [ 1] 1525 	ld a,(U8,sp) ; divisor
      00090F 62               [ 2] 1526 	div x,a  ; R:LL/U8
      000910 6B 01            [ 1] 1527 	ld (U8,sp),a ; save remainder
      000912 9F               [ 1] 1528 	ld a,xl
      000913 C7 00 0A         [ 1] 1529 	ld acc24+2,a
      000916 84               [ 1] 1530 	pop a
      000917 85               [ 2] 1531 	popw x
      000918 81               [ 4] 1532 	ret
                                   1533 
                                   1534 ;------------------------------------
                                   1535 ;  two's complement acc24
                                   1536 ;  input:
                                   1537 ;		acc24 variable
                                   1538 ;  output:
                                   1539 ;		acc24 variable
                                   1540 ;-------------------------------------
      000919                       1541 neg_acc24:
      000919 72 53 00 0A      [ 1] 1542 	cpl acc24+2
      00091D 72 53 00 09      [ 1] 1543 	cpl acc24+1
      000921 72 53 00 08      [ 1] 1544 	cpl acc24
      000925 A6 01            [ 1] 1545 	ld a,#1
      000927 CB 00 0A         [ 1] 1546 	add a,acc24+2
      00092A C7 00 0A         [ 1] 1547 	ld acc24+2,a
      00092D 4F               [ 1] 1548 	clr a
      00092E C9 00 09         [ 1] 1549 	adc a,acc24+1
      000931 C7 00 09         [ 1] 1550 	ld acc24+1,a 
      000934 4F               [ 1] 1551 	clr a 
      000935 C9 00 08         [ 1] 1552 	adc a,acc24 
      000938 C7 00 08         [ 1] 1553 	ld acc24,a 
      00093B 81               [ 4] 1554 	ret
                                   1555 
                                   1556 
                                   1557 ;------------------------------------
                                   1558 ; read a line of text from terminal
                                   1559 ; input:
                                   1560 ;	none
                                   1561 ; local variable on stack:
                                   1562 ;	LL  line length
                                   1563 ;   RXCHAR last received chaaracte 
                                   1564 ; output:
                                   1565 ;   text in tib  buffer
                                   1566 ;------------------------------------
                                   1567 	; local variables
                           000001  1568 	LL_HB=1
                           000001  1569 	RXCHAR = 1 ; last char received
                           000002  1570 	LL = 2  ; accepted line length
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                           000002  1571 	VSIZE=2 
      00093C                       1572 readln:
      00093C 5F               [ 1] 1573 	clrw x 
      00093D 89               [ 2] 1574 	pushw x 
      00093E 90 AE 16 C8      [ 2] 1575  	ldw y,#tib ; input buffer
      000942                       1576 readln_loop:
      000942 CD 01 A7         [ 4] 1577 	call getc
      000945 6B 01            [ 1] 1578 	ld (RXCHAR,sp),a
      000947 A1 0D            [ 1] 1579 	cp a,#CR
      000949 26 03            [ 1] 1580 	jrne 1$
      00094B CC 09 BB         [ 2] 1581 	jp readln_quit
      00094E A1 0A            [ 1] 1582 1$:	cp a,#NL
      000950 27 69            [ 1] 1583 	jreq readln_quit
      000952 A1 08            [ 1] 1584 	cp a,#BSP
      000954 27 41            [ 1] 1585 	jreq del_back
      000956 A1 04            [ 1] 1586 	cp a,#CTRL_D
      000958 27 2E            [ 1] 1587 	jreq del_ln
      00095A A1 12            [ 1] 1588 	cp a,#CTRL_R 
      00095C 27 06            [ 1] 1589 	jreq reprint 
                                   1590 ;	cp a,#'[
                                   1591 ;	jreq ansi_seq
      00095E                       1592 final_test:
      00095E A1 20            [ 1] 1593 	cp a,#SPACE
      000960 2A 44            [ 1] 1594 	jrpl accept_char
      000962 20 DE            [ 2] 1595 	jra readln_loop
      000964                       1596 ansi_seq:
                                   1597 ;	call getc
                                   1598 ;	cp a,#'C 
                                   1599 ;	jreq rigth_arrow
                                   1600 ;	cp a,#'D 
                                   1601 ;	jreq left_arrow 
                                   1602 ;	jra final_test
      000964                       1603 right_arrow:
                                   1604 ;	ld a,#BSP 
                                   1605 ;	call putc 
                                   1606 ;	jra realn_loop 
      000964                       1607 left_arrow:
                                   1608 
                                   1609 ;	jra readln_loop
      000964                       1610 reprint: 
      000964 72 5D 00 02      [ 1] 1611 	tnz count 
      000968 27 D8            [ 1] 1612 	jreq readln_loop
      00096A 0D 02            [ 1] 1613 	tnz (LL,sp)
      00096C 26 D4            [ 1] 1614 	jrne readln_loop
      00096E AE 16 C8         [ 2] 1615 	ldw x,#tib 
      000971 CD 01 B0         [ 4] 1616 	call puts
      000974 90 AE 16 C8      [ 2] 1617 	ldw y,#tib 
      000978 C6 00 02         [ 1] 1618 	ld a,count 
      00097B 6B 02            [ 1] 1619 	ld (LL,sp),a
      00097D 72 5F 00 02      [ 1] 1620 	clr count 
      000981 0F 01            [ 1] 1621 	clr (LL_HB,sp)
      000983 72 F9 01         [ 2] 1622 	addw y,(LL_HB,sp)
      000986 20 BA            [ 2] 1623 	jra readln_loop 
      000988                       1624 del_ln:
      000988 7B 02            [ 1] 1625 	ld a,(LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00098A CD 01 CA         [ 4] 1626 	call delete
      00098D 90 AE 16 C8      [ 2] 1627 	ldw y,#tib
      000991 90 7F            [ 1] 1628 	clr (y)
      000993 0F 02            [ 1] 1629 	clr (LL,sp)
      000995 20 AB            [ 2] 1630 	jra readln_loop
      000997                       1631 del_back:
      000997 0D 02            [ 1] 1632     tnz (LL,sp)
      000999 27 A7            [ 1] 1633     jreq readln_loop
      00099B 0A 02            [ 1] 1634     dec (LL,sp)
      00099D 90 5A            [ 2] 1635     decw y
      00099F 90 7F            [ 1] 1636     clr  (y)
      0009A1 CD 01 BA         [ 4] 1637     call bksp 
      0009A4 20 9C            [ 2] 1638     jra readln_loop	
      0009A6                       1639 accept_char:
      0009A6 A6 4F            [ 1] 1640 	ld a,#TIB_SIZE-1
      0009A8 11 02            [ 1] 1641 	cp a, (LL,sp)
      0009AA 27 96            [ 1] 1642 	jreq readln_loop
      0009AC 7B 01            [ 1] 1643 	ld a,(RXCHAR,sp)
      0009AE 90 F7            [ 1] 1644 	ld (y),a
      0009B0 0C 02            [ 1] 1645 	inc (LL,sp)
      0009B2 90 5C            [ 1] 1646 	incw y
      0009B4 90 7F            [ 1] 1647 	clr (y)
      0009B6 CD 01 9E         [ 4] 1648 	call putc 
      0009B9 20 87            [ 2] 1649 	jra readln_loop
      0009BB                       1650 readln_quit:
      0009BB 90 7F            [ 1] 1651 	clr (y)
      0009BD 7B 02            [ 1] 1652 	ld a,(LL,sp)
      0009BF C7 00 02         [ 1] 1653 	ld count,a 
      0009C2                       1654 	_drop VSIZE 
      0009C2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0009C4 A6 0D            [ 1] 1655 	ld a,#CR
      0009C6 CD 01 9E         [ 4] 1656 	call putc
      0009C9 81               [ 4] 1657 	ret
                                   1658 
                           000001  1659 .if DEBUG 	
                                   1660 ;----------------------------
                                   1661 ; command interface
                                   1662 ; only 3 commands:
                                   1663 ;  'q' to resume application
                                   1664 ;  'p [addr]' to print memory values 
                                   1665 ;  's addr' to print string 
                                   1666 ;----------------------------
                                   1667 ;local variable 
                           000001  1668 	PSIZE=1
                           000001  1669 	VSIZE=1 
      0009CA                       1670 cmd_itf:
      0009CA 52 01            [ 2] 1671 	sub sp,#VSIZE 
      0009CC 72 5F 00 13      [ 1] 1672 	clr farptr 
      0009D0 72 5F 00 14      [ 1] 1673 	clr farptr+1 
      0009D4 72 5F 00 15      [ 1] 1674 	clr farptr+2  
      0009D8                       1675 repl:
      0009D8 A6 0D            [ 1] 1676 	ld a,#CR 
      0009DA CD 01 9E         [ 4] 1677 	call putc 
      0009DD A6 3F            [ 1] 1678 	ld a,#'? 
      0009DF CD 01 9E         [ 4] 1679 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0009E2 72 5F 00 00      [ 1] 1680 	clr in.w 
      0009E6 72 5F 00 01      [ 1] 1681 	clr in 
      0009EA CD 09 3C         [ 4] 1682 	call readln
      0009ED 90 AE 16 C8      [ 2] 1683 	ldw y,#tib  
      0009F1 90 F6            [ 1] 1684 	ld a,(y)
      0009F3 27 E3            [ 1] 1685 	jreq repl  
      0009F5 72 5C 00 01      [ 1] 1686 	inc in 
      0009F9 CD 0D AA         [ 4] 1687 	call to_upper 
      0009FC A1 51            [ 1] 1688 	cp a,#'Q 
      0009FE 26 17            [ 1] 1689 	jrne test_p
      000A00                       1690 repl_exit:
      000A00 72 5F 16 C8      [ 1] 1691 	clr tib 
      000A04 72 5F 00 02      [ 1] 1692 	clr count 
      000A08 72 5F 00 01      [ 1] 1693 	clr in 
      000A0C                       1694 	_drop #VSIZE 	
      000A0C 5B 01            [ 2]    1     addw sp,##VSIZE 
      000A0E 81               [ 4] 1695 	ret  
      000A0F                       1696 invalid:
      000A0F AE 0A 8D         [ 2] 1697 	ldw x,#invalid_cmd 
      000A12 CD 01 B0         [ 4] 1698 	call puts 
      000A15 20 C1            [ 2] 1699 	jra repl 
      000A17                       1700 test_p:	
      000A17 A1 50            [ 1] 1701     cp a,#'P 
      000A19 27 11            [ 1] 1702 	jreq mem_peek
      000A1B A1 53            [ 1] 1703     cp a,#'S 
      000A1D 26 F0            [ 1] 1704 	jrne invalid 
      000A1F                       1705 print_string:	
      000A1F CD 0B E6         [ 4] 1706 	call get_token
      000A22 A1 0A            [ 1] 1707 	cp a,#TK_INTGR 
      000A24 26 E9            [ 1] 1708 	jrne invalid 
      000A26 CD 01 B0         [ 4] 1709 	call puts
      000A29 CC 09 D8         [ 2] 1710 	jp repl 	
      000A2C                       1711 mem_peek:
      000A2C A6 20            [ 1] 1712 	ld a,#SPACE 
      000A2E CD 0E 62         [ 4] 1713 	call skip  	 
      000A31 72 B9 00 00      [ 2] 1714 	addw y,in.w 
      000A35 AE 17 18         [ 2] 1715 	ldw x,#pad 
      000A38 CD 02 90         [ 4] 1716 	call strcpy
      000A3B CD 0D B6         [ 4] 1717 	call atoi24 	
      000A3E C6 00 08         [ 1] 1718 	ld a, acc24 
      000A41 CA 00 09         [ 1] 1719 	or a,acc16 
      000A44 CA 00 0A         [ 1] 1720 	or a,acc8 
      000A47 26 02            [ 1] 1721 	jrne 1$ 
      000A49 20 0C            [ 2] 1722 	jra peek_byte  
      000A4B CE 00 08         [ 2] 1723 1$:	ldw x,acc24 
      000A4E CF 00 13         [ 2] 1724 	ldw farptr,x 
      000A51 C6 00 0A         [ 1] 1725 	ld a,acc8 
      000A54 C7 00 15         [ 1] 1726 	ld farptr+2,a 
      000A57                       1727 peek_byte:
      000A57 CD 0A 9C         [ 4] 1728 	call print_farptr 
      000A5A A6 08            [ 1] 1729 	ld a,#8 
      000A5C 6B 01            [ 1] 1730 	ld (PSIZE,sp),a 
      000A5E 5F               [ 1] 1731 	clrw x 
      000A5F CD 0A B7         [ 4] 1732 1$:	call fetchc  
      000A62 89               [ 2] 1733 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A63 C7 00 0A         [ 1] 1734 	ld acc8,a 
      000A66 5F               [ 1] 1735 	clrw x 
      000A67 CF 00 08         [ 2] 1736 	ldw acc24,x 
      000A6A A6 90            [ 1] 1737 	ld a,#16+128
      000A6C CD 08 06         [ 4] 1738 	call prti24
      000A6F 85               [ 2] 1739 	popw x 
      000A70 0A 01            [ 1] 1740 	dec (PSIZE,sp)
      000A72 26 EB            [ 1] 1741 	jrne 1$ 
      000A74 A6 08            [ 1] 1742 	ld a,#8 
      000A76 CB 00 15         [ 1] 1743 	add a,farptr+2 
      000A79 C7 00 15         [ 1] 1744 	ld farptr+2,a
      000A7C 4F               [ 1] 1745 	clr a 
      000A7D C9 00 14         [ 1] 1746 	adc a,farptr+1 
      000A80 C7 00 14         [ 1] 1747 	ld farptr+1,a 
      000A83 4F               [ 1] 1748 	clr a 
      000A84 C9 00 13         [ 1] 1749 	adc a,farptr 
      000A87 C7 00 13         [ 1] 1750 	ld farptr,a 
      000A8A CC 09 D8         [ 2] 1751 	jp repl  
                                   1752 
      000A8D 6E 6F 74 20 61 20 63  1753 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1754 
                                   1755 ;----------------------------
                                   1756 ; display farptr address
                                   1757 ;----------------------------
      000A9C                       1758 print_farptr:
      000A9C C6 00 15         [ 1] 1759 	ld a ,farptr+2 
      000A9F C7 00 0A         [ 1] 1760 	ld acc8,a 
      000AA2 CE 00 13         [ 2] 1761 	ldw x,farptr 
      000AA5 CF 00 08         [ 2] 1762 	ldw acc24,x 
      000AA8 5F               [ 1] 1763 	clrw x 
      000AA9 A6 10            [ 1] 1764 	ld a,#16 
      000AAB CD 08 06         [ 4] 1765 	call prti24
      000AAE A6 20            [ 1] 1766 	ld a,#SPACE 
      000AB0 CD 01 9E         [ 4] 1767 	call putc 
      000AB3 CD 01 9E         [ 4] 1768 	call putc 
      000AB6 81               [ 4] 1769 	ret
                                   1770 
                                   1771 ;------------------------------------
                                   1772 ; get byte at address farptr[X]
                                   1773 ; input:
                                   1774 ;	 farptr   address to peek
                                   1775 ;    X		  farptr index 	
                                   1776 ; output:
                                   1777 ;	 A 		  byte from memory  
                                   1778 ;    x		  incremented by 1
                                   1779 ;------------------------------------
      000AB7                       1780 fetchc: ; @C
      000AB7 92 AF 00 13      [ 5] 1781 	ldf a,([farptr],x)
      000ABB 5C               [ 1] 1782 	incw x
      000ABC 81               [ 4] 1783 	ret
                                   1784 
                                   1785 
                                   1786 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1787 ; expect a number from command line 
                                   1788 ; next argument
                                   1789 ;  input:
                                   1790 ;	  none
                                   1791 ;  output:
                                   1792 ;    acc24   int24_t 
                                   1793 ;------------------------------------
      000ABD                       1794 number::
      000ABD CD 0B E6         [ 4] 1795 	call get_token
      000AC0 CD 0D B6         [ 4] 1796 	call atoi24
      000AC3 81               [ 4] 1797 	ret
                                   1798 .endif ; DEBUG 
                                   1799 
                                   1800 ;------------------------------------
                                   1801 ; parse quoted string 
                                   1802 ; input:
                                   1803 ;   Y 	pointer to tib 
                                   1804 ;   X   pointer to pad
                                   1805 ; output:
                                   1806 ;	pad   parsed string
                                   1807 ;   TOS  char* to pad  
                                   1808 ;------------------------------------
                           000001  1809 	PREV = 1
                           000002  1810 	CURR =2 
                           000002  1811 	VSIZE=2 
      000AC4                       1812 parse_quote: ; { -- addr }
      000AC4                       1813 	_vars VSIZE 
      000AC4 52 02            [ 2]    1     sub sp,#VSIZE 
      000AC6 4F               [ 1] 1814 	clr a
      000AC7 6B 01            [ 1] 1815 1$:	ld (PREV,sp),a 
      000AC9 72 5C 00 01      [ 1] 1816 2$:	inc in
      000ACD 91 D6 00         [ 4] 1817 	ld a,([in.w],y)
      000AD0 27 24            [ 1] 1818 	jreq 6$
      000AD2 6B 02            [ 1] 1819 	ld (CURR,sp),a 
      000AD4 A6 5C            [ 1] 1820 	ld a,#'\
      000AD6 11 01            [ 1] 1821 	cp a, (PREV,sp)
      000AD8 26 0A            [ 1] 1822 	jrne 3$
      000ADA 0F 01            [ 1] 1823 	clr (PREV,sp)
      000ADC 7B 02            [ 1] 1824 	ld a,(CURR,sp)
      000ADE AD 1F            [ 4] 1825 	callr convert_escape
      000AE0 F7               [ 1] 1826 	ld (x),a 
      000AE1 5C               [ 1] 1827 	incw x 
      000AE2 20 E5            [ 2] 1828 	jra 2$
      000AE4                       1829 3$:
      000AE4 7B 02            [ 1] 1830 	ld a,(CURR,sp)
      000AE6 A1 5C            [ 1] 1831 	cp a,#'\'
      000AE8 27 DD            [ 1] 1832 	jreq 1$
      000AEA A1 22            [ 1] 1833 	cp a,#'"
      000AEC 27 04            [ 1] 1834 	jreq 5$ 
      000AEE F7               [ 1] 1835 	ld (x),a 
      000AEF 5C               [ 1] 1836 	incw x 
      000AF0 20 D7            [ 2] 1837 	jra 2$
      000AF2 72 5C 00 01      [ 1] 1838 5$:	inc in 
      000AF6 7F               [ 1] 1839 6$: clr (x)
      000AF7 AE 17 18         [ 2] 1840 	ldw x,#pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AFA                       1841 	_drop VSIZE
      000AFA 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AFC A6 06            [ 1] 1842 	ld a,#TK_QSTR  
      000AFE 81               [ 4] 1843 	ret 
                                   1844 
                                   1845 ;---------------------------------------
                                   1846 ; called by parse_quote
                                   1847 ; subtitute escaped character 
                                   1848 ; by their ASCII value .
                                   1849 ; input:
                                   1850 ;   A  character following '\'
                                   1851 ; output:
                                   1852 ;   A  substitued char or same if not valid.
                                   1853 ;---------------------------------------
      000AFF                       1854 convert_escape:
      000AFF A1 61            [ 1] 1855 	cp a,#'a'
      000B01 26 03            [ 1] 1856 	jrne 1$
      000B03 A6 07            [ 1] 1857 	ld a,#7
      000B05 81               [ 4] 1858 	ret 
      000B06 A1 62            [ 1] 1859 1$: cp a,#'b'
      000B08 26 03            [ 1] 1860 	jrne 2$
      000B0A A6 08            [ 1] 1861 	ld a,#8
      000B0C 81               [ 4] 1862 	ret 
      000B0D A1 65            [ 1] 1863 2$: cp a,#'e' 
      000B0F 26 03            [ 1] 1864     jrne 3$
      000B11 A6 5C            [ 1] 1865 	ld a,#'\'
      000B13 81               [ 4] 1866 	ret  
      000B14 A1 5C            [ 1] 1867 3$: cp a,#'\'
      000B16 26 03            [ 1] 1868 	jrne 4$
      000B18 A6 5C            [ 1] 1869 	ld a,#'\'
      000B1A 81               [ 4] 1870 	ret 
      000B1B A1 66            [ 1] 1871 4$: cp a,#'f' 
      000B1D 26 03            [ 1] 1872 	jrne 5$ 
      000B1F A6 0C            [ 1] 1873 	ld a,#FF 
      000B21 81               [ 4] 1874 	ret  
      000B22 A1 6E            [ 1] 1875 5$: cp a,#'n' 
      000B24 26 03            [ 1] 1876     jrne 6$ 
      000B26 A6 0A            [ 1] 1877 	ld a,#0xa 
      000B28 81               [ 4] 1878 	ret  
      000B29 A1 72            [ 1] 1879 6$: cp a,#'r' 
      000B2B 26 03            [ 1] 1880 	jrne 7$
      000B2D A6 0D            [ 1] 1881 	ld a,#0xd 
      000B2F 81               [ 4] 1882 	ret  
      000B30 A1 74            [ 1] 1883 7$: cp a,#'t' 
      000B32 26 03            [ 1] 1884 	jrne 8$ 
      000B34 A6 09            [ 1] 1885 	ld a,#9 
      000B36 81               [ 4] 1886 	ret  
      000B37 A1 76            [ 1] 1887 8$: cp a,#'v' 
      000B39 26 02            [ 1] 1888 	jrne 9$  
      000B3B A6 0B            [ 1] 1889 	ld a,#0xb 
      000B3D 81               [ 4] 1890 9$:	ret 
                                   1891 
                                   1892 ;-------------------------
                                   1893 ; integer parser 
                                   1894 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1895 ;   X 		point to pad 
                                   1896 ;   Y 		point to tib 
                                   1897 ;   A 	    first digit|'$' 
                                   1898 ; output:  
                                   1899 ;   pad     number string 
                                   1900 ;   X 		integer 
                                   1901 ;   A 		TK_INTGR
                                   1902 ;   TOS     integer 
                                   1903 ;-------------------------
                           000001  1904 	BASE=1
                           000002  1905 	TCHAR=2 
                           000002  1906 	VSIZE=2 
      000B3E                       1907 parse_integer: ; { -- n }
      000B3E 4B 00            [ 1] 1908 	push #0 ; TCHAR 
      000B40 A1 24            [ 1] 1909 	cp a,#'$
      000B42 27 04            [ 1] 1910 	jreq 1$ 
      000B44 4B 0A            [ 1] 1911 	push #10 ; BASE=10 
      000B46 20 02            [ 2] 1912 	jra 2$ 
      000B48 4B 10            [ 1] 1913 1$: push #16  ; BASE=16
      000B4A F7               [ 1] 1914 2$:	ld (x),a 
      000B4B 5C               [ 1] 1915 	incw x 
      000B4C 72 5C 00 01      [ 1] 1916 	inc in 
      000B50 91 D6 00         [ 4] 1917 	ld a,([in.w],y)
      000B53 CD 0D AA         [ 4] 1918 	call to_upper 
      000B56 6B 02            [ 1] 1919 	ld (TCHAR,sp),a 
      000B58 CD 0D A1         [ 4] 1920 	call is_digit 
      000B5B 25 ED            [ 1] 1921 	jrc 2$
      000B5D A6 10            [ 1] 1922 	ld a,#16 
      000B5F 11 01            [ 1] 1923 	cp a,(BASE,sp)
      000B61 26 0A            [ 1] 1924 	jrne 3$ 
      000B63 7B 02            [ 1] 1925 	ld a,(TCHAR,sp)
      000B65 A1 41            [ 1] 1926 	cp a,#'A 
      000B67 2B 04            [ 1] 1927 	jrmi 3$ 
      000B69 A1 47            [ 1] 1928 	cp a,#'G 
      000B6B 2B DD            [ 1] 1929 	jrmi 2$ 
      000B6D 7F               [ 1] 1930 3$:	clr (x)
      000B6E CD 0D B6         [ 4] 1931 	call atoi24
      000B71 CE 00 09         [ 2] 1932 	ldw x,acc16 
      000B74 A6 0A            [ 1] 1933 	ld a,#TK_INTGR
      000B76                       1934 	_drop VSIZE  
      000B76 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B78 81               [ 4] 1935 	ret 	
                                   1936 
                                   1937 ;-------------------------
                                   1938 ; binary integer parser 
                                   1939 ; input:
                                   1940 ;   X 		point to pad 
                                   1941 ;   Y 		point to tib 
                                   1942 ;   A 	    '%' 
                                   1943 ; output:  
                                   1944 ;   pad     number string 
                                   1945 ;   X 		integer 
                                   1946 ;   A 		TK_INTGR
                                   1947 ;   TOS     integer 
                                   1948 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           000001  1949 	BINARY=1
                           000002  1950 	VSIZE=2
      000B79                       1951 parse_binary: ; { -- n }
      000B79 4B 00            [ 1] 1952 	push #0
      000B7B 4B 00            [ 1] 1953 	push #0
      000B7D F7               [ 1] 1954 1$: ld (x),a 
      000B7E 5C               [ 1] 1955 	incw x 
      000B7F 72 5C 00 01      [ 1] 1956 	inc in 
      000B83 91 D6 00         [ 4] 1957 	ld a,([in.w],y)
      000B86 A1 30            [ 1] 1958 	cp a,#'0 
      000B88 27 06            [ 1] 1959 	jreq 2$
      000B8A A1 31            [ 1] 1960 	cp a,#'1 
      000B8C 27 02            [ 1] 1961 	jreq 2$ 
      000B8E 20 09            [ 2] 1962 	jra bin_exit 
      000B90 A0 30            [ 1] 1963 2$: sub a,#'0	
      000B92 46               [ 1] 1964 	rrc a 
      000B93 09 02            [ 1] 1965 	rlc (BINARY+1,sp)
      000B95 09 01            [ 1] 1966 	rlc (BINARY,sp)
      000B97 20 E4            [ 2] 1967 	jra 1$  
      000B99                       1968 bin_exit:
      000B99 7F               [ 1] 1969 	clr (x)
      000B9A 1E 01            [ 2] 1970 	ldw x,(BINARY,sp)
      000B9C A6 0A            [ 1] 1971 	ld a,#TK_INTGR 	
      000B9E                       1972 	_drop VSIZE 
      000B9E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BA0 81               [ 4] 1973 	ret
                                   1974 
                                   1975 ;---------------------------
                                   1976 ;  token begin with a letter,
                                   1977 ;  is keyword or variable. 	
                                   1978 ; input:
                                   1979 ;   X 		point to pad 
                                   1980 ;   Y 		point to text
                                   1981 ;   A 	    first letter  
                                   1982 ; output:
                                   1983 ;   X		exec_addr|var_addr 
                                   1984 ;   A 		TK_CMD 
                                   1985 ;   pad 	keyword|var_name  
                                   1986 ;   TOS     exec_addr|var_addr 
                                   1987 ;--------------------------  
      000BA1                       1988 parse_keyword: ; { -- exec_addr|var_addr}
      000BA1 CD 0D AA         [ 4] 1989 	call to_upper 
      000BA4 F7               [ 1] 1990 	ld (x),a 
      000BA5 5C               [ 1] 1991 	incw x 
      000BA6 72 5C 00 01      [ 1] 1992 	inc in 
      000BAA 91 D6 00         [ 4] 1993 	ld a,([in.w],y)
      000BAD CD 03 F7         [ 4] 1994 	call is_alpha 
      000BB0 25 EF            [ 1] 1995 	jrc parse_keyword 
      000BB2 7F               [ 1] 1996 1$: clr (x)
      000BB3 72 5D 17 19      [ 1] 1997 	tnz pad+1 
      000BB7 26 15            [ 1] 1998 	jrne 2$
                                   1999 ; one letter variable name 
      000BB9 C6 17 18         [ 1] 2000 	ld a,pad 
      000BBC A0 41            [ 1] 2001 	sub a,#'A 
      000BBE 48               [ 1] 2002 	sll a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BBF 88               [ 1] 2003 	push a 
      000BC0 4B 00            [ 1] 2004 	push #0
      000BC2 AE 00 26         [ 2] 2005 	ldw x,#vars 
      000BC5 72 FB 01         [ 2] 2006 	addw x,(1,sp) ; X=var address 
      000BC8                       2007 	_drop 2 
      000BC8 5B 02            [ 2]    1     addw sp,#2 
      000BCA A6 02            [ 1] 2008 	ld a,#TK_VAR 
      000BCC 20 17            [ 2] 2009 	jra 4$ 
      000BCE                       2010 2$: ; check for keyword, otherwise syntax error.
      000BCE                       2011 	_ldx_dict kword_dict
      000BCE AE 1E 40         [ 2]    1     ldw x,#kword_dict+2
      000BD1 CD 10 15         [ 4] 2012 	call search_dict
      000BD4 4D               [ 1] 2013 	tnz a
      000BD5 26 03            [ 1] 2014 	jrne 3$ 
      000BD7 CC 05 FB         [ 2] 2015 	jp syntax_error
      000BDA A3 14 10         [ 2] 2016 3$: cpw x,#rem  
      000BDD 26 06            [ 1] 2017 	jrne 4$
      000BDF 55 00 02 00 01   [ 1] 2018 	mov in,count 
      000BE4 4F               [ 1] 2019 	clr a 
      000BE5 81               [ 4] 2020 4$:	ret  	
                                   2021 
                                   2022 
                                   2023 ;------------------------------------
                                   2024 ; Command line tokenizer
                                   2025 ; scan text for next token
                                   2026 ; move token in 'pad'
                                   2027 ; input: 
      000BE6                       2028 	none: 
                                   2029 ; use:
                                   2030 ;	Y   pointer to text
                                   2031 ;   X	pointer to pad 
                                   2032 ;   in.w   index in text buffer
                                   2033 ; output:
                                   2034 ;   A       token attribute 
                                   2035 ;   pad 	token as .asciz
                                   2036 ;   X 		token value   
                                   2037 ;------------------------------------
                                   2038 	; use to check special character 
                                   2039 	.macro _case c t  
                                   2040 	ld a,#c 
                                   2041 	cp a,(TCHAR,sp) 
                                   2042 	jrne t
                                   2043 	.endm 
                                   2044 
                           000001  2045 	TCHAR=1
                           000002  2046 	ATTRIB=2 
                           000002  2047 	VSIZE=2
      000BE6                       2048 get_token: 
      000BE6 CE 00 00         [ 2] 2049 	ldw x,in.w 
      000BE9 CF 00 11         [ 2] 2050 	ldw in.w.saved,x 
      000BEC 90 CE 00 03      [ 2] 2051 	ldw y,basicptr   	
      000BF0 C6 00 01         [ 1] 2052 	ld a,in 
      000BF3 C1 00 02         [ 1] 2053 	cp a,count 
      000BF6 2B 03            [ 1] 2054 	jrmi 1$
      000BF8 A6 00            [ 1] 2055 	ld a,#TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000BFA 81               [ 4] 2056 	ret 
      000BFB                       2057 1$:	
      000BFB                       2058 	_vars VSIZE
      000BFB 52 02            [ 2]    1     sub sp,#VSIZE 
      000BFD AE 17 18         [ 2] 2059 	ldw x, #pad
      000C00 A6 20            [ 1] 2060 	ld a,#SPACE
      000C02 CD 0E 62         [ 4] 2061 	call skip
      000C05 91 D6 00         [ 4] 2062 	ld a,([in.w],y)
      000C08 26 07            [ 1] 2063 	jrne str_tst
      000C0A 72 5F 17 18      [ 1] 2064 	clr pad 
      000C0E CC 0D 9E         [ 2] 2065 	jp token_exit ; end of line 
                                   2066 
      000C11                       2067 str_tst: ; check for quoted string  	
      000C11 CD 0D AA         [ 4] 2068 	call to_upper 
      000C14 6B 01            [ 1] 2069 	ld (TCHAR,sp),a 
      000C16                       2070 	_case '"' nbr_tst
      000C16 A6 22            [ 1]    1 	ld a,#'"' 
      000C18 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C1A 26 06            [ 1]    3 	jrne nbr_tst
      000C1C CD 0A C4         [ 4] 2071 	call parse_quote
      000C1F CC 0D 9E         [ 2] 2072 	jp token_exit
      000C22                       2073 nbr_tst: ; check for number 
      000C22 A6 24            [ 1] 2074 	ld a,#'$'
      000C24 11 01            [ 1] 2075 	cp a,(TCHAR,sp) 
      000C26 27 13            [ 1] 2076 	jreq 1$
      000C28 A6 26            [ 1] 2077 	ld a,#'&
      000C2A 11 01            [ 1] 2078 	cp a,(TCHAR,sp)
      000C2C 26 06            [ 1] 2079 	jrne 0$
      000C2E CD 0B 79         [ 4] 2080 	call parse_binary ; expect binary integer 
      000C31 CC 0D 9E         [ 2] 2081 	jp token_exit 
      000C34 7B 01            [ 1] 2082 0$:	ld a,(TCHAR,sp)
      000C36 CD 0D A1         [ 4] 2083 	call is_digit
      000C39 24 06            [ 1] 2084 	jrnc 3$
      000C3B CD 0B 3E         [ 4] 2085 1$:	call parse_integer 
      000C3E CC 0D 9E         [ 2] 2086 	jp token_exit 
      000C41                       2087 3$: 
      000C41                       2088 	_case '(' bkslsh_tst 
      000C41 A6 28            [ 1]    1 	ld a,#'(' 
      000C43 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C45 26 05            [ 1]    3 	jrne bkslsh_tst
      000C47 A6 04            [ 1] 2089 	ld a,#TK_LPAREN
      000C49 CC 0D 8E         [ 2] 2090 	jp token_char   	
      000C4C                       2091 bkslsh_tst:
      000C4C                       2092 	_case '\',rparnt_tst
      000C4C A6 5C            [ 1]    1 	ld a,#'\' 
      000C4E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C50 26 18            [ 1]    3 	jrne rparnt_tst
      000C52 7B 01            [ 1] 2093 	ld a,(TCHAR,sp)
      000C54 F7               [ 1] 2094 	ld (x),a 
      000C55 5C               [ 1] 2095 	incw x 
      000C56 72 5C 00 01      [ 1] 2096 	inc in 
      000C5A 91 D6 00         [ 4] 2097 	ld a,([in.w],y)
      000C5D F7               [ 1] 2098 	ld (x),a 
      000C5E 5C               [ 1] 2099 	incw x 
      000C5F 72 5C 00 01      [ 1] 2100 	inc in  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C63 7F               [ 1] 2101 	clr (x) 
      000C64 97               [ 1] 2102 	ld xl,a 
      000C65 A6 0B            [ 1] 2103 	ld a,#TK_CHAR 
      000C67 CC 0D 9E         [ 2] 2104 	jp token_exit 
      000C6A                       2105 rparnt_tst:		
      000C6A                       2106 	_case ')' colon_tst 
      000C6A A6 29            [ 1]    1 	ld a,#')' 
      000C6C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C6E 26 05            [ 1]    3 	jrne colon_tst
      000C70 A6 05            [ 1] 2107 	ld a,#TK_RPAREN 
      000C72 CC 0D 8E         [ 2] 2108 	jp token_char 
      000C75                       2109 colon_tst:
      000C75                       2110 	_case ':' comma_tst 
      000C75 A6 3A            [ 1]    1 	ld a,#':' 
      000C77 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C79 26 05            [ 1]    3 	jrne comma_tst
      000C7B A6 01            [ 1] 2111 	ld a,#TK_COLON 
      000C7D CC 0D 8E         [ 2] 2112 	jp token_char 
      000C80                       2113 comma_tst:
      000C80                       2114 	_case COMMA sharp_tst 
      000C80 A6 2C            [ 1]    1 	ld a,#COMMA 
      000C82 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C84 26 05            [ 1]    3 	jrne sharp_tst
      000C86 A6 08            [ 1] 2115 	ld a,#TK_COMMA
      000C88 CC 0D 8E         [ 2] 2116 	jp token_char
      000C8B                       2117 sharp_tst:
      000C8B                       2118 	_case SHARP dash_tst 
      000C8B A6 23            [ 1]    1 	ld a,#SHARP 
      000C8D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C8F 26 05            [ 1]    3 	jrne dash_tst
      000C91 A6 09            [ 1] 2119 	ld a,#TK_SHARP
      000C93 CC 0D 8E         [ 2] 2120 	jp token_char  	 	 
      000C96                       2121 dash_tst: 	
      000C96                       2122 	_case '-' at_tst 
      000C96 A6 2D            [ 1]    1 	ld a,#'-' 
      000C98 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C9A 26 05            [ 1]    3 	jrne at_tst
      000C9C A6 11            [ 1] 2123 	ld a,#TK_MINUS  
      000C9E CC 0D 8E         [ 2] 2124 	jp token_char 
      000CA1                       2125 at_tst:
      000CA1                       2126 	_case '@' qmark_tst 
      000CA1 A6 40            [ 1]    1 	ld a,#'@' 
      000CA3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CA5 26 05            [ 1]    3 	jrne qmark_tst
      000CA7 A6 03            [ 1] 2127 	ld a,#TK_ARRAY 
      000CA9 CC 0D 8E         [ 2] 2128 	jp token_char
      000CAC                       2129 qmark_tst:
      000CAC                       2130 	_case '?' tick_tst 
      000CAC A6 3F            [ 1]    1 	ld a,#'?' 
      000CAE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CB0 26 11            [ 1]    3 	jrne tick_tst
      000CB2 7B 01            [ 1] 2131 	ld a,(TCHAR,sp)
      000CB4 F7               [ 1] 2132 	ld (x),a 
      000CB5 5C               [ 1] 2133 	incw x 
      000CB6 7F               [ 1] 2134 	clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CB7 72 5C 00 01      [ 1] 2135 	inc in 
      000CBB A6 07            [ 1] 2136 	ld a,#TK_CMD 
      000CBD AE 13 0B         [ 2] 2137 	ldw x,#print 
      000CC0 CC 0D 9E         [ 2] 2138 	jp token_exit
      000CC3                       2139 tick_tst: ; ignore comment 
      000CC3                       2140 	_case TICK plus_tst 
      000CC3 A6 27            [ 1]    1 	ld a,#TICK 
      000CC5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CC7 26 0E            [ 1]    3 	jrne plus_tst
      000CC9 7B 01            [ 1] 2141 	ld a,(TCHAR,sp)
      000CCB F7               [ 1] 2142 	ld (x),a 
      000CCC 5C               [ 1] 2143 	incw x 
      000CCD 7F               [ 1] 2144 	clr (x)
      000CCE 55 00 02 00 01   [ 1] 2145 	mov in,count  
      000CD3 4F               [ 1] 2146 	clr a 
      000CD4 CC 0D 9E         [ 2] 2147 	jp token_exit 
      000CD7                       2148 plus_tst:
      000CD7                       2149 	_case '+' star_tst 
      000CD7 A6 2B            [ 1]    1 	ld a,#'+' 
      000CD9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CDB 26 05            [ 1]    3 	jrne star_tst
      000CDD A6 10            [ 1] 2150 	ld a,#TK_PLUS  
      000CDF CC 0D 8E         [ 2] 2151 	jp token_char 
      000CE2                       2152 star_tst:
      000CE2                       2153 	_case '*' slash_tst 
      000CE2 A6 2A            [ 1]    1 	ld a,#'*' 
      000CE4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CE6 26 05            [ 1]    3 	jrne slash_tst
      000CE8 A6 20            [ 1] 2154 	ld a,#TK_MULT 
      000CEA CC 0D 8E         [ 2] 2155 	jp token_char 
      000CED                       2156 slash_tst: 
      000CED                       2157 	_case '/' prcnt_tst 
      000CED A6 2F            [ 1]    1 	ld a,#'/' 
      000CEF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CF1 26 05            [ 1]    3 	jrne prcnt_tst
      000CF3 A6 21            [ 1] 2158 	ld a,#TK_DIV 
      000CF5 CC 0D 8E         [ 2] 2159 	jp token_char 
      000CF8                       2160 prcnt_tst:
      000CF8                       2161 	_case '%' eql_tst 
      000CF8 A6 25            [ 1]    1 	ld a,#'%' 
      000CFA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CFC 26 05            [ 1]    3 	jrne eql_tst
      000CFE A6 22            [ 1] 2162 	ld a,#TK_MOD
      000D00 CC 0D 8E         [ 2] 2163 	jp token_char  
                                   2164 ; 1 or 2 character tokens 	
      000D03                       2165 eql_tst:
      000D03                       2166 	_case '=' gt_tst 		
      000D03 A6 3D            [ 1]    1 	ld a,#'=' 
      000D05 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D07 26 05            [ 1]    3 	jrne gt_tst
      000D09 A6 32            [ 1] 2167 	ld a,#TK_EQUAL
      000D0B CC 0D 8E         [ 2] 2168 	jp token_char 
      000D0E                       2169 gt_tst:
      000D0E                       2170 	_case '>' lt_tst 
      000D0E A6 3E            [ 1]    1 	ld a,#'>' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D10 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D12 26 33            [ 1]    3 	jrne lt_tst
      000D14 A6 31            [ 1] 2171 	ld a,#TK_GT 
      000D16 6B 02            [ 1] 2172 	ld (ATTRIB,sp),a 
      000D18 72 5C 00 01      [ 1] 2173 	inc in 
      000D1C 91 D6 00         [ 4] 2174 	ld a,([in.w],y)
      000D1F A1 3D            [ 1] 2175 	cp a,#'=
      000D21 26 0C            [ 1] 2176 	jrne 1$
      000D23 7B 01            [ 1] 2177 	ld a,(TCHAR,sp)
      000D25 F7               [ 1] 2178 	ld (x),a
      000D26 5C               [ 1] 2179 	incw x 
      000D27 A6 3D            [ 1] 2180 	ld a,#'=
      000D29 6B 01            [ 1] 2181 	ld (TCHAR,sp),a 
      000D2B A6 33            [ 1] 2182 	ld a,#TK_GE 
      000D2D 20 5F            [ 2] 2183 	jra token_char  
      000D2F A1 3C            [ 1] 2184 1$: cp a,#'<
      000D31 26 0C            [ 1] 2185 	jrne 2$
      000D33 7B 01            [ 1] 2186 	ld a,(TCHAR,sp)
      000D35 F7               [ 1] 2187 	ld (x),a
      000D36 5C               [ 1] 2188 	incw x 
      000D37 A6 3C            [ 1] 2189 	ld a,#'<	
      000D39 6B 01            [ 1] 2190 	ld (TCHAR,sp),a 
      000D3B A6 35            [ 1] 2191 	ld a,#TK_NE 
      000D3D 20 4F            [ 2] 2192 	jra token_char 
      000D3F 72 5A 00 01      [ 1] 2193 2$: dec in
      000D43 7B 02            [ 1] 2194 	ld a,(ATTRIB,sp)
      000D45 20 47            [ 2] 2195 	jra token_char 
      000D47                       2196 lt_tst:
      000D47                       2197 	_case '<' other
      000D47 A6 3C            [ 1]    1 	ld a,#'<' 
      000D49 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D4B 26 32            [ 1]    3 	jrne other
      000D4D A6 34            [ 1] 2198 	ld a,#TK_LT 
      000D4F 6B 02            [ 1] 2199 	ld (ATTRIB,sp),a 
      000D51 72 5C 00 01      [ 1] 2200 	inc in 
      000D55 91 D6 00         [ 4] 2201 	ld a,([in.w],y)
      000D58 A1 3D            [ 1] 2202 	cp a,#'=
      000D5A 26 0B            [ 1] 2203 	jrne 1$
      000D5C 7B 01            [ 1] 2204 	ld a,(TCHAR,sp)
      000D5E F7               [ 1] 2205 	ld (x),a 
      000D5F A6 3D            [ 1] 2206 	ld a,#'=
      000D61 6B 01            [ 1] 2207 	ld (TCHAR,sp),a 
      000D63 A6 36            [ 1] 2208 	ld a,#TK_LE 
      000D65 20 27            [ 2] 2209 	jra token_char 
      000D67 A1 3E            [ 1] 2210 1$: cp a,#'>
      000D69 26 0C            [ 1] 2211 	jrne 2$
      000D6B 7B 01            [ 1] 2212 	ld a,(TCHAR,sp)
      000D6D F7               [ 1] 2213 	ld (x),a 
      000D6E 5C               [ 1] 2214 	incw x 
      000D6F A6 3E            [ 1] 2215 	ld a,#'>
      000D71 6B 01            [ 1] 2216 	ld (TCHAR,sp),a 
      000D73 A6 35            [ 1] 2217 	ld a,#TK_NE 
      000D75 20 17            [ 2] 2218 	jra token_char 
      000D77 72 5A 00 01      [ 1] 2219 2$: dec in 
      000D7B 7B 02            [ 1] 2220 	ld a,(ATTRIB,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D7D 20 0F            [ 2] 2221 	jra token_char 	
      000D7F                       2222 other: ; not a special character 	 
      000D7F 7B 01            [ 1] 2223 	ld a,(TCHAR,sp)
      000D81 CD 03 F7         [ 4] 2224 	call is_alpha 
      000D84 25 03            [ 1] 2225 	jrc 30$ 
      000D86 CC 05 FB         [ 2] 2226 	jp syntax_error 
      000D89                       2227 30$: 
      000D89 CD 0B A1         [ 4] 2228 	call parse_keyword
      000D8C 20 10            [ 2] 2229 	jra token_exit 
      000D8E                       2230 token_char:
      000D8E 6B 02            [ 1] 2231 	ld (ATTRIB,sp),a 
      000D90 7B 01            [ 1] 2232 	ld a,(TCHAR,sp)
      000D92 F7               [ 1] 2233 	ld (x),a 
      000D93 5C               [ 1] 2234 	incw x 
      000D94 7F               [ 1] 2235 	clr(x)
      000D95 72 5C 00 01      [ 1] 2236 	inc in 
      000D99 7B 02            [ 1] 2237 	ld a,(ATTRIB,sp)
      000D9B AE 17 18         [ 2] 2238 	ldw x,#pad 
      000D9E                       2239 token_exit:
      000D9E                       2240 	_drop VSIZE 
      000D9E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DA0 81               [ 4] 2241 	ret
                                   2242 
                                   2243 
                                   2244 
                                   2245 ;------------------------------------
                                   2246 ; check if character in {'0'..'9'}
                                   2247 ; input:
                                   2248 ;    A  character to test
                                   2249 ; output:
                                   2250 ;    Carry  0 not digit | 1 digit
                                   2251 ;------------------------------------
      000DA1                       2252 is_digit:
      000DA1 A1 30            [ 1] 2253 	cp a,#'0
      000DA3 25 03            [ 1] 2254 	jrc 1$
      000DA5 A1 3A            [ 1] 2255     cp a,#'9+1
      000DA7 8C               [ 1] 2256 	ccf 
      000DA8 8C               [ 1] 2257 1$:	ccf 
      000DA9 81               [ 4] 2258     ret
                                   2259 
                                   2260 ;------------------------------------
                                   2261 ; convert alpha to uppercase
                                   2262 ; input:
                                   2263 ;    a  character to convert
                                   2264 ; output:
                                   2265 ;    a  uppercase character
                                   2266 ;------------------------------------
      000DAA                       2267 to_upper::
      000DAA A1 61            [ 1] 2268 	cp a,#'a
      000DAC 2A 01            [ 1] 2269 	jrpl 1$
      000DAE 81               [ 4] 2270 0$:	ret
      000DAF A1 7A            [ 1] 2271 1$: cp a,#'z	
      000DB1 22 FB            [ 1] 2272 	jrugt 0$
      000DB3 A0 20            [ 1] 2273 	sub a,#32
      000DB5 81               [ 4] 2274 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2275 	
                                   2276 ;------------------------------------
                                   2277 ; convert pad content in integer
                                   2278 ; input:
                                   2279 ;    pad		.asciz to convert
                                   2280 ; output:
                                   2281 ;    acc24      int24_t
                                   2282 ;------------------------------------
                                   2283 	; local variables
                           000001  2284 	SIGN=1 ; 1 byte, 
                           000002  2285 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2286 	TEMP=3 ; 1 byte, temporary storage
                           000003  2287 	VSIZE=3 ; 3 bytes reserved for local storage
      000DB6                       2288 atoi24:
      000DB6 89               [ 2] 2289 	pushw x ;save x
      000DB7 52 03            [ 2] 2290 	sub sp,#VSIZE
                                   2291 	; acc24=0 
      000DB9 72 5F 00 08      [ 1] 2292 	clr acc24    
      000DBD 72 5F 00 09      [ 1] 2293 	clr acc16
      000DC1 72 5F 00 0A      [ 1] 2294 	clr acc8 
      000DC5 C6 17 18         [ 1] 2295 	ld a, pad 
      000DC8 27 5A            [ 1] 2296 	jreq atoi_exit
      000DCA 0F 01            [ 1] 2297 	clr (SIGN,sp)
      000DCC A6 0A            [ 1] 2298 	ld a,#10
      000DCE 6B 02            [ 1] 2299 	ld (BASE,sp),a ; default base decimal
      000DD0 AE 17 18         [ 2] 2300 	ldw x,#pad ; pointer to string to convert
      000DD3 F6               [ 1] 2301 	ld a,(x)
      000DD4 27 47            [ 1] 2302 	jreq 9$  ; completed if 0
      000DD6 A1 2D            [ 1] 2303 	cp a,#'-
      000DD8 26 04            [ 1] 2304 	jrne 1$
      000DDA 03 01            [ 1] 2305 	cpl (SIGN,sp)
      000DDC 20 08            [ 2] 2306 	jra 2$
      000DDE A1 24            [ 1] 2307 1$: cp a,#'$
      000DE0 26 06            [ 1] 2308 	jrne 3$
      000DE2 A6 10            [ 1] 2309 	ld a,#16
      000DE4 6B 02            [ 1] 2310 	ld (BASE,sp),a
      000DE6 5C               [ 1] 2311 2$:	incw x
      000DE7 F6               [ 1] 2312 	ld a,(x)
      000DE8                       2313 3$:	
      000DE8 A1 61            [ 1] 2314 	cp a,#'a
      000DEA 2B 02            [ 1] 2315 	jrmi 4$
      000DEC A0 20            [ 1] 2316 	sub a,#32
      000DEE A1 30            [ 1] 2317 4$:	cp a,#'0
      000DF0 2B 2B            [ 1] 2318 	jrmi 9$
      000DF2 A0 30            [ 1] 2319 	sub a,#'0
      000DF4 A1 0A            [ 1] 2320 	cp a,#10
      000DF6 2B 06            [ 1] 2321 	jrmi 5$
      000DF8 A0 07            [ 1] 2322 	sub a,#7
      000DFA 11 02            [ 1] 2323 	cp a,(BASE,sp)
      000DFC 2A 1F            [ 1] 2324 	jrpl 9$
      000DFE 6B 03            [ 1] 2325 5$:	ld (TEMP,sp),a
      000E00 7B 02            [ 1] 2326 	ld a,(BASE,sp)
      000E02 CD 0E 28         [ 4] 2327 	call mulu24_8
      000E05 7B 03            [ 1] 2328 	ld a,(TEMP,sp)
      000E07 CB 00 0A         [ 1] 2329 	add a,acc24+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E0A C7 00 0A         [ 1] 2330 	ld acc24+2,a
      000E0D 4F               [ 1] 2331 	clr a
      000E0E C9 00 09         [ 1] 2332 	adc a,acc24+1
      000E11 C7 00 09         [ 1] 2333 	ld acc24+1,a
      000E14 4F               [ 1] 2334 	clr a
      000E15 C9 00 08         [ 1] 2335 	adc a,acc24
      000E18 C7 00 08         [ 1] 2336 	ld acc24,a
      000E1B 20 C9            [ 2] 2337 	jra 2$
      000E1D 0D 01            [ 1] 2338 9$:	tnz (SIGN,sp)
      000E1F 27 03            [ 1] 2339     jreq atoi_exit
      000E21 CD 09 19         [ 4] 2340     call neg_acc24
      000E24                       2341 atoi_exit: 
      000E24 5B 03            [ 2] 2342 	addw sp,#VSIZE
      000E26 85               [ 2] 2343 	popw x ; restore x
      000E27 81               [ 4] 2344 	ret
                                   2345 
                                   2346 ;--------------------------------------
                                   2347 ; unsigned multiply uint24_t by uint8_t
                                   2348 ; use to convert numerical string to uint24_t
                                   2349 ; input:
                                   2350 ;	acc24	uint24_t 
                                   2351 ;   A		uint8_t
                                   2352 ; output:
                                   2353 ;   acc24   A*acc24
                                   2354 ;-------------------------------------
                                   2355 ; local variables offset  on sp
                           000003  2356 	U8   = 3   ; A pushed on stack
                           000002  2357 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2358 	OVFH = 1  ; multiplication overflow high byte
                           000003  2359 	VSIZE = 3
      000E28                       2360 mulu24_8:
      000E28 89               [ 2] 2361 	pushw x    ; save X
                                   2362 	; local variables
      000E29 88               [ 1] 2363 	push a     ; U8
      000E2A 5F               [ 1] 2364 	clrw x     ; initialize overflow to 0
      000E2B 89               [ 2] 2365 	pushw x    ; multiplication overflow
                                   2366 ; multiply low byte.
      000E2C C6 00 0A         [ 1] 2367 	ld a,acc24+2
      000E2F 97               [ 1] 2368 	ld xl,a
      000E30 7B 03            [ 1] 2369 	ld a,(U8,sp)
      000E32 42               [ 4] 2370 	mul x,a
      000E33 9F               [ 1] 2371 	ld a,xl
      000E34 C7 00 0A         [ 1] 2372 	ld acc24+2,a
      000E37 9E               [ 1] 2373 	ld a, xh
      000E38 6B 02            [ 1] 2374 	ld (OVFL,sp),a
                                   2375 ; multipy middle byte
      000E3A C6 00 09         [ 1] 2376 	ld a,acc24+1
      000E3D 97               [ 1] 2377 	ld xl,a
      000E3E 7B 03            [ 1] 2378 	ld a, (U8,sp)
      000E40 42               [ 4] 2379 	mul x,a
                                   2380 ; add overflow to this partial product
      000E41 72 FB 01         [ 2] 2381 	addw x,(OVFH,sp)
      000E44 9F               [ 1] 2382 	ld a,xl
      000E45 C7 00 09         [ 1] 2383 	ld acc24+1,a
      000E48 4F               [ 1] 2384 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E49 A9 00            [ 1] 2385 	adc a,#0
      000E4B 6B 01            [ 1] 2386 	ld (OVFH,sp),a
      000E4D 9E               [ 1] 2387 	ld a,xh
      000E4E 6B 02            [ 1] 2388 	ld (OVFL,sp),a
                                   2389 ; multiply most signficant byte	
      000E50 C6 00 08         [ 1] 2390 	ld a, acc24
      000E53 97               [ 1] 2391 	ld xl, a
      000E54 7B 03            [ 1] 2392 	ld a, (U8,sp)
      000E56 42               [ 4] 2393 	mul x,a
      000E57 72 FB 01         [ 2] 2394 	addw x, (OVFH,sp)
      000E5A 9F               [ 1] 2395 	ld a, xl
      000E5B C7 00 08         [ 1] 2396 	ld acc24,a
      000E5E 5B 03            [ 2] 2397     addw sp,#VSIZE
      000E60 85               [ 2] 2398 	popw x
      000E61 81               [ 4] 2399 	ret
                                   2400 
                                   2401 ;------------------------------------
                                   2402 ; skip character c in text starting from 'in'
                                   2403 ; input:
                                   2404 ;	 y 		point to text buffer
                                   2405 ;    a 		character to skip
                                   2406 ; output:  
                                   2407 ;	'in' ajusted to new position
                                   2408 ;------------------------------------
                           000001  2409 	C = 1 ; local var
      000E62                       2410 skip:
      000E62 88               [ 1] 2411 	push a
      000E63 91 D6 00         [ 4] 2412 1$:	ld a,([in.w],y)
      000E66 27 0A            [ 1] 2413 	jreq 2$
      000E68 11 01            [ 1] 2414 	cp a,(C,sp)
      000E6A 26 06            [ 1] 2415 	jrne 2$
      000E6C 72 5C 00 01      [ 1] 2416 	inc in
      000E70 20 F1            [ 2] 2417 	jra 1$
      000E72                       2418 2$: _drop 1 
      000E72 5B 01            [ 2]    1     addw sp,#1 
      000E74 81               [ 4] 2419 	ret
                                   2420 	
                                   2421 ;------------------------------
                                   2422 ; restore 'in.w' variable to 
                                   2423 ; its value before last call
                                   2424 ; to get_token.
                                   2425 ;------------------------------
      000E75                       2426 unget_token:
      000E75 CE 00 11         [ 2] 2427 	ldw x,in.w.saved
      000E78 CF 00 00         [ 2] 2428 	ldw in.w,x 
      000E7B 81               [ 4] 2429 	ret 
                                   2430 
                                   2431 
                                   2432 ;******************************
                                   2433 ;  data stack manipulation
                                   2434 ;*****************************
                                   2435 ;----------------------	
                                   2436 ; push X on data stack 
                                   2437 ; input:
                                   2438 ;	X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2439 ; output:
                                   2440 ;	none 
                                   2441 ;----------------------	
      000E7C                       2442 dpush:
      000E7C                       2443     _dp_down
      000E7C 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000E80 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000E84 72 CF 00 19      [ 5] 2444     ldw [dstkptr],x  
      000E88 81               [ 4] 2445 	ret 
                                   2446 
                                   2447 
                                   2448 ;----------------------	
                                   2449 ; pop data stack in X 
                                   2450 ; input:
                                   2451 ;	none
                                   2452 ; output:
                                   2453 ;	X   
                                   2454 ;----------------------	
      000E89                       2455 dpop: 
      000E89 72 CE 00 19      [ 5] 2456     ldw x, [dstkptr]
      000E8D                       2457 	_dp_up
      000E8D 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000E91 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000E95 81               [ 4] 2458 	ret 
                                   2459 
                                   2460 ;-----------------------------
                                   2461 ; swap top 2 elements of dstack
                                   2462 ;  {n1 n2 -- n2 n1 }
                                   2463 ;-----------------------------
      000E96                       2464 dswap:
      000E96 72 CE 00 19      [ 5] 2465 	ldw x,[dstkptr]
      000E9A 89               [ 2] 2466 	pushw x 
      000E9B AE 00 02         [ 2] 2467 	ldw x,#2 
      000E9E 72 DE 00 19      [ 5] 2468 	ldw x,([dstkptr],x) 
      000EA2 72 CF 00 19      [ 5] 2469 	ldw [dstkptr],x 
      000EA6 AE 00 02         [ 2] 2470 	ldw x,#2
      000EA9 90 85            [ 2] 2471 	popw y 
      000EAB 72 DF 00 19      [ 5] 2472 	ldw ([dstkptr],x),y 
      000EAF 81               [ 4] 2473 	ret
                                   2474 
                                   2475 ;-----------------------------
                                   2476 ; drop TOS 
                                   2477 ;-----------------------------
      000EB0                       2478 ddrop: ; { n -- }
      000EB0                       2479 	_dp_up 
      000EB0 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000EB4 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000EB8 81               [ 4] 2480 	ret
                                   2481 	
                                   2482 ;-----------------------------
                                   2483 ; duplicate TOS 
                                   2484 ;  dstack: { ix...n -- ix...n n }
                                   2485 ;-----------------------------
      000EB9                       2486 ddup:
      000EB9 72 CE 00 19      [ 5] 2487 	ldw x,[dstkptr]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000EBD                       2488 	_dp_down
      000EBD 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000EC1 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000EC5 72 CF 00 19      [ 5] 2489     ldw [dstkptr],x  
      000EC9 81               [ 4] 2490 	ret 
                                   2491 
                                   2492 
                                   2493 ;----------------------------------
                                   2494 ; pick value n from dstack 
                                   2495 ; put it on TOS
                                   2496 ; dstack: {ix,..,p -- ix,...,np }
                                   2497 ;-----------------------------------
      000ECA                       2498 dpick:
      000ECA 72 CE 00 19      [ 5] 2499 	ldw x,[dstkptr]
      000ECE 58               [ 2] 2500 	sllw x 
      000ECF 72 BB 00 19      [ 2] 2501 	addw x,dstkptr 
      000ED3 FE               [ 2] 2502 	ldw x,(x)
      000ED4 72 CF 00 19      [ 5] 2503 	ldw [dstkptr],x 
      000ED8 81               [ 4] 2504 	ret
                                   2505 
                                   2506 ;---------------------------
                                   2507 ;  fetch variable in X 
                                   2508 ;  dstack:{ addr -- value }
                                   2509 ;---------------------------
      000ED9                       2510 fetch:
      000ED9 72 CE 00 19      [ 5] 2511 	ldw x,[dstkptr]
      000EDD FE               [ 2] 2512 	ldw x,(x)
      000EDE 72 CF 00 19      [ 5] 2513 	ldw [dstkptr],x
      000EE2 81               [ 4] 2514 	ret 
                                   2515 
                                   2516 ;----------------------------
                                   2517 ; store variable 
                                   2518 ; dstack: {addr value -- }
                                   2519 ;----------------------------
      000EE3                       2520 store:
      000EE3 CD 0E 89         [ 4] 2521 	call dpop 
      000EE6 90 93            [ 1] 2522 	ldw y,x   ; y=value 
      000EE8 CD 0E 89         [ 4] 2523 	call dpop 
      000EEB FF               [ 2] 2524 	ldw (x),y 
      000EEC 81               [ 4] 2525 	ret 
                                   2526 
                                   2527 ;---------------------------------
                                   2528 ; drop n elements from data stack 
                                   2529 ; input: 
                                   2530 ;   X 		n 
                                   2531 ; output:
                                   2532 ;   none 
                                   2533 ;-------------------------------------
      000EED                       2534 ddrop_n:
      000EED 90 89            [ 2] 2535 	pushw y 
      000EEF 90 CE 00 19      [ 2] 2536 	ldw y,dstkptr 
      000EF3 58               [ 2] 2537 	sllw x 
      000EF4 89               [ 2] 2538 	pushw x 
      000EF5 72 F9 01         [ 2] 2539 	addw y,(1,sp)
      000EF8 90 CF 00 19      [ 2] 2540 	ldw dstkptr,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000EFC 85               [ 2] 2541 	popw x 
      000EFD 90 85            [ 2] 2542 	popw y
      000EFF 81               [ 4] 2543 	ret 
                                   2544 
      000F00 0A 64 73 74 61 63 6B  2545 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2546 ;----------------------------
                                   2547 ; print dstack content 
                                   2548 ;---------------------------
                           000001  2549 	XSAVE=1
                           000002  2550 	VSIZE=2
      000F0A                       2551 dots:
      000F0A                       2552 	_vars VSIZE 
      000F0A 52 02            [ 2]    1     sub sp,#VSIZE 
      000F0C AE 0F 00         [ 2] 2553 	ldw x,#dstk_prompt 
      000F0F CD 01 B0         [ 4] 2554 	call puts
      000F12 AE 17 7E         [ 2] 2555 	ldw x,#dstack_unf-CELL_SIZE
      000F15 35 0A 00 07      [ 1] 2556 	mov base,#10 
      000F19 C3 00 19         [ 2] 2557 1$:	cpw x,dstkptr 
      000F1C 25 0D            [ 1] 2558 	jrult 4$ 
      000F1E 1F 01            [ 2] 2559 	ldw (XSAVE,sp),x
      000F20 FE               [ 2] 2560 	ldw  x,(x)
      000F21 CD 08 4E         [ 4] 2561 	call print_int 
      000F24 1E 01            [ 2] 2562 	ldw x,(XSAVE,sp)
      000F26 1D 00 02         [ 2] 2563 	subw x,#CELL_SIZE 
      000F29 20 EE            [ 2] 2564 	jra 1$ 
      000F2B A6 0D            [ 1] 2565 4$: ld a,#CR 
      000F2D CD 01 9E         [ 4] 2566 	call putc 
      000F30                       2567 	_drop VSIZE
      000F30 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F32 4F               [ 1] 2568 	clr a 
      000F33 81               [ 4] 2569 	ret
                                   2570 
      000F34 0A 63 74 61 63 6B 3A  2571 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2572 ;--------------------------------
                                   2573 ; print cstack content
                                   2574 ;--------------------------------
                           000001  2575 	XSAVE=1
                           000002  2576 	VSIZE=2 
      000F3D                       2577 dotr:
      000F3D                       2578 	_vars VSIZE 
      000F3D 52 02            [ 2]    1     sub sp,#VSIZE 
      000F3F AE 0F 34         [ 2] 2579 	ldw x,#cstk_prompt
      000F42 CD 01 B0         [ 4] 2580 	call puts 
      000F45 96               [ 1] 2581 	ldw x,sp 
      000F46 1C 00 07         [ 2] 2582 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      000F49 1F 01            [ 2] 2583 	ldw (XSAVE,sp),x  
      000F4B AE 17 FE         [ 2] 2584 	ldw x,#RAM_SIZE-2
      000F4E 35 10 00 07      [ 1] 2585 	mov base,#16
      000F52                       2586 dotr_loop:
      000F52 13 01            [ 2] 2587 	cpw x,(XSAVE,sp)
      000F54 2B 0B            [ 1] 2588 	jrmi 9$
      000F56 89               [ 2] 2589 	pushw x  
      000F57 FE               [ 2] 2590 	ldw x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F58 CD 08 4E         [ 4] 2591 	call print_int 
      000F5B 85               [ 2] 2592 	popw x  
      000F5C 1D 00 02         [ 2] 2593 	subw x,#CELL_SIZE
      000F5F 20 F1            [ 2] 2594 	jra dotr_loop 
      000F61 A6 0D            [ 1] 2595 9$:	ld a,#CR 
      000F63 CD 01 9E         [ 4] 2596 	call putc 
      000F66                       2597 	_drop VSIZE 
      000F66 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F68 4F               [ 1] 2598 	clr a 
      000F69 81               [ 4] 2599 	ret
                                   2600 
                                   2601 
                                   2602 ;--------------------------------
                                   2603 ;  add 2 integers
                                   2604 ;  input:
                                   2605 ;    N1     on cstack 
                                   2606 ;    N2     on cstack 
                                   2607 ;  output:
                                   2608 ;    X 		n2+n1 
                                   2609 ;--------------------------------
                                   2610 	;arugments on cstack 
      000F6A                       2611 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000F6A                       2612 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000F6A                       2613 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000F6A                       2614 add:
      000F6A 1E 05            [ 2] 2615 	ldw x ,(N2,sp)
      000F6C 72 FB 03         [ 2] 2616 	addw x,(N1,sp)
      000F6F 1F 03            [ 2] 2617 	ldw (N1,sp),x 
      000F71 81               [ 4] 2618 	ret 
                                   2619 
                                   2620 ;--------------------------------
                                   2621 ;  substract 2 ntegers
                                   2622 ;  input:
                                   2623 ;    N1     on cstack 
                                   2624 ;    N2     on cstack 
                                   2625 ;  output:
                                   2626 ;    X 		n2+n1 
                                   2627 ;--------------------------------
      000F72                       2628 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000F72                       2629 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000F72                       2630 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000F72                       2631 substract:
      000F72 1E 05            [ 2] 2632 	ldw x,(N2,sp)
      000F74 72 F0 03         [ 2] 2633 	subw x,(N1,sp)
      000F77 81               [ 4] 2634 	ret 
                                   2635 
                                   2636 ;-------------------------------------
                                   2637 ; multiply 2 integers
                                   2638 ; product overflow is ignored unless
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2639 ; MATH_OVF assembler flag is set to 1
                                   2640 ; input:
                                   2641 ;  	N1      on cstack
                                   2642 ;   N2 		on cstack 
                                   2643 ; output:
                                   2644 ;	X        N1*N2 
                                   2645 ;-------------------------------------
                                   2646 	;arguments 
      000F78                       2647 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      000F78                       2648 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      000F78                       2649 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      000F78                       2650 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      000F78                       2651 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2652    ; local variables 
                           000001  2653 	SIGN=1
                           000002  2654 	PROD=2
                           000003  2655 	VSIZE=3
      000F78                       2656 multiply:
      000F78                       2657 	_vars VSIZE 
      000F78 52 03            [ 2]    1     sub sp,#VSIZE 
      000F7A 0F 01            [ 1] 2658 	clr (SIGN,sp)
      000F7C 1E 06            [ 2] 2659 	ldw x,(N1_HB,sp)
      000F7E 9E               [ 1] 2660 	ld a,xh  
      000F7F A5 80            [ 1] 2661 	bcp a,#0x80 
      000F81 27 05            [ 1] 2662 	jreq 2$
      000F83 03 01            [ 1] 2663 	cpl (SIGN,sp)
      000F85 50               [ 2] 2664 	negw x 
      000F86 1F 06            [ 2] 2665 	ldw (N1_HB,sp),x 
      000F88 1E 08            [ 2] 2666 2$: ldw x,(N2_HB,sp)
      000F8A 9E               [ 1] 2667 	ld a,xh  
      000F8B A5 80            [ 1] 2668 	bcp a,#0x80 
      000F8D 27 05            [ 1] 2669 	jreq 3$
      000F8F 03 01            [ 1] 2670 	cpl (SIGN,sp)
      000F91 50               [ 2] 2671 	negw x 
      000F92 1F 08            [ 2] 2672 	ldw (N2_HB,sp),x 
                                   2673 ; N1_LB * N2_LB 	
      000F94 7B 07            [ 1] 2674 3$:	ld a,(N1_LB,sp)
      000F96 97               [ 1] 2675 	ld xl,a 
      000F97 7B 09            [ 1] 2676 	ld a,(N2_LB,sp) 
      000F99 42               [ 4] 2677 	mul x,a 
                           000000  2678 .if MATH_OVF 	
                                   2679 	ld a,xh 
                                   2680 	bcp a,#0x80 
                                   2681 	jreq 4$ 
                                   2682 	ld a,#ERR_MATH_OVF 
                                   2683 	jp tb_error
                                   2684 .endif 	 
      000F9A 1F 02            [ 2] 2685 4$:	ldw (PROD,sp),x
                                   2686 ; N1_LB * N2_HB	 
      000F9C 7B 07            [ 1] 2687 	ld a,(N1_LB,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F9E 97               [ 1] 2688 	ld xl,a 
      000F9F 7B 08            [ 1] 2689 	ld a,(N2_HB,sp)
      000FA1 42               [ 4] 2690 	mul x,a
      000FA2 9F               [ 1] 2691 	ld a,xl 
      000FA3 1B 02            [ 1] 2692 	add a,(PROD,sp)
                           000000  2693 .if MATH_OVF 	
                                   2694 	bcp a,#0x80 
                                   2695 	jreq 5$ 
                                   2696 	ld a,#ERR_MATH_OVF 
                                   2697 	jp tb_error
                                   2698 .endif 	 
      000FA5 6B 02            [ 1] 2699 5$:	ld (PROD,sp),a 
                                   2700 ; N1_HB * N2_LB 
      000FA7 7B 06            [ 1] 2701 	ld a,(N1_HB,sp)
      000FA9 97               [ 1] 2702 	ld xl,a 
      000FAA 7B 09            [ 1] 2703 	ld a,(N2_LB,sp)
      000FAC 42               [ 4] 2704 	mul x,a 
      000FAD 9F               [ 1] 2705 	ld a,xl 
      000FAE 1B 02            [ 1] 2706 	add a,(PROD,sp)
                           000000  2707 .if MATH_OVF 	
                                   2708 	bcp a,#0x80 
                                   2709 	jreq 6$ 
                                   2710 	ld a,#ERR_MATH_OVF 
                                   2711 	jp tb_error
                                   2712 .endif 	 
      000FB0 6B 02            [ 1] 2713 6$:	ld (PROD,sp),a 
                                   2714 ; N1_HB * N2_HB 	
                                   2715 ; it is pointless to multiply N1_HB*N2_HB 
                                   2716 ; as this product is over 65535 or 0 
                                   2717 ;
                                   2718 ; sign adjust product
      000FB2 0D 01            [ 1] 2719 	tnz (SIGN,sp)
      000FB4 27 05            [ 1] 2720 	jreq 7$
      000FB6 1E 02            [ 2] 2721 	ldw x, (PROD,sp)
      000FB8 50               [ 2] 2722 	negw x
      000FB9 1F 02            [ 2] 2723 	ldw (PROD,sp),x  
      000FBB                       2724 7$: 
      000FBB 1E 02            [ 2] 2725 	ldw x,(PROD,sp) 
      000FBD                       2726 	_drop VSIZE 
      000FBD 5B 03            [ 2]    1     addw sp,#VSIZE 
      000FBF 81               [ 4] 2727 	ret
                                   2728 
                                   2729 ;----------------------------------
                                   2730 ;  euclidian divide n2/n1 
                                   2731 ; input:
                                   2732 ;    N2 	on cstack
                                   2733 ;    N1 	on cstack
                                   2734 ; output:
                                   2735 ;    X      n2/n1 
                                   2736 ;    Y      remainder 
                                   2737 ;----------------------------------
      000FC0                       2738 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      000FC0                       2739 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FC0                       2740 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2741 	; local variables
                           000001  2742 	SQUOT=1 ; sign quotient
                           000002  2743 	SDIVD=2 ; sign dividend  
                           000002  2744 	VSIZE=2
      000FC0                       2745 divide:
      000FC0                       2746 	_vars VSIZE 
      000FC0 52 02            [ 2]    1     sub sp,#VSIZE 
      000FC2 0F 01            [ 1] 2747 	clr (SQUOT,sp)
      000FC4 0F 02            [ 1] 2748 	clr (SDIVD,sp)
                                   2749 ; check for 0 divisor
      000FC6 1E 05            [ 2] 2750 	ldw x,(DIVISR,sp)
      000FC8 5D               [ 2] 2751 	tnzw x 
      000FC9 26 05            [ 1] 2752     jrne 0$
      000FCB A6 04            [ 1] 2753 	ld a,#ERR_DIV0 
      000FCD CC 05 FD         [ 2] 2754 	jp tb_error 
                                   2755 ; check divisor sign 	
      000FD0 9E               [ 1] 2756 0$:	ld a,xh 
      000FD1 A5 80            [ 1] 2757 	bcp a,#0x80 
      000FD3 27 03            [ 1] 2758 	jreq 1$
      000FD5 03 01            [ 1] 2759 	cpl (SQUOT,sp)
      000FD7 50               [ 2] 2760 	negw x 
      000FD8 1F 05            [ 2] 2761 1$:	ldw (DIVISR,sp),x
                                   2762 ; check dividend sign 	 
      000FDA 1E 07            [ 2] 2763     ldw x,(DIVIDND,sp)
      000FDC 9E               [ 1] 2764 	ld a,xh 
      000FDD A5 80            [ 1] 2765 	bcp a,#0x80 
      000FDF 27 05            [ 1] 2766 	jreq 2$ 
      000FE1 03 01            [ 1] 2767 	cpl (SQUOT,sp)
      000FE3 03 02            [ 1] 2768 	cpl (SDIVD,sp)
      000FE5 50               [ 2] 2769 	negw x 
      000FE6 16 05            [ 2] 2770 2$:	ldw y,(DIVISR,sp)
      000FE8 65               [ 2] 2771 	divw x,y
      000FE9 90 CF 00 09      [ 2] 2772 	ldw acc16,y 
                                   2773 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      000FED 0D 02            [ 1] 2774 	tnz (SDIVD,sp)
      000FEF 27 0B            [ 1] 2775 	jreq 7$
      000FF1 90 5D            [ 2] 2776 	tnzw y 
      000FF3 27 07            [ 1] 2777 	jreq 7$
      000FF5 5C               [ 1] 2778 	incw x
      000FF6 16 05            [ 2] 2779 	ldw y,(DIVISR,sp)
      000FF8 72 B2 00 09      [ 2] 2780 	subw y,acc16
      000FFC 0D 01            [ 1] 2781 7$: tnz (SQUOT,sp)
      000FFE 27 01            [ 1] 2782 	jreq 9$ 	 
      001000 50               [ 2] 2783 8$:	negw x 
      001001                       2784 9$: 
      001001                       2785 	_drop VSIZE 
      001001 5B 02            [ 2]    1     addw sp,#VSIZE 
      001003 81               [ 4] 2786 	ret 
                                   2787 
                                   2788 
                                   2789 ;----------------------------------
                                   2790 ;  remainder resulting from euclidian 
                                   2791 ;  division of n2/n1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2792 ; input:
                                   2793 ;   N1 		cstack 
                                   2794 ;   N2      cstack
                                   2795 ; output:
                                   2796 ;   X       N2%N1 
                                   2797 ;----------------------------------
                           000003  2798 	N1=3
                           000005  2799 	N2=5
                           000004  2800 	VSIZE=4
      001004                       2801 modulo:
      001004 1E 03            [ 2] 2802 	Ldw x,(N1,sp)
      001006 16 05            [ 2] 2803 	ldw y,(N2,sp)
      001008                       2804 	_vars VSIZE 
      001008 52 04            [ 2]    1     sub sp,#VSIZE 
      00100A 1F 01            [ 2] 2805 	ldw (1,sp),x 
      00100C 17 03            [ 2] 2806 	ldw (3,sp),y 
      00100E CD 0F C0         [ 4] 2807 	call divide 
      001011 93               [ 1] 2808 	ldw x,y
      001012                       2809 	_drop VSIZE 
      001012 5B 04            [ 2]    1     addw sp,#VSIZE 
      001014 81               [ 4] 2810 	ret 
                                   2811 
                                   2812 ;---------------------------------
                                   2813 ; input:
                                   2814 ;	X 		dictionary entry point 
                                   2815 ;  pad		.asciz name to search 
                                   2816 ; output:
                                   2817 ;  A 		TK_CMD|TK_FUNC|TK_NONE 
                                   2818 ;  X		execution address | 0 
                                   2819 ;---------------------------------
                           000001  2820 	NLEN=1 ; cmd length 
                           000002  2821 	YSAVE=2
                           000003  2822 	VSIZE=3 
      001015                       2823 search_dict:
      001015                       2824 	_vars VSIZE 
      001015 52 03            [ 2]    1     sub sp,#VSIZE 
      001017 90 93            [ 1] 2825 	ldw y,x 
      001019                       2826 search_next:	
      001019 90 F6            [ 1] 2827 	ld a,(y)
      00101B A4 7F            [ 1] 2828 	and a,#0x7f 
      00101D 6B 01            [ 1] 2829 	ld (NLEN,sp),a  
      00101F AE 17 18         [ 2] 2830 	ldw x,#pad 
      001022 17 02            [ 2] 2831 	ldw (YSAVE,sp),y
      001024 90 5C            [ 1] 2832 	incw y  
      001026                       2833 cp_loop:
      001026 F6               [ 1] 2834 	ld a,(x)
      001027 27 1E            [ 1] 2835 	jreq str_match 
      001029 0D 01            [ 1] 2836 	tnz (NLEN,sp)
      00102B 27 0B            [ 1] 2837 	jreq no_match  
      00102D 90 F1            [ 1] 2838 	cp a,(y)
      00102F 26 07            [ 1] 2839 	jrne no_match 
      001031 90 5C            [ 1] 2840 	incw y 
      001033 5C               [ 1] 2841 	incw x
      001034 0A 01            [ 1] 2842 	dec (NLEN,sp)
      001036 20 EE            [ 2] 2843 	jra cp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001038                       2844 no_match:
      001038 16 02            [ 2] 2845 	ldw y,(YSAVE,sp) 
      00103A 72 A2 00 02      [ 2] 2846 	subw y,#2 ; move Y to link field
      00103E 4B 00            [ 1] 2847 	push #TK_NONE 
      001040 90 FE            [ 2] 2848 	ldw y,(y) ; next word link 
      001042 84               [ 1] 2849 	pop a ; TK_NONE 
      001043 27 24            [ 1] 2850 	jreq search_exit  ; not found  
                                   2851 ;try next 
      001045 20 D2            [ 2] 2852 	jra search_next
      001047                       2853 str_match:
      001047 16 02            [ 2] 2854 	ldw y,(YSAVE,sp)
      001049 90 F6            [ 1] 2855 	ld a,(y)
      00104B 6B 01            [ 1] 2856 	ld (NLEN,sp),a ; needed to test bit 7 
      00104D A4 7F            [ 1] 2857 	and a,#0x7f 
                                   2858 ; move y to procedure address field 	
      00104F 4C               [ 1] 2859 	inc a 
      001050 C7 00 0A         [ 1] 2860 	ld acc8,a 
      001053 72 5F 00 09      [ 1] 2861 	clr acc16 
      001057 72 B9 00 09      [ 2] 2862 	addw y,acc16 
      00105B 90 FE            [ 2] 2863 	ldw y,(y) ; routine entry point 
      00105D 7B 01            [ 1] 2864 	ld a,(NLEN,sp)
      00105F A5 80            [ 1] 2865 	bcp a,#0x80 
      001061 27 04            [ 1] 2866 	jreq 1$
      001063 A6 0C            [ 1] 2867 	ld a,#TK_FUNC 
      001065 20 02            [ 2] 2868 	jra search_exit
      001067 A6 07            [ 1] 2869 1$: ld a,#TK_CMD 
      001069                       2870 search_exit: 
      001069 93               [ 1] 2871 	ldw x,y ; x=routine address 
      00106A                       2872 	_drop VSIZE 	 
      00106A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00106C 81               [ 4] 2873 	ret 
                                   2874 
                                   2875 ;---------------------
                                   2876 ; check if next token
                                   2877 ;  is of expected type 
                                   2878 ; input:
                                   2879 ;   A 		 expected token attribute
                                   2880 ;  ouput:
                                   2881 ;   none     if fail call tb_error 
                                   2882 ;--------------------
      00106D                       2883 expect:
      00106D 88               [ 1] 2884 	push a 
      00106E CD 0B E6         [ 4] 2885 	call get_token 
      001071 11 01            [ 1] 2886 	cp a,(1,sp)
      001073 27 03            [ 1] 2887 	jreq 1$
      001075 CC 05 FB         [ 2] 2888 	jp syntax_error
      001078 84               [ 1] 2889 1$: pop a 
      001079 81               [ 4] 2890 	ret 
                                   2891 
                                   2892 
                                   2893 ;-------------------------------
                                   2894 ; parse embedded BASIC routines 
                                   2895 ; arguments list.
                                   2896 ; arg_list::=  rel[','rel]*
                                   2897 ; all arguments are of integer type
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2898 ; input:
                                   2899 ;   none
                                   2900 ; output:
                                   2901 ;   A 			number of arguments pushed on dstack  
                                   2902 ;--------------------------------
                           000001  2903 	ARG_CNT=1 
      00107A                       2904 arg_list:
      00107A 4B 00            [ 1] 2905 	push #0  
      00107C CD 11 B6         [ 4] 2906 1$: call relation
      00107F A1 00            [ 1] 2907 	cp a,#TK_NONE 
      001081 27 19            [ 1] 2908 	jreq 5$
      001083 A1 0A            [ 1] 2909 	cp a,#TK_INTGR
      001085 26 12            [ 1] 2910 	jrne 4$
      001087 CD 0E 7C         [ 4] 2911 3$: call dpush 
      00108A 0C 01            [ 1] 2912     inc (ARG_CNT,sp)
      00108C CD 0B E6         [ 4] 2913 	call get_token 
      00108F A1 00            [ 1] 2914 	cp a,#TK_NONE 
      001091 27 09            [ 1] 2915 	jreq 5$ 
      001093 A1 08            [ 1] 2916 	cp a,#TK_COMMA 
      001095 26 02            [ 1] 2917 	jrne 4$
      001097 20 E3            [ 2] 2918 	jra 1$ 
      001099 CD 0E 75         [ 4] 2919 4$:	call unget_token 
      00109C 84               [ 1] 2920 5$:	pop a 
      00109D 81               [ 4] 2921 	ret 
                                   2922 
                                   2923 
                                   2924 
                                   2925 ;--------------------------------
                                   2926 ;   BASIC commnands 
                                   2927 ;--------------------------------
                                   2928 
                                   2929 ;--------------------------------
                                   2930 ;  arithmetic and relational 
                                   2931 ;  routines
                                   2932 ;  operators precedence
                                   2933 ;  highest to lowest
                                   2934 ;  operators on same row have 
                                   2935 ;  same precedence and are executed
                                   2936 ;  from left to right.
                                   2937 ;	'*','/','%'
                                   2938 ;   '-','+'
                                   2939 ;   '=','>','<','>=','<=','<>','><'
                                   2940 ;   '<>' and '><' are equivalent for not equal.
                                   2941 ;--------------------------------
                                   2942 
                                   2943 ;---------------------
                                   2944 ; return array element
                                   2945 ; address from @(expr)
                                   2946 ; input:
                                   2947 ;   A 		TK_ARRAY
                                   2948 ; output:
                                   2949 ;   A 		TK_INTGR
                                   2950 ;	X 		element address 
                                   2951 ;----------------------
      00109E                       2952 get_array_element:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      00109E CD 0E B0         [ 4] 2953 	call ddrop 
      0010A1 A6 04            [ 1] 2954 	ld a,#TK_LPAREN 
      0010A3 CD 10 6D         [ 4] 2955 	call expect
      0010A6 CD 11 B6         [ 4] 2956 	call relation 
      0010A9 A1 0A            [ 1] 2957 	cp a,#TK_INTGR 
      0010AB 27 03            [ 1] 2958 	jreq 1$
      0010AD CC 05 FB         [ 2] 2959 	jp syntax_error
      0010B0 89               [ 2] 2960 1$: pushw x 
      0010B1 A6 05            [ 1] 2961 	ld a,#TK_RPAREN 
      0010B3 CD 10 6D         [ 4] 2962 	call expect
                                   2963 	; check for bounds 
      0010B6 85               [ 2] 2964 	popw x   
      0010B7 C3 00 22         [ 2] 2965 	cpw x,array_size 
      0010BA 23 05            [ 2] 2966 	jrule 3$
                                   2967 ; bounds {1..array_size}	
      0010BC A6 0A            [ 1] 2968 2$: ld a,#ERR_BAD_VALUE 
      0010BE CC 05 FD         [ 2] 2969 	jp tb_error 
      0010C1 5D               [ 2] 2970 3$: tnzw  x
      0010C2 27 F8            [ 1] 2971 	jreq 2$ 
      0010C4 58               [ 2] 2972 	sllw x 
      0010C5 89               [ 2] 2973 	pushw x 
      0010C6 CE 00 20         [ 2] 2974 	ldw x,array_addr  
      0010C9 72 F0 01         [ 2] 2975 	subw x,(1,sp)
      0010CC                       2976 	_drop 2   
      0010CC 5B 02            [ 2]    1     addw sp,#2 
      0010CE A6 0A            [ 1] 2977 	ld a,#TK_INTGR
      0010D0 81               [ 4] 2978 	ret 
                                   2979 
                                   2980 ;***********************************
                                   2981 ;   expression parse,execute 
                                   2982 ;***********************************
                                   2983 ;-----------------------------------
                                   2984 ; factor ::= ['+'|'-'|e] var | @ |
                                   2985 ;			 integer | function |
                                   2986 ;			 '('relation')' 
                                   2987 ; output:
                                   2988 ;   A    token attribute 
                                   2989 ;   X 	 integer
                                   2990 ; ---------------------------------
                           000001  2991 	NEG=1
                           000001  2992 	VSIZE=1
      0010D1                       2993 factor:
      0010D1                       2994 	_vars VSIZE 
      0010D1 52 01            [ 2]    1     sub sp,#VSIZE 
      0010D3 CD 0B E6         [ 4] 2995 	call get_token
      0010D6 A1 02            [ 1] 2996 	cp a,#2 
      0010D8 2B 48            [ 1] 2997 	jrmi 20$
      0010DA 6B 01            [ 1] 2998 1$:	ld (NEG,sp),a 
      0010DC A4 10            [ 1] 2999 	and a,#TK_GRP_ADD  
      0010DE 26 04            [ 1] 3000 	jrne 2$
      0010E0 7B 01            [ 1] 3001 	ld a,(NEG,sp)
      0010E2 20 03            [ 2] 3002 	jra 4$  
      0010E4                       3003 2$:	
      0010E4 CD 0B E6         [ 4] 3004 	call get_token 
      0010E7                       3005 4$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010E7 A1 0C            [ 1] 3006 	cp a,#TK_FUNC 
      0010E9 26 03            [ 1] 3007 	jrne 5$ 
      0010EB FD               [ 4] 3008 	call (x) 
      0010EC 20 2B            [ 2] 3009 	jra 18$ 
      0010EE                       3010 5$:
      0010EE A1 0A            [ 1] 3011 	cp a,#TK_INTGR
      0010F0 26 02            [ 1] 3012 	jrne 6$
      0010F2 20 25            [ 2] 3013 	jra 18$
      0010F4                       3014 6$:
      0010F4 A1 03            [ 1] 3015 	cp a,#TK_ARRAY
      0010F6 26 06            [ 1] 3016 	jrne 10$
      0010F8 CD 10 9E         [ 4] 3017 	call get_array_element
      0010FB FE               [ 2] 3018 	ldw x,(x)
      0010FC 20 1B            [ 2] 3019 	jra 18$ 
      0010FE                       3020 10$:
      0010FE A1 02            [ 1] 3021 	cp a,#TK_VAR 
      001100 26 03            [ 1] 3022 	jrne 12$
      001102 FE               [ 2] 3023 	ldw x,(x)
      001103 20 14            [ 2] 3024 	jra 18$
      001105                       3025 12$:			
      001105 A1 04            [ 1] 3026 	cp a,#TK_LPAREN
      001107 26 0A            [ 1] 3027 	jrne 16$
      001109 CD 11 B6         [ 4] 3028 	call relation
      00110C A6 05            [ 1] 3029 	ld a,#TK_RPAREN 
      00110E CD 10 6D         [ 4] 3030 	call expect
      001111 20 06            [ 2] 3031 	jra 18$	
      001113                       3032 16$:
      001113 CD 0E 75         [ 4] 3033 	call unget_token
      001116 4F               [ 1] 3034 	clr a 
      001117 20 09            [ 2] 3035 	jra 20$ 
      001119                       3036 18$: 
      001119 A6 11            [ 1] 3037 	ld a,#TK_MINUS 
      00111B 11 01            [ 1] 3038 	cp a,(NEG,sp)
      00111D 26 01            [ 1] 3039 	jrne 19$
      00111F 50               [ 2] 3040 	negw x
      001120                       3041 19$:
      001120 A6 0A            [ 1] 3042 	ld a,#TK_INTGR
      001122                       3043 20$:
      001122                       3044 	_drop VSIZE
      001122 5B 01            [ 2]    1     addw sp,#VSIZE 
      001124 81               [ 4] 3045 	ret
                                   3046 
                                   3047 ;-----------------------------------
                                   3048 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3049 ; output:
                                   3050 ;   A    	token attribute 
                                   3051 ;	X		integer
                                   3052 ;-----------------------------------
                           000001  3053 	N1=1
                           000003  3054 	N2=3
                           000005  3055 	MULOP=5
                           000005  3056 	VSIZE=5
      001125                       3057 term:
      001125                       3058 	_vars VSIZE
      001125 52 05            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001127 CD 10 D1         [ 4] 3059 	call factor
      00112A A1 02            [ 1] 3060 	cp a,#2
      00112C 2B 41            [ 1] 3061 	jrmi term_exit
      00112E                       3062 term01:	 ; check for  operator 
      00112E 1F 03            [ 2] 3063 	ldw (N2,sp),x  ; save first factor 
      001130 CD 0B E6         [ 4] 3064 	call get_token
      001133 A1 02            [ 1] 3065 	cp a,#2
      001135 2B 34            [ 1] 3066 	jrmi 9$
      001137 6B 05            [ 1] 3067 0$:	ld (MULOP,sp),a
      001139 A4 30            [ 1] 3068 	and a,#TK_GRP_MASK
      00113B A1 20            [ 1] 3069 	cp a,#TK_GRP_MULT
      00113D 27 07            [ 1] 3070 	jreq 1$
      00113F 7B 05            [ 1] 3071 	ld a,(MULOP,sp) 
      001141 CD 0E 75         [ 4] 3072 	call unget_token 
      001144 20 25            [ 2] 3073 	jra 9$
      001146                       3074 1$:	; got *|/|%
      001146 CD 10 D1         [ 4] 3075 	call factor
      001149 A1 0A            [ 1] 3076 	cp a,#TK_INTGR
      00114B 27 03            [ 1] 3077 	jreq 2$ 
      00114D CC 05 FB         [ 2] 3078 	jp syntax_error
      001150 1F 01            [ 2] 3079 2$:	ldw (N1,sp),x  
      001152 7B 05            [ 1] 3080 	ld a,(MULOP,sp) 
      001154 A1 20            [ 1] 3081 	cp a,#TK_MULT 
      001156 26 05            [ 1] 3082 	jrne 3$
      001158 CD 0F 78         [ 4] 3083 	call multiply 
      00115B 20 D1            [ 2] 3084 	jra term01
      00115D A1 21            [ 1] 3085 3$: cp a,#TK_DIV 
      00115F 26 05            [ 1] 3086 	jrne 4$ 
      001161 CD 0F C0         [ 4] 3087 	call divide 
      001164 20 C8            [ 2] 3088 	jra term01 
      001166 CD 10 04         [ 4] 3089 4$: call modulo
      001169 20 C3            [ 2] 3090 	jra term01 
      00116B 1E 03            [ 2] 3091 9$: ldw x,(N2,sp)  
      00116D A6 0A            [ 1] 3092 	ld a,#TK_INTGR 	
      00116F                       3093 term_exit:
      00116F                       3094 	_drop VSIZE 
      00116F 5B 05            [ 2]    1     addw sp,#VSIZE 
      001171 81               [ 4] 3095 	ret 
                                   3096 
                                   3097 ;-------------------------------
                                   3098 ;  expr ::= term [['+'|'-'] term]*
                                   3099 ;  result range {-32768..32767}
                                   3100 ;  output:
                                   3101 ;   A    token attribute 
                                   3102 ;   X	 integer   
                                   3103 ;-------------------------------
                           000001  3104 	N1=1 
                           000003  3105 	N2=3
                           000005  3106 	OP=5 
                           000005  3107 	VSIZE=5 
      001172                       3108 expression:
      001172                       3109 	_vars VSIZE 
      001172 52 05            [ 2]    1     sub sp,#VSIZE 
      001174 CD 11 25         [ 4] 3110 	call term
      001177 A1 02            [ 1] 3111 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001179 2B 38            [ 1] 3112 	jrmi expr_exit 
      00117B 1F 03            [ 2] 3113 0$:	ldw (N2,sp),x 
      00117D CD 0B E6         [ 4] 3114 	call get_token
      001180 A1 02            [ 1] 3115 	cp a,#2
      001182 2B 2B            [ 1] 3116 	jrmi 9$ 
      001184 6B 05            [ 1] 3117 1$:	ld (OP,sp),a  
      001186 A4 30            [ 1] 3118 	and a,#TK_GRP_MASK
      001188 A1 10            [ 1] 3119 	cp a,#TK_GRP_ADD 
      00118A 27 07            [ 1] 3120 	jreq 2$ 
      00118C 7B 05            [ 1] 3121 	ld a,(OP,sp)
      00118E CD 0E 75         [ 4] 3122 	call unget_token
      001191 20 1C            [ 2] 3123 	jra 9$
      001193                       3124 2$: 
      001193 CD 11 25         [ 4] 3125 	call term
      001196 A1 0A            [ 1] 3126 	cp a,#TK_INTGR 
      001198 27 03            [ 1] 3127 	jreq 3$
      00119A CC 05 FB         [ 2] 3128 	jp syntax_error
      00119D 1F 01            [ 2] 3129 3$:	ldw (N1,sp),x 
      00119F 7B 05            [ 1] 3130 	ld a,(OP,sp)
      0011A1 A1 10            [ 1] 3131 	cp a,#TK_PLUS 
      0011A3 26 05            [ 1] 3132 	jrne 4$
      0011A5 CD 0F 6A         [ 4] 3133 	call add 
      0011A8 20 D1            [ 2] 3134 	jra 0$ 
      0011AA CD 0F 72         [ 4] 3135 4$:	call substract
      0011AD 20 CC            [ 2] 3136 	jra 0$
      0011AF 1E 03            [ 2] 3137 9$: ldw x,(N2,sp)
      0011B1 A6 0A            [ 1] 3138 	ld a,#TK_INTGR	
      0011B3                       3139 expr_exit:
      0011B3                       3140 	_drop VSIZE 
      0011B3 5B 05            [ 2]    1     addw sp,#VSIZE 
      0011B5 81               [ 4] 3141 	ret 
                                   3142 
                                   3143 ;---------------------------------------------
                                   3144 ; rel ::= expr rel_op expr
                                   3145 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3146 ;  relation return 1 | 0  for true | false 
                                   3147 ;  output:
                                   3148 ;    A 		token attribute  
                                   3149 ;	 X		1|0
                                   3150 ;---------------------------------------------
                           000001  3151 	N1=1
                           000003  3152 	N2=3
                           000005  3153 	RELOP=5
                           000005  3154 	VSIZE=5 
      0011B6                       3155 relation: 
      0011B6                       3156 	_vars VSIZE
      0011B6 52 05            [ 2]    1     sub sp,#VSIZE 
      0011B8 CD 11 72         [ 4] 3157 	call expression
      0011BB A1 02            [ 1] 3158 	cp a,#2 
      0011BD 2B 4B            [ 1] 3159 	jrmi rel_exit 
                                   3160 	; expect rel_op or leave 
      0011BF 1F 03            [ 2] 3161 	ldw (N2,sp),x 
      0011C1 CD 0B E6         [ 4] 3162 	call get_token 
      0011C4 A1 02            [ 1] 3163 	cp a,#2
      0011C6 2B 3E            [ 1] 3164 	jrmi 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011C8                       3165 1$:	
      0011C8 6B 05            [ 1] 3166 	ld (RELOP,sp),a 
      0011CA A4 30            [ 1] 3167 	and a,#TK_GRP_MASK
      0011CC A1 30            [ 1] 3168 	cp a,#0x30 
      0011CE 27 07            [ 1] 3169 	jreq 2$
      0011D0 7B 05            [ 1] 3170 	ld a,(RELOP,sp)
      0011D2 CD 0E 75         [ 4] 3171 	call unget_token  
      0011D5 20 2F            [ 2] 3172 	jra 9$
      0011D7                       3173 2$:	; expect another expression or error 
      0011D7 CD 11 72         [ 4] 3174 	call expression
      0011DA A1 0A            [ 1] 3175 	cp a,#TK_INTGR 
      0011DC 27 03            [ 1] 3176 	jreq 3$
      0011DE CC 05 FB         [ 2] 3177 	jp syntax_error 
      0011E1 1F 01            [ 2] 3178 3$:	ldw (N1,sp),x 
      0011E3 CD 0F 72         [ 4] 3179 	call substract
      0011E6 26 06            [ 1] 3180 	jrne 4$
      0011E8 35 02 00 0A      [ 1] 3181 	mov acc8,#2 ; n1==n2
      0011EC 20 0C            [ 2] 3182 	jra 6$ 
      0011EE                       3183 4$: 
      0011EE 2C 06            [ 1] 3184 	jrsgt 5$  
      0011F0 35 04 00 0A      [ 1] 3185 	mov acc8,#4 ; n1<2 
      0011F4 20 04            [ 2] 3186 	jra 6$
      0011F6                       3187 5$:
      0011F6 35 01 00 0A      [ 1] 3188 	mov acc8,#1 ; n1>n2 
      0011FA                       3189 6$:
      0011FA 5F               [ 1] 3190 	clrw x 
      0011FB C6 00 0A         [ 1] 3191 	ld a, acc8  
      0011FE 14 05            [ 1] 3192 	and a,(RELOP,sp)
      001200 4D               [ 1] 3193 	tnz a 
      001201 27 05            [ 1] 3194 	jreq 10$
      001203 5C               [ 1] 3195 	incw x 
      001204                       3196 7$:	 
      001204 20 02            [ 2] 3197 	jra 10$  	
      001206 1E 03            [ 2] 3198 9$: ldw x,(N2,sp)
      001208                       3199 10$:
      001208 A6 0A            [ 1] 3200 	ld a,#TK_INTGR
      00120A                       3201 rel_exit: 	 
      00120A                       3202 	_drop VSIZE
      00120A 5B 05            [ 2]    1     addw sp,#VSIZE 
      00120C 81               [ 4] 3203 	ret 
                                   3204 
                                   3205 ;--------------------------------
                                   3206 ; BASIC: SHOW 
                                   3207 ;  show content of dstack,cstack
                                   3208 ;--------------------------------
      00120D                       3209 show:
      00120D C6 00 07         [ 1] 3210 	ld a,base 
      001210 88               [ 1] 3211 	push a 
      001211 CD 0F 0A         [ 4] 3212 	call dots
      001214 CD 0F 3D         [ 4] 3213 	call dotr 
      001217 84               [ 1] 3214 	pop a 
      001218 C7 00 07         [ 1] 3215 	ld base,a 
      00121B 4F               [ 1] 3216 	clr a 
      00121C 81               [ 4] 3217 	ret
                                   3218 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3219 ;--------------------------------------------
                                   3220 ; BASIC: HEX 
                                   3221 ; select hexadecimal base for integer print
                                   3222 ;---------------------------------------------
      00121D                       3223 hex_base:
      00121D 35 10 00 07      [ 1] 3224 	mov base,#16 
      001221 81               [ 4] 3225 	ret 
                                   3226 
                                   3227 ;--------------------------------------------
                                   3228 ; BASIC: DEC 
                                   3229 ; select decimal base for integer print
                                   3230 ;---------------------------------------------
      001222                       3231 dec_base:
      001222 35 0A 00 07      [ 1] 3232 	mov base,#10
      001226 81               [ 4] 3233 	ret 
                                   3234 
                                   3235 ;------------------------
                                   3236 ; BASIC: SIZE 
                                   3237 ; return free size in text area
                                   3238 ; output:
                                   3239 ;   A 		TK_INTGR
                                   3240 ;   X 	    size integer
                                   3241 ;--------------------------
      001227                       3242 size:
      001227 AE 16 C8         [ 2] 3243 	ldw x,#tib 
      00122A 72 B0 00 1D      [ 2] 3244 	subw x,txtend 
      00122E A6 0A            [ 1] 3245 	ld a,#TK_INTGR
      001230 81               [ 4] 3246 	ret 
                                   3247 
                                   3248 
                                   3249 ;------------------------
                                   3250 ; BASIC: UBOUND  
                                   3251 ; return array variable size 
                                   3252 ; output:
                                   3253 ;   A 		TK_INTGR
                                   3254 ;   X 	    array size 
                                   3255 ;--------------------------
      001231                       3256 ubound:
      001231 AE 16 C8         [ 2] 3257 	ldw x,#tib
      001234 72 B0 00 1D      [ 2] 3258 	subw x,txtend 
      001238 54               [ 2] 3259 	srlw x 
      001239 CF 00 22         [ 2] 3260 	ldw array_size,x
      00123C A6 0A            [ 1] 3261 	ld a,#TK_INTGR
      00123E 81               [ 4] 3262 	ret 
                                   3263 
                                   3264 ;-----------------------------
                                   3265 ; BASIC: LET var=expr 
                                   3266 ; variable assignement 
                                   3267 ; output:
                                   3268 ;   A 		TK_NONE 
                                   3269 ;-----------------------------
      00123F                       3270 let:
      00123F CD 0B E6         [ 4] 3271 	call get_token 
      001242 A1 02            [ 1] 3272 	cp a,#TK_VAR 
      001244 27 03            [ 1] 3273 	jreq let02
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001246 CC 05 FB         [ 2] 3274 	jp syntax_error
      001249                       3275 let02:
      001249 CD 0E 7C         [ 4] 3276 	call dpush 
      00124C CD 0B E6         [ 4] 3277 	call get_token 
      00124F A1 32            [ 1] 3278 	cp a,#TK_EQUAL
      001251 27 03            [ 1] 3279 	jreq 1$
      001253 CC 05 FB         [ 2] 3280 	jp syntax_error
      001256                       3281 1$:	
      001256 CD 11 B6         [ 4] 3282 	call relation   
      001259 A1 0A            [ 1] 3283 	cp a,#TK_INTGR 
      00125B 27 03            [ 1] 3284 	jreq 2$
      00125D CC 05 FB         [ 2] 3285 	jp syntax_error
      001260                       3286 2$:	
      001260 90 93            [ 1] 3287 	ldw y,x 
      001262 CD 0E 89         [ 4] 3288 	call dpop  
      001265 FF               [ 2] 3289 	ldw (x),y   
      001266 81               [ 4] 3290 	ret 
                                   3291 
                                   3292 ;----------------------------
                                   3293 ; BASIC: LIST [[start][,end]]
                                   3294 ; list program lines 
                                   3295 ; form start to end 
                                   3296 ; if empty argument list then 
                                   3297 ; list all.
                                   3298 ;----------------------------
                           000001  3299 	FIRST=1
                           000003  3300 	LAST=3 
                           000005  3301 	LN_PTR=5
                           000006  3302 	VSIZE=6 
      001267                       3303 list:
      001267                       3304 	_vars VSIZE
      001267 52 06            [ 2]    1     sub sp,#VSIZE 
      001269 CE 00 1B         [ 2] 3305 	ldw x,txtbgn 
      00126C C3 00 1D         [ 2] 3306 	cpw x,txtend 
      00126F 2B 03            [ 1] 3307 	jrmi 1$
      001271 CC 12 EA         [ 2] 3308 	jp list_exit ; nothing to list 
      001274 1F 05            [ 2] 3309 1$:	ldw (LN_PTR,sp),x 
      001276 FE               [ 2] 3310 	ldw x,(x) 
      001277 1F 01            [ 2] 3311 	ldw (FIRST,sp),x ; list from first line 
      001279 AE 7F FF         [ 2] 3312 	ldw x,#0x7fff ; biggest line number 
      00127C 1F 03            [ 2] 3313 	ldw (LAST,sp),x 
      00127E CD 10 7A         [ 4] 3314 	call arg_list
      001281 4D               [ 1] 3315 	tnz a
      001282 27 3F            [ 1] 3316 	jreq list_start 
      001284 A1 02            [ 1] 3317 	cp a,#2 
      001286 27 07            [ 1] 3318 	jreq 4$
      001288 A1 01            [ 1] 3319 	cp a,#1 
      00128A 27 06            [ 1] 3320 	jreq first_line 
      00128C CC 05 FB         [ 2] 3321 	jp syntax_error 
      00128F CD 0E 96         [ 4] 3322 4$:	call dswap
      001292                       3323 first_line:
      001292 CD 0E 89         [ 4] 3324 	call dpop 
      001295 1F 01            [ 2] 3325 	ldw (FIRST,sp),x 
      001297 A1 01            [ 1] 3326 	cp a,#1 
      001299 27 05            [ 1] 3327 	jreq lines_skip 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00129B                       3328 last_line:
      00129B CD 0E 89         [ 4] 3329 	call dpop 
      00129E 1F 03            [ 2] 3330 	ldw (LAST,sp),x 
      0012A0                       3331 lines_skip:
      0012A0 CE 00 1B         [ 2] 3332 	ldw x,txtbgn
      0012A3 1F 05            [ 2] 3333 2$:	ldw (LN_PTR,sp),x 
      0012A5 C3 00 1D         [ 2] 3334 	cpw x,txtend 
      0012A8 2A 40            [ 1] 3335 	jrpl list_exit 
      0012AA FE               [ 2] 3336 	ldw x,(x) ;lineno 
      0012AB 13 01            [ 2] 3337 	cpw x,(FIRST,sp)
      0012AD 2A 14            [ 1] 3338 	jrpl list_start 
      0012AF 1E 05            [ 2] 3339 	ldw x,(LN_PTR,sp) 
      0012B1 1C 00 02         [ 2] 3340 	addw x,#2 
      0012B4 F6               [ 1] 3341 	ld a,(x)
      0012B5 5C               [ 1] 3342 	incw x 
      0012B6 C7 00 0A         [ 1] 3343 	ld acc8,a 
      0012B9 72 5F 00 09      [ 1] 3344 	clr acc16 
      0012BD 72 BB 00 09      [ 2] 3345 	addw x,acc16
      0012C1 20 E0            [ 2] 3346 	jra 2$ 
                                   3347 ; print loop
      0012C3                       3348 list_start:
      0012C3 1E 05            [ 2] 3349 	ldw x,(LN_PTR,sp)
      0012C5                       3350 3$:	
      0012C5 CD 12 ED         [ 4] 3351 	call prt_basic_line
      0012C8 1E 05            [ 2] 3352 	ldw x,(LN_PTR,sp)
      0012CA 1C 00 02         [ 2] 3353 	addw x,#2 
      0012CD F6               [ 1] 3354 	ld a,(x)
      0012CE 5C               [ 1] 3355 	incw x 
      0012CF C7 00 0A         [ 1] 3356 	ld acc8,a 
      0012D2 72 5F 00 09      [ 1] 3357 	clr acc16 
      0012D6 72 BB 00 09      [ 2] 3358 	addw x,acc16
      0012DA C3 00 1D         [ 2] 3359 	cpw x,txtend 
      0012DD 2A 0B            [ 1] 3360 	jrpl list_exit
      0012DF 1F 05            [ 2] 3361 	ldw (LN_PTR,sp),x
      0012E1 FE               [ 2] 3362 	ldw x,(x)
      0012E2 13 03            [ 2] 3363 	cpw x,(LAST,sp)  
      0012E4 2C 04            [ 1] 3364 	jrsgt list_exit 
      0012E6 1E 05            [ 2] 3365 	ldw x,(LN_PTR,sp)
      0012E8 20 DB            [ 2] 3366 	jra 3$
      0012EA                       3367 list_exit:
      0012EA                       3368 	_drop VSIZE 
      0012EA 5B 06            [ 2]    1     addw sp,#VSIZE 
      0012EC 81               [ 4] 3369 	ret
                                   3370 
                                   3371 ;--------------------------
                                   3372 ; input:
                                   3373 ;   X 		pointer at line
                                   3374 ; output:
                                   3375 ;   none 
                                   3376 ;--------------------------	
      0012ED                       3377 prt_basic_line:
      0012ED 89               [ 2] 3378 	pushw x 
      0012EE FE               [ 2] 3379 	ldw x,(x)
      0012EF CF 00 09         [ 2] 3380 	ldw acc16,x 
      0012F2 72 5F 00 08      [ 1] 3381 	clr acc24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0012F6 AE 00 05         [ 2] 3382 	ldw x,#5 
      0012F9 A6 0A            [ 1] 3383 	ld a,#10 
      0012FB CD 08 06         [ 4] 3384 	call prti24 
      0012FE 85               [ 2] 3385 	popw x 
      0012FF 1C 00 03         [ 2] 3386 	addw x,#3
      001302 CD 01 B0         [ 4] 3387 	call puts 
      001305 A6 0D            [ 1] 3388 	ld a,#CR 
      001307 CD 01 9E         [ 4] 3389 	call putc 
      00130A 81               [ 4] 3390 	ret 	
                                   3391 
                                   3392 ;---------------------------------
                                   3393 ; BASIC: PRINT|? arg_list 
                                   3394 ; print values from argument list
                                   3395 ;----------------------------------
                           000001  3396 	COMMA=1
                           000001  3397 	VSIZE=1
      00130B                       3398 print:
      00130B 4B 00            [ 1] 3399 push #0 ; local variable COMMA 
      00130D                       3400 reset_comma:
      00130D 0F 01            [ 1] 3401 	clr (COMMA,sp)
      00130F                       3402 prt_loop:
      00130F CD 11 B6         [ 4] 3403 	call relation
      001312 A1 01            [ 1] 3404 	cp a,#TK_COLON 
      001314 27 50            [ 1] 3405 	jreq print_exit   
      001316 A1 0A            [ 1] 3406 	cp a,#TK_INTGR 
      001318 26 05            [ 1] 3407 	jrne 0$ 
      00131A CD 08 4E         [ 4] 3408 	call print_int 
      00131D 20 EE            [ 2] 3409 	jra reset_comma
      00131F                       3410 0$: 	
      00131F CD 0B E6         [ 4] 3411 	call get_token
      001322 A1 00            [ 1] 3412 	cp a,#TK_NONE 
      001324 27 40            [ 1] 3413 	jreq print_exit 
      001326 A1 06            [ 1] 3414 1$:	cp a,#TK_QSTR
      001328 26 05            [ 1] 3415 	jrne 2$   
      00132A CD 01 B0         [ 4] 3416 	call puts 
      00132D 20 DE            [ 2] 3417 	jra reset_comma
      00132F A1 0B            [ 1] 3418 2$: cp a,#TK_CHAR 
      001331 26 06            [ 1] 3419 	jrne 3$
      001333 9F               [ 1] 3420 	ld a,xl 
      001334 CD 01 9E         [ 4] 3421 	call putc 
      001337 20 D4            [ 2] 3422 	jra reset_comma 
      001339                       3423 3$: 	
      001339 A1 0C            [ 1] 3424 	cp a,#TK_FUNC 
      00133B 26 06            [ 1] 3425 	jrne 4$ 
      00133D FD               [ 4] 3426 	call (x)
      00133E CD 08 4E         [ 4] 3427 	call print_int 
      001341 20 CA            [ 2] 3428 	jra reset_comma 
      001343                       3429 4$: 
      001343 A1 08            [ 1] 3430 	cp a,#TK_COMMA 
      001345 26 05            [ 1] 3431 	jrne 5$
      001347 03 01            [ 1] 3432 	cpl (COMMA,sp) 
      001349 CC 13 0F         [ 2] 3433 	jp prt_loop   
      00134C                       3434 5$: 
      00134C A1 09            [ 1] 3435 	cp a,#TK_SHARP
      00134E 26 13            [ 1] 3436 	jrne 7$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001350 CD 0B E6         [ 4] 3437 	call get_token
      001353 A1 0A            [ 1] 3438 	cp a,#TK_INTGR 
      001355 27 03            [ 1] 3439 	jreq 6$
      001357 CC 05 FB         [ 2] 3440 	jp syntax_error 
      00135A                       3441 6$:
      00135A 9F               [ 1] 3442 	ld a,xl 
      00135B A4 0F            [ 1] 3443 	and a,#15 
      00135D C7 00 25         [ 1] 3444 	ld tab_width,a 
      001360 CC 13 0D         [ 2] 3445 	jp reset_comma 
      001363                       3446 7$:	
      001363 CD 0E 75         [ 4] 3447 	call unget_token
      001366                       3448 print_exit:
      001366 0D 01            [ 1] 3449 	tnz (COMMA,sp)
      001368 26 05            [ 1] 3450 	jrne 9$
      00136A A6 0D            [ 1] 3451 	ld a,#CR 
      00136C CD 01 9E         [ 4] 3452     call putc 
      00136F                       3453 9$:	_drop VSIZE 
      00136F 5B 01            [ 2]    1     addw sp,#VSIZE 
      001371 81               [ 4] 3454 	ret 
                                   3455 
                                   3456 ;----------------------
                                   3457 ; 'save_context' and
                                   3458 ; 'rest_context' must be 
                                   3459 ; called at the same 
                                   3460 ; call stack depth 
                                   3461 ; i.e. SP must have the 
                                   3462 ; save value at  
                                   3463 ; entry point of both 
                                   3464 ; routine. 
                                   3465 ;---------------------
                           000006  3466 	CTXT_SIZE=6 ; size of saved data 
                                   3467 ;--------------------
                                   3468 ; save current BASIC
                                   3469 ; interpreter context 
                                   3470 ; on cstack 
                                   3471 ;--------------------
      001372                       3472 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001372                       3473 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001372                       3474 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001372                       3475 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001372                       3476 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      001372                       3477 save_context:
      001372 CE 00 03         [ 2] 3478 	ldw x,basicptr 
      001375 1F 03            [ 2] 3479 	ldw (BPTR,sp),x
      001377 CE 00 05         [ 2] 3480 	ldw x,lineno 
      00137A 1F 05            [ 2] 3481 	ldw (LNO,sp),x 
      00137C C6 00 01         [ 1] 3482 	ld a,in 
      00137F 6B 07            [ 1] 3483 	ld (IN,sp),a
      001381 C6 00 02         [ 1] 3484 	ld a,count 
      001384 6B 08            [ 1] 3485 	ld (CNT,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001386 81               [ 4] 3486 	ret
                                   3487 
                                   3488 ;-----------------------
                                   3489 ; restore previously saved 
                                   3490 ; BASIC interpreter context 
                                   3491 ; from cstack 
                                   3492 ;-------------------------
      001387                       3493 rest_context:
      001387 1E 03            [ 2] 3494 	ldw x,(BPTR,sp)
      001389 CF 00 03         [ 2] 3495 	ldw basicptr,x 
      00138C 1E 05            [ 2] 3496 	ldw x,(LNO,sp)
      00138E CF 00 05         [ 2] 3497 	ldw lineno,x 
      001391 7B 07            [ 1] 3498 	ld a,(IN,sp)
      001393 C7 00 01         [ 1] 3499 	ld in,a
      001396 7B 08            [ 1] 3500 	ld a,(CNT,sp)
      001398 C7 00 02         [ 1] 3501 	ld count,a  
      00139B 81               [ 4] 3502 	ret
                                   3503 
                                   3504 ;------------------------------------------
                                   3505 ; BASIC: INPUT [string],var[,[string],var]
                                   3506 ; input value in variables 
                                   3507 ; [string] optionally can be used as prompt 
                                   3508 ;-----------------------------------------
                           000001  3509 	CX_BPTR=1
                           000003  3510 	CX_LNO=3
                           000004  3511 	CX_IN=4
                           000005  3512 	CX_CNT=5
                           000006  3513 	SKIP=6
                           000007  3514 	VSIZE=7
      00139C                       3515 input_var:
      00139C 72 00 00 24 05   [ 2] 3516 	btjt flags,#FRUN,1$ 
      0013A1 A6 06            [ 1] 3517 	ld a,#ERR_RUN_ONLY 
      0013A3 CC 05 FD         [ 2] 3518 	jp tb_error 
      0013A6                       3519 1$:	_vars VSIZE 
      0013A6 52 07            [ 2]    1     sub sp,#VSIZE 
      0013A8                       3520 input_loop:
      0013A8 0F 06            [ 1] 3521 	clr (SKIP,sp)
      0013AA CD 0B E6         [ 4] 3522 	call get_token 
      0013AD A1 00            [ 1] 3523 	cp a,#TK_NONE 
      0013AF 27 5C            [ 1] 3524 	jreq input_exit 
      0013B1 A1 06            [ 1] 3525 	cp a,#TK_QSTR 
      0013B3 26 08            [ 1] 3526 	jrne 1$ 
      0013B5 CD 01 B0         [ 4] 3527 	call puts 
      0013B8 03 06            [ 1] 3528 	cpl (SKIP,sp)
      0013BA CD 0B E6         [ 4] 3529 	call get_token 
      0013BD A1 02            [ 1] 3530 1$: cp a,#TK_VAR  
      0013BF 27 03            [ 1] 3531 	jreq 2$ 
      0013C1 CC 05 FB         [ 2] 3532 	jp syntax_error
      0013C4 CD 0E 7C         [ 4] 3533 2$:	call dpush 
      0013C7 0D 06            [ 1] 3534 	tnz (SKIP,sp)
      0013C9 26 0F            [ 1] 3535 	jrne 21$ 
      0013CB A6 3A            [ 1] 3536 	ld a,#':
      0013CD C7 17 19         [ 1] 3537 	ld pad+1,a 
      0013D0 72 5F 17 1A      [ 1] 3538 	clr pad+2
      0013D4 AE 17 18         [ 2] 3539 	ldw x,#pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013D7 CD 01 B0         [ 4] 3540 	call puts   
      0013DA                       3541 21$:
      0013DA CD 13 72         [ 4] 3542 	call save_context 
      0013DD AE 16 C8         [ 2] 3543 	ldw x,#tib 
      0013E0 CF 00 03         [ 2] 3544 	ldw basicptr,x  
      0013E3 72 5F 00 02      [ 1] 3545 	clr count  
      0013E7 CD 09 3C         [ 4] 3546 	call readln 
      0013EA 72 5F 00 01      [ 1] 3547 	clr in 
      0013EE CD 11 B6         [ 4] 3548 	call relation 
      0013F1 A1 0A            [ 1] 3549 	cp a,#TK_INTGR
      0013F3 27 03            [ 1] 3550 	jreq 3$ 
      0013F5 CC 05 FB         [ 2] 3551 	jp syntax_error
      0013F8 CD 0E 7C         [ 4] 3552 3$: call dpush 
      0013FB CD 0E E3         [ 4] 3553 	call store 
      0013FE CD 13 87         [ 4] 3554 	call rest_context
      001401 CD 0B E6         [ 4] 3555 	call get_token 
      001404 A1 08            [ 1] 3556 	cp a,#TK_COMMA 
      001406 26 02            [ 1] 3557 	jrne 4$
      001408 20 9E            [ 2] 3558 	jra input_loop 
      00140A CD 0E 75         [ 4] 3559 4$:	call unget_token 
      00140D                       3560 input_exit:
      00140D                       3561 	_drop VSIZE 
      00140D 5B 07            [ 2]    1     addw sp,#VSIZE 
      00140F 81               [ 4] 3562 	ret 
                                   3563 
                                   3564 
                                   3565 ;---------------------
                                   3566 ; BASIC: REMARK | ' 
                                   3567 ; begin a comment 
                                   3568 ; comment are ignored 
                                   3569 ; use ' insted of REM 
                                   3570 ; This is never called
                                   3571 ; because get_token 
                                   3572 ; take care of skipping
                                   3573 ; comment. but required
                                   3574 ; for future use of 
                                   3575 ; keyword reverse search.  
                                   3576 ;---------------------- 
      001410                       3577 rem: 
      001410 81               [ 4] 3578 	ret 
                                   3579 
                                   3580 ;---------------------
                                   3581 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3582 ; read in loop 'addr'  
                                   3583 ; apply & 'mask' to value 
                                   3584 ; loop while result==0.  
                                   3585 ; if 'xor_mask' given 
                                   3586 ; apply ^ in second  
                                   3587 ; loop while result==0 
                                   3588 ;---------------------
                           000001  3589 	XMASK=1 
                           000002  3590 	MASK=2
                           000003  3591 	ADDR=3
                           000004  3592 	VSIZE=4
      001411                       3593 wait: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001411                       3594 	_vars VSIZE
      001411 52 04            [ 2]    1     sub sp,#VSIZE 
      001413 0F 01            [ 1] 3595 	clr (XMASK,sp) 
      001415 CD 10 7A         [ 4] 3596 	call arg_list 
      001418 A1 02            [ 1] 3597 	cp a,#2
      00141A 24 03            [ 1] 3598 	jruge 0$
      00141C CC 05 FB         [ 2] 3599 	jp syntax_error 
      00141F A1 03            [ 1] 3600 0$:	cp a,#3
      001421 25 06            [ 1] 3601 	jrult 1$
      001423 CD 0E 89         [ 4] 3602 	call dpop 
      001426 9F               [ 1] 3603 	ld a,xl
      001427 6B 01            [ 1] 3604 	ld (XMASK,sp),a 
      001429 CD 0E 89         [ 4] 3605 1$: call dpop ; mask 
      00142C 9F               [ 1] 3606 	ld a,xl 
      00142D 6B 02            [ 1] 3607 	ld (MASK,sp),a 
      00142F CD 0E 89         [ 4] 3608 	call dpop ; address 
      001432 F6               [ 1] 3609 2$:	ld a,(x)
      001433 14 02            [ 1] 3610 	and a,(MASK,sp)
      001435 18 01            [ 1] 3611 	xor a,(XMASK,sp)
      001437 27 F9            [ 1] 3612 	jreq 2$ 
      001439                       3613 	_drop VSIZE 
      001439 5B 04            [ 2]    1     addw sp,#VSIZE 
      00143B 81               [ 4] 3614 	ret 
                                   3615 
                                   3616 ;---------------------
                                   3617 ; BASIC: BSET addr,mask
                                   3618 ; set bits at 'addr' corresponding 
                                   3619 ; to those of 'mask' that are at 1.
                                   3620 ; arguments:
                                   3621 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3622 ;   mask        mask|addr
                                   3623 ; output:
                                   3624 ;	none 
                                   3625 ;--------------------------
      00143C                       3626 bit_set:
      00143C CD 10 7A         [ 4] 3627 	call arg_list 
      00143F A1 02            [ 1] 3628 	cp a,#2	 
      001441 27 03            [ 1] 3629 	jreq 1$ 
      001443 CC 05 FB         [ 2] 3630 	jp syntax_error
      001446                       3631 1$: 
      001446 CD 0E 89         [ 4] 3632 	call dpop ; mask 
      001449 9F               [ 1] 3633 	ld a,xl 
      00144A CD 0E 89         [ 4] 3634 	call dpop ; addr  
      00144D FA               [ 1] 3635 	or a,(x)
      00144E F7               [ 1] 3636 	ld (x),a
      00144F 81               [ 4] 3637 	ret 
                                   3638 
                                   3639 ;---------------------
                                   3640 ; BASIC: BRES addr,mask
                                   3641 ; reset bits at 'addr' corresponding 
                                   3642 ; to those of 'mask' that are at 1.
                                   3643 ; arguments:
                                   3644 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3645 ;   mask	    ~mask&*addr  
                                   3646 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3647 ;	none 
                                   3648 ;--------------------------
      001450                       3649 bit_reset:
      001450 CD 10 7A         [ 4] 3650 	call arg_list 
      001453 A1 02            [ 1] 3651 	cp a,#2  
      001455 27 03            [ 1] 3652 	jreq 1$ 
      001457 CC 05 FB         [ 2] 3653 	jp syntax_error
      00145A                       3654 1$: 
      00145A CD 0E 89         [ 4] 3655 	call dpop ; mask 
      00145D 9F               [ 1] 3656 	ld a,xl 
      00145E 43               [ 1] 3657 	cpl a 
      00145F CD 0E 89         [ 4] 3658 	call dpop ; addr  
      001462 F4               [ 1] 3659 	and a,(x)
      001463 F7               [ 1] 3660 	ld (x),a 
      001464 81               [ 4] 3661 	ret 
                                   3662 
                                   3663 ;---------------------
                                   3664 ; BASIC: BRES addr,mask
                                   3665 ; toggle bits at 'addr' corresponding 
                                   3666 ; to those of 'mask' that are at 1.
                                   3667 ; arguments:
                                   3668 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3669 ;   mask	    mask^*addr  
                                   3670 ; output:
                                   3671 ;	none 
                                   3672 ;--------------------------
      001465                       3673 bit_toggle:
      001465 CD 10 7A         [ 4] 3674 	call arg_list 
      001468 A1 02            [ 1] 3675 	cp a,#2 
      00146A 27 03            [ 1] 3676 	jreq 1$ 
      00146C CC 05 FB         [ 2] 3677 	jp syntax_error
      00146F CD 0E 89         [ 4] 3678 1$: call dpop ; mask 
      001472 9F               [ 1] 3679 	ld a,xl 
      001473 CD 0E 89         [ 4] 3680 	call dpop ; addr  
      001476 F8               [ 1] 3681 	xor a,(x)
      001477 F7               [ 1] 3682 	ld (x),a 
      001478 81               [ 4] 3683 	ret 
                                   3684 
                                   3685 
                                   3686 ;--------------------
                                   3687 ; BASIC: POKE addr,byte
                                   3688 ; put a byte at addr 
                                   3689 ;--------------------
      001479                       3690 poke:
      001479 CD 10 7A         [ 4] 3691 	call arg_list 
      00147C A1 02            [ 1] 3692 	cp a,#2
      00147E 27 03            [ 1] 3693 	jreq 1$
      001480 CC 05 FB         [ 2] 3694 	jp syntax_error
      001483                       3695 1$:	
      001483 CD 0E 89         [ 4] 3696 	call dpop 
      001486 9F               [ 1] 3697     ld a,xl 
      001487 CD 0E 89         [ 4] 3698 	call dpop 
      00148A F7               [ 1] 3699 	ld (x),a 
      00148B 81               [ 4] 3700 	ret 
                                   3701 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3702 ;-----------------------
                                   3703 ; BASIC: PEEK(addr)
                                   3704 ; get the byte at addr 
                                   3705 ; input:
                                   3706 ;	none 
                                   3707 ; output:
                                   3708 ;	X 		value 
                                   3709 ;-----------------------
      00148C                       3710 peek:
      00148C A6 04            [ 1] 3711 	ld a,#TK_LPAREN 
      00148E CD 10 6D         [ 4] 3712 	call expect 
      001491 CD 10 7A         [ 4] 3713 	call arg_list
      001494 A1 01            [ 1] 3714 	cp a,#1 
      001496 27 03            [ 1] 3715 	jreq 1$
      001498 CC 05 FB         [ 2] 3716 	jp syntax_error
      00149B A6 05            [ 1] 3717 1$:	ld a,#TK_RPAREN 
      00149D CD 10 6D         [ 4] 3718 	call expect 
      0014A0 CD 0E 89         [ 4] 3719 	call dpop 
      0014A3 F6               [ 1] 3720 	ld a,(x)
      0014A4 5F               [ 1] 3721 	clrw x 
      0014A5 97               [ 1] 3722 	ld xl,a 
      0014A6 A6 0A            [ 1] 3723 	ld a,#TK_INTGR
      0014A8 81               [ 4] 3724 	ret 
                                   3725 
      0014A9                       3726 if: 
      0014A9 CD 11 B6         [ 4] 3727 	call relation 
      0014AC A1 0A            [ 1] 3728 	cp a,#TK_INTGR
      0014AE 27 03            [ 1] 3729 	jreq 1$ 
      0014B0 CC 05 FB         [ 2] 3730 	jp syntax_error
      0014B3 4F               [ 1] 3731 1$:	clr a 
      0014B4 5D               [ 2] 3732 	tnzw x 
      0014B5 26 05            [ 1] 3733 	jrne 9$  
                                   3734 ;skip to next line
      0014B7 55 00 02 00 01   [ 1] 3735 	mov in,count
      0014BC 81               [ 4] 3736 9$:	ret 
                                   3737 
                                   3738 ;------------------------
                                   3739 ; BASIC: FOR var=expr 
                                   3740 ; set variable to expression 
                                   3741 ; leave variable address 
                                   3742 ; on dstack and set
                                   3743 ; FFOR bit in 'flags'
                                   3744 ;-----------------
                           000001  3745 	RETL1=1
                           000003  3746 	INW=3
                           000005  3747 	BPTR=5
      0014BD                       3748 for: ; { -- var_addr }
      0014BD A6 02            [ 1] 3749 	ld a,#TK_VAR 
      0014BF CD 10 6D         [ 4] 3750 	call expect
      0014C2 CD 0E 7C         [ 4] 3751 	call dpush 
      0014C5 CD 12 49         [ 4] 3752 	call let02 
      0014C8 72 14 00 24      [ 1] 3753 	bset flags,#FFOR 
                                   3754 ; open space on cstack for BPTR and INW 
      0014CC 85               [ 2] 3755 	popw x ; call return address 
      0014CD                       3756 	_vars 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0014CD 52 04            [ 2]    1     sub sp,#4 
      0014CF 89               [ 2] 3757 	pushw x  ; RETL1 
      0014D0 5F               [ 1] 3758 	clrw x 
      0014D1 1F 05            [ 2] 3759 	ldw (BPTR,sp),x 
      0014D3 1F 03            [ 2] 3760 	ldw (INW,sp),x 
      0014D5 CD 0B E6         [ 4] 3761 	call get_token 
      0014D8 A1 07            [ 1] 3762 	cp a,#TK_CMD 
      0014DA 27 03            [ 1] 3763 	jreq 1$
      0014DC CC 05 FB         [ 2] 3764 	jp syntax_error
      0014DF                       3765 1$:  
      0014DF A3 14 E7         [ 2] 3766 	cpw x,#to 
      0014E2 27 03            [ 1] 3767 	jreq to
      0014E4 CC 05 FB         [ 2] 3768 	jp syntax_error 
                                   3769 
                                   3770 ;-----------------------------------
                                   3771 ; BASIC: TO expr 
                                   3772 ; second part of FOR loop initilization
                                   3773 ; leave limit on dstack and set 
                                   3774 ; FTO bit in 'flags'
                                   3775 ;-----------------------------------
      0014E7                       3776 to: ; { var_addr -- var_addr limit step }
      0014E7 72 04 00 24 03   [ 2] 3777 	btjt flags,#FFOR,1$
      0014EC CC 05 FB         [ 2] 3778 	jp syntax_error
      0014EF CD 11 B6         [ 4] 3779 1$: call relation  
      0014F2 A1 0A            [ 1] 3780 	cp a,#TK_INTGR 
      0014F4 27 03            [ 1] 3781 	jreq 2$ 
      0014F6 CC 05 FB         [ 2] 3782 	jp syntax_error
      0014F9                       3783 2$: 
      0014F9 CD 0E 7C         [ 4] 3784     call dpush ; limit
      0014FC CE 00 00         [ 2] 3785 	ldw x,in.w 
      0014FF CD 0B E6         [ 4] 3786 	call get_token
      001502 A1 00            [ 1] 3787 	cp a,#TK_NONE  
      001504 27 0C            [ 1] 3788 	jreq 4$ 
      001506 A1 07            [ 1] 3789 	cp a,#TK_CMD
      001508 26 05            [ 1] 3790 	jrne 3$
      00150A A3 15 17         [ 2] 3791 	cpw x,#step 
      00150D 27 08            [ 1] 3792 	jreq step
      00150F                       3793 3$:	
      00150F CD 0E 75         [ 4] 3794 	call unget_token   	 
      001512                       3795 4$:	
      001512 AE 00 01         [ 2] 3796 	ldw x,#1   ; default step  
      001515 20 12            [ 2] 3797 	jra store_loop_addr 
                                   3798 
                                   3799 
                                   3800 ;----------------------------------
                                   3801 ; BASIC: STEP expr 
                                   3802 ; optional third par of FOR loop
                                   3803 ; initialization. 	
                                   3804 ;------------------------------------
      001517                       3805 step: ; {var limit -- var limit step}
      001517 72 04 00 24 03   [ 2] 3806 	btjt flags,#FFOR,1$
      00151C CC 05 FB         [ 2] 3807 	jp syntax_error
      00151F CD 11 B6         [ 4] 3808 1$: call relation
      001522 A1 0A            [ 1] 3809 	cp a,#TK_INTGR
      001524 27 03            [ 1] 3810 	jreq store_loop_addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001526 CC 05 FB         [ 2] 3811 	jp syntax_error
                                   3812 ; leave loop back entry point on cstack 
                                   3813 ; cstack is 2 call deep from interp_loop
      001529                       3814 store_loop_addr:
      001529 CD 0E 7C         [ 4] 3815 	call dpush 
      00152C CE 00 03         [ 2] 3816 	ldw x,basicptr  
      00152F 1F 05            [ 2] 3817 	ldw (BPTR,sp),x 
      001531 CE 00 00         [ 2] 3818 	ldw x,in.w 
      001534 1F 03            [ 2] 3819 	ldw (INW,sp),x   
      001536 72 15 00 24      [ 1] 3820 	bres flags,#FFOR 
      00153A 72 5C 00 1F      [ 1] 3821 	inc loop_depth  
      00153E 81               [ 4] 3822 	ret 
                                   3823 
                                   3824 ;--------------------------------
                                   3825 ; BASIC: NEXT var 
                                   3826 ; FOR loop control 
                                   3827 ; increment variable with step 
                                   3828 ; and compare with limit 
                                   3829 ; loop if threshold not crossed.
                                   3830 ; else clean both stacks. 
                                   3831 ; and decrement 'loop_depth' 
                                   3832 ;--------------------------------
      00153F                       3833 next: ; {var limit step -- [var limit step ] }
      00153F 72 5D 00 1F      [ 1] 3834 	tnz loop_depth 
      001543 26 03            [ 1] 3835 	jrne 1$ 
      001545 CC 05 FB         [ 2] 3836 	jp syntax_error 
      001548                       3837 1$: 
      001548 A6 02            [ 1] 3838 	ld a,#TK_VAR 
      00154A CD 10 6D         [ 4] 3839 	call expect
                                   3840 ; check for good variable after NEXT 	 
      00154D 90 93            [ 1] 3841 	ldw y,x 
      00154F AE 00 04         [ 2] 3842 	ldw x,#4  
      001552 72 D3 00 19      [ 4] 3843 	cpw y,([dstkptr],x) ; compare variables address 
      001556 27 03            [ 1] 3844 	jreq 2$  
      001558 CC 05 FB         [ 2] 3845 	jp syntax_error ; not the good one 
      00155B                       3846 2$: ; increment variable 
      00155B 93               [ 1] 3847 	ldw x,y
      00155C FE               [ 2] 3848 	ldw x,(x)  ; get var value 
      00155D CF 00 09         [ 2] 3849 	ldw acc16,x 
      001560 72 CE 00 19      [ 5] 3850 	ldw x,[dstkptr] ; step
      001564 72 BB 00 09      [ 2] 3851 	addw x,acc16 ; var+step 
      001568 90 FF            [ 2] 3852 	ldw (y),x ; save var new value 
                                   3853 ; compare with limit 
      00156A 90 93            [ 1] 3854 	ldw y,x 
      00156C 72 CE 00 19      [ 5] 3855 	ldw x,[dstkptr] ; step in x 
      001570 5D               [ 2] 3856 	tnzw x  
      001571 2A 0B            [ 1] 3857 	jrpl 4$ ; positive step 
                                   3858 ;negative step 
      001573 AE 00 02         [ 2] 3859 	ldw x,#2
      001576 72 D3 00 19      [ 4] 3860 	cpw y,([dstkptr],x)
      00157A 2F 26            [ 1] 3861 	jrslt loop_done
      00157C 20 09            [ 2] 3862 	jra loop_back 
      00157E                       3863 4$: ; positive step
      00157E AE 00 02         [ 2] 3864 	ldw x,#2 
      001581 72 D3 00 19      [ 4] 3865 	cpw y,([dstkptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001585 2C 1B            [ 1] 3866 	jrsgt loop_done
      001587                       3867 loop_back:
      001587 1E 05            [ 2] 3868 	ldw x,(BPTR,sp)
      001589 CF 00 03         [ 2] 3869 	ldw basicptr,x 
      00158C 72 01 00 24 0B   [ 2] 3870 	btjf flags,#FRUN,1$ 
      001591 E6 02            [ 1] 3871 	ld a,(2,x)
      001593 AB 02            [ 1] 3872 	add a,#2 
      001595 C7 00 02         [ 1] 3873 	ld count,a
      001598 FE               [ 2] 3874 	ldw x,(x)
      001599 CF 00 05         [ 2] 3875 	ldw lineno,x
      00159C 1E 03            [ 2] 3876 1$:	ldw x,(INW,sp)
      00159E CF 00 00         [ 2] 3877 	ldw in.w,x 
      0015A1 81               [ 4] 3878 	ret 
      0015A2                       3879 loop_done:
                                   3880 	; remove var limit step on dstack 
      0015A2 CE 00 19         [ 2] 3881 	ldw x,dstkptr 
      0015A5 1C 00 06         [ 2] 3882 	addw x,#3*CELL_SIZE
      0015A8 CF 00 19         [ 2] 3883 	ldw dstkptr,x 
                                   3884 	; remove 2 return address on cstack 
      0015AB 85               [ 2] 3885 	popw x
      0015AC                       3886 	_drop 4
      0015AC 5B 04            [ 2]    1     addw sp,#4 
      0015AE 89               [ 2] 3887 	pushw x 
      0015AF 72 5A 00 1F      [ 1] 3888 	dec loop_depth 
      0015B3 81               [ 4] 3889 	ret 
                                   3890 
                                   3891 
                                   3892 ;------------------------
                                   3893 ; BASIC: GOTO lineno 
                                   3894 ; jump to lineno 
                                   3895 ; here cstack is 2 call deep from interp_loop 
                                   3896 ;------------------------
      0015B4                       3897 goto:
      0015B4 72 00 00 24 06   [ 2] 3898 	btjt flags,#FRUN,0$ 
      0015B9 A6 06            [ 1] 3899 	ld a,#ERR_RUN_ONLY
      0015BB CC 05 FD         [ 2] 3900 	jp tb_error 
      0015BE 81               [ 4] 3901 	ret 
      0015BF 20 23            [ 2] 3902 0$:	jra go_common
                                   3903 
                                   3904 ;--------------------
                                   3905 ; BASIC: GOSUB lineno
                                   3906 ; basic subroutine call
                                   3907 ; actual lineno and basicptr 
                                   3908 ; are saved on cstack
                                   3909 ; here cstack is 2 call deep from interp_loop 
                                   3910 ;--------------------
                           000003  3911 	GOS_RET=3
      0015C1                       3912 gosub:
      0015C1 72 00 00 24 06   [ 2] 3913 	btjt flags,#FRUN,0$ 
      0015C6 A6 06            [ 1] 3914 	ld a,#ERR_RUN_ONLY
      0015C8 CC 05 FD         [ 2] 3915 	jp tb_error 
      0015CB 81               [ 4] 3916 	ret 
      0015CC 85               [ 2] 3917 0$:	popw x 
      0015CD 52 02            [ 2] 3918 	sub sp,#2 
      0015CF 89               [ 2] 3919 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0015D0 CE 00 03         [ 2] 3920 	ldw x,basicptr
      0015D3 E6 02            [ 1] 3921 	ld a,(2,x)
      0015D5 AB 03            [ 1] 3922 	add a,#3 
      0015D7 C7 00 0A         [ 1] 3923 	ld acc8,a 
      0015DA 72 5F 00 09      [ 1] 3924 	clr acc16 
      0015DE 72 BB 00 09      [ 2] 3925 	addw x,acc16
      0015E2 1F 03            [ 2] 3926 	ldw (GOS_RET,sp),x 
      0015E4                       3927 go_common: 
      0015E4 CD 11 B6         [ 4] 3928 	call relation 
      0015E7 A1 0A            [ 1] 3929 	cp a,#TK_INTGR
      0015E9 27 03            [ 1] 3930 	jreq 1$ 
      0015EB CC 05 FB         [ 2] 3931 	jp syntax_error
      0015EE                       3932 1$: 
      0015EE CD 02 E0         [ 4] 3933 	call search_lineno  
      0015F1 5D               [ 2] 3934 	tnzw x 
      0015F2 26 05            [ 1] 3935 	jrne 2$ 
      0015F4 A6 05            [ 1] 3936 	ld a,#ERR_NO_LINE 
      0015F6 CC 05 FD         [ 2] 3937 	jp tb_error 
      0015F9                       3938 2$: 
      0015F9 CF 00 03         [ 2] 3939 	ldw basicptr,x 
      0015FC E6 02            [ 1] 3940 	ld a,(2,x)
      0015FE AB 03            [ 1] 3941 	add a,#3 
      001600 C7 00 02         [ 1] 3942 	ld count,a 
      001603 FE               [ 2] 3943 	ldw x,(x)
      001604 CF 00 05         [ 2] 3944 	ldw lineno,x 
      001607 35 03 00 01      [ 1] 3945 	mov in,#3 
      00160B 81               [ 4] 3946 	ret 
                                   3947 
                                   3948 ;------------------------
                                   3949 ; BASIC: RETURN 
                                   3950 ; exit from a subroutine 
                                   3951 ; cstack is 2 level deep from interp_loop 
                                   3952 ;------------------------
      00160C                       3953 return:
      00160C 72 00 00 24 05   [ 2] 3954 	btjt flags,#FRUN,0$ 
      001611 A6 06            [ 1] 3955 	ld a,#ERR_RUN_ONLY
      001613 CC 05 FD         [ 2] 3956 	jp tb_error 
      001616                       3957 0$:	
      001616 1E 03            [ 2] 3958 	ldw x,(GOS_RET,sp) 
      001618 CF 00 03         [ 2] 3959 	ldw basicptr,x 
      00161B E6 02            [ 1] 3960 	ld a,(2,x)
      00161D AB 03            [ 1] 3961 	add a,#3 
      00161F C7 00 02         [ 1] 3962 	ld count,a 
      001622 35 03 00 01      [ 1] 3963 	mov in,#3
      001626 FE               [ 2] 3964 	ldw x,(x)
      001627 CF 00 05         [ 2] 3965 	ldw lineno,x 
      00162A 4F               [ 1] 3966 	clr a 
      00162B 85               [ 2] 3967 	popw x 
      00162C                       3968 	_drop 2
      00162C 5B 02            [ 2]    1     addw sp,#2 
      00162E 89               [ 2] 3969 	pushw x
      00162F 81               [ 4] 3970 	ret  
                                   3971 
                                   3972 
                                   3973 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3974 ; BASIC: RUN
                                   3975 ; run BASIC program in RAM
                                   3976 ;----------------------------------- 
      001630                       3977 run: 
      001630 72 01 00 24 02   [ 2] 3978 	btjf flags,#FRUN,0$  
      001635 4F               [ 1] 3979 	clr a 
      001636 81               [ 4] 3980 	ret
      001637                       3981 0$: 
      001637 72 09 00 24 12   [ 2] 3982 	btjf flags,#FBREAK,1$
      00163C                       3983 	_drop 2 
      00163C 5B 02            [ 2]    1     addw sp,#2 
      00163E CD 13 87         [ 4] 3984 	call rest_context
      001641                       3985 	_drop CTXT_SIZE 
      001641 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      001643 72 19 00 24      [ 1] 3986 	bres flags,#FBREAK 
      001647 72 10 00 24      [ 1] 3987 	bset flags,#FRUN 
      00164B CC 06 BD         [ 2] 3988 	jp interp_loop 
      00164E CE 00 1B         [ 2] 3989 1$:	ldw x,txtbgn
      001651 C3 00 1D         [ 2] 3990 	cpw x,txtend 
      001654 2B 02            [ 1] 3991 	jrmi 2$ 
      001656 4F               [ 1] 3992 	clr a 
      001657 81               [ 4] 3993 	ret 
      001658 CD 12 31         [ 4] 3994 2$: call ubound 
      00165B                       3995 	_drop 2 
      00165B 5B 02            [ 2]    1     addw sp,#2 
      00165D CE 00 1B         [ 2] 3996 	ldw x,txtbgn 
      001660 CF 00 03         [ 2] 3997 	ldw basicptr,x 
      001663 E6 02            [ 1] 3998 	ld a,(2,x)
      001665 AB 02            [ 1] 3999 	add a,#2 ; consider that in start at 3  
      001667 C7 00 02         [ 1] 4000 	ld count,a
      00166A FE               [ 2] 4001 	ldw x,(x)
      00166B CF 00 05         [ 2] 4002 	ldw lineno,x
      00166E 35 03 00 01      [ 1] 4003 	mov in,#3	
      001672 72 10 00 24      [ 1] 4004 	bset flags,#FRUN 
      001676 CC 06 BD         [ 2] 4005 	jp interp_loop 
                                   4006 
                                   4007 
                                   4008 ;----------------------
                                   4009 ; BASIC: STOP 
                                   4010 ; stop running program
                                   4011 ;---------------------- 
      001679                       4012 stop: 
                                   4013 ; clean dstack and cstack 
      001679 AE 17 FF         [ 2] 4014 	ldw x,#STACK_EMPTY 
      00167C 94               [ 1] 4015 	ldw sp,x 
      00167D 72 11 00 24      [ 1] 4016 	bres flags,#FRUN 
      001681 72 19 00 24      [ 1] 4017 	bres flags,#FBREAK
      001685 CC 06 57         [ 2] 4018 	jp warm_start
                                   4019 
                                   4020 ;-----------------------
                                   4021 ; BASIC BEEP expr1,expr2
                                   4022 ; used MCU internal beeper 
                                   4023 ; to produce a sound
                                   4024 ; arguments:
                                   4025 ;    expr1   frequency, {1,2,4} mapping to 1K,2K,4K
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4026 ;    expr2   duration msec.
                                   4027 ;---------------------------
      001688                       4028 beep:
      001688 CD 10 7A         [ 4] 4029 	call arg_list 
      00168B A1 02            [ 1] 4030 	cp a,#2 
      00168D 27 03            [ 1] 4031 	jreq 2$
      00168F CC 05 FB         [ 2] 4032 	jp syntax_error 
      001692 CE 00 19         [ 2] 4033 2$: ldw x,dstkptr 
      001695 EE 02            [ 2] 4034 	ldw x,(2,x);frequency 
      001697 9F               [ 1] 4035 	ld a,xl
      001698 4A               [ 1] 4036 	dec a 
      001699 4E               [ 1] 4037 	swap a 
      00169A 48               [ 1] 4038 	sll a 
      00169B 48               [ 1] 4039 	sll a 
      00169C AB 3E            [ 1] 4040 	add a,#0x3e 
      00169E C7 50 F3         [ 1] 4041 	ld BEEP_CSR,a 
      0016A1 CD 0E 89         [ 4] 4042 	call dpop 
      0016A4 CD 1B 6E         [ 4] 4043 	call pause02 
      0016A7 CD 0E B0         [ 4] 4044 	call ddrop 
      0016AA A6 1F            [ 1] 4045 	ld a,#0x1f
      0016AC C7 50 F3         [ 1] 4046 	ld BEEP_CSR,a 
      0016AF 81               [ 4] 4047 	ret 
                                   4048 
                                   4049 ;-------------------------------
                                   4050 ; BASIC: PWRADC 0|1,divisor  
                                   4051 ; disable/enanble ADC 
                                   4052 ;-------------------------------
      0016B0                       4053 power_adc:
      0016B0 CD 10 7A         [ 4] 4054 	call arg_list 
      0016B3 A1 02            [ 1] 4055 	cp a,#2	
      0016B5 27 03            [ 1] 4056 	jreq 1$
      0016B7 CC 05 FB         [ 2] 4057 	jp syntax_error 
      0016BA AE 00 02         [ 2] 4058 1$: ldw x,#2
      0016BD 72 DE 00 19      [ 5] 4059 	ldw x,([dstkptr],x) ; on|off
      0016C1 5D               [ 2] 4060 	tnzw x 
      0016C2 27 1C            [ 1] 4061 	jreq 2$ 
      0016C4 72 CE 00 19      [ 5] 4062 	ldw x,[dstkptr] ; channel
      0016C8 9F               [ 1] 4063 	ld a,xl
      0016C9 A4 07            [ 1] 4064 	and a,#7
      0016CB 4E               [ 1] 4065 	swap a 
      0016CC C7 54 01         [ 1] 4066 	ld ADC_CR1,a
      0016CF 72 16 54 02      [ 1] 4067 	bset ADC_CR2,#ADC_CR2_ALIGN ; right 
      0016D3 72 10 54 01      [ 1] 4068 	bset ADC_CR1,#ADC_CR1_ADON 
      0016D7                       4069 	_usec_dly 7 
      0016D7 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0016DA 5A               [ 2]    2     decw x
      0016DB 9D               [ 1]    3     nop 
      0016DC 26 FA            [ 1]    4     jrne .-4
      0016DE 20 04            [ 2] 4070 	jra 3$
      0016E0 72 11 54 01      [ 1] 4071 2$: bres ADC_CR1,#ADC_CR1_ADON 
      0016E4 AE 00 02         [ 2] 4072 3$:	ldw x,#2
      0016E7 CD 0E ED         [ 4] 4073 	call ddrop_n 
      0016EA 81               [ 4] 4074 	ret
                                   4075 
                                   4076 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4077 ; BASIC: RDADC(channel)
                                   4078 ; read adc channel 
                                   4079 ; output:
                                   4080 ;   A 		TK_INTGR 
                                   4081 ;   X 		value 
                                   4082 ;-----------------------------
      0016EB                       4083 read_adc:
      0016EB A6 04            [ 1] 4084 	ld a,#TK_LPAREN 
      0016ED CD 10 6D         [ 4] 4085 	call expect 
      0016F0 CD 0B E6         [ 4] 4086 	call get_token 
      0016F3 A1 0A            [ 1] 4087 	cp a,#TK_INTGR 
      0016F5 27 03            [ 1] 4088 	jreq 1$
      0016F7 CC 05 FB         [ 2] 4089 	jp syntax_error
      0016FA 89               [ 2] 4090 1$: pushw x 
      0016FB A6 05            [ 1] 4091 	ld a,#TK_RPAREN 
      0016FD CD 10 6D         [ 4] 4092 	call expect 
      001700 85               [ 2] 4093 	popw x 
      001701 A3 00 10         [ 2] 4094 	cpw x,#16 
      001704 25 05            [ 1] 4095 	jrult 2$
      001706 A6 0A            [ 1] 4096 	ld a,#ERR_BAD_VALUE
      001708 CC 05 FD         [ 2] 4097 	jp tb_error 
      00170B 9F               [ 1] 4098 2$: ld a,xl
      00170C C7 54 00         [ 1] 4099 	ld ADC_CSR,a 
      00170F 72 10 54 01      [ 1] 4100 	bset ADC_CR1,#ADC_CR1_ADON
      001713 72 0F 54 00 FB   [ 2] 4101 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001718 CE 54 04         [ 2] 4102 	ldw x,ADC_DRH 
      00171B A6 0A            [ 1] 4103 	ld a,#TK_INTGR
      00171D 81               [ 4] 4104 	ret 
                                   4105 
                                   4106 
                                   4107 ;-----------------------
                                   4108 ; BASIC: BREAK 
                                   4109 ; insert a breakpoint 
                                   4110 ; in pogram. 
                                   4111 ; the program is resumed
                                   4112 ; with RUN 
                                   4113 ;-------------------------
      00171E                       4114 break:
      00171E 72 00 00 24 02   [ 2] 4115 	btjt flags,#FRUN,2$
      001723 4F               [ 1] 4116 	clr a
      001724 81               [ 4] 4117 	ret 
      001725                       4118 2$:	 
                                   4119 ; create space on cstack to save context 
      001725 AE 17 4F         [ 2] 4120 	ldw x,#break_point 
      001728 CD 01 B0         [ 4] 4121 	call puts 
      00172B                       4122 	_drop 2 ;drop return address 
      00172B 5B 02            [ 2]    1     addw sp,#2 
      00172D                       4123 	_vars CTXT_SIZE ; context size 
      00172D 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      00172F CD 13 72         [ 4] 4124 	call save_context 
      001732 AE 16 C8         [ 2] 4125 	ldw x,#tib 
      001735 CF 00 03         [ 2] 4126 	ldw basicptr,x
      001738 7F               [ 1] 4127 	clr (x)
      001739 72 5F 00 02      [ 1] 4128 	clr count  
      00173D 5F               [ 1] 4129 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00173E CF 00 05         [ 2] 4130 	ldw lineno,x 
      001741 CF 00 00         [ 2] 4131 	ldw in.w,x
      001744 72 11 00 24      [ 1] 4132 	bres flags,#FRUN 
      001748 72 18 00 24      [ 1] 4133 	bset flags,#FBREAK
      00174C CC 06 BD         [ 2] 4134 	jp interp_loop 
      00174F 0A 62 72 65 61 6B 20  4135 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4136 
                                   4137 ;-----------------------
                                   4138 ; BASIC: NEW
                                   4139 ; from command line only 
                                   4140 ; free program memory
                                   4141 ; and clear variables 
                                   4142 ;------------------------
      00176D                       4143 new: 
      00176D 72 01 00 24 02   [ 2] 4144 	btjf flags,#FRUN,0$ 
      001772 4F               [ 1] 4145 	clr a 
      001773 81               [ 4] 4146 	ret 
      001774                       4147 0$:	
      001774 CD 04 D9         [ 4] 4148 	call clear_basic 
      001777 81               [ 4] 4149 	ret 
                                   4150 	 
                                   4151 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4152 ;   file system routines
                                   4153 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4154 
                                   4155 ;--------------------
                                   4156 ; input:
                                   4157 ;   X     increment 
                                   4158 ; output:
                                   4159 ;   farptr  incremented 
                                   4160 ;---------------------
      001778                       4161 incr_farptr:
      001778 72 BB 00 14      [ 2] 4162 	addw x,farptr+1 
      00177C 24 04            [ 1] 4163 	jrnc 1$
      00177E 72 5C 00 13      [ 1] 4164 	inc farptr 
      001782 CF 00 14         [ 2] 4165 1$:	ldw farptr+1,x  
      001785 81               [ 4] 4166 	ret 
                                   4167 
                                   4168 ;------------------------------
                                   4169 ; extended flash memory used as FLASH_DRIVE 
                                   4170 ; seek end of used flash drive   
                                   4171 ; starting at 0x10000 address.
                                   4172 ; 4 consecutives 0 bytes signal free space. 
                                   4173 ; input:
                                   4174 ;	none
                                   4175 ; output:
                                   4176 ;   ffree     free_addr| 0 if memory full.
                                   4177 ;------------------------------
      001786                       4178 seek_fdrive:
      001786 A6 01            [ 1] 4179 	ld a,#1
      001788 C7 00 13         [ 1] 4180 	ld farptr,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00178B 5F               [ 1] 4181 	clrw x 
      00178C CF 00 14         [ 2] 4182 	ldw farptr+1,x 
      00178F                       4183 1$:
      00178F 5F               [ 1] 4184 	clrw x 
      001790 92 AF 00 13      [ 5] 4185 	ldf a,([farptr],x) 
      001794 26 15            [ 1] 4186 	jrne 2$
      001796 5C               [ 1] 4187 	incw x 
      001797 92 AF 00 13      [ 5] 4188 	ldf a,([farptr],x)
      00179B 26 0E            [ 1] 4189 	jrne 2$ 
      00179D 5C               [ 1] 4190 	incw x 
      00179E 92 AF 00 13      [ 5] 4191 	ldf a,([farptr],x)
      0017A2 26 07            [ 1] 4192 	jrne 2$ 
      0017A4 5C               [ 1] 4193 	incw x 
      0017A5 92 AF 00 13      [ 5] 4194 	ldf a,([farptr],x)
      0017A9 27 28            [ 1] 4195 	jreq 4$ 
      0017AB                       4196 2$: 
      0017AB 1C 00 01         [ 2] 4197 	addw x,#1
      0017AE CD 17 78         [ 4] 4198 	call incr_farptr
      0017B1 AE 02 7F         [ 2] 4199 	ldw x,#0x27f 
      0017B4 C3 00 13         [ 2] 4200 	cpw x,farptr
      0017B7 2A D6            [ 1] 4201 	jrpl 1$
      0017B9 72 5F 00 16      [ 1] 4202 	clr ffree 
      0017BD 72 5F 00 17      [ 1] 4203 	clr ffree+1 
      0017C1 72 5F 00 18      [ 1] 4204 	clr ffree+2 
      0017C5 72 5F 00 08      [ 1] 4205 	clr acc24 
      0017C9 72 5F 00 09      [ 1] 4206 	clr acc16
      0017CD 72 5F 00 0A      [ 1] 4207 	clr acc8 
      0017D1 20 1A            [ 2] 4208 	jra 5$
      0017D3                       4209 4$: ; copy farptr to ffree	 
      0017D3 CE 00 14         [ 2] 4210 	ldw x,farptr+1 
      0017D6 A3 00 00         [ 2] 4211 	cpw x,#fdrive 
      0017D9 27 06            [ 1] 4212 	jreq 41$
                                   4213 	; there is a file, last 0 of that file must be skipped.
      0017DB AE 00 01         [ 2] 4214 	ldw x,#1
      0017DE CD 17 78         [ 4] 4215 	call incr_farptr
      0017E1                       4216 41$: 
      0017E1 CE 00 13         [ 2] 4217 	ldw x,farptr 
      0017E4 C6 00 15         [ 1] 4218 	ld a,farptr+2 
      0017E7 CF 00 16         [ 2] 4219 	ldw ffree,x 
      0017EA C7 00 18         [ 1] 4220 	ld ffree+2,a  
      0017ED 81               [ 4] 4221 5$:	ret 
                                   4222 
                                   4223 ;-----------------------
                                   4224 ; compare file name 
                                   4225 ; with name pointed by Y  
                                   4226 ; input:
                                   4227 ;   farptr   file name 
                                   4228 ;   Y        target name 
                                   4229 ; output:
                                   4230 ;   farptr 	 at file_name
                                   4231 ;   X 		 farptr[x] point at size field  
                                   4232 ;   Carry    0|1 no match|match  
                                   4233 ;----------------------
      0017EE                       4234 cmp_name:
      0017EE 5F               [ 1] 4235 	clrw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0017EF 92 AF 00 13      [ 5] 4236 1$:	ldf a,([farptr],x)
      0017F3 90 F1            [ 1] 4237 	cp a,(y)
      0017F5 26 08            [ 1] 4238 	jrne 4$
      0017F7 4D               [ 1] 4239 	tnz a 
      0017F8 27 12            [ 1] 4240 	jreq 9$ 
      0017FA 5C               [ 1] 4241     incw x 
      0017FB 90 5C            [ 1] 4242 	incw y 
      0017FD 20 F0            [ 2] 4243 	jra 1$
      0017FF                       4244 4$: ;no match 
      0017FF 4D               [ 1] 4245 	tnz a 
      001800 27 07            [ 1] 4246 	jreq 5$
      001802 5C               [ 1] 4247 	incw x 
      001803 92 AF 00 13      [ 5] 4248 	ldf a,([farptr],x)
      001807 20 F6            [ 2] 4249 	jra 4$  
      001809 5C               [ 1] 4250 5$:	incw x ; farptr[x] point at 'size' field 
      00180A 98               [ 1] 4251 	rcf 
      00180B 81               [ 4] 4252 	ret
      00180C                       4253 9$: ; match  
      00180C 5C               [ 1] 4254 	incw x  ; farptr[x] at 'size' field 
      00180D 99               [ 1] 4255 	scf 
      00180E 81               [ 4] 4256 	ret 
                                   4257 
                                   4258 ;-----------------------
                                   4259 ; search file in 
                                   4260 ; flash memory 
                                   4261 ; input:
                                   4262 ;   Y       file name  
                                   4263 ; output:
                                   4264 ;   farptr  addr at name|0
                                   4265 ;-----------------------
                           000001  4266 	FSIZE=1
                           000003  4267 	YSAVE=3
                           000004  4268 	VSIZE=4 
      00180F                       4269 search_file: 
      00180F                       4270 	_vars VSIZE
      00180F 52 04            [ 2]    1     sub sp,#VSIZE 
      001811 17 03            [ 2] 4271 	ldw (YSAVE,sp),y  
      001813 5F               [ 1] 4272 	clrw x 
      001814 CF 00 14         [ 2] 4273 	ldw farptr+1,x 
      001817 35 01 00 13      [ 1] 4274 	mov farptr,#1
      00181B                       4275 1$:	
                                   4276 ; check if farptr is after any file 
                                   4277 ; if  0 then so.
      00181B 92 BC 00 13      [ 5] 4278 	ldf a,[farptr]
      00181F 27 24            [ 1] 4279 	jreq 6$
      001821 5F               [ 1] 4280 2$: clrw x 	
      001822 16 03            [ 2] 4281 	ldw y,(YSAVE,sp) 
      001824 CD 17 EE         [ 4] 4282 	call cmp_name
      001827 25 2C            [ 1] 4283 	jrc 9$
      001829 92 AF 00 13      [ 5] 4284 	ldf a,([farptr],x)
      00182D 6B 01            [ 1] 4285 	ld (FSIZE,sp),a 
      00182F 5C               [ 1] 4286 	incw x 
      001830 92 AF 00 13      [ 5] 4287 	ldf a,([farptr],x)
      001834 6B 02            [ 1] 4288 	ld (FSIZE+1,sp),a 
      001836 5C               [ 1] 4289 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001837 72 FB 01         [ 2] 4290 	addw x,(FSIZE,sp) ; count to skip 
      00183A CD 17 78         [ 4] 4291 	call incr_farptr ; now at next file 'name_field'
      00183D AE 02 80         [ 2] 4292 	ldw x,#0x280
      001840 C3 00 13         [ 2] 4293 	cpw x,farptr 
      001843 2A D6            [ 1] 4294 	jrpl 1$
      001845                       4295 6$: ; file not found 
      001845 72 5F 00 13      [ 1] 4296 	clr farptr
      001849 72 5F 00 14      [ 1] 4297 	clr farptr+1 
      00184D 72 5F 00 15      [ 1] 4298 	clr farptr+2 
      001851                       4299 	_drop VSIZE 
      001851 5B 04            [ 2]    1     addw sp,#VSIZE 
      001853 98               [ 1] 4300 	rcf
      001854 81               [ 4] 4301 	ret
      001855                       4302 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001855                       4303 	_drop VSIZE 
      001855 5B 04            [ 2]    1     addw sp,#VSIZE 
      001857 99               [ 1] 4304 	scf 	
      001858 81               [ 4] 4305 	ret
                                   4306 
                                   4307 ;--------------------------------
                                   4308 ; BASIC: SAVE "name" 
                                   4309 ; save text program in 
                                   4310 ; flash memory used as 
                                   4311 ;--------------------------------
      001859                       4312 save:
      001859 72 01 00 24 05   [ 2] 4313 	btjf flags,#FRUN,0$ 
      00185E A6 07            [ 1] 4314 	ld a,#ERR_CMD_ONLY 
      001860 CC 05 FD         [ 2] 4315 	jp tb_error
      001863                       4316 0$:	 
      001863 CE 00 1D         [ 2] 4317 	ldw x,txtend 
      001866 72 B0 00 1B      [ 2] 4318 	subw x,txtbgn
      00186A 26 02            [ 1] 4319 	jrne 10$
                                   4320 ; nothing to save 
      00186C 4F               [ 1] 4321 	clr a 
      00186D 81               [ 4] 4322 	ret 
      00186E                       4323 10$:	
      00186E C6 00 16         [ 1] 4324 	ld a,ffree 
      001871 CA 00 17         [ 1] 4325 	or a,ffree+1
      001874 CA 00 18         [ 1] 4326 	or a,ffree+2 
      001877 26 05            [ 1] 4327 	jrne 1$
      001879 A6 01            [ 1] 4328 	ld a,#ERR_MEM_FULL
      00187B CC 05 FD         [ 2] 4329 	jp tb_error 
      00187E CD 0B E6         [ 4] 4330 1$: call get_token	
      001881 A1 06            [ 1] 4331 	cp a,#TK_QSTR
      001883 27 03            [ 1] 4332 	jreq 2$
      001885 CC 05 FB         [ 2] 4333 	jp syntax_error
      001888                       4334 2$: ; check for existing file of that name 
      001888 90 93            [ 1] 4335 	ldw y,x ; file name pointer 
      00188A CD 18 0F         [ 4] 4336 	call search_file 
      00188D 24 05            [ 1] 4337 	jrnc 3$ 
      00188F A6 08            [ 1] 4338 	ld a,#ERR_DUPLICATE 
      001891 CC 05 FD         [ 2] 4339 	jp tb_error 
      001894                       4340 3$:	;** write file name to flash **
      001894 CE 00 16         [ 2] 4341 	ldw x,ffree 
      001897 C6 00 18         [ 1] 4342 	ld a,ffree+2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      00189A CF 00 13         [ 2] 4343 	ldw farptr,x 
      00189D C7 00 15         [ 1] 4344 	ld farptr+2,a 
      0018A0 AE 17 18         [ 2] 4345 	ldw x,#pad  
      0018A3 CD 02 72         [ 4] 4346 	call strlen 
      0018A6 5C               [ 1] 4347 	incw  x
      0018A7 89               [ 2] 4348 	pushw x 
      0018A8 5F               [ 1] 4349 	clrw x   
      0018A9 90 AE 17 18      [ 2] 4350 	ldw y,#pad 
      0018AD CD 01 51         [ 4] 4351 	call write_block  
      0018B0                       4352 	_drop 2 ; drop pushed X 
      0018B0 5B 02            [ 2]    1     addw sp,#2 
                                   4353 ;** write file length after name **
      0018B2 CE 00 1D         [ 2] 4354 	ldw x,txtend 
      0018B5 72 B0 00 1B      [ 2] 4355 	subw x,txtbgn
      0018B9 89               [ 2] 4356 	pushw x ; file size 
      0018BA 5F               [ 1] 4357 	clrw x 
      0018BB 7B 01            [ 1] 4358 	ld a,(1,sp)
      0018BD CD 00 DC         [ 4] 4359 	call write_byte 
      0018C0 5C               [ 1] 4360 	incw x 
      0018C1 7B 02            [ 1] 4361 	ld a,(2,sp)
      0018C3 CD 00 DC         [ 4] 4362 	call write_byte
      0018C6 5C               [ 1] 4363 	incw x  
      0018C7 CD 17 78         [ 4] 4364 	call incr_farptr ; move farptr after SIZE field 
                                   4365 ;** write BASIC text **
                                   4366 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      0018CA 1E 01            [ 2] 4367 	ldw x,(1,sp)
      0018CC 89               [ 2] 4368 	pushw x 
      0018CD 5F               [ 1] 4369 	clrw x 
      0018CE 90 CE 00 1B      [ 2] 4370 	ldw y,txtbgn  ; BASIC text to save 
      0018D2 CD 01 51         [ 4] 4371 	call write_block 
      0018D5                       4372 	_drop 2 ;  drop BSIZE argument
      0018D5 5B 02            [ 2]    1     addw sp,#2 
                                   4373 ; save farptr in ffree
      0018D7 CE 00 13         [ 2] 4374 	ldw x,farptr 
      0018DA C6 00 15         [ 1] 4375 	ld a,farptr+2 
      0018DD CF 00 16         [ 2] 4376 	ldw ffree,x 
      0018E0 C7 00 18         [ 1] 4377 	ld ffree+2,a
                                   4378 ; write 4 zero bytes as a safe gard 
      0018E3 5F               [ 1] 4379     clrw x 
      0018E4 4F               [ 1] 4380 	clr a 
      0018E5 CD 00 DC         [ 4] 4381 	call write_byte 
      0018E8 5C               [ 1] 4382 	incw x 
      0018E9 4F               [ 1] 4383 	clr a 
      0018EA CD 00 DC         [ 4] 4384 	call write_byte
      0018ED 5C               [ 1] 4385 	incw x 
      0018EE 4F               [ 1] 4386 	clr a 
      0018EF CD 00 DC         [ 4] 4387 	call write_byte
                                   4388 ; display saved size  
      0018F2 85               [ 2] 4389 	popw x ; first copy of BSIZE 
      0018F3 A6 0A            [ 1] 4390 	ld a,#TK_INTGR 
      0018F5 81               [ 4] 4391 	ret 
                                   4392 
                                   4393 
                                   4394 ;------------------------
                                   4395 ; BASIC: LOAD "file" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4396 ; load file to RAM 
                                   4397 ; for execution 
                                   4398 ;------------------------
      0018F6                       4399 load:
      0018F6 72 01 00 24 07   [ 2] 4400 	btjf flags,#FRUN,0$ 
      0018FB 27 05            [ 1] 4401 	jreq 0$ 
      0018FD A6 07            [ 1] 4402 	ld a,#ERR_CMD_ONLY 
      0018FF CC 05 FD         [ 2] 4403 	jp tb_error 
      001902                       4404 0$:	
      001902 CD 0B E6         [ 4] 4405 	call get_token 
      001905 A1 06            [ 1] 4406 	cp a,#TK_QSTR
      001907 27 03            [ 1] 4407 	jreq 1$
      001909 CC 05 FB         [ 2] 4408 	jp syntax_error 
      00190C                       4409 1$:	
      00190C 90 93            [ 1] 4410 	ldw y,x 
      00190E CD 18 0F         [ 4] 4411 	call search_file 
      001911 25 05            [ 1] 4412 	jrc 2$ 
      001913 A6 09            [ 1] 4413 	ld a,#ERR_NOT_FILE
      001915 CC 05 FD         [ 2] 4414 	jp tb_error  
      001918                       4415 2$:	
      001918 CD 17 78         [ 4] 4416 	call incr_farptr  
      00191B CD 04 D9         [ 4] 4417 	call clear_basic  
      00191E 5F               [ 1] 4418 	clrw x
      00191F 92 AF 00 13      [ 5] 4419 	ldf a,([farptr],x)
      001923 90 95            [ 1] 4420 	ld yh,a 
      001925 5C               [ 1] 4421 	incw x  
      001926 92 AF 00 13      [ 5] 4422 	ldf a,([farptr],x)
      00192A 5C               [ 1] 4423 	incw x 
      00192B 90 97            [ 1] 4424 	ld yl,a 
      00192D 72 B9 00 1B      [ 2] 4425 	addw y,txtbgn
      001931 90 CF 00 1D      [ 2] 4426 	ldw txtend,y
      001935 90 CE 00 1B      [ 2] 4427 	ldw y,txtbgn
      001939                       4428 3$:	; load BASIC text 	
      001939 92 AF 00 13      [ 5] 4429 	ldf a,([farptr],x)
      00193D 90 F7            [ 1] 4430 	ld (y),a 
      00193F 5C               [ 1] 4431 	incw x 
      001940 90 5C            [ 1] 4432 	incw y 
      001942 90 C3 00 1D      [ 2] 4433 	cpw y,txtend 
      001946 2B F1            [ 1] 4434 	jrmi 3$
                                   4435 ; return loaded size 	 
      001948 CE 00 1D         [ 2] 4436 	ldw x,txtend 
      00194B 72 B0 00 1B      [ 2] 4437 	subw x,txtbgn
      00194F CD 08 4E         [ 4] 4438 	call print_int 
      001952 81               [ 4] 4439 	ret 
                                   4440 
                                   4441 ;-----------------------------------
                                   4442 ; BASIC: FORGET ["file_name"] 
                                   4443 ; erase file_name and all others 
                                   4444 ; after it. 
                                   4445 ; without argument erase all files 
                                   4446 ;-----------------------------------
      001953                       4447 forget:
      001953 CD 0B E6         [ 4] 4448 	call get_token 
      001956 A1 00            [ 1] 4449 	cp a,#TK_NONE 
      001958 27 1B            [ 1] 4450 	jreq 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      00195A A1 06            [ 1] 4451 	cp a,#TK_QSTR
      00195C 27 03            [ 1] 4452 	jreq 1$
      00195E CC 05 FB         [ 2] 4453 	jp syntax_error
      001961 90 93            [ 1] 4454 1$: ldw y,x
      001963 CD 18 0F         [ 4] 4455 	call search_file
      001966 25 05            [ 1] 4456 	jrc 2$
      001968 A6 09            [ 1] 4457 	ld a,#ERR_NOT_FILE 
      00196A CC 05 FD         [ 2] 4458 	jp tb_error 
      00196D                       4459 2$: 
      00196D CE 00 13         [ 2] 4460 	ldw x,farptr
      001970 C6 00 15         [ 1] 4461 	ld a,farptr+2
      001973 20 0B            [ 2] 4462 	jra 4$ 
      001975                       4463 3$: ; forget all files 
      001975 AE 00 00         [ 2] 4464 	ldw x,#fdrive
      001978 4F               [ 1] 4465 	clr a 
      001979 01               [ 1] 4466 	rrwa x 
      00197A CF 00 13         [ 2] 4467 	ldw farptr,x 
      00197D C7 00 15         [ 1] 4468 	ld farptr+2,a 
      001980                       4469 4$:
      001980 CF 00 16         [ 2] 4470 	ldw ffree,x 
      001983 C7 00 18         [ 1] 4471 	ld ffree+2,a 
      001986 5F               [ 1] 4472 5$:	clrw x 
      001987 4F               [ 1] 4473 	clr a  
      001988 CD 00 DC         [ 4] 4474 	call write_byte 
      00198B AE 00 01         [ 2] 4475 	ldw x,#1 
      00198E CD 17 78         [ 4] 4476 	call incr_farptr
      001991 C6 00 13         [ 1] 4477 	ld a,farptr
      001994 C1 00 16         [ 1] 4478 	cp a,ffree 
      001997 2B ED            [ 1] 4479 	jrmi 5$ 
      001999 CE 00 14         [ 2] 4480 	ldw x,farptr+1 
      00199C C3 00 17         [ 2] 4481 	cpw x,ffree+1
      00199F 2B E5            [ 1] 4482 	jrmi 5$
      0019A1 81               [ 4] 4483 	ret 
                                   4484 
                                   4485 ;----------------------
                                   4486 ; BASIC: DIR 
                                   4487 ; list saved files 
                                   4488 ;----------------------
                           000001  4489 	COUNT=1 ; files counter 
                           000002  4490 	VSIZE=2 
      0019A2                       4491 directory:
      0019A2                       4492 	_vars VSIZE 
      0019A2 52 02            [ 2]    1     sub sp,#VSIZE 
      0019A4 5F               [ 1] 4493 	clrw x 
      0019A5 1F 01            [ 2] 4494 	ldw (COUNT,sp),x 
      0019A7 CF 00 14         [ 2] 4495 	ldw farptr+1,x 
      0019AA 35 01 00 13      [ 1] 4496 	mov farptr,#1 
      0019AE                       4497 dir_loop:
      0019AE 5F               [ 1] 4498 	clrw x 
      0019AF 92 AF 00 13      [ 5] 4499 	ldf a,([farptr],x)
      0019B3 27 38            [ 1] 4500 	jreq 8$ 
      0019B5                       4501 1$: ;name loop 	
      0019B5 92 AF 00 13      [ 5] 4502 	ldf a,([farptr],x)
      0019B9 27 06            [ 1] 4503 	jreq 2$ 
      0019BB CD 01 9E         [ 4] 4504 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0019BE 5C               [ 1] 4505 	incw x 
      0019BF 20 F4            [ 2] 4506 	jra 1$
      0019C1 5C               [ 1] 4507 2$: incw x ; skip ending 0. 
      0019C2 A6 20            [ 1] 4508 	ld a,#SPACE 
      0019C4 CD 01 9E         [ 4] 4509 	call putc 
                                   4510 ; get file size 	
      0019C7 92 AF 00 13      [ 5] 4511 	ldf a,([farptr],x)
      0019CB 90 95            [ 1] 4512 	ld yh,a 
      0019CD 5C               [ 1] 4513 	incw x 
      0019CE 92 AF 00 13      [ 5] 4514 	ldf a,([farptr],x)
      0019D2 5C               [ 1] 4515 	incw x 
      0019D3 90 97            [ 1] 4516 	ld yl,a 
      0019D5 90 89            [ 2] 4517 	pushw y 
      0019D7 72 FB 01         [ 2] 4518 	addw x,(1,sp)
      0019DA CD 17 78         [ 4] 4519 	call incr_farptr 
      0019DD 85               [ 2] 4520 	popw x ; file size 
      0019DE CD 08 4E         [ 4] 4521 	call print_int 
      0019E1 A6 0D            [ 1] 4522 	ld a,#CR 
      0019E3 CD 01 9E         [ 4] 4523 	call putc
      0019E6 1E 01            [ 2] 4524 	ldw x,(COUNT,sp)
      0019E8 5C               [ 1] 4525 	incw x
      0019E9 1F 01            [ 2] 4526 	ldw (COUNT,sp),x  
      0019EB 20 C1            [ 2] 4527 	jra dir_loop 
      0019ED                       4528 8$: ; print number of files 
      0019ED 1E 01            [ 2] 4529 	ldw x,(COUNT,sp)
      0019EF CD 08 4E         [ 4] 4530 	call print_int 
      0019F2 AE 1A 22         [ 2] 4531 	ldw x,#file_count 
      0019F5 CD 01 B0         [ 4] 4532 	call puts  
                                   4533 ; print drive free space 	
      0019F8 A6 FF            [ 1] 4534 	ld a,#0xff 
      0019FA C0 00 18         [ 1] 4535 	sub a,ffree+2 
      0019FD C7 00 0A         [ 1] 4536 	ld acc8,a 
      001A00 A6 7F            [ 1] 4537 	ld a,#0x7f 
      001A02 C2 00 17         [ 1] 4538 	sbc a,ffree+1 
      001A05 C7 00 09         [ 1] 4539 	ld acc16,a 
      001A08 A6 02            [ 1] 4540 	ld a,#2 
      001A0A C2 00 16         [ 1] 4541 	sbc a,ffree 
      001A0D C7 00 08         [ 1] 4542 	ld acc24,a 
      001A10 5F               [ 1] 4543 	clrw x  
      001A11 A6 06            [ 1] 4544 	ld a,#6 
      001A13 97               [ 1] 4545 	ld xl,a 
      001A14 A6 0A            [ 1] 4546 	ld a,#10 
      001A16 CD 08 06         [ 4] 4547 	call prti24 
      001A19 AE 1A 2A         [ 2] 4548 	ldw x,#drive_free
      001A1C CD 01 B0         [ 4] 4549 	call puts 
      001A1F                       4550 	_drop VSIZE 
      001A1F 5B 02            [ 2]    1     addw sp,#VSIZE 
      001A21 81               [ 4] 4551 	ret
      001A22 20 66 69 6C 65 73 0A  4552 file_count: .asciz " files\n"
             00
      001A2A 20 62 79 74 65 73 20  4553 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4554 
                                   4555 ;---------------------
                                   4556 ; BASIC: WRITE expr1,expr2[,expr]* 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4557 ; write 1 or more byte to FLASH or EEPROM
                                   4558 ; starting at address  
                                   4559 ; input:
                                   4560 ;   expr1  	is address 
                                   4561 ;   expr2   is byte to write
                                   4562 ; output:
                                   4563 ;   none 
                                   4564 ;---------------------
                           000001  4565 	ADDR=1
                           000002  4566 	VSIZ=2 
      001A37                       4567 write:
      001A37                       4568 	_vars VSIZE 
      001A37 52 02            [ 2]    1     sub sp,#VSIZE 
      001A39 72 5F 00 13      [ 1] 4569 	clr farptr ; expect 16 bits address 
      001A3D CD 11 72         [ 4] 4570 	call expression
      001A40 A1 0A            [ 1] 4571 	cp a,#TK_INTGR 
      001A42 27 03            [ 1] 4572 	jreq 0$
      001A44 CC 05 FB         [ 2] 4573 	jp syntax_error
      001A47 1F 01            [ 2] 4574 0$: ldw (ADDR,sp),x 
      001A49 CD 0B E6         [ 4] 4575 	call get_token 
      001A4C A1 08            [ 1] 4576 	cp a,#TK_COMMA 
      001A4E 27 02            [ 1] 4577 	jreq 1$ 
      001A50 20 19            [ 2] 4578 	jra 9$ 
      001A52 CD 11 72         [ 4] 4579 1$:	call expression
      001A55 A1 0A            [ 1] 4580 	cp a,#TK_INTGR
      001A57 27 03            [ 1] 4581 	jreq 2$
      001A59 CC 05 FB         [ 2] 4582 	jp syntax_error
      001A5C 9F               [ 1] 4583 2$:	ld a,xl 
      001A5D 1E 01            [ 2] 4584 	ldw x,(ADDR,sp) 
      001A5F CF 00 14         [ 2] 4585 	ldw farptr+1,x 
      001A62 5F               [ 1] 4586 	clrw x 
      001A63 CD 00 DC         [ 4] 4587 	call write_byte
      001A66 1E 01            [ 2] 4588 	ldw x,(ADDR,sp)
      001A68 5C               [ 1] 4589 	incw x 
      001A69 20 DC            [ 2] 4590 	jra 0$ 
      001A6B                       4591 9$:
      001A6B                       4592 	_drop VSIZE
      001A6B 5B 02            [ 2]    1     addw sp,#VSIZE 
      001A6D 81               [ 4] 4593 	ret 
                                   4594 
                                   4595 
                                   4596 ;---------------------
                                   4597 ;BASIC: CHAR(expr)
                                   4598 ; évaluate expression 
                                   4599 ; and take the 7 least 
                                   4600 ; bits as ASCII character
                                   4601 ;---------------------
      001A6E                       4602 char:
      001A6E A6 04            [ 1] 4603 	ld a,#TK_LPAREN 
      001A70 CD 10 6D         [ 4] 4604 	call expect 
      001A73 CD 11 B6         [ 4] 4605 	call relation 
      001A76 A1 0A            [ 1] 4606 	cp a,#TK_INTGR 
      001A78 27 03            [ 1] 4607 	jreq 1$
      001A7A CC 05 FB         [ 2] 4608 	jp syntax_error
      001A7D 89               [ 2] 4609 1$:	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A7E A6 05            [ 1] 4610 	ld a,#TK_RPAREN 
      001A80 CD 10 6D         [ 4] 4611 	call expect
      001A83 85               [ 2] 4612 	popw x  
      001A84 9F               [ 1] 4613 	ld a,xl 
      001A85 A4 7F            [ 1] 4614 	and a,#0x7f 
      001A87 97               [ 1] 4615 	ld xl,a
      001A88 A6 0B            [ 1] 4616 	ld a,#TK_CHAR
      001A8A 81               [ 4] 4617 	ret
                                   4618 
                                   4619 ;---------------------
                                   4620 ; BASIC: ASC(string|char)
                                   4621 ; extract first character 
                                   4622 ; of string argument 
                                   4623 ; return it as TK_INTGR 
                                   4624 ;---------------------
      001A8B                       4625 ascii:
      001A8B A6 04            [ 1] 4626 	ld a,#TK_LPAREN
      001A8D CD 10 6D         [ 4] 4627 	call expect 
      001A90 CD 0B E6         [ 4] 4628 	call get_token 
      001A93 A1 06            [ 1] 4629 	cp a,#TK_QSTR 
      001A95 27 07            [ 1] 4630 	jreq 1$
      001A97 A1 0B            [ 1] 4631 	cp a,#TK_CHAR 
      001A99 27 06            [ 1] 4632 	jreq 2$ 
      001A9B CC 05 FB         [ 2] 4633 	jp syntax_error
      001A9E                       4634 1$: 
      001A9E F6               [ 1] 4635 	ld a,(x)
      001A9F 20 01            [ 2] 4636 	jra 3$
      001AA1                       4637 2$: 
      001AA1 9F               [ 1] 4638 	ld a,xl 
      001AA2 97               [ 1] 4639 3$:	ld xl,a 
      001AA3 4F               [ 1] 4640 	clr a  
      001AA4 95               [ 1] 4641 	ld xh,a 
      001AA5 89               [ 2] 4642 	pushw x  
      001AA6 A6 05            [ 1] 4643 	ld a,#TK_RPAREN 
      001AA8 CD 10 6D         [ 4] 4644 	call expect 
      001AAB 85               [ 2] 4645 	popw x 
      001AAC A6 0A            [ 1] 4646 	ld a,#TK_INTGR 
      001AAE 81               [ 4] 4647 	ret 
                                   4648 
                                   4649 ;---------------------
                                   4650 ;BASIC: KEY
                                   4651 ; wait for a character 
                                   4652 ; received from STDIN 
                                   4653 ; input:
                                   4654 ;	none 
                                   4655 ; output:
                                   4656 ;	X 		ASCII character 
                                   4657 ;---------------------
      001AAF                       4658 key:
      001AAF CD 01 A7         [ 4] 4659 	call getc 
      001AB2 5F               [ 1] 4660 	clrw x 
      001AB3 97               [ 1] 4661 	ld xl,a 
      001AB4 A6 0A            [ 1] 4662 	ld a,#TK_INTGR
      001AB6 81               [ 4] 4663 	ret
                                   4664 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4665 ;----------------------
                                   4666 ; BASIC: QKEY
                                   4667 ; Return true if there 
                                   4668 ; is a character in 
                                   4669 ; waiting in STDIN 
                                   4670 ; input:
                                   4671 ;  none 
                                   4672 ; output:
                                   4673 ;   X 		0|1 
                                   4674 ;-----------------------
      001AB7                       4675 qkey: 
      001AB7 5F               [ 1] 4676 	clrw x 
      001AB8 72 0B 52 40 01   [ 2] 4677 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001ABD 5C               [ 1] 4678 	incw x 
      001ABE A6 0A            [ 1] 4679 9$: ld a,#TK_INTGR
      001AC0 81               [ 4] 4680 	ret 
                                   4681 
                                   4682 ;---------------------
                                   4683 ; BASIC: GPIO(expr,reg)
                                   4684 ; return gpio address 
                                   4685 ; expr {0..8}
                                   4686 ; input:
                                   4687 ;   none 
                                   4688 ; output:
                                   4689 ;   X 		gpio register address
                                   4690 ;----------------------------
      001AC1                       4691 gpio:
      001AC1 A6 04            [ 1] 4692 	ld a,#TK_LPAREN 
      001AC3 CD 10 6D         [ 4] 4693 	call expect 
      001AC6 CD 10 7A         [ 4] 4694 	call arg_list
      001AC9 A1 02            [ 1] 4695 	cp a,#2
      001ACB 27 03            [ 1] 4696 	jreq 1$
      001ACD CC 05 FB         [ 2] 4697 	jp syntax_error  
      001AD0                       4698 1$:	
      001AD0 A6 05            [ 1] 4699 	ld a,#TK_RPAREN 
      001AD2 CD 10 6D         [ 4] 4700 	call expect 
      001AD5 AE 00 02         [ 2] 4701 	ldw x,#2
      001AD8 72 DE 00 19      [ 5] 4702 	ldw x,([dstkptr],x) ; port 
      001ADC 2B 1B            [ 1] 4703 	jrmi bad_port
      001ADE A3 00 09         [ 2] 4704 	cpw x,#9
      001AE1 2A 16            [ 1] 4705 	jrpl bad_port
      001AE3 A6 05            [ 1] 4706 	ld a,#5
      001AE5 42               [ 4] 4707 	mul x,a
      001AE6 1C 50 00         [ 2] 4708 	addw x,#GPIO_BASE 
      001AE9 89               [ 2] 4709 	pushw x 
      001AEA CD 0E 89         [ 4] 4710 	call dpop 
      001AED 72 FB 01         [ 2] 4711 	addw x,(1,sp)
      001AF0 1F 01            [ 2] 4712 	ldw (1,sp),x  
      001AF2 CD 0E B0         [ 4] 4713 	call ddrop  
      001AF5 85               [ 2] 4714 	popw x 
      001AF6 A6 0A            [ 1] 4715 	ld a,#TK_INTGR
      001AF8 81               [ 4] 4716 	ret
      001AF9                       4717 bad_port:
      001AF9 A6 0A            [ 1] 4718 	ld a,#ERR_BAD_VALUE
      001AFB CC 05 FD         [ 2] 4719 	jp tb_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4720 
                                   4721 ;----------------------
                                   4722 ; BASIC: ODR 
                                   4723 ; return offset of gpio
                                   4724 ; ODR register: 0
                                   4725 ; ---------------------
      001AFE                       4726 port_odr:
      001AFE AE 00 00         [ 2] 4727 	ldw x,#GPIO_ODR
      001B01 A6 0A            [ 1] 4728 	ld a,#TK_INTGR
      001B03 81               [ 4] 4729 	ret
                                   4730 
                                   4731 ;----------------------
                                   4732 ; BASIC: IDR 
                                   4733 ; return offset of gpio
                                   4734 ; IDR register: 1
                                   4735 ; ---------------------
      001B04                       4736 port_idr:
      001B04 AE 00 01         [ 2] 4737 	ldw x,#GPIO_IDR
      001B07 A6 0A            [ 1] 4738 	ld a,#TK_INTGR
      001B09 81               [ 4] 4739 	ret
                                   4740 
                                   4741 ;----------------------
                                   4742 ; BASIC: DDR 
                                   4743 ; return offset of gpio
                                   4744 ; DDR register: 2
                                   4745 ; ---------------------
      001B0A                       4746 port_ddr:
      001B0A AE 00 02         [ 2] 4747 	ldw x,#GPIO_DDR
      001B0D A6 0A            [ 1] 4748 	ld a,#TK_INTGR
      001B0F 81               [ 4] 4749 	ret
                                   4750 
                                   4751 ;----------------------
                                   4752 ; BASIC: CRL  
                                   4753 ; return offset of gpio
                                   4754 ; CR1 register: 3
                                   4755 ; ---------------------
      001B10                       4756 port_cr1:
      001B10 AE 00 03         [ 2] 4757 	ldw x,#GPIO_CR1
      001B13 A6 0A            [ 1] 4758 	ld a,#TK_INTGR
      001B15 81               [ 4] 4759 	ret
                                   4760 
                                   4761 ;----------------------
                                   4762 ; BASIC: CRH  
                                   4763 ; return offset of gpio
                                   4764 ; CR2 register: 4
                                   4765 ; ---------------------
      001B16                       4766 port_cr2:
      001B16 AE 00 04         [ 2] 4767 	ldw x,#GPIO_CR2
      001B19 A6 0A            [ 1] 4768 	ld a,#TK_INTGR
      001B1B 81               [ 4] 4769 	ret
                                   4770 
                                   4771 ;-------------------------
                                   4772 ; BASIC: UFLASH 
                                   4773 ; return user flash address
                                   4774 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4775 ;  none 
                                   4776 ; output:
                                   4777 ;	A		TK_INTGR
                                   4778 ;   X 		user address 
                                   4779 ;---------------------------
      001B1C                       4780 uflash:
      001B1C AE 1E 80         [ 2] 4781 	ldw x,#user_space 
      001B1F A6 0A            [ 1] 4782 	ld a,#TK_INTGR 
      001B21 81               [ 4] 4783 	ret 
                                   4784 
                                   4785 ;-------------------------
                                   4786 ; BASIC: EEPROM 
                                   4787 ; return eeprom address
                                   4788 ; input:
                                   4789 ;  none 
                                   4790 ; output:
                                   4791 ;	A		TK_INTGR
                                   4792 ;   X 		eeprom address 
                                   4793 ;---------------------------
      001B22                       4794 eeprom:
      001B22 AE 40 00         [ 2] 4795 	ldw x,#EEPROM_BASE 
      001B25 A6 0A            [ 1] 4796 	ld a,#TK_INTGR 
      001B27 81               [ 4] 4797 	ret 
                                   4798 
                                   4799 ;---------------------
                                   4800 ; BASIC: USR(addr[,arg])
                                   4801 ; execute a function written 
                                   4802 ; in binary code.
                                   4803 ; binary fonction should 
                                   4804 ; return token attribute in A 
                                   4805 ; and value in X. 
                                   4806 ; input:
                                   4807 ;   addr	routine address 
                                   4808 ;   arg 	is an optional argument 
                                   4809 ; output:
                                   4810 ;   A 		token attribute 
                                   4811 ;   X       returned value 
                                   4812 ;---------------------
      001B28                       4813 usr:
      001B28 90 89            [ 2] 4814 	pushw y 	
      001B2A A6 04            [ 1] 4815 	ld a,#TK_LPAREN 
      001B2C CD 10 6D         [ 4] 4816 	call expect 
      001B2F CD 10 7A         [ 4] 4817 	call arg_list 
      001B32 A1 01            [ 1] 4818 	cp a,#1 
      001B34 2A 03            [ 1] 4819 	jrpl 2$ 
      001B36 CC 05 FB         [ 2] 4820 	jp syntax_error 
      001B39 A6 05            [ 1] 4821 2$: ld a,#TK_RPAREN
      001B3B CD 10 6D         [ 4] 4822 	call expect 
      001B3E CD 0E 89         [ 4] 4823 	call dpop 
      001B41 A1 02            [ 1] 4824 	cp a,#2 
      001B43 2B 05            [ 1] 4825 	jrmi 4$
      001B45 90 93            [ 1] 4826 	ldw y,x ; y=arg 
      001B47 CD 0E 89         [ 4] 4827 	call dpop ;x=addr 
      001B4A 51               [ 1] 4828 4$:	exgw y,x ; y=addr,x=arg 
      001B4B 90 FD            [ 4] 4829 	call (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B4D 90 85            [ 2] 4830 	popw y 
      001B4F 81               [ 4] 4831 	ret 
                                   4832 
                                   4833 ;------------------------------
                                   4834 ; BASIC: BYE 
                                   4835 ; halt mcu in its lowest power mode 
                                   4836 ; wait for reset or external interrupt
                                   4837 ; do a cold start on wakeup.
                                   4838 ;------------------------------
      001B50                       4839 bye:
      001B50 72 0D 52 40 FB   [ 2] 4840 	btjf UART3_SR,#UART_SR_TC,.
      001B55 8E               [10] 4841 	halt
      001B56 CC 04 4E         [ 2] 4842 	jp cold_start  
                                   4843 
                                   4844 ;----------------------------------
                                   4845 ; BASIC: SLEEP 
                                   4846 ; halt mcu until reset or external
                                   4847 ; interrupt.
                                   4848 ; Resume progam after SLEEP command
                                   4849 ;----------------------------------
      001B59                       4850 sleep:
      001B59 72 0D 52 40 FB   [ 2] 4851 	btjf UART3_SR,#UART_SR_TC,.
      001B5E 72 16 00 24      [ 1] 4852 	bset flags,#FSLEEP
      001B62 8E               [10] 4853 	halt 
      001B63 81               [ 4] 4854 	ret 
                                   4855 
                                   4856 ;-------------------------------
                                   4857 ; BASIC: PAUSE expr 
                                   4858 ; suspend execution for n msec.
                                   4859 ; input:
                                   4860 ;	none
                                   4861 ; output:
                                   4862 ;	none 
                                   4863 ;------------------------------
      001B64                       4864 pause:
      001B64 CD 11 72         [ 4] 4865 	call expression
      001B67 A1 0A            [ 1] 4866 	cp a,#TK_INTGR
      001B69 27 03            [ 1] 4867 	jreq pause02 
      001B6B CC 05 FB         [ 2] 4868 	jp syntax_error
      001B6E                       4869 pause02: 
      001B6E 5D               [ 2] 4870 1$: tnzw x 
      001B6F 27 04            [ 1] 4871 	jreq 2$
      001B71 8F               [10] 4872 	wfi 
      001B72 5A               [ 2] 4873 	decw x 
      001B73 26 F9            [ 1] 4874 	jrne 1$
      001B75 4F               [ 1] 4875 2$:	clr a 
      001B76 81               [ 4] 4876 	ret 
                                   4877 
                                   4878 ;------------------------------
                                   4879 ; BASIC: TICKS
                                   4880 ; return msec ticks counter value 
                                   4881 ; input:
                                   4882 ; 	none 
                                   4883 ; output:
                                   4884 ;	X 		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   4885 ;-------------------------------
      001B77                       4886 get_ticks:
      001B77 CE 00 0B         [ 2] 4887 	ldw x,ticks 
      001B7A A6 0A            [ 1] 4888 	ld a,#TK_INTGR
      001B7C 81               [ 4] 4889 	ret 
                                   4890 
                                   4891 
                                   4892 
                                   4893 ;------------------------------
                                   4894 ; BASIC: ABS(expr)
                                   4895 ; return absolute value of expr.
                                   4896 ; input:
                                   4897 ;   none
                                   4898 ; output:
                                   4899 ;   X     	positive integer
                                   4900 ;-------------------------------
      001B7D                       4901 abs:
      001B7D A6 04            [ 1] 4902 	ld a,#TK_LPAREN
      001B7F CD 10 6D         [ 4] 4903 	call expect 
      001B82 CD 10 7A         [ 4] 4904 	call arg_list
      001B85 A1 01            [ 1] 4905 	cp a,#1 
      001B87 27 03            [ 1] 4906 	jreq 0$ 
      001B89 CC 05 FB         [ 2] 4907 	jp syntax_error
      001B8C                       4908 0$:  
      001B8C A6 05            [ 1] 4909 	ld a,#TK_RPAREN 
      001B8E CD 10 6D         [ 4] 4910 	call expect 
      001B91 CD 0E 89         [ 4] 4911     call dpop   
      001B94 9E               [ 1] 4912 	ld a,xh 
      001B95 A5 80            [ 1] 4913 	bcp a,#0x80 
      001B97 27 01            [ 1] 4914 	jreq 2$ 
      001B99 50               [ 2] 4915 	negw x 
      001B9A A6 0A            [ 1] 4916 2$: ld a,#TK_INTGR 
      001B9C 81               [ 4] 4917 	ret 
                                   4918 
                                   4919 ;------------------------------
                                   4920 ; BASIC: RND(expr)
                                   4921 ; return random number 
                                   4922 ; between 1 and expr inclusive
                                   4923 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4924 ; input:
                                   4925 ; 	none 
                                   4926 ; output:
                                   4927 ;	X 		random positive integer 
                                   4928 ;------------------------------
      001B9D                       4929 random:
      001B9D A6 04            [ 1] 4930 	ld a,#TK_LPAREN 
      001B9F CD 10 6D         [ 4] 4931 	call expect 
      001BA2 CD 10 7A         [ 4] 4932 	call arg_list 
      001BA5 A1 01            [ 1] 4933 	cp a,#1
      001BA7 27 03            [ 1] 4934 	jreq 1$
      001BA9 CC 05 FB         [ 2] 4935 	jp syntax_error
      001BAC A6 05            [ 1] 4936 1$: ld a,#TK_RPAREN
      001BAE CD 10 6D         [ 4] 4937 	call expect 
      001BB1 CD 0E 89         [ 4] 4938 	call dpop 
      001BB4 89               [ 2] 4939 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BB5 9E               [ 1] 4940 	ld a,xh 
      001BB6 A5 80            [ 1] 4941 	bcp a,#0x80 
      001BB8 27 05            [ 1] 4942 	jreq 2$
      001BBA A6 0A            [ 1] 4943 	ld a,#ERR_BAD_VALUE
      001BBC CC 05 FD         [ 2] 4944 	jp tb_error
      001BBF                       4945 2$: 
                                   4946 ; acc16=(x<<5)^x 
      001BBF CE 00 0D         [ 2] 4947 	ldw x,seedx 
      001BC2 58               [ 2] 4948 	sllw x 
      001BC3 58               [ 2] 4949 	sllw x 
      001BC4 58               [ 2] 4950 	sllw x 
      001BC5 58               [ 2] 4951 	sllw x 
      001BC6 58               [ 2] 4952 	sllw x 
      001BC7 9E               [ 1] 4953 	ld a,xh 
      001BC8 C8 00 0D         [ 1] 4954 	xor a,seedx 
      001BCB C7 00 09         [ 1] 4955 	ld acc16,a 
      001BCE 9F               [ 1] 4956 	ld a,xl 
      001BCF C8 00 0E         [ 1] 4957 	xor a,seedx+1 
      001BD2 C7 00 0A         [ 1] 4958 	ld acc8,a 
                                   4959 ; seedx=seedy 
      001BD5 CE 00 0F         [ 2] 4960 	ldw x,seedy 
      001BD8 CF 00 0D         [ 2] 4961 	ldw seedx,x  
                                   4962 ; seedy=seedy^(seedy>>1)
      001BDB 90 54            [ 2] 4963 	srlw y 
      001BDD 90 9E            [ 1] 4964 	ld a,yh 
      001BDF C8 00 0F         [ 1] 4965 	xor a,seedy 
      001BE2 C7 00 0F         [ 1] 4966 	ld seedy,a  
      001BE5 90 9F            [ 1] 4967 	ld a,yl 
      001BE7 C8 00 10         [ 1] 4968 	xor a,seedy+1 
      001BEA C7 00 10         [ 1] 4969 	ld seedy+1,a 
                                   4970 ; acc16>>3 
      001BED CE 00 09         [ 2] 4971 	ldw x,acc16 
      001BF0 54               [ 2] 4972 	srlw x 
      001BF1 54               [ 2] 4973 	srlw x 
      001BF2 54               [ 2] 4974 	srlw x 
                                   4975 ; x=acc16^x 
      001BF3 9E               [ 1] 4976 	ld a,xh 
      001BF4 C8 00 09         [ 1] 4977 	xor a,acc16 
      001BF7 95               [ 1] 4978 	ld xh,a 
      001BF8 9F               [ 1] 4979 	ld a,xl 
      001BF9 C8 00 0A         [ 1] 4980 	xor a,acc8 
      001BFC 97               [ 1] 4981 	ld xl,a 
                                   4982 ; seedy=x^seedy 
      001BFD C8 00 10         [ 1] 4983 	xor a,seedy+1
      001C00 97               [ 1] 4984 	ld xl,a 
      001C01 9E               [ 1] 4985 	ld a,xh 
      001C02 C8 00 0F         [ 1] 4986 	xor a,seedy
      001C05 95               [ 1] 4987 	ld xh,a 
      001C06 CF 00 0F         [ 2] 4988 	ldw seedy,x 
                                   4989 ; return seedy modulo expr + 1 
      001C09 90 85            [ 2] 4990 	popw y 
      001C0B 65               [ 2] 4991 	divw x,y 
      001C0C 93               [ 1] 4992 	ldw x,y 
      001C0D 5C               [ 1] 4993 	incw x 
      001C0E A6 0A            [ 1] 4994 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C10 81               [ 4] 4995 	ret 
                                   4996 
                                   4997 ;---------------------------------
                                   4998 ; BASIC: WORDS 
                                   4999 ; affiche la listes des mots du
                                   5000 ; dictionnaire.
                                   5001 ;---------------------------------
                           000001  5002 	WLEN=1
                           000002  5003 	LLEN=2  
                           000002  5004 	VSIZE=2 
      001C11                       5005 words:
      001C11                       5006 	_vars VSIZE
      001C11 52 02            [ 2]    1     sub sp,#VSIZE 
      001C13 0F 02            [ 1] 5007 	clr (LLEN,sp)
      001C15 90 AE 1E 40      [ 2] 5008 	ldw y,#kword_dict+2
      001C19 93               [ 1] 5009 0$:	ldw x,y
      001C1A F6               [ 1] 5010 	ld a,(x)
      001C1B A4 0F            [ 1] 5011 	and a,#15 
      001C1D 6B 01            [ 1] 5012 	ld (WLEN,sp),a 
      001C1F 5C               [ 1] 5013 1$:	incw x 
      001C20 F6               [ 1] 5014 	ld a,(x)
      001C21 CD 01 9E         [ 4] 5015 	call putc 
      001C24 0C 02            [ 1] 5016 	inc (LLEN,sp)
      001C26 0A 01            [ 1] 5017 	dec (WLEN,sp)
      001C28 26 F5            [ 1] 5018 	jrne 1$
      001C2A A6 46            [ 1] 5019 	ld a,#70
      001C2C 11 02            [ 1] 5020 	cp a,(LLEN,sp)
      001C2E 2B 09            [ 1] 5021 	jrmi 2$   
      001C30 A6 20            [ 1] 5022 	ld a,#SPACE 
      001C32 CD 01 9E         [ 4] 5023 	call putc 
      001C35 0C 02            [ 1] 5024 	inc (LLEN,sp) 
      001C37 20 07            [ 2] 5025 	jra 3$
      001C39 A6 0D            [ 1] 5026 2$: ld a,#CR 
      001C3B CD 01 9E         [ 4] 5027 	call putc 
      001C3E 0F 02            [ 1] 5028 	clr (LLEN,sp)
      001C40 72 A2 00 02      [ 2] 5029 3$:	subw y,#2 
      001C44 90 FE            [ 2] 5030 	ldw y,(y)
      001C46 26 D1            [ 1] 5031 	jrne 0$  
      001C48                       5032 	_drop VSIZE 
      001C48 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C4A 81               [ 4] 5033 	ret 
                                   5034 
                                   5035 
                                   5036 ;*********************************
                                   5037 
                                   5038 ;------------------------------
                                   5039 ;      dictionary 
                                   5040 ; format:
                                   5041 ;   link:   2 bytes 
                                   5042 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5043 ;   cmd_name: 16 byte max 
                                   5044 ;   code_address: 2 bytes 
                                   5045 ;------------------------------
                           000080  5046 	FFUNC=128 ; function flag 
                                   5047 	.macro _dict_entry len,name,cmd 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   5048 	.word LINK 
                                   5049 	LINK=.
                                   5050 name:
                                   5051 	.byte len 	
                                   5052 	.ascii "name"
                                   5053 	.word cmd 
                                   5054 	.endm 
                                   5055 
                           000000  5056 	LINK=0
      001C4B                       5057 kword_end:
      001C4B                       5058 	_dict_entry,3,BYE,bye 
      001C4B 00 00                    1 	.word LINK 
                           001C4D     2 	LINK=.
      001C4D                          3 BYE:
      001C4D 03                       4 	.byte 3 	
      001C4E 42 59 45                 5 	.ascii "BYE"
      001C51 1B 50                    6 	.word bye 
      001C53                       5059 	_dict_entry,5,WORDS,words 
      001C53 1C 4D                    1 	.word LINK 
                           001C55     2 	LINK=.
      001C55                          3 WORDS:
      001C55 05                       4 	.byte 5 	
      001C56 57 4F 52 44 53           5 	.ascii "WORDS"
      001C5B 1C 11                    6 	.word words 
      001C5D                       5060 	_dict_entry,5,SLEEP,sleep 
      001C5D 1C 55                    1 	.word LINK 
                           001C5F     2 	LINK=.
      001C5F                          3 SLEEP:
      001C5F 05                       4 	.byte 5 	
      001C60 53 4C 45 45 50           5 	.ascii "SLEEP"
      001C65 1B 59                    6 	.word sleep 
      001C67                       5061 	_dict_entry,6,FORGET,forget 
      001C67 1C 5F                    1 	.word LINK 
                           001C69     2 	LINK=.
      001C69                          3 FORGET:
      001C69 06                       4 	.byte 6 	
      001C6A 46 4F 52 47 45 54        5 	.ascii "FORGET"
      001C70 19 53                    6 	.word forget 
      001C72                       5062 	_dict_entry,3,DIR,directory 
      001C72 1C 69                    1 	.word LINK 
                           001C74     2 	LINK=.
      001C74                          3 DIR:
      001C74 03                       4 	.byte 3 	
      001C75 44 49 52                 5 	.ascii "DIR"
      001C78 19 A2                    6 	.word directory 
      001C7A                       5063 	_dict_entry,4,LOAD,load 
      001C7A 1C 74                    1 	.word LINK 
                           001C7C     2 	LINK=.
      001C7C                          3 LOAD:
      001C7C 04                       4 	.byte 4 	
      001C7D 4C 4F 41 44              5 	.ascii "LOAD"
      001C81 18 F6                    6 	.word load 
      001C83                       5064 	_dict_entry,4,SAVE,save
      001C83 1C 7C                    1 	.word LINK 
                           001C85     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001C85                          3 SAVE:
      001C85 04                       4 	.byte 4 	
      001C86 53 41 56 45              5 	.ascii "SAVE"
      001C8A 18 59                    6 	.word save 
      001C8C                       5065 	_dict_entry,5,WRITE,write  
      001C8C 1C 85                    1 	.word LINK 
                           001C8E     2 	LINK=.
      001C8E                          3 WRITE:
      001C8E 05                       4 	.byte 5 	
      001C8F 57 52 49 54 45           5 	.ascii "WRITE"
      001C94 1A 37                    6 	.word write 
      001C96                       5066 	_dict_entry,3,NEW,new
      001C96 1C 8E                    1 	.word LINK 
                           001C98     2 	LINK=.
      001C98                          3 NEW:
      001C98 03                       4 	.byte 3 	
      001C99 4E 45 57                 5 	.ascii "NEW"
      001C9C 17 6D                    6 	.word new 
      001C9E                       5067 	_dict_entry,5,BREAK,break 
      001C9E 1C 98                    1 	.word LINK 
                           001CA0     2 	LINK=.
      001CA0                          3 BREAK:
      001CA0 05                       4 	.byte 5 	
      001CA1 42 52 45 41 4B           5 	.ascii "BREAK"
      001CA6 17 1E                    6 	.word break 
      001CA8                       5068 	_dict_entry,4,BEEP,beep 
      001CA8 1C A0                    1 	.word LINK 
                           001CAA     2 	LINK=.
      001CAA                          3 BEEP:
      001CAA 04                       4 	.byte 4 	
      001CAB 42 45 45 50              5 	.ascii "BEEP"
      001CAF 16 88                    6 	.word beep 
      001CB1                       5069 	_dict_entry,4,STOP,stop 
      001CB1 1C AA                    1 	.word LINK 
                           001CB3     2 	LINK=.
      001CB3                          3 STOP:
      001CB3 04                       4 	.byte 4 	
      001CB4 53 54 4F 50              5 	.ascii "STOP"
      001CB8 16 79                    6 	.word stop 
      001CBA                       5070     _dict_entry,4,SHOW,show 
      001CBA 1C B3                    1 	.word LINK 
                           001CBC     2 	LINK=.
      001CBC                          3 SHOW:
      001CBC 04                       4 	.byte 4 	
      001CBD 53 48 4F 57              5 	.ascii "SHOW"
      001CC1 12 0D                    6 	.word show 
      001CC3                       5071 	_dict_entry 3,RUN,run
      001CC3 1C BC                    1 	.word LINK 
                           001CC5     2 	LINK=.
      001CC5                          3 RUN:
      001CC5 03                       4 	.byte 3 	
      001CC6 52 55 4E                 5 	.ascii "RUN"
      001CC9 16 30                    6 	.word run 
      001CCB                       5072 	_dict_entry 4,LIST,list
      001CCB 1C C5                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                           001CCD     2 	LINK=.
      001CCD                          3 LIST:
      001CCD 04                       4 	.byte 4 	
      001CCE 4C 49 53 54              5 	.ascii "LIST"
      001CD2 12 67                    6 	.word list 
      001CD4                       5073 	_dict_entry,3+FFUNC,USR,usr
      001CD4 1C CD                    1 	.word LINK 
                           001CD6     2 	LINK=.
      001CD6                          3 USR:
      001CD6 83                       4 	.byte 3+FFUNC 	
      001CD7 55 53 52                 5 	.ascii "USR"
      001CDA 1B 28                    6 	.word usr 
      001CDC                       5074 	_dict_entry,6+FFUNC,EEPROM,eeprom 
      001CDC 1C D6                    1 	.word LINK 
                           001CDE     2 	LINK=.
      001CDE                          3 EEPROM:
      001CDE 86                       4 	.byte 6+FFUNC 	
      001CDF 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001CE5 1B 22                    6 	.word eeprom 
      001CE7                       5075 	_dict_entry,6+FFUNC,UFLASH,uflash 
      001CE7 1C DE                    1 	.word LINK 
                           001CE9     2 	LINK=.
      001CE9                          3 UFLASH:
      001CE9 86                       4 	.byte 6+FFUNC 	
      001CEA 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001CF0 1B 1C                    6 	.word uflash 
      001CF2                       5076 	_dict_entry,3+FFUNC,ODR,port_odr
      001CF2 1C E9                    1 	.word LINK 
                           001CF4     2 	LINK=.
      001CF4                          3 ODR:
      001CF4 83                       4 	.byte 3+FFUNC 	
      001CF5 4F 44 52                 5 	.ascii "ODR"
      001CF8 1A FE                    6 	.word port_odr 
      001CFA                       5077 	_dict_entry,3+FFUNC,IDR,port_idr
      001CFA 1C F4                    1 	.word LINK 
                           001CFC     2 	LINK=.
      001CFC                          3 IDR:
      001CFC 83                       4 	.byte 3+FFUNC 	
      001CFD 49 44 52                 5 	.ascii "IDR"
      001D00 1B 04                    6 	.word port_idr 
      001D02                       5078 	_dict_entry,3+FFUNC,DDR,port_ddr 
      001D02 1C FC                    1 	.word LINK 
                           001D04     2 	LINK=.
      001D04                          3 DDR:
      001D04 83                       4 	.byte 3+FFUNC 	
      001D05 44 44 52                 5 	.ascii "DDR"
      001D08 1B 0A                    6 	.word port_ddr 
      001D0A                       5079 	_dict_entry,3+FFUNC,CRL,port_cr1 
      001D0A 1D 04                    1 	.word LINK 
                           001D0C     2 	LINK=.
      001D0C                          3 CRL:
      001D0C 83                       4 	.byte 3+FFUNC 	
      001D0D 43 52 4C                 5 	.ascii "CRL"
      001D10 1B 10                    6 	.word port_cr1 
      001D12                       5080 	_dict_entry,3+FFUNC,CRH,port_cr2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D12 1D 0C                    1 	.word LINK 
                           001D14     2 	LINK=.
      001D14                          3 CRH:
      001D14 83                       4 	.byte 3+FFUNC 	
      001D15 43 52 48                 5 	.ascii "CRH"
      001D18 1B 16                    6 	.word port_cr2 
      001D1A                       5081 	_dict_entry,4+FFUNC,GPIO,gpio 
      001D1A 1D 14                    1 	.word LINK 
                           001D1C     2 	LINK=.
      001D1C                          3 GPIO:
      001D1C 84                       4 	.byte 4+FFUNC 	
      001D1D 47 50 49 4F              5 	.ascii "GPIO"
      001D21 1A C1                    6 	.word gpio 
      001D23                       5082 	_dict_entry,6,PWRADC,power_adc 
      001D23 1D 1C                    1 	.word LINK 
                           001D25     2 	LINK=.
      001D25                          3 PWRADC:
      001D25 06                       4 	.byte 6 	
      001D26 50 57 52 41 44 43        5 	.ascii "PWRADC"
      001D2C 16 B0                    6 	.word power_adc 
      001D2E                       5083 	_dict_entry,5+FFUNC,RDADC,read_adc
      001D2E 1D 25                    1 	.word LINK 
                           001D30     2 	LINK=.
      001D30                          3 RDADC:
      001D30 85                       4 	.byte 5+FFUNC 	
      001D31 52 44 41 44 43           5 	.ascii "RDADC"
      001D36 16 EB                    6 	.word read_adc 
      001D38                       5084 	_dict_entry,3+FFUNC,ASC,ascii  
      001D38 1D 30                    1 	.word LINK 
                           001D3A     2 	LINK=.
      001D3A                          3 ASC:
      001D3A 83                       4 	.byte 3+FFUNC 	
      001D3B 41 53 43                 5 	.ascii "ASC"
      001D3E 1A 8B                    6 	.word ascii 
      001D40                       5085 	_dict_entry,4+FFUNC,CHAR,char
      001D40 1D 3A                    1 	.word LINK 
                           001D42     2 	LINK=.
      001D42                          3 CHAR:
      001D42 84                       4 	.byte 4+FFUNC 	
      001D43 43 48 41 52              5 	.ascii "CHAR"
      001D47 1A 6E                    6 	.word char 
      001D49                       5086 	_dict_entry,4+FFUNC,QKEY,qkey  
      001D49 1D 42                    1 	.word LINK 
                           001D4B     2 	LINK=.
      001D4B                          3 QKEY:
      001D4B 84                       4 	.byte 4+FFUNC 	
      001D4C 51 4B 45 59              5 	.ascii "QKEY"
      001D50 1A B7                    6 	.word qkey 
      001D52                       5087 	_dict_entry,3+FFUNC,KEY,key 
      001D52 1D 4B                    1 	.word LINK 
                           001D54     2 	LINK=.
      001D54                          3 KEY:
      001D54 83                       4 	.byte 3+FFUNC 	
      001D55 4B 45 59                 5 	.ascii "KEY"
      001D58 1A AF                    6 	.word key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001D5A                       5088 	_dict_entry,4+FFUNC,SIZE,size
      001D5A 1D 54                    1 	.word LINK 
                           001D5C     2 	LINK=.
      001D5C                          3 SIZE:
      001D5C 84                       4 	.byte 4+FFUNC 	
      001D5D 53 49 5A 45              5 	.ascii "SIZE"
      001D61 12 27                    6 	.word size 
      001D63                       5089 	_dict_entry,3,HEX,hex_base
      001D63 1D 5C                    1 	.word LINK 
                           001D65     2 	LINK=.
      001D65                          3 HEX:
      001D65 03                       4 	.byte 3 	
      001D66 48 45 58                 5 	.ascii "HEX"
      001D69 12 1D                    6 	.word hex_base 
      001D6B                       5090 	_dict_entry,3,DEC,dec_base
      001D6B 1D 65                    1 	.word LINK 
                           001D6D     2 	LINK=.
      001D6D                          3 DEC:
      001D6D 03                       4 	.byte 3 	
      001D6E 44 45 43                 5 	.ascii "DEC"
      001D71 12 22                    6 	.word dec_base 
      001D73                       5091 	_dict_entry,5+FFUNC,TICKS,get_ticks
      001D73 1D 6D                    1 	.word LINK 
                           001D75     2 	LINK=.
      001D75                          3 TICKS:
      001D75 85                       4 	.byte 5+FFUNC 	
      001D76 54 49 43 4B 53           5 	.ascii "TICKS"
      001D7B 1B 77                    6 	.word get_ticks 
      001D7D                       5092 	_dict_entry,3+FFUNC,ABS,abs
      001D7D 1D 75                    1 	.word LINK 
                           001D7F     2 	LINK=.
      001D7F                          3 ABS:
      001D7F 83                       4 	.byte 3+FFUNC 	
      001D80 41 42 53                 5 	.ascii "ABS"
      001D83 1B 7D                    6 	.word abs 
      001D85                       5093 	_dict_entry,3+FFUNC,RND,random 
      001D85 1D 7F                    1 	.word LINK 
                           001D87     2 	LINK=.
      001D87                          3 RND:
      001D87 83                       4 	.byte 3+FFUNC 	
      001D88 52 4E 44                 5 	.ascii "RND"
      001D8B 1B 9D                    6 	.word random 
      001D8D                       5094 	_dict_entry,5,PAUSE,pause 
      001D8D 1D 87                    1 	.word LINK 
                           001D8F     2 	LINK=.
      001D8F                          3 PAUSE:
      001D8F 05                       4 	.byte 5 	
      001D90 50 41 55 53 45           5 	.ascii "PAUSE"
      001D95 1B 64                    6 	.word pause 
      001D97                       5095 	_dict_entry,4,BSET,bit_set 
      001D97 1D 8F                    1 	.word LINK 
                           001D99     2 	LINK=.
      001D99                          3 BSET:
      001D99 04                       4 	.byte 4 	
      001D9A 42 53 45 54              5 	.ascii "BSET"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001D9E 14 3C                    6 	.word bit_set 
      001DA0                       5096 	_dict_entry,4,BRES,bit_reset
      001DA0 1D 99                    1 	.word LINK 
                           001DA2     2 	LINK=.
      001DA2                          3 BRES:
      001DA2 04                       4 	.byte 4 	
      001DA3 42 52 45 53              5 	.ascii "BRES"
      001DA7 14 50                    6 	.word bit_reset 
      001DA9                       5097 	_dict_entry,5,BTOGL,bit_toggle
      001DA9 1D A2                    1 	.word LINK 
                           001DAB     2 	LINK=.
      001DAB                          3 BTOGL:
      001DAB 05                       4 	.byte 5 	
      001DAC 42 54 4F 47 4C           5 	.ascii "BTOGL"
      001DB1 14 65                    6 	.word bit_toggle 
      001DB3                       5098 	_dict_entry 4,WAIT,wait 
      001DB3 1D AB                    1 	.word LINK 
                           001DB5     2 	LINK=.
      001DB5                          3 WAIT:
      001DB5 04                       4 	.byte 4 	
      001DB6 57 41 49 54              5 	.ascii "WAIT"
      001DBA 14 11                    6 	.word wait 
      001DBC                       5099 	_dict_entry 6,REMARK,rem 
      001DBC 1D B5                    1 	.word LINK 
                           001DBE     2 	LINK=.
      001DBE                          3 REMARK:
      001DBE 06                       4 	.byte 6 	
      001DBF 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001DC5 14 10                    6 	.word rem 
      001DC7                       5100 	_dict_entry 5,PRINT,print 
      001DC7 1D BE                    1 	.word LINK 
                           001DC9     2 	LINK=.
      001DC9                          3 PRINT:
      001DC9 05                       4 	.byte 5 	
      001DCA 50 52 49 4E 54           5 	.ascii "PRINT"
      001DCF 13 0B                    6 	.word print 
      001DD1                       5101 	_dict_entry,2,IF,if 
      001DD1 1D C9                    1 	.word LINK 
                           001DD3     2 	LINK=.
      001DD3                          3 IF:
      001DD3 02                       4 	.byte 2 	
      001DD4 49 46                    5 	.ascii "IF"
      001DD6 14 A9                    6 	.word if 
      001DD8                       5102 	_dict_entry,5,GOSUB,gosub 
      001DD8 1D D3                    1 	.word LINK 
                           001DDA     2 	LINK=.
      001DDA                          3 GOSUB:
      001DDA 05                       4 	.byte 5 	
      001DDB 47 4F 53 55 42           5 	.ascii "GOSUB"
      001DE0 15 C1                    6 	.word gosub 
      001DE2                       5103 	_dict_entry,4,GOTO,goto 
      001DE2 1D DA                    1 	.word LINK 
                           001DE4     2 	LINK=.
      001DE4                          3 GOTO:
      001DE4 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001DE5 47 4F 54 4F              5 	.ascii "GOTO"
      001DE9 15 B4                    6 	.word goto 
      001DEB                       5104 	_dict_entry,3,FOR,for 
      001DEB 1D E4                    1 	.word LINK 
                           001DED     2 	LINK=.
      001DED                          3 FOR:
      001DED 03                       4 	.byte 3 	
      001DEE 46 4F 52                 5 	.ascii "FOR"
      001DF1 14 BD                    6 	.word for 
      001DF3                       5105 	_dict_entry,2,TO,to
      001DF3 1D ED                    1 	.word LINK 
                           001DF5     2 	LINK=.
      001DF5                          3 TO:
      001DF5 02                       4 	.byte 2 	
      001DF6 54 4F                    5 	.ascii "TO"
      001DF8 14 E7                    6 	.word to 
      001DFA                       5106 	_dict_entry,4,STEP,step 
      001DFA 1D F5                    1 	.word LINK 
                           001DFC     2 	LINK=.
      001DFC                          3 STEP:
      001DFC 04                       4 	.byte 4 	
      001DFD 53 54 45 50              5 	.ascii "STEP"
      001E01 15 17                    6 	.word step 
      001E03                       5107 	_dict_entry,4,NEXT,next 
      001E03 1D FC                    1 	.word LINK 
                           001E05     2 	LINK=.
      001E05                          3 NEXT:
      001E05 04                       4 	.byte 4 	
      001E06 4E 45 58 54              5 	.ascii "NEXT"
      001E0A 15 3F                    6 	.word next 
      001E0C                       5108 	_dict_entry,6+FFUNC,UBOUND,ubound 
      001E0C 1E 05                    1 	.word LINK 
                           001E0E     2 	LINK=.
      001E0E                          3 UBOUND:
      001E0E 86                       4 	.byte 6+FFUNC 	
      001E0F 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001E15 12 31                    6 	.word ubound 
      001E17                       5109 	_dict_entry,6,RETURN,return 
      001E17 1E 0E                    1 	.word LINK 
                           001E19     2 	LINK=.
      001E19                          3 RETURN:
      001E19 06                       4 	.byte 6 	
      001E1A 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001E20 16 0C                    6 	.word return 
      001E22                       5110 	_dict_entry,4+FFUNC,PEEK,peek 
      001E22 1E 19                    1 	.word LINK 
                           001E24     2 	LINK=.
      001E24                          3 PEEK:
      001E24 84                       4 	.byte 4+FFUNC 	
      001E25 50 45 45 4B              5 	.ascii "PEEK"
      001E29 14 8C                    6 	.word peek 
      001E2B                       5111 	_dict_entry,4,POKE,poke 
      001E2B 1E 24                    1 	.word LINK 
                           001E2D     2 	LINK=.
      001E2D                          3 POKE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001E2D 04                       4 	.byte 4 	
      001E2E 50 4F 4B 45              5 	.ascii "POKE"
      001E32 14 79                    6 	.word poke 
      001E34                       5112 	_dict_entry,5,INPUT,input_var  
      001E34 1E 2D                    1 	.word LINK 
                           001E36     2 	LINK=.
      001E36                          3 INPUT:
      001E36 05                       4 	.byte 5 	
      001E37 49 4E 50 55 54           5 	.ascii "INPUT"
      001E3C 13 9C                    6 	.word input_var 
      001E3E                       5113 kword_dict:
      001E3E                       5114 	_dict_entry 3,LET,let 
      001E3E 1E 36                    1 	.word LINK 
                           001E40     2 	LINK=.
      001E40                          3 LET:
      001E40 03                       4 	.byte 3 	
      001E41 4C 45 54                 5 	.ascii "LET"
      001E44 12 3F                    6 	.word let 
                                   5115 	
                                   5116 
      001E80                       5117 	.bndry 128 ; align on FLASH block.
                                   5118 ; free space for user application  
      001E80                       5119 user_space:
                                   5120 ; USR() function test
      001E80 89               [ 2] 5121 	pushw x 
      001E81 72 1A 50 0A      [ 1] 5122 	bset PC_ODR,#5 
      001E85 85               [ 2] 5123 	popw x 
      001E86 CD 1B 6E         [ 4] 5124 	call pause02 
      001E89 72 1B 50 0A      [ 1] 5125 	bres PC_ODR,#5 
      001E8D 81               [ 4] 5126 	ret
                                   5127 
                                   5128 	.area FLASH_DRIVE (ABS)
      010000                       5129 	.org 0x10000
      010000                       5130 fdrive:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        001D7F R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        001D3A R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |   5 BEEP       001CAA R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BLOCK_ER=  000000     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  000005 
  5 BREAK      001CA0 R   |   5 BRES       001DA2 R   |   5 BSET       001D99 R
    BSIZE   =  000005     |     BSP     =  000008     |   5 BTOGL      001DAB R
    BTW     =  000001     |   5 BYE        001C4D R   |     C       =  000001 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       001D42 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CNT     =  000008     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        001D14 R   |   5 CRL        001D0C R   |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000006     |     CURR    =  000002 
    CX_BPTR =  000001     |     CX_CNT  =  000005     |     CX_IN   =  000004 
    CX_LNO  =  000003     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |   5 DDR        001D04 R
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  5 DEC        001D6D R   |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        001C74 R   |     DIVIDND =  000007 
    DIVISR  =  000005     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
    DSTACK_S=  000040     |   5 EEPROM     001CDE R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_L=  000005 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FF      =  00000C     |     FFOR    =  000002     |     FFUNC   =  000080 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   5 FOR        001DED R   |   5 FORGET     001C69 R
    FRUN    =  000000     |     FSIZE   =  000001     |     FSLEEP  =  000003 
    FTRAP   =  000001     |   5 GOSUB      001DDA R   |     GOS_RET =  000003 
  5 GOTO       001DE4 R   |   5 GPIO       001D1C R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  5 HEX        001D65 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        001CFC R
  5 IF         001DD3 R   |     IN      =  000007     |     INCR    =  000001 
  5 INPUT      001E36 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  000003     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        001D54 R   |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000005     |   5 LET        001E40 R   |     LINENO  =  000005 
  5 LINK    =  001E40 R   |   5 LIST       001CCD R   |     LL      =  000002 
    LLEN    =  000002     |     LL_HB   =  000001     |     LNO     =  000005 
    LN_PTR  =  000005     |   5 LOAD       001C7C R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NCLKOPT =  004808 
    NEG     =  000001     |   5 NEW        001C98 R   |   5 NEXT       001E05 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NL      =  00000A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000009 R   |   5 ODR        001CF4 R   |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     PA      =  000000     |     PAD_SIZE=  000028 
  5 PAUSE      001D8F R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   5 PEEK       001E24 R
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   5 POKE       001E2D R   |     PREV    =  000001 
  5 PRINT      001DC9 R   |     PROD    =  000002     |     PSIZE   =  000001 
  5 PWRADC     001D25 R   |   5 QKEY       001D4B R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 RDADC      001D30 R
  5 REG_A      0007F8 R   |   5 REG_CC     0007FC R   |   5 REG_EPC    0007EB R
  5 REG_SP     000801 R   |   5 REG_X      0007F4 R   |   5 REG_Y      0007F0 R
    RELOP   =  000005     |   5 REMARK     001DBE R   |     RETL1   =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

  5 RETURN     001E19 R   |   5 RND        001D87 R   |     ROP     =  004800 
    RST_SR  =  0050B3     |   5 RUN        001CC5 R   |     RXCHAR  =  000001 
    R_A     =  000007     |     R_CC    =  000008     |     R_X     =  000005 
    R_Y     =  000003     |   5 SAVE       001C85 R   |     SDIVD   =  000002 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       001CBC R   |     SIGN    =  000001     |   5 SIZE       001D5C R
    SKIP    =  000006     |   5 SLEEP      001C5F R   |     SPACE   =  000020 
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SQUOT   =  000001 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  000080 
  5 STATES     0007AE R   |   5 STEP       001DFC R   |   5 STOP       001CB3 R
    SWIM_CSR=  007F80     |     TAB     =  000009     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      001D75 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000003 
    TK_CHAR =  00000B     |     TK_CMD  =  000007     |     TK_COLON=  000001 
    TK_COMMA=  000008     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FUNC =  00000C     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_INTGR=  00000A 
    TK_LE   =  000036     |     TK_LPARE=  000004     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000006     |     TK_RPARE=  000005     |     TK_SHARP=  000009 
    TK_VAR  =  000002     |   5 TO         001DF5 R   |   5 Timer4Up   000019 R
  5 TrapHand   00000A R   |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     001E0E R   |   5 UFLASH     001CE9 R
  5 USER_ABO   00007E R   |   5 USR        001CD6 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   5 UserButt   000025 R
    VSIZ    =  000002     |     VSIZE   =  000002     |     VT      =  00000B 
  5 WAIT       001DB5 R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |     WLEN    =  000001     |   5 WORDS      001C55 R
  5 WRITE      001C8E R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMASK   =  000001     |     XSAVE   =  000001     |     YSAVE   =  000003 
  5 abs        001B7D R   |   1 acc16      000009 R   |   1 acc24      000008 R
  1 acc8       00000A R   |   5 accept_c   0009A6 R   |   5 add        000F6A R
  5 ansi_seq   000964 R   |   5 arg_list   00107A R   |   1 array_ad   000020 R
  1 array_si   000022 R   |   5 ascii      001A8B R   |   5 at_tst     000CA1 R
  5 atoi24     000DB6 R   |   5 atoi_exi   000E24 R   |   5 bad_port   001AF9 R
  1 base       000007 R   |   1 basicptr   000003 R   |   5 beep       001688 R
  5 bin_exit   000B99 R   |   5 bit_rese   001450 R   |   5 bit_set    00143C R
  5 bit_togg   001465 R   |   5 bkslsh_t   000C4C R   |   5 bksp       0001BA R
  5 break      00171E R   |   5 break_po   00174F R   |   5 bye        001B50 R
  5 char       001A6E R   |   5 clear_ba   0004D9 R   |   5 clear_va   0003E9 R
  5 clock_in   000099 R   |   5 cmd_itf    0009CA R   |   5 cmp_name   0017EE R
  5 cold_sta   00044E R   |   5 colon_ts   000C75 R   |   5 comma_ts   000C80 R
  5 convert_   000AFF R   |   1 count      000002 R   |   5 cp_loop    001026 R
  5 create_g   00033E R   |   5 cstk_pro   000F34 R   |   5 dash_tst   000C96 R
  5 ddrop      000EB0 R   |   5 ddrop_n    000EED R   |   5 ddup       000EB9 R
  5 dec_base   001222 R   |   5 del_back   000997 R   |   5 del_line   00030F R
  5 del_ln     000988 R   |   5 delete     0001CA R   |   5 dir_loop   0019AE R
  5 director   0019A2 R   |   5 divide     000FC0 R   |   5 divu24_8   0008F1 R
  5 dotr       000F3D R   |   5 dotr_loo   000F52 R   |   5 dots       000F0A R
  5 dpick      000ECA R   |   5 dpop       000E89 R   |   5 dpush      000E7C R
  5 drive_fr   001A2A R   |   3 dstack     001740 R   |   3 dstack_u   001780 R
  5 dstk_pro   000F00 R   |   1 dstkptr    000019 R   |   5 dswap      000E96 R
  5 eeprom     001B22 R   |   5 eql_tst    000D03 R   |   5 err_bad_   0005BA R
  5 err_cmd_   00057B R   |   5 err_div0   00053D R   |   5 err_dupl   000596 R
  5 err_math   000523 R   |   5 err_mem_   000506 R   |   5 err_msg    0004EE R
  5 err_no_a   0005C7 R   |   5 err_no_l   00054D R   |   5 err_not_   0005A8 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

  5 err_run_   000564 R   |   5 err_synt   000514 R   |   5 expect     00106D R
  5 expr_exi   0011B3 R   |   5 expressi   001172 R   |   5 factor     0010D1 R
  1 farptr     000013 R   |   7 fdrive     010000 R   |   5 fetch      000ED9 R
  5 fetchc     000AB7 R   |   1 ffree      000016 R   |   5 file_cou   001A22 R
  5 final_te   00095E R   |   5 first_li   001292 R   |   1 flags      000024 R
  5 for        0014BD R   |   5 forget     001953 R   |   1 free_ram   00005A R
  5 get_arra   00109E R   |   5 get_tick   001B77 R   |   5 get_toke   000BE6 R
  5 getc       0001A7 R   |   5 go_commo   0015E4 R   |   5 gosub      0015C1 R
  5 goto       0015B4 R   |   5 gpio       001AC1 R   |   5 gt_tst     000D0E R
  5 hex_base   00121D R   |   5 hse_cloc   000187 R   |   5 hsi_cloc   000191 R
  5 if         0014A9 R   |   1 in         000001 R   |   1 in.w       000000 R
  1 in.w.sav   000011 R   |   5 incr_far   001778 R   |   5 input_ex   00140D R
  5 input_lo   0013A8 R   |   5 input_va   00139C R   |   5 insert_l   00036F R
  5 insert_l   0003E6 R   |   5 interp     000677 R   |   5 interp_l   0006BD R
  5 invalid    000A0F R   |   5 invalid_   000A8D R   |   5 is_alpha   0003F7 R
  5 is_digit   000DA1 R   |   5 itoa       0008AA R   |   5 itoa_loo   0008C2 R
  5 key        001AAF R   |   5 kword_di   001E3E R   |   5 kword_en   001C4B R
  5 last_lin   00129B R   |   5 ledoff     0006FE R   |   5 ledon      0006F9 R
  5 ledtoggl   000703 R   |   5 left_arr   000964 R   |   5 left_par   00070C R
  5 let        00123F R   |   5 let02      001249 R   |   1 lineno     000005 R
  5 lines_sk   0012A0 R   |   5 list       001267 R   |   5 list_exi   0012EA R
  5 list_sta   0012C3 R   |   5 load       0018F6 R   |   5 loop_bac   001587 R
  1 loop_dep   00001F R   |   5 loop_don   0015A2 R   |   5 lt_tst     000D47 R
  5 mem_peek   000A2C R   |   5 modulo     001004 R   |   5 move       00029E R
  5 move_dow   0002BC R   |   5 move_exi   0002DD R   |   5 move_loo   0002C1 R
  5 move_up    0002AE R   |   5 multiply   000F78 R   |   5 mulu24_8   000E28 R
  5 nbr_tst    000C22 R   |   5 neg_acc2   000919 R   |   5 new        00176D R
  5 next       00153F R   |   5 no_match   001038 R   |   5 none       000BE6 R
  5 number     000ABD GR  |   5 other      000D7F R   |   3 pad        001718 R
  5 parse_bi   000B79 R   |   5 parse_in   000B3E R   |   5 parse_ke   000BA1 R
  5 parse_qu   000AC4 R   |   5 pause      001B64 R   |   5 pause02    001B6E R
  5 peek       00148C R   |   5 peek_byt   000A57 R   |   5 plus_tst   000CD7 R
  5 poke       001479 R   |   5 port_cr1   001B10 R   |   5 port_cr2   001B16 R
  5 port_ddr   001B0A R   |   5 port_idr   001B04 R   |   5 port_odr   001AFE R
  5 power_ad   0016B0 R   |   5 prcnt_ts   000CF8 R   |   5 print      00130B R
  5 print_ex   001366 R   |   5 print_fa   000A9C R   |   5 print_in   00084E R
  5 print_re   00075B R   |   5 print_st   000A1F R   |   5 prt_basi   0012ED R
  5 prt_loop   00130F R   |   5 prt_peek   00024E R   |   5 prt_reg1   00073C R
  5 prt_reg8   000717 R   |   5 prt_regs   0001E4 R   |   5 prti24     000806 R
  5 putc       00019E R   |   5 puts       0001B0 R   |   5 qkey       001AB7 R
  5 qmark_ts   000CAC R   |   5 random     001B9D R   |   5 read_adc   0016EB R
  5 readln     00093C R   |   5 readln_l   000942 R   |   5 readln_q   0009BB R
  5 regs_sta   000227 R   |   5 rel_exit   00120A R   |   5 relation   0011B6 R
  5 rem        001410 R   |   5 repl       0009D8 R   |   5 repl_exi   000A00 R
  5 reprint    000964 R   |   5 reset_co   00130D R   |   5 rest_con   001387 R
  5 return     00160C R   |   5 right_ar   000964 R   |   5 rparnt_t   000C6A R
  5 run        001630 R   |   5 save       001859 R   |   5 save_con   001372 R
  5 search_d   001015 R   |   5 search_e   001069 R   |   5 search_f   00180F R
  5 search_l   0002E0 R   |   5 search_l   0002EB R   |   5 search_n   001019 R
  1 seedx      00000D R   |   1 seedy      00000F R   |   5 seek_fdr   001786 R
  5 sharp_ts   000C8B R   |   5 show       00120D R   |   5 size       001227 R
  5 skip       000E62 R   |   5 slash_ts   000CED R   |   5 sleep      001B59 R
  5 software   000408 R   |   5 spaces     0001D8 R   |   3 stack_fu   001780 R
  3 stack_un   001800 R   |   5 star_tst   000CE2 R   |   5 step       001517 R
  5 stop       001679 R   |   5 store      000EE3 R   |   5 store_lo   001529 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

  5 str_matc   001047 R   |   5 str_tst    000C11 R   |   5 strcmp     00027F R
  5 strcpy     000290 R   |   5 strlen     000272 R   |   5 substrac   000F72 R
  5 syntax_e   0005FB R   |   1 tab_widt   000025 R   |   5 tb_error   0005FD R
  5 term       001125 R   |   5 term01     00112E R   |   5 term_exi   00116F R
  5 test_p     000A17 R   |   3 tib        0016C8 R   |   5 tick_tst   000CC3 R
  1 ticks      00000B R   |   5 timer4_i   0000AF R   |   5 to         0014E7 R
  5 to_upper   000DAA GR  |   5 token_ch   000D8E R   |   5 token_ex   000D9E R
  1 txtbgn     00001B R   |   1 txtend     00001D R   |   5 uart3_in   000174 R
  5 uart3_se   000180 R   |   5 uart_ena   000199 R   |   5 ubound     001231 R
  5 uflash     001B1C R   |   5 unget_to   000E75 R   |   5 unlock_e   0000C0 R
  5 unlock_f   0000CE R   |   5 user_spa   001E80 R   |   5 usr        001B28 R
  1 vars       000026 R   |   5 wait       001411 R   |   5 warm_sta   000657 R
  5 words      001C11 R   |   5 write      001A37 R   |   5 write_bl   000151 R
  5 write_by   0000DC R   |   5 write_ee   000118 R   |   5 write_ex   00014C R
  5 write_fl   000102 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   1E8E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

