ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           000040    44 	DSTACK_SIZE=64 
                           000080    45 	STACK_SIZE=128
                           0017FF    46 	STACK_EMPTY=RAM_SIZE-1  
                           000000    47 	FRUN=0 ; flags run code in variable flags
                           000001    48 	FTRAP=1 ; inside trap handler 
                           000002    49 	FFOR=2 ; FOR loop in preparation 
                           000003    50 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    51 	FBREAK=4 ; break point flag 
                           000005    52 	FCOMP=5  ; compiling flags 
                                     53 
      000000                         54 in.w:  .blkb 1 ; parser position in text line
      000001                         55 in:    .blkb 1 ; low byte of in.w
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000002                         56 count: .blkb 1 ; length of string in text line  
      000003                         57 basicptr:  .blkb 2  ; point to text buffer 
      000005                         58 lineno: .blkb 2  ; BASIC line number 
      000007                         59 base:  .blkb 1 ; nemeric base used to print integer 
      000008                         60 acc24: .blkb 1 ; 24 accumulator
      000009                         61 acc16: .blkb 1
      00000A                         62 acc8:  .blkb 1
      00000B                         63 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000D                         64 seedx: .blkw 1  ; xorshift 16 seed x 
      00000F                         65 seedy: .blkw 1  ; xorshift 16 seed y 
      000011                         66 in.w.saved: .blkw 1 ; set by get_token before parsing next token, used by unget_token
      000013                         67 farptr: .blkb 1 ; far pointer used by file system
      000014                         68 ptr16:  .blkb 1 ; middle byte of farptr
      000015                         69 ptr8:   .blkb 1 ; least byte of farptr 
      000016                         70 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000019                         71 dstkptr: .blkw 1  ; data stack pointer 
      00001B                         72 txtbgn: .ds 2 ; BASIC text beginning address 
      00001D                         73 txtend: .ds 2 ; BASIC text end address 
      00001F                         74 loop_depth: .ds 1 ; FOR loop depth, level of nested loop.  
      000020                         75 array_addr: .ds 2 ; address of @ array 
      000022                         76 array_size: .ds 2 ; array size 
      000024                         77 flags: .ds 1 ; boolean flags
      000025                         78 tab_width: .ds 1 ; print colon width (4)
      000026                         79 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     80 ; keep as last variable 
      00005A                         81 free_ram: ; from here RAM free for BASIC text 
                                     82 
                                     83 ;-----------------------------------
                                     84     .area SSEG (ABS)
                                     85 ;-----------------------------------	
      0016C8                         86     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         87 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         88 pad: .ds PAD_SIZE             ; working buffer
      001740                         89 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         90 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         91 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         92 stack_unf: ; stack underflow ; control_stack bottom 
                                     93 
                                     94 
                                     95 ;--------------------------------------
                                     96     .area HOME 
                                     97 ;--------------------------------------
      000000 82 00 05 65             98     int cold_start
                           000001    99 .if DEBUG
      000004 82 00 00 0A            100 	int TrapHandler 		;TRAP  software interrupt
                           000000   101 .else
                                    102 	int NonHandledInterrupt ;TRAP  software interrupt
                                    103 .endif
      000008 82 00 00 09            104 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            105 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            106 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            107 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            108 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            109 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            110 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000024 82 00 00 25            111 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            112 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            113 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            114 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            115 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            116 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            117 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            118 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            119 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            120 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            121 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            122 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            123 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            124 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            125 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            126 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            127 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            128 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            129 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            130 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            131 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            132 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            133 	int NonHandledInterrupt ;int29  not used
                                    134 
                                    135 ;---------------------------------------
                                    136     .area CODE
                                    137 ;---------------------------------------
                           000001   138 .if DEBUG
      000000 53 54 4D 38 5F 54 42   139 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    140 .endif 
                                    141 
      000009                        142 NonHandledInterrupt:
      000009 71                     143     .byte 0x71  ; reinitialize MCU
                                    144 
                                    145 
                                    146 ;------------------------------------
                                    147 ; software interrupt handler  
                                    148 ;------------------------------------
                           000001   149 .if DEBUG 
      00000A                        150 TrapHandler:
      00000A 72 12 00 24      [ 1]  151 	bset flags,#FTRAP 
      00000E CD 08 B4         [ 4]  152 	call print_registers
      000011 CD 0B 23         [ 4]  153 	call cmd_itf
      000014 72 13 00 24      [ 1]  154 	bres flags,#FTRAP 	
      000018 80               [11]  155 	iret
                                    156 .endif 
                                    157 
      000019                        158 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  159 	clr TIM4_SR 
      00001D CE 00 0B         [ 2]  160 	ldw x,ticks
      000020 5C               [ 1]  161 	incw x
      000021 CF 00 0B         [ 2]  162 	ldw ticks,x 
      000024 80               [11]  163 	iret 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    165 
                                    166 ;------------------------------------
                                    167 ; Triggered by pressing USER UserButton 
                                    168 ; on NUCLEO card.
                                    169 ;------------------------------------
      000025                        170 UserButtonHandler:
                                    171 ; wait button release
      000025 5F               [ 1]  172 	clrw x
      000026 5A               [ 2]  173 1$: decw x 
      000027 26 FD            [ 1]  174 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  175 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    176 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 24 05   [ 2]  177     btjf flags,#FSLEEP,2$
      000033 72 17 00 24      [ 1]  178 	bres flags,#FSLEEP 
      000037 80               [11]  179 	iret
      000038 72 00 00 24 03   [ 2]  180 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  181 	jp 9$ 
      000040                        182 4$:	; program interrupted by user 
      000040 72 11 00 24      [ 1]  183 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  184 	ldw x,#USER_ABORT
      000047 CD 01 B0         [ 4]  185 	call puts 
      00004A CE 00 03         [ 2]  186 	ldw x,basicptr
      00004D FE               [ 2]  187 	ldw x,(x)
                                    188 ; print line number 
      00004E 35 0A 00 07      [ 1]  189 	mov base,#10 
      000052 35 06 00 25      [ 1]  190 	mov tab_width,#6
      000056 CD 09 A7         [ 4]  191 	call print_int  	
      000059 CE 00 03         [ 2]  192 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  193 	addw x,#3  
      00005F CD 01 B0         [ 4]  194 	call puts 
      000062 A6 0D            [ 1]  195 	ld a,#CR 
      000064 CD 01 9E         [ 4]  196 	call putc
      000067 5F               [ 1]  197 	clrw x  
      000068 C6 00 01         [ 1]  198 	ld a,in 
      00006B AB 03            [ 1]  199 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  200 	ld xl,a 
      00006E CD 01 D8         [ 4]  201 	call spaces 
      000071 A6 5E            [ 1]  202 	ld a,#'^
      000073 CD 01 9E         [ 4]  203 	call putc 
      000076                        204 9$:
      000076 AE 17 FF         [ 2]  205     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  206     ldw sp,x
      00007A 9A               [ 1]  207 	rim 
      00007B CC 07 74         [ 2]  208 	jp warm_start
                                    209 
      00007E 0A 50 72 6F 67 72 61   210 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    211 
                                    212 
                                    213 ;----------------------------------------
                                    214 ; inialize MCU clock 
                                    215 ; input:
                                    216 ;   A 		source  HSI | 1 HSE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    217 ;   XL      CLK_CKDIVR , clock divisor 
                                    218 ; output:
                                    219 ;   none 
                                    220 ;----------------------------------------
      000099                        221 clock_init:	
      000099 C1 50 C3         [ 1]  222 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  223 	jreq 2$ ; no switching required 
                                    224 ; select clock source 
      00009E 72 12 50 C5      [ 1]  225 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  226 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  227 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  228 	jrne 1$
      0000AA                        229 2$: 	
                                    230 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  231 	ld a,xl 
      0000AB C7 50 C6         [ 1]  232 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  233 	ret
                                    234 
                                    235 ;---------------------------------
                                    236 ; TIM4 is configured to generate an 
                                    237 ; interrupt every millisecond 
                                    238 ;----------------------------------
      0000AF                        239 timer4_init:
      0000AF 35 07 53 45      [ 1]  240 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B3 35 7D 53 46      [ 1]  241 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B7 35 05 53 40      [ 1]  242 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BB 72 10 53 41      [ 1]  243 	bset TIM4_IER,#TIM4_IER_UIE 
      0000BF 81               [ 4]  244 	ret
                                    245 
                                    246 ;----------------------------------
                                    247 ; unlock EEPROM for writing/erasing
                                    248 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    249 ; input:
                                    250 ;  none
                                    251 ; output:
                                    252 ;  none 
                                    253 ;----------------------------------
      0000C0                        254 unlock_eeprom:
      0000C0 35 AE 50 64      [ 1]  255 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C4 35 56 50 64      [ 1]  256     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C8 72 07 50 5F FB   [ 2]  257 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000CD 81               [ 4]  258 	ret
                                    259 
                                    260 ;----------------------------------
                                    261 ; unlock FLASH for writing/erasing
                                    262 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    263 ; input:
                                    264 ;  none
                                    265 ; output:
                                    266 ;  none
                                    267 ;----------------------------------
      0000CE                        268 unlock_flash:
      0000CE 35 56 50 62      [ 1]  269 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D2 35 AE 50 62      [ 1]  270 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000D6 72 03 50 5F FB   [ 2]  271 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000DB 81               [ 4]  272 	ret
                                    273 
                           000000   274 	BLOCK_ERASE=0
                                    275 ;----------------------------
                                    276 ; erase block code must be 
                                    277 ;executed from RAM
                                    278 ;-----------------------------
                           000000   279 .if BLOCK_ERASE 
                                    280 ; this code is copied to RAM 
                                    281 erase_start:
                                    282 	clr a 
                                    283     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    284     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    285 	ldf [farptr],a
                                    286     inc farptr+2 
                                    287     ldf [farptr],a
                                    288     inc farptr+2 
                                    289     ldf [farptr],a
                                    290     inc farptr+2 
                                    291     ldf [farptr],a
                                    292 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    293 	ret
                                    294 erase_end:
                                    295 
                                    296 ; copy erase_start in RAM 
                                    297 move_code_in_ram:
                                    298 	ldw x,#erase_end 
                                    299 	subw x,#erase_start
                                    300 	ldw acc16,x 
                                    301 	ldw x,#pad 
                                    302 	ldw y,#erase_start 
                                    303 	call move 
                                    304 	ret 
                                    305 
                                    306 ;-----------------------------------
                                    307 ; erase flash or EEPROM block 
                                    308 ; a block is 128 bytes 
                                    309 ; input:
                                    310 ;   farptr  address block begin
                                    311 ; output:
                                    312 ;   none
                                    313 ;--------------------------------------
                                    314 erase_block:
                                    315 	ldw x,farptr+1 
                                    316 	pushw x 
                                    317 	call move_code_in_ram 
                                    318 	popw x 
                                    319 	ldw farptr+1,x 
                                    320 	tnz farptr
                                    321 	jrne erase_flash 
                                    322 	ldw x,#FLASH_BASE 
                                    323 	cpw x,farptr+1 
                                    324 	jrpl erase_flash 
                                    325 ; erase eeprom block
                                    326 	call unlock_eeprom 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    327 	sim 
                                    328 	call pad   
                                    329 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    330 	rim 
                                    331 	ret 
                                    332 ; erase flash block:
                                    333 erase_flash:
                                    334 	call unlock_flash 
                                    335 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    336 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    337 	clr a 
                                    338 	sim 
                                    339 	call pad 
                                    340     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    341 	rim 
                                    342 	ret 
                                    343 .endif ; BLOCK_ERASE 
                                    344 
                                    345 
                                    346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    347 ; write a byte to FLASH or EEPROM 
                                    348 ; input:
                                    349 ;    a  		byte to write
                                    350 ;    farptr  	address
                                    351 ;    x          farptr[x]
                                    352 ; output:
                                    353 ;    none
                                    354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    355 	; variables locales
                           000001   356 	BTW = 1   ; byte to write offset on stack
                           000002   357 	OPT = 2   ; OPTION flag offset on stack
                           000002   358 	VSIZE = 2
      0000DC                        359 write_byte:
      0000DC 90 89            [ 2]  360 	pushw y
      0000DE                        361 	_vars VSIZE
      0000DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E0 6B 01            [ 1]  362 	ld (BTW,sp),a ; byte to write 
      0000E2 0F 02            [ 1]  363 	clr (OPT,sp)  ; OPTION flag
                                    364 ; put addr[15:0] in Y, for bounds check.
      0000E4 90 CE 00 14      [ 2]  365 	ldw y,farptr+1   ; Y=addr15:0
                                    366 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000E8 72 5D 00 13      [ 1]  367 	tnz farptr 
      0000EC 26 14            [ 1]  368 	jrne write_flash
      0000EE 90 A3 21 80      [ 2]  369     cpw y,#user_space
      0000F2 24 0E            [ 1]  370     jruge write_flash
      0000F4 90 A3 40 00      [ 2]  371 	cpw y,#EEPROM_BASE  
      0000F8 25 52            [ 1]  372     jrult write_exit
      0000FA 90 A3 48 00      [ 2]  373 	cpw y,#OPTION_BASE
      0000FE 25 18            [ 1]  374 	jrult write_eeprom
      000100 20 4A            [ 2]  375     jra write_exit
                                    376 ; write program memory
      000102                        377 write_flash:
      000102 CD 00 CE         [ 4]  378 	call unlock_flash 
      000105 9B               [ 1]  379 1$:	sim 
      000106 7B 01            [ 1]  380 	ld a,(BTW,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000108 92 A7 00 13      [ 4]  381 	ldf ([farptr],x),a ; farptr[x]=A
      00010C 72 05 50 5F FB   [ 2]  382 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000111 9A               [ 1]  383     rim 
      000112 72 13 50 5F      [ 1]  384     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000116 20 34            [ 2]  385     jra write_exit
                                    386 ; write eeprom and option
      000118                        387 write_eeprom:
      000118 CD 00 C0         [ 4]  388 	call unlock_eeprom
                                    389 	; check for data eeprom or option eeprom
      00011B 90 A3 48 00      [ 2]  390 	cpw y,#OPTION_BASE
      00011F 2B 08            [ 1]  391 	jrmi 1$
      000121 90 A3 48 80      [ 2]  392 	cpw y,#OPTION_END+1
      000125 2A 02            [ 1]  393 	jrpl 1$
      000127 03 02            [ 1]  394 	cpl (OPT,sp)
      000129                        395 1$: 
      000129 0D 02            [ 1]  396     tnz (OPT,sp)
      00012B 27 08            [ 1]  397     jreq 2$
                                    398 	; pour modifier une option il faut modifier ces 2 bits
      00012D 72 1E 50 5B      [ 1]  399     bset FLASH_CR2,#FLASH_CR2_OPT
      000131 72 1F 50 5C      [ 1]  400     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000135                        401 2$: 
      000135 7B 01            [ 1]  402     ld a,(BTW,sp)
      000137 92 A7 00 13      [ 4]  403     ldf ([farptr],x),a
      00013B 0D 02            [ 1]  404     tnz (OPT,sp)
      00013D 27 08            [ 1]  405     jreq 3$
      00013F 5C               [ 1]  406     incw x
      000140 7B 01            [ 1]  407     ld a,(BTW,sp)
      000142 43               [ 1]  408     cpl a
      000143 92 A7 00 13      [ 4]  409     ldf ([farptr],x),a
      000147 72 05 50 5F FB   [ 2]  410 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014C                        411 write_exit:
      00014C                        412 	_drop VSIZE 
      00014C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00014E 90 85            [ 2]  413 	popw y
      000150 81               [ 4]  414     ret
                                    415 
                                    416 ;--------------------------------------------
                                    417 ; write a data block to eeprom or flash 
                                    418 ; input:
                                    419 ;   Y        source address   
                                    420 ;   X        array index  destination  farptr[x]
                                    421 ;   BSIZE    block size bytes 
                                    422 ;   farptr   write address , byte* 
                                    423 ; output:
                                    424 ;	X 		after last byte written 
                                    425 ;   Y 		after last byte read 
                                    426 ;  farptr   point after block
                                    427 ;---------------------------------------------
      000151                        428 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000151                        429 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    430 	; local var 
                           000001   431 	XSAVE=1 
                           000002   432 	VSIZE=2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000151                        433 write_block:
      000151                        434 	_vars VSIZE
      000151 52 02            [ 2]    1     sub sp,#VSIZE 
      000153 1F 01            [ 2]  435 	ldw (XSAVE,sp),x 
      000155 1E 05            [ 2]  436 	ldw x,(BSIZE,sp) 
      000157 27 13            [ 1]  437 	jreq 9$
      000159 1E 01            [ 2]  438 1$:	ldw x,(XSAVE,sp)
      00015B 90 F6            [ 1]  439 	ld a,(y)
      00015D CD 00 DC         [ 4]  440 	call write_byte 
      000160 5C               [ 1]  441 	incw x 
      000161 90 5C            [ 1]  442 	incw y 
      000163 1F 01            [ 2]  443 	ldw (XSAVE,sp),x
      000165 1E 05            [ 2]  444 	ldw x,(BSIZE,sp)
      000167 5A               [ 2]  445 	decw x
      000168 1F 05            [ 2]  446 	ldw (BSIZE,sp),x 
      00016A 26 ED            [ 1]  447 	jrne 1$
      00016C                        448 9$:
      00016C 1E 01            [ 2]  449 	ldw x,(XSAVE,sp)
      00016E CD 1A 6C         [ 4]  450 	call incr_farptr
      000171                        451 	_drop VSIZE
      000171 5B 02            [ 2]    1     addw sp,#VSIZE 
      000173 81               [ 4]  452 	ret 
                                    453 
                                    454 
                                    455 ;---------------------------------------------
                                    456 ;   UART3 subroutines
                                    457 ;---------------------------------------------
                                    458 
                                    459 ;---------------------------------------------
                                    460 ; initialize UART3, 115200 8N1
                                    461 ; input:
                                    462 ;	none
                                    463 ; output:
                                    464 ;   none
                                    465 ;---------------------------------------------
      000174                        466 uart3_init:
                                    467 	; configure tx pin
      000174 72 1A 50 11      [ 1]  468 	bset PD_DDR,#BIT5 ; tx pin
      000178 72 1A 50 12      [ 1]  469 	bset PD_CR1,#BIT5 ; push-pull output
      00017C 72 1A 50 13      [ 1]  470 	bset PD_CR2,#BIT5 ; fast output
      000180                        471 uart3_set_baud: 
                                    472 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    473 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000180 A6 E1            [ 1]  474 	ld a,#CLK_SWR_HSI
      000182 C1 50 C3         [ 1]  475 	cp a,CLK_CMSR 
      000185 27 0A            [ 1]  476 	jreq hsi_clock 
      000187                        477 hse_clock: ; 8 Mhz 	
      000187 35 05 52 43      [ 1]  478 	mov UART3_BRR2,#0x05 ; must be loaded first
      00018B 35 04 52 42      [ 1]  479 	mov UART3_BRR1,#0x4
      00018F 20 08            [ 2]  480 	jra uart_enable
      000191                        481 hsi_clock: ; 16 Mhz 	
      000191 35 0B 52 43      [ 1]  482 	mov UART3_BRR2,#0x0b ; must be loaded first
      000195 35 08 52 42      [ 1]  483 	mov UART3_BRR1,#0x08
      000199                        484 uart_enable:	
      000199 35 0C 52 45      [ 1]  485 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00019D 81               [ 4]  486 	ret
                                    487 	
                                    488 ;---------------------------------
                                    489 ; send character to UART3 
                                    490 ; input:
                                    491 ;   A 
                                    492 ; output:
                                    493 ;   none 
                                    494 ;--------------------------------	
      00019E                        495 putc:
      00019E 72 0F 52 40 FB   [ 2]  496 	btjf UART3_SR,#UART_SR_TXE,.
      0001A3 C7 52 41         [ 1]  497 	ld UART3_DR,a 
      0001A6 81               [ 4]  498 	ret 
                                    499 
                                    500 ;---------------------------------
                                    501 ; wait character from UART3 
                                    502 ; input:
                                    503 ;   none
                                    504 ; output:
                                    505 ;   A 			char  
                                    506 ;--------------------------------	
      0001A7                        507 getc:
      0001A7 72 0B 52 40 FB   [ 2]  508 	btjf UART3_SR,#UART_SR_RXNE,.
      0001AC C6 52 41         [ 1]  509 	ld a,UART3_DR 
      0001AF 81               [ 4]  510 	ret 
                                    511 
                                    512 ;-----------------------------
                                    513 ; send an ASCIZ string to UART3 
                                    514 ; input: 
                                    515 ;   x 		char * 
                                    516 ; output:
                                    517 ;   none 
                                    518 ;-------------------------------
      0001B0                        519 puts:
      0001B0 F6               [ 1]  520     ld a,(x)
      0001B1 27 06            [ 1]  521 	jreq 1$
      0001B3 CD 01 9E         [ 4]  522 	call putc 
      0001B6 5C               [ 1]  523 	incw x 
      0001B7 20 F7            [ 2]  524 	jra puts 
      0001B9 81               [ 4]  525 1$:	ret 
                                    526 
                                    527 
                                    528 ;---------------------------
                                    529 ; delete character at left 
                                    530 ; of cursor on terminal 
                                    531 ; input:
                                    532 ;   none 
                                    533 ; output:
                                    534 ;	none 
                                    535 ;---------------------------
      0001BA                        536 bksp:
      0001BA A6 08            [ 1]  537 	ld a,#BSP 
      0001BC CD 01 9E         [ 4]  538 	call putc 
      0001BF A6 20            [ 1]  539 	ld a,#SPACE 
      0001C1 CD 01 9E         [ 4]  540 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001C4 A6 08            [ 1]  541 	ld a,#BSP 
      0001C6 CD 01 9E         [ 4]  542 	call putc 
      0001C9 81               [ 4]  543 	ret 
                                    544 ;---------------------------
                                    545 ; delete n character left of cursor 
                                    546 ; at terminal.
                                    547 ; input: 
                                    548 ;   A   	number of characters to delete.
                                    549 ; output:
                                    550 ;    none 
                                    551 ;--------------------------	
      0001CA                        552 delete:
      0001CA 88               [ 1]  553 	push a 
      0001CB 0D 01            [ 1]  554 0$:	tnz (1,sp)
      0001CD 27 07            [ 1]  555 	jreq 1$
      0001CF CD 01 BA         [ 4]  556 	call bksp 
      0001D2 0A 01            [ 1]  557 	dec (1,sp)
      0001D4 20 F5            [ 2]  558 	jra 0$
      0001D6 84               [ 1]  559 1$:	pop a 
      0001D7 81               [ 4]  560 	ret
                                    561 
                                    562 ;--------------------------
                                    563 ; print n spaces on terminal
                                    564 ; input:
                                    565 ;  X 		number of spaces 
                                    566 ; output:
                                    567 ;	none 
                                    568 ;---------------------------
      0001D8                        569 spaces:
      0001D8 A6 20            [ 1]  570 	ld a,#SPACE 
      0001DA 5D               [ 2]  571 1$:	tnzw x
      0001DB 27 06            [ 1]  572 	jreq 9$
      0001DD CD 01 9E         [ 4]  573 	call putc 
      0001E0 5A               [ 2]  574 	decw x
      0001E1 20 F7            [ 2]  575 	jra 1$
      0001E3                        576 9$: 
      0001E3 81               [ 4]  577 	ret 
                                    578 
                           000001   579 .if DEBUG 
                                    580 ;---------------------------------
                                    581 ;; print actual registers states 
                                    582 ;; as pushed on stack 
                                    583 ;; {Y,X,CC,A}
                                    584 ;---------------------------------
      0001E4                        585 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001E4                        586 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001E4                        587 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001E4                        588 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001E4                        589 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001E4                        590 prt_regs:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4 AE 02 27         [ 2]  591 	ldw x,#regs_state 
      0001E7 CD 01 B0         [ 4]  592 	call puts
                                    593 ; register PC
      0001EA 16 01            [ 2]  594 	ldw y,(1,sp)
      0001EC AE 09 44         [ 2]  595 	ldw x,#REG_EPC 
      0001EF CD 08 95         [ 4]  596 	call prt_reg16 
                                    597 ; register CC 
      0001F2 7B 08            [ 1]  598 	ld a,(R_CC,sp)
      0001F4 AE 09 55         [ 2]  599 	ldw x,#REG_CC 
      0001F7 CD 08 70         [ 4]  600 	call prt_reg8 
                                    601 ; register A 
      0001FA 7B 07            [ 1]  602 	ld a,(R_A,sp)
      0001FC AE 09 51         [ 2]  603 	ldw x,#REG_A 
      0001FF CD 08 70         [ 4]  604 	call prt_reg8 
                                    605 ; register X 
      000202 16 05            [ 2]  606 	ldw y,(R_X,sp)
      000204 AE 09 4D         [ 2]  607 	ldw x,#REG_X 
      000207 CD 08 95         [ 4]  608 	call prt_reg16 
                                    609 ; register Y 
      00020A 16 03            [ 2]  610 	ldw y,(R_Y,sp)
      00020C AE 09 49         [ 2]  611 	ldw x,#REG_Y 
      00020F CD 08 95         [ 4]  612 	call prt_reg16 
                                    613 ; register SP 
      000212 90 96            [ 1]  614 	ldw y,sp
      000214 72 A9 00 08      [ 2]  615 	addw y,#6+ARG_OFS  
      000218 AE 09 5A         [ 2]  616 	ldw x,#REG_SP
      00021B CD 08 95         [ 4]  617 	call prt_reg16
      00021E A6 0D            [ 1]  618 	ld a,#CR 
      000220 CD 01 9E         [ 4]  619 	call putc
      000223 CD 01 9E         [ 4]  620 	call putc   
      000226 81               [ 4]  621 	ret 
                                    622 
      000227 0A 72 65 67 69 73 74   623 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    624 
                                    625 
                                    626 ;--------------------
                                    627 ; print content at address in hex.
                                    628 ; input:
                                    629 ;   X 	address to peek 
                                    630 ; output:
                                    631 ;	none 
                                    632 ;--------------------	
      00024E                        633 prt_peek:
      00024E 89               [ 2]  634 	pushw x 
      00024F CF 00 09         [ 2]  635 	ldw acc16,x 
      000252 72 5F 00 08      [ 1]  636 	clr acc24 
      000256 5F               [ 1]  637 	clrw x 
      000257 A6 10            [ 1]  638 	ld a,#16 
      000259 CD 09 5F         [ 4]  639 	call prti24 
      00025C A6 3A            [ 1]  640 	ld a,#': 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025E CD 01 9E         [ 4]  641 	call putc 
      000261 A6 20            [ 1]  642 	ld a,#SPACE 
      000263 CD 01 9E         [ 4]  643 	call putc 
      000266 85               [ 2]  644 	popw x 
      000267 F6               [ 1]  645 	ld a,(x)
      000268 C7 00 0A         [ 1]  646 	ld acc8,a 
      00026B 5F               [ 1]  647 	clrw x 
      00026C A6 10            [ 1]  648 	ld a,#16 
      00026E CD 09 5F         [ 4]  649 	call prti24
      000271 81               [ 4]  650 	ret 
                                    651 .endif ; DEBUG  
                                    652 
                                    653 ;-------------------------------------
                                    654 ; retrun string length
                                    655 ; input:
                                    656 ;   X         .asciz  
                                    657 ; output:
                                    658 ;   X         length 
                                    659 ;-------------------------------------
      000272                        660 strlen:
      000272 90 93            [ 1]  661 	ldw y,x 
      000274 5F               [ 1]  662 	clrw x 
      000275 90 7D            [ 1]  663 1$:	tnz (y) 
      000277 27 05            [ 1]  664 	jreq 9$ 
      000279 5C               [ 1]  665 	incw x
      00027A 90 5C            [ 1]  666 	incw y 
      00027C 20 F7            [ 2]  667 	jra 1$ 
      00027E 81               [ 4]  668 9$: ret 
                                    669 
                                    670 ;------------------------------------
                                    671 ; compare 2 strings
                                    672 ; input:
                                    673 ;   X 		char* first string 
                                    674 ;   Y       char* second string 
                                    675 ; output:
                                    676 ;   A 		0|1 
                                    677 ;-------------------------------------
      00027F                        678 strcmp:
      00027F F6               [ 1]  679 	ld a,(x)
      000280 27 0B            [ 1]  680 	jreq 5$ 
      000282 90 F1            [ 1]  681 	cp a,(y) 
      000284 26 05            [ 1]  682 	jrne 4$ 
      000286 5C               [ 1]  683 	incw x 
      000287 90 5C            [ 1]  684 	incw y 
      000289 20 F4            [ 2]  685 	jra strcmp 
      00028B                        686 4$: ; not same  
      00028B 4F               [ 1]  687 	clr a 
      00028C 81               [ 4]  688 	ret 
      00028D                        689 5$: ; same 
      00028D A6 01            [ 1]  690 	ld a,#1 
      00028F 81               [ 4]  691 	ret 
                                    692 
                                    693 
                                    694 ;---------------------------------------
                                    695 ;  copy src to dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    696 ; input:
                                    697 ;   X 		dest 
                                    698 ;   Y 		src 
                                    699 ; output: 
                                    700 ;   X 		dest 
                                    701 ;----------------------------------
      000290                        702 strcpy:
      000290 89               [ 2]  703 	pushw x 
      000291 90 F6            [ 1]  704 1$: ld a,(y)
      000293 27 06            [ 1]  705 	jreq 9$ 
      000295 F7               [ 1]  706 	ld (x),a 
      000296 5C               [ 1]  707 	incw x 
      000297 90 5C            [ 1]  708 	incw y 
      000299 20 F6            [ 2]  709 	jra 1$ 
      00029B 7F               [ 1]  710 9$:	clr (x)
      00029C 85               [ 2]  711 	popw x 
      00029D 81               [ 4]  712 	ret 
                                    713 
                                    714 ;---------------------------------------
                                    715 ; move memory block 
                                    716 ; input:
                                    717 ;   X 		destination 
                                    718 ;   Y 	    source 
                                    719 ;   acc16	size 
                                    720 ; output:
                                    721 ;   none 
                                    722 ;--------------------------------------
                           000001   723 	INCR=1 ; increament high byte 
                           000002   724 	LB=2 ; increament low byte 
                           000002   725 	VSIZE=2
      00029E                        726 move:
      00029E                        727 	_vars VSIZE 
      00029E 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A0 0F 01            [ 1]  728 	clr (INCR,sp)
      0002A2 0F 02            [ 1]  729 	clr (LB,sp)
      0002A4 90 89            [ 2]  730 	pushw y 
      0002A6 13 01            [ 2]  731 	cpw x,(1,sp) ; compare DEST to SRC 
      0002A8 90 85            [ 2]  732 	popw y 
      0002AA 27 31            [ 1]  733 	jreq move_exit ; x==y 
      0002AC 2B 0E            [ 1]  734 	jrmi move_down
      0002AE                        735 move_up: ; start from top address with incr=-1
      0002AE 72 BB 00 09      [ 2]  736 	addw x,acc16
      0002B2 72 B9 00 09      [ 2]  737 	addw y,acc16
      0002B6 03 01            [ 1]  738 	cpl (INCR,sp)
      0002B8 03 02            [ 1]  739 	cpl (LB,sp)   ; increment = -1 
      0002BA 20 05            [ 2]  740 	jra move_loop  
      0002BC                        741 move_down: ; start from bottom address with incr=1 
      0002BC 5A               [ 2]  742     decw x 
      0002BD 90 5A            [ 2]  743 	decw y
      0002BF 0C 02            [ 1]  744 	inc (LB,sp) ; incr=1 
      0002C1                        745 move_loop:	
      0002C1 C6 00 09         [ 1]  746     ld a, acc16 
      0002C4 CA 00 0A         [ 1]  747 	or a, acc8
      0002C7 27 14            [ 1]  748 	jreq move_exit 
      0002C9 72 FB 01         [ 2]  749 	addw x,(INCR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002CC 72 F9 01         [ 2]  750 	addw y,(INCR,sp) 
      0002CF 90 F6            [ 1]  751 	ld a,(y)
      0002D1 F7               [ 1]  752 	ld (x),a 
      0002D2 89               [ 2]  753 	pushw x 
      0002D3 CE 00 09         [ 2]  754 	ldw x,acc16 
      0002D6 5A               [ 2]  755 	decw x 
      0002D7 CF 00 09         [ 2]  756 	ldw acc16,x 
      0002DA 85               [ 2]  757 	popw x 
      0002DB 20 E4            [ 2]  758 	jra move_loop
      0002DD                        759 move_exit:
      0002DD                        760 	_drop VSIZE
      0002DD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002DF 81               [ 4]  761 	ret 	
                                    762 
                                    763 ;-------------------------------------
                                    764 ; search text area for a line with 
                                    765 ; same number as lineno  
                                    766 ; input:
                                    767 ;	X 			lineno 
                                    768 ; output:
                                    769 ;   X 			addr of line | 0 
                                    770 ;   Y           lineno|insert address if not found  
                                    771 ;-------------------------------------
                           000001   772 	LL=1 ; line length 
                           000002   773 	LB=2 ; line length low byte 
                           000002   774 	VSIZE=2 
      0002E0                        775 search_lineno:
      0002E0                        776 	_vars VSIZE
      0002E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E2 CF 00 09         [ 2]  777 	ldw acc16,x 
      0002E5 0F 01            [ 1]  778 	clr (LL,sp)
      0002E7 90 CE 00 1B      [ 2]  779 	ldw y,txtbgn
      0002EB                        780 search_ln_loop:
      0002EB 90 C3 00 1D      [ 2]  781 	cpw y,txtend 
      0002EF 2A 13            [ 1]  782 	jrpl 8$
      0002F1 93               [ 1]  783 	ldw x,y 
      0002F2 FE               [ 2]  784 	ldw x,(x) ; x=line number 
      0002F3 C3 00 09         [ 2]  785 	cpw x,acc16 
      0002F6 27 0F            [ 1]  786 	jreq 9$ 
      0002F8 2A 0A            [ 1]  787 	jrpl 8$ ; from here all lines are > lineno 
      0002FA 90 E6 02         [ 1]  788 	ld a,(2,y)
      0002FD 6B 02            [ 1]  789 	ld (LB,sp),a 
      0002FF 72 F9 01         [ 2]  790 	addw y,(LL,sp)
      000302 20 E7            [ 2]  791 	jra search_ln_loop 
      000304 51               [ 1]  792 8$: exgw x,y 
      000305 90 5F            [ 1]  793 	clrw y 	
      000307                        794 9$: _drop VSIZE
      000307 5B 02            [ 2]    1     addw sp,#VSIZE 
      000309 51               [ 1]  795 	exgw x,y   
      00030A 81               [ 4]  796 	ret 
                                    797 
                                    798 ;-------------------------------------
                                    799 ; delete line at addr
                                    800 ; input:
                                    801 ;   X 		addr of line i.e DEST for move 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    802 ;-------------------------------------
                           000001   803 	LLEN=1
                           000003   804 	SRC=3
                           000004   805 	VSIZE=4
      00030B                        806 del_line: 
      00030B                        807 	_vars VSIZE 
      00030B 52 04            [ 2]    1     sub sp,#VSIZE 
      00030D E6 02            [ 1]  808 	ld a,(2,x) ; line length
      00030F 6B 02            [ 1]  809 	ld (LLEN+1,sp),a 
      000311 0F 01            [ 1]  810 	clr (LLEN,sp)
      000313 90 93            [ 1]  811 	ldw y,x  
      000315 72 F9 01         [ 2]  812 	addw y,(LLEN,sp) ;SRC  
      000318 17 03            [ 2]  813 	ldw (SRC,sp),y  ;save source 
      00031A 90 CE 00 14      [ 2]  814 	ldw y,ptr16
      00031E 90 E6 02         [ 1]  815 	ld a,(2,y)
      000321 90 5F            [ 1]  816 	clrw y 
      000323 90 97            [ 1]  817 	ld yl,a  
      000325 72 B9 00 1D      [ 2]  818 	addw y,txtend
      000329 72 F2 03         [ 2]  819 	subw y,(SRC,sp) ; y=count 
      00032C 90 CF 00 09      [ 2]  820 	ldw acc16,y 
      000330 16 03            [ 2]  821 	ldw y,(SRC,sp)    ; source
      000332 CD 02 9E         [ 4]  822 	call move
      000335 90 CE 00 1D      [ 2]  823 	ldw y,txtend 
      000339 72 F2 01         [ 2]  824 	subw y,(LLEN,sp)
      00033C 90 CF 00 1D      [ 2]  825 	ldw txtend,y  
      000340                        826 	_drop VSIZE     
      000340 5B 04            [ 2]    1     addw sp,#VSIZE 
      000342 81               [ 4]  827 	ret 
                                    828 
                                    829 ;---------------------------------------------
                                    830 ; create a gap in text area 
                                    831 ; input:
                                    832 ;    X 			addr gap start 
                                    833 ;    Y 			gap length 
                                    834 ; output:
                                    835 ;    X 			addr gap start 
                                    836 ;--------------------------------------------
                           000001   837 	DEST=1
                           000003   838 	SRC=3
                           000005   839 	LEN=5
                           000006   840 	VSIZE=6 
      000343                        841 create_gap:
      000343                        842 	_vars VSIZE
      000343 52 06            [ 2]    1     sub sp,#VSIZE 
      000345 C3 00 1D         [ 2]  843 	cpw x,txtend 
      000348 2A 27            [ 1]  844 	jrpl 9$ ; no need for a gap since at end of text.
      00034A 1F 03            [ 2]  845 	ldw (SRC,sp),x 
      00034C 17 05            [ 2]  846 	ldw (LEN,sp),y 
      00034E 90 CF 00 09      [ 2]  847 	ldw acc16,y 
      000352 90 93            [ 1]  848 	ldw y,x ; SRC
      000354 72 BB 00 09      [ 2]  849 	addw x,acc16  
      000358 1F 01            [ 2]  850 	ldw (DEST,sp),x 
                                    851 ;compute size to move 	
      00035A CE 00 1D         [ 2]  852 	ldw x,txtend 
      00035D 72 F0 03         [ 2]  853 	subw x,(SRC,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000360 CF 00 09         [ 2]  854 	ldw acc16,x
      000363 1E 01            [ 2]  855 	ldw x,(DEST,sp) 
      000365 CD 02 9E         [ 4]  856 	call move
      000368 CE 00 1D         [ 2]  857 	ldw x,txtend
      00036B 72 FB 05         [ 2]  858 	addw x,(LEN,sp)
      00036E CF 00 1D         [ 2]  859 	ldw txtend,x
      000371                        860 9$:	_drop VSIZE 
      000371 5B 06            [ 2]    1     addw sp,#VSIZE 
      000373 81               [ 4]  861 	ret 
                                    862 
                                    863 
                                    864 ;--------------------------------------------
                                    865 ; insert line in tib into text area 
                                    866 ; first search for already existing 
                                    867 ; replace existing 
                                    868 ; if strlen(tib)==0 delete existing 
                                    869 ; input:
                                    870 ;   ptr16 				pointer to tokenized line  
                                    871 ; output:
                                    872 ;   none
                                    873 ;---------------------------------------------
                           000001   874 	DEST=1  ; text area insertion address 
                           000003   875 	SRC=3   ; str to insert address 
                           000005   876 	LINENO=5 ; line number 
                           000007   877 	LLEN=7 ; line length 
                           000008   878 	VSIZE=8  
      000374                        879 insert_line:
      000374                        880 	_vars VSIZE 
      000374 52 08            [ 2]    1     sub sp,#VSIZE 
      000376 CE 00 14         [ 2]  881 	ldw x,ptr16  
      000379 C3 00 1B         [ 2]  882 	cpw x,txtbgn 
      00037C 26 0D            [ 1]  883 	jrne 0$
      00037E AE 00 02         [ 2]  884 	ldw x,#2 
      000381 72 D6 00 14      [ 4]  885 	ld a,([ptr16],x)
      000385 5F               [ 1]  886 	clrw x 
      000386 97               [ 1]  887 	ld xl,a
      000387 1F 07            [ 2]  888 	ldw (LLEN,sp),x  
      000389 20 3E            [ 2]  889 	jra 4$
      00038B 72 CE 00 14      [ 5]  890 0$:	ldw x,[ptr16]
      00038F 1F 05            [ 2]  891 	ldw (LINENO,sp),x 
      000391 AE 00 02         [ 2]  892 	ldw x,#2 
      000394 72 D6 00 14      [ 4]  893 	ld a,([ptr16],x); line length 
      000398 97               [ 1]  894 	ld xl,a
      000399 1F 07            [ 2]  895 	ldw (LLEN,sp),x
      00039B 1E 05            [ 2]  896 	ldw x,(LINENO,sp)
      00039D CD 02 E0         [ 4]  897 	call search_lineno 
      0003A0 5D               [ 2]  898 	tnzw x 
      0003A1 26 04            [ 1]  899 	jrne 2$
                                    900 ; line doesn't exit 	
      0003A3 17 01            [ 2]  901 	ldw (DEST,sp),y 
      0003A5 20 05            [ 2]  902 	jra 3$
                                    903 ; line exit delete it.	
      0003A7 1F 01            [ 2]  904 2$: ldw (DEST,sp),x 
      0003A9 CD 03 0B         [ 4]  905 	call del_line
                                    906 ; leave or insert new line if LLEN>0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003AC                        907 3$: 
      0003AC 0D 08            [ 1]  908 	tnz (LLEN+1,sp)
      0003AE 27 3F            [ 1]  909 	jreq insert_ln_exit ; empty line forget it.
      0003B0 1E 01            [ 2]  910 	ldw x,(DEST,sp)
      0003B2 C3 00 1D         [ 2]  911 	cpw x,txtend 
      0003B5 2A 12            [ 1]  912 	jrpl 4$ 
                                    913 ; must create a gap 
      0003B7 CE 00 1D         [ 2]  914 	ldw x,txtend 
      0003BA 72 FB 07         [ 2]  915 	addw x,(LLEN,sp)
      0003BD CF 00 1D         [ 2]  916 	ldw txtend,x 
      0003C0 1E 01            [ 2]  917 	ldw x,(DEST,sp)
      0003C2 16 07            [ 2]  918 	ldw y,(LLEN,sp)
      0003C4 CD 03 43         [ 4]  919 	call create_gap 
      0003C7 20 0B            [ 2]  920 	jra 5$ 
      0003C9                        921 4$: ; leave line at end. 
      0003C9 1E 07            [ 2]  922 	ldw x,(LLEN,sp) 
      0003CB 72 BB 00 1D      [ 2]  923 	addw x,txtend 
      0003CF CF 00 1D         [ 2]  924 	ldw txtend,x 
      0003D2 20 1B            [ 2]  925 	jra insert_ln_exit 
      0003D4                        926 5$:	
      0003D4 1E 07            [ 2]  927 	ldw x,(LLEN,sp)
      0003D6 CF 00 09         [ 2]  928 	ldw acc16,x 
      0003D9 90 CE 00 14      [ 2]  929 	ldw y,ptr16 
      0003DD 72 F9 07         [ 2]  930 	addw y,(LLEN,sp)
      0003E0 1E 01            [ 2]  931 	ldw x,(DEST,sp) ; dest address 
      0003E2 CD 02 9E         [ 4]  932 	call move 
      0003E5 CE 00 1D         [ 2]  933 	ldw x,txtend 
      0003E8 72 F0 07         [ 2]  934 	subw x,(LLEN,sp)
      0003EB CF 00 1D         [ 2]  935 	ldw txtend,x
      0003EE 7F               [ 1]  936 	clr (x) 
      0003EF                        937 insert_ln_exit:	
      0003EF                        938 	_drop VSIZE
      0003EF 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003F1 81               [ 4]  939 	ret
                                    940 
                                    941 
                                    942 ;-----------------------------
                                    943 ; check if text buffer full
                                    944 ; input:
                                    945 ;   ptr16     addr start tokenize line 
                                    946 ;   X         buffer index 
                                    947 ; output:
                                    948 ;   none 
                                    949 ;-----------------------------------
      0003F2                        950 check_full:
      0003F2 72 BB 00 14      [ 2]  951 	addw x,ptr16 
      0003F6 A3 16 C8         [ 2]  952 	cpw x,#tib 
      0003F9 25 05            [ 1]  953 	jrult 1$
      0003FB A6 01            [ 1]  954 	ld a,#ERR_MEM_FULL
      0003FD CC 07 24         [ 2]  955 	jp tb_error 
      000400 81               [ 4]  956 1$: ret 
                                    957 
                                    958 
                                    959 ;-----------------------------------
                                    960 ; create token list form text line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    961 ; save this list in text area
                                    962 ; input:
                                    963 ;   none
                                    964 ; output:
                                    965 ;   basicptr     token list buffer
                                    966 ;   lineno 		 BASIC line number 
                                    967 ;   in.w  		 cleared 
                                    968 ;-----------------------------------
                                    969 	.macro _incr_ptr16 n 
                                    970 	ldw x,#n 
                                    971 	addw x,ptr16 
                                    972 	ldw ptr16,x 
                                    973 	.endm 
                                    974 
                           000001   975 	XSAVE=1
                           000003   976 	BUFIDX=3
                           000004   977 	VSIZE=4
      000401                        978 compile:
      000401                        979 	_vars VSIZE 
      000401 52 04            [ 2]    1     sub sp,#VSIZE 
      000403 72 1A 00 24      [ 1]  980 	bset flags,#FCOMP 
      000407 CE 00 1D         [ 2]  981 	ldw x,txtend
      00040A CF 00 14         [ 2]  982 	ldw ptr16,x 
      00040D 5F               [ 1]  983 	clrw x 
      00040E AE 00 03         [ 2]  984 	ldw x,#3
      000411 1F 03            [ 2]  985 	ldw (BUFIDX,sp),X  
      000413 CD 03 F2         [ 4]  986 	call check_full
      000416 5F               [ 1]  987 	clrw x 
      000417 72 CF 00 14      [ 5]  988 	ldw [ptr16],x 
      00041B CD 0D 34         [ 4]  989 	call get_token
      00041E 1F 01            [ 2]  990 	ldw (XSAVE,sp),x 
      000420 A1 03            [ 1]  991 	cp a,#TK_INTGR 
      000422 26 11            [ 1]  992 	jrne 3$
      000424 A3 00 00         [ 2]  993 	cpw x,#0  
      000427 22 03            [ 1]  994 	jrugt 1$
      000429 CC 07 22         [ 2]  995 	jp syntax_error 
      00042C 72 CF 00 14      [ 5]  996 1$:	ldw [ptr16],x; line number
      000430 CD 0D 34         [ 4]  997 2$:	call get_token
      000433 1F 01            [ 2]  998 	ldw (XSAVE,sp),x 
      000435 A1 00            [ 1]  999 3$:	cp a,#TK_NONE 
      000437 26 03            [ 1] 1000 	jrne 30$
      000439 CC 04 CC         [ 2] 1001 	jp 9$
      00043C                       1002 30$: 	 
      00043C 1E 03            [ 2] 1003 	ldw x,(BUFIDX,sp)
      00043E CD 03 F2         [ 4] 1004 	call check_full 
      000441 16 03            [ 2] 1005 	ldw y,(BUFIDX,sp) 
      000443 91 D7 14         [ 4] 1006 	ld ([ptr16],y),a 
      000446 90 5C            [ 1] 1007 	incw y
      000448 17 03            [ 2] 1008 	ldw (BUFIDX,sp),y
      00044A A1 01            [ 1] 1009 	cp a,#TK_COLON 
      00044C 26 02            [ 1] 1010 	jrne 31$
      00044E 20 E0            [ 2] 1011 	jra 2$ 
      000450                       1012 31$:
      000450 A1 02            [ 1] 1013 	cp a,#TK_CHAR
      000452 26 0C            [ 1] 1014 	jrne 32$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000454 1E 01            [ 2] 1015 	ldw x,(XSAVE,sp)
      000456 9F               [ 1] 1016 	ld a,xl 
      000457 91 D7 14         [ 4] 1017 	ld ([ptr16],y),a
      00045A 90 5C            [ 1] 1018 	incw y 
      00045C 17 03            [ 2] 1019 	ldw (BUFIDX,sp),y 
      00045E 20 D0            [ 2] 1020 	jra 2$ 
      000460                       1021 32$:
      000460 A1 08            [ 1] 1022 	cp a,#TK_QSTR 
      000462 26 25            [ 1] 1023 	jrne 4$
      000464 AE 17 18         [ 2] 1024 	ldw x,#pad 
      000467 CD 02 72         [ 4] 1025 	call strlen
      00046A 5C               [ 1] 1026 	incw x  
      00046B CD 03 F2         [ 4] 1027 	call check_full 
      00046E 90 AE 17 18      [ 2] 1028 	ldw y,#pad 
      000472 CE 00 14         [ 2] 1029 	ldw x,ptr16
      000475 72 FB 03         [ 2] 1030 	addw x,(BUFIDX,sp)	
      000478 CD 02 90         [ 4] 1031 	call strcpy 
      00047B AE 17 18         [ 2] 1032 	ldw x,#pad 
      00047E CD 02 72         [ 4] 1033 	call strlen 
      000481 5C               [ 1] 1034 	incw x
      000482 72 FB 03         [ 2] 1035 	addw x,(BUFIDX,sp) 
      000485 1F 03            [ 2] 1036 	ldw (BUFIDX,sp),x
      000487 20 A7            [ 2] 1037 	jra 2$  
      000489 A1 03            [ 1] 1038 4$: cp a,#TK_INTGR
      00048B 25 A3            [ 1] 1039 	jrult 2$
      00048D A1 07            [ 1] 1040 	cp a,#TK_FUNC 
      00048F 22 9F            [ 1] 1041 	Jrugt 2$
      000491 1E 01            [ 2] 1042 	ldw x,(XSAVE,sp) 
      000493 16 03            [ 2] 1043 	ldw y,(BUFIDX,sp)
      000495 91 DF 14         [ 5] 1044 	ldw ([ptr16],y),x
      000498 A3 17 05         [ 2] 1045 	cpw x,#rem 
      00049B 26 26            [ 1] 1046 	jrne 5$
      00049D 72 A9 00 02      [ 2] 1047 	addw y,#2 
      0004A1 90 89            [ 2] 1048 	pushw y 
      0004A3 CE 00 14         [ 2] 1049 	ldw x,ptr16 
      0004A6 72 FB 01         [ 2] 1050 	addw x,(1,sp)
      0004A9                       1051 	_drop 2  
      0004A9 5B 02            [ 2]    1     addw sp,#2 
      0004AB 90 CE 00 00      [ 2] 1052 	ldw y,in.w 
      0004AF 72 A9 16 C8      [ 2] 1053 	addw y,#tib 
      0004B3 CD 02 90         [ 4] 1054 	call strcpy 	
      0004B6 CD 02 72         [ 4] 1055 	call strlen 
      0004B9 1C 00 03         [ 2] 1056 	addw x,#3 ; rem exec address+string 0. 
      0004BC 72 FB 03         [ 2] 1057 	addw x,(BUFIDX,sp)
      0004BF 1F 03            [ 2] 1058 	ldw (BUFIDX,sp),x 
      0004C1 20 09            [ 2] 1059 	jra 9$
      0004C3 72 A9 00 02      [ 2] 1060 5$:	addw y,#2 
      0004C7 17 03            [ 2] 1061 	ldw (BUFIDX,sp),y 
      0004C9 CC 04 30         [ 2] 1062 	jp 2$
      0004CC                       1063 9$: 
      0004CC AE 00 02         [ 2] 1064 	ldw x,#2
      0004CF 16 03            [ 2] 1065 	ldw y,(BUFIDX,sp)
      0004D1 90 9F            [ 1] 1066 	ld a,yl 
      0004D3 72 D7 00 14      [ 4] 1067 	ld ([ptr16],x),a  	
      0004D7 72 CE 00 14      [ 5] 1068 	ldw x,[ptr16]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004DB 27 09            [ 1] 1069 	jreq 10$
      0004DD CD 03 74         [ 4] 1070 	call insert_line
      0004E0 72 5F 00 02      [ 1] 1071 	clr  count 
      0004E4 20 13            [ 2] 1072 	jra  11$ 
      0004E6                       1073 10$: 
      0004E6 CE 00 14         [ 2] 1074 	ldw x,ptr16 
      0004E9 CF 00 03         [ 2] 1075 	ldw basicptr,x 
      0004EC E6 02            [ 1] 1076 	ld a,(2,x)
      0004EE C7 00 02         [ 1] 1077 	ld count,a 
      0004F1 FE               [ 2] 1078 	ldw x,(x)
      0004F2 CF 00 05         [ 2] 1079 	ldw lineno,x 
      0004F5 35 03 00 01      [ 1] 1080 	mov in,#3 
      0004F9                       1081 11$:
      0004F9                       1082 	_drop VSIZE 
      0004F9 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004FB 72 1B 00 24      [ 1] 1083 	bres flags,#FCOMP 
      0004FF 81               [ 4] 1084 	ret 
                                   1085 
                                   1086 
                                   1087 ;------------------------------------
                                   1088 ;  set all variables to zero 
                                   1089 ; input:
                                   1090 ;   none 
                                   1091 ; output:
                                   1092 ;	none
                                   1093 ;------------------------------------
      000500                       1094 clear_vars:
      000500 AE 00 26         [ 2] 1095 	ldw x,#vars 
      000503 90 AE 00 34      [ 2] 1096 	ldw y,#2*26 
      000507 7F               [ 1] 1097 1$:	clr (x)
      000508 5C               [ 1] 1098 	incw x 
      000509 90 5A            [ 2] 1099 	decw y 
      00050B 26 FA            [ 1] 1100 	jrne 1$
      00050D 81               [ 4] 1101 	ret 
                                   1102 
                                   1103 ;-------------------------------------
                                   1104 ; check if A is a letter
                                   1105 ; input:
                                   1106 ;   A 			character to test 
                                   1107 ; output:
                                   1108 ;   C flag      1 true, 0 false 
                                   1109 ;-------------------------------------
      00050E                       1110 is_alpha:
      00050E A1 41            [ 1] 1111 	cp a,#'A 
      000510 8C               [ 1] 1112 	ccf
      000511 24 0B            [ 1] 1113 	jrnc 9$ 
      000513 A1 5B            [ 1] 1114 	cp a,#'Z+1 
      000515 25 07            [ 1] 1115 	jrc 9$ 
      000517 A1 61            [ 1] 1116 	cp a,#'a 
      000519 8C               [ 1] 1117 	ccf 
      00051A 24 02            [ 1] 1118 	jrnc 9$
      00051C A1 7B            [ 1] 1119 	cp a,#'z+1   
      00051E 81               [ 4] 1120 9$: ret 	
                                   1121 
                                   1122 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1123 ;  program initialization entry point 
                                   1124 ;-------------------------------------
                           000001  1125 	MAJOR=1
                           000000  1126 	MINOR=0
      00051F 0A 0A 54 69 6E 79 20  1127 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      000565                       1128 cold_start:
                                   1129 ;set stack 
      000565 AE 17 FF         [ 2] 1130 	ldw x,#STACK_EMPTY
      000568 94               [ 1] 1131 	ldw sp,x   
                                   1132 ; clear all ram 
      000569 7F               [ 1] 1133 0$: clr (x)
      00056A 5A               [ 2] 1134 	decw x 
      00056B 26 FC            [ 1] 1135 	jrne 0$
                                   1136 ; activate pull up on all inputs 
      00056D A6 FF            [ 1] 1137 	ld a,#255 
      00056F C7 50 03         [ 1] 1138 	ld PA_CR1,a 
      000572 C7 50 08         [ 1] 1139 	ld PB_CR1,a 
      000575 C7 50 0D         [ 1] 1140 	ld PC_CR1,a 
      000578 C7 50 12         [ 1] 1141 	ld PD_CR1,a 
      00057B C7 50 17         [ 1] 1142 	ld PE_CR1,a 
      00057E C7 50 1C         [ 1] 1143 	ld PF_CR1,a 
      000581 C7 50 21         [ 1] 1144 	ld PG_CR1,a 
      000584 C7 50 2B         [ 1] 1145 	ld PI_CR1,a 
                                   1146 ; select internal clock no divisor: 16 Mhz 	
      000587 A6 E1            [ 1] 1147 	ld a,#CLK_SWR_HSI 
      000589 5F               [ 1] 1148 	clrw x  
      00058A CD 00 99         [ 4] 1149     call clock_init 
      00058D CD 00 AF         [ 4] 1150 	call timer4_init
                                   1151 ; UART3 at 115200 BAUD
      000590 CD 01 74         [ 4] 1152 	call uart3_init
                                   1153 ; activate PE_4 (user button interrupt)
      000593 72 18 50 18      [ 1] 1154     bset PE_CR2,#USR_BTN_BIT 
                                   1155 ; display system information
      000597 AE 05 1F         [ 2] 1156 	ldw x,#software 
      00059A CD 01 B0         [ 4] 1157 	call puts 
      00059D A6 01            [ 1] 1158 	ld a,#MAJOR 
      00059F C7 00 0A         [ 1] 1159 	ld acc8,a 
      0005A2 5F               [ 1] 1160 	clrw x 
      0005A3 CF 00 08         [ 2] 1161 	ldw acc24,x 
      0005A6 A6 0A            [ 1] 1162 	ld a,#10 
      0005A8 CD 09 5F         [ 4] 1163 	call prti24 
      0005AB A6 2E            [ 1] 1164 	ld a,#'.
      0005AD CD 01 9E         [ 4] 1165 	call putc 
      0005B0 A6 00            [ 1] 1166 	ld a,#MINOR 
      0005B2 C7 00 0A         [ 1] 1167 	ld acc8,a 
      0005B5 5F               [ 1] 1168 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0005B6 CF 00 08         [ 2] 1169 	ldw acc24,x 
      0005B9 A6 0A            [ 1] 1170 	ld a,#10 
      0005BB CD 09 5F         [ 4] 1171 	call prti24 
      0005BE A6 0D            [ 1] 1172 	ld a,#CR 
      0005C0 CD 01 9E         [ 4] 1173 	call putc 
      0005C3 CD 1A 7A         [ 4] 1174 	call seek_fdrive 
                                   1175 ; configure LED2 pin 
      0005C6 72 1A 50 0D      [ 1] 1176     bset PC_CR1,#LED2_BIT
      0005CA 72 1A 50 0E      [ 1] 1177     bset PC_CR2,#LED2_BIT
      0005CE 72 1A 50 0C      [ 1] 1178     bset PC_DDR,#LED2_BIT
      0005D2 9A               [ 1] 1179 	rim 
      0005D3 AE 16 C8         [ 2] 1180 	ldw x,#tib
      0005D6 CF 00 20         [ 2] 1181 	ldw array_addr,x 
      0005D9 72 5C 00 10      [ 1] 1182 	inc seedy+1 
      0005DD 72 5C 00 0E      [ 1] 1183 	inc seedx+1 
      0005E1 CD 05 F0         [ 4] 1184 	call clear_basic
      0005E4 CD 13 AE         [ 4] 1185 	call ubound 
      0005E7 CD 0F D2         [ 4] 1186 	call dpop 
      0005EA CF 00 22         [ 2] 1187 	ldw array_size,x 
      0005ED CC 07 74         [ 2] 1188     jp warm_start 
                                   1189 
                                   1190 ;---------------------------
                                   1191 ; reset BASIC text variables 
                                   1192 ; and clear variables 
                                   1193 ;---------------------------
      0005F0                       1194 clear_basic:
      0005F0 5F               [ 1] 1195 	clrw x 
      0005F1 CF 00 05         [ 2] 1196 	ldw lineno,x
      0005F4 72 5F 00 02      [ 1] 1197 	clr count 
      0005F8 AE 00 5A         [ 2] 1198 	ldw x,#free_ram 
      0005FB CF 00 1B         [ 2] 1199 	ldw txtbgn,x 
      0005FE CF 00 1D         [ 2] 1200 	ldw txtend,x 
      000601 CD 05 00         [ 4] 1201 	call clear_vars 
      000604 81               [ 4] 1202 	ret 
                                   1203 
                                   1204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1205 ;;   Tiny BASIC error messages     ;;
                                   1206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000605                       1207 err_msg:
      000605 00 00 06 1D 06 2B 06  1208 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             3A 06 54 06 64
      000611 06 7B 06 92 06 AD 06  1209 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             BF 06 D1
      00061B 06 DE                 1210 	.word err_no_access 
                                   1211 
      00061D 0A 4D 65 6D 6F 72 79  1212 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      00062B 0A 73 79 6E 74 61 78  1213 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      00063A 0A 6D 61 74 68 20 6F  1214 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      000654 0A 64 69 76 69 73 69  1215 err_div0: .asciz "\ndivision by 0\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



             6F 6E 20 62 79 20 30
             0A 00
      000664 0A 69 6E 76 61 6C 69  1216 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      00067B 0A 72 75 6E 20 74 69  1217 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000692 0A 63 6F 6D 6D 61 6E  1218 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      0006AD 0A 64 75 70 6C 69 63  1219 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      0006BF 0A 46 69 6C 65 20 6E  1220 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006D1 0A 62 61 64 20 76 61  1221 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006DE 0A 46 69 6C 65 20 69  1222 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1223 
      000712 6C 61 73 74 20 74 6F  1224 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1225 
      000722                       1226 syntax_error:
      000722 A6 02            [ 1] 1227 	ld a,#ERR_SYNTAX 
                                   1228 
      000724                       1229 tb_error:
      000724 AE 06 05         [ 2] 1230 	ldw x, #err_msg 
      000727 72 5F 00 09      [ 1] 1231 	clr acc16 
      00072B 48               [ 1] 1232 	sll a
      00072C 72 59 00 09      [ 1] 1233 	rlc acc16  
      000730 C7 00 0A         [ 1] 1234 	ld acc8, a 
      000733 72 BB 00 09      [ 2] 1235 	addw x,acc16 
      000737 FE               [ 2] 1236 	ldw x,(x)
      000738 CD 01 B0         [ 4] 1237 	call puts
      00073B 72 0B 00 24 18   [ 2] 1238 	btjf flags,#FCOMP, 1$
      000740 AE 16 C8         [ 2] 1239 	ldw x,#tib
      000743 CD 01 B0         [ 4] 1240 	call puts 
      000746 A6 0D            [ 1] 1241 	ld a,#CR 
      000748 CD 01 9E         [ 4] 1242 	call putc
      00074B AE 00 11         [ 2] 1243 	ldw x,#in.w.saved
      00074E CD 01 D8         [ 4] 1244 	call spaces
      000751 A6 5E            [ 1] 1245 	ld a,#'^
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000753 CD 01 9E         [ 4] 1246 	call putc 
      000756 20 18            [ 2] 1247 	jra 6$
      000758 CE 00 03         [ 2] 1248 1$:	ldw x,basicptr
      00075B CD 14 7B         [ 4] 1249 	call prt_basic_line
      00075E AE 07 12         [ 2] 1250 	ldw x,#rt_msg 
      000761 CD 01 B0         [ 4] 1251 	call puts 
      000764 CE 00 11         [ 2] 1252 	ldw x,in.w.saved 
      000767 72 D6 00 03      [ 4] 1253 	ld a,([basicptr],x)
      00076B 5F               [ 1] 1254 	clrw x 
      00076C 97               [ 1] 1255 	ld xl,a 
      00076D CD 09 A7         [ 4] 1256 	call print_int 
      000770 AE 17 FF         [ 2] 1257 6$: ldw x,#STACK_EMPTY 
      000773 94               [ 1] 1258     ldw sp,x
      000774                       1259 warm_start:
      000774 72 5F 00 24      [ 1] 1260 	clr flags 
      000778 72 5F 00 1F      [ 1] 1261 	clr loop_depth 
      00077C AE 17 80         [ 2] 1262 	ldw x,#dstack_unf 
      00077F CF 00 19         [ 2] 1263 	ldw dstkptr,x 
      000782 35 04 00 25      [ 1] 1264 	mov tab_width,#TAB_WIDTH 
      000786 35 0A 00 07      [ 1] 1265 	mov base,#10 
      00078A 5F               [ 1] 1266 	clrw x 
      00078B CF 00 05         [ 2] 1267 	ldw lineno,x 
      00078E AE 16 C8         [ 2] 1268 	ldw x,#tib 
      000791 CF 00 03         [ 2] 1269 	ldw basicptr,x 
                                   1270 ;----------------------------
                                   1271 ;   BASIC interpreter
                                   1272 ;----------------------------
      000794                       1273 interp:
      000794 72 5F 00 00      [ 1] 1274 	clr in.w
      000798 72 01 00 24 27   [ 2] 1275 	btjf flags,#FRUN,4$ 
                                   1276 ; running program
                                   1277 ; goto next basic line 
      00079D CE 00 03         [ 2] 1278 	ldw x,basicptr
      0007A0 E6 02            [ 1] 1279 	ld a,(2,x) ; line length 
      0007A2 C7 00 0A         [ 1] 1280 	ld acc8,a 
      0007A5 72 5F 00 09      [ 1] 1281 	clr acc16 
      0007A9 72 BB 00 09      [ 2] 1282 	addw x,acc16
      0007AD C3 00 1D         [ 2] 1283 	cpw x,txtend 
      0007B0 2A C2            [ 1] 1284 	jrpl warm_start
      0007B2 CF 00 03         [ 2] 1285 	ldw basicptr,x ; start of next line  
      0007B5 E6 02            [ 1] 1286 	ld a,(2,x)
      0007B7 C7 00 02         [ 1] 1287 	ld count,a 
      0007BA FE               [ 2] 1288 	ldw x,(x) ; line no 
      0007BB CF 00 05         [ 2] 1289 	ldw lineno,x 
      0007BE 35 03 00 01      [ 1] 1290 	mov in,#3 ; skip first 3 bytes of line 
      0007C2 20 14            [ 2] 1291 	jra interp_loop 
      0007C4                       1292 4$: ; commande line mode 	
      0007C4 72 5F 00 01      [ 1] 1293 	clr in
      0007C8 A6 0D            [ 1] 1294 	ld a,#CR 
      0007CA CD 01 9E         [ 4] 1295 	call putc 
      0007CD A6 3E            [ 1] 1296 	ld a,#'> 
      0007CF CD 01 9E         [ 4] 1297 	call putc 
      0007D2 CD 0A 95         [ 4] 1298 	call readln
      0007D5 CD 04 01         [ 4] 1299 	call compile
      0007D8                       1300 interp_loop:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0007D8 C6 00 01         [ 1] 1301 	ld a,in 
      0007DB C1 00 02         [ 1] 1302 	cp a,count  
      0007DE 2A B4            [ 1] 1303 	jrpl interp
      0007E0 CD 08 08         [ 4] 1304 	call next_token
      0007E3 A1 01            [ 1] 1305 	cp a,#TK_COLON 
      0007E5 27 F1            [ 1] 1306 	jreq interp_loop 
      0007E7 A1 00            [ 1] 1307 	cp a,#TK_NONE 
                                   1308 ;	jreq interp 
      0007E9                       1309 1$:
      0007E9 A1 04            [ 1] 1310 	cp a,#TK_VAR
      0007EB 26 05            [ 1] 1311 	jrne 2$
      0007ED CD 13 C6         [ 4] 1312 	call let02  
      0007F0 20 E6            [ 2] 1313 	jra interp_loop 
      0007F2                       1314 2$:	
      0007F2 A1 05            [ 1] 1315 	cp a,#TK_ARRAY 
      0007F4 26 08            [ 1] 1316 	jrne 3$
      0007F6 CD 12 19         [ 4] 1317 	call get_array_element
      0007F9 CD 13 C6         [ 4] 1318 	call let02 
      0007FC 20 DA            [ 2] 1319 	jra interp_loop 
      0007FE                       1320 3$:
      0007FE A1 06            [ 1] 1321 	cp a,#TK_CMD
      000800 26 03            [ 1] 1322 	jrne 4$
      000802 FD               [ 4] 1323 	call (x) 
      000803 20 D3            [ 2] 1324 	jra interp_loop 
      000805                       1325 4$:	
      000805 CC 07 22         [ 2] 1326 	jp syntax_error 
                                   1327 
                                   1328 ;--------------------------
                                   1329 ; extract next token from
                                   1330 ; token list 
                                   1331 ; basicptr -> base address 
                                   1332 ; in  -> offset in list array 
                                   1333 ; output:
                                   1334 ;   A 		token attribute
                                   1335 ;   X 		token value if there is one
                                   1336 ;----------------------------------------
      000808                       1337 next_token:
      000808 4B 00            [ 1] 1338 	push #0
      00080A C6 00 01         [ 1] 1339 	ld a,in 
      00080D C1 00 02         [ 1] 1340 	cp a,count 
      000810 84               [ 1] 1341 	pop a 
      000811 2A 3E            [ 1] 1342 	jrpl 9$ 
      000813 CE 00 00         [ 2] 1343 	ldw x,in.w 
      000816 CF 00 11         [ 2] 1344 	ldw in.w.saved,x 
      000819 CE 00 03         [ 2] 1345 	ldw x,basicptr 
      00081C 72 D6 00 00      [ 4] 1346 	ld a,([in.w],x)
      000820 72 5C 00 01      [ 1] 1347 	inc in 
      000824 A1 02            [ 1] 1348 	cp a,#CMD_END 
      000826 25 29            [ 1] 1349 	jrult 9$
      000828 A1 02            [ 1] 1350 	cp a,#TK_CHAR
      00082A 26 0D            [ 1] 1351 	jrne 1$
      00082C 72 D6 00 00      [ 4] 1352 	ld a,([in.w],x)
      000830 72 5C 00 01      [ 1] 1353 	inc in
      000834 5F               [ 1] 1354 	clrw x 
      000835 97               [ 1] 1355 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000836 A6 02            [ 1] 1356 	ld a,#TK_CHAR
      000838 81               [ 4] 1357 	ret 
      000839 A1 08            [ 1] 1358 1$:	cp a,#TK_QSTR 
      00083B 22 14            [ 1] 1359 	jrugt 9$
      00083D 25 06            [ 1] 1360 	jrult 2$
      00083F 72 BB 00 00      [ 2] 1361 	addw x,in.w 
      000843 20 0C            [ 2] 1362 	jra 9$
      000845 72 DE 00 00      [ 5] 1363 2$: ldw x,([in.w],x)
      000849 72 5C 00 01      [ 1] 1364 	inc in 
      00084D 72 5C 00 01      [ 1] 1365 	inc in
      000851 81               [ 4] 1366 9$: ret	
                                   1367 
                                   1368 
                                   1369 ;----------------------------------------
                                   1370 ;   DEBUG support functions
                                   1371 ;----------------------------------------
                           000001  1372 .if DEBUG 
                                   1373 ; turn LED on 
      000852                       1374 ledon:
      000852 72 1A 50 0A      [ 1] 1375     bset PC_ODR,#LED2_BIT
      000856 81               [ 4] 1376     ret 
                                   1377 
                                   1378 ; turn LED off 
      000857                       1379 ledoff:
      000857 72 1B 50 0A      [ 1] 1380     bres PC_ODR,#LED2_BIT 
      00085B 81               [ 4] 1381     ret 
                                   1382 
                                   1383 ; invert LED status 
      00085C                       1384 ledtoggle:
      00085C A6 20            [ 1] 1385     ld a,#LED2_MASK
      00085E C8 50 0A         [ 1] 1386     xor a,PC_ODR
      000861 C7 50 0A         [ 1] 1387     ld PC_ODR,a
      000864 81               [ 4] 1388     ret 
                                   1389 
      000865                       1390 left_paren:
      000865 A6 20            [ 1] 1391 	ld a,#SPACE 
      000867 CD 01 9E         [ 4] 1392 	call putc
      00086A A6 28            [ 1] 1393 	ld a,#'( 
      00086C CD 01 9E         [ 4] 1394 	call putc 	
      00086F 81               [ 4] 1395 	ret 
                                   1396 
                                   1397 ;------------------------------
                                   1398 ; print 8 bit register 
                                   1399 ; input:
                                   1400 ;   X  point to register name 
                                   1401 ;   A  register value to print 
                                   1402 ; output:
                                   1403 ;   none
                                   1404 ;------------------------------- 
      000870                       1405 prt_reg8:
      000870 88               [ 1] 1406 	push a 
      000871 CD 01 B0         [ 4] 1407 	call puts 
      000874 7B 01            [ 1] 1408 	ld a,(1,sp) 
      000876 C7 00 0A         [ 1] 1409 	ld acc8,a 
      000879 5F               [ 1] 1410 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00087A 97               [ 1] 1411 	ld xl,a 
      00087B 35 10 00 07      [ 1] 1412 	mov base,#16
      00087F CD 09 A7         [ 4] 1413 	call print_int 
      000882 CD 08 65         [ 4] 1414 	call left_paren 
      000885 84               [ 1] 1415 	pop a 
      000886 5F               [ 1] 1416 	clrw x 
      000887 97               [ 1] 1417 	ld xl,a 
      000888 35 0A 00 07      [ 1] 1418 	mov base,#10 
      00088C CD 09 A7         [ 4] 1419 	call print_int  
      00088F A6 29            [ 1] 1420 	ld a,#') 
      000891 CD 01 9E         [ 4] 1421 	call putc
      000894 81               [ 4] 1422 	ret
                                   1423 
                                   1424 ;--------------------------------
                                   1425 ; print 16 bits register 
                                   1426 ; input:
                                   1427 ;   X   point register name 
                                   1428 ;   Y   register value to print 
                                   1429 ; output:
                                   1430 ;  none
                                   1431 ;--------------------------------
      000895                       1432 prt_reg16: 
      000895 90 89            [ 2] 1433 	pushw y 
      000897 CD 01 B0         [ 4] 1434 	call puts 
      00089A 1E 01            [ 2] 1435 	ldw x,(1,sp) 
      00089C 35 10 00 07      [ 1] 1436 	mov base,#16 
      0008A0 CD 09 A7         [ 4] 1437 	call print_int  
      0008A3 CD 08 65         [ 4] 1438 	call left_paren 
      0008A6 85               [ 2] 1439 	popw x 
      0008A7 35 0A 00 07      [ 1] 1440 	mov base,#10 
      0008AB CD 09 A7         [ 4] 1441 	call print_int  
      0008AE A6 29            [ 1] 1442 	ld a,#') 
      0008B0 CD 01 9E         [ 4] 1443 	call putc
      0008B3 81               [ 4] 1444 	ret 
                                   1445 
                                   1446 ;------------------------------------
                                   1447 ; print registers contents saved on
                                   1448 ; stack by trap interrupt.
                                   1449 ;------------------------------------
      0008B4                       1450 print_registers:
      0008B4 AE 09 07         [ 2] 1451 	ldw x,#STATES
      0008B7 CD 01 B0         [ 4] 1452 	call puts
                                   1453 ; print EPC 
      0008BA AE 09 44         [ 2] 1454 	ldw x, #REG_EPC
      0008BD CD 01 B0         [ 4] 1455 	call puts 
      0008C0 7B 0B            [ 1] 1456 	ld a, (11,sp)
      0008C2 C7 00 0A         [ 1] 1457 	ld acc8,a 
      0008C5 7B 0A            [ 1] 1458 	ld a, (10,sp) 
      0008C7 C7 00 09         [ 1] 1459 	ld acc16,a 
      0008CA 7B 09            [ 1] 1460 	ld a,(9,sp) 
      0008CC C7 00 08         [ 1] 1461 	ld acc24,a
      0008CF 5F               [ 1] 1462 	clrw x  
      0008D0 A6 10            [ 1] 1463 	ld a,#16
      0008D2 CD 09 5F         [ 4] 1464 	call prti24  
                                   1465 ; print X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0008D5 AE 09 4D         [ 2] 1466 	ldw x,#REG_X
      0008D8 16 05            [ 2] 1467 	ldw y,(5,sp)
      0008DA CD 08 95         [ 4] 1468 	call prt_reg16  
                                   1469 ; print Y 
      0008DD AE 09 49         [ 2] 1470 	ldw x,#REG_Y
      0008E0 16 07            [ 2] 1471 	ldw y, (7,sp)
      0008E2 CD 08 95         [ 4] 1472 	call prt_reg16  
                                   1473 ; print A 
      0008E5 AE 09 51         [ 2] 1474 	ldw x,#REG_A
      0008E8 7B 04            [ 1] 1475 	ld a, (4,sp) 
      0008EA CD 08 70         [ 4] 1476 	call prt_reg8
                                   1477 ; print CC 
      0008ED AE 09 55         [ 2] 1478 	ldw x,#REG_CC 
      0008F0 7B 03            [ 1] 1479 	ld a, (3,sp) 
      0008F2 CD 08 70         [ 4] 1480 	call prt_reg8 
                                   1481 ; print SP 
      0008F5 AE 09 5A         [ 2] 1482 	ldw x,#REG_SP
      0008F8 90 96            [ 1] 1483 	ldw y,sp 
      0008FA 72 A9 00 0C      [ 2] 1484 	addw y,#12
      0008FE CD 08 95         [ 4] 1485 	call prt_reg16  
      000901 A6 0A            [ 1] 1486 	ld a,#'\n' 
      000903 CD 01 9E         [ 4] 1487 	call putc
      000906 81               [ 4] 1488 	ret
                                   1489 
      000907 0A 52 65 67 69 73 74  1490 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000944 45 50 43 3A 00        1491 REG_EPC: .asciz "EPC:"
      000949 0A 59 3A 00           1492 REG_Y:   .asciz "\nY:" 
      00094D 0A 58 3A 00           1493 REG_X:   .asciz "\nX:"
      000951 0A 41 3A 00           1494 REG_A:   .asciz "\nA:" 
      000955 0A 43 43 3A 00        1495 REG_CC:  .asciz "\nCC:"
      00095A 0A 53 50 3A 00        1496 REG_SP:  .asciz "\nSP:"
                                   1497 .endif ; DEBUG 
                                   1498 
                                   1499 ;------------------------------------
                                   1500 ; print integer in acc24 
                                   1501 ; input:
                                   1502 ;	acc24 		integer to print 
                                   1503 ;	A 			numerical base for conversion 
                                   1504 ;               if bit 7 is set add a space at print end.
                                   1505 ;   XL 			field width, 0 -> no fill.
                                   1506 ;  output:
                                   1507 ;    none 
                                   1508 ;------------------------------------
                           000001  1509 	WIDTH = 1
                           000002  1510 	BASE = 2
                           000003  1511 	ADD_SPACE=3 ; add a space after number 
                           000003  1512 	VSIZE = 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00095F                       1513 prti24:
      00095F                       1514 	_vars VSIZE 
      00095F 52 03            [ 2]    1     sub sp,#VSIZE 
      000961 0F 03            [ 1] 1515 	clr (ADD_SPACE,sp)
      000963 A5 80            [ 1] 1516 	bcp a,#0x80 
      000965 27 02            [ 1] 1517 	jreq 0$ 
      000967 03 03            [ 1] 1518 	cpl (ADD_SPACE,sp)
      000969 A4 1F            [ 1] 1519 0$:	and a,#31 
      00096B 6B 02            [ 1] 1520 	ld (BASE,sp),a
      00096D 9F               [ 1] 1521 	ld a,xl
      00096E 6B 01            [ 1] 1522 	ld (WIDTH,sp),a 
      000970 7B 02            [ 1] 1523 	ld a, (BASE,sp)  
      000972 CD 0A 03         [ 4] 1524     call itoa  ; conversion entier en  .asciz
      000975 7B 01            [ 1] 1525 1$: ld a,(WIDTH,sp)
      000977 27 1F            [ 1] 1526 	jreq 4$
      000979 C7 00 0A         [ 1] 1527 	ld acc8,a 
      00097C 89               [ 2] 1528 	pushw x 
      00097D CD 02 72         [ 4] 1529 	call strlen 
      000980 9F               [ 1] 1530 	ld a,xl 
      000981 85               [ 2] 1531 	popw x 
      000982 31 00 0A         [ 3] 1532 	exg a,acc8 
      000985 C0 00 0A         [ 1] 1533 	sub a,acc8 
      000988 2B 0E            [ 1] 1534 	jrmi 4$
      00098A 6B 01            [ 1] 1535 	ld (WIDTH,sp),a 
      00098C A6 20            [ 1] 1536 	ld  a,#SPACE
      00098E 0D 01            [ 1] 1537 3$: tnz (WIDTH,sp)
      000990 27 06            [ 1] 1538 	jreq 4$
      000992 5A               [ 2] 1539 	decw x 
      000993 F7               [ 1] 1540 	ld (x),a 
      000994 0A 01            [ 1] 1541 	dec (WIDTH,sp) 
      000996 20 F6            [ 2] 1542 	jra 3$
      000998                       1543 4$: 
      000998 CD 01 B0         [ 4] 1544 	call puts 
      00099B 0D 03            [ 1] 1545 	tnz (ADD_SPACE,sp)
      00099D 27 05            [ 1] 1546 	jreq 5$
      00099F A6 20            [ 1] 1547     ld a,#SPACE 
      0009A1 CD 01 9E         [ 4] 1548 	call putc 
      0009A4                       1549 5$: _drop VSIZE 
      0009A4 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009A6 81               [ 4] 1550     ret	
                                   1551 
                                   1552 ;-----------------------------------
                                   1553 ; print a 16 bit integer 
                                   1554 ; using variable 'base' as conversion
                                   1555 ; format.
                                   1556 ; input:
                                   1557 ;   X       integer to print 
                                   1558 ;   base    conversion base 
                                   1559 ; output:
                                   1560 ;   none 
                                   1561 ;-----------------------------------
                           000001  1562 	SIGN=1
                           000001  1563 	VSIZE=1
      0009A7                       1564 print_int: 
      0009A7                       1565 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0009A7 52 01            [ 2]    1     sub sp,#VSIZE 
      0009A9 0F 01            [ 1] 1566 	clr (SIGN,sp)
      0009AB 90 AE 17 3F      [ 2] 1567 	ldw y,#pad+PAD_SIZE-1 
      0009AF 90 7F            [ 1] 1568 	clr (y)
      0009B1 C6 00 07         [ 1] 1569 	ld a,base  
      0009B4 A1 0A            [ 1] 1570 	cp a,#10 
      0009B6 26 06            [ 1] 1571 	jrne 1$ 
      0009B8 5D               [ 2] 1572 	tnzw x 
      0009B9 2A 03            [ 1] 1573 	jrpl 1$ 
      0009BB 03 01            [ 1] 1574 	cpl (SIGN,sp)
      0009BD 50               [ 2] 1575 	negw x 	 
      0009BE                       1576 1$:	
      0009BE C6 00 07         [ 1] 1577 	ld a,base 
      0009C1 62               [ 2] 1578 	div x,a 
      0009C2 AB 30            [ 1] 1579 	add a,#'0 
      0009C4 A1 3A            [ 1] 1580 	cp a,#'9+1 
      0009C6 2B 02            [ 1] 1581 	jrmi 2$ 
      0009C8 AB 07            [ 1] 1582 	add a,#7 
      0009CA 90 5A            [ 2] 1583 2$: decw y 
      0009CC 90 F7            [ 1] 1584 	ld (y),a 
      0009CE 5D               [ 2] 1585 	tnzw x 
      0009CF 26 ED            [ 1] 1586 	jrne 1$ 
      0009D1 A6 10            [ 1] 1587 	ld a,#16 
      0009D3 C1 00 07         [ 1] 1588 	cp a,base 
      0009D6 26 08            [ 1] 1589 	jrne 3$
      0009D8 A6 24            [ 1] 1590 	ld a,#'$
      0009DA 90 5A            [ 2] 1591 	decw y  
      0009DC 90 F7            [ 1] 1592 	ld (y),a
      0009DE 20 0A            [ 2] 1593 	jra 9$ 
      0009E0 0D 01            [ 1] 1594 3$: tnz (SIGN,sp)
      0009E2 27 06            [ 1] 1595 	jreq 9$ 
      0009E4 A6 2D            [ 1] 1596 	ld a,#'-
      0009E6 90 5A            [ 2] 1597 	decw y  
      0009E8 90 F7            [ 1] 1598 	ld (y),a
      0009EA                       1599 9$:	
      0009EA 93               [ 1] 1600 	ldw x,y 
      0009EB 1D 17 3F         [ 2] 1601 	subw x,#pad+PAD_SIZE-1 
      0009EE 50               [ 2] 1602 	negw x  
      0009EF                       1603 10$:
      0009EF 90 5A            [ 2] 1604 	decw y 
      0009F1 A6 20            [ 1] 1605 	ld a,#SPACE 
      0009F3 90 F7            [ 1] 1606 	ld (y),a
      0009F5 5C               [ 1] 1607 	incw x 
      0009F6 9F               [ 1] 1608 	ld a,xl 
      0009F7 C1 00 25         [ 1] 1609 	cp a,tab_width
      0009FA 2B F3            [ 1] 1610 	jrmi 10$ 
      0009FC                       1611 12$:
      0009FC 93               [ 1] 1612     ldw x,y 
      0009FD CD 01 B0         [ 4] 1613 	call puts  
      000A00                       1614 	_drop VSIZE 
      000A00 5B 01            [ 2]    1     addw sp,#VSIZE 
      000A02 81               [ 4] 1615 	ret 
                                   1616 
                                   1617 ;------------------------------------
                                   1618 ; convert integer in acc24 to string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1619 ; input:
                                   1620 ;   A	  	base
                                   1621 ;	acc24	integer to convert
                                   1622 ; output:
                                   1623 ;   X  		pointer to string
                                   1624 ;------------------------------------
                           000001  1625 	SIGN=1  ; integer sign 
                           000002  1626 	BASE=2  ; numeric base 
                           000002  1627 	VSIZE=2  ;locals size
      000A03                       1628 itoa:
      000A03 52 02            [ 2] 1629 	sub sp,#VSIZE
      000A05 6B 02            [ 1] 1630 	ld (BASE,sp), a  ; base
      000A07 0F 01            [ 1] 1631 	clr (SIGN,sp)    ; sign
      000A09 A1 0A            [ 1] 1632 	cp a,#10
      000A0B 26 0A            [ 1] 1633 	jrne 1$
                                   1634 	; base 10 string display with negative sign if bit 23==1
      000A0D 72 0F 00 08 05   [ 2] 1635 	btjf acc24,#7,1$
      000A12 03 01            [ 1] 1636 	cpl (SIGN,sp)
      000A14 CD 0A 72         [ 4] 1637 	call neg_acc24
      000A17                       1638 1$:
                                   1639 ; initialize string pointer 
      000A17 AE 17 3F         [ 2] 1640 	ldw x,#pad+PAD_SIZE-1
      000A1A 7F               [ 1] 1641 	clr (x)
      000A1B                       1642 itoa_loop:
      000A1B 7B 02            [ 1] 1643     ld a,(BASE,sp)
      000A1D CD 0A 4A         [ 4] 1644     call divu24_8 ; acc24/A 
      000A20 AB 30            [ 1] 1645     add a,#'0  ; remainder of division
      000A22 A1 3A            [ 1] 1646     cp a,#'9+1
      000A24 2B 02            [ 1] 1647     jrmi 2$
      000A26 AB 07            [ 1] 1648     add a,#7 
      000A28 5A               [ 2] 1649 2$: decw x
      000A29 F7               [ 1] 1650     ld (x),a
                                   1651 	; if acc24==0 conversion done
      000A2A C6 00 08         [ 1] 1652 	ld a,acc24
      000A2D CA 00 09         [ 1] 1653 	or a,acc16
      000A30 CA 00 0A         [ 1] 1654 	or a,acc8
      000A33 26 E6            [ 1] 1655     jrne itoa_loop
                                   1656 	;conversion done, next add '$' or '-' as required
      000A35 7B 02            [ 1] 1657 	ld a,(BASE,sp)
      000A37 A1 10            [ 1] 1658 	cp a,#16
      000A39 27 08            [ 1] 1659 	jreq 8$
      000A3B 7B 01            [ 1] 1660 	ld a,(SIGN,sp)
      000A3D 27 08            [ 1] 1661     jreq 10$
      000A3F A6 2D            [ 1] 1662     ld a,#'-
      000A41 20 02            [ 2] 1663 	jra 9$ 
      000A43 A6 24            [ 1] 1664 8$: ld a,#'$ 
      000A45 5A               [ 2] 1665 9$: decw x
      000A46 F7               [ 1] 1666     ld (x),a
      000A47                       1667 10$:
      000A47 5B 02            [ 2] 1668 	addw sp,#VSIZE
      000A49 81               [ 4] 1669 	ret
                                   1670 
                                   1671 ;-------------------------------------
                                   1672 ; divide uint24_t by uint8_t
                                   1673 ; used to convert uint24_t to string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1674 ; input:
                                   1675 ;	acc24	dividend
                                   1676 ;   A 		divisor
                                   1677 ; output:
                                   1678 ;   acc24	quotient
                                   1679 ;   A		remainder
                                   1680 ;------------------------------------- 
                                   1681 ; offset  on sp of arguments and locals
                           000001  1682 	U8   = 1   ; divisor on stack
                           000001  1683 	VSIZE =1
      000A4A                       1684 divu24_8:
      000A4A 89               [ 2] 1685 	pushw x ; save x
      000A4B 88               [ 1] 1686 	push a 
                                   1687 	; ld dividend UU:MM bytes in X
      000A4C C6 00 08         [ 1] 1688 	ld a, acc24
      000A4F 95               [ 1] 1689 	ld xh,a
      000A50 C6 00 09         [ 1] 1690 	ld a,acc24+1
      000A53 97               [ 1] 1691 	ld xl,a
      000A54 7B 01            [ 1] 1692 	ld a,(U8,SP) ; divisor
      000A56 62               [ 2] 1693 	div x,a ; UU:MM/U8
      000A57 88               [ 1] 1694 	push a  ;save remainder
      000A58 9E               [ 1] 1695 	ld a,xh
      000A59 C7 00 08         [ 1] 1696 	ld acc24,a
      000A5C 9F               [ 1] 1697 	ld a,xl
      000A5D C7 00 09         [ 1] 1698 	ld acc24+1,a
      000A60 84               [ 1] 1699 	pop a
      000A61 95               [ 1] 1700 	ld xh,a
      000A62 C6 00 0A         [ 1] 1701 	ld a,acc24+2
      000A65 97               [ 1] 1702 	ld xl,a
      000A66 7B 01            [ 1] 1703 	ld a,(U8,sp) ; divisor
      000A68 62               [ 2] 1704 	div x,a  ; R:LL/U8
      000A69 6B 01            [ 1] 1705 	ld (U8,sp),a ; save remainder
      000A6B 9F               [ 1] 1706 	ld a,xl
      000A6C C7 00 0A         [ 1] 1707 	ld acc24+2,a
      000A6F 84               [ 1] 1708 	pop a
      000A70 85               [ 2] 1709 	popw x
      000A71 81               [ 4] 1710 	ret
                                   1711 
                                   1712 ;------------------------------------
                                   1713 ;  two's complement acc24
                                   1714 ;  input:
                                   1715 ;		acc24 variable
                                   1716 ;  output:
                                   1717 ;		acc24 variable
                                   1718 ;-------------------------------------
      000A72                       1719 neg_acc24:
      000A72 72 53 00 0A      [ 1] 1720 	cpl acc24+2
      000A76 72 53 00 09      [ 1] 1721 	cpl acc24+1
      000A7A 72 53 00 08      [ 1] 1722 	cpl acc24
      000A7E A6 01            [ 1] 1723 	ld a,#1
      000A80 CB 00 0A         [ 1] 1724 	add a,acc24+2
      000A83 C7 00 0A         [ 1] 1725 	ld acc24+2,a
      000A86 4F               [ 1] 1726 	clr a
      000A87 C9 00 09         [ 1] 1727 	adc a,acc24+1
      000A8A C7 00 09         [ 1] 1728 	ld acc24+1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A8D 4F               [ 1] 1729 	clr a 
      000A8E C9 00 08         [ 1] 1730 	adc a,acc24 
      000A91 C7 00 08         [ 1] 1731 	ld acc24,a 
      000A94 81               [ 4] 1732 	ret
                                   1733 
                                   1734 
                                   1735 ;------------------------------------
                                   1736 ; read a line of text from terminal
                                   1737 ; input:
                                   1738 ;	none
                                   1739 ; local variable on stack:
                                   1740 ;	LL  line length
                                   1741 ;   RXCHAR last received chaaracte 
                                   1742 ; output:
                                   1743 ;   text in tib  buffer
                                   1744 ;------------------------------------
                                   1745 	; local variables
                           000001  1746 	LL_HB=1
                           000001  1747 	RXCHAR = 1 ; last char received
                           000002  1748 	LL = 2  ; accepted line length
                           000002  1749 	VSIZE=2 
      000A95                       1750 readln:
      000A95 5F               [ 1] 1751 	clrw x 
      000A96 89               [ 2] 1752 	pushw x 
      000A97 90 AE 16 C8      [ 2] 1753  	ldw y,#tib ; input buffer
      000A9B                       1754 readln_loop:
      000A9B CD 01 A7         [ 4] 1755 	call getc
      000A9E 6B 01            [ 1] 1756 	ld (RXCHAR,sp),a
      000AA0 A1 0D            [ 1] 1757 	cp a,#CR
      000AA2 26 03            [ 1] 1758 	jrne 1$
      000AA4 CC 0B 14         [ 2] 1759 	jp readln_quit
      000AA7 A1 0A            [ 1] 1760 1$:	cp a,#NL
      000AA9 27 69            [ 1] 1761 	jreq readln_quit
      000AAB A1 08            [ 1] 1762 	cp a,#BSP
      000AAD 27 41            [ 1] 1763 	jreq del_back
      000AAF A1 04            [ 1] 1764 	cp a,#CTRL_D
      000AB1 27 2E            [ 1] 1765 	jreq del_ln
      000AB3 A1 12            [ 1] 1766 	cp a,#CTRL_R 
      000AB5 27 06            [ 1] 1767 	jreq reprint 
                                   1768 ;	cp a,#'[
                                   1769 ;	jreq ansi_seq
      000AB7                       1770 final_test:
      000AB7 A1 20            [ 1] 1771 	cp a,#SPACE
      000AB9 2A 44            [ 1] 1772 	jrpl accept_char
      000ABB 20 DE            [ 2] 1773 	jra readln_loop
      000ABD                       1774 ansi_seq:
                                   1775 ;	call getc
                                   1776 ;	cp a,#'C 
                                   1777 ;	jreq rigth_arrow
                                   1778 ;	cp a,#'D 
                                   1779 ;	jreq left_arrow 
                                   1780 ;	jra final_test
      000ABD                       1781 right_arrow:
                                   1782 ;	ld a,#BSP 
                                   1783 ;	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1784 ;	jra realn_loop 
      000ABD                       1785 left_arrow:
                                   1786 
                                   1787 ;	jra readln_loop
      000ABD                       1788 reprint: 
      000ABD 72 5D 00 02      [ 1] 1789 	tnz count 
      000AC1 27 D8            [ 1] 1790 	jreq readln_loop
      000AC3 0D 02            [ 1] 1791 	tnz (LL,sp)
      000AC5 26 D4            [ 1] 1792 	jrne readln_loop
      000AC7 AE 16 C8         [ 2] 1793 	ldw x,#tib 
      000ACA CD 01 B0         [ 4] 1794 	call puts
      000ACD 90 AE 16 C8      [ 2] 1795 	ldw y,#tib 
      000AD1 C6 00 02         [ 1] 1796 	ld a,count 
      000AD4 6B 02            [ 1] 1797 	ld (LL,sp),a
      000AD6 72 5F 00 02      [ 1] 1798 	clr count 
      000ADA 0F 01            [ 1] 1799 	clr (LL_HB,sp)
      000ADC 72 F9 01         [ 2] 1800 	addw y,(LL_HB,sp)
      000ADF 20 BA            [ 2] 1801 	jra readln_loop 
      000AE1                       1802 del_ln:
      000AE1 7B 02            [ 1] 1803 	ld a,(LL,sp)
      000AE3 CD 01 CA         [ 4] 1804 	call delete
      000AE6 90 AE 16 C8      [ 2] 1805 	ldw y,#tib
      000AEA 90 7F            [ 1] 1806 	clr (y)
      000AEC 0F 02            [ 1] 1807 	clr (LL,sp)
      000AEE 20 AB            [ 2] 1808 	jra readln_loop
      000AF0                       1809 del_back:
      000AF0 0D 02            [ 1] 1810     tnz (LL,sp)
      000AF2 27 A7            [ 1] 1811     jreq readln_loop
      000AF4 0A 02            [ 1] 1812     dec (LL,sp)
      000AF6 90 5A            [ 2] 1813     decw y
      000AF8 90 7F            [ 1] 1814     clr  (y)
      000AFA CD 01 BA         [ 4] 1815     call bksp 
      000AFD 20 9C            [ 2] 1816     jra readln_loop	
      000AFF                       1817 accept_char:
      000AFF A6 4F            [ 1] 1818 	ld a,#TIB_SIZE-1
      000B01 11 02            [ 1] 1819 	cp a, (LL,sp)
      000B03 27 96            [ 1] 1820 	jreq readln_loop
      000B05 7B 01            [ 1] 1821 	ld a,(RXCHAR,sp)
      000B07 90 F7            [ 1] 1822 	ld (y),a
      000B09 0C 02            [ 1] 1823 	inc (LL,sp)
      000B0B 90 5C            [ 1] 1824 	incw y
      000B0D 90 7F            [ 1] 1825 	clr (y)
      000B0F CD 01 9E         [ 4] 1826 	call putc 
      000B12 20 87            [ 2] 1827 	jra readln_loop
      000B14                       1828 readln_quit:
      000B14 90 7F            [ 1] 1829 	clr (y)
      000B16 7B 02            [ 1] 1830 	ld a,(LL,sp)
      000B18 C7 00 02         [ 1] 1831 	ld count,a 
      000B1B                       1832 	_drop VSIZE 
      000B1B 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B1D A6 0D            [ 1] 1833 	ld a,#CR
      000B1F CD 01 9E         [ 4] 1834 	call putc
      000B22 81               [ 4] 1835 	ret
                                   1836 
                           000001  1837 .if DEBUG 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1838 ;----------------------------
                                   1839 ; command interface
                                   1840 ; only 3 commands:
                                   1841 ;  'q' to resume application
                                   1842 ;  'p [addr]' to print memory values 
                                   1843 ;  's addr' to print string 
                                   1844 ;----------------------------
                                   1845 ;local variable 
                           000001  1846 	PSIZE=1
                           000001  1847 	VSIZE=1 
      000B23                       1848 cmd_itf:
      000B23 52 01            [ 2] 1849 	sub sp,#VSIZE 
      000B25 72 5F 00 13      [ 1] 1850 	clr farptr 
      000B29 72 5F 00 14      [ 1] 1851 	clr farptr+1 
      000B2D 72 5F 00 15      [ 1] 1852 	clr farptr+2  
      000B31                       1853 repl:
      000B31 A6 0D            [ 1] 1854 	ld a,#CR 
      000B33 CD 01 9E         [ 4] 1855 	call putc 
      000B36 A6 3F            [ 1] 1856 	ld a,#'? 
      000B38 CD 01 9E         [ 4] 1857 	call putc
      000B3B 72 5F 00 00      [ 1] 1858 	clr in.w 
      000B3F 72 5F 00 01      [ 1] 1859 	clr in 
      000B43 CD 0A 95         [ 4] 1860 	call readln
      000B46 90 AE 16 C8      [ 2] 1861 	ldw y,#tib  
      000B4A 90 F6            [ 1] 1862 	ld a,(y)
      000B4C 27 E3            [ 1] 1863 	jreq repl  
      000B4E 72 5C 00 01      [ 1] 1864 	inc in 
      000B52 CD 0E F3         [ 4] 1865 	call to_upper 
      000B55 A1 51            [ 1] 1866 	cp a,#'Q 
      000B57 26 17            [ 1] 1867 	jrne test_p
      000B59                       1868 repl_exit:
      000B59 72 5F 16 C8      [ 1] 1869 	clr tib 
      000B5D 72 5F 00 02      [ 1] 1870 	clr count 
      000B61 72 5F 00 01      [ 1] 1871 	clr in 
      000B65                       1872 	_drop #VSIZE 	
      000B65 5B 01            [ 2]    1     addw sp,##VSIZE 
      000B67 81               [ 4] 1873 	ret  
      000B68                       1874 invalid:
      000B68 AE 0B E6         [ 2] 1875 	ldw x,#invalid_cmd 
      000B6B CD 01 B0         [ 4] 1876 	call puts 
      000B6E 20 C1            [ 2] 1877 	jra repl 
      000B70                       1878 test_p:	
      000B70 A1 50            [ 1] 1879     cp a,#'P 
      000B72 27 11            [ 1] 1880 	jreq mem_peek
      000B74 A1 53            [ 1] 1881     cp a,#'S 
      000B76 26 F0            [ 1] 1882 	jrne invalid 
      000B78                       1883 print_string:	
      000B78 CD 0D 34         [ 4] 1884 	call get_token
      000B7B A1 03            [ 1] 1885 	cp a,#TK_INTGR 
      000B7D 26 E9            [ 1] 1886 	jrne invalid 
      000B7F CD 01 B0         [ 4] 1887 	call puts
      000B82 CC 0B 31         [ 2] 1888 	jp repl 	
      000B85                       1889 mem_peek:
      000B85 A6 20            [ 1] 1890 	ld a,#SPACE 
      000B87 CD 0F AB         [ 4] 1891 	call skip  	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B8A 72 B9 00 00      [ 2] 1892 	addw y,in.w 
      000B8E AE 17 18         [ 2] 1893 	ldw x,#pad 
      000B91 CD 02 90         [ 4] 1894 	call strcpy
      000B94 CD 0E FF         [ 4] 1895 	call atoi24 	
      000B97 C6 00 08         [ 1] 1896 	ld a, acc24 
      000B9A CA 00 09         [ 1] 1897 	or a,acc16 
      000B9D CA 00 0A         [ 1] 1898 	or a,acc8 
      000BA0 26 02            [ 1] 1899 	jrne 1$ 
      000BA2 20 0C            [ 2] 1900 	jra peek_byte  
      000BA4 CE 00 08         [ 2] 1901 1$:	ldw x,acc24 
      000BA7 CF 00 13         [ 2] 1902 	ldw farptr,x 
      000BAA C6 00 0A         [ 1] 1903 	ld a,acc8 
      000BAD C7 00 15         [ 1] 1904 	ld farptr+2,a 
      000BB0                       1905 peek_byte:
      000BB0 CD 0B F5         [ 4] 1906 	call print_farptr 
      000BB3 A6 08            [ 1] 1907 	ld a,#8 
      000BB5 6B 01            [ 1] 1908 	ld (PSIZE,sp),a 
      000BB7 5F               [ 1] 1909 	clrw x 
      000BB8 CD 0C 10         [ 4] 1910 1$:	call fetchc  
      000BBB 89               [ 2] 1911 	pushw x 
      000BBC C7 00 0A         [ 1] 1912 	ld acc8,a 
      000BBF 5F               [ 1] 1913 	clrw x 
      000BC0 CF 00 08         [ 2] 1914 	ldw acc24,x 
      000BC3 A6 90            [ 1] 1915 	ld a,#16+128
      000BC5 CD 09 5F         [ 4] 1916 	call prti24
      000BC8 85               [ 2] 1917 	popw x 
      000BC9 0A 01            [ 1] 1918 	dec (PSIZE,sp)
      000BCB 26 EB            [ 1] 1919 	jrne 1$ 
      000BCD A6 08            [ 1] 1920 	ld a,#8 
      000BCF CB 00 15         [ 1] 1921 	add a,farptr+2 
      000BD2 C7 00 15         [ 1] 1922 	ld farptr+2,a
      000BD5 4F               [ 1] 1923 	clr a 
      000BD6 C9 00 14         [ 1] 1924 	adc a,farptr+1 
      000BD9 C7 00 14         [ 1] 1925 	ld farptr+1,a 
      000BDC 4F               [ 1] 1926 	clr a 
      000BDD C9 00 13         [ 1] 1927 	adc a,farptr 
      000BE0 C7 00 13         [ 1] 1928 	ld farptr,a 
      000BE3 CC 0B 31         [ 2] 1929 	jp repl  
                                   1930 
      000BE6 6E 6F 74 20 61 20 63  1931 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1932 
                                   1933 ;----------------------------
                                   1934 ; display farptr address
                                   1935 ;----------------------------
      000BF5                       1936 print_farptr:
      000BF5 C6 00 15         [ 1] 1937 	ld a ,farptr+2 
      000BF8 C7 00 0A         [ 1] 1938 	ld acc8,a 
      000BFB CE 00 13         [ 2] 1939 	ldw x,farptr 
      000BFE CF 00 08         [ 2] 1940 	ldw acc24,x 
      000C01 5F               [ 1] 1941 	clrw x 
      000C02 A6 10            [ 1] 1942 	ld a,#16 
      000C04 CD 09 5F         [ 4] 1943 	call prti24
      000C07 A6 20            [ 1] 1944 	ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000C09 CD 01 9E         [ 4] 1945 	call putc 
      000C0C CD 01 9E         [ 4] 1946 	call putc 
      000C0F 81               [ 4] 1947 	ret
                                   1948 
                                   1949 ;------------------------------------
                                   1950 ; get byte at address farptr[X]
                                   1951 ; input:
                                   1952 ;	 farptr   address to peek
                                   1953 ;    X		  farptr index 	
                                   1954 ; output:
                                   1955 ;	 A 		  byte from memory  
                                   1956 ;    x		  incremented by 1
                                   1957 ;------------------------------------
      000C10                       1958 fetchc: ; @C
      000C10 92 AF 00 13      [ 5] 1959 	ldf a,([farptr],x)
      000C14 5C               [ 1] 1960 	incw x
      000C15 81               [ 4] 1961 	ret
                                   1962 
                                   1963 
                                   1964 ;------------------------------------
                                   1965 ; expect a number from command line 
                                   1966 ; next argument
                                   1967 ;  input:
                                   1968 ;	  none
                                   1969 ;  output:
                                   1970 ;    acc24   int24_t 
                                   1971 ;------------------------------------
      000C16                       1972 number::
      000C16 CD 0D 34         [ 4] 1973 	call get_token
      000C19 CD 0E FF         [ 4] 1974 	call atoi24
      000C1C 81               [ 4] 1975 	ret
                                   1976 .endif ; DEBUG 
                                   1977 
                                   1978 ;------------------------------------
                                   1979 ; parse quoted string 
                                   1980 ; input:
                                   1981 ;   Y 	pointer to tib 
                                   1982 ;   X   pointer to pad
                                   1983 ; output:
                                   1984 ;	pad   parsed string
                                   1985 ;   TOS  char* to pad  
                                   1986 ;------------------------------------
                           000001  1987 	PREV = 1
                           000002  1988 	CURR =2 
                           000002  1989 	VSIZE=2 
      000C1D                       1990 parse_quote: ; { -- addr }
      000C1D                       1991 	_vars VSIZE 
      000C1D 52 02            [ 2]    1     sub sp,#VSIZE 
      000C1F 4F               [ 1] 1992 	clr a
      000C20 6B 01            [ 1] 1993 1$:	ld (PREV,sp),a 
      000C22 72 5C 00 01      [ 1] 1994 2$:	inc in
      000C26 91 D6 00         [ 4] 1995 	ld a,([in.w],y)
      000C29 27 24            [ 1] 1996 	jreq 6$
      000C2B 6B 02            [ 1] 1997 	ld (CURR,sp),a 
      000C2D A6 5C            [ 1] 1998 	ld a,#'\
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000C2F 11 01            [ 1] 1999 	cp a, (PREV,sp)
      000C31 26 0A            [ 1] 2000 	jrne 3$
      000C33 0F 01            [ 1] 2001 	clr (PREV,sp)
      000C35 7B 02            [ 1] 2002 	ld a,(CURR,sp)
      000C37 AD 1F            [ 4] 2003 	callr convert_escape
      000C39 F7               [ 1] 2004 	ld (x),a 
      000C3A 5C               [ 1] 2005 	incw x 
      000C3B 20 E5            [ 2] 2006 	jra 2$
      000C3D                       2007 3$:
      000C3D 7B 02            [ 1] 2008 	ld a,(CURR,sp)
      000C3F A1 5C            [ 1] 2009 	cp a,#'\'
      000C41 27 DD            [ 1] 2010 	jreq 1$
      000C43 A1 22            [ 1] 2011 	cp a,#'"
      000C45 27 04            [ 1] 2012 	jreq 5$ 
      000C47 F7               [ 1] 2013 	ld (x),a 
      000C48 5C               [ 1] 2014 	incw x 
      000C49 20 D7            [ 2] 2015 	jra 2$
      000C4B 72 5C 00 01      [ 1] 2016 5$:	inc in 
      000C4F 7F               [ 1] 2017 6$: clr (x)
      000C50 AE 17 18         [ 2] 2018 	ldw x,#pad 
      000C53                       2019 	_drop VSIZE
      000C53 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C55 A6 08            [ 1] 2020 	ld a,#TK_QSTR  
      000C57 81               [ 4] 2021 	ret 
                                   2022 
                                   2023 ;---------------------------------------
                                   2024 ; called by parse_quote
                                   2025 ; subtitute escaped character 
                                   2026 ; by their ASCII value .
                                   2027 ; input:
                                   2028 ;   A  character following '\'
                                   2029 ; output:
                                   2030 ;   A  substitued char or same if not valid.
                                   2031 ;---------------------------------------
      000C58                       2032 convert_escape:
      000C58 A1 61            [ 1] 2033 	cp a,#'a'
      000C5A 26 03            [ 1] 2034 	jrne 1$
      000C5C A6 07            [ 1] 2035 	ld a,#7
      000C5E 81               [ 4] 2036 	ret 
      000C5F A1 62            [ 1] 2037 1$: cp a,#'b'
      000C61 26 03            [ 1] 2038 	jrne 2$
      000C63 A6 08            [ 1] 2039 	ld a,#8
      000C65 81               [ 4] 2040 	ret 
      000C66 A1 65            [ 1] 2041 2$: cp a,#'e' 
      000C68 26 03            [ 1] 2042     jrne 3$
      000C6A A6 5C            [ 1] 2043 	ld a,#'\'
      000C6C 81               [ 4] 2044 	ret  
      000C6D A1 5C            [ 1] 2045 3$: cp a,#'\'
      000C6F 26 03            [ 1] 2046 	jrne 4$
      000C71 A6 5C            [ 1] 2047 	ld a,#'\'
      000C73 81               [ 4] 2048 	ret 
      000C74 A1 66            [ 1] 2049 4$: cp a,#'f' 
      000C76 26 03            [ 1] 2050 	jrne 5$ 
      000C78 A6 0C            [ 1] 2051 	ld a,#FF 
      000C7A 81               [ 4] 2052 	ret  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C7B A1 6E            [ 1] 2053 5$: cp a,#'n' 
      000C7D 26 03            [ 1] 2054     jrne 6$ 
      000C7F A6 0A            [ 1] 2055 	ld a,#0xa 
      000C81 81               [ 4] 2056 	ret  
      000C82 A1 72            [ 1] 2057 6$: cp a,#'r' 
      000C84 26 03            [ 1] 2058 	jrne 7$
      000C86 A6 0D            [ 1] 2059 	ld a,#0xd 
      000C88 81               [ 4] 2060 	ret  
      000C89 A1 74            [ 1] 2061 7$: cp a,#'t' 
      000C8B 26 03            [ 1] 2062 	jrne 8$ 
      000C8D A6 09            [ 1] 2063 	ld a,#9 
      000C8F 81               [ 4] 2064 	ret  
      000C90 A1 76            [ 1] 2065 8$: cp a,#'v' 
      000C92 26 02            [ 1] 2066 	jrne 9$  
      000C94 A6 0B            [ 1] 2067 	ld a,#0xb 
      000C96 81               [ 4] 2068 9$:	ret 
                                   2069 
                                   2070 ;-------------------------
                                   2071 ; integer parser 
                                   2072 ; input:
                                   2073 ;   X 		point to pad 
                                   2074 ;   Y 		point to tib 
                                   2075 ;   A 	    first digit|'$' 
                                   2076 ; output:  
                                   2077 ;   pad     number string 
                                   2078 ;   X 		integer 
                                   2079 ;   A 		TK_INTGR
                                   2080 ;-------------------------
                           000001  2081 	BASE=1
                           000002  2082 	TCHAR=2 
                           000002  2083 	VSIZE=2 
      000C97                       2084 parse_integer: ; { -- n }
      000C97 4B 00            [ 1] 2085 	push #0 ; TCHAR 
      000C99 A1 24            [ 1] 2086 	cp a,#'$
      000C9B 27 04            [ 1] 2087 	jreq 1$ 
      000C9D 4B 0A            [ 1] 2088 	push #10 ; BASE=10 
      000C9F 20 02            [ 2] 2089 	jra 2$ 
      000CA1 4B 10            [ 1] 2090 1$: push #16  ; BASE=16
      000CA3 F7               [ 1] 2091 2$:	ld (x),a 
      000CA4 5C               [ 1] 2092 	incw x 
      000CA5 72 5C 00 01      [ 1] 2093 	inc in 
      000CA9 91 D6 00         [ 4] 2094 	ld a,([in.w],y)
      000CAC CD 0E F3         [ 4] 2095 	call to_upper 
      000CAF 6B 02            [ 1] 2096 	ld (TCHAR,sp),a 
      000CB1 CD 0E EA         [ 4] 2097 	call is_digit 
      000CB4 25 ED            [ 1] 2098 	jrc 2$
      000CB6 A6 10            [ 1] 2099 	ld a,#16 
      000CB8 11 01            [ 1] 2100 	cp a,(BASE,sp)
      000CBA 26 0A            [ 1] 2101 	jrne 3$ 
      000CBC 7B 02            [ 1] 2102 	ld a,(TCHAR,sp)
      000CBE A1 41            [ 1] 2103 	cp a,#'A 
      000CC0 2B 04            [ 1] 2104 	jrmi 3$ 
      000CC2 A1 47            [ 1] 2105 	cp a,#'G 
      000CC4 2B DD            [ 1] 2106 	jrmi 2$ 
      000CC6 7F               [ 1] 2107 3$:	clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000CC7 CD 0E FF         [ 4] 2108 	call atoi24
      000CCA CE 00 09         [ 2] 2109 	ldw x,acc16 
      000CCD A6 03            [ 1] 2110 	ld a,#TK_INTGR
      000CCF                       2111 	_drop VSIZE  
      000CCF 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CD1 81               [ 4] 2112 	ret 	
                                   2113 
                                   2114 ;-------------------------
                                   2115 ; binary integer parser 
                                   2116 ; input:
                                   2117 ;   X 		point to pad 
                                   2118 ;   Y 		point to tib 
                                   2119 ;   A 	    '%' 
                                   2120 ; output:  
                                   2121 ;   pad     number string 
                                   2122 ;   X 		integer 
                                   2123 ;   A 		TK_INTGR
                                   2124 ;   TOS     integer 
                                   2125 ;-------------------------
                           000001  2126 	BINARY=1
                           000002  2127 	VSIZE=2
      000CD2                       2128 parse_binary: ; { -- n }
      000CD2 4B 00            [ 1] 2129 	push #0
      000CD4 4B 00            [ 1] 2130 	push #0
      000CD6 F7               [ 1] 2131 1$: ld (x),a 
      000CD7 5C               [ 1] 2132 	incw x 
      000CD8 72 5C 00 01      [ 1] 2133 	inc in 
      000CDC 91 D6 00         [ 4] 2134 	ld a,([in.w],y)
      000CDF A1 30            [ 1] 2135 	cp a,#'0 
      000CE1 27 06            [ 1] 2136 	jreq 2$
      000CE3 A1 31            [ 1] 2137 	cp a,#'1 
      000CE5 27 02            [ 1] 2138 	jreq 2$ 
      000CE7 20 09            [ 2] 2139 	jra bin_exit 
      000CE9 A0 30            [ 1] 2140 2$: sub a,#'0	
      000CEB 46               [ 1] 2141 	rrc a 
      000CEC 09 02            [ 1] 2142 	rlc (BINARY+1,sp)
      000CEE 09 01            [ 1] 2143 	rlc (BINARY,sp)
      000CF0 20 E4            [ 2] 2144 	jra 1$  
      000CF2                       2145 bin_exit:
      000CF2 7F               [ 1] 2146 	clr (x)
      000CF3 1E 01            [ 2] 2147 	ldw x,(BINARY,sp)
      000CF5 A6 03            [ 1] 2148 	ld a,#TK_INTGR 	
      000CF7                       2149 	_drop VSIZE 
      000CF7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CF9 81               [ 4] 2150 	ret
                                   2151 
                                   2152 ;---------------------------
                                   2153 ;  token begin with a letter,
                                   2154 ;  is keyword or variable. 	
                                   2155 ; input:
                                   2156 ;   X 		point to pad 
                                   2157 ;   Y 		point to text
                                   2158 ;   A 	    first letter  
                                   2159 ; output:
                                   2160 ;   X		exec_addr|var_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2161 ;   A 		TK_CMD 
                                   2162 ;   pad 	keyword|var_name  
                                   2163 ;   TOS     exec_addr|var_addr 
                                   2164 ;--------------------------  
      000CFA                       2165 parse_keyword: ; { -- exec_addr|var_addr}
      000CFA CD 0E F3         [ 4] 2166 	call to_upper 
      000CFD F7               [ 1] 2167 	ld (x),a 
      000CFE 5C               [ 1] 2168 	incw x 
      000CFF 72 5C 00 01      [ 1] 2169 	inc in 
      000D03 91 D6 00         [ 4] 2170 	ld a,([in.w],y)
      000D06 CD 05 0E         [ 4] 2171 	call is_alpha 
      000D09 25 EF            [ 1] 2172 	jrc parse_keyword 
      000D0B 7F               [ 1] 2173 1$: clr (x)
      000D0C 72 5D 17 19      [ 1] 2174 	tnz pad+1 
      000D10 26 15            [ 1] 2175 	jrne 2$
                                   2176 ; one letter variable name 
      000D12 C6 17 18         [ 1] 2177 	ld a,pad 
      000D15 A0 41            [ 1] 2178 	sub a,#'A 
      000D17 48               [ 1] 2179 	sll a 
      000D18 88               [ 1] 2180 	push a 
      000D19 4B 00            [ 1] 2181 	push #0
      000D1B AE 00 26         [ 2] 2182 	ldw x,#vars 
      000D1E 72 FB 01         [ 2] 2183 	addw x,(1,sp) ; X=var address 
      000D21                       2184 	_drop 2 
      000D21 5B 02            [ 2]    1     addw sp,#2 
      000D23 A6 04            [ 1] 2185 	ld a,#TK_VAR 
      000D25 20 0C            [ 2] 2186 	jra 4$ 
      000D27                       2187 2$: ; check for keyword, otherwise syntax error.
      000D27                       2188 	_ldx_dict kword_dict
      000D27 AE 21 50         [ 2]    1     ldw x,#kword_dict+2
      000D2A CD 11 90         [ 4] 2189 	call search_dict
      000D2D 4D               [ 1] 2190 	tnz a
      000D2E 26 03            [ 1] 2191 	jrne 4$ 
      000D30 CC 07 22         [ 2] 2192 	jp syntax_error
      000D33 81               [ 4] 2193 4$:	ret  	
                                   2194 
                                   2195 
                                   2196 ;------------------------------------
                                   2197 ; Command line tokenizer
                                   2198 ; scan text for next token
                                   2199 ; move token in 'pad'
                                   2200 ; input: 
      000D34                       2201 	none: 
                                   2202 ; use:
                                   2203 ;	Y   pointer to text
                                   2204 ;   X	pointer to pad 
                                   2205 ;   in.w   index in text buffer
                                   2206 ; output:
                                   2207 ;   A       token attribute 
                                   2208 ;   pad 	token as .asciz
                                   2209 ;   X 		token value   
                                   2210 ;------------------------------------
                                   2211 	; use to check special character 
                                   2212 	.macro _case c t  
                                   2213 	ld a,#c 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2214 	cp a,(TCHAR,sp) 
                                   2215 	jrne t
                                   2216 	.endm 
                                   2217 
                           000001  2218 	TCHAR=1
                           000002  2219 	ATTRIB=2 
                           000002  2220 	VSIZE=2
      000D34                       2221 get_token: 
      000D34 90 AE 16 C8      [ 2] 2222 	ldw y,#tib    	
      000D38 C6 00 01         [ 1] 2223 	ld a,in 
      000D3B C1 00 02         [ 1] 2224 	cp a,count 
      000D3E 2B 03            [ 1] 2225 	jrmi 1$
      000D40 A6 00            [ 1] 2226 	ld a,#TK_NONE 
      000D42 81               [ 4] 2227 	ret 
      000D43                       2228 1$:	
      000D43                       2229 	_vars VSIZE
      000D43 52 02            [ 2]    1     sub sp,#VSIZE 
      000D45 AE 17 18         [ 2] 2230 	ldw x, #pad
      000D48 A6 20            [ 1] 2231 	ld a,#SPACE
      000D4A CD 0F AB         [ 4] 2232 	call skip
      000D4D CF 00 11         [ 2] 2233 	ldw in.w.saved,x 
      000D50 91 D6 00         [ 4] 2234 	ld a,([in.w],y)
      000D53 26 07            [ 1] 2235 	jrne str_tst
      000D55 72 5F 17 18      [ 1] 2236 	clr pad 
      000D59 CC 0E E7         [ 2] 2237 	jp token_exit ; end of line 
                                   2238 
      000D5C                       2239 str_tst: ; check for quoted string  	
      000D5C CD 0E F3         [ 4] 2240 	call to_upper 
      000D5F 6B 01            [ 1] 2241 	ld (TCHAR,sp),a 
      000D61                       2242 	_case '"' nbr_tst
      000D61 A6 22            [ 1]    1 	ld a,#'"' 
      000D63 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D65 26 06            [ 1]    3 	jrne nbr_tst
      000D67 CD 0C 1D         [ 4] 2243 	call parse_quote
      000D6A CC 0E E7         [ 2] 2244 	jp token_exit
      000D6D                       2245 nbr_tst: ; check for number 
      000D6D A6 24            [ 1] 2246 	ld a,#'$'
      000D6F 11 01            [ 1] 2247 	cp a,(TCHAR,sp) 
      000D71 27 13            [ 1] 2248 	jreq 1$
      000D73 A6 26            [ 1] 2249 	ld a,#'&
      000D75 11 01            [ 1] 2250 	cp a,(TCHAR,sp)
      000D77 26 06            [ 1] 2251 	jrne 0$
      000D79 CD 0C D2         [ 4] 2252 	call parse_binary ; expect binary integer 
      000D7C CC 0E E7         [ 2] 2253 	jp token_exit 
      000D7F 7B 01            [ 1] 2254 0$:	ld a,(TCHAR,sp)
      000D81 CD 0E EA         [ 4] 2255 	call is_digit
      000D84 24 06            [ 1] 2256 	jrnc 3$
      000D86 CD 0C 97         [ 4] 2257 1$:	call parse_integer 
      000D89 CC 0E E7         [ 2] 2258 	jp token_exit 
      000D8C                       2259 3$: 
      000D8C                       2260 	_case '(' bkslsh_tst 
      000D8C A6 28            [ 1]    1 	ld a,#'(' 
      000D8E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D90 26 05            [ 1]    3 	jrne bkslsh_tst
      000D92 A6 09            [ 1] 2261 	ld a,#TK_LPAREN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D94 CC 0E D7         [ 2] 2262 	jp token_char   	
      000D97                       2263 bkslsh_tst:
      000D97                       2264 	_case '\',rparnt_tst
      000D97 A6 5C            [ 1]    1 	ld a,#'\' 
      000D99 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9B 26 18            [ 1]    3 	jrne rparnt_tst
      000D9D 7B 01            [ 1] 2265 	ld a,(TCHAR,sp)
      000D9F F7               [ 1] 2266 	ld (x),a 
      000DA0 5C               [ 1] 2267 	incw x 
      000DA1 72 5C 00 01      [ 1] 2268 	inc in 
      000DA5 91 D6 00         [ 4] 2269 	ld a,([in.w],y)
      000DA8 F7               [ 1] 2270 	ld (x),a 
      000DA9 5C               [ 1] 2271 	incw x 
      000DAA 72 5C 00 01      [ 1] 2272 	inc in  
      000DAE 7F               [ 1] 2273 	clr (x) 
      000DAF 97               [ 1] 2274 	ld xl,a 
      000DB0 A6 02            [ 1] 2275 	ld a,#TK_CHAR 
      000DB2 CC 0E E7         [ 2] 2276 	jp token_exit 
      000DB5                       2277 rparnt_tst:		
      000DB5                       2278 	_case ')' colon_tst 
      000DB5 A6 29            [ 1]    1 	ld a,#')' 
      000DB7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DB9 26 05            [ 1]    3 	jrne colon_tst
      000DBB A6 0A            [ 1] 2279 	ld a,#TK_RPAREN 
      000DBD CC 0E D7         [ 2] 2280 	jp token_char 
      000DC0                       2281 colon_tst:
      000DC0                       2282 	_case ':' comma_tst 
      000DC0 A6 3A            [ 1]    1 	ld a,#':' 
      000DC2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DC4 26 05            [ 1]    3 	jrne comma_tst
      000DC6 A6 01            [ 1] 2283 	ld a,#TK_COLON 
      000DC8 CC 0E D7         [ 2] 2284 	jp token_char 
      000DCB                       2285 comma_tst:
      000DCB                       2286 	_case COMMA sharp_tst 
      000DCB A6 2C            [ 1]    1 	ld a,#COMMA 
      000DCD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DCF 26 05            [ 1]    3 	jrne sharp_tst
      000DD1 A6 0B            [ 1] 2287 	ld a,#TK_COMMA
      000DD3 CC 0E D7         [ 2] 2288 	jp token_char
      000DD6                       2289 sharp_tst:
      000DD6                       2290 	_case SHARP dash_tst 
      000DD6 A6 23            [ 1]    1 	ld a,#SHARP 
      000DD8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DDA 26 05            [ 1]    3 	jrne dash_tst
      000DDC A6 0C            [ 1] 2291 	ld a,#TK_SHARP
      000DDE CC 0E D7         [ 2] 2292 	jp token_char  	 	 
      000DE1                       2293 dash_tst: 	
      000DE1                       2294 	_case '-' at_tst 
      000DE1 A6 2D            [ 1]    1 	ld a,#'-' 
      000DE3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE5 26 05            [ 1]    3 	jrne at_tst
      000DE7 A6 11            [ 1] 2295 	ld a,#TK_MINUS  
      000DE9 CC 0E D7         [ 2] 2296 	jp token_char 
      000DEC                       2297 at_tst:
      000DEC                       2298 	_case '@' qmark_tst 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DEC A6 40            [ 1]    1 	ld a,#'@' 
      000DEE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF0 26 05            [ 1]    3 	jrne qmark_tst
      000DF2 A6 05            [ 1] 2299 	ld a,#TK_ARRAY 
      000DF4 CC 0E D7         [ 2] 2300 	jp token_char
      000DF7                       2301 qmark_tst:
      000DF7                       2302 	_case '?' tick_tst 
      000DF7 A6 3F            [ 1]    1 	ld a,#'?' 
      000DF9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFB 26 11            [ 1]    3 	jrne tick_tst
      000DFD 7B 01            [ 1] 2303 	ld a,(TCHAR,sp)
      000DFF F7               [ 1] 2304 	ld (x),a 
      000E00 5C               [ 1] 2305 	incw x 
      000E01 7F               [ 1] 2306 	clr (x)
      000E02 72 5C 00 01      [ 1] 2307 	inc in 
      000E06 A6 06            [ 1] 2308 	ld a,#TK_CMD 
      000E08 AE 15 F7         [ 2] 2309 	ldw x,#print 
      000E0B CC 0E E7         [ 2] 2310 	jp token_exit
      000E0E                       2311 tick_tst: ; ignore comment 
      000E0E                       2312 	_case TICK plus_tst 
      000E0E A6 27            [ 1]    1 	ld a,#TICK 
      000E10 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E12 26 0C            [ 1]    3 	jrne plus_tst
      000E14 72 5C 00 01      [ 1] 2313 	inc in 
      000E18 A6 06            [ 1] 2314 	ld a,#TK_CMD 
      000E1A AE 17 05         [ 2] 2315 	ldw x,#rem 
      000E1D CC 0E E7         [ 2] 2316 	jp token_exit 
      000E20                       2317 plus_tst:
      000E20                       2318 	_case '+' star_tst 
      000E20 A6 2B            [ 1]    1 	ld a,#'+' 
      000E22 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E24 26 05            [ 1]    3 	jrne star_tst
      000E26 A6 10            [ 1] 2319 	ld a,#TK_PLUS  
      000E28 CC 0E D7         [ 2] 2320 	jp token_char 
      000E2B                       2321 star_tst:
      000E2B                       2322 	_case '*' slash_tst 
      000E2B A6 2A            [ 1]    1 	ld a,#'*' 
      000E2D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E2F 26 05            [ 1]    3 	jrne slash_tst
      000E31 A6 20            [ 1] 2323 	ld a,#TK_MULT 
      000E33 CC 0E D7         [ 2] 2324 	jp token_char 
      000E36                       2325 slash_tst: 
      000E36                       2326 	_case '/' prcnt_tst 
      000E36 A6 2F            [ 1]    1 	ld a,#'/' 
      000E38 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E3A 26 05            [ 1]    3 	jrne prcnt_tst
      000E3C A6 21            [ 1] 2327 	ld a,#TK_DIV 
      000E3E CC 0E D7         [ 2] 2328 	jp token_char 
      000E41                       2329 prcnt_tst:
      000E41                       2330 	_case '%' eql_tst 
      000E41 A6 25            [ 1]    1 	ld a,#'%' 
      000E43 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E45 26 05            [ 1]    3 	jrne eql_tst
      000E47 A6 22            [ 1] 2331 	ld a,#TK_MOD
      000E49 CC 0E D7         [ 2] 2332 	jp token_char  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2333 ; 1 or 2 character tokens 	
      000E4C                       2334 eql_tst:
      000E4C                       2335 	_case '=' gt_tst 		
      000E4C A6 3D            [ 1]    1 	ld a,#'=' 
      000E4E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E50 26 05            [ 1]    3 	jrne gt_tst
      000E52 A6 32            [ 1] 2336 	ld a,#TK_EQUAL
      000E54 CC 0E D7         [ 2] 2337 	jp token_char 
      000E57                       2338 gt_tst:
      000E57                       2339 	_case '>' lt_tst 
      000E57 A6 3E            [ 1]    1 	ld a,#'>' 
      000E59 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E5B 26 33            [ 1]    3 	jrne lt_tst
      000E5D A6 31            [ 1] 2340 	ld a,#TK_GT 
      000E5F 6B 02            [ 1] 2341 	ld (ATTRIB,sp),a 
      000E61 72 5C 00 01      [ 1] 2342 	inc in 
      000E65 91 D6 00         [ 4] 2343 	ld a,([in.w],y)
      000E68 A1 3D            [ 1] 2344 	cp a,#'=
      000E6A 26 0C            [ 1] 2345 	jrne 1$
      000E6C 7B 01            [ 1] 2346 	ld a,(TCHAR,sp)
      000E6E F7               [ 1] 2347 	ld (x),a
      000E6F 5C               [ 1] 2348 	incw x 
      000E70 A6 3D            [ 1] 2349 	ld a,#'=
      000E72 6B 01            [ 1] 2350 	ld (TCHAR,sp),a 
      000E74 A6 33            [ 1] 2351 	ld a,#TK_GE 
      000E76 20 5F            [ 2] 2352 	jra token_char  
      000E78 A1 3C            [ 1] 2353 1$: cp a,#'<
      000E7A 26 0C            [ 1] 2354 	jrne 2$
      000E7C 7B 01            [ 1] 2355 	ld a,(TCHAR,sp)
      000E7E F7               [ 1] 2356 	ld (x),a
      000E7F 5C               [ 1] 2357 	incw x 
      000E80 A6 3C            [ 1] 2358 	ld a,#'<	
      000E82 6B 01            [ 1] 2359 	ld (TCHAR,sp),a 
      000E84 A6 35            [ 1] 2360 	ld a,#TK_NE 
      000E86 20 4F            [ 2] 2361 	jra token_char 
      000E88 72 5A 00 01      [ 1] 2362 2$: dec in
      000E8C 7B 02            [ 1] 2363 	ld a,(ATTRIB,sp)
      000E8E 20 47            [ 2] 2364 	jra token_char 
      000E90                       2365 lt_tst:
      000E90                       2366 	_case '<' other
      000E90 A6 3C            [ 1]    1 	ld a,#'<' 
      000E92 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E94 26 32            [ 1]    3 	jrne other
      000E96 A6 34            [ 1] 2367 	ld a,#TK_LT 
      000E98 6B 02            [ 1] 2368 	ld (ATTRIB,sp),a 
      000E9A 72 5C 00 01      [ 1] 2369 	inc in 
      000E9E 91 D6 00         [ 4] 2370 	ld a,([in.w],y)
      000EA1 A1 3D            [ 1] 2371 	cp a,#'=
      000EA3 26 0B            [ 1] 2372 	jrne 1$
      000EA5 7B 01            [ 1] 2373 	ld a,(TCHAR,sp)
      000EA7 F7               [ 1] 2374 	ld (x),a 
      000EA8 A6 3D            [ 1] 2375 	ld a,#'=
      000EAA 6B 01            [ 1] 2376 	ld (TCHAR,sp),a 
      000EAC A6 36            [ 1] 2377 	ld a,#TK_LE 
      000EAE 20 27            [ 2] 2378 	jra token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000EB0 A1 3E            [ 1] 2379 1$: cp a,#'>
      000EB2 26 0C            [ 1] 2380 	jrne 2$
      000EB4 7B 01            [ 1] 2381 	ld a,(TCHAR,sp)
      000EB6 F7               [ 1] 2382 	ld (x),a 
      000EB7 5C               [ 1] 2383 	incw x 
      000EB8 A6 3E            [ 1] 2384 	ld a,#'>
      000EBA 6B 01            [ 1] 2385 	ld (TCHAR,sp),a 
      000EBC A6 35            [ 1] 2386 	ld a,#TK_NE 
      000EBE 20 17            [ 2] 2387 	jra token_char 
      000EC0 72 5A 00 01      [ 1] 2388 2$: dec in 
      000EC4 7B 02            [ 1] 2389 	ld a,(ATTRIB,sp)
      000EC6 20 0F            [ 2] 2390 	jra token_char 	
      000EC8                       2391 other: ; not a special character 	 
      000EC8 7B 01            [ 1] 2392 	ld a,(TCHAR,sp)
      000ECA CD 05 0E         [ 4] 2393 	call is_alpha 
      000ECD 25 03            [ 1] 2394 	jrc 30$ 
      000ECF CC 07 22         [ 2] 2395 	jp syntax_error 
      000ED2                       2396 30$: 
      000ED2 CD 0C FA         [ 4] 2397 	call parse_keyword
      000ED5 20 10            [ 2] 2398 	jra token_exit 
      000ED7                       2399 token_char:
      000ED7 6B 02            [ 1] 2400 	ld (ATTRIB,sp),a 
      000ED9 7B 01            [ 1] 2401 	ld a,(TCHAR,sp)
      000EDB F7               [ 1] 2402 	ld (x),a 
      000EDC 5C               [ 1] 2403 	incw x 
      000EDD 7F               [ 1] 2404 	clr(x)
      000EDE 72 5C 00 01      [ 1] 2405 	inc in 
      000EE2 7B 02            [ 1] 2406 	ld a,(ATTRIB,sp)
      000EE4 AE 17 18         [ 2] 2407 	ldw x,#pad 
      000EE7                       2408 token_exit:
      000EE7                       2409 	_drop VSIZE 
      000EE7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EE9 81               [ 4] 2410 	ret
                                   2411 
                                   2412 
                                   2413 
                                   2414 ;------------------------------------
                                   2415 ; check if character in {'0'..'9'}
                                   2416 ; input:
                                   2417 ;    A  character to test
                                   2418 ; output:
                                   2419 ;    Carry  0 not digit | 1 digit
                                   2420 ;------------------------------------
      000EEA                       2421 is_digit:
      000EEA A1 30            [ 1] 2422 	cp a,#'0
      000EEC 25 03            [ 1] 2423 	jrc 1$
      000EEE A1 3A            [ 1] 2424     cp a,#'9+1
      000EF0 8C               [ 1] 2425 	ccf 
      000EF1 8C               [ 1] 2426 1$:	ccf 
      000EF2 81               [ 4] 2427     ret
                                   2428 
                                   2429 ;------------------------------------
                                   2430 ; convert alpha to uppercase
                                   2431 ; input:
                                   2432 ;    a  character to convert
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2433 ; output:
                                   2434 ;    a  uppercase character
                                   2435 ;------------------------------------
      000EF3                       2436 to_upper::
      000EF3 A1 61            [ 1] 2437 	cp a,#'a
      000EF5 2A 01            [ 1] 2438 	jrpl 1$
      000EF7 81               [ 4] 2439 0$:	ret
      000EF8 A1 7A            [ 1] 2440 1$: cp a,#'z	
      000EFA 22 FB            [ 1] 2441 	jrugt 0$
      000EFC A0 20            [ 1] 2442 	sub a,#32
      000EFE 81               [ 4] 2443 	ret
                                   2444 	
                                   2445 ;------------------------------------
                                   2446 ; convert pad content in integer
                                   2447 ; input:
                                   2448 ;    pad		.asciz to convert
                                   2449 ; output:
                                   2450 ;    acc24      int24_t
                                   2451 ;------------------------------------
                                   2452 	; local variables
                           000001  2453 	SIGN=1 ; 1 byte, 
                           000002  2454 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2455 	TEMP=3 ; 1 byte, temporary storage
                           000003  2456 	VSIZE=3 ; 3 bytes reserved for local storage
      000EFF                       2457 atoi24:
      000EFF 89               [ 2] 2458 	pushw x ;save x
      000F00 52 03            [ 2] 2459 	sub sp,#VSIZE
                                   2460 	; acc24=0 
      000F02 72 5F 00 08      [ 1] 2461 	clr acc24    
      000F06 72 5F 00 09      [ 1] 2462 	clr acc16
      000F0A 72 5F 00 0A      [ 1] 2463 	clr acc8 
      000F0E C6 17 18         [ 1] 2464 	ld a, pad 
      000F11 27 5A            [ 1] 2465 	jreq atoi_exit
      000F13 0F 01            [ 1] 2466 	clr (SIGN,sp)
      000F15 A6 0A            [ 1] 2467 	ld a,#10
      000F17 6B 02            [ 1] 2468 	ld (BASE,sp),a ; default base decimal
      000F19 AE 17 18         [ 2] 2469 	ldw x,#pad ; pointer to string to convert
      000F1C F6               [ 1] 2470 	ld a,(x)
      000F1D 27 47            [ 1] 2471 	jreq 9$  ; completed if 0
      000F1F A1 2D            [ 1] 2472 	cp a,#'-
      000F21 26 04            [ 1] 2473 	jrne 1$
      000F23 03 01            [ 1] 2474 	cpl (SIGN,sp)
      000F25 20 08            [ 2] 2475 	jra 2$
      000F27 A1 24            [ 1] 2476 1$: cp a,#'$
      000F29 26 06            [ 1] 2477 	jrne 3$
      000F2B A6 10            [ 1] 2478 	ld a,#16
      000F2D 6B 02            [ 1] 2479 	ld (BASE,sp),a
      000F2F 5C               [ 1] 2480 2$:	incw x
      000F30 F6               [ 1] 2481 	ld a,(x)
      000F31                       2482 3$:	
      000F31 A1 61            [ 1] 2483 	cp a,#'a
      000F33 2B 02            [ 1] 2484 	jrmi 4$
      000F35 A0 20            [ 1] 2485 	sub a,#32
      000F37 A1 30            [ 1] 2486 4$:	cp a,#'0
      000F39 2B 2B            [ 1] 2487 	jrmi 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F3B A0 30            [ 1] 2488 	sub a,#'0
      000F3D A1 0A            [ 1] 2489 	cp a,#10
      000F3F 2B 06            [ 1] 2490 	jrmi 5$
      000F41 A0 07            [ 1] 2491 	sub a,#7
      000F43 11 02            [ 1] 2492 	cp a,(BASE,sp)
      000F45 2A 1F            [ 1] 2493 	jrpl 9$
      000F47 6B 03            [ 1] 2494 5$:	ld (TEMP,sp),a
      000F49 7B 02            [ 1] 2495 	ld a,(BASE,sp)
      000F4B CD 0F 71         [ 4] 2496 	call mulu24_8
      000F4E 7B 03            [ 1] 2497 	ld a,(TEMP,sp)
      000F50 CB 00 0A         [ 1] 2498 	add a,acc24+2
      000F53 C7 00 0A         [ 1] 2499 	ld acc24+2,a
      000F56 4F               [ 1] 2500 	clr a
      000F57 C9 00 09         [ 1] 2501 	adc a,acc24+1
      000F5A C7 00 09         [ 1] 2502 	ld acc24+1,a
      000F5D 4F               [ 1] 2503 	clr a
      000F5E C9 00 08         [ 1] 2504 	adc a,acc24
      000F61 C7 00 08         [ 1] 2505 	ld acc24,a
      000F64 20 C9            [ 2] 2506 	jra 2$
      000F66 0D 01            [ 1] 2507 9$:	tnz (SIGN,sp)
      000F68 27 03            [ 1] 2508     jreq atoi_exit
      000F6A CD 0A 72         [ 4] 2509     call neg_acc24
      000F6D                       2510 atoi_exit: 
      000F6D 5B 03            [ 2] 2511 	addw sp,#VSIZE
      000F6F 85               [ 2] 2512 	popw x ; restore x
      000F70 81               [ 4] 2513 	ret
                                   2514 
                                   2515 ;--------------------------------------
                                   2516 ; unsigned multiply uint24_t by uint8_t
                                   2517 ; use to convert numerical string to uint24_t
                                   2518 ; input:
                                   2519 ;	acc24	uint24_t 
                                   2520 ;   A		uint8_t
                                   2521 ; output:
                                   2522 ;   acc24   A*acc24
                                   2523 ;-------------------------------------
                                   2524 ; local variables offset  on sp
                           000003  2525 	U8   = 3   ; A pushed on stack
                           000002  2526 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2527 	OVFH = 1  ; multiplication overflow high byte
                           000003  2528 	VSIZE = 3
      000F71                       2529 mulu24_8:
      000F71 89               [ 2] 2530 	pushw x    ; save X
                                   2531 	; local variables
      000F72 88               [ 1] 2532 	push a     ; U8
      000F73 5F               [ 1] 2533 	clrw x     ; initialize overflow to 0
      000F74 89               [ 2] 2534 	pushw x    ; multiplication overflow
                                   2535 ; multiply low byte.
      000F75 C6 00 0A         [ 1] 2536 	ld a,acc24+2
      000F78 97               [ 1] 2537 	ld xl,a
      000F79 7B 03            [ 1] 2538 	ld a,(U8,sp)
      000F7B 42               [ 4] 2539 	mul x,a
      000F7C 9F               [ 1] 2540 	ld a,xl
      000F7D C7 00 0A         [ 1] 2541 	ld acc24+2,a
      000F80 9E               [ 1] 2542 	ld a, xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000F81 6B 02            [ 1] 2543 	ld (OVFL,sp),a
                                   2544 ; multipy middle byte
      000F83 C6 00 09         [ 1] 2545 	ld a,acc24+1
      000F86 97               [ 1] 2546 	ld xl,a
      000F87 7B 03            [ 1] 2547 	ld a, (U8,sp)
      000F89 42               [ 4] 2548 	mul x,a
                                   2549 ; add overflow to this partial product
      000F8A 72 FB 01         [ 2] 2550 	addw x,(OVFH,sp)
      000F8D 9F               [ 1] 2551 	ld a,xl
      000F8E C7 00 09         [ 1] 2552 	ld acc24+1,a
      000F91 4F               [ 1] 2553 	clr a
      000F92 A9 00            [ 1] 2554 	adc a,#0
      000F94 6B 01            [ 1] 2555 	ld (OVFH,sp),a
      000F96 9E               [ 1] 2556 	ld a,xh
      000F97 6B 02            [ 1] 2557 	ld (OVFL,sp),a
                                   2558 ; multiply most signficant byte	
      000F99 C6 00 08         [ 1] 2559 	ld a, acc24
      000F9C 97               [ 1] 2560 	ld xl, a
      000F9D 7B 03            [ 1] 2561 	ld a, (U8,sp)
      000F9F 42               [ 4] 2562 	mul x,a
      000FA0 72 FB 01         [ 2] 2563 	addw x, (OVFH,sp)
      000FA3 9F               [ 1] 2564 	ld a, xl
      000FA4 C7 00 08         [ 1] 2565 	ld acc24,a
      000FA7 5B 03            [ 2] 2566     addw sp,#VSIZE
      000FA9 85               [ 2] 2567 	popw x
      000FAA 81               [ 4] 2568 	ret
                                   2569 
                                   2570 ;------------------------------------
                                   2571 ; skip character c in text starting from 'in'
                                   2572 ; input:
                                   2573 ;	 y 		point to text buffer
                                   2574 ;    a 		character to skip
                                   2575 ; output:  
                                   2576 ;	'in' ajusted to new position
                                   2577 ;------------------------------------
                           000001  2578 	C = 1 ; local var
      000FAB                       2579 skip:
      000FAB 88               [ 1] 2580 	push a
      000FAC 91 D6 00         [ 4] 2581 1$:	ld a,([in.w],y)
      000FAF 27 0A            [ 1] 2582 	jreq 2$
      000FB1 11 01            [ 1] 2583 	cp a,(C,sp)
      000FB3 26 06            [ 1] 2584 	jrne 2$
      000FB5 72 5C 00 01      [ 1] 2585 	inc in
      000FB9 20 F1            [ 2] 2586 	jra 1$
      000FBB                       2587 2$: _drop 1 
      000FBB 5B 01            [ 2]    1     addw sp,#1 
      000FBD 81               [ 4] 2588 	ret
                                   2589 	
                                   2590 ;------------------------------
                                   2591 ; restore 'in.w' variable to 
                                   2592 ; its value before last call
                                   2593 ; to get_token.
                                   2594 ;------------------------------
      000FBE                       2595 unget_token:
      000FBE CE 00 11         [ 2] 2596 	ldw x,in.w.saved
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000FC1 CF 00 00         [ 2] 2597 	ldw in.w,x 
      000FC4 81               [ 4] 2598 	ret 
                                   2599 
                                   2600 
                                   2601 ;******************************
                                   2602 ;  data stack manipulation
                                   2603 ;*****************************
                                   2604 ;----------------------	
                                   2605 ; push X on data stack 
                                   2606 ; input:
                                   2607 ;	X 
                                   2608 ; output:
                                   2609 ;	none 
                                   2610 ;----------------------	
      000FC5                       2611 dpush:
      000FC5                       2612     _dp_down
      000FC5 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000FC9 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000FCD 72 CF 00 19      [ 5] 2613     ldw [dstkptr],x  
      000FD1 81               [ 4] 2614 	ret 
                                   2615 
                                   2616 
                                   2617 ;----------------------	
                                   2618 ; pop data stack in X 
                                   2619 ; input:
                                   2620 ;	none
                                   2621 ; output:
                                   2622 ;	X   
                                   2623 ;----------------------	
      000FD2                       2624 dpop: 
      000FD2 72 CE 00 19      [ 5] 2625     ldw x, [dstkptr]
      000FD6                       2626 	_dp_up
      000FD6 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FDA 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000FDE 81               [ 4] 2627 	ret 
                                   2628 
                                   2629 ;-----------------------------
                                   2630 ; swap top 2 elements of dstack
                                   2631 ;  {n1 n2 -- n2 n1 }
                                   2632 ;-----------------------------
      000FDF                       2633 dswap:
      000FDF 72 CE 00 19      [ 5] 2634 	ldw x,[dstkptr]
      000FE3 89               [ 2] 2635 	pushw x 
      000FE4 AE 00 02         [ 2] 2636 	ldw x,#2 
      000FE7 72 DE 00 19      [ 5] 2637 	ldw x,([dstkptr],x) 
      000FEB 72 CF 00 19      [ 5] 2638 	ldw [dstkptr],x 
      000FEF AE 00 02         [ 2] 2639 	ldw x,#2
      000FF2 90 85            [ 2] 2640 	popw y 
      000FF4 72 DF 00 19      [ 5] 2641 	ldw ([dstkptr],x),y 
      000FF8 81               [ 4] 2642 	ret
                                   2643 
                                   2644 ;-----------------------------
                                   2645 ; drop TOS 
                                   2646 ;-----------------------------
      000FF9                       2647 ddrop: ; { n -- }
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FF9                       2648 	_dp_up 
      000FF9 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FFD 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      001001 81               [ 4] 2649 	ret
                                   2650 	
                                   2651 ;-----------------------------
                                   2652 ; duplicate TOS 
                                   2653 ;  dstack: { ix...n -- ix...n n }
                                   2654 ;-----------------------------
      001002                       2655 ddup:
      001002 72 CE 00 19      [ 5] 2656 	ldw x,[dstkptr]
      001006                       2657 	_dp_down
      001006 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      00100A 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      00100E 72 CF 00 19      [ 5] 2658     ldw [dstkptr],x  
      001012 81               [ 4] 2659 	ret 
                                   2660 
                                   2661 
                                   2662 ;----------------------------------
                                   2663 ; pick value n from dstack 
                                   2664 ; put it on TOS
                                   2665 ; dstack: {ix,..,p -- ix,...,np }
                                   2666 ;-----------------------------------
      001013                       2667 dpick:
      001013 72 CE 00 19      [ 5] 2668 	ldw x,[dstkptr]
      001017 58               [ 2] 2669 	sllw x 
      001018 72 BB 00 19      [ 2] 2670 	addw x,dstkptr 
      00101C FE               [ 2] 2671 	ldw x,(x)
      00101D 72 CF 00 19      [ 5] 2672 	ldw [dstkptr],x 
      001021 81               [ 4] 2673 	ret
                                   2674 
                                   2675 ;---------------------------
                                   2676 ;  fetch variable in X 
                                   2677 ;  dstack:{ addr -- value }
                                   2678 ;---------------------------
      001022                       2679 fetch:
      001022 72 CE 00 19      [ 5] 2680 	ldw x,[dstkptr]
      001026 FE               [ 2] 2681 	ldw x,(x)
      001027 72 CF 00 19      [ 5] 2682 	ldw [dstkptr],x
      00102B 81               [ 4] 2683 	ret 
                                   2684 
                                   2685 ;----------------------------
                                   2686 ; store variable 
                                   2687 ; dstack: {addr value -- }
                                   2688 ;----------------------------
      00102C                       2689 store:
      00102C CD 0F D2         [ 4] 2690 	call dpop 
      00102F 90 93            [ 1] 2691 	ldw y,x   ; y=value 
      001031 CD 0F D2         [ 4] 2692 	call dpop 
      001034 FF               [ 2] 2693 	ldw (x),y 
      001035 81               [ 4] 2694 	ret 
                                   2695 
                                   2696 ;---------------------------------
                                   2697 ; drop n elements from data stack 
                                   2698 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2699 ;   X 		n 
                                   2700 ; output:
                                   2701 ;   none 
                                   2702 ;-------------------------------------
      001036                       2703 ddrop_n:
      001036 90 89            [ 2] 2704 	pushw y 
      001038 90 CE 00 19      [ 2] 2705 	ldw y,dstkptr 
      00103C 58               [ 2] 2706 	sllw x 
      00103D 89               [ 2] 2707 	pushw x 
      00103E 72 F9 01         [ 2] 2708 	addw y,(1,sp)
      001041 90 CF 00 19      [ 2] 2709 	ldw dstkptr,y 
      001045 85               [ 2] 2710 	popw x 
      001046 90 85            [ 2] 2711 	popw y
      001048 81               [ 4] 2712 	ret 
                                   2713 
      001049 0A 64 73 74 61 63 6B  2714 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2715 ;----------------------------
                                   2716 ; print dstack content 
                                   2717 ;---------------------------
                           000001  2718 	XSAVE=1
                           000002  2719 	VSIZE=2
      001053                       2720 dots:
      001053                       2721 	_vars VSIZE 
      001053 52 02            [ 2]    1     sub sp,#VSIZE 
      001055 AE 10 49         [ 2] 2722 	ldw x,#dstk_prompt 
      001058 CD 01 B0         [ 4] 2723 	call puts
      00105B AE 17 7E         [ 2] 2724 	ldw x,#dstack_unf-CELL_SIZE
      00105E 35 0A 00 07      [ 1] 2725 	mov base,#10 
      001062 C3 00 19         [ 2] 2726 1$:	cpw x,dstkptr 
      001065 25 0D            [ 1] 2727 	jrult 4$ 
      001067 1F 01            [ 2] 2728 	ldw (XSAVE,sp),x
      001069 FE               [ 2] 2729 	ldw  x,(x)
      00106A CD 09 A7         [ 4] 2730 	call print_int 
      00106D 1E 01            [ 2] 2731 	ldw x,(XSAVE,sp)
      00106F 1D 00 02         [ 2] 2732 	subw x,#CELL_SIZE 
      001072 20 EE            [ 2] 2733 	jra 1$ 
      001074 A6 0D            [ 1] 2734 4$: ld a,#CR 
      001076 CD 01 9E         [ 4] 2735 	call putc 
      001079                       2736 	_drop VSIZE
      001079 5B 02            [ 2]    1     addw sp,#VSIZE 
      00107B 4F               [ 1] 2737 	clr a 
      00107C 81               [ 4] 2738 	ret
                                   2739 
      00107D 0A 63 74 61 63 6B 3A  2740 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2741 ;--------------------------------
                                   2742 ; print cstack content
                                   2743 ;--------------------------------
                           000001  2744 	XSAVE=1
                           000002  2745 	VSIZE=2 
      001086                       2746 dotr:
      001086                       2747 	_vars VSIZE 
      001086 52 02            [ 2]    1     sub sp,#VSIZE 
      001088 AE 10 7D         [ 2] 2748 	ldw x,#cstk_prompt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00108B CD 01 B0         [ 4] 2749 	call puts 
      00108E 96               [ 1] 2750 	ldw x,sp 
      00108F 1C 00 07         [ 2] 2751 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      001092 1F 01            [ 2] 2752 	ldw (XSAVE,sp),x  
      001094 AE 17 FE         [ 2] 2753 	ldw x,#RAM_SIZE-2
      001097 35 10 00 07      [ 1] 2754 	mov base,#16
      00109B                       2755 dotr_loop:
      00109B 13 01            [ 2] 2756 	cpw x,(XSAVE,sp)
      00109D 2B 0B            [ 1] 2757 	jrmi 9$
      00109F 89               [ 2] 2758 	pushw x  
      0010A0 FE               [ 2] 2759 	ldw x,(x)
      0010A1 CD 09 A7         [ 4] 2760 	call print_int 
      0010A4 85               [ 2] 2761 	popw x  
      0010A5 1D 00 02         [ 2] 2762 	subw x,#CELL_SIZE
      0010A8 20 F1            [ 2] 2763 	jra dotr_loop 
      0010AA A6 0D            [ 1] 2764 9$:	ld a,#CR 
      0010AC CD 01 9E         [ 4] 2765 	call putc 
      0010AF                       2766 	_drop VSIZE 
      0010AF 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010B1 4F               [ 1] 2767 	clr a 
      0010B2 81               [ 4] 2768 	ret
                                   2769 
                                   2770 
                                   2771 ;--------------------------------
                                   2772 ;  add 2 integers
                                   2773 ;  input:
                                   2774 ;    N1     on cstack 
                                   2775 ;    N2     on cstack 
                                   2776 ;  output:
                                   2777 ;    X 		n2+n1 
                                   2778 ;--------------------------------
                                   2779 	;arugments on cstack 
      0010B3                       2780 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0010B3                       2781 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      0010B3                       2782 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      0010B3                       2783 add:
      0010B3 1E 05            [ 2] 2784 	ldw x ,(N2,sp)
      0010B5 72 FB 03         [ 2] 2785 	addw x,(N1,sp)
      0010B8 1F 03            [ 2] 2786 	ldw (N1,sp),x 
      0010BA 81               [ 4] 2787 	ret 
                                   2788 
                                   2789 ;--------------------------------
                                   2790 ;  substract 2 ntegers
                                   2791 ;  input:
                                   2792 ;    N1     on cstack 
                                   2793 ;    N2     on cstack 
                                   2794 ;  output:
                                   2795 ;    X 		n2+n1 
                                   2796 ;--------------------------------
      0010BB                       2797 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0010BB                       2798 	_arg N1 1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                           000003     1     N1=ARG_OFS+1 
      0010BB                       2799 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      0010BB                       2800 substract:
      0010BB 1E 05            [ 2] 2801 	ldw x,(N2,sp)
      0010BD 72 F0 03         [ 2] 2802 	subw x,(N1,sp)
      0010C0 81               [ 4] 2803 	ret 
                                   2804 
                                   2805 ;-------------------------------------
                                   2806 ; multiply 2 integers
                                   2807 ; product overflow is ignored unless
                                   2808 ; MATH_OVF assembler flag is set to 1
                                   2809 ; input:
                                   2810 ;  	N1      on cstack
                                   2811 ;   N2 		on cstack 
                                   2812 ; output:
                                   2813 ;	X        N1*N2 
                                   2814 ;-------------------------------------
                                   2815 	;arguments 
      0010C1                       2816 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      0010C1                       2817 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      0010C1                       2818 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      0010C1                       2819 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      0010C1                       2820 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2821    ; local variables 
                           000001  2822 	SIGN=1
                           000002  2823 	PROD=2
                           000003  2824 	VSIZE=3
      0010C1                       2825 multiply:
      0010C1                       2826 	_vars VSIZE 
      0010C1 52 03            [ 2]    1     sub sp,#VSIZE 
      0010C3 0F 01            [ 1] 2827 	clr (SIGN,sp)
      0010C5 1E 06            [ 2] 2828 	ldw x,(N1_HB,sp)
      0010C7 9E               [ 1] 2829 	ld a,xh  
      0010C8 A5 80            [ 1] 2830 	bcp a,#0x80 
      0010CA 27 05            [ 1] 2831 	jreq 2$
      0010CC 03 01            [ 1] 2832 	cpl (SIGN,sp)
      0010CE 50               [ 2] 2833 	negw x 
      0010CF 1F 06            [ 2] 2834 	ldw (N1_HB,sp),x 
      0010D1 1E 08            [ 2] 2835 2$: ldw x,(N2_HB,sp)
      0010D3 9E               [ 1] 2836 	ld a,xh  
      0010D4 A5 80            [ 1] 2837 	bcp a,#0x80 
      0010D6 27 05            [ 1] 2838 	jreq 3$
      0010D8 03 01            [ 1] 2839 	cpl (SIGN,sp)
      0010DA 50               [ 2] 2840 	negw x 
      0010DB 1F 08            [ 2] 2841 	ldw (N2_HB,sp),x 
                                   2842 ; N1_LB * N2_LB 	
      0010DD 7B 07            [ 1] 2843 3$:	ld a,(N1_LB,sp)
      0010DF 97               [ 1] 2844 	ld xl,a 
      0010E0 7B 09            [ 1] 2845 	ld a,(N2_LB,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010E2 42               [ 4] 2846 	mul x,a 
                           000000  2847 .if MATH_OVF 	
                                   2848 	ld a,xh 
                                   2849 	bcp a,#0x80 
                                   2850 	jreq 4$ 
                                   2851 	ld a,#ERR_MATH_OVF 
                                   2852 	jp tb_error
                                   2853 .endif 	 
      0010E3 1F 02            [ 2] 2854 4$:	ldw (PROD,sp),x
                                   2855 ; N1_LB * N2_HB	 
      0010E5 7B 07            [ 1] 2856 	ld a,(N1_LB,sp) 
      0010E7 97               [ 1] 2857 	ld xl,a 
      0010E8 7B 08            [ 1] 2858 	ld a,(N2_HB,sp)
      0010EA 42               [ 4] 2859 	mul x,a
      0010EB 9F               [ 1] 2860 	ld a,xl 
      0010EC 1B 02            [ 1] 2861 	add a,(PROD,sp)
                           000000  2862 .if MATH_OVF 	
                                   2863 	bcp a,#0x80 
                                   2864 	jreq 5$ 
                                   2865 	ld a,#ERR_MATH_OVF 
                                   2866 	jp tb_error
                                   2867 .endif 	 
      0010EE 6B 02            [ 1] 2868 5$:	ld (PROD,sp),a 
                                   2869 ; N1_HB * N2_LB 
      0010F0 7B 06            [ 1] 2870 	ld a,(N1_HB,sp)
      0010F2 97               [ 1] 2871 	ld xl,a 
      0010F3 7B 09            [ 1] 2872 	ld a,(N2_LB,sp)
      0010F5 42               [ 4] 2873 	mul x,a 
      0010F6 9F               [ 1] 2874 	ld a,xl 
      0010F7 1B 02            [ 1] 2875 	add a,(PROD,sp)
                           000000  2876 .if MATH_OVF 	
                                   2877 	bcp a,#0x80 
                                   2878 	jreq 6$ 
                                   2879 	ld a,#ERR_MATH_OVF 
                                   2880 	jp tb_error
                                   2881 .endif 	 
      0010F9 6B 02            [ 1] 2882 6$:	ld (PROD,sp),a 
                                   2883 ; N1_HB * N2_HB 	
                                   2884 ; it is pointless to multiply N1_HB*N2_HB 
                                   2885 ; as this product is over 65535 or 0 
                                   2886 ;
                                   2887 ; sign adjust product
      0010FB 0D 01            [ 1] 2888 	tnz (SIGN,sp)
      0010FD 27 05            [ 1] 2889 	jreq 7$
      0010FF 1E 02            [ 2] 2890 	ldw x, (PROD,sp)
      001101 50               [ 2] 2891 	negw x
      001102 1F 02            [ 2] 2892 	ldw (PROD,sp),x  
      001104                       2893 7$: 
      001104 1E 02            [ 2] 2894 	ldw x,(PROD,sp) 
      001106                       2895 	_drop VSIZE 
      001106 5B 03            [ 2]    1     addw sp,#VSIZE 
      001108 81               [ 4] 2896 	ret
                                   2897 
                                   2898 ;----------------------------------
                                   2899 ;  euclidian divide n2/n1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2900 ; input:
                                   2901 ;    N2 	on cstack
                                   2902 ;    N1 	on cstack
                                   2903 ; output:
                                   2904 ;    X      n2/n1 
                                   2905 ;    Y      remainder 
                                   2906 ;----------------------------------
      001109                       2907 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      001109                       2908 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      001109                       2909 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2910 	; local variables
                           000001  2911 	SQUOT=1 ; sign quotient
                           000002  2912 	SDIVD=2 ; sign dividend  
                           000002  2913 	VSIZE=2
      001109                       2914 divide:
      001109                       2915 	_vars VSIZE 
      001109 52 02            [ 2]    1     sub sp,#VSIZE 
      00110B 0F 01            [ 1] 2916 	clr (SQUOT,sp)
      00110D 0F 02            [ 1] 2917 	clr (SDIVD,sp)
                                   2918 ; check for 0 divisor
      00110F 1E 05            [ 2] 2919 	ldw x,(DIVISR,sp)
      001111 5D               [ 2] 2920 	tnzw x 
      001112 26 05            [ 1] 2921     jrne 0$
      001114 A6 04            [ 1] 2922 	ld a,#ERR_DIV0 
      001116 CC 07 24         [ 2] 2923 	jp tb_error 
                                   2924 ; check divisor sign 	
      001119 9E               [ 1] 2925 0$:	ld a,xh 
      00111A A5 80            [ 1] 2926 	bcp a,#0x80 
      00111C 27 03            [ 1] 2927 	jreq 1$
      00111E 03 01            [ 1] 2928 	cpl (SQUOT,sp)
      001120 50               [ 2] 2929 	negw x 
      001121 1F 05            [ 2] 2930 1$:	ldw (DIVISR,sp),x
                                   2931 ; check dividend sign 	 
      001123 1E 07            [ 2] 2932     ldw x,(DIVIDND,sp)
      001125 9E               [ 1] 2933 	ld a,xh 
      001126 A5 80            [ 1] 2934 	bcp a,#0x80 
      001128 27 05            [ 1] 2935 	jreq 2$ 
      00112A 03 01            [ 1] 2936 	cpl (SQUOT,sp)
      00112C 03 02            [ 1] 2937 	cpl (SDIVD,sp)
      00112E 50               [ 2] 2938 	negw x 
      00112F 16 05            [ 2] 2939 2$:	ldw y,(DIVISR,sp)
      001131 65               [ 2] 2940 	divw x,y
      001132 90 CF 00 09      [ 2] 2941 	ldw acc16,y 
                                   2942 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      001136 0D 02            [ 1] 2943 	tnz (SDIVD,sp)
      001138 27 0B            [ 1] 2944 	jreq 7$
      00113A 90 5D            [ 2] 2945 	tnzw y 
      00113C 27 07            [ 1] 2946 	jreq 7$
      00113E 5C               [ 1] 2947 	incw x
      00113F 16 05            [ 2] 2948 	ldw y,(DIVISR,sp)
      001141 72 B2 00 09      [ 2] 2949 	subw y,acc16
      001145 0D 01            [ 1] 2950 7$: tnz (SQUOT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001147 27 01            [ 1] 2951 	jreq 9$ 	 
      001149 50               [ 2] 2952 8$:	negw x 
      00114A                       2953 9$: 
      00114A                       2954 	_drop VSIZE 
      00114A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00114C 81               [ 4] 2955 	ret 
                                   2956 
                                   2957 
                                   2958 ;----------------------------------
                                   2959 ;  remainder resulting from euclidian 
                                   2960 ;  division of n2/n1 
                                   2961 ; input:
                                   2962 ;   N1 		cstack 
                                   2963 ;   N2      cstack
                                   2964 ; output:
                                   2965 ;   X       N2%N1 
                                   2966 ;----------------------------------
                           000003  2967 	N1=3
                           000005  2968 	N2=5
                           000004  2969 	VSIZE=4
      00114D                       2970 modulo:
      00114D 1E 03            [ 2] 2971 	Ldw x,(N1,sp)
      00114F 16 05            [ 2] 2972 	ldw y,(N2,sp)
      001151                       2973 	_vars VSIZE 
      001151 52 04            [ 2]    1     sub sp,#VSIZE 
      001153 1F 01            [ 2] 2974 	ldw (1,sp),x 
      001155 17 03            [ 2] 2975 	ldw (3,sp),y 
      001157 CD 11 09         [ 4] 2976 	call divide 
      00115A 93               [ 1] 2977 	ldw x,y
      00115B                       2978 	_drop VSIZE 
      00115B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00115D 81               [ 4] 2979 	ret 
                                   2980 
                                   2981 
                                   2982 ;----------------------------------
                                   2983 ; search in kword_dict command name
                                   2984 ;  from its execution address 
                                   2985 ; input:
                                   2986 ;   X       	execution address 
                                   2987 ; output:
                                   2988 ;   X 			cstr*  | 0 
                                   2989 ;--------------------------------
                           000001  2990 	XADR=1 
                           000003  2991 	LINK=3 
                           000004  2992 	VSIZE=4
      00115E                       2993 cmd_name:
      00115E                       2994 	_vars VSIZE 
      00115E 52 04            [ 2]    1     sub sp,#VSIZE 
      001160 72 5F 00 09      [ 1] 2995 	clr acc16 
      001164 1F 01            [ 2] 2996 	ldw (XADR,sp),x  
      001166 AE 21 4E         [ 2] 2997 	ldw x,#kword_dict	
      001169 1F 03            [ 2] 2998 1$:	ldw (LINK,sp),x
      00116B E6 02            [ 1] 2999 	ld a,(2,x)
      00116D A4 0F            [ 1] 3000 	and a,#15 
      00116F C7 00 0A         [ 1] 3001 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001172 1C 00 03         [ 2] 3002 	addw x,#3
      001175 72 BB 00 09      [ 2] 3003 	addw x,acc16
      001179 FE               [ 2] 3004 	ldw x,(x) ; execution address 
      00117A 13 01            [ 2] 3005 	cpw x,(XADR,sp)
      00117C 27 0A            [ 1] 3006 	jreq 2$
      00117E 1E 03            [ 2] 3007 	ldw x,(LINK,sp)
      001180 FE               [ 2] 3008 	ldw x,(x) 
      001181 1D 00 02         [ 2] 3009 	subw x,#2  
      001184 26 E3            [ 1] 3010 	jrne 1$
      001186 20 05            [ 2] 3011 	jra 9$
      001188 1E 03            [ 2] 3012 2$: ldw x,(LINK,sp)
      00118A 1C 00 02         [ 2] 3013 	addw x,#2 	
      00118D                       3014 9$:	_drop VSIZE
      00118D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00118F 81               [ 4] 3015 	ret
                                   3016 
                                   3017 
                                   3018 ;---------------------------------
                                   3019 ; input:
                                   3020 ;	X 		dictionary entry point 
                                   3021 ;  pad		.asciz name to search 
                                   3022 ; output:
                                   3023 ;  A 		TK_CMD|TK_FUNC|TK_NONE 
                                   3024 ;  X		execution address | 0 
                                   3025 ;---------------------------------
                           000001  3026 	NLEN=1 ; cmd length 
                           000002  3027 	YSAVE=2
                           000003  3028 	VSIZE=3 
      001190                       3029 search_dict:
      001190                       3030 	_vars VSIZE 
      001190 52 03            [ 2]    1     sub sp,#VSIZE 
      001192 90 93            [ 1] 3031 	ldw y,x 
      001194                       3032 search_next:	
      001194 90 F6            [ 1] 3033 	ld a,(y)
      001196 A4 0F            [ 1] 3034 	and a,#0xf 
      001198 6B 01            [ 1] 3035 	ld (NLEN,sp),a  
      00119A AE 17 18         [ 2] 3036 	ldw x,#pad 
      00119D 17 02            [ 2] 3037 	ldw (YSAVE,sp),y
      00119F 90 5C            [ 1] 3038 	incw y  
      0011A1                       3039 cp_loop:
      0011A1 F6               [ 1] 3040 	ld a,(x)
      0011A2 27 1E            [ 1] 3041 	jreq str_match 
      0011A4 0D 01            [ 1] 3042 	tnz (NLEN,sp)
      0011A6 27 0B            [ 1] 3043 	jreq no_match  
      0011A8 90 F1            [ 1] 3044 	cp a,(y)
      0011AA 26 07            [ 1] 3045 	jrne no_match 
      0011AC 90 5C            [ 1] 3046 	incw y 
      0011AE 5C               [ 1] 3047 	incw x
      0011AF 0A 01            [ 1] 3048 	dec (NLEN,sp)
      0011B1 20 EE            [ 2] 3049 	jra cp_loop 
      0011B3                       3050 no_match:
      0011B3 16 02            [ 2] 3051 	ldw y,(YSAVE,sp) 
      0011B5 72 A2 00 02      [ 2] 3052 	subw y,#2 ; move Y to link field
      0011B9 4B 00            [ 1] 3053 	push #TK_NONE 
      0011BB 90 FE            [ 2] 3054 	ldw y,(y) ; next word link 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011BD 84               [ 1] 3055 	pop a ; TK_NONE 
      0011BE 27 24            [ 1] 3056 	jreq search_exit  ; not found  
                                   3057 ;try next 
      0011C0 20 D2            [ 2] 3058 	jra search_next
      0011C2                       3059 str_match:
      0011C2 16 02            [ 2] 3060 	ldw y,(YSAVE,sp)
      0011C4 90 F6            [ 1] 3061 	ld a,(y)
      0011C6 6B 01            [ 1] 3062 	ld (NLEN,sp),a ; needed to test bit 7 
      0011C8 A4 7F            [ 1] 3063 	and a,#0x7f 
                                   3064 ; move y to procedure address field 	
      0011CA 4C               [ 1] 3065 	inc a 
      0011CB C7 00 0A         [ 1] 3066 	ld acc8,a 
      0011CE 72 5F 00 09      [ 1] 3067 	clr acc16 
      0011D2 72 B9 00 09      [ 2] 3068 	addw y,acc16 
      0011D6 90 FE            [ 2] 3069 	ldw y,(y) ; routine entry point 
      0011D8 7B 01            [ 1] 3070 	ld a,(NLEN,sp)
      0011DA A5 80            [ 1] 3071 	bcp a,#0x80 
      0011DC 27 04            [ 1] 3072 	jreq 1$
      0011DE A6 07            [ 1] 3073 	ld a,#TK_FUNC 
      0011E0 20 02            [ 2] 3074 	jra search_exit
      0011E2 A6 06            [ 1] 3075 1$: ld a,#TK_CMD 
      0011E4                       3076 search_exit: 
      0011E4 93               [ 1] 3077 	ldw x,y ; x=routine address 
      0011E5                       3078 	_drop VSIZE 	 
      0011E5 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011E7 81               [ 4] 3079 	ret 
                                   3080 
                                   3081 ;---------------------
                                   3082 ; check if next token
                                   3083 ;  is of expected type 
                                   3084 ; input:
                                   3085 ;   A 		 expected token attribute
                                   3086 ;  ouput:
                                   3087 ;   none     if fail call tb_error 
                                   3088 ;--------------------
      0011E8                       3089 expect:
      0011E8 88               [ 1] 3090 	push a 
      0011E9 CD 08 08         [ 4] 3091 	call next_token 
      0011EC 11 01            [ 1] 3092 	cp a,(1,sp)
      0011EE 27 03            [ 1] 3093 	jreq 1$
      0011F0 CC 07 22         [ 2] 3094 	jp syntax_error
      0011F3 84               [ 1] 3095 1$: pop a 
      0011F4 81               [ 4] 3096 	ret 
                                   3097 
                                   3098 
                                   3099 ;-------------------------------
                                   3100 ; parse embedded BASIC routines 
                                   3101 ; arguments list.
                                   3102 ; arg_list::=  rel[','rel]*
                                   3103 ; all arguments are of integer type
                                   3104 ; input:
                                   3105 ;   none
                                   3106 ; output:
                                   3107 ;   A 			number of arguments pushed on dstack  
                                   3108 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                           000001  3109 	ARG_CNT=1 
      0011F5                       3110 arg_list:
      0011F5 4B 00            [ 1] 3111 	push #0  
      0011F7 CD 13 33         [ 4] 3112 1$: call relation
      0011FA A1 00            [ 1] 3113 	cp a,#TK_NONE 
      0011FC 27 19            [ 1] 3114 	jreq 5$
      0011FE A1 03            [ 1] 3115 	cp a,#TK_INTGR
      001200 26 12            [ 1] 3116 	jrne 4$
      001202 CD 0F C5         [ 4] 3117 3$: call dpush 
      001205 0C 01            [ 1] 3118     inc (ARG_CNT,sp)
      001207 CD 08 08         [ 4] 3119 	call next_token 
      00120A A1 00            [ 1] 3120 	cp a,#TK_NONE 
      00120C 27 09            [ 1] 3121 	jreq 5$ 
      00120E A1 0B            [ 1] 3122 	cp a,#TK_COMMA 
      001210 26 02            [ 1] 3123 	jrne 4$
      001212 20 E3            [ 2] 3124 	jra 1$ 
      001214 CD 0F BE         [ 4] 3125 4$:	call unget_token 
      001217 84               [ 1] 3126 5$:	pop a 
      001218 81               [ 4] 3127 	ret 
                                   3128 
                                   3129 
                                   3130 
                                   3131 ;--------------------------------
                                   3132 ;   BASIC commnands 
                                   3133 ;--------------------------------
                                   3134 
                                   3135 ;--------------------------------
                                   3136 ;  arithmetic and relational 
                                   3137 ;  routines
                                   3138 ;  operators precedence
                                   3139 ;  highest to lowest
                                   3140 ;  operators on same row have 
                                   3141 ;  same precedence and are executed
                                   3142 ;  from left to right.
                                   3143 ;	'*','/','%'
                                   3144 ;   '-','+'
                                   3145 ;   '=','>','<','>=','<=','<>','><'
                                   3146 ;   '<>' and '><' are equivalent for not equal.
                                   3147 ;--------------------------------
                                   3148 
                                   3149 ;---------------------
                                   3150 ; return array element
                                   3151 ; address from @(expr)
                                   3152 ; input:
                                   3153 ;   A 		TK_ARRAY
                                   3154 ; output:
                                   3155 ;   A 		TK_INTGR
                                   3156 ;	X 		element address 
                                   3157 ;----------------------
      001219                       3158 get_array_element:
      001219 CD 0F F9         [ 4] 3159 	call ddrop 
      00121C A6 09            [ 1] 3160 	ld a,#TK_LPAREN 
      00121E CD 11 E8         [ 4] 3161 	call expect
      001221 CD 13 33         [ 4] 3162 	call relation 
      001224 A1 03            [ 1] 3163 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001226 27 03            [ 1] 3164 	jreq 1$
      001228 CC 07 22         [ 2] 3165 	jp syntax_error
      00122B 89               [ 2] 3166 1$: pushw x 
      00122C A6 0A            [ 1] 3167 	ld a,#TK_RPAREN 
      00122E CD 11 E8         [ 4] 3168 	call expect
                                   3169 	; check for bounds 
      001231 85               [ 2] 3170 	popw x   
      001232 C3 00 22         [ 2] 3171 	cpw x,array_size 
      001235 23 05            [ 2] 3172 	jrule 3$
                                   3173 ; bounds {1..array_size}	
      001237 A6 0A            [ 1] 3174 2$: ld a,#ERR_BAD_VALUE 
      001239 CC 07 24         [ 2] 3175 	jp tb_error 
      00123C 5D               [ 2] 3176 3$: tnzw  x
      00123D 27 F8            [ 1] 3177 	jreq 2$ 
      00123F 58               [ 2] 3178 	sllw x 
      001240 89               [ 2] 3179 	pushw x 
      001241 CE 00 20         [ 2] 3180 	ldw x,array_addr  
      001244 72 F0 01         [ 2] 3181 	subw x,(1,sp)
      001247                       3182 	_drop 2   
      001247 5B 02            [ 2]    1     addw sp,#2 
      001249 A6 03            [ 1] 3183 	ld a,#TK_INTGR
      00124B 81               [ 4] 3184 	ret 
                                   3185 
                                   3186 ;***********************************
                                   3187 ;   expression parse,execute 
                                   3188 ;***********************************
                                   3189 ;-----------------------------------
                                   3190 ; factor ::= ['+'|'-'|e] var | @ |
                                   3191 ;			 integer | function |
                                   3192 ;			 '('relation')' 
                                   3193 ; output:
                                   3194 ;   A    token attribute 
                                   3195 ;   X 	 integer
                                   3196 ; ---------------------------------
                           000001  3197 	NEG=1
                           000001  3198 	VSIZE=1
      00124C                       3199 factor:
      00124C                       3200 	_vars VSIZE 
      00124C 52 01            [ 2]    1     sub sp,#VSIZE 
      00124E CD 08 08         [ 4] 3201 	call next_token
      001251 A1 02            [ 1] 3202 	cp a,#CMD_END 
      001253 2B 4A            [ 1] 3203 	jrmi 20$
      001255 6B 01            [ 1] 3204 1$:	ld (NEG,sp),a 
      001257 A4 30            [ 1] 3205 	and a,#TK_GRP_MASK
      001259 A1 10            [ 1] 3206 	cp a,#TK_GRP_ADD 
      00125B 27 04            [ 1] 3207 	jreq 2$
      00125D 7B 01            [ 1] 3208 	ld a,(NEG,sp)
      00125F 20 03            [ 2] 3209 	jra 4$  
      001261                       3210 2$:	
      001261 CD 08 08         [ 4] 3211 	call next_token 
      001264                       3212 4$:	
      001264 A1 07            [ 1] 3213 	cp a,#TK_FUNC 
      001266 26 03            [ 1] 3214 	jrne 5$ 
      001268 FD               [ 4] 3215 	call (x) 
      001269 20 2B            [ 2] 3216 	jra 18$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00126B                       3217 5$:
      00126B A1 03            [ 1] 3218 	cp a,#TK_INTGR
      00126D 26 02            [ 1] 3219 	jrne 6$
      00126F 20 25            [ 2] 3220 	jra 18$
      001271                       3221 6$:
      001271 A1 05            [ 1] 3222 	cp a,#TK_ARRAY
      001273 26 06            [ 1] 3223 	jrne 10$
      001275 CD 12 19         [ 4] 3224 	call get_array_element
      001278 FE               [ 2] 3225 	ldw x,(x)
      001279 20 1B            [ 2] 3226 	jra 18$ 
      00127B                       3227 10$:
      00127B A1 04            [ 1] 3228 	cp a,#TK_VAR 
      00127D 26 03            [ 1] 3229 	jrne 12$
      00127F FE               [ 2] 3230 	ldw x,(x)
      001280 20 14            [ 2] 3231 	jra 18$
      001282                       3232 12$:			
      001282 A1 09            [ 1] 3233 	cp a,#TK_LPAREN
      001284 26 0A            [ 1] 3234 	jrne 16$
      001286 CD 13 33         [ 4] 3235 	call relation
      001289 A6 0A            [ 1] 3236 	ld a,#TK_RPAREN 
      00128B CD 11 E8         [ 4] 3237 	call expect
      00128E 20 06            [ 2] 3238 	jra 18$	
      001290                       3239 16$:
      001290 CD 0F BE         [ 4] 3240 	call unget_token
      001293 4F               [ 1] 3241 	clr a 
      001294 20 09            [ 2] 3242 	jra 20$ 
      001296                       3243 18$: 
      001296 A6 11            [ 1] 3244 	ld a,#TK_MINUS 
      001298 11 01            [ 1] 3245 	cp a,(NEG,sp)
      00129A 26 01            [ 1] 3246 	jrne 19$
      00129C 50               [ 2] 3247 	negw x
      00129D                       3248 19$:
      00129D A6 03            [ 1] 3249 	ld a,#TK_INTGR
      00129F                       3250 20$:
      00129F                       3251 	_drop VSIZE
      00129F 5B 01            [ 2]    1     addw sp,#VSIZE 
      0012A1 81               [ 4] 3252 	ret
                                   3253 
                                   3254 ;-----------------------------------
                                   3255 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3256 ; output:
                                   3257 ;   A    	token attribute 
                                   3258 ;	X		integer
                                   3259 ;-----------------------------------
                           000001  3260 	N1=1
                           000003  3261 	N2=3
                           000005  3262 	MULOP=5
                           000005  3263 	VSIZE=5
      0012A2                       3264 term:
      0012A2                       3265 	_vars VSIZE
      0012A2 52 05            [ 2]    1     sub sp,#VSIZE 
      0012A4 CD 12 4C         [ 4] 3266 	call factor
      0012A7 A1 02            [ 1] 3267 	cp a,#CMD_END
      0012A9 2B 41            [ 1] 3268 	jrmi term_exit
      0012AB                       3269 term01:	 ; check for  operator 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0012AB 1F 03            [ 2] 3270 	ldw (N2,sp),x  ; save first factor 
      0012AD CD 08 08         [ 4] 3271 	call next_token
      0012B0 A1 02            [ 1] 3272 	cp a,#2
      0012B2 2B 34            [ 1] 3273 	jrmi 9$
      0012B4 6B 05            [ 1] 3274 0$:	ld (MULOP,sp),a
      0012B6 A4 30            [ 1] 3275 	and a,#TK_GRP_MASK
      0012B8 A1 20            [ 1] 3276 	cp a,#TK_GRP_MULT
      0012BA 27 07            [ 1] 3277 	jreq 1$
      0012BC 7B 05            [ 1] 3278 	ld a,(MULOP,sp) 
      0012BE CD 0F BE         [ 4] 3279 	call unget_token 
      0012C1 20 25            [ 2] 3280 	jra 9$
      0012C3                       3281 1$:	; got *|/|%
      0012C3 CD 12 4C         [ 4] 3282 	call factor
      0012C6 A1 03            [ 1] 3283 	cp a,#TK_INTGR
      0012C8 27 03            [ 1] 3284 	jreq 2$ 
      0012CA CC 07 22         [ 2] 3285 	jp syntax_error
      0012CD 1F 01            [ 2] 3286 2$:	ldw (N1,sp),x  
      0012CF 7B 05            [ 1] 3287 	ld a,(MULOP,sp) 
      0012D1 A1 20            [ 1] 3288 	cp a,#TK_MULT 
      0012D3 26 05            [ 1] 3289 	jrne 3$
      0012D5 CD 10 C1         [ 4] 3290 	call multiply 
      0012D8 20 D1            [ 2] 3291 	jra term01
      0012DA A1 21            [ 1] 3292 3$: cp a,#TK_DIV 
      0012DC 26 05            [ 1] 3293 	jrne 4$ 
      0012DE CD 11 09         [ 4] 3294 	call divide 
      0012E1 20 C8            [ 2] 3295 	jra term01 
      0012E3 CD 11 4D         [ 4] 3296 4$: call modulo
      0012E6 20 C3            [ 2] 3297 	jra term01 
      0012E8 1E 03            [ 2] 3298 9$: ldw x,(N2,sp)  
      0012EA A6 03            [ 1] 3299 	ld a,#TK_INTGR 	
      0012EC                       3300 term_exit:
      0012EC                       3301 	_drop VSIZE 
      0012EC 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012EE 81               [ 4] 3302 	ret 
                                   3303 
                                   3304 ;-------------------------------
                                   3305 ;  expr ::= term [['+'|'-'] term]*
                                   3306 ;  result range {-32768..32767}
                                   3307 ;  output:
                                   3308 ;   A    token attribute 
                                   3309 ;   X	 integer   
                                   3310 ;-------------------------------
                           000001  3311 	N1=1 
                           000003  3312 	N2=3
                           000005  3313 	OP=5 
                           000005  3314 	VSIZE=5 
      0012EF                       3315 expression:
      0012EF                       3316 	_vars VSIZE 
      0012EF 52 05            [ 2]    1     sub sp,#VSIZE 
      0012F1 CD 12 A2         [ 4] 3317 	call term
      0012F4 A1 02            [ 1] 3318 	cp a,#CMD_END 
      0012F6 2B 38            [ 1] 3319 	jrmi expr_exit 
      0012F8 1F 03            [ 2] 3320 0$:	ldw (N2,sp),x 
      0012FA CD 08 08         [ 4] 3321 	call next_token
      0012FD A1 02            [ 1] 3322 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012FF 2B 2B            [ 1] 3323 	jrmi 9$ 
      001301 6B 05            [ 1] 3324 1$:	ld (OP,sp),a  
      001303 A4 30            [ 1] 3325 	and a,#TK_GRP_MASK
      001305 A1 10            [ 1] 3326 	cp a,#TK_GRP_ADD 
      001307 27 07            [ 1] 3327 	jreq 2$ 
      001309 7B 05            [ 1] 3328 	ld a,(OP,sp)
      00130B CD 0F BE         [ 4] 3329 	call unget_token
      00130E 20 1C            [ 2] 3330 	jra 9$
      001310                       3331 2$: 
      001310 CD 12 A2         [ 4] 3332 	call term
      001313 A1 03            [ 1] 3333 	cp a,#TK_INTGR 
      001315 27 03            [ 1] 3334 	jreq 3$
      001317 CC 07 22         [ 2] 3335 	jp syntax_error
      00131A 1F 01            [ 2] 3336 3$:	ldw (N1,sp),x 
      00131C 7B 05            [ 1] 3337 	ld a,(OP,sp)
      00131E A1 10            [ 1] 3338 	cp a,#TK_PLUS 
      001320 26 05            [ 1] 3339 	jrne 4$
      001322 CD 10 B3         [ 4] 3340 	call add 
      001325 20 D1            [ 2] 3341 	jra 0$ 
      001327 CD 10 BB         [ 4] 3342 4$:	call substract
      00132A 20 CC            [ 2] 3343 	jra 0$
      00132C 1E 03            [ 2] 3344 9$: ldw x,(N2,sp)
      00132E A6 03            [ 1] 3345 	ld a,#TK_INTGR	
      001330                       3346 expr_exit:
      001330                       3347 	_drop VSIZE 
      001330 5B 05            [ 2]    1     addw sp,#VSIZE 
      001332 81               [ 4] 3348 	ret 
                                   3349 
                                   3350 ;---------------------------------------------
                                   3351 ; rel ::= expr rel_op expr
                                   3352 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3353 ;  relation return 1 | 0  for true | false 
                                   3354 ;  output:
                                   3355 ;    A 		token attribute  
                                   3356 ;	 X		1|0
                                   3357 ;---------------------------------------------
                           000001  3358 	N1=1
                           000003  3359 	N2=3
                           000005  3360 	RELOP=5
                           000005  3361 	VSIZE=5 
      001333                       3362 relation: 
      001333                       3363 	_vars VSIZE
      001333 52 05            [ 2]    1     sub sp,#VSIZE 
      001335 CD 12 EF         [ 4] 3364 	call expression
      001338 A1 02            [ 1] 3365 	cp a,#CMD_END  
      00133A 2B 4B            [ 1] 3366 	jrmi rel_exit 
                                   3367 	; expect rel_op or leave 
      00133C 1F 03            [ 2] 3368 	ldw (N2,sp),x 
      00133E CD 08 08         [ 4] 3369 	call next_token 
      001341 A1 02            [ 1] 3370 	cp a,#2
      001343 2B 3E            [ 1] 3371 	jrmi 9$
      001345                       3372 1$:	
      001345 6B 05            [ 1] 3373 	ld (RELOP,sp),a 
      001347 A4 30            [ 1] 3374 	and a,#TK_GRP_MASK
      001349 A1 30            [ 1] 3375 	cp a,#TK_GRP_RELOP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00134B 27 07            [ 1] 3376 	jreq 2$
      00134D 7B 05            [ 1] 3377 	ld a,(RELOP,sp)
      00134F CD 0F BE         [ 4] 3378 	call unget_token  
      001352 20 2F            [ 2] 3379 	jra 9$
      001354                       3380 2$:	; expect another expression or error 
      001354 CD 12 EF         [ 4] 3381 	call expression
      001357 A1 03            [ 1] 3382 	cp a,#TK_INTGR 
      001359 27 03            [ 1] 3383 	jreq 3$
      00135B CC 07 22         [ 2] 3384 	jp syntax_error 
      00135E 1F 01            [ 2] 3385 3$:	ldw (N1,sp),x 
      001360 CD 10 BB         [ 4] 3386 	call substract
      001363 26 06            [ 1] 3387 	jrne 4$
      001365 35 02 00 0A      [ 1] 3388 	mov acc8,#2 ; n1==n2
      001369 20 0C            [ 2] 3389 	jra 6$ 
      00136B                       3390 4$: 
      00136B 2C 06            [ 1] 3391 	jrsgt 5$  
      00136D 35 04 00 0A      [ 1] 3392 	mov acc8,#4 ; n1<2 
      001371 20 04            [ 2] 3393 	jra 6$
      001373                       3394 5$:
      001373 35 01 00 0A      [ 1] 3395 	mov acc8,#1 ; n1>n2 
      001377                       3396 6$:
      001377 5F               [ 1] 3397 	clrw x 
      001378 C6 00 0A         [ 1] 3398 	ld a, acc8  
      00137B 14 05            [ 1] 3399 	and a,(RELOP,sp)
      00137D 4D               [ 1] 3400 	tnz a 
      00137E 27 05            [ 1] 3401 	jreq 10$
      001380 5C               [ 1] 3402 	incw x 
      001381                       3403 7$:	 
      001381 20 02            [ 2] 3404 	jra 10$  	
      001383 1E 03            [ 2] 3405 9$: ldw x,(N2,sp)
      001385                       3406 10$:
      001385 A6 03            [ 1] 3407 	ld a,#TK_INTGR
      001387                       3408 rel_exit: 	 
      001387                       3409 	_drop VSIZE
      001387 5B 05            [ 2]    1     addw sp,#VSIZE 
      001389 81               [ 4] 3410 	ret 
                                   3411 
                                   3412 ;--------------------------------
                                   3413 ; BASIC: SHOW 
                                   3414 ;  show content of dstack,cstack
                                   3415 ;--------------------------------
      00138A                       3416 show:
      00138A C6 00 07         [ 1] 3417 	ld a,base 
      00138D 88               [ 1] 3418 	push a 
      00138E CD 10 53         [ 4] 3419 	call dots
      001391 CD 10 86         [ 4] 3420 	call dotr 
      001394 84               [ 1] 3421 	pop a 
      001395 C7 00 07         [ 1] 3422 	ld base,a 
      001398 4F               [ 1] 3423 	clr a 
      001399 81               [ 4] 3424 	ret
                                   3425 
                                   3426 ;--------------------------------------------
                                   3427 ; BASIC: HEX 
                                   3428 ; select hexadecimal base for integer print
                                   3429 ;---------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00139A                       3430 hex_base:
      00139A 35 10 00 07      [ 1] 3431 	mov base,#16 
      00139E 81               [ 4] 3432 	ret 
                                   3433 
                                   3434 ;--------------------------------------------
                                   3435 ; BASIC: DEC 
                                   3436 ; select decimal base for integer print
                                   3437 ;---------------------------------------------
      00139F                       3438 dec_base:
      00139F 35 0A 00 07      [ 1] 3439 	mov base,#10
      0013A3 81               [ 4] 3440 	ret 
                                   3441 
                                   3442 ;------------------------
                                   3443 ; BASIC: SIZE 
                                   3444 ; return free size in text area
                                   3445 ; output:
                                   3446 ;   A 		TK_INTGR
                                   3447 ;   X 	    size integer
                                   3448 ;--------------------------
      0013A4                       3449 size:
      0013A4 AE 16 C8         [ 2] 3450 	ldw x,#tib 
      0013A7 72 B0 00 1D      [ 2] 3451 	subw x,txtend 
      0013AB A6 03            [ 1] 3452 	ld a,#TK_INTGR
      0013AD 81               [ 4] 3453 	ret 
                                   3454 
                                   3455 
                                   3456 ;------------------------
                                   3457 ; BASIC: UBOUND  
                                   3458 ; return array variable size 
                                   3459 ; output:
                                   3460 ;   A 		TK_INTGR
                                   3461 ;   X 	    array size 
                                   3462 ;--------------------------
      0013AE                       3463 ubound:
      0013AE AE 16 C8         [ 2] 3464 	ldw x,#tib
      0013B1 72 B0 00 1D      [ 2] 3465 	subw x,txtend 
      0013B5 54               [ 2] 3466 	srlw x 
      0013B6 CF 00 22         [ 2] 3467 	ldw array_size,x
      0013B9 A6 03            [ 1] 3468 	ld a,#TK_INTGR
      0013BB 81               [ 4] 3469 	ret 
                                   3470 
                                   3471 ;-----------------------------
                                   3472 ; BASIC: LET var=expr 
                                   3473 ; variable assignement 
                                   3474 ; output:
                                   3475 ;   A 		TK_NONE 
                                   3476 ;-----------------------------
      0013BC                       3477 let:
      0013BC CD 08 08         [ 4] 3478 	call next_token 
      0013BF A1 04            [ 1] 3479 	cp a,#TK_VAR 
      0013C1 27 03            [ 1] 3480 	jreq let02
      0013C3 CC 07 22         [ 2] 3481 	jp syntax_error
      0013C6                       3482 let02:
      0013C6 CD 0F C5         [ 4] 3483 	call dpush 
      0013C9 CD 08 08         [ 4] 3484 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013CC A1 32            [ 1] 3485 	cp a,#TK_EQUAL
      0013CE 27 03            [ 1] 3486 	jreq 1$
      0013D0 CC 07 22         [ 2] 3487 	jp syntax_error
      0013D3                       3488 1$:	
      0013D3 CD 13 33         [ 4] 3489 	call relation   
      0013D6 A1 03            [ 1] 3490 	cp a,#TK_INTGR 
      0013D8 27 03            [ 1] 3491 	jreq 2$
      0013DA CC 07 22         [ 2] 3492 	jp syntax_error
      0013DD                       3493 2$:	
      0013DD 90 93            [ 1] 3494 	ldw y,x 
      0013DF CD 0F D2         [ 4] 3495 	call dpop  
      0013E2 FF               [ 2] 3496 	ldw (x),y   
      0013E3 81               [ 4] 3497 	ret 
                                   3498 
                                   3499 ;----------------------------
                                   3500 ; BASIC: LIST [[start][,end]]
                                   3501 ; list program lines 
                                   3502 ; form start to end 
                                   3503 ; if empty argument list then 
                                   3504 ; list all.
                                   3505 ;----------------------------
                           000001  3506 	FIRST=1
                           000003  3507 	LAST=3 
                           000005  3508 	LN_PTR=5
                           000006  3509 	VSIZE=6 
      0013E4                       3510 list:
      0013E4                       3511 	_vars VSIZE
      0013E4 52 06            [ 2]    1     sub sp,#VSIZE 
      0013E6 CE 00 1B         [ 2] 3512 	ldw x,txtbgn 
      0013E9 C3 00 1D         [ 2] 3513 	cpw x,txtend 
      0013EC 2B 03            [ 1] 3514 	jrmi 1$
      0013EE CC 14 64         [ 2] 3515 	jp list_exit ; nothing to list 
      0013F1 1F 05            [ 2] 3516 1$:	ldw (LN_PTR,sp),x 
      0013F3 FE               [ 2] 3517 	ldw x,(x) 
      0013F4 1F 01            [ 2] 3518 	ldw (FIRST,sp),x ; list from first line 
      0013F6 AE 7F FF         [ 2] 3519 	ldw x,#0x7fff ; biggest line number 
      0013F9 1F 03            [ 2] 3520 	ldw (LAST,sp),x 
      0013FB CD 11 F5         [ 4] 3521 	call arg_list
      0013FE 4D               [ 1] 3522 	tnz a
      0013FF 27 3F            [ 1] 3523 	jreq list_start 
      001401 A1 02            [ 1] 3524 	cp a,#2 
      001403 27 07            [ 1] 3525 	jreq 4$
      001405 A1 01            [ 1] 3526 	cp a,#1 
      001407 27 06            [ 1] 3527 	jreq first_line 
      001409 CC 07 22         [ 2] 3528 	jp syntax_error 
      00140C CD 0F DF         [ 4] 3529 4$:	call dswap
      00140F                       3530 first_line:
      00140F CD 0F D2         [ 4] 3531 	call dpop 
      001412 1F 01            [ 2] 3532 	ldw (FIRST,sp),x 
      001414 A1 01            [ 1] 3533 	cp a,#1 
      001416 27 05            [ 1] 3534 	jreq lines_skip 	
      001418                       3535 last_line:
      001418 CD 0F D2         [ 4] 3536 	call dpop 
      00141B 1F 03            [ 2] 3537 	ldw (LAST,sp),x 
      00141D                       3538 lines_skip:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00141D CE 00 1B         [ 2] 3539 	ldw x,txtbgn
      001420 1F 05            [ 2] 3540 2$:	ldw (LN_PTR,sp),x 
      001422 C3 00 1D         [ 2] 3541 	cpw x,txtend 
      001425 2A 3D            [ 1] 3542 	jrpl list_exit 
      001427 FE               [ 2] 3543 	ldw x,(x) ;lineno 
      001428 13 01            [ 2] 3544 	cpw x,(FIRST,sp)
      00142A 2A 14            [ 1] 3545 	jrpl list_start 
      00142C 1E 05            [ 2] 3546 	ldw x,(LN_PTR,sp) 
      00142E 1C 00 02         [ 2] 3547 	addw x,#2 
      001431 F6               [ 1] 3548 	ld a,(x)
      001432 5C               [ 1] 3549 	incw x 
      001433 C7 00 0A         [ 1] 3550 	ld acc8,a 
      001436 72 5F 00 09      [ 1] 3551 	clr acc16 
      00143A 72 BB 00 09      [ 2] 3552 	addw x,acc16
      00143E 20 E0            [ 2] 3553 	jra 2$ 
                                   3554 ; print loop
      001440                       3555 list_start:
      001440 1E 05            [ 2] 3556 	ldw x,(LN_PTR,sp)
      001442                       3557 3$:	
      001442 CD 14 7B         [ 4] 3558 	call prt_basic_line
      001445 1E 05            [ 2] 3559 	ldw x,(LN_PTR,sp)
      001447 E6 02            [ 1] 3560 	ld a,(2,x)
      001449 C7 00 0A         [ 1] 3561 	ld acc8,a 
      00144C 72 5F 00 09      [ 1] 3562 	clr acc16 
      001450 72 BB 00 09      [ 2] 3563 	addw x,acc16
      001454 C3 00 1D         [ 2] 3564 	cpw x,txtend 
      001457 2A 0B            [ 1] 3565 	jrpl list_exit
      001459 1F 05            [ 2] 3566 	ldw (LN_PTR,sp),x
      00145B FE               [ 2] 3567 	ldw x,(x)
      00145C 13 03            [ 2] 3568 	cpw x,(LAST,sp)  
      00145E 2C 04            [ 1] 3569 	jrsgt list_exit 
      001460 1E 05            [ 2] 3570 	ldw x,(LN_PTR,sp)
      001462 20 DE            [ 2] 3571 	jra 3$
      001464                       3572 list_exit:
      001464                       3573 	_drop VSIZE 
      001464 5B 06            [ 2]    1     addw sp,#VSIZE 
      001466 81               [ 4] 3574 	ret
                                   3575 
                                   3576 ;-------------------------
                                   3577 ; print counted string 
                                   3578 ; input:
                                   3579 ;   X 		address of string
                                   3580 ;--------------------------
      001467                       3581 prt_cmd_name:
      001467 F6               [ 1] 3582 	ld a,(x)
      001468 5C               [ 1] 3583 	incw x
      001469 A4 0F            [ 1] 3584 	and a,#15  
      00146B 88               [ 1] 3585 	push a 
      00146C 0D 01            [ 1] 3586 1$: tnz (1,sp) 
      00146E 27 09            [ 1] 3587 	jreq 9$
      001470 F6               [ 1] 3588 	ld a,(x)
      001471 CD 01 9E         [ 4] 3589 	call putc 
      001474 5C               [ 1] 3590 	incw x
      001475 0A 01            [ 1] 3591 	dec (1,sp)	 
      001477 20 F3            [ 2] 3592 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001479 84               [ 1] 3593 9$: pop a 
      00147A 81               [ 4] 3594 	ret	
                                   3595 
                                   3596 ;--------------------------
                                   3597 ; decompile line from token list 
                                   3598 ; input:
                                   3599 ;   X 		pointer at line
                                   3600 ; output:
                                   3601 ;   none 
                                   3602 ;--------------------------	
                           000001  3603 	BASE_SAV=1
                           000002  3604 	WIDTH_SAV=2
                           000003  3605 	XSAVE=3
                           000005  3606 	LLEN=5
                           000005  3607 	VSIZE=5 
      00147B                       3608 prt_basic_line:
      00147B                       3609 	_vars VSIZE 
      00147B 52 05            [ 2]    1     sub sp,#VSIZE 
      00147D C6 00 07         [ 1] 3610 	ld a,base
      001480 6B 01            [ 1] 3611 	ld (BASE_SAV,sp),a  
      001482 C6 00 25         [ 1] 3612 	ld a,tab_width 
      001485 6B 02            [ 1] 3613 	ld (WIDTH_SAV,sp),a 
      001487 CF 00 14         [ 2] 3614 	ldw ptr16,x
      00148A FE               [ 2] 3615 	ldw x,(x)
      00148B 35 0A 00 07      [ 1] 3616 	mov base,#10
      00148F 35 05 00 25      [ 1] 3617 	mov tab_width,#5
      001493 CD 09 A7         [ 4] 3618 	call print_int ; print line number 
      001496 A6 20            [ 1] 3619 	ld a,#SPACE 
      001498 CD 01 9E         [ 4] 3620 	call putc 
      00149B 72 5F 00 25      [ 1] 3621 	clr tab_width
      00149F AE 00 02         [ 2] 3622 	ldw x,#2
      0014A2 72 D6 00 14      [ 4] 3623 	ld a,([ptr16],x)
      0014A6 6B 05            [ 1] 3624 	ld (LLEN,sp),a 
      0014A8 5C               [ 1] 3625 	incw x
      0014A9 9F               [ 1] 3626 1$:	ld a,xl 
      0014AA 11 05            [ 1] 3627 	cp a,(LLEN,sp)
      0014AC 2B 03            [ 1] 3628 	jrmi 19$
      0014AE CC 15 C3         [ 2] 3629 	jp 90$
      0014B1                       3630 19$:	 
      0014B1 72 D6 00 14      [ 4] 3631 	ld a,([ptr16],x)
      0014B5 5C               [ 1] 3632 	incw x 
      0014B6 1F 03            [ 2] 3633 	ldw (XSAVE,sp),x 
      0014B8 A1 06            [ 1] 3634 	cp a,#TK_CMD 
      0014BA 27 04            [ 1] 3635 	jreq 2$
      0014BC A1 07            [ 1] 3636 	cp a,#TK_FUNC 
      0014BE 26 2F            [ 1] 3637 	jrne 4$
      0014C0                       3638 2$:	
      0014C0 72 DE 00 14      [ 5] 3639 	ldw x,([ptr16],x)
      0014C4 A3 17 05         [ 2] 3640 	cpw x,#rem 
      0014C7 26 14            [ 1] 3641 	jrne 3$
      0014C9 A6 27            [ 1] 3642 	ld a,#''
      0014CB CD 01 9E         [ 4] 3643 	call putc 
      0014CE 1E 03            [ 2] 3644 	ldw x,(XSAVE,sp)
      0014D0 1C 00 02         [ 2] 3645 	addw x,#2
      0014D3 72 BB 00 14      [ 2] 3646 	addw x,ptr16  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014D7 CD 01 B0         [ 4] 3647 	call puts 
      0014DA CC 15 C3         [ 2] 3648 	jp 90$ 
      0014DD CD 11 5E         [ 4] 3649 3$:	call cmd_name
      0014E0 CD 14 67         [ 4] 3650 	call prt_cmd_name
      0014E3 A6 20            [ 1] 3651 	ld a,#SPACE 
      0014E5 CD 01 9E         [ 4] 3652 	call putc 
      0014E8 1E 03            [ 2] 3653 	ldw x,(XSAVE,sp)
      0014EA 1C 00 02         [ 2] 3654 	addw x,#2
      0014ED 20 BA            [ 2] 3655 	jra 1$
      0014EF A1 08            [ 1] 3656 4$: cp a,#TK_QSTR 
      0014F1 26 18            [ 1] 3657 	jrne 5$
      0014F3 A6 22            [ 1] 3658 	ld a,#'" 
      0014F5 CD 01 9E         [ 4] 3659 	call putc 
      0014F8 72 BB 00 14      [ 2] 3660 	addw x,ptr16
      0014FC CD 01 B0         [ 4] 3661 	call puts 
      0014FF A6 22            [ 1] 3662 	ld a,#'" 
      001501 CD 01 9E         [ 4] 3663 	call putc 
      001504 5C               [ 1] 3664 	incw x
      001505 72 B0 00 14      [ 2] 3665 	subw x,ptr16  
      001509 20 9E            [ 2] 3666 	jra 1$
      00150B A1 04            [ 1] 3667 5$:	cp a,#TK_VAR
      00150D 26 1A            [ 1] 3668 	jrne 6$ 
      00150F 72 DE 00 14      [ 5] 3669 	ldw x,([ptr16],x)
      001513 1D 00 26         [ 2] 3670 	subw x,#vars 
      001516 9F               [ 1] 3671 	ld a,xl
      001517 44               [ 1] 3672 	srl a 
      001518 AB 41            [ 1] 3673 	add a,#'A 
      00151A CD 01 9E         [ 4] 3674 	call putc 
      00151D A6 20            [ 1] 3675 	ld a,#SPACE 
      00151F CD 01 9E         [ 4] 3676 	call putc 
      001522 1E 03            [ 2] 3677 	ldw x,(XSAVE,sp)
      001524 1C 00 02         [ 2] 3678 	addw x,#2 
      001527 20 80            [ 2] 3679 	jra 1$ 
      001529 A1 05            [ 1] 3680 6$: cp a,#TK_ARRAY 
      00152B 26 0A            [ 1] 3681 	jrne 7$
      00152D A6 40            [ 1] 3682 	ld a,#'@ 
      00152F CD 01 9E         [ 4] 3683 	call putc 
      001532 1E 03            [ 2] 3684 	ldw x,(XSAVE,sp)
      001534 CC 14 A9         [ 2] 3685 	jp 1$ 
      001537 A1 03            [ 1] 3686 7$: cp a,#TK_INTGR 
      001539 26 14            [ 1] 3687 	jrne 8$
      00153B 72 DE 00 14      [ 5] 3688 	ldw x,([ptr16],x)
      00153F CD 09 A7         [ 4] 3689 	call print_int
      001542 A6 20            [ 1] 3690 	ld a,#SPACE 
      001544 CD 01 9E         [ 4] 3691 	call putc 
      001547 1E 03            [ 2] 3692 	ldw x,(XSAVE,sp)
      001549 1C 00 02         [ 2] 3693 	addw x,#2 
      00154C CC 14 A9         [ 2] 3694 	jp 1$
      00154F A1 31            [ 1] 3695 8$: cp a,#TK_GT 
      001551 2B 1A            [ 1] 3696 	jrmi 9$
      001553 A1 35            [ 1] 3697 	cp a,#TK_NE 
      001555 22 16            [ 1] 3698 	jrugt 9$
      001557 A0 31            [ 1] 3699 	sub a,#TK_GT  
      001559 48               [ 1] 3700 	sll a 
      00155A 90 5F            [ 1] 3701 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00155C 90 97            [ 1] 3702 	ld yl,a 
      00155E 72 A9 15 DC      [ 2] 3703 	addw y,#relop_str 
      001562 90 FE            [ 2] 3704 	ldw y,(y)
      001564 93               [ 1] 3705 	ldw x,y 
      001565 CD 01 B0         [ 4] 3706 	call puts 
      001568 1E 03            [ 2] 3707 	ldw x,(XSAVE,sp)
      00156A CC 14 A9         [ 2] 3708 	jp 1$
      00156D A1 10            [ 1] 3709 9$: cp a,#TK_PLUS 
      00156F 26 04            [ 1] 3710 	jrne 10$
      001571 A6 2B            [ 1] 3711 	ld a,#'+
      001573 20 46            [ 2] 3712 	jra 80$ 
      001575 A1 11            [ 1] 3713 10$: cp a,#TK_MINUS
      001577 26 04            [ 1] 3714 	jrne 11$
      001579 A6 2D            [ 1] 3715 	ld a,#'-
      00157B 20 3E            [ 2] 3716 	jra 80$
      00157D A1 20            [ 1] 3717 11$: cp a,#TK_MULT 
      00157F 2B 0E            [ 1] 3718 	jrmi 12$
      001581 A1 22            [ 1] 3719 	cp a,#TK_MOD 
      001583 22 0A            [ 1] 3720 	jrugt 12$
      001585 A0 20            [ 1] 3721 	sub a,#0x20
      001587 5F               [ 1] 3722 	clrw x 
      001588 97               [ 1] 3723 	ld xl,a 
      001589 1C 15 D9         [ 2] 3724 	addw x,#mul_char 
      00158C F6               [ 1] 3725 	ld a,(x)
      00158D 20 2C            [ 2] 3726 	jra 80$ 
      00158F A1 09            [ 1] 3727 12$: cp a,#TK_LPAREN 
      001591 2B 0E            [ 1] 3728 	jrmi 13$
      001593 A1 0C            [ 1] 3729 	cp a,#TK_SHARP 
      001595 22 0A            [ 1] 3730 	jrugt 13$
      001597 A0 09            [ 1] 3731 	sub a,#TK_LPAREN
      001599 5F               [ 1] 3732 	clrw x 
      00159A 97               [ 1] 3733 	ld xl,a 
      00159B 1C 15 D5         [ 2] 3734 	addw x,#single_char 
      00159E F6               [ 1] 3735 	ld a,(x)
      00159F 20 1A            [ 2] 3736 	jra 80$
      0015A1 A1 02            [ 1] 3737 13$: cp a,#TK_CHAR 
      0015A3 26 14            [ 1] 3738 	jrne 14$
      0015A5 A6 5C            [ 1] 3739 	ld a,#'\
      0015A7 CD 01 9E         [ 4] 3740 	call putc 
      0015AA 1E 03            [ 2] 3741 	ldw x,(XSAVE,sp)
      0015AC 72 D6 00 14      [ 4] 3742 	ld a,([ptr16],x)
      0015B0 5C               [ 1] 3743 	incw x 
      0015B1 1F 03            [ 2] 3744 	ldw (XSAVE,sp),x 
      0015B3 CD 01 9E         [ 4] 3745 	call putc 
      0015B6 CC 14 A9         [ 2] 3746 	jp 1$ 
      0015B9 A6 3A            [ 1] 3747 14$: ld a,#':
      0015BB CD 01 9E         [ 4] 3748 80$: call putc 
      0015BE 1E 03            [ 2] 3749 	ldw x,(XSAVE,sp)
      0015C0 CC 14 A9         [ 2] 3750 	jp 1$ 
      0015C3                       3751 90$: 
      0015C3 A6 0D            [ 1] 3752 	ld a,#CR 
      0015C5 CD 01 9E         [ 4] 3753 	call putc
      0015C8 7B 02            [ 1] 3754 	ld a,(WIDTH_SAV,sp) 
      0015CA C7 00 25         [ 1] 3755 	ld tab_width,a 
      0015CD 7B 01            [ 1] 3756 	ld a,(BASE_SAV,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0015CF C7 00 07         [ 1] 3757 	ld base,a
      0015D2                       3758 	_drop VSIZE 
      0015D2 5B 05            [ 2]    1     addw sp,#VSIZE 
      0015D4 81               [ 4] 3759 	ret 	
      0015D5 28 29 2C 23           3760 single_char: .byte '(',')',',','#'
      0015D9 2A 2F 25              3761 mul_char: .byte '*','/','%'
      0015DC 15 E8 15 EA 15 EC 15  3762 relop_str: .word gt,equal,ge,lt,le,ne 
             EF 15 F1 15 F4
      0015E8 3E 00                 3763 gt: .asciz ">"
      0015EA 3D 00                 3764 equal: .asciz "="
      0015EC 3E 3D 00              3765 ge: .asciz ">="
      0015EF 3C 00                 3766 lt: .asciz "<"
      0015F1 3C 3D 00              3767 le: .asciz "<="
      0015F4 3C 3E 00              3768 ne:  .asciz "<>"
                                   3769 
                                   3770 
                                   3771 ;---------------------------------
                                   3772 ; BASIC: PRINT|? arg_list 
                                   3773 ; print values from argument list
                                   3774 ;----------------------------------
                           000001  3775 	COMMA=1
                           000001  3776 	VSIZE=1
      0015F7                       3777 print:
      0015F7 4B 00            [ 1] 3778 push #0 ; local variable COMMA 
      0015F9                       3779 reset_comma:
      0015F9 0F 01            [ 1] 3780 	clr (COMMA,sp)
      0015FB                       3781 prt_loop:
      0015FB CD 13 33         [ 4] 3782 	call relation 
      0015FE A1 01            [ 1] 3783 	cp a,#TK_COLON 
      001600 27 59            [ 1] 3784 	jreq print_exit   
      001602 A1 03            [ 1] 3785 	cp a,#TK_INTGR 
      001604 26 05            [ 1] 3786 	jrne 0$ 
      001606 CD 09 A7         [ 4] 3787 	call print_int 
      001609 20 EE            [ 2] 3788 	jra reset_comma
      00160B                       3789 0$: 	
      00160B CD 08 08         [ 4] 3790 	call next_token
      00160E A1 00            [ 1] 3791 	cp a,#TK_NONE 
      001610 27 49            [ 1] 3792 	jreq print_exit 
      001612 A1 08            [ 1] 3793 1$:	cp a,#TK_QSTR
      001614 26 0E            [ 1] 3794 	jrne 2$   
      001616 CD 01 B0         [ 4] 3795 	call puts
      001619 5C               [ 1] 3796 	incw x 
      00161A 72 B0 00 03      [ 2] 3797 	subw x,basicptr 
      00161E 9F               [ 1] 3798 	ld a,xl 
      00161F C7 00 01         [ 1] 3799 	ld in,a  
      001622 20 D5            [ 2] 3800 	jra reset_comma
      001624 A1 02            [ 1] 3801 2$: cp a,#TK_CHAR 
      001626 26 06            [ 1] 3802 	jrne 3$
      001628 9F               [ 1] 3803 	ld a,xl 
      001629 CD 01 9E         [ 4] 3804 	call putc 
      00162C 20 CB            [ 2] 3805 	jra reset_comma 
      00162E                       3806 3$: 	
      00162E A1 07            [ 1] 3807 	cp a,#TK_FUNC 
      001630 26 06            [ 1] 3808 	jrne 4$ 
      001632 FD               [ 4] 3809 	call (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001633 CD 09 A7         [ 4] 3810 	call print_int 
      001636 20 C1            [ 2] 3811 	jra reset_comma 
      001638                       3812 4$: 
      001638 A1 0B            [ 1] 3813 	cp a,#TK_COMMA 
      00163A 26 05            [ 1] 3814 	jrne 5$
      00163C 03 01            [ 1] 3815 	cpl (COMMA,sp) 
      00163E CC 15 FB         [ 2] 3816 	jp prt_loop   
      001641                       3817 5$: 
      001641 A1 0C            [ 1] 3818 	cp a,#TK_SHARP
      001643 26 13            [ 1] 3819 	jrne 7$
      001645 CD 08 08         [ 4] 3820 	call next_token
      001648 A1 03            [ 1] 3821 	cp a,#TK_INTGR 
      00164A 27 03            [ 1] 3822 	jreq 6$
      00164C CC 07 22         [ 2] 3823 	jp syntax_error 
      00164F                       3824 6$:
      00164F 9F               [ 1] 3825 	ld a,xl 
      001650 A4 0F            [ 1] 3826 	and a,#15 
      001652 C7 00 25         [ 1] 3827 	ld tab_width,a 
      001655 CC 15 F9         [ 2] 3828 	jp reset_comma 
      001658                       3829 7$:	
      001658 CD 0F BE         [ 4] 3830 	call unget_token
      00165B                       3831 print_exit:
      00165B 0D 01            [ 1] 3832 	tnz (COMMA,sp)
      00165D 26 05            [ 1] 3833 	jrne 9$
      00165F A6 0D            [ 1] 3834 	ld a,#CR 
      001661 CD 01 9E         [ 4] 3835     call putc 
      001664                       3836 9$:	_drop VSIZE 
      001664 5B 01            [ 2]    1     addw sp,#VSIZE 
      001666 81               [ 4] 3837 	ret 
                                   3838 
                                   3839 ;----------------------
                                   3840 ; 'save_context' and
                                   3841 ; 'rest_context' must be 
                                   3842 ; called at the same 
                                   3843 ; call stack depth 
                                   3844 ; i.e. SP must have the 
                                   3845 ; save value at  
                                   3846 ; entry point of both 
                                   3847 ; routine. 
                                   3848 ;---------------------
                           000006  3849 	CTXT_SIZE=6 ; size of saved data 
                                   3850 ;--------------------
                                   3851 ; save current BASIC
                                   3852 ; interpreter context 
                                   3853 ; on cstack 
                                   3854 ;--------------------
      001667                       3855 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001667                       3856 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001667                       3857 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001667                       3858 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001667                       3859 	_arg CNT 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                           000008     1     CNT=ARG_OFS+6 
      001667                       3860 save_context:
      001667 CE 00 03         [ 2] 3861 	ldw x,basicptr 
      00166A 1F 03            [ 2] 3862 	ldw (BPTR,sp),x
      00166C CE 00 05         [ 2] 3863 	ldw x,lineno 
      00166F 1F 05            [ 2] 3864 	ldw (LNO,sp),x 
      001671 C6 00 01         [ 1] 3865 	ld a,in 
      001674 6B 07            [ 1] 3866 	ld (IN,sp),a
      001676 C6 00 02         [ 1] 3867 	ld a,count 
      001679 6B 08            [ 1] 3868 	ld (CNT,sp),a  
      00167B 81               [ 4] 3869 	ret
                                   3870 
                                   3871 ;-----------------------
                                   3872 ; restore previously saved 
                                   3873 ; BASIC interpreter context 
                                   3874 ; from cstack 
                                   3875 ;-------------------------
      00167C                       3876 rest_context:
      00167C 1E 03            [ 2] 3877 	ldw x,(BPTR,sp)
      00167E CF 00 03         [ 2] 3878 	ldw basicptr,x 
      001681 1E 05            [ 2] 3879 	ldw x,(LNO,sp)
      001683 CF 00 05         [ 2] 3880 	ldw lineno,x 
      001686 7B 07            [ 1] 3881 	ld a,(IN,sp)
      001688 C7 00 01         [ 1] 3882 	ld in,a
      00168B 7B 08            [ 1] 3883 	ld a,(CNT,sp)
      00168D C7 00 02         [ 1] 3884 	ld count,a  
      001690 81               [ 4] 3885 	ret
                                   3886 
                                   3887 ;------------------------------------------
                                   3888 ; BASIC: INPUT [string],var[,[string],var]
                                   3889 ; input value in variables 
                                   3890 ; [string] optionally can be used as prompt 
                                   3891 ;-----------------------------------------
                           000001  3892 	CX_BPTR=1
                           000003  3893 	CX_LNO=3
                           000004  3894 	CX_IN=4
                           000005  3895 	CX_CNT=5
                           000006  3896 	SKIP=6
                           000007  3897 	VSIZE=7
      001691                       3898 input_var:
      001691 72 00 00 24 05   [ 2] 3899 	btjt flags,#FRUN,1$ 
      001696 A6 06            [ 1] 3900 	ld a,#ERR_RUN_ONLY 
      001698 CC 07 24         [ 2] 3901 	jp tb_error 
      00169B                       3902 1$:	_vars VSIZE 
      00169B 52 07            [ 2]    1     sub sp,#VSIZE 
      00169D                       3903 input_loop:
      00169D 0F 06            [ 1] 3904 	clr (SKIP,sp)
      00169F CD 08 08         [ 4] 3905 	call next_token 
      0016A2 A1 00            [ 1] 3906 	cp a,#TK_NONE 
      0016A4 27 5C            [ 1] 3907 	jreq input_exit 
      0016A6 A1 08            [ 1] 3908 	cp a,#TK_QSTR 
      0016A8 26 08            [ 1] 3909 	jrne 1$ 
      0016AA CD 01 B0         [ 4] 3910 	call puts 
      0016AD 03 06            [ 1] 3911 	cpl (SKIP,sp)
      0016AF CD 08 08         [ 4] 3912 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0016B2 A1 04            [ 1] 3913 1$: cp a,#TK_VAR  
      0016B4 27 03            [ 1] 3914 	jreq 2$ 
      0016B6 CC 07 22         [ 2] 3915 	jp syntax_error
      0016B9 CD 0F C5         [ 4] 3916 2$:	call dpush 
      0016BC 0D 06            [ 1] 3917 	tnz (SKIP,sp)
      0016BE 26 0F            [ 1] 3918 	jrne 21$ 
      0016C0 A6 3A            [ 1] 3919 	ld a,#':
      0016C2 C7 17 19         [ 1] 3920 	ld pad+1,a 
      0016C5 72 5F 17 1A      [ 1] 3921 	clr pad+2
      0016C9 AE 17 18         [ 2] 3922 	ldw x,#pad 
      0016CC CD 01 B0         [ 4] 3923 	call puts   
      0016CF                       3924 21$:
      0016CF CD 16 67         [ 4] 3925 	call save_context 
      0016D2 AE 16 C8         [ 2] 3926 	ldw x,#tib 
      0016D5 CF 00 03         [ 2] 3927 	ldw basicptr,x  
      0016D8 72 5F 00 02      [ 1] 3928 	clr count  
      0016DC CD 0A 95         [ 4] 3929 	call readln 
      0016DF 72 5F 00 01      [ 1] 3930 	clr in 
      0016E3 CD 13 33         [ 4] 3931 	call relation 
      0016E6 A1 03            [ 1] 3932 	cp a,#TK_INTGR
      0016E8 27 03            [ 1] 3933 	jreq 3$ 
      0016EA CC 07 22         [ 2] 3934 	jp syntax_error
      0016ED CD 0F C5         [ 4] 3935 3$: call dpush 
      0016F0 CD 10 2C         [ 4] 3936 	call store 
      0016F3 CD 16 7C         [ 4] 3937 	call rest_context
      0016F6 CD 08 08         [ 4] 3938 	call next_token 
      0016F9 A1 0B            [ 1] 3939 	cp a,#TK_COMMA 
      0016FB 26 02            [ 1] 3940 	jrne 4$
      0016FD 20 9E            [ 2] 3941 	jra input_loop 
      0016FF CD 0F BE         [ 4] 3942 4$:	call unget_token 
      001702                       3943 input_exit:
      001702                       3944 	_drop VSIZE 
      001702 5B 07            [ 2]    1     addw sp,#VSIZE 
      001704 81               [ 4] 3945 	ret 
                                   3946 
                                   3947 
                                   3948 ;---------------------
                                   3949 ; BASIC: REMARK | ' 
                                   3950 ; skip comment to end of line 
                                   3951 ;---------------------- 
      001705                       3952 rem:
      001705 55 00 01 00 02   [ 1] 3953  	mov count,in 
      00170A 81               [ 4] 3954 	ret 
                                   3955 
                                   3956 ;---------------------
                                   3957 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3958 ; read in loop 'addr'  
                                   3959 ; apply & 'mask' to value 
                                   3960 ; loop while result==0.  
                                   3961 ; if 'xor_mask' given 
                                   3962 ; apply ^ in second  
                                   3963 ; loop while result==0 
                                   3964 ;---------------------
                           000001  3965 	XMASK=1 
                           000002  3966 	MASK=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                           000003  3967 	ADDR=3
                           000004  3968 	VSIZE=4
      00170B                       3969 wait: 
      00170B                       3970 	_vars VSIZE
      00170B 52 04            [ 2]    1     sub sp,#VSIZE 
      00170D 0F 01            [ 1] 3971 	clr (XMASK,sp) 
      00170F CD 11 F5         [ 4] 3972 	call arg_list 
      001712 A1 02            [ 1] 3973 	cp a,#2
      001714 24 03            [ 1] 3974 	jruge 0$
      001716 CC 07 22         [ 2] 3975 	jp syntax_error 
      001719 A1 03            [ 1] 3976 0$:	cp a,#3
      00171B 25 06            [ 1] 3977 	jrult 1$
      00171D CD 0F D2         [ 4] 3978 	call dpop 
      001720 9F               [ 1] 3979 	ld a,xl
      001721 6B 01            [ 1] 3980 	ld (XMASK,sp),a 
      001723 CD 0F D2         [ 4] 3981 1$: call dpop ; mask 
      001726 9F               [ 1] 3982 	ld a,xl 
      001727 6B 02            [ 1] 3983 	ld (MASK,sp),a 
      001729 CD 0F D2         [ 4] 3984 	call dpop ; address 
      00172C F6               [ 1] 3985 2$:	ld a,(x)
      00172D 14 02            [ 1] 3986 	and a,(MASK,sp)
      00172F 18 01            [ 1] 3987 	xor a,(XMASK,sp)
      001731 27 F9            [ 1] 3988 	jreq 2$ 
      001733                       3989 	_drop VSIZE 
      001733 5B 04            [ 2]    1     addw sp,#VSIZE 
      001735 81               [ 4] 3990 	ret 
                                   3991 
                                   3992 ;---------------------
                                   3993 ; BASIC: BSET addr,mask
                                   3994 ; set bits at 'addr' corresponding 
                                   3995 ; to those of 'mask' that are at 1.
                                   3996 ; arguments:
                                   3997 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3998 ;   mask        mask|addr
                                   3999 ; output:
                                   4000 ;	none 
                                   4001 ;--------------------------
      001736                       4002 bit_set:
      001736 CD 11 F5         [ 4] 4003 	call arg_list 
      001739 A1 02            [ 1] 4004 	cp a,#2	 
      00173B 27 03            [ 1] 4005 	jreq 1$ 
      00173D CC 07 22         [ 2] 4006 	jp syntax_error
      001740                       4007 1$: 
      001740 CD 0F D2         [ 4] 4008 	call dpop ; mask 
      001743 9F               [ 1] 4009 	ld a,xl 
      001744 CD 0F D2         [ 4] 4010 	call dpop ; addr  
      001747 FA               [ 1] 4011 	or a,(x)
      001748 F7               [ 1] 4012 	ld (x),a
      001749 81               [ 4] 4013 	ret 
                                   4014 
                                   4015 ;---------------------
                                   4016 ; BASIC: BRES addr,mask
                                   4017 ; reset bits at 'addr' corresponding 
                                   4018 ; to those of 'mask' that are at 1.
                                   4019 ; arguments:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4020 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4021 ;   mask	    ~mask&*addr  
                                   4022 ; output:
                                   4023 ;	none 
                                   4024 ;--------------------------
      00174A                       4025 bit_reset:
      00174A CD 11 F5         [ 4] 4026 	call arg_list 
      00174D A1 02            [ 1] 4027 	cp a,#2  
      00174F 27 03            [ 1] 4028 	jreq 1$ 
      001751 CC 07 22         [ 2] 4029 	jp syntax_error
      001754                       4030 1$: 
      001754 CD 0F D2         [ 4] 4031 	call dpop ; mask 
      001757 9F               [ 1] 4032 	ld a,xl 
      001758 43               [ 1] 4033 	cpl a 
      001759 CD 0F D2         [ 4] 4034 	call dpop ; addr  
      00175C F4               [ 1] 4035 	and a,(x)
      00175D F7               [ 1] 4036 	ld (x),a 
      00175E 81               [ 4] 4037 	ret 
                                   4038 
                                   4039 ;---------------------
                                   4040 ; BASIC: BRES addr,mask
                                   4041 ; toggle bits at 'addr' corresponding 
                                   4042 ; to those of 'mask' that are at 1.
                                   4043 ; arguments:
                                   4044 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4045 ;   mask	    mask^*addr  
                                   4046 ; output:
                                   4047 ;	none 
                                   4048 ;--------------------------
      00175F                       4049 bit_toggle:
      00175F CD 11 F5         [ 4] 4050 	call arg_list 
      001762 A1 02            [ 1] 4051 	cp a,#2 
      001764 27 03            [ 1] 4052 	jreq 1$ 
      001766 CC 07 22         [ 2] 4053 	jp syntax_error
      001769 CD 0F D2         [ 4] 4054 1$: call dpop ; mask 
      00176C 9F               [ 1] 4055 	ld a,xl 
      00176D CD 0F D2         [ 4] 4056 	call dpop ; addr  
      001770 F8               [ 1] 4057 	xor a,(x)
      001771 F7               [ 1] 4058 	ld (x),a 
      001772 81               [ 4] 4059 	ret 
                                   4060 
                                   4061 
                                   4062 ;--------------------
                                   4063 ; BASIC: POKE addr,byte
                                   4064 ; put a byte at addr 
                                   4065 ;--------------------
      001773                       4066 poke:
      001773 CD 11 F5         [ 4] 4067 	call arg_list 
      001776 A1 02            [ 1] 4068 	cp a,#2
      001778 27 03            [ 1] 4069 	jreq 1$
      00177A CC 07 22         [ 2] 4070 	jp syntax_error
      00177D                       4071 1$:	
      00177D CD 0F D2         [ 4] 4072 	call dpop 
      001780 9F               [ 1] 4073     ld a,xl 
      001781 CD 0F D2         [ 4] 4074 	call dpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001784 F7               [ 1] 4075 	ld (x),a 
      001785 81               [ 4] 4076 	ret 
                                   4077 
                                   4078 ;-----------------------
                                   4079 ; BASIC: PEEK(addr)
                                   4080 ; get the byte at addr 
                                   4081 ; input:
                                   4082 ;	none 
                                   4083 ; output:
                                   4084 ;	X 		value 
                                   4085 ;-----------------------
      001786                       4086 peek:
      001786 A6 09            [ 1] 4087 	ld a,#TK_LPAREN 
      001788 CD 11 E8         [ 4] 4088 	call expect 
      00178B CD 11 F5         [ 4] 4089 	call arg_list
      00178E A1 01            [ 1] 4090 	cp a,#1 
      001790 27 03            [ 1] 4091 	jreq 1$
      001792 CC 07 22         [ 2] 4092 	jp syntax_error
      001795 A6 0A            [ 1] 4093 1$:	ld a,#TK_RPAREN 
      001797 CD 11 E8         [ 4] 4094 	call expect 
      00179A CD 0F D2         [ 4] 4095 	call dpop 
      00179D F6               [ 1] 4096 	ld a,(x)
      00179E 5F               [ 1] 4097 	clrw x 
      00179F 97               [ 1] 4098 	ld xl,a 
      0017A0 A6 03            [ 1] 4099 	ld a,#TK_INTGR
      0017A2 81               [ 4] 4100 	ret 
                                   4101 
      0017A3                       4102 if: 
      0017A3 CD 13 33         [ 4] 4103 	call relation 
      0017A6 A1 03            [ 1] 4104 	cp a,#TK_INTGR
      0017A8 27 03            [ 1] 4105 	jreq 1$ 
      0017AA CC 07 22         [ 2] 4106 	jp syntax_error
      0017AD 4F               [ 1] 4107 1$:	clr a 
      0017AE 5D               [ 2] 4108 	tnzw x 
      0017AF 26 05            [ 1] 4109 	jrne 9$  
                                   4110 ;skip to next line
      0017B1 55 00 02 00 01   [ 1] 4111 	mov in,count
      0017B6 81               [ 4] 4112 9$:	ret 
                                   4113 
                                   4114 ;------------------------
                                   4115 ; BASIC: FOR var=expr 
                                   4116 ; set variable to expression 
                                   4117 ; leave variable address 
                                   4118 ; on dstack and set
                                   4119 ; FFOR bit in 'flags'
                                   4120 ;-----------------
                           000001  4121 	RETL1=1
                           000003  4122 	INW=3
                           000005  4123 	BPTR=5
      0017B7                       4124 for: ; { -- var_addr }
      0017B7 A6 04            [ 1] 4125 	ld a,#TK_VAR 
      0017B9 CD 11 E8         [ 4] 4126 	call expect
      0017BC CD 0F C5         [ 4] 4127 	call dpush 
      0017BF CD 13 C6         [ 4] 4128 	call let02 
      0017C2 72 14 00 24      [ 1] 4129 	bset flags,#FFOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4130 ; open space on cstack for BPTR and INW 
      0017C6 85               [ 2] 4131 	popw x ; call return address 
      0017C7                       4132 	_vars 4
      0017C7 52 04            [ 2]    1     sub sp,#4 
      0017C9 89               [ 2] 4133 	pushw x  ; RETL1 
      0017CA 5F               [ 1] 4134 	clrw x 
      0017CB 1F 05            [ 2] 4135 	ldw (BPTR,sp),x 
      0017CD 1F 03            [ 2] 4136 	ldw (INW,sp),x 
      0017CF CD 08 08         [ 4] 4137 	call next_token 
      0017D2 A1 06            [ 1] 4138 	cp a,#TK_CMD 
      0017D4 27 03            [ 1] 4139 	jreq 1$
      0017D6 CC 07 22         [ 2] 4140 	jp syntax_error
      0017D9                       4141 1$:  
      0017D9 A3 17 E1         [ 2] 4142 	cpw x,#to 
      0017DC 27 03            [ 1] 4143 	jreq to
      0017DE CC 07 22         [ 2] 4144 	jp syntax_error 
                                   4145 
                                   4146 ;-----------------------------------
                                   4147 ; BASIC: TO expr 
                                   4148 ; second part of FOR loop initilization
                                   4149 ; leave limit on dstack and set 
                                   4150 ; FTO bit in 'flags'
                                   4151 ;-----------------------------------
      0017E1                       4152 to: ; { var_addr -- var_addr limit step }
      0017E1 72 04 00 24 03   [ 2] 4153 	btjt flags,#FFOR,1$
      0017E6 CC 07 22         [ 2] 4154 	jp syntax_error
      0017E9 CD 13 33         [ 4] 4155 1$: call relation  
      0017EC A1 03            [ 1] 4156 	cp a,#TK_INTGR 
      0017EE 27 03            [ 1] 4157 	jreq 2$ 
      0017F0 CC 07 22         [ 2] 4158 	jp syntax_error
      0017F3                       4159 2$: 
      0017F3 CD 0F C5         [ 4] 4160     call dpush ; limit
      0017F6 CE 00 00         [ 2] 4161 	ldw x,in.w 
      0017F9 CD 08 08         [ 4] 4162 	call next_token
      0017FC A1 00            [ 1] 4163 	cp a,#TK_NONE  
      0017FE 27 0C            [ 1] 4164 	jreq 4$ 
      001800 A1 06            [ 1] 4165 	cp a,#TK_CMD
      001802 26 05            [ 1] 4166 	jrne 3$
      001804 A3 18 11         [ 2] 4167 	cpw x,#step 
      001807 27 08            [ 1] 4168 	jreq step
      001809                       4169 3$:	
      001809 CD 0F BE         [ 4] 4170 	call unget_token   	 
      00180C                       4171 4$:	
      00180C AE 00 01         [ 2] 4172 	ldw x,#1   ; default step  
      00180F 20 12            [ 2] 4173 	jra store_loop_addr 
                                   4174 
                                   4175 
                                   4176 ;----------------------------------
                                   4177 ; BASIC: STEP expr 
                                   4178 ; optional third par of FOR loop
                                   4179 ; initialization. 	
                                   4180 ;------------------------------------
      001811                       4181 step: ; {var limit -- var limit step}
      001811 72 04 00 24 03   [ 2] 4182 	btjt flags,#FFOR,1$
      001816 CC 07 22         [ 2] 4183 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001819 CD 13 33         [ 4] 4184 1$: call relation
      00181C A1 03            [ 1] 4185 	cp a,#TK_INTGR
      00181E 27 03            [ 1] 4186 	jreq store_loop_addr  
      001820 CC 07 22         [ 2] 4187 	jp syntax_error
                                   4188 ; leave loop back entry point on cstack 
                                   4189 ; cstack is 2 call deep from interp_loop
      001823                       4190 store_loop_addr:
      001823 CD 0F C5         [ 4] 4191 	call dpush 
      001826 CE 00 03         [ 2] 4192 	ldw x,basicptr  
      001829 1F 05            [ 2] 4193 	ldw (BPTR,sp),x 
      00182B CE 00 00         [ 2] 4194 	ldw x,in.w 
      00182E 1F 03            [ 2] 4195 	ldw (INW,sp),x   
      001830 72 15 00 24      [ 1] 4196 	bres flags,#FFOR 
      001834 72 5C 00 1F      [ 1] 4197 	inc loop_depth  
      001838 81               [ 4] 4198 	ret 
                                   4199 
                                   4200 ;--------------------------------
                                   4201 ; BASIC: NEXT var 
                                   4202 ; FOR loop control 
                                   4203 ; increment variable with step 
                                   4204 ; and compare with limit 
                                   4205 ; loop if threshold not crossed.
                                   4206 ; else clean both stacks. 
                                   4207 ; and decrement 'loop_depth' 
                                   4208 ;--------------------------------
      001839                       4209 next: ; {var limit step -- [var limit step ] }
      001839 72 5D 00 1F      [ 1] 4210 	tnz loop_depth 
      00183D 26 03            [ 1] 4211 	jrne 1$ 
      00183F CC 07 22         [ 2] 4212 	jp syntax_error 
      001842                       4213 1$: 
      001842 A6 04            [ 1] 4214 	ld a,#TK_VAR 
      001844 CD 11 E8         [ 4] 4215 	call expect
                                   4216 ; check for good variable after NEXT 	 
      001847 90 93            [ 1] 4217 	ldw y,x 
      001849 AE 00 04         [ 2] 4218 	ldw x,#4  
      00184C 72 D3 00 19      [ 4] 4219 	cpw y,([dstkptr],x) ; compare variables address 
      001850 27 03            [ 1] 4220 	jreq 2$  
      001852 CC 07 22         [ 2] 4221 	jp syntax_error ; not the good one 
      001855                       4222 2$: ; increment variable 
      001855 93               [ 1] 4223 	ldw x,y
      001856 FE               [ 2] 4224 	ldw x,(x)  ; get var value 
      001857 CF 00 09         [ 2] 4225 	ldw acc16,x 
      00185A 72 CE 00 19      [ 5] 4226 	ldw x,[dstkptr] ; step
      00185E 72 BB 00 09      [ 2] 4227 	addw x,acc16 ; var+step 
      001862 90 FF            [ 2] 4228 	ldw (y),x ; save var new value 
                                   4229 ; compare with limit 
      001864 90 93            [ 1] 4230 	ldw y,x 
      001866 72 CE 00 19      [ 5] 4231 	ldw x,[dstkptr] ; step in x 
      00186A 5D               [ 2] 4232 	tnzw x  
      00186B 2A 0B            [ 1] 4233 	jrpl 4$ ; positive step 
                                   4234 ;negative step 
      00186D AE 00 02         [ 2] 4235 	ldw x,#2
      001870 72 D3 00 19      [ 4] 4236 	cpw y,([dstkptr],x)
      001874 2F 24            [ 1] 4237 	jrslt loop_done
      001876 20 09            [ 2] 4238 	jra loop_back 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001878                       4239 4$: ; positive step
      001878 AE 00 02         [ 2] 4240 	ldw x,#2 
      00187B 72 D3 00 19      [ 4] 4241 	cpw y,([dstkptr],x)
      00187F 2C 19            [ 1] 4242 	jrsgt loop_done
      001881                       4243 loop_back:
      001881 1E 05            [ 2] 4244 	ldw x,(BPTR,sp)
      001883 CF 00 03         [ 2] 4245 	ldw basicptr,x 
      001886 72 01 00 24 09   [ 2] 4246 	btjf flags,#FRUN,1$ 
      00188B E6 02            [ 1] 4247 	ld a,(2,x)
      00188D C7 00 02         [ 1] 4248 	ld count,a
      001890 FE               [ 2] 4249 	ldw x,(x)
      001891 CF 00 05         [ 2] 4250 	ldw lineno,x
      001894 1E 03            [ 2] 4251 1$:	ldw x,(INW,sp)
      001896 CF 00 00         [ 2] 4252 	ldw in.w,x 
      001899 81               [ 4] 4253 	ret 
      00189A                       4254 loop_done:
                                   4255 	; remove var limit step on dstack 
      00189A CE 00 19         [ 2] 4256 	ldw x,dstkptr 
      00189D 1C 00 06         [ 2] 4257 	addw x,#3*CELL_SIZE
      0018A0 CF 00 19         [ 2] 4258 	ldw dstkptr,x 
                                   4259 	; remove 2 return address on cstack 
      0018A3 85               [ 2] 4260 	popw x
      0018A4                       4261 	_drop 4
      0018A4 5B 04            [ 2]    1     addw sp,#4 
      0018A6 89               [ 2] 4262 	pushw x 
      0018A7 72 5A 00 1F      [ 1] 4263 	dec loop_depth 
      0018AB 81               [ 4] 4264 	ret 
                                   4265 
                                   4266 
                                   4267 ;------------------------
                                   4268 ; BASIC: GOTO lineno 
                                   4269 ; jump to lineno 
                                   4270 ; here cstack is 2 call deep from interp_loop 
                                   4271 ;------------------------
      0018AC                       4272 goto:
      0018AC 72 00 00 24 06   [ 2] 4273 	btjt flags,#FRUN,0$ 
      0018B1 A6 06            [ 1] 4274 	ld a,#ERR_RUN_ONLY
      0018B3 CC 07 24         [ 2] 4275 	jp tb_error 
      0018B6 81               [ 4] 4276 	ret 
      0018B7 20 23            [ 2] 4277 0$:	jra go_common
                                   4278 
                                   4279 ;--------------------
                                   4280 ; BASIC: GOSUB lineno
                                   4281 ; basic subroutine call
                                   4282 ; actual lineno and basicptr 
                                   4283 ; are saved on cstack
                                   4284 ; here cstack is 2 call deep from interp_loop 
                                   4285 ;--------------------
                           000003  4286 	GOS_RET=3
      0018B9                       4287 gosub:
      0018B9 72 00 00 24 06   [ 2] 4288 	btjt flags,#FRUN,0$ 
      0018BE A6 06            [ 1] 4289 	ld a,#ERR_RUN_ONLY
      0018C0 CC 07 24         [ 2] 4290 	jp tb_error 
      0018C3 81               [ 4] 4291 	ret 
      0018C4 85               [ 2] 4292 0$:	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0018C5 52 02            [ 2] 4293 	sub sp,#2 
      0018C7 89               [ 2] 4294 	pushw x 
      0018C8 CE 00 03         [ 2] 4295 	ldw x,basicptr
      0018CB E6 02            [ 1] 4296 	ld a,(2,x)
      0018CD AB 03            [ 1] 4297 	add a,#3 
      0018CF C7 00 0A         [ 1] 4298 	ld acc8,a 
      0018D2 72 5F 00 09      [ 1] 4299 	clr acc16 
      0018D6 72 BB 00 09      [ 2] 4300 	addw x,acc16
      0018DA 1F 03            [ 2] 4301 	ldw (GOS_RET,sp),x 
      0018DC                       4302 go_common: 
      0018DC CD 13 33         [ 4] 4303 	call relation 
      0018DF A1 03            [ 1] 4304 	cp a,#TK_INTGR
      0018E1 27 03            [ 1] 4305 	jreq 1$ 
      0018E3 CC 07 22         [ 2] 4306 	jp syntax_error
      0018E6                       4307 1$: 
      0018E6 CD 02 E0         [ 4] 4308 	call search_lineno  
      0018E9 5D               [ 2] 4309 	tnzw x 
      0018EA 26 05            [ 1] 4310 	jrne 2$ 
      0018EC A6 05            [ 1] 4311 	ld a,#ERR_NO_LINE 
      0018EE CC 07 24         [ 2] 4312 	jp tb_error 
      0018F1                       4313 2$: 
      0018F1 CF 00 03         [ 2] 4314 	ldw basicptr,x 
      0018F4 E6 02            [ 1] 4315 	ld a,(2,x)
      0018F6 C7 00 02         [ 1] 4316 	ld count,a 
      0018F9 FE               [ 2] 4317 	ldw x,(x)
      0018FA CF 00 05         [ 2] 4318 	ldw lineno,x 
      0018FD 35 03 00 01      [ 1] 4319 	mov in,#3 
      001901 81               [ 4] 4320 	ret 
                                   4321 
                                   4322 ;------------------------
                                   4323 ; BASIC: RETURN 
                                   4324 ; exit from a subroutine 
                                   4325 ; cstack is 2 level deep from interp_loop 
                                   4326 ;------------------------
      001902                       4327 return:
      001902 72 00 00 24 05   [ 2] 4328 	btjt flags,#FRUN,0$ 
      001907 A6 06            [ 1] 4329 	ld a,#ERR_RUN_ONLY
      001909 CC 07 24         [ 2] 4330 	jp tb_error 
      00190C                       4331 0$:	
      00190C 1E 03            [ 2] 4332 	ldw x,(GOS_RET,sp) 
      00190E CF 00 03         [ 2] 4333 	ldw basicptr,x 
      001911 E6 02            [ 1] 4334 	ld a,(2,x)
      001913 AB 03            [ 1] 4335 	add a,#3 
      001915 C7 00 02         [ 1] 4336 	ld count,a 
      001918 35 03 00 01      [ 1] 4337 	mov in,#3
      00191C FE               [ 2] 4338 	ldw x,(x)
      00191D CF 00 05         [ 2] 4339 	ldw lineno,x 
      001920 4F               [ 1] 4340 	clr a 
      001921 85               [ 2] 4341 	popw x 
      001922                       4342 	_drop 2
      001922 5B 02            [ 2]    1     addw sp,#2 
      001924 89               [ 2] 4343 	pushw x
      001925 81               [ 4] 4344 	ret  
                                   4345 
                                   4346 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4347 ;----------------------------------
                                   4348 ; BASIC: RUN
                                   4349 ; run BASIC program in RAM
                                   4350 ;----------------------------------- 
      001926                       4351 run: 
      001926 72 01 00 24 02   [ 2] 4352 	btjf flags,#FRUN,0$  
      00192B 4F               [ 1] 4353 	clr a 
      00192C 81               [ 4] 4354 	ret
      00192D                       4355 0$: 
      00192D 72 09 00 24 12   [ 2] 4356 	btjf flags,#FBREAK,1$
      001932                       4357 	_drop 2 
      001932 5B 02            [ 2]    1     addw sp,#2 
      001934 CD 16 7C         [ 4] 4358 	call rest_context
      001937                       4359 	_drop CTXT_SIZE 
      001937 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      001939 72 19 00 24      [ 1] 4360 	bres flags,#FBREAK 
      00193D 72 10 00 24      [ 1] 4361 	bset flags,#FRUN 
      001941 CC 07 D8         [ 2] 4362 	jp interp_loop 
      001944 CE 00 1B         [ 2] 4363 1$:	ldw x,txtbgn
      001947 C3 00 1D         [ 2] 4364 	cpw x,txtend 
      00194A 2B 02            [ 1] 4365 	jrmi 2$ 
      00194C 4F               [ 1] 4366 	clr a 
      00194D 81               [ 4] 4367 	ret 
      00194E CD 13 AE         [ 4] 4368 2$: call ubound 
      001951                       4369 	_drop 2 
      001951 5B 02            [ 2]    1     addw sp,#2 
      001953 CE 00 1B         [ 2] 4370 	ldw x,txtbgn 
      001956 CF 00 03         [ 2] 4371 	ldw basicptr,x 
      001959 E6 02            [ 1] 4372 	ld a,(2,x)
      00195B C7 00 02         [ 1] 4373 	ld count,a
      00195E FE               [ 2] 4374 	ldw x,(x)
      00195F CF 00 05         [ 2] 4375 	ldw lineno,x
      001962 35 03 00 01      [ 1] 4376 	mov in,#3	
      001966 72 10 00 24      [ 1] 4377 	bset flags,#FRUN 
      00196A CC 07 D8         [ 2] 4378 	jp interp_loop 
                                   4379 
                                   4380 
                                   4381 ;----------------------
                                   4382 ; BASIC: STOP 
                                   4383 ; stop running program
                                   4384 ;---------------------- 
      00196D                       4385 stop: 
                                   4386 ; clean dstack and cstack 
      00196D AE 17 FF         [ 2] 4387 	ldw x,#STACK_EMPTY 
      001970 94               [ 1] 4388 	ldw sp,x 
      001971 72 11 00 24      [ 1] 4389 	bres flags,#FRUN 
      001975 72 19 00 24      [ 1] 4390 	bres flags,#FBREAK
      001979 CC 07 74         [ 2] 4391 	jp warm_start
                                   4392 
                                   4393 ;-----------------------
                                   4394 ; BASIC BEEP expr1,expr2
                                   4395 ; used MCU internal beeper 
                                   4396 ; to produce a sound
                                   4397 ; arguments:
                                   4398 ;    expr1   frequency, {1,2,4} mapping to 1K,2K,4K
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4399 ;    expr2   duration msec.
                                   4400 ;---------------------------
      00197C                       4401 beep:
      00197C CD 11 F5         [ 4] 4402 	call arg_list 
      00197F A1 02            [ 1] 4403 	cp a,#2 
      001981 27 03            [ 1] 4404 	jreq 2$
      001983 CC 07 22         [ 2] 4405 	jp syntax_error 
      001986 CE 00 19         [ 2] 4406 2$: ldw x,dstkptr 
      001989 EE 02            [ 2] 4407 	ldw x,(2,x);frequency 
      00198B 9F               [ 1] 4408 	ld a,xl
      00198C 4A               [ 1] 4409 	dec a 
      00198D 4E               [ 1] 4410 	swap a 
      00198E 48               [ 1] 4411 	sll a 
      00198F 48               [ 1] 4412 	sll a 
      001990 AB 3E            [ 1] 4413 	add a,#0x3e 
      001992 C7 50 F3         [ 1] 4414 	ld BEEP_CSR,a 
      001995 CD 0F D2         [ 4] 4415 	call dpop 
      001998 CD 1E 7E         [ 4] 4416 	call pause02 
      00199B CD 0F F9         [ 4] 4417 	call ddrop 
      00199E A6 1F            [ 1] 4418 	ld a,#0x1f
      0019A0 C7 50 F3         [ 1] 4419 	ld BEEP_CSR,a 
      0019A3 81               [ 4] 4420 	ret 
                                   4421 
                                   4422 ;-------------------------------
                                   4423 ; BASIC: PWRADC 0|1,divisor  
                                   4424 ; disable/enanble ADC 
                                   4425 ;-------------------------------
      0019A4                       4426 power_adc:
      0019A4 CD 11 F5         [ 4] 4427 	call arg_list 
      0019A7 A1 02            [ 1] 4428 	cp a,#2	
      0019A9 27 03            [ 1] 4429 	jreq 1$
      0019AB CC 07 22         [ 2] 4430 	jp syntax_error 
      0019AE AE 00 02         [ 2] 4431 1$: ldw x,#2
      0019B1 72 DE 00 19      [ 5] 4432 	ldw x,([dstkptr],x) ; on|off
      0019B5 5D               [ 2] 4433 	tnzw x 
      0019B6 27 1C            [ 1] 4434 	jreq 2$ 
      0019B8 72 CE 00 19      [ 5] 4435 	ldw x,[dstkptr] ; channel
      0019BC 9F               [ 1] 4436 	ld a,xl
      0019BD A4 07            [ 1] 4437 	and a,#7
      0019BF 4E               [ 1] 4438 	swap a 
      0019C0 C7 54 01         [ 1] 4439 	ld ADC_CR1,a
      0019C3 72 16 54 02      [ 1] 4440 	bset ADC_CR2,#ADC_CR2_ALIGN ; right 
      0019C7 72 10 54 01      [ 1] 4441 	bset ADC_CR1,#ADC_CR1_ADON 
      0019CB                       4442 	_usec_dly 7 
      0019CB AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0019CE 5A               [ 2]    2     decw x
      0019CF 9D               [ 1]    3     nop 
      0019D0 26 FA            [ 1]    4     jrne .-4
      0019D2 20 04            [ 2] 4443 	jra 3$
      0019D4 72 11 54 01      [ 1] 4444 2$: bres ADC_CR1,#ADC_CR1_ADON 
      0019D8 AE 00 02         [ 2] 4445 3$:	ldw x,#2
      0019DB CD 10 36         [ 4] 4446 	call ddrop_n 
      0019DE 81               [ 4] 4447 	ret
                                   4448 
                                   4449 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4450 ; BASIC: RDADC(channel)
                                   4451 ; read adc channel 
                                   4452 ; output:
                                   4453 ;   A 		TK_INTGR 
                                   4454 ;   X 		value 
                                   4455 ;-----------------------------
      0019DF                       4456 read_adc:
      0019DF A6 09            [ 1] 4457 	ld a,#TK_LPAREN 
      0019E1 CD 11 E8         [ 4] 4458 	call expect 
      0019E4 CD 08 08         [ 4] 4459 	call next_token 
      0019E7 A1 03            [ 1] 4460 	cp a,#TK_INTGR 
      0019E9 27 03            [ 1] 4461 	jreq 1$
      0019EB CC 07 22         [ 2] 4462 	jp syntax_error
      0019EE 89               [ 2] 4463 1$: pushw x 
      0019EF A6 0A            [ 1] 4464 	ld a,#TK_RPAREN 
      0019F1 CD 11 E8         [ 4] 4465 	call expect 
      0019F4 85               [ 2] 4466 	popw x 
      0019F5 A3 00 10         [ 2] 4467 	cpw x,#16 
      0019F8 25 05            [ 1] 4468 	jrult 2$
      0019FA A6 0A            [ 1] 4469 	ld a,#ERR_BAD_VALUE
      0019FC CC 07 24         [ 2] 4470 	jp tb_error 
      0019FF 9F               [ 1] 4471 2$: ld a,xl
      001A00 C7 54 00         [ 1] 4472 	ld ADC_CSR,a 
      001A03 72 10 54 01      [ 1] 4473 	bset ADC_CR1,#ADC_CR1_ADON
      001A07 72 0F 54 00 FB   [ 2] 4474 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001A0C CE 54 04         [ 2] 4475 	ldw x,ADC_DRH 
      001A0F A6 03            [ 1] 4476 	ld a,#TK_INTGR
      001A11 81               [ 4] 4477 	ret 
                                   4478 
                                   4479 
                                   4480 ;-----------------------
                                   4481 ; BASIC: BREAK 
                                   4482 ; insert a breakpoint 
                                   4483 ; in pogram. 
                                   4484 ; the program is resumed
                                   4485 ; with RUN 
                                   4486 ;-------------------------
      001A12                       4487 break:
      001A12 72 00 00 24 02   [ 2] 4488 	btjt flags,#FRUN,2$
      001A17 4F               [ 1] 4489 	clr a
      001A18 81               [ 4] 4490 	ret 
      001A19                       4491 2$:	 
                                   4492 ; create space on cstack to save context 
      001A19 AE 1A 43         [ 2] 4493 	ldw x,#break_point 
      001A1C CD 01 B0         [ 4] 4494 	call puts 
      001A1F                       4495 	_drop 2 ;drop return address 
      001A1F 5B 02            [ 2]    1     addw sp,#2 
      001A21                       4496 	_vars CTXT_SIZE ; context size 
      001A21 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001A23 CD 16 67         [ 4] 4497 	call save_context 
      001A26 AE 16 C8         [ 2] 4498 	ldw x,#tib 
      001A29 CF 00 03         [ 2] 4499 	ldw basicptr,x
      001A2C 7F               [ 1] 4500 	clr (x)
      001A2D 72 5F 00 02      [ 1] 4501 	clr count  
      001A31 5F               [ 1] 4502 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001A32 CF 00 05         [ 2] 4503 	ldw lineno,x 
      001A35 CF 00 00         [ 2] 4504 	ldw in.w,x
      001A38 72 11 00 24      [ 1] 4505 	bres flags,#FRUN 
      001A3C 72 18 00 24      [ 1] 4506 	bset flags,#FBREAK
      001A40 CC 07 D8         [ 2] 4507 	jp interp_loop 
      001A43 0A 62 72 65 61 6B 20  4508 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4509 
                                   4510 ;-----------------------
                                   4511 ; BASIC: NEW
                                   4512 ; from command line only 
                                   4513 ; free program memory
                                   4514 ; and clear variables 
                                   4515 ;------------------------
      001A61                       4516 new: 
      001A61 72 01 00 24 02   [ 2] 4517 	btjf flags,#FRUN,0$ 
      001A66 4F               [ 1] 4518 	clr a 
      001A67 81               [ 4] 4519 	ret 
      001A68                       4520 0$:	
      001A68 CD 05 F0         [ 4] 4521 	call clear_basic 
      001A6B 81               [ 4] 4522 	ret 
                                   4523 	 
                                   4524 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4525 ;   file system routines
                                   4526 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4527 
                                   4528 ;--------------------
                                   4529 ; input:
                                   4530 ;   X     increment 
                                   4531 ; output:
                                   4532 ;   farptr  incremented 
                                   4533 ;---------------------
      001A6C                       4534 incr_farptr:
      001A6C 72 BB 00 14      [ 2] 4535 	addw x,farptr+1 
      001A70 24 04            [ 1] 4536 	jrnc 1$
      001A72 72 5C 00 13      [ 1] 4537 	inc farptr 
      001A76 CF 00 14         [ 2] 4538 1$:	ldw farptr+1,x  
      001A79 81               [ 4] 4539 	ret 
                                   4540 
                                   4541 ;------------------------------
                                   4542 ; extended flash memory used as FLASH_DRIVE 
                                   4543 ; seek end of used flash drive   
                                   4544 ; starting at 0x10000 address.
                                   4545 ; 4 consecutives 0 bytes signal free space. 
                                   4546 ; input:
                                   4547 ;	none
                                   4548 ; output:
                                   4549 ;   ffree     free_addr| 0 if memory full.
                                   4550 ;------------------------------
      001A7A                       4551 seek_fdrive:
      001A7A A6 01            [ 1] 4552 	ld a,#1
      001A7C C7 00 13         [ 1] 4553 	ld farptr,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A7F 5F               [ 1] 4554 	clrw x 
      001A80 CF 00 14         [ 2] 4555 	ldw farptr+1,x 
      001A83                       4556 1$:
      001A83 5F               [ 1] 4557 	clrw x 
      001A84 92 AF 00 13      [ 5] 4558 	ldf a,([farptr],x) 
      001A88 26 15            [ 1] 4559 	jrne 2$
      001A8A 5C               [ 1] 4560 	incw x 
      001A8B 92 AF 00 13      [ 5] 4561 	ldf a,([farptr],x)
      001A8F 26 0E            [ 1] 4562 	jrne 2$ 
      001A91 5C               [ 1] 4563 	incw x 
      001A92 92 AF 00 13      [ 5] 4564 	ldf a,([farptr],x)
      001A96 26 07            [ 1] 4565 	jrne 2$ 
      001A98 5C               [ 1] 4566 	incw x 
      001A99 92 AF 00 13      [ 5] 4567 	ldf a,([farptr],x)
      001A9D 27 28            [ 1] 4568 	jreq 4$ 
      001A9F                       4569 2$: 
      001A9F 1C 00 01         [ 2] 4570 	addw x,#1
      001AA2 CD 1A 6C         [ 4] 4571 	call incr_farptr
      001AA5 AE 02 7F         [ 2] 4572 	ldw x,#0x27f 
      001AA8 C3 00 13         [ 2] 4573 	cpw x,farptr
      001AAB 2A D6            [ 1] 4574 	jrpl 1$
      001AAD 72 5F 00 16      [ 1] 4575 	clr ffree 
      001AB1 72 5F 00 17      [ 1] 4576 	clr ffree+1 
      001AB5 72 5F 00 18      [ 1] 4577 	clr ffree+2 
      001AB9 72 5F 00 08      [ 1] 4578 	clr acc24 
      001ABD 72 5F 00 09      [ 1] 4579 	clr acc16
      001AC1 72 5F 00 0A      [ 1] 4580 	clr acc8 
      001AC5 20 1A            [ 2] 4581 	jra 5$
      001AC7                       4582 4$: ; copy farptr to ffree	 
      001AC7 CE 00 14         [ 2] 4583 	ldw x,farptr+1 
      001ACA A3 00 00         [ 2] 4584 	cpw x,#fdrive 
      001ACD 27 06            [ 1] 4585 	jreq 41$
                                   4586 	; there is a file, last 0 of that file must be skipped.
      001ACF AE 00 01         [ 2] 4587 	ldw x,#1
      001AD2 CD 1A 6C         [ 4] 4588 	call incr_farptr
      001AD5                       4589 41$: 
      001AD5 CE 00 13         [ 2] 4590 	ldw x,farptr 
      001AD8 C6 00 15         [ 1] 4591 	ld a,farptr+2 
      001ADB CF 00 16         [ 2] 4592 	ldw ffree,x 
      001ADE C7 00 18         [ 1] 4593 	ld ffree+2,a  
      001AE1 81               [ 4] 4594 5$:	ret 
                                   4595 
                                   4596 ;-----------------------
                                   4597 ; compare file name 
                                   4598 ; with name pointed by Y  
                                   4599 ; input:
                                   4600 ;   farptr   file name 
                                   4601 ;   Y        target name 
                                   4602 ; output:
                                   4603 ;   farptr 	 at file_name
                                   4604 ;   X 		 farptr[x] point at size field  
                                   4605 ;   Carry    0|1 no match|match  
                                   4606 ;----------------------
      001AE2                       4607 cmp_name:
      001AE2 5F               [ 1] 4608 	clrw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001AE3 92 AF 00 13      [ 5] 4609 1$:	ldf a,([farptr],x)
      001AE7 90 F1            [ 1] 4610 	cp a,(y)
      001AE9 26 08            [ 1] 4611 	jrne 4$
      001AEB 4D               [ 1] 4612 	tnz a 
      001AEC 27 12            [ 1] 4613 	jreq 9$ 
      001AEE 5C               [ 1] 4614     incw x 
      001AEF 90 5C            [ 1] 4615 	incw y 
      001AF1 20 F0            [ 2] 4616 	jra 1$
      001AF3                       4617 4$: ;no match 
      001AF3 4D               [ 1] 4618 	tnz a 
      001AF4 27 07            [ 1] 4619 	jreq 5$
      001AF6 5C               [ 1] 4620 	incw x 
      001AF7 92 AF 00 13      [ 5] 4621 	ldf a,([farptr],x)
      001AFB 20 F6            [ 2] 4622 	jra 4$  
      001AFD 5C               [ 1] 4623 5$:	incw x ; farptr[x] point at 'size' field 
      001AFE 98               [ 1] 4624 	rcf 
      001AFF 81               [ 4] 4625 	ret
      001B00                       4626 9$: ; match  
      001B00 5C               [ 1] 4627 	incw x  ; farptr[x] at 'size' field 
      001B01 99               [ 1] 4628 	scf 
      001B02 81               [ 4] 4629 	ret 
                                   4630 
                                   4631 ;-----------------------
                                   4632 ; search file in 
                                   4633 ; flash memory 
                                   4634 ; input:
                                   4635 ;   Y       file name  
                                   4636 ; output:
                                   4637 ;   farptr  addr at name|0
                                   4638 ;-----------------------
                           000001  4639 	FSIZE=1
                           000003  4640 	YSAVE=3
                           000004  4641 	VSIZE=4 
      001B03                       4642 search_file: 
      001B03                       4643 	_vars VSIZE
      001B03 52 04            [ 2]    1     sub sp,#VSIZE 
      001B05 17 03            [ 2] 4644 	ldw (YSAVE,sp),y  
      001B07 5F               [ 1] 4645 	clrw x 
      001B08 CF 00 14         [ 2] 4646 	ldw farptr+1,x 
      001B0B 35 01 00 13      [ 1] 4647 	mov farptr,#1
      001B0F                       4648 1$:	
                                   4649 ; check if farptr is after any file 
                                   4650 ; if  0 then so.
      001B0F 92 BC 00 13      [ 5] 4651 	ldf a,[farptr]
      001B13 27 24            [ 1] 4652 	jreq 6$
      001B15 5F               [ 1] 4653 2$: clrw x 	
      001B16 16 03            [ 2] 4654 	ldw y,(YSAVE,sp) 
      001B18 CD 1A E2         [ 4] 4655 	call cmp_name
      001B1B 25 2C            [ 1] 4656 	jrc 9$
      001B1D 92 AF 00 13      [ 5] 4657 	ldf a,([farptr],x)
      001B21 6B 01            [ 1] 4658 	ld (FSIZE,sp),a 
      001B23 5C               [ 1] 4659 	incw x 
      001B24 92 AF 00 13      [ 5] 4660 	ldf a,([farptr],x)
      001B28 6B 02            [ 1] 4661 	ld (FSIZE+1,sp),a 
      001B2A 5C               [ 1] 4662 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B2B 72 FB 01         [ 2] 4663 	addw x,(FSIZE,sp) ; count to skip 
      001B2E CD 1A 6C         [ 4] 4664 	call incr_farptr ; now at next file 'name_field'
      001B31 AE 02 80         [ 2] 4665 	ldw x,#0x280
      001B34 C3 00 13         [ 2] 4666 	cpw x,farptr 
      001B37 2A D6            [ 1] 4667 	jrpl 1$
      001B39                       4668 6$: ; file not found 
      001B39 72 5F 00 13      [ 1] 4669 	clr farptr
      001B3D 72 5F 00 14      [ 1] 4670 	clr farptr+1 
      001B41 72 5F 00 15      [ 1] 4671 	clr farptr+2 
      001B45                       4672 	_drop VSIZE 
      001B45 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B47 98               [ 1] 4673 	rcf
      001B48 81               [ 4] 4674 	ret
      001B49                       4675 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001B49                       4676 	_drop VSIZE 
      001B49 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B4B 99               [ 1] 4677 	scf 	
      001B4C 81               [ 4] 4678 	ret
                                   4679 
                                   4680 ;--------------------------------
                                   4681 ; BASIC: SAVE "name" 
                                   4682 ; save text program in 
                                   4683 ; flash memory used as 
                                   4684 ;--------------------------------
                           000001  4685 	BSIZE=1
                           000003  4686 	NAMEPTR=3
                           000004  4687 	VSIZE=4
      001B4D                       4688 save:
      001B4D 72 01 00 24 05   [ 2] 4689 	btjf flags,#FRUN,0$ 
      001B52 A6 07            [ 1] 4690 	ld a,#ERR_CMD_ONLY 
      001B54 CC 07 24         [ 2] 4691 	jp tb_error
      001B57                       4692 0$:	 
      001B57 CE 00 1D         [ 2] 4693 	ldw x,txtend 
      001B5A 72 B0 00 1B      [ 2] 4694 	subw x,txtbgn
      001B5E 26 01            [ 1] 4695 	jrne 10$
                                   4696 ; nothing to save 
      001B60 81               [ 4] 4697 	ret 
      001B61                       4698 10$:	
      001B61 C6 00 16         [ 1] 4699 	ld a,ffree 
      001B64 CA 00 17         [ 1] 4700 	or a,ffree+1
      001B67 CA 00 18         [ 1] 4701 	or a,ffree+2 
      001B6A 26 05            [ 1] 4702 	jrne 1$
      001B6C A6 01            [ 1] 4703 	ld a,#ERR_MEM_FULL
      001B6E CC 07 24         [ 2] 4704 	jp tb_error 
      001B71                       4705 1$:  
      001B71 CD 08 08         [ 4] 4706 	call next_token	
      001B74 A1 08            [ 1] 4707 	cp a,#TK_QSTR
      001B76 27 03            [ 1] 4708 	jreq 2$
      001B78 CC 07 22         [ 2] 4709 	jp syntax_error
      001B7B                       4710 2$: ; check for existing file of that name 
      001B7B                       4711 	_vars VSIZE
      001B7B 52 04            [ 2]    1     sub sp,#VSIZE 
      001B7D 90 CE 00 03      [ 2] 4712 	ldw y,basicptr 
      001B81 72 B9 00 00      [ 2] 4713 	addw y,in.w
      001B85 17 03            [ 2] 4714 	ldw (NAMEPTR,sp),y  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B87 55 00 02 00 01   [ 1] 4715 	mov in,count 
      001B8C CD 1B 03         [ 4] 4716 	call search_file 
      001B8F 24 05            [ 1] 4717 	jrnc 3$ 
      001B91 A6 08            [ 1] 4718 	ld a,#ERR_DUPLICATE 
      001B93 CC 07 24         [ 2] 4719 	jp tb_error 
      001B96                       4720 3$:	;** write file name to flash **
      001B96 CE 00 16         [ 2] 4721 	ldw x,ffree 
      001B99 C6 00 18         [ 1] 4722 	ld a,ffree+2 
      001B9C CF 00 13         [ 2] 4723 	ldw farptr,x 
      001B9F C7 00 15         [ 1] 4724 	ld farptr+2,a 
      001BA2 1E 03            [ 2] 4725 	ldw x,(NAMEPTR,sp)  
      001BA4 CD 02 72         [ 4] 4726 	call strlen 
      001BA7 5C               [ 1] 4727 	incw  x
      001BA8 1F 01            [ 2] 4728 	ldw (BSIZE,sp),x  
      001BAA 5F               [ 1] 4729 	clrw x   
      001BAB 16 03            [ 2] 4730 	ldw y,(NAMEPTR,sp)
      001BAD CD 01 51         [ 4] 4731 	call write_block  
                                   4732 ;** write file length after name **
      001BB0 CE 00 1D         [ 2] 4733 	ldw x,txtend 
      001BB3 72 B0 00 1B      [ 2] 4734 	subw x,txtbgn
      001BB7 1F 01            [ 2] 4735 	ldw (BSIZE,sp),x 
      001BB9 5F               [ 1] 4736 	clrw x 
      001BBA 7B 01            [ 1] 4737 	ld a,(1,sp)
      001BBC CD 00 DC         [ 4] 4738 	call write_byte 
      001BBF 5C               [ 1] 4739 	incw x 
      001BC0 7B 02            [ 1] 4740 	ld a,(2,sp)
      001BC2 CD 00 DC         [ 4] 4741 	call write_byte
      001BC5 5C               [ 1] 4742 	incw x  
      001BC6 CD 1A 6C         [ 4] 4743 	call incr_farptr ; move farptr after SIZE field 
                                   4744 ;** write BASIC text **
                                   4745 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001BC9 1E 01            [ 2] 4746 	ldw x,(BSIZE,sp)
      001BCB 89               [ 2] 4747 	pushw x 
      001BCC 5F               [ 1] 4748 	clrw x 
      001BCD 90 CE 00 1B      [ 2] 4749 	ldw y,txtbgn  ; BASIC text to save 
      001BD1 CD 01 51         [ 4] 4750 	call write_block 
      001BD4                       4751 	_drop 2 ;  drop BSIZE copy 
      001BD4 5B 02            [ 2]    1     addw sp,#2 
                                   4752 ; save farptr in ffree
      001BD6 CE 00 13         [ 2] 4753 	ldw x,farptr 
      001BD9 C6 00 15         [ 1] 4754 	ld a,farptr+2 
      001BDC CF 00 16         [ 2] 4755 	ldw ffree,x 
      001BDF C7 00 18         [ 1] 4756 	ld ffree+2,a
                                   4757 ; write 4 zero bytes as a safe gard 
      001BE2 5F               [ 1] 4758     clrw x 
      001BE3 4B 04            [ 1] 4759 	push #4 
      001BE5 0D 01            [ 1] 4760 4$:	tnz (1,sp)
      001BE7 27 09            [ 1] 4761 	jreq 5$
      001BE9 4F               [ 1] 4762 	clr a 
      001BEA CD 00 DC         [ 4] 4763 	call write_byte 
      001BED 5C               [ 1] 4764 	incw x 
      001BEE 0A 01            [ 1] 4765 	dec (1,sp)
      001BF0 20 F3            [ 2] 4766 	jra 4$
      001BF2 84               [ 1] 4767 5$: pop a 
                                   4768 ; display saved size  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001BF3 1E 01            [ 2] 4769 	ldw x,(BSIZE,sp) 
      001BF5 CD 09 A7         [ 4] 4770 	call print_int 
      001BF8                       4771 	_drop VSIZE 
      001BF8 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BFA 81               [ 4] 4772 	ret 
                                   4773 
                                   4774 
                                   4775 ;------------------------
                                   4776 ; BASIC: LOAD "file" 
                                   4777 ; load file to RAM 
                                   4778 ; for execution 
                                   4779 ;------------------------
      001BFB                       4780 load:
      001BFB 72 01 00 24 07   [ 2] 4781 	btjf flags,#FRUN,0$ 
      001C00 27 05            [ 1] 4782 	jreq 0$ 
      001C02 A6 07            [ 1] 4783 	ld a,#ERR_CMD_ONLY 
      001C04 CC 07 24         [ 2] 4784 	jp tb_error 
      001C07                       4785 0$:	
      001C07 CD 08 08         [ 4] 4786 	call next_token 
      001C0A A1 08            [ 1] 4787 	cp a,#TK_QSTR
      001C0C 27 03            [ 1] 4788 	jreq 1$
      001C0E CC 07 22         [ 2] 4789 	jp syntax_error 
      001C11                       4790 1$:	
      001C11 90 CE 00 03      [ 2] 4791 	ldw y,basicptr
      001C15 72 B9 00 00      [ 2] 4792 	addw y,in.w 
      001C19 55 00 02 00 01   [ 1] 4793 	mov in,count 
      001C1E CD 1B 03         [ 4] 4794 	call search_file 
      001C21 25 05            [ 1] 4795 	jrc 2$ 
      001C23 A6 09            [ 1] 4796 	ld a,#ERR_NOT_FILE
      001C25 CC 07 24         [ 2] 4797 	jp tb_error  
      001C28                       4798 2$:	
      001C28 CD 1A 6C         [ 4] 4799 	call incr_farptr  
      001C2B CD 05 F0         [ 4] 4800 	call clear_basic  
      001C2E 5F               [ 1] 4801 	clrw x
      001C2F 92 AF 00 13      [ 5] 4802 	ldf a,([farptr],x)
      001C33 90 95            [ 1] 4803 	ld yh,a 
      001C35 5C               [ 1] 4804 	incw x  
      001C36 92 AF 00 13      [ 5] 4805 	ldf a,([farptr],x)
      001C3A 5C               [ 1] 4806 	incw x 
      001C3B 90 97            [ 1] 4807 	ld yl,a 
      001C3D 72 B9 00 1B      [ 2] 4808 	addw y,txtbgn
      001C41 90 CF 00 1D      [ 2] 4809 	ldw txtend,y
      001C45 90 CE 00 1B      [ 2] 4810 	ldw y,txtbgn
      001C49                       4811 3$:	; load BASIC text 	
      001C49 92 AF 00 13      [ 5] 4812 	ldf a,([farptr],x)
      001C4D 90 F7            [ 1] 4813 	ld (y),a 
      001C4F 5C               [ 1] 4814 	incw x 
      001C50 90 5C            [ 1] 4815 	incw y 
      001C52 90 C3 00 1D      [ 2] 4816 	cpw y,txtend 
      001C56 2B F1            [ 1] 4817 	jrmi 3$
                                   4818 ; return loaded size 	 
      001C58 CE 00 1D         [ 2] 4819 	ldw x,txtend 
      001C5B 72 B0 00 1B      [ 2] 4820 	subw x,txtbgn
      001C5F CD 09 A7         [ 4] 4821 	call print_int 
      001C62 81               [ 4] 4822 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4823 
                                   4824 ;-----------------------------------
                                   4825 ; BASIC: FORGET ["file_name"] 
                                   4826 ; erase file_name and all others 
                                   4827 ; after it. 
                                   4828 ; without argument erase all files 
                                   4829 ;-----------------------------------
      001C63                       4830 forget:
      001C63 CD 08 08         [ 4] 4831 	call next_token 
      001C66 A1 00            [ 1] 4832 	cp a,#TK_NONE 
      001C68 27 26            [ 1] 4833 	jreq 3$ 
      001C6A A1 08            [ 1] 4834 	cp a,#TK_QSTR
      001C6C 27 03            [ 1] 4835 	jreq 1$
      001C6E CC 07 22         [ 2] 4836 	jp syntax_error
      001C71 90 CE 00 03      [ 2] 4837 1$: ldw y,basicptr
      001C75 72 B9 00 00      [ 2] 4838 	addw y,in.w
      001C79 55 00 02 00 01   [ 1] 4839 	mov in,count 
      001C7E CD 1B 03         [ 4] 4840 	call search_file
      001C81 25 05            [ 1] 4841 	jrc 2$
      001C83 A6 09            [ 1] 4842 	ld a,#ERR_NOT_FILE 
      001C85 CC 07 24         [ 2] 4843 	jp tb_error 
      001C88                       4844 2$: 
      001C88 CE 00 13         [ 2] 4845 	ldw x,farptr
      001C8B C6 00 15         [ 1] 4846 	ld a,farptr+2
      001C8E 20 0A            [ 2] 4847 	jra 4$ 
      001C90                       4848 3$: ; forget all files 
      001C90 AE 00 64         [ 2] 4849 	ldw x,#100
      001C93 4F               [ 1] 4850 	clr a 
      001C94 CF 00 13         [ 2] 4851 	ldw farptr,x 
      001C97 C7 00 15         [ 1] 4852 	ld farptr+2,a 
      001C9A                       4853 4$:
      001C9A CF 00 16         [ 2] 4854 	ldw ffree,x 
      001C9D C7 00 18         [ 1] 4855 	ld ffree+2,a 
      001CA0 4B 04            [ 1] 4856 	push #4
      001CA2 5F               [ 1] 4857 	clrw x 
      001CA3 0D 01            [ 1] 4858 5$: tnz (1,sp)
      001CA5 27 09            [ 1] 4859 	jreq 6$ 
      001CA7 4F               [ 1] 4860 	clr a  
      001CA8 CD 00 DC         [ 4] 4861 	call write_byte 
      001CAB 5C               [ 1] 4862 	incw x 
      001CAC 0A 01            [ 1] 4863 	dec (1,sp)
      001CAE 20 F3            [ 2] 4864 	jra 5$	
      001CB0 84               [ 1] 4865 6$: pop a 
      001CB1 81               [ 4] 4866 	ret 
                                   4867 
                                   4868 ;----------------------
                                   4869 ; BASIC: DIR 
                                   4870 ; list saved files 
                                   4871 ;----------------------
                           000001  4872 	COUNT=1 ; files counter 
                           000002  4873 	VSIZE=2 
      001CB2                       4874 directory:
      001CB2                       4875 	_vars VSIZE 
      001CB2 52 02            [ 2]    1     sub sp,#VSIZE 
      001CB4 5F               [ 1] 4876 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001CB5 1F 01            [ 2] 4877 	ldw (COUNT,sp),x 
      001CB7 CF 00 14         [ 2] 4878 	ldw farptr+1,x 
      001CBA 35 01 00 13      [ 1] 4879 	mov farptr,#1 
      001CBE                       4880 dir_loop:
      001CBE 5F               [ 1] 4881 	clrw x 
      001CBF 92 AF 00 13      [ 5] 4882 	ldf a,([farptr],x)
      001CC3 27 38            [ 1] 4883 	jreq 8$ 
      001CC5                       4884 1$: ;name loop 	
      001CC5 92 AF 00 13      [ 5] 4885 	ldf a,([farptr],x)
      001CC9 27 06            [ 1] 4886 	jreq 2$ 
      001CCB CD 01 9E         [ 4] 4887 	call putc 
      001CCE 5C               [ 1] 4888 	incw x 
      001CCF 20 F4            [ 2] 4889 	jra 1$
      001CD1 5C               [ 1] 4890 2$: incw x ; skip ending 0. 
      001CD2 A6 20            [ 1] 4891 	ld a,#SPACE 
      001CD4 CD 01 9E         [ 4] 4892 	call putc 
                                   4893 ; get file size 	
      001CD7 92 AF 00 13      [ 5] 4894 	ldf a,([farptr],x)
      001CDB 90 95            [ 1] 4895 	ld yh,a 
      001CDD 5C               [ 1] 4896 	incw x 
      001CDE 92 AF 00 13      [ 5] 4897 	ldf a,([farptr],x)
      001CE2 5C               [ 1] 4898 	incw x 
      001CE3 90 97            [ 1] 4899 	ld yl,a 
      001CE5 90 89            [ 2] 4900 	pushw y 
      001CE7 72 FB 01         [ 2] 4901 	addw x,(1,sp)
                                   4902 ; skip to next file 
      001CEA CD 1A 6C         [ 4] 4903 	call incr_farptr 
                                   4904 ; print file size 
      001CED 85               [ 2] 4905 	popw x ; file size 
      001CEE CD 09 A7         [ 4] 4906 	call print_int 
      001CF1 A6 0D            [ 1] 4907 	ld a,#CR 
      001CF3 CD 01 9E         [ 4] 4908 	call putc
      001CF6 1E 01            [ 2] 4909 	ldw x,(COUNT,sp)
      001CF8 5C               [ 1] 4910 	incw x
      001CF9 1F 01            [ 2] 4911 	ldw (COUNT,sp),x  
      001CFB 20 C1            [ 2] 4912 	jra dir_loop 
      001CFD                       4913 8$: ; print number of files 
      001CFD 1E 01            [ 2] 4914 	ldw x,(COUNT,sp)
      001CFF CD 09 A7         [ 4] 4915 	call print_int 
      001D02 AE 1D 32         [ 2] 4916 	ldw x,#file_count 
      001D05 CD 01 B0         [ 4] 4917 	call puts  
                                   4918 ; print drive free space 	
      001D08 A6 FF            [ 1] 4919 	ld a,#0xff 
      001D0A C0 00 18         [ 1] 4920 	sub a,ffree+2 
      001D0D C7 00 0A         [ 1] 4921 	ld acc8,a 
      001D10 A6 7F            [ 1] 4922 	ld a,#0x7f 
      001D12 C2 00 17         [ 1] 4923 	sbc a,ffree+1 
      001D15 C7 00 09         [ 1] 4924 	ld acc16,a 
      001D18 A6 02            [ 1] 4925 	ld a,#2 
      001D1A C2 00 16         [ 1] 4926 	sbc a,ffree 
      001D1D C7 00 08         [ 1] 4927 	ld acc24,a 
      001D20 5F               [ 1] 4928 	clrw x  
      001D21 A6 06            [ 1] 4929 	ld a,#6 
      001D23 97               [ 1] 4930 	ld xl,a 
      001D24 A6 0A            [ 1] 4931 	ld a,#10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001D26 CD 09 5F         [ 4] 4932 	call prti24 
      001D29 AE 1D 3A         [ 2] 4933 	ldw x,#drive_free
      001D2C CD 01 B0         [ 4] 4934 	call puts 
      001D2F                       4935 	_drop VSIZE 
      001D2F 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D31 81               [ 4] 4936 	ret
      001D32 20 66 69 6C 65 73 0A  4937 file_count: .asciz " files\n"
             00
      001D3A 20 62 79 74 65 73 20  4938 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4939 
                                   4940 ;---------------------
                                   4941 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4942 ; write 1 or more byte to FLASH or EEPROM
                                   4943 ; starting at address  
                                   4944 ; input:
                                   4945 ;   expr1  	is address 
                                   4946 ;   expr2   is byte to write
                                   4947 ; output:
                                   4948 ;   none 
                                   4949 ;---------------------
                           000001  4950 	ADDR=1
                           000002  4951 	VSIZ=2 
      001D47                       4952 write:
      001D47                       4953 	_vars VSIZE 
      001D47 52 02            [ 2]    1     sub sp,#VSIZE 
      001D49 72 5F 00 13      [ 1] 4954 	clr farptr ; expect 16 bits address 
      001D4D CD 12 EF         [ 4] 4955 	call expression
      001D50 A1 03            [ 1] 4956 	cp a,#TK_INTGR 
      001D52 27 03            [ 1] 4957 	jreq 0$
      001D54 CC 07 22         [ 2] 4958 	jp syntax_error
      001D57 1F 01            [ 2] 4959 0$: ldw (ADDR,sp),x 
      001D59 CD 08 08         [ 4] 4960 	call next_token 
      001D5C A1 0B            [ 1] 4961 	cp a,#TK_COMMA 
      001D5E 27 02            [ 1] 4962 	jreq 1$ 
      001D60 20 19            [ 2] 4963 	jra 9$ 
      001D62 CD 12 EF         [ 4] 4964 1$:	call expression
      001D65 A1 03            [ 1] 4965 	cp a,#TK_INTGR
      001D67 27 03            [ 1] 4966 	jreq 2$
      001D69 CC 07 22         [ 2] 4967 	jp syntax_error
      001D6C 9F               [ 1] 4968 2$:	ld a,xl 
      001D6D 1E 01            [ 2] 4969 	ldw x,(ADDR,sp) 
      001D6F CF 00 14         [ 2] 4970 	ldw farptr+1,x 
      001D72 5F               [ 1] 4971 	clrw x 
      001D73 CD 00 DC         [ 4] 4972 	call write_byte
      001D76 1E 01            [ 2] 4973 	ldw x,(ADDR,sp)
      001D78 5C               [ 1] 4974 	incw x 
      001D79 20 DC            [ 2] 4975 	jra 0$ 
      001D7B                       4976 9$:
      001D7B                       4977 	_drop VSIZE
      001D7B 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D7D 81               [ 4] 4978 	ret 
                                   4979 
                                   4980 
                                   4981 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   4982 ;BASIC: CHAR(expr)
                                   4983 ; évaluate expression 
                                   4984 ; and take the 7 least 
                                   4985 ; bits as ASCII character
                                   4986 ;---------------------
      001D7E                       4987 char:
      001D7E A6 09            [ 1] 4988 	ld a,#TK_LPAREN 
      001D80 CD 11 E8         [ 4] 4989 	call expect 
      001D83 CD 13 33         [ 4] 4990 	call relation 
      001D86 A1 03            [ 1] 4991 	cp a,#TK_INTGR 
      001D88 27 03            [ 1] 4992 	jreq 1$
      001D8A CC 07 22         [ 2] 4993 	jp syntax_error
      001D8D 89               [ 2] 4994 1$:	pushw x 
      001D8E A6 0A            [ 1] 4995 	ld a,#TK_RPAREN 
      001D90 CD 11 E8         [ 4] 4996 	call expect
      001D93 85               [ 2] 4997 	popw x  
      001D94 9F               [ 1] 4998 	ld a,xl 
      001D95 A4 7F            [ 1] 4999 	and a,#0x7f 
      001D97 97               [ 1] 5000 	ld xl,a
      001D98 A6 02            [ 1] 5001 	ld a,#TK_CHAR
      001D9A 81               [ 4] 5002 	ret
                                   5003 
                                   5004 ;---------------------
                                   5005 ; BASIC: ASC(string|char)
                                   5006 ; extract first character 
                                   5007 ; of string argument 
                                   5008 ; return it as TK_INTGR 
                                   5009 ;---------------------
      001D9B                       5010 ascii:
      001D9B A6 09            [ 1] 5011 	ld a,#TK_LPAREN
      001D9D CD 11 E8         [ 4] 5012 	call expect 
      001DA0 CD 08 08         [ 4] 5013 	call next_token 
      001DA3 A1 08            [ 1] 5014 	cp a,#TK_QSTR 
      001DA5 27 07            [ 1] 5015 	jreq 1$
      001DA7 A1 02            [ 1] 5016 	cp a,#TK_CHAR 
      001DA9 27 06            [ 1] 5017 	jreq 2$ 
      001DAB CC 07 22         [ 2] 5018 	jp syntax_error
      001DAE                       5019 1$: 
      001DAE F6               [ 1] 5020 	ld a,(x)
      001DAF 20 01            [ 2] 5021 	jra 3$
      001DB1                       5022 2$: 
      001DB1 9F               [ 1] 5023 	ld a,xl 
      001DB2 97               [ 1] 5024 3$:	ld xl,a 
      001DB3 4F               [ 1] 5025 	clr a  
      001DB4 95               [ 1] 5026 	ld xh,a 
      001DB5 89               [ 2] 5027 	pushw x  
      001DB6 A6 0A            [ 1] 5028 	ld a,#TK_RPAREN 
      001DB8 CD 11 E8         [ 4] 5029 	call expect 
      001DBB 85               [ 2] 5030 	popw x 
      001DBC A6 03            [ 1] 5031 	ld a,#TK_INTGR 
      001DBE 81               [ 4] 5032 	ret 
                                   5033 
                                   5034 ;---------------------
                                   5035 ;BASIC: KEY
                                   5036 ; wait for a character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   5037 ; received from STDIN 
                                   5038 ; input:
                                   5039 ;	none 
                                   5040 ; output:
                                   5041 ;	X 		ASCII character 
                                   5042 ;---------------------
      001DBF                       5043 key:
      001DBF CD 01 A7         [ 4] 5044 	call getc 
      001DC2 5F               [ 1] 5045 	clrw x 
      001DC3 97               [ 1] 5046 	ld xl,a 
      001DC4 A6 03            [ 1] 5047 	ld a,#TK_INTGR
      001DC6 81               [ 4] 5048 	ret
                                   5049 
                                   5050 ;----------------------
                                   5051 ; BASIC: QKEY
                                   5052 ; Return true if there 
                                   5053 ; is a character in 
                                   5054 ; waiting in STDIN 
                                   5055 ; input:
                                   5056 ;  none 
                                   5057 ; output:
                                   5058 ;   X 		0|1 
                                   5059 ;-----------------------
      001DC7                       5060 qkey: 
      001DC7 5F               [ 1] 5061 	clrw x 
      001DC8 72 0B 52 40 01   [ 2] 5062 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001DCD 5C               [ 1] 5063 	incw x 
      001DCE A6 03            [ 1] 5064 9$: ld a,#TK_INTGR
      001DD0 81               [ 4] 5065 	ret 
                                   5066 
                                   5067 ;---------------------
                                   5068 ; BASIC: GPIO(expr,reg)
                                   5069 ; return gpio address 
                                   5070 ; expr {0..8}
                                   5071 ; input:
                                   5072 ;   none 
                                   5073 ; output:
                                   5074 ;   X 		gpio register address
                                   5075 ;----------------------------
      001DD1                       5076 gpio:
      001DD1 A6 09            [ 1] 5077 	ld a,#TK_LPAREN 
      001DD3 CD 11 E8         [ 4] 5078 	call expect 
      001DD6 CD 11 F5         [ 4] 5079 	call arg_list
      001DD9 A1 02            [ 1] 5080 	cp a,#2
      001DDB 27 03            [ 1] 5081 	jreq 1$
      001DDD CC 07 22         [ 2] 5082 	jp syntax_error  
      001DE0                       5083 1$:	
      001DE0 A6 0A            [ 1] 5084 	ld a,#TK_RPAREN 
      001DE2 CD 11 E8         [ 4] 5085 	call expect 
      001DE5 AE 00 02         [ 2] 5086 	ldw x,#2
      001DE8 72 DE 00 19      [ 5] 5087 	ldw x,([dstkptr],x) ; port 
      001DEC 2B 1B            [ 1] 5088 	jrmi bad_port
      001DEE A3 00 09         [ 2] 5089 	cpw x,#9
      001DF1 2A 16            [ 1] 5090 	jrpl bad_port
      001DF3 A6 05            [ 1] 5091 	ld a,#5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001DF5 42               [ 4] 5092 	mul x,a
      001DF6 1C 50 00         [ 2] 5093 	addw x,#GPIO_BASE 
      001DF9 89               [ 2] 5094 	pushw x 
      001DFA CD 0F D2         [ 4] 5095 	call dpop 
      001DFD 72 FB 01         [ 2] 5096 	addw x,(1,sp)
      001E00 1F 01            [ 2] 5097 	ldw (1,sp),x  
      001E02 CD 0F F9         [ 4] 5098 	call ddrop  
      001E05 85               [ 2] 5099 	popw x 
      001E06 A6 03            [ 1] 5100 	ld a,#TK_INTGR
      001E08 81               [ 4] 5101 	ret
      001E09                       5102 bad_port:
      001E09 A6 0A            [ 1] 5103 	ld a,#ERR_BAD_VALUE
      001E0B CC 07 24         [ 2] 5104 	jp tb_error
                                   5105 
                                   5106 ;----------------------
                                   5107 ; BASIC: ODR 
                                   5108 ; return offset of gpio
                                   5109 ; ODR register: 0
                                   5110 ; ---------------------
      001E0E                       5111 port_odr:
      001E0E AE 00 00         [ 2] 5112 	ldw x,#GPIO_ODR
      001E11 A6 03            [ 1] 5113 	ld a,#TK_INTGR
      001E13 81               [ 4] 5114 	ret
                                   5115 
                                   5116 ;----------------------
                                   5117 ; BASIC: IDR 
                                   5118 ; return offset of gpio
                                   5119 ; IDR register: 1
                                   5120 ; ---------------------
      001E14                       5121 port_idr:
      001E14 AE 00 01         [ 2] 5122 	ldw x,#GPIO_IDR
      001E17 A6 03            [ 1] 5123 	ld a,#TK_INTGR
      001E19 81               [ 4] 5124 	ret
                                   5125 
                                   5126 ;----------------------
                                   5127 ; BASIC: DDR 
                                   5128 ; return offset of gpio
                                   5129 ; DDR register: 2
                                   5130 ; ---------------------
      001E1A                       5131 port_ddr:
      001E1A AE 00 02         [ 2] 5132 	ldw x,#GPIO_DDR
      001E1D A6 03            [ 1] 5133 	ld a,#TK_INTGR
      001E1F 81               [ 4] 5134 	ret
                                   5135 
                                   5136 ;----------------------
                                   5137 ; BASIC: CRL  
                                   5138 ; return offset of gpio
                                   5139 ; CR1 register: 3
                                   5140 ; ---------------------
      001E20                       5141 port_cr1:
      001E20 AE 00 03         [ 2] 5142 	ldw x,#GPIO_CR1
      001E23 A6 03            [ 1] 5143 	ld a,#TK_INTGR
      001E25 81               [ 4] 5144 	ret
                                   5145 
                                   5146 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5147 ; BASIC: CRH  
                                   5148 ; return offset of gpio
                                   5149 ; CR2 register: 4
                                   5150 ; ---------------------
      001E26                       5151 port_cr2:
      001E26 AE 00 04         [ 2] 5152 	ldw x,#GPIO_CR2
      001E29 A6 03            [ 1] 5153 	ld a,#TK_INTGR
      001E2B 81               [ 4] 5154 	ret
                                   5155 
                                   5156 ;-------------------------
                                   5157 ; BASIC: UFLASH 
                                   5158 ; return user flash address
                                   5159 ; input:
                                   5160 ;  none 
                                   5161 ; output:
                                   5162 ;	A		TK_INTGR
                                   5163 ;   X 		user address 
                                   5164 ;---------------------------
      001E2C                       5165 uflash:
      001E2C AE 21 80         [ 2] 5166 	ldw x,#user_space 
      001E2F A6 03            [ 1] 5167 	ld a,#TK_INTGR 
      001E31 81               [ 4] 5168 	ret 
                                   5169 
                                   5170 ;-------------------------
                                   5171 ; BASIC: EEPROM 
                                   5172 ; return eeprom address
                                   5173 ; input:
                                   5174 ;  none 
                                   5175 ; output:
                                   5176 ;	A		TK_INTGR
                                   5177 ;   X 		eeprom address 
                                   5178 ;---------------------------
      001E32                       5179 eeprom:
      001E32 AE 40 00         [ 2] 5180 	ldw x,#EEPROM_BASE 
      001E35 A6 03            [ 1] 5181 	ld a,#TK_INTGR 
      001E37 81               [ 4] 5182 	ret 
                                   5183 
                                   5184 ;---------------------
                                   5185 ; BASIC: USR(addr[,arg])
                                   5186 ; execute a function written 
                                   5187 ; in binary code.
                                   5188 ; binary fonction should 
                                   5189 ; return token attribute in A 
                                   5190 ; and value in X. 
                                   5191 ; input:
                                   5192 ;   addr	routine address 
                                   5193 ;   arg 	is an optional argument 
                                   5194 ; output:
                                   5195 ;   A 		token attribute 
                                   5196 ;   X       returned value 
                                   5197 ;---------------------
      001E38                       5198 usr:
      001E38 90 89            [ 2] 5199 	pushw y 	
      001E3A A6 09            [ 1] 5200 	ld a,#TK_LPAREN 
      001E3C CD 11 E8         [ 4] 5201 	call expect 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E3F CD 11 F5         [ 4] 5202 	call arg_list 
      001E42 A1 01            [ 1] 5203 	cp a,#1 
      001E44 2A 03            [ 1] 5204 	jrpl 2$ 
      001E46 CC 07 22         [ 2] 5205 	jp syntax_error 
      001E49 A6 0A            [ 1] 5206 2$: ld a,#TK_RPAREN
      001E4B CD 11 E8         [ 4] 5207 	call expect 
      001E4E CD 0F D2         [ 4] 5208 	call dpop 
      001E51 A1 02            [ 1] 5209 	cp a,#2 
      001E53 2B 05            [ 1] 5210 	jrmi 4$
      001E55 90 93            [ 1] 5211 	ldw y,x ; y=arg 
      001E57 CD 0F D2         [ 4] 5212 	call dpop ;x=addr 
      001E5A 51               [ 1] 5213 4$:	exgw y,x ; y=addr,x=arg 
      001E5B 90 FD            [ 4] 5214 	call (y)
      001E5D 90 85            [ 2] 5215 	popw y 
      001E5F 81               [ 4] 5216 	ret 
                                   5217 
                                   5218 ;------------------------------
                                   5219 ; BASIC: BYE 
                                   5220 ; halt mcu in its lowest power mode 
                                   5221 ; wait for reset or external interrupt
                                   5222 ; do a cold start on wakeup.
                                   5223 ;------------------------------
      001E60                       5224 bye:
      001E60 72 0D 52 40 FB   [ 2] 5225 	btjf UART3_SR,#UART_SR_TC,.
      001E65 8E               [10] 5226 	halt
      001E66 CC 05 65         [ 2] 5227 	jp cold_start  
                                   5228 
                                   5229 ;----------------------------------
                                   5230 ; BASIC: SLEEP 
                                   5231 ; halt mcu until reset or external
                                   5232 ; interrupt.
                                   5233 ; Resume progam after SLEEP command
                                   5234 ;----------------------------------
      001E69                       5235 sleep:
      001E69 72 0D 52 40 FB   [ 2] 5236 	btjf UART3_SR,#UART_SR_TC,.
      001E6E 72 16 00 24      [ 1] 5237 	bset flags,#FSLEEP
      001E72 8E               [10] 5238 	halt 
      001E73 81               [ 4] 5239 	ret 
                                   5240 
                                   5241 ;-------------------------------
                                   5242 ; BASIC: PAUSE expr 
                                   5243 ; suspend execution for n msec.
                                   5244 ; input:
                                   5245 ;	none
                                   5246 ; output:
                                   5247 ;	none 
                                   5248 ;------------------------------
      001E74                       5249 pause:
      001E74 CD 12 EF         [ 4] 5250 	call expression
      001E77 A1 03            [ 1] 5251 	cp a,#TK_INTGR
      001E79 27 03            [ 1] 5252 	jreq pause02 
      001E7B CC 07 22         [ 2] 5253 	jp syntax_error
      001E7E                       5254 pause02: 
      001E7E 5D               [ 2] 5255 1$: tnzw x 
      001E7F 27 04            [ 1] 5256 	jreq 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E81 8F               [10] 5257 	wfi 
      001E82 5A               [ 2] 5258 	decw x 
      001E83 26 F9            [ 1] 5259 	jrne 1$
      001E85 4F               [ 1] 5260 2$:	clr a 
      001E86 81               [ 4] 5261 	ret 
                                   5262 
                                   5263 ;------------------------------
                                   5264 ; BASIC: TICKS
                                   5265 ; return msec ticks counter value 
                                   5266 ; input:
                                   5267 ; 	none 
                                   5268 ; output:
                                   5269 ;	X 		TK_INTGR
                                   5270 ;-------------------------------
      001E87                       5271 get_ticks:
      001E87 CE 00 0B         [ 2] 5272 	ldw x,ticks 
      001E8A A6 03            [ 1] 5273 	ld a,#TK_INTGR
      001E8C 81               [ 4] 5274 	ret 
                                   5275 
                                   5276 
                                   5277 
                                   5278 ;------------------------------
                                   5279 ; BASIC: ABS(expr)
                                   5280 ; return absolute value of expr.
                                   5281 ; input:
                                   5282 ;   none
                                   5283 ; output:
                                   5284 ;   X     	positive integer
                                   5285 ;-------------------------------
      001E8D                       5286 abs:
      001E8D A6 09            [ 1] 5287 	ld a,#TK_LPAREN
      001E8F CD 11 E8         [ 4] 5288 	call expect 
      001E92 CD 11 F5         [ 4] 5289 	call arg_list
      001E95 A1 01            [ 1] 5290 	cp a,#1 
      001E97 27 03            [ 1] 5291 	jreq 0$ 
      001E99 CC 07 22         [ 2] 5292 	jp syntax_error
      001E9C                       5293 0$:  
      001E9C A6 0A            [ 1] 5294 	ld a,#TK_RPAREN 
      001E9E CD 11 E8         [ 4] 5295 	call expect 
      001EA1 CD 0F D2         [ 4] 5296     call dpop   
      001EA4 9E               [ 1] 5297 	ld a,xh 
      001EA5 A5 80            [ 1] 5298 	bcp a,#0x80 
      001EA7 27 01            [ 1] 5299 	jreq 2$ 
      001EA9 50               [ 2] 5300 	negw x 
      001EAA A6 03            [ 1] 5301 2$: ld a,#TK_INTGR 
      001EAC 81               [ 4] 5302 	ret 
                                   5303 
                                   5304 ;------------------------------
                                   5305 ; BASIC: RND(expr)
                                   5306 ; return random number 
                                   5307 ; between 1 and expr inclusive
                                   5308 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5309 ; input:
                                   5310 ; 	none 
                                   5311 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   5312 ;	X 		random positive integer 
                                   5313 ;------------------------------
      001EAD                       5314 random:
      001EAD A6 09            [ 1] 5315 	ld a,#TK_LPAREN 
      001EAF CD 11 E8         [ 4] 5316 	call expect 
      001EB2 CD 11 F5         [ 4] 5317 	call arg_list 
      001EB5 A1 01            [ 1] 5318 	cp a,#1
      001EB7 27 03            [ 1] 5319 	jreq 1$
      001EB9 CC 07 22         [ 2] 5320 	jp syntax_error
      001EBC A6 0A            [ 1] 5321 1$: ld a,#TK_RPAREN
      001EBE CD 11 E8         [ 4] 5322 	call expect 
      001EC1 CD 0F D2         [ 4] 5323 	call dpop 
      001EC4 89               [ 2] 5324 	pushw x 
      001EC5 9E               [ 1] 5325 	ld a,xh 
      001EC6 A5 80            [ 1] 5326 	bcp a,#0x80 
      001EC8 27 05            [ 1] 5327 	jreq 2$
      001ECA A6 0A            [ 1] 5328 	ld a,#ERR_BAD_VALUE
      001ECC CC 07 24         [ 2] 5329 	jp tb_error
      001ECF                       5330 2$: 
                                   5331 ; acc16=(x<<5)^x 
      001ECF CE 00 0D         [ 2] 5332 	ldw x,seedx 
      001ED2 58               [ 2] 5333 	sllw x 
      001ED3 58               [ 2] 5334 	sllw x 
      001ED4 58               [ 2] 5335 	sllw x 
      001ED5 58               [ 2] 5336 	sllw x 
      001ED6 58               [ 2] 5337 	sllw x 
      001ED7 9E               [ 1] 5338 	ld a,xh 
      001ED8 C8 00 0D         [ 1] 5339 	xor a,seedx 
      001EDB C7 00 09         [ 1] 5340 	ld acc16,a 
      001EDE 9F               [ 1] 5341 	ld a,xl 
      001EDF C8 00 0E         [ 1] 5342 	xor a,seedx+1 
      001EE2 C7 00 0A         [ 1] 5343 	ld acc8,a 
                                   5344 ; seedx=seedy 
      001EE5 CE 00 0F         [ 2] 5345 	ldw x,seedy 
      001EE8 CF 00 0D         [ 2] 5346 	ldw seedx,x  
                                   5347 ; seedy=seedy^(seedy>>1)
      001EEB 90 54            [ 2] 5348 	srlw y 
      001EED 90 9E            [ 1] 5349 	ld a,yh 
      001EEF C8 00 0F         [ 1] 5350 	xor a,seedy 
      001EF2 C7 00 0F         [ 1] 5351 	ld seedy,a  
      001EF5 90 9F            [ 1] 5352 	ld a,yl 
      001EF7 C8 00 10         [ 1] 5353 	xor a,seedy+1 
      001EFA C7 00 10         [ 1] 5354 	ld seedy+1,a 
                                   5355 ; acc16>>3 
      001EFD CE 00 09         [ 2] 5356 	ldw x,acc16 
      001F00 54               [ 2] 5357 	srlw x 
      001F01 54               [ 2] 5358 	srlw x 
      001F02 54               [ 2] 5359 	srlw x 
                                   5360 ; x=acc16^x 
      001F03 9E               [ 1] 5361 	ld a,xh 
      001F04 C8 00 09         [ 1] 5362 	xor a,acc16 
      001F07 95               [ 1] 5363 	ld xh,a 
      001F08 9F               [ 1] 5364 	ld a,xl 
      001F09 C8 00 0A         [ 1] 5365 	xor a,acc8 
      001F0C 97               [ 1] 5366 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5367 ; seedy=x^seedy 
      001F0D C8 00 10         [ 1] 5368 	xor a,seedy+1
      001F10 97               [ 1] 5369 	ld xl,a 
      001F11 9E               [ 1] 5370 	ld a,xh 
      001F12 C8 00 0F         [ 1] 5371 	xor a,seedy
      001F15 95               [ 1] 5372 	ld xh,a 
      001F16 CF 00 0F         [ 2] 5373 	ldw seedy,x 
                                   5374 ; return seedy modulo expr + 1 
      001F19 90 85            [ 2] 5375 	popw y 
      001F1B 65               [ 2] 5376 	divw x,y 
      001F1C 93               [ 1] 5377 	ldw x,y 
      001F1D 5C               [ 1] 5378 	incw x 
      001F1E A6 03            [ 1] 5379 	ld a,#TK_INTGR
      001F20 81               [ 4] 5380 	ret 
                                   5381 
                                   5382 ;---------------------------------
                                   5383 ; BASIC: WORDS 
                                   5384 ; affiche la listes des mots du
                                   5385 ; dictionnaire.
                                   5386 ;---------------------------------
                           000001  5387 	WLEN=1
                           000002  5388 	LLEN=2  
                           000002  5389 	VSIZE=2 
      001F21                       5390 words:
      001F21                       5391 	_vars VSIZE
      001F21 52 02            [ 2]    1     sub sp,#VSIZE 
      001F23 0F 02            [ 1] 5392 	clr (LLEN,sp)
      001F25 90 AE 21 50      [ 2] 5393 	ldw y,#kword_dict+2
      001F29 93               [ 1] 5394 0$:	ldw x,y
      001F2A F6               [ 1] 5395 	ld a,(x)
      001F2B A4 0F            [ 1] 5396 	and a,#15 
      001F2D 6B 01            [ 1] 5397 	ld (WLEN,sp),a 
      001F2F 5C               [ 1] 5398 1$:	incw x 
      001F30 F6               [ 1] 5399 	ld a,(x)
      001F31 CD 01 9E         [ 4] 5400 	call putc 
      001F34 0C 02            [ 1] 5401 	inc (LLEN,sp)
      001F36 0A 01            [ 1] 5402 	dec (WLEN,sp)
      001F38 26 F5            [ 1] 5403 	jrne 1$
      001F3A A6 46            [ 1] 5404 	ld a,#70
      001F3C 11 02            [ 1] 5405 	cp a,(LLEN,sp)
      001F3E 2B 09            [ 1] 5406 	jrmi 2$   
      001F40 A6 20            [ 1] 5407 	ld a,#SPACE 
      001F42 CD 01 9E         [ 4] 5408 	call putc 
      001F45 0C 02            [ 1] 5409 	inc (LLEN,sp) 
      001F47 20 07            [ 2] 5410 	jra 3$
      001F49 A6 0D            [ 1] 5411 2$: ld a,#CR 
      001F4B CD 01 9E         [ 4] 5412 	call putc 
      001F4E 0F 02            [ 1] 5413 	clr (LLEN,sp)
      001F50 72 A2 00 02      [ 2] 5414 3$:	subw y,#2 
      001F54 90 FE            [ 2] 5415 	ldw y,(y)
      001F56 26 D1            [ 1] 5416 	jrne 0$  
      001F58                       5417 	_drop VSIZE 
      001F58 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F5A 81               [ 4] 5418 	ret 
                                   5419 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5420 
                                   5421 ;*********************************
                                   5422 
                                   5423 ;------------------------------
                                   5424 ;      dictionary 
                                   5425 ; format:
                                   5426 ;   link:   2 bytes 
                                   5427 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5428 ;   cmd_name: 16 byte max 
                                   5429 ;   code_address: 2 bytes 
                                   5430 ;------------------------------
                           000080  5431 	FFUNC=128 ; function flag 
                                   5432 	.macro _dict_entry len,name,cmd 
                                   5433 	.word LINK 
                                   5434 	LINK=.
                                   5435 name:
                                   5436 	.byte len 	
                                   5437 	.ascii "name"
                                   5438 	.word cmd 
                                   5439 	.endm 
                                   5440 
                           000000  5441 	LINK=0
      001F5B                       5442 kword_end:
      001F5B                       5443 	_dict_entry,3,BYE,bye 
      001F5B 00 00                    1 	.word LINK 
                           001F5D     2 	LINK=.
      001F5D                          3 BYE:
      001F5D 03                       4 	.byte 3 	
      001F5E 42 59 45                 5 	.ascii "BYE"
      001F61 1E 60                    6 	.word bye 
      001F63                       5444 	_dict_entry,5,WORDS,words 
      001F63 1F 5D                    1 	.word LINK 
                           001F65     2 	LINK=.
      001F65                          3 WORDS:
      001F65 05                       4 	.byte 5 	
      001F66 57 4F 52 44 53           5 	.ascii "WORDS"
      001F6B 1F 21                    6 	.word words 
      001F6D                       5445 	_dict_entry,5,SLEEP,sleep 
      001F6D 1F 65                    1 	.word LINK 
                           001F6F     2 	LINK=.
      001F6F                          3 SLEEP:
      001F6F 05                       4 	.byte 5 	
      001F70 53 4C 45 45 50           5 	.ascii "SLEEP"
      001F75 1E 69                    6 	.word sleep 
      001F77                       5446 	_dict_entry,6,FORGET,forget 
      001F77 1F 6F                    1 	.word LINK 
                           001F79     2 	LINK=.
      001F79                          3 FORGET:
      001F79 06                       4 	.byte 6 	
      001F7A 46 4F 52 47 45 54        5 	.ascii "FORGET"
      001F80 1C 63                    6 	.word forget 
      001F82                       5447 	_dict_entry,3,DIR,directory 
      001F82 1F 79                    1 	.word LINK 
                           001F84     2 	LINK=.
      001F84                          3 DIR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F84 03                       4 	.byte 3 	
      001F85 44 49 52                 5 	.ascii "DIR"
      001F88 1C B2                    6 	.word directory 
      001F8A                       5448 	_dict_entry,4,LOAD,load 
      001F8A 1F 84                    1 	.word LINK 
                           001F8C     2 	LINK=.
      001F8C                          3 LOAD:
      001F8C 04                       4 	.byte 4 	
      001F8D 4C 4F 41 44              5 	.ascii "LOAD"
      001F91 1B FB                    6 	.word load 
      001F93                       5449 	_dict_entry,4,SAVE,save
      001F93 1F 8C                    1 	.word LINK 
                           001F95     2 	LINK=.
      001F95                          3 SAVE:
      001F95 04                       4 	.byte 4 	
      001F96 53 41 56 45              5 	.ascii "SAVE"
      001F9A 1B 4D                    6 	.word save 
      001F9C                       5450 	_dict_entry,5,WRITE,write  
      001F9C 1F 95                    1 	.word LINK 
                           001F9E     2 	LINK=.
      001F9E                          3 WRITE:
      001F9E 05                       4 	.byte 5 	
      001F9F 57 52 49 54 45           5 	.ascii "WRITE"
      001FA4 1D 47                    6 	.word write 
      001FA6                       5451 	_dict_entry,3,NEW,new
      001FA6 1F 9E                    1 	.word LINK 
                           001FA8     2 	LINK=.
      001FA8                          3 NEW:
      001FA8 03                       4 	.byte 3 	
      001FA9 4E 45 57                 5 	.ascii "NEW"
      001FAC 1A 61                    6 	.word new 
      001FAE                       5452 	_dict_entry,5,BREAK,break 
      001FAE 1F A8                    1 	.word LINK 
                           001FB0     2 	LINK=.
      001FB0                          3 BREAK:
      001FB0 05                       4 	.byte 5 	
      001FB1 42 52 45 41 4B           5 	.ascii "BREAK"
      001FB6 1A 12                    6 	.word break 
      001FB8                       5453 	_dict_entry,4,BEEP,beep 
      001FB8 1F B0                    1 	.word LINK 
                           001FBA     2 	LINK=.
      001FBA                          3 BEEP:
      001FBA 04                       4 	.byte 4 	
      001FBB 42 45 45 50              5 	.ascii "BEEP"
      001FBF 19 7C                    6 	.word beep 
      001FC1                       5454 	_dict_entry,4,STOP,stop 
      001FC1 1F BA                    1 	.word LINK 
                           001FC3     2 	LINK=.
      001FC3                          3 STOP:
      001FC3 04                       4 	.byte 4 	
      001FC4 53 54 4F 50              5 	.ascii "STOP"
      001FC8 19 6D                    6 	.word stop 
      001FCA                       5455     _dict_entry,4,SHOW,show 
      001FCA 1F C3                    1 	.word LINK 
                           001FCC     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001FCC                          3 SHOW:
      001FCC 04                       4 	.byte 4 	
      001FCD 53 48 4F 57              5 	.ascii "SHOW"
      001FD1 13 8A                    6 	.word show 
      001FD3                       5456 	_dict_entry 3,RUN,run
      001FD3 1F CC                    1 	.word LINK 
                           001FD5     2 	LINK=.
      001FD5                          3 RUN:
      001FD5 03                       4 	.byte 3 	
      001FD6 52 55 4E                 5 	.ascii "RUN"
      001FD9 19 26                    6 	.word run 
      001FDB                       5457 	_dict_entry 4,LIST,list
      001FDB 1F D5                    1 	.word LINK 
                           001FDD     2 	LINK=.
      001FDD                          3 LIST:
      001FDD 04                       4 	.byte 4 	
      001FDE 4C 49 53 54              5 	.ascii "LIST"
      001FE2 13 E4                    6 	.word list 
      001FE4                       5458 	_dict_entry,3+FFUNC,USR,usr
      001FE4 1F DD                    1 	.word LINK 
                           001FE6     2 	LINK=.
      001FE6                          3 USR:
      001FE6 83                       4 	.byte 3+FFUNC 	
      001FE7 55 53 52                 5 	.ascii "USR"
      001FEA 1E 38                    6 	.word usr 
      001FEC                       5459 	_dict_entry,6+FFUNC,EEPROM,eeprom 
      001FEC 1F E6                    1 	.word LINK 
                           001FEE     2 	LINK=.
      001FEE                          3 EEPROM:
      001FEE 86                       4 	.byte 6+FFUNC 	
      001FEF 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001FF5 1E 32                    6 	.word eeprom 
      001FF7                       5460 	_dict_entry,6+FFUNC,UFLASH,uflash 
      001FF7 1F EE                    1 	.word LINK 
                           001FF9     2 	LINK=.
      001FF9                          3 UFLASH:
      001FF9 86                       4 	.byte 6+FFUNC 	
      001FFA 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002000 1E 2C                    6 	.word uflash 
      002002                       5461 	_dict_entry,3+FFUNC,ODR,port_odr
      002002 1F F9                    1 	.word LINK 
                           002004     2 	LINK=.
      002004                          3 ODR:
      002004 83                       4 	.byte 3+FFUNC 	
      002005 4F 44 52                 5 	.ascii "ODR"
      002008 1E 0E                    6 	.word port_odr 
      00200A                       5462 	_dict_entry,3+FFUNC,IDR,port_idr
      00200A 20 04                    1 	.word LINK 
                           00200C     2 	LINK=.
      00200C                          3 IDR:
      00200C 83                       4 	.byte 3+FFUNC 	
      00200D 49 44 52                 5 	.ascii "IDR"
      002010 1E 14                    6 	.word port_idr 
      002012                       5463 	_dict_entry,3+FFUNC,DDR,port_ddr 
      002012 20 0C                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                           002014     2 	LINK=.
      002014                          3 DDR:
      002014 83                       4 	.byte 3+FFUNC 	
      002015 44 44 52                 5 	.ascii "DDR"
      002018 1E 1A                    6 	.word port_ddr 
      00201A                       5464 	_dict_entry,3+FFUNC,CRL,port_cr1 
      00201A 20 14                    1 	.word LINK 
                           00201C     2 	LINK=.
      00201C                          3 CRL:
      00201C 83                       4 	.byte 3+FFUNC 	
      00201D 43 52 4C                 5 	.ascii "CRL"
      002020 1E 20                    6 	.word port_cr1 
      002022                       5465 	_dict_entry,3+FFUNC,CRH,port_cr2
      002022 20 1C                    1 	.word LINK 
                           002024     2 	LINK=.
      002024                          3 CRH:
      002024 83                       4 	.byte 3+FFUNC 	
      002025 43 52 48                 5 	.ascii "CRH"
      002028 1E 26                    6 	.word port_cr2 
      00202A                       5466 	_dict_entry,4+FFUNC,GPIO,gpio 
      00202A 20 24                    1 	.word LINK 
                           00202C     2 	LINK=.
      00202C                          3 GPIO:
      00202C 84                       4 	.byte 4+FFUNC 	
      00202D 47 50 49 4F              5 	.ascii "GPIO"
      002031 1D D1                    6 	.word gpio 
      002033                       5467 	_dict_entry,6,PWRADC,power_adc 
      002033 20 2C                    1 	.word LINK 
                           002035     2 	LINK=.
      002035                          3 PWRADC:
      002035 06                       4 	.byte 6 	
      002036 50 57 52 41 44 43        5 	.ascii "PWRADC"
      00203C 19 A4                    6 	.word power_adc 
      00203E                       5468 	_dict_entry,5+FFUNC,RDADC,read_adc
      00203E 20 35                    1 	.word LINK 
                           002040     2 	LINK=.
      002040                          3 RDADC:
      002040 85                       4 	.byte 5+FFUNC 	
      002041 52 44 41 44 43           5 	.ascii "RDADC"
      002046 19 DF                    6 	.word read_adc 
      002048                       5469 	_dict_entry,3+FFUNC,ASC,ascii  
      002048 20 40                    1 	.word LINK 
                           00204A     2 	LINK=.
      00204A                          3 ASC:
      00204A 83                       4 	.byte 3+FFUNC 	
      00204B 41 53 43                 5 	.ascii "ASC"
      00204E 1D 9B                    6 	.word ascii 
      002050                       5470 	_dict_entry,4+FFUNC,CHAR,char
      002050 20 4A                    1 	.word LINK 
                           002052     2 	LINK=.
      002052                          3 CHAR:
      002052 84                       4 	.byte 4+FFUNC 	
      002053 43 48 41 52              5 	.ascii "CHAR"
      002057 1D 7E                    6 	.word char 
      002059                       5471 	_dict_entry,4+FFUNC,QKEY,qkey  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      002059 20 52                    1 	.word LINK 
                           00205B     2 	LINK=.
      00205B                          3 QKEY:
      00205B 84                       4 	.byte 4+FFUNC 	
      00205C 51 4B 45 59              5 	.ascii "QKEY"
      002060 1D C7                    6 	.word qkey 
      002062                       5472 	_dict_entry,3+FFUNC,KEY,key 
      002062 20 5B                    1 	.word LINK 
                           002064     2 	LINK=.
      002064                          3 KEY:
      002064 83                       4 	.byte 3+FFUNC 	
      002065 4B 45 59                 5 	.ascii "KEY"
      002068 1D BF                    6 	.word key 
      00206A                       5473 	_dict_entry,4+FFUNC,SIZE,size
      00206A 20 64                    1 	.word LINK 
                           00206C     2 	LINK=.
      00206C                          3 SIZE:
      00206C 84                       4 	.byte 4+FFUNC 	
      00206D 53 49 5A 45              5 	.ascii "SIZE"
      002071 13 A4                    6 	.word size 
      002073                       5474 	_dict_entry,3,HEX,hex_base
      002073 20 6C                    1 	.word LINK 
                           002075     2 	LINK=.
      002075                          3 HEX:
      002075 03                       4 	.byte 3 	
      002076 48 45 58                 5 	.ascii "HEX"
      002079 13 9A                    6 	.word hex_base 
      00207B                       5475 	_dict_entry,3,DEC,dec_base
      00207B 20 75                    1 	.word LINK 
                           00207D     2 	LINK=.
      00207D                          3 DEC:
      00207D 03                       4 	.byte 3 	
      00207E 44 45 43                 5 	.ascii "DEC"
      002081 13 9F                    6 	.word dec_base 
      002083                       5476 	_dict_entry,5+FFUNC,TICKS,get_ticks
      002083 20 7D                    1 	.word LINK 
                           002085     2 	LINK=.
      002085                          3 TICKS:
      002085 85                       4 	.byte 5+FFUNC 	
      002086 54 49 43 4B 53           5 	.ascii "TICKS"
      00208B 1E 87                    6 	.word get_ticks 
      00208D                       5477 	_dict_entry,3+FFUNC,ABS,abs
      00208D 20 85                    1 	.word LINK 
                           00208F     2 	LINK=.
      00208F                          3 ABS:
      00208F 83                       4 	.byte 3+FFUNC 	
      002090 41 42 53                 5 	.ascii "ABS"
      002093 1E 8D                    6 	.word abs 
      002095                       5478 	_dict_entry,3+FFUNC,RND,random 
      002095 20 8F                    1 	.word LINK 
                           002097     2 	LINK=.
      002097                          3 RND:
      002097 83                       4 	.byte 3+FFUNC 	
      002098 52 4E 44                 5 	.ascii "RND"
      00209B 1E AD                    6 	.word random 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00209D                       5479 	_dict_entry,5,PAUSE,pause 
      00209D 20 97                    1 	.word LINK 
                           00209F     2 	LINK=.
      00209F                          3 PAUSE:
      00209F 05                       4 	.byte 5 	
      0020A0 50 41 55 53 45           5 	.ascii "PAUSE"
      0020A5 1E 74                    6 	.word pause 
      0020A7                       5480 	_dict_entry,4,BSET,bit_set 
      0020A7 20 9F                    1 	.word LINK 
                           0020A9     2 	LINK=.
      0020A9                          3 BSET:
      0020A9 04                       4 	.byte 4 	
      0020AA 42 53 45 54              5 	.ascii "BSET"
      0020AE 17 36                    6 	.word bit_set 
      0020B0                       5481 	_dict_entry,4,BRES,bit_reset
      0020B0 20 A9                    1 	.word LINK 
                           0020B2     2 	LINK=.
      0020B2                          3 BRES:
      0020B2 04                       4 	.byte 4 	
      0020B3 42 52 45 53              5 	.ascii "BRES"
      0020B7 17 4A                    6 	.word bit_reset 
      0020B9                       5482 	_dict_entry,5,BTOGL,bit_toggle
      0020B9 20 B2                    1 	.word LINK 
                           0020BB     2 	LINK=.
      0020BB                          3 BTOGL:
      0020BB 05                       4 	.byte 5 	
      0020BC 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0020C1 17 5F                    6 	.word bit_toggle 
      0020C3                       5483 	_dict_entry 4,WAIT,wait 
      0020C3 20 BB                    1 	.word LINK 
                           0020C5     2 	LINK=.
      0020C5                          3 WAIT:
      0020C5 04                       4 	.byte 4 	
      0020C6 57 41 49 54              5 	.ascii "WAIT"
      0020CA 17 0B                    6 	.word wait 
      0020CC                       5484 	_dict_entry 6,REMARK,rem 
      0020CC 20 C5                    1 	.word LINK 
                           0020CE     2 	LINK=.
      0020CE                          3 REMARK:
      0020CE 06                       4 	.byte 6 	
      0020CF 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0020D5 17 05                    6 	.word rem 
      0020D7                       5485 	_dict_entry 5,PRINT,print 
      0020D7 20 CE                    1 	.word LINK 
                           0020D9     2 	LINK=.
      0020D9                          3 PRINT:
      0020D9 05                       4 	.byte 5 	
      0020DA 50 52 49 4E 54           5 	.ascii "PRINT"
      0020DF 15 F7                    6 	.word print 
      0020E1                       5486 	_dict_entry,2,IF,if 
      0020E1 20 D9                    1 	.word LINK 
                           0020E3     2 	LINK=.
      0020E3                          3 IF:
      0020E3 02                       4 	.byte 2 	
      0020E4 49 46                    5 	.ascii "IF"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0020E6 17 A3                    6 	.word if 
      0020E8                       5487 	_dict_entry,5,GOSUB,gosub 
      0020E8 20 E3                    1 	.word LINK 
                           0020EA     2 	LINK=.
      0020EA                          3 GOSUB:
      0020EA 05                       4 	.byte 5 	
      0020EB 47 4F 53 55 42           5 	.ascii "GOSUB"
      0020F0 18 B9                    6 	.word gosub 
      0020F2                       5488 	_dict_entry,4,GOTO,goto 
      0020F2 20 EA                    1 	.word LINK 
                           0020F4     2 	LINK=.
      0020F4                          3 GOTO:
      0020F4 04                       4 	.byte 4 	
      0020F5 47 4F 54 4F              5 	.ascii "GOTO"
      0020F9 18 AC                    6 	.word goto 
      0020FB                       5489 	_dict_entry,3,FOR,for 
      0020FB 20 F4                    1 	.word LINK 
                           0020FD     2 	LINK=.
      0020FD                          3 FOR:
      0020FD 03                       4 	.byte 3 	
      0020FE 46 4F 52                 5 	.ascii "FOR"
      002101 17 B7                    6 	.word for 
      002103                       5490 	_dict_entry,2,TO,to
      002103 20 FD                    1 	.word LINK 
                           002105     2 	LINK=.
      002105                          3 TO:
      002105 02                       4 	.byte 2 	
      002106 54 4F                    5 	.ascii "TO"
      002108 17 E1                    6 	.word to 
      00210A                       5491 	_dict_entry,4,STEP,step 
      00210A 21 05                    1 	.word LINK 
                           00210C     2 	LINK=.
      00210C                          3 STEP:
      00210C 04                       4 	.byte 4 	
      00210D 53 54 45 50              5 	.ascii "STEP"
      002111 18 11                    6 	.word step 
      002113                       5492 	_dict_entry,4,NEXT,next 
      002113 21 0C                    1 	.word LINK 
                           002115     2 	LINK=.
      002115                          3 NEXT:
      002115 04                       4 	.byte 4 	
      002116 4E 45 58 54              5 	.ascii "NEXT"
      00211A 18 39                    6 	.word next 
      00211C                       5493 	_dict_entry,6+FFUNC,UBOUND,ubound 
      00211C 21 15                    1 	.word LINK 
                           00211E     2 	LINK=.
      00211E                          3 UBOUND:
      00211E 86                       4 	.byte 6+FFUNC 	
      00211F 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002125 13 AE                    6 	.word ubound 
      002127                       5494 	_dict_entry,6,RETURN,return 
      002127 21 1E                    1 	.word LINK 
                           002129     2 	LINK=.
      002129                          3 RETURN:
      002129 06                       4 	.byte 6 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      00212A 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002130 19 02                    6 	.word return 
      002132                       5495 	_dict_entry,4+FFUNC,PEEK,peek 
      002132 21 29                    1 	.word LINK 
                           002134     2 	LINK=.
      002134                          3 PEEK:
      002134 84                       4 	.byte 4+FFUNC 	
      002135 50 45 45 4B              5 	.ascii "PEEK"
      002139 17 86                    6 	.word peek 
      00213B                       5496 	_dict_entry,4,POKE,poke 
      00213B 21 34                    1 	.word LINK 
                           00213D     2 	LINK=.
      00213D                          3 POKE:
      00213D 04                       4 	.byte 4 	
      00213E 50 4F 4B 45              5 	.ascii "POKE"
      002142 17 73                    6 	.word poke 
      002144                       5497 	_dict_entry,5,INPUT,input_var  
      002144 21 3D                    1 	.word LINK 
                           002146     2 	LINK=.
      002146                          3 INPUT:
      002146 05                       4 	.byte 5 	
      002147 49 4E 50 55 54           5 	.ascii "INPUT"
      00214C 16 91                    6 	.word input_var 
      00214E                       5498 kword_dict:
      00214E                       5499 	_dict_entry 3,LET,let 
      00214E 21 46                    1 	.word LINK 
                           002150     2 	LINK=.
      002150                          3 LET:
      002150 03                       4 	.byte 3 	
      002151 4C 45 54                 5 	.ascii "LET"
      002154 13 BC                    6 	.word let 
                                   5500 	
                                   5501 
      002180                       5502 	.bndry 128 ; align on FLASH block.
                                   5503 ; free space for user application  
      002180                       5504 user_space:
                                   5505 ; USR() function test
      002180 89               [ 2] 5506 	pushw x 
      002181 72 1A 50 0A      [ 1] 5507 	bset PC_ODR,#5 
      002185 85               [ 2] 5508 	popw x 
      002186 CD 1E 7E         [ 4] 5509 	call pause02 
      002189 72 1B 50 0A      [ 1] 5510 	bres PC_ODR,#5 
      00218D 81               [ 4] 5511 	ret
                                   5512 
                                   5513 	.area FLASH_DRIVE (ABS)
      010000                       5514 	.org 0x10000
      010000                       5515 fdrive:
                                   5516 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00208F R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        00204A R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |   5 BEEP       001FBA R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_ER=  000000 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  000005     |   5 BREAK      001FB0 R   |   5 BRES       0020B2 R
  5 BSET       0020A9 R   |     BSIZE   =  000001     |     BSP     =  000008 
  5 BTOGL      0020BB R   |     BTW     =  000001     |     BUFIDX  =  000003 
  5 BYE        001F5D R   |     C       =  000001     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       002052 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000008     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        002024 R   |   5 CRL        00201C R   |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000006     |     CURR    =  000002 
    CX_BPTR =  000001     |     CX_CNT  =  000005     |     CX_IN   =  000004 
    CX_LNO  =  000003     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |   5 DDR        002014 R
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  5 DEC        00207D R   |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        001F84 R   |     DIVIDND =  000007 
    DIVISR  =  000005     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
    DSTACK_S=  000040     |   5 EEPROM     001FEE R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_L=  000005 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |     FF      =  00000C     |     FFOR    =  000002 
    FFUNC   =  000080     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   5 FOR        0020FD R
  5 FORGET     001F79 R   |     FRUN    =  000000     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FTRAP   =  000001     |   5 GOSUB      0020EA R
    GOS_RET =  000003     |   5 GOTO       0020F4 R   |   5 GPIO       00202C R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   5 HEX        002075 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        00200C R   |   5 IF         0020E3 R   |     IN      =  000007 
    INCR    =  000001     |   5 INPUT      002146 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  000003     |     ITC_SPR1=  007F70 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        002064 R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        002150 R
    LINENO  =  000005     |   5 LINK    =  002150 R   |   5 LIST       001FDD R
    LL      =  000002     |     LLEN    =  000002     |     LL_HB   =  000001 
    LNO     =  000005     |     LN_PTR  =  000005     |   5 LOAD       001F8C R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MINOR   =  000000     |     MULOP   =  000005     |     N1      =  000001 
    N1_HB   =  000006     |     N1_LB   =  000007     |     N2      =  000003 
    N2_HB   =  000008     |     N2_LB   =  000009     |     NAFR    =  004804 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        001FA8 R   |   5 NEXT       002115 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NL      =  00000A     |     NLEN    =  000001 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R
  5 ODR        002004 R   |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |     PAD_SIZE=  000028     |   5 PAUSE      00209F R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       002134 R   |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 POKE       00213D R   |     PREV    =  000001     |   5 PRINT      0020D9 R
    PROD    =  000002     |     PSIZE   =  000001     |   5 PWRADC     002035 R
  5 QKEY       00205B R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 RDADC      002040 R   |   5 REG_A      000951 R
  5 REG_CC     000955 R   |   5 REG_EPC    000944 R   |   5 REG_SP     00095A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

  5 REG_X      00094D R   |   5 REG_Y      000949 R   |     RELOP   =  000005 
  5 REMARK     0020CE R   |     RETL1   =  000001     |   5 RETURN     002129 R
  5 RND        002097 R   |     ROP     =  004800     |     RST_SR  =  0050B3 
  5 RUN        001FD5 R   |     RXCHAR  =  000001     |     R_A     =  000007 
    R_CC    =  000008     |     R_X     =  000005     |     R_Y     =  000003 
  5 SAVE       001F95 R   |     SDIVD   =  000002     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   5 SHOW       001FCC R
    SIGN    =  000001     |   5 SIZE       00206C R   |     SKIP    =  000006 
  5 SLEEP      001F6F R   |     SPACE   =  000020     |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SQUOT   =  000001     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  000080     |   5 STATES     000907 R
  5 STEP       00210C R   |   5 STOP       001FC3 R   |     SWIM_CSR=  007F80 
    TAB     =  000009     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      002085 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000005     |     TK_CHAR =  000002 
    TK_CMD  =  000006     |     TK_COLON=  000001     |     TK_COMMA=  00000B 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FUNC =  000007 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_INTGR=  000003     |     TK_LE   =  000036 
    TK_LPARE=  000009     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000008 
    TK_RPARE=  00000A     |     TK_SHARP=  00000C     |     TK_VAR  =  000004 
  5 TO         002105 R   |   5 Timer4Up   000019 R   |   5 TrapHand   00000A R
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     00211E R   |   5 UFLASH     001FF9 R   |   5 USER_ABO   00007E R
  5 USR        001FE6 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   5 UserButt   000025 R   |     VSIZ    =  000002 
    VSIZE   =  000002     |     VT      =  00000B     |   5 WAIT       0020C5 R
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   5 WORDS      001F65 R
  5 WRITE      001F9E R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XADR    =  000001     |     XMASK   =  000001     |     XSAVE   =  000003 
    YSAVE   =  000003     |   5 abs        001E8D R   |   1 acc16      000009 R
  1 acc24      000008 R   |   1 acc8       00000A R   |   5 accept_c   000AFF R
  5 add        0010B3 R   |   5 ansi_seq   000ABD R   |   5 arg_list   0011F5 R
  1 array_ad   000020 R   |   1 array_si   000022 R   |   5 ascii      001D9B R
  5 at_tst     000DEC R   |   5 atoi24     000EFF R   |   5 atoi_exi   000F6D R
  5 bad_port   001E09 R   |   1 base       000007 R   |   1 basicptr   000003 R
  5 beep       00197C R   |   5 bin_exit   000CF2 R   |   5 bit_rese   00174A R
  5 bit_set    001736 R   |   5 bit_togg   00175F R   |   5 bkslsh_t   000D97 R
  5 bksp       0001BA R   |   5 break      001A12 R   |   5 break_po   001A43 R
  5 bye        001E60 R   |   5 char       001D7E R   |   5 check_fu   0003F2 R
  5 clear_ba   0005F0 R   |   5 clear_va   000500 R   |   5 clock_in   000099 R
  5 cmd_itf    000B23 R   |   5 cmd_name   00115E R   |   5 cmp_name   001AE2 R
  5 cold_sta   000565 R   |   5 colon_ts   000DC0 R   |   5 comma_ts   000DCB R
  5 compile    000401 R   |   5 convert_   000C58 R   |   1 count      000002 R
  5 cp_loop    0011A1 R   |   5 create_g   000343 R   |   5 cstk_pro   00107D R
  5 dash_tst   000DE1 R   |   5 ddrop      000FF9 R   |   5 ddrop_n    001036 R
  5 ddup       001002 R   |   5 dec_base   00139F R   |   5 del_back   000AF0 R
  5 del_line   00030B R   |   5 del_ln     000AE1 R   |   5 delete     0001CA R
  5 dir_loop   001CBE R   |   5 director   001CB2 R   |   5 divide     001109 R
  5 divu24_8   000A4A R   |   5 dotr       001086 R   |   5 dotr_loo   00109B R
  5 dots       001053 R   |   5 dpick      001013 R   |   5 dpop       000FD2 R
  5 dpush      000FC5 R   |   5 drive_fr   001D3A R   |   3 dstack     001740 R
  3 dstack_u   001780 R   |   5 dstk_pro   001049 R   |   1 dstkptr    000019 R
  5 dswap      000FDF R   |   5 eeprom     001E32 R   |   5 eql_tst    000E4C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

  5 equal      0015EA R   |   5 err_bad_   0006D1 R   |   5 err_cmd_   000692 R
  5 err_div0   000654 R   |   5 err_dupl   0006AD R   |   5 err_math   00063A R
  5 err_mem_   00061D R   |   5 err_msg    000605 R   |   5 err_no_a   0006DE R
  5 err_no_l   000664 R   |   5 err_not_   0006BF R   |   5 err_run_   00067B R
  5 err_synt   00062B R   |   5 expect     0011E8 R   |   5 expr_exi   001330 R
  5 expressi   0012EF R   |   5 factor     00124C R   |   1 farptr     000013 R
  7 fdrive     010000 R   |   5 fetch      001022 R   |   5 fetchc     000C10 R
  1 ffree      000016 R   |   5 file_cou   001D32 R   |   5 final_te   000AB7 R
  5 first_li   00140F R   |   1 flags      000024 R   |   5 for        0017B7 R
  5 forget     001C63 R   |   1 free_ram   00005A R   |   5 ge         0015EC R
  5 get_arra   001219 R   |   5 get_tick   001E87 R   |   5 get_toke   000D34 R
  5 getc       0001A7 R   |   5 go_commo   0018DC R   |   5 gosub      0018B9 R
  5 goto       0018AC R   |   5 gpio       001DD1 R   |   5 gt         0015E8 R
  5 gt_tst     000E57 R   |   5 hex_base   00139A R   |   5 hse_cloc   000187 R
  5 hsi_cloc   000191 R   |   5 if         0017A3 R   |   1 in         000001 R
  1 in.w       000000 R   |   1 in.w.sav   000011 R   |   5 incr_far   001A6C R
  5 input_ex   001702 R   |   5 input_lo   00169D R   |   5 input_va   001691 R
  5 insert_l   000374 R   |   5 insert_l   0003EF R   |   5 interp     000794 R
  5 interp_l   0007D8 R   |   5 invalid    000B68 R   |   5 invalid_   000BE6 R
  5 is_alpha   00050E R   |   5 is_digit   000EEA R   |   5 itoa       000A03 R
  5 itoa_loo   000A1B R   |   5 key        001DBF R   |   5 kword_di   00214E R
  5 kword_en   001F5B R   |   5 last_lin   001418 R   |   5 le         0015F1 R
  5 ledoff     000857 R   |   5 ledon      000852 R   |   5 ledtoggl   00085C R
  5 left_arr   000ABD R   |   5 left_par   000865 R   |   5 let        0013BC R
  5 let02      0013C6 R   |   1 lineno     000005 R   |   5 lines_sk   00141D R
  5 list       0013E4 R   |   5 list_exi   001464 R   |   5 list_sta   001440 R
  5 load       001BFB R   |   5 loop_bac   001881 R   |   1 loop_dep   00001F R
  5 loop_don   00189A R   |   5 lt         0015EF R   |   5 lt_tst     000E90 R
  5 mem_peek   000B85 R   |   5 modulo     00114D R   |   5 move       00029E R
  5 move_dow   0002BC R   |   5 move_exi   0002DD R   |   5 move_loo   0002C1 R
  5 move_up    0002AE R   |   5 mul_char   0015D9 R   |   5 multiply   0010C1 R
  5 mulu24_8   000F71 R   |   5 nbr_tst    000D6D R   |   5 ne         0015F4 R
  5 neg_acc2   000A72 R   |   5 new        001A61 R   |   5 next       001839 R
  5 next_tok   000808 R   |   5 no_match   0011B3 R   |   5 none       000D34 R
  5 number     000C16 GR  |   5 other      000EC8 R   |   3 pad        001718 R
  5 parse_bi   000CD2 R   |   5 parse_in   000C97 R   |   5 parse_ke   000CFA R
  5 parse_qu   000C1D R   |   5 pause      001E74 R   |   5 pause02    001E7E R
  5 peek       001786 R   |   5 peek_byt   000BB0 R   |   5 plus_tst   000E20 R
  5 poke       001773 R   |   5 port_cr1   001E20 R   |   5 port_cr2   001E26 R
  5 port_ddr   001E1A R   |   5 port_idr   001E14 R   |   5 port_odr   001E0E R
  5 power_ad   0019A4 R   |   5 prcnt_ts   000E41 R   |   5 print      0015F7 R
  5 print_ex   00165B R   |   5 print_fa   000BF5 R   |   5 print_in   0009A7 R
  5 print_re   0008B4 R   |   5 print_st   000B78 R   |   5 prt_basi   00147B R
  5 prt_cmd_   001467 R   |   5 prt_loop   0015FB R   |   5 prt_peek   00024E R
  5 prt_reg1   000895 R   |   5 prt_reg8   000870 R   |   5 prt_regs   0001E4 R
  5 prti24     00095F R   |   1 ptr16      000014 R   |   1 ptr8       000015 R
  5 putc       00019E R   |   5 puts       0001B0 R   |   5 qkey       001DC7 R
  5 qmark_ts   000DF7 R   |   5 random     001EAD R   |   5 read_adc   0019DF R
  5 readln     000A95 R   |   5 readln_l   000A9B R   |   5 readln_q   000B14 R
  5 regs_sta   000227 R   |   5 rel_exit   001387 R   |   5 relation   001333 R
  5 relop_st   0015DC R   |   5 rem        001705 R   |   5 repl       000B31 R
  5 repl_exi   000B59 R   |   5 reprint    000ABD R   |   5 reset_co   0015F9 R
  5 rest_con   00167C R   |   5 return     001902 R   |   5 right_ar   000ABD R
  5 rparnt_t   000DB5 R   |   5 rt_msg     000712 R   |   5 run        001926 R
  5 save       001B4D R   |   5 save_con   001667 R   |   5 search_d   001190 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

  5 search_e   0011E4 R   |   5 search_f   001B03 R   |   5 search_l   0002E0 R
  5 search_l   0002EB R   |   5 search_n   001194 R   |   1 seedx      00000D R
  1 seedy      00000F R   |   5 seek_fdr   001A7A R   |   5 sharp_ts   000DD6 R
  5 show       00138A R   |   5 single_c   0015D5 R   |   5 size       0013A4 R
  5 skip       000FAB R   |   5 slash_ts   000E36 R   |   5 sleep      001E69 R
  5 software   00051F R   |   5 spaces     0001D8 R   |   3 stack_fu   001780 R
  3 stack_un   001800 R   |   5 star_tst   000E2B R   |   5 step       001811 R
  5 stop       00196D R   |   5 store      00102C R   |   5 store_lo   001823 R
  5 str_matc   0011C2 R   |   5 str_tst    000D5C R   |   5 strcmp     00027F R
  5 strcpy     000290 R   |   5 strlen     000272 R   |   5 substrac   0010BB R
  5 syntax_e   000722 R   |   1 tab_widt   000025 R   |   5 tb_error   000724 R
  5 term       0012A2 R   |   5 term01     0012AB R   |   5 term_exi   0012EC R
  5 test_p     000B70 R   |   3 tib        0016C8 R   |   5 tick_tst   000E0E R
  1 ticks      00000B R   |   5 timer4_i   0000AF R   |   5 to         0017E1 R
  5 to_upper   000EF3 GR  |   5 token_ch   000ED7 R   |   5 token_ex   000EE7 R
  1 txtbgn     00001B R   |   1 txtend     00001D R   |   5 uart3_in   000174 R
  5 uart3_se   000180 R   |   5 uart_ena   000199 R   |   5 ubound     0013AE R
  5 uflash     001E2C R   |   5 unget_to   000FBE R   |   5 unlock_e   0000C0 R
  5 unlock_f   0000CE R   |   5 user_spa   002180 R   |   5 usr        001E38 R
  1 vars       000026 R   |   5 wait       00170B R   |   5 warm_sta   000774 R
  5 words      001F21 R   |   5 write      001D47 R   |   5 write_bl   000151 R
  5 write_by   0000DC R   |   5 write_ee   000118 R   |   5 write_ex   00014C R
  5 write_fl   000102 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   218E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

