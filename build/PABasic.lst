ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26 
                                     27 
                                     28 
                                     29     .module TBI_STM8
                                     30 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                     37     .list 
                                     38 
      000000                         39 _dbg 
                           000001     1     DEBUG=1
                                     40 
                                     41 	
                                     42 ;--------------------------------------
                                     43     .area DATA 
                                     44 ;--------------------------------------	
                                     45 
                           000050    46 	TIB_SIZE=80
                           000028    47     PAD_SIZE=40
                           000040    48 	DSTACK_SIZE=64 
                           000080    49 	STACK_SIZE=128
                           0017FF    50 	STACK_EMPTY=RAM_SIZE-1  
                           000000    51 	FRUN=0 ; flags run code in variable flags
                           000001    52 	FTRAP=1 ; inside trap handler 
                           000002    53 	FLOOP=2 ; FOR loop in preparation 
                           000003    54 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    55 	FBREAK=4 ; break point flag 
                           000005    56 	FCOMP=5  ; compiling flags 
                                     57 
                           004000    58 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line
      000001                         61 in:    .blkb 1 ; low byte of in.w
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line 
      000006                         65 base:  .blkb 1 ; nemeric base used to print integer 
      000007                         66 acc24: .blkb 1 ; 24 bit accumulator
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000008                         67 acc16: .blkb 1 ; 16 bit accumulator, middle byte of acc24
      000009                         68 acc8:  .blkb 1 ;  8 bit accumulator, least byte of acc24 
      00000A                         69 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000C                         70 timer: .blkw 1 ;  milliseconds count down timer 
      00000E                         71 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000010                         72 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000012                         73 farptr: .blkb 1 ; 24 bits pointer used by file system
      000013                         74 ptr16:  .blkb 1 ; 16 bits pointer ,  middle byte of farptr
      000014                         75 ptr8:   .blkb 1 ; 8 bits pointer, least byte of farptr 
      000015                         76 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000018                         77 dstkptr: .blkw 1  ; data stack pointer 
      00001A                         78 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001C                         79 txtend: .blkw 1 ; tokenized BASIC text end address 
      00001E                         80 loop_depth: .blkb 1 ; FOR loop depth, level of nested loop. Conformity check   
      00001F                         81 array_size: .blkw 1 ; array size 
      000021                         82 flags: .blkb 1 ; various boolean flags
      000022                         83 tab_width: .blkb 1 ; print colon width (4)
      000023                         84 rx_char: .blkb 1 ; last received character 
      000024                         85 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     86 ; keep as last variable 
      000058                         87 free_ram: ; from here RAM free for BASIC text 
                                     88 
                                     89 ;-----------------------------------
                                     90     .area SSEG (ABS)
                                     91 ;-----------------------------------	
      0016C8                         92     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         93 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         94 pad: .ds PAD_SIZE             ; working buffer
      001740                         95 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         96 dstack_empty: ; dstack underflow ; data stack bottom 
      001780                         97 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         98 stack_unf: ; stack underflow ; control_stack bottom 
                                     99 
                                    100 
                                    101 ;--------------------------------------
                                    102     .area HOME 
                                    103 ;--------------------------------------
      000000 82 00 05 7A            104     int cold_start
                           000001   105 .if DEBUG
      000004 82 00 00 2F            106 	int TrapHandler 		;TRAP  software interrupt
                           000000   107 .else
                                    108 	int NonHandledInterrupt ;TRAP  software interrupt
                                    109 .endif
      000008 82 00 00 09            110 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 0A            111 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            112 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            113 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            114 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            115 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            116 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 54            117 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            118 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            119 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            120 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            121 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000038 82 00 00 09            122 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            123 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            124 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            125 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            126 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            127 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 18            128 	int Uart1RxHandler		;int18 UART1 RX full
      000054 82 00 00 09            129 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            130 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 09            131 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 09            132 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 3E            133 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            134 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            135 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            136 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            137 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            138 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            139 	int NonHandledInterrupt ;int29  not used
                                    140 
                                    141 ;---------------------------------------
                                    142     .area CODE
                                    143 ;---------------------------------------
                           000001   144 .if DEBUG
      000000 53 54 4D 38 5F 54 42   145 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    146 .endif 
                                    147 
      000009                        148 NonHandledInterrupt:
      000009 71                     149     .byte 0x71  ; reinitialize MCU
                                    150 
                                    151 ; auto wakeup from halt
      00000A                        152 AWUHandler:
      00000A 72 19 50 F0      [ 1]  153 	bres AWU_CSR,#AWU_CSR_AWUEN
      00000E 55 00 3F 50 F1   [ 1]  154 	mov AWU_APR,0x3F
      000013 72 5F 50 F2      [ 1]  155 	clr AWU_TBR 
      000017 80               [11]  156 	iret
                                    157 
                                    158 ;--------------------------
                                    159 ; UART1 receive character
                                    160 ; CTRL-C (ASCII 3)
                                    161 ; cancel program execution
                                    162 ;--------------------------
      000018                        163 Uart1RxHandler:
      000018 72 0B 52 30 FB   [ 2]  164 	btjf UART1_SR,#UART_SR_RXNE,.
      00001D C6 52 31         [ 1]  165 	ld a,UART1_DR 
      000020 A1 03            [ 1]  166 	cp a,#CTRL_C 
      000022 26 07            [ 1]  167 	jrne 1$
      000024 72 5F 00 23      [ 1]  168 	clr rx_char 
      000028 CC 00 67         [ 2]  169 	jp user_interrupted
      00002B                        170 1$:
      00002B C7 00 23         [ 1]  171 	ld rx_char,a 	
      00002E 80               [11]  172 	iret 
                                    173 
                                    174 ;------------------------------------
                                    175 ; software interrupt handler  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    176 ;------------------------------------
                           000001   177 .if DEBUG 
      00002F                        178 TrapHandler:
      00002F 72 12 00 21      [ 1]  179 	bset flags,#FTRAP 
      000033 CD 09 8B         [ 4]  180 	call print_registers
      000036 CD 0B F6         [ 4]  181 	call cmd_itf
      000039 72 13 00 21      [ 1]  182 	bres flags,#FTRAP 	
      00003D 80               [11]  183 	iret
                                    184 .endif 
                                    185 
      00003E                        186 Timer4UpdateHandler:
      00003E 72 5F 53 42      [ 1]  187 	clr TIM4_SR 
      000042 CE 00 0A         [ 2]  188 	ldw x,ticks
      000045 5C               [ 2]  189 	incw x
      000046 CF 00 0A         [ 2]  190 	ldw ticks,x 
      000049 CE 00 0C         [ 2]  191 	ldw x,timer
      00004C 5D               [ 2]  192 	tnzw x 
      00004D 27 04            [ 1]  193 	jreq 1$
      00004F 5A               [ 2]  194 	decw x 
      000050 CF 00 0C         [ 2]  195 	ldw timer,x 
      000053                        196 1$:	
      000053 80               [11]  197 	iret 
                                    198 
                                    199 
                                    200 ;------------------------------------
                                    201 ; Triggered by pressing USER UserButton 
                                    202 ; on NUCLEO card.
                                    203 ;------------------------------------
      000054                        204 UserButtonHandler:
                                    205 ; wait button release
      000054 5F               [ 1]  206 	clrw x
      000055 5A               [ 2]  207 1$: decw x 
      000056 26 FD            [ 1]  208 	jrne 1$
      000058 72 09 50 15 F8   [ 2]  209 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    210 ; if MCU suspended by SLEEP resume program
      00005D 72 07 00 21 05   [ 2]  211     btjf flags,#FSLEEP,2$
      000062 72 17 00 21      [ 1]  212 	bres flags,#FSLEEP 
      000066 80               [11]  213 	iret
      000067                        214 2$:	
      000067                        215 user_interrupted:
      000067 72 00 00 21 02   [ 2]  216     btjt flags,#FRUN,4$
      00006C 20 13            [ 2]  217 	jra UBTN_Handler_exit 
      00006E                        218 4$:	; program interrupted by user 
      00006E 72 11 00 21      [ 1]  219 	bres flags,#FRUN 
      000072 AE 00 89         [ 2]  220 	ldw x,#USER_ABORT
      000075 CD 01 DE         [ 4]  221 	call puts 
      000078 CE 00 04         [ 2]  222 	ldw x,basicptr 
      00007B C6 00 01         [ 1]  223 	ld a,in 
      00007E CD 15 87         [ 4]  224 	call prt_basic_line
      000081                        225 UBTN_Handler_exit:
      000081 AE 17 FF         [ 2]  226     ldw x,#STACK_EMPTY 
      000084 94               [ 1]  227     ldw sp,x
      000085 9A               [ 1]  228 	rim 
      000086 CC 07 CC         [ 2]  229 	jp warm_start
                                    230 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000089 0A 50 72 6F 67 72 61   231 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    232 
                                    233 ;----------------------------------------
                                    234 ; inialize MCU clock 
                                    235 ; input:
                                    236 ;   A 		source  HSI | 1 HSE 
                                    237 ;   XL      CLK_CKDIVR , clock divisor 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;----------------------------------------
      0000A4                        241 clock_init:	
      0000A4 C1 50 C3         [ 1]  242 	cp a,CLK_CMSR 
      0000A7 27 0C            [ 1]  243 	jreq 2$ ; no switching required 
                                    244 ; select clock source 
      0000A9 72 12 50 C5      [ 1]  245 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000AD C7 50 C4         [ 1]  246 	ld CLK_SWR,a
      0000B0 C1 50 C3         [ 1]  247 1$:	cp a,CLK_CMSR
      0000B3 26 FB            [ 1]  248 	jrne 1$
      0000B5                        249 2$: 	
                                    250 ; HSI and cpu clock divisor 
      0000B5 9F               [ 1]  251 	ld a,xl 
      0000B6 C7 50 C6         [ 1]  252 	ld CLK_CKDIVR,a  
      0000B9 81               [ 4]  253 	ret
                                    254 
                                    255 ;----------------------------------
                                    256 ; TIMER4 used as audio tone output 
                                    257 ; on port D:5.
                                    258 ; channel 1 configured as PWM mode 1 
                                    259 ;-----------------------------------  
                           00F424   260 TIM2_CLK_FREQ=62500
      0000BA                        261 timer2_init:
      0000BA 72 1A 50 C7      [ 1]  262 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000BE 35 60 53 05      [ 1]  263  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000C2 35 08 53 0C      [ 1]  264 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000C6 81               [ 4]  265 	ret 
                                    266 
                                    267 ;---------------------------------
                                    268 ; TIM4 is configured to generate an 
                                    269 ; interrupt every millisecond 
                                    270 ;----------------------------------
      0000C7                        271 timer4_init:
      0000C7 72 18 50 C7      [ 1]  272 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000CB 35 07 53 45      [ 1]  273 	mov TIM4_PSCR,#7 ; prescale 128  
      0000CF 35 7D 53 46      [ 1]  274 	mov TIM4_ARR,#125 ; set for 1msec.
      0000D3 35 05 53 40      [ 1]  275 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D7 72 10 53 41      [ 1]  276 	bset TIM4_IER,#TIM4_IER_UIE 
      0000DB 81               [ 4]  277 	ret
                                    278 
                                    279 
                                    280 ;----------------------------------
                                    281 ; unlock EEPROM for writing/erasing
                                    282 ; wait endlessly for FLASH_IAPSR_DUL bit.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    283 ; input:
                                    284 ;  none
                                    285 ; output:
                                    286 ;  none 
                                    287 ;----------------------------------
      0000DC                        288 unlock_eeprom:
      0000DC 35 AE 50 64      [ 1]  289 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000E0 35 56 50 64      [ 1]  290     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000E4 72 07 50 5F FB   [ 2]  291 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000E9 81               [ 4]  292 	ret
                                    293 
                                    294 ;----------------------------------
                                    295 ; unlock FLASH for writing/erasing
                                    296 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    297 ; input:
                                    298 ;  none
                                    299 ; output:
                                    300 ;  none
                                    301 ;----------------------------------
      0000EA                        302 unlock_flash:
      0000EA 35 56 50 62      [ 1]  303 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000EE 35 AE 50 62      [ 1]  304 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000F2 72 03 50 5F FB   [ 2]  305 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000F7 81               [ 4]  306 	ret
                                    307 
                           000000   308 	BLOCK_ERASE=0
                                    309 ;----------------------------
                                    310 ; erase block code must be 
                                    311 ;executed from RAM
                                    312 ;-----------------------------
                           000000   313 .if BLOCK_ERASE 
                                    314 ; this code is copied to RAM 
                                    315 erase_start:
                                    316 	clr a 
                                    317     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    318     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    319 	ldf [farptr],a
                                    320     inc farptr+2 
                                    321     ldf [farptr],a
                                    322     inc farptr+2 
                                    323     ldf [farptr],a
                                    324     inc farptr+2 
                                    325     ldf [farptr],a
                                    326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    327 	ret
                                    328 erase_end:
                                    329 
                                    330 ; copy erase_start in RAM 
                                    331 move_code_in_ram:
                                    332 	ldw x,#erase_end 
                                    333 	subw x,#erase_start
                                    334 	ldw acc16,x 
                                    335 	ldw x,#pad 
                                    336 	ldw y,#erase_start 
                                    337 	call move 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    338 	ret 
                                    339 
                                    340 ;-----------------------------------
                                    341 ; erase flash or EEPROM block 
                                    342 ; a block is 128 bytes 
                                    343 ; input:
                                    344 ;   farptr  address block begin
                                    345 ; output:
                                    346 ;   none
                                    347 ;--------------------------------------
                                    348 erase_block:
                                    349 	ldw x,farptr+1 
                                    350 	pushw x 
                                    351 	call move_code_in_ram 
                                    352 	popw x 
                                    353 	ldw farptr+1,x 
                                    354 	tnz farptr
                                    355 	jrne erase_flash 
                                    356 	ldw x,#FLASH_BASE 
                                    357 	cpw x,farptr+1 
                                    358 	jrpl erase_flash 
                                    359 ; erase eeprom block
                                    360 	call unlock_eeprom 
                                    361 	sim 
                                    362 	call pad   
                                    363 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    364 	rim 
                                    365 	ret 
                                    366 ; erase flash block:
                                    367 erase_flash:
                                    368 	call unlock_flash 
                                    369 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    370 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    371 	clr a 
                                    372 	sim 
                                    373 	call pad 
                                    374     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    375 	rim 
                                    376 	ret 
                                    377 .endif ; BLOCK_ERASE 
                                    378 
                                    379 
                                    380 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    381 ; write a byte to FLASH or EEPROM 
                                    382 ; input:
                                    383 ;    a  		byte to write
                                    384 ;    farptr  	address
                                    385 ;    x          farptr[x]
                                    386 ; output:
                                    387 ;    none
                                    388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    389 	; variables locales
                           000001   390 	BTW = 1   ; byte to write offset on stack
                           000002   391 	OPT = 2   ; OPTION flag offset on stack
                           000002   392 	VSIZE = 2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000F8                        393 write_byte:
      0000F8 90 89            [ 2]  394 	pushw y
      0000FA                        395 	_vars VSIZE
      0000FA 52 02            [ 2]    1     sub sp,#VSIZE 
      0000FC 6B 01            [ 1]  396 	ld (BTW,sp),a ; byte to write 
      0000FE 0F 02            [ 1]  397 	clr (OPT,sp)  ; OPTION flag
                                    398 ; put addr[15:0] in Y, for bounds check.
      000100 90 CE 00 13      [ 2]  399 	ldw y,farptr+1   ; Y=addr15:0
                                    400 ; check addr[23:16], if <> 0 then it is extened flash memory
      000104 72 5D 00 12      [ 1]  401 	tnz farptr 
      000108 26 14            [ 1]  402 	jrne write_flash
      00010A 90 A3 26 80      [ 2]  403     cpw y,#user_space
      00010E 24 0E            [ 1]  404     jruge write_flash
      000110 90 A3 40 00      [ 2]  405 	cpw y,#EEPROM_BASE  
      000114 25 52            [ 1]  406     jrult write_exit
      000116 90 A3 48 7F      [ 2]  407 	cpw y,#OPTION_END 
      00011A 22 4C            [ 1]  408 	jrugt write_exit
      00011C 20 16            [ 2]  409 	jra write_eeprom 
                                    410 ; write program memory
      00011E                        411 write_flash:
      00011E CD 00 EA         [ 4]  412 	call unlock_flash 
      000121 9B               [ 1]  413 1$:	sim 
      000122 7B 01            [ 1]  414 	ld a,(BTW,sp)
      000124 92 A7 00 12      [ 4]  415 	ldf ([farptr],x),a ; farptr[x]=A
      000128 72 05 50 5F FB   [ 2]  416 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00012D 9A               [ 1]  417     rim 
      00012E 72 13 50 5F      [ 1]  418     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000132 20 34            [ 2]  419     jra write_exit
                                    420 ; write eeprom and option
      000134                        421 write_eeprom:
      000134 CD 00 DC         [ 4]  422 	call unlock_eeprom
                                    423 	; check for data eeprom or option eeprom
      000137 90 A3 48 00      [ 2]  424 	cpw y,#OPTION_BASE
      00013B 2B 08            [ 1]  425 	jrmi 1$
      00013D 90 A3 48 80      [ 2]  426 	cpw y,#OPTION_END+1
      000141 2A 02            [ 1]  427 	jrpl 1$
      000143 03 02            [ 1]  428 	cpl (OPT,sp)
      000145                        429 1$: 
      000145 0D 02            [ 1]  430     tnz (OPT,sp)
      000147 27 08            [ 1]  431     jreq 2$
                                    432 	; pour modifier une option il faut modifier ces 2 bits
      000149 72 1E 50 5B      [ 1]  433     bset FLASH_CR2,#FLASH_CR2_OPT
      00014D 72 1F 50 5C      [ 1]  434     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000151                        435 2$: 
      000151 7B 01            [ 1]  436     ld a,(BTW,sp)
      000153 92 A7 00 12      [ 4]  437     ldf ([farptr],x),a
      000157 0D 02            [ 1]  438     tnz (OPT,sp)
      000159 27 08            [ 1]  439     jreq 3$
      00015B 5C               [ 2]  440     incw x
      00015C 7B 01            [ 1]  441     ld a,(BTW,sp)
      00015E 43               [ 1]  442     cpl a
      00015F 92 A7 00 12      [ 4]  443     ldf ([farptr],x),a
      000163 72 05 50 5F FB   [ 2]  444 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000168                        445 write_exit:
      000168                        446 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000168 5B 02            [ 2]    1     addw sp,#VSIZE 
      00016A 90 85            [ 2]  447 	popw y
      00016C 81               [ 4]  448     ret
                                    449 
                                    450 ;--------------------------------------------
                                    451 ; write a data block to eeprom or flash 
                                    452 ; input:
                                    453 ;   Y        source address   
                                    454 ;   X        array index  destination  farptr[x]
                                    455 ;   BSIZE    block size bytes 
                                    456 ;   farptr   write address , byte* 
                                    457 ; output:
                                    458 ;	X 		after last byte written 
                                    459 ;   Y 		after last byte read 
                                    460 ;  farptr   point after block
                                    461 ;---------------------------------------------
      00016D                        462 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00016D                        463 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    464 	; local var 
                           000001   465 	XSAVE=1 
                           000002   466 	VSIZE=2 
      00016D                        467 write_block:
      00016D                        468 	_vars VSIZE
      00016D 52 02            [ 2]    1     sub sp,#VSIZE 
      00016F 1F 01            [ 2]  469 	ldw (XSAVE,sp),x 
      000171 1E 05            [ 2]  470 	ldw x,(BSIZE,sp) 
      000173 27 13            [ 1]  471 	jreq 9$
      000175 1E 01            [ 2]  472 1$:	ldw x,(XSAVE,sp)
      000177 90 F6            [ 1]  473 	ld a,(y)
      000179 CD 00 F8         [ 4]  474 	call write_byte 
      00017C 5C               [ 2]  475 	incw x 
      00017D 90 5C            [ 2]  476 	incw y 
      00017F 1F 01            [ 2]  477 	ldw (XSAVE,sp),x
      000181 1E 05            [ 2]  478 	ldw x,(BSIZE,sp)
      000183 5A               [ 2]  479 	decw x
      000184 1F 05            [ 2]  480 	ldw (BSIZE,sp),x 
      000186 26 ED            [ 1]  481 	jrne 1$
      000188                        482 9$:
      000188 1E 01            [ 2]  483 	ldw x,(XSAVE,sp)
      00018A CD 1C 2F         [ 4]  484 	call incr_farptr
      00018D                        485 	_drop VSIZE
      00018D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00018F 81               [ 4]  486 	ret 
                                    487 
                                    488 
                                    489 ;---------------------------------------------
                                    490 ;   UART1 subroutines
                                    491 ;---------------------------------------------
                                    492 
                                    493 ;---------------------------------------------
                                    494 ; initialize UART1, 115200 8N1
                                    495 ; input:
                                    496 ;	none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    497 ; output:
                                    498 ;   none
                                    499 ;---------------------------------------------
      000190                        500 uart1_init:
      000190 72 1A 50 02      [ 1]  501     bset PA_DDR,#UART1_TX_PIN
      000194 72 1A 50 03      [ 1]  502     bset PA_CR1,#UART1_TX_PIN 
      000198 72 1A 50 04      [ 1]  503     bset PA_CR2,#UART1_TX_PIN 
                                    504 ; enable UART1 clock
      00019C 72 14 50 C7      [ 1]  505 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0001A0                        506 uart1_set_baud: 
                                    507 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    508 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0001A0 A6 E1            [ 1]  509 	ld a,#CLK_SWR_HSI
      0001A2 C1 50 C3         [ 1]  510 	cp a,CLK_CMSR 
      0001A5 27 0A            [ 1]  511 	jreq 2$ 
      0001A7                        512 1$: ; 8 Mhz 	
      0001A7 35 05 52 33      [ 1]  513 	mov UART1_BRR2,#0x05 ; must be loaded first
      0001AB 35 04 52 32      [ 1]  514 	mov UART1_BRR1,#0x4
      0001AF 20 08            [ 2]  515 	jra 3$
      0001B1                        516 2$: ; 16 Mhz 	
      0001B1 35 0B 52 33      [ 1]  517 	mov UART1_BRR2,#0x0b ; must be loaded first
      0001B5 35 08 52 32      [ 1]  518 	mov UART1_BRR1,#0x08
      0001B9                        519 3$:
      0001B9 72 5F 52 31      [ 1]  520     clr UART1_DR
      0001BD 35 2C 52 35      [ 1]  521 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0001C1 72 10 52 35      [ 1]  522 	bset UART1_CR2,#UART_CR2_SBK
      0001C5 72 0D 52 30 FB   [ 2]  523     btjf UART1_SR,#UART_SR_TC,.
      0001CA 81               [ 4]  524     ret
                                    525 
                                    526 ;---------------------------------
                                    527 ; send character to UART1 
                                    528 ; input:
                                    529 ;   A 
                                    530 ; output:
                                    531 ;   none 
                                    532 ;--------------------------------	
      0001CB                        533 putc:
      0001CB 72 0F 52 30 FB   [ 2]  534 	btjf UART1_SR,#UART_SR_TXE,.
      0001D0 C7 52 31         [ 1]  535 	ld UART1_DR,a 
      0001D3 81               [ 4]  536 	ret 
                                    537 
                                    538 ;---------------------------------
                                    539 ; wait character from UART1 
                                    540 ; input:
                                    541 ;   none
                                    542 ; output:
                                    543 ;   A 			char  
                                    544 ;--------------------------------	
      0001D4                        545 getc:
      0001D4 C6 00 23         [ 1]  546 	ld a,rx_char 
      0001D7 27 FB            [ 1]  547 	jreq getc 
      0001D9 72 5F 00 23      [ 1]  548 	clr rx_char 
      0001DD 81               [ 4]  549 	ret 
                                    550 
                                    551 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    552 ; send an ASCIZ string to UART1 
                                    553 ; input: 
                                    554 ;   x 		char * 
                                    555 ; output:
                                    556 ;   none 
                                    557 ;-------------------------------
      0001DE                        558 puts:
      0001DE F6               [ 1]  559     ld a,(x)
      0001DF 27 06            [ 1]  560 	jreq 1$
      0001E1 CD 01 CB         [ 4]  561 	call putc 
      0001E4 5C               [ 2]  562 	incw x 
      0001E5 20 F7            [ 2]  563 	jra puts 
      0001E7 81               [ 4]  564 1$:	ret 
                                    565 
                                    566 
                                    567 ;---------------------------
                                    568 ; delete character at left 
                                    569 ; of cursor on terminal 
                                    570 ; input:
                                    571 ;   none 
                                    572 ; output:
                                    573 ;	none 
                                    574 ;---------------------------
      0001E8                        575 bksp:
      0001E8 A6 08            [ 1]  576 	ld a,#BSP 
      0001EA CD 01 CB         [ 4]  577 	call putc 
      0001ED A6 20            [ 1]  578 	ld a,#SPACE 
      0001EF CD 01 CB         [ 4]  579 	call putc 
      0001F2 A6 08            [ 1]  580 	ld a,#BSP 
      0001F4 CD 01 CB         [ 4]  581 	call putc 
      0001F7 81               [ 4]  582 	ret 
                                    583 ;---------------------------
                                    584 ; delete n character left of cursor 
                                    585 ; at terminal.
                                    586 ; input: 
                                    587 ;   A   	number of characters to delete.
                                    588 ; output:
                                    589 ;    none 
                                    590 ;--------------------------	
      0001F8                        591 delete:
      0001F8 88               [ 1]  592 	push a 
      0001F9 0D 01            [ 1]  593 0$:	tnz (1,sp)
      0001FB 27 07            [ 1]  594 	jreq 1$
      0001FD CD 01 E8         [ 4]  595 	call bksp 
      000200 0A 01            [ 1]  596 	dec (1,sp)
      000202 20 F5            [ 2]  597 	jra 0$
      000204 84               [ 1]  598 1$:	pop a 
      000205 81               [ 4]  599 	ret
                                    600 
                                    601 ;--------------------------
                                    602 ; print n spaces on terminal
                                    603 ; input:
                                    604 ;  X 		number of spaces 
                                    605 ; output:
                                    606 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    607 ;---------------------------
      000206                        608 spaces:
      000206 A6 20            [ 1]  609 	ld a,#SPACE 
      000208 5D               [ 2]  610 1$:	tnzw x
      000209 27 06            [ 1]  611 	jreq 9$
      00020B CD 01 CB         [ 4]  612 	call putc 
      00020E 5A               [ 2]  613 	decw x
      00020F 20 F7            [ 2]  614 	jra 1$
      000211                        615 9$: 
      000211 81               [ 4]  616 	ret 
                                    617 
                           000001   618 .if DEBUG 
                                    619 ;---------------------------------
                                    620 ;; print actual registers states 
                                    621 ;; as pushed on stack 
                                    622 ;; {Y,X,CC,A}
                                    623 ;---------------------------------
      000212                        624 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      000212                        625 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      000212                        626 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      000212                        627 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      000212                        628 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      000212                        629 prt_regs:
      000212 AE 02 55         [ 2]  630 	ldw x,#regs_state 
      000215 CD 01 DE         [ 4]  631 	call puts
                                    632 ; register PC
      000218 16 01            [ 2]  633 	ldw y,(1,sp)
      00021A AE 0A 1B         [ 2]  634 	ldw x,#REG_EPC 
      00021D CD 09 6C         [ 4]  635 	call prt_reg16 
                                    636 ; register CC 
      000220 7B 08            [ 1]  637 	ld a,(R_CC,sp)
      000222 AE 0A 2C         [ 2]  638 	ldw x,#REG_CC 
      000225 CD 09 47         [ 4]  639 	call prt_reg8 
                                    640 ; register A 
      000228 7B 07            [ 1]  641 	ld a,(R_A,sp)
      00022A AE 0A 28         [ 2]  642 	ldw x,#REG_A 
      00022D CD 09 47         [ 4]  643 	call prt_reg8 
                                    644 ; register X 
      000230 16 05            [ 2]  645 	ldw y,(R_X,sp)
      000232 AE 0A 24         [ 2]  646 	ldw x,#REG_X 
      000235 CD 09 6C         [ 4]  647 	call prt_reg16 
                                    648 ; register Y 
      000238 16 03            [ 2]  649 	ldw y,(R_Y,sp)
      00023A AE 0A 20         [ 2]  650 	ldw x,#REG_Y 
      00023D CD 09 6C         [ 4]  651 	call prt_reg16 
                                    652 ; register SP 
      000240 90 96            [ 1]  653 	ldw y,sp
      000242 72 A9 00 08      [ 2]  654 	addw y,#6+ARG_OFS  
      000246 AE 0A 31         [ 2]  655 	ldw x,#REG_SP
      000249 CD 09 6C         [ 4]  656 	call prt_reg16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00024C A6 0D            [ 1]  657 	ld a,#CR 
      00024E CD 01 CB         [ 4]  658 	call putc
      000251 CD 01 CB         [ 4]  659 	call putc   
      000254 81               [ 4]  660 	ret 
                                    661 
      000255 0A 72 65 67 69 73 74   662 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    663 
                                    664 
                                    665 ;--------------------
                                    666 ; print content at address in hex.
                                    667 ; input:
                                    668 ;   X 	address to peek 
                                    669 ; output:
                                    670 ;	none 
                                    671 ;--------------------	
      00027C                        672 prt_peek:
      00027C 89               [ 2]  673 	pushw x 
      00027D CF 00 08         [ 2]  674 	ldw acc16,x 
      000280 72 5F 00 07      [ 1]  675 	clr acc24 
      000284 5F               [ 1]  676 	clrw x 
      000285 A6 10            [ 1]  677 	ld a,#16 
      000287 CD 0A 36         [ 4]  678 	call prti24 
      00028A A6 3A            [ 1]  679 	ld a,#': 
      00028C CD 01 CB         [ 4]  680 	call putc 
      00028F A6 20            [ 1]  681 	ld a,#SPACE 
      000291 CD 01 CB         [ 4]  682 	call putc 
      000294 85               [ 2]  683 	popw x 
      000295 F6               [ 1]  684 	ld a,(x)
      000296 C7 00 09         [ 1]  685 	ld acc8,a 
      000299 5F               [ 1]  686 	clrw x 
      00029A A6 10            [ 1]  687 	ld a,#16 
      00029C CD 0A 36         [ 4]  688 	call prti24
      00029F 81               [ 4]  689 	ret 
                                    690 .endif ; DEBUG  
                                    691 
                                    692 ;-------------------------------------
                                    693 ; retrun string length
                                    694 ; input:
                                    695 ;   X         .asciz  
                                    696 ; output:
                                    697 ;   X         length 
                                    698 ;-------------------------------------
      0002A0                        699 strlen:
      0002A0 90 93            [ 1]  700 	ldw y,x 
      0002A2 5F               [ 1]  701 	clrw x 
      0002A3 90 7D            [ 1]  702 1$:	tnz (y) 
      0002A5 27 05            [ 1]  703 	jreq 9$ 
      0002A7 5C               [ 2]  704 	incw x
      0002A8 90 5C            [ 2]  705 	incw y 
      0002AA 20 F7            [ 2]  706 	jra 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002AC 81               [ 4]  707 9$: ret 
                                    708 
                                    709 ;------------------------------------
                                    710 ; compare 2 strings
                                    711 ; input:
                                    712 ;   X 		char* first string 
                                    713 ;   Y       char* second string 
                                    714 ; output:
                                    715 ;   A 		0|1 
                                    716 ;-------------------------------------
      0002AD                        717 strcmp:
      0002AD F6               [ 1]  718 	ld a,(x)
      0002AE 27 0B            [ 1]  719 	jreq 5$ 
      0002B0 90 F1            [ 1]  720 	cp a,(y) 
      0002B2 26 05            [ 1]  721 	jrne 4$ 
      0002B4 5C               [ 2]  722 	incw x 
      0002B5 90 5C            [ 2]  723 	incw y 
      0002B7 20 F4            [ 2]  724 	jra strcmp 
      0002B9                        725 4$: ; not same  
      0002B9 4F               [ 1]  726 	clr a 
      0002BA 81               [ 4]  727 	ret 
      0002BB                        728 5$: ; same 
      0002BB A6 01            [ 1]  729 	ld a,#1 
      0002BD 81               [ 4]  730 	ret 
                                    731 
                                    732 
                                    733 ;---------------------------------------
                                    734 ;  copy src to dest 
                                    735 ; input:
                                    736 ;   X 		dest 
                                    737 ;   Y 		src 
                                    738 ; output: 
                                    739 ;   X 		dest 
                                    740 ;----------------------------------
      0002BE                        741 strcpy:
      0002BE 89               [ 2]  742 	pushw x 
      0002BF 90 F6            [ 1]  743 1$: ld a,(y)
      0002C1 27 06            [ 1]  744 	jreq 9$ 
      0002C3 F7               [ 1]  745 	ld (x),a 
      0002C4 5C               [ 2]  746 	incw x 
      0002C5 90 5C            [ 2]  747 	incw y 
      0002C7 20 F6            [ 2]  748 	jra 1$ 
      0002C9 7F               [ 1]  749 9$:	clr (x)
      0002CA 85               [ 2]  750 	popw x 
      0002CB 81               [ 4]  751 	ret 
                                    752 
                                    753 ;---------------------------------------
                                    754 ; move memory block 
                                    755 ; input:
                                    756 ;   X 		destination 
                                    757 ;   Y 	    source 
                                    758 ;   acc16	size 
                                    759 ; output:
                                    760 ;   none 
                                    761 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000001   762 	INCR=1 ; increament high byte 
                           000002   763 	LB=2 ; increament low byte 
                           000002   764 	VSIZE=2
      0002CC                        765 move:
      0002CC                        766 	_vars VSIZE 
      0002CC 52 02            [ 2]    1     sub sp,#VSIZE 
      0002CE 0F 01            [ 1]  767 	clr (INCR,sp)
      0002D0 0F 02            [ 1]  768 	clr (LB,sp)
      0002D2 90 89            [ 2]  769 	pushw y 
      0002D4 13 01            [ 2]  770 	cpw x,(1,sp) ; compare DEST to SRC 
      0002D6 90 85            [ 2]  771 	popw y 
      0002D8 27 31            [ 1]  772 	jreq move_exit ; x==y 
      0002DA 2B 0E            [ 1]  773 	jrmi move_down
      0002DC                        774 move_up: ; start from top address with incr=-1
      0002DC 72 BB 00 08      [ 2]  775 	addw x,acc16
      0002E0 72 B9 00 08      [ 2]  776 	addw y,acc16
      0002E4 03 01            [ 1]  777 	cpl (INCR,sp)
      0002E6 03 02            [ 1]  778 	cpl (LB,sp)   ; increment = -1 
      0002E8 20 05            [ 2]  779 	jra move_loop  
      0002EA                        780 move_down: ; start from bottom address with incr=1 
      0002EA 5A               [ 2]  781     decw x 
      0002EB 90 5A            [ 2]  782 	decw y
      0002ED 0C 02            [ 1]  783 	inc (LB,sp) ; incr=1 
      0002EF                        784 move_loop:	
      0002EF C6 00 08         [ 1]  785     ld a, acc16 
      0002F2 CA 00 09         [ 1]  786 	or a, acc8
      0002F5 27 14            [ 1]  787 	jreq move_exit 
      0002F7 72 FB 01         [ 2]  788 	addw x,(INCR,sp)
      0002FA 72 F9 01         [ 2]  789 	addw y,(INCR,sp) 
      0002FD 90 F6            [ 1]  790 	ld a,(y)
      0002FF F7               [ 1]  791 	ld (x),a 
      000300 89               [ 2]  792 	pushw x 
      000301 CE 00 08         [ 2]  793 	ldw x,acc16 
      000304 5A               [ 2]  794 	decw x 
      000305 CF 00 08         [ 2]  795 	ldw acc16,x 
      000308 85               [ 2]  796 	popw x 
      000309 20 E4            [ 2]  797 	jra move_loop
      00030B                        798 move_exit:
      00030B                        799 	_drop VSIZE
      00030B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00030D 81               [ 4]  800 	ret 	
                                    801 
                                    802 ;-------------------------------------
                                    803 ; search text area for a line with 
                                    804 ; same number as line#  
                                    805 ; input:
                                    806 ;	X 			line# 
                                    807 ; output:
                                    808 ;   X 			addr of line | 0 
                                    809 ;   Y           line#|insert address if not found  
                                    810 ;-------------------------------------
                           000001   811 	LL=1 ; line length 
                           000002   812 	LB=2 ; line length low byte 
                           000002   813 	VSIZE=2 
      00030E                        814 search_lineno:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00030E                        815 	_vars VSIZE
      00030E 52 02            [ 2]    1     sub sp,#VSIZE 
      000310 0F 01            [ 1]  816 	clr (LL,sp)
      000312 90 CE 00 1A      [ 2]  817 	ldw y,txtbgn
      000316                        818 search_ln_loop:
      000316 90 C3 00 1C      [ 2]  819 	cpw y,txtend 
      00031A 2A 10            [ 1]  820 	jrpl 8$
      00031C 90 F3            [ 1]  821 	cpw x,(y)
      00031E 27 0E            [ 1]  822 	jreq 9$
      000320 2B 0A            [ 1]  823 	jrmi 8$ 
      000322 90 E6 02         [ 1]  824 	ld a,(2,y)
      000325 6B 02            [ 1]  825 	ld (LB,sp),a 
      000327 72 F9 01         [ 2]  826 	addw y,(LL,sp)
      00032A 20 EA            [ 2]  827 	jra search_ln_loop 
      00032C                        828 8$: 
      00032C 5F               [ 1]  829 	clrw x 	
      00032D 51               [ 1]  830 	exgw x,y 
      00032E                        831 9$: _drop VSIZE
      00032E 5B 02            [ 2]    1     addw sp,#VSIZE 
      000330 51               [ 1]  832 	exgw x,y   
      000331 81               [ 4]  833 	ret 
                                    834 
                                    835 ;-------------------------------------
                                    836 ; delete line at addr
                                    837 ; move new line to insert with end of text 
                                    838 ; otherwise it would be overwritten.
                                    839 ; input:
                                    840 ;   X 		addr of line i.e DEST for move 
                                    841 ;-------------------------------------
                           000001   842 	LLEN=1
                           000003   843 	SRC=3
                           000004   844 	VSIZE=4
      000332                        845 del_line: 
      000332                        846 	_vars VSIZE 
      000332 52 04            [ 2]    1     sub sp,#VSIZE 
      000334 E6 02            [ 1]  847 	ld a,(2,x) ; line length
      000336 6B 02            [ 1]  848 	ld (LLEN+1,sp),a 
      000338 0F 01            [ 1]  849 	clr (LLEN,sp)
      00033A 90 93            [ 1]  850 	ldw y,x  
      00033C 72 F9 01         [ 2]  851 	addw y,(LLEN,sp) ;SRC  
      00033F 17 03            [ 2]  852 	ldw (SRC,sp),y  ;save source 
      000341 90 CE 00 1C      [ 2]  853 	ldw y,txtend 
      000345 90 E6 02         [ 1]  854 	ld a,(2,y)
      000348 90 5F            [ 1]  855 	clrw y 
      00034A 90 97            [ 1]  856 	ld yl,a  
      00034C 72 B9 00 1C      [ 2]  857 	addw y,txtend
      000350 72 F2 03         [ 2]  858 	subw y,(SRC,sp) ; y=count 
      000353 90 CF 00 08      [ 2]  859 	ldw acc16,y 
      000357 16 03            [ 2]  860 	ldw y,(SRC,sp)    ; source
      000359 CD 02 CC         [ 4]  861 	call move
      00035C 90 CE 00 1C      [ 2]  862 	ldw y,txtend 
      000360 72 F2 01         [ 2]  863 	subw y,(LLEN,sp)
      000363 90 CF 00 1C      [ 2]  864 	ldw txtend,y  
      000367                        865 	_drop VSIZE     
      000367 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000369 81               [ 4]  866 	ret 
                                    867 
                                    868 ;---------------------------------------------
                                    869 ; create a gap in text area 
                                    870 ; move new line to insert in gap with end of text
                                    871 ; otherwise it would be overwritten.
                                    872 ; input:
                                    873 ;    X 			addr gap start 
                                    874 ;    Y 			gap length 
                                    875 ; output:
                                    876 ;    X 			addr gap start 
                                    877 ;--------------------------------------------
                           000001   878 	DEST=1
                           000003   879 	SRC=3
                           000005   880 	LEN=5
                           000006   881 	VSIZE=6 
      00036A                        882 create_gap:
      00036A                        883 	_vars VSIZE
      00036A 52 06            [ 2]    1     sub sp,#VSIZE 
      00036C 1F 03            [ 2]  884 	ldw (SRC,sp),x 
      00036E 17 05            [ 2]  885 	ldw (LEN,sp),y 
      000370 90 CF 00 08      [ 2]  886 	ldw acc16,y 
      000374 90 93            [ 1]  887 	ldw y,x ; SRC
      000376 72 BB 00 08      [ 2]  888 	addw x,acc16  
      00037A 1F 01            [ 2]  889 	ldw (DEST,sp),x 
                                    890 ;compute size to move 	
      00037C CE 00 1C         [ 2]  891 	ldw x,txtend 
      00037F E6 02            [ 1]  892 	ld a,(2,x) ; pending line length 
      000381 C7 00 09         [ 1]  893 	ld acc8,a 
      000384 72 5F 00 08      [ 1]  894 	clr acc16 
      000388 72 BB 00 08      [ 2]  895 	addw x,acc16 
      00038C 72 F0 03         [ 2]  896 	subw x,(SRC,sp)
      00038F CF 00 08         [ 2]  897 	ldw acc16,x ; size to move
      000392 1E 01            [ 2]  898 	ldw x,(DEST,sp) 
      000394 CD 02 CC         [ 4]  899 	call move
      000397 CE 00 1C         [ 2]  900 	ldw x,txtend
      00039A 72 FB 05         [ 2]  901 	addw x,(LEN,sp)
      00039D CF 00 1C         [ 2]  902 	ldw txtend,x
      0003A0                        903 9$:	_drop VSIZE 
      0003A0 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A2 81               [ 4]  904 	ret 
                                    905 
                                    906 
                                    907 ;--------------------------------------------
                                    908 ; insert line in tib into text area 
                                    909 ; first search for already existing 
                                    910 ; replace existing 
                                    911 ; if strlen(tib)==0 delete existing 
                                    912 ; input:
                                    913 ;   ptr16 				pointer to tokenized line  
                                    914 ; output:
                                    915 ;   none
                                    916 ;---------------------------------------------
                           000001   917 	DEST=1  ; text area insertion address 
                           000003   918 	SRC=3   ; str to insert address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           000005   919 	LINENO=5 ; line number 
                           000007   920 	LLEN=7 ; line length 
                           000008   921 	VSIZE=8  
      0003A3                        922 insert_line:
      0003A3                        923 	_vars VSIZE 
      0003A3 52 08            [ 2]    1     sub sp,#VSIZE 
      0003A5 CE 00 13         [ 2]  924 	ldw x,ptr16  
      0003A8 C3 00 1A         [ 2]  925 	cpw x,txtbgn 
      0003AB 26 0D            [ 1]  926 	jrne 0$
                                    927 ;first text line 
      0003AD AE 00 02         [ 2]  928 	ldw x,#2 
      0003B0 72 D6 00 13      [ 4]  929 	ld a,([ptr16],x)
      0003B4 5F               [ 1]  930 	clrw x 
      0003B5 97               [ 1]  931 	ld xl,a
      0003B6 1F 07            [ 2]  932 	ldw (LLEN,sp),x  
      0003B8 20 45            [ 2]  933 	jra 5$
      0003BA 72 CE 00 13      [ 5]  934 0$:	ldw x,[ptr16]
                                    935 ; new line number
      0003BE 1F 05            [ 2]  936 	ldw (LINENO,sp),x 
      0003C0 AE 00 02         [ 2]  937 	ldw x,#2 
      0003C3 72 D6 00 13      [ 4]  938 	ld a,([ptr16],x)
      0003C7 97               [ 1]  939 	ld xl,a
                                    940 ; new line length
      0003C8 1F 07            [ 2]  941 	ldw (LLEN,sp),x
                                    942 ; check if that line number already exit 	
      0003CA 1E 05            [ 2]  943 	ldw x,(LINENO,sp)
      0003CC CD 03 0E         [ 4]  944 	call search_lineno 
      0003CF 5D               [ 2]  945 	tnzw x 
      0003D0 26 04            [ 1]  946 	jrne 2$
                                    947 ; line doesn't exit
                                    948 ; it will be inserted at this point.  	
      0003D2 17 01            [ 2]  949 	ldw (DEST,sp),y 
      0003D4 20 05            [ 2]  950 	jra 3$
                                    951 ; line exit delete it.
                                    952 ; it will be replaced by new one 	
      0003D6 1F 01            [ 2]  953 2$: ldw (DEST,sp),x 
      0003D8 CD 03 32         [ 4]  954 	call del_line
      0003DB                        955 3$: 
                                    956 ; insert new line or leave if LLEN==3
                                    957 ; LLEN==3 means empty line 
      0003DB A6 03            [ 1]  958 	ld a,#3
      0003DD 11 08            [ 1]  959 	cp a,(LLEN+1,sp)
      0003DF 27 27            [ 1]  960 	jreq insert_ln_exit ; empty line exit.
                                    961 ; if insertion point at txtend 
                                    962 ; no move required 
      0003E1 1E 01            [ 2]  963 	ldw x,(DEST,sp)
      0003E3 C3 00 1C         [ 2]  964 	cpw x,txtend 
      0003E6 2A 17            [ 1]  965 	jrpl 5$ 
                                    966 ; must create a gap
                                    967 ; at insertion point  
      0003E8 1E 01            [ 2]  968 	ldw x,(DEST,sp)
      0003EA 16 07            [ 2]  969 	ldw y,(LLEN,sp)
      0003EC CD 03 6A         [ 4]  970 	call create_gap 
                                    971 ; move new line in gap 
      0003EF 1E 07            [ 2]  972 	ldw x,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003F1 CF 00 08         [ 2]  973 	ldw acc16,x 
      0003F4 90 CE 00 1C      [ 2]  974 	ldw y,txtend ;SRC 
      0003F8 1E 01            [ 2]  975 	ldw x,(DEST,sp) ; dest address 
      0003FA CD 02 CC         [ 4]  976 	call move 
      0003FD 20 09            [ 2]  977 	jra insert_ln_exit  
      0003FF                        978 5$: ; no move required 
      0003FF 1E 07            [ 2]  979 	ldw x,(LLEN,sp) 
      000401 72 BB 00 1C      [ 2]  980 	addw x,txtend 
      000405 CF 00 1C         [ 2]  981 	ldw txtend,x 
      000408                        982 insert_ln_exit:	
      000408                        983 	_drop VSIZE
      000408 5B 08            [ 2]    1     addw sp,#VSIZE 
      00040A 81               [ 4]  984 	ret
                                    985 
                                    986 
                                    987 ;-----------------------------
                                    988 ; check if text buffer full
                                    989 ; input:
                                    990 ;   ptr16     addr start tokenize line 
                                    991 ;   X         buffer index 
                                    992 ; output:
                                    993 ;   none 
                                    994 ;-----------------------------------
      00040B                        995 check_full:
      00040B 72 BB 00 13      [ 2]  996 	addw x,ptr16 
      00040F A3 16 C8         [ 2]  997 	cpw x,#tib 
      000412 25 05            [ 1]  998 	jrult 1$
      000414 A6 01            [ 1]  999 	ld a,#ERR_MEM_FULL
      000416 CC 07 8B         [ 2] 1000 	jp tb_error 
      000419 81               [ 4] 1001 1$: ret 
                                   1002 
                                   1003 
                                   1004 ;-----------------------------------
                                   1005 ; create token list form text line 
                                   1006 ; save this list in text area
                                   1007 ; input:
                                   1008 ;   none
                                   1009 ; output:
                                   1010 ;   basicptr     token list buffer
                                   1011 ;   line# 		 BASIC line number 
                                   1012 ;   in.w  		 cleared 
                                   1013 ;-----------------------------------
                                   1014 	.macro _incr_ptr16 n 
                                   1015 	ldw x,#n 
                                   1016 	addw x,ptr16 
                                   1017 	ldw ptr16,x 
                                   1018 	.endm 
                                   1019 
                           000001  1020 	XSAVE=1
                           000003  1021 	BUFIDX=3
                           000004  1022 	VSIZE=4
      00041A                       1023 compile:
      00041A                       1024 	_vars VSIZE 
      00041A 52 04            [ 2]    1     sub sp,#VSIZE 
      00041C 72 1A 00 21      [ 1] 1025 	bset flags,#FCOMP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000420 CE 00 1C         [ 2] 1026 	ldw x,txtend
      000423 CF 00 13         [ 2] 1027 	ldw ptr16,x 
      000426 5F               [ 1] 1028 	clrw x 
      000427 AE 00 03         [ 2] 1029 	ldw x,#3
      00042A 1F 03            [ 2] 1030 	ldw (BUFIDX,sp),X  
      00042C CD 04 0B         [ 4] 1031 	call check_full
      00042F 5F               [ 1] 1032 	clrw x 
      000430 72 CF 00 13      [ 5] 1033 	ldw [ptr16],x 
      000434 CD 0D E5         [ 4] 1034 	call get_token
      000437 1F 01            [ 2] 1035 	ldw (XSAVE,sp),x 
      000439 A1 04            [ 1] 1036 	cp a,#TK_INTGR 
      00043B 26 11            [ 1] 1037 	jrne 3$
      00043D A3 00 00         [ 2] 1038 	cpw x,#0  
      000440 22 03            [ 1] 1039 	jrugt 1$
      000442 CC 07 89         [ 2] 1040 	jp syntax_error 
      000445 72 CF 00 13      [ 5] 1041 1$:	ldw [ptr16],x; line number
      000449 CD 0D E5         [ 4] 1042 2$:	call get_token
      00044C 1F 01            [ 2] 1043 	ldw (XSAVE,sp),x 
      00044E A1 00            [ 1] 1044 3$:	cp a,#TK_NONE 
      000450 26 03            [ 1] 1045 	jrne 30$
      000452 CC 04 E5         [ 2] 1046 	jp 9$
      000455                       1047 30$: 	 
      000455 1E 03            [ 2] 1048 	ldw x,(BUFIDX,sp)
      000457 CD 04 0B         [ 4] 1049 	call check_full 
      00045A 16 03            [ 2] 1050 	ldw y,(BUFIDX,sp) 
      00045C 91 D7 13         [ 4] 1051 	ld ([ptr16],y),a ; token attribute 
      00045F 90 5C            [ 2] 1052 	incw y
      000461 17 03            [ 2] 1053 	ldw (BUFIDX,sp),y
      000463 A1 01            [ 1] 1054 	cp a,#TK_COLON 
      000465 26 02            [ 1] 1055 	jrne 31$
      000467 20 E0            [ 2] 1056 	jra 2$ 
      000469                       1057 31$:
      000469 A1 03            [ 1] 1058 	cp a,#TK_CHAR
      00046B 26 0C            [ 1] 1059 	jrne 32$ 
      00046D 1E 01            [ 2] 1060 	ldw x,(XSAVE,sp)
      00046F 9F               [ 1] 1061 	ld a,xl 
      000470 91 D7 13         [ 4] 1062 	ld ([ptr16],y),a
      000473 90 5C            [ 2] 1063 	incw y 
      000475 17 03            [ 2] 1064 	ldw (BUFIDX,sp),y 
      000477 20 D0            [ 2] 1065 	jra 2$ 
      000479                       1066 32$:
      000479 A1 02            [ 1] 1067 	cp a,#TK_ARRAY 
      00047B 27 CC            [ 1] 1068 	jreq 2$ 
      00047D A1 0A            [ 1] 1069 	cp a,#TK_QSTR 
      00047F 26 25            [ 1] 1070 	jrne 4$
      000481 AE 17 18         [ 2] 1071 	ldw x,#pad 
      000484 CD 02 A0         [ 4] 1072 	call strlen
      000487 5C               [ 2] 1073 	incw x  
      000488 CD 04 0B         [ 4] 1074 	call check_full 
      00048B 90 AE 17 18      [ 2] 1075 	ldw y,#pad 
      00048F CE 00 13         [ 2] 1076 	ldw x,ptr16
      000492 72 FB 03         [ 2] 1077 	addw x,(BUFIDX,sp)	
      000495 CD 02 BE         [ 4] 1078 	call strcpy 
      000498 AE 17 18         [ 2] 1079 	ldw x,#pad 
      00049B CD 02 A0         [ 4] 1080 	call strlen 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00049E 5C               [ 2] 1081 	incw x
      00049F 72 FB 03         [ 2] 1082 	addw x,(BUFIDX,sp) 
      0004A2 1F 03            [ 2] 1083 	ldw (BUFIDX,sp),x
      0004A4 20 A3            [ 2] 1084 	jra 2$  
      0004A6 A1 04            [ 1] 1085 4$: cp a,#TK_INTGR
      0004A8 25 9F            [ 1] 1086 	jrult 2$
      0004AA A1 09            [ 1] 1087 	cp a,#TK_CONST 
      0004AC 22 9B            [ 1] 1088 	Jrugt 2$
      0004AE 1E 01            [ 2] 1089 	ldw x,(XSAVE,sp) 
      0004B0 16 03            [ 2] 1090 	ldw y,(BUFIDX,sp)
      0004B2 91 DF 13         [ 5] 1091 	ldw ([ptr16],y),x
      0004B5 A3 17 EF         [ 2] 1092 	cpw x,#rem 
      0004B8 26 22            [ 1] 1093 	jrne 5$	
                                   1094 ; comment advance in.w to eol 
      0004BA 72 A9 00 02      [ 2] 1095 	addw y,#2 ; skip exec address 
      0004BE 17 03            [ 2] 1096 	ldw (BUFIDX,sp),y 
      0004C0 CE 00 13         [ 2] 1097 	ldw x,ptr16 
      0004C3 72 FB 03         [ 2] 1098 	addw x,(BUFIDX,sp)
      0004C6 90 CE 00 00      [ 2] 1099 	ldw y,in.w 
      0004CA 72 A9 16 C8      [ 2] 1100 	addw y,#tib 
      0004CE CD 02 BE         [ 4] 1101 	call strcpy 	
      0004D1 CD 02 A0         [ 4] 1102 	call strlen 
      0004D4 5C               [ 2] 1103 	incw x ; skip string 0. 
      0004D5 72 FB 03         [ 2] 1104 	addw x,(BUFIDX,sp)
      0004D8 1F 03            [ 2] 1105 	ldw (BUFIDX,sp),x 
      0004DA 20 09            [ 2] 1106 	jra 9$
      0004DC 72 A9 00 02      [ 2] 1107 5$:	addw y,#2 
      0004E0 17 03            [ 2] 1108 	ldw (BUFIDX,sp),y 
      0004E2 CC 04 49         [ 2] 1109 	jp 2$
      0004E5                       1110 9$: 
      0004E5 AE 00 02         [ 2] 1111 	ldw x,#2
      0004E8 16 03            [ 2] 1112 	ldw y,(BUFIDX,sp)
      0004EA 90 9F            [ 1] 1113 	ld a,yl 
      0004EC 72 D7 00 13      [ 4] 1114 	ld ([ptr16],x),a  	
      0004F0 72 CE 00 13      [ 5] 1115 	ldw x,[ptr16]
      0004F4 27 09            [ 1] 1116 	jreq 10$
      0004F6 CD 03 A3         [ 4] 1117 	call insert_line
      0004F9 72 5F 00 03      [ 1] 1118 	clr  count 
      0004FD 20 0F            [ 2] 1119 	jra  11$ 
      0004FF                       1120 10$: 
      0004FF CE 00 13         [ 2] 1121 	ldw x,ptr16 
      000502 CF 00 04         [ 2] 1122 	ldw basicptr,x 
      000505 E6 02            [ 1] 1123 	ld a,(2,x)
      000507 C7 00 03         [ 1] 1124 	ld count,a 
      00050A 35 03 00 01      [ 1] 1125 	mov in,#3 
      00050E                       1126 11$:
      00050E                       1127 	_drop VSIZE 
      00050E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000510 72 1B 00 21      [ 1] 1128 	bres flags,#FCOMP 
      000514 81               [ 4] 1129 	ret 
                                   1130 
                                   1131 
                                   1132 ;------------------------------------
                                   1133 ;  set all variables to zero 
                                   1134 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1135 ;   none 
                                   1136 ; output:
                                   1137 ;	none
                                   1138 ;------------------------------------
      000515                       1139 clear_vars:
      000515 AE 00 24         [ 2] 1140 	ldw x,#vars 
      000518 90 AE 00 34      [ 2] 1141 	ldw y,#2*26 
      00051C 7F               [ 1] 1142 1$:	clr (x)
      00051D 5C               [ 2] 1143 	incw x 
      00051E 90 5A            [ 2] 1144 	decw y 
      000520 26 FA            [ 1] 1145 	jrne 1$
      000522 81               [ 4] 1146 	ret 
                                   1147 
                                   1148 ;-------------------------------------
                                   1149 ; check if A is a letter 
                                   1150 ; input:
                                   1151 ;   A 			character to test 
                                   1152 ; output:
                                   1153 ;   C flag      1 true, 0 false 
                                   1154 ;-------------------------------------
      000523                       1155 is_alpha:
      000523 A1 41            [ 1] 1156 	cp a,#'A 
      000525 8C               [ 1] 1157 	ccf
      000526 24 0B            [ 1] 1158 	jrnc 9$ 
      000528 A1 5B            [ 1] 1159 	cp a,#'Z+1 
      00052A 25 07            [ 1] 1160 	jrc 9$ 
      00052C A1 61            [ 1] 1161 	cp a,#'a 
      00052E 8C               [ 1] 1162 	ccf 
      00052F 24 02            [ 1] 1163 	jrnc 9$
      000531 A1 7B            [ 1] 1164 	cp a,#'z+1   
      000533 81               [ 4] 1165 9$: ret 	
                                   1166 
                                   1167 ;-------------------------------------
                                   1168 ;  program initialization entry point 
                                   1169 ;-------------------------------------
                           000001  1170 	MAJOR=1
                           000000  1171 	MINOR=0
      000534 0A 0A 54 69 6E 79 20  1172 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00057A                       1173 cold_start:
                                   1174 ;set stack 
      00057A AE 17 FF         [ 2] 1175 	ldw x,#STACK_EMPTY
      00057D 94               [ 1] 1176 	ldw sp,x   
                                   1177 ; clear all ram 
      00057E 7F               [ 1] 1178 0$: clr (x)
      00057F 5A               [ 2] 1179 	decw x 
      000580 26 FC            [ 1] 1180 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1181 ; activate pull up on all inputs 
      000582 A6 FF            [ 1] 1182 	ld a,#255 
      000584 C7 50 03         [ 1] 1183 	ld PA_CR1,a 
      000587 C7 50 08         [ 1] 1184 	ld PB_CR1,a 
      00058A C7 50 0D         [ 1] 1185 	ld PC_CR1,a 
      00058D C7 50 12         [ 1] 1186 	ld PD_CR1,a 
      000590 C7 50 17         [ 1] 1187 	ld PE_CR1,a 
      000593 C7 50 1C         [ 1] 1188 	ld PF_CR1,a 
      000596 C7 50 21         [ 1] 1189 	ld PG_CR1,a 
      000599 C7 50 2B         [ 1] 1190 	ld PI_CR1,a 
                                   1191 ; disable schmitt triggers on Arduino CN4 analog inputs
      00059C 55 00 3F 54 07   [ 1] 1192 	mov ADC_TDRL,0x3f
                                   1193 ; disable peripherals clocks
                                   1194 ;	clr CLK_PCKENR1 
                                   1195 ;	clr CLK_PCKENR2
      0005A1 72 5F 50 F2      [ 1] 1196 	clr AWU_TBR 
      0005A5 72 14 50 CA      [ 1] 1197 	bset CLK_PCKENR2,#2 ; enable LSI for beeper
                                   1198 ; select internal clock no divisor: 16 Mhz 	
      0005A9 A6 E1            [ 1] 1199 	ld a,#CLK_SWR_HSI 
      0005AB 5F               [ 1] 1200 	clrw x  
      0005AC CD 00 A4         [ 4] 1201     call clock_init 
      0005AF CD 00 C7         [ 4] 1202 	call timer4_init
      0005B2 CD 00 BA         [ 4] 1203 	call timer2_init
                                   1204 ; UART1 at 115200 BAUD
      0005B5 CD 01 90         [ 4] 1205 	call uart1_init
                                   1206 ; activate PE_4 (user button interrupt)
      0005B8 72 18 50 18      [ 1] 1207     bset PE_CR2,#USR_BTN_BIT 
                                   1208 ; display system information
      0005BC AE 05 34         [ 2] 1209 	ldw x,#software 
      0005BF CD 01 DE         [ 4] 1210 	call puts 
      0005C2 A6 01            [ 1] 1211 	ld a,#MAJOR 
      0005C4 C7 00 09         [ 1] 1212 	ld acc8,a 
      0005C7 5F               [ 1] 1213 	clrw x 
      0005C8 CF 00 07         [ 2] 1214 	ldw acc24,x 
      0005CB A6 0A            [ 1] 1215 	ld a,#10 
      0005CD CD 0A 36         [ 4] 1216 	call prti24 
      0005D0 A6 2E            [ 1] 1217 	ld a,#'.
      0005D2 CD 01 CB         [ 4] 1218 	call putc 
      0005D5 A6 00            [ 1] 1219 	ld a,#MINOR 
      0005D7 C7 00 09         [ 1] 1220 	ld acc8,a 
      0005DA 5F               [ 1] 1221 	clrw x 
      0005DB CF 00 07         [ 2] 1222 	ldw acc24,x 
      0005DE A6 0A            [ 1] 1223 	ld a,#10 
      0005E0 CD 0A 36         [ 4] 1224 	call prti24 
      0005E3 A6 0D            [ 1] 1225 	ld a,#CR 
      0005E5 CD 01 CB         [ 4] 1226 	call putc 
      0005E8 CD 1C 3D         [ 4] 1227 	call seek_fdrive 
                                   1228 ; configure LD2 pin 
      0005EB 72 1A 50 0D      [ 1] 1229     bset PC_CR1,#LED2_BIT
      0005EF 72 1A 50 0E      [ 1] 1230     bset PC_CR2,#LED2_BIT
      0005F3 72 1A 50 0C      [ 1] 1231     bset PC_DDR,#LED2_BIT
      0005F7 9A               [ 1] 1232 	rim 
      0005F8 72 5C 00 11      [ 1] 1233 	inc seedy+1 
      0005FC 72 5C 00 0F      [ 1] 1234 	inc seedx+1 
      000600 CD 06 6B         [ 4] 1235 	call clear_basic
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000603 CD 14 68         [ 4] 1236 	call ubound 
      000606 CD 10 84         [ 4] 1237 	call dpop 
      000609 CF 00 1F         [ 2] 1238 	ldw array_size,x
      00060C CD 06 15         [ 4] 1239 	call warm_init
      00060F CD 06 32         [ 4] 1240 	call load_autorun
      000612 CC 07 CF         [ 2] 1241     jp interp 
                                   1242 
      000615                       1243 warm_init:
      000615 72 5F 00 21      [ 1] 1244 	clr flags 
      000619 72 5F 00 1E      [ 1] 1245 	clr loop_depth 
      00061D AE 17 80         [ 2] 1246 	ldw x,#dstack_empty 
      000620 CF 00 18         [ 2] 1247 	ldw dstkptr,x 
      000623 35 04 00 22      [ 1] 1248 	mov tab_width,#TAB_WIDTH 
      000627 35 0A 00 06      [ 1] 1249 	mov base,#10 
      00062B AE 16 C8         [ 2] 1250 	ldw x,#tib 
      00062E CF 00 04         [ 2] 1251 	ldw basicptr,x 
      000631 81               [ 4] 1252 	ret 
                                   1253 
                                   1254 ;--------------------------
                                   1255 ; if autorun file defined 
                                   1256 ; in eeprom address AUTORUN_NAME 
                                   1257 ; load and run it.
                                   1258 ;-------------------------
      000632                       1259 load_autorun:
      000632 AE 40 00         [ 2] 1260 	ldw x,#AUTORUN_NAME
      000635 F6               [ 1] 1261 	ld a,(x)
      000636 27 1D            [ 1] 1262 	jreq 9$
      000638 90 AE 40 00      [ 2] 1263 	ldw y,#AUTORUN_NAME
      00063C CD 1C 9B         [ 4] 1264 	call search_file
      00063F 25 02            [ 1] 1265 	jrc 2$ 
      000641 20 12            [ 2] 1266 	jra 9$ 
      000643 CD 1D AA         [ 4] 1267 2$:	call load_file
      000646 AE 40 00         [ 2] 1268 	ldw x,#AUTORUN_NAME 
      000649 CD 01 DE         [ 4] 1269 	call puts
      00064C AE 06 56         [ 2] 1270 	ldw x,#autorun_msg 
      00064F CD 01 DE         [ 4] 1271 	call puts 
      000652 CC 1A 70         [ 2] 1272 	jp run_it    
      000655 81               [ 4] 1273 9$: ret 	
                                   1274 
      000656 20 6C 6F 61 64 65 64  1275 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1276 ;---------------------------
                                   1277 ; reset BASIC text variables 
                                   1278 ; and clear variables 
                                   1279 ;---------------------------
      00066B                       1280 clear_basic:
      00066B 72 5F 00 03      [ 1] 1281 	clr count 
      00066F AE 00 58         [ 2] 1282 	ldw x,#free_ram 
      000672 CF 00 1A         [ 2] 1283 	ldw txtbgn,x 
      000675 CF 00 1C         [ 2] 1284 	ldw txtend,x 
      000678 CD 05 15         [ 4] 1285 	call clear_vars 
      00067B 81               [ 4] 1286 	ret 
                                   1287 
                                   1288 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1289 ;;   Tiny BASIC error messages     ;;
                                   1290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00067C                       1291 err_msg:
      00067C 00 00 06 94 06 A2 06  1292 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             B1 06 CB 06 DB
      000688 06 F2 07 09 07 24 07  1293 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             36 07 48
      000692 07 55                 1294 	.word err_no_access 
                                   1295 
      000694 0A 4D 65 6D 6F 72 79  1296 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      0006A2 0A 73 79 6E 74 61 78  1297 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      0006B1 0A 6D 61 74 68 20 6F  1298 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      0006CB 0A 64 69 76 69 73 69  1299 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      0006DB 0A 69 6E 76 61 6C 69  1300 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      0006F2 0A 72 75 6E 20 74 69  1301 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000709 0A 63 6F 6D 6D 61 6E  1302 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      000724 0A 64 75 70 6C 69 63  1303 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      000736 0A 46 69 6C 65 20 6E  1304 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      000748 0A 62 61 64 20 76 61  1305 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      000755 0A 46 69 6C 65 20 69  1306 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1307 
                                   1308 ;rt_msg: .asciz "last token id: "
                                   1309 
      000789                       1310 syntax_error:
      000789 A6 02            [ 1] 1311 	ld a,#ERR_SYNTAX 
                                   1312 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00078B                       1313 tb_error:
      00078B AE 06 7C         [ 2] 1314 	ldw x, #err_msg 
      00078E 72 5F 00 08      [ 1] 1315 	clr acc16 
      000792 48               [ 1] 1316 	sll a
      000793 72 59 00 08      [ 1] 1317 	rlc acc16  
      000797 C7 00 09         [ 1] 1318 	ld acc8, a 
      00079A 72 BB 00 08      [ 2] 1319 	addw x,acc16 
      00079E FE               [ 2] 1320 	ldw x,(x)
      00079F CD 01 DE         [ 4] 1321 	call puts
      0007A2 72 0B 00 21 18   [ 2] 1322 	btjf flags,#FCOMP, 1$
      0007A7 AE 16 C8         [ 2] 1323 	ldw x,#tib
      0007AA CD 01 DE         [ 4] 1324 	call puts 
      0007AD A6 0D            [ 1] 1325 	ld a,#CR 
      0007AF CD 01 CB         [ 4] 1326 	call putc
      0007B2 CE 00 00         [ 2] 1327 	ldw x,in.w
      0007B5 CD 02 06         [ 4] 1328 	call spaces
      0007B8 A6 5E            [ 1] 1329 	ld a,#'^
      0007BA CD 01 CB         [ 4] 1330 	call putc 
      0007BD 20 09            [ 2] 1331 	jra 6$
      0007BF CE 00 04         [ 2] 1332 1$:	ldw x,basicptr
      0007C2 C6 00 01         [ 1] 1333 	ld a,in 
      0007C5 CD 15 87         [ 4] 1334 	call prt_basic_line
                                   1335 ;	ldw x,#rt_msg 
                                   1336 ;	call puts 
                                   1337 ;	clrw x 
                                   1338 ;	ld a,in.saved 
                                   1339 ;	ld xl,a 
                                   1340 ;	ld a,([basicptr],x)
                                   1341 ;	clrw x 
                                   1342 ;	ld xl,a 
                                   1343 ;	call print_int 
      0007C8 AE 17 FF         [ 2] 1344 6$: ldw x,#STACK_EMPTY 
      0007CB 94               [ 1] 1345     ldw sp,x
      0007CC                       1346 warm_start:
      0007CC CD 06 15         [ 4] 1347 	call warm_init
                                   1348 ;----------------------------
                                   1349 ;   BASIC interpreter
                                   1350 ;----------------------------
      0007CF                       1351 interp:
      0007CF 72 5F 00 00      [ 1] 1352 	clr in.w
      0007D3 72 01 00 21 23   [ 2] 1353 	btjf flags,#FRUN,4$ 
                                   1354 ; running program
                                   1355 ; goto next basic line 
      0007D8 CE 00 04         [ 2] 1356 	ldw x,basicptr
      0007DB E6 02            [ 1] 1357 	ld a,(2,x) ; line length 
      0007DD C7 00 09         [ 1] 1358 	ld acc8,a 
      0007E0 72 5F 00 08      [ 1] 1359 	clr acc16 
      0007E4 72 BB 00 08      [ 2] 1360 	addw x,acc16
      0007E8 C3 00 1C         [ 2] 1361 	cpw x,txtend 
      0007EB 2A DF            [ 1] 1362 	jrpl warm_start
      0007ED CF 00 04         [ 2] 1363 	ldw basicptr,x ; start of next line  
      0007F0 E6 02            [ 1] 1364 	ld a,(2,x)
      0007F2 C7 00 03         [ 1] 1365 	ld count,a 
      0007F5 35 03 00 01      [ 1] 1366 	mov in,#3 ; skip first 3 bytes of line 
      0007F9 20 14            [ 2] 1367 	jra interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0007FB                       1368 4$: ; commande line mode 	
      0007FB 72 5F 00 01      [ 1] 1369 	clr in
      0007FF A6 0D            [ 1] 1370 	ld a,#CR 
      000801 CD 01 CB         [ 4] 1371 	call putc 
      000804 A6 3E            [ 1] 1372 	ld a,#'> 
      000806 CD 01 CB         [ 4] 1373 	call putc 
      000809 CD 0B 6C         [ 4] 1374 	call readln
      00080C CD 04 1A         [ 4] 1375 	call compile
      00080F                       1376 interp_loop:  
      00080F C6 00 01         [ 1] 1377 	ld a,in 
      000812 C1 00 03         [ 1] 1378 	cp a,count  
      000815 2A B8            [ 1] 1379 	jrpl interp
      000817 CD 08 3F         [ 4] 1380 	call next_token
      00081A A1 01            [ 1] 1381 	cp a,#TK_COLON 
      00081C 27 F1            [ 1] 1382 	jreq interp_loop 
      00081E A1 00            [ 1] 1383 	cp a,#TK_NONE 
                                   1384 ;	jreq interp 
      000820                       1385 1$:
      000820 A1 05            [ 1] 1386 	cp a,#TK_VAR
      000822 26 05            [ 1] 1387 	jrne 2$
      000824 CD 14 94         [ 4] 1388 	call let02  
      000827 20 E6            [ 2] 1389 	jra interp_loop 
      000829                       1390 2$:	
      000829 A1 02            [ 1] 1391 	cp a,#TK_ARRAY 
      00082B 26 08            [ 1] 1392 	jrne 3$
      00082D CD 12 D9         [ 4] 1393 	call get_array_element
      000830 CD 14 94         [ 4] 1394 	call let02 
      000833 20 DA            [ 2] 1395 	jra interp_loop 
      000835                       1396 3$:
      000835 A1 06            [ 1] 1397 	cp a,#TK_CMD
      000837 26 03            [ 1] 1398 	jrne 4$
      000839 FD               [ 4] 1399 	call (x) 
      00083A 20 D3            [ 2] 1400 	jra interp_loop 
      00083C                       1401 4$:	
      00083C CC 07 89         [ 2] 1402 	jp syntax_error 
                                   1403 
                                   1404 ;--------------------------
                                   1405 ; extract next token from
                                   1406 ; token list 
                                   1407 ; basicptr -> base address 
                                   1408 ; in  -> offset in list array 
                                   1409 ; output:
                                   1410 ;   A 		token attribute
                                   1411 ;   X 		token value if there is one
                                   1412 ;----------------------------------------
      00083F                       1413 next_token:
      00083F C6 00 01         [ 1] 1414 	ld a,in 
      000842 C0 00 03         [ 1] 1415 	sub a,count ; don't replace sub by cp.  
      000845 27 4C            [ 1] 1416 	jreq 9$
      000847 55 00 01 00 02   [ 1] 1417 	mov in.saved,in 
      00084C CE 00 04         [ 2] 1418 	ldw x,basicptr 
      00084F 72 D6 00 00      [ 4] 1419 	ld a,([in.w],x)
      000853 72 5C 00 01      [ 1] 1420 	inc in 
      000857 A1 02            [ 1] 1421 	cp a,#TK_ARRAY  
      000859 23 38            [ 2] 1422 	jrule 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00085B A1 03            [ 1] 1423 	cp a,#TK_CHAR
      00085D 26 0D            [ 1] 1424 	jrne 1$
      00085F 72 D6 00 00      [ 4] 1425 	ld a,([in.w],x)
      000863 72 5C 00 01      [ 1] 1426 	inc in
      000867 5F               [ 1] 1427 	clrw x 
      000868 97               [ 1] 1428 	ld xl,a 
      000869 A6 03            [ 1] 1429 	ld a,#TK_CHAR
      00086B 81               [ 4] 1430 	ret 
      00086C A1 0A            [ 1] 1431 1$:	cp a,#TK_QSTR 
      00086E 25 17            [ 1] 1432 	jrult 4$
      000870 26 21            [ 1] 1433 	jrne 9$
      000872 72 BB 00 00      [ 2] 1434 	addw x,in.w 
      000876 89               [ 2] 1435 	pushw x 
      000877 7D               [ 1] 1436 2$:	tnz (x)
      000878 27 03            [ 1] 1437 	jreq 3$
      00087A 5C               [ 2] 1438 	incw x 
      00087B 20 FA            [ 2] 1439 	jra 2$ 
      00087D 5C               [ 2] 1440 3$:	incw x 
      00087E 72 B0 00 04      [ 2] 1441     subw x,basicptr 
      000882 CF 00 00         [ 2] 1442 	ldw in.w,x 
      000885 85               [ 2] 1443 	popw x 
      000886 81               [ 4] 1444 	ret 
      000887 72 DE 00 00      [ 5] 1445 4$: ldw x,([in.w],x)
      00088B 72 5C 00 01      [ 1] 1446 	inc in 
      00088F 72 5C 00 01      [ 1] 1447 	inc in
      000893                       1448 9$: 
      000893 81               [ 4] 1449 	ret	
                                   1450 
                                   1451 
                                   1452 ;----------------------------------------
                                   1453 ;   DEBUG support functions
                                   1454 ;----------------------------------------
                           000001  1455 .if DEBUG 
                                   1456 
                                   1457 ;-------------------------------------
                                   1458 ; input:
                                   1459 ;    A    token ID
                                   1460 ;    X    token value 
                                   1461 ;    in.w  program counter position
                                   1462 ;------------------------------------
      000894                       1463 print_token_info:
      000894 88               [ 1] 1464 	push a 
      000895 89               [ 2] 1465 	pushw x 
      000896 A1 0F            [ 1] 1466 	cp a,#15 
      000898 22 03            [ 1] 1467 	jrugt 2$
      00089A CE 08 9E         [ 2] 1468 	ldw x,token_ptr0 
                                   1469 
      00089D 81               [ 4] 1470 2$:	ret
                                   1471 ; token type name pointer  
      00089E 08 D2 08 D7 08 D9 08  1472 token_ptr0: .word tok_none,tok_colon,tok_array,tok_char,tok_int,tok_var,tok_cmd
             DB 08 E0 08 E4 08 E8
      0008AC 08 EC 08 F1 08 FB 09  1473             .word tok_func,tok_cfunc,tok_const,tok_str,tok_lparen,tok_rparen
             01 09 08 09 0A
      0008B8 09 0C 09 0E           1474 			.word tok_comma,tok_sharp
                                   1475 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0008BC 09 10 09 12           1476 token_ptr1: .word tok_plus,tok_minus 
                                   1477 
      0008C0 09 14 09 16 09 18     1478 token_ptr2: .word tok_star, tok_slash, tok_pcent 
                                   1479 
      0008C6 09 1A 09 1C 09 1E 09  1480 token_ptr3: .word tok_gt, tok_equ, tok_ge, tok_lt, tok_le, tok_ne 
             21 09 23 09 26
                                   1481 
                                   1482 
                                   1483 ;token types 
      0008D2                       1484 tok_grp0: 
      0008D2 6E 6F 6E 65 00        1485 tok_none: .asciz "none"  ; 0
      0008D7 3A 00                 1486 tok_colon: .asciz ":"    ; 1
      0008D9 40 00                 1487 tok_array: .asciz "@"    ; 2
      0008DB 63 68 61 72 00        1488 tok_char:  .asciz "char" ; 3 
      0008E0 69 6E 74 00           1489 tok_int:   .asciz "int"  ; 4 
      0008E4 76 61 72 00           1490 tok_var:   .asciz "var"  ; 5
      0008E8 63 6D 64 00           1491 tok_cmd:   .asciz "cmd"  ; 6 
      0008EC 66 75 6E 63 00        1492 tok_func:  .asciz "func" ; 7 
      0008F1 63 68 61 72 20 66 75  1493 tok_cfunc: .asciz "char func" ; 8
             6E 63 00
      0008FB 63 6F 6E 73 74 00     1494 tok_const: .asciz "const"  ; 9
      000901 73 74 72 69 6E 67 00  1495 tok_str:   .asciz "string" ; 10
      000908 28 00                 1496 tok_lparen: .asciz "("  ; 11
      00090A 29 00                 1497 tok_rparen: .asciz ")" ; 12
      00090C 2C 00                 1498 tok_comma: .asciz ","  ; 13
      00090E 23 00                 1499 tok_sharp: .asciz "#"  ; 14 
      000910                       1500 tok_grp1: 
      000910 2B 00                 1501 tok_plus: .asciz "+"   ; 16
      000912 2D 00                 1502 tok_minus: .asciz "-"  ; 17
      000914                       1503 tok_grp2:
      000914 2A 00                 1504 tok_star: .asciz "*"   ; 32 
      000916 2F 00                 1505 tok_slash: .asciz "/"  ; 33 
      000918 25 00                 1506 tok_pcent: .asciz "%"  ; 34 
      00091A                       1507 tok_grp3:
      00091A 3E 00                 1508 tok_gt: .asciz ">"     ; 49
      00091C 3D 00                 1509 tok_equ: .asciz "="    ; 50
      00091E 3E 3D 00              1510 tok_ge: .asciz ">="    ; 51
      000921 3C 00                 1511 tok_lt: .asciz "<"     ; 52 
      000923 3C 3D 00              1512 tok_le: .asciz "<="    ; 53
      000926 3C 3E 00              1513 tok_ne: .asciz "<>"    ; 54
                                   1514 
                                   1515 
                                   1516 
                                   1517 ; turn LED on 
      000929                       1518 ledon:
      000929 72 1A 50 0A      [ 1] 1519     bset PC_ODR,#LED2_BIT
      00092D 81               [ 4] 1520     ret 
                                   1521 
                                   1522 ; turn LED off 
      00092E                       1523 ledoff:
      00092E 72 1B 50 0A      [ 1] 1524     bres PC_ODR,#LED2_BIT 
      000932 81               [ 4] 1525     ret 
                                   1526 
                                   1527 ; invert LED status 
      000933                       1528 ledtoggle:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000933 A6 20            [ 1] 1529     ld a,#LED2_MASK
      000935 C8 50 0A         [ 1] 1530     xor a,PC_ODR
      000938 C7 50 0A         [ 1] 1531     ld PC_ODR,a
      00093B 81               [ 4] 1532     ret 
                                   1533 
      00093C                       1534 left_paren:
      00093C A6 20            [ 1] 1535 	ld a,#SPACE 
      00093E CD 01 CB         [ 4] 1536 	call putc
      000941 A6 28            [ 1] 1537 	ld a,#'( 
      000943 CD 01 CB         [ 4] 1538 	call putc 	
      000946 81               [ 4] 1539 	ret 
                                   1540 
                                   1541 ;------------------------------
                                   1542 ; print 8 bit register 
                                   1543 ; input:
                                   1544 ;   X  point to register name 
                                   1545 ;   A  register value to print 
                                   1546 ; output:
                                   1547 ;   none
                                   1548 ;------------------------------- 
      000947                       1549 prt_reg8:
      000947 88               [ 1] 1550 	push a 
      000948 CD 01 DE         [ 4] 1551 	call puts 
      00094B 7B 01            [ 1] 1552 	ld a,(1,sp) 
      00094D C7 00 09         [ 1] 1553 	ld acc8,a 
      000950 5F               [ 1] 1554 	clrw x 
      000951 97               [ 1] 1555 	ld xl,a 
      000952 35 10 00 06      [ 1] 1556 	mov base,#16
      000956 CD 0A 7E         [ 4] 1557 	call print_int 
      000959 CD 09 3C         [ 4] 1558 	call left_paren 
      00095C 84               [ 1] 1559 	pop a 
      00095D 5F               [ 1] 1560 	clrw x 
      00095E 97               [ 1] 1561 	ld xl,a 
      00095F 35 0A 00 06      [ 1] 1562 	mov base,#10 
      000963 CD 0A 7E         [ 4] 1563 	call print_int  
      000966 A6 29            [ 1] 1564 	ld a,#') 
      000968 CD 01 CB         [ 4] 1565 	call putc
      00096B 81               [ 4] 1566 	ret
                                   1567 
                                   1568 ;--------------------------------
                                   1569 ; print 16 bits register 
                                   1570 ; input:
                                   1571 ;   X   point register name 
                                   1572 ;   Y   register value to print 
                                   1573 ; output:
                                   1574 ;  none
                                   1575 ;--------------------------------
      00096C                       1576 prt_reg16: 
      00096C 90 89            [ 2] 1577 	pushw y 
      00096E CD 01 DE         [ 4] 1578 	call puts 
      000971 1E 01            [ 2] 1579 	ldw x,(1,sp) 
      000973 35 10 00 06      [ 1] 1580 	mov base,#16 
      000977 CD 0A 7E         [ 4] 1581 	call print_int  
      00097A CD 09 3C         [ 4] 1582 	call left_paren 
      00097D 85               [ 2] 1583 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00097E 35 0A 00 06      [ 1] 1584 	mov base,#10 
      000982 CD 0A 7E         [ 4] 1585 	call print_int  
      000985 A6 29            [ 1] 1586 	ld a,#') 
      000987 CD 01 CB         [ 4] 1587 	call putc
      00098A 81               [ 4] 1588 	ret 
                                   1589 
                                   1590 ;------------------------------------
                                   1591 ; print registers contents saved on
                                   1592 ; stack by trap interrupt.
                                   1593 ;------------------------------------
      00098B                       1594 print_registers:
      00098B AE 09 DE         [ 2] 1595 	ldw x,#STATES
      00098E CD 01 DE         [ 4] 1596 	call puts
                                   1597 ; print EPC 
      000991 AE 0A 1B         [ 2] 1598 	ldw x, #REG_EPC
      000994 CD 01 DE         [ 4] 1599 	call puts 
      000997 7B 0B            [ 1] 1600 	ld a, (11,sp)
      000999 C7 00 09         [ 1] 1601 	ld acc8,a 
      00099C 7B 0A            [ 1] 1602 	ld a, (10,sp) 
      00099E C7 00 08         [ 1] 1603 	ld acc16,a 
      0009A1 7B 09            [ 1] 1604 	ld a,(9,sp) 
      0009A3 C7 00 07         [ 1] 1605 	ld acc24,a
      0009A6 5F               [ 1] 1606 	clrw x  
      0009A7 A6 10            [ 1] 1607 	ld a,#16
      0009A9 CD 0A 36         [ 4] 1608 	call prti24  
                                   1609 ; print X
      0009AC AE 0A 24         [ 2] 1610 	ldw x,#REG_X
      0009AF 16 05            [ 2] 1611 	ldw y,(5,sp)
      0009B1 CD 09 6C         [ 4] 1612 	call prt_reg16  
                                   1613 ; print Y 
      0009B4 AE 0A 20         [ 2] 1614 	ldw x,#REG_Y
      0009B7 16 07            [ 2] 1615 	ldw y, (7,sp)
      0009B9 CD 09 6C         [ 4] 1616 	call prt_reg16  
                                   1617 ; print A 
      0009BC AE 0A 28         [ 2] 1618 	ldw x,#REG_A
      0009BF 7B 04            [ 1] 1619 	ld a, (4,sp) 
      0009C1 CD 09 47         [ 4] 1620 	call prt_reg8
                                   1621 ; print CC 
      0009C4 AE 0A 2C         [ 2] 1622 	ldw x,#REG_CC 
      0009C7 7B 03            [ 1] 1623 	ld a, (3,sp) 
      0009C9 CD 09 47         [ 4] 1624 	call prt_reg8 
                                   1625 ; print SP 
      0009CC AE 0A 31         [ 2] 1626 	ldw x,#REG_SP
      0009CF 90 96            [ 1] 1627 	ldw y,sp 
      0009D1 72 A9 00 0C      [ 2] 1628 	addw y,#12
      0009D5 CD 09 6C         [ 4] 1629 	call prt_reg16  
      0009D8 A6 0A            [ 1] 1630 	ld a,#'\n' 
      0009DA CD 01 CB         [ 4] 1631 	call putc
      0009DD 81               [ 4] 1632 	ret
                                   1633 
      0009DE 0A 52 65 67 69 73 74  1634 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000A1B 45 50 43 3A 00        1635 REG_EPC: .asciz "EPC:"
      000A20 0A 59 3A 00           1636 REG_Y:   .asciz "\nY:" 
      000A24 0A 58 3A 00           1637 REG_X:   .asciz "\nX:"
      000A28 0A 41 3A 00           1638 REG_A:   .asciz "\nA:" 
      000A2C 0A 43 43 3A 00        1639 REG_CC:  .asciz "\nCC:"
      000A31 0A 53 50 3A 00        1640 REG_SP:  .asciz "\nSP:"
                                   1641 .endif ; DEBUG 
                                   1642 
                                   1643 ;------------------------------------
                                   1644 ; print integer in acc24 
                                   1645 ; input:
                                   1646 ;	acc24 		integer to print 
                                   1647 ;	A 			numerical base for conversion 
                                   1648 ;               if bit 7 is set add a space at print end.
                                   1649 ;   XL 			field width, 0 -> no fill.
                                   1650 ;  output:
                                   1651 ;    none 
                                   1652 ;------------------------------------
                           000001  1653 	WIDTH = 1
                           000002  1654 	BASE = 2
                           000003  1655 	ADD_SPACE=3 ; add a space after number 
                           000003  1656 	VSIZE = 3
      000A36                       1657 prti24:
      000A36                       1658 	_vars VSIZE 
      000A36 52 03            [ 2]    1     sub sp,#VSIZE 
      000A38 0F 03            [ 1] 1659 	clr (ADD_SPACE,sp)
      000A3A A5 80            [ 1] 1660 	bcp a,#0x80 
      000A3C 27 02            [ 1] 1661 	jreq 0$ 
      000A3E 03 03            [ 1] 1662 	cpl (ADD_SPACE,sp)
      000A40 A4 1F            [ 1] 1663 0$:	and a,#31 
      000A42 6B 02            [ 1] 1664 	ld (BASE,sp),a
      000A44 9F               [ 1] 1665 	ld a,xl
      000A45 6B 01            [ 1] 1666 	ld (WIDTH,sp),a 
      000A47 7B 02            [ 1] 1667 	ld a, (BASE,sp)  
      000A49 CD 0A DA         [ 4] 1668     call itoa  ; conversion entier en  .asciz
      000A4C 7B 01            [ 1] 1669 1$: ld a,(WIDTH,sp)
      000A4E 27 1F            [ 1] 1670 	jreq 4$
      000A50 C7 00 09         [ 1] 1671 	ld acc8,a 
      000A53 89               [ 2] 1672 	pushw x 
      000A54 CD 02 A0         [ 4] 1673 	call strlen 
      000A57 9F               [ 1] 1674 	ld a,xl 
      000A58 85               [ 2] 1675 	popw x 
      000A59 31 00 09         [ 3] 1676 	exg a,acc8 
      000A5C C0 00 09         [ 1] 1677 	sub a,acc8 
      000A5F 2B 0E            [ 1] 1678 	jrmi 4$
      000A61 6B 01            [ 1] 1679 	ld (WIDTH,sp),a 
      000A63 A6 20            [ 1] 1680 	ld  a,#SPACE
      000A65 0D 01            [ 1] 1681 3$: tnz (WIDTH,sp)
      000A67 27 06            [ 1] 1682 	jreq 4$
      000A69 5A               [ 2] 1683 	decw x 
      000A6A F7               [ 1] 1684 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A6B 0A 01            [ 1] 1685 	dec (WIDTH,sp) 
      000A6D 20 F6            [ 2] 1686 	jra 3$
      000A6F                       1687 4$: 
      000A6F CD 01 DE         [ 4] 1688 	call puts 
      000A72 0D 03            [ 1] 1689 	tnz (ADD_SPACE,sp)
      000A74 27 05            [ 1] 1690 	jreq 5$
      000A76 A6 20            [ 1] 1691     ld a,#SPACE 
      000A78 CD 01 CB         [ 4] 1692 	call putc 
      000A7B                       1693 5$: _drop VSIZE 
      000A7B 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A7D 81               [ 4] 1694     ret	
                                   1695 
                                   1696 ;-----------------------------------
                                   1697 ; print a 16 bit integer 
                                   1698 ; using variable 'base' as conversion
                                   1699 ; format.
                                   1700 ; input:
                                   1701 ;   X       integer to print 
                                   1702 ;   base    conversion base 
                                   1703 ; output:
                                   1704 ;   none 
                                   1705 ;-----------------------------------
                           000001  1706 	SIGN=1
                           000001  1707 	VSIZE=1
      000A7E                       1708 print_int: 
      000A7E                       1709 	_vars VSIZE 
      000A7E 52 01            [ 2]    1     sub sp,#VSIZE 
      000A80 0F 01            [ 1] 1710 	clr (SIGN,sp)
      000A82 90 AE 17 3F      [ 2] 1711 	ldw y,#pad+PAD_SIZE-1 
      000A86 90 7F            [ 1] 1712 	clr (y)
      000A88 C6 00 06         [ 1] 1713 	ld a,base  
      000A8B A1 0A            [ 1] 1714 	cp a,#10 
      000A8D 26 06            [ 1] 1715 	jrne 1$ 
      000A8F 5D               [ 2] 1716 	tnzw x 
      000A90 2A 03            [ 1] 1717 	jrpl 1$ 
      000A92 03 01            [ 1] 1718 	cpl (SIGN,sp)
      000A94 50               [ 2] 1719 	negw x 	 
      000A95                       1720 1$:	
      000A95 C6 00 06         [ 1] 1721 	ld a,base 
      000A98 62               [ 2] 1722 	div x,a 
      000A99 AB 30            [ 1] 1723 	add a,#'0 
      000A9B A1 3A            [ 1] 1724 	cp a,#'9+1 
      000A9D 2B 02            [ 1] 1725 	jrmi 2$ 
      000A9F AB 07            [ 1] 1726 	add a,#7 
      000AA1 90 5A            [ 2] 1727 2$: decw y 
      000AA3 90 F7            [ 1] 1728 	ld (y),a 
      000AA5 5D               [ 2] 1729 	tnzw x 
      000AA6 26 ED            [ 1] 1730 	jrne 1$ 
      000AA8 A6 10            [ 1] 1731 	ld a,#16 
      000AAA C1 00 06         [ 1] 1732 	cp a,base 
      000AAD 26 08            [ 1] 1733 	jrne 3$
      000AAF A6 24            [ 1] 1734 	ld a,#'$
      000AB1 90 5A            [ 2] 1735 	decw y  
      000AB3 90 F7            [ 1] 1736 	ld (y),a
      000AB5 20 0A            [ 2] 1737 	jra 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000AB7 0D 01            [ 1] 1738 3$: tnz (SIGN,sp)
      000AB9 27 06            [ 1] 1739 	jreq 9$ 
      000ABB A6 2D            [ 1] 1740 	ld a,#'-
      000ABD 90 5A            [ 2] 1741 	decw y  
      000ABF 90 F7            [ 1] 1742 	ld (y),a
      000AC1                       1743 9$:	
      000AC1 93               [ 1] 1744 	ldw x,y 
      000AC2 1D 17 3F         [ 2] 1745 	subw x,#pad+PAD_SIZE-1 
      000AC5 50               [ 2] 1746 	negw x  
      000AC6                       1747 10$:
      000AC6 90 5A            [ 2] 1748 	decw y 
      000AC8 A6 20            [ 1] 1749 	ld a,#SPACE 
      000ACA 90 F7            [ 1] 1750 	ld (y),a
      000ACC 5C               [ 2] 1751 	incw x 
      000ACD 9F               [ 1] 1752 	ld a,xl 
      000ACE C1 00 22         [ 1] 1753 	cp a,tab_width
      000AD1 2B F3            [ 1] 1754 	jrmi 10$ 
      000AD3                       1755 12$:
      000AD3 93               [ 1] 1756     ldw x,y 
      000AD4 CD 01 DE         [ 4] 1757 	call puts  
      000AD7                       1758 	_drop VSIZE 
      000AD7 5B 01            [ 2]    1     addw sp,#VSIZE 
      000AD9 81               [ 4] 1759 	ret 
                                   1760 
                                   1761 ;------------------------------------
                                   1762 ; convert integer in acc24 to string
                                   1763 ; input:
                                   1764 ;   A	  	base
                                   1765 ;	acc24	integer to convert
                                   1766 ; output:
                                   1767 ;   X  		pointer to string
                                   1768 ;------------------------------------
                           000001  1769 	SIGN=1  ; integer sign 
                           000002  1770 	BASE=2  ; numeric base 
                           000002  1771 	VSIZE=2  ;locals size
      000ADA                       1772 itoa:
      000ADA 52 02            [ 2] 1773 	sub sp,#VSIZE
      000ADC 6B 02            [ 1] 1774 	ld (BASE,sp), a  ; base
      000ADE 0F 01            [ 1] 1775 	clr (SIGN,sp)    ; sign
      000AE0 A1 0A            [ 1] 1776 	cp a,#10
      000AE2 26 0A            [ 1] 1777 	jrne 1$
                                   1778 	; base 10 string display with negative sign if bit 23==1
      000AE4 72 0F 00 07 05   [ 2] 1779 	btjf acc24,#7,1$
      000AE9 03 01            [ 1] 1780 	cpl (SIGN,sp)
      000AEB CD 0B 49         [ 4] 1781 	call neg_acc24
      000AEE                       1782 1$:
                                   1783 ; initialize string pointer 
      000AEE AE 17 3F         [ 2] 1784 	ldw x,#pad+PAD_SIZE-1
      000AF1 7F               [ 1] 1785 	clr (x)
      000AF2                       1786 itoa_loop:
      000AF2 7B 02            [ 1] 1787     ld a,(BASE,sp)
      000AF4 CD 0B 21         [ 4] 1788     call divu24_8 ; acc24/A 
      000AF7 AB 30            [ 1] 1789     add a,#'0  ; remainder of division
      000AF9 A1 3A            [ 1] 1790     cp a,#'9+1
      000AFB 2B 02            [ 1] 1791     jrmi 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AFD AB 07            [ 1] 1792     add a,#7 
      000AFF 5A               [ 2] 1793 2$: decw x
      000B00 F7               [ 1] 1794     ld (x),a
                                   1795 	; if acc24==0 conversion done
      000B01 C6 00 07         [ 1] 1796 	ld a,acc24
      000B04 CA 00 08         [ 1] 1797 	or a,acc16
      000B07 CA 00 09         [ 1] 1798 	or a,acc8
      000B0A 26 E6            [ 1] 1799     jrne itoa_loop
                                   1800 	;conversion done, next add '$' or '-' as required
      000B0C 7B 02            [ 1] 1801 	ld a,(BASE,sp)
      000B0E A1 10            [ 1] 1802 	cp a,#16
      000B10 27 08            [ 1] 1803 	jreq 8$
      000B12 7B 01            [ 1] 1804 	ld a,(SIGN,sp)
      000B14 27 08            [ 1] 1805     jreq 10$
      000B16 A6 2D            [ 1] 1806     ld a,#'-
      000B18 20 02            [ 2] 1807 	jra 9$ 
      000B1A A6 24            [ 1] 1808 8$: ld a,#'$ 
      000B1C 5A               [ 2] 1809 9$: decw x
      000B1D F7               [ 1] 1810     ld (x),a
      000B1E                       1811 10$:
      000B1E 5B 02            [ 2] 1812 	addw sp,#VSIZE
      000B20 81               [ 4] 1813 	ret
                                   1814 
                                   1815 ;-------------------------------------
                                   1816 ; divide uint24_t by uint8_t
                                   1817 ; used to convert uint24_t to string
                                   1818 ; input:
                                   1819 ;	acc24	dividend
                                   1820 ;   A 		divisor
                                   1821 ; output:
                                   1822 ;   acc24	quotient
                                   1823 ;   A		remainder
                                   1824 ;------------------------------------- 
                                   1825 ; offset  on sp of arguments and locals
                           000001  1826 	U8   = 1   ; divisor on stack
                           000001  1827 	VSIZE =1
      000B21                       1828 divu24_8:
      000B21 89               [ 2] 1829 	pushw x ; save x
      000B22 88               [ 1] 1830 	push a 
                                   1831 	; ld dividend UU:MM bytes in X
      000B23 C6 00 07         [ 1] 1832 	ld a, acc24
      000B26 95               [ 1] 1833 	ld xh,a
      000B27 C6 00 08         [ 1] 1834 	ld a,acc24+1
      000B2A 97               [ 1] 1835 	ld xl,a
      000B2B 7B 01            [ 1] 1836 	ld a,(U8,SP) ; divisor
      000B2D 62               [ 2] 1837 	div x,a ; UU:MM/U8
      000B2E 88               [ 1] 1838 	push a  ;save remainder
      000B2F 9E               [ 1] 1839 	ld a,xh
      000B30 C7 00 07         [ 1] 1840 	ld acc24,a
      000B33 9F               [ 1] 1841 	ld a,xl
      000B34 C7 00 08         [ 1] 1842 	ld acc24+1,a
      000B37 84               [ 1] 1843 	pop a
      000B38 95               [ 1] 1844 	ld xh,a
      000B39 C6 00 09         [ 1] 1845 	ld a,acc24+2
      000B3C 97               [ 1] 1846 	ld xl,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000B3D 7B 01            [ 1] 1847 	ld a,(U8,sp) ; divisor
      000B3F 62               [ 2] 1848 	div x,a  ; R:LL/U8
      000B40 6B 01            [ 1] 1849 	ld (U8,sp),a ; save remainder
      000B42 9F               [ 1] 1850 	ld a,xl
      000B43 C7 00 09         [ 1] 1851 	ld acc24+2,a
      000B46 84               [ 1] 1852 	pop a
      000B47 85               [ 2] 1853 	popw x
      000B48 81               [ 4] 1854 	ret
                                   1855 
                                   1856 ;------------------------------------
                                   1857 ;  two's complement acc24
                                   1858 ;  input:
                                   1859 ;		acc24 variable
                                   1860 ;  output:
                                   1861 ;		acc24 variable
                                   1862 ;-------------------------------------
      000B49                       1863 neg_acc24:
      000B49 72 53 00 09      [ 1] 1864 	cpl acc24+2
      000B4D 72 53 00 08      [ 1] 1865 	cpl acc24+1
      000B51 72 53 00 07      [ 1] 1866 	cpl acc24
      000B55 A6 01            [ 1] 1867 	ld a,#1
      000B57 CB 00 09         [ 1] 1868 	add a,acc24+2
      000B5A C7 00 09         [ 1] 1869 	ld acc24+2,a
      000B5D 4F               [ 1] 1870 	clr a
      000B5E C9 00 08         [ 1] 1871 	adc a,acc24+1
      000B61 C7 00 08         [ 1] 1872 	ld acc24+1,a 
      000B64 4F               [ 1] 1873 	clr a 
      000B65 C9 00 07         [ 1] 1874 	adc a,acc24 
      000B68 C7 00 07         [ 1] 1875 	ld acc24,a 
      000B6B 81               [ 4] 1876 	ret
                                   1877 
                                   1878 
                                   1879 ;------------------------------------
                                   1880 ; read a line of text from terminal
                                   1881 ; input:
                                   1882 ;	none
                                   1883 ; local variable on stack:
                                   1884 ;	LL  line length
                                   1885 ;   RXCHAR last received chaaracte 
                                   1886 ; output:
                                   1887 ;   text in tib  buffer
                                   1888 ;------------------------------------
                                   1889 	; local variables
                           000001  1890 	LL_HB=1
                           000001  1891 	RXCHAR = 1 ; last char received
                           000002  1892 	LL = 2  ; accepted line length
                           000002  1893 	VSIZE=2 
      000B6C                       1894 readln:
      000B6C 5F               [ 1] 1895 	clrw x 
      000B6D 89               [ 2] 1896 	pushw x 
      000B6E 90 AE 16 C8      [ 2] 1897  	ldw y,#tib ; input buffer
      000B72                       1898 readln_loop:
      000B72 CD 01 D4         [ 4] 1899 	call getc
      000B75 6B 01            [ 1] 1900 	ld (RXCHAR,sp),a
      000B77 A1 0D            [ 1] 1901 	cp a,#CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B79 26 03            [ 1] 1902 	jrne 1$
      000B7B CC 0B E7         [ 2] 1903 	jp readln_quit
      000B7E A1 0A            [ 1] 1904 1$:	cp a,#NL
      000B80 27 65            [ 1] 1905 	jreq readln_quit
      000B82 A1 08            [ 1] 1906 	cp a,#BSP
      000B84 27 3D            [ 1] 1907 	jreq del_back
      000B86 A1 04            [ 1] 1908 	cp a,#CTRL_D
      000B88 27 2A            [ 1] 1909 	jreq del_ln
      000B8A A1 12            [ 1] 1910 	cp a,#CTRL_R 
      000B8C 27 06            [ 1] 1911 	jreq reprint 
                                   1912 ;	cp a,#'[
                                   1913 ;	jreq ansi_seq
      000B8E                       1914 final_test:
      000B8E A1 20            [ 1] 1915 	cp a,#SPACE
      000B90 2A 40            [ 1] 1916 	jrpl accept_char
      000B92 20 DE            [ 2] 1917 	jra readln_loop
      000B94                       1918 ansi_seq:
                                   1919 ;	call getc
                                   1920 ;	cp a,#'C 
                                   1921 ;	jreq rigth_arrow
                                   1922 ;	cp a,#'D 
                                   1923 ;	jreq left_arrow 
                                   1924 ;	jra final_test
      000B94                       1925 right_arrow:
                                   1926 ;	ld a,#BSP 
                                   1927 ;	call putc 
                                   1928 ;	jra realn_loop 
      000B94                       1929 left_arrow:
                                   1930 
                                   1931 ;	jra readln_loop
      000B94                       1932 reprint: 
      000B94 0D 02            [ 1] 1933 	tnz (LL,sp)
      000B96 26 DA            [ 1] 1934 	jrne readln_loop
      000B98 AE 16 C8         [ 2] 1935 	ldw x,#tib 
      000B9B CD 02 A0         [ 4] 1936 	call strlen 
      000B9E 90 AE 16 C8      [ 2] 1937 	ldw y,#tib 
      000BA2 9F               [ 1] 1938 	ld a,xl
      000BA3 27 CD            [ 1] 1939 	jreq readln_loop
      000BA5 6B 02            [ 1] 1940 	ld (LL,sp),a 
      000BA7 AE 16 C8         [ 2] 1941 	ldw x,#tib 
      000BAA CD 01 DE         [ 4] 1942 	call puts
      000BAD 0F 01            [ 1] 1943 	clr (LL_HB,sp)
      000BAF 72 F9 01         [ 2] 1944 	addw y,(LL_HB,sp)
      000BB2 20 BE            [ 2] 1945 	jra readln_loop 
      000BB4                       1946 del_ln:
      000BB4 7B 02            [ 1] 1947 	ld a,(LL,sp)
      000BB6 CD 01 F8         [ 4] 1948 	call delete
      000BB9 90 AE 16 C8      [ 2] 1949 	ldw y,#tib
      000BBD 90 7F            [ 1] 1950 	clr (y)
      000BBF 0F 02            [ 1] 1951 	clr (LL,sp)
      000BC1 20 AF            [ 2] 1952 	jra readln_loop
      000BC3                       1953 del_back:
      000BC3 0D 02            [ 1] 1954     tnz (LL,sp)
      000BC5 27 AB            [ 1] 1955     jreq readln_loop
      000BC7 0A 02            [ 1] 1956     dec (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BC9 90 5A            [ 2] 1957     decw y
      000BCB 90 7F            [ 1] 1958     clr  (y)
      000BCD CD 01 E8         [ 4] 1959     call bksp 
      000BD0 20 A0            [ 2] 1960     jra readln_loop	
      000BD2                       1961 accept_char:
      000BD2 A6 4F            [ 1] 1962 	ld a,#TIB_SIZE-1
      000BD4 11 02            [ 1] 1963 	cp a, (LL,sp)
      000BD6 27 9A            [ 1] 1964 	jreq readln_loop
      000BD8 7B 01            [ 1] 1965 	ld a,(RXCHAR,sp)
      000BDA 90 F7            [ 1] 1966 	ld (y),a
      000BDC 0C 02            [ 1] 1967 	inc (LL,sp)
      000BDE 90 5C            [ 2] 1968 	incw y
      000BE0 90 7F            [ 1] 1969 	clr (y)
      000BE2 CD 01 CB         [ 4] 1970 	call putc 
      000BE5 20 8B            [ 2] 1971 	jra readln_loop
      000BE7                       1972 readln_quit:
      000BE7 90 7F            [ 1] 1973 	clr (y)
      000BE9 7B 02            [ 1] 1974 	ld a,(LL,sp)
      000BEB C7 00 03         [ 1] 1975 	ld count,a 
      000BEE                       1976 	_drop VSIZE 
      000BEE 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BF0 A6 0D            [ 1] 1977 	ld a,#CR
      000BF2 CD 01 CB         [ 4] 1978 	call putc
      000BF5 81               [ 4] 1979 	ret
                                   1980 
                           000001  1981 .if DEBUG 	
                                   1982 ;----------------------------
                                   1983 ; command interface
                                   1984 ; only 3 commands:
                                   1985 ;  'q' to resume application
                                   1986 ;  'p [addr]' to print memory values 
                                   1987 ;  's addr' to print string 
                                   1988 ;----------------------------
                                   1989 ;local variable 
                           000001  1990 	PSIZE=1
                           000001  1991 	VSIZE=1 
      000BF6                       1992 cmd_itf:
      000BF6 52 01            [ 2] 1993 	sub sp,#VSIZE 
      000BF8 72 5F 00 12      [ 1] 1994 	clr farptr 
      000BFC 72 5F 00 13      [ 1] 1995 	clr farptr+1 
      000C00 72 5F 00 14      [ 1] 1996 	clr farptr+2  
      000C04                       1997 repl:
      000C04 A6 0D            [ 1] 1998 	ld a,#CR 
      000C06 CD 01 CB         [ 4] 1999 	call putc 
      000C09 A6 3F            [ 1] 2000 	ld a,#'? 
      000C0B CD 01 CB         [ 4] 2001 	call putc
      000C0E 72 5F 00 00      [ 1] 2002 	clr in.w 
      000C12 72 5F 00 01      [ 1] 2003 	clr in 
      000C16 CD 0B 6C         [ 4] 2004 	call readln
      000C19 90 AE 16 C8      [ 2] 2005 	ldw y,#tib  
      000C1D 90 F6            [ 1] 2006 	ld a,(y)
      000C1F 27 E3            [ 1] 2007 	jreq repl  
      000C21 72 5C 00 01      [ 1] 2008 	inc in 
      000C25 CD 0F A6         [ 4] 2009 	call to_upper 
      000C28 A1 51            [ 1] 2010 	cp a,#'Q 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000C2A 26 17            [ 1] 2011 	jrne test_p
      000C2C                       2012 repl_exit:
      000C2C 72 5F 16 C8      [ 1] 2013 	clr tib 
      000C30 72 5F 00 03      [ 1] 2014 	clr count 
      000C34 72 5F 00 01      [ 1] 2015 	clr in 
      000C38                       2016 	_drop #VSIZE 	
      000C38 5B 01            [ 2]    1     addw sp,##VSIZE 
      000C3A 81               [ 4] 2017 	ret  
      000C3B                       2018 invalid:
      000C3B AE 0C B9         [ 2] 2019 	ldw x,#invalid_cmd 
      000C3E CD 01 DE         [ 4] 2020 	call puts 
      000C41 20 C1            [ 2] 2021 	jra repl 
      000C43                       2022 test_p:	
      000C43 A1 50            [ 1] 2023     cp a,#'P 
      000C45 27 11            [ 1] 2024 	jreq mem_peek
      000C47 A1 53            [ 1] 2025     cp a,#'S 
      000C49 26 F0            [ 1] 2026 	jrne invalid 
      000C4B                       2027 print_string:	
      000C4B CD 0D E5         [ 4] 2028 	call get_token
      000C4E A1 04            [ 1] 2029 	cp a,#TK_INTGR 
      000C50 26 E9            [ 1] 2030 	jrne invalid 
      000C52 CD 01 DE         [ 4] 2031 	call puts
      000C55 CC 0C 04         [ 2] 2032 	jp repl 	
      000C58                       2033 mem_peek:
      000C58 A6 20            [ 1] 2034 	ld a,#SPACE 
      000C5A CD 10 5E         [ 4] 2035 	call skip  	 
      000C5D 72 B9 00 00      [ 2] 2036 	addw y,in.w 
      000C61 AE 17 18         [ 2] 2037 	ldw x,#pad 
      000C64 CD 02 BE         [ 4] 2038 	call strcpy
      000C67 CD 0F B2         [ 4] 2039 	call atoi24 	
      000C6A C6 00 07         [ 1] 2040 	ld a, acc24 
      000C6D CA 00 08         [ 1] 2041 	or a,acc16 
      000C70 CA 00 09         [ 1] 2042 	or a,acc8 
      000C73 26 02            [ 1] 2043 	jrne 1$ 
      000C75 20 0C            [ 2] 2044 	jra peek_byte  
      000C77 CE 00 07         [ 2] 2045 1$:	ldw x,acc24 
      000C7A CF 00 12         [ 2] 2046 	ldw farptr,x 
      000C7D C6 00 09         [ 1] 2047 	ld a,acc8 
      000C80 C7 00 14         [ 1] 2048 	ld farptr+2,a 
      000C83                       2049 peek_byte:
      000C83 CD 0C C8         [ 4] 2050 	call print_farptr 
      000C86 A6 08            [ 1] 2051 	ld a,#8 
      000C88 6B 01            [ 1] 2052 	ld (PSIZE,sp),a 
      000C8A 5F               [ 1] 2053 	clrw x 
      000C8B CD 0C E3         [ 4] 2054 1$:	call fetchc  
      000C8E 89               [ 2] 2055 	pushw x 
      000C8F C7 00 09         [ 1] 2056 	ld acc8,a 
      000C92 5F               [ 1] 2057 	clrw x 
      000C93 CF 00 07         [ 2] 2058 	ldw acc24,x 
      000C96 A6 90            [ 1] 2059 	ld a,#16+128
      000C98 CD 0A 36         [ 4] 2060 	call prti24
      000C9B 85               [ 2] 2061 	popw x 
      000C9C 0A 01            [ 1] 2062 	dec (PSIZE,sp)
      000C9E 26 EB            [ 1] 2063 	jrne 1$ 
      000CA0 A6 08            [ 1] 2064 	ld a,#8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000CA2 CB 00 14         [ 1] 2065 	add a,farptr+2 
      000CA5 C7 00 14         [ 1] 2066 	ld farptr+2,a
      000CA8 4F               [ 1] 2067 	clr a 
      000CA9 C9 00 13         [ 1] 2068 	adc a,farptr+1 
      000CAC C7 00 13         [ 1] 2069 	ld farptr+1,a 
      000CAF 4F               [ 1] 2070 	clr a 
      000CB0 C9 00 12         [ 1] 2071 	adc a,farptr 
      000CB3 C7 00 12         [ 1] 2072 	ld farptr,a 
      000CB6 CC 0C 04         [ 2] 2073 	jp repl  
                                   2074 
      000CB9 6E 6F 74 20 61 20 63  2075 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   2076 
                                   2077 ;----------------------------
                                   2078 ; display farptr address
                                   2079 ;----------------------------
      000CC8                       2080 print_farptr:
      000CC8 C6 00 14         [ 1] 2081 	ld a ,farptr+2 
      000CCB C7 00 09         [ 1] 2082 	ld acc8,a 
      000CCE CE 00 12         [ 2] 2083 	ldw x,farptr 
      000CD1 CF 00 07         [ 2] 2084 	ldw acc24,x 
      000CD4 5F               [ 1] 2085 	clrw x 
      000CD5 A6 10            [ 1] 2086 	ld a,#16 
      000CD7 CD 0A 36         [ 4] 2087 	call prti24
      000CDA A6 20            [ 1] 2088 	ld a,#SPACE 
      000CDC CD 01 CB         [ 4] 2089 	call putc 
      000CDF CD 01 CB         [ 4] 2090 	call putc 
      000CE2 81               [ 4] 2091 	ret
                                   2092 
                                   2093 ;------------------------------------
                                   2094 ; get byte at address farptr[X]
                                   2095 ; input:
                                   2096 ;	 farptr   address to peek
                                   2097 ;    X		  farptr index 	
                                   2098 ; output:
                                   2099 ;	 A 		  byte from memory  
                                   2100 ;    x		  incremented by 1
                                   2101 ;------------------------------------
      000CE3                       2102 fetchc: ; @C
      000CE3 92 AF 00 12      [ 5] 2103 	ldf a,([farptr],x)
      000CE7 5C               [ 2] 2104 	incw x
      000CE8 81               [ 4] 2105 	ret
                                   2106 
                                   2107 
                                   2108 ;------------------------------------
                                   2109 ; expect a number from command line 
                                   2110 ; next argument
                                   2111 ;  input:
                                   2112 ;	  none
                                   2113 ;  output:
                                   2114 ;    acc24   int24_t 
                                   2115 ;------------------------------------
      000CE9                       2116 number::
      000CE9 CD 0D E5         [ 4] 2117 	call get_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000CEC CD 0F B2         [ 4] 2118 	call atoi24
      000CEF 81               [ 4] 2119 	ret
                                   2120 .endif ; DEBUG 
                                   2121 
                                   2122 ;------------------------------------
                                   2123 ; parse quoted string 
                                   2124 ; input:
                                   2125 ;   Y 	pointer to tib 
                                   2126 ;   X   pointer to pad
                                   2127 ; output:
                                   2128 ;	pad   parsed string
                                   2129 ;   TOS  char* to pad  
                                   2130 ;------------------------------------
                           000001  2131 	PREV = 1
                           000002  2132 	CURR =2 
                           000002  2133 	VSIZE=2 
      000CF0                       2134 parse_quote: ; { -- addr }
      000CF0                       2135 	_vars VSIZE 
      000CF0 52 02            [ 2]    1     sub sp,#VSIZE 
      000CF2 4F               [ 1] 2136 	clr a
      000CF3 6B 01            [ 1] 2137 1$:	ld (PREV,sp),a 
      000CF5 72 5C 00 01      [ 1] 2138 2$:	inc in
      000CF9 91 D6 00         [ 4] 2139 	ld a,([in.w],y)
      000CFC 27 24            [ 1] 2140 	jreq 6$
      000CFE 6B 02            [ 1] 2141 	ld (CURR,sp),a 
      000D00 A6 5C            [ 1] 2142 	ld a,#'\
      000D02 11 01            [ 1] 2143 	cp a, (PREV,sp)
      000D04 26 0A            [ 1] 2144 	jrne 3$
      000D06 0F 01            [ 1] 2145 	clr (PREV,sp)
      000D08 7B 02            [ 1] 2146 	ld a,(CURR,sp)
      000D0A AD 1F            [ 4] 2147 	callr convert_escape
      000D0C F7               [ 1] 2148 	ld (x),a 
      000D0D 5C               [ 2] 2149 	incw x 
      000D0E 20 E5            [ 2] 2150 	jra 2$
      000D10                       2151 3$:
      000D10 7B 02            [ 1] 2152 	ld a,(CURR,sp)
      000D12 A1 5C            [ 1] 2153 	cp a,#'\'
      000D14 27 DD            [ 1] 2154 	jreq 1$
      000D16 A1 22            [ 1] 2155 	cp a,#'"
      000D18 27 04            [ 1] 2156 	jreq 5$ 
      000D1A F7               [ 1] 2157 	ld (x),a 
      000D1B 5C               [ 2] 2158 	incw x 
      000D1C 20 D7            [ 2] 2159 	jra 2$
      000D1E 72 5C 00 01      [ 1] 2160 5$:	inc in 
      000D22 7F               [ 1] 2161 6$: clr (x)
      000D23 AE 17 18         [ 2] 2162 	ldw x,#pad 
      000D26                       2163 	_drop VSIZE
      000D26 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D28 A6 0A            [ 1] 2164 	ld a,#TK_QSTR  
      000D2A 81               [ 4] 2165 	ret 
                                   2166 
                                   2167 ;---------------------------------------
                                   2168 ; called by parse_quote
                                   2169 ; subtitute escaped character 
                                   2170 ; by their ASCII value .
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2171 ; input:
                                   2172 ;   A  character following '\'
                                   2173 ; output:
                                   2174 ;   A  substitued char or same if not valid.
                                   2175 ;---------------------------------------
      000D2B                       2176 convert_escape:
      000D2B 89               [ 2] 2177 	pushw x 
      000D2C AE 0D 40         [ 2] 2178 	ldw x,#escaped 
      000D2F F1               [ 1] 2179 1$:	cp a,(x)
      000D30 27 06            [ 1] 2180 	jreq 2$
      000D32 7D               [ 1] 2181 	tnz (x)
      000D33 27 09            [ 1] 2182 	jreq 3$
      000D35 5C               [ 2] 2183 	incw x 
      000D36 20 F7            [ 2] 2184 	jra 1$
      000D38 1D 0D 40         [ 2] 2185 2$: subw x,#escaped 
      000D3B 9F               [ 1] 2186 	ld a,xl 
      000D3C AB 07            [ 1] 2187 	add a,#7
      000D3E 85               [ 2] 2188 3$:	popw x 
      000D3F 81               [ 4] 2189 	ret 
                                   2190 
      000D40 61 62 74 6E 76 66 72  2191 escaped: .asciz "abtnvfr"
             00
                                   2192 
                                   2193 ;-------------------------
                                   2194 ; integer parser 
                                   2195 ; input:
                                   2196 ;   X 		point to pad 
                                   2197 ;   Y 		point to tib 
                                   2198 ;   A 	    first digit|'$' 
                                   2199 ; output:  
                                   2200 ;   pad     number string 
                                   2201 ;   X 		integer 
                                   2202 ;   A 		TK_INTGR
                                   2203 ;-------------------------
                           000001  2204 	BASE=1
                           000002  2205 	TCHAR=2 
                           000002  2206 	VSIZE=2 
      000D48                       2207 parse_integer: ; { -- n }
      000D48 4B 00            [ 1] 2208 	push #0 ; TCHAR 
      000D4A A1 24            [ 1] 2209 	cp a,#'$
      000D4C 27 04            [ 1] 2210 	jreq 1$ 
      000D4E 4B 0A            [ 1] 2211 	push #10 ; BASE=10 
      000D50 20 02            [ 2] 2212 	jra 2$ 
      000D52 4B 10            [ 1] 2213 1$: push #16  ; BASE=16
      000D54 F7               [ 1] 2214 2$:	ld (x),a 
      000D55 5C               [ 2] 2215 	incw x 
      000D56 72 5C 00 01      [ 1] 2216 	inc in 
      000D5A 91 D6 00         [ 4] 2217 	ld a,([in.w],y)
      000D5D CD 0F A6         [ 4] 2218 	call to_upper 
      000D60 6B 02            [ 1] 2219 	ld (TCHAR,sp),a 
      000D62 CD 0F 9D         [ 4] 2220 	call is_digit 
      000D65 25 ED            [ 1] 2221 	jrc 2$
      000D67 A6 10            [ 1] 2222 	ld a,#16 
      000D69 11 01            [ 1] 2223 	cp a,(BASE,sp)
      000D6B 26 0A            [ 1] 2224 	jrne 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D6D 7B 02            [ 1] 2225 	ld a,(TCHAR,sp)
      000D6F A1 41            [ 1] 2226 	cp a,#'A 
      000D71 2B 04            [ 1] 2227 	jrmi 3$ 
      000D73 A1 47            [ 1] 2228 	cp a,#'G 
      000D75 2B DD            [ 1] 2229 	jrmi 2$ 
      000D77 7F               [ 1] 2230 3$:	clr (x)
      000D78 CD 0F B2         [ 4] 2231 	call atoi24
      000D7B CE 00 08         [ 2] 2232 	ldw x,acc16 
      000D7E A6 04            [ 1] 2233 	ld a,#TK_INTGR
      000D80                       2234 	_drop VSIZE  
      000D80 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D82 81               [ 4] 2235 	ret 	
                                   2236 
                                   2237 ;-------------------------
                                   2238 ; binary integer parser 
                                   2239 ; input:
                                   2240 ;   X 		point to pad 
                                   2241 ;   Y 		point to tib 
                                   2242 ;   A 	    '%' 
                                   2243 ; output:  
                                   2244 ;   pad     number string 
                                   2245 ;   X 		integer 
                                   2246 ;   A 		TK_INTGR
                                   2247 ;   TOS     integer 
                                   2248 ;-------------------------
                           000001  2249 	BINARY=1
                           000002  2250 	VSIZE=2
      000D83                       2251 parse_binary: ; { -- n }
      000D83 4B 00            [ 1] 2252 	push #0
      000D85 4B 00            [ 1] 2253 	push #0
      000D87 F7               [ 1] 2254 1$: ld (x),a 
      000D88 5C               [ 2] 2255 	incw x 
      000D89 72 5C 00 01      [ 1] 2256 	inc in 
      000D8D 91 D6 00         [ 4] 2257 	ld a,([in.w],y)
      000D90 A1 30            [ 1] 2258 	cp a,#'0 
      000D92 27 06            [ 1] 2259 	jreq 2$
      000D94 A1 31            [ 1] 2260 	cp a,#'1 
      000D96 27 02            [ 1] 2261 	jreq 2$ 
      000D98 20 09            [ 2] 2262 	jra bin_exit 
      000D9A A0 30            [ 1] 2263 2$: sub a,#'0	
      000D9C 46               [ 1] 2264 	rrc a 
      000D9D 09 02            [ 1] 2265 	rlc (BINARY+1,sp)
      000D9F 09 01            [ 1] 2266 	rlc (BINARY,sp)
      000DA1 20 E4            [ 2] 2267 	jra 1$  
      000DA3                       2268 bin_exit:
      000DA3 7F               [ 1] 2269 	clr (x)
      000DA4 1E 01            [ 2] 2270 	ldw x,(BINARY,sp)
      000DA6 A6 04            [ 1] 2271 	ld a,#TK_INTGR 	
      000DA8                       2272 	_drop VSIZE 
      000DA8 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DAA 81               [ 4] 2273 	ret
                                   2274 
                                   2275 ;---------------------------
                                   2276 ;  token begin with a letter,
                                   2277 ;  is keyword or variable. 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2278 ; input:
                                   2279 ;   X 		point to pad 
                                   2280 ;   Y 		point to text
                                   2281 ;   A 	    first letter  
                                   2282 ; output:
                                   2283 ;   X		exec_addr|var_addr 
                                   2284 ;   A 		TK_CMD 
                                   2285 ;   pad 	keyword|var_name  
                                   2286 ;   TOS     exec_addr|var_addr 
                                   2287 ;--------------------------  
      000DAB                       2288 parse_keyword: ; { -- exec_addr|var_addr}
      000DAB CD 0F A6         [ 4] 2289 	call to_upper 
      000DAE F7               [ 1] 2290 	ld (x),a 
      000DAF 5C               [ 2] 2291 	incw x 
      000DB0 72 5C 00 01      [ 1] 2292 	inc in 
      000DB4 91 D6 00         [ 4] 2293 	ld a,([in.w],y)
      000DB7 CD 05 23         [ 4] 2294 	call is_alpha 
      000DBA 25 EF            [ 1] 2295 	jrc parse_keyword 
      000DBC 7F               [ 1] 2296 1$: clr (x)
      000DBD 72 5D 17 19      [ 1] 2297 	tnz pad+1 
      000DC1 26 15            [ 1] 2298 	jrne 2$
                                   2299 ; one letter variable name 
      000DC3 C6 17 18         [ 1] 2300 	ld a,pad 
      000DC6 A0 41            [ 1] 2301 	sub a,#'A 
      000DC8 48               [ 1] 2302 	sll a 
      000DC9 88               [ 1] 2303 	push a 
      000DCA 4B 00            [ 1] 2304 	push #0
      000DCC AE 00 24         [ 2] 2305 	ldw x,#vars 
      000DCF 72 FB 01         [ 2] 2306 	addw x,(1,sp) ; X=var address 
      000DD2                       2307 	_drop 2 
      000DD2 5B 02            [ 2]    1     addw sp,#2 
      000DD4 A6 05            [ 1] 2308 	ld a,#TK_VAR 
      000DD6 20 0C            [ 2] 2309 	jra 4$ 
      000DD8                       2310 2$: ; check for keyword, otherwise syntax error.
      000DD8                       2311 	_ldx_dict kword_dict
      000DD8 AE 26 71         [ 2]    1     ldw x,#kword_dict+2
      000DDB CD 12 43         [ 4] 2312 	call search_dict
      000DDE 4D               [ 1] 2313 	tnz a
      000DDF 26 03            [ 1] 2314 	jrne 4$ 
      000DE1 CC 07 89         [ 2] 2315 	jp syntax_error
      000DE4 81               [ 4] 2316 4$:	ret  	
                                   2317 
                                   2318 
                                   2319 ;------------------------------------
                                   2320 ; Command line tokenizer
                                   2321 ; scan text for next token
                                   2322 ; move token in 'pad'
                                   2323 ; input: 
      000DE5                       2324 	none: 
                                   2325 ; use:
                                   2326 ;	Y   pointer to text
                                   2327 ;   X	pointer to pad 
                                   2328 ;   in.w   index in text buffer
                                   2329 ; output:
                                   2330 ;   A       token attribute 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2331 ;   pad 	token as .asciz
                                   2332 ;   X 		token value   
                                   2333 ;------------------------------------
                                   2334 	; use to check special character 
                                   2335 	.macro _case c t  
                                   2336 	ld a,#c 
                                   2337 	cp a,(TCHAR,sp) 
                                   2338 	jrne t
                                   2339 	.endm 
                                   2340 
                           000001  2341 	TCHAR=1
                           000002  2342 	ATTRIB=2 
                           000002  2343 	VSIZE=2
      000DE5                       2344 get_token: 
      000DE5 90 AE 16 C8      [ 2] 2345 	ldw y,#tib    	
      000DE9 C6 00 01         [ 1] 2346 	ld a,in 
      000DEC C1 00 03         [ 1] 2347 	cp a,count 
      000DEF 2B 03            [ 1] 2348 	jrmi 1$
      000DF1 A6 00            [ 1] 2349 	ld a,#TK_NONE 
      000DF3 81               [ 4] 2350 	ret 
      000DF4                       2351 1$:	
      000DF4                       2352 	_vars VSIZE
      000DF4 52 02            [ 2]    1     sub sp,#VSIZE 
      000DF6 AE 17 18         [ 2] 2353 	ldw x, #pad
      000DF9 A6 20            [ 1] 2354 	ld a,#SPACE
      000DFB CD 10 5E         [ 4] 2355 	call skip
      000DFE 55 00 01 00 02   [ 1] 2356 	mov in.saved,in 
      000E03 91 D6 00         [ 4] 2357 	ld a,([in.w],y)
      000E06 26 07            [ 1] 2358 	jrne str_tst
      000E08 72 5F 17 18      [ 1] 2359 	clr pad 
      000E0C CC 0F 9A         [ 2] 2360 	jp token_exit ; end of line 
                                   2361 
      000E0F                       2362 str_tst: ; check for quoted string  	
      000E0F CD 0F A6         [ 4] 2363 	call to_upper 
      000E12 6B 01            [ 1] 2364 	ld (TCHAR,sp),a 
      000E14                       2365 	_case '"' nbr_tst
      000E14 A6 22            [ 1]    1 	ld a,#'"' 
      000E16 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E18 26 06            [ 1]    3 	jrne nbr_tst
      000E1A CD 0C F0         [ 4] 2366 	call parse_quote
      000E1D CC 0F 9A         [ 2] 2367 	jp token_exit
      000E20                       2368 nbr_tst: ; check for number 
      000E20 A6 24            [ 1] 2369 	ld a,#'$'
      000E22 11 01            [ 1] 2370 	cp a,(TCHAR,sp) 
      000E24 27 13            [ 1] 2371 	jreq 1$
      000E26 A6 26            [ 1] 2372 	ld a,#'&
      000E28 11 01            [ 1] 2373 	cp a,(TCHAR,sp)
      000E2A 26 06            [ 1] 2374 	jrne 0$
      000E2C CD 0D 83         [ 4] 2375 	call parse_binary ; expect binary integer 
      000E2F CC 0F 9A         [ 2] 2376 	jp token_exit 
      000E32 7B 01            [ 1] 2377 0$:	ld a,(TCHAR,sp)
      000E34 CD 0F 9D         [ 4] 2378 	call is_digit
      000E37 24 06            [ 1] 2379 	jrnc 3$
      000E39 CD 0D 48         [ 4] 2380 1$:	call parse_integer 
      000E3C CC 0F 9A         [ 2] 2381 	jp token_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E3F                       2382 3$: 
      000E3F                       2383 	_case '(' bkslsh_tst 
      000E3F A6 28            [ 1]    1 	ld a,#'(' 
      000E41 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E43 26 05            [ 1]    3 	jrne bkslsh_tst
      000E45 A6 0B            [ 1] 2384 	ld a,#TK_LPAREN
      000E47 CC 0F 8A         [ 2] 2385 	jp token_char   	
      000E4A                       2386 bkslsh_tst: ; character token 
      000E4A                       2387 	_case '\',rparnt_tst
      000E4A A6 5C            [ 1]    1 	ld a,#'\' 
      000E4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E4E 26 18            [ 1]    3 	jrne rparnt_tst
      000E50 7B 01            [ 1] 2388 	ld a,(TCHAR,sp)
      000E52 F7               [ 1] 2389 	ld (x),a 
      000E53 5C               [ 2] 2390 	incw x 
      000E54 72 5C 00 01      [ 1] 2391 	inc in 
      000E58 91 D6 00         [ 4] 2392 	ld a,([in.w],y)
      000E5B F7               [ 1] 2393 	ld (x),a 
      000E5C 5C               [ 2] 2394 	incw x 
      000E5D 72 5C 00 01      [ 1] 2395 	inc in  
      000E61 7F               [ 1] 2396 	clr (x) 
      000E62 97               [ 1] 2397 	ld xl,a 
      000E63 A6 03            [ 1] 2398 	ld a,#TK_CHAR 
      000E65 CC 0F 9A         [ 2] 2399 	jp token_exit 
      000E68                       2400 rparnt_tst:		
      000E68                       2401 	_case ')' colon_tst 
      000E68 A6 29            [ 1]    1 	ld a,#')' 
      000E6A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E6C 26 05            [ 1]    3 	jrne colon_tst
      000E6E A6 0C            [ 1] 2402 	ld a,#TK_RPAREN 
      000E70 CC 0F 8A         [ 2] 2403 	jp token_char 
      000E73                       2404 colon_tst:
      000E73                       2405 	_case ':' comma_tst 
      000E73 A6 3A            [ 1]    1 	ld a,#':' 
      000E75 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E77 26 05            [ 1]    3 	jrne comma_tst
      000E79 A6 01            [ 1] 2406 	ld a,#TK_COLON 
      000E7B CC 0F 8A         [ 2] 2407 	jp token_char 
      000E7E                       2408 comma_tst:
      000E7E                       2409 	_case COMMA sharp_tst 
      000E7E A6 2C            [ 1]    1 	ld a,#COMMA 
      000E80 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E82 26 05            [ 1]    3 	jrne sharp_tst
      000E84 A6 0D            [ 1] 2410 	ld a,#TK_COMMA
      000E86 CC 0F 8A         [ 2] 2411 	jp token_char
      000E89                       2412 sharp_tst:
      000E89                       2413 	_case SHARP dash_tst 
      000E89 A6 23            [ 1]    1 	ld a,#SHARP 
      000E8B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E8D 26 05            [ 1]    3 	jrne dash_tst
      000E8F A6 0E            [ 1] 2414 	ld a,#TK_SHARP
      000E91 CC 0F 8A         [ 2] 2415 	jp token_char  	 	 
      000E94                       2416 dash_tst: 	
      000E94                       2417 	_case '-' at_tst 
      000E94 A6 2D            [ 1]    1 	ld a,#'-' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E96 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E98 26 05            [ 1]    3 	jrne at_tst
      000E9A A6 11            [ 1] 2418 	ld a,#TK_MINUS  
      000E9C CC 0F 8A         [ 2] 2419 	jp token_char 
      000E9F                       2420 at_tst:
      000E9F                       2421 	_case '@' qmark_tst 
      000E9F A6 40            [ 1]    1 	ld a,#'@' 
      000EA1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EA3 26 05            [ 1]    3 	jrne qmark_tst
      000EA5 A6 02            [ 1] 2422 	ld a,#TK_ARRAY 
      000EA7 CC 0F 8A         [ 2] 2423 	jp token_char
      000EAA                       2424 qmark_tst:
      000EAA                       2425 	_case '?' tick_tst 
      000EAA A6 3F            [ 1]    1 	ld a,#'?' 
      000EAC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EAE 26 11            [ 1]    3 	jrne tick_tst
      000EB0 7B 01            [ 1] 2426 	ld a,(TCHAR,sp)
      000EB2 F7               [ 1] 2427 	ld (x),a 
      000EB3 5C               [ 2] 2428 	incw x 
      000EB4 7F               [ 1] 2429 	clr (x)
      000EB5 72 5C 00 01      [ 1] 2430 	inc in 
      000EB9 A6 06            [ 1] 2431 	ld a,#TK_CMD 
      000EBB AE 16 F3         [ 2] 2432 	ldw x,#print 
      000EBE CC 0F 9A         [ 2] 2433 	jp token_exit
      000EC1                       2434 tick_tst: ; ignore comment 
      000EC1                       2435 	_case TICK plus_tst 
      000EC1 A6 27            [ 1]    1 	ld a,#TICK 
      000EC3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EC5 26 0C            [ 1]    3 	jrne plus_tst
      000EC7 72 5C 00 01      [ 1] 2436 	inc in 
      000ECB A6 06            [ 1] 2437 	ld a,#TK_CMD 
      000ECD AE 17 EF         [ 2] 2438 	ldw x,#rem 
      000ED0 CC 0F 9A         [ 2] 2439 	jp token_exit 
      000ED3                       2440 plus_tst:
      000ED3                       2441 	_case '+' star_tst 
      000ED3 A6 2B            [ 1]    1 	ld a,#'+' 
      000ED5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000ED7 26 05            [ 1]    3 	jrne star_tst
      000ED9 A6 10            [ 1] 2442 	ld a,#TK_PLUS  
      000EDB CC 0F 8A         [ 2] 2443 	jp token_char 
      000EDE                       2444 star_tst:
      000EDE                       2445 	_case '*' slash_tst 
      000EDE A6 2A            [ 1]    1 	ld a,#'*' 
      000EE0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EE2 26 05            [ 1]    3 	jrne slash_tst
      000EE4 A6 20            [ 1] 2446 	ld a,#TK_MULT 
      000EE6 CC 0F 8A         [ 2] 2447 	jp token_char 
      000EE9                       2448 slash_tst: 
      000EE9                       2449 	_case '/' prcnt_tst 
      000EE9 A6 2F            [ 1]    1 	ld a,#'/' 
      000EEB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EED 26 05            [ 1]    3 	jrne prcnt_tst
      000EEF A6 21            [ 1] 2450 	ld a,#TK_DIV 
      000EF1 CC 0F 8A         [ 2] 2451 	jp token_char 
      000EF4                       2452 prcnt_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EF4                       2453 	_case '%' eql_tst 
      000EF4 A6 25            [ 1]    1 	ld a,#'%' 
      000EF6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EF8 26 05            [ 1]    3 	jrne eql_tst
      000EFA A6 22            [ 1] 2454 	ld a,#TK_MOD
      000EFC CC 0F 8A         [ 2] 2455 	jp token_char  
                                   2456 ; 1 or 2 character tokens 	
      000EFF                       2457 eql_tst:
      000EFF                       2458 	_case '=' gt_tst 		
      000EFF A6 3D            [ 1]    1 	ld a,#'=' 
      000F01 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F03 26 05            [ 1]    3 	jrne gt_tst
      000F05 A6 32            [ 1] 2459 	ld a,#TK_EQUAL
      000F07 CC 0F 8A         [ 2] 2460 	jp token_char 
      000F0A                       2461 gt_tst:
      000F0A                       2462 	_case '>' lt_tst 
      000F0A A6 3E            [ 1]    1 	ld a,#'>' 
      000F0C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F0E 26 33            [ 1]    3 	jrne lt_tst
      000F10 A6 31            [ 1] 2463 	ld a,#TK_GT 
      000F12 6B 02            [ 1] 2464 	ld (ATTRIB,sp),a 
      000F14 72 5C 00 01      [ 1] 2465 	inc in 
      000F18 91 D6 00         [ 4] 2466 	ld a,([in.w],y)
      000F1B A1 3D            [ 1] 2467 	cp a,#'=
      000F1D 26 0C            [ 1] 2468 	jrne 1$
      000F1F 7B 01            [ 1] 2469 	ld a,(TCHAR,sp)
      000F21 F7               [ 1] 2470 	ld (x),a
      000F22 5C               [ 2] 2471 	incw x 
      000F23 A6 3D            [ 1] 2472 	ld a,#'=
      000F25 6B 01            [ 1] 2473 	ld (TCHAR,sp),a 
      000F27 A6 33            [ 1] 2474 	ld a,#TK_GE 
      000F29 20 5F            [ 2] 2475 	jra token_char  
      000F2B A1 3C            [ 1] 2476 1$: cp a,#'<
      000F2D 26 0C            [ 1] 2477 	jrne 2$
      000F2F 7B 01            [ 1] 2478 	ld a,(TCHAR,sp)
      000F31 F7               [ 1] 2479 	ld (x),a
      000F32 5C               [ 2] 2480 	incw x 
      000F33 A6 3C            [ 1] 2481 	ld a,#'<	
      000F35 6B 01            [ 1] 2482 	ld (TCHAR,sp),a 
      000F37 A6 35            [ 1] 2483 	ld a,#TK_NE 
      000F39 20 4F            [ 2] 2484 	jra token_char 
      000F3B 72 5A 00 01      [ 1] 2485 2$: dec in
      000F3F 7B 02            [ 1] 2486 	ld a,(ATTRIB,sp)
      000F41 20 47            [ 2] 2487 	jra token_char 
      000F43                       2488 lt_tst:
      000F43                       2489 	_case '<' other
      000F43 A6 3C            [ 1]    1 	ld a,#'<' 
      000F45 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F47 26 32            [ 1]    3 	jrne other
      000F49 A6 34            [ 1] 2490 	ld a,#TK_LT 
      000F4B 6B 02            [ 1] 2491 	ld (ATTRIB,sp),a 
      000F4D 72 5C 00 01      [ 1] 2492 	inc in 
      000F51 91 D6 00         [ 4] 2493 	ld a,([in.w],y)
      000F54 A1 3D            [ 1] 2494 	cp a,#'=
      000F56 26 0B            [ 1] 2495 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F58 7B 01            [ 1] 2496 	ld a,(TCHAR,sp)
      000F5A F7               [ 1] 2497 	ld (x),a 
      000F5B A6 3D            [ 1] 2498 	ld a,#'=
      000F5D 6B 01            [ 1] 2499 	ld (TCHAR,sp),a 
      000F5F A6 36            [ 1] 2500 	ld a,#TK_LE 
      000F61 20 27            [ 2] 2501 	jra token_char 
      000F63 A1 3E            [ 1] 2502 1$: cp a,#'>
      000F65 26 0C            [ 1] 2503 	jrne 2$
      000F67 7B 01            [ 1] 2504 	ld a,(TCHAR,sp)
      000F69 F7               [ 1] 2505 	ld (x),a 
      000F6A 5C               [ 2] 2506 	incw x 
      000F6B A6 3E            [ 1] 2507 	ld a,#'>
      000F6D 6B 01            [ 1] 2508 	ld (TCHAR,sp),a 
      000F6F A6 35            [ 1] 2509 	ld a,#TK_NE 
      000F71 20 17            [ 2] 2510 	jra token_char 
      000F73 72 5A 00 01      [ 1] 2511 2$: dec in 
      000F77 7B 02            [ 1] 2512 	ld a,(ATTRIB,sp)
      000F79 20 0F            [ 2] 2513 	jra token_char 	
      000F7B                       2514 other: ; not a special character 	 
      000F7B 7B 01            [ 1] 2515 	ld a,(TCHAR,sp)
      000F7D CD 05 23         [ 4] 2516 	call is_alpha 
      000F80 25 03            [ 1] 2517 	jrc 30$ 
      000F82 CC 07 89         [ 2] 2518 	jp syntax_error 
      000F85                       2519 30$: 
      000F85 CD 0D AB         [ 4] 2520 	call parse_keyword
      000F88 20 10            [ 2] 2521 	jra token_exit 
      000F8A                       2522 token_char:
      000F8A 6B 02            [ 1] 2523 	ld (ATTRIB,sp),a 
      000F8C 7B 01            [ 1] 2524 	ld a,(TCHAR,sp)
      000F8E F7               [ 1] 2525 	ld (x),a 
      000F8F 5C               [ 2] 2526 	incw x 
      000F90 7F               [ 1] 2527 	clr(x)
      000F91 72 5C 00 01      [ 1] 2528 	inc in 
      000F95 7B 02            [ 1] 2529 	ld a,(ATTRIB,sp)
      000F97 AE 17 18         [ 2] 2530 	ldw x,#pad 
      000F9A                       2531 token_exit:
      000F9A                       2532 	_drop VSIZE 
      000F9A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F9C 81               [ 4] 2533 	ret
                                   2534 
                                   2535 
                                   2536 
                                   2537 ;------------------------------------
                                   2538 ; check if character in {'0'..'9'}
                                   2539 ; input:
                                   2540 ;    A  character to test
                                   2541 ; output:
                                   2542 ;    Carry  0 not digit | 1 digit
                                   2543 ;------------------------------------
      000F9D                       2544 is_digit:
      000F9D A1 30            [ 1] 2545 	cp a,#'0
      000F9F 25 03            [ 1] 2546 	jrc 1$
      000FA1 A1 3A            [ 1] 2547     cp a,#'9+1
      000FA3 8C               [ 1] 2548 	ccf 
      000FA4 8C               [ 1] 2549 1$:	ccf 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000FA5 81               [ 4] 2550     ret
                                   2551 
                                   2552 ;------------------------------------
                                   2553 ; convert alpha to uppercase
                                   2554 ; input:
                                   2555 ;    a  character to convert
                                   2556 ; output:
                                   2557 ;    a  uppercase character
                                   2558 ;------------------------------------
      000FA6                       2559 to_upper::
      000FA6 A1 61            [ 1] 2560 	cp a,#'a
      000FA8 2A 01            [ 1] 2561 	jrpl 1$
      000FAA 81               [ 4] 2562 0$:	ret
      000FAB A1 7A            [ 1] 2563 1$: cp a,#'z	
      000FAD 22 FB            [ 1] 2564 	jrugt 0$
      000FAF A0 20            [ 1] 2565 	sub a,#32
      000FB1 81               [ 4] 2566 	ret
                                   2567 	
                                   2568 ;------------------------------------
                                   2569 ; convert pad content in integer
                                   2570 ; input:
                                   2571 ;    pad		.asciz to convert
                                   2572 ; output:
                                   2573 ;    acc24      int24_t
                                   2574 ;------------------------------------
                                   2575 	; local variables
                           000001  2576 	SIGN=1 ; 1 byte, 
                           000002  2577 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2578 	TEMP=3 ; 1 byte, temporary storage
                           000003  2579 	VSIZE=3 ; 3 bytes reserved for local storage
      000FB2                       2580 atoi24:
      000FB2 89               [ 2] 2581 	pushw x ;save x
      000FB3 52 03            [ 2] 2582 	sub sp,#VSIZE
                                   2583 	; acc24=0 
      000FB5 72 5F 00 07      [ 1] 2584 	clr acc24    
      000FB9 72 5F 00 08      [ 1] 2585 	clr acc16
      000FBD 72 5F 00 09      [ 1] 2586 	clr acc8 
      000FC1 C6 17 18         [ 1] 2587 	ld a, pad 
      000FC4 27 5A            [ 1] 2588 	jreq atoi_exit
      000FC6 0F 01            [ 1] 2589 	clr (SIGN,sp)
      000FC8 A6 0A            [ 1] 2590 	ld a,#10
      000FCA 6B 02            [ 1] 2591 	ld (BASE,sp),a ; default base decimal
      000FCC AE 17 18         [ 2] 2592 	ldw x,#pad ; pointer to string to convert
      000FCF F6               [ 1] 2593 	ld a,(x)
      000FD0 27 47            [ 1] 2594 	jreq 9$  ; completed if 0
      000FD2 A1 2D            [ 1] 2595 	cp a,#'-
      000FD4 26 04            [ 1] 2596 	jrne 1$
      000FD6 03 01            [ 1] 2597 	cpl (SIGN,sp)
      000FD8 20 08            [ 2] 2598 	jra 2$
      000FDA A1 24            [ 1] 2599 1$: cp a,#'$
      000FDC 26 06            [ 1] 2600 	jrne 3$
      000FDE A6 10            [ 1] 2601 	ld a,#16
      000FE0 6B 02            [ 1] 2602 	ld (BASE,sp),a
      000FE2 5C               [ 2] 2603 2$:	incw x
      000FE3 F6               [ 1] 2604 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000FE4                       2605 3$:	
      000FE4 A1 61            [ 1] 2606 	cp a,#'a
      000FE6 2B 02            [ 1] 2607 	jrmi 4$
      000FE8 A0 20            [ 1] 2608 	sub a,#32
      000FEA A1 30            [ 1] 2609 4$:	cp a,#'0
      000FEC 2B 2B            [ 1] 2610 	jrmi 9$
      000FEE A0 30            [ 1] 2611 	sub a,#'0
      000FF0 A1 0A            [ 1] 2612 	cp a,#10
      000FF2 2B 06            [ 1] 2613 	jrmi 5$
      000FF4 A0 07            [ 1] 2614 	sub a,#7
      000FF6 11 02            [ 1] 2615 	cp a,(BASE,sp)
      000FF8 2A 1F            [ 1] 2616 	jrpl 9$
      000FFA 6B 03            [ 1] 2617 5$:	ld (TEMP,sp),a
      000FFC 7B 02            [ 1] 2618 	ld a,(BASE,sp)
      000FFE CD 10 24         [ 4] 2619 	call mulu24_8
      001001 7B 03            [ 1] 2620 	ld a,(TEMP,sp)
      001003 CB 00 09         [ 1] 2621 	add a,acc24+2
      001006 C7 00 09         [ 1] 2622 	ld acc24+2,a
      001009 4F               [ 1] 2623 	clr a
      00100A C9 00 08         [ 1] 2624 	adc a,acc24+1
      00100D C7 00 08         [ 1] 2625 	ld acc24+1,a
      001010 4F               [ 1] 2626 	clr a
      001011 C9 00 07         [ 1] 2627 	adc a,acc24
      001014 C7 00 07         [ 1] 2628 	ld acc24,a
      001017 20 C9            [ 2] 2629 	jra 2$
      001019 0D 01            [ 1] 2630 9$:	tnz (SIGN,sp)
      00101B 27 03            [ 1] 2631     jreq atoi_exit
      00101D CD 0B 49         [ 4] 2632     call neg_acc24
      001020                       2633 atoi_exit: 
      001020 5B 03            [ 2] 2634 	addw sp,#VSIZE
      001022 85               [ 2] 2635 	popw x ; restore x
      001023 81               [ 4] 2636 	ret
                                   2637 
                                   2638 ;--------------------------------------
                                   2639 ; unsigned multiply uint24_t by uint8_t
                                   2640 ; use to convert numerical string to uint24_t
                                   2641 ; input:
                                   2642 ;	acc24	uint24_t 
                                   2643 ;   A		uint8_t
                                   2644 ; output:
                                   2645 ;   acc24   A*acc24
                                   2646 ;-------------------------------------
                                   2647 ; local variables offset  on sp
                           000003  2648 	U8   = 3   ; A pushed on stack
                           000002  2649 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2650 	OVFH = 1  ; multiplication overflow high byte
                           000003  2651 	VSIZE = 3
      001024                       2652 mulu24_8:
      001024 89               [ 2] 2653 	pushw x    ; save X
                                   2654 	; local variables
      001025 88               [ 1] 2655 	push a     ; U8
      001026 5F               [ 1] 2656 	clrw x     ; initialize overflow to 0
      001027 89               [ 2] 2657 	pushw x    ; multiplication overflow
                                   2658 ; multiply low byte.
      001028 C6 00 09         [ 1] 2659 	ld a,acc24+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      00102B 97               [ 1] 2660 	ld xl,a
      00102C 7B 03            [ 1] 2661 	ld a,(U8,sp)
      00102E 42               [ 4] 2662 	mul x,a
      00102F 9F               [ 1] 2663 	ld a,xl
      001030 C7 00 09         [ 1] 2664 	ld acc24+2,a
      001033 9E               [ 1] 2665 	ld a, xh
      001034 6B 02            [ 1] 2666 	ld (OVFL,sp),a
                                   2667 ; multipy middle byte
      001036 C6 00 08         [ 1] 2668 	ld a,acc24+1
      001039 97               [ 1] 2669 	ld xl,a
      00103A 7B 03            [ 1] 2670 	ld a, (U8,sp)
      00103C 42               [ 4] 2671 	mul x,a
                                   2672 ; add overflow to this partial product
      00103D 72 FB 01         [ 2] 2673 	addw x,(OVFH,sp)
      001040 9F               [ 1] 2674 	ld a,xl
      001041 C7 00 08         [ 1] 2675 	ld acc24+1,a
      001044 4F               [ 1] 2676 	clr a
      001045 A9 00            [ 1] 2677 	adc a,#0
      001047 6B 01            [ 1] 2678 	ld (OVFH,sp),a
      001049 9E               [ 1] 2679 	ld a,xh
      00104A 6B 02            [ 1] 2680 	ld (OVFL,sp),a
                                   2681 ; multiply most signficant byte	
      00104C C6 00 07         [ 1] 2682 	ld a, acc24
      00104F 97               [ 1] 2683 	ld xl, a
      001050 7B 03            [ 1] 2684 	ld a, (U8,sp)
      001052 42               [ 4] 2685 	mul x,a
      001053 72 FB 01         [ 2] 2686 	addw x, (OVFH,sp)
      001056 9F               [ 1] 2687 	ld a, xl
      001057 C7 00 07         [ 1] 2688 	ld acc24,a
      00105A 5B 03            [ 2] 2689     addw sp,#VSIZE
      00105C 85               [ 2] 2690 	popw x
      00105D 81               [ 4] 2691 	ret
                                   2692 
                                   2693 ;------------------------------------
                                   2694 ; skip character c in text starting from 'in'
                                   2695 ; input:
                                   2696 ;	 y 		point to text buffer
                                   2697 ;    a 		character to skip
                                   2698 ; output:  
                                   2699 ;	'in' ajusted to new position
                                   2700 ;------------------------------------
                           000001  2701 	C = 1 ; local var
      00105E                       2702 skip:
      00105E 88               [ 1] 2703 	push a
      00105F 91 D6 00         [ 4] 2704 1$:	ld a,([in.w],y)
      001062 27 0A            [ 1] 2705 	jreq 2$
      001064 11 01            [ 1] 2706 	cp a,(C,sp)
      001066 26 06            [ 1] 2707 	jrne 2$
      001068 72 5C 00 01      [ 1] 2708 	inc in
      00106C 20 F1            [ 2] 2709 	jra 1$
      00106E                       2710 2$: _drop 1 
      00106E 5B 01            [ 2]    1     addw sp,#1 
      001070 81               [ 4] 2711 	ret
                                   2712 	
                                   2713 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2714 ; restore 'in.w' variable to 
                                   2715 ; its value before last call
                                   2716 ; to get_token.
                                   2717 ;------------------------------
      001071                       2718 unget_token:
      001071 55 00 02 00 01   [ 1] 2719 	mov in,in.saved
      001076 81               [ 4] 2720 	ret 
                                   2721 
                                   2722 
                                   2723 ;******************************
                                   2724 ;  data stack manipulation
                                   2725 ;*****************************
                                   2726 ;----------------------	
                                   2727 ; push X on data stack 
                                   2728 ; input:
                                   2729 ;	X 
                                   2730 ; output:
                                   2731 ;	none 
                                   2732 ;----------------------	
      001077                       2733 dpush:
      001077                       2734     _dp_down
      001077 72 5A 00 19      [ 1]    1     dec dstkptr+1 
      00107B 72 5A 00 19      [ 1]    2     dec dstkptr+1
      00107F 72 CF 00 18      [ 5] 2735     ldw [dstkptr],x  
      001083 81               [ 4] 2736 	ret 
                                   2737 
                                   2738 
                                   2739 ;----------------------	
                                   2740 ; pop data stack in X 
                                   2741 ; input:
                                   2742 ;	none
                                   2743 ; output:
                                   2744 ;	X   
                                   2745 ;----------------------	
      001084                       2746 dpop: 
      001084 72 CE 00 18      [ 5] 2747     ldw x, [dstkptr]
      001088                       2748 	_dp_up
      001088 72 5C 00 19      [ 1]    1     inc dstkptr+1
      00108C 72 5C 00 19      [ 1]    2     inc dstkptr+1
      001090 81               [ 4] 2749 	ret 
                                   2750 
                                   2751 ;-----------------------------
                                   2752 ; swap top 2 elements of dstack
                                   2753 ;  {n1 n2 -- n2 n1 }
                                   2754 ;-----------------------------
      001091                       2755 dswap:
      001091 72 CE 00 18      [ 5] 2756 	ldw x,[dstkptr]
      001095 89               [ 2] 2757 	pushw x 
      001096 AE 00 02         [ 2] 2758 	ldw x,#2 
      001099 72 DE 00 18      [ 5] 2759 	ldw x,([dstkptr],x) 
      00109D 72 CF 00 18      [ 5] 2760 	ldw [dstkptr],x 
      0010A1 AE 00 02         [ 2] 2761 	ldw x,#2
      0010A4 90 85            [ 2] 2762 	popw y 
      0010A6 72 DF 00 18      [ 5] 2763 	ldw ([dstkptr],x),y 
      0010AA 81               [ 4] 2764 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2765 
                                   2766 ;-----------------------------
                                   2767 ; drop TOS 
                                   2768 ;-----------------------------
      0010AB                       2769 ddrop: ; { n -- }
      0010AB                       2770 	_dp_up 
      0010AB 72 5C 00 19      [ 1]    1     inc dstkptr+1
      0010AF 72 5C 00 19      [ 1]    2     inc dstkptr+1
      0010B3 81               [ 4] 2771 	ret
                                   2772 	
                                   2773 ;-----------------------------
                                   2774 ; duplicate TOS 
                                   2775 ;  dstack: { ix...n -- ix...n n }
                                   2776 ;-----------------------------
      0010B4                       2777 ddup:
      0010B4 72 CE 00 18      [ 5] 2778 	ldw x,[dstkptr]
      0010B8                       2779 	_dp_down
      0010B8 72 5A 00 19      [ 1]    1     dec dstkptr+1 
      0010BC 72 5A 00 19      [ 1]    2     dec dstkptr+1
      0010C0 72 CF 00 18      [ 5] 2780     ldw [dstkptr],x  
      0010C4 81               [ 4] 2781 	ret 
                                   2782 
                                   2783 
                                   2784 ;----------------------------------
                                   2785 ; pick value n from dstack 
                                   2786 ; put it on TOS
                                   2787 ; dstack: {ix,..,p -- ix,...,np }
                                   2788 ;-----------------------------------
      0010C5                       2789 dpick:
      0010C5 72 CE 00 18      [ 5] 2790 	ldw x,[dstkptr]
      0010C9 58               [ 2] 2791 	sllw x 
      0010CA 72 BB 00 18      [ 2] 2792 	addw x,dstkptr 
      0010CE FE               [ 2] 2793 	ldw x,(x)
      0010CF 72 CF 00 18      [ 5] 2794 	ldw [dstkptr],x 
      0010D3 81               [ 4] 2795 	ret
                                   2796 
                                   2797 ;---------------------------
                                   2798 ;  fetch variable in X 
                                   2799 ;  dstack:{ addr -- value }
                                   2800 ;---------------------------
      0010D4                       2801 fetch:
      0010D4 72 CE 00 18      [ 5] 2802 	ldw x,[dstkptr]
      0010D8 FE               [ 2] 2803 	ldw x,(x)
      0010D9 72 CF 00 18      [ 5] 2804 	ldw [dstkptr],x
      0010DD 81               [ 4] 2805 	ret 
                                   2806 
                                   2807 ;----------------------------
                                   2808 ; store variable 
                                   2809 ; dstack: {addr value -- }
                                   2810 ;----------------------------
      0010DE                       2811 store:
      0010DE CD 10 84         [ 4] 2812 	call dpop 
      0010E1 90 93            [ 1] 2813 	ldw y,x   ; y=value 
      0010E3 CD 10 84         [ 4] 2814 	call dpop 
      0010E6 FF               [ 2] 2815 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0010E7 81               [ 4] 2816 	ret 
                                   2817 
                                   2818 ;---------------------------------
                                   2819 ; drop n elements from data stack 
                                   2820 ; input: 
                                   2821 ;   X 		n 
                                   2822 ; output:
                                   2823 ;   none 
                                   2824 ;-------------------------------------
      0010E8                       2825 ddrop_n:
      0010E8 90 89            [ 2] 2826 	pushw y 
      0010EA 90 CE 00 18      [ 2] 2827 	ldw y,dstkptr 
      0010EE 58               [ 2] 2828 	sllw x 
      0010EF 89               [ 2] 2829 	pushw x 
      0010F0 72 F9 01         [ 2] 2830 	addw y,(1,sp)
      0010F3 90 CF 00 18      [ 2] 2831 	ldw dstkptr,y 
      0010F7 85               [ 2] 2832 	popw x 
      0010F8 90 85            [ 2] 2833 	popw y
      0010FA 81               [ 4] 2834 	ret 
                                   2835 
      0010FB 0A 64 73 74 61 63 6B  2836 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2837 ;----------------------------
                                   2838 ; print dstack content 
                                   2839 ;---------------------------
                           000001  2840 	XSAVE=1
                           000002  2841 	VSIZE=2
      001105                       2842 dots:
      001105                       2843 	_vars VSIZE 
      001105 52 02            [ 2]    1     sub sp,#VSIZE 
      001107 AE 10 FB         [ 2] 2844 	ldw x,#dstk_prompt 
      00110A CD 01 DE         [ 4] 2845 	call puts
      00110D AE 17 7E         [ 2] 2846 	ldw x,#dstack_empty-CELL_SIZE
      001110 35 0A 00 06      [ 1] 2847 	mov base,#10 
      001114 C3 00 18         [ 2] 2848 1$:	cpw x,dstkptr 
      001117 25 0D            [ 1] 2849 	jrult 4$ 
      001119 1F 01            [ 2] 2850 	ldw (XSAVE,sp),x
      00111B FE               [ 2] 2851 	ldw  x,(x)
      00111C CD 0A 7E         [ 4] 2852 	call print_int 
      00111F 1E 01            [ 2] 2853 	ldw x,(XSAVE,sp)
      001121 1D 00 02         [ 2] 2854 	subw x,#CELL_SIZE 
      001124 20 EE            [ 2] 2855 	jra 1$ 
      001126 A6 0D            [ 1] 2856 4$: ld a,#CR 
      001128 CD 01 CB         [ 4] 2857 	call putc 
      00112B                       2858 	_drop VSIZE
      00112B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00112D 4F               [ 1] 2859 	clr a 
      00112E 81               [ 4] 2860 	ret
                                   2861 
      00112F 0A 63 73 74 61 63 6B  2862 cstk_prompt: .asciz "\ncstack: "
             3A 20 00
                                   2863 ;--------------------------------
                                   2864 ; print cstack content
                                   2865 ;--------------------------------
                           000001  2866 	XSAVE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                           000002  2867 	VSIZE=2 
      001139                       2868 dotr:
      001139                       2869 	_vars VSIZE 
      001139 52 02            [ 2]    1     sub sp,#VSIZE 
      00113B AE 11 2F         [ 2] 2870 	ldw x,#cstk_prompt
      00113E CD 01 DE         [ 4] 2871 	call puts 
      001141 96               [ 1] 2872 	ldw x,sp 
      001142 1C 00 07         [ 2] 2873 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      001145 1F 01            [ 2] 2874 	ldw (XSAVE,sp),x  
      001147 AE 17 FE         [ 2] 2875 	ldw x,#RAM_SIZE-2
      00114A 35 10 00 06      [ 1] 2876 	mov base,#16
      00114E                       2877 dotr_loop:
      00114E 13 01            [ 2] 2878 	cpw x,(XSAVE,sp)
      001150 2B 0B            [ 1] 2879 	jrmi 9$
      001152 89               [ 2] 2880 	pushw x  
      001153 FE               [ 2] 2881 	ldw x,(x)
      001154 CD 0A 7E         [ 4] 2882 	call print_int 
      001157 85               [ 2] 2883 	popw x  
      001158 1D 00 02         [ 2] 2884 	subw x,#CELL_SIZE
      00115B 20 F1            [ 2] 2885 	jra dotr_loop 
      00115D A6 0D            [ 1] 2886 9$:	ld a,#CR 
      00115F CD 01 CB         [ 4] 2887 	call putc 
      001162                       2888 	_drop VSIZE 
      001162 5B 02            [ 2]    1     addw sp,#VSIZE 
      001164 4F               [ 1] 2889 	clr a 
      001165 81               [ 4] 2890 	ret
                                   2891 
                                   2892 
                                   2893 ;--------------------------------
                                   2894 ;  add 2 integers
                                   2895 ;  input:
                                   2896 ;    N1     on cstack 
                                   2897 ;    N2     on cstack 
                                   2898 ;  output:
                                   2899 ;    X 		n2+n1 
                                   2900 ;--------------------------------
                                   2901 	;arugments on cstack 
      001166                       2902 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001166                       2903 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001166                       2904 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001166                       2905 add:
      001166 1E 05            [ 2] 2906 	ldw x ,(N2,sp)
      001168 72 FB 03         [ 2] 2907 	addw x,(N1,sp)
      00116B 1F 03            [ 2] 2908 	ldw (N1,sp),x 
      00116D 81               [ 4] 2909 	ret 
                                   2910 
                                   2911 ;--------------------------------
                                   2912 ;  substract 2 ntegers
                                   2913 ;  input:
                                   2914 ;    N1     on cstack 
                                   2915 ;    N2     on cstack 
                                   2916 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2917 ;    X 		n2+n1 
                                   2918 ;--------------------------------
      00116E                       2919 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00116E                       2920 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      00116E                       2921 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00116E                       2922 substract:
      00116E 1E 05            [ 2] 2923 	ldw x,(N2,sp)
      001170 72 F0 03         [ 2] 2924 	subw x,(N1,sp)
      001173 81               [ 4] 2925 	ret 
                                   2926 
                                   2927 ;-------------------------------------
                                   2928 ; multiply 2 integers
                                   2929 ; product overflow is ignored unless
                                   2930 ; MATH_OVF assembler flag is set to 1
                                   2931 ; input:
                                   2932 ;  	N1      on cstack
                                   2933 ;   N2 		on cstack 
                                   2934 ; output:
                                   2935 ;	X        N1*N2 
                                   2936 ;-------------------------------------
                                   2937 	;arguments 
      001174                       2938 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      001174                       2939 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      001174                       2940 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      001174                       2941 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      001174                       2942 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2943    ; local variables 
                           000001  2944 	SIGN=1
                           000002  2945 	PROD=2
                           000003  2946 	VSIZE=3
      001174                       2947 multiply:
      001174                       2948 	_vars VSIZE 
      001174 52 03            [ 2]    1     sub sp,#VSIZE 
      001176 0F 01            [ 1] 2949 	clr (SIGN,sp)
      001178 1E 06            [ 2] 2950 	ldw x,(N1_HB,sp)
      00117A 9E               [ 1] 2951 	ld a,xh  
      00117B A5 80            [ 1] 2952 	bcp a,#0x80 
      00117D 27 05            [ 1] 2953 	jreq 2$
      00117F 03 01            [ 1] 2954 	cpl (SIGN,sp)
      001181 50               [ 2] 2955 	negw x 
      001182 1F 06            [ 2] 2956 	ldw (N1_HB,sp),x 
      001184 1E 08            [ 2] 2957 2$: ldw x,(N2_HB,sp)
      001186 9E               [ 1] 2958 	ld a,xh  
      001187 A5 80            [ 1] 2959 	bcp a,#0x80 
      001189 27 05            [ 1] 2960 	jreq 3$
      00118B 03 01            [ 1] 2961 	cpl (SIGN,sp)
      00118D 50               [ 2] 2962 	negw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      00118E 1F 08            [ 2] 2963 	ldw (N2_HB,sp),x 
                                   2964 ; N1_LB * N2_LB 	
      001190 7B 07            [ 1] 2965 3$:	ld a,(N1_LB,sp)
      001192 97               [ 1] 2966 	ld xl,a 
      001193 7B 09            [ 1] 2967 	ld a,(N2_LB,sp) 
      001195 42               [ 4] 2968 	mul x,a 
                           000000  2969 .if MATH_OVF 	
                                   2970 	ld a,xh 
                                   2971 	bcp a,#0x80 
                                   2972 	jreq 4$ 
                                   2973 	ld a,#ERR_MATH_OVF 
                                   2974 	jp tb_error
                                   2975 .endif 	 
      001196 1F 02            [ 2] 2976 4$:	ldw (PROD,sp),x
                                   2977 ; N1_LB * N2_HB	 
      001198 7B 07            [ 1] 2978 	ld a,(N1_LB,sp) 
      00119A 97               [ 1] 2979 	ld xl,a 
      00119B 7B 08            [ 1] 2980 	ld a,(N2_HB,sp)
      00119D 42               [ 4] 2981 	mul x,a
      00119E 9F               [ 1] 2982 	ld a,xl 
      00119F 1B 02            [ 1] 2983 	add a,(PROD,sp)
                           000000  2984 .if MATH_OVF 	
                                   2985 	bcp a,#0x80 
                                   2986 	jreq 5$ 
                                   2987 	ld a,#ERR_MATH_OVF 
                                   2988 	jp tb_error
                                   2989 .endif 	 
      0011A1 6B 02            [ 1] 2990 5$:	ld (PROD,sp),a 
                                   2991 ; N1_HB * N2_LB 
      0011A3 7B 06            [ 1] 2992 	ld a,(N1_HB,sp)
      0011A5 97               [ 1] 2993 	ld xl,a 
      0011A6 7B 09            [ 1] 2994 	ld a,(N2_LB,sp)
      0011A8 42               [ 4] 2995 	mul x,a 
      0011A9 9F               [ 1] 2996 	ld a,xl 
      0011AA 1B 02            [ 1] 2997 	add a,(PROD,sp)
                           000000  2998 .if MATH_OVF 	
                                   2999 	bcp a,#0x80 
                                   3000 	jreq 6$ 
                                   3001 	ld a,#ERR_MATH_OVF 
                                   3002 	jp tb_error
                                   3003 .endif 	 
      0011AC 6B 02            [ 1] 3004 6$:	ld (PROD,sp),a 
                                   3005 ; N1_HB * N2_HB 	
                                   3006 ; it is pointless to multiply N1_HB*N2_HB 
                                   3007 ; as this product is over 65535 or 0 
                                   3008 ;
                                   3009 ; sign adjust product
      0011AE 0D 01            [ 1] 3010 	tnz (SIGN,sp)
      0011B0 27 05            [ 1] 3011 	jreq 7$
      0011B2 1E 02            [ 2] 3012 	ldw x, (PROD,sp)
      0011B4 50               [ 2] 3013 	negw x
      0011B5 1F 02            [ 2] 3014 	ldw (PROD,sp),x  
      0011B7                       3015 7$: 
      0011B7 1E 02            [ 2] 3016 	ldw x,(PROD,sp) 
      0011B9                       3017 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0011B9 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011BB 81               [ 4] 3018 	ret
                                   3019 
                                   3020 ;----------------------------------
                                   3021 ;  euclidian divide n2/n1 
                                   3022 ; input:
                                   3023 ;    N2 	on cstack
                                   3024 ;    N1 	on cstack
                                   3025 ; output:
                                   3026 ;    X      n2/n1 
                                   3027 ;    Y      remainder 
                                   3028 ;----------------------------------
      0011BC                       3029 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      0011BC                       3030 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      0011BC                       3031 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   3032 	; local variables
                           000001  3033 	SQUOT=1 ; sign quotient
                           000002  3034 	SDIVD=2 ; sign dividend  
                           000002  3035 	VSIZE=2
      0011BC                       3036 divide:
      0011BC                       3037 	_vars VSIZE 
      0011BC 52 02            [ 2]    1     sub sp,#VSIZE 
      0011BE 0F 01            [ 1] 3038 	clr (SQUOT,sp)
      0011C0 0F 02            [ 1] 3039 	clr (SDIVD,sp)
                                   3040 ; check for 0 divisor
      0011C2 1E 05            [ 2] 3041 	ldw x,(DIVISR,sp)
      0011C4 5D               [ 2] 3042 	tnzw x 
      0011C5 26 05            [ 1] 3043     jrne 0$
      0011C7 A6 04            [ 1] 3044 	ld a,#ERR_DIV0 
      0011C9 CC 07 8B         [ 2] 3045 	jp tb_error 
                                   3046 ; check divisor sign 	
      0011CC 9E               [ 1] 3047 0$:	ld a,xh 
      0011CD A5 80            [ 1] 3048 	bcp a,#0x80 
      0011CF 27 03            [ 1] 3049 	jreq 1$
      0011D1 03 01            [ 1] 3050 	cpl (SQUOT,sp)
      0011D3 50               [ 2] 3051 	negw x 
      0011D4 1F 05            [ 2] 3052 1$:	ldw (DIVISR,sp),x
                                   3053 ; check dividend sign 	 
      0011D6 1E 07            [ 2] 3054     ldw x,(DIVIDND,sp)
      0011D8 9E               [ 1] 3055 	ld a,xh 
      0011D9 A5 80            [ 1] 3056 	bcp a,#0x80 
      0011DB 27 05            [ 1] 3057 	jreq 2$ 
      0011DD 03 01            [ 1] 3058 	cpl (SQUOT,sp)
      0011DF 03 02            [ 1] 3059 	cpl (SDIVD,sp)
      0011E1 50               [ 2] 3060 	negw x 
      0011E2 16 05            [ 2] 3061 2$:	ldw y,(DIVISR,sp)
      0011E4 65               [ 2] 3062 	divw x,y
      0011E5 90 CF 00 08      [ 2] 3063 	ldw acc16,y 
                                   3064 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      0011E9 0D 02            [ 1] 3065 	tnz (SDIVD,sp)
      0011EB 27 0B            [ 1] 3066 	jreq 7$
      0011ED 90 5D            [ 2] 3067 	tnzw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011EF 27 07            [ 1] 3068 	jreq 7$
      0011F1 5C               [ 2] 3069 	incw x
      0011F2 16 05            [ 2] 3070 	ldw y,(DIVISR,sp)
      0011F4 72 B2 00 08      [ 2] 3071 	subw y,acc16
      0011F8 0D 01            [ 1] 3072 7$: tnz (SQUOT,sp)
      0011FA 27 01            [ 1] 3073 	jreq 9$ 	 
      0011FC 50               [ 2] 3074 8$:	negw x 
      0011FD                       3075 9$: 
      0011FD                       3076 	_drop VSIZE 
      0011FD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0011FF 81               [ 4] 3077 	ret 
                                   3078 
                                   3079 
                                   3080 ;----------------------------------
                                   3081 ;  remainder resulting from euclidian 
                                   3082 ;  division of n2/n1 
                                   3083 ; input:
                                   3084 ;   N1 		cstack 
                                   3085 ;   N2      cstack
                                   3086 ; output:
                                   3087 ;   X       N2%N1 
                                   3088 ;----------------------------------
                           000003  3089 	N1=3
                           000005  3090 	N2=5
                           000004  3091 	VSIZE=4
      001200                       3092 modulo:
      001200 1E 03            [ 2] 3093 	Ldw x,(N1,sp)
      001202 16 05            [ 2] 3094 	ldw y,(N2,sp)
      001204                       3095 	_vars VSIZE 
      001204 52 04            [ 2]    1     sub sp,#VSIZE 
      001206 1F 01            [ 2] 3096 	ldw (1,sp),x 
      001208 17 03            [ 2] 3097 	ldw (3,sp),y 
      00120A CD 11 BC         [ 4] 3098 	call divide 
      00120D 93               [ 1] 3099 	ldw x,y
      00120E                       3100 	_drop VSIZE 
      00120E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001210 81               [ 4] 3101 	ret 
                                   3102 
                                   3103 
                                   3104 ;----------------------------------
                                   3105 ; search in kword_dict command name
                                   3106 ;  from its execution address 
                                   3107 ; input:
                                   3108 ;   X       	execution address 
                                   3109 ; output:
                                   3110 ;   X 			cstr*  | 0 
                                   3111 ;--------------------------------
                           000001  3112 	XADR=1 
                           000003  3113 	LINK=3 
                           000004  3114 	VSIZE=4
      001211                       3115 cmd_name:
      001211                       3116 	_vars VSIZE 
      001211 52 04            [ 2]    1     sub sp,#VSIZE 
      001213 72 5F 00 08      [ 1] 3117 	clr acc16 
      001217 1F 01            [ 2] 3118 	ldw (XADR,sp),x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001219 AE 26 6F         [ 2] 3119 	ldw x,#kword_dict	
      00121C 1F 03            [ 2] 3120 1$:	ldw (LINK,sp),x
      00121E E6 02            [ 1] 3121 	ld a,(2,x)
      001220 A4 0F            [ 1] 3122 	and a,#15 
      001222 C7 00 09         [ 1] 3123 	ld acc8,a 
      001225 1C 00 03         [ 2] 3124 	addw x,#3
      001228 72 BB 00 08      [ 2] 3125 	addw x,acc16
      00122C FE               [ 2] 3126 	ldw x,(x) ; execution address 
      00122D 13 01            [ 2] 3127 	cpw x,(XADR,sp)
      00122F 27 0A            [ 1] 3128 	jreq 2$
      001231 1E 03            [ 2] 3129 	ldw x,(LINK,sp)
      001233 FE               [ 2] 3130 	ldw x,(x) 
      001234 1D 00 02         [ 2] 3131 	subw x,#2  
      001237 26 E3            [ 1] 3132 	jrne 1$
      001239 20 05            [ 2] 3133 	jra 9$
      00123B 1E 03            [ 2] 3134 2$: ldw x,(LINK,sp)
      00123D 1C 00 02         [ 2] 3135 	addw x,#2 	
      001240                       3136 9$:	_drop VSIZE
      001240 5B 04            [ 2]    1     addw sp,#VSIZE 
      001242 81               [ 4] 3137 	ret
                                   3138 
                                   3139 
                                   3140 ;---------------------------------
                                   3141 ; input:
                                   3142 ;	X 		dictionary entry point 
                                   3143 ;  pad		.asciz name to search 
                                   3144 ; output:
                                   3145 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3146 ;  X		execution address | 0 
                                   3147 ;---------------------------------
                           000001  3148 	NLEN=1 ; cmd length 
                           000002  3149 	YSAVE=2
                           000003  3150 	VSIZE=3 
      001243                       3151 search_dict:
      001243                       3152 	_vars VSIZE 
      001243 52 03            [ 2]    1     sub sp,#VSIZE 
      001245 90 93            [ 1] 3153 	ldw y,x 
      001247                       3154 search_next:	
      001247 90 F6            [ 1] 3155 	ld a,(y)
      001249 A4 0F            [ 1] 3156 	and a,#0xf 
      00124B 6B 01            [ 1] 3157 	ld (NLEN,sp),a  
      00124D AE 17 18         [ 2] 3158 	ldw x,#pad 
      001250 17 02            [ 2] 3159 	ldw (YSAVE,sp),y
      001252 90 5C            [ 2] 3160 	incw y  
      001254                       3161 cp_loop:
      001254 F6               [ 1] 3162 	ld a,(x)
      001255 27 1E            [ 1] 3163 	jreq str_match 
      001257 0D 01            [ 1] 3164 	tnz (NLEN,sp)
      001259 27 0B            [ 1] 3165 	jreq no_match  
      00125B 90 F1            [ 1] 3166 	cp a,(y)
      00125D 26 07            [ 1] 3167 	jrne no_match 
      00125F 90 5C            [ 2] 3168 	incw y 
      001261 5C               [ 2] 3169 	incw x
      001262 0A 01            [ 1] 3170 	dec (NLEN,sp)
      001264 20 EE            [ 2] 3171 	jra cp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001266                       3172 no_match:
      001266 16 02            [ 2] 3173 	ldw y,(YSAVE,sp) 
      001268 72 A2 00 02      [ 2] 3174 	subw y,#2 ; move Y to link field
      00126C 4B 00            [ 1] 3175 	push #TK_NONE 
      00126E 90 FE            [ 2] 3176 	ldw y,(y) ; next word link 
      001270 84               [ 1] 3177 	pop a ; TK_NONE 
      001271 27 21            [ 1] 3178 	jreq search_exit  ; not found  
                                   3179 ;try next 
      001273 20 D2            [ 2] 3180 	jra search_next
      001275                       3181 str_match:
      001275 16 02            [ 2] 3182 	ldw y,(YSAVE,sp)
      001277 90 F6            [ 1] 3183 	ld a,(y)
      001279 6B 01            [ 1] 3184 	ld (NLEN,sp),a ; needed to test keyword type  
      00127B A4 0F            [ 1] 3185 	and a,#0xf 
                                   3186 ; move y to procedure address field 	
      00127D 4C               [ 1] 3187 	inc a 
      00127E C7 00 09         [ 1] 3188 	ld acc8,a 
      001281 72 5F 00 08      [ 1] 3189 	clr acc16 
      001285 72 B9 00 08      [ 2] 3190 	addw y,acc16 
      001289 90 FE            [ 2] 3191 	ldw y,(y) ; routine entry point 
                                   3192 ;determine keyword type bits 7:6 
      00128B 7B 01            [ 1] 3193 	ld a,(NLEN,sp)
      00128D 4E               [ 1] 3194 	swap a 
      00128E A4 0C            [ 1] 3195 	and a,#0xc
      001290 44               [ 1] 3196 	srl a
      001291 44               [ 1] 3197 	srl a 
      001292 AB 06            [ 1] 3198 	add a,#6
      001294                       3199 search_exit: 
      001294 93               [ 1] 3200 	ldw x,y ; x=routine address 
      001295                       3201 	_drop VSIZE 	 
      001295 5B 03            [ 2]    1     addw sp,#VSIZE 
      001297 81               [ 4] 3202 	ret 
                                   3203 
                                   3204 ;---------------------
                                   3205 ; check if next token
                                   3206 ;  is of expected type 
                                   3207 ; input:
                                   3208 ;   A 		 expected token attribute
                                   3209 ;  ouput:
                                   3210 ;   none     if fail call tb_error 
                                   3211 ;--------------------
      001298                       3212 expect:
      001298 88               [ 1] 3213 	push a 
      001299 CD 08 3F         [ 4] 3214 	call next_token 
      00129C 11 01            [ 1] 3215 	cp a,(1,sp)
      00129E 27 03            [ 1] 3216 	jreq 1$
      0012A0 CC 07 89         [ 2] 3217 	jp syntax_error
      0012A3 84               [ 1] 3218 1$: pop a 
      0012A4 81               [ 4] 3219 	ret 
                                   3220 
                                   3221 
                                   3222 ;-------------------------------
                                   3223 ; parse embedded BASIC routines 
                                   3224 ; arguments list.
                                   3225 ; arg_list::=  rel[','rel]*
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3226 ; all arguments are of integer type
                                   3227 ; input:
                                   3228 ;   none
                                   3229 ; output:
                                   3230 ;   A 			number of arguments pushed on dstack  
                                   3231 ;--------------------------------
                           000001  3232 	ARG_CNT=1 
      0012A5                       3233 arg_list:
      0012A5 4B 00            [ 1] 3234 	push #0  
      0012A7 CD 13 ED         [ 4] 3235 1$: call relation
      0012AA A1 00            [ 1] 3236 	cp a,#TK_NONE 
      0012AC 27 19            [ 1] 3237 	jreq 5$
      0012AE A1 04            [ 1] 3238 	cp a,#TK_INTGR
      0012B0 26 12            [ 1] 3239 	jrne 4$
      0012B2 CD 10 77         [ 4] 3240 3$: call dpush 
      0012B5 0C 01            [ 1] 3241     inc (ARG_CNT,sp)
      0012B7 CD 08 3F         [ 4] 3242 	call next_token 
      0012BA A1 00            [ 1] 3243 	cp a,#TK_NONE 
      0012BC 27 09            [ 1] 3244 	jreq 5$ 
      0012BE A1 0D            [ 1] 3245 	cp a,#TK_COMMA 
      0012C0 26 02            [ 1] 3246 	jrne 4$
      0012C2 20 E3            [ 2] 3247 	jra 1$ 
      0012C4 CD 10 71         [ 4] 3248 4$:	call unget_token 
      0012C7 84               [ 1] 3249 5$:	pop a 
      0012C8 81               [ 4] 3250 	ret 
                                   3251 
                                   3252 
      0012C9                       3253 func_args:
      0012C9 A6 0B            [ 1] 3254 	ld a,#TK_LPAREN 
      0012CB CD 12 98         [ 4] 3255 	call expect 
      0012CE CD 12 A5         [ 4] 3256 	call arg_list 
      0012D1 88               [ 1] 3257 	push a 
      0012D2 A6 0C            [ 1] 3258 	ld a,#TK_RPAREN 
      0012D4 CD 12 98         [ 4] 3259 	call expect 
      0012D7 84               [ 1] 3260 	pop a 
      0012D8 81               [ 4] 3261 	ret 
                                   3262 
                                   3263 
                                   3264 ;--------------------------------
                                   3265 ;   BASIC commnands 
                                   3266 ;--------------------------------
                                   3267 
                                   3268 ;--------------------------------
                                   3269 ;  arithmetic and relational 
                                   3270 ;  routines
                                   3271 ;  operators precedence
                                   3272 ;  highest to lowest
                                   3273 ;  operators on same row have 
                                   3274 ;  same precedence and are executed
                                   3275 ;  from left to right.
                                   3276 ;	'*','/','%'
                                   3277 ;   '-','+'
                                   3278 ;   '=','>','<','>=','<=','<>','><'
                                   3279 ;   '<>' and '><' are equivalent for not equal.
                                   3280 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3281 
                                   3282 ;---------------------
                                   3283 ; return array element
                                   3284 ; address from @(expr)
                                   3285 ; input:
                                   3286 ;   A 		TK_ARRAY
                                   3287 ; output:
                                   3288 ;   A 		TK_INTGR
                                   3289 ;	X 		element address 
                                   3290 ;----------------------
      0012D9                       3291 get_array_element:
      0012D9 CD 12 C9         [ 4] 3292 	call func_args 
      0012DC A1 01            [ 1] 3293 	cp a,#1
      0012DE 27 03            [ 1] 3294 	jreq 1$
      0012E0 CC 07 89         [ 2] 3295 	jp syntax_error
      0012E3 CD 10 84         [ 4] 3296 1$: call dpop  
                                   3297 	; check for bounds 
      0012E6 C3 00 1F         [ 2] 3298 	cpw x,array_size 
      0012E9 23 05            [ 2] 3299 	jrule 3$
                                   3300 ; bounds {1..array_size}	
      0012EB A6 0A            [ 1] 3301 2$: ld a,#ERR_BAD_VALUE 
      0012ED CC 07 8B         [ 2] 3302 	jp tb_error 
      0012F0 5D               [ 2] 3303 3$: tnzw  x
      0012F1 27 F8            [ 1] 3304 	jreq 2$ 
      0012F3 58               [ 2] 3305 	sllw x 
      0012F4 89               [ 2] 3306 	pushw x 
      0012F5 AE 16 C8         [ 2] 3307 	ldw x,#tib
      0012F8 72 F0 01         [ 2] 3308 	subw x,(1,sp)
      0012FB                       3309 	_drop 2   
      0012FB 5B 02            [ 2]    1     addw sp,#2 
      0012FD A6 04            [ 1] 3310 	ld a,#TK_INTGR
      0012FF 81               [ 4] 3311 	ret 
                                   3312 
                                   3313 ;***********************************
                                   3314 ;   expression parse,execute 
                                   3315 ;***********************************
                                   3316 ;-----------------------------------
                                   3317 ; factor ::= ['+'|'-'|e] var | @ |
                                   3318 ;			 integer | function |
                                   3319 ;			 '('relation')' 
                                   3320 ; output:
                                   3321 ;   A    token attribute 
                                   3322 ;   X 	 integer
                                   3323 ; ---------------------------------
                           000001  3324 	NEG=1
                           000001  3325 	VSIZE=1
      001300                       3326 factor:
      001300                       3327 	_vars VSIZE 
      001300 52 01            [ 2]    1     sub sp,#VSIZE 
      001302 CD 08 3F         [ 4] 3328 	call next_token
      001305 A1 02            [ 1] 3329 	cp a,#CMD_END 
      001307 2B 50            [ 1] 3330 	jrmi 20$
      001309 6B 01            [ 1] 3331 1$:	ld (NEG,sp),a 
      00130B A4 30            [ 1] 3332 	and a,#TK_GRP_MASK
      00130D A1 10            [ 1] 3333 	cp a,#TK_GRP_ADD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00130F 27 04            [ 1] 3334 	jreq 2$
      001311 7B 01            [ 1] 3335 	ld a,(NEG,sp)
      001313 20 03            [ 2] 3336 	jra 4$  
      001315                       3337 2$:	
      001315 CD 08 3F         [ 4] 3338 	call next_token 
      001318                       3339 4$:	
      001318 A1 07            [ 1] 3340 	cp a,#TK_IFUNC 
      00131A 26 03            [ 1] 3341 	jrne 5$ 
      00131C FD               [ 4] 3342 	call (x) 
      00131D 20 31            [ 2] 3343 	jra 18$ 
      00131F                       3344 5$:
      00131F A1 04            [ 1] 3345 	cp a,#TK_INTGR
      001321 26 02            [ 1] 3346 	jrne 6$
      001323 20 2B            [ 2] 3347 	jra 18$
      001325                       3348 6$:
      001325 A1 02            [ 1] 3349 	cp a,#TK_ARRAY
      001327 26 06            [ 1] 3350 	jrne 10$
      001329 CD 12 D9         [ 4] 3351 	call get_array_element
      00132C FE               [ 2] 3352 	ldw x,(x)
      00132D 20 21            [ 2] 3353 	jra 18$ 
      00132F                       3354 10$:
      00132F A1 05            [ 1] 3355 	cp a,#TK_VAR 
      001331 26 03            [ 1] 3356 	jrne 11$
      001333 FE               [ 2] 3357 	ldw x,(x)
      001334 20 1A            [ 2] 3358 	jra 18$
      001336                       3359 11$: 
      001336 A1 09            [ 1] 3360 	cp a,#TK_CONST 
      001338 27 16            [ 1] 3361 	jreq 18$
      00133A                       3362 12$:			
      00133A A1 0B            [ 1] 3363 	cp a,#TK_LPAREN
      00133C 26 0C            [ 1] 3364 	jrne 16$
      00133E CD 13 ED         [ 4] 3365 	call relation
      001341 89               [ 2] 3366 	pushw x 
      001342 A6 0C            [ 1] 3367 	ld a,#TK_RPAREN 
      001344 CD 12 98         [ 4] 3368 	call expect
      001347 85               [ 2] 3369 	popw x 
      001348 20 06            [ 2] 3370 	jra 18$	
      00134A                       3371 16$:
      00134A CD 10 71         [ 4] 3372 	call unget_token
      00134D 4F               [ 1] 3373 	clr a 
      00134E 20 09            [ 2] 3374 	jra 20$ 
      001350                       3375 18$: 
      001350 A6 11            [ 1] 3376 	ld a,#TK_MINUS 
      001352 11 01            [ 1] 3377 	cp a,(NEG,sp)
      001354 26 01            [ 1] 3378 	jrne 19$
      001356 50               [ 2] 3379 	negw x
      001357                       3380 19$:
      001357 A6 04            [ 1] 3381 	ld a,#TK_INTGR
      001359                       3382 20$:
      001359                       3383 	_drop VSIZE
      001359 5B 01            [ 2]    1     addw sp,#VSIZE 
      00135B 81               [ 4] 3384 	ret
                                   3385 
                                   3386 ;-----------------------------------
                                   3387 ; term ::= factor [['*'|'/'|'%'] factor]* 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3388 ; output:
                                   3389 ;   A    	token attribute 
                                   3390 ;	X		integer
                                   3391 ;-----------------------------------
                           000001  3392 	N1=1
                           000003  3393 	N2=3
                           000005  3394 	MULOP=5
                           000005  3395 	VSIZE=5
      00135C                       3396 term:
      00135C                       3397 	_vars VSIZE
      00135C 52 05            [ 2]    1     sub sp,#VSIZE 
      00135E CD 13 00         [ 4] 3398 	call factor
      001361 A1 02            [ 1] 3399 	cp a,#CMD_END
      001363 2B 41            [ 1] 3400 	jrmi term_exit
      001365                       3401 term01:	 ; check for  operator 
      001365 1F 03            [ 2] 3402 	ldw (N2,sp),x  ; save first factor 
      001367 CD 08 3F         [ 4] 3403 	call next_token
      00136A A1 02            [ 1] 3404 	cp a,#2
      00136C 2B 34            [ 1] 3405 	jrmi 9$
      00136E 6B 05            [ 1] 3406 0$:	ld (MULOP,sp),a
      001370 A4 30            [ 1] 3407 	and a,#TK_GRP_MASK
      001372 A1 20            [ 1] 3408 	cp a,#TK_GRP_MULT
      001374 27 07            [ 1] 3409 	jreq 1$
      001376 7B 05            [ 1] 3410 	ld a,(MULOP,sp) 
      001378 CD 10 71         [ 4] 3411 	call unget_token 
      00137B 20 25            [ 2] 3412 	jra 9$
      00137D                       3413 1$:	; got *|/|%
      00137D CD 13 00         [ 4] 3414 	call factor
      001380 A1 04            [ 1] 3415 	cp a,#TK_INTGR
      001382 27 03            [ 1] 3416 	jreq 2$ 
      001384 CC 07 89         [ 2] 3417 	jp syntax_error
      001387 1F 01            [ 2] 3418 2$:	ldw (N1,sp),x  
      001389 7B 05            [ 1] 3419 	ld a,(MULOP,sp) 
      00138B A1 20            [ 1] 3420 	cp a,#TK_MULT 
      00138D 26 05            [ 1] 3421 	jrne 3$
      00138F CD 11 74         [ 4] 3422 	call multiply 
      001392 20 D1            [ 2] 3423 	jra term01
      001394 A1 21            [ 1] 3424 3$: cp a,#TK_DIV 
      001396 26 05            [ 1] 3425 	jrne 4$ 
      001398 CD 11 BC         [ 4] 3426 	call divide 
      00139B 20 C8            [ 2] 3427 	jra term01 
      00139D CD 12 00         [ 4] 3428 4$: call modulo
      0013A0 20 C3            [ 2] 3429 	jra term01 
      0013A2 1E 03            [ 2] 3430 9$: ldw x,(N2,sp)  
      0013A4 A6 04            [ 1] 3431 	ld a,#TK_INTGR 	
      0013A6                       3432 term_exit:
      0013A6                       3433 	_drop VSIZE 
      0013A6 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013A8 81               [ 4] 3434 	ret 
                                   3435 
                                   3436 ;-------------------------------
                                   3437 ;  expr ::= term [['+'|'-'] term]*
                                   3438 ;  result range {-32768..32767}
                                   3439 ;  output:
                                   3440 ;   A    token attribute 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3441 ;   X	 integer   
                                   3442 ;-------------------------------
                           000001  3443 	N1=1 
                           000003  3444 	N2=3
                           000005  3445 	OP=5 
                           000005  3446 	VSIZE=5 
      0013A9                       3447 expression:
      0013A9                       3448 	_vars VSIZE 
      0013A9 52 05            [ 2]    1     sub sp,#VSIZE 
      0013AB CD 13 5C         [ 4] 3449 	call term
      0013AE A1 02            [ 1] 3450 	cp a,#CMD_END 
      0013B0 2B 38            [ 1] 3451 	jrmi expr_exit 
      0013B2 1F 03            [ 2] 3452 0$:	ldw (N2,sp),x 
      0013B4 CD 08 3F         [ 4] 3453 	call next_token
      0013B7 A1 02            [ 1] 3454 	cp a,#2
      0013B9 2B 2B            [ 1] 3455 	jrmi 9$ 
      0013BB 6B 05            [ 1] 3456 1$:	ld (OP,sp),a  
      0013BD A4 30            [ 1] 3457 	and a,#TK_GRP_MASK
      0013BF A1 10            [ 1] 3458 	cp a,#TK_GRP_ADD 
      0013C1 27 07            [ 1] 3459 	jreq 2$ 
      0013C3 7B 05            [ 1] 3460 	ld a,(OP,sp)
      0013C5 CD 10 71         [ 4] 3461 	call unget_token
      0013C8 20 1C            [ 2] 3462 	jra 9$
      0013CA                       3463 2$: 
      0013CA CD 13 5C         [ 4] 3464 	call term
      0013CD A1 04            [ 1] 3465 	cp a,#TK_INTGR 
      0013CF 27 03            [ 1] 3466 	jreq 3$
      0013D1 CC 07 89         [ 2] 3467 	jp syntax_error
      0013D4 1F 01            [ 2] 3468 3$:	ldw (N1,sp),x 
      0013D6 7B 05            [ 1] 3469 	ld a,(OP,sp)
      0013D8 A1 10            [ 1] 3470 	cp a,#TK_PLUS 
      0013DA 26 05            [ 1] 3471 	jrne 4$
      0013DC CD 11 66         [ 4] 3472 	call add 
      0013DF 20 D1            [ 2] 3473 	jra 0$ 
      0013E1 CD 11 6E         [ 4] 3474 4$:	call substract
      0013E4 20 CC            [ 2] 3475 	jra 0$
      0013E6 1E 03            [ 2] 3476 9$: ldw x,(N2,sp)
      0013E8 A6 04            [ 1] 3477 	ld a,#TK_INTGR	
      0013EA                       3478 expr_exit:
      0013EA                       3479 	_drop VSIZE 
      0013EA 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013EC 81               [ 4] 3480 	ret 
                                   3481 
                                   3482 ;---------------------------------------------
                                   3483 ; rel ::= expr rel_op expr
                                   3484 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3485 ;  relation return 1 | 0  for true | false 
                                   3486 ;  output:
                                   3487 ;    A 		token attribute  
                                   3488 ;	 X		1|0
                                   3489 ;---------------------------------------------
                           000001  3490 	N1=1
                           000003  3491 	N2=3
                           000005  3492 	RELOP=5
                           000005  3493 	VSIZE=5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013ED                       3494 relation: 
      0013ED                       3495 	_vars VSIZE
      0013ED 52 05            [ 2]    1     sub sp,#VSIZE 
      0013EF CD 13 A9         [ 4] 3496 	call expression
      0013F2 A1 02            [ 1] 3497 	cp a,#CMD_END  
      0013F4 2B 4B            [ 1] 3498 	jrmi rel_exit 
                                   3499 	; expect rel_op or leave 
      0013F6 1F 03            [ 2] 3500 	ldw (N2,sp),x 
      0013F8 CD 08 3F         [ 4] 3501 	call next_token 
      0013FB A1 02            [ 1] 3502 	cp a,#2
      0013FD 2B 3E            [ 1] 3503 	jrmi 9$
      0013FF                       3504 1$:	
      0013FF 6B 05            [ 1] 3505 	ld (RELOP,sp),a 
      001401 A4 30            [ 1] 3506 	and a,#TK_GRP_MASK
      001403 A1 30            [ 1] 3507 	cp a,#TK_GRP_RELOP 
      001405 27 07            [ 1] 3508 	jreq 2$
      001407 7B 05            [ 1] 3509 	ld a,(RELOP,sp)
      001409 CD 10 71         [ 4] 3510 	call unget_token  
      00140C 20 2F            [ 2] 3511 	jra 9$
      00140E                       3512 2$:	; expect another expression or error 
      00140E CD 13 A9         [ 4] 3513 	call expression
      001411 A1 04            [ 1] 3514 	cp a,#TK_INTGR 
      001413 27 03            [ 1] 3515 	jreq 3$
      001415 CC 07 89         [ 2] 3516 	jp syntax_error 
      001418 1F 01            [ 2] 3517 3$:	ldw (N1,sp),x 
      00141A CD 11 6E         [ 4] 3518 	call substract
      00141D 26 06            [ 1] 3519 	jrne 4$
      00141F 35 02 00 09      [ 1] 3520 	mov acc8,#2 ; n1==n2
      001423 20 0C            [ 2] 3521 	jra 6$ 
      001425                       3522 4$: 
      001425 2C 06            [ 1] 3523 	jrsgt 5$  
      001427 35 04 00 09      [ 1] 3524 	mov acc8,#4 ; n1<2 
      00142B 20 04            [ 2] 3525 	jra 6$
      00142D                       3526 5$:
      00142D 35 01 00 09      [ 1] 3527 	mov acc8,#1 ; n1>n2 
      001431                       3528 6$:
      001431 5F               [ 1] 3529 	clrw x 
      001432 C6 00 09         [ 1] 3530 	ld a, acc8  
      001435 14 05            [ 1] 3531 	and a,(RELOP,sp)
      001437 4D               [ 1] 3532 	tnz a 
      001438 27 05            [ 1] 3533 	jreq 10$
      00143A 5C               [ 2] 3534 	incw x 
      00143B                       3535 7$:	 
      00143B 20 02            [ 2] 3536 	jra 10$  	
      00143D 1E 03            [ 2] 3537 9$: ldw x,(N2,sp)
      00143F                       3538 10$:
      00143F A6 04            [ 1] 3539 	ld a,#TK_INTGR
      001441                       3540 rel_exit: 	 
      001441                       3541 	_drop VSIZE
      001441 5B 05            [ 2]    1     addw sp,#VSIZE 
      001443 81               [ 4] 3542 	ret 
                                   3543 
                                   3544 ;--------------------------------
                                   3545 ; BASIC: SHOW 
                                   3546 ;  show content of dstack,cstack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3547 ;--------------------------------
      001444                       3548 show:
      001444 C6 00 06         [ 1] 3549 	ld a,base 
      001447 88               [ 1] 3550 	push a 
      001448 CD 11 05         [ 4] 3551 	call dots
      00144B CD 11 39         [ 4] 3552 	call dotr 
      00144E 84               [ 1] 3553 	pop a 
      00144F C7 00 06         [ 1] 3554 	ld base,a 
      001452 4F               [ 1] 3555 	clr a 
      001453 81               [ 4] 3556 	ret
                                   3557 
                                   3558 ;--------------------------------------------
                                   3559 ; BASIC: HEX 
                                   3560 ; select hexadecimal base for integer print
                                   3561 ;---------------------------------------------
      001454                       3562 hex_base:
      001454 35 10 00 06      [ 1] 3563 	mov base,#16 
      001458 81               [ 4] 3564 	ret 
                                   3565 
                                   3566 ;--------------------------------------------
                                   3567 ; BASIC: DEC 
                                   3568 ; select decimal base for integer print
                                   3569 ;---------------------------------------------
      001459                       3570 dec_base:
      001459 35 0A 00 06      [ 1] 3571 	mov base,#10
      00145D 81               [ 4] 3572 	ret 
                                   3573 
                                   3574 ;------------------------
                                   3575 ; BASIC: SIZE 
                                   3576 ; return free size in text area
                                   3577 ; output:
                                   3578 ;   A 		TK_INTGR
                                   3579 ;   X 	    size integer
                                   3580 ;--------------------------
      00145E                       3581 size:
      00145E AE 16 C8         [ 2] 3582 	ldw x,#tib 
      001461 72 B0 00 1C      [ 2] 3583 	subw x,txtend 
      001465 A6 04            [ 1] 3584 	ld a,#TK_INTGR
      001467 81               [ 4] 3585 	ret 
                                   3586 
                                   3587 
                                   3588 ;------------------------
                                   3589 ; BASIC: UBOUND  
                                   3590 ; return array variable size 
                                   3591 ; output:
                                   3592 ;   A 		TK_INTGR
                                   3593 ;   X 	    array size 
                                   3594 ;--------------------------
      001468                       3595 ubound:
      001468 AE 16 C8         [ 2] 3596 	ldw x,#tib
      00146B 72 B0 00 1C      [ 2] 3597 	subw x,txtend 
      00146F 90 CE 00 04      [ 2] 3598 	ldw y,basicptr 
      001473 90 C3 00 1C      [ 2] 3599 	cpw y,txtend 
      001477 25 0A            [ 1] 3600 	jrult 1$
      001479 3B 00 03         [ 1] 3601 	push count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00147C 4B 00            [ 1] 3602 	push #0 
      00147E 72 F0 01         [ 2] 3603 	subw x,(1,sp)
      001481                       3604 	_drop 2 
      001481 5B 02            [ 2]    1     addw sp,#2 
      001483 54               [ 2] 3605 1$:	srlw x 
      001484 CF 00 1F         [ 2] 3606 	ldw array_size,x
      001487 A6 04            [ 1] 3607 	ld a,#TK_INTGR
      001489 81               [ 4] 3608 	ret 
                                   3609 
                                   3610 ;-----------------------------
                                   3611 ; BASIC: LET var=expr 
                                   3612 ; variable assignement 
                                   3613 ; output:
                                   3614 ;   A 		TK_NONE 
                                   3615 ;-----------------------------
      00148A                       3616 let:
      00148A CD 08 3F         [ 4] 3617 	call next_token 
      00148D A1 05            [ 1] 3618 	cp a,#TK_VAR 
      00148F 27 03            [ 1] 3619 	jreq let02
      001491 CC 07 89         [ 2] 3620 	jp syntax_error
      001494                       3621 let02:
      001494 CD 10 77         [ 4] 3622 	call dpush 
      001497 CD 08 3F         [ 4] 3623 	call next_token 
      00149A A1 32            [ 1] 3624 	cp a,#TK_EQUAL
      00149C 27 03            [ 1] 3625 	jreq 1$
      00149E CC 07 89         [ 2] 3626 	jp syntax_error
      0014A1                       3627 1$:	
      0014A1 CD 13 ED         [ 4] 3628 	call relation   
      0014A4 A1 04            [ 1] 3629 	cp a,#TK_INTGR 
      0014A6 27 03            [ 1] 3630 	jreq 2$
      0014A8 CC 07 89         [ 2] 3631 	jp syntax_error
      0014AB                       3632 2$:	
      0014AB 90 93            [ 1] 3633 	ldw y,x 
      0014AD CD 10 84         [ 4] 3634 	call dpop  
      0014B0 FF               [ 2] 3635 	ldw (x),y   
      0014B1 81               [ 4] 3636 	ret 
                                   3637 
                                   3638 ;----------------------------
                                   3639 ; BASIC: LIST [[start][,end]]
                                   3640 ; list program lines 
                                   3641 ; form start to end 
                                   3642 ; if empty argument list then 
                                   3643 ; list all.
                                   3644 ;----------------------------
                           000001  3645 	FIRST=1
                           000003  3646 	LAST=3 
                           000005  3647 	LN_PTR=5
                           000006  3648 	VSIZE=6 
      0014B2                       3649 list:
      0014B2                       3650 	_vars VSIZE
      0014B2 52 06            [ 2]    1     sub sp,#VSIZE 
      0014B4 CE 00 1A         [ 2] 3651 	ldw x,txtbgn 
      0014B7 C3 00 1C         [ 2] 3652 	cpw x,txtend 
      0014BA 2B 03            [ 1] 3653 	jrmi 1$
      0014BC CC 15 34         [ 2] 3654 	jp list_exit ; nothing to list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014BF 1F 05            [ 2] 3655 1$:	ldw (LN_PTR,sp),x 
      0014C1 FE               [ 2] 3656 	ldw x,(x) 
      0014C2 1F 01            [ 2] 3657 	ldw (FIRST,sp),x ; list from first line 
      0014C4 AE 7F FF         [ 2] 3658 	ldw x,#0x7fff ; biggest line number 
      0014C7 1F 03            [ 2] 3659 	ldw (LAST,sp),x 
      0014C9 CD 12 A5         [ 4] 3660 	call arg_list
      0014CC 4D               [ 1] 3661 	tnz a
      0014CD 27 3F            [ 1] 3662 	jreq list_start 
      0014CF A1 02            [ 1] 3663 	cp a,#2 
      0014D1 27 07            [ 1] 3664 	jreq 4$
      0014D3 A1 01            [ 1] 3665 	cp a,#1 
      0014D5 27 06            [ 1] 3666 	jreq first_line 
      0014D7 CC 07 89         [ 2] 3667 	jp syntax_error 
      0014DA CD 10 91         [ 4] 3668 4$:	call dswap
      0014DD                       3669 first_line:
      0014DD CD 10 84         [ 4] 3670 	call dpop 
      0014E0 1F 01            [ 2] 3671 	ldw (FIRST,sp),x 
      0014E2 A1 01            [ 1] 3672 	cp a,#1 
      0014E4 27 05            [ 1] 3673 	jreq lines_skip 	
      0014E6                       3674 last_line:
      0014E6 CD 10 84         [ 4] 3675 	call dpop 
      0014E9 1F 03            [ 2] 3676 	ldw (LAST,sp),x 
      0014EB                       3677 lines_skip:
      0014EB CE 00 1A         [ 2] 3678 	ldw x,txtbgn
      0014EE 1F 05            [ 2] 3679 2$:	ldw (LN_PTR,sp),x 
      0014F0 C3 00 1C         [ 2] 3680 	cpw x,txtend 
      0014F3 2A 3F            [ 1] 3681 	jrpl list_exit 
      0014F5 FE               [ 2] 3682 	ldw x,(x) ;line# 
      0014F6 13 01            [ 2] 3683 	cpw x,(FIRST,sp)
      0014F8 2A 14            [ 1] 3684 	jrpl list_start 
      0014FA 1E 05            [ 2] 3685 	ldw x,(LN_PTR,sp) 
      0014FC 1C 00 02         [ 2] 3686 	addw x,#2 
      0014FF F6               [ 1] 3687 	ld a,(x)
      001500 5C               [ 2] 3688 	incw x 
      001501 C7 00 09         [ 1] 3689 	ld acc8,a 
      001504 72 5F 00 08      [ 1] 3690 	clr acc16 
      001508 72 BB 00 08      [ 2] 3691 	addw x,acc16
      00150C 20 E0            [ 2] 3692 	jra 2$ 
                                   3693 ; print loop
      00150E                       3694 list_start:
      00150E 1E 05            [ 2] 3695 	ldw x,(LN_PTR,sp)
      001510 E6 02            [ 1] 3696 3$:	ld a,(2,x) 
      001512 CD 15 87         [ 4] 3697 	call prt_basic_line
      001515 1E 05            [ 2] 3698 	ldw x,(LN_PTR,sp)
      001517 E6 02            [ 1] 3699 	ld a,(2,x)
      001519 C7 00 09         [ 1] 3700 	ld acc8,a 
      00151C 72 5F 00 08      [ 1] 3701 	clr acc16 
      001520 72 BB 00 08      [ 2] 3702 	addw x,acc16
      001524 C3 00 1C         [ 2] 3703 	cpw x,txtend 
      001527 2A 0B            [ 1] 3704 	jrpl list_exit
      001529 1F 05            [ 2] 3705 	ldw (LN_PTR,sp),x
      00152B FE               [ 2] 3706 	ldw x,(x)
      00152C 13 03            [ 2] 3707 	cpw x,(LAST,sp)  
      00152E 2C 04            [ 1] 3708 	jrsgt list_exit 
      001530 1E 05            [ 2] 3709 	ldw x,(LN_PTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001532 20 DC            [ 2] 3710 	jra 3$
      001534                       3711 list_exit:
      001534                       3712 	_drop VSIZE 
      001534 5B 06            [ 2]    1     addw sp,#VSIZE 
      001536 81               [ 4] 3713 	ret
                                   3714 
                                   3715 ;-------------------------
                                   3716 ; print counted string 
                                   3717 ; input:
                                   3718 ;   X 		address of string
                                   3719 ;--------------------------
      001537                       3720 prt_cmd_name:
      001537 F6               [ 1] 3721 	ld a,(x)
      001538 5C               [ 2] 3722 	incw x
      001539 A4 0F            [ 1] 3723 	and a,#15  
      00153B 88               [ 1] 3724 	push a 
      00153C 0D 01            [ 1] 3725 1$: tnz (1,sp) 
      00153E 27 09            [ 1] 3726 	jreq 9$
      001540 F6               [ 1] 3727 	ld a,(x)
      001541 CD 01 CB         [ 4] 3728 	call putc 
      001544 5C               [ 2] 3729 	incw x
      001545 0A 01            [ 1] 3730 	dec (1,sp)	 
      001547 20 F3            [ 2] 3731 	jra 1$
      001549 84               [ 1] 3732 9$: pop a 
      00154A 81               [ 4] 3733 	ret	
                                   3734 
                                   3735 ;--------------------------
                                   3736 ; print TK_QSTR
                                   3737 ; converting control character
                                   3738 ; to backslash sequence
                                   3739 ; input:
                                   3740 ;   X        char *
                                   3741 ;-----------------------------
      00154B                       3742 prt_quote:
      00154B A6 22            [ 1] 3743 	ld a,#'"
      00154D CD 01 CB         [ 4] 3744 	call putc 
      001550 F6               [ 1] 3745 1$:	ld a,(x)
      001551 27 2D            [ 1] 3746 	jreq 9$
      001553 5C               [ 2] 3747 	incw x 
      001554 A1 20            [ 1] 3748 	cp a,#SPACE 
      001556 25 0C            [ 1] 3749 	jrult 3$
      001558 CD 01 CB         [ 4] 3750 	call putc
      00155B A1 5C            [ 1] 3751 	cp a,#'\ 
      00155D 26 F1            [ 1] 3752 	jrne 1$ 
      00155F                       3753 2$:
      00155F CD 01 CB         [ 4] 3754 	call putc 
      001562 20 EC            [ 2] 3755 	jra 1$
      001564 88               [ 1] 3756 3$: push a 
      001565 A6 5C            [ 1] 3757 	ld a,#'\
      001567 CD 01 CB         [ 4] 3758 	call putc 
      00156A 84               [ 1] 3759 	pop a 
      00156B A0 07            [ 1] 3760 	sub a,#7
      00156D C7 00 09         [ 1] 3761 	ld acc8,a 
      001570 72 5F 00 08      [ 1] 3762 	clr acc16
      001574 90 AE 0D 40      [ 2] 3763 	ldw y,#escaped 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001578 72 B9 00 08      [ 2] 3764 	addw y,acc16 
      00157C 90 F6            [ 1] 3765 	ld a,(y)
      00157E 20 DF            [ 2] 3766 	jra 2$
      001580 A6 22            [ 1] 3767 9$: ld a,#'"
      001582 CD 01 CB         [ 4] 3768 	call putc 
      001585 5C               [ 2] 3769 	incw x 
      001586 81               [ 4] 3770 	ret
                                   3771 
                                   3772 
                                   3773 ;--------------------------
                                   3774 ; decompile line from token list 
                                   3775 ; input:
                                   3776 ;   A       stop at this position 
                                   3777 ;   X 		pointer at line
                                   3778 ; output:
                                   3779 ;   none 
                                   3780 ;--------------------------	
                           000001  3781 	BASE_SAV=1
                           000002  3782 	WIDTH_SAV=2
                           000003  3783 	XSAVE=3
                           000005  3784 	LLEN=5
                           000005  3785 	VSIZE=5 
      001587                       3786 prt_basic_line:
      001587                       3787 	_vars VSIZE
      001587 52 05            [ 2]    1     sub sp,#VSIZE 
      001589 6B 05            [ 1] 3788 	ld (LLEN,sp),a  
      00158B C6 00 06         [ 1] 3789 	ld a,base
      00158E 6B 01            [ 1] 3790 	ld (BASE_SAV,sp),a  
      001590 C6 00 22         [ 1] 3791 	ld a,tab_width 
      001593 6B 02            [ 1] 3792 	ld (WIDTH_SAV,sp),a 
      001595 CF 00 13         [ 2] 3793 	ldw ptr16,x
      001598 FE               [ 2] 3794 	ldw x,(x)
      001599 35 0A 00 06      [ 1] 3795 	mov base,#10
      00159D 35 05 00 22      [ 1] 3796 	mov tab_width,#5
      0015A1 CD 0A 7E         [ 4] 3797 	call print_int ; print line number 
      0015A4 A6 20            [ 1] 3798 	ld a,#SPACE 
      0015A6 CD 01 CB         [ 4] 3799 	call putc 
      0015A9 72 5F 00 22      [ 1] 3800 	clr tab_width
      0015AD AE 00 03         [ 2] 3801 	ldw x,#3
      0015B0 9F               [ 1] 3802 1$:	ld a,xl 
      0015B1 11 05            [ 1] 3803 	cp a,(LLEN,sp)
      0015B3 2B 03            [ 1] 3804 	jrmi 20$
      0015B5 CC 16 BF         [ 2] 3805 	jp 90$
      0015B8                       3806 20$:	 
      0015B8 72 D6 00 13      [ 4] 3807 	ld a,([ptr16],x)
      0015BC 5C               [ 2] 3808 	incw x 
      0015BD 1F 03            [ 2] 3809 	ldw (XSAVE,sp),x 
      0015BF A1 06            [ 1] 3810 	cp a,#TK_CMD 
      0015C1 25 44            [ 1] 3811 	jrult 5$
      0015C3 A1 09            [ 1] 3812 	cp a,#TK_CONST 
      0015C5 22 2F            [ 1] 3813 	jrugt 4$
      0015C7                       3814 2$:	
      0015C7 72 DE 00 13      [ 5] 3815 	ldw x,([ptr16],x)
      0015CB A3 17 EF         [ 2] 3816 	cpw x,#rem 
      0015CE 26 14            [ 1] 3817 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015D0 A6 27            [ 1] 3818 	ld a,#''
      0015D2 CD 01 CB         [ 4] 3819 	call putc 
      0015D5 1E 03            [ 2] 3820 	ldw x,(XSAVE,sp)
      0015D7 1C 00 02         [ 2] 3821 	addw x,#2
      0015DA 72 BB 00 13      [ 2] 3822 	addw x,ptr16  
      0015DE CD 01 DE         [ 4] 3823 	call puts 
      0015E1 CC 16 BF         [ 2] 3824 	jp 90$ 
      0015E4 CD 12 11         [ 4] 3825 3$:	call cmd_name
      0015E7 CD 15 37         [ 4] 3826 	call prt_cmd_name
      0015EA A6 20            [ 1] 3827 	ld a,#SPACE 
      0015EC CD 01 CB         [ 4] 3828 	call putc 
      0015EF 1E 03            [ 2] 3829 	ldw x,(XSAVE,sp)
      0015F1 1C 00 02         [ 2] 3830 	addw x,#2
      0015F4 20 BA            [ 2] 3831 	jra 1$
      0015F6 A1 0A            [ 1] 3832 4$: cp a,#TK_QSTR 
      0015F8 26 0D            [ 1] 3833 	jrne 5$
      0015FA 72 BB 00 13      [ 2] 3834 	addw x,ptr16
      0015FE CD 15 4B         [ 4] 3835 	call prt_quote 
      001601 72 B0 00 13      [ 2] 3836 	subw x,ptr16  
      001605 20 A9            [ 2] 3837 	jra 1$
      001607 A1 05            [ 1] 3838 5$:	cp a,#TK_VAR
      001609 26 1A            [ 1] 3839 	jrne 6$ 
      00160B 72 DE 00 13      [ 5] 3840 	ldw x,([ptr16],x)
      00160F 1D 00 24         [ 2] 3841 	subw x,#vars 
      001612 9F               [ 1] 3842 	ld a,xl
      001613 44               [ 1] 3843 	srl a 
      001614 AB 41            [ 1] 3844 	add a,#'A 
      001616 CD 01 CB         [ 4] 3845 	call putc 
      001619 A6 20            [ 1] 3846 	ld a,#SPACE 
      00161B CD 01 CB         [ 4] 3847 	call putc 
      00161E 1E 03            [ 2] 3848 	ldw x,(XSAVE,sp)
      001620 1C 00 02         [ 2] 3849 	addw x,#2 
      001623 20 8B            [ 2] 3850 	jra 1$ 
      001625 A1 02            [ 1] 3851 6$: cp a,#TK_ARRAY 
      001627 26 0A            [ 1] 3852 	jrne 7$
      001629 A6 40            [ 1] 3853 	ld a,#'@ 
      00162B CD 01 CB         [ 4] 3854 	call putc 
      00162E 1E 03            [ 2] 3855 	ldw x,(XSAVE,sp)
      001630 CC 15 B0         [ 2] 3856 	jp 1$ 
      001633 A1 04            [ 1] 3857 7$: cp a,#TK_INTGR 
      001635 26 14            [ 1] 3858 	jrne 8$
      001637 72 DE 00 13      [ 5] 3859 	ldw x,([ptr16],x)
      00163B CD 0A 7E         [ 4] 3860 	call print_int
      00163E A6 20            [ 1] 3861 	ld a,#SPACE 
      001640 CD 01 CB         [ 4] 3862 	call putc 
      001643 1E 03            [ 2] 3863 	ldw x,(XSAVE,sp)
      001645 1C 00 02         [ 2] 3864 	addw x,#2 
      001648 CC 15 B0         [ 2] 3865 	jp 1$
      00164B A1 31            [ 1] 3866 8$: cp a,#TK_GT 
      00164D 2B 1A            [ 1] 3867 	jrmi 9$
      00164F A1 35            [ 1] 3868 	cp a,#TK_NE 
      001651 22 16            [ 1] 3869 	jrugt 9$
      001653 A0 31            [ 1] 3870 	sub a,#TK_GT  
      001655 48               [ 1] 3871 	sll a 
      001656 90 5F            [ 1] 3872 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001658 90 97            [ 1] 3873 	ld yl,a 
      00165A 72 A9 16 D8      [ 2] 3874 	addw y,#relop_str 
      00165E 90 FE            [ 2] 3875 	ldw y,(y)
      001660 93               [ 1] 3876 	ldw x,y 
      001661 CD 01 DE         [ 4] 3877 	call puts 
      001664 1E 03            [ 2] 3878 	ldw x,(XSAVE,sp)
      001666 CC 15 B0         [ 2] 3879 	jp 1$
      001669 A1 10            [ 1] 3880 9$: cp a,#TK_PLUS 
      00166B 26 04            [ 1] 3881 	jrne 10$
      00166D A6 2B            [ 1] 3882 	ld a,#'+
      00166F 20 46            [ 2] 3883 	jra 80$ 
      001671 A1 11            [ 1] 3884 10$: cp a,#TK_MINUS
      001673 26 04            [ 1] 3885 	jrne 11$
      001675 A6 2D            [ 1] 3886 	ld a,#'-
      001677 20 3E            [ 2] 3887 	jra 80$
      001679 A1 20            [ 1] 3888 11$: cp a,#TK_MULT 
      00167B 2B 0E            [ 1] 3889 	jrmi 12$
      00167D A1 22            [ 1] 3890 	cp a,#TK_MOD 
      00167F 22 0A            [ 1] 3891 	jrugt 12$
      001681 A0 20            [ 1] 3892 	sub a,#0x20
      001683 5F               [ 1] 3893 	clrw x 
      001684 97               [ 1] 3894 	ld xl,a 
      001685 1C 16 D5         [ 2] 3895 	addw x,#mul_char 
      001688 F6               [ 1] 3896 	ld a,(x)
      001689 20 2C            [ 2] 3897 	jra 80$ 
      00168B A1 0B            [ 1] 3898 12$: cp a,#TK_LPAREN 
      00168D 2B 0E            [ 1] 3899 	jrmi 13$
      00168F A1 0E            [ 1] 3900 	cp a,#TK_SHARP 
      001691 22 0A            [ 1] 3901 	jrugt 13$
      001693 A0 0B            [ 1] 3902 	sub a,#TK_LPAREN
      001695 5F               [ 1] 3903 	clrw x 
      001696 97               [ 1] 3904 	ld xl,a 
      001697 1C 16 D1         [ 2] 3905 	addw x,#single_char 
      00169A F6               [ 1] 3906 	ld a,(x)
      00169B 20 1A            [ 2] 3907 	jra 80$
      00169D A1 03            [ 1] 3908 13$: cp a,#TK_CHAR 
      00169F 26 14            [ 1] 3909 	jrne 14$
      0016A1 A6 5C            [ 1] 3910 	ld a,#'\
      0016A3 CD 01 CB         [ 4] 3911 	call putc 
      0016A6 1E 03            [ 2] 3912 	ldw x,(XSAVE,sp)
      0016A8 72 D6 00 13      [ 4] 3913 	ld a,([ptr16],x)
      0016AC 5C               [ 2] 3914 	incw x 
      0016AD 1F 03            [ 2] 3915 	ldw (XSAVE,sp),x 
      0016AF CD 01 CB         [ 4] 3916 	call putc 
      0016B2 CC 15 B0         [ 2] 3917 	jp 1$ 
      0016B5 A6 3A            [ 1] 3918 14$: ld a,#':
      0016B7 CD 01 CB         [ 4] 3919 80$: call putc 
      0016BA 1E 03            [ 2] 3920 	ldw x,(XSAVE,sp)
      0016BC CC 15 B0         [ 2] 3921 	jp 1$ 
      0016BF                       3922 90$: 
      0016BF A6 0D            [ 1] 3923 	ld a,#CR 
      0016C1 CD 01 CB         [ 4] 3924 	call putc
      0016C4 7B 02            [ 1] 3925 	ld a,(WIDTH_SAV,sp) 
      0016C6 C7 00 22         [ 1] 3926 	ld tab_width,a 
      0016C9 7B 01            [ 1] 3927 	ld a,(BASE_SAV,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0016CB C7 00 06         [ 1] 3928 	ld base,a
      0016CE                       3929 	_drop VSIZE 
      0016CE 5B 05            [ 2]    1     addw sp,#VSIZE 
      0016D0 81               [ 4] 3930 	ret 	
      0016D1 28 29 2C 23           3931 single_char: .byte '(',')',',','#'
      0016D5 2A 2F 25              3932 mul_char: .byte '*','/','%'
      0016D8 16 E4 16 E6 16 E8 16  3933 relop_str: .word gt,equal,ge,lt,le,ne 
             EB 16 ED 16 F0
      0016E4 3E 00                 3934 gt: .asciz ">"
      0016E6 3D 00                 3935 equal: .asciz "="
      0016E8 3E 3D 00              3936 ge: .asciz ">="
      0016EB 3C 00                 3937 lt: .asciz "<"
      0016ED 3C 3D 00              3938 le: .asciz "<="
      0016F0 3C 3E 00              3939 ne:  .asciz "<>"
                                   3940 
                                   3941 
                                   3942 ;---------------------------------
                                   3943 ; BASIC: PRINT|? arg_list 
                                   3944 ; print values from argument list
                                   3945 ;----------------------------------
                           000001  3946 	COMMA=1
                           000001  3947 	VSIZE=1
      0016F3                       3948 print:
      0016F3 4B 00            [ 1] 3949 push #0 ; local variable COMMA 
      0016F5                       3950 reset_comma:
      0016F5 0F 01            [ 1] 3951 	clr (COMMA,sp)
      0016F7                       3952 prt_loop:
      0016F7 CD 13 ED         [ 4] 3953 	call relation 
      0016FA A1 01            [ 1] 3954 	cp a,#TK_COLON 
      0016FC 27 51            [ 1] 3955 	jreq print_exit   
      0016FE A1 04            [ 1] 3956 	cp a,#TK_INTGR 
      001700 26 05            [ 1] 3957 	jrne 0$ 
      001702 CD 0A 7E         [ 4] 3958 	call print_int 
      001705 20 EE            [ 2] 3959 	jra reset_comma
      001707                       3960 0$: 	
      001707 CD 08 3F         [ 4] 3961 	call next_token
      00170A A1 00            [ 1] 3962 	cp a,#TK_NONE 
      00170C 27 41            [ 1] 3963 	jreq print_exit 
      00170E A1 0A            [ 1] 3964 1$:	cp a,#TK_QSTR
      001710 26 05            [ 1] 3965 	jrne 2$   
      001712 CD 01 DE         [ 4] 3966 	call puts
      001715 20 DE            [ 2] 3967 	jra reset_comma
      001717 A1 03            [ 1] 3968 2$: cp a,#TK_CHAR 
      001719 26 06            [ 1] 3969 	jrne 3$
      00171B 9F               [ 1] 3970 	ld a,xl 
      00171C CD 01 CB         [ 4] 3971 	call putc 
      00171F 20 D4            [ 2] 3972 	jra reset_comma 
      001721                       3973 3$: 	
      001721 A1 08            [ 1] 3974 	cp a,#TK_CFUNC 
      001723 26 07            [ 1] 3975 	jrne 4$ 
      001725 FD               [ 4] 3976 	call (x)
      001726 9F               [ 1] 3977 	ld a,xl 
      001727 CD 01 CB         [ 4] 3978 	call putc
      00172A 20 C9            [ 2] 3979 	jra reset_comma 
      00172C                       3980 4$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00172C A1 0D            [ 1] 3981 	cp a,#TK_COMMA 
      00172E 26 05            [ 1] 3982 	jrne 5$
      001730 03 01            [ 1] 3983 	cpl (COMMA,sp) 
      001732 CC 16 F7         [ 2] 3984 	jp prt_loop   
      001735                       3985 5$: 
      001735 A1 0E            [ 1] 3986 	cp a,#TK_SHARP
      001737 26 13            [ 1] 3987 	jrne 7$
      001739 CD 08 3F         [ 4] 3988 	call next_token
      00173C A1 04            [ 1] 3989 	cp a,#TK_INTGR 
      00173E 27 03            [ 1] 3990 	jreq 6$
      001740 CC 07 89         [ 2] 3991 	jp syntax_error 
      001743                       3992 6$:
      001743 9F               [ 1] 3993 	ld a,xl 
      001744 A4 0F            [ 1] 3994 	and a,#15 
      001746 C7 00 22         [ 1] 3995 	ld tab_width,a 
      001749 CC 16 F5         [ 2] 3996 	jp reset_comma 
      00174C                       3997 7$:	
      00174C CD 10 71         [ 4] 3998 	call unget_token
      00174F                       3999 print_exit:
      00174F 0D 01            [ 1] 4000 	tnz (COMMA,sp)
      001751 26 05            [ 1] 4001 	jrne 9$
      001753 A6 0D            [ 1] 4002 	ld a,#CR 
      001755 CD 01 CB         [ 4] 4003     call putc 
      001758                       4004 9$:	_drop VSIZE 
      001758 5B 01            [ 2]    1     addw sp,#VSIZE 
      00175A 81               [ 4] 4005 	ret 
                                   4006 
                                   4007 ;----------------------
                                   4008 ; 'save_context' and
                                   4009 ; 'rest_context' must be 
                                   4010 ; called at the same 
                                   4011 ; call stack depth 
                                   4012 ; i.e. SP must have the 
                                   4013 ; save value at  
                                   4014 ; entry point of both 
                                   4015 ; routine. 
                                   4016 ;---------------------
                           000006  4017 	CTXT_SIZE=6 ; size of saved data 
                                   4018 ;--------------------
                                   4019 ; save current BASIC
                                   4020 ; interpreter context 
                                   4021 ; on cstack 
                                   4022 ;--------------------
      00175B                       4023 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00175B                       4024 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      00175B                       4025 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      00175B                       4026 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      00175B                       4027 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      00175B                       4028 save_context:
      00175B CE 00 04         [ 2] 4029 	ldw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00175E 1F 03            [ 2] 4030 	ldw (BPTR,sp),x
      001760 C6 00 01         [ 1] 4031 	ld a,in 
      001763 6B 07            [ 1] 4032 	ld (IN,sp),a
      001765 C6 00 03         [ 1] 4033 	ld a,count 
      001768 6B 08            [ 1] 4034 	ld (CNT,sp),a  
      00176A 81               [ 4] 4035 	ret
                                   4036 
                                   4037 ;-----------------------
                                   4038 ; restore previously saved 
                                   4039 ; BASIC interpreter context 
                                   4040 ; from cstack 
                                   4041 ;-------------------------
      00176B                       4042 rest_context:
      00176B 1E 03            [ 2] 4043 	ldw x,(BPTR,sp)
      00176D CF 00 04         [ 2] 4044 	ldw basicptr,x 
      001770 7B 07            [ 1] 4045 	ld a,(IN,sp)
      001772 C7 00 01         [ 1] 4046 	ld in,a
      001775 7B 08            [ 1] 4047 	ld a,(CNT,sp)
      001777 C7 00 03         [ 1] 4048 	ld count,a  
      00177A 81               [ 4] 4049 	ret
                                   4050 
                                   4051 ;------------------------------------------
                                   4052 ; BASIC: INPUT [string],var[,[string],var]
                                   4053 ; input value in variables 
                                   4054 ; [string] optionally can be used as prompt 
                                   4055 ;-----------------------------------------
                           000001  4056 	CX_BPTR=1
                           000003  4057 	CX_LNO=3
                           000004  4058 	CX_IN=4
                           000005  4059 	CX_CNT=5
                           000006  4060 	SKIP=6
                           000007  4061 	VSIZE=7
      00177B                       4062 input_var:
      00177B 72 00 00 21 05   [ 2] 4063 	btjt flags,#FRUN,1$ 
      001780 A6 06            [ 1] 4064 	ld a,#ERR_RUN_ONLY 
      001782 CC 07 8B         [ 2] 4065 	jp tb_error 
      001785                       4066 1$:	_vars VSIZE 
      001785 52 07            [ 2]    1     sub sp,#VSIZE 
      001787                       4067 input_loop:
      001787 0F 06            [ 1] 4068 	clr (SKIP,sp)
      001789 CD 08 3F         [ 4] 4069 	call next_token 
      00178C A1 00            [ 1] 4070 	cp a,#TK_NONE 
      00178E 27 5C            [ 1] 4071 	jreq input_exit 
      001790 A1 0A            [ 1] 4072 	cp a,#TK_QSTR 
      001792 26 08            [ 1] 4073 	jrne 1$ 
      001794 CD 01 DE         [ 4] 4074 	call puts 
      001797 03 06            [ 1] 4075 	cpl (SKIP,sp)
      001799 CD 08 3F         [ 4] 4076 	call next_token 
      00179C A1 05            [ 1] 4077 1$: cp a,#TK_VAR  
      00179E 27 03            [ 1] 4078 	jreq 2$ 
      0017A0 CC 07 89         [ 2] 4079 	jp syntax_error
      0017A3 CD 10 77         [ 4] 4080 2$:	call dpush 
      0017A6 0D 06            [ 1] 4081 	tnz (SKIP,sp)
      0017A8 26 0F            [ 1] 4082 	jrne 21$ 
      0017AA A6 3A            [ 1] 4083 	ld a,#':
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017AC C7 17 19         [ 1] 4084 	ld pad+1,a 
      0017AF 72 5F 17 1A      [ 1] 4085 	clr pad+2
      0017B3 AE 17 18         [ 2] 4086 	ldw x,#pad 
      0017B6 CD 01 DE         [ 4] 4087 	call puts   
      0017B9                       4088 21$:
      0017B9 CD 17 5B         [ 4] 4089 	call save_context 
      0017BC AE 16 C8         [ 2] 4090 	ldw x,#tib 
      0017BF CF 00 04         [ 2] 4091 	ldw basicptr,x  
      0017C2 72 5F 00 03      [ 1] 4092 	clr count  
      0017C6 CD 0B 6C         [ 4] 4093 	call readln 
      0017C9 72 5F 00 01      [ 1] 4094 	clr in 
      0017CD CD 13 ED         [ 4] 4095 	call relation 
      0017D0 A1 04            [ 1] 4096 	cp a,#TK_INTGR
      0017D2 27 03            [ 1] 4097 	jreq 3$ 
      0017D4 CC 07 89         [ 2] 4098 	jp syntax_error
      0017D7 CD 10 77         [ 4] 4099 3$: call dpush 
      0017DA CD 10 DE         [ 4] 4100 	call store 
      0017DD CD 17 6B         [ 4] 4101 	call rest_context
      0017E0 CD 08 3F         [ 4] 4102 	call next_token 
      0017E3 A1 0D            [ 1] 4103 	cp a,#TK_COMMA 
      0017E5 26 02            [ 1] 4104 	jrne 4$
      0017E7 20 9E            [ 2] 4105 	jra input_loop 
      0017E9 CD 10 71         [ 4] 4106 4$:	call unget_token 
      0017EC                       4107 input_exit:
      0017EC                       4108 	_drop VSIZE 
      0017EC 5B 07            [ 2]    1     addw sp,#VSIZE 
      0017EE 81               [ 4] 4109 	ret 
                                   4110 
                                   4111 
                                   4112 ;---------------------
                                   4113 ; BASIC: REMARK | ' 
                                   4114 ; skip comment to end of line 
                                   4115 ;---------------------- 
      0017EF                       4116 rem:
      0017EF 55 00 01 00 03   [ 1] 4117  	mov count,in 
      0017F4 81               [ 4] 4118 	ret 
                                   4119 
                                   4120 ;---------------------
                                   4121 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   4122 ; read in loop 'addr'  
                                   4123 ; apply & 'mask' to value 
                                   4124 ; loop while result==0.  
                                   4125 ; if 'xor_mask' given 
                                   4126 ; apply ^ in second  
                                   4127 ; loop while result==0 
                                   4128 ;---------------------
                           000001  4129 	XMASK=1 
                           000002  4130 	MASK=2
                           000003  4131 	ADDR=3
                           000004  4132 	VSIZE=4
      0017F5                       4133 wait: 
      0017F5                       4134 	_vars VSIZE
      0017F5 52 04            [ 2]    1     sub sp,#VSIZE 
      0017F7 0F 01            [ 1] 4135 	clr (XMASK,sp) 
      0017F9 CD 12 A5         [ 4] 4136 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0017FC A1 02            [ 1] 4137 	cp a,#2
      0017FE 24 03            [ 1] 4138 	jruge 0$
      001800 CC 07 89         [ 2] 4139 	jp syntax_error 
      001803 A1 03            [ 1] 4140 0$:	cp a,#3
      001805 25 06            [ 1] 4141 	jrult 1$
      001807 CD 10 84         [ 4] 4142 	call dpop 
      00180A 9F               [ 1] 4143 	ld a,xl
      00180B 6B 01            [ 1] 4144 	ld (XMASK,sp),a 
      00180D CD 10 84         [ 4] 4145 1$: call dpop ; mask 
      001810 9F               [ 1] 4146 	ld a,xl 
      001811 6B 02            [ 1] 4147 	ld (MASK,sp),a 
      001813 CD 10 84         [ 4] 4148 	call dpop ; address 
      001816 F6               [ 1] 4149 2$:	ld a,(x)
      001817 14 02            [ 1] 4150 	and a,(MASK,sp)
      001819 18 01            [ 1] 4151 	xor a,(XMASK,sp)
      00181B 27 F9            [ 1] 4152 	jreq 2$ 
      00181D                       4153 	_drop VSIZE 
      00181D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00181F 81               [ 4] 4154 	ret 
                                   4155 
                                   4156 ;---------------------
                                   4157 ; BASIC: BSET addr,mask
                                   4158 ; set bits at 'addr' corresponding 
                                   4159 ; to those of 'mask' that are at 1.
                                   4160 ; arguments:
                                   4161 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4162 ;   mask        mask|addr
                                   4163 ; output:
                                   4164 ;	none 
                                   4165 ;--------------------------
      001820                       4166 bit_set:
      001820 CD 12 A5         [ 4] 4167 	call arg_list 
      001823 A1 02            [ 1] 4168 	cp a,#2	 
      001825 27 03            [ 1] 4169 	jreq 1$ 
      001827 CC 07 89         [ 2] 4170 	jp syntax_error
      00182A                       4171 1$: 
      00182A CD 10 84         [ 4] 4172 	call dpop ; mask 
      00182D 9F               [ 1] 4173 	ld a,xl 
      00182E CD 10 84         [ 4] 4174 	call dpop ; addr  
      001831 FA               [ 1] 4175 	or a,(x)
      001832 F7               [ 1] 4176 	ld (x),a
      001833 81               [ 4] 4177 	ret 
                                   4178 
                                   4179 ;---------------------
                                   4180 ; BASIC: BRES addr,mask
                                   4181 ; reset bits at 'addr' corresponding 
                                   4182 ; to those of 'mask' that are at 1.
                                   4183 ; arguments:
                                   4184 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4185 ;   mask	    ~mask&*addr  
                                   4186 ; output:
                                   4187 ;	none 
                                   4188 ;--------------------------
      001834                       4189 bit_reset:
      001834 CD 12 A5         [ 4] 4190 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001837 A1 02            [ 1] 4191 	cp a,#2  
      001839 27 03            [ 1] 4192 	jreq 1$ 
      00183B CC 07 89         [ 2] 4193 	jp syntax_error
      00183E                       4194 1$: 
      00183E CD 10 84         [ 4] 4195 	call dpop ; mask 
      001841 9F               [ 1] 4196 	ld a,xl 
      001842 43               [ 1] 4197 	cpl a 
      001843 CD 10 84         [ 4] 4198 	call dpop ; addr  
      001846 F4               [ 1] 4199 	and a,(x)
      001847 F7               [ 1] 4200 	ld (x),a 
      001848 81               [ 4] 4201 	ret 
                                   4202 
                                   4203 ;---------------------
                                   4204 ; BASIC: BRES addr,mask
                                   4205 ; toggle bits at 'addr' corresponding 
                                   4206 ; to those of 'mask' that are at 1.
                                   4207 ; arguments:
                                   4208 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4209 ;   mask	    mask^*addr  
                                   4210 ; output:
                                   4211 ;	none 
                                   4212 ;--------------------------
      001849                       4213 bit_toggle:
      001849 CD 12 A5         [ 4] 4214 	call arg_list 
      00184C A1 02            [ 1] 4215 	cp a,#2 
      00184E 27 03            [ 1] 4216 	jreq 1$ 
      001850 CC 07 89         [ 2] 4217 	jp syntax_error
      001853 CD 10 84         [ 4] 4218 1$: call dpop ; mask 
      001856 9F               [ 1] 4219 	ld a,xl 
      001857 CD 10 84         [ 4] 4220 	call dpop ; addr  
      00185A F8               [ 1] 4221 	xor a,(x)
      00185B F7               [ 1] 4222 	ld (x),a 
      00185C 81               [ 4] 4223 	ret 
                                   4224 
                                   4225 
                                   4226 ;---------------------
                                   4227 ; BASIC: BTEST(addr,bit)
                                   4228 ; return bit value at 'addr' 
                                   4229 ; bit is in range {0..7}.
                                   4230 ; arguments:
                                   4231 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4232 ;   bit 	    bit position {0..7}  
                                   4233 ; output:
                                   4234 ;	none 
                                   4235 ;--------------------------
      00185D                       4236 bit_test:
      00185D CD 12 C9         [ 4] 4237 	call func_args 
      001860 A1 02            [ 1] 4238 	cp a,#2
      001862 27 03            [ 1] 4239 	jreq 0$
      001864 CC 07 89         [ 2] 4240 	jp syntax_error
      001867                       4241 0$:	
      001867 CD 10 84         [ 4] 4242 	call dpop 
      00186A 9F               [ 1] 4243 	ld a,xl 
      00186B A4 07            [ 1] 4244 	and a,#7
      00186D 88               [ 1] 4245 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00186E A6 01            [ 1] 4246 	ld a,#1 
      001870 0D 01            [ 1] 4247 1$: tnz (1,sp)
      001872 27 05            [ 1] 4248 	jreq 2$
      001874 48               [ 1] 4249 	sll a 
      001875 0A 01            [ 1] 4250 	dec (1,sp)
      001877 20 F7            [ 2] 4251 	jra 1$
      001879 CD 10 84         [ 4] 4252 2$: call dpop 
      00187C F4               [ 1] 4253 	and a,(x)
      00187D 27 02            [ 1] 4254 	jreq 3$
      00187F A6 01            [ 1] 4255 	ld a,#1 
      001881 5F               [ 1] 4256 3$:	clrw x 
      001882 97               [ 1] 4257 	ld xl,a 
      001883 A6 04            [ 1] 4258 	ld a,#TK_INTGR
      001885                       4259 	_drop 1 
      001885 5B 01            [ 2]    1     addw sp,#1 
      001887 81               [ 4] 4260 	ret
                                   4261 
                                   4262 
                                   4263 ;--------------------
                                   4264 ; BASIC: POKE addr,byte
                                   4265 ; put a byte at addr 
                                   4266 ;--------------------
      001888                       4267 poke:
      001888 CD 12 A5         [ 4] 4268 	call arg_list 
      00188B A1 02            [ 1] 4269 	cp a,#2
      00188D 27 03            [ 1] 4270 	jreq 1$
      00188F CC 07 89         [ 2] 4271 	jp syntax_error
      001892                       4272 1$:	
      001892 CD 10 84         [ 4] 4273 	call dpop 
      001895 9F               [ 1] 4274     ld a,xl 
      001896 CD 10 84         [ 4] 4275 	call dpop 
      001899 F7               [ 1] 4276 	ld (x),a 
      00189A 81               [ 4] 4277 	ret 
                                   4278 
                                   4279 ;-----------------------
                                   4280 ; BASIC: PEEK(addr)
                                   4281 ; get the byte at addr 
                                   4282 ; input:
                                   4283 ;	none 
                                   4284 ; output:
                                   4285 ;	X 		value 
                                   4286 ;-----------------------
      00189B                       4287 peek:
      00189B CD 12 C9         [ 4] 4288 	call func_args
      00189E A1 01            [ 1] 4289 	cp a,#1
      0018A0 27 03            [ 1] 4290 	jreq 1$
      0018A2 CC 07 89         [ 2] 4291 	jp syntax_error
      0018A5 CD 10 84         [ 4] 4292 1$:	call dpop 
      0018A8 F6               [ 1] 4293 	ld a,(x)
      0018A9 5F               [ 1] 4294 	clrw x 
      0018AA 97               [ 1] 4295 	ld xl,a 
      0018AB A6 04            [ 1] 4296 	ld a,#TK_INTGR
      0018AD 81               [ 4] 4297 	ret 
                                   4298 
                                   4299 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4300 ; BASIC: XPEEK(page,addr)
                                   4301 ; read extended memory byte
                                   4302 ; page in range {0,1,2}
                                   4303 ;----------------------------
      0018AE                       4304 xpeek:
      0018AE CD 12 C9         [ 4] 4305 	call func_args 
      0018B1 A1 02            [ 1] 4306 	cp a,#2 
      0018B3 27 03            [ 1] 4307 	jreq 1$
      0018B5 CC 07 89         [ 2] 4308 	jp syntax_error
      0018B8                       4309 1$: 
      0018B8 CD 10 84         [ 4] 4310 	call dpop 
      0018BB CF 00 13         [ 2] 4311 	ldw farptr+1,x 
      0018BE CD 10 84         [ 4] 4312 	call dpop 
      0018C1 9F               [ 1] 4313 	ld a,xl 
      0018C2 C7 00 12         [ 1] 4314 	ld farptr,a 
      0018C5 5F               [ 1] 4315 	clrw x
      0018C6 92 BC 00 12      [ 5] 4316 	ldf a,[farptr]
      0018CA 97               [ 1] 4317 	ld xl,a 
      0018CB A6 04            [ 1] 4318 	ld a,#TK_INTGR 
      0018CD 81               [ 4] 4319 	ret 
                                   4320 
                                   4321 ;---------------------------
                                   4322 ; BASIC IF expr : instructions
                                   4323 ; evaluate expr and if true 
                                   4324 ; execute instructions on same line. 
                                   4325 ;----------------------------
      0018CE                       4326 if: 
      0018CE CD 13 ED         [ 4] 4327 	call relation 
      0018D1 A1 04            [ 1] 4328 	cp a,#TK_INTGR
      0018D3 27 03            [ 1] 4329 	jreq 1$ 
      0018D5 CC 07 89         [ 2] 4330 	jp syntax_error
      0018D8 4F               [ 1] 4331 1$:	clr a 
      0018D9 5D               [ 2] 4332 	tnzw x 
      0018DA 26 05            [ 1] 4333 	jrne 9$  
                                   4334 ;skip to next line
      0018DC 55 00 03 00 01   [ 1] 4335 	mov in,count
      0018E1 81               [ 4] 4336 9$:	ret 
                                   4337 
                                   4338 ;------------------------
                                   4339 ; BASIC: FOR var=expr 
                                   4340 ; set variable to expression 
                                   4341 ; leave variable address 
                                   4342 ; on dstack and set
                                   4343 ; FLOOP bit in 'flags'
                                   4344 ;-----------------
                           000001  4345 	RETL1=1
                           000003  4346 	INW=3
                           000005  4347 	BPTR=5
      0018E2                       4348 for: ; { -- var_addr }
      0018E2 A6 05            [ 1] 4349 	ld a,#TK_VAR 
      0018E4 CD 12 98         [ 4] 4350 	call expect
      0018E7 CD 10 77         [ 4] 4351 	call dpush 
      0018EA CD 14 94         [ 4] 4352 	call let02 
      0018ED 72 14 00 21      [ 1] 4353 	bset flags,#FLOOP 
                                   4354 ; open space on cstack for BPTR and INW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018F1 85               [ 2] 4355 	popw x ; call return address 
      0018F2                       4356 	_vars 4
      0018F2 52 04            [ 2]    1     sub sp,#4 
      0018F4 89               [ 2] 4357 	pushw x  ; RETL1 
      0018F5 5F               [ 1] 4358 	clrw x 
      0018F6 1F 05            [ 2] 4359 	ldw (BPTR,sp),x 
      0018F8 1F 03            [ 2] 4360 	ldw (INW,sp),x 
      0018FA CD 08 3F         [ 4] 4361 	call next_token 
      0018FD A1 06            [ 1] 4362 	cp a,#TK_CMD 
      0018FF 27 03            [ 1] 4363 	jreq 1$
      001901 CC 07 89         [ 2] 4364 	jp syntax_error
      001904                       4365 1$:  
      001904 A3 19 0C         [ 2] 4366 	cpw x,#to 
      001907 27 03            [ 1] 4367 	jreq to
      001909 CC 07 89         [ 2] 4368 	jp syntax_error 
                                   4369 
                                   4370 ;-----------------------------------
                                   4371 ; BASIC: TO expr 
                                   4372 ; second part of FOR loop initilization
                                   4373 ; leave limit on dstack and set 
                                   4374 ; FTO bit in 'flags'
                                   4375 ;-----------------------------------
      00190C                       4376 to: ; { var_addr -- var_addr limit step }
      00190C 72 04 00 21 03   [ 2] 4377 	btjt flags,#FLOOP,1$
      001911 CC 07 89         [ 2] 4378 	jp syntax_error
      001914 CD 13 ED         [ 4] 4379 1$: call relation  
      001917 A1 04            [ 1] 4380 	cp a,#TK_INTGR 
      001919 27 03            [ 1] 4381 	jreq 2$ 
      00191B CC 07 89         [ 2] 4382 	jp syntax_error
      00191E                       4383 2$: 
      00191E CD 10 77         [ 4] 4384     call dpush ; limit
      001921 CE 00 00         [ 2] 4385 	ldw x,in.w 
      001924 CD 08 3F         [ 4] 4386 	call next_token
      001927 A1 00            [ 1] 4387 	cp a,#TK_NONE  
      001929 27 0C            [ 1] 4388 	jreq 4$ 
      00192B A1 06            [ 1] 4389 	cp a,#TK_CMD
      00192D 26 05            [ 1] 4390 	jrne 3$
      00192F A3 19 3F         [ 2] 4391 	cpw x,#step 
      001932 27 0B            [ 1] 4392 	jreq step
      001934                       4393 3$:	
      001934 CD 10 71         [ 4] 4394 	call unget_token   	 
      001937                       4395 4$:	
      001937 AE 00 01         [ 2] 4396 	ldw x,#1   ; default step  
      00193A CD 10 77         [ 4] 4397 	call dpush
      00193D 20 15            [ 2] 4398 	jra store_loop_addr 
                                   4399 
                                   4400 
                                   4401 ;----------------------------------
                                   4402 ; BASIC: STEP expr 
                                   4403 ; optional third par of FOR loop
                                   4404 ; initialization. 	
                                   4405 ;------------------------------------
      00193F                       4406 step: ; {var limit -- var limit step}
      00193F 72 04 00 21 03   [ 2] 4407 	btjt flags,#FLOOP,1$
      001944 CC 07 89         [ 2] 4408 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001947 CD 13 ED         [ 4] 4409 1$: call relation
      00194A A1 04            [ 1] 4410 	cp a,#TK_INTGR
      00194C 27 03            [ 1] 4411 	jreq 2$
      00194E CC 07 89         [ 2] 4412 	jp syntax_error
      001951 CD 10 77         [ 4] 4413 2$:	call dpush
                                   4414 ; leave loop back entry point on cstack 
                                   4415 ; cstack is 2 call deep from interp_loop
      001954                       4416 store_loop_addr:
      001954 CE 00 04         [ 2] 4417 	ldw x,basicptr  
      001957 1F 05            [ 2] 4418 	ldw (BPTR,sp),x 
      001959 CE 00 00         [ 2] 4419 	ldw x,in.w 
      00195C 1F 03            [ 2] 4420 	ldw (INW,sp),x   
      00195E 72 15 00 21      [ 1] 4421 	bres flags,#FLOOP 
      001962 72 5C 00 1E      [ 1] 4422 	inc loop_depth  
      001966 81               [ 4] 4423 	ret 
                                   4424 
                                   4425 ;--------------------------------
                                   4426 ; BASIC: NEXT var 
                                   4427 ; FOR loop control 
                                   4428 ; increment variable with step 
                                   4429 ; and compare with limit 
                                   4430 ; loop if threshold not crossed.
                                   4431 ; else clean both stacks. 
                                   4432 ; and decrement 'loop_depth' 
                                   4433 ;--------------------------------
      001967                       4434 next: ; {var limit step -- [var limit step ] }
      001967 72 5D 00 1E      [ 1] 4435 	tnz loop_depth 
      00196B 26 03            [ 1] 4436 	jrne 1$ 
      00196D CC 07 89         [ 2] 4437 	jp syntax_error 
      001970                       4438 1$: 
      001970 A6 05            [ 1] 4439 	ld a,#TK_VAR 
      001972 CD 12 98         [ 4] 4440 	call expect
                                   4441 ; check for good variable after NEXT 	 
      001975 90 93            [ 1] 4442 	ldw y,x 
      001977 AE 00 04         [ 2] 4443 	ldw x,#4  
      00197A 72 D3 00 18      [ 4] 4444 	cpw y,([dstkptr],x) ; compare variables address 
      00197E 27 03            [ 1] 4445 	jreq 2$  
      001980 CC 07 89         [ 2] 4446 	jp syntax_error ; not the good one 
      001983                       4447 2$: ; increment variable 
      001983 93               [ 1] 4448 	ldw x,y
      001984 FE               [ 2] 4449 	ldw x,(x)  ; get var value 
      001985 CF 00 08         [ 2] 4450 	ldw acc16,x 
      001988 72 CE 00 18      [ 5] 4451 	ldw x,[dstkptr] ; step
      00198C 72 BB 00 08      [ 2] 4452 	addw x,acc16 ; var+step 
      001990 90 FF            [ 2] 4453 	ldw (y),x ; save var new value 
                                   4454 ; compare with limit 
      001992 90 93            [ 1] 4455 	ldw y,x 
      001994 72 CE 00 18      [ 5] 4456 	ldw x,[dstkptr] ; step in x 
      001998 5D               [ 2] 4457 	tnzw x  
      001999 2A 0B            [ 1] 4458 	jrpl 4$ ; positive step 
                                   4459 ;negative step 
      00199B AE 00 02         [ 2] 4460 	ldw x,#2
      00199E 72 D3 00 18      [ 4] 4461 	cpw y,([dstkptr],x)
      0019A2 2F 20            [ 1] 4462 	jrslt loop_done
      0019A4 20 09            [ 2] 4463 	jra loop_back 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0019A6                       4464 4$: ; positive step
      0019A6 AE 00 02         [ 2] 4465 	ldw x,#2 
      0019A9 72 D3 00 18      [ 4] 4466 	cpw y,([dstkptr],x)
      0019AD 2C 15            [ 1] 4467 	jrsgt loop_done
      0019AF                       4468 loop_back:
      0019AF 1E 05            [ 2] 4469 	ldw x,(BPTR,sp)
      0019B1 CF 00 04         [ 2] 4470 	ldw basicptr,x 
      0019B4 72 01 00 21 05   [ 2] 4471 	btjf flags,#FRUN,1$ 
      0019B9 E6 02            [ 1] 4472 	ld a,(2,x)
      0019BB C7 00 03         [ 1] 4473 	ld count,a
      0019BE 1E 03            [ 2] 4474 1$:	ldw x,(INW,sp)
      0019C0 CF 00 00         [ 2] 4475 	ldw in.w,x 
      0019C3 81               [ 4] 4476 	ret 
      0019C4                       4477 loop_done:
                                   4478 	; remove var limit step on dstack 
      0019C4 CE 00 18         [ 2] 4479 	ldw x,dstkptr 
      0019C7 1C 00 06         [ 2] 4480 	addw x,#3*CELL_SIZE
      0019CA CF 00 18         [ 2] 4481 	ldw dstkptr,x 
                                   4482 	; remove 2 return address on cstack 
      0019CD 85               [ 2] 4483 	popw x
      0019CE                       4484 	_drop 4
      0019CE 5B 04            [ 2]    1     addw sp,#4 
      0019D0 89               [ 2] 4485 	pushw x 
      0019D1 72 5A 00 1E      [ 1] 4486 	dec loop_depth 
      0019D5 81               [ 4] 4487 	ret 
                                   4488 
                                   4489 
                                   4490 ;------------------------
                                   4491 ; BASIC: GOTO line# 
                                   4492 ; jump to line# 
                                   4493 ; here cstack is 2 call deep from interp_loop 
                                   4494 ;------------------------
      0019D6                       4495 goto:
      0019D6 72 00 00 21 06   [ 2] 4496 	btjt flags,#FRUN,0$ 
      0019DB A6 06            [ 1] 4497 	ld a,#ERR_RUN_ONLY
      0019DD CC 07 8B         [ 2] 4498 	jp tb_error 
      0019E0 81               [ 4] 4499 	ret 
      0019E1 20 23            [ 2] 4500 0$:	jra go_common
                                   4501 
                                   4502 ;--------------------
                                   4503 ; BASIC: GOSUB line#
                                   4504 ; basic subroutine call
                                   4505 ; actual line# and basicptr 
                                   4506 ; are saved on cstack
                                   4507 ; here cstack is 2 call deep from interp_loop 
                                   4508 ;--------------------
                           000003  4509 	GOS_RET=3
      0019E3                       4510 gosub:
      0019E3 72 00 00 21 06   [ 2] 4511 	btjt flags,#FRUN,0$ 
      0019E8 A6 06            [ 1] 4512 	ld a,#ERR_RUN_ONLY
      0019EA CC 07 8B         [ 2] 4513 	jp tb_error 
      0019ED 81               [ 4] 4514 	ret 
      0019EE 85               [ 2] 4515 0$:	popw x 
      0019EF 52 02            [ 2] 4516 	sub sp,#2 
      0019F1 89               [ 2] 4517 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0019F2 CE 00 04         [ 2] 4518 	ldw x,basicptr
      0019F5 E6 02            [ 1] 4519 	ld a,(2,x)
      0019F7 AB 03            [ 1] 4520 	add a,#3 
      0019F9 C7 00 09         [ 1] 4521 	ld acc8,a 
      0019FC 72 5F 00 08      [ 1] 4522 	clr acc16 
      001A00 72 BB 00 08      [ 2] 4523 	addw x,acc16
      001A04 1F 03            [ 2] 4524 	ldw (GOS_RET,sp),x 
      001A06                       4525 go_common: 
      001A06 CD 13 ED         [ 4] 4526 	call relation 
      001A09 A1 04            [ 1] 4527 	cp a,#TK_INTGR
      001A0B 27 03            [ 1] 4528 	jreq 1$ 
      001A0D CC 07 89         [ 2] 4529 	jp syntax_error
      001A10                       4530 1$: 
      001A10 CD 03 0E         [ 4] 4531 	call search_lineno  
      001A13 5D               [ 2] 4532 	tnzw x 
      001A14 26 05            [ 1] 4533 	jrne 2$ 
      001A16 A6 05            [ 1] 4534 	ld a,#ERR_NO_LINE 
      001A18 CC 07 8B         [ 2] 4535 	jp tb_error 
      001A1B                       4536 2$: 
      001A1B CF 00 04         [ 2] 4537 	ldw basicptr,x 
      001A1E E6 02            [ 1] 4538 	ld a,(2,x)
      001A20 C7 00 03         [ 1] 4539 	ld count,a 
      001A23 35 03 00 01      [ 1] 4540 	mov in,#3 
      001A27 81               [ 4] 4541 	ret 
                                   4542 
                                   4543 ;------------------------
                                   4544 ; BASIC: RETURN 
                                   4545 ; exit from a subroutine 
                                   4546 ; cstack is 2 level deep from interp_loop 
                                   4547 ;------------------------
      001A28                       4548 return:
      001A28 72 00 00 21 05   [ 2] 4549 	btjt flags,#FRUN,0$ 
      001A2D A6 06            [ 1] 4550 	ld a,#ERR_RUN_ONLY
      001A2F CC 07 8B         [ 2] 4551 	jp tb_error 
      001A32                       4552 0$:	
      001A32 1E 03            [ 2] 4553 	ldw x,(GOS_RET,sp) 
      001A34 CF 00 04         [ 2] 4554 	ldw basicptr,x 
      001A37 E6 02            [ 1] 4555 	ld a,(2,x)
      001A39 AB 03            [ 1] 4556 	add a,#3 
      001A3B C7 00 03         [ 1] 4557 	ld count,a 
      001A3E 35 03 00 01      [ 1] 4558 	mov in,#3
      001A42 4F               [ 1] 4559 	clr a 
      001A43 85               [ 2] 4560 	popw x 
      001A44                       4561 	_drop 2
      001A44 5B 02            [ 2]    1     addw sp,#2 
      001A46 89               [ 2] 4562 	pushw x
      001A47 81               [ 4] 4563 	ret  
                                   4564 
                                   4565 
                                   4566 ;----------------------------------
                                   4567 ; BASIC: RUN
                                   4568 ; run BASIC program in RAM
                                   4569 ;----------------------------------- 
      001A48                       4570 run: 
      001A48 72 01 00 21 02   [ 2] 4571 	btjf flags,#FRUN,0$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A4D 4F               [ 1] 4572 	clr a 
      001A4E 81               [ 4] 4573 	ret
      001A4F                       4574 0$: 
      001A4F 72 09 00 21 12   [ 2] 4575 	btjf flags,#FBREAK,1$
      001A54                       4576 	_drop 2 
      001A54 5B 02            [ 2]    1     addw sp,#2 
      001A56 CD 17 6B         [ 4] 4577 	call rest_context
      001A59                       4578 	_drop CTXT_SIZE 
      001A59 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      001A5B 72 19 00 21      [ 1] 4579 	bres flags,#FBREAK 
      001A5F 72 10 00 21      [ 1] 4580 	bset flags,#FRUN 
      001A63 CC 08 0F         [ 2] 4581 	jp interp_loop 
      001A66 CE 00 1A         [ 2] 4582 1$:	ldw x,txtbgn
      001A69 C3 00 1C         [ 2] 4583 	cpw x,txtend 
      001A6C 2B 02            [ 1] 4584 	jrmi run_it 
      001A6E 4F               [ 1] 4585 	clr a 
      001A6F 81               [ 4] 4586 	ret
                                   4587 
      001A70                       4588 run_it:	 
      001A70 CD 14 68         [ 4] 4589     call ubound 
      001A73                       4590 	_drop 2 
      001A73 5B 02            [ 2]    1     addw sp,#2 
      001A75 CE 00 1A         [ 2] 4591 	ldw x,txtbgn 
      001A78 CF 00 04         [ 2] 4592 	ldw basicptr,x 
      001A7B E6 02            [ 1] 4593 	ld a,(2,x)
      001A7D C7 00 03         [ 1] 4594 	ld count,a
      001A80 35 03 00 01      [ 1] 4595 	mov in,#3	
      001A84 72 10 00 21      [ 1] 4596 	bset flags,#FRUN 
      001A88 CC 08 0F         [ 2] 4597 	jp interp_loop 
                                   4598 
                                   4599 
                                   4600 ;----------------------
                                   4601 ; BASIC: STOP 
                                   4602 ; stop running program
                                   4603 ;---------------------- 
      001A8B                       4604 stop: 
                                   4605 ; clean dstack and cstack 
      001A8B AE 17 FF         [ 2] 4606 	ldw x,#STACK_EMPTY 
      001A8E 94               [ 1] 4607 	ldw sp,x 
      001A8F 72 11 00 21      [ 1] 4608 	bres flags,#FRUN 
      001A93 72 19 00 21      [ 1] 4609 	bres flags,#FBREAK
      001A97 CC 07 CC         [ 2] 4610 	jp warm_start
                                   4611 
                                   4612 
                                   4613 ;-----------------------
                                   4614 ; BASIC BEEP expr1,expr2
                                   4615 ; used MCU internal beeper 
                                   4616 ; to produce a sound
                                   4617 ; arguments:
                                   4618 ;    expr1   frequency  (expr1%32)
                                   4619 ;    expr2   duration msec.
                                   4620 ;---------------------------
      001A9A                       4621 tone:
      001A9A CD 12 A5         [ 4] 4622 	call arg_list 
      001A9D A1 02            [ 1] 4623 	cp a,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A9F 27 03            [ 1] 4624 	jreq 1$
      001AA1 CC 07 89         [ 2] 4625 	jp syntax_error 
      001AA4                       4626 1$: 
      001AA4 CD 10 84         [ 4] 4627 	call dpop ; duration
      001AA7 89               [ 2] 4628 	pushw x 
      001AA8 CD 10 84         [ 4] 4629 	call dpop ; frequency
      001AAB 90 93            [ 1] 4630 	ldw y,x 
      001AAD AE F4 24         [ 2] 4631 	ldw x,#TIM2_CLK_FREQ
      001AB0 65               [ 2] 4632 	divw x,y 
                                   4633 ; round to nearest integer 
      001AB1 90 A3 7A 12      [ 2] 4634 	cpw y,#TIM2_CLK_FREQ/2
      001AB5 2B 01            [ 1] 4635 	jrmi 2$
      001AB7 5C               [ 2] 4636 	incw x 
      001AB8                       4637 2$:	 
      001AB8 9E               [ 1] 4638 	ld a,xh 
      001AB9 C7 53 0D         [ 1] 4639 	ld TIM2_ARRH,a 
      001ABC 9F               [ 1] 4640 	ld a,xl 
      001ABD C7 53 0E         [ 1] 4641 	ld TIM2_ARRL,a 
                                   4642 ; 50% duty cycle 
      001AC0 8C               [ 1] 4643 	ccf 
      001AC1 56               [ 2] 4644 	rrcw x 
      001AC2 9E               [ 1] 4645 	ld a,xh 
      001AC3 C7 53 0F         [ 1] 4646 	ld TIM2_CCR1H,a 
      001AC6 9F               [ 1] 4647 	ld a,xl
      001AC7 C7 53 10         [ 1] 4648 	ld TIM2_CCR1L,a
      001ACA 72 10 53 08      [ 1] 4649 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001ACE 72 10 53 00      [ 1] 4650 	bset TIM2_CR1,#TIM2_CR1_CEN
      001AD2 72 10 53 04      [ 1] 4651 	bset TIM2_EGR,#TIM2_EGR_UG
      001AD6 85               [ 2] 4652 	popw x 
      001AD7 CF 00 0C         [ 2] 4653 	ldw timer,x 
      001ADA CE 00 0C         [ 2] 4654 3$: ldw x,timer 	
      001ADD 26 FB            [ 1] 4655 	jrne 3$ 
      001ADF 72 11 53 08      [ 1] 4656 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001AE3 72 11 53 00      [ 1] 4657 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001AE7 81               [ 4] 4658 	ret 
                                   4659 
                                   4660 ;-------------------------------
                                   4661 ; BASIC: PWRADC 0|1 [,divisor]  
                                   4662 ; disable/enanble ADC 
                                   4663 ;-------------------------------
      001AE8                       4664 power_adc:
      001AE8 CD 12 A5         [ 4] 4665 	call arg_list 
      001AEB A1 02            [ 1] 4666 	cp a,#2	
      001AED 27 0D            [ 1] 4667 	jreq 1$
      001AEF A1 01            [ 1] 4668 	cp a,#1 
      001AF1 27 03            [ 1] 4669 	jreq 0$ 
      001AF3 CC 07 89         [ 2] 4670 	jp syntax_error 
      001AF6 AE 00 00         [ 2] 4671 0$: ldw x,#0
      001AF9 CD 10 77         [ 4] 4672 	call dpush 
      001AFC AE 00 02         [ 2] 4673 1$: ldw x,#2
      001AFF 72 DE 00 18      [ 5] 4674 	ldw x,([dstkptr],x) ; on|off
      001B03 5D               [ 2] 4675 	tnzw x 
      001B04 27 1C            [ 1] 4676 	jreq 2$ 
      001B06 72 CE 00 18      [ 5] 4677 	ldw x,[dstkptr] ; divisor 
      001B0A 9F               [ 1] 4678 	ld a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B0B A4 07            [ 1] 4679 	and a,#7
      001B0D 4E               [ 1] 4680 	swap a 
      001B0E C7 54 01         [ 1] 4681 	ld ADC_CR1,a
      001B11 72 16 50 CA      [ 1] 4682 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001B15 72 10 54 01      [ 1] 4683 	bset ADC_CR1,#ADC_CR1_ADON 
      001B19                       4684 	_usec_dly 7 
      001B19 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001B1C 5A               [ 2]    2     decw x
      001B1D 9D               [ 1]    3     nop 
      001B1E 26 FA            [ 1]    4     jrne .-4
      001B20 20 08            [ 2] 4685 	jra 3$
      001B22 72 11 54 01      [ 1] 4686 2$: bres ADC_CR1,#ADC_CR1_ADON
      001B26 72 17 50 CA      [ 1] 4687 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001B2A AE 00 02         [ 2] 4688 3$:	ldw x,#2
      001B2D CD 10 E8         [ 4] 4689 	call ddrop_n 
      001B30 81               [ 4] 4690 	ret
                                   4691 
                                   4692 ;-----------------------------
                                   4693 ; BASIC: RDADC(channel)
                                   4694 ; read adc channel {0..5}
                                   4695 ; output:
                                   4696 ;   A 		TK_INTGR 
                                   4697 ;   X 		value 
                                   4698 ;-----------------------------
      001B31                       4699 analog_read:
      001B31 CD 12 C9         [ 4] 4700 	call func_args 
      001B34 A1 01            [ 1] 4701 	cp a,#1 
      001B36 27 03            [ 1] 4702 	jreq 1$
      001B38 CC 07 89         [ 2] 4703 	jp syntax_error
      001B3B CD 10 84         [ 4] 4704 1$: call dpop 
      001B3E A3 00 05         [ 2] 4705 	cpw x,#5 
      001B41 23 05            [ 2] 4706 	jrule 2$
      001B43 A6 0A            [ 1] 4707 	ld a,#ERR_BAD_VALUE
      001B45 CC 07 8B         [ 2] 4708 	jp tb_error 
      001B48 9F               [ 1] 4709 2$: ld a,xl
      001B49 C7 00 09         [ 1] 4710 	ld acc8,a 
      001B4C A6 05            [ 1] 4711 	ld a,#5
      001B4E C0 00 09         [ 1] 4712 	sub a,acc8 
      001B51 C7 54 00         [ 1] 4713 	ld ADC_CSR,a
      001B54 72 16 54 02      [ 1] 4714 	bset ADC_CR2,#ADC_CR2_ALIGN
      001B58 72 10 54 01      [ 1] 4715 	bset ADC_CR1,#ADC_CR1_ADON
      001B5C 72 0F 54 00 FB   [ 2] 4716 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001B61 CE 54 04         [ 2] 4717 	ldw x,ADC_DRH
      001B64 A6 04            [ 1] 4718 	ld a,#TK_INTGR
      001B66 81               [ 4] 4719 	ret 
                                   4720 
                                   4721 ;-----------------------
                                   4722 ; BASIC: DREAD(pin)
                                   4723 ; read state of a digital pin 
                                   4724 ; pin# {0..15}
                                   4725 ; output:
                                   4726 ;    A 		TK_INTGR
                                   4727 ;    X      0|1 
                                   4728 ;-------------------------
                           000001  4729 	PINNO=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                           000001  4730 	VSIZE=1
      001B67                       4731 digital_read:
      001B67                       4732 	_vars VSIZE 
      001B67 52 01            [ 2]    1     sub sp,#VSIZE 
      001B69 CD 12 C9         [ 4] 4733 	call func_args
      001B6C A1 01            [ 1] 4734 	cp a,#1
      001B6E 27 03            [ 1] 4735 	jreq 1$
      001B70 CC 07 89         [ 2] 4736 	jp syntax_error
      001B73 CD 10 84         [ 4] 4737 1$: call dpop 
      001B76 A3 00 0F         [ 2] 4738 	cpw x,#15 
      001B79 23 05            [ 2] 4739 	jrule 2$
      001B7B A6 0A            [ 1] 4740 	ld a,#ERR_BAD_VALUE
      001B7D CC 07 8B         [ 2] 4741 	jp tb_error 
      001B80 CD 21 7E         [ 4] 4742 2$:	call select_pin 
      001B83 6B 01            [ 1] 4743 	ld (PINNO,sp),a
      001B85 E6 01            [ 1] 4744 	ld a,(GPIO_IDR,x)
      001B87 0D 01            [ 1] 4745 	tnz (PINNO,sp)
      001B89 27 05            [ 1] 4746 	jreq 8$
      001B8B 44               [ 1] 4747 3$: srl a 
      001B8C 0A 01            [ 1] 4748 	dec (PINNO,sp)
      001B8E 26 FB            [ 1] 4749 	jrne 3$ 
      001B90 A4 01            [ 1] 4750 8$: and a,#1 
      001B92 5F               [ 1] 4751 	clrw x 
      001B93 97               [ 1] 4752 	ld xl,a 
      001B94 A6 04            [ 1] 4753 	ld a,#TK_INTGR
      001B96                       4754 	_drop VSIZE
      001B96 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B98 81               [ 4] 4755 	ret
                                   4756 
                                   4757 ;-----------------------
                                   4758 ; BASIC: DWRITE pin,0|1
                                   4759 ; write to a digital pin 
                                   4760 ; pin# {0..15}
                                   4761 ; output:
                                   4762 ;    A 		TK_INTGR
                                   4763 ;    X      0|1 
                                   4764 ;-------------------------
                           000001  4765 	PINNO=1
                           000002  4766 	PINVAL=2
                           000002  4767 	VSIZE=2
      001B99                       4768 digital_write:
      001B99                       4769 	_vars VSIZE 
      001B99 52 02            [ 2]    1     sub sp,#VSIZE 
      001B9B CD 12 A5         [ 4] 4770 	call arg_list  
      001B9E A1 02            [ 1] 4771 	cp a,#2 
      001BA0 27 03            [ 1] 4772 	jreq 1$
      001BA2 CC 07 89         [ 2] 4773 	jp syntax_error
      001BA5 CD 10 84         [ 4] 4774 1$: call dpop 
      001BA8 9F               [ 1] 4775 	ld a,xl 
      001BA9 6B 02            [ 1] 4776 	ld (PINVAL,sp),a
      001BAB CD 10 84         [ 4] 4777 	call dpop
      001BAE A3 00 0F         [ 2] 4778 	cpw x,#15 
      001BB1 23 05            [ 2] 4779 	jrule 2$
      001BB3 A6 0A            [ 1] 4780 	ld a,#ERR_BAD_VALUE
      001BB5 CC 07 8B         [ 2] 4781 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001BB8 CD 21 7E         [ 4] 4782 2$:	call select_pin 
      001BBB 6B 01            [ 1] 4783 	ld (PINNO,sp),a 
      001BBD A6 01            [ 1] 4784 	ld a,#1
      001BBF 0D 01            [ 1] 4785 	tnz (PINNO,sp)
      001BC1 27 05            [ 1] 4786 	jreq 4$
      001BC3 48               [ 1] 4787 3$: sll a
      001BC4 0A 01            [ 1] 4788 	dec (PINNO,sp)
      001BC6 26 FB            [ 1] 4789 	jrne 3$
      001BC8 0D 02            [ 1] 4790 4$: tnz (PINVAL,sp)
      001BCA 26 05            [ 1] 4791 	jrne 5$
      001BCC 43               [ 1] 4792 	cpl a 
      001BCD E4 00            [ 1] 4793 	and a,(GPIO_ODR,x)
      001BCF 20 02            [ 2] 4794 	jra 8$
      001BD1 EA 00            [ 1] 4795 5$: or a,(GPIO_ODR,x)
      001BD3 E7 00            [ 1] 4796 8$: ld (GPIO_ODR,x),a 
      001BD5                       4797 	_drop VSIZE 
      001BD5 5B 02            [ 2]    1     addw sp,#VSIZE 
      001BD7 81               [ 4] 4798 	ret
                                   4799 
                                   4800 
                                   4801 ;-----------------------
                                   4802 ; BASIC: BREAK 
                                   4803 ; insert a breakpoint 
                                   4804 ; in pogram. 
                                   4805 ; the program is resumed
                                   4806 ; with RUN 
                                   4807 ;-------------------------
      001BD8                       4808 break:
      001BD8 72 00 00 21 02   [ 2] 4809 	btjt flags,#FRUN,2$
      001BDD 4F               [ 1] 4810 	clr a
      001BDE 81               [ 4] 4811 	ret 
      001BDF                       4812 2$:	 
                                   4813 ; create space on cstack to save context 
      001BDF AE 1C 06         [ 2] 4814 	ldw x,#break_point 
      001BE2 CD 01 DE         [ 4] 4815 	call puts 
      001BE5                       4816 	_drop 2 ;drop return address 
      001BE5 5B 02            [ 2]    1     addw sp,#2 
      001BE7                       4817 	_vars CTXT_SIZE ; context size 
      001BE7 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001BE9 CD 17 5B         [ 4] 4818 	call save_context 
      001BEC AE 16 C8         [ 2] 4819 	ldw x,#tib 
      001BEF CF 00 04         [ 2] 4820 	ldw basicptr,x
      001BF2 7F               [ 1] 4821 	clr (x)
      001BF3 72 5F 00 03      [ 1] 4822 	clr count  
      001BF7 5F               [ 1] 4823 	clrw x 
      001BF8 CF 00 00         [ 2] 4824 	ldw in.w,x
      001BFB 72 11 00 21      [ 1] 4825 	bres flags,#FRUN 
      001BFF 72 18 00 21      [ 1] 4826 	bset flags,#FBREAK
      001C03 CC 08 0F         [ 2] 4827 	jp interp_loop 
      001C06 0A 62 72 65 61 6B 20  4828 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4829 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4830 ;-----------------------
                                   4831 ; BASIC: NEW
                                   4832 ; from command line only 
                                   4833 ; free program memory
                                   4834 ; and clear variables 
                                   4835 ;------------------------
      001C24                       4836 new: 
      001C24 72 01 00 21 02   [ 2] 4837 	btjf flags,#FRUN,0$ 
      001C29 4F               [ 1] 4838 	clr a 
      001C2A 81               [ 4] 4839 	ret 
      001C2B                       4840 0$:	
      001C2B CD 06 6B         [ 4] 4841 	call clear_basic 
      001C2E 81               [ 4] 4842 	ret 
                                   4843 	 
                                   4844 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4845 ;   file system routines
                                   4846 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4847 
                                   4848 ;--------------------
                                   4849 ; input:
                                   4850 ;   X     increment 
                                   4851 ; output:
                                   4852 ;   farptr  incremented 
                                   4853 ;---------------------
      001C2F                       4854 incr_farptr:
      001C2F 72 BB 00 13      [ 2] 4855 	addw x,farptr+1 
      001C33 24 04            [ 1] 4856 	jrnc 1$
      001C35 72 5C 00 12      [ 1] 4857 	inc farptr 
      001C39 CF 00 13         [ 2] 4858 1$:	ldw farptr+1,x  
      001C3C 81               [ 4] 4859 	ret 
                                   4860 
                                   4861 ;------------------------------
                                   4862 ; extended flash memory used as FLASH_DRIVE 
                                   4863 ; seek end of used flash drive   
                                   4864 ; starting at 0x10000 address.
                                   4865 ; 4 consecutives 0 bytes signal free space. 
                                   4866 ; input:
                                   4867 ;	none
                                   4868 ; output:
                                   4869 ;   ffree     free_addr| 0 if memory full.
                                   4870 ;------------------------------
      001C3D                       4871 seek_fdrive:
                                   4872 ; start scan at 0x10000 address 
      001C3D A6 01            [ 1] 4873 	ld a,#1
      001C3F C7 00 12         [ 1] 4874 	ld farptr,a 
      001C42 5F               [ 1] 4875 	clrw x 
      001C43 CF 00 13         [ 2] 4876 	ldw farptr+1,x 
      001C46                       4877 1$:
      001C46 AE 00 03         [ 2] 4878 	ldw x,#3  
      001C49 92 AF 00 12      [ 5] 4879 2$:	ldf a,([farptr],x) 
      001C4D 26 05            [ 1] 4880 	jrne 3$
      001C4F 5A               [ 2] 4881 	decw x
      001C50 2A F7            [ 1] 4882 	jrpl 2$
      001C52 20 19            [ 2] 4883 	jra 4$ 
      001C54 5C               [ 2] 4884 3$:	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C55 CD 1C 2F         [ 4] 4885 	call incr_farptr
      001C58 AE 02 7F         [ 2] 4886 	ldw x,#0x27f 
      001C5B C3 00 12         [ 2] 4887 	cpw x,farptr
      001C5E 2A E6            [ 1] 4888 	jrpl 1$
                                   4889 ; drive full 
      001C60 72 5F 00 15      [ 1] 4890 	clr ffree 
      001C64 72 5F 00 16      [ 1] 4891 	clr ffree+1 
      001C68 72 5F 00 17      [ 1] 4892 	clr ffree+2 
      001C6C 81               [ 4] 4893 	ret
      001C6D                       4894 4$: ; copy farptr to ffree	 
      001C6D CE 00 12         [ 2] 4895 	ldw x,farptr 
      001C70 C6 00 14         [ 1] 4896 	ld a,farptr+2 
      001C73 CF 00 15         [ 2] 4897 	ldw ffree,x 
      001C76 C7 00 17         [ 1] 4898 	ld ffree+2,a  
      001C79 81               [ 4] 4899 	ret 
                                   4900 
                                   4901 ;-----------------------
                                   4902 ; compare file name 
                                   4903 ; with name pointed by Y  
                                   4904 ; input:
                                   4905 ;   farptr   file name 
                                   4906 ;   Y        target name 
                                   4907 ; output:
                                   4908 ;   farptr 	 at file_name
                                   4909 ;   X 		 farptr[x] point at size field  
                                   4910 ;   Carry    0|1 no match|match  
                                   4911 ;----------------------
      001C7A                       4912 cmp_name:
      001C7A 5F               [ 1] 4913 	clrw x
      001C7B 92 AF 00 12      [ 5] 4914 1$:	ldf a,([farptr],x)
      001C7F 90 F1            [ 1] 4915 	cp a,(y)
      001C81 26 08            [ 1] 4916 	jrne 4$
      001C83 4D               [ 1] 4917 	tnz a 
      001C84 27 12            [ 1] 4918 	jreq 9$ 
      001C86 5C               [ 2] 4919     incw x 
      001C87 90 5C            [ 2] 4920 	incw y 
      001C89 20 F0            [ 2] 4921 	jra 1$
      001C8B                       4922 4$: ;no match 
      001C8B 4D               [ 1] 4923 	tnz a 
      001C8C 27 07            [ 1] 4924 	jreq 5$
      001C8E 5C               [ 2] 4925 	incw x 
      001C8F 92 AF 00 12      [ 5] 4926 	ldf a,([farptr],x)
      001C93 20 F6            [ 2] 4927 	jra 4$  
      001C95 5C               [ 2] 4928 5$:	incw x ; farptr[x] point at 'size' field 
      001C96 98               [ 1] 4929 	rcf 
      001C97 81               [ 4] 4930 	ret
      001C98                       4931 9$: ; match  
      001C98 5C               [ 2] 4932 	incw x  ; farptr[x] at 'size' field 
      001C99 99               [ 1] 4933 	scf 
      001C9A 81               [ 4] 4934 	ret 
                                   4935 
                                   4936 ;-----------------------
                                   4937 ; search file in 
                                   4938 ; flash memory 
                                   4939 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4940 ;   Y       file name  
                                   4941 ; output:
                                   4942 ;   farptr  addr at name|0
                                   4943 ;-----------------------
                           000001  4944 	FSIZE=1
                           000003  4945 	YSAVE=3
                           000004  4946 	VSIZE=4 
      001C9B                       4947 search_file: 
      001C9B                       4948 	_vars VSIZE
      001C9B 52 04            [ 2]    1     sub sp,#VSIZE 
      001C9D 17 03            [ 2] 4949 	ldw (YSAVE,sp),y  
      001C9F 5F               [ 1] 4950 	clrw x 
      001CA0 CF 00 13         [ 2] 4951 	ldw farptr+1,x 
      001CA3 35 01 00 12      [ 1] 4952 	mov farptr,#1
      001CA7                       4953 1$:	
                                   4954 ; check if farptr is after any file 
                                   4955 ; if  0 then so.
      001CA7 92 BC 00 12      [ 5] 4956 	ldf a,[farptr]
      001CAB 27 25            [ 1] 4957 	jreq 6$
      001CAD 5F               [ 1] 4958 2$: clrw x 	
      001CAE 16 03            [ 2] 4959 	ldw y,(YSAVE,sp) 
      001CB0 CD 1C 7A         [ 4] 4960 	call cmp_name
      001CB3 25 2D            [ 1] 4961 	jrc 9$
      001CB5 92 AF 00 12      [ 5] 4962 	ldf a,([farptr],x)
      001CB9 6B 01            [ 1] 4963 	ld (FSIZE,sp),a 
      001CBB 5C               [ 2] 4964 	incw x 
      001CBC 92 AF 00 12      [ 5] 4965 	ldf a,([farptr],x)
      001CC0 6B 02            [ 1] 4966 	ld (FSIZE+1,sp),a 
      001CC2 5C               [ 2] 4967 	incw x 
      001CC3 72 FB 01         [ 2] 4968 	addw x,(FSIZE,sp) ; count to skip 
      001CC6 5C               [ 2] 4969 	incw x ; skip over EOF marker 
      001CC7 CD 1C 2F         [ 4] 4970 	call incr_farptr ; now at next file 'name_field'
      001CCA AE 02 80         [ 2] 4971 	ldw x,#0x280
      001CCD C3 00 12         [ 2] 4972 	cpw x,farptr 
      001CD0 2A D5            [ 1] 4973 	jrpl 1$
      001CD2                       4974 6$: ; file not found 
      001CD2 72 5F 00 12      [ 1] 4975 	clr farptr
      001CD6 72 5F 00 13      [ 1] 4976 	clr farptr+1 
      001CDA 72 5F 00 14      [ 1] 4977 	clr farptr+2 
      001CDE                       4978 	_drop VSIZE 
      001CDE 5B 04            [ 2]    1     addw sp,#VSIZE 
      001CE0 98               [ 1] 4979 	rcf
      001CE1 81               [ 4] 4980 	ret
      001CE2                       4981 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001CE2                       4982 	_drop VSIZE 
      001CE2 5B 04            [ 2]    1     addw sp,#VSIZE 
      001CE4 99               [ 1] 4983 	scf 	
      001CE5 81               [ 4] 4984 	ret
                                   4985 
                                   4986 ;--------------------------------
                                   4987 ; BASIC: SAVE "name" 
                                   4988 ; save text program in 
                                   4989 ; flash memory used as 
                                   4990 ;--------------------------------
                           000001  4991 	BSIZE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                           000003  4992 	NAMEPTR=3
                           000004  4993 	VSIZE=4
      001CE6                       4994 save:
      001CE6 72 01 00 21 05   [ 2] 4995 	btjf flags,#FRUN,0$ 
      001CEB A6 07            [ 1] 4996 	ld a,#ERR_CMD_ONLY 
      001CED CC 07 8B         [ 2] 4997 	jp tb_error
      001CF0                       4998 0$:	 
      001CF0 CE 00 1C         [ 2] 4999 	ldw x,txtend 
      001CF3 72 B0 00 1A      [ 2] 5000 	subw x,txtbgn
      001CF7 26 01            [ 1] 5001 	jrne 1$
                                   5002 ; nothing to save 
      001CF9 81               [ 4] 5003 	ret 
      001CFA                       5004 1$:	
      001CFA                       5005 	_vars VSIZE 
      001CFA 52 04            [ 2]    1     sub sp,#VSIZE 
      001CFC 1F 01            [ 2] 5006 	ldw (BSIZE,sp),x 
      001CFE CD 08 3F         [ 4] 5007 	call next_token	
      001D01 A1 0A            [ 1] 5008 	cp a,#TK_QSTR
      001D03 27 03            [ 1] 5009 	jreq 2$
      001D05 CC 07 89         [ 2] 5010 	jp syntax_error
      001D08                       5011 2$: 
      001D08 90 CE 00 04      [ 2] 5012 	ldw y,basicptr 
      001D0C 72 B9 00 00      [ 2] 5013 	addw y,in.w
      001D10 17 03            [ 2] 5014 	ldw (NAMEPTR,sp),y  
      001D12 55 00 03 00 01   [ 1] 5015 	mov in,count 
                                   5016 ; check if enough free space 
      001D17 93               [ 1] 5017 	ldw x,y 
      001D18 CD 02 A0         [ 4] 5018 	call strlen 
      001D1B 1C 00 03         [ 2] 5019 	addw x,#3 
      001D1E 72 FB 01         [ 2] 5020 	addw x,(BSIZE,sp)
      001D21 72 5D 00 15      [ 1] 5021 	tnz ffree 
      001D25 26 0B            [ 1] 5022 	jrne 21$
      001D27 72 B0 00 16      [ 2] 5023 	subw x,ffree+1 
      001D2B 23 05            [ 2] 5024 	jrule 21$
      001D2D A6 01            [ 1] 5025 	ld a,#ERR_MEM_FULL 
      001D2F CC 07 8B         [ 2] 5026 	jp tb_error
      001D32                       5027 21$: 
                                   5028 ; check for existing file of that name 
      001D32 16 03            [ 2] 5029 	ldw y,(NAMEPTR,sp)	
      001D34 CD 1C 9B         [ 4] 5030 	call search_file 
      001D37 24 05            [ 1] 5031 	jrnc 3$ 
      001D39 A6 08            [ 1] 5032 	ld a,#ERR_DUPLICATE 
      001D3B CC 07 8B         [ 2] 5033 	jp tb_error 
      001D3E                       5034 3$:	;** write file name to flash **
      001D3E CE 00 15         [ 2] 5035 	ldw x,ffree 
      001D41 C6 00 17         [ 1] 5036 	ld a,ffree+2 
      001D44 CF 00 12         [ 2] 5037 	ldw farptr,x 
      001D47 C7 00 14         [ 1] 5038 	ld farptr+2,a 
      001D4A 1E 03            [ 2] 5039 	ldw x,(NAMEPTR,sp)  
      001D4C CD 02 A0         [ 4] 5040 	call strlen 
      001D4F 5C               [ 2] 5041 	incw  x
      001D50 1F 01            [ 2] 5042 	ldw (BSIZE,sp),x  
      001D52 5F               [ 1] 5043 	clrw x   
      001D53 16 03            [ 2] 5044 	ldw y,(NAMEPTR,sp)
      001D55 CD 01 6D         [ 4] 5045 	call write_block  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   5046 ;** write file length after name **
      001D58 CE 00 1C         [ 2] 5047 	ldw x,txtend 
      001D5B 72 B0 00 1A      [ 2] 5048 	subw x,txtbgn
      001D5F 1F 01            [ 2] 5049 	ldw (BSIZE,sp),x 
      001D61 5F               [ 1] 5050 	clrw x 
      001D62 7B 01            [ 1] 5051 	ld a,(1,sp)
      001D64 CD 00 F8         [ 4] 5052 	call write_byte 
      001D67 5C               [ 2] 5053 	incw x 
      001D68 7B 02            [ 1] 5054 	ld a,(2,sp)
      001D6A CD 00 F8         [ 4] 5055 	call write_byte
      001D6D 5C               [ 2] 5056 	incw x  
      001D6E CD 1C 2F         [ 4] 5057 	call incr_farptr ; move farptr after SIZE field 
                                   5058 ;** write BASIC text **
                                   5059 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001D71 1E 01            [ 2] 5060 	ldw x,(BSIZE,sp)
      001D73 89               [ 2] 5061 	pushw x ; write_block argument 
      001D74 5F               [ 1] 5062 	clrw x 
      001D75 90 CE 00 1A      [ 2] 5063 	ldw y,txtbgn  ; BASIC text to save 
      001D79 CD 01 6D         [ 4] 5064 	call write_block 
      001D7C                       5065 	_drop 2 ;  drop write_block argument  
      001D7C 5B 02            [ 2]    1     addw sp,#2 
                                   5066 ; write en end of file marker 
      001D7E AE 00 01         [ 2] 5067 	ldw x,#1
      001D81 A6 FF            [ 1] 5068 	ld a,#EOF  
      001D83 CD 00 F8         [ 4] 5069 	call write_byte 
      001D86 CD 1C 2F         [ 4] 5070 	call incr_farptr
                                   5071 ; save farptr in ffree
      001D89 CE 00 12         [ 2] 5072 	ldw x,farptr 
      001D8C C6 00 14         [ 1] 5073 	ld a,farptr+2 
      001D8F CF 00 15         [ 2] 5074 	ldw ffree,x 
      001D92 C7 00 17         [ 1] 5075 	ld ffree+2,a
                                   5076 ;write 4 zero bytes as an end of all files marker 
      001D95 5F               [ 1] 5077     clrw x 
      001D96 4B 04            [ 1] 5078 	push #4 
      001D98                       5079 4$:
      001D98 4F               [ 1] 5080 	clr a 
      001D99 CD 00 F8         [ 4] 5081 	call write_byte 
      001D9C 5C               [ 2] 5082 	incw x 
      001D9D 0A 01            [ 1] 5083 	dec (1,sp)
      001D9F 26 F7            [ 1] 5084 	jrne 4$
      001DA1 84               [ 1] 5085 5$: pop a 
                                   5086 ; display saved size  
      001DA2 1E 01            [ 2] 5087 	ldw x,(BSIZE,sp) 
      001DA4 CD 0A 7E         [ 4] 5088 	call print_int 
      001DA7                       5089 	_drop VSIZE 
      001DA7 5B 04            [ 2]    1     addw sp,#VSIZE 
      001DA9 81               [ 4] 5090 	ret 
                                   5091 
                                   5092 ;----------------------
                                   5093 ; load file in RAM memory
                                   5094 ; input:
                                   5095 ;    farptr point at file size 
                                   5096 ; output:
                                   5097 ;   y point after BASIC program in RAM.
                                   5098 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001DAA                       5099 load_file:
      001DAA CD 1C 2F         [ 4] 5100 	call incr_farptr  
      001DAD CD 06 6B         [ 4] 5101 	call clear_basic  
      001DB0 5F               [ 1] 5102 	clrw x
      001DB1 92 AF 00 12      [ 5] 5103 	ldf a,([farptr],x)
      001DB5 90 95            [ 1] 5104 	ld yh,a 
      001DB7 5C               [ 2] 5105 	incw x  
      001DB8 92 AF 00 12      [ 5] 5106 	ldf a,([farptr],x)
      001DBC 5C               [ 2] 5107 	incw x 
      001DBD 90 97            [ 1] 5108 	ld yl,a 
      001DBF 72 B9 00 1A      [ 2] 5109 	addw y,txtbgn
      001DC3 90 CF 00 1C      [ 2] 5110 	ldw txtend,y
      001DC7 90 CE 00 1A      [ 2] 5111 	ldw y,txtbgn
      001DCB                       5112 3$:	; load BASIC text 	
      001DCB 92 AF 00 12      [ 5] 5113 	ldf a,([farptr],x)
      001DCF 90 F7            [ 1] 5114 	ld (y),a 
      001DD1 5C               [ 2] 5115 	incw x 
      001DD2 90 5C            [ 2] 5116 	incw y 
      001DD4 90 C3 00 1C      [ 2] 5117 	cpw y,txtend 
      001DD8 2B F1            [ 1] 5118 	jrmi 3$
      001DDA 81               [ 4] 5119 	ret 
                                   5120 
                                   5121 ;------------------------
                                   5122 ; BASIC: LOAD "file" 
                                   5123 ; load file to RAM 
                                   5124 ; for execution 
                                   5125 ;------------------------
      001DDB                       5126 load:
      001DDB 72 01 00 21 07   [ 2] 5127 	btjf flags,#FRUN,0$ 
      001DE0 27 05            [ 1] 5128 	jreq 0$ 
      001DE2 A6 07            [ 1] 5129 	ld a,#ERR_CMD_ONLY 
      001DE4 CC 07 8B         [ 2] 5130 	jp tb_error 
      001DE7                       5131 0$:	
      001DE7 CD 08 3F         [ 4] 5132 	call next_token 
      001DEA A1 0A            [ 1] 5133 	cp a,#TK_QSTR
      001DEC 27 03            [ 1] 5134 	jreq 1$
      001DEE CC 07 89         [ 2] 5135 	jp syntax_error 
      001DF1                       5136 1$:	
      001DF1 90 CE 00 04      [ 2] 5137 	ldw y,basicptr
      001DF5 72 B9 00 00      [ 2] 5138 	addw y,in.w 
      001DF9 55 00 03 00 01   [ 1] 5139 	mov in,count 
      001DFE CD 1C 9B         [ 4] 5140 	call search_file 
      001E01 25 05            [ 1] 5141 	jrc 2$ 
      001E03 A6 09            [ 1] 5142 	ld a,#ERR_NOT_FILE
      001E05 CC 07 8B         [ 2] 5143 	jp tb_error  
      001E08                       5144 2$:
      001E08 CD 1D AA         [ 4] 5145 	call load_file
                                   5146 ; print loaded size 	 
      001E0B CE 00 1C         [ 2] 5147 	ldw x,txtend 
      001E0E 72 B0 00 1A      [ 2] 5148 	subw x,txtbgn
      001E12 CD 0A 7E         [ 4] 5149 	call print_int 
      001E15 81               [ 4] 5150 	ret 
                                   5151 
                                   5152 ;-----------------------------------
                                   5153 ; BASIC: FORGET ["file_name"] 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5154 ; erase file_name and all others 
                                   5155 ; after it. 
                                   5156 ; without argument erase all files 
                                   5157 ;-----------------------------------
      001E16                       5158 forget:
      001E16 CD 08 3F         [ 4] 5159 	call next_token 
      001E19 A1 00            [ 1] 5160 	cp a,#TK_NONE 
      001E1B 27 26            [ 1] 5161 	jreq 3$ 
      001E1D A1 0A            [ 1] 5162 	cp a,#TK_QSTR
      001E1F 27 03            [ 1] 5163 	jreq 1$
      001E21 CC 07 89         [ 2] 5164 	jp syntax_error
      001E24 90 CE 00 04      [ 2] 5165 1$: ldw y,basicptr
      001E28 72 B9 00 00      [ 2] 5166 	addw y,in.w
      001E2C 55 00 03 00 01   [ 1] 5167 	mov in,count 
      001E31 CD 1C 9B         [ 4] 5168 	call search_file
      001E34 25 05            [ 1] 5169 	jrc 2$
      001E36 A6 09            [ 1] 5170 	ld a,#ERR_NOT_FILE 
      001E38 CC 07 8B         [ 2] 5171 	jp tb_error 
      001E3B                       5172 2$: 
      001E3B CE 00 12         [ 2] 5173 	ldw x,farptr
      001E3E C6 00 14         [ 1] 5174 	ld a,farptr+2
      001E41 20 0A            [ 2] 5175 	jra 4$ 
      001E43                       5176 3$: ; forget all files 
      001E43 AE 01 00         [ 2] 5177 	ldw x,#0x100
      001E46 4F               [ 1] 5178 	clr a 
      001E47 CF 00 12         [ 2] 5179 	ldw farptr,x 
      001E4A C7 00 14         [ 1] 5180 	ld farptr+2,a 
      001E4D                       5181 4$:
      001E4D CF 00 15         [ 2] 5182 	ldw ffree,x 
      001E50 C7 00 17         [ 1] 5183 	ld ffree+2,a 
      001E53 4B 04            [ 1] 5184 	push #4
      001E55 5F               [ 1] 5185 	clrw x 
      001E56                       5186 5$: 
      001E56 4F               [ 1] 5187 	clr a  
      001E57 CD 00 F8         [ 4] 5188 	call write_byte 
      001E5A 5C               [ 2] 5189 	incw x 
      001E5B 0A 01            [ 1] 5190 	dec (1,sp)
      001E5D 26 F7            [ 1] 5191 	jrne 5$	
      001E5F 84               [ 1] 5192 6$: pop a 
      001E60 81               [ 4] 5193 	ret 
                                   5194 
                                   5195 ;----------------------
                                   5196 ; BASIC: DIR 
                                   5197 ; list saved files 
                                   5198 ;----------------------
                           000001  5199 	COUNT=1 ; files counter 
                           000002  5200 	VSIZE=2 
      001E61                       5201 directory:
      001E61                       5202 	_vars VSIZE 
      001E61 52 02            [ 2]    1     sub sp,#VSIZE 
      001E63 5F               [ 1] 5203 	clrw x 
      001E64 1F 01            [ 2] 5204 	ldw (COUNT,sp),x 
      001E66 CF 00 13         [ 2] 5205 	ldw farptr+1,x 
      001E69 35 01 00 12      [ 1] 5206 	mov farptr,#1 
      001E6D                       5207 dir_loop:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E6D 5F               [ 1] 5208 	clrw x 
      001E6E 92 AF 00 12      [ 5] 5209 	ldf a,([farptr],x)
      001E72 27 39            [ 1] 5210 	jreq 8$ 
      001E74                       5211 1$: ;name loop 	
      001E74 92 AF 00 12      [ 5] 5212 	ldf a,([farptr],x)
      001E78 27 06            [ 1] 5213 	jreq 2$ 
      001E7A CD 01 CB         [ 4] 5214 	call putc 
      001E7D 5C               [ 2] 5215 	incw x 
      001E7E 20 F4            [ 2] 5216 	jra 1$
      001E80 5C               [ 2] 5217 2$: incw x ; skip ending 0. 
      001E81 A6 20            [ 1] 5218 	ld a,#SPACE 
      001E83 CD 01 CB         [ 4] 5219 	call putc 
                                   5220 ; get file size 	
      001E86 92 AF 00 12      [ 5] 5221 	ldf a,([farptr],x)
      001E8A 90 95            [ 1] 5222 	ld yh,a 
      001E8C 5C               [ 2] 5223 	incw x 
      001E8D 92 AF 00 12      [ 5] 5224 	ldf a,([farptr],x)
      001E91 5C               [ 2] 5225 	incw x 
      001E92 90 97            [ 1] 5226 	ld yl,a 
      001E94 90 89            [ 2] 5227 	pushw y 
      001E96 72 FB 01         [ 2] 5228 	addw x,(1,sp)
      001E99 5C               [ 2] 5229 	incw x ; skip EOF marker 
                                   5230 ; skip to next file 
      001E9A CD 1C 2F         [ 4] 5231 	call incr_farptr 
                                   5232 ; print file size 
      001E9D 85               [ 2] 5233 	popw x ; file size 
      001E9E CD 0A 7E         [ 4] 5234 	call print_int 
      001EA1 A6 0D            [ 1] 5235 	ld a,#CR 
      001EA3 CD 01 CB         [ 4] 5236 	call putc
      001EA6 1E 01            [ 2] 5237 	ldw x,(COUNT,sp)
      001EA8 5C               [ 2] 5238 	incw x
      001EA9 1F 01            [ 2] 5239 	ldw (COUNT,sp),x  
      001EAB 20 C0            [ 2] 5240 	jra dir_loop 
      001EAD                       5241 8$: ; print number of files 
      001EAD 1E 01            [ 2] 5242 	ldw x,(COUNT,sp)
      001EAF CD 0A 7E         [ 4] 5243 	call print_int 
      001EB2 AE 1E E2         [ 2] 5244 	ldw x,#file_count 
      001EB5 CD 01 DE         [ 4] 5245 	call puts  
                                   5246 ; print drive free space 	
      001EB8 A6 FF            [ 1] 5247 	ld a,#0xff 
      001EBA C0 00 17         [ 1] 5248 	sub a,ffree+2 
      001EBD C7 00 09         [ 1] 5249 	ld acc8,a 
      001EC0 A6 7F            [ 1] 5250 	ld a,#0x7f 
      001EC2 C2 00 16         [ 1] 5251 	sbc a,ffree+1 
      001EC5 C7 00 08         [ 1] 5252 	ld acc16,a 
      001EC8 A6 02            [ 1] 5253 	ld a,#2 
      001ECA C2 00 15         [ 1] 5254 	sbc a,ffree 
      001ECD C7 00 07         [ 1] 5255 	ld acc24,a 
      001ED0 5F               [ 1] 5256 	clrw x  
      001ED1 A6 06            [ 1] 5257 	ld a,#6 
      001ED3 97               [ 1] 5258 	ld xl,a 
      001ED4 A6 0A            [ 1] 5259 	ld a,#10 
      001ED6 CD 0A 36         [ 4] 5260 	call prti24 
      001ED9 AE 1E EA         [ 2] 5261 	ldw x,#drive_free
      001EDC CD 01 DE         [ 4] 5262 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001EDF                       5263 	_drop VSIZE 
      001EDF 5B 02            [ 2]    1     addw sp,#VSIZE 
      001EE1 81               [ 4] 5264 	ret
      001EE2 20 66 69 6C 65 73 0A  5265 file_count: .asciz " files\n"
             00
      001EEA 20 62 79 74 65 73 20  5266 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5267 
                                   5268 ;---------------------
                                   5269 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5270 ; write 1 or more byte to FLASH or EEPROM
                                   5271 ; starting at address  
                                   5272 ; input:
                                   5273 ;   expr1  	is address 
                                   5274 ;   expr2,...,exprn   are bytes to write
                                   5275 ; output:
                                   5276 ;   none 
                                   5277 ;---------------------
                           000001  5278 	ADDR=1
                           000002  5279 	VSIZ=2 
      001EF7                       5280 write:
      001EF7                       5281 	_vars VSIZE 
      001EF7 52 02            [ 2]    1     sub sp,#VSIZE 
      001EF9 72 5F 00 12      [ 1] 5282 	clr farptr ; expect 16 bits address 
      001EFD CD 13 A9         [ 4] 5283 	call expression
      001F00 A1 04            [ 1] 5284 	cp a,#TK_INTGR 
      001F02 27 03            [ 1] 5285 	jreq 0$
      001F04 CC 07 89         [ 2] 5286 	jp syntax_error
      001F07 1F 01            [ 2] 5287 0$: ldw (ADDR,sp),x 
      001F09 CD 08 3F         [ 4] 5288 	call next_token 
      001F0C A1 0D            [ 1] 5289 	cp a,#TK_COMMA 
      001F0E 27 02            [ 1] 5290 	jreq 1$ 
      001F10 20 19            [ 2] 5291 	jra 9$ 
      001F12 CD 13 A9         [ 4] 5292 1$:	call expression
      001F15 A1 04            [ 1] 5293 	cp a,#TK_INTGR
      001F17 27 03            [ 1] 5294 	jreq 2$
      001F19 CC 07 89         [ 2] 5295 	jp syntax_error
      001F1C 9F               [ 1] 5296 2$:	ld a,xl 
      001F1D 1E 01            [ 2] 5297 	ldw x,(ADDR,sp) 
      001F1F CF 00 13         [ 2] 5298 	ldw farptr+1,x 
      001F22 5F               [ 1] 5299 	clrw x 
      001F23 CD 00 F8         [ 4] 5300 	call write_byte
      001F26 1E 01            [ 2] 5301 	ldw x,(ADDR,sp)
      001F28 5C               [ 2] 5302 	incw x 
      001F29 20 DC            [ 2] 5303 	jra 0$ 
      001F2B                       5304 9$:
      001F2B                       5305 	_drop VSIZE
      001F2B 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F2D 81               [ 4] 5306 	ret 
                                   5307 
                                   5308 
                                   5309 ;---------------------
                                   5310 ;BASIC: CHAR(expr)
                                   5311 ; évaluate expression 
                                   5312 ; and take the 7 least 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                   5313 ; bits as ASCII character
                                   5314 ;---------------------
      001F2E                       5315 char:
      001F2E CD 12 C9         [ 4] 5316 	call func_args 
      001F31 A1 01            [ 1] 5317 	cp a,#1
      001F33 27 03            [ 1] 5318 	jreq 1$
      001F35 CC 07 89         [ 2] 5319 	jp syntax_error
      001F38 CD 10 84         [ 4] 5320 1$:	call dpop 
      001F3B 9F               [ 1] 5321 	ld a,xl 
      001F3C A4 7F            [ 1] 5322 	and a,#0x7f 
      001F3E 97               [ 1] 5323 	ld xl,a
      001F3F A6 03            [ 1] 5324 	ld a,#TK_CHAR
      001F41 81               [ 4] 5325 	ret
                                   5326 
                                   5327 ;---------------------
                                   5328 ; BASIC: ASC(string|char)
                                   5329 ; extract first character 
                                   5330 ; of string argument 
                                   5331 ; return it as TK_INTGR 
                                   5332 ;---------------------
      001F42                       5333 ascii:
      001F42 A6 0B            [ 1] 5334 	ld a,#TK_LPAREN
      001F44 CD 12 98         [ 4] 5335 	call expect 
      001F47 CD 08 3F         [ 4] 5336 	call next_token 
      001F4A A1 0A            [ 1] 5337 	cp a,#TK_QSTR 
      001F4C 27 07            [ 1] 5338 	jreq 1$
      001F4E A1 03            [ 1] 5339 	cp a,#TK_CHAR 
      001F50 27 06            [ 1] 5340 	jreq 2$ 
      001F52 CC 07 89         [ 2] 5341 	jp syntax_error
      001F55                       5342 1$: 
      001F55 F6               [ 1] 5343 	ld a,(x) 
      001F56 5F               [ 1] 5344 	clrw x
      001F57 97               [ 1] 5345 	ld xl,a 
      001F58                       5346 2$: 
      001F58 89               [ 2] 5347 	pushw x 
      001F59 A6 0C            [ 1] 5348 	ld a,#TK_RPAREN 
      001F5B CD 12 98         [ 4] 5349 	call expect
      001F5E 85               [ 2] 5350 	popw x 
      001F5F A6 04            [ 1] 5351 	ld a,#TK_INTGR 
      001F61 81               [ 4] 5352 	ret 
                                   5353 
                                   5354 ;---------------------
                                   5355 ;BASIC: KEY
                                   5356 ; wait for a character 
                                   5357 ; received from STDIN 
                                   5358 ; input:
                                   5359 ;	none 
                                   5360 ; output:
                                   5361 ;	X 		ASCII character 
                                   5362 ;---------------------
      001F62                       5363 key:
      001F62 CD 01 D4         [ 4] 5364 	call getc 
      001F65 5F               [ 1] 5365 	clrw x 
      001F66 97               [ 1] 5366 	ld xl,a 
      001F67 A6 04            [ 1] 5367 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001F69 81               [ 4] 5368 	ret
                                   5369 
                                   5370 ;----------------------
                                   5371 ; BASIC: QKEY
                                   5372 ; Return true if there 
                                   5373 ; is a character in 
                                   5374 ; waiting in STDIN 
                                   5375 ; input:
                                   5376 ;  none 
                                   5377 ; output:
                                   5378 ;   X 		0|-1 
                                   5379 ;-----------------------
      001F6A                       5380 qkey: 
      001F6A 5F               [ 1] 5381 	clrw x 
      001F6B 72 5D 00 23      [ 1] 5382 	tnz rx_char
      001F6F 27 01            [ 1] 5383 	jreq 9$ 
      001F71 53               [ 2] 5384 	cplw x 
      001F72 A6 04            [ 1] 5385 9$: ld a,#TK_INTGR
      001F74 81               [ 4] 5386 	ret 
                                   5387 
                                   5388 ;---------------------
                                   5389 ; BASIC: GPIO(expr,reg)
                                   5390 ; return gpio address 
                                   5391 ; expr {0..8}
                                   5392 ; input:
                                   5393 ;   none 
                                   5394 ; output:
                                   5395 ;   X 		gpio register address
                                   5396 ;----------------------------
      001F75                       5397 gpio:
      001F75 CD 12 C9         [ 4] 5398 	call func_args 
      001F78 A1 02            [ 1] 5399 	cp a,#2
      001F7A 27 03            [ 1] 5400 	jreq 1$
      001F7C CC 07 89         [ 2] 5401 	jp syntax_error  
      001F7F                       5402 1$:	
      001F7F AE 00 02         [ 2] 5403 	ldw x,#2
      001F82 72 DE 00 18      [ 5] 5404 	ldw x,([dstkptr],x) ; port 
      001F86 2B 1B            [ 1] 5405 	jrmi bad_port
      001F88 A3 00 09         [ 2] 5406 	cpw x,#9
      001F8B 2A 16            [ 1] 5407 	jrpl bad_port
      001F8D A6 05            [ 1] 5408 	ld a,#5
      001F8F 42               [ 4] 5409 	mul x,a
      001F90 1C 50 00         [ 2] 5410 	addw x,#GPIO_BASE 
      001F93 89               [ 2] 5411 	pushw x 
      001F94 CD 10 84         [ 4] 5412 	call dpop 
      001F97 72 FB 01         [ 2] 5413 	addw x,(1,sp)
      001F9A 1F 01            [ 2] 5414 	ldw (1,sp),x  
      001F9C CD 10 AB         [ 4] 5415 	call ddrop  
      001F9F 85               [ 2] 5416 	popw x 
      001FA0 A6 04            [ 1] 5417 	ld a,#TK_INTGR
      001FA2 81               [ 4] 5418 	ret
      001FA3                       5419 bad_port:
      001FA3 A6 0A            [ 1] 5420 	ld a,#ERR_BAD_VALUE
      001FA5 CC 07 8B         [ 2] 5421 	jp tb_error
                                   5422 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5423 
                                   5424 ;-------------------------
                                   5425 ; BASIC: UFLASH 
                                   5426 ; return user flash address
                                   5427 ; input:
                                   5428 ;  none 
                                   5429 ; output:
                                   5430 ;	A		TK_INTGR
                                   5431 ;   X 		user address 
                                   5432 ;---------------------------
      001FA8                       5433 uflash:
      001FA8 AE 26 80         [ 2] 5434 	ldw x,#user_space 
      001FAB A6 04            [ 1] 5435 	ld a,#TK_INTGR 
      001FAD 81               [ 4] 5436 	ret 
                                   5437 
                                   5438 
                                   5439 ;---------------------
                                   5440 ; BASIC: USR(addr[,arg])
                                   5441 ; execute a function written 
                                   5442 ; in binary code.
                                   5443 ; binary fonction should 
                                   5444 ; return token attribute in A 
                                   5445 ; and value in X. 
                                   5446 ; input:
                                   5447 ;   addr	routine address 
                                   5448 ;   arg 	is an optional argument 
                                   5449 ; output:
                                   5450 ;   A 		token attribute 
                                   5451 ;   X       returned value 
                                   5452 ;---------------------
      001FAE                       5453 usr:
      001FAE 90 89            [ 2] 5454 	pushw y 	
      001FB0 CD 12 C9         [ 4] 5455 	call func_args 
      001FB3 A1 01            [ 1] 5456 	cp a,#1 
      001FB5 2A 03            [ 1] 5457 	jrpl 2$ 
      001FB7 CC 07 89         [ 2] 5458 	jp syntax_error 
      001FBA                       5459 2$: 
      001FBA CD 10 84         [ 4] 5460 	call dpop 
      001FBD A1 02            [ 1] 5461 	cp a,#2 
      001FBF 2B 05            [ 1] 5462 	jrmi 4$
      001FC1 90 93            [ 1] 5463 	ldw y,x ; y=arg 
      001FC3 CD 10 84         [ 4] 5464 	call dpop ;x=addr 
      001FC6 51               [ 1] 5465 4$:	exgw y,x ; y=addr,x=arg 
      001FC7 90 FD            [ 4] 5466 	call (y)
      001FC9 90 85            [ 2] 5467 	popw y 
      001FCB 81               [ 4] 5468 	ret 
                                   5469 
                                   5470 ;------------------------------
                                   5471 ; BASIC: BYE 
                                   5472 ; halt mcu in its lowest power mode 
                                   5473 ; wait for reset or external interrupt
                                   5474 ; do a cold start on wakeup.
                                   5475 ;------------------------------
      001FCC                       5476 bye:
      001FCC 72 0D 52 30 FB   [ 2] 5477 	btjf UART1_SR,#UART_SR_TC,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001FD1 8E               [10] 5478 	halt
      001FD2 CC 05 7A         [ 2] 5479 	jp cold_start  
                                   5480 
                                   5481 ;----------------------------------
                                   5482 ; BASIC: AUTORUN "file_name" 
                                   5483 ; record in eeprom at adrress AUTORUN_NAME
                                   5484 ; the name of file to load and execute
                                   5485 ; at startup 
                                   5486 ; input:
                                   5487 ;   file_name   file to execute 
                                   5488 ; output:
                                   5489 ;   none
                                   5490 ;-----------------------------------
      001FD5                       5491 autorun: 
      001FD5 72 01 00 21 07   [ 2] 5492 	btjf flags,#FRUN,0$ 
      001FDA 27 05            [ 1] 5493 	jreq 0$ 
      001FDC A6 07            [ 1] 5494 	ld a,#ERR_CMD_ONLY 
      001FDE CC 07 8B         [ 2] 5495 	jp tb_error 
      001FE1                       5496 0$:	
      001FE1 CD 08 3F         [ 4] 5497 	call next_token 
      001FE4 A1 0A            [ 1] 5498 	cp a,#TK_QSTR
      001FE6 27 03            [ 1] 5499 	jreq 1$
      001FE8 CC 07 89         [ 2] 5500 	jp syntax_error 
      001FEB                       5501 1$:	
      001FEB 89               [ 2] 5502 	pushw x ; file name char*
      001FEC 90 93            [ 1] 5503 	ldw y,x  
      001FEE CD 1C 9B         [ 4] 5504 	call search_file 
      001FF1 25 05            [ 1] 5505 	jrc 2$ 
      001FF3 A6 09            [ 1] 5506 	ld a,#ERR_NOT_FILE
      001FF5 CC 07 8B         [ 2] 5507 	jp tb_error  
      001FF8                       5508 2$: 
      001FF8 55 00 03 00 01   [ 1] 5509 	mov in,count 
      001FFD 72 5F 00 12      [ 1] 5510 	clr farptr 
      002001 AE 40 00         [ 2] 5511 	ldw x,#AUTORUN_NAME
      002004 CF 00 13         [ 2] 5512 	ldw farptr+1,x 
      002007 1E 01            [ 2] 5513 	ldw x,(1,sp)  
      002009 CD 02 A0         [ 4] 5514 	call strlen  ; return length in X 
      00200C 90 85            [ 2] 5515 	popw y 
      00200E 89               [ 2] 5516 	pushw x 
      00200F 5F               [ 1] 5517 	clrw x 
      002010 CD 01 6D         [ 4] 5518 	call write_block 
      002013                       5519 	_drop 2 
      002013 5B 02            [ 2]    1     addw sp,#2 
      002015 81               [ 4] 5520 	ret 
                                   5521 
                                   5522 ;----------------------------------
                                   5523 ; BASIC: SLEEP 
                                   5524 ; halt mcu until reset or external
                                   5525 ; interrupt.
                                   5526 ; Resume progam after SLEEP command
                                   5527 ;----------------------------------
      002016                       5528 sleep:
      002016 72 0D 52 30 FB   [ 2] 5529 	btjf UART1_SR,#UART_SR_TC,.
      00201B 72 16 00 21      [ 1] 5530 	bset flags,#FSLEEP
      00201F 8E               [10] 5531 	halt 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      002020 81               [ 4] 5532 	ret 
                                   5533 
                                   5534 ;-------------------------------
                                   5535 ; BASIC: PAUSE expr 
                                   5536 ; suspend execution for n msec.
                                   5537 ; input:
                                   5538 ;	none
                                   5539 ; output:
                                   5540 ;	none 
                                   5541 ;------------------------------
      002021                       5542 pause:
      002021 CD 13 A9         [ 4] 5543 	call expression
      002024 A1 04            [ 1] 5544 	cp a,#TK_INTGR
      002026 27 03            [ 1] 5545 	jreq pause02 
      002028 CC 07 89         [ 2] 5546 	jp syntax_error
      00202B                       5547 pause02: 
      00202B 5D               [ 2] 5548 1$: tnzw x 
      00202C 27 04            [ 1] 5549 	jreq 2$
      00202E 8F               [10] 5550 	wfi 
      00202F 5A               [ 2] 5551 	decw x 
      002030 26 F9            [ 1] 5552 	jrne 1$
      002032 4F               [ 1] 5553 2$:	clr a 
      002033 81               [ 4] 5554 	ret 
                                   5555 
                                   5556 ;------------------------------
                                   5557 ; BASIC: AWU expr
                                   5558 ; halt mcu for 'expr' milliseconds
                                   5559 ; use Auto wakeup peripheral
                                   5560 ; all oscillators stopped except LSI
                                   5561 ; range: 1ms - 511ms
                                   5562 ; input:
                                   5563 ;  none
                                   5564 ; output:
                                   5565 ;  none:
                                   5566 ;------------------------------
      002034                       5567 awu:
      002034 CD 13 A9         [ 4] 5568   call expression
      002037 A1 04            [ 1] 5569   cp a,#TK_INTGR
      002039 27 03            [ 1] 5570   jreq awu02
      00203B CC 07 89         [ 2] 5571   jp syntax_error
      00203E                       5572 awu02:
      00203E A3 14 00         [ 2] 5573   cpw x,#5120
      002041 2B 0C            [ 1] 5574   jrmi 1$ 
      002043 35 0F 50 F2      [ 1] 5575   mov AWU_TBR,#15 
      002047 A6 1E            [ 1] 5576   ld a,#30
      002049 62               [ 2] 5577   div x,a
      00204A A6 10            [ 1] 5578   ld a,#16
      00204C 62               [ 2] 5579   div x,a 
      00204D 20 1E            [ 2] 5580   jra 4$
      00204F                       5581 1$: 
      00204F A3 08 00         [ 2] 5582   cpw x,#2048
      002052 2B 09            [ 1] 5583   jrmi 2$ 
      002054 35 0E 50 F2      [ 1] 5584   mov AWU_TBR,#14
      002058 A6 50            [ 1] 5585   ld a,#80
      00205A 62               [ 2] 5586   div x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      00205B 20 10            [ 2] 5587   jra 4$   
      00205D                       5588 2$:
      00205D 35 07 50 F2      [ 1] 5589   mov AWU_TBR,#7
      002061                       5590 3$:  
                                   5591 ; while X > 64  divide by 2 and increment AWU_TBR 
      002061 A3 00 40         [ 2] 5592   cpw x,#64 
      002064 23 07            [ 2] 5593   jrule 4$ 
      002066 72 5C 50 F2      [ 1] 5594   inc AWU_TBR 
      00206A 54               [ 2] 5595   srlw x 
      00206B 20 F4            [ 2] 5596   jra 3$ 
      00206D                       5597 4$:
      00206D 9F               [ 1] 5598   ld a, xl
      00206E 4A               [ 1] 5599   dec a 
      00206F 27 01            [ 1] 5600   jreq 5$
      002071 4A               [ 1] 5601   dec a 	
      002072                       5602 5$: 
      002072 A4 3E            [ 1] 5603   and a,#0x3e 
      002074 C7 50 F1         [ 1] 5604   ld AWU_APR,a 
      002077 72 18 50 F0      [ 1] 5605   bset AWU_CSR,#AWU_CSR_AWUEN
      00207B 8E               [10] 5606   halt 
                                   5607 
      00207C 81               [ 4] 5608   ret 
                                   5609 
                                   5610 ;------------------------------
                                   5611 ; BASIC: TICKS
                                   5612 ; return msec ticks counter value 
                                   5613 ; input:
                                   5614 ; 	none 
                                   5615 ; output:
                                   5616 ;	X 		TK_INTGR
                                   5617 ;-------------------------------
      00207D                       5618 get_ticks:
      00207D CE 00 0A         [ 2] 5619 	ldw x,ticks 
      002080 A6 04            [ 1] 5620 	ld a,#TK_INTGR
      002082 81               [ 4] 5621 	ret 
                                   5622 
                                   5623 
                                   5624 
                                   5625 ;------------------------------
                                   5626 ; BASIC: ABS(expr)
                                   5627 ; return absolute value of expr.
                                   5628 ; input:
                                   5629 ;   none
                                   5630 ; output:
                                   5631 ;   X     	positive integer
                                   5632 ;-------------------------------
      002083                       5633 abs:
      002083 CD 12 C9         [ 4] 5634 	call func_args 
      002086 A1 01            [ 1] 5635 	cp a,#1 
      002088 27 03            [ 1] 5636 	jreq 0$ 
      00208A CC 07 89         [ 2] 5637 	jp syntax_error
      00208D                       5638 0$:  
      00208D CD 10 84         [ 4] 5639     call dpop   
      002090 9E               [ 1] 5640 	ld a,xh 
      002091 A5 80            [ 1] 5641 	bcp a,#0x80 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      002093 27 01            [ 1] 5642 	jreq 2$ 
      002095 50               [ 2] 5643 	negw x 
      002096 A6 04            [ 1] 5644 2$: ld a,#TK_INTGR 
      002098 81               [ 4] 5645 	ret 
                                   5646 
                                   5647 ;------------------------------
                                   5648 ; BASIC: AND(expr1,expr2)
                                   5649 ; Apply bit AND relation between
                                   5650 ; the 2 arguments, i.e expr1 & expr2 
                                   5651 ; output:
                                   5652 ; 	A 		TK_INTGR
                                   5653 ;   X 		result 
                                   5654 ;------------------------------
      002099                       5655 bit_and:
      002099 CD 12 C9         [ 4] 5656 	call func_args 
      00209C A1 02            [ 1] 5657 	cp a,#2
      00209E 27 03            [ 1] 5658 	jreq 1$
      0020A0 CC 07 89         [ 2] 5659 	jp syntax_error 
      0020A3 CD 10 84         [ 4] 5660 1$:	call dpop 
      0020A6 89               [ 2] 5661 	pushw x 
      0020A7 CD 10 84         [ 4] 5662 	call dpop 
      0020AA 9E               [ 1] 5663 	ld a,xh 
      0020AB 14 01            [ 1] 5664 	and a,(1,sp)
      0020AD 95               [ 1] 5665 	ld xh,a 
      0020AE 9F               [ 1] 5666 	ld a,xl
      0020AF 14 02            [ 1] 5667 	and a,(2,sp)
      0020B1 97               [ 1] 5668 	ld xl,a 
      0020B2                       5669 	_drop 2 
      0020B2 5B 02            [ 2]    1     addw sp,#2 
      0020B4 A6 04            [ 1] 5670 	ld a,#TK_INTGR
      0020B6 81               [ 4] 5671 	ret
                                   5672 
                                   5673 ;------------------------------
                                   5674 ; BASIC: OR(expr1,expr2)
                                   5675 ; Apply bit OR relation between
                                   5676 ; the 2 arguments, i.e expr1 | expr2 
                                   5677 ; output:
                                   5678 ; 	A 		TK_INTGR
                                   5679 ;   X 		result 
                                   5680 ;------------------------------
      0020B7                       5681 bit_or:
      0020B7 CD 12 C9         [ 4] 5682 	call func_args 
      0020BA A1 02            [ 1] 5683 	cp a,#2
      0020BC 27 03            [ 1] 5684 	jreq 1$
      0020BE CC 07 89         [ 2] 5685 	jp syntax_error 
      0020C1                       5686 1$: 
      0020C1 CD 10 84         [ 4] 5687 	call dpop 
      0020C4 89               [ 2] 5688 	pushw x 
      0020C5 CD 10 84         [ 4] 5689 	call dpop 
      0020C8 9E               [ 1] 5690 	ld a,xh 
      0020C9 1A 01            [ 1] 5691 	or a,(1,sp)
      0020CB 95               [ 1] 5692 	ld xh,a 
      0020CC 9F               [ 1] 5693 	ld a,xl 
      0020CD 1A 02            [ 1] 5694 	or a,(2,sp)
      0020CF 97               [ 1] 5695 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      0020D0                       5696 	_drop 2 
      0020D0 5B 02            [ 2]    1     addw sp,#2 
      0020D2 A6 04            [ 1] 5697 	ld a,#TK_INTGR 
      0020D4 81               [ 4] 5698 	ret
                                   5699 
                                   5700 ;------------------------------
                                   5701 ; BASIC: XOR(expr1,expr2)
                                   5702 ; Apply bit XOR relation between
                                   5703 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5704 ; output:
                                   5705 ; 	A 		TK_INTGR
                                   5706 ;   X 		result 
                                   5707 ;------------------------------
      0020D5                       5708 bit_xor:
      0020D5 CD 12 C9         [ 4] 5709 	call func_args 
      0020D8 A1 02            [ 1] 5710 	cp a,#2
      0020DA 27 03            [ 1] 5711 	jreq 1$
      0020DC CC 07 89         [ 2] 5712 	jp syntax_error 
      0020DF                       5713 1$: 
      0020DF CD 10 84         [ 4] 5714 	call dpop 
      0020E2 89               [ 2] 5715 	pushw x 
      0020E3 CD 10 84         [ 4] 5716 	call dpop 
      0020E6 9E               [ 1] 5717 	ld a,xh 
      0020E7 18 01            [ 1] 5718 	xor a,(1,sp)
      0020E9 95               [ 1] 5719 	ld xh,a 
      0020EA 9F               [ 1] 5720 	ld a,xl 
      0020EB 18 02            [ 1] 5721 	xor a,(2,sp)
      0020ED 97               [ 1] 5722 	ld xl,a 
      0020EE                       5723 	_drop 2 
      0020EE 5B 02            [ 2]    1     addw sp,#2 
      0020F0 A6 04            [ 1] 5724 	ld a,#TK_INTGR 
      0020F2 81               [ 4] 5725 	ret 
                                   5726 
                                   5727 ;------------------------------
                                   5728 ; BASIC: LSHIFT(expr1,expr2)
                                   5729 ; logical shift left expr1 by 
                                   5730 ; expr2 bits 
                                   5731 ; output:
                                   5732 ; 	A 		TK_INTGR
                                   5733 ;   X 		result 
                                   5734 ;------------------------------
      0020F3                       5735 lshift:
      0020F3 CD 12 C9         [ 4] 5736 	call func_args
      0020F6 A1 02            [ 1] 5737 	cp a,#2 
      0020F8 27 03            [ 1] 5738 	jreq 1$
      0020FA CC 07 89         [ 2] 5739 	jp syntax_error
      0020FD CD 10 84         [ 4] 5740 1$: call dpop  
      002100 51               [ 1] 5741 	exgw x,y 
      002101 CD 10 84         [ 4] 5742 	call dpop
      002104 90 5D            [ 2] 5743 	tnzw y 
      002106 27 05            [ 1] 5744 	jreq 4$
      002108 58               [ 2] 5745 2$:	sllw x 
      002109 90 5A            [ 2] 5746 	decw y 
      00210B 26 FB            [ 1] 5747 	jrne 2$
      00210D                       5748 4$:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      00210D A6 04            [ 1] 5749 	ld a,#TK_INTGR
      00210F 81               [ 4] 5750 	ret
                                   5751 
                                   5752 ;------------------------------
                                   5753 ; BASIC: RSHIFT(expr1,expr2)
                                   5754 ; logical shift right expr1 by 
                                   5755 ; expr2 bits.
                                   5756 ; output:
                                   5757 ; 	A 		TK_INTGR
                                   5758 ;   X 		result 
                                   5759 ;------------------------------
      002110                       5760 rshift:
      002110 CD 12 C9         [ 4] 5761 	call func_args
      002113 A1 02            [ 1] 5762 	cp a,#2 
      002115 27 03            [ 1] 5763 	jreq 1$
      002117 CC 07 89         [ 2] 5764 	jp syntax_error
      00211A CD 10 84         [ 4] 5765 1$: call dpop  
      00211D 51               [ 1] 5766 	exgw x,y 
      00211E CD 10 84         [ 4] 5767 	call dpop
      002121 90 5D            [ 2] 5768 	tnzw y 
      002123 27 05            [ 1] 5769 	jreq 4$
      002125 54               [ 2] 5770 2$:	srlw x 
      002126 90 5A            [ 2] 5771 	decw y 
      002128 26 FB            [ 1] 5772 	jrne 2$
      00212A                       5773 4$:  
      00212A A6 04            [ 1] 5774 	ld a,#TK_INTGR
      00212C 81               [ 4] 5775 	ret
                                   5776 
                                   5777 ;--------------------------
                                   5778 ; BASIC: FCPU integer
                                   5779 ; set CPU frequency 
                                   5780 ;-------------------------- 
                                   5781 
      00212D                       5782 fcpu:
      00212D A6 04            [ 1] 5783 	ld a,#TK_INTGR
      00212F CD 12 98         [ 4] 5784 	call expect 
      002132 9F               [ 1] 5785 	ld a,xl 
      002133 A4 07            [ 1] 5786 	and a,#7 
      002135 C7 50 C6         [ 1] 5787 	ld CLK_CKDIVR,a 
      002138 81               [ 4] 5788 	ret 
                                   5789 
                                   5790 ;------------------------------
                                   5791 ; BASIC: PMODE pin#, mode 
                                   5792 ; define pin as input or output
                                   5793 ; pin#: {0..15}
                                   5794 ; mode: INPUT|OUTPUT  
                                   5795 ;------------------------------
                           000001  5796 	PINNO=1
                           000001  5797 	VSIZE=1
      002139                       5798 pin_mode:
      002139                       5799 	_vars VSIZE 
      002139 52 01            [ 2]    1     sub sp,#VSIZE 
      00213B CD 12 A5         [ 4] 5800 	call arg_list 
      00213E A1 02            [ 1] 5801 	cp a,#2 
      002140 27 03            [ 1] 5802 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      002142 CC 07 89         [ 2] 5803 	jp syntax_error 
      002145 CD 10 84         [ 4] 5804 1$: call dpop ; mode 
      002148 51               [ 1] 5805 	exgw x,y 
      002149 CD 10 84         [ 4] 5806 	call dpop ; Dx pin 
      00214C CD 21 7E         [ 4] 5807 	call select_pin 
      00214F 6B 01            [ 1] 5808 	ld (PINNO,sp),a  
      002151 A6 01            [ 1] 5809 	ld a,#1 
      002153 0D 01            [ 1] 5810 	tnz (PINNO,sp)
      002155 27 0B            [ 1] 5811 	jreq 4$
      002157 48               [ 1] 5812 2$:	sll a 
      002158 0A 01            [ 1] 5813 	dec (PINNO,sp)
      00215A 26 FB            [ 1] 5814 	jrne 2$ 
      00215C 6B 01            [ 1] 5815 	ld (PINNO,sp),a
      00215E EA 03            [ 1] 5816 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002160 E7 03            [ 1] 5817 	ld (GPIO_CR1,x),a 
      002162 90 A3 00 01      [ 2] 5818 4$:	cpw y,#OUTP 
      002166 27 07            [ 1] 5819 	jreq 6$
                                   5820 ; input mode
      002168 7B 01            [ 1] 5821 	ld a,(PINNO,sp)
      00216A 43               [ 1] 5822 	cpl a 
      00216B E4 02            [ 1] 5823 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      00216D 20 0A            [ 2] 5824 	jra 9$
      00216F                       5825 6$: ;output mode  
      00216F 7B 01            [ 1] 5826 	ld a,(PINNO,sp)
      002171 EA 04            [ 1] 5827 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002173 E7 04            [ 1] 5828 	ld (GPIO_CR2,x),a 
      002175 7B 01            [ 1] 5829 	ld a,(PINNO,sp)
      002177 EA 02            [ 1] 5830 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002179 E7 02            [ 1] 5831 9$:	ld (GPIO_DDR,x),a 
      00217B                       5832 	_drop VSIZE 
      00217B 5B 01            [ 2]    1     addw sp,#VSIZE 
      00217D 81               [ 4] 5833 	ret
                                   5834 
                                   5835 ;------------------------
                                   5836 ; select pin 
                                   5837 ; input:
                                   5838 ;   X 	 {0..15} Arduino Dx 
                                   5839 ; output:
                                   5840 ;   A     stm8s208 pin 
                                   5841 ;   X     base address s208 GPIO port 
                                   5842 ;---------------------------
      00217E                       5843 select_pin:
      00217E 58               [ 2] 5844 	sllw x 
      00217F 1C 21 8E         [ 2] 5845 	addw x,#arduino_to_8s208 
      002182 FE               [ 2] 5846 	ldw x,(x)
      002183 9F               [ 1] 5847 	ld a,xl 
      002184 88               [ 1] 5848 	push a 
      002185 5E               [ 1] 5849 	swapw x 
      002186 A6 05            [ 1] 5850 	ld a,#5 
      002188 42               [ 4] 5851 	mul x,a 
      002189 1C 50 00         [ 2] 5852 	addw x,#GPIO_BASE 
      00218C 84               [ 1] 5853 	pop a 
      00218D 81               [ 4] 5854 	ret 
                                   5855 ; translation from Arduino D0..D15 to stm8s208rb 
      00218E                       5856 arduino_to_8s208:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00218E 03 06                 5857 .byte 3,6 ; D0 
      002190 03 05                 5858 .byte 3,5 ; D1 
      002192 04 00                 5859 .byte 4,0 ; D2 
      002194 02 01                 5860 .byte 2,1 ; D3
      002196 06 00                 5861 .byte 6,0 ; D4
      002198 02 02                 5862 .byte 2,2 ; D5
      00219A 02 03                 5863 .byte 2,3 ; D6
      00219C 03 01                 5864 .byte 3,1 ; D7
      00219E 03 03                 5865 .byte 3,3 ; D8
      0021A0 02 04                 5866 .byte 2,4 ; D9
      0021A2 04 05                 5867 .byte 4,5 ; D10
      0021A4 02 06                 5868 .byte 2,6 ; D11
      0021A6 02 07                 5869 .byte 2,7 ; D12
      0021A8 02 05                 5870 .byte 2,5 ; D13
      0021AA 04 02                 5871 .byte 4,2 ; D14
      0021AC 04 01                 5872 .byte 4,1 ; D15
                                   5873 
                                   5874 
                                   5875 ;------------------------------
                                   5876 ; BASIC: RND(expr)
                                   5877 ; return random number 
                                   5878 ; between 1 and expr inclusive
                                   5879 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5880 ; input:
                                   5881 ; 	none 
                                   5882 ; output:
                                   5883 ;	X 		random positive integer 
                                   5884 ;------------------------------
      0021AE                       5885 random:
      0021AE CD 12 C9         [ 4] 5886 	call func_args 
      0021B1 A1 01            [ 1] 5887 	cp a,#1
      0021B3 27 03            [ 1] 5888 	jreq 1$
      0021B5 CC 07 89         [ 2] 5889 	jp syntax_error
      0021B8                       5890 1$: 
      0021B8 CD 10 84         [ 4] 5891 	call dpop 
      0021BB 89               [ 2] 5892 	pushw x 
      0021BC 9E               [ 1] 5893 	ld a,xh 
      0021BD A5 80            [ 1] 5894 	bcp a,#0x80 
      0021BF 27 05            [ 1] 5895 	jreq 2$
      0021C1 A6 0A            [ 1] 5896 	ld a,#ERR_BAD_VALUE
      0021C3 CC 07 8B         [ 2] 5897 	jp tb_error
      0021C6                       5898 2$: 
                                   5899 ; acc16=(x<<5)^x 
      0021C6 CE 00 0E         [ 2] 5900 	ldw x,seedx 
      0021C9 58               [ 2] 5901 	sllw x 
      0021CA 58               [ 2] 5902 	sllw x 
      0021CB 58               [ 2] 5903 	sllw x 
      0021CC 58               [ 2] 5904 	sllw x 
      0021CD 58               [ 2] 5905 	sllw x 
      0021CE 9E               [ 1] 5906 	ld a,xh 
      0021CF C8 00 0E         [ 1] 5907 	xor a,seedx 
      0021D2 C7 00 08         [ 1] 5908 	ld acc16,a 
      0021D5 9F               [ 1] 5909 	ld a,xl 
      0021D6 C8 00 0F         [ 1] 5910 	xor a,seedx+1 
      0021D9 C7 00 09         [ 1] 5911 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   5912 ; seedx=seedy 
      0021DC CE 00 10         [ 2] 5913 	ldw x,seedy 
      0021DF CF 00 0E         [ 2] 5914 	ldw seedx,x  
                                   5915 ; seedy=seedy^(seedy>>1)
      0021E2 90 54            [ 2] 5916 	srlw y 
      0021E4 90 9E            [ 1] 5917 	ld a,yh 
      0021E6 C8 00 10         [ 1] 5918 	xor a,seedy 
      0021E9 C7 00 10         [ 1] 5919 	ld seedy,a  
      0021EC 90 9F            [ 1] 5920 	ld a,yl 
      0021EE C8 00 11         [ 1] 5921 	xor a,seedy+1 
      0021F1 C7 00 11         [ 1] 5922 	ld seedy+1,a 
                                   5923 ; acc16>>3 
      0021F4 CE 00 08         [ 2] 5924 	ldw x,acc16 
      0021F7 54               [ 2] 5925 	srlw x 
      0021F8 54               [ 2] 5926 	srlw x 
      0021F9 54               [ 2] 5927 	srlw x 
                                   5928 ; x=acc16^x 
      0021FA 9E               [ 1] 5929 	ld a,xh 
      0021FB C8 00 08         [ 1] 5930 	xor a,acc16 
      0021FE 95               [ 1] 5931 	ld xh,a 
      0021FF 9F               [ 1] 5932 	ld a,xl 
      002200 C8 00 09         [ 1] 5933 	xor a,acc8 
      002203 97               [ 1] 5934 	ld xl,a 
                                   5935 ; seedy=x^seedy 
      002204 C8 00 11         [ 1] 5936 	xor a,seedy+1
      002207 97               [ 1] 5937 	ld xl,a 
      002208 9E               [ 1] 5938 	ld a,xh 
      002209 C8 00 10         [ 1] 5939 	xor a,seedy
      00220C 95               [ 1] 5940 	ld xh,a 
      00220D CF 00 10         [ 2] 5941 	ldw seedy,x 
                                   5942 ; return seedy modulo expr + 1 
      002210 90 85            [ 2] 5943 	popw y 
      002212 65               [ 2] 5944 	divw x,y 
      002213 93               [ 1] 5945 	ldw x,y 
      002214 5C               [ 2] 5946 	incw x 
      002215 A6 04            [ 1] 5947 	ld a,#TK_INTGR
      002217 81               [ 4] 5948 	ret 
                                   5949 
                                   5950 ;---------------------------------
                                   5951 ; BASIC: WORDS 
                                   5952 ; affiche la listes des mots du
                                   5953 ; dictionnaire.
                                   5954 ;---------------------------------
                           000001  5955 	WLEN=1
                           000002  5956 	LLEN=2  
                           000002  5957 	VSIZE=2 
      002218                       5958 words:
      002218                       5959 	_vars VSIZE
      002218 52 02            [ 2]    1     sub sp,#VSIZE 
      00221A 0F 02            [ 1] 5960 	clr (LLEN,sp)
      00221C 90 AE 26 71      [ 2] 5961 	ldw y,#kword_dict+2
      002220 93               [ 1] 5962 0$:	ldw x,y
      002221 F6               [ 1] 5963 	ld a,(x)
      002222 A4 0F            [ 1] 5964 	and a,#15 
      002224 6B 01            [ 1] 5965 	ld (WLEN,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002226 5C               [ 2] 5966 1$:	incw x 
      002227 F6               [ 1] 5967 	ld a,(x)
      002228 CD 01 CB         [ 4] 5968 	call putc 
      00222B 0C 02            [ 1] 5969 	inc (LLEN,sp)
      00222D 0A 01            [ 1] 5970 	dec (WLEN,sp)
      00222F 26 F5            [ 1] 5971 	jrne 1$
      002231 A6 46            [ 1] 5972 	ld a,#70
      002233 11 02            [ 1] 5973 	cp a,(LLEN,sp)
      002235 2B 09            [ 1] 5974 	jrmi 2$   
      002237 A6 20            [ 1] 5975 	ld a,#SPACE 
      002239 CD 01 CB         [ 4] 5976 	call putc 
      00223C 0C 02            [ 1] 5977 	inc (LLEN,sp) 
      00223E 20 07            [ 2] 5978 	jra 3$
      002240 A6 0D            [ 1] 5979 2$: ld a,#CR 
      002242 CD 01 CB         [ 4] 5980 	call putc 
      002245 0F 02            [ 1] 5981 	clr (LLEN,sp)
      002247 72 A2 00 02      [ 2] 5982 3$:	subw y,#2 
      00224B 90 FE            [ 2] 5983 	ldw y,(y)
      00224D 26 D1            [ 1] 5984 	jrne 0$  
      00224F                       5985 	_drop VSIZE 
      00224F 5B 02            [ 2]    1     addw sp,#VSIZE 
      002251 81               [ 4] 5986 	ret 
                                   5987 
                                   5988 
                                   5989 ;-----------------------------
                                   5990 ; BASIC: TIMER expr 
                                   5991 ; initialize count down timer 
                                   5992 ;-----------------------------
      002252                       5993 set_timer:
      002252 CD 12 A5         [ 4] 5994 	call arg_list
      002255 A1 01            [ 1] 5995 	cp a,#1 
      002257 27 03            [ 1] 5996 	jreq 1$
      002259 CC 07 89         [ 2] 5997 	jp syntax_error
      00225C                       5998 1$: 
      00225C CD 10 84         [ 4] 5999 	call dpop 
      00225F CF 00 0C         [ 2] 6000 	ldw timer,x 
      002262 81               [ 4] 6001 	ret 
                                   6002 
                                   6003 ;------------------------------
                                   6004 ; BASIC: TIMEOUT 
                                   6005 ; return state of timer 
                                   6006 ;------------------------------
      002263                       6007 timeout:
      002263 CE 00 0C         [ 2] 6008 	ldw x,timer 
      002266                       6009 logical_complement:
      002266 53               [ 2] 6010 	cplw x 
      002267 A3 FF FF         [ 2] 6011 	cpw x,#-1
      00226A 27 01            [ 1] 6012 	jreq 2$
      00226C 5F               [ 1] 6013 	clrw x 
      00226D A6 04            [ 1] 6014 2$:	ld a,#TK_INTGR
      00226F 81               [ 4] 6015 	ret 
                                   6016 
                                   6017 ;--------------------------------
                                   6018 ; BASIC NOT(expr) 
                                   6019 ; return logical complement of expr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   6020 ;--------------------------------
      002270                       6021 func_not:
      002270 CD 12 C9         [ 4] 6022 	call func_args  
      002273 A1 01            [ 1] 6023 	cp a,#1
      002275 27 03            [ 1] 6024 	jreq 1$
      002277 CC 07 89         [ 2] 6025 	jp syntax_error
      00227A CD 10 84         [ 4] 6026 1$:	call dpop 
      00227D 20 E7            [ 2] 6027 	jra logical_complement
                                   6028 
                                   6029 
                                   6030 
                                   6031 ;-----------------------------------
                                   6032 ; BASIC: IWDGEN expr1 
                                   6033 ; enable independant watchdog timer
                                   6034 ; expr1 is delay in multiple of 62.5µsec
                                   6035 ; expr1 -> {1..16383}
                                   6036 ;-----------------------------------
      00227F                       6037 enable_iwdg:
      00227F CD 12 A5         [ 4] 6038 	call arg_list
      002282 A1 01            [ 1] 6039 	cp a,#1 
      002284 27 03            [ 1] 6040 	jreq 1$
      002286 CC 07 89         [ 2] 6041 	jp syntax_error 
      002289 4B 00            [ 1] 6042 1$: push #0
      00228B 35 CC 50 E0      [ 1] 6043 	mov IWDG_KR,#IWDG_KEY_ENABLE
      00228F CD 10 84         [ 4] 6044 	call dpop
      002292 9E               [ 1] 6045 	ld a,xh 
      002293 A4 3F            [ 1] 6046 	and a,#0x3f
      002295 95               [ 1] 6047 	ld xh,a  
      002296 A3 00 FF         [ 2] 6048 2$:	cpw x,#255
      002299 23 06            [ 2] 6049 	jrule 3$
      00229B 0C 01            [ 1] 6050 	inc (1,sp)
      00229D 98               [ 1] 6051 	rcf 
      00229E 56               [ 2] 6052 	rrcw x 
      00229F 20 F5            [ 2] 6053 	jra 2$
      0022A1 35 55 50 E0      [ 1] 6054 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0022A5 84               [ 1] 6055 	pop a  
      0022A6 C7 50 E1         [ 1] 6056 	ld IWDG_PR,a 
      0022A9 9F               [ 1] 6057 	ld a,xl
      0022AA 4A               [ 1] 6058 	dec a 
      0022AB 35 55 50 E0      [ 1] 6059 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0022AF C7 50 E2         [ 1] 6060 	ld IWDG_RLR,a 
      0022B2 35 AA 50 E0      [ 1] 6061 	mov IWDG_KR,#IWDG_KEY_REFRESH
      0022B6 81               [ 4] 6062 	ret 
                                   6063 
                                   6064 
                                   6065 ;-----------------------------------
                                   6066 ; BASIC: IWDGREF  
                                   6067 ; refresh independant watchdog count down 
                                   6068 ; timer before it reset MCU. 
                                   6069 ;-----------------------------------
      0022B7                       6070 refresh_iwdg:
      0022B7 35 AA 50 E0      [ 1] 6071 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      0022BB 81               [ 4] 6072 	ret 
                                   6073 
                                   6074 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                   6075 ;-------------------------------------
                                   6076 ; BASIC: LOG(expr)
                                   6077 ; return logarithm base 2 of expr 
                                   6078 ; this is the position of most significant
                                   6079 ; bit set. 
                                   6080 ; input: 
                                   6081 ; output:
                                   6082 ;   X     log2 
                                   6083 ;   A     TK_INTGR 
                                   6084 ;*********************************
      0022BC                       6085 log2:
      0022BC CD 12 C9         [ 4] 6086 	call func_args 
      0022BF A1 01            [ 1] 6087 	cp a,#1 
      0022C1 27 03            [ 1] 6088 	jreq 1$
      0022C3 CC 07 89         [ 2] 6089 	jp syntax_error 
      0022C6 CD 10 84         [ 4] 6090 1$: call dpop
      0022C9                       6091 leading_one:
      0022C9 5D               [ 2] 6092 	tnzw x 
      0022CA 27 0A            [ 1] 6093 	jreq 4$
      0022CC A6 0F            [ 1] 6094 	ld a,#15 
      0022CE 59               [ 2] 6095 2$: rlcw x 
      0022CF 25 03            [ 1] 6096     jrc 3$
      0022D1 4A               [ 1] 6097 	dec a 
      0022D2 20 FA            [ 2] 6098 	jra 2$
      0022D4 5F               [ 1] 6099 3$: clrw x 
      0022D5 97               [ 1] 6100     ld xl,a
      0022D6 A6 04            [ 1] 6101 4$:	ld a,#TK_INTGR
      0022D8 81               [ 4] 6102 	ret 
                                   6103 
                                   6104 ;-----------------------------------
                                   6105 ; BASIC: BITMASK(expr) 
                                   6106 ; expr ->{0..15}
                                   6107 ; return 2^expr 
                                   6108 ; output:
                                   6109 ;    x    2^expr 
                                   6110 ;-----------------------------------
      0022D9                       6111 bitmask:
      0022D9 CD 12 C9         [ 4] 6112     call func_args 
      0022DC A1 01            [ 1] 6113 	cp a,#1
      0022DE 27 03            [ 1] 6114 	jreq 1$
      0022E0 CC 07 89         [ 2] 6115 	jp syntax_error 
      0022E3 CD 10 84         [ 4] 6116 1$: call dpop 
      0022E6 9F               [ 1] 6117 	ld a,xl 
      0022E7 A4 0F            [ 1] 6118 	and a,#15
      0022E9 5F               [ 1] 6119 	clrw x 
      0022EA 5C               [ 2] 6120 	incw x 
      0022EB 4D               [ 1] 6121 2$: tnz a 
      0022EC 27 04            [ 1] 6122 	jreq 3$
      0022EE 58               [ 2] 6123 	slaw x 
      0022EF 4A               [ 1] 6124 	dec a 
      0022F0 20 F9            [ 2] 6125 	jra 2$ 
      0022F2 A6 04            [ 1] 6126 3$: ld a,#TK_INTGR
      0022F4 81               [ 4] 6127 	ret 
                                   6128 
                                   6129 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                   6130 ; BASIC: INVERT(expr)
                                   6131 ; 1's complement 
                                   6132 ;--------------------------------
      0022F5                       6133 invert:
      0022F5 CD 12 C9         [ 4] 6134 	call func_args
      0022F8 A1 01            [ 1] 6135 	cp a,#1 
      0022FA 27 03            [ 1] 6136 	jreq 1$
      0022FC CC 07 89         [ 2] 6137 	jp syntax_error
      0022FF CD 10 84         [ 4] 6138 1$: call dpop 
      002302 53               [ 2] 6139 	cplw x 
      002303 A6 04            [ 1] 6140 	ld a,#TK_INTGR 
      002305 81               [ 4] 6141 	ret 
                                   6142 
                                   6143 ;------------------------------
                                   6144 ; BASIC: DO 
                                   6145 ; initiate a DO ... UNTIL loop 
                                   6146 ;------------------------------
      002306                       6147 do_loop:
      002306 85               [ 2] 6148 	popw x 
      002307                       6149 	_vars 4 
      002307 52 04            [ 2]    1     sub sp,#4 
      002309 89               [ 2] 6150 	pushw x 
      00230A CC 19 54         [ 2] 6151 	jp store_loop_addr
                                   6152 
                                   6153 ;--------------------------------
                                   6154 ; BASIC: UNTIL expr 
                                   6155 ; loop if exprssion is false 
                                   6156 ; else terminate loop
                                   6157 ;--------------------------------
      00230D                       6158 until: 
      00230D 72 5D 00 1E      [ 1] 6159 	tnz loop_depth 
      002311 26 03            [ 1] 6160 	jrne 1$ 
      002313 CC 07 89         [ 2] 6161 	jp syntax_error 
      002316                       6162 1$: 
      002316 CD 13 ED         [ 4] 6163 	call relation 
      002319 A1 04            [ 1] 6164 	cp a,#TK_INTGR
      00231B 27 03            [ 1] 6165 	jreq 2$
      00231D CC 07 89         [ 2] 6166 	jp syntax_error
      002320                       6167 2$: 
      002320 5D               [ 2] 6168 	tnzw x 
      002321 26 03            [ 1] 6169 	jrne 9$
      002323 CC 19 AF         [ 2] 6170 	jp loop_back 
      002326                       6171 9$:	; remove loop info cstack  
      002326 85               [ 2] 6172 	popw x
      002327                       6173 	_drop 4
      002327 5B 04            [ 2]    1     addw sp,#4 
      002329 89               [ 2] 6174 	pushw x 
      00232A 72 5A 00 1E      [ 1] 6175 	dec loop_depth 
      00232E 81               [ 4] 6176 	ret 
                                   6177 
                                   6178 
                                   6179 ;------------------------------
                                   6180 ;      dictionary 
                                   6181 ; format:
                                   6182 ;   link:   2 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                   6183 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6184 ;   cmd_name: 16 byte max 
                                   6185 ;   code_address: 2 bytes 
                                   6186 ;------------------------------
                                   6187 	.macro _dict_entry len,name,cmd 
                                   6188 	.word LINK 
                                   6189 	LINK=.
                                   6190 name:
                                   6191 	.byte len 	
                                   6192 	.ascii "name"
                                   6193 	.word cmd 
                                   6194 	.endm 
                                   6195 
                           000000  6196 	LINK=0
      00232F                       6197 kword_end:
      00232F                       6198 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      00232F 00 00                    1 	.word LINK 
                           002331     2 	LINK=.
      002331                          3 XPEEK:
      002331 45                       4 	.byte 5+F_IFUNC 	
      002332 58 50 45 45 4B           5 	.ascii "XPEEK"
      002337 18 AE                    6 	.word xpeek 
      002339                       6199 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      002339 23 31                    1 	.word LINK 
                           00233B     2 	LINK=.
      00233B                          3 XOR:
      00233B 43                       4 	.byte 3+F_IFUNC 	
      00233C 58 4F 52                 5 	.ascii "XOR"
      00233F 20 D5                    6 	.word bit_xor 
      002341                       6200 	_dict_entry,5,WRITE,write  
      002341 23 3B                    1 	.word LINK 
                           002343     2 	LINK=.
      002343                          3 WRITE:
      002343 05                       4 	.byte 5 	
      002344 57 52 49 54 45           5 	.ascii "WRITE"
      002349 1E F7                    6 	.word write 
      00234B                       6201 	_dict_entry,5,WORDS,words 
      00234B 23 43                    1 	.word LINK 
                           00234D     2 	LINK=.
      00234D                          3 WORDS:
      00234D 05                       4 	.byte 5 	
      00234E 57 4F 52 44 53           5 	.ascii "WORDS"
      002353 22 18                    6 	.word words 
      002355                       6202 	_dict_entry 4,WAIT,wait 
      002355 23 4D                    1 	.word LINK 
                           002357     2 	LINK=.
      002357                          3 WAIT:
      002357 04                       4 	.byte 4 	
      002358 57 41 49 54              5 	.ascii "WAIT"
      00235C 17 F5                    6 	.word wait 
      00235E                       6203 	_dict_entry,3+F_IFUNC,USR,usr
      00235E 23 57                    1 	.word LINK 
                           002360     2 	LINK=.
      002360                          3 USR:
      002360 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002361 55 53 52                 5 	.ascii "USR"
      002364 1F AE                    6 	.word usr 
      002366                       6204 	_dict_entry,5,UNTIL,until 
      002366 23 60                    1 	.word LINK 
                           002368     2 	LINK=.
      002368                          3 UNTIL:
      002368 05                       4 	.byte 5 	
      002369 55 4E 54 49 4C           5 	.ascii "UNTIL"
      00236E 23 0D                    6 	.word until 
      002370                       6205 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      002370 23 68                    1 	.word LINK 
                           002372     2 	LINK=.
      002372                          3 UFLASH:
      002372 46                       4 	.byte 6+F_IFUNC 	
      002373 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002379 1F A8                    6 	.word uflash 
      00237B                       6206 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      00237B 23 72                    1 	.word LINK 
                           00237D     2 	LINK=.
      00237D                          3 UBOUND:
      00237D 46                       4 	.byte 6+F_IFUNC 	
      00237E 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002384 14 68                    6 	.word ubound 
      002386                       6207 	_dict_entry,4,TONE,tone  
      002386 23 7D                    1 	.word LINK 
                           002388     2 	LINK=.
      002388                          3 TONE:
      002388 04                       4 	.byte 4 	
      002389 54 4F 4E 45              5 	.ascii "TONE"
      00238D 1A 9A                    6 	.word tone 
      00238F                       6208 	_dict_entry,2,TO,to
      00238F 23 88                    1 	.word LINK 
                           002391     2 	LINK=.
      002391                          3 TO:
      002391 02                       4 	.byte 2 	
      002392 54 4F                    5 	.ascii "TO"
      002394 19 0C                    6 	.word to 
      002396                       6209 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      002396 23 91                    1 	.word LINK 
                           002398     2 	LINK=.
      002398                          3 TIMEOUT:
      002398 47                       4 	.byte 7+F_IFUNC 	
      002399 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      0023A0 22 63                    6 	.word timeout 
      0023A2                       6210 	_dict_entry,5,TIMER,set_timer
      0023A2 23 98                    1 	.word LINK 
                           0023A4     2 	LINK=.
      0023A4                          3 TIMER:
      0023A4 05                       4 	.byte 5 	
      0023A5 54 49 4D 45 52           5 	.ascii "TIMER"
      0023AA 22 52                    6 	.word set_timer 
      0023AC                       6211 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      0023AC 23 A4                    1 	.word LINK 
                           0023AE     2 	LINK=.
      0023AE                          3 TICKS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0023AE 45                       4 	.byte 5+F_IFUNC 	
      0023AF 54 49 43 4B 53           5 	.ascii "TICKS"
      0023B4 20 7D                    6 	.word get_ticks 
      0023B6                       6212 	_dict_entry,4,STOP,stop 
      0023B6 23 AE                    1 	.word LINK 
                           0023B8     2 	LINK=.
      0023B8                          3 STOP:
      0023B8 04                       4 	.byte 4 	
      0023B9 53 54 4F 50              5 	.ascii "STOP"
      0023BD 1A 8B                    6 	.word stop 
      0023BF                       6213 	_dict_entry,4,STEP,step 
      0023BF 23 B8                    1 	.word LINK 
                           0023C1     2 	LINK=.
      0023C1                          3 STEP:
      0023C1 04                       4 	.byte 4 	
      0023C2 53 54 45 50              5 	.ascii "STEP"
      0023C6 19 3F                    6 	.word step 
      0023C8                       6214 	_dict_entry,5,SLEEP,sleep 
      0023C8 23 C1                    1 	.word LINK 
                           0023CA     2 	LINK=.
      0023CA                          3 SLEEP:
      0023CA 05                       4 	.byte 5 	
      0023CB 53 4C 45 45 50           5 	.ascii "SLEEP"
      0023D0 20 16                    6 	.word sleep 
      0023D2                       6215 	_dict_entry,4+F_IFUNC,SIZE,size
      0023D2 23 CA                    1 	.word LINK 
                           0023D4     2 	LINK=.
      0023D4                          3 SIZE:
      0023D4 44                       4 	.byte 4+F_IFUNC 	
      0023D5 53 49 5A 45              5 	.ascii "SIZE"
      0023D9 14 5E                    6 	.word size 
      0023DB                       6216     _dict_entry,4,SHOW,show 
      0023DB 23 D4                    1 	.word LINK 
                           0023DD     2 	LINK=.
      0023DD                          3 SHOW:
      0023DD 04                       4 	.byte 4 	
      0023DE 53 48 4F 57              5 	.ascii "SHOW"
      0023E2 14 44                    6 	.word show 
      0023E4                       6217 	_dict_entry,4,SAVE,save
      0023E4 23 DD                    1 	.word LINK 
                           0023E6     2 	LINK=.
      0023E6                          3 SAVE:
      0023E6 04                       4 	.byte 4 	
      0023E7 53 41 56 45              5 	.ascii "SAVE"
      0023EB 1C E6                    6 	.word save 
      0023ED                       6218 	_dict_entry 3,RUN,run
      0023ED 23 E6                    1 	.word LINK 
                           0023EF     2 	LINK=.
      0023EF                          3 RUN:
      0023EF 03                       4 	.byte 3 	
      0023F0 52 55 4E                 5 	.ascii "RUN"
      0023F3 1A 48                    6 	.word run 
      0023F5                       6219 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0023F5 23 EF                    1 	.word LINK 
                           0023F7     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0023F7                          3 RSHIFT:
      0023F7 46                       4 	.byte 6+F_IFUNC 	
      0023F8 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0023FE 21 10                    6 	.word rshift 
      002400                       6220 	_dict_entry,3+F_IFUNC,RND,random 
      002400 23 F7                    1 	.word LINK 
                           002402     2 	LINK=.
      002402                          3 RND:
      002402 43                       4 	.byte 3+F_IFUNC 	
      002403 52 4E 44                 5 	.ascii "RND"
      002406 21 AE                    6 	.word random 
      002408                       6221 	_dict_entry,6,RETURN,return 
      002408 24 02                    1 	.word LINK 
                           00240A     2 	LINK=.
      00240A                          3 RETURN:
      00240A 06                       4 	.byte 6 	
      00240B 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002411 1A 28                    6 	.word return 
      002413                       6222 	_dict_entry 6,REMARK,rem 
      002413 24 0A                    1 	.word LINK 
                           002415     2 	LINK=.
      002415                          3 REMARK:
      002415 06                       4 	.byte 6 	
      002416 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      00241C 17 EF                    6 	.word rem 
      00241E                       6223 	_dict_entry,6,REBOOT,cold_start 
      00241E 24 15                    1 	.word LINK 
                           002420     2 	LINK=.
      002420                          3 REBOOT:
      002420 06                       4 	.byte 6 	
      002421 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002427 05 7A                    6 	.word cold_start 
      002429                       6224 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002429 24 20                    1 	.word LINK 
                           00242B     2 	LINK=.
      00242B                          3 QKEY:
      00242B 44                       4 	.byte 4+F_IFUNC 	
      00242C 51 4B 45 59              5 	.ascii "QKEY"
      002430 1F 6A                    6 	.word qkey 
      002432                       6225 	_dict_entry,4+F_CONST,PRTI,8
      002432 24 2B                    1 	.word LINK 
                           002434     2 	LINK=.
      002434                          3 PRTI:
      002434 C4                       4 	.byte 4+F_CONST 	
      002435 50 52 54 49              5 	.ascii "PRTI"
      002439 00 08                    6 	.word 8 
      00243B                       6226 	_dict_entry,4+F_CONST,PRTH,7
      00243B 24 34                    1 	.word LINK 
                           00243D     2 	LINK=.
      00243D                          3 PRTH:
      00243D C4                       4 	.byte 4+F_CONST 	
      00243E 50 52 54 48              5 	.ascii "PRTH"
      002442 00 07                    6 	.word 7 
      002444                       6227 	_dict_entry,4+F_CONST,PRTG,6
      002444 24 3D                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                           002446     2 	LINK=.
      002446                          3 PRTG:
      002446 C4                       4 	.byte 4+F_CONST 	
      002447 50 52 54 47              5 	.ascii "PRTG"
      00244B 00 06                    6 	.word 6 
      00244D                       6228 	_dict_entry,4+F_CONST,PRTF,5
      00244D 24 46                    1 	.word LINK 
                           00244F     2 	LINK=.
      00244F                          3 PRTF:
      00244F C4                       4 	.byte 4+F_CONST 	
      002450 50 52 54 46              5 	.ascii "PRTF"
      002454 00 05                    6 	.word 5 
      002456                       6229 	_dict_entry,4+F_CONST,PRTE,4
      002456 24 4F                    1 	.word LINK 
                           002458     2 	LINK=.
      002458                          3 PRTE:
      002458 C4                       4 	.byte 4+F_CONST 	
      002459 50 52 54 45              5 	.ascii "PRTE"
      00245D 00 04                    6 	.word 4 
      00245F                       6230 	_dict_entry,4+F_CONST,PRTD,3
      00245F 24 58                    1 	.word LINK 
                           002461     2 	LINK=.
      002461                          3 PRTD:
      002461 C4                       4 	.byte 4+F_CONST 	
      002462 50 52 54 44              5 	.ascii "PRTD"
      002466 00 03                    6 	.word 3 
      002468                       6231 	_dict_entry,4+F_CONST,PRTC,2
      002468 24 61                    1 	.word LINK 
                           00246A     2 	LINK=.
      00246A                          3 PRTC:
      00246A C4                       4 	.byte 4+F_CONST 	
      00246B 50 52 54 43              5 	.ascii "PRTC"
      00246F 00 02                    6 	.word 2 
      002471                       6232 	_dict_entry,4+F_CONST,PRTB,1
      002471 24 6A                    1 	.word LINK 
                           002473     2 	LINK=.
      002473                          3 PRTB:
      002473 C4                       4 	.byte 4+F_CONST 	
      002474 50 52 54 42              5 	.ascii "PRTB"
      002478 00 01                    6 	.word 1 
      00247A                       6233 	_dict_entry,4+F_CONST,PRTA,0
      00247A 24 73                    1 	.word LINK 
                           00247C     2 	LINK=.
      00247C                          3 PRTA:
      00247C C4                       4 	.byte 4+F_CONST 	
      00247D 50 52 54 41              5 	.ascii "PRTA"
      002481 00 00                    6 	.word 0 
      002483                       6234 	_dict_entry 5,PRINT,print 
      002483 24 7C                    1 	.word LINK 
                           002485     2 	LINK=.
      002485                          3 PRINT:
      002485 05                       4 	.byte 5 	
      002486 50 52 49 4E 54           5 	.ascii "PRINT"
      00248B 16 F3                    6 	.word print 
      00248D                       6235 	_dict_entry,4+F_CONST,POUT,OUTP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00248D 24 85                    1 	.word LINK 
                           00248F     2 	LINK=.
      00248F                          3 POUT:
      00248F C4                       4 	.byte 4+F_CONST 	
      002490 50 4F 55 54              5 	.ascii "POUT"
      002494 00 01                    6 	.word OUTP 
      002496                       6236 	_dict_entry,4,POKE,poke 
      002496 24 8F                    1 	.word LINK 
                           002498     2 	LINK=.
      002498                          3 POKE:
      002498 04                       4 	.byte 4 	
      002499 50 4F 4B 45              5 	.ascii "POKE"
      00249D 18 88                    6 	.word poke 
      00249F                       6237 	_dict_entry,4+F_CONST,PINP,INP 
      00249F 24 98                    1 	.word LINK 
                           0024A1     2 	LINK=.
      0024A1                          3 PINP:
      0024A1 C4                       4 	.byte 4+F_CONST 	
      0024A2 50 49 4E 50              5 	.ascii "PINP"
      0024A6 00 00                    6 	.word INP 
      0024A8                       6238 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0024A8 24 A1                    1 	.word LINK 
                           0024AA     2 	LINK=.
      0024AA                          3 PEEK:
      0024AA 44                       4 	.byte 4+F_IFUNC 	
      0024AB 50 45 45 4B              5 	.ascii "PEEK"
      0024AF 18 9B                    6 	.word peek 
      0024B1                       6239 	_dict_entry,5,PMODE,pin_mode 
      0024B1 24 AA                    1 	.word LINK 
                           0024B3     2 	LINK=.
      0024B3                          3 PMODE:
      0024B3 05                       4 	.byte 5 	
      0024B4 50 4D 4F 44 45           5 	.ascii "PMODE"
      0024B9 21 39                    6 	.word pin_mode 
      0024BB                       6240 	_dict_entry,5,PAUSE,pause 
      0024BB 24 B3                    1 	.word LINK 
                           0024BD     2 	LINK=.
      0024BD                          3 PAUSE:
      0024BD 05                       4 	.byte 5 	
      0024BE 50 41 55 53 45           5 	.ascii "PAUSE"
      0024C3 20 21                    6 	.word pause 
      0024C5                       6241 	_dict_entry,2+F_IFUNC,OR,bit_or
      0024C5 24 BD                    1 	.word LINK 
                           0024C7     2 	LINK=.
      0024C7                          3 OR:
      0024C7 42                       4 	.byte 2+F_IFUNC 	
      0024C8 4F 52                    5 	.ascii "OR"
      0024CA 20 B7                    6 	.word bit_or 
      0024CC                       6242 	_dict_entry,3+F_CONST,ODR,GPIO_ODR
      0024CC 24 C7                    1 	.word LINK 
                           0024CE     2 	LINK=.
      0024CE                          3 ODR:
      0024CE C3                       4 	.byte 3+F_CONST 	
      0024CF 4F 44 52                 5 	.ascii "ODR"
      0024D2 00 00                    6 	.word GPIO_ODR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0024D4                       6243 	_dict_entry,3+F_IFUNC,NOT,func_not 
      0024D4 24 CE                    1 	.word LINK 
                           0024D6     2 	LINK=.
      0024D6                          3 NOT:
      0024D6 43                       4 	.byte 3+F_IFUNC 	
      0024D7 4E 4F 54                 5 	.ascii "NOT"
      0024DA 22 70                    6 	.word func_not 
      0024DC                       6244 	_dict_entry,3,NEW,new
      0024DC 24 D6                    1 	.word LINK 
                           0024DE     2 	LINK=.
      0024DE                          3 NEW:
      0024DE 03                       4 	.byte 3 	
      0024DF 4E 45 57                 5 	.ascii "NEW"
      0024E2 1C 24                    6 	.word new 
      0024E4                       6245 	_dict_entry,4,NEXT,next 
      0024E4 24 DE                    1 	.word LINK 
                           0024E6     2 	LINK=.
      0024E6                          3 NEXT:
      0024E6 04                       4 	.byte 4 	
      0024E7 4E 45 58 54              5 	.ascii "NEXT"
      0024EB 19 67                    6 	.word next 
      0024ED                       6246 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0024ED 24 E6                    1 	.word LINK 
                           0024EF     2 	LINK=.
      0024EF                          3 LSHIFT:
      0024EF 46                       4 	.byte 6+F_IFUNC 	
      0024F0 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0024F6 20 F3                    6 	.word lshift 
      0024F8                       6247 	_dict_entry,3+F_IFUNC,LOG,log2 
      0024F8 24 EF                    1 	.word LINK 
                           0024FA     2 	LINK=.
      0024FA                          3 LOG:
      0024FA 43                       4 	.byte 3+F_IFUNC 	
      0024FB 4C 4F 47                 5 	.ascii "LOG"
      0024FE 22 BC                    6 	.word log2 
      002500                       6248 	_dict_entry,4,LOAD,load 
      002500 24 FA                    1 	.word LINK 
                           002502     2 	LINK=.
      002502                          3 LOAD:
      002502 04                       4 	.byte 4 	
      002503 4C 4F 41 44              5 	.ascii "LOAD"
      002507 1D DB                    6 	.word load 
      002509                       6249 	_dict_entry 4,LIST,list
      002509 25 02                    1 	.word LINK 
                           00250B     2 	LINK=.
      00250B                          3 LIST:
      00250B 04                       4 	.byte 4 	
      00250C 4C 49 53 54              5 	.ascii "LIST"
      002510 14 B2                    6 	.word list 
      002512                       6250 	_dict_entry 3,LET,let 
      002512 25 0B                    1 	.word LINK 
                           002514     2 	LINK=.
      002514                          3 LET:
      002514 03                       4 	.byte 3 	
      002515 4C 45 54                 5 	.ascii "LET"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002518 14 8A                    6 	.word let 
      00251A                       6251 	_dict_entry,3+F_IFUNC,KEY,key 
      00251A 25 14                    1 	.word LINK 
                           00251C     2 	LINK=.
      00251C                          3 KEY:
      00251C 43                       4 	.byte 3+F_IFUNC 	
      00251D 4B 45 59                 5 	.ascii "KEY"
      002520 1F 62                    6 	.word key 
      002522                       6252 	_dict_entry,7,IWDGREF,refresh_iwdg
      002522 25 1C                    1 	.word LINK 
                           002524     2 	LINK=.
      002524                          3 IWDGREF:
      002524 07                       4 	.byte 7 	
      002525 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00252C 22 B7                    6 	.word refresh_iwdg 
      00252E                       6253 	_dict_entry,6,IWDGEN,enable_iwdg
      00252E 25 24                    1 	.word LINK 
                           002530     2 	LINK=.
      002530                          3 IWDGEN:
      002530 06                       4 	.byte 6 	
      002531 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002537 22 7F                    6 	.word enable_iwdg 
      002539                       6254 	_dict_entry,6+F_IFUNC,INVERT,invert 
      002539 25 30                    1 	.word LINK 
                           00253B     2 	LINK=.
      00253B                          3 INVERT:
      00253B 46                       4 	.byte 6+F_IFUNC 	
      00253C 49 4E 56 45 52 54        5 	.ascii "INVERT"
      002542 22 F5                    6 	.word invert 
      002544                       6255 	_dict_entry,5,INPUT,input_var  
      002544 25 3B                    1 	.word LINK 
                           002546     2 	LINK=.
      002546                          3 INPUT:
      002546 05                       4 	.byte 5 	
      002547 49 4E 50 55 54           5 	.ascii "INPUT"
      00254C 17 7B                    6 	.word input_var 
      00254E                       6256 	_dict_entry,2,IF,if 
      00254E 25 46                    1 	.word LINK 
                           002550     2 	LINK=.
      002550                          3 IF:
      002550 02                       4 	.byte 2 	
      002551 49 46                    5 	.ascii "IF"
      002553 18 CE                    6 	.word if 
      002555                       6257 	_dict_entry,3+F_CONST,IDR,GPIO_IDR
      002555 25 50                    1 	.word LINK 
                           002557     2 	LINK=.
      002557                          3 IDR:
      002557 C3                       4 	.byte 3+F_CONST 	
      002558 49 44 52                 5 	.ascii "IDR"
      00255B 00 01                    6 	.word GPIO_IDR 
      00255D                       6258 	_dict_entry,3,HEX,hex_base
      00255D 25 57                    1 	.word LINK 
                           00255F     2 	LINK=.
      00255F                          3 HEX:
      00255F 03                       4 	.byte 3 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002560 48 45 58                 5 	.ascii "HEX"
      002563 14 54                    6 	.word hex_base 
      002565                       6259 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      002565 25 5F                    1 	.word LINK 
                           002567     2 	LINK=.
      002567                          3 GPIO:
      002567 44                       4 	.byte 4+F_IFUNC 	
      002568 47 50 49 4F              5 	.ascii "GPIO"
      00256C 1F 75                    6 	.word gpio 
      00256E                       6260 	_dict_entry,4,GOTO,goto 
      00256E 25 67                    1 	.word LINK 
                           002570     2 	LINK=.
      002570                          3 GOTO:
      002570 04                       4 	.byte 4 	
      002571 47 4F 54 4F              5 	.ascii "GOTO"
      002575 19 D6                    6 	.word goto 
      002577                       6261 	_dict_entry,5,GOSUB,gosub 
      002577 25 70                    1 	.word LINK 
                           002579     2 	LINK=.
      002579                          3 GOSUB:
      002579 05                       4 	.byte 5 	
      00257A 47 4F 53 55 42           5 	.ascii "GOSUB"
      00257F 19 E3                    6 	.word gosub 
      002581                       6262 	_dict_entry,6,FORGET,forget 
      002581 25 79                    1 	.word LINK 
                           002583     2 	LINK=.
      002583                          3 FORGET:
      002583 06                       4 	.byte 6 	
      002584 46 4F 52 47 45 54        5 	.ascii "FORGET"
      00258A 1E 16                    6 	.word forget 
      00258C                       6263 	_dict_entry,3,FOR,for 
      00258C 25 83                    1 	.word LINK 
                           00258E     2 	LINK=.
      00258E                          3 FOR:
      00258E 03                       4 	.byte 3 	
      00258F 46 4F 52                 5 	.ascii "FOR"
      002592 18 E2                    6 	.word for 
      002594                       6264 	_dict_entry,4,FCPU,fcpu 
      002594 25 8E                    1 	.word LINK 
                           002596     2 	LINK=.
      002596                          3 FCPU:
      002596 04                       4 	.byte 4 	
      002597 46 43 50 55              5 	.ascii "FCPU"
      00259B 21 2D                    6 	.word fcpu 
      00259D                       6265 	_dict_entry,6+F_CONST,EEPROM,EEPROM_BASE  
      00259D 25 96                    1 	.word LINK 
                           00259F     2 	LINK=.
      00259F                          3 EEPROM:
      00259F C6                       4 	.byte 6+F_CONST 	
      0025A0 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0025A6 40 00                    6 	.word EEPROM_BASE 
      0025A8                       6266 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0025A8 25 9F                    1 	.word LINK 
                           0025AA     2 	LINK=.
      0025AA                          3 DWRITE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      0025AA 06                       4 	.byte 6+F_CMD 	
      0025AB 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0025B1 1B 99                    6 	.word digital_write 
      0025B3                       6267 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0025B3 25 AA                    1 	.word LINK 
                           0025B5     2 	LINK=.
      0025B5                          3 DREAD:
      0025B5 45                       4 	.byte 5+F_IFUNC 	
      0025B6 44 52 45 41 44           5 	.ascii "DREAD"
      0025BB 1B 67                    6 	.word digital_read 
      0025BD                       6268 	_dict_entry,2,DO,do_loop
      0025BD 25 B5                    1 	.word LINK 
                           0025BF     2 	LINK=.
      0025BF                          3 DO:
      0025BF 02                       4 	.byte 2 	
      0025C0 44 4F                    5 	.ascii "DO"
      0025C2 23 06                    6 	.word do_loop 
      0025C4                       6269 	_dict_entry,3,DIR,directory 
      0025C4 25 BF                    1 	.word LINK 
                           0025C6     2 	LINK=.
      0025C6                          3 DIR:
      0025C6 03                       4 	.byte 3 	
      0025C7 44 49 52                 5 	.ascii "DIR"
      0025CA 1E 61                    6 	.word directory 
      0025CC                       6270 	_dict_entry,3,DEC,dec_base
      0025CC 25 C6                    1 	.word LINK 
                           0025CE     2 	LINK=.
      0025CE                          3 DEC:
      0025CE 03                       4 	.byte 3 	
      0025CF 44 45 43                 5 	.ascii "DEC"
      0025D2 14 59                    6 	.word dec_base 
      0025D4                       6271 	_dict_entry,3+F_CONST,DDR,GPIO_DDR
      0025D4 25 CE                    1 	.word LINK 
                           0025D6     2 	LINK=.
      0025D6                          3 DDR:
      0025D6 C3                       4 	.byte 3+F_CONST 	
      0025D7 44 44 52                 5 	.ascii "DDR"
      0025DA 00 02                    6 	.word GPIO_DDR 
      0025DC                       6272 	_dict_entry,3+F_CONST,CRL,GPIO_CR1
      0025DC 25 D6                    1 	.word LINK 
                           0025DE     2 	LINK=.
      0025DE                          3 CRL:
      0025DE C3                       4 	.byte 3+F_CONST 	
      0025DF 43 52 4C                 5 	.ascii "CRL"
      0025E2 00 03                    6 	.word GPIO_CR1 
      0025E4                       6273 	_dict_entry,3+F_CONST,CRH,GPIO_CR2
      0025E4 25 DE                    1 	.word LINK 
                           0025E6     2 	LINK=.
      0025E6                          3 CRH:
      0025E6 C3                       4 	.byte 3+F_CONST 	
      0025E7 43 52 48                 5 	.ascii "CRH"
      0025EA 00 04                    6 	.word GPIO_CR2 
      0025EC                       6274 	_dict_entry,4+F_CFUNC,CHAR,char
      0025EC 25 E6                    1 	.word LINK 
                           0025EE     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0025EE                          3 CHAR:
      0025EE 84                       4 	.byte 4+F_CFUNC 	
      0025EF 43 48 41 52              5 	.ascii "CHAR"
      0025F3 1F 2E                    6 	.word char 
      0025F5                       6275 	_dict_entry,3,BYE,bye 
      0025F5 25 EE                    1 	.word LINK 
                           0025F7     2 	LINK=.
      0025F7                          3 BYE:
      0025F7 03                       4 	.byte 3 	
      0025F8 42 59 45                 5 	.ascii "BYE"
      0025FB 1F CC                    6 	.word bye 
      0025FD                       6276 	_dict_entry,5,BTOGL,bit_toggle
      0025FD 25 F7                    1 	.word LINK 
                           0025FF     2 	LINK=.
      0025FF                          3 BTOGL:
      0025FF 05                       4 	.byte 5 	
      002600 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002605 18 49                    6 	.word bit_toggle 
      002607                       6277 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      002607 25 FF                    1 	.word LINK 
                           002609     2 	LINK=.
      002609                          3 BTEST:
      002609 45                       4 	.byte 5+F_IFUNC 	
      00260A 42 54 45 53 54           5 	.ascii "BTEST"
      00260F 18 5D                    6 	.word bit_test 
      002611                       6278 	_dict_entry,4,BSET,bit_set 
      002611 26 09                    1 	.word LINK 
                           002613     2 	LINK=.
      002613                          3 BSET:
      002613 04                       4 	.byte 4 	
      002614 42 53 45 54              5 	.ascii "BSET"
      002618 18 20                    6 	.word bit_set 
      00261A                       6279 	_dict_entry,4,BRES,bit_reset
      00261A 26 13                    1 	.word LINK 
                           00261C     2 	LINK=.
      00261C                          3 BRES:
      00261C 04                       4 	.byte 4 	
      00261D 42 52 45 53              5 	.ascii "BRES"
      002621 18 34                    6 	.word bit_reset 
      002623                       6280 	_dict_entry,5,BREAK,break 
      002623 26 1C                    1 	.word LINK 
                           002625     2 	LINK=.
      002625                          3 BREAK:
      002625 05                       4 	.byte 5 	
      002626 42 52 45 41 4B           5 	.ascii "BREAK"
      00262B 1B D8                    6 	.word break 
      00262D                       6281 	_dict_entry,3+F_IFUNC,BIT,bitmask
      00262D 26 25                    1 	.word LINK 
                           00262F     2 	LINK=.
      00262F                          3 BIT:
      00262F 43                       4 	.byte 3+F_IFUNC 	
      002630 42 49 54                 5 	.ascii "BIT"
      002633 22 D9                    6 	.word bitmask 
      002635                       6282 	_dict_entry,3,AWU,awu 
      002635 26 2F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



                           002637     2 	LINK=.
      002637                          3 AWU:
      002637 03                       4 	.byte 3 	
      002638 41 57 55                 5 	.ascii "AWU"
      00263B 20 34                    6 	.word awu 
      00263D                       6283 	_dict_entry,7,AUTORUN,autorun
      00263D 26 37                    1 	.word LINK 
                           00263F     2 	LINK=.
      00263F                          3 AUTORUN:
      00263F 07                       4 	.byte 7 	
      002640 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002647 1F D5                    6 	.word autorun 
      002649                       6284 	_dict_entry,3+F_IFUNC,ASC,ascii
      002649 26 3F                    1 	.word LINK 
                           00264B     2 	LINK=.
      00264B                          3 ASC:
      00264B 43                       4 	.byte 3+F_IFUNC 	
      00264C 41 53 43                 5 	.ascii "ASC"
      00264F 1F 42                    6 	.word ascii 
      002651                       6285 	_dict_entry,3+F_IFUNC,AND,bit_and
      002651 26 4B                    1 	.word LINK 
                           002653     2 	LINK=.
      002653                          3 AND:
      002653 43                       4 	.byte 3+F_IFUNC 	
      002654 41 4E 44                 5 	.ascii "AND"
      002657 20 99                    6 	.word bit_and 
      002659                       6286 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      002659 26 53                    1 	.word LINK 
                           00265B     2 	LINK=.
      00265B                          3 ADCREAD:
      00265B 47                       4 	.byte 7+F_IFUNC 	
      00265C 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002663 1B 31                    6 	.word analog_read 
      002665                       6287 	_dict_entry,5,ADCON,power_adc 
      002665 26 5B                    1 	.word LINK 
                           002667     2 	LINK=.
      002667                          3 ADCON:
      002667 05                       4 	.byte 5 	
      002668 41 44 43 4F 4E           5 	.ascii "ADCON"
      00266D 1A E8                    6 	.word power_adc 
      00266F                       6288 kword_dict:
      00266F                       6289 	_dict_entry,3+F_IFUNC,ABS,abs
      00266F 26 67                    1 	.word LINK 
                           002671     2 	LINK=.
      002671                          3 ABS:
      002671 43                       4 	.byte 3+F_IFUNC 	
      002672 41 42 53                 5 	.ascii "ABS"
      002675 20 83                    6 	.word abs 
                                   6290 	
                                   6291 
      002680                       6292 	.bndry 128 ; align on FLASH block.
                                   6293 ; free space for user application  
      002680                       6294 user_space:
                                   6295 ; USR() function test
      002680 89               [ 2] 6296 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      002681 72 1A 50 0A      [ 1] 6297 	bset PC_ODR,#5 
      002685 85               [ 2] 6298 	popw x 
      002686 CD 20 2B         [ 4] 6299 	call pause02 
      002689 72 1B 50 0A      [ 1] 6300 	bres PC_ODR,#5 
      00268D 81               [ 4] 6301 	ret
                                   6302 
                                   6303 	.area FLASH_DRIVE (ABS)
      010000                       6304 	.org 0x10000
      010000                       6305 fdrive:
                                   6306 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002671 R   |   5 ADCON      002667 R
  5 ADCREAD    00265B R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDR    =  000001 
    ADD_SPAC=  000003     |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   5 AND        002653 R   |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        00264B R   |     ATTRIB  =  000002 
  5 AUTORUN    00263F R   |     AUTORUN_=  004000     |   5 AWU        002637 R
  5 AWUHandl   00000A R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   5 BIT        00262F R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BLOCK_ER=  000000     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  000005 
  5 BREAK      002625 R   |   5 BRES       00261C R   |   5 BSET       002613 R
    BSIZE   =  000001     |     BSP     =  000008     |   5 BTEST      002609 R
  5 BTOGL      0025FF R   |     BTW     =  000001     |     BUFIDX  =  000003 
  5 BYE        0025F7 R   |     C       =  000001     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       0025EE R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000008     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        0025E6 R   |   5 CRL        0025DE R   |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000006     |     CURR    =  000002 
    CX_BPTR =  000001     |     CX_CNT  =  000005     |     CX_IN   =  000004 
    CX_LNO  =  000003     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |   5 DDR        0025D6 R
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  5 DEC        0025CE R   |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        0025C6 R   |     DIVIDND =  000007 
    DIVISR  =  000005     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  5 DO         0025BF R   |   5 DREAD      0025B5 R   |     DSTACK_S=  000040 
  5 DWRITE     0025AA R   |   5 EEPROM     00259F R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     EOF     =  0000FF 
    ERR_BAD_=  00000A     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_L=  000005     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |   5 FCPU       002596 R
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  5 FOR        00258E R   |   5 FORGET     002583 R   |     FRUN    =  000000 
    FSIZE   =  000001     |     FSLEEP  =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      002579 R   |     GOS_RET =  000003 
  5 GOTO       002570 R   |   5 GPIO       002567 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  5 HEX        00255F R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        002557 R
  5 IF         002550 R   |     IN      =  000007     |     INCR    =  000001 
    INP     =  000000     |   5 INPUT      002546 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   5 INVERT     00253B R   |     INW     =  000003 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     002530 R
  5 IWDGREF    002524 R   |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        00251C R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        002514 R
    LINENO  =  000005     |   5 LINK    =  002671 R   |   5 LIST       00250B R
    LL      =  000002     |     LLEN    =  000002     |     LL_HB   =  000001 
    LNO     =  000005     |     LN_PTR  =  000005     |   5 LOAD       002502 R
  5 LOG        0024FA R   |   5 LSHIFT     0024EF R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        0024DE R
  5 NEXT       0024E6 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NL      =  00000A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   5 NOT        0024D6 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R
  5 ODR        0024CE R   |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         0024C7 R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000028     |   5 PAUSE      0024BD R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       0024AA R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]

Symbol Table

    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       0024A1 R   |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      0024B3 R
  5 POKE       002498 R   |   5 POUT       00248F R   |     PREV    =  000001 
  5 PRINT      002485 R   |     PROD    =  000002     |   5 PRTA       00247C R
  5 PRTB       002473 R   |   5 PRTC       00246A R   |   5 PRTD       002461 R
  5 PRTE       002458 R   |   5 PRTF       00244F R   |   5 PRTG       002446 R
  5 PRTH       00243D R   |   5 PRTI       002434 R   |     PSIZE   =  000001 
  5 QKEY       00242B R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 REBOOT     002420 R   |   5 REG_A      000A28 R
  5 REG_CC     000A2C R   |   5 REG_EPC    000A1B R   |   5 REG_SP     000A31 R
  5 REG_X      000A24 R   |   5 REG_Y      000A20 R   |     RELOP   =  000005 
  5 REMARK     002415 R   |     RETL1   =  000001     |   5 RETURN     00240A R
  5 RND        002402 R   |     ROP     =  004800     |   5 RSHIFT     0023F7 R
    RST_SR  =  0050B3     |   5 RUN        0023EF R   |     RXCHAR  =  000001 
    R_A     =  000007     |     R_CC    =  000008     |     R_X     =  000005 
    R_Y     =  000003     |   5 SAVE       0023E6 R   |     SDIVD   =  000002 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       0023DD R   |     SIGN    =  000001     |   5 SIZE       0023D4 R
    SKIP    =  000006     |   5 SLEEP      0023CA R   |     SPACE   =  000020 
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SQUOT   =  000001 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  000080 
  5 STATES     0009DE R   |   5 STEP       0023C1 R   |   5 STOP       0023B8 R
    SWIM_CSR=  007F80     |     TAB     =  000009     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      0023AE R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CLK=  00F424 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  5 TIMEOUT    002398 R   |   5 TIMER      0023A4 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000002     |     TK_CFUNC=  000008 
    TK_CHAR =  000003     |     TK_CMD  =  000006     |     TK_COLON=  000001 
    TK_COMMA=  00000D     |     TK_CONST=  000009     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000007 
    TK_INTGR=  000004     |     TK_LE   =  000036     |     TK_LPARE=  00000B 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  00000A     |     TK_RPARE=  00000C 
    TK_SHARP=  00000E     |     TK_VAR  =  000005     |   5 TO         002391 R
  5 TONE       002388 R   |   5 Timer4Up   00003E R   |   5 TrapHand   00002F R
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     00237D R   |   5 UBTN_Han   000081 R   |   5 UFLASH     002372 R
  5 UNTIL      002368 R   |   5 USER_ABO   000089 R   |   5 USR        002360 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  5 Uart1RxH   000018 R   |   5 UserButt   000054 R   |     VSIZ    =  000002 
    VSIZE   =  000002     |     VT      =  00000B     |   5 WAIT       002357 R
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   5 WORDS      00234D R
  5 WRITE      002343 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XADR    =  000001     |     XMASK   =  000001     |   5 XOR        00233B R
  5 XPEEK      002331 R   |     XSAVE   =  000003     |     YSAVE   =  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

  5 abs        002083 R   |   1 acc16      000008 R   |   1 acc24      000007 R
  1 acc8       000009 R   |   5 accept_c   000BD2 R   |   5 add        001166 R
  5 analog_r   001B31 R   |   5 ansi_seq   000B94 R   |   5 arduino_   00218E R
  5 arg_list   0012A5 R   |   1 array_si   00001F R   |   5 ascii      001F42 R
  5 at_tst     000E9F R   |   5 atoi24     000FB2 R   |   5 atoi_exi   001020 R
  5 autorun    001FD5 R   |   5 autorun_   000656 R   |   5 awu        002034 R
  5 awu02      00203E R   |   5 bad_port   001FA3 R   |   1 base       000006 R
  1 basicptr   000004 R   |   5 bin_exit   000DA3 R   |   5 bit_and    002099 R
  5 bit_or     0020B7 R   |   5 bit_rese   001834 R   |   5 bit_set    001820 R
  5 bit_test   00185D R   |   5 bit_togg   001849 R   |   5 bit_xor    0020D5 R
  5 bitmask    0022D9 R   |   5 bkslsh_t   000E4A R   |   5 bksp       0001E8 R
  5 break      001BD8 R   |   5 break_po   001C06 R   |   5 bye        001FCC R
  5 char       001F2E R   |   5 check_fu   00040B R   |   5 clear_ba   00066B R
  5 clear_va   000515 R   |   5 clock_in   0000A4 R   |   5 cmd_itf    000BF6 R
  5 cmd_name   001211 R   |   5 cmp_name   001C7A R   |   5 cold_sta   00057A R
  5 colon_ts   000E73 R   |   5 comma_ts   000E7E R   |   5 compile    00041A R
  5 convert_   000D2B R   |   1 count      000003 R   |   5 cp_loop    001254 R
  5 create_g   00036A R   |   5 cstk_pro   00112F R   |   5 dash_tst   000E94 R
  5 ddrop      0010AB R   |   5 ddrop_n    0010E8 R   |   5 ddup       0010B4 R
  5 dec_base   001459 R   |   5 del_back   000BC3 R   |   5 del_line   000332 R
  5 del_ln     000BB4 R   |   5 delete     0001F8 R   |   5 digital_   001B67 R
  5 digital_   001B99 R   |   5 dir_loop   001E6D R   |   5 director   001E61 R
  5 divide     0011BC R   |   5 divu24_8   000B21 R   |   5 do_loop    002306 R
  5 dotr       001139 R   |   5 dotr_loo   00114E R   |   5 dots       001105 R
  5 dpick      0010C5 R   |   5 dpop       001084 R   |   5 dpush      001077 R
  5 drive_fr   001EEA R   |   3 dstack     001740 R   |   3 dstack_e   001780 R
  5 dstk_pro   0010FB R   |   1 dstkptr    000018 R   |   5 dswap      001091 R
  5 enable_i   00227F R   |   5 eql_tst    000EFF R   |   5 equal      0016E6 R
  5 err_bad_   000748 R   |   5 err_cmd_   000709 R   |   5 err_div0   0006CB R
  5 err_dupl   000724 R   |   5 err_math   0006B1 R   |   5 err_mem_   000694 R
  5 err_msg    00067C R   |   5 err_no_a   000755 R   |   5 err_no_l   0006DB R
  5 err_not_   000736 R   |   5 err_run_   0006F2 R   |   5 err_synt   0006A2 R
  5 escaped    000D40 R   |   5 expect     001298 R   |   5 expr_exi   0013EA R
  5 expressi   0013A9 R   |   5 factor     001300 R   |   1 farptr     000012 R
  5 fcpu       00212D R   |   7 fdrive     010000 R   |   5 fetch      0010D4 R
  5 fetchc     000CE3 R   |   1 ffree      000015 R   |   5 file_cou   001EE2 R
  5 final_te   000B8E R   |   5 first_li   0014DD R   |   1 flags      000021 R
  5 for        0018E2 R   |   5 forget     001E16 R   |   1 free_ram   000058 R
  5 func_arg   0012C9 R   |   5 func_not   002270 R   |   5 ge         0016E8 R
  5 get_arra   0012D9 R   |   5 get_tick   00207D R   |   5 get_toke   000DE5 R
  5 getc       0001D4 R   |   5 go_commo   001A06 R   |   5 gosub      0019E3 R
  5 goto       0019D6 R   |   5 gpio       001F75 R   |   5 gt         0016E4 R
  5 gt_tst     000F0A R   |   5 hex_base   001454 R   |   5 if         0018CE R
  1 in         000001 R   |   1 in.saved   000002 R   |   1 in.w       000000 R
  5 incr_far   001C2F R   |   5 input_ex   0017EC R   |   5 input_lo   001787 R
  5 input_va   00177B R   |   5 insert_l   0003A3 R   |   5 insert_l   000408 R
  5 interp     0007CF R   |   5 interp_l   00080F R   |   5 invalid    000C3B R
  5 invalid_   000CB9 R   |   5 invert     0022F5 R   |   5 is_alpha   000523 R
  5 is_digit   000F9D R   |   5 itoa       000ADA R   |   5 itoa_loo   000AF2 R
  5 key        001F62 R   |   5 kword_di   00266F R   |   5 kword_en   00232F R
  5 last_lin   0014E6 R   |   5 le         0016ED R   |   5 leading_   0022C9 R
  5 ledoff     00092E R   |   5 ledon      000929 R   |   5 ledtoggl   000933 R
  5 left_arr   000B94 R   |   5 left_par   00093C R   |   5 let        00148A R
  5 let02      001494 R   |   5 lines_sk   0014EB R   |   5 list       0014B2 R
  5 list_exi   001534 R   |   5 list_sta   00150E R   |   5 load       001DDB R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

  5 load_aut   000632 R   |   5 load_fil   001DAA R   |   5 log2       0022BC R
  5 logical_   002266 R   |   5 loop_bac   0019AF R   |   1 loop_dep   00001E R
  5 loop_don   0019C4 R   |   5 lshift     0020F3 R   |   5 lt         0016EB R
  5 lt_tst     000F43 R   |   5 mem_peek   000C58 R   |   5 modulo     001200 R
  5 move       0002CC R   |   5 move_dow   0002EA R   |   5 move_exi   00030B R
  5 move_loo   0002EF R   |   5 move_up    0002DC R   |   5 mul_char   0016D5 R
  5 multiply   001174 R   |   5 mulu24_8   001024 R   |   5 nbr_tst    000E20 R
  5 ne         0016F0 R   |   5 neg_acc2   000B49 R   |   5 new        001C24 R
  5 next       001967 R   |   5 next_tok   00083F R   |   5 no_match   001266 R
  5 none       000DE5 R   |   5 number     000CE9 GR  |   5 other      000F7B R
  3 pad        001718 R   |   5 parse_bi   000D83 R   |   5 parse_in   000D48 R
  5 parse_ke   000DAB R   |   5 parse_qu   000CF0 R   |   5 pause      002021 R
  5 pause02    00202B R   |   5 peek       00189B R   |   5 peek_byt   000C83 R
  5 pin_mode   002139 R   |   5 plus_tst   000ED3 R   |   5 poke       001888 R
  5 power_ad   001AE8 R   |   5 prcnt_ts   000EF4 R   |   5 print      0016F3 R
  5 print_ex   00174F R   |   5 print_fa   000CC8 R   |   5 print_in   000A7E R
  5 print_re   00098B R   |   5 print_st   000C4B R   |   5 print_to   000894 R
  5 prt_basi   001587 R   |   5 prt_cmd_   001537 R   |   5 prt_loop   0016F7 R
  5 prt_peek   00027C R   |   5 prt_quot   00154B R   |   5 prt_reg1   00096C R
  5 prt_reg8   000947 R   |   5 prt_regs   000212 R   |   5 prti24     000A36 R
  1 ptr16      000013 R   |   1 ptr8       000014 R   |   5 putc       0001CB R
  5 puts       0001DE R   |   5 qkey       001F6A R   |   5 qmark_ts   000EAA R
  5 random     0021AE R   |   5 readln     000B6C R   |   5 readln_l   000B72 R
  5 readln_q   000BE7 R   |   5 refresh_   0022B7 R   |   5 regs_sta   000255 R
  5 rel_exit   001441 R   |   5 relation   0013ED R   |   5 relop_st   0016D8 R
  5 rem        0017EF R   |   5 repl       000C04 R   |   5 repl_exi   000C2C R
  5 reprint    000B94 R   |   5 reset_co   0016F5 R   |   5 rest_con   00176B R
  5 return     001A28 R   |   5 right_ar   000B94 R   |   5 rparnt_t   000E68 R
  5 rshift     002110 R   |   5 run        001A48 R   |   5 run_it     001A70 R
  1 rx_char    000023 R   |   5 save       001CE6 R   |   5 save_con   00175B R
  5 search_d   001243 R   |   5 search_e   001294 R   |   5 search_f   001C9B R
  5 search_l   00030E R   |   5 search_l   000316 R   |   5 search_n   001247 R
  1 seedx      00000E R   |   1 seedy      000010 R   |   5 seek_fdr   001C3D R
  5 select_p   00217E R   |   5 set_time   002252 R   |   5 sharp_ts   000E89 R
  5 show       001444 R   |   5 single_c   0016D1 R   |   5 size       00145E R
  5 skip       00105E R   |   5 slash_ts   000EE9 R   |   5 sleep      002016 R
  5 software   000534 R   |   5 spaces     000206 R   |   3 stack_fu   001780 R
  3 stack_un   001800 R   |   5 star_tst   000EDE R   |   5 step       00193F R
  5 stop       001A8B R   |   5 store      0010DE R   |   5 store_lo   001954 R
  5 str_matc   001275 R   |   5 str_tst    000E0F R   |   5 strcmp     0002AD R
  5 strcpy     0002BE R   |   5 strlen     0002A0 R   |   5 substrac   00116E R
  5 syntax_e   000789 R   |   1 tab_widt   000022 R   |   5 tb_error   00078B R
  5 term       00135C R   |   5 term01     001365 R   |   5 term_exi   0013A6 R
  5 test_p     000C43 R   |   3 tib        0016C8 R   |   5 tick_tst   000EC1 R
  1 ticks      00000A R   |   5 timeout    002263 R   |   1 timer      00000C R
  5 timer2_i   0000BA R   |   5 timer4_i   0000C7 R   |   5 to         00190C R
  5 to_upper   000FA6 GR  |   5 tok_arra   0008D9 R   |   5 tok_cfun   0008F1 R
  5 tok_char   0008DB R   |   5 tok_cmd    0008E8 R   |   5 tok_colo   0008D7 R
  5 tok_comm   00090C R   |   5 tok_cons   0008FB R   |   5 tok_equ    00091C R
  5 tok_func   0008EC R   |   5 tok_ge     00091E R   |   5 tok_grp0   0008D2 R
  5 tok_grp1   000910 R   |   5 tok_grp2   000914 R   |   5 tok_grp3   00091A R
  5 tok_gt     00091A R   |   5 tok_int    0008E0 R   |   5 tok_le     000923 R
  5 tok_lpar   000908 R   |   5 tok_lt     000921 R   |   5 tok_minu   000912 R
  5 tok_ne     000926 R   |   5 tok_none   0008D2 R   |   5 tok_pcen   000918 R
  5 tok_plus   000910 R   |   5 tok_rpar   00090A R   |   5 tok_shar   00090E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

  5 tok_slas   000916 R   |   5 tok_star   000914 R   |   5 tok_str    000901 R
  5 tok_var    0008E4 R   |   5 token_ch   000F8A R   |   5 token_ex   000F9A R
  5 token_pt   00089E R   |   5 token_pt   0008BC R   |   5 token_pt   0008C0 R
  5 token_pt   0008C6 R   |   5 tone       001A9A R   |   1 txtbgn     00001A R
  1 txtend     00001C R   |   5 uart1_in   000190 R   |   5 uart1_se   0001A0 R
  5 ubound     001468 R   |   5 uflash     001FA8 R   |   5 unget_to   001071 R
  5 unlock_e   0000DC R   |   5 unlock_f   0000EA R   |   5 until      00230D R
  5 user_int   000067 R   |   5 user_spa   002680 R   |   5 usr        001FAE R
  1 vars       000024 R   |   5 wait       0017F5 R   |   5 warm_ini   000615 R
  5 warm_sta   0007CC R   |   5 words      002218 R   |   5 write      001EF7 R
  5 write_bl   00016D R   |   5 write_by   0000F8 R   |   5 write_ee   000134 R
  5 write_ex   000168 R   |   5 write_fl   00011E R   |   5 xpeek      0018AE R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     58   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   268E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

