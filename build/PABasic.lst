ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask with CC.
                                                ; bits 4:5 identify group 
                                                ; bits 0:2 are CC mask 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number 	_dbg_prt_regs 
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           000040    44 	DSTACK_SIZE=64 
                           000080    45 	STACK_SIZE=128
                           0017FF    46 	STACK_EMPTY=RAM_SIZE-1  
                           000000    47 	FRUN=0 ; flags run code in variable flags
                           000001    48 	FTRAP=1 ; inside trap handler 
                           000002    49 	FFOR=2 ; FOR loop in preparation 
                           000003    50 	FSLEEP=3 ; halt produit par la commande SLEEP 
                                     51 
      000000                         52 in.w:  .blkb 1 ; parser position in text line
      000001                         53 in:    .blkb 1 ; low byte of in.w
      000002                         54 count: .blkb 1 ; length of string in text line  
      000003                         55 basicptr:  .blkb 2  ; point to text buffer 
      000005                         56 lineno: .blkb 2  ; BASIC line number 
      000007                         57 base:  .blkb 1 ; nemeric base used to print integer 
      000008                         58 acc24: .blkb 1 ; 24 accumulator
      000009                         59 acc16: .blkb 1
      00000A                         60 acc8:  .blkb 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      00000B                         61 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000D                         62 seedx: .blkw 1  ; xorshift 16 seed x 
      00000F                         63 seedy: .blkw 1  ; xorshift 16 seed y 
      000011                         64 untok: .blkb 1  ; last ungotten token attribute 
      000012                         65 tokval: .blkw 1 ; last parsed token value  
      000014                         66 farptr: .blkb 3 ; far pointer 
      000017                         67 ffree: .blkb 3 ; flash free address 
      00001A                         68 dstkptr: .blkw 1  ; data stack pointer 
      00001C                         69 txtbgn: .ds 2 ; BASIC text beginning address 
      00001E                         70 txtend: .ds 2 ; BASIC text end address 
      000020                         71 loop_depth: .ds 1 ; FOR loop depth 
      000021                         72 array_addr: .ds 2 ; address of @ array 
      000023                         73 array_size: .ds 2 ; array size 
      000025                         74 flags: .ds 1 ; boolean flags
      000026                         75 tab_width: .ds 1 ; print colon width (4)
      000027                         76 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     77 ; keep as last variable 
      00005B                         78 free_ram: ; from here RAM free for BASIC text 
                                     79 
                                     80 ;-----------------------------------
                                     81     .area SSEG (ABS)
                                     82 ;-----------------------------------	
      0016C8                         83     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         84 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         85 pad: .ds PAD_SIZE             ; working buffer
      001740                         86 dstack: .ds DSTACK_SIZE 
      001780                         87 dstack_unf: ; dstack underflow 
      001780                         88 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         89 stack_unf: ; stack underflow  
                                     90 
                                     91 
                                     92 ;--------------------------------------
                                     93     .area HOME 
                                     94 ;--------------------------------------
      000000 82 00 04 E3             95     int cold_start
                           000001    96 .if DEBUG
      000004 82 00 00 0A             97 	int TrapHandler 		;TRAP  software interrupt
                           000000    98 .else
                                     99 	int NonHandledInterrupt ;TRAP  software interrupt
                                    100 .endif
      000008 82 00 00 09            101 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            102 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            103 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            104 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            105 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            106 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            107 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 25            108 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            109 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            110 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            111 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            112 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            113 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            114 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            115 	int NonHandledInterrupt ;int14 TIM2 capture/compare
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000044 82 00 00 09            116 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            117 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            118 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            119 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            120 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            121 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            122 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            123 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            124 	int Timer4UpdateHandler	;int23 TIM4 update/overflow
      000068 82 00 00 09            125 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            126 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            127 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            128 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            129 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            130 	int NonHandledInterrupt ;int29  not used
                                    131 
                                    132 ;---------------------------------------
                                    133     .area CODE
                                    134 ;---------------------------------------
                           000001   135 .if DEBUG
      000000 54 42 49 5F 53 54 4D   136 .asciz "TBI_STM8" ; I like to put module name here.
             38 00
                                    137 .endif 
                                    138 
      000009                        139 NonHandledInterrupt:
      000009 71                     140     .byte 0x71  ; reinitialize MCU
                                    141 
                                    142 
                                    143 ;------------------------------------
                                    144 ; software interrupt handler  
                                    145 ;------------------------------------
                           000001   146 .if DEBUG 
      00000A                        147 TrapHandler:
      00000A 72 12 00 25      [ 1]  148 	bset flags,#FTRAP 
      00000E CD 08 14         [ 4]  149 	call print_registers
      000011 CD 0A 3A         [ 4]  150 	call cmd_itf
      000014 72 13 00 25      [ 1]  151 	bres flags,#FTRAP 	
      000018 80               [11]  152 	iret
                                    153 .endif 
                                    154 
      000019                        155 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  156 	clr TIM4_SR 
      00001D CE 00 0B         [ 2]  157 	ldw x,ticks
      000020 5C               [ 1]  158 	incw x
      000021 CF 00 0B         [ 2]  159 	ldw ticks,x 
      000024 80               [11]  160 	iret 
                                    161 
                                    162 
                                    163 ;------------------------------------
                                    164 ; Triggered by pressing USER UserButton 
                                    165 ; on NUCLEO card.
                                    166 ;------------------------------------
      000025                        167 UserButtonHandler:
                                    168 ; wait button release
      000025 5F               [ 1]  169 	clrw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000026 5A               [ 2]  170 1$: decw x 
      000027 26 FD            [ 1]  171 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  172 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
      00002E 72 07 00 25 05   [ 2]  173     btjf flags,#FSLEEP,2$
      000033 72 17 00 25      [ 1]  174 	bres flags,#FSLEEP 
      000037 80               [11]  175 	iret
      000038 72 00 00 25 03   [ 2]  176 2$:	btjt flags,#FRUN,4$
      00003D CC 00 7B         [ 2]  177 	jp 9$ 
      000040 72 11 00 25      [ 1]  178 4$:	bres flags,#FRUN 
      000044 AE 00 83         [ 2]  179 	ldw x,#USER_ABORT
      000047 CD 02 30         [ 4]  180 	call puts 
      00004A CE 00 03         [ 2]  181 	ldw x,basicptr
      00004D FE               [ 2]  182 	ldw x,(x)
      00004E CF 00 09         [ 2]  183 	ldw acc16,x 
      000051 72 5F 00 08      [ 1]  184 	clr acc24 
      000055 5F               [ 1]  185 	clrw x 
      000056 A6 05            [ 1]  186 	ld a,#5
      000058 97               [ 1]  187 	ld xl,a 
      000059 A6 0A            [ 1]  188 	ld a,#10 
      00005B CD 08 C5         [ 4]  189 	call prti24
      00005E CE 00 03         [ 2]  190 	ldw x,basicptr 
      000061 1C 00 03         [ 2]  191 	addw x,#3  
      000064 CD 02 30         [ 4]  192 	call puts 
      000067 A6 0D            [ 1]  193 	ld a,#CR 
      000069 CD 02 1E         [ 4]  194 	call putc
      00006C 5F               [ 1]  195 	clrw x  
      00006D C6 00 01         [ 1]  196 	ld a,in 
      000070 AB 02            [ 1]  197 	add a,#2 ; adjustment for line number display 
      000072 97               [ 1]  198 	ld xl,a 
      000073 CD 02 6C         [ 4]  199 	call spaces 
      000076 A6 5E            [ 1]  200 	ld a,#'^
      000078 CD 02 1E         [ 4]  201 	call putc 
      00007B                        202 9$:
      00007B AE 17 FF         [ 2]  203     ldw x,#STACK_EMPTY 
      00007E 94               [ 1]  204     ldw sp,x
      00007F 9A               [ 1]  205 	rim 
      000080 CC 06 F0         [ 2]  206 	jp warm_start
                                    207 
                                    208 
      000083 0A 50 72 6F 67 72 61   209 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    210 
                                    211 
                                    212 ;----------------------------------------
                                    213 ; inialize MCU clock 
                                    214 ; input:
                                    215 ;   A 		source  HSI | 1 HSE 
                                    216 ;   XL      CLK_CKDIVR , clock divisor 
                                    217 ; output:
                                    218 ;   none 
                                    219 ;----------------------------------------
      00009E                        220 clock_init:	
      00009E C1 50 C3         [ 1]  221 	cp a,CLK_CMSR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      0000A1 27 0C            [ 1]  222 	jreq 2$ ; no switching required 
                                    223 ; select clock source 
      0000A3 72 12 50 C5      [ 1]  224 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A7 C7 50 C4         [ 1]  225 	ld CLK_SWR,a
      0000AA C1 50 C3         [ 1]  226 1$:	cp a,CLK_CMSR
      0000AD 26 FB            [ 1]  227 	jrne 1$
      0000AF                        228 2$: 	
                                    229 ; HSI and cpu clock divisor 
      0000AF 9F               [ 1]  230 	ld a,xl 
      0000B0 C7 50 C6         [ 1]  231 	ld CLK_CKDIVR,a  
      0000B3 81               [ 4]  232 	ret
                                    233 
                                    234 ;---------------------------------
                                    235 ; TIM4 is configured to generate an 
                                    236 ; interrupt every millisecond 
                                    237 ;----------------------------------
      0000B4                        238 timer4_init:
      0000B4 35 07 53 45      [ 1]  239 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B8 35 7D 53 46      [ 1]  240 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BC 35 05 53 40      [ 1]  241 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000C0 72 10 53 41      [ 1]  242 	bset TIM4_IER,#TIM4_IER_UIE 
      0000C4 81               [ 4]  243 	ret
                                    244 
                                    245 ;----------------------------------
                                    246 ; unlock EEPROM for writing/erasing
                                    247 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    248 ; input:
                                    249 ;  none
                                    250 ; output:
                                    251 ;  none 
                                    252 ;----------------------------------
      0000C5                        253 unlock_eeprom:
      0000C5 35 AE 50 64      [ 1]  254 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C9 35 56 50 64      [ 1]  255     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000CD 72 07 50 5F FB   [ 2]  256 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000D2 81               [ 4]  257 	ret
                                    258 
                                    259 ;----------------------------------
                                    260 ; unlock FLASH for writing/erasing
                                    261 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    262 ; input:
                                    263 ;  none
                                    264 ; output:
                                    265 ;  none
                                    266 ;----------------------------------
      0000D3                        267 unlock_flash:
      0000D3 35 56 50 62      [ 1]  268 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D7 35 AE 50 62      [ 1]  269 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000DB 72 03 50 5F FB   [ 2]  270 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000E0 81               [ 4]  271 	ret
                                    272 
                                    273 ;----------------------------
                                    274 ; erase block code must be 
                                    275 ;executed from RAM
                                    276 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    277 
                                    278 ; this code is copied to RAM 
      0000E1                        279 erase_start:
      0000E1 4F               [ 1]  280 	clr a 
      0000E2 72 1A 50 5B      [ 1]  281     bset FLASH_CR2,#FLASH_CR2_ERASE
      0000E6 72 1B 50 5C      [ 1]  282     bres FLASH_NCR2,#FLASH_CR2_ERASE
      0000EA 92 BD 00 14      [ 4]  283 	ldf [farptr],a
      0000EE 72 5C 00 16      [ 1]  284     inc farptr+2 
      0000F2 92 BD 00 14      [ 4]  285     ldf [farptr],a
      0000F6 72 5C 00 16      [ 1]  286     inc farptr+2 
      0000FA 92 BD 00 14      [ 4]  287     ldf [farptr],a
      0000FE 72 5C 00 16      [ 1]  288     inc farptr+2 
      000102 92 BD 00 14      [ 4]  289     ldf [farptr],a
      000106 72 05 50 5F FB   [ 2]  290 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00010B 81               [ 4]  291 	ret
      00010C                        292 erase_end:
                                    293 
                                    294 
      00010C                        295 move_code_in_ram:
      00010C AE 01 0C         [ 2]  296 	ldw x,#erase_end 
      00010F 1D 00 E1         [ 2]  297 	subw x,#erase_start
      000112 CF 00 09         [ 2]  298 	ldw acc16,x 
      000115 AE 17 18         [ 2]  299 	ldw x,#pad 
      000118 90 AE 00 E1      [ 2]  300 	ldw y,#erase_start 
      00011C CD 03 32         [ 4]  301 	call move 
      00011F 81               [ 4]  302 	ret 
                                    303 
                                    304 ;-----------------------------------
                                    305 ; erase flash or EEPROM block 
                                    306 ; a block is 128 bytes 
                                    307 ; input:
                                    308 ;   farptr  address block begin
                                    309 ; output:
                                    310 ;   none
                                    311 ;--------------------------------------
      000120                        312 erase_block:
      000120 CE 00 15         [ 2]  313 	ldw x,farptr+1 
      000123 89               [ 2]  314 	pushw x 
      000124 CD 01 0C         [ 4]  315 	call move_code_in_ram 
      000127 85               [ 2]  316 	popw x 
      000128 CF 00 15         [ 2]  317 	ldw farptr+1,x 
      00012B 72 5D 00 14      [ 1]  318 	tnz farptr
      00012F 26 15            [ 1]  319 	jrne erase_flash 
      000131 AE 80 00         [ 2]  320 	ldw x,#FLASH_BASE 
      000134 C3 00 15         [ 2]  321 	cpw x,farptr+1 
      000137 2A 0D            [ 1]  322 	jrpl erase_flash 
                                    323 ; erase eeprom block
      000139 CD 00 C5         [ 4]  324 	call unlock_eeprom 
      00013C 9B               [ 1]  325 	sim 
      00013D CD 00 E1         [ 4]  326 	call erase_start  
      000140 72 17 50 5F      [ 1]  327 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      000144 9A               [ 1]  328 	rim 
      000145 81               [ 4]  329 	ret 
                                    330 ; erase flash block:
      000146                        331 erase_flash:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000146 CD 00 D3         [ 4]  332 	call unlock_flash 
      000149 72 1A 50 5B      [ 1]  333 	bset FLASH_CR2,#FLASH_CR2_ERASE
      00014D 72 1B 50 5C      [ 1]  334 	bres FLASH_NCR2,#FLASH_CR2_ERASE
      000151 4F               [ 1]  335 	clr a 
      000152 9B               [ 1]  336 	sim 
      000153 CD 17 18         [ 4]  337 	call pad 
      000156 72 13 50 5F      [ 1]  338     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00015A 9A               [ 1]  339 	rim 
      00015B 81               [ 4]  340 	ret 
                                    341 
                                    342 
                                    343 
                                    344 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    345 ; write a byte to FLASH or EEPROM 
                                    346 ; input:
                                    347 ;    a  		byte to write
                                    348 ;    farptr  	address
                                    349 ;    x          farptr[x]
                                    350 ; output:
                                    351 ;    none
                                    352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    353 	; variables locales
                           000001   354 	BTW = 1   ; byte to write offset on stack
                           000002   355 	OPT = 2   ; OPTION flag offset on stack
                           000002   356 	VSIZE = 2
      00015C                        357 write_byte:
      00015C 90 89            [ 2]  358 	pushw y
      00015E                        359 	_vars VSIZE
      00015E 52 02            [ 2]    1     sub sp,#VSIZE 
      000160 6B 01            [ 1]  360 	ld (BTW,sp),a ; byte to write 
      000162 0F 02            [ 1]  361 	clr (OPT,sp)  ; OPTION flag
                                    362 ; put addr[15:0] in Y, for bounds check.
      000164 90 CE 00 15      [ 2]  363 	ldw y,farptr+1   ; Y=addr15:0
                                    364 ; check addr[23:16], if <> 0 then it is extened flash memory
      000168 72 5D 00 14      [ 1]  365 	tnz farptr 
      00016C 26 14            [ 1]  366 	jrne write_flash
      00016E 90 A3 1E 00      [ 2]  367     cpw y,#user_space
      000172 24 0E            [ 1]  368     jruge write_flash
      000174 90 A3 40 00      [ 2]  369 	cpw y,#EEPROM_BASE  
      000178 25 52            [ 1]  370     jrult write_exit
      00017A 90 A3 48 00      [ 2]  371 	cpw y,#OPTION_BASE
      00017E 25 18            [ 1]  372 	jrult write_eeprom
      000180 20 4A            [ 2]  373     jra write_exit
                                    374 ; write program memory
      000182                        375 write_flash:
      000182 CD 00 D3         [ 4]  376 	call unlock_flash 
      000185 9B               [ 1]  377 1$:	sim 
      000186 7B 01            [ 1]  378 	ld a,(BTW,sp)
      000188 92 A7 00 14      [ 4]  379 	ldf ([farptr],x),a ; farptr[x]=A
      00018C 72 05 50 5F FB   [ 2]  380 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000191 9A               [ 1]  381     rim 
      000192 72 13 50 5F      [ 1]  382     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000196 20 34            [ 2]  383     jra write_exit
                                    384 ; write eeprom and option
      000198                        385 write_eeprom:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000198 CD 00 C5         [ 4]  386 	call unlock_eeprom
                                    387 	; check for data eeprom or option eeprom
      00019B 90 A3 48 00      [ 2]  388 	cpw y,#OPTION_BASE
      00019F 2B 08            [ 1]  389 	jrmi 1$
      0001A1 90 A3 48 80      [ 2]  390 	cpw y,#OPTION_END+1
      0001A5 2A 02            [ 1]  391 	jrpl 1$
      0001A7 03 02            [ 1]  392 	cpl (OPT,sp)
      0001A9                        393 1$: 
      0001A9 0D 02            [ 1]  394     tnz (OPT,sp)
      0001AB 27 08            [ 1]  395     jreq 2$
                                    396 	; pour modifier une option il faut modifier ces 2 bits
      0001AD 72 1E 50 5B      [ 1]  397     bset FLASH_CR2,#FLASH_CR2_OPT
      0001B1 72 1F 50 5C      [ 1]  398     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0001B5                        399 2$: 
      0001B5 7B 01            [ 1]  400     ld a,(BTW,sp)
      0001B7 92 A7 00 14      [ 4]  401     ldf ([farptr],x),a
      0001BB 0D 02            [ 1]  402     tnz (OPT,sp)
      0001BD 27 08            [ 1]  403     jreq 3$
      0001BF 5C               [ 1]  404     incw x
      0001C0 7B 01            [ 1]  405     ld a,(BTW,sp)
      0001C2 43               [ 1]  406     cpl a
      0001C3 92 A7 00 14      [ 4]  407     ldf ([farptr],x),a
      0001C7 72 05 50 5F FB   [ 2]  408 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0001CC                        409 write_exit:
      0001CC                        410 	_drop VSIZE 
      0001CC 5B 02            [ 2]    1     addw sp,#VSIZE 
      0001CE 90 85            [ 2]  411 	popw y
      0001D0 81               [ 4]  412     ret
                                    413 
                                    414 ;--------------------------------------------
                                    415 ; write a data block to eeprom or flash 
                                    416 ; input:
                                    417 ;   Y        source address   
                                    418 ;   X        array index  destination  farptr[x]
                                    419 ;   BSIZE    block size bytes 
                                    420 ;   farptr   write address , byte* 
                                    421 ; output:
                                    422 ;	X 		after last byte written 
                                    423 ;   Y 		after last byte read 
                                    424 ;  farptr   point after block
                                    425 ;---------------------------------------------
      0001D1                        426 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      0001D1                        427 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    428 	; local var 
                           000001   429 	XSAVE=1 
                           000002   430 	VSIZE=2 
      0001D1                        431 write_block:
      0001D1                        432 	_vars VSIZE
      0001D1 52 02            [ 2]    1     sub sp,#VSIZE 
      0001D3 1F 01            [ 2]  433 	ldw (XSAVE,sp),x 
      0001D5 1E 05            [ 2]  434 	ldw x,(BSIZE,sp) 
      0001D7 27 13            [ 1]  435 	jreq 9$
      0001D9 1E 01            [ 2]  436 1$:	ldw x,(XSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0001DB 90 F6            [ 1]  437 	ld a,(y)
      0001DD CD 01 5C         [ 4]  438 	call write_byte 
      0001E0 5C               [ 1]  439 	incw x 
      0001E1 90 5C            [ 1]  440 	incw y 
      0001E3 1F 01            [ 2]  441 	ldw (XSAVE,sp),x
      0001E5 1E 05            [ 2]  442 	ldw x,(BSIZE,sp)
      0001E7 5A               [ 2]  443 	decw x
      0001E8 1F 05            [ 2]  444 	ldw (BSIZE,sp),x 
      0001EA 26 ED            [ 1]  445 	jrne 1$
      0001EC                        446 9$:
      0001EC 1E 01            [ 2]  447 	ldw x,(XSAVE,sp)
      0001EE CD 17 91         [ 4]  448 	call incr_farptr
      0001F1                        449 	_drop VSIZE
      0001F1 5B 02            [ 2]    1     addw sp,#VSIZE 
      0001F3 81               [ 4]  450 	ret 
                                    451 
                                    452 
                                    453 
                                    454 ;---------------------------------------------
                                    455 ;   UART3 subroutines
                                    456 ;---------------------------------------------
                                    457 
                                    458 ;---------------------------------------------
                                    459 ; initialize UART3, 115200 8N1
                                    460 ; input:
                                    461 ;	none
                                    462 ; output:
                                    463 ;   none
                                    464 ;---------------------------------------------
      0001F4                        465 uart3_init:
                                    466 	; configure tx pin
      0001F4 72 1A 50 11      [ 1]  467 	bset PD_DDR,#BIT5 ; tx pin
      0001F8 72 1A 50 12      [ 1]  468 	bset PD_CR1,#BIT5 ; push-pull output
      0001FC 72 1A 50 13      [ 1]  469 	bset PD_CR2,#BIT5 ; fast output
      000200                        470 uart3_set_baud: 
                                    471 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    472 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000200 A6 E1            [ 1]  473 	ld a,#CLK_SWR_HSI
      000202 C1 50 C3         [ 1]  474 	cp a,CLK_CMSR 
      000205 27 0A            [ 1]  475 	jreq hsi_clock 
      000207                        476 hse_clock: ; 8 Mhz 	
      000207 35 05 52 43      [ 1]  477 	mov UART3_BRR2,#0x05 ; must be loaded first
      00020B 35 04 52 42      [ 1]  478 	mov UART3_BRR1,#0x4
      00020F 20 08            [ 2]  479 	jra uart_enable
      000211                        480 hsi_clock: ; 16 Mhz 	
      000211 35 0B 52 43      [ 1]  481 	mov UART3_BRR2,#0x0b ; must be loaded first
      000215 35 08 52 42      [ 1]  482 	mov UART3_BRR1,#0x08
      000219                        483 uart_enable:	
      000219 35 0C 52 45      [ 1]  484 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      00021D 81               [ 4]  485 	ret
                                    486 	
                                    487 ;---------------------------------
                                    488 ; send character to UART3 
                                    489 ; input:
                                    490 ;   A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    491 ; output:
                                    492 ;   none 
                                    493 ;--------------------------------	
      00021E                        494 putc:
      00021E 72 0F 52 40 FB   [ 2]  495 	btjf UART3_SR,#UART_SR_TXE,.
      000223 C7 52 41         [ 1]  496 	ld UART3_DR,a 
      000226 81               [ 4]  497 	ret 
                                    498 
                                    499 ;---------------------------------
                                    500 ; wait character from UART3 
                                    501 ; input:
                                    502 ;   none
                                    503 ; output:
                                    504 ;   A 			char  
                                    505 ;--------------------------------	
      000227                        506 getc:
      000227 72 0B 52 40 FB   [ 2]  507 	btjf UART3_SR,#UART_SR_RXNE,.
      00022C C6 52 41         [ 1]  508 	ld a,UART3_DR 
      00022F 81               [ 4]  509 	ret 
                                    510 
                                    511 ;-----------------------------
                                    512 ; send an ASCIZ string to UART3 
                                    513 ; input: 
                                    514 ;   x 		char * 
                                    515 ; output:
                                    516 ;   none 
                                    517 ;-------------------------------
      000230                        518 puts:
      000230 F6               [ 1]  519     ld a,(x)
      000231 27 06            [ 1]  520 	jreq 1$
      000233 CD 02 1E         [ 4]  521 	call putc 
      000236 5C               [ 1]  522 	incw x 
      000237 20 F7            [ 2]  523 	jra puts 
      000239 81               [ 4]  524 1$:	ret 
                                    525 
                                    526 ;-----------------------------
                                    527 ; send a counted string to UART3 
                                    528 ; first is length {0..255}
                                    529 ; input: 
                                    530 ;   X  		char *
                                    531 ; output:
                                    532 ;   none 
                                    533 ;-------------------------------
      00023A                        534 prt_cstr:
      00023A 90 5F            [ 1]  535 	clrw y 
      00023C F6               [ 1]  536 	ld a,(x)
      00023D 5C               [ 1]  537 	incw x 
      00023E 90 97            [ 1]  538 	ld yl,a 
      000240 90 5D            [ 2]  539 1$:	tnzw y 
      000242 27 09            [ 1]  540 	jreq 9$ 
      000244 F6               [ 1]  541 	ld a,(x)
      000245 CD 02 1E         [ 4]  542 	call putc 
      000248 5C               [ 1]  543 	incw x 
      000249 90 5A            [ 2]  544 	decw y
      00024B 20 F3            [ 2]  545 	jra 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00024D 81               [ 4]  546 9$:	ret 
                                    547 
                                    548 
                                    549 ;---------------------------
                                    550 ; delete character at left 
                                    551 ; of cursor on terminal 
                                    552 ; input:
                                    553 ;   none 
                                    554 ; output:
                                    555 ;	none 
                                    556 ;---------------------------
      00024E                        557 bksp:
      00024E A6 08            [ 1]  558 	ld a,#BSP 
      000250 CD 02 1E         [ 4]  559 	call putc 
      000253 A6 20            [ 1]  560 	ld a,#SPACE 
      000255 CD 02 1E         [ 4]  561 	call putc 
      000258 A6 08            [ 1]  562 	ld a,#BSP 
      00025A CD 02 1E         [ 4]  563 	call putc 
      00025D 81               [ 4]  564 	ret 
                                    565 ;---------------------------
                                    566 ; delete n character left of cursor 
                                    567 ; at terminal.
                                    568 ; input: 
                                    569 ;   A   	number of characters to delete.
                                    570 ; output:
                                    571 ;    none 
                                    572 ;--------------------------	
      00025E                        573 delete:
      00025E 88               [ 1]  574 	push a 
      00025F 0D 01            [ 1]  575 0$:	tnz (1,sp)
      000261 27 07            [ 1]  576 	jreq 1$
      000263 CD 02 4E         [ 4]  577 	call bksp 
      000266 0A 01            [ 1]  578 	dec (1,sp)
      000268 20 F5            [ 2]  579 	jra 0$
      00026A 84               [ 1]  580 1$:	pop a 
      00026B 81               [ 4]  581 	ret
                                    582 
                                    583 ;--------------------------
                                    584 ; print n spaces on terminal
                                    585 ; input:
                                    586 ;  X 		number of spaces 
                                    587 ; output:
                                    588 ;	none 
                                    589 ;---------------------------
      00026C                        590 spaces:
      00026C A6 20            [ 1]  591 	ld a,#SPACE 
      00026E 5D               [ 2]  592 1$:	tnzw x
      00026F 27 06            [ 1]  593 	jreq 9$
      000271 CD 02 1E         [ 4]  594 	call putc 
      000274 5A               [ 2]  595 	decw x
      000275 20 F7            [ 2]  596 	jra 1$
      000277                        597 9$: 
      000277 81               [ 4]  598 	ret 
                                    599 
                           000001   600 .if DEBUG 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    601 ;---------------------------------
                                    602 ;; print actual registers states 
                                    603 ;; as pushed on stack 
                                    604 ;; {Y,X,CC,A}
                                    605 ;---------------------------------
      000278                        606 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      000278                        607 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      000278                        608 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      000278                        609 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      000278                        610 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      000278                        611 prt_regs:
      000278 AE 02 BB         [ 2]  612 	ldw x,#regs_state 
      00027B CD 02 30         [ 4]  613 	call puts
                                    614 ; register PC
      00027E 16 01            [ 2]  615 	ldw y,(1,sp)
      000280 AE 08 A4         [ 2]  616 	ldw x,#REG_EPC 
      000283 CD 07 E0         [ 4]  617 	call prt_reg16 
                                    618 ; register CC 
      000286 7B 08            [ 1]  619 	ld a,(R_CC,sp)
      000288 AE 08 B9         [ 2]  620 	ldw x,#REG_CC 
      00028B CD 07 B8         [ 4]  621 	call prt_reg8 
                                    622 ; register A 
      00028E 7B 07            [ 1]  623 	ld a,(R_A,sp)
      000290 AE 08 B4         [ 2]  624 	ldw x,#REG_A 
      000293 CD 07 B8         [ 4]  625 	call prt_reg8 
                                    626 ; register X 
      000296 16 05            [ 2]  627 	ldw y,(R_X,sp)
      000298 AE 08 AF         [ 2]  628 	ldw x,#REG_X 
      00029B CD 07 E0         [ 4]  629 	call prt_reg16 
                                    630 ; register Y 
      00029E 16 03            [ 2]  631 	ldw y,(R_Y,sp)
      0002A0 AE 08 AA         [ 2]  632 	ldw x,#REG_Y 
      0002A3 CD 07 E0         [ 4]  633 	call prt_reg16 
                                    634 ; register SP 
      0002A6 90 96            [ 1]  635 	ldw y,sp
      0002A8 72 A9 00 08      [ 2]  636 	addw y,#6+ARG_OFS  
      0002AC AE 08 BF         [ 2]  637 	ldw x,#REG_SP
      0002AF CD 07 E0         [ 4]  638 	call prt_reg16
      0002B2 A6 0D            [ 1]  639 	ld a,#CR 
      0002B4 CD 02 1E         [ 4]  640 	call putc
      0002B7 CD 02 1E         [ 4]  641 	call putc   
      0002BA 81               [ 4]  642 	ret 
                                    643 
      0002BB 0A 72 65 67 69 73 74   644 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    645 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    646 
                                    647 ;--------------------
                                    648 ; print content at address in hex.
                                    649 ; input:
                                    650 ;   X 	address to peek 
                                    651 ; output:
                                    652 ;	none 
                                    653 ;--------------------	
      0002E2                        654 prt_peek:
      0002E2 89               [ 2]  655 	pushw x 
      0002E3 CF 00 09         [ 2]  656 	ldw acc16,x 
      0002E6 72 5F 00 08      [ 1]  657 	clr acc24 
      0002EA 5F               [ 1]  658 	clrw x 
      0002EB A6 10            [ 1]  659 	ld a,#16 
      0002ED CD 08 C5         [ 4]  660 	call prti24 
      0002F0 A6 3A            [ 1]  661 	ld a,#': 
      0002F2 CD 02 1E         [ 4]  662 	call putc 
      0002F5 A6 20            [ 1]  663 	ld a,#SPACE 
      0002F7 CD 02 1E         [ 4]  664 	call putc 
      0002FA 85               [ 2]  665 	popw x 
      0002FB F6               [ 1]  666 	ld a,(x)
      0002FC C7 00 0A         [ 1]  667 	ld acc8,a 
      0002FF 5F               [ 1]  668 	clrw x 
      000300 A6 10            [ 1]  669 	ld a,#16 
      000302 CD 08 C5         [ 4]  670 	call prti24
      000305 81               [ 4]  671 	ret 
                                    672 .endif 
                                    673 
                                    674 ;-------------------------------------
                                    675 ; retrun string length
                                    676 ; input:
                                    677 ;   X         .asciz  
                                    678 ; output:
                                    679 ;   X         length 
                                    680 ;-------------------------------------
      000306                        681 strlen:
      000306 90 93            [ 1]  682 	ldw y,x 
      000308 5F               [ 1]  683 	clrw x 
      000309 90 7D            [ 1]  684 1$:	tnz (y) 
      00030B 27 05            [ 1]  685 	jreq 9$ 
      00030D 5C               [ 1]  686 	incw x
      00030E 90 5C            [ 1]  687 	incw y 
      000310 20 F7            [ 2]  688 	jra 1$ 
      000312 81               [ 4]  689 9$: ret 
                                    690 
                                    691 ;------------------------------------
                                    692 ; compare 2 strings
                                    693 ; input:
                                    694 ;   X 		char* first string 
                                    695 ;   Y       char* second string 
                                    696 ; output:
                                    697 ;   A 		0|1 
                                    698 ;-------------------------------------
      000313                        699 strcmp:
      000313 F6               [ 1]  700 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      000314 27 0B            [ 1]  701 	jreq 5$ 
      000316 90 F1            [ 1]  702 	cp a,(y) 
      000318 26 05            [ 1]  703 	jrne 4$ 
      00031A 5C               [ 1]  704 	incw x 
      00031B 90 5C            [ 1]  705 	incw y 
      00031D 20 F4            [ 2]  706 	jra strcmp 
      00031F                        707 4$: ; not same  
      00031F 4F               [ 1]  708 	clr a 
      000320 81               [ 4]  709 	ret 
      000321                        710 5$: ; same 
      000321 A6 01            [ 1]  711 	ld a,#1 
      000323 81               [ 4]  712 	ret 
                                    713 
                                    714 
                                    715 ;---------------------------------------
                                    716 ;  copy src to dest 
                                    717 ; input:
                                    718 ;   X 		dest 
                                    719 ;   Y 		src 
                                    720 ; output: 
                                    721 ;   X 		dest 
                                    722 ;----------------------------------
      000324                        723 strcpy:
      000324 89               [ 2]  724 	pushw x 
      000325 90 F6            [ 1]  725 1$: ld a,(y)
      000327 27 06            [ 1]  726 	jreq 9$ 
      000329 F7               [ 1]  727 	ld (x),a 
      00032A 5C               [ 1]  728 	incw x 
      00032B 90 5C            [ 1]  729 	incw y 
      00032D 20 F6            [ 2]  730 	jra 1$ 
      00032F 7F               [ 1]  731 9$:	clr (x)
      000330 85               [ 2]  732 	popw x 
      000331 81               [ 4]  733 	ret 
                                    734 
                                    735 ;---------------------------------------
                                    736 ; move memory block 
                                    737 ; input:
                                    738 ;   X 		destination 
                                    739 ;   Y 	    source 
                                    740 ;   acc16	size 
                                    741 ; output:
                                    742 ;   none 
                                    743 ;--------------------------------------
                           000001   744 	INCR=1 ; increament high byte 
                           000002   745 	LB=2 ; increament low byte 
                           000002   746 	VSIZE=2
      000332                        747 move:
      000332                        748 	_vars VSIZE 
      000332 52 02            [ 2]    1     sub sp,#VSIZE 
      000334 0F 01            [ 1]  749 	clr (INCR,sp)
      000336 0F 02            [ 1]  750 	clr (LB,sp)
      000338 90 89            [ 2]  751 	pushw y 
      00033A 13 01            [ 2]  752 	cpw x,(1,sp) ; compare DEST to SRC 
      00033C 90 85            [ 2]  753 	popw y 
      00033E 27 32            [ 1]  754 	jreq move_exit ; x==y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000340 2B 0E            [ 1]  755 	jrmi move_down
      000342                        756 move_up: ; start from top address with incr=-1
      000342 72 BB 00 09      [ 2]  757 	addw x,acc16
      000346 72 B9 00 09      [ 2]  758 	addw y,acc16
      00034A 03 01            [ 1]  759 	cpl (INCR,sp)
      00034C 03 02            [ 1]  760 	cpl (LB,sp)   ; increment = -1 
      00034E 20 05            [ 2]  761 	jra move_loop  
      000350                        762 move_down: ; start from bottom address with incr=1 
      000350 5A               [ 2]  763     decw x 
      000351 90 5A            [ 2]  764 	decw y
      000353 0C 02            [ 1]  765 	inc (LB,sp) ; incr=1 
      000355                        766 move_loop:	
      000355 C6 00 09         [ 1]  767     ld a, acc16 
      000358 CA 00 0A         [ 1]  768 	or a, acc8
      00035B 27 15            [ 1]  769 	jreq move_exit 
      00035D 72 FB 01         [ 2]  770 	addw x,(INCR,sp)
      000360 72 F9 01         [ 2]  771 	addw y,(INCR,sp) 
      000363 90 F6            [ 1]  772 	ld a,(y)
      000365 F7               [ 1]  773 	ld (x),a 
      000366 72 5A 00 0A      [ 1]  774 	dec acc8
      00036A 2A E9            [ 1]  775 	jrpl move_loop
      00036C 72 5A 00 09      [ 1]  776 	dec acc16
      000370 20 E3            [ 2]  777 	jra move_loop
      000372                        778 move_exit:
      000372                        779 	_drop VSIZE
      000372 5B 02            [ 2]    1     addw sp,#VSIZE 
      000374 81               [ 4]  780 	ret 	
                                    781 
                                    782 ;-------------------------------------
                                    783 ; search text area for a line with 
                                    784 ; same number as lineno  
                                    785 ; input:
                                    786 ;	X 			lineno 
                                    787 ; output:
                                    788 ;   X 			addr of line | 0 
                                    789 ;   Y           lineno|insert address if not found  
                                    790 ;-------------------------------------
                           000001   791 	LL=1 ; line length 
                           000002   792 	LB=2 ; line length low byte 
                           000002   793 	VSIZE=2 
      000375                        794 search_lineno:
      000375                        795 	_vars VSIZE
      000375 52 02            [ 2]    1     sub sp,#VSIZE 
      000377 CF 00 09         [ 2]  796 	ldw acc16,x 
      00037A 0F 01            [ 1]  797 	clr (LL,sp)
      00037C 90 CE 00 1C      [ 2]  798 	ldw y,txtbgn
      000380                        799 search_ln_loop:
      000380 90 C3 00 1E      [ 2]  800 	cpw y,txtend 
      000384 2A 17            [ 1]  801 	jrpl 8$
      000386 93               [ 1]  802 	ldw x,y 
      000387 FE               [ 2]  803 	ldw x,(x) ; x=line number 
      000388 C3 00 09         [ 2]  804 	cpw x,acc16 
      00038B 27 13            [ 1]  805 	jreq 9$ 
      00038D 2A 0E            [ 1]  806 	jrpl 8$ ; from here all lines are > lineno 
      00038F 90 E6 02         [ 1]  807 	ld a,(2,y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000392 6B 02            [ 1]  808 	ld (LB,sp),a 
      000394 72 A9 00 03      [ 2]  809 	addw y,#3 
      000398 72 F9 01         [ 2]  810 	addw y,(LL,sp)
      00039B 20 E3            [ 2]  811 	jra search_ln_loop 
      00039D 51               [ 1]  812 8$: exgw x,y 
      00039E 90 5F            [ 1]  813 	clrw y 	
      0003A0                        814 9$: _drop VSIZE
      0003A0 5B 02            [ 2]    1     addw sp,#VSIZE 
      0003A2 51               [ 1]  815 	exgw x,y   
      0003A3 81               [ 4]  816 	ret 
                                    817 
                                    818 ;-------------------------------------
                                    819 ; delete line at addr
                                    820 ; input:
                                    821 ;   X 		addr of line i.e DEST for move 
                                    822 ;-------------------------------------
                           000001   823 	LLEN=1
                           000003   824 	SRC=3
                           000004   825 	VSIZE=4
      0003A4                        826 del_line: 
      0003A4                        827 	_vars VSIZE 
      0003A4 52 04            [ 2]    1     sub sp,#VSIZE 
      0003A6 E6 02            [ 1]  828 	ld a,(2,x) ; line length
      0003A8 AB 03            [ 1]  829 	add a,#3
      0003AA 6B 02            [ 1]  830 	ld (LLEN+1,sp),a 
      0003AC 0F 01            [ 1]  831 	clr (LLEN,sp)
      0003AE 90 93            [ 1]  832 	ldw y,x  
      0003B0 72 F9 01         [ 2]  833 	addw y,(LLEN,sp) ;SRC  
      0003B3 17 03            [ 2]  834 	ldw (SRC,sp),y  ;save source 
      0003B5 90 CE 00 1E      [ 2]  835 	ldw y,txtend 
      0003B9 72 F2 03         [ 2]  836 	subw y,(SRC,sp) ; y=count 
      0003BC 90 CF 00 09      [ 2]  837 	ldw acc16,y 
      0003C0 16 03            [ 2]  838 	ldw y,(SRC,sp)    ; source
      0003C2 CD 03 32         [ 4]  839 	call move
      0003C5 90 CE 00 1E      [ 2]  840 	ldw y,txtend 
      0003C9 72 F2 01         [ 2]  841 	subw y,(LLEN,sp)
      0003CC 90 CF 00 1E      [ 2]  842 	ldw txtend,y  
      0003D0                        843 	_drop VSIZE     
      0003D0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0003D2 81               [ 4]  844 	ret 
                                    845 
                                    846 
                                    847 ;---------------------------------------------
                                    848 ; create a gap in text area 
                                    849 ; input:
                                    850 ;    X 			addr gap start 
                                    851 ;    Y 			gap length 
                                    852 ; output:
                                    853 ;    X 			addr gap start 
                                    854 ;--------------------------------------------
                           000001   855 	DEST=1
                           000003   856 	SRC=3
                           000005   857 	LEN=5
                           000006   858 	VSIZE=6 
      0003D3                        859 create_gap:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003D3                        860 	_vars VSIZE
      0003D3 52 06            [ 2]    1     sub sp,#VSIZE 
      0003D5 C3 00 1E         [ 2]  861 	cpw x,txtend 
      0003D8 2A 27            [ 1]  862 	jrpl 9$ ; no need for a gap since at end of text.
      0003DA 1F 03            [ 2]  863 	ldw (SRC,sp),x 
      0003DC 17 05            [ 2]  864 	ldw (LEN,sp),y 
      0003DE 90 CF 00 09      [ 2]  865 	ldw acc16,y 
      0003E2 90 93            [ 1]  866 	ldw y,x ; SRC
      0003E4 72 BB 00 09      [ 2]  867 	addw x,acc16  
      0003E8 1F 01            [ 2]  868 	ldw (DEST,sp),x 
                                    869 ;compute size to move 	
      0003EA CE 00 1E         [ 2]  870 	ldw x,txtend 
      0003ED 72 F0 03         [ 2]  871 	subw x,(SRC,sp)
      0003F0 CF 00 09         [ 2]  872 	ldw acc16,x
      0003F3 1E 01            [ 2]  873 	ldw x,(DEST,sp) 
      0003F5 CD 03 32         [ 4]  874 	call move
      0003F8 CE 00 1E         [ 2]  875 	ldw x,txtend
      0003FB 72 FB 05         [ 2]  876 	addw x,(LEN,sp)
      0003FE CF 00 1E         [ 2]  877 	ldw txtend,x
      000401                        878 9$:	_drop VSIZE 
      000401 5B 06            [ 2]    1     addw sp,#VSIZE 
      000403 81               [ 4]  879 	ret 
                                    880 
                                    881 
                                    882 ;--------------------------------------------
                                    883 ; insert line in tib into text area 
                                    884 ; first search for already existing 
                                    885 ; replace existing 
                                    886 ; if strlen(tib)==0 delete existing 
                                    887 ; input:
                                    888 ;   X 				line number 
                                    889 ;   tib[in.w]  		text to insert  
                                    890 ; output:
                                    891 ;   none
                                    892 ;---------------------------------------------
                           000001   893 	DEST=1  ; text area insertion address 
                           000003   894 	SRC=3   ; str to insert address 
                           000005   895 	LINENO=5 ; line number 
                           000007   896 	LLEN=7 ; line length 
                           000008   897 	VSIZE=8  
      000404                        898 insert_line:
      000404                        899 	_vars VSIZE 
      000404 52 08            [ 2]    1     sub sp,#VSIZE 
      000406 A3 00 00         [ 2]  900 	cpw x,#0  
      000409 22 03            [ 1]  901 	jrugt 0$ 
      00040B CC 06 90         [ 2]  902 	jp syntax_error ; negative line number 
      00040E                        903 0$: 
      00040E 1F 05            [ 2]  904 	ldw (LINENO,sp),x 
      000410 AE 16 C8         [ 2]  905 	ldw x,#tib 
      000413 72 BB 00 00      [ 2]  906 	addw x,in.w 
      000417 1F 03            [ 2]  907 	ldw (SRC,sp),x 
      000419 CD 03 06         [ 4]  908 	call strlen
      00041C 5D               [ 2]  909 	tnzw x 
      00041D 27 01            [ 1]  910 	jreq 1$
      00041F 5C               [ 1]  911 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000420 1F 07            [ 2]  912 1$:	ldw (LLEN,sp),x
      000422 1E 05            [ 2]  913 	ldw x,(LINENO,sp)
      000424 CD 03 75         [ 4]  914 	call search_lineno 
      000427 5D               [ 2]  915 	tnzw x 
      000428 26 04            [ 1]  916 	jrne 2$
                                    917 ; line doesn't exit 	
      00042A 17 01            [ 2]  918 	ldw (DEST,sp),y 
      00042C 20 05            [ 2]  919 	jra 3$
                                    920 ; line exit delete it.	
      00042E 1F 01            [ 2]  921 2$: ldw (DEST,sp),x 
      000430 CD 03 A4         [ 4]  922 	call del_line
                                    923 ; leave or insert new line if LLEN>0
      000433                        924 3$: 
                                    925 ; check for available space 
      000433 CD 13 03         [ 4]  926 	call size 
      000436 1D 00 03         [ 2]  927 	subw x,#3 
      000439 72 F0 07         [ 2]  928     subw x,(LLEN,sp)
      00043C 2A 05            [ 1]  929 	jrpl 31$
      00043E A6 01            [ 1]  930 	ld a,#ERR_MEM_FULL
      000440 CC 06 92         [ 2]  931 	jp tb_error 
      000443                        932 31$:	
      000443 0D 08            [ 1]  933 	tnz (LLEN+1,sp)
      000445 27 34            [ 1]  934 	jreq insert_ln_exit ; empty line forget it.
      000447 1E 01            [ 2]  935 	ldw x,(DEST,sp)
      000449 C3 00 1E         [ 2]  936 	cpw x,txtend 
      00044C 2A 0B            [ 1]  937 	jrpl 4$ 
                                    938 ; must create a gap 
      00044E 16 07            [ 2]  939 	ldw y,(LLEN,sp)
      000450 72 A9 00 03      [ 2]  940 	addw y,#3 ; space for lineno and linelen 
      000454 CD 03 D3         [ 4]  941 	call create_gap 
      000457 20 11            [ 2]  942 	jra 5$ 
      000459                        943 4$: ; insert at end. 
      000459 90 CE 00 1E      [ 2]  944 	ldw y,txtend
      00045D 17 01            [ 2]  945 	ldw (DEST,sp),y
      00045F 72 F9 07         [ 2]  946 	addw y,(LLEN,sp)
      000462 72 A9 00 03      [ 2]  947 	addw y,#3 
      000466 90 CF 00 1E      [ 2]  948 	ldw txtend,y  
      00046A                        949 5$:	
      00046A 1E 01            [ 2]  950 	ldw x,(DEST,sp) ; dest address 
      00046C 16 05            [ 2]  951 	ldw y,(LINENO,sp) ; line number 
      00046E FF               [ 2]  952 	ldw (x),y 
      00046F 1C 00 02         [ 2]  953 	addw x,#2
      000472 7B 08            [ 1]  954 	ld a,(LLEN+1,sp)
      000474 F7               [ 1]  955 	ld (x),a 
      000475 5C               [ 1]  956 	incw x 
      000476 16 03            [ 2]  957 	ldw y,(SRC,sp) ; src addr  
      000478 CD 03 24         [ 4]  958 	call strcpy   
      00047B                        959 insert_ln_exit:	
      00047B                        960 	_drop VSIZE
      00047B 5B 08            [ 2]    1     addw sp,#VSIZE 
      00047D 81               [ 4]  961 	ret
                                    962 	
                                    963 ;------------------------------------
                                    964 ;  set all variables to zero 
                                    965 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    966 ;   none 
                                    967 ; output:
                                    968 ;	none
                                    969 ;------------------------------------
      00047E                        970 clear_vars:
      00047E AE 00 27         [ 2]  971 	ldw x,#vars 
      000481 90 AE 00 34      [ 2]  972 	ldw y,#2*26 
      000485 7F               [ 1]  973 1$:	clr (x)
      000486 5C               [ 1]  974 	incw x 
      000487 90 5A            [ 2]  975 	decw y 
      000489 26 FA            [ 1]  976 	jrne 1$
      00048B 81               [ 4]  977 	ret 
                                    978 
                                    979 ;-------------------------------------
                                    980 ; check if A is a letter
                                    981 ; input:
                                    982 ;   A 			character to test 
                                    983 ; output:
                                    984 ;   C flag      1 true, 0 false 
                                    985 ;-------------------------------------
      00048C                        986 is_alpha:
      00048C A1 41            [ 1]  987 	cp a,#'A 
      00048E 8C               [ 1]  988 	ccf
      00048F 24 0B            [ 1]  989 	jrnc 9$ 
      000491 A1 5B            [ 1]  990 	cp a,#'Z+1 
      000493 25 07            [ 1]  991 	jrc 9$ 
      000495 A1 61            [ 1]  992 	cp a,#'a 
      000497 8C               [ 1]  993 	ccf 
      000498 24 02            [ 1]  994 	jrnc 9$
      00049A A1 7B            [ 1]  995 	cp a,#'z+1   
      00049C 81               [ 4]  996 9$: ret 	
                                    997 
                                    998 ;-------------------------------------
                                    999 ;  program initialization entry point 
                                   1000 ;-------------------------------------
                           000001  1001 	MAJOR=1
                           000000  1002 	MINOR=0
      00049D 0A 0A 54 69 6E 79 20  1003 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0004E3                       1004 cold_start:
                                   1005 ;set stack 
      0004E3 AE 17 FF         [ 2] 1006 	ldw x,#STACK_EMPTY
      0004E6 94               [ 1] 1007 	ldw sp,x   
                                   1008 ; clear all ram 
      0004E7 7F               [ 1] 1009 0$: clr (x)
      0004E8 5A               [ 2] 1010 	decw x 
      0004E9 26 FC            [ 1] 1011 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1012 ; activate pull up on all inputs 
      0004EB A6 FF            [ 1] 1013 	ld a,#255 
      0004ED C7 50 03         [ 1] 1014 	ld PA_CR1,a 
      0004F0 C7 50 08         [ 1] 1015 	ld PB_CR1,a 
      0004F3 C7 50 0D         [ 1] 1016 	ld PC_CR1,a 
      0004F6 C7 50 12         [ 1] 1017 	ld PD_CR1,a 
      0004F9 C7 50 17         [ 1] 1018 	ld PE_CR1,a 
      0004FC C7 50 1C         [ 1] 1019 	ld PF_CR1,a 
      0004FF C7 50 21         [ 1] 1020 	ld PG_CR1,a 
      000502 C7 50 2B         [ 1] 1021 	ld PI_CR1,a 
                                   1022 ; select internal clock no divisor: 16 Mhz 	
      000505 A6 E1            [ 1] 1023 	ld a,#CLK_SWR_HSI 
      000507 5F               [ 1] 1024 	clrw x  
      000508 CD 00 9E         [ 4] 1025     call clock_init 
      00050B CD 00 B4         [ 4] 1026 	call timer4_init
                                   1027 ; UART3 at 115200 BAUD
      00050E CD 01 F4         [ 4] 1028 	call uart3_init
                                   1029 ; activate PE_4 (user button interrupt)
      000511 72 18 50 18      [ 1] 1030     bset PE_CR2,#USR_BTN_BIT 
                                   1031 ; display system information
      000515 AE 04 9D         [ 2] 1032 	ldw x,#software 
      000518 CD 02 30         [ 4] 1033 	call puts 
      00051B A6 01            [ 1] 1034 	ld a,#MAJOR 
      00051D C7 00 0A         [ 1] 1035 	ld acc8,a 
      000520 5F               [ 1] 1036 	clrw x 
      000521 CF 00 08         [ 2] 1037 	ldw acc24,x 
      000524 A6 0A            [ 1] 1038 	ld a,#10 
      000526 CD 08 C5         [ 4] 1039 	call prti24 
      000529 A6 2E            [ 1] 1040 	ld a,#'.
      00052B CD 02 1E         [ 4] 1041 	call putc 
      00052E A6 00            [ 1] 1042 	ld a,#MINOR 
      000530 C7 00 0A         [ 1] 1043 	ld acc8,a 
      000533 5F               [ 1] 1044 	clrw x 
      000534 CF 00 08         [ 2] 1045 	ldw acc24,x 
      000537 A6 0A            [ 1] 1046 	ld a,#10 
      000539 CD 08 C5         [ 4] 1047 	call prti24 
      00053C A6 0D            [ 1] 1048 	ld a,#CR 
      00053E CD 02 1E         [ 4] 1049 	call putc 
      000541 CD 17 9F         [ 4] 1050 	call seek_fdrive  
                                   1051 ; configure LED2 pin 
      000544 72 1A 50 0D      [ 1] 1052     bset PC_CR1,#LED2_BIT
      000548 72 1A 50 0E      [ 1] 1053     bset PC_CR2,#LED2_BIT
      00054C 72 1A 50 0C      [ 1] 1054     bset PC_DDR,#LED2_BIT
      000550 9A               [ 1] 1055 	rim 
      000551 AE 16 C8         [ 2] 1056 	ldw x,#tib
      000554 CF 00 21         [ 2] 1057 	ldw array_addr,x 
      000557 72 5C 00 10      [ 1] 1058 	inc seedy+1 
      00055B 72 5C 00 0E      [ 1] 1059 	inc seedx+1 
      00055F CD 05 6E         [ 4] 1060 	call clear_basic
      000562 CD 13 10         [ 4] 1061 	call ubound 
      000565 CD 0F 1B         [ 4] 1062 	call dpop 
      000568 CF 00 23         [ 2] 1063 	ldw array_size,x 
      00056B CC 06 F0         [ 2] 1064     jp warm_start 
                                   1065 
      00056E                       1066 clear_basic:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00056E 5F               [ 1] 1067 	clrw x 
      00056F CF 00 05         [ 2] 1068 	ldw lineno,x
      000572 72 5F 00 02      [ 1] 1069 	clr count 
      000576 AE 00 5B         [ 2] 1070 	ldw x,#free_ram 
      000579 CF 00 1C         [ 2] 1071 	ldw txtbgn,x 
      00057C CF 00 1E         [ 2] 1072 	ldw txtend,x 
      00057F CD 04 7E         [ 4] 1073 	call clear_vars 
      000582 81               [ 4] 1074 	ret 
                                   1075 
      000583                       1076 err_msg:
      000583 00 00 05 9B 05 A9 05  1077 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             B8 05 D2 05 E2
      00058F 05 F9 06 10 06 2B 06  1078 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             3D 06 4F
      000599 06 5C                 1079 	.word err_no_access 
                                   1080 
      00059B 0A 4D 65 6D 6F 72 79  1081 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      0005A9 0A 73 79 6E 74 61 78  1082 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      0005B8 0A 6D 61 74 68 20 6F  1083 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      0005D2 0A 64 69 76 69 73 69  1084 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      0005E2 0A 69 6E 76 61 6C 69  1085 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      0005F9 0A 72 75 6E 20 74 69  1086 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000610 0A 63 6F 6D 6D 61 6E  1087 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      00062B 0A 64 75 70 6C 69 63  1088 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      00063D 0A 46 69 6C 65 20 6E  1089 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      00064F 0A 62 61 64 20 76 61  1090 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      00065C 0A 46 69 6C 65 20 69  1091 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



             2E 0A 00
                                   1092 
      000690                       1093 syntax_error:
      000690 A6 02            [ 1] 1094 	ld a,#ERR_SYNTAX 
                                   1095 
      000692                       1096 tb_error:
      000692 AE 05 83         [ 2] 1097 	ldw x, #err_msg 
      000695 72 5F 00 09      [ 1] 1098 	clr acc16 
      000699 48               [ 1] 1099 	sll a
      00069A 72 59 00 09      [ 1] 1100 	rlc acc16  
      00069E C7 00 0A         [ 1] 1101 	ld acc8, a 
      0006A1 72 BB 00 09      [ 2] 1102 	addw x,acc16 
      0006A5 FE               [ 2] 1103 	ldw x,(x)
      0006A6 CD 02 30         [ 4] 1104 	call puts
      0006A9 CE 00 05         [ 2] 1105 	ldw x,lineno 
      0006AC 5D               [ 2] 1106 	tnzw x 
      0006AD 27 0F            [ 1] 1107 	jreq 2$
      0006AF CF 00 09         [ 2] 1108 	ldw acc16,x 
      0006B2 72 5F 00 08      [ 1] 1109 	clr acc24 
      0006B6 AE 00 05         [ 2] 1110 	ldw x,#5 
      0006B9 A6 0A            [ 1] 1111 	ld a,#10 
      0006BB CD 08 C5         [ 4] 1112 	call prti24
      0006BE                       1113 2$:	 
      0006BE CE 00 03         [ 2] 1114 	ldw x,basicptr   
      0006C1 C6 00 05         [ 1] 1115 	ld a,lineno 
      0006C4 CA 00 06         [ 1] 1116 	or a,lineno+1
      0006C7 27 03            [ 1] 1117 	jreq 3$
      0006C9 1C 00 03         [ 2] 1118 	addw x,#3 
      0006CC CD 02 30         [ 4] 1119 3$:	call puts 
      0006CF A6 0D            [ 1] 1120 	ld a,#CR 
      0006D1 CD 02 1E         [ 4] 1121 	call putc 
      0006D4 5F               [ 1] 1122 	clrw x 
      0006D5 C6 00 05         [ 1] 1123 	ld a,lineno 
      0006D8 CA 00 06         [ 1] 1124 	or a,lineno+1
      0006DB 27 03            [ 1] 1125 	jreq 4$
      0006DD AE 00 05         [ 2] 1126 	ldw x,#5 
      0006E0 72 BB 00 00      [ 2] 1127 4$:	addw x,in.w 
      0006E4 CD 02 6C         [ 4] 1128 	call spaces
      0006E7 A6 5E            [ 1] 1129 	ld a,#'^ 
      0006E9 CD 02 1E         [ 4] 1130 	call putc 
      0006EC AE 17 FF         [ 2] 1131 1$: ldw x,#STACK_EMPTY 
      0006EF 94               [ 1] 1132     ldw sp,x
      0006F0                       1133 warm_start:
      0006F0 72 5F 00 25      [ 1] 1134 	clr flags 
      0006F4 72 5F 00 11      [ 1] 1135 	clr untok
      0006F8 5F               [ 1] 1136 	clrw x 
      0006F9 CF 00 12         [ 2] 1137 	ldw tokval,x 
      0006FC 72 5F 00 20      [ 1] 1138 	clr loop_depth 
      000700 AE 17 80         [ 2] 1139 	ldw x,#dstack_unf 
      000703 CF 00 1A         [ 2] 1140 	ldw dstkptr,x 
      000706 35 04 00 26      [ 1] 1141 	mov tab_width,#TAB_WIDTH 
      00070A 35 0A 00 07      [ 1] 1142 	mov base,#10 
      00070E 5F               [ 1] 1143 	clrw x 
      00070F CF 00 05         [ 2] 1144 	ldw lineno,x 
      000712 AE 16 C8         [ 2] 1145 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000715 CF 00 03         [ 2] 1146 	ldw basicptr,x 
                                   1147 ;----------------------------
                                   1148 ; tokenizer test
                                   1149 ;----------------------------
                           000000  1150   TOK_TEST=0 
                           000000  1151 .if TOK_TEST 
                                   1152 test_tok:
                                   1153 	clr in.w 
                                   1154 	clr in 
                                   1155 	ld a,#CR 
                                   1156 	call putc 
                                   1157 	ld a,#'> 
                                   1158 	call putc 
                                   1159 	call readln
                                   1160 	ldw x,#tib 
                                   1161 1$:	call get_token	
                                   1162 	tnz a 
                                   1163 	jrne 2$
                                   1164 	jra test_tok 
                                   1165 2$:	push a 
                                   1166 	cp a,#TK_INTGR
                                   1167 	jrne 3$
                                   1168 	ld a,#10 
                                   1169 	clrw x
                                   1170 	call itoa
                                   1171 	ldw y,x 
                                   1172 	ldw x,#pad 
                                   1173 	call strcpy    
                                   1174 3$:	ld a,(1,sp) 
                                   1175 	cp a,#20
                                   1176 	jrmi 34$
                                   1177 	ld a,#'2 
                                   1178 	call putc 
                                   1179 	ld a,(1,sp)
                                   1180 	sub a,#20
                                   1181 	ld (1,sp),a
                                   1182 	jra 36$   
                                   1183 34$: 
                                   1184 	cp a,#10
                                   1185 	jrmi 36$ 
                                   1186 	ld a,#'1 
                                   1187 	call putc
                                   1188 	ld a,(1,sp)
                                   1189 	sub a,#10 
                                   1190 	ld (1,sp),a  
                                   1191 36$:
                                   1192 	pop a 
                                   1193 	add a,#'0 
                                   1194 	call putc 
                                   1195 	ld a,#SPACE 
                                   1196 	call putc 
                                   1197 	ldw x,#pad 
                                   1198 	call puts 
                                   1199 	ld a,#CR 
                                   1200 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1201 	jra 1$
                                   1202 .endif
                                   1203 ;----------------------------
      000718                       1204 interp:
      000718 72 5F 00 00      [ 1] 1205 	clr in.w
      00071C 72 01 00 25 2C   [ 2] 1206 	btjf flags,#FRUN,4$ 
                                   1207 ; running program
                                   1208 ; goto next basic line 
      000721 CE 00 03         [ 2] 1209 	ldw x,basicptr
      000724 E6 02            [ 1] 1210 	ld a,(2,x) ; line length 
      000726 C7 00 0A         [ 1] 1211 	ld acc8,a 
      000729 72 5F 00 09      [ 1] 1212 	clr acc16 
      00072D 1C 00 03         [ 2] 1213 	addw x,#3 
      000730 72 BB 00 09      [ 2] 1214 	addw x,acc16
      000734 C3 00 1E         [ 2] 1215 	cpw x,txtend 
      000737 2A B7            [ 1] 1216 	jrpl warm_start
      000739 CF 00 03         [ 2] 1217 	ldw basicptr,x ; start of next line  
      00073C E6 02            [ 1] 1218 	ld a,(2,x)
      00073E AB 02            [ 1] 1219 	add a,#2 ; because 'in' start at 3.
      000740 C7 00 02         [ 1] 1220 	ld count,a 
      000743 FE               [ 2] 1221 	ldw x,(x) ; line no 
      000744 CF 00 05         [ 2] 1222 	ldw lineno,x 
      000747 35 03 00 01      [ 1] 1223 	mov in,#3 ; skip first 3 bytes of line 
      00074B 20 11            [ 2] 1224 	jra interp_loop 
      00074D                       1225 4$: ; commande line mode 	
      00074D 72 5F 00 01      [ 1] 1226 	clr in 
      000751 A6 0D            [ 1] 1227 	ld a,#CR 
      000753 CD 02 1E         [ 4] 1228 	call putc 
      000756 A6 3E            [ 1] 1229 	ld a,#'> 
      000758 CD 02 1E         [ 4] 1230 	call putc 
      00075B CD 09 AC         [ 4] 1231 	call readln
      00075E                       1232 interp_loop:
      00075E C6 00 01         [ 1] 1233 	ld a,in 
      000761 C1 00 02         [ 1] 1234 	cp a,count 
      000764 2A B2            [ 1] 1235 	jrpl interp
      000766 CD 0C 48         [ 4] 1236 	call get_token
      000769 A1 01            [ 1] 1237 	cp a,#TK_COLON 
      00076B 27 F1            [ 1] 1238 	jreq interp_loop 
      00076D A1 00            [ 1] 1239 	cp a,#TK_NONE 
      00076F 27 A7            [ 1] 1240 	jreq interp 
      000771                       1241 1$:
      000771 A1 02            [ 1] 1242 	cp a,#TK_VAR
      000773 26 05            [ 1] 1243 	jrne 2$
      000775 CD 13 2B         [ 4] 1244 	call let02  
      000778 20 E4            [ 2] 1245 	jra interp_loop 
      00077A                       1246 2$:	
      00077A A1 03            [ 1] 1247 	cp a,#TK_ARRAY 
      00077C 26 08            [ 1] 1248 	jrne 3$
      00077E CD 11 8A         [ 4] 1249 	call get_array_element
      000781 CD 13 2B         [ 4] 1250 	call let02 
      000784 20 D8            [ 2] 1251 	jra interp_loop 
      000786                       1252 3$:
      000786 A1 07            [ 1] 1253 	cp a,#TK_CMD
      000788 26 03            [ 1] 1254 	jrne 4$
      00078A FD               [ 4] 1255 	call (x) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00078B 20 D1            [ 2] 1256 	jra interp_loop 
      00078D                       1257 4$:	
      00078D A1 0A            [ 1] 1258 	cp a,#TK_INTGR
      00078F 26 06            [ 1] 1259 	jrne 5$
      000791 CD 04 04         [ 4] 1260 	call insert_line 
      000794 CC 07 18         [ 2] 1261 	jp interp
      000797                       1262 5$: 
      000797 CC 06 90         [ 2] 1263 	jp syntax_error 
                                   1264 
                                   1265 ;----------------------------------------
                                   1266 ;   DEBUG support functions
                                   1267 ;----------------------------------------
                           000001  1268 .if DEBUG 
                                   1269 ; turn LED on 
      00079A                       1270 ledon:
      00079A 72 1A 50 0A      [ 1] 1271     bset PC_ODR,#LED2_BIT
      00079E 81               [ 4] 1272     ret 
                                   1273 
                                   1274 ; turn LED off 
      00079F                       1275 ledoff:
      00079F 72 1B 50 0A      [ 1] 1276     bres PC_ODR,#LED2_BIT 
      0007A3 81               [ 4] 1277     ret 
                                   1278 
                                   1279 ; invert LED status 
      0007A4                       1280 ledtoggle:
      0007A4 A6 20            [ 1] 1281     ld a,#LED2_MASK
      0007A6 C8 50 0A         [ 1] 1282     xor a,PC_ODR
      0007A9 C7 50 0A         [ 1] 1283     ld PC_ODR,a
      0007AC 81               [ 4] 1284     ret 
                                   1285 
      0007AD                       1286 left_paren:
      0007AD A6 20            [ 1] 1287 	ld a,#SPACE 
      0007AF CD 02 1E         [ 4] 1288 	call putc
      0007B2 A6 28            [ 1] 1289 	ld a,#'( 
      0007B4 CD 02 1E         [ 4] 1290 	call putc 	
      0007B7 81               [ 4] 1291 	ret 
                                   1292 
                                   1293 ;------------------------------
                                   1294 ; print 8 bit register 
                                   1295 ; input:
                                   1296 ;   X  point to register name 
                                   1297 ;   A  register value to print 
                                   1298 ; output:
                                   1299 ;   none
                                   1300 ;------------------------------- 
      0007B8                       1301 prt_reg8:
      0007B8 88               [ 1] 1302 	push a 
      0007B9 CD 02 30         [ 4] 1303 	call puts 
      0007BC 7B 01            [ 1] 1304 	ld a,(1,sp) 
      0007BE C7 00 0A         [ 1] 1305 	ld acc8,a 
      0007C1 5F               [ 1] 1306 	clrw x 
      0007C2 CF 00 08         [ 2] 1307 	ldw acc24,x 
      0007C5 A6 10            [ 1] 1308 	ld a,#16 
      0007C7 CD 08 C5         [ 4] 1309 	call prti24 
      0007CA CD 07 AD         [ 4] 1310 	call left_paren 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0007CD 84               [ 1] 1311 	pop a 
      0007CE C7 00 0A         [ 1] 1312 	ld acc8,a 
      0007D1 5F               [ 1] 1313 	clrw x 
      0007D2 CF 00 08         [ 2] 1314 	ldw acc24,x 
      0007D5 A6 0A            [ 1] 1315 	ld a,#10 
      0007D7 CD 08 C5         [ 4] 1316 	call prti24 
      0007DA A6 29            [ 1] 1317 	ld a,#') 
      0007DC CD 02 1E         [ 4] 1318 	call putc
      0007DF 81               [ 4] 1319 	ret
                                   1320 
                                   1321 ;--------------------------------
                                   1322 ; print 16 bits register 
                                   1323 ; input:
                                   1324 ;   X   point register name 
                                   1325 ;   Y   register value to print 
                                   1326 ; output:
                                   1327 ;  none
                                   1328 ;--------------------------------
      0007E0                       1329 prt_reg16: 
      0007E0 90 89            [ 2] 1330 	pushw y 
      0007E2 CD 02 30         [ 4] 1331 	call puts 
      0007E5 1E 01            [ 2] 1332 	ldw x,(1,sp) 
      0007E7 CF 00 09         [ 2] 1333 	ldw acc16,x 
      0007EA 72 5F 00 08      [ 1] 1334 	clr acc24 
      0007EE 5F               [ 1] 1335 	clrw x 
      0007EF A6 10            [ 1] 1336 	ld a,#16 
      0007F1 CD 08 C5         [ 4] 1337 	call prti24 
      0007F4 CD 07 AD         [ 4] 1338 	call left_paren 
      0007F7 85               [ 2] 1339 	popw x 
      0007F8 CF 00 09         [ 2] 1340 	ldw acc16,x 
      0007FB 72 5F 00 08      [ 1] 1341 	clr acc24
      0007FF 72 0F 00 09 04   [ 2] 1342 	btjf acc16,#7,1$
      000804 72 53 00 08      [ 1] 1343 	cpl acc24 
      000808 5F               [ 1] 1344 1$:	clrw x 
      000809 A6 0A            [ 1] 1345 	ld a,#10 
      00080B CD 08 C5         [ 4] 1346 	call prti24 
      00080E A6 29            [ 1] 1347 	ld a,#') 
      000810 CD 02 1E         [ 4] 1348 	call putc
      000813 81               [ 4] 1349 	ret 
                                   1350 
                                   1351 ;------------------------------------
                                   1352 ; print registers contents saved on
                                   1353 ; stack by trap interrupt.
                                   1354 ;------------------------------------
      000814                       1355 print_registers:
      000814 AE 08 67         [ 2] 1356 	ldw x,#STATES
      000817 CD 02 30         [ 4] 1357 	call puts
                                   1358 ; print EPC 
      00081A AE 08 A4         [ 2] 1359 	ldw x, #REG_EPC
      00081D CD 02 30         [ 4] 1360 	call puts 
      000820 7B 0B            [ 1] 1361 	ld a, (11,sp)
      000822 C7 00 0A         [ 1] 1362 	ld acc8,a 
      000825 7B 0A            [ 1] 1363 	ld a, (10,sp) 
      000827 C7 00 09         [ 1] 1364 	ld acc16,a 
      00082A 7B 09            [ 1] 1365 	ld a,(9,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00082C C7 00 08         [ 1] 1366 	ld acc24,a
      00082F 5F               [ 1] 1367 	clrw x  
      000830 A6 10            [ 1] 1368 	ld a,#16
      000832 CD 08 C5         [ 4] 1369 	call prti24  
                                   1370 ; print X
      000835 AE 08 AF         [ 2] 1371 	ldw x,#REG_X
      000838 16 05            [ 2] 1372 	ldw y,(5,sp)
      00083A CD 07 E0         [ 4] 1373 	call prt_reg16  
                                   1374 ; print Y 
      00083D AE 08 AA         [ 2] 1375 	ldw x,#REG_Y
      000840 16 07            [ 2] 1376 	ldw y, (7,sp)
      000842 CD 07 E0         [ 4] 1377 	call prt_reg16  
                                   1378 ; print A 
      000845 AE 08 B4         [ 2] 1379 	ldw x,#REG_A
      000848 7B 04            [ 1] 1380 	ld a, (4,sp) 
      00084A CD 07 B8         [ 4] 1381 	call prt_reg8
                                   1382 ; print CC 
      00084D AE 08 B9         [ 2] 1383 	ldw x,#REG_CC 
      000850 7B 03            [ 1] 1384 	ld a, (3,sp) 
      000852 CD 07 B8         [ 4] 1385 	call prt_reg8 
                                   1386 ; print SP 
      000855 AE 08 BF         [ 2] 1387 	ldw x,#REG_SP
      000858 90 96            [ 1] 1388 	ldw y,sp 
      00085A 72 A9 00 0C      [ 2] 1389 	addw y,#12
      00085E CD 07 E0         [ 4] 1390 	call prt_reg16  
      000861 A6 0A            [ 1] 1391 	ld a,#'\n' 
      000863 CD 02 1E         [ 4] 1392 	call putc
      000866 81               [ 4] 1393 	ret
                                   1394 
      000867 0A 52 65 67 69 73 74  1395 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0008A4 45 50 43 3A 20 00     1396 REG_EPC: .asciz "EPC: "
      0008AA 0A 59 3A 20 00        1397 REG_Y:   .asciz "\nY: " 
      0008AF 0A 58 3A 20 00        1398 REG_X:   .asciz "\nX: "
      0008B4 0A 41 3A 20 00        1399 REG_A:   .asciz "\nA: " 
      0008B9 0A 43 43 3A 20 00     1400 REG_CC:  .asciz "\nCC: "
      0008BF 0A 53 50 3A 20 00     1401 REG_SP:  .asciz "\nSP: "
                                   1402 .endif 
                                   1403 
                                   1404 ;------------------------------------
                                   1405 ; print integer in acc24 
                                   1406 ; input:
                                   1407 ;	acc24 		integer to print 
                                   1408 ;	A 			numerical base for conversion 
                                   1409 ;               if bit 7 is set add a space at print end.
                                   1410 ;   XL 			field width, 0 -> no fill.
                                   1411 ;  output:
                                   1412 ;    none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1413 ;------------------------------------
                           000001  1414 	WIDTH = 1
                           000002  1415 	BASE = 2
                           000003  1416 	ADD_SPACE=3 ; add a space after number 
                           000003  1417 	VSIZE = 3
      0008C5                       1418 prti24:
      0008C5                       1419 	_vars VSIZE 
      0008C5 52 03            [ 2]    1     sub sp,#VSIZE 
      0008C7 0F 03            [ 1] 1420 	clr (ADD_SPACE,sp)
      0008C9 A5 80            [ 1] 1421 	bcp a,#0x80 
      0008CB 27 02            [ 1] 1422 	jreq 0$ 
      0008CD 03 03            [ 1] 1423 	cpl (ADD_SPACE,sp)
      0008CF A4 1F            [ 1] 1424 0$:	and a,#31 
      0008D1 6B 02            [ 1] 1425 	ld (BASE,sp),a
      0008D3 9F               [ 1] 1426 	ld a,xl
      0008D4 6B 01            [ 1] 1427 	ld (WIDTH,sp),a 
      0008D6 7B 02            [ 1] 1428 	ld a, (BASE,sp)  
      0008D8 CD 09 1A         [ 4] 1429     call itoa  ; conversion entier en  .asciz
      0008DB 7B 01            [ 1] 1430 1$: ld a,(WIDTH,sp)
      0008DD 27 1F            [ 1] 1431 	jreq 4$
      0008DF C7 00 0A         [ 1] 1432 	ld acc8,a 
      0008E2 89               [ 2] 1433 	pushw x 
      0008E3 CD 03 06         [ 4] 1434 	call strlen 
      0008E6 9F               [ 1] 1435 	ld a,xl 
      0008E7 85               [ 2] 1436 	popw x 
      0008E8 31 00 0A         [ 3] 1437 	exg a,acc8 
      0008EB C0 00 0A         [ 1] 1438 	sub a,acc8 
      0008EE 2B 0E            [ 1] 1439 	jrmi 4$
      0008F0 6B 01            [ 1] 1440 	ld (WIDTH,sp),a 
      0008F2 A6 20            [ 1] 1441 	ld  a,#SPACE
      0008F4 0D 01            [ 1] 1442 3$: tnz (WIDTH,sp)
      0008F6 27 06            [ 1] 1443 	jreq 4$
      0008F8 5A               [ 2] 1444 	decw x 
      0008F9 F7               [ 1] 1445 	ld (x),a 
      0008FA 0A 01            [ 1] 1446 	dec (WIDTH,sp) 
      0008FC 20 F6            [ 2] 1447 	jra 3$
      0008FE                       1448 4$: 
      0008FE CD 02 30         [ 4] 1449 	call puts 
      000901 0D 03            [ 1] 1450 	tnz (ADD_SPACE,sp)
      000903 27 05            [ 1] 1451 	jreq 5$
      000905 A6 20            [ 1] 1452     ld a,#SPACE 
      000907 CD 02 1E         [ 4] 1453 	call putc 
      00090A                       1454 5$: _drop VSIZE 
      00090A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00090C 81               [ 4] 1455     ret	
                                   1456 
                                   1457 ;-----------------------------
                                   1458 ; intialize parser ready for
                                   1459 ; for a new line analysis
                                   1460 ; input:
                                   1461 ;   none
                                   1462 ; output:
                                   1463 ;	none 
                                   1464 ;------------------------------
      00090D                       1465 parser_init::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00090D 72 5F 00 00      [ 1] 1466 	clr in.w 
      000911 72 5F 00 01      [ 1] 1467 	clr in
      000915 72 5F 17 18      [ 1] 1468 	clr pad  
      000919 81               [ 4] 1469 	ret 
                                   1470 
                                   1471 ;------------------------------------
                                   1472 ; convert integer to string
                                   1473 ; input:
                                   1474 ;   A	  	base
                                   1475 ;	acc24	integer to convert
                                   1476 ; output:
                                   1477 ;   X  		pointer to string
                                   1478 ;------------------------------------
                           000001  1479 	SIGN=1  ; integer sign 
                           000002  1480 	BASE=2  ; numeric base 
                           000002  1481 	VSIZE=2  ;locals size
      00091A                       1482 itoa:
      00091A 52 02            [ 2] 1483 	sub sp,#VSIZE
      00091C 6B 02            [ 1] 1484 	ld (BASE,sp), a  ; base
      00091E 0F 01            [ 1] 1485 	clr (SIGN,sp)    ; sign
      000920 A1 0A            [ 1] 1486 	cp a,#10
      000922 26 0A            [ 1] 1487 	jrne 1$
                                   1488 	; base 10 string display with negative sign if bit 23==1
      000924 72 0F 00 08 05   [ 2] 1489 	btjf acc24,#7,1$
      000929 03 01            [ 1] 1490 	cpl (SIGN,sp)
      00092B CD 09 89         [ 4] 1491 	call neg_acc24
      00092E                       1492 1$:
                                   1493 ; initialize string pointer 
      00092E AE 17 3F         [ 2] 1494 	ldw x,#pad+PAD_SIZE-1
      000931 7F               [ 1] 1495 	clr (x)
      000932                       1496 itoa_loop:
      000932 7B 02            [ 1] 1497     ld a,(BASE,sp)
      000934 CD 09 61         [ 4] 1498     call divu24_8 ; acc24/A 
      000937 AB 30            [ 1] 1499     add a,#'0  ; remainder of division
      000939 A1 3A            [ 1] 1500     cp a,#'9+1
      00093B 2B 02            [ 1] 1501     jrmi 2$
      00093D AB 07            [ 1] 1502     add a,#7 
      00093F 5A               [ 2] 1503 2$: decw x
      000940 F7               [ 1] 1504     ld (x),a
                                   1505 	; if acc24==0 conversion done
      000941 C6 00 08         [ 1] 1506 	ld a,acc24
      000944 CA 00 09         [ 1] 1507 	or a,acc16
      000947 CA 00 0A         [ 1] 1508 	or a,acc8
      00094A 26 E6            [ 1] 1509     jrne itoa_loop
                                   1510 	;conversion done, next add '$' or '-' as required
      00094C 7B 02            [ 1] 1511 	ld a,(BASE,sp)
      00094E A1 10            [ 1] 1512 	cp a,#16
      000950 27 08            [ 1] 1513 	jreq 8$
      000952 7B 01            [ 1] 1514 	ld a,(SIGN,sp)
      000954 27 08            [ 1] 1515     jreq 10$
      000956 A6 2D            [ 1] 1516     ld a,#'-
      000958 20 02            [ 2] 1517 	jra 9$ 
      00095A A6 24            [ 1] 1518 8$: ld a,#'$ 
      00095C 5A               [ 2] 1519 9$: decw x
      00095D F7               [ 1] 1520     ld (x),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00095E                       1521 10$:
      00095E 5B 02            [ 2] 1522 	addw sp,#VSIZE
      000960 81               [ 4] 1523 	ret
                                   1524 
                                   1525 ;-------------------------------------
                                   1526 ; divide uint24_t by uint8_t
                                   1527 ; used to convert uint24_t to string
                                   1528 ; input:
                                   1529 ;	acc24	dividend
                                   1530 ;   A 		divisor
                                   1531 ; output:
                                   1532 ;   acc24	quotient
                                   1533 ;   A		remainder
                                   1534 ;------------------------------------- 
                                   1535 ; offset  on sp of arguments and locals
                           000001  1536 	U8   = 1   ; divisor on stack
                           000001  1537 	VSIZE =1
      000961                       1538 divu24_8:
      000961 89               [ 2] 1539 	pushw x ; save x
      000962 88               [ 1] 1540 	push a 
                                   1541 	; ld dividend UU:MM bytes in X
      000963 C6 00 08         [ 1] 1542 	ld a, acc24
      000966 95               [ 1] 1543 	ld xh,a
      000967 C6 00 09         [ 1] 1544 	ld a,acc24+1
      00096A 97               [ 1] 1545 	ld xl,a
      00096B 7B 01            [ 1] 1546 	ld a,(U8,SP) ; divisor
      00096D 62               [ 2] 1547 	div x,a ; UU:MM/U8
      00096E 88               [ 1] 1548 	push a  ;save remainder
      00096F 9E               [ 1] 1549 	ld a,xh
      000970 C7 00 08         [ 1] 1550 	ld acc24,a
      000973 9F               [ 1] 1551 	ld a,xl
      000974 C7 00 09         [ 1] 1552 	ld acc24+1,a
      000977 84               [ 1] 1553 	pop a
      000978 95               [ 1] 1554 	ld xh,a
      000979 C6 00 0A         [ 1] 1555 	ld a,acc24+2
      00097C 97               [ 1] 1556 	ld xl,a
      00097D 7B 01            [ 1] 1557 	ld a,(U8,sp) ; divisor
      00097F 62               [ 2] 1558 	div x,a  ; R:LL/U8
      000980 6B 01            [ 1] 1559 	ld (U8,sp),a ; save remainder
      000982 9F               [ 1] 1560 	ld a,xl
      000983 C7 00 0A         [ 1] 1561 	ld acc24+2,a
      000986 84               [ 1] 1562 	pop a
      000987 85               [ 2] 1563 	popw x
      000988 81               [ 4] 1564 	ret
                                   1565 
                                   1566 ;------------------------------------
                                   1567 ;  two's complement acc24
                                   1568 ;  input:
                                   1569 ;		acc24 variable
                                   1570 ;  output:
                                   1571 ;		acc24 variable
                                   1572 ;-------------------------------------
      000989                       1573 neg_acc24:
      000989 72 53 00 0A      [ 1] 1574 	cpl acc24+2
      00098D 72 53 00 09      [ 1] 1575 	cpl acc24+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000991 72 53 00 08      [ 1] 1576 	cpl acc24
      000995 A6 01            [ 1] 1577 	ld a,#1
      000997 CB 00 0A         [ 1] 1578 	add a,acc24+2
      00099A C7 00 0A         [ 1] 1579 	ld acc24+2,a
      00099D 4F               [ 1] 1580 	clr a
      00099E C9 00 09         [ 1] 1581 	adc a,acc24+1
      0009A1 C7 00 09         [ 1] 1582 	ld acc24+1,a 
      0009A4 4F               [ 1] 1583 	clr a 
      0009A5 C9 00 08         [ 1] 1584 	adc a,acc24 
      0009A8 C7 00 08         [ 1] 1585 	ld acc24,a 
      0009AB 81               [ 4] 1586 	ret
                                   1587 
                                   1588 
                                   1589 ;------------------------------------
                                   1590 ; read a line of text from terminal
                                   1591 ; input:
                                   1592 ;	none
                                   1593 ; local variable on stack:
                                   1594 ;	LL (1,sp)
                                   1595 ;   RXCHAR (2,sp)
                                   1596 ; output:
                                   1597 ;   text in tib  buffer
                                   1598 ;------------------------------------
                                   1599 	; local variables
                           000001  1600 	LL_HB=1
                           000001  1601 	RXCHAR = 1 ; last char received
                           000002  1602 	LL = 2  ; accepted line length
                           000002  1603 	VSIZE=2 
      0009AC                       1604 readln:
      0009AC 5F               [ 1] 1605 	clrw x 
      0009AD 89               [ 2] 1606 	pushw x 
      0009AE 90 AE 16 C8      [ 2] 1607  	ldw y,#tib ; input buffer
      0009B2                       1608 readln_loop:
      0009B2 CD 02 27         [ 4] 1609 	call getc
      0009B5 6B 01            [ 1] 1610 	ld (RXCHAR,sp),a
      0009B7 A1 0D            [ 1] 1611 	cp a,#CR
      0009B9 26 03            [ 1] 1612 	jrne 1$
      0009BB CC 0A 2B         [ 2] 1613 	jp readln_quit
      0009BE A1 0A            [ 1] 1614 1$:	cp a,#NL
      0009C0 27 69            [ 1] 1615 	jreq readln_quit
      0009C2 A1 08            [ 1] 1616 	cp a,#BSP
      0009C4 27 41            [ 1] 1617 	jreq del_back
      0009C6 A1 04            [ 1] 1618 	cp a,#CTRL_D
      0009C8 27 2E            [ 1] 1619 	jreq del_ln
      0009CA A1 12            [ 1] 1620 	cp a,#CTRL_R 
      0009CC 27 06            [ 1] 1621 	jreq reprint 
                                   1622 ;	cp a,#'[
                                   1623 ;	jreq ansi_seq
      0009CE                       1624 final_test:
      0009CE A1 20            [ 1] 1625 	cp a,#SPACE
      0009D0 2A 44            [ 1] 1626 	jrpl accept_char
      0009D2 20 DE            [ 2] 1627 	jra readln_loop
      0009D4                       1628 ansi_seq:
                                   1629 ;	call getc
                                   1630 ;	cp a,#'C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1631 ;	jreq rigth_arrow
                                   1632 ;	cp a,#'D 
                                   1633 ;	jreq left_arrow 
                                   1634 ;	jra final_test
      0009D4                       1635 right_arrow:
                                   1636 ;	ld a,#BSP 
                                   1637 ;	call putc 
                                   1638 ;	jra realn_loop 
      0009D4                       1639 left_arrow:
                                   1640 
                                   1641 ;	jra readln_loop
      0009D4                       1642 reprint: 
      0009D4 72 5D 00 02      [ 1] 1643 	tnz count 
      0009D8 27 D8            [ 1] 1644 	jreq readln_loop
      0009DA 0D 02            [ 1] 1645 	tnz (LL,sp)
      0009DC 26 D4            [ 1] 1646 	jrne readln_loop
      0009DE AE 16 C8         [ 2] 1647 	ldw x,#tib 
      0009E1 CD 02 30         [ 4] 1648 	call puts
      0009E4 90 AE 16 C8      [ 2] 1649 	ldw y,#tib 
      0009E8 C6 00 02         [ 1] 1650 	ld a,count 
      0009EB 6B 02            [ 1] 1651 	ld (LL,sp),a
      0009ED 72 5F 00 02      [ 1] 1652 	clr count 
      0009F1 0F 01            [ 1] 1653 	clr (LL_HB,sp)
      0009F3 72 F9 01         [ 2] 1654 	addw y,(LL_HB,sp)
      0009F6 20 BA            [ 2] 1655 	jra readln_loop 
      0009F8                       1656 del_ln:
      0009F8 7B 02            [ 1] 1657 	ld a,(LL,sp)
      0009FA CD 02 5E         [ 4] 1658 	call delete
      0009FD 90 AE 16 C8      [ 2] 1659 	ldw y,#tib
      000A01 90 7F            [ 1] 1660 	clr (y)
      000A03 0F 02            [ 1] 1661 	clr (LL,sp)
      000A05 20 AB            [ 2] 1662 	jra readln_loop
      000A07                       1663 del_back:
      000A07 0D 02            [ 1] 1664     tnz (LL,sp)
      000A09 27 A7            [ 1] 1665     jreq readln_loop
      000A0B 0A 02            [ 1] 1666     dec (LL,sp)
      000A0D 90 5A            [ 2] 1667     decw y
      000A0F 90 7F            [ 1] 1668     clr  (y)
      000A11 CD 02 4E         [ 4] 1669     call bksp 
      000A14 20 9C            [ 2] 1670     jra readln_loop	
      000A16                       1671 accept_char:
      000A16 A6 4F            [ 1] 1672 	ld a,#TIB_SIZE-1
      000A18 11 02            [ 1] 1673 	cp a, (LL,sp)
      000A1A 27 96            [ 1] 1674 	jreq readln_loop
      000A1C 7B 01            [ 1] 1675 	ld a,(RXCHAR,sp)
      000A1E 90 F7            [ 1] 1676 	ld (y),a
      000A20 0C 02            [ 1] 1677 	inc (LL,sp)
      000A22 90 5C            [ 1] 1678 	incw y
      000A24 90 7F            [ 1] 1679 	clr (y)
      000A26 CD 02 1E         [ 4] 1680 	call putc 
      000A29 20 87            [ 2] 1681 	jra readln_loop
      000A2B                       1682 readln_quit:
      000A2B 90 7F            [ 1] 1683 	clr (y)
      000A2D 7B 02            [ 1] 1684 	ld a,(LL,sp)
      000A2F C7 00 02         [ 1] 1685 	ld count,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A32                       1686 	_drop VSIZE 
      000A32 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A34 A6 0D            [ 1] 1687 	ld a,#CR
      000A36 CD 02 1E         [ 4] 1688 	call putc
      000A39 81               [ 4] 1689 	ret
                                   1690 
                           000001  1691 .if DEBUG 	
                                   1692 ;----------------------------
                                   1693 ; command interface
                                   1694 ; only 2 commands:
                                   1695 ;  'q' to resume application
                                   1696 ;  'p [addr]' to print memory values 
                                   1697 ;  's addr' to print string 
                                   1698 ;----------------------------
                                   1699 ;local variable 
                           000001  1700 	PSIZE=1
                           000001  1701 	VSIZE=1 
      000A3A                       1702 cmd_itf:
      000A3A 52 01            [ 2] 1703 	sub sp,#VSIZE 
      000A3C 72 5F 00 14      [ 1] 1704 	clr farptr 
      000A40 72 5F 00 15      [ 1] 1705 	clr farptr+1 
      000A44 72 5F 00 16      [ 1] 1706 	clr farptr+2  
      000A48                       1707 repl:
      000A48 A6 0D            [ 1] 1708 	ld a,#CR 
      000A4A CD 02 1E         [ 4] 1709 	call putc 
      000A4D A6 3F            [ 1] 1710 	ld a,#'? 
      000A4F CD 02 1E         [ 4] 1711 	call putc
      000A52 72 5F 00 00      [ 1] 1712 	clr in.w 
      000A56 72 5F 00 01      [ 1] 1713 	clr in 
      000A5A CD 09 AC         [ 4] 1714 	call readln
      000A5D CD 0C 48         [ 4] 1715 	call get_token
      000A60 90 AE 17 18      [ 2] 1716 	ldw y,#pad 
      000A64 90 F6            [ 1] 1717 	ld a,(y)
      000A66 90 5C            [ 1] 1718 	incw y
      000A68 A1 51            [ 1] 1719 	cp a,#'Q 
      000A6A 26 0B            [ 1] 1720 	jrne test_p
      000A6C                       1721 repl_exit:
      000A6C                       1722 	_drop #VSIZE 	
      000A6C 5B 01            [ 2]    1     addw sp,##VSIZE 
      000A6E 81               [ 4] 1723 	ret  
      000A6F                       1724 invalid:
      000A6F AE 0A DD         [ 2] 1725 	ldw x,#invalid_cmd 
      000A72 CD 02 30         [ 4] 1726 	call puts 
      000A75 20 D1            [ 2] 1727 	jra repl 
      000A77                       1728 test_p:	
      000A77 A1 50            [ 1] 1729     cp a,#'P 
      000A79 27 10            [ 1] 1730 	jreq mem_peek
      000A7B A1 53            [ 1] 1731     cp a,#'S 
      000A7D 26 F0            [ 1] 1732 	jrne invalid 
      000A7F                       1733 print_string:	
      000A7F CD 0C 48         [ 4] 1734 	call get_token
      000A82 CE 00 09         [ 2] 1735 	ldw x,acc16 
      000A85 CD 02 30         [ 4] 1736 	call puts
      000A88 CC 0A 48         [ 2] 1737 	jp repl 	
      000A8B                       1738 mem_peek:	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A8B CD 0C 48         [ 4] 1739 	call get_token
      000A8E C6 00 08         [ 1] 1740 	ld a, acc24 
      000A91 CA 00 09         [ 1] 1741 	or a,acc16 
      000A94 CA 00 0A         [ 1] 1742 	or a,acc8 
      000A97 26 02            [ 1] 1743 	jrne 1$ 
      000A99 20 0C            [ 2] 1744 	jra peek_byte  
      000A9B CE 00 08         [ 2] 1745 1$:	ldw x,acc24 
      000A9E CF 00 14         [ 2] 1746 	ldw farptr,x 
      000AA1 C6 00 0A         [ 1] 1747 	ld a,acc8 
      000AA4 C7 00 16         [ 1] 1748 	ld farptr+2,a 
      000AA7                       1749 peek_byte:
      000AA7 CD 0A EC         [ 4] 1750 	call print_farptr 
      000AAA A6 08            [ 1] 1751 	ld a,#8 
      000AAC 6B 01            [ 1] 1752 	ld (PSIZE,sp),a 
      000AAE 5F               [ 1] 1753 	clrw x 
      000AAF CD 0B 07         [ 4] 1754 1$:	call fetchc  
      000AB2 89               [ 2] 1755 	pushw x 
      000AB3 C7 00 0A         [ 1] 1756 	ld acc8,a 
      000AB6 5F               [ 1] 1757 	clrw x 
      000AB7 CF 00 08         [ 2] 1758 	ldw acc24,x 
      000ABA A6 90            [ 1] 1759 	ld a,#16+128
      000ABC CD 08 C5         [ 4] 1760 	call prti24
      000ABF 85               [ 2] 1761 	popw x 
      000AC0 0A 01            [ 1] 1762 	dec (PSIZE,sp)
      000AC2 26 EB            [ 1] 1763 	jrne 1$ 
      000AC4 A6 08            [ 1] 1764 	ld a,#8 
      000AC6 CB 00 16         [ 1] 1765 	add a,farptr+2 
      000AC9 C7 00 16         [ 1] 1766 	ld farptr+2,a
      000ACC 4F               [ 1] 1767 	clr a 
      000ACD C9 00 15         [ 1] 1768 	adc a,farptr+1 
      000AD0 C7 00 15         [ 1] 1769 	ld farptr+1,a 
      000AD3 4F               [ 1] 1770 	clr a 
      000AD4 C9 00 14         [ 1] 1771 	adc a,farptr 
      000AD7 C7 00 14         [ 1] 1772 	ld farptr,a 
      000ADA CC 0A 48         [ 2] 1773 	jp repl  
                                   1774 
                                   1775 
      000ADD 6E 6F 74 20 61 20 63  1776 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1777 .endif 
                                   1778 
                                   1779 ;----------------------------
                                   1780 ; display farptr address
                                   1781 ;----------------------------
      000AEC                       1782 print_farptr:
      000AEC C6 00 16         [ 1] 1783 	ld a ,farptr+2 
      000AEF C7 00 0A         [ 1] 1784 	ld acc8,a 
      000AF2 CE 00 14         [ 2] 1785 	ldw x,farptr 
      000AF5 CF 00 08         [ 2] 1786 	ldw acc24,x 
      000AF8 5F               [ 1] 1787 	clrw x 
      000AF9 A6 10            [ 1] 1788 	ld a,#16 
      000AFB CD 08 C5         [ 4] 1789 	call prti24
      000AFE A6 20            [ 1] 1790 	ld a,#SPACE 
      000B00 CD 02 1E         [ 4] 1791 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000B03 CD 02 1E         [ 4] 1792 	call putc 
      000B06 81               [ 4] 1793 	ret
                                   1794 
                                   1795 ;------------------------------------
                                   1796 ; get byte at address farptr[X]
                                   1797 ; input:
                                   1798 ;	 farptr   address to peek
                                   1799 ;    X		  farptr index 	
                                   1800 ; output:
                                   1801 ;	 A 		  byte from memory  
                                   1802 ;    x		  incremented by 1
                                   1803 ;------------------------------------
      000B07                       1804 fetchc: ; @C
      000B07 92 AF 00 14      [ 5] 1805 	ldf a,([farptr],x)
      000B0B 5C               [ 1] 1806 	incw x
      000B0C 81               [ 4] 1807 	ret
                                   1808 
                                   1809 
                                   1810 ;------------------------------------
                                   1811 ; expect a number from command line 
                                   1812 ; next argument
                                   1813 ;  input:
                                   1814 ;	  none
                                   1815 ;  output:
                                   1816 ;    acc24   int24_t 
                                   1817 ;------------------------------------
      000B0D                       1818 number::
      000B0D CD 0C 48         [ 4] 1819 	call get_token
      000B10 CD 0E 4F         [ 4] 1820 	call atoi
      000B13 81               [ 4] 1821 	ret
                                   1822 
                                   1823 ;------------------------------------
                                   1824 ; scan tib for charater 'c' starting from 'in'
                                   1825 ; input:
                                   1826 ;	y  point to tib 
                                   1827 ;	a character to skip
                                   1828 ; output:
                                   1829 ;	in point to chacter 'c'
                                   1830 ;------------------------------------
                           000001  1831 	C = 1 ; local var
      000B14                       1832 scan: 
      000B14 88               [ 1] 1833 	push a
      000B15 91 D6 00         [ 4] 1834 1$:	ld a,([in.w],y)
      000B18 27 0A            [ 1] 1835 	jreq 2$
      000B1A 11 01            [ 1] 1836 	cp a,(C,sp)
      000B1C 27 06            [ 1] 1837 	jreq 2$
      000B1E 72 5C 00 01      [ 1] 1838 	inc in
      000B22 20 F1            [ 2] 1839 	jra 1$
      000B24 84               [ 1] 1840 2$: pop a
      000B25 81               [ 4] 1841 	ret
                                   1842 
                                   1843 ;------------------------------------
                                   1844 ; parse quoted string 
                                   1845 ; input:
                                   1846 ;   Y 	pointer to tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1847 ;   X   pointer to pad
                                   1848 ; output:
                                   1849 ;	pad   parsed string
                                   1850 ;   TOS  char* to pad  
                                   1851 ;------------------------------------
                           000001  1852 	PREV = 1
                           000002  1853 	CURR =2 
                           000002  1854 	VSIZE=2 
      000B26                       1855 parse_quote: ; { -- addr }
      000B26                       1856 	_vars VSIZE 
      000B26 52 02            [ 2]    1     sub sp,#VSIZE 
      000B28 4F               [ 1] 1857 	clr a
      000B29 6B 01            [ 1] 1858 1$:	ld (PREV,sp),a 
      000B2B 72 5C 00 01      [ 1] 1859 2$:	inc in
      000B2F 91 D6 00         [ 4] 1860 	ld a,([in.w],y)
      000B32 27 24            [ 1] 1861 	jreq 6$
      000B34 6B 02            [ 1] 1862 	ld (CURR,sp),a 
      000B36 A6 5C            [ 1] 1863 	ld a,#'\
      000B38 11 01            [ 1] 1864 	cp a, (PREV,sp)
      000B3A 26 0A            [ 1] 1865 	jrne 3$
      000B3C 0F 01            [ 1] 1866 	clr (PREV,sp)
      000B3E 7B 02            [ 1] 1867 	ld a,(CURR,sp)
      000B40 AD 1F            [ 4] 1868 	callr convert_escape
      000B42 F7               [ 1] 1869 	ld (x),a 
      000B43 5C               [ 1] 1870 	incw x 
      000B44 20 E5            [ 2] 1871 	jra 2$
      000B46                       1872 3$:
      000B46 7B 02            [ 1] 1873 	ld a,(CURR,sp)
      000B48 A1 5C            [ 1] 1874 	cp a,#'\'
      000B4A 27 DD            [ 1] 1875 	jreq 1$
      000B4C A1 22            [ 1] 1876 	cp a,#'"
      000B4E 27 04            [ 1] 1877 	jreq 5$ 
      000B50 F7               [ 1] 1878 	ld (x),a 
      000B51 5C               [ 1] 1879 	incw x 
      000B52 20 D7            [ 2] 1880 	jra 2$
      000B54 72 5C 00 01      [ 1] 1881 5$:	inc in 
      000B58 7F               [ 1] 1882 6$: clr (x)
      000B59 AE 17 18         [ 2] 1883 	ldw x,#pad 
      000B5C                       1884 	_drop VSIZE
      000B5C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B5E A6 06            [ 1] 1885 	ld a,#TK_QSTR  
      000B60 81               [ 4] 1886 	ret 
                                   1887 
                                   1888 ;---------------------------------------
                                   1889 ; called by parse_quote
                                   1890 ; subtitute escaped character 
                                   1891 ; by their ASCII value .
                                   1892 ; input:
                                   1893 ;   A  character following '\'
                                   1894 ; output:
                                   1895 ;   A  substitued char or same if not valid.
                                   1896 ;---------------------------------------
      000B61                       1897 convert_escape:
      000B61 A1 61            [ 1] 1898 	cp a,#'a'
      000B63 26 03            [ 1] 1899 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B65 A6 07            [ 1] 1900 	ld a,#7
      000B67 81               [ 4] 1901 	ret 
      000B68 A1 62            [ 1] 1902 1$: cp a,#'b'
      000B6A 26 03            [ 1] 1903 	jrne 2$
      000B6C A6 08            [ 1] 1904 	ld a,#8
      000B6E 81               [ 4] 1905 	ret 
      000B6F A1 65            [ 1] 1906 2$: cp a,#'e' 
      000B71 26 03            [ 1] 1907     jrne 3$
      000B73 A6 5C            [ 1] 1908 	ld a,#'\'
      000B75 81               [ 4] 1909 	ret  
      000B76 A1 5C            [ 1] 1910 3$: cp a,#'\'
      000B78 26 03            [ 1] 1911 	jrne 4$
      000B7A A6 5C            [ 1] 1912 	ld a,#'\'
      000B7C 81               [ 4] 1913 	ret 
      000B7D A1 66            [ 1] 1914 4$: cp a,#'f' 
      000B7F 26 03            [ 1] 1915 	jrne 5$ 
      000B81 A6 0C            [ 1] 1916 	ld a,#FF 
      000B83 81               [ 4] 1917 	ret  
      000B84 A1 6E            [ 1] 1918 5$: cp a,#'n' 
      000B86 26 03            [ 1] 1919     jrne 6$ 
      000B88 A6 0A            [ 1] 1920 	ld a,#0xa 
      000B8A 81               [ 4] 1921 	ret  
      000B8B A1 72            [ 1] 1922 6$: cp a,#'r' 
      000B8D 26 03            [ 1] 1923 	jrne 7$
      000B8F A6 0D            [ 1] 1924 	ld a,#0xd 
      000B91 81               [ 4] 1925 	ret  
      000B92 A1 74            [ 1] 1926 7$: cp a,#'t' 
      000B94 26 03            [ 1] 1927 	jrne 8$ 
      000B96 A6 09            [ 1] 1928 	ld a,#9 
      000B98 81               [ 4] 1929 	ret  
      000B99 A1 76            [ 1] 1930 8$: cp a,#'v' 
      000B9B 26 02            [ 1] 1931 	jrne 9$  
      000B9D A6 0B            [ 1] 1932 	ld a,#0xb 
      000B9F 81               [ 4] 1933 9$:	ret 
                                   1934 
                                   1935 ;-------------------------
                                   1936 ; integer parser 
                                   1937 ; input:
                                   1938 ;   X 		point to pad 
                                   1939 ;   Y 		point to tib 
                                   1940 ;   A 	    first digit|'$' 
                                   1941 ; output:  
                                   1942 ;   pad     number string 
                                   1943 ;   X 		integer 
                                   1944 ;   A 		TK_INTGR
                                   1945 ;   TOS     integer 
                                   1946 ;-------------------------
                           000001  1947 	BASE=1
                           000002  1948 	TCHAR=2 
                           000002  1949 	VSIZE=2 
      000BA0                       1950 parse_integer: ; { -- n }
      000BA0 4B 00            [ 1] 1951 	push #0 ; TCHAR 
      000BA2 A1 24            [ 1] 1952 	cp a,#'$
      000BA4 27 04            [ 1] 1953 	jreq 1$ 
      000BA6 4B 0A            [ 1] 1954 	push #10 ; BASE=10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BA8 20 02            [ 2] 1955 	jra 2$ 
      000BAA 4B 10            [ 1] 1956 1$: push #16  ; BASE=16
      000BAC F7               [ 1] 1957 2$:	ld (x),a 
      000BAD 5C               [ 1] 1958 	incw x 
      000BAE 72 5C 00 01      [ 1] 1959 	inc in 
      000BB2 91 D6 00         [ 4] 1960 	ld a,([in.w],y)
      000BB5 CD 0E 2A         [ 4] 1961 	call to_upper 
      000BB8 6B 02            [ 1] 1962 	ld (TCHAR,sp),a 
      000BBA CD 0E 16         [ 4] 1963 	call is_digit 
      000BBD 25 ED            [ 1] 1964 	jrc 2$
      000BBF A6 10            [ 1] 1965 	ld a,#16 
      000BC1 11 01            [ 1] 1966 	cp a,(BASE,sp)
      000BC3 26 0A            [ 1] 1967 	jrne 3$ 
      000BC5 7B 02            [ 1] 1968 	ld a,(TCHAR,sp)
      000BC7 A1 41            [ 1] 1969 	cp a,#'A 
      000BC9 2B 04            [ 1] 1970 	jrmi 3$ 
      000BCB A1 47            [ 1] 1971 	cp a,#'G 
      000BCD 2B DD            [ 1] 1972 	jrmi 2$ 
      000BCF 7F               [ 1] 1973 3$:	clr (x)
      000BD0 CD 0E 4F         [ 4] 1974 	call atoi
      000BD3 CE 00 09         [ 2] 1975 	ldw x,acc16 
      000BD6 A6 0A            [ 1] 1976 	ld a,#TK_INTGR
      000BD8                       1977 	_drop VSIZE  
      000BD8 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BDA 81               [ 4] 1978 	ret 	
                                   1979 
                                   1980 ;-------------------------
                                   1981 ; binary integer parser 
                                   1982 ; input:
                                   1983 ;   X 		point to pad 
                                   1984 ;   Y 		point to tib 
                                   1985 ;   A 	    '%' 
                                   1986 ; output:  
                                   1987 ;   pad     number string 
                                   1988 ;   X 		integer 
                                   1989 ;   A 		TK_INTGR
                                   1990 ;   TOS     integer 
                                   1991 ;-------------------------
                           000001  1992 	BINARY=1
                           000002  1993 	VSIZE=2
      000BDB                       1994 parse_binary: ; { -- n }
      000BDB 4B 00            [ 1] 1995 	push #0
      000BDD 4B 00            [ 1] 1996 	push #0
      000BDF F7               [ 1] 1997 1$: ld (x),a 
      000BE0 5C               [ 1] 1998 	incw x 
      000BE1 72 5C 00 01      [ 1] 1999 	inc in 
      000BE5 91 D6 00         [ 4] 2000 	ld a,([in.w],y)
      000BE8 A1 30            [ 1] 2001 	cp a,#'0 
      000BEA 27 06            [ 1] 2002 	jreq 2$
      000BEC A1 31            [ 1] 2003 	cp a,#'1 
      000BEE 27 02            [ 1] 2004 	jreq 2$ 
      000BF0 20 09            [ 2] 2005 	jra bin_exit 
      000BF2 A0 30            [ 1] 2006 2$: sub a,#'0	
      000BF4 46               [ 1] 2007 	rrc a 
      000BF5 09 02            [ 1] 2008 	rlc (BINARY+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BF7 09 01            [ 1] 2009 	rlc (BINARY,sp)
      000BF9 20 E4            [ 2] 2010 	jra 1$  
      000BFB                       2011 bin_exit:
      000BFB 7F               [ 1] 2012 	clr (x)
      000BFC 1E 01            [ 2] 2013 	ldw x,(BINARY,sp)
      000BFE A6 0A            [ 1] 2014 	ld a,#TK_INTGR 	
      000C00                       2015 	_drop VSIZE 
      000C00 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C02 81               [ 4] 2016 	ret
                                   2017 
                                   2018 ;---------------------------
                                   2019 ;  token begin with a letter,
                                   2020 ;  is keyword or variable. 	
                                   2021 ; input:
                                   2022 ;   X 		point to pad 
                                   2023 ;   Y 		point to text
                                   2024 ;   A 	    first letter  
                                   2025 ; output:
                                   2026 ;   X		exec_addr|var_addr 
                                   2027 ;   A 		TK_CMD 
                                   2028 ;   pad 	keyword|var_name  
                                   2029 ;   TOS     exec_addr|var_addr 
                                   2030 ;--------------------------  
      000C03                       2031 parse_keyword: ; { -- exec_addr|var_addr}
      000C03 CD 0E 2A         [ 4] 2032 	call to_upper 
      000C06 F7               [ 1] 2033 	ld (x),a 
      000C07 5C               [ 1] 2034 	incw x 
      000C08 72 5C 00 01      [ 1] 2035 	inc in 
      000C0C 91 D6 00         [ 4] 2036 	ld a,([in.w],y)
      000C0F CD 04 8C         [ 4] 2037 	call is_alpha 
      000C12 25 EF            [ 1] 2038 	jrc parse_keyword 
      000C14 7F               [ 1] 2039 1$: clr (x)
      000C15 72 5D 17 19      [ 1] 2040 	tnz pad+1 
      000C19 26 15            [ 1] 2041 	jrne 2$
                                   2042 ; one letter variable name 
      000C1B C6 17 18         [ 1] 2043 	ld a,pad 
      000C1E A0 41            [ 1] 2044 	sub a,#'A 
      000C20 48               [ 1] 2045 	sll a 
      000C21 88               [ 1] 2046 	push a 
      000C22 4B 00            [ 1] 2047 	push #0
      000C24 AE 00 27         [ 2] 2048 	ldw x,#vars 
      000C27 72 FB 01         [ 2] 2049 	addw x,(1,sp) ; X=var address 
      000C2A                       2050 	_drop 2 
      000C2A 5B 02            [ 2]    1     addw sp,#2 
      000C2C A6 02            [ 1] 2051 	ld a,#TK_VAR 
      000C2E 20 17            [ 2] 2052 	jra 4$ 
      000C30                       2053 2$: ; check for keyword, otherwise syntax error.
      000C30                       2054 	_ldx_dict kword_dict
      000C30 AE 1D B4         [ 2]    1     ldw x,#kword_dict+2
      000C33 CD 10 F7         [ 4] 2055 	call search_dict
      000C36 4D               [ 1] 2056 	tnz a
      000C37 26 03            [ 1] 2057 	jrne 3$ 
      000C39 CC 06 90         [ 2] 2058 	jp syntax_error
      000C3C A3 15 12         [ 2] 2059 3$: cpw x,#rem  
      000C3F 26 06            [ 1] 2060 	jrne 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C41 55 00 02 00 01   [ 1] 2061 	mov in,count 
      000C46 4F               [ 1] 2062 	clr a 
      000C47 81               [ 4] 2063 4$:	ret  	
                                   2064 
                                   2065 
                                   2066 ;------------------------------------
                                   2067 ; Command line tokenizer
                                   2068 ; scan text for next token
                                   2069 ; move token in 'pad'
                                   2070 ; input: 
      000C48                       2071 	none: 
                                   2072 ; use:
                                   2073 ;	Y   pointer to text
                                   2074 ;   X	pointer to pad 
                                   2075 ;   in.w   index in text buffer
                                   2076 ; output:
                                   2077 ;   A       token attribute 
                                   2078 ;   pad 	token as .asciz
                                   2079 ;   X 		token value   
                                   2080 ;------------------------------------
                                   2081 	; use to check special character 
                                   2082 	.macro _case c t  
                                   2083 	ld a,#c 
                                   2084 	cp a,(TCHAR,sp) 
                                   2085 	jrne t
                                   2086 	.endm 
                                   2087 
                           000001  2088 	TCHAR=1
                           000002  2089 	ATTRIB=2 
                           000002  2090 	VSIZE=2
      000C48                       2091 get_token: ; { -- tokval }
      000C48 72 5D 00 11      [ 1] 2092 	tnz untok 
      000C4C 27 13            [ 1] 2093 	jreq 1$
      000C4E C6 00 11         [ 1] 2094 	ld a,untok
      000C51 72 5F 00 11      [ 1] 2095 	clr untok 
      000C55 CE 00 12         [ 2] 2096 	ldw x,tokval
      000C58 72 5F 00 12      [ 1] 2097 	clr tokval 
      000C5C 72 5F 00 13      [ 1] 2098 	clr tokval+1 
      000C60 81               [ 4] 2099 	ret 
      000C61                       2100 1$:	
      000C61 90 CE 00 03      [ 2] 2101 	ldw y,basicptr   	
      000C65 C6 00 01         [ 1] 2102 	ld a,in 
      000C68 C1 00 02         [ 1] 2103 	cp a,count 
      000C6B 2B 03            [ 1] 2104 	jrmi 11$
      000C6D A6 00            [ 1] 2105 	ld a,#TK_NONE 
      000C6F 81               [ 4] 2106 	ret 
      000C70                       2107 11$:	
      000C70                       2108 	_vars VSIZE
      000C70 52 02            [ 2]    1     sub sp,#VSIZE 
      000C72 AE 17 18         [ 2] 2109 	ldw x, #pad
      000C75 A6 20            [ 1] 2110 	ld a,#SPACE
      000C77 CD 0E FB         [ 4] 2111 	call skip
      000C7A 91 D6 00         [ 4] 2112 	ld a,([in.w],y)
      000C7D 26 07            [ 1] 2113 	jrne str_tst
      000C7F 72 5F 17 18      [ 1] 2114 	clr pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C83 CC 0E 13         [ 2] 2115 	jp token_exit ; end of line 
                                   2116 
      000C86                       2117 str_tst: ; check for quoted string  	
      000C86 CD 0E 2A         [ 4] 2118 	call to_upper 
      000C89 6B 01            [ 1] 2119 	ld (TCHAR,sp),a 
      000C8B                       2120 	_case '"' nbr_tst
      000C8B A6 22            [ 1]    1 	ld a,#'"' 
      000C8D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C8F 26 06            [ 1]    3 	jrne nbr_tst
      000C91 CD 0B 26         [ 4] 2121 	call parse_quote
      000C94 CC 0E 13         [ 2] 2122 	jp token_exit
      000C97                       2123 nbr_tst: ; check for number 
      000C97 A6 24            [ 1] 2124 	ld a,#'$'
      000C99 11 01            [ 1] 2125 	cp a,(TCHAR,sp) 
      000C9B 27 13            [ 1] 2126 	jreq 1$
      000C9D A6 26            [ 1] 2127 	ld a,#'&
      000C9F 11 01            [ 1] 2128 	cp a,(TCHAR,sp)
      000CA1 26 06            [ 1] 2129 	jrne 0$
      000CA3 CD 0B DB         [ 4] 2130 	call parse_binary ; expect binary integer 
      000CA6 CC 0E 13         [ 2] 2131 	jp token_exit 
      000CA9 7B 01            [ 1] 2132 0$:	ld a,(TCHAR,sp)
      000CAB CD 0E 16         [ 4] 2133 	call is_digit
      000CAE 24 06            [ 1] 2134 	jrnc 3$
      000CB0 CD 0B A0         [ 4] 2135 1$:	call parse_integer 
      000CB3 CC 0E 13         [ 2] 2136 	jp token_exit 
      000CB6                       2137 3$: 
      000CB6                       2138 	_case '(' bkslsh_tst 
      000CB6 A6 28            [ 1]    1 	ld a,#'(' 
      000CB8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CBA 26 05            [ 1]    3 	jrne bkslsh_tst
      000CBC A6 04            [ 1] 2139 	ld a,#TK_LPAREN
      000CBE CC 0E 03         [ 2] 2140 	jp token_char   	
      000CC1                       2141 bkslsh_tst:
      000CC1                       2142 	_case '\',rparnt_tst
      000CC1 A6 5C            [ 1]    1 	ld a,#'\' 
      000CC3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CC5 26 18            [ 1]    3 	jrne rparnt_tst
      000CC7 7B 01            [ 1] 2143 	ld a,(TCHAR,sp)
      000CC9 F7               [ 1] 2144 	ld (x),a 
      000CCA 5C               [ 1] 2145 	incw x 
      000CCB 72 5C 00 01      [ 1] 2146 	inc in 
      000CCF 91 D6 00         [ 4] 2147 	ld a,([in.w],y)
      000CD2 F7               [ 1] 2148 	ld (x),a 
      000CD3 5C               [ 1] 2149 	incw x 
      000CD4 72 5C 00 01      [ 1] 2150 	inc in  
      000CD8 7F               [ 1] 2151 	clr (x) 
      000CD9 97               [ 1] 2152 	ld xl,a 
      000CDA A6 0B            [ 1] 2153 	ld a,#TK_CHAR 
      000CDC CC 0E 13         [ 2] 2154 	jp token_exit 
      000CDF                       2155 rparnt_tst:		
      000CDF                       2156 	_case ')' colon_tst 
      000CDF A6 29            [ 1]    1 	ld a,#')' 
      000CE1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CE3 26 05            [ 1]    3 	jrne colon_tst
      000CE5 A6 05            [ 1] 2157 	ld a,#TK_RPAREN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CE7 CC 0E 03         [ 2] 2158 	jp token_char 
      000CEA                       2159 colon_tst:
      000CEA                       2160 	_case ':' comma_tst 
      000CEA A6 3A            [ 1]    1 	ld a,#':' 
      000CEC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CEE 26 05            [ 1]    3 	jrne comma_tst
      000CF0 A6 01            [ 1] 2161 	ld a,#TK_COLON 
      000CF2 CC 0E 03         [ 2] 2162 	jp token_char 
      000CF5                       2163 comma_tst:
      000CF5                       2164 	_case COMMA sharp_tst 
      000CF5 A6 2C            [ 1]    1 	ld a,#COMMA 
      000CF7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CF9 26 05            [ 1]    3 	jrne sharp_tst
      000CFB A6 08            [ 1] 2165 	ld a,#TK_COMMA
      000CFD CC 0E 03         [ 2] 2166 	jp token_char
      000D00                       2167 sharp_tst:
      000D00                       2168 	_case SHARP dash_tst 
      000D00 A6 23            [ 1]    1 	ld a,#SHARP 
      000D02 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D04 26 05            [ 1]    3 	jrne dash_tst
      000D06 A6 09            [ 1] 2169 	ld a,#TK_SHARP
      000D08 CC 0E 03         [ 2] 2170 	jp token_char  	 	 
      000D0B                       2171 dash_tst: 	
      000D0B                       2172 	_case '-' at_tst 
      000D0B A6 2D            [ 1]    1 	ld a,#'-' 
      000D0D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D0F 26 05            [ 1]    3 	jrne at_tst
      000D11 A6 11            [ 1] 2173 	ld a,#TK_MINUS  
      000D13 CC 0E 03         [ 2] 2174 	jp token_char 
      000D16                       2175 at_tst:
      000D16                       2176 	_case '@' qmark_tst 
      000D16 A6 40            [ 1]    1 	ld a,#'@' 
      000D18 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D1A 26 05            [ 1]    3 	jrne qmark_tst
      000D1C A6 03            [ 1] 2177 	ld a,#TK_ARRAY 
      000D1E CC 0E 03         [ 2] 2178 	jp token_char
      000D21                       2179 qmark_tst:
      000D21                       2180 	_case '?' tick_tst 
      000D21 A6 3F            [ 1]    1 	ld a,#'?' 
      000D23 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D25 26 11            [ 1]    3 	jrne tick_tst
      000D27 7B 01            [ 1] 2181 	ld a,(TCHAR,sp)
      000D29 F7               [ 1] 2182 	ld (x),a 
      000D2A 5C               [ 1] 2183 	incw x 
      000D2B 7F               [ 1] 2184 	clr (x)
      000D2C 72 5C 00 01      [ 1] 2185 	inc in 
      000D30 A6 07            [ 1] 2186 	ld a,#TK_CMD 
      000D32 AE 14 01         [ 2] 2187 	ldw x,#print 
      000D35 CC 0E 13         [ 2] 2188 	jp token_exit
      000D38                       2189 tick_tst: ; ignore comment 
      000D38                       2190 	_case TICK plus_tst 
      000D38 A6 27            [ 1]    1 	ld a,#TICK 
      000D3A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3C 26 0E            [ 1]    3 	jrne plus_tst
      000D3E 7B 01            [ 1] 2191 	ld a,(TCHAR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D40 F7               [ 1] 2192 	ld (x),a 
      000D41 5C               [ 1] 2193 	incw x 
      000D42 7F               [ 1] 2194 	clr (x)
      000D43 55 00 02 00 01   [ 1] 2195 	mov in,count  
      000D48 4F               [ 1] 2196 	clr a 
      000D49 CC 0E 13         [ 2] 2197 	jp token_exit 
      000D4C                       2198 plus_tst:
      000D4C                       2199 	_case '+' star_tst 
      000D4C A6 2B            [ 1]    1 	ld a,#'+' 
      000D4E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D50 26 05            [ 1]    3 	jrne star_tst
      000D52 A6 10            [ 1] 2200 	ld a,#TK_PLUS  
      000D54 CC 0E 03         [ 2] 2201 	jp token_char 
      000D57                       2202 star_tst:
      000D57                       2203 	_case '*' slash_tst 
      000D57 A6 2A            [ 1]    1 	ld a,#'*' 
      000D59 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D5B 26 05            [ 1]    3 	jrne slash_tst
      000D5D A6 20            [ 1] 2204 	ld a,#TK_MULT 
      000D5F CC 0E 03         [ 2] 2205 	jp token_char 
      000D62                       2206 slash_tst: 
      000D62                       2207 	_case '/' prcnt_tst 
      000D62 A6 2F            [ 1]    1 	ld a,#'/' 
      000D64 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D66 26 05            [ 1]    3 	jrne prcnt_tst
      000D68 A6 21            [ 1] 2208 	ld a,#TK_DIV 
      000D6A CC 0E 03         [ 2] 2209 	jp token_char 
      000D6D                       2210 prcnt_tst:
      000D6D                       2211 	_case '%' eql_tst 
      000D6D A6 25            [ 1]    1 	ld a,#'%' 
      000D6F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D71 26 05            [ 1]    3 	jrne eql_tst
      000D73 A6 22            [ 1] 2212 	ld a,#TK_MOD
      000D75 CC 0E 03         [ 2] 2213 	jp token_char  
                                   2214 ; 1 or 2 character tokens 	
      000D78                       2215 eql_tst:
      000D78                       2216 	_case '=' gt_tst 		
      000D78 A6 3D            [ 1]    1 	ld a,#'=' 
      000D7A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D7C 26 05            [ 1]    3 	jrne gt_tst
      000D7E A6 32            [ 1] 2217 	ld a,#TK_EQUAL
      000D80 CC 0E 03         [ 2] 2218 	jp token_char 
      000D83                       2219 gt_tst:
      000D83                       2220 	_case '>' lt_tst 
      000D83 A6 3E            [ 1]    1 	ld a,#'>' 
      000D85 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D87 26 33            [ 1]    3 	jrne lt_tst
      000D89 A6 31            [ 1] 2221 	ld a,#TK_GT 
      000D8B 6B 02            [ 1] 2222 	ld (ATTRIB,sp),a 
      000D8D 72 5C 00 01      [ 1] 2223 	inc in 
      000D91 91 D6 00         [ 4] 2224 	ld a,([in.w],y)
      000D94 A1 3D            [ 1] 2225 	cp a,#'=
      000D96 26 0C            [ 1] 2226 	jrne 1$
      000D98 7B 01            [ 1] 2227 	ld a,(TCHAR,sp)
      000D9A F7               [ 1] 2228 	ld (x),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D9B 5C               [ 1] 2229 	incw x 
      000D9C A6 3D            [ 1] 2230 	ld a,#'=
      000D9E 6B 01            [ 1] 2231 	ld (TCHAR,sp),a 
      000DA0 A6 33            [ 1] 2232 	ld a,#TK_GE 
      000DA2 20 5F            [ 2] 2233 	jra token_char  
      000DA4 A1 3C            [ 1] 2234 1$: cp a,#'<
      000DA6 26 0C            [ 1] 2235 	jrne 2$
      000DA8 7B 01            [ 1] 2236 	ld a,(TCHAR,sp)
      000DAA F7               [ 1] 2237 	ld (x),a
      000DAB 5C               [ 1] 2238 	incw x 
      000DAC A6 3C            [ 1] 2239 	ld a,#'<	
      000DAE 6B 01            [ 1] 2240 	ld (TCHAR,sp),a 
      000DB0 A6 35            [ 1] 2241 	ld a,#TK_NE 
      000DB2 20 4F            [ 2] 2242 	jra token_char 
      000DB4 72 5A 00 01      [ 1] 2243 2$: dec in
      000DB8 7B 02            [ 1] 2244 	ld a,(ATTRIB,sp)
      000DBA 20 47            [ 2] 2245 	jra token_char 
      000DBC                       2246 lt_tst:
      000DBC                       2247 	_case '<' other
      000DBC A6 3C            [ 1]    1 	ld a,#'<' 
      000DBE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DC0 26 32            [ 1]    3 	jrne other
      000DC2 A6 34            [ 1] 2248 	ld a,#TK_LT 
      000DC4 6B 02            [ 1] 2249 	ld (ATTRIB,sp),a 
      000DC6 72 5C 00 01      [ 1] 2250 	inc in 
      000DCA 91 D6 00         [ 4] 2251 	ld a,([in.w],y)
      000DCD A1 3D            [ 1] 2252 	cp a,#'=
      000DCF 26 0B            [ 1] 2253 	jrne 1$
      000DD1 7B 01            [ 1] 2254 	ld a,(TCHAR,sp)
      000DD3 F7               [ 1] 2255 	ld (x),a 
      000DD4 A6 3D            [ 1] 2256 	ld a,#'=
      000DD6 6B 01            [ 1] 2257 	ld (TCHAR,sp),a 
      000DD8 A6 36            [ 1] 2258 	ld a,#TK_LE 
      000DDA 20 27            [ 2] 2259 	jra token_char 
      000DDC A1 3E            [ 1] 2260 1$: cp a,#'>
      000DDE 26 0C            [ 1] 2261 	jrne 2$
      000DE0 7B 01            [ 1] 2262 	ld a,(TCHAR,sp)
      000DE2 F7               [ 1] 2263 	ld (x),a 
      000DE3 5C               [ 1] 2264 	incw x 
      000DE4 A6 3E            [ 1] 2265 	ld a,#'>
      000DE6 6B 01            [ 1] 2266 	ld (TCHAR,sp),a 
      000DE8 A6 35            [ 1] 2267 	ld a,#TK_NE 
      000DEA 20 17            [ 2] 2268 	jra token_char 
      000DEC 72 5A 00 01      [ 1] 2269 2$: dec in 
      000DF0 7B 02            [ 1] 2270 	ld a,(ATTRIB,sp)
      000DF2 20 0F            [ 2] 2271 	jra token_char 	
      000DF4                       2272 other: ; not a special character 	 
      000DF4 7B 01            [ 1] 2273 	ld a,(TCHAR,sp)
      000DF6 CD 04 8C         [ 4] 2274 	call is_alpha 
      000DF9 25 03            [ 1] 2275 	jrc 30$ 
      000DFB CC 06 90         [ 2] 2276 	jp syntax_error 
      000DFE                       2277 30$: 
      000DFE CD 0C 03         [ 4] 2278 	call parse_keyword
      000E01 20 10            [ 2] 2279 	jra token_exit 
      000E03                       2280 token_char:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000E03 6B 02            [ 1] 2281 	ld (ATTRIB,sp),a 
      000E05 7B 01            [ 1] 2282 	ld a,(TCHAR,sp)
      000E07 F7               [ 1] 2283 	ld (x),a 
      000E08 5C               [ 1] 2284 	incw x 
      000E09 7F               [ 1] 2285 	clr(x)
      000E0A 72 5C 00 01      [ 1] 2286 	inc in 
      000E0E 7B 02            [ 1] 2287 	ld a,(ATTRIB,sp)
      000E10 AE 17 18         [ 2] 2288 	ldw x,#pad 
      000E13                       2289 token_exit:
      000E13                       2290 	_drop VSIZE 
      000E13 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E15 81               [ 4] 2291 	ret
                                   2292 
                                   2293 
                                   2294 
                                   2295 ;------------------------------------
                                   2296 ; check if character in {'0'..'9'}
                                   2297 ; input:
                                   2298 ;    A  character to test
                                   2299 ; output:
                                   2300 ;    Carry  0 not digit | 1 digit
                                   2301 ;------------------------------------
      000E16                       2302 is_digit:
      000E16 A1 30            [ 1] 2303 	cp a,#'0
      000E18 25 03            [ 1] 2304 	jrc 1$
      000E1A A1 3A            [ 1] 2305     cp a,#'9+1
      000E1C 8C               [ 1] 2306 	ccf 
      000E1D 8C               [ 1] 2307 1$:	ccf 
      000E1E 81               [ 4] 2308     ret
                                   2309 
                                   2310 ;----------------------------------
                                   2311 ; convert to lower case
                                   2312 ; input: 
                                   2313 ;   A 		character to convert
                                   2314 ; output:
                                   2315 ;   A		result 
                                   2316 ;----------------------------------
      000E1F                       2317 to_lower::
      000E1F A1 41            [ 1] 2318 	cp a,#'A
      000E21 25 06            [ 1] 2319 	jrult 9$
      000E23 A1 5A            [ 1] 2320 	cp a,#'Z 
      000E25 22 02            [ 1] 2321 	jrugt 9$
      000E27 AB 20            [ 1] 2322 	add a,#32
      000E29 81               [ 4] 2323 9$: ret
                                   2324 
                                   2325 ;------------------------------------
                                   2326 ; convert alpha to uppercase
                                   2327 ; input:
                                   2328 ;    a  character to convert
                                   2329 ; output:
                                   2330 ;    a  uppercase character
                                   2331 ;------------------------------------
      000E2A                       2332 to_upper::
      000E2A A1 61            [ 1] 2333 	cp a,#'a
      000E2C 2A 01            [ 1] 2334 	jrpl 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E2E 81               [ 4] 2335 0$:	ret
      000E2F A1 7A            [ 1] 2336 1$: cp a,#'z	
      000E31 22 FB            [ 1] 2337 	jrugt 0$
      000E33 A0 20            [ 1] 2338 	sub a,#32
      000E35 81               [ 4] 2339 	ret
                                   2340 	
                                   2341 ;------------------------------------
                                   2342 ; uppercase pad content
                                   2343 ; input:
                                   2344 ;	pad      .asciz 
                                   2345 ; output:
                                   2346 ;   pad      uppercase string 
                                   2347 ;------------------------------------
      000E36                       2348 upper:
      000E36 90 AE 17 18      [ 2] 2349 	ldw y,#pad 
      000E3A                       2350 upper_loop:	
      000E3A 90 F6            [ 1] 2351 	ld a,(y)
      000E3C 27 10            [ 1] 2352 	jreq 4$
      000E3E A1 61            [ 1] 2353 	cp a,#'a 
      000E40 2B 0C            [ 1] 2354 	jrmi 4$
      000E42 A1 7B            [ 1] 2355 	cp a,#'z+1 
      000E44 2A 08            [ 1] 2356 	jrpl 4$ 
      000E46 A0 20            [ 1] 2357 	sub a,#0x20 
      000E48 90 F7            [ 1] 2358 	ld (y),a 
      000E4A 90 5C            [ 1] 2359 	incw y 
      000E4C 20 EC            [ 2] 2360 	jra upper_loop
      000E4E 81               [ 4] 2361 4$: ret 
                                   2362 
                                   2363 ;------------------------------------
                                   2364 ; convert pad content in integer
                                   2365 ; input:
                                   2366 ;    pad		.asciz to convert
                                   2367 ; output:
                                   2368 ;    acc24      int24_t
                                   2369 ;------------------------------------
                                   2370 	; local variables
                           000001  2371 	SIGN=1 ; 1 byte, 
                           000002  2372 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2373 	TEMP=3 ; 1 byte, temporary storage
                           000003  2374 	VSIZE=3 ; 3 bytes reserved for local storage
      000E4F                       2375 atoi:
      000E4F 89               [ 2] 2376 	pushw x ;save x
      000E50 52 03            [ 2] 2377 	sub sp,#VSIZE
                                   2378 	; acc24=0 
      000E52 72 5F 00 08      [ 1] 2379 	clr acc24    
      000E56 72 5F 00 09      [ 1] 2380 	clr acc16
      000E5A 72 5F 00 0A      [ 1] 2381 	clr acc8 
      000E5E C6 17 18         [ 1] 2382 	ld a, pad 
      000E61 27 5A            [ 1] 2383 	jreq atoi_exit
      000E63 0F 01            [ 1] 2384 	clr (SIGN,sp)
      000E65 A6 0A            [ 1] 2385 	ld a,#10
      000E67 6B 02            [ 1] 2386 	ld (BASE,sp),a ; default base decimal
      000E69 AE 17 18         [ 2] 2387 	ldw x,#pad ; pointer to string to convert
      000E6C F6               [ 1] 2388 	ld a,(x)
      000E6D 27 47            [ 1] 2389 	jreq 9$  ; completed if 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E6F A1 2D            [ 1] 2390 	cp a,#'-
      000E71 26 04            [ 1] 2391 	jrne 1$
      000E73 03 01            [ 1] 2392 	cpl (SIGN,sp)
      000E75 20 08            [ 2] 2393 	jra 2$
      000E77 A1 24            [ 1] 2394 1$: cp a,#'$
      000E79 26 06            [ 1] 2395 	jrne 3$
      000E7B A6 10            [ 1] 2396 	ld a,#16
      000E7D 6B 02            [ 1] 2397 	ld (BASE,sp),a
      000E7F 5C               [ 1] 2398 2$:	incw x
      000E80 F6               [ 1] 2399 	ld a,(x)
      000E81                       2400 3$:	
      000E81 A1 61            [ 1] 2401 	cp a,#'a
      000E83 2B 02            [ 1] 2402 	jrmi 4$
      000E85 A0 20            [ 1] 2403 	sub a,#32
      000E87 A1 30            [ 1] 2404 4$:	cp a,#'0
      000E89 2B 2B            [ 1] 2405 	jrmi 9$
      000E8B A0 30            [ 1] 2406 	sub a,#'0
      000E8D A1 0A            [ 1] 2407 	cp a,#10
      000E8F 2B 06            [ 1] 2408 	jrmi 5$
      000E91 A0 07            [ 1] 2409 	sub a,#7
      000E93 11 02            [ 1] 2410 	cp a,(BASE,sp)
      000E95 2A 1F            [ 1] 2411 	jrpl 9$
      000E97 6B 03            [ 1] 2412 5$:	ld (TEMP,sp),a
      000E99 7B 02            [ 1] 2413 	ld a,(BASE,sp)
      000E9B CD 0E C1         [ 4] 2414 	call mulu24_8
      000E9E 7B 03            [ 1] 2415 	ld a,(TEMP,sp)
      000EA0 CB 00 0A         [ 1] 2416 	add a,acc24+2
      000EA3 C7 00 0A         [ 1] 2417 	ld acc24+2,a
      000EA6 4F               [ 1] 2418 	clr a
      000EA7 C9 00 09         [ 1] 2419 	adc a,acc24+1
      000EAA C7 00 09         [ 1] 2420 	ld acc24+1,a
      000EAD 4F               [ 1] 2421 	clr a
      000EAE C9 00 08         [ 1] 2422 	adc a,acc24
      000EB1 C7 00 08         [ 1] 2423 	ld acc24,a
      000EB4 20 C9            [ 2] 2424 	jra 2$
      000EB6 0D 01            [ 1] 2425 9$:	tnz (SIGN,sp)
      000EB8 27 03            [ 1] 2426     jreq atoi_exit
      000EBA CD 09 89         [ 4] 2427     call neg_acc24
      000EBD                       2428 atoi_exit: 
      000EBD 5B 03            [ 2] 2429 	addw sp,#VSIZE
      000EBF 85               [ 2] 2430 	popw x ; restore x
      000EC0 81               [ 4] 2431 	ret
                                   2432 
                                   2433 ;--------------------------------------
                                   2434 ; unsigned multiply uint24_t by uint8_t
                                   2435 ; use to convert numerical string to uint24_t
                                   2436 ; input:
                                   2437 ;	acc24	uint24_t 
                                   2438 ;   A		uint8_t
                                   2439 ; output:
                                   2440 ;   acc24   A*acc24
                                   2441 ;-------------------------------------
                                   2442 ; local variables offset  on sp
                           000003  2443 	U8   = 3   ; A pushed on stack
                           000002  2444 	OVFL = 2  ; multiplicaton overflow low byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                           000001  2445 	OVFH = 1  ; multiplication overflow high byte
                           000003  2446 	VSIZE = 3
      000EC1                       2447 mulu24_8:
      000EC1 89               [ 2] 2448 	pushw x    ; save X
                                   2449 	; local variables
      000EC2 88               [ 1] 2450 	push a     ; U8
      000EC3 5F               [ 1] 2451 	clrw x     ; initialize overflow to 0
      000EC4 89               [ 2] 2452 	pushw x    ; multiplication overflow
                                   2453 ; multiply low byte.
      000EC5 C6 00 0A         [ 1] 2454 	ld a,acc24+2
      000EC8 97               [ 1] 2455 	ld xl,a
      000EC9 7B 03            [ 1] 2456 	ld a,(U8,sp)
      000ECB 42               [ 4] 2457 	mul x,a
      000ECC 9F               [ 1] 2458 	ld a,xl
      000ECD C7 00 0A         [ 1] 2459 	ld acc24+2,a
      000ED0 9E               [ 1] 2460 	ld a, xh
      000ED1 6B 02            [ 1] 2461 	ld (OVFL,sp),a
                                   2462 ; multipy middle byte
      000ED3 C6 00 09         [ 1] 2463 	ld a,acc24+1
      000ED6 97               [ 1] 2464 	ld xl,a
      000ED7 7B 03            [ 1] 2465 	ld a, (U8,sp)
      000ED9 42               [ 4] 2466 	mul x,a
                                   2467 ; add overflow to this partial product
      000EDA 72 FB 01         [ 2] 2468 	addw x,(OVFH,sp)
      000EDD 9F               [ 1] 2469 	ld a,xl
      000EDE C7 00 09         [ 1] 2470 	ld acc24+1,a
      000EE1 4F               [ 1] 2471 	clr a
      000EE2 A9 00            [ 1] 2472 	adc a,#0
      000EE4 6B 01            [ 1] 2473 	ld (OVFH,sp),a
      000EE6 9E               [ 1] 2474 	ld a,xh
      000EE7 6B 02            [ 1] 2475 	ld (OVFL,sp),a
                                   2476 ; multiply most signficant byte	
      000EE9 C6 00 08         [ 1] 2477 	ld a, acc24
      000EEC 97               [ 1] 2478 	ld xl, a
      000EED 7B 03            [ 1] 2479 	ld a, (U8,sp)
      000EEF 42               [ 4] 2480 	mul x,a
      000EF0 72 FB 01         [ 2] 2481 	addw x, (OVFH,sp)
      000EF3 9F               [ 1] 2482 	ld a, xl
      000EF4 C7 00 08         [ 1] 2483 	ld acc24,a
      000EF7 5B 03            [ 2] 2484     addw sp,#VSIZE
      000EF9 85               [ 2] 2485 	popw x
      000EFA 81               [ 4] 2486 	ret
                                   2487 
                                   2488 ;------------------------------------
                                   2489 ; skip character c in text starting from 'in'
                                   2490 ; input:
                                   2491 ;	 y 		point to text buffer
                                   2492 ;    a 		character to skip
                                   2493 ; output:  
                                   2494 ;	'in' ajusted to new position
                                   2495 ;------------------------------------
                           000001  2496 	C = 1 ; local var
      000EFB                       2497 skip:
      000EFB 88               [ 1] 2498 	push a
      000EFC 91 D6 00         [ 4] 2499 1$:	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000EFF 27 0A            [ 1] 2500 	jreq 2$
      000F01 11 01            [ 1] 2501 	cp a,(C,sp)
      000F03 26 06            [ 1] 2502 	jrne 2$
      000F05 72 5C 00 01      [ 1] 2503 	inc in
      000F09 20 F1            [ 2] 2504 	jra 1$
      000F0B                       2505 2$: _drop 1 
      000F0B 5B 01            [ 2]    1     addw sp,#1 
      000F0D 81               [ 4] 2506 	ret
                                   2507 
                                   2508 ;******************************
                                   2509 
                                   2510 ;----------------------	
                                   2511 ; push X on data stack 
                                   2512 ; input:
                                   2513 ;	X 
                                   2514 ; output:
                                   2515 ;	none 
                                   2516 ;----------------------	
      000F0E                       2517 dpush:
      000F0E                       2518     _dp_down
      000F0E 72 5A 00 1B      [ 1]    1     dec dstkptr+1 
      000F12 72 5A 00 1B      [ 1]    2     dec dstkptr+1
      000F16 72 CF 00 1A      [ 5] 2519     ldw [dstkptr],x  
      000F1A 81               [ 4] 2520 	ret 
                                   2521 
                                   2522 
                                   2523 ;----------------------	
                                   2524 ; pop data stack in X 
                                   2525 ; input:
                                   2526 ;	none
                                   2527 ; output:
                                   2528 ;	X   
                                   2529 ;----------------------	
      000F1B                       2530 dpop: 
      000F1B 72 CE 00 1A      [ 5] 2531     ldw x, [dstkptr]
      000F1F                       2532 	_dp_up
      000F1F 72 5C 00 1B      [ 1]    1     inc dstkptr+1
      000F23 72 5C 00 1B      [ 1]    2     inc dstkptr+1
      000F27 81               [ 4] 2533 	ret 
                                   2534 
                                   2535 ;-----------------------------
                                   2536 ; swap top 2 elements of dstack
                                   2537 ;  {n1 n2 -- n2 n1 }
                                   2538 ;-----------------------------
      000F28                       2539 dswap:
      000F28 72 CE 00 1A      [ 5] 2540 	ldw x,[dstkptr]
      000F2C 89               [ 2] 2541 	pushw x 
      000F2D AE 00 02         [ 2] 2542 	ldw x,#2 
      000F30 72 DE 00 1A      [ 5] 2543 	ldw x,([dstkptr],x) 
      000F34 72 CF 00 1A      [ 5] 2544 	ldw [dstkptr],x 
      000F38 AE 00 02         [ 2] 2545 	ldw x,#2
      000F3B 90 85            [ 2] 2546 	popw y 
      000F3D 72 DF 00 1A      [ 5] 2547 	ldw ([dstkptr],x),y 
      000F41 81               [ 4] 2548 	ret
                                   2549 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2550 ;-----------------------------
                                   2551 ; drop TOS 
                                   2552 ;-----------------------------
      000F42                       2553 ddrop: ; { n -- }
      000F42                       2554 	_dp_up 
      000F42 72 5C 00 1B      [ 1]    1     inc dstkptr+1
      000F46 72 5C 00 1B      [ 1]    2     inc dstkptr+1
      000F4A 81               [ 4] 2555 	ret
                                   2556 	
                                   2557 ;-----------------------------
                                   2558 ; duplicate TOS 
                                   2559 ;  dstack: { ix...n -- ix...n n }
                                   2560 ;-----------------------------
      000F4B                       2561 ddup:
      000F4B 72 CE 00 1A      [ 5] 2562 	ldw x,[dstkptr]
      000F4F                       2563 	_dp_down
      000F4F 72 5A 00 1B      [ 1]    1     dec dstkptr+1 
      000F53 72 5A 00 1B      [ 1]    2     dec dstkptr+1
      000F57 72 CF 00 1A      [ 5] 2564     ldw [dstkptr],x  
      000F5B 81               [ 4] 2565 	ret 
                                   2566 
                                   2567 
                                   2568 ;----------------------------------
                                   2569 ; pick value n from dstack 
                                   2570 ; put it on TOS
                                   2571 ; dstack: {ix,..,p -- ix,...,np }
                                   2572 ;-----------------------------------
      000F5C                       2573 dpick:
      000F5C 72 CE 00 1A      [ 5] 2574 	ldw x,[dstkptr]
      000F60 58               [ 2] 2575 	sllw x 
      000F61 72 BB 00 1A      [ 2] 2576 	addw x,dstkptr 
      000F65 FE               [ 2] 2577 	ldw x,(x)
      000F66 72 CF 00 1A      [ 5] 2578 	ldw [dstkptr],x 
      000F6A 81               [ 4] 2579 	ret
                                   2580 
                                   2581 ;---------------------------
                                   2582 ;  fetch variable in X 
                                   2583 ;  dstack:{ addr -- value }
                                   2584 ;---------------------------
      000F6B                       2585 fetch:
      000F6B 72 CE 00 1A      [ 5] 2586 	ldw x,[dstkptr]
      000F6F FE               [ 2] 2587 	ldw x,(x)
      000F70 72 CF 00 1A      [ 5] 2588 	ldw [dstkptr],x
      000F74 81               [ 4] 2589 	ret 
                                   2590 
                                   2591 ;----------------------------
                                   2592 ; store variable 
                                   2593 ; dstack: {addr value -- }
                                   2594 ;----------------------------
      000F75                       2595 store:
      000F75 CD 0F 1B         [ 4] 2596 	call dpop 
      000F78 90 93            [ 1] 2597 	ldw y,x   ; y=value 
      000F7A CD 0F 1B         [ 4] 2598 	call dpop 
      000F7D FF               [ 2] 2599 	ldw (x),y 
      000F7E 81               [ 4] 2600 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2601 
                                   2602 ;----------------------------
                                   2603 ; print TOS 
                                   2604 ; dstack: {n -- }
                                   2605 ;----------------------------
      000F7F                       2606 prt_tos:
      000F7F CD 0F 1B         [ 4] 2607 	call dpop 
      000F82 CF 00 09         [ 2] 2608 	ldw acc16,x
      000F85 72 5F 00 08      [ 1] 2609 	clr acc24 
      000F89 72 0F 00 09 04   [ 2] 2610 	btjf acc16,#7,1$
      000F8E 72 53 00 08      [ 1] 2611 	cpl acc24 
      000F92 C6 00 26         [ 1] 2612 1$:	ld a,tab_width 
      000F95 5F               [ 1] 2613 	clrw x 
      000F96 97               [ 1] 2614 	ld xl,a 
      000F97 C6 00 07         [ 1] 2615 	ld a,base 
      000F9A CD 08 C5         [ 4] 2616 	call prti24
      000F9D 81               [ 4] 2617 	ret 
                                   2618 
                                   2619 ;------------------------------
                                   2620 ; put A in untok, pop TOS put it in tokval
                                   2621 ; dstack { n -- }
                                   2622 ; input:
                                   2623 ;   A     token_attribute 
                                   2624 ;   TOS   token value 
                                   2625 ; output:
                                   2626 ;   untok    A 
                                   2627 ;   tokval   n 
                                   2628 ;------------------------------
      000F9E                       2629 unget_token:
      000F9E AE 17 18         [ 2] 2630 	ldw x,#pad
      000FA1 CD 03 06         [ 4] 2631 	call strlen 
      000FA4 9F               [ 1] 2632 	ld a,xl 
      000FA5 C7 00 0A         [ 1] 2633 	ld acc8,a
      000FA8 C6 00 01         [ 1] 2634 	ld a,in 
      000FAB C0 00 0A         [ 1] 2635 	sub a,acc8 
      000FAE C7 00 01         [ 1] 2636 	ld in,a  
                                   2637 ;	ld untok,a 
                                   2638 ;	ldw tokval,x 
      000FB1 81               [ 4] 2639 	ret 
                                   2640 
                                   2641 
                                   2642 
                           000001  2643 .if DEBUG 
      000FB2 0A 64 73 74 61 63 6B  2644 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2645 ;----------------------------
                                   2646 ; print dstack content 
                                   2647 ;---------------------------
                           000001  2648 	XSAVE=1
                           000002  2649 	VSIZE=2
      000FBC                       2650 dots:
      000FBC                       2651 	_vars VSIZE 
      000FBC 52 02            [ 2]    1     sub sp,#VSIZE 
      000FBE AE 0F B2         [ 2] 2652 	ldw x,#dstk_prompt 
      000FC1 CD 02 30         [ 4] 2653 	call puts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FC4 AE 17 7E         [ 2] 2654 	ldw x,#dstack_unf-CELL_SIZE 
      000FC7 C3 00 1A         [ 2] 2655 1$:	cpw x,dstkptr 
      000FCA 25 17            [ 1] 2656 	jrult 4$ 
      000FCC 1F 01            [ 2] 2657 	ldw (XSAVE,sp),x
      000FCE FE               [ 2] 2658 	ldw  x,(x)
      000FCF CF 00 09         [ 2] 2659 	ldw acc16,x 
      000FD2 72 5F 00 08      [ 1] 2660 	clr acc24 
      000FD6 5F               [ 1] 2661 	clrw x 
      000FD7 A6 8A            [ 1] 2662 	ld a,#10+128
      000FD9 CD 08 C5         [ 4] 2663 	call prti24 
      000FDC 1E 01            [ 2] 2664 	ldw x,(XSAVE,sp)
      000FDE 1D 00 02         [ 2] 2665 	subw x,#CELL_SIZE 
      000FE1 20 E4            [ 2] 2666 	jra 1$ 
      000FE3 A6 0D            [ 1] 2667 4$: ld a,#CR 
      000FE5 CD 02 1E         [ 4] 2668 	call putc 
      000FE8                       2669 	_drop VSIZE
      000FE8 5B 02            [ 2]    1     addw sp,#VSIZE 
      000FEA 4F               [ 1] 2670 	clr a 
      000FEB 81               [ 4] 2671 	ret
                                   2672 .endif 
                                   2673 
      000FEC 0A 63 74 61 63 6B 3A  2674 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2675 ;--------------------------------
                                   2676 ; print cstack content
                                   2677 ;--------------------------------
      000FF5                       2678 dotr:
      000FF5 AE 0F EC         [ 2] 2679 	ldw x,#cstk_prompt
      000FF8 CD 02 30         [ 4] 2680 	call puts 
      000FFB 96               [ 1] 2681 	ldw x,sp 
      000FFC 5C               [ 1] 2682 	incw x 
      000FFD CD 0F 0E         [ 4] 2683 	call dpush 
      001000 AE 17 FE         [ 2] 2684 	ldw x,#RAM_SIZE-2
      001003                       2685 dotr_loop:
      001003 CD 0F 0E         [ 4] 2686 	call dpush  
      001006 FE               [ 2] 2687 	ldw x,(x)
      001007 CF 00 09         [ 2] 2688 	ldw acc16,x 
      00100A 72 5F 00 08      [ 1] 2689 	clr acc24 
      00100E 5F               [ 1] 2690 	clrw x 
      00100F A6 90            [ 1] 2691 	ld a,#16+128
      001011 CD 08 C5         [ 4] 2692 	call prti24 
      001014 CD 0F 1B         [ 4] 2693 	call dpop 
      001017 1D 00 02         [ 2] 2694 	subw x,#CELL_SIZE
      00101A 72 C3 00 1A      [ 4] 2695 	cpw x,[dstkptr]
      00101E 2A E3            [ 1] 2696 	jrpl dotr_loop 
      001020 AE 00 01         [ 2] 2697 	ldw x,#1
      001023 CD 10 E0         [ 4] 2698 	call ddrop_n 
      001026 A6 0D            [ 1] 2699 	ld a,#CR 
      001028 CD 02 1E         [ 4] 2700 	call putc 
      00102B 4F               [ 1] 2701 	clr a
      00102C 81               [ 4] 2702 	ret
                                   2703 
                                   2704 
                                   2705 ;--------------------------------
                                   2706 ; BASIC: SHOW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2707 ;  show content of dstack,cstack
                                   2708 ;--------------------------------
      00102D                       2709 show:
      00102D CD 0F BC         [ 4] 2710 	call dots
      001030 CD 0F F5         [ 4] 2711 	call dotr 
      001033 4F               [ 1] 2712 	clr a 
      001034 81               [ 4] 2713 	ret
                                   2714 
                                   2715 
                                   2716 ;--------------------------------
                                   2717 ;  add 2 integers
                                   2718 ;  input:
                                   2719 ;    N1     on cstack 
                                   2720 ;    N2     on cstack 
                                   2721 ;  output:
                                   2722 ;    X 		n2+n1 
                                   2723 ;--------------------------------
                                   2724 	;arugments on cstack 
      001035                       2725 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001035                       2726 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001035                       2727 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001035                       2728 add:
      001035 1E 05            [ 2] 2729 	ldw x ,(N2,sp)
      001037 72 FB 03         [ 2] 2730 	addw x,(N1,sp)
      00103A 1F 03            [ 2] 2731 	ldw (N1,sp),x 
      00103C 81               [ 4] 2732 	ret 
                                   2733 
                                   2734 ;--------------------------------
                                   2735 ;  substract 2 ntegers
                                   2736 ;  input:
                                   2737 ;    N1     on cstack 
                                   2738 ;    N2     on cstack 
                                   2739 ;  output:
                                   2740 ;    X 		n2+n1 
                                   2741 ;--------------------------------
      00103D                       2742 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00103D                       2743 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      00103D                       2744 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00103D                       2745 substract:
      00103D 1E 05            [ 2] 2746 	ldw x,(N2,sp)
      00103F 72 F0 03         [ 2] 2747 	subw x,(N1,sp)
      001042 81               [ 4] 2748 	ret 
                                   2749 
                                   2750 ;-------------------------------------
                                   2751 ; multiply 2 integers
                                   2752 ; product overflow is ignored unless
                                   2753 ; MATH_OVF assembler flag is set to 1
                                   2754 ; input:
                                   2755 ;  	N1      on cstack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2756 ;   N2 		on cstack 
                                   2757 ; output:
                                   2758 ;	X        N1*N2 
                                   2759 ;-------------------------------------
                                   2760 	;arguments 
      001043                       2761 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      001043                       2762 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      001043                       2763 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      001043                       2764 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      001043                       2765 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2766    ; local variables 
                           000001  2767 	SIGN=1
                           000002  2768 	PROD=2
                           000003  2769 	VSIZE=3
      001043                       2770 multiply:
      001043                       2771 	_vars VSIZE 
      001043 52 03            [ 2]    1     sub sp,#VSIZE 
      001045 0F 01            [ 1] 2772 	clr (SIGN,sp)
      001047 1E 06            [ 2] 2773 	ldw x,(N1_HB,sp)
      001049 9E               [ 1] 2774 	ld a,xh  
      00104A A5 80            [ 1] 2775 	bcp a,#0x80 
      00104C 27 05            [ 1] 2776 	jreq 2$
      00104E 03 01            [ 1] 2777 	cpl (SIGN,sp)
      001050 50               [ 2] 2778 	negw x 
      001051 1F 06            [ 2] 2779 	ldw (N1_HB,sp),x 
      001053 1E 08            [ 2] 2780 2$: ldw x,(N2_HB,sp)
      001055 9E               [ 1] 2781 	ld a,xh  
      001056 A5 80            [ 1] 2782 	bcp a,#0x80 
      001058 27 05            [ 1] 2783 	jreq 3$
      00105A 03 01            [ 1] 2784 	cpl (SIGN,sp)
      00105C 50               [ 2] 2785 	negw x 
      00105D 1F 08            [ 2] 2786 	ldw (N2_HB,sp),x 
                                   2787 ; N1_LB * N2_LB 	
      00105F 7B 07            [ 1] 2788 3$:	ld a,(N1_LB,sp)
      001061 97               [ 1] 2789 	ld xl,a 
      001062 7B 09            [ 1] 2790 	ld a,(N2_LB,sp) 
      001064 42               [ 4] 2791 	mul x,a 
                           000000  2792 .if MATH_OVF 	
                                   2793 	ld a,xh 
                                   2794 	bcp a,#0x80 
                                   2795 	jreq 4$ 
                                   2796 	ld a,#ERR_MATH_OVF 
                                   2797 	jp tb_error
                                   2798 .endif 	 
      001065 1F 02            [ 2] 2799 4$:	ldw (PROD,sp),x
                                   2800 ; N1_LB * N2_HB	 
      001067 7B 07            [ 1] 2801 	ld a,(N1_LB,sp) 
      001069 97               [ 1] 2802 	ld xl,a 
      00106A 7B 08            [ 1] 2803 	ld a,(N2_HB,sp)
      00106C 42               [ 4] 2804 	mul x,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      00106D 9F               [ 1] 2805 	ld a,xl 
      00106E 1B 02            [ 1] 2806 	add a,(PROD,sp)
                           000000  2807 .if MATH_OVF 	
                                   2808 	bcp a,#0x80 
                                   2809 	jreq 5$ 
                                   2810 	ld a,#ERR_MATH_OVF 
                                   2811 	jp tb_error
                                   2812 .endif 	 
      001070 6B 02            [ 1] 2813 5$:	ld (PROD,sp),a 
                                   2814 ; N1_HB * N2_LB 
      001072 7B 06            [ 1] 2815 	ld a,(N1_HB,sp)
      001074 97               [ 1] 2816 	ld xl,a 
      001075 7B 09            [ 1] 2817 	ld a,(N2_LB,sp)
      001077 42               [ 4] 2818 	mul x,a 
      001078 9F               [ 1] 2819 	ld a,xl 
      001079 1B 02            [ 1] 2820 	add a,(PROD,sp)
                           000000  2821 .if MATH_OVF 	
                                   2822 	bcp a,#0x80 
                                   2823 	jreq 6$ 
                                   2824 	ld a,#ERR_MATH_OVF 
                                   2825 	jp tb_error
                                   2826 .endif 	 
      00107B 6B 02            [ 1] 2827 6$:	ld (PROD,sp),a 
                                   2828 ; N1_HB * N2_HB 	
                                   2829 ; it is pointless to multiply N1_HB*N2_HB 
                                   2830 ; as this product is over 65535 or 0 
                                   2831 ;
                                   2832 ; sign adjust product
      00107D 0D 01            [ 1] 2833 	tnz (SIGN,sp)
      00107F 27 05            [ 1] 2834 	jreq 7$
      001081 1E 02            [ 2] 2835 	ldw x, (PROD,sp)
      001083 50               [ 2] 2836 	negw x
      001084 1F 02            [ 2] 2837 	ldw (PROD,sp),x  
      001086                       2838 7$: 
      001086 1E 02            [ 2] 2839 	ldw x,(PROD,sp) 
      001088                       2840 	_drop VSIZE 
      001088 5B 03            [ 2]    1     addw sp,#VSIZE 
      00108A 81               [ 4] 2841 	ret
                                   2842 
                                   2843 ;----------------------------------
                                   2844 ;  euclidian divide n2/n1 
                                   2845 ; input:
                                   2846 ;    N2 	on cstack
                                   2847 ;    N1 	on cstack
                                   2848 ; output:
                                   2849 ;    X      n2/n1 
                                   2850 ;    Y      remainder 
                                   2851 ;----------------------------------
      00108B                       2852 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      00108B                       2853 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      00108B                       2854 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2855 	; local variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                           000001  2856 	SQUOT=1 ; sign quotient
                           000002  2857 	SDIVD=2 ; sign dividend  
                           000002  2858 	VSIZE=2
      00108B                       2859 divide:
      00108B                       2860 	_vars VSIZE 
      00108B 52 02            [ 2]    1     sub sp,#VSIZE 
      00108D 0F 01            [ 1] 2861 	clr (SQUOT,sp)
      00108F 0F 02            [ 1] 2862 	clr (SDIVD,sp)
                                   2863 ; check for 0 divisor
      001091 1E 05            [ 2] 2864 	ldw x,(DIVISR,sp)
      001093 5D               [ 2] 2865 	tnzw x 
      001094 26 05            [ 1] 2866     jrne 0$
      001096 A6 04            [ 1] 2867 	ld a,#ERR_DIV0 
      001098 CC 06 92         [ 2] 2868 	jp tb_error 
                                   2869 ; check divisor sign 	
      00109B 9E               [ 1] 2870 0$:	ld a,xh 
      00109C A5 80            [ 1] 2871 	bcp a,#0x80 
      00109E 27 03            [ 1] 2872 	jreq 1$
      0010A0 03 01            [ 1] 2873 	cpl (SQUOT,sp)
      0010A2 50               [ 2] 2874 	negw x 
      0010A3 1F 05            [ 2] 2875 1$:	ldw (DIVISR,sp),x
                                   2876 ; check dividend sign 	 
      0010A5 1E 07            [ 2] 2877     ldw x,(DIVIDND,sp)
      0010A7 9E               [ 1] 2878 	ld a,xh 
      0010A8 A5 80            [ 1] 2879 	bcp a,#0x80 
      0010AA 27 05            [ 1] 2880 	jreq 2$ 
      0010AC 03 01            [ 1] 2881 	cpl (SQUOT,sp)
      0010AE 03 02            [ 1] 2882 	cpl (SDIVD,sp)
      0010B0 50               [ 2] 2883 	negw x 
      0010B1 16 05            [ 2] 2884 2$:	ldw y,(DIVISR,sp)
      0010B3 65               [ 2] 2885 	divw x,y
      0010B4 90 CF 00 09      [ 2] 2886 	ldw acc16,y 
                                   2887 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      0010B8 0D 02            [ 1] 2888 	tnz (SDIVD,sp)
      0010BA 27 0B            [ 1] 2889 	jreq 7$
      0010BC 90 5D            [ 2] 2890 	tnzw y 
      0010BE 27 07            [ 1] 2891 	jreq 7$
      0010C0 5C               [ 1] 2892 	incw x
      0010C1 16 05            [ 2] 2893 	ldw y,(DIVISR,sp)
      0010C3 72 B2 00 09      [ 2] 2894 	subw y,acc16
      0010C7 0D 01            [ 1] 2895 7$: tnz (SQUOT,sp)
      0010C9 27 01            [ 1] 2896 	jreq 9$ 	 
      0010CB 50               [ 2] 2897 8$:	negw x 
      0010CC                       2898 9$: 
      0010CC                       2899 	_drop VSIZE 
      0010CC 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010CE 81               [ 4] 2900 	ret 
                                   2901 
                                   2902 
                                   2903 ;----------------------------------
                                   2904 ;  remainder resulting from euclidian 
                                   2905 ;  division of n2/n1 
                                   2906 ; input:
                                   2907 ;   N1 		cstack 
                                   2908 ;   N2      cstack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2909 ; output:
                                   2910 ;   X       N2%N1 
                                   2911 ;----------------------------------
                                   2912 	
                           000003  2913 	N1=3
                           000005  2914 	N2=5
                           000004  2915 	VSIZE=4
      0010CF                       2916 modulo:
      0010CF 1E 03            [ 2] 2917 	Ldw x,(N1,sp)
      0010D1 16 05            [ 2] 2918 	ldw y,(N2,sp)
      0010D3                       2919 	_vars VSIZE 
      0010D3 52 04            [ 2]    1     sub sp,#VSIZE 
      0010D5 1F 01            [ 2] 2920 	ldw (1,sp),x 
      0010D7 17 03            [ 2] 2921 	ldw (3,sp),y 
      0010D9 CD 10 8B         [ 4] 2922 	call divide 
      0010DC 93               [ 1] 2923 	ldw x,y
      0010DD                       2924 	_drop VSIZE 
      0010DD 5B 04            [ 2]    1     addw sp,#VSIZE 
      0010DF 81               [ 4] 2925 	ret 
                                   2926 
                                   2927 ;---------------------------------
                                   2928 ; drop n elements from data stack 
                                   2929 ; input: 
                                   2930 ;   X 		n 
                                   2931 ; output:
                                   2932 ;   none 
                                   2933 ;-------------------------------------
      0010E0                       2934 ddrop_n:
      0010E0 90 89            [ 2] 2935 	pushw y 
      0010E2 90 CE 00 1A      [ 2] 2936 	ldw y,dstkptr 
      0010E6 58               [ 2] 2937 	sllw x 
      0010E7 89               [ 2] 2938 	pushw x 
      0010E8 72 F9 01         [ 2] 2939 	addw y,(1,sp)
      0010EB 90 CF 00 1A      [ 2] 2940 	ldw dstkptr,y 
      0010EF 85               [ 2] 2941 	popw x 
      0010F0 90 85            [ 2] 2942 	popw y
      0010F2 81               [ 4] 2943 	ret 
                                   2944 
                                   2945 ;---------------------------------
                                   2946 ; execute procedure which address
                                   2947 ; is at TOS 
                                   2948 ; --------------------------------
      0010F3                       2949 execute: ; { addr -- ? }
      0010F3 CD 0F 1B         [ 4] 2950 	call dpop
      0010F6 FC               [ 2] 2951 	jp (x)
                                   2952 
                                   2953 
                                   2954 ;---------------------------------
                                   2955 ; input:
                                   2956 ;	X 		dictionary entry point 
                                   2957 ;  pad		.asciz name to search 
                                   2958 ; output:
                                   2959 ;  A 		TK_CMD|TK_FUNC|TK_NONE 
                                   2960 ;  X		execution address | 0 
                                   2961 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                           000001  2962 	NLEN=1 ; cmd length 
                           000002  2963 	YSAVE=2
                           000003  2964 	VSIZE=3 
      0010F7                       2965 search_dict:
      0010F7                       2966 	_vars VSIZE 
      0010F7 52 03            [ 2]    1     sub sp,#VSIZE 
      0010F9 90 93            [ 1] 2967 	ldw y,x 
      0010FB                       2968 search_next:	
      0010FB 90 F6            [ 1] 2969 	ld a,(y)
      0010FD A4 7F            [ 1] 2970 	and a,#0x7f 
      0010FF 6B 01            [ 1] 2971 	ld (NLEN,sp),a  
      001101 AE 17 18         [ 2] 2972 	ldw x,#pad 
      001104 17 02            [ 2] 2973 	ldw (YSAVE,sp),y
      001106 90 5C            [ 1] 2974 	incw y  
      001108                       2975 cp_loop:
      001108 F6               [ 1] 2976 	ld a,(x)
      001109 27 1E            [ 1] 2977 	jreq str_match 
      00110B 0D 01            [ 1] 2978 	tnz (NLEN,sp)
      00110D 27 0B            [ 1] 2979 	jreq no_match  
      00110F 90 F1            [ 1] 2980 	cp a,(y)
      001111 26 07            [ 1] 2981 	jrne no_match 
      001113 90 5C            [ 1] 2982 	incw y 
      001115 5C               [ 1] 2983 	incw x
      001116 0A 01            [ 1] 2984 	dec (NLEN,sp)
      001118 20 EE            [ 2] 2985 	jra cp_loop 
      00111A                       2986 no_match:
      00111A 16 02            [ 2] 2987 	ldw y,(YSAVE,sp) 
      00111C 72 A2 00 02      [ 2] 2988 	subw y,#2 ; move Y to link field
      001120 4B 00            [ 1] 2989 	push #TK_NONE 
      001122 90 FE            [ 2] 2990 	ldw y,(y) ; next word link 
      001124 84               [ 1] 2991 	pop a ; TK_NONE 
      001125 27 24            [ 1] 2992 	jreq search_exit  ; not found  
                                   2993 ;try next 
      001127 20 D2            [ 2] 2994 	jra search_next
      001129                       2995 str_match:
      001129 16 02            [ 2] 2996 	ldw y,(YSAVE,sp)
      00112B 90 F6            [ 1] 2997 	ld a,(y)
      00112D 6B 01            [ 1] 2998 	ld (NLEN,sp),a ; needed to test bit 7 
      00112F A4 7F            [ 1] 2999 	and a,#0x7f 
                                   3000 ; move y to procedure address field 	
      001131 4C               [ 1] 3001 	inc a 
      001132 C7 00 0A         [ 1] 3002 	ld acc8,a 
      001135 72 5F 00 09      [ 1] 3003 	clr acc16 
      001139 72 B9 00 09      [ 2] 3004 	addw y,acc16 
      00113D 90 FE            [ 2] 3005 	ldw y,(y) ; routine entry point 
      00113F 7B 01            [ 1] 3006 	ld a,(NLEN,sp)
      001141 A5 80            [ 1] 3007 	bcp a,#0x80 
      001143 27 04            [ 1] 3008 	jreq 1$
      001145 A6 0C            [ 1] 3009 	ld a,#TK_FUNC 
      001147 20 02            [ 2] 3010 	jra search_exit
      001149 A6 07            [ 1] 3011 1$: ld a,#TK_CMD 
      00114B                       3012 search_exit: 
      00114B 93               [ 1] 3013 	ldw x,y ; x=routine address 
      00114C                       3014 	_drop VSIZE 	 
      00114C 5B 03            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00114E 81               [ 4] 3015 	ret 
                                   3016 
                                   3017 ;---------------------
                                   3018 ; check if next token
                                   3019 ;  is of expected type 
                                   3020 ; input:
                                   3021 ;   A 		 expected token attribute
                                   3022 ;  ouput:
                                   3023 ;   none     if fail call tb_error 
                                   3024 ;--------------------
      00114F                       3025 expect:
      00114F 88               [ 1] 3026 	push a 
      001150 CD 0C 48         [ 4] 3027 	call get_token 
      001153 11 01            [ 1] 3028 	cp a,(1,sp)
      001155 27 03            [ 1] 3029 	jreq 1$
      001157 CC 06 90         [ 2] 3030 	jp syntax_error
      00115A 84               [ 1] 3031 1$: pop a 
      00115B 81               [ 4] 3032 	ret 
                                   3033 
                                   3034 
                                   3035 ;-------------------------------
                                   3036 ; parse embedded BASIC routines 
                                   3037 ; arguments list.
                                   3038 ; arg_list::=  rel[','rel]*
                                   3039 ; all arguments are of integer type
                                   3040 ; input:
                                   3041 ;   none
                                   3042 ; output:
                                   3043 ;   A 			number of arguments pushed on dstack  
                                   3044 ;--------------------------------
                           000001  3045 	ARG_CNT=1 
      00115C                       3046 arg_list:
      00115C 4B 00            [ 1] 3047 	push #0  
      00115E CD 12 A2         [ 4] 3048 1$: call relation
      001161 A1 00            [ 1] 3049 	cp a,#TK_NONE 
      001163 27 19            [ 1] 3050 	jreq 5$
      001165 A1 0A            [ 1] 3051 	cp a,#TK_INTGR
      001167 26 12            [ 1] 3052 	jrne 4$
      001169 CD 0F 0E         [ 4] 3053 3$: call dpush 
      00116C 0C 01            [ 1] 3054     inc (ARG_CNT,sp)
      00116E CD 0C 48         [ 4] 3055 	call get_token 
      001171 A1 00            [ 1] 3056 	cp a,#TK_NONE 
      001173 27 09            [ 1] 3057 	jreq 5$ 
      001175 A1 08            [ 1] 3058 	cp a,#TK_COMMA 
      001177 26 02            [ 1] 3059 	jrne 4$
      001179 20 E3            [ 2] 3060 	jra 1$ 
      00117B CD 0F 9E         [ 4] 3061 4$:	call unget_token 
      00117E 84               [ 1] 3062 5$:	pop a 
      00117F 81               [ 4] 3063 	ret 
                                   3064 
                                   3065 
                                   3066 
                                   3067 ;--------------------------------
                                   3068 ;   BASIC commnands 
                                   3069 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3070 
                                   3071 ;--------------------------------
                                   3072 ;  arithmetic and relational 
                                   3073 ;  routines
                                   3074 ;  operators precedence
                                   3075 ;  highest to lowest
                                   3076 ;  operators on same row have 
                                   3077 ;  same precedence and are executed
                                   3078 ;  from left to right.
                                   3079 ;	'*','/','%'
                                   3080 ;   '-','+'
                                   3081 ;   '=','>','<','>=','<=','<>','><'
                                   3082 ;   '<>' and '><' are equivalent for not equal.
                                   3083 ;--------------------------------
                                   3084 
                                   3085 ;------------------------------
                                   3086 ; negate value on dstack
                                   3087 ; dstack: {n -- -n}
                                   3088 ;------------------------------
      001180                       3089 negate:	
      001180 72 CE 00 1A      [ 5] 3090 	ldw x,[dstkptr]
      001184 50               [ 2] 3091 	negw x 
      001185 72 CF 00 1A      [ 5] 3092 	ldw [dstkptr],x 
      001189 81               [ 4] 3093 	ret 
                                   3094 
                                   3095 ;---------------------
                                   3096 ; return array element
                                   3097 ; address from @(expr)
                                   3098 ; input:
                                   3099 ;   A 		TK_ARRAY
                                   3100 ; output:
                                   3101 ;   A 		TK_INTGR
                                   3102 ;	X 		element address 
                                   3103 ;----------------------
      00118A                       3104 get_array_element:
      00118A CD 0F 42         [ 4] 3105 	call ddrop ; {*pad -- }
      00118D A6 04            [ 1] 3106 	ld a,#TK_LPAREN 
      00118F CD 11 4F         [ 4] 3107 	call expect
      001192 CD 12 A2         [ 4] 3108 	call relation 
      001195 A1 0A            [ 1] 3109 	cp a,#TK_INTGR 
      001197 27 03            [ 1] 3110 	jreq 1$
      001199 CC 06 90         [ 2] 3111 	jp syntax_error
      00119C 89               [ 2] 3112 1$: pushw x 
      00119D A6 05            [ 1] 3113 	ld a,#TK_RPAREN 
      00119F CD 11 4F         [ 4] 3114 	call expect
                                   3115 	; check for bounds 
      0011A2 85               [ 2] 3116 	popw x   
      0011A3 C3 00 23         [ 2] 3117 	cpw x,array_size 
      0011A6 23 05            [ 2] 3118 	jrule 3$
                                   3119 ; bounds {1..array_size}	
      0011A8 A6 0A            [ 1] 3120 2$: ld a,#ERR_BAD_VALUE 
      0011AA CC 06 92         [ 2] 3121 	jp tb_error 
      0011AD 5D               [ 2] 3122 3$: tnzw  x
      0011AE 27 F8            [ 1] 3123 	jreq 2$ 
      0011B0 58               [ 2] 3124 	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011B1 89               [ 2] 3125 	pushw x 
      0011B2 CE 00 21         [ 2] 3126 	ldw x,array_addr  
      0011B5 72 F0 01         [ 2] 3127 	subw x,(1,sp)
      0011B8                       3128 	_drop 2   
      0011B8 5B 02            [ 2]    1     addw sp,#2 
      0011BA A6 0A            [ 1] 3129 	ld a,#TK_INTGR
      0011BC 81               [ 4] 3130 	ret 
                                   3131 
                                   3132 ;***********************************
                                   3133 ;   expression parse,execute 
                                   3134 ;***********************************
                                   3135 ;-----------------------------------
                                   3136 ; factor ::= ['+'|'-'|e] var | @ |
                                   3137 ;			 integer | function |
                                   3138 ;			 '('relation')' 
                                   3139 ; output:
                                   3140 ;   A    token attribute 
                                   3141 ;   X 	 integer
                                   3142 ; ---------------------------------
                           000001  3143 	NEG=1
                           000001  3144 	VSIZE=1
      0011BD                       3145 factor:
      0011BD                       3146 	_vars VSIZE 
      0011BD 52 01            [ 2]    1     sub sp,#VSIZE 
      0011BF CD 0C 48         [ 4] 3147 	call get_token
      0011C2 A1 02            [ 1] 3148 	cp a,#2 
      0011C4 2B 48            [ 1] 3149 	jrmi 20$
      0011C6 6B 01            [ 1] 3150 1$:	ld (NEG,sp),a 
      0011C8 A4 10            [ 1] 3151 	and a,#TK_GRP_ADD  
      0011CA 26 04            [ 1] 3152 	jrne 2$
      0011CC 7B 01            [ 1] 3153 	ld a,(NEG,sp)
      0011CE 20 03            [ 2] 3154 	jra 4$  
      0011D0                       3155 2$:	
      0011D0 CD 0C 48         [ 4] 3156 	call get_token 
      0011D3                       3157 4$:	
      0011D3 A1 0C            [ 1] 3158 	cp a,#TK_FUNC 
      0011D5 26 03            [ 1] 3159 	jrne 5$ 
      0011D7 FD               [ 4] 3160 	call (x) 
      0011D8 20 2B            [ 2] 3161 	jra 18$ 
      0011DA                       3162 5$:
      0011DA A1 0A            [ 1] 3163 	cp a,#TK_INTGR
      0011DC 26 02            [ 1] 3164 	jrne 6$
      0011DE 20 25            [ 2] 3165 	jra 18$
      0011E0                       3166 6$:
      0011E0 A1 03            [ 1] 3167 	cp a,#TK_ARRAY
      0011E2 26 06            [ 1] 3168 	jrne 10$
      0011E4 CD 11 8A         [ 4] 3169 	call get_array_element
      0011E7 FE               [ 2] 3170 	ldw x,(x)
      0011E8 20 1B            [ 2] 3171 	jra 18$ 
      0011EA                       3172 10$:
      0011EA A1 02            [ 1] 3173 	cp a,#TK_VAR 
      0011EC 26 03            [ 1] 3174 	jrne 12$
      0011EE FE               [ 2] 3175 	ldw x,(x)
      0011EF 20 14            [ 2] 3176 	jra 18$
      0011F1                       3177 12$:			
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011F1 A1 04            [ 1] 3178 	cp a,#TK_LPAREN
      0011F3 26 0A            [ 1] 3179 	jrne 16$
      0011F5 CD 12 A2         [ 4] 3180 	call relation
      0011F8 A6 05            [ 1] 3181 	ld a,#TK_RPAREN 
      0011FA CD 11 4F         [ 4] 3182 	call expect
      0011FD 20 06            [ 2] 3183 	jra 18$	
      0011FF                       3184 16$:
      0011FF CD 0F 9E         [ 4] 3185 	call unget_token
      001202 4F               [ 1] 3186 	clr a 
      001203 20 09            [ 2] 3187 	jra 20$ 
      001205                       3188 18$: 
      001205 A6 11            [ 1] 3189 	ld a,#TK_MINUS 
      001207 11 01            [ 1] 3190 	cp a,(NEG,sp)
      001209 26 01            [ 1] 3191 	jrne 19$
      00120B 50               [ 2] 3192 	negw x
      00120C                       3193 19$:
      00120C A6 0A            [ 1] 3194 	ld a,#TK_INTGR
      00120E                       3195 20$:
      00120E                       3196 	_drop VSIZE
      00120E 5B 01            [ 2]    1     addw sp,#VSIZE 
      001210 81               [ 4] 3197 	ret
                                   3198 
                                   3199 ;-----------------------------------
                                   3200 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3201 ; output:
                                   3202 ;   A    	token attribute 
                                   3203 ;	X		integer
                                   3204 ;-----------------------------------
                           000001  3205 	N1=1
                           000003  3206 	N2=3
                           000005  3207 	MULOP=5
                           000005  3208 	VSIZE=5
      001211                       3209 term:
      001211                       3210 	_vars VSIZE
      001211 52 05            [ 2]    1     sub sp,#VSIZE 
      001213 CD 11 BD         [ 4] 3211 	call factor
      001216 A1 02            [ 1] 3212 	cp a,#2
      001218 2B 41            [ 1] 3213 	jrmi term_exit
      00121A                       3214 term01:	 ; check for  operator 
      00121A 1F 03            [ 2] 3215 	ldw (N2,sp),x  ; save first factor 
      00121C CD 0C 48         [ 4] 3216 	call get_token
      00121F A1 02            [ 1] 3217 	cp a,#2
      001221 2B 34            [ 1] 3218 	jrmi 9$
      001223 6B 05            [ 1] 3219 0$:	ld (MULOP,sp),a
      001225 A4 30            [ 1] 3220 	and a,#TK_GRP_MASK
      001227 A1 20            [ 1] 3221 	cp a,#TK_GRP_MULT
      001229 27 07            [ 1] 3222 	jreq 1$
      00122B 7B 05            [ 1] 3223 	ld a,(MULOP,sp) 
      00122D CD 0F 9E         [ 4] 3224 	call unget_token 
      001230 20 25            [ 2] 3225 	jra 9$
      001232                       3226 1$:	; got *|/|%
      001232 CD 11 BD         [ 4] 3227 	call factor
      001235 A1 0A            [ 1] 3228 	cp a,#TK_INTGR
      001237 27 03            [ 1] 3229 	jreq 2$ 
      001239 CC 06 90         [ 2] 3230 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00123C 1F 01            [ 2] 3231 2$:	ldw (N1,sp),x  
      00123E 7B 05            [ 1] 3232 	ld a,(MULOP,sp) 
      001240 A1 20            [ 1] 3233 	cp a,#TK_MULT 
      001242 26 05            [ 1] 3234 	jrne 3$
      001244 CD 10 43         [ 4] 3235 	call multiply 
      001247 20 D1            [ 2] 3236 	jra term01
      001249 A1 21            [ 1] 3237 3$: cp a,#TK_DIV 
      00124B 26 05            [ 1] 3238 	jrne 4$ 
      00124D CD 10 8B         [ 4] 3239 	call divide 
      001250 20 C8            [ 2] 3240 	jra term01 
      001252 CD 10 CF         [ 4] 3241 4$: call modulo
      001255 20 C3            [ 2] 3242 	jra term01 
      001257 1E 03            [ 2] 3243 9$: ldw x,(N2,sp)  
      001259 A6 0A            [ 1] 3244 	ld a,#TK_INTGR 	
      00125B                       3245 term_exit:
      00125B                       3246 	_drop VSIZE 
      00125B 5B 05            [ 2]    1     addw sp,#VSIZE 
      00125D 81               [ 4] 3247 	ret 
                                   3248 
                                   3249 ;-------------------------------
                                   3250 ;  expr ::= term [['+'|'-'] term]*
                                   3251 ;  result range {-32768..32767}
                                   3252 ;  output:
                                   3253 ;   A    token attribute 
                                   3254 ;   X	 integer   
                                   3255 ;-------------------------------
                           000001  3256 	N1=1 
                           000003  3257 	N2=3
                           000005  3258 	OP=5 
                           000005  3259 	VSIZE=5 
      00125E                       3260 expression:
      00125E                       3261 	_vars VSIZE 
      00125E 52 05            [ 2]    1     sub sp,#VSIZE 
      001260 CD 12 11         [ 4] 3262 	call term
      001263 A1 02            [ 1] 3263 	cp a,#2 
      001265 2B 38            [ 1] 3264 	jrmi expr_exit 
      001267 1F 03            [ 2] 3265 0$:	ldw (N2,sp),x 
      001269 CD 0C 48         [ 4] 3266 	call get_token
      00126C A1 02            [ 1] 3267 	cp a,#2
      00126E 2B 2B            [ 1] 3268 	jrmi 9$ 
      001270 6B 05            [ 1] 3269 1$:	ld (OP,sp),a  
      001272 A4 30            [ 1] 3270 	and a,#TK_GRP_MASK
      001274 A1 10            [ 1] 3271 	cp a,#TK_GRP_ADD 
      001276 27 07            [ 1] 3272 	jreq 2$ 
      001278 7B 05            [ 1] 3273 	ld a,(OP,sp)
      00127A CD 0F 9E         [ 4] 3274 	call unget_token
      00127D 20 1C            [ 2] 3275 	jra 9$
      00127F                       3276 2$: 
      00127F CD 12 11         [ 4] 3277 	call term
      001282 A1 0A            [ 1] 3278 	cp a,#TK_INTGR 
      001284 27 03            [ 1] 3279 	jreq 3$
      001286 CC 06 90         [ 2] 3280 	jp syntax_error
      001289 1F 01            [ 2] 3281 3$:	ldw (N1,sp),x 
      00128B 7B 05            [ 1] 3282 	ld a,(OP,sp)
      00128D A1 10            [ 1] 3283 	cp a,#TK_PLUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00128F 26 05            [ 1] 3284 	jrne 4$
      001291 CD 10 35         [ 4] 3285 	call add 
      001294 20 D1            [ 2] 3286 	jra 0$ 
      001296 CD 10 3D         [ 4] 3287 4$:	call substract
      001299 20 CC            [ 2] 3288 	jra 0$
      00129B 1E 03            [ 2] 3289 9$: ldw x,(N2,sp)
      00129D A6 0A            [ 1] 3290 	ld a,#TK_INTGR	
      00129F                       3291 expr_exit:
      00129F                       3292 	_drop VSIZE 
      00129F 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012A1 81               [ 4] 3293 	ret 
                                   3294 
                                   3295 ;---------------------------------------------
                                   3296 ; rel ::= expr rel_op expr
                                   3297 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3298 ;  relation return 1 | 0  for true | false 
                                   3299 ;  output:
                                   3300 ;    A 		token attribute  
                                   3301 ;	 X		1|0
                                   3302 ;---------------------------------------------
                           000001  3303 	N1=1
                           000003  3304 	N2=3
                           000005  3305 	RELOP=5
                           000005  3306 	VSIZE=5 
      0012A2                       3307 relation: 
      0012A2                       3308 	_vars VSIZE
      0012A2 52 05            [ 2]    1     sub sp,#VSIZE 
      0012A4 CD 12 5E         [ 4] 3309 	call expression
      0012A7 A1 02            [ 1] 3310 	cp a,#2 
      0012A9 2B 4B            [ 1] 3311 	jrmi rel_exit 
                                   3312 	; expect rel_op or leave 
      0012AB 1F 03            [ 2] 3313 	ldw (N2,sp),x 
      0012AD CD 0C 48         [ 4] 3314 	call get_token 
      0012B0 A1 02            [ 1] 3315 	cp a,#2
      0012B2 2B 3E            [ 1] 3316 	jrmi 9$
      0012B4                       3317 1$:	
      0012B4 6B 05            [ 1] 3318 	ld (RELOP,sp),a 
      0012B6 A4 30            [ 1] 3319 	and a,#TK_GRP_MASK
      0012B8 A1 30            [ 1] 3320 	cp a,#0x30 
      0012BA 27 07            [ 1] 3321 	jreq 2$
      0012BC 7B 05            [ 1] 3322 	ld a,(RELOP,sp)
      0012BE CD 0F 9E         [ 4] 3323 	call unget_token  
      0012C1 20 2F            [ 2] 3324 	jra 9$
      0012C3                       3325 2$:	; expect another expression or error 
      0012C3 CD 12 5E         [ 4] 3326 	call expression
      0012C6 A1 0A            [ 1] 3327 	cp a,#TK_INTGR 
      0012C8 27 03            [ 1] 3328 	jreq 3$
      0012CA CC 06 90         [ 2] 3329 	jp syntax_error 
      0012CD 1F 01            [ 2] 3330 3$:	ldw (N1,sp),x 
      0012CF CD 10 3D         [ 4] 3331 	call substract
      0012D2 26 06            [ 1] 3332 	jrne 4$
      0012D4 35 02 00 0A      [ 1] 3333 	mov acc8,#2 ; n1==n2
      0012D8 20 0C            [ 2] 3334 	jra 6$ 
      0012DA                       3335 4$: 
      0012DA 2C 06            [ 1] 3336 	jrsgt 5$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012DC 35 04 00 0A      [ 1] 3337 	mov acc8,#4 ; n1<2 
      0012E0 20 04            [ 2] 3338 	jra 6$
      0012E2                       3339 5$:
      0012E2 35 01 00 0A      [ 1] 3340 	mov acc8,#1 ; n1>n2 
      0012E6                       3341 6$:
      0012E6 5F               [ 1] 3342 	clrw x 
      0012E7 C6 00 0A         [ 1] 3343 	ld a, acc8  
      0012EA 14 05            [ 1] 3344 	and a,(RELOP,sp)
      0012EC 4D               [ 1] 3345 	tnz a 
      0012ED 27 05            [ 1] 3346 	jreq 10$
      0012EF 5C               [ 1] 3347 	incw x 
      0012F0                       3348 7$:	 
      0012F0 20 02            [ 2] 3349 	jra 10$  	
      0012F2 1E 03            [ 2] 3350 9$: ldw x,(N2,sp)
      0012F4                       3351 10$:
      0012F4 A6 0A            [ 1] 3352 	ld a,#TK_INTGR
      0012F6                       3353 rel_exit: 	 
      0012F6                       3354 	_drop VSIZE
      0012F6 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012F8 81               [ 4] 3355 	ret 
                                   3356 
                                   3357 
                                   3358 ;--------------------------------------------
                                   3359 ; BASIC: HEX 
                                   3360 ; select hexadecimal base for integer print
                                   3361 ;---------------------------------------------
      0012F9                       3362 hex_base:
      0012F9 35 10 00 07      [ 1] 3363 	mov base,#16 
      0012FD 81               [ 4] 3364 	ret 
                                   3365 
                                   3366 ;--------------------------------------------
                                   3367 ; BASIC: DEC 
                                   3368 ; select decimal base for integer print
                                   3369 ;---------------------------------------------
      0012FE                       3370 dec_base:
      0012FE 35 0A 00 07      [ 1] 3371 	mov base,#10
      001302 81               [ 4] 3372 	ret 
                                   3373 
                                   3374 ;------------------------
                                   3375 ; BASIC: SIZE 
                                   3376 ; return free size in text area
                                   3377 ; output:
                                   3378 ;   A 		TK_INTGR
                                   3379 ;   X 	    size integer
                                   3380 ;--------------------------
      001303                       3381 size:
      001303 AE 16 C8         [ 2] 3382 	ldw x,#tib 
      001306 72 B0 00 1E      [ 2] 3383 	subw x,txtend 
      00130A CD 0F 0E         [ 4] 3384 	call dpush 
      00130D A6 0A            [ 1] 3385 	ld a,#TK_INTGR
      00130F 81               [ 4] 3386 	ret 
                                   3387 
                                   3388 
                                   3389 ;------------------------
                                   3390 ; BASIC: UBOUND  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3391 ; return array variable size 
                                   3392 ; output:
                                   3393 ;   A 		TK_INTGR
                                   3394 ;   X 	    array size 
                                   3395 ;--------------------------
      001310                       3396 ubound:
      001310 AE 16 C8         [ 2] 3397 	ldw x,#tib
      001313 72 B0 00 1E      [ 2] 3398 	subw x,txtend 
      001317 54               [ 2] 3399 	srlw x 
      001318 CF 00 23         [ 2] 3400 	ldw array_size,x
      00131B CD 0F 0E         [ 4] 3401 	call dpush   
      00131E A6 0A            [ 1] 3402 	ld a,#TK_INTGR
      001320 81               [ 4] 3403 	ret 
                                   3404 
      001321                       3405 let:
      001321 CD 0C 48         [ 4] 3406 	call get_token 
      001324 A1 02            [ 1] 3407 	cp a,#TK_VAR 
      001326 27 03            [ 1] 3408 	jreq let02
      001328 CC 06 90         [ 2] 3409 	jp syntax_error
      00132B                       3410 let02:
      00132B CD 0F 0E         [ 4] 3411 	call dpush 
      00132E CD 0C 48         [ 4] 3412 	call get_token 
      001331 A1 32            [ 1] 3413 	cp a,#TK_EQUAL
      001333 27 03            [ 1] 3414 	jreq 1$
      001335 CC 06 90         [ 2] 3415 	jp syntax_error
      001338                       3416 1$:	
      001338 CD 12 A2         [ 4] 3417 	call relation   
      00133B A1 0A            [ 1] 3418 	cp a,#TK_INTGR 
      00133D 27 03            [ 1] 3419 	jreq 2$
      00133F CC 06 90         [ 2] 3420 	jp syntax_error
      001342                       3421 2$:	
      001342 90 93            [ 1] 3422 	ldw y,x 
      001344 CD 0F 1B         [ 4] 3423 	call dpop  
      001347 FF               [ 2] 3424 	ldw (x),y   
      001348 A6 00            [ 1] 3425 	ld a,#TK_NONE 
      00134A 81               [ 4] 3426 	ret 
                                   3427 
                                   3428 ;----------------------------
                                   3429 ; BASIC: LIST [[start][,end]]
                                   3430 ; list program lines 
                                   3431 ; form start to end 
                                   3432 ; if empty argument list then 
                                   3433 ; list all.
                                   3434 ;----------------------------
                           000001  3435 	FIRST=1
                           000003  3436 	LAST=3 
                           000005  3437 	LN_PTR=5
                           000006  3438 	VSIZE=6 
      00134B                       3439 list:
      00134B                       3440 	_vars VSIZE
      00134B 52 06            [ 2]    1     sub sp,#VSIZE 
      00134D CE 00 1C         [ 2] 3441 	ldw x,txtbgn 
      001350 C3 00 1E         [ 2] 3442 	cpw x,txtend 
      001353 2B 03            [ 1] 3443 	jrmi 1$
      001355 CC 13 CE         [ 2] 3444 	jp list_exit ; nothing to list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001358 1F 05            [ 2] 3445 1$:	ldw (LN_PTR,sp),x 
      00135A FE               [ 2] 3446 	ldw x,(x) 
      00135B 1F 01            [ 2] 3447 	ldw (FIRST,sp),x ; list from first line 
      00135D AE 7F FF         [ 2] 3448 	ldw x,#0x7fff ; biggest line number 
      001360 1F 03            [ 2] 3449 	ldw (LAST,sp),x 
      001362 CD 11 5C         [ 4] 3450 	call arg_list
      001365 4D               [ 1] 3451 	tnz a
      001366 27 3F            [ 1] 3452 	jreq list_start 
      001368 A1 02            [ 1] 3453 	cp a,#2 
      00136A 27 07            [ 1] 3454 	jreq 4$
      00136C A1 01            [ 1] 3455 	cp a,#1 
      00136E 27 06            [ 1] 3456 	jreq first_line 
      001370 CC 06 90         [ 2] 3457 	jp syntax_error 
      001373 CD 0F 28         [ 4] 3458 4$:	call dswap
      001376                       3459 first_line:
      001376 CD 0F 1B         [ 4] 3460 	call dpop 
      001379 1F 01            [ 2] 3461 	ldw (FIRST,sp),x 
      00137B A1 01            [ 1] 3462 	cp a,#1 
      00137D 27 05            [ 1] 3463 	jreq lines_skip 	
      00137F                       3464 last_line:
      00137F CD 0F 1B         [ 4] 3465 	call dpop 
      001382 1F 03            [ 2] 3466 	ldw (LAST,sp),x 
      001384                       3467 lines_skip:
      001384 CE 00 1C         [ 2] 3468 	ldw x,txtbgn
      001387 1F 05            [ 2] 3469 2$:	ldw (LN_PTR,sp),x 
      001389 C3 00 1E         [ 2] 3470 	cpw x,txtend 
      00138C 2A 40            [ 1] 3471 	jrpl list_exit 
      00138E FE               [ 2] 3472 	ldw x,(x) ;lineno 
      00138F 13 01            [ 2] 3473 	cpw x,(FIRST,sp)
      001391 2A 14            [ 1] 3474 	jrpl list_start 
      001393 1E 05            [ 2] 3475 	ldw x,(LN_PTR,sp) 
      001395 1C 00 02         [ 2] 3476 	addw x,#2 
      001398 F6               [ 1] 3477 	ld a,(x)
      001399 5C               [ 1] 3478 	incw x 
      00139A C7 00 0A         [ 1] 3479 	ld acc8,a 
      00139D 72 5F 00 09      [ 1] 3480 	clr acc16 
      0013A1 72 BB 00 09      [ 2] 3481 	addw x,acc16
      0013A5 20 E0            [ 2] 3482 	jra 2$ 
                                   3483 ; print loop
      0013A7                       3484 list_start:
      0013A7 1E 05            [ 2] 3485 	ldw x,(LN_PTR,sp)
      0013A9                       3486 3$:	
      0013A9 CD 13 E3         [ 4] 3487 	call prt_basic_line
      0013AC 1E 05            [ 2] 3488 	ldw x,(LN_PTR,sp)
      0013AE 1C 00 02         [ 2] 3489 	addw x,#2 
      0013B1 F6               [ 1] 3490 	ld a,(x)
      0013B2 5C               [ 1] 3491 	incw x 
      0013B3 C7 00 0A         [ 1] 3492 	ld acc8,a 
      0013B6 72 5F 00 09      [ 1] 3493 	clr acc16 
      0013BA 72 BB 00 09      [ 2] 3494 	addw x,acc16
      0013BE C3 00 1E         [ 2] 3495 	cpw x,txtend 
      0013C1 2A 0B            [ 1] 3496 	jrpl list_exit
      0013C3 1F 05            [ 2] 3497 	ldw (LN_PTR,sp),x
      0013C5 FE               [ 2] 3498 	ldw x,(x)
      0013C6 13 03            [ 2] 3499 	cpw x,(LAST,sp)  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013C8 2C 04            [ 1] 3500 	jrsgt list_exit 
      0013CA 1E 05            [ 2] 3501 	ldw x,(LN_PTR,sp)
      0013CC 20 DB            [ 2] 3502 	jra 3$
      0013CE                       3503 list_exit:
      0013CE                       3504 	_drop VSIZE 
      0013CE 5B 06            [ 2]    1     addw sp,#VSIZE 
      0013D0 4F               [ 1] 3505 	clr a 	
      0013D1 81               [ 4] 3506 	ret
                                   3507 
      0013D2 4E 6F 74 68 69 6E 67  3508 empty: .asciz "Nothing to list\n"
             20 74 6F 20 6C 69 73
             74 0A 00
                                   3509 
                                   3510 ;--------------------------
                                   3511 ; input:
                                   3512 ;   X 		pointer at line
                                   3513 ; output:
                                   3514 ;   none 
                                   3515 ;--------------------------	
      0013E3                       3516 prt_basic_line:
      0013E3 89               [ 2] 3517 	pushw x 
      0013E4 FE               [ 2] 3518 	ldw x,(x)
      0013E5 CF 00 09         [ 2] 3519 	ldw acc16,x 
      0013E8 72 5F 00 08      [ 1] 3520 	clr acc24 
      0013EC AE 00 05         [ 2] 3521 	ldw x,#5 
      0013EF A6 0A            [ 1] 3522 	ld a,#10 
      0013F1 CD 08 C5         [ 4] 3523 	call prti24 
      0013F4 85               [ 2] 3524 	popw x 
      0013F5 1C 00 03         [ 2] 3525 	addw x,#3
      0013F8 CD 02 30         [ 4] 3526 	call puts 
      0013FB A6 0D            [ 1] 3527 	ld a,#CR 
      0013FD CD 02 1E         [ 4] 3528 	call putc 
      001400 81               [ 4] 3529 	ret 	
                                   3530 
                                   3531 ;---------------------------------
                                   3532 ; BASIC: PRINT|? arg_list 
                                   3533 ; print values from argument list
                                   3534 ;----------------------------------
                           000001  3535 	COMMA=1
                           000001  3536 	VSIZE=1
      001401                       3537 print:
      001401 4B 00            [ 1] 3538 push #0 ; local variable COMMA 
      001403                       3539 reset_comma:
      001403 0F 01            [ 1] 3540 	clr (COMMA,sp)
      001405                       3541 prt_loop:
      001405 CD 12 A2         [ 4] 3542 	call relation
      001408 A1 01            [ 1] 3543 	cp a,#TK_COLON 
      00140A 26 03            [ 1] 3544 	jrne z
      00140C CC 14 65         [ 2] 3545 	jp print_exit   
      00140F A1 0A            [ 1] 3546 z:	cp a,#TK_INTGR 
      001411 26 08            [ 1] 3547 	jrne 0$ 
      001413 CD 0F 0E         [ 4] 3548 	call dpush 
      001416 CD 0F 7F         [ 4] 3549 	call prt_tos 
      001419 20 E8            [ 2] 3550 	jra reset_comma
      00141B                       3551 0$: 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00141B CD 0C 48         [ 4] 3552 	call get_token
      00141E A1 00            [ 1] 3553 	cp a,#TK_NONE 
      001420 27 43            [ 1] 3554 	jreq print_exit 
      001422 A1 06            [ 1] 3555 1$:	cp a,#TK_QSTR
      001424 26 05            [ 1] 3556 	jrne 2$   
      001426 CD 02 30         [ 4] 3557 	call puts 
      001429 20 D8            [ 2] 3558 	jra reset_comma
      00142B A1 0B            [ 1] 3559 2$: cp a,#TK_CHAR 
      00142D 26 06            [ 1] 3560 	jrne 3$
      00142F 9F               [ 1] 3561 	ld a,xl 
      001430 CD 02 1E         [ 4] 3562 	call putc 
      001433 20 CE            [ 2] 3563 	jra reset_comma 
      001435                       3564 3$: 	
      001435 A1 0C            [ 1] 3565 	cp a,#TK_FUNC 
      001437 26 09            [ 1] 3566 	jrne 4$ 
      001439 FD               [ 4] 3567 	call (x)
      00143A CD 0F 0E         [ 4] 3568 	call dpush 
      00143D CD 0F 7F         [ 4] 3569 	call prt_tos 
      001440 20 C1            [ 2] 3570 	jra reset_comma 
      001442                       3571 4$: 
      001442 A1 08            [ 1] 3572 	cp a,#TK_COMMA 
      001444 26 05            [ 1] 3573 	jrne 5$
      001446 03 01            [ 1] 3574 	cpl (COMMA,sp) 
      001448 CC 14 05         [ 2] 3575 	jp prt_loop   
      00144B                       3576 5$: 
      00144B A1 09            [ 1] 3577 	cp a,#TK_SHARP
      00144D 26 13            [ 1] 3578 	jrne 7$
      00144F CD 0C 48         [ 4] 3579 	call get_token
      001452 A1 0A            [ 1] 3580 	cp a,#TK_INTGR 
      001454 27 03            [ 1] 3581 	jreq 6$
      001456 CC 06 90         [ 2] 3582 	jp syntax_error 
      001459                       3583 6$:
      001459 9F               [ 1] 3584 	ld a,xl 
      00145A A4 0F            [ 1] 3585 	and a,#15 
      00145C C7 00 26         [ 1] 3586 	ld tab_width,a 
      00145F CC 14 03         [ 2] 3587 	jp reset_comma 
      001462                       3588 7$:	
      001462 CD 0F 9E         [ 4] 3589 	call unget_token
      001465                       3590 print_exit:
      001465 0D 01            [ 1] 3591 	tnz (COMMA,sp)
      001467 26 05            [ 1] 3592 	jrne 9$
      001469 A6 0D            [ 1] 3593 	ld a,#CR 
      00146B CD 02 1E         [ 4] 3594     call putc 
      00146E                       3595 9$:	_drop VSIZE 
      00146E 5B 01            [ 2]    1     addw sp,#VSIZE 
      001470 4F               [ 1] 3596 	clr a
      001471 81               [ 4] 3597 	ret 
                                   3598 
                                   3599 ;----------------------
                                   3600 ; 'save_context' and
                                   3601 ; 'rest_context' must be 
                                   3602 ; called at the same 
                                   3603 ; call stack depth 
                                   3604 ; i.e. SP must have the 
                                   3605 ; save value at  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3606 ; entry point of both 
                                   3607 ; routine. 
                                   3608 ;---------------------
                                   3609 ;--------------------
                                   3610 ; save current BASIC
                                   3611 ; interpreter context 
                                   3612 ; on cstack 
                                   3613 ;--------------------
      001472                       3614 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001472                       3615 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001472                       3616 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001472                       3617 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001472                       3618 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      001472                       3619 save_context:
      001472 CE 00 03         [ 2] 3620 	ldw x,basicptr 
      001475 1F 03            [ 2] 3621 	ldw (BPTR,sp),x
      001477 CE 00 05         [ 2] 3622 	ldw x,lineno 
      00147A 1F 05            [ 2] 3623 	ldw (LNO,sp),x 
      00147C C6 00 01         [ 1] 3624 	ld a,in 
      00147F 6B 07            [ 1] 3625 	ld (IN,sp),a
      001481 C6 00 02         [ 1] 3626 	ld a,count 
      001484 6B 08            [ 1] 3627 	ld (CNT,sp),a  
      001486 81               [ 4] 3628 	ret
                                   3629 
                                   3630 ;-----------------------
                                   3631 ; restore previously saved 
                                   3632 ; BASIC interpreter context 
                                   3633 ; from cstack 
                                   3634 ;-------------------------
      001487                       3635 rest_context:
      001487 1E 03            [ 2] 3636 	ldw x,(BPTR,sp)
      001489 CF 00 03         [ 2] 3637 	ldw basicptr,x 
      00148C 1E 05            [ 2] 3638 	ldw x,(LNO,sp)
      00148E CF 00 05         [ 2] 3639 	ldw lineno,x 
      001491 7B 07            [ 1] 3640 	ld a,(IN,sp)
      001493 C7 00 01         [ 1] 3641 	ld in,a
      001496 7B 08            [ 1] 3642 	ld a,(CNT,sp)
      001498 C7 00 02         [ 1] 3643 	ld count,a  
      00149B 81               [ 4] 3644 	ret
                                   3645 
                                   3646 ;------------------------------------------
                                   3647 ; BASIC: INPUT [string],var[,[string],var]
                                   3648 ; input value in variables 
                                   3649 ; [string] optionally can be used as prompt 
                                   3650 ;-----------------------------------------
                           000001  3651 	CX_BPTR=1
                           000003  3652 	CX_LNO=3
                           000004  3653 	CX_IN=4
                           000005  3654 	CX_CNT=5
                           000006  3655 	SKIP=6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                           000007  3656 	VSIZE=7
      00149C                       3657 input_var:
      00149C 72 00 00 25 05   [ 2] 3658 	btjt flags,#FRUN,1$ 
      0014A1 A6 06            [ 1] 3659 	ld a,#ERR_RUN_ONLY 
      0014A3 CC 06 92         [ 2] 3660 	jp tb_error 
      0014A6                       3661 1$:	_vars VSIZE 
      0014A6 52 07            [ 2]    1     sub sp,#VSIZE 
      0014A8                       3662 input_loop:
      0014A8 0F 06            [ 1] 3663 	clr (SKIP,sp)
      0014AA CD 0C 48         [ 4] 3664 	call get_token 
      0014AD A1 00            [ 1] 3665 	cp a,#TK_NONE 
      0014AF 27 5D            [ 1] 3666 	jreq input_exit 
      0014B1 A1 06            [ 1] 3667 	cp a,#TK_QSTR 
      0014B3 26 0B            [ 1] 3668 	jrne 1$ 
      0014B5 CD 0F 1B         [ 4] 3669 	call dpop
      0014B8 CD 02 30         [ 4] 3670 	call puts 
      0014BB 03 06            [ 1] 3671 	cpl (SKIP,sp)
      0014BD CD 0C 48         [ 4] 3672 	call get_token 
      0014C0 A1 02            [ 1] 3673 1$: cp a,#TK_VAR  
      0014C2 27 03            [ 1] 3674 	jreq 2$ 
      0014C4 CC 06 90         [ 2] 3675 	jp syntax_error
      0014C7                       3676 2$:	
      0014C7 0D 06            [ 1] 3677 	tnz (SKIP,sp)
      0014C9 26 0F            [ 1] 3678 	jrne 21$ 
      0014CB A6 3A            [ 1] 3679 	ld a,#':
      0014CD C7 17 19         [ 1] 3680 	ld pad+1,a 
      0014D0 72 5F 17 1A      [ 1] 3681 	clr pad+2
      0014D4 AE 17 18         [ 2] 3682 	ldw x,#pad 
      0014D7 CD 02 30         [ 4] 3683 	call puts   
      0014DA                       3684 21$:
      0014DA CD 14 72         [ 4] 3685 	call save_context 
      0014DD AE 16 C8         [ 2] 3686 	ldw x,#tib 
      0014E0 CF 00 03         [ 2] 3687 	ldw basicptr,x  
      0014E3 72 5F 00 02      [ 1] 3688 	clr count  
      0014E7 CD 09 AC         [ 4] 3689 	call readln 
      0014EA 72 5F 00 01      [ 1] 3690 	clr in 
      0014EE CD 12 A2         [ 4] 3691 	call relation 
      0014F1 A1 0A            [ 1] 3692 	cp a,#TK_INTGR
      0014F3 27 03            [ 1] 3693 	jreq 3$ 
      0014F5 CC 06 90         [ 2] 3694 	jp syntax_error
      0014F8                       3695 3$: 
      0014F8 CD 0F 75         [ 4] 3696 	call store 
      0014FB CD 14 87         [ 4] 3697 	call rest_context
      0014FE 72 5F 00 11      [ 1] 3698 	clr untok 
      001502 CD 0C 48         [ 4] 3699 	call get_token 
      001505 A1 08            [ 1] 3700 	cp a,#TK_COMMA 
      001507 26 02            [ 1] 3701 	jrne 4$
      001509 20 9D            [ 2] 3702 	jra input_loop 
      00150B CD 0F 9E         [ 4] 3703 4$:	call unget_token 
      00150E                       3704 input_exit:
      00150E                       3705 	_drop VSIZE 
      00150E 5B 07            [ 2]    1     addw sp,#VSIZE 
      001510 4F               [ 1] 3706 	clr a 
      001511 81               [ 4] 3707 	ret 
                                   3708 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3709 
                                   3710 ;---------------------
                                   3711 ; BASIC: REMARK | ' 
                                   3712 ; begin a comment 
                                   3713 ; comment are ignored 
                                   3714 ; use ' insted of REM 
                                   3715 ; it is faster 
                                   3716 ;---------------------- 
      001512                       3717 rem: 
      001512 81               [ 4] 3718 	ret 
                                   3719 
                                   3720 
                                   3721 ;---------------------
                                   3722 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3723 ; read in loop 'addr'  
                                   3724 ; apply & 'mask' to value 
                                   3725 ; loop while result==0.  
                                   3726 ; if 'xor_mask' given 
                                   3727 ; apply ^ in second  
                                   3728 ; loop while result==0 
                                   3729 ;---------------------
                           000001  3730 	XMASK=1 
                           000002  3731 	MASK=2
                           000003  3732 	ADDR=3
                           000004  3733 	VSIZE=4
      001513                       3734 wait: 
      001513                       3735 	_vars VSIZE
      001513 52 04            [ 2]    1     sub sp,#VSIZE 
      001515 0F 01            [ 1] 3736 	clr (XMASK,sp) 
      001517 CD 11 5C         [ 4] 3737 	call arg_list 
      00151A A1 02            [ 1] 3738 	cp a,#2
      00151C 24 03            [ 1] 3739 	jruge 0$
      00151E CC 06 90         [ 2] 3740 	jp syntax_error 
      001521 A1 03            [ 1] 3741 0$:	cp a,#3
      001523 25 06            [ 1] 3742 	jrult 1$
      001525 CD 0F 1B         [ 4] 3743 	call dpop 
      001528 9F               [ 1] 3744 	ld a,xl
      001529 6B 01            [ 1] 3745 	ld (XMASK,sp),a 
      00152B CD 0F 1B         [ 4] 3746 1$: call dpop ; mask 
      00152E 9F               [ 1] 3747 	ld a,xl 
      00152F 6B 02            [ 1] 3748 	ld (MASK,sp),a 
      001531 CD 0F 1B         [ 4] 3749 	call dpop ; address 
      001534 F6               [ 1] 3750 2$:	ld a,(x)
      001535 14 02            [ 1] 3751 	and a,(MASK,sp)
      001537 18 01            [ 1] 3752 	xor a,(XMASK,sp)
      001539 27 F9            [ 1] 3753 	jreq 2$ 
      00153B                       3754 	_drop VSIZE 
      00153B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00153D 4F               [ 1] 3755 	clr a 
      00153E 81               [ 4] 3756 	ret 
                                   3757 
                                   3758 ;---------------------
                                   3759 ; BASIC: BSET addr,mask
                                   3760 ; set bits at 'addr' corresponding 
                                   3761 ; to those of 'mask' that are at 1.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3762 ; arguments:
                                   3763 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3764 ;   mask        mask|addr
                                   3765 ; output:
                                   3766 ;	none 
                                   3767 ;--------------------------
      00153F                       3768 bit_set:
      00153F CD 11 5C         [ 4] 3769 	call arg_list 
      001542 A1 02            [ 1] 3770 	cp a,#2	 
      001544 27 03            [ 1] 3771 	jreq 1$ 
      001546 CC 06 90         [ 2] 3772 	jp syntax_error
      001549 CD 0F 1B         [ 4] 3773 1$: call dpop ; mask 
      00154C 9F               [ 1] 3774 	ld a,xl 
      00154D CD 0F 1B         [ 4] 3775 	call dpop ; addr  
      001550 FA               [ 1] 3776 	or a,(x)
      001551 F7               [ 1] 3777 	ld (x),a 
      001552 4F               [ 1] 3778 	clr a
      001553 81               [ 4] 3779 	ret 
                                   3780 
                                   3781 ;---------------------
                                   3782 ; BASIC: BRES addr,mask
                                   3783 ; reset bits at 'addr' corresponding 
                                   3784 ; to those of 'mask' that are at 1.
                                   3785 ; arguments:
                                   3786 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3787 ;   mask	    ~mask&*addr  
                                   3788 ; output:
                                   3789 ;	none 
                                   3790 ;--------------------------
      001554                       3791 bit_reset:
      001554 CD 11 5C         [ 4] 3792 	call arg_list 
      001557 A1 02            [ 1] 3793 	cp a,#2  
      001559 27 03            [ 1] 3794 	jreq 1$ 
      00155B CC 06 90         [ 2] 3795 	jp syntax_error
      00155E                       3796 1$: 
      00155E CD 0F 1B         [ 4] 3797 	call dpop ; mask 
      001561 9F               [ 1] 3798 	ld a,xl 
      001562 43               [ 1] 3799 	cpl a 
      001563 CD 0F 1B         [ 4] 3800 	call dpop ; addr  
      001566 F4               [ 1] 3801 	and a,(x)
      001567 F7               [ 1] 3802 	ld (x),a 
      001568 4F               [ 1] 3803 	clr a 
      001569 81               [ 4] 3804 	ret 
                                   3805 
                                   3806 ;---------------------
                                   3807 ; BASIC: BRES addr,mask
                                   3808 ; toggle bits at 'addr' corresponding 
                                   3809 ; to those of 'mask' that are at 1.
                                   3810 ; arguments:
                                   3811 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3812 ;   mask	    mask^*addr  
                                   3813 ; output:
                                   3814 ;	none 
                                   3815 ;--------------------------
      00156A                       3816 bit_toggle:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00156A CD 11 5C         [ 4] 3817 	call arg_list 
      00156D A1 02            [ 1] 3818 	cp a,#2 
      00156F 27 03            [ 1] 3819 	jreq 1$ 
      001571 CC 06 90         [ 2] 3820 	jp syntax_error
      001574 CD 0F 1B         [ 4] 3821 1$: call dpop ; mask 
      001577 9F               [ 1] 3822 	ld a,xl 
      001578 CD 0F 1B         [ 4] 3823 	call dpop ; addr  
      00157B F8               [ 1] 3824 	xor a,(x)
      00157C F7               [ 1] 3825 	ld (x),a 
      00157D 4F               [ 1] 3826 	clr a
      00157E 81               [ 4] 3827 	ret 
                                   3828 
                                   3829 
                                   3830 ;--------------------
                                   3831 ; BASIC: POKE addr,byte
                                   3832 ; put a byte at addr 
                                   3833 ;--------------------
      00157F                       3834 poke:
      00157F CD 11 5C         [ 4] 3835 	call arg_list 
      001582 A1 02            [ 1] 3836 	cp a,#2
      001584 27 03            [ 1] 3837 	jreq 1$
      001586 CC 06 90         [ 2] 3838 	jp syntax_error
      001589                       3839 1$:	
      001589 CD 0F 1B         [ 4] 3840 	call dpop 
      00158C 9F               [ 1] 3841     ld a,xl 
      00158D CD 0F 1B         [ 4] 3842 	call dpop 
      001590 F7               [ 1] 3843 	ld (x),a 
      001591 4F               [ 1] 3844 	clr a 
      001592 81               [ 4] 3845 	ret 
                                   3846 
                                   3847 ;-----------------------
                                   3848 ; BASIC: PEEK(addr)
                                   3849 ; get the byte at addr 
                                   3850 ; input:
                                   3851 ;	none 
                                   3852 ; output:
                                   3853 ;	X 		value 
                                   3854 ;-----------------------
      001593                       3855 peek:
      001593 A6 04            [ 1] 3856 	ld a,#TK_LPAREN 
      001595 CD 11 4F         [ 4] 3857 	call expect 
      001598 CD 11 5C         [ 4] 3858 	call arg_list
      00159B A1 01            [ 1] 3859 	cp a,#1 
      00159D 27 03            [ 1] 3860 	jreq 1$
      00159F CC 06 90         [ 2] 3861 	jp syntax_error
      0015A2 A6 05            [ 1] 3862 1$:	ld a,#TK_RPAREN 
      0015A4 CD 11 4F         [ 4] 3863 	call expect 
      0015A7 CD 0F 1B         [ 4] 3864 	call dpop 
      0015AA F6               [ 1] 3865 	ld a,(x)
      0015AB 5F               [ 1] 3866 	clrw x 
      0015AC 97               [ 1] 3867 	ld xl,a 
      0015AD CD 0F 0E         [ 4] 3868 	call dpush 
      0015B0 A6 0A            [ 1] 3869 	ld a,#TK_INTGR
      0015B2 81               [ 4] 3870 	ret 
                                   3871 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0015B3                       3872 if: 
      0015B3 CD 12 A2         [ 4] 3873 	call relation 
      0015B6 A1 0A            [ 1] 3874 	cp a,#TK_INTGR
      0015B8 27 03            [ 1] 3875 	jreq 1$ 
      0015BA CC 06 90         [ 2] 3876 	jp syntax_error
      0015BD 4F               [ 1] 3877 1$:	clr a 
      0015BE 5D               [ 2] 3878 	tnzw x 
      0015BF 26 09            [ 1] 3879 	jrne 9$  
                                   3880 ;skip to next line
      0015C1 55 00 02 00 01   [ 1] 3881 	mov in,count
      0015C6 72 5F 00 11      [ 1] 3882 	clr untok 
      0015CA 81               [ 4] 3883 9$:	ret 
                                   3884 
                                   3885 ;------------------------
                                   3886 ; BASIC: FOR var=expr 
                                   3887 ; set variable to expression 
                                   3888 ; leave variable address 
                                   3889 ; on dstack and set
                                   3890 ; FFOR bit in 'flags'
                                   3891 ;-----------------
                           000001  3892 	RETL1=1
                           000003  3893 	INW=3
                           000005  3894 	BPTR=5
      0015CB                       3895 for: ; { -- var_addr }
      0015CB A6 02            [ 1] 3896 	ld a,#TK_VAR 
      0015CD CD 11 4F         [ 4] 3897 	call expect
      0015D0 CD 0F 0E         [ 4] 3898 	call dpush 
      0015D3 CD 13 2B         [ 4] 3899 	call let02 
      0015D6 72 14 00 25      [ 1] 3900 	bset flags,#FFOR 
                                   3901 ; open space on cstack for BPTR and INW 
      0015DA 85               [ 2] 3902 	popw x ; call return address 
      0015DB                       3903 	_vars 4
      0015DB 52 04            [ 2]    1     sub sp,#4 
      0015DD 89               [ 2] 3904 	pushw x  ; RETL1 
      0015DE 5F               [ 1] 3905 	clrw x 
      0015DF 1F 05            [ 2] 3906 	ldw (BPTR,sp),x 
      0015E1 1F 03            [ 2] 3907 	ldw (INW,sp),x 
      0015E3 CD 0C 48         [ 4] 3908 	call get_token 
      0015E6 A1 07            [ 1] 3909 	cp a,#TK_CMD 
      0015E8 27 03            [ 1] 3910 	jreq 1$
      0015EA CC 06 90         [ 2] 3911 	jp syntax_error
      0015ED                       3912 1$:  
      0015ED A3 15 F5         [ 2] 3913 	cpw x,#to 
      0015F0 27 03            [ 1] 3914 	jreq to
      0015F2 CC 06 90         [ 2] 3915 	jp syntax_error 
                                   3916 
                                   3917 ;-----------------------------------
                                   3918 ; BASIC: TO expr 
                                   3919 ; second part of FOR loop initilization
                                   3920 ; leave limit on dstack and set 
                                   3921 ; FTO bit in 'flags'
                                   3922 ;-----------------------------------
      0015F5                       3923 to: ; { var_addr -- var_addr limit step }
      0015F5 72 04 00 25 03   [ 2] 3924 	btjt flags,#FFOR,1$
      0015FA CC 06 90         [ 2] 3925 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0015FD CD 12 A2         [ 4] 3926 1$: call relation  
      001600 A1 0A            [ 1] 3927 	cp a,#TK_INTGR 
      001602 27 03            [ 1] 3928 	jreq 2$ 
      001604 CC 06 90         [ 2] 3929 	jp syntax_error
      001607 CD 0F 0E         [ 4] 3930 2$: call dpush ; limit
      00160A CE 00 00         [ 2] 3931 	ldw x,in.w 
      00160D CD 0C 48         [ 4] 3932 	call get_token
      001610 A1 00            [ 1] 3933 	cp a,#TK_NONE  
      001612 27 0C            [ 1] 3934 	jreq 4$ 
      001614 A1 07            [ 1] 3935 	cp a,#TK_CMD
      001616 26 05            [ 1] 3936 	jrne 3$
      001618 A3 16 25         [ 2] 3937 	cpw x,#step 
      00161B 27 08            [ 1] 3938 	jreq step
      00161D                       3939 3$:	
      00161D CD 0F 9E         [ 4] 3940 	call unget_token   	 
      001620                       3941 4$:	
      001620 AE 00 01         [ 2] 3942 	ldw x,#1   ; default step  
      001623 20 12            [ 2] 3943 	jra store_loop_addr 
                                   3944 
                                   3945 
                                   3946 ;----------------------------------
                                   3947 ; BASIC: STEP expr 
                                   3948 ; optional third par of FOR loop
                                   3949 ; initialization. 	
                                   3950 ;------------------------------------
      001625                       3951 step: ; {var limit -- var limit step}
      001625 72 04 00 25 03   [ 2] 3952 	btjt flags,#FFOR,1$
      00162A CC 06 90         [ 2] 3953 	jp syntax_error
      00162D CD 12 A2         [ 4] 3954 1$: call relation
      001630 A1 0A            [ 1] 3955 	cp a,#TK_INTGR
      001632 27 03            [ 1] 3956 	jreq store_loop_addr  
      001634 CC 06 90         [ 2] 3957 	jp syntax_error
                                   3958 ; leave loop back entry point on cstack 
                                   3959 ; cstack is 2 call deep from interp_loop
      001637                       3960 store_loop_addr:
      001637 CD 0F 0E         [ 4] 3961 	call dpush 
      00163A CE 00 03         [ 2] 3962 	ldw x,basicptr  
      00163D 1F 05            [ 2] 3963 	ldw (BPTR,sp),x 
      00163F CE 00 00         [ 2] 3964 	ldw x,in.w 
      001642 1F 03            [ 2] 3965 	ldw (INW,sp),x   
      001644 72 15 00 25      [ 1] 3966 	bres flags,#FFOR 
      001648 72 5C 00 20      [ 1] 3967 	inc loop_depth 
      00164C 4F               [ 1] 3968 	clr a 
      00164D 81               [ 4] 3969 	ret 
                                   3970 
                                   3971 ;--------------------------------
                                   3972 ; BASIC: NEXT var 
                                   3973 ; FOR loop control 
                                   3974 ; increment variable with step 
                                   3975 ; and compare with limit 
                                   3976 ; loop if threshold not crossed.
                                   3977 ; else clean both stacks. 
                                   3978 ; and decrement 'loop_depth' 
                                   3979 ;--------------------------------
      00164E                       3980 next: ; {var limit step -- [var limit step ] }
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00164E 72 5D 00 20      [ 1] 3981 	tnz loop_depth 
      001652 26 03            [ 1] 3982 	jrne 1$ 
      001654 CC 06 90         [ 2] 3983 	jp syntax_error 
      001657                       3984 1$: 
      001657 A6 02            [ 1] 3985 	ld a,#TK_VAR 
      001659 CD 11 4F         [ 4] 3986 	call expect
                                   3987 ; check for good variable after NEXT 	 
      00165C 90 93            [ 1] 3988 	ldw y,x 
      00165E AE 00 04         [ 2] 3989 	ldw x,#4  
      001661 72 D3 00 1A      [ 4] 3990 	cpw y,([dstkptr],x) ; compare variables address 
      001665 27 03            [ 1] 3991 	jreq 2$  
      001667 CC 06 90         [ 2] 3992 	jp syntax_error ; not the good one 
      00166A                       3993 2$: ; increment variable 
      00166A 93               [ 1] 3994 	ldw x,y
      00166B FE               [ 2] 3995 	ldw x,(x)  ; get var value 
      00166C CF 00 09         [ 2] 3996 	ldw acc16,x 
      00166F 72 CE 00 1A      [ 5] 3997 	ldw x,[dstkptr] ; step
      001673 72 BB 00 09      [ 2] 3998 	addw x,acc16 ; var+step 
      001677 90 FF            [ 2] 3999 	ldw (y),x ; save var new value 
                                   4000 ; compare with limit 
      001679 90 93            [ 1] 4001 	ldw y,x 
      00167B 72 CE 00 1A      [ 5] 4002 	ldw x,[dstkptr] ; step in x 
      00167F 5D               [ 2] 4003 	tnzw x  
      001680 2A 0B            [ 1] 4004 	jrpl 4$ ; positive step 
                                   4005 ;negative step 
      001682 AE 00 02         [ 2] 4006 	ldw x,#2
      001685 72 D3 00 1A      [ 4] 4007 	cpw y,([dstkptr],x)
      001689 2F 27            [ 1] 4008 	jrslt loop_done
      00168B 20 09            [ 2] 4009 	jra loop_back 
      00168D                       4010 4$: ; positive step
      00168D AE 00 02         [ 2] 4011 	ldw x,#2 
      001690 72 D3 00 1A      [ 4] 4012 	cpw y,([dstkptr],x)
      001694 2C 1C            [ 1] 4013 	jrsgt loop_done
      001696                       4014 loop_back:
      001696 1E 05            [ 2] 4015 	ldw x,(BPTR,sp)
      001698 CF 00 03         [ 2] 4016 	ldw basicptr,x 
      00169B 72 01 00 25 0B   [ 2] 4017 	btjf flags,#FRUN,1$ 
      0016A0 E6 02            [ 1] 4018 	ld a,(2,x)
      0016A2 AB 02            [ 1] 4019 	add a,#2 
      0016A4 C7 00 02         [ 1] 4020 	ld count,a
      0016A7 FE               [ 2] 4021 	ldw x,(x)
      0016A8 CF 00 05         [ 2] 4022 	ldw lineno,x
      0016AB 1E 03            [ 2] 4023 1$:	ldw x,(INW,sp)
      0016AD CF 00 00         [ 2] 4024 	ldw in.w,x 
      0016B0 4F               [ 1] 4025 	clr a 
      0016B1 81               [ 4] 4026 	ret 
      0016B2                       4027 loop_done:
                                   4028 	; remove var limit step on dstack 
      0016B2 CE 00 1A         [ 2] 4029 	ldw x,dstkptr 
      0016B5 1C 00 06         [ 2] 4030 	addw x,#3*CELL_SIZE
      0016B8 CF 00 1A         [ 2] 4031 	ldw dstkptr,x 
                                   4032 	; remove 2 return address on cstack 
      0016BB 85               [ 2] 4033 	popw x
      0016BC                       4034 	_drop 4
      0016BC 5B 04            [ 2]    1     addw sp,#4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016BE 89               [ 2] 4035 	pushw x 
      0016BF 72 5A 00 20      [ 1] 4036 	dec loop_depth 
      0016C3 4F               [ 1] 4037 	clr a 
      0016C4 81               [ 4] 4038 	ret 
                                   4039 
                                   4040 
                                   4041 ;------------------------
                                   4042 ; BASIC: GOTO lineno 
                                   4043 ; jump to lineno 
                                   4044 ; here cstack is 2 call deep from interp_loop 
                                   4045 ;------------------------
      0016C5                       4046 goto:
      0016C5 72 00 00 25 06   [ 2] 4047 	btjt flags,#FRUN,0$ 
      0016CA A6 06            [ 1] 4048 	ld a,#ERR_RUN_ONLY
      0016CC CC 06 92         [ 2] 4049 	jp tb_error 
      0016CF 81               [ 4] 4050 	ret 
      0016D0 20 23            [ 2] 4051 0$:	jra go_common
                                   4052 
                                   4053 ;--------------------
                                   4054 ; BASIC: GOSUB lineno
                                   4055 ; basic subroutine call
                                   4056 ; actual lineno and basicptr 
                                   4057 ; are saved on cstack
                                   4058 ; here cstack is 2 call deep from interp_loop 
                                   4059 ;--------------------
                           000003  4060 	GOS_RET=3
      0016D2                       4061 gosub:
      0016D2 72 00 00 25 06   [ 2] 4062 	btjt flags,#FRUN,0$ 
      0016D7 A6 06            [ 1] 4063 	ld a,#ERR_RUN_ONLY
      0016D9 CC 06 92         [ 2] 4064 	jp tb_error 
      0016DC 81               [ 4] 4065 	ret 
      0016DD 85               [ 2] 4066 0$:	popw x 
      0016DE 52 02            [ 2] 4067 	sub sp,#2 
      0016E0 89               [ 2] 4068 	pushw x 
      0016E1 CE 00 03         [ 2] 4069 	ldw x,basicptr
      0016E4 E6 02            [ 1] 4070 	ld a,(2,x)
      0016E6 AB 03            [ 1] 4071 	add a,#3 
      0016E8 C7 00 0A         [ 1] 4072 	ld acc8,a 
      0016EB 72 5F 00 09      [ 1] 4073 	clr acc16 
      0016EF 72 BB 00 09      [ 2] 4074 	addw x,acc16
      0016F3 1F 03            [ 2] 4075 	ldw (GOS_RET,sp),x 
      0016F5                       4076 go_common: 
      0016F5 CD 12 A2         [ 4] 4077 	call relation 
      0016F8 A1 0A            [ 1] 4078 	cp a,#TK_INTGR
      0016FA 27 03            [ 1] 4079 	jreq 1$ 
      0016FC CC 06 90         [ 2] 4080 	jp syntax_error
      0016FF                       4081 1$: 
      0016FF CD 03 75         [ 4] 4082 	call search_lineno  
      001702 5D               [ 2] 4083 	tnzw x 
      001703 26 05            [ 1] 4084 	jrne 2$ 
      001705 A6 05            [ 1] 4085 	ld a,#ERR_NO_LINE 
      001707 CC 06 92         [ 2] 4086 	jp tb_error 
      00170A                       4087 2$: 
      00170A CF 00 03         [ 2] 4088 	ldw basicptr,x 
      00170D E6 02            [ 1] 4089 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00170F AB 03            [ 1] 4090 	add a,#3 
      001711 C7 00 02         [ 1] 4091 	ld count,a 
      001714 FE               [ 2] 4092 	ldw x,(x)
      001715 CF 00 05         [ 2] 4093 	ldw lineno,x 
      001718 35 03 00 01      [ 1] 4094 	mov in,#3 
      00171C 81               [ 4] 4095 	ret 
                                   4096 
                                   4097 ;------------------------
                                   4098 ; BASIC: RETURN 
                                   4099 ; exit from a subroutine 
                                   4100 ; cstack is 2 level deep from interp_loop 
                                   4101 ;------------------------
      00171D                       4102 return:
      00171D 72 00 00 25 05   [ 2] 4103 	btjt flags,#FRUN,0$ 
      001722 A6 06            [ 1] 4104 	ld a,#ERR_RUN_ONLY
      001724 CC 06 92         [ 2] 4105 	jp tb_error 
      001727                       4106 0$:	
      001727 1E 03            [ 2] 4107 	ldw x,(GOS_RET,sp) 
      001729 CF 00 03         [ 2] 4108 	ldw basicptr,x 
      00172C E6 02            [ 1] 4109 	ld a,(2,x)
      00172E AB 03            [ 1] 4110 	add a,#3 
      001730 C7 00 02         [ 1] 4111 	ld count,a 
      001733 35 03 00 01      [ 1] 4112 	mov in,#3
      001737 FE               [ 2] 4113 	ldw x,(x)
      001738 CF 00 05         [ 2] 4114 	ldw lineno,x 
      00173B 4F               [ 1] 4115 	clr a 
      00173C 85               [ 2] 4116 	popw x 
      00173D                       4117 	_drop 2
      00173D 5B 02            [ 2]    1     addw sp,#2 
      00173F 89               [ 2] 4118 	pushw x
      001740 81               [ 4] 4119 	ret  
                                   4120 
                                   4121 
                                   4122 ;----------------------------------
                                   4123 ; BASIC: RUN
                                   4124 ; run BASIC program in RAM
                                   4125 ;----------------------------------- 
      001741                       4126 run: 
      001741 72 01 00 25 02   [ 2] 4127 	btjf flags,#FRUN,0$  
      001746 4F               [ 1] 4128 	clr a 
      001747 81               [ 4] 4129 	ret
      001748                       4130 0$: 
      001748 CE 00 1C         [ 2] 4131 	ldw x,txtbgn
      00174B C3 00 1E         [ 2] 4132 	cpw x,txtend 
      00174E 2B 02            [ 1] 4133 	jrmi 1$ 
      001750 4F               [ 1] 4134 	clr a 
      001751 81               [ 4] 4135 	ret 
      001752 CD 13 10         [ 4] 4136 1$: call ubound 
      001755                       4137 	_drop 2 
      001755 5B 02            [ 2]    1     addw sp,#2 
      001757 CE 00 1C         [ 2] 4138 	ldw x,txtbgn 
      00175A CF 00 03         [ 2] 4139 	ldw basicptr,x 
      00175D E6 02            [ 1] 4140 	ld a,(2,x)
      00175F AB 02            [ 1] 4141 	add a,#2 ; consider that in start at 3  
      001761 C7 00 02         [ 1] 4142 	ld count,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001764 FE               [ 2] 4143 	ldw x,(x)
      001765 CF 00 05         [ 2] 4144 	ldw lineno,x
      001768 35 03 00 01      [ 1] 4145 	mov in,#3	
      00176C 72 10 00 25      [ 1] 4146 	bset flags,#FRUN 
      001770 CC 07 5E         [ 2] 4147 	jp interp_loop 
                                   4148 
                                   4149 
                                   4150 ;----------------------
                                   4151 ; BASIC: STOP 
                                   4152 ; stop running program
                                   4153 ;---------------------- 
      001773                       4154 stop: 
      001773 72 00 00 25 02   [ 2] 4155 	btjt flags,#FRUN,0$  
      001778 4F               [ 1] 4156 	clr a 
      001779 81               [ 4] 4157 	ret 
                                   4158 ; clean dstack and cstack 
      00177A AE 17 FF         [ 2] 4159 0$: ldw x,#STACK_EMPTY 
      00177D 94               [ 1] 4160 	ldw sp,x 
      00177E 72 11 00 25      [ 1] 4161 	bres flags,#FRUN 
      001782 CC 06 F0         [ 2] 4162 	jp warm_start
                                   4163 
                                   4164 ;-----------------------
                                   4165 ; BASIC: NEW
                                   4166 ; from command line only 
                                   4167 ; free program memory
                                   4168 ; and clear variables 
                                   4169 ;------------------------
      001785                       4170 new: 
      001785 72 01 00 25 02   [ 2] 4171 	btjf flags,#FRUN,0$ 
      00178A 4F               [ 1] 4172 	clr a 
      00178B 81               [ 4] 4173 	ret 
      00178C                       4174 0$:	
      00178C CD 05 6E         [ 4] 4175 	call clear_basic 
      00178F 4F               [ 1] 4176 	clr a 
      001790 81               [ 4] 4177 	ret 
                                   4178 	 
                                   4179 ;--------------------
                                   4180 ; input:
                                   4181 ;   X     increment 
                                   4182 ; output:
                                   4183 ;   farptr  incremented 
                                   4184 ;---------------------
      001791                       4185 incr_farptr:
      001791 72 BB 00 15      [ 2] 4186 	addw x,farptr+1 
      001795 24 04            [ 1] 4187 	jrnc 1$
      001797 72 5C 00 14      [ 1] 4188 	inc farptr 
      00179B CF 00 15         [ 2] 4189 1$:	ldw farptr+1,x  
      00179E 81               [ 4] 4190 	ret 
                                   4191 
                                   4192 ;------------------------------
                                   4193 ; extended flash memory used as FLASH_DRIVE 
                                   4194 ; seek end of used flash drive   
                                   4195 ; starting at 0x10000 address.
                                   4196 ; 4 consecutives 0 bytes signal free space. 
                                   4197 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4198 ;	none
                                   4199 ; output:
                                   4200 ;   ffree     free_addr| 0 if memory full.
                                   4201 ;------------------------------
      00179F                       4202 seek_fdrive:
      00179F A6 01            [ 1] 4203 	ld a,#1
      0017A1 C7 00 14         [ 1] 4204 	ld farptr,a 
      0017A4 5F               [ 1] 4205 	clrw x 
      0017A5 CF 00 15         [ 2] 4206 	ldw farptr+1,x 
      0017A8                       4207 1$:
      0017A8 5F               [ 1] 4208 	clrw x 
      0017A9 92 AF 00 14      [ 5] 4209 	ldf a,([farptr],x) 
      0017AD 26 15            [ 1] 4210 	jrne 2$
      0017AF 5C               [ 1] 4211 	incw x 
      0017B0 92 AF 00 14      [ 5] 4212 	ldf a,([farptr],x)
      0017B4 26 0E            [ 1] 4213 	jrne 2$ 
      0017B6 5C               [ 1] 4214 	incw x 
      0017B7 92 AF 00 14      [ 5] 4215 	ldf a,([farptr],x)
      0017BB 26 07            [ 1] 4216 	jrne 2$ 
      0017BD 5C               [ 1] 4217 	incw x 
      0017BE 92 AF 00 14      [ 5] 4218 	ldf a,([farptr],x)
      0017C2 27 28            [ 1] 4219 	jreq 4$ 
      0017C4                       4220 2$: 
      0017C4 1C 00 01         [ 2] 4221 	addw x,#1
      0017C7 CD 17 91         [ 4] 4222 	call incr_farptr
      0017CA AE 02 7F         [ 2] 4223 	ldw x,#0x27f 
      0017CD C3 00 14         [ 2] 4224 	cpw x,farptr
      0017D0 2A D6            [ 1] 4225 	jrpl 1$
      0017D2 72 5F 00 17      [ 1] 4226 	clr ffree 
      0017D6 72 5F 00 18      [ 1] 4227 	clr ffree+1 
      0017DA 72 5F 00 19      [ 1] 4228 	clr ffree+2 
      0017DE 72 5F 00 08      [ 1] 4229 	clr acc24 
      0017E2 72 5F 00 09      [ 1] 4230 	clr acc16
      0017E6 72 5F 00 0A      [ 1] 4231 	clr acc8 
      0017EA 20 20            [ 2] 4232 	jra 5$
      0017EC                       4233 4$: ; copy farptr to ffree	 
      0017EC CE 00 15         [ 2] 4234 	ldw x,farptr+1 
      0017EF A3 00 00         [ 2] 4235 	cpw x,#fdrive 
      0017F2 27 06            [ 1] 4236 	jreq 41$
                                   4237 	; there is a file, last 0 of that file must be skipped.
      0017F4 AE 00 01         [ 2] 4238 	ldw x,#1
      0017F7 CD 17 91         [ 4] 4239 	call incr_farptr
      0017FA                       4240 41$: 
      0017FA CE 00 14         [ 2] 4241 	ldw x,farptr 
      0017FD C6 00 16         [ 1] 4242 	ld a,farptr+2 
      001800 CF 00 17         [ 2] 4243 	ldw ffree,x 
      001803 C7 00 19         [ 1] 4244 	ld ffree+2,a  
      001806 CF 00 08         [ 2] 4245 	ldw acc24,x 
      001809 C7 00 0A         [ 1] 4246 	ld acc8,a 
      00180C CE 18 1E         [ 2] 4247 5$:	ldw x,ffree_msg 
      00180F CD 02 30         [ 4] 4248 	call puts 
      001812 5F               [ 1] 4249 	clrw x 
      001813 A6 10            [ 1] 4250 	ld a,#16
      001815 CD 08 C5         [ 4] 4251 	call prti24 
      001818 A6 0D            [ 1] 4252 	ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00181A CD 02 1E         [ 4] 4253 	call putc 
      00181D 81               [ 4] 4254 	ret 
      00181E 0A 66 72 65 65 20 66  4255 ffree_msg: .asciz "\nfree flash begin at: "
             6C 61 73 68 20 62 65
             67 69 6E 20 61 74 3A
             20 00
                                   4256 
                                   4257 ;-----------------------
                                   4258 ; compare file name 
                                   4259 ; with name pointed by Y  
                                   4260 ; input:
                                   4261 ;   farptr   file name 
                                   4262 ;   Y        target name 
                                   4263 ; output:
                                   4264 ;   farptr 	 at file_name
                                   4265 ;   X 		 farptr[x] point at size field  
                                   4266 ;   Carry    0|1 no match|match  
                                   4267 ;----------------------
      001835                       4268 cmp_name:
      001835 5F               [ 1] 4269 	clrw x
      001836 92 AF 00 14      [ 5] 4270 1$:	ldf a,([farptr],x)
      00183A 90 F1            [ 1] 4271 	cp a,(y)
      00183C 26 08            [ 1] 4272 	jrne 4$
      00183E 4D               [ 1] 4273 	tnz a 
      00183F 27 12            [ 1] 4274 	jreq 9$ 
      001841 5C               [ 1] 4275     incw x 
      001842 90 5C            [ 1] 4276 	incw y 
      001844 20 F0            [ 2] 4277 	jra 1$
      001846                       4278 4$: ;no match 
      001846 4D               [ 1] 4279 	tnz a 
      001847 27 07            [ 1] 4280 	jreq 5$
      001849 5C               [ 1] 4281 	incw x 
      00184A 92 AF 00 14      [ 5] 4282 	ldf a,([farptr],x)
      00184E 20 F6            [ 2] 4283 	jra 4$  
      001850 5C               [ 1] 4284 5$:	incw x ; farptr[x] point at 'size' field 
      001851 98               [ 1] 4285 	rcf 
      001852 81               [ 4] 4286 	ret
      001853                       4287 9$: ; match  
      001853 5C               [ 1] 4288 	incw x  ; farptr[x] at 'size' field 
      001854 99               [ 1] 4289 	scf 
      001855 81               [ 4] 4290 	ret 
                                   4291 
                                   4292 ;-----------------------
                                   4293 ; search file in 
                                   4294 ; flash memory 
                                   4295 ; input:
                                   4296 ;   Y       file name  
                                   4297 ; output:
                                   4298 ;   farptr  addr at name|0
                                   4299 ;-----------------------
                           000001  4300 	FSIZE=1
                           000003  4301 	YSAVE=3
                           000004  4302 	VSIZE=4 
      001856                       4303 search_file: 
      001856                       4304 	_vars VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001856 52 04            [ 2]    1     sub sp,#VSIZE 
      001858 17 03            [ 2] 4305 	ldw (YSAVE,sp),y  
      00185A 5F               [ 1] 4306 	clrw x 
      00185B CF 00 15         [ 2] 4307 	ldw farptr+1,x 
      00185E 35 01 00 14      [ 1] 4308 	mov farptr,#1
      001862                       4309 1$:	
                                   4310 ; check if farptr is after any file 
                                   4311 ; if  0 then so.
      001862 92 BC 00 14      [ 5] 4312 	ldf a,[farptr]
      001866 27 24            [ 1] 4313 	jreq 6$
      001868 5F               [ 1] 4314 2$: clrw x 	
      001869 16 03            [ 2] 4315 	ldw y,(YSAVE,sp) 
      00186B CD 18 35         [ 4] 4316 	call cmp_name
      00186E 25 2C            [ 1] 4317 	jrc 9$
      001870 92 AF 00 14      [ 5] 4318 	ldf a,([farptr],x)
      001874 6B 01            [ 1] 4319 	ld (FSIZE,sp),a 
      001876 5C               [ 1] 4320 	incw x 
      001877 92 AF 00 14      [ 5] 4321 	ldf a,([farptr],x)
      00187B 6B 02            [ 1] 4322 	ld (FSIZE+1,sp),a 
      00187D 5C               [ 1] 4323 	incw x 
      00187E 72 FB 01         [ 2] 4324 	addw x,(FSIZE,sp) ; count to skip 
      001881 CD 17 91         [ 4] 4325 	call incr_farptr ; now at next file 'name_field'
      001884 AE 02 80         [ 2] 4326 	ldw x,#0x280
      001887 C3 00 14         [ 2] 4327 	cpw x,farptr 
      00188A 2A D6            [ 1] 4328 	jrpl 1$
      00188C                       4329 6$: ; file not found 
      00188C 72 5F 00 14      [ 1] 4330 	clr farptr
      001890 72 5F 00 15      [ 1] 4331 	clr farptr+1 
      001894 72 5F 00 16      [ 1] 4332 	clr farptr+2 
      001898                       4333 	_drop VSIZE 
      001898 5B 04            [ 2]    1     addw sp,#VSIZE 
      00189A 98               [ 1] 4334 	rcf
      00189B 81               [ 4] 4335 	ret
      00189C                       4336 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      00189C                       4337 	_drop VSIZE 
      00189C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00189E 99               [ 1] 4338 	scf 	
      00189F 81               [ 4] 4339 	ret
                                   4340 
                                   4341 ;--------------------------------
                                   4342 ; BASIC: SAVE "name" 
                                   4343 ; save text program in 
                                   4344 ; flash memory used as 
                                   4345 ;--------------------------------
      0018A0                       4346 save:
      0018A0 72 01 00 25 05   [ 2] 4347 	btjf flags,#FRUN,0$ 
      0018A5 A6 07            [ 1] 4348 	ld a,#ERR_CMD_ONLY 
      0018A7 CC 06 92         [ 2] 4349 	jp tb_error
      0018AA                       4350 0$:	 
      0018AA CE 00 1E         [ 2] 4351 	ldw x,txtend 
      0018AD 72 B0 00 1C      [ 2] 4352 	subw x,txtbgn
      0018B1 26 02            [ 1] 4353 	jrne 10$
                                   4354 ; nothing to save 
      0018B3 4F               [ 1] 4355 	clr a 
      0018B4 81               [ 4] 4356 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018B5                       4357 10$:	
      0018B5 C6 00 17         [ 1] 4358 	ld a,ffree 
      0018B8 CA 00 18         [ 1] 4359 	or a,ffree+1
      0018BB CA 00 19         [ 1] 4360 	or a,ffree+2 
      0018BE 26 05            [ 1] 4361 	jrne 1$
      0018C0 A6 01            [ 1] 4362 	ld a,#ERR_MEM_FULL
      0018C2 CC 06 92         [ 2] 4363 	jp tb_error 
      0018C5 CD 0C 48         [ 4] 4364 1$: call get_token	
      0018C8 A1 06            [ 1] 4365 	cp a,#TK_QSTR
      0018CA 27 03            [ 1] 4366 	jreq 2$
      0018CC CC 06 90         [ 2] 4367 	jp syntax_error
      0018CF                       4368 2$: ; check for existing file of that name 
      0018CF 90 CE 00 12      [ 2] 4369 	ldw y,tokval ; file name pointer 
      0018D3 CD 18 56         [ 4] 4370 	call search_file 
      0018D6 24 05            [ 1] 4371 	jrnc 3$ 
      0018D8 A6 08            [ 1] 4372 	ld a,#ERR_DUPLICATE 
      0018DA CC 06 92         [ 2] 4373 	jp tb_error 
      0018DD                       4374 3$:	;** write file name to flash **
      0018DD CE 00 17         [ 2] 4375 	ldw x,ffree 
      0018E0 C6 00 19         [ 1] 4376 	ld a,ffree+2 
      0018E3 CF 00 14         [ 2] 4377 	ldw farptr,x 
      0018E6 C7 00 16         [ 1] 4378 	ld farptr+2,a 
      0018E9 CE 00 12         [ 2] 4379 	ldw x,tokval 
      0018EC CD 03 06         [ 4] 4380 	call strlen 
      0018EF 5C               [ 1] 4381 	incw  x
      0018F0 89               [ 2] 4382 	pushw x 
      0018F1 5F               [ 1] 4383 	clrw x   
      0018F2 90 CE 00 12      [ 2] 4384 	ldw y,tokval 
      0018F6 CD 01 D1         [ 4] 4385 	call write_block  
      0018F9                       4386 	_drop 2 ; drop pushed X 
      0018F9 5B 02            [ 2]    1     addw sp,#2 
                                   4387 ;** write file length after name **
      0018FB CE 00 1E         [ 2] 4388 	ldw x,txtend 
      0018FE 72 B0 00 1C      [ 2] 4389 	subw x,txtbgn
      001902 89               [ 2] 4390 	pushw x ; file size 
      001903 5F               [ 1] 4391 	clrw x 
      001904 7B 01            [ 1] 4392 	ld a,(1,sp)
      001906 CD 01 5C         [ 4] 4393 	call write_byte 
      001909 5C               [ 1] 4394 	incw x 
      00190A 7B 02            [ 1] 4395 	ld a,(2,sp)
      00190C CD 01 5C         [ 4] 4396 	call write_byte
      00190F 5C               [ 1] 4397 	incw x  
      001910 CD 17 91         [ 4] 4398 	call incr_farptr ; move farptr after SIZE field 
                                   4399 ;** write BASIC text **
                                   4400 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001913 1E 01            [ 2] 4401 	ldw x,(1,sp)
      001915 89               [ 2] 4402 	pushw x 
      001916 5F               [ 1] 4403 	clrw x 
      001917 90 CE 00 1C      [ 2] 4404 	ldw y,txtbgn  ; BASIC text to save 
      00191B CD 01 D1         [ 4] 4405 	call write_block 
      00191E                       4406 	_drop 2 ;  drop BSIZE argument
      00191E 5B 02            [ 2]    1     addw sp,#2 
                                   4407 ; save farptr in ffree
      001920 CE 00 14         [ 2] 4408 	ldw x,farptr 
      001923 C6 00 16         [ 1] 4409 	ld a,farptr+2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001926 CF 00 17         [ 2] 4410 	ldw ffree,x 
      001929 C7 00 19         [ 1] 4411 	ld ffree+2,a
                                   4412 ; write 4 zero bytes as a safe gard 
      00192C 5F               [ 1] 4413     clrw x 
      00192D 4F               [ 1] 4414 	clr a 
      00192E CD 01 5C         [ 4] 4415 	call write_byte 
      001931 5C               [ 1] 4416 	incw x 
      001932 4F               [ 1] 4417 	clr a 
      001933 CD 01 5C         [ 4] 4418 	call write_byte
      001936 5C               [ 1] 4419 	incw x 
      001937 4F               [ 1] 4420 	clr a 
      001938 CD 01 5C         [ 4] 4421 	call write_byte
                                   4422 ; display saved size  
      00193B 85               [ 2] 4423 	popw x ; first copy of BSIZE 
      00193C A6 0A            [ 1] 4424 	ld a,#TK_INTGR 
      00193E 81               [ 4] 4425 	ret 
                                   4426 
                                   4427 
                                   4428 ;------------------------
                                   4429 ; BASIC: LOAD "file" 
                                   4430 ; load file to RAM 
                                   4431 ; for execution 
                                   4432 ;------------------------
      00193F                       4433 load:
      00193F 72 01 00 25 07   [ 2] 4434 	btjf flags,#FRUN,0$ 
      001944 27 05            [ 1] 4435 	jreq 0$ 
      001946 A6 07            [ 1] 4436 	ld a,#ERR_CMD_ONLY 
      001948 CC 06 92         [ 2] 4437 	jp tb_error 
      00194B                       4438 0$:	
      00194B CD 0C 48         [ 4] 4439 	call get_token 
      00194E A1 06            [ 1] 4440 	cp a,#TK_QSTR
      001950 27 03            [ 1] 4441 	jreq 1$
      001952 CC 06 90         [ 2] 4442 	jp syntax_error 
      001955                       4443 1$:	
      001955 90 93            [ 1] 4444 	ldw y,x 
      001957 CD 18 56         [ 4] 4445 	call search_file 
      00195A 25 05            [ 1] 4446 	jrc 2$ 
      00195C A6 09            [ 1] 4447 	ld a,#ERR_NOT_FILE
      00195E CC 06 92         [ 2] 4448 	jp tb_error  
      001961                       4449 2$:	
      001961 CD 17 91         [ 4] 4450 	call incr_farptr  
      001964 CD 05 6E         [ 4] 4451 	call clear_basic  
      001967 5F               [ 1] 4452 	clrw x
      001968 92 AF 00 14      [ 5] 4453 	ldf a,([farptr],x)
      00196C 90 95            [ 1] 4454 	ld yh,a 
      00196E 5C               [ 1] 4455 	incw x  
      00196F 92 AF 00 14      [ 5] 4456 	ldf a,([farptr],x)
      001973 5C               [ 1] 4457 	incw x 
      001974 90 97            [ 1] 4458 	ld yl,a 
      001976 72 B9 00 1C      [ 2] 4459 	addw y,txtbgn
      00197A 90 CF 00 1E      [ 2] 4460 	ldw txtend,y
      00197E 90 CE 00 1C      [ 2] 4461 	ldw y,txtbgn
      001982                       4462 3$:	; load BASIC text 	
      001982 92 AF 00 14      [ 5] 4463 	ldf a,([farptr],x)
      001986 90 F7            [ 1] 4464 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001988 5C               [ 1] 4465 	incw x 
      001989 90 5C            [ 1] 4466 	incw y 
      00198B 90 C3 00 1E      [ 2] 4467 	cpw y,txtend 
      00198F 2B F1            [ 1] 4468 	jrmi 3$
                                   4469 ; return loaded size 	 
      001991 CE 00 1E         [ 2] 4470 	ldw x,txtend 
      001994 72 B0 00 1C      [ 2] 4471 	subw x,txtbgn
      001998 CD 0F 0E         [ 4] 4472 	call dpush 
      00199B CD 0F 7F         [ 4] 4473 	call prt_tos 
      00199E 4F               [ 1] 4474 	clr a  
      00199F 81               [ 4] 4475 	ret 
                                   4476 
                                   4477 ;-----------------------------------
                                   4478 ; BASIC: FORGET ["file_name"] 
                                   4479 ; erase file_name and all others 
                                   4480 ; after it. 
                                   4481 ; without argument erase all files 
                                   4482 ;-----------------------------------
      0019A0                       4483 forget:
      0019A0 CD 0C 48         [ 4] 4484 	call get_token 
      0019A3 A1 00            [ 1] 4485 	cp a,#TK_NONE 
      0019A5 27 1D            [ 1] 4486 	jreq 3$ 
      0019A7 A1 06            [ 1] 4487 	cp a,#TK_QSTR
      0019A9 27 03            [ 1] 4488 	jreq 1$
      0019AB CC 06 90         [ 2] 4489 	jp syntax_error
      0019AE 90 CE 00 12      [ 2] 4490 1$: ldw y,tokval 
      0019B2 CD 18 56         [ 4] 4491 	call search_file
      0019B5 25 05            [ 1] 4492 	jrc 2$
      0019B7 A6 09            [ 1] 4493 	ld a,#ERR_NOT_FILE 
      0019B9 CC 06 92         [ 2] 4494 	jp tb_error 
      0019BC                       4495 2$: 
      0019BC CE 00 14         [ 2] 4496 	ldw x,farptr
      0019BF C6 00 16         [ 1] 4497 	ld a,farptr+2
      0019C2 20 0B            [ 2] 4498 	jra 4$ 
      0019C4                       4499 3$: ; forget all files 
      0019C4 AE 00 00         [ 2] 4500 	ldw x,#fdrive
      0019C7 4F               [ 1] 4501 	clr a 
      0019C8 01               [ 1] 4502 	rrwa x 
      0019C9 CF 00 14         [ 2] 4503 	ldw farptr,x 
      0019CC C7 00 16         [ 1] 4504 	ld farptr+2,a 
      0019CF                       4505 4$:
      0019CF CF 00 17         [ 2] 4506 	ldw ffree,x 
      0019D2 C7 00 19         [ 1] 4507 	ld ffree+2,a 
      0019D5 5F               [ 1] 4508 5$:	clrw x 
      0019D6 4F               [ 1] 4509 	clr a  
      0019D7 CD 01 5C         [ 4] 4510 	call write_byte 
      0019DA AE 00 01         [ 2] 4511 	ldw x,#1 
      0019DD CD 17 91         [ 4] 4512 	call incr_farptr
      0019E0 C6 00 14         [ 1] 4513 	ld a,farptr
      0019E3 C1 00 17         [ 1] 4514 	cp a,ffree 
      0019E6 2B ED            [ 1] 4515 	jrmi 5$ 
      0019E8 CE 00 15         [ 2] 4516 	ldw x,farptr+1 
      0019EB C3 00 18         [ 2] 4517 	cpw x,ffree+1
      0019EE 2B E5            [ 1] 4518 	jrmi 5$
      0019F0 81               [ 4] 4519 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4520 
                                   4521 ;----------------------
                                   4522 ; BASIC: DIR 
                                   4523 ; list saved files 
                                   4524 ;----------------------
                           000001  4525 	COUNT=1 ; files counter 
                           000002  4526 	VSIZE=2 
      0019F1                       4527 directory:
      0019F1                       4528 	_vars VSIZE 
      0019F1 52 02            [ 2]    1     sub sp,#VSIZE 
      0019F3 5F               [ 1] 4529 	clrw x 
      0019F4 1F 01            [ 2] 4530 	ldw (COUNT,sp),x 
      0019F6 CF 00 15         [ 2] 4531 	ldw farptr+1,x 
      0019F9 35 01 00 14      [ 1] 4532 	mov farptr,#1 
      0019FD                       4533 dir_loop:
      0019FD 5F               [ 1] 4534 	clrw x 
      0019FE 92 AF 00 14      [ 5] 4535 	ldf a,([farptr],x)
      001A02 27 3B            [ 1] 4536 	jreq 8$ 
      001A04                       4537 1$: ;name loop 	
      001A04 92 AF 00 14      [ 5] 4538 	ldf a,([farptr],x)
      001A08 27 06            [ 1] 4539 	jreq 2$ 
      001A0A CD 02 1E         [ 4] 4540 	call putc 
      001A0D 5C               [ 1] 4541 	incw x 
      001A0E 20 F4            [ 2] 4542 	jra 1$
      001A10 5C               [ 1] 4543 2$: incw x ; skip ending 0. 
      001A11 A6 20            [ 1] 4544 	ld a,#SPACE 
      001A13 CD 02 1E         [ 4] 4545 	call putc 
                                   4546 ; get file size 	
      001A16 92 AF 00 14      [ 5] 4547 	ldf a,([farptr],x)
      001A1A 90 95            [ 1] 4548 	ld yh,a 
      001A1C 5C               [ 1] 4549 	incw x 
      001A1D 92 AF 00 14      [ 5] 4550 	ldf a,([farptr],x)
      001A21 5C               [ 1] 4551 	incw x 
      001A22 90 97            [ 1] 4552 	ld yl,a 
      001A24 90 89            [ 2] 4553 	pushw y 
      001A26 72 FB 01         [ 2] 4554 	addw x,(1,sp)
      001A29 CD 17 91         [ 4] 4555 	call incr_farptr 
      001A2C 85               [ 2] 4556 	popw x ; file size 
      001A2D CD 0F 0E         [ 4] 4557 	call dpush 
      001A30 CD 0F 7F         [ 4] 4558 	call prt_tos 
      001A33 A6 0D            [ 1] 4559 	ld a,#CR 
      001A35 CD 02 1E         [ 4] 4560 	call putc
      001A38 1E 01            [ 2] 4561 	ldw x,(COUNT,sp)
      001A3A 5C               [ 1] 4562 	incw x
      001A3B 1F 01            [ 2] 4563 	ldw (COUNT,sp),x  
      001A3D 20 BE            [ 2] 4564 	jra dir_loop 
      001A3F                       4565 8$:
      001A3F 1E 01            [ 2] 4566 	ldw x,(COUNT,sp)
      001A41 CD 0F 0E         [ 4] 4567 	call dpush 
      001A44 CD 0F 7F         [ 4] 4568 	call prt_tos
      001A47 AE 1A 50         [ 2] 4569 	ldw x,#file_count 
      001A4A CD 02 30         [ 4] 4570 	call puts  
      001A4D                       4571 	_drop VSIZE 
      001A4D 5B 02            [ 2]    1     addw sp,#VSIZE 
      001A4F 81               [ 4] 4572 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A50 20 66 69 6C 65 73 0A  4573 file_count: .asciz " files\n"
             00
                                   4574 
                                   4575 ;---------------------
                                   4576 ; BASIC: WRITE expr1,expr2 
                                   4577 ; write byte to FLASH or EEPROM 
                                   4578 ; input:
                                   4579 ;   expr1  	is address 
                                   4580 ;   expr2   is byte to write
                                   4581 ; output:
                                   4582 ;   none 
                                   4583 ;---------------------
      001A58                       4584 write:
      001A58 72 5F 00 14      [ 1] 4585 	clr farptr ; expect 16 bits address 
      001A5C CD 11 5C         [ 4] 4586 	call arg_list  
      001A5F A1 02            [ 1] 4587 	cp a,#2
      001A61 27 03            [ 1] 4588 	jreq 1$
      001A63 CC 06 90         [ 2] 4589 	jp syntax_error
      001A66                       4590 1$:
      001A66 CD 0F 1B         [ 4] 4591 	call dpop 
      001A69 9F               [ 1] 4592 	ld a,xl 
      001A6A CD 0F 1B         [ 4] 4593 	call dpop 
      001A6D CF 00 15         [ 2] 4594 	ldw farptr+1,x 
      001A70 5F               [ 1] 4595 	clrw x 
      001A71 CD 01 5C         [ 4] 4596 	call write_byte 
      001A74 81               [ 4] 4597 	ret 
                                   4598 
                                   4599 
                                   4600 ;---------------------
                                   4601 ;BASIC: CHAR(expr)
                                   4602 ; évaluate expression 
                                   4603 ; and take the 7 least 
                                   4604 ; bits as ASCII character
                                   4605 ;---------------------
      001A75                       4606 char:
      001A75 A6 04            [ 1] 4607 	ld a,#TK_LPAREN 
      001A77 CD 11 4F         [ 4] 4608 	call expect 
      001A7A CD 12 A2         [ 4] 4609 	call relation 
      001A7D A1 0A            [ 1] 4610 	cp a,#TK_INTGR 
      001A7F 27 03            [ 1] 4611 	jreq 1$
      001A81 CC 06 90         [ 2] 4612 	jp syntax_error
      001A84                       4613 1$:	
      001A84 A6 05            [ 1] 4614 	ld a,#TK_RPAREN 
      001A86 CD 11 4F         [ 4] 4615 	call expect
      001A89 CD 0F 1B         [ 4] 4616 	call dpop 
      001A8C 9F               [ 1] 4617 	ld a,xl 
      001A8D A4 7F            [ 1] 4618 	and a,#0x7f 
      001A8F 97               [ 1] 4619 	ld xl,a
      001A90 CF 00 12         [ 2] 4620 	ldw tokval,x  
      001A93 A6 0B            [ 1] 4621 	ld a,#TK_CHAR
      001A95 81               [ 4] 4622 	ret
                                   4623 
                                   4624 ;---------------------
                                   4625 ; BASIC: ASC(string|char)
                                   4626 ; extract first character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4627 ; of string argument 
                                   4628 ; return it as TK_INTGR 
                                   4629 ;---------------------
      001A96                       4630 ascii:
      001A96 A6 04            [ 1] 4631 	ld a,#TK_LPAREN
      001A98 CD 11 4F         [ 4] 4632 	call expect 
      001A9B CD 0C 48         [ 4] 4633 	call get_token 
      001A9E A1 06            [ 1] 4634 	cp a,#TK_QSTR 
      001AA0 27 07            [ 1] 4635 	jreq 1$
      001AA2 A1 0B            [ 1] 4636 	cp a,#TK_CHAR 
      001AA4 27 09            [ 1] 4637 	jreq 2$ 
      001AA6 CC 06 90         [ 2] 4638 	jp syntax_error
      001AA9 CE 00 12         [ 2] 4639 1$: ldw x,tokval 
      001AAC F6               [ 1] 4640 	ld a,(x)
      001AAD 20 04            [ 2] 4641 	jra 3$
      001AAF CE 00 12         [ 2] 4642 2$: ldw x,tokval
      001AB2 9F               [ 1] 4643 	ld a,xl 
      001AB3 5F               [ 1] 4644 3$:	clrw x 
      001AB4 97               [ 1] 4645 	ld xl,a 
      001AB5 CD 0F 0E         [ 4] 4646 	call dpush 
      001AB8 A6 05            [ 1] 4647 	ld a,#TK_RPAREN 
      001ABA CD 11 4F         [ 4] 4648 	call expect 
      001ABD CD 0F 1B         [ 4] 4649 	call dpop  
      001AC0 CF 00 12         [ 2] 4650 	ldw tokval,x 
      001AC3 A6 0A            [ 1] 4651 	ld a,#TK_INTGR 
      001AC5 81               [ 4] 4652 	ret 
                                   4653 
                                   4654 ;---------------------
                                   4655 ;BASIC: KEY
                                   4656 ; wait for a character 
                                   4657 ; received from STDIN 
                                   4658 ; input:
                                   4659 ;	none 
                                   4660 ; output:
                                   4661 ;	X 		ASCII character 
                                   4662 ;---------------------
      001AC6                       4663 key:
      001AC6 CD 02 27         [ 4] 4664 	call getc 
      001AC9 5F               [ 1] 4665 	clrw x 
      001ACA 97               [ 1] 4666 	ld xl,a 
      001ACB CF 00 12         [ 2] 4667 	ldw tokval,x 
      001ACE A6 0A            [ 1] 4668 	ld a,#TK_INTGR
      001AD0 81               [ 4] 4669 	ret
                                   4670 
                                   4671 ;----------------------
                                   4672 ; BASIC: QKEY
                                   4673 ; Return true if there 
                                   4674 ; is a character in 
                                   4675 ; waiting in STDIN 
                                   4676 ; input:
                                   4677 ;  none 
                                   4678 ; output:
                                   4679 ;   X 		0|1 
                                   4680 ;-----------------------
      001AD1                       4681 qkey: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001AD1 5F               [ 1] 4682 	clrw x 
      001AD2 72 0B 52 40 01   [ 2] 4683 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001AD7 5C               [ 1] 4684 	incw x 
      001AD8 A6 0A            [ 1] 4685 9$: ld a,#TK_INTGR
      001ADA 81               [ 4] 4686 	ret 
                                   4687 
                                   4688 ;---------------------
                                   4689 ; BASIC: GPIO(expr,reg)
                                   4690 ; return gpio address 
                                   4691 ; expr {0..8}
                                   4692 ; input:
                                   4693 ;   none 
                                   4694 ; output:
                                   4695 ;   X 		gpio register address
                                   4696 ;----------------------------
      001ADB                       4697 gpio:
      001ADB A6 04            [ 1] 4698 	ld a,#TK_LPAREN 
      001ADD CD 11 4F         [ 4] 4699 	call expect 
      001AE0 CD 11 5C         [ 4] 4700 	call arg_list
      001AE3 A1 02            [ 1] 4701 	cp a,#2
      001AE5 27 03            [ 1] 4702 	jreq 1$
      001AE7 CC 06 90         [ 2] 4703 	jp syntax_error  
      001AEA                       4704 1$:	
      001AEA A6 05            [ 1] 4705 	ld a,#TK_RPAREN 
      001AEC CD 11 4F         [ 4] 4706 	call expect 
      001AEF CD 0F 1B         [ 4] 4707 	call dpop
      001AF2 89               [ 2] 4708 	pushw x 
      001AF3 CD 0F 1B         [ 4] 4709 	call dpop 
      001AF6 5D               [ 2] 4710 	tnzw x 
      001AF7 2B 13            [ 1] 4711 	jrmi bad_port
      001AF9 A3 00 09         [ 2] 4712 	cpw x,#9
      001AFC 2A 0E            [ 1] 4713 	jrpl bad_port
      001AFE A6 05            [ 1] 4714 	ld a,#5
      001B00 42               [ 4] 4715 	mul x,a
      001B01 1C 50 00         [ 2] 4716 	addw x,#GPIO_BASE 
      001B04 72 FB 01         [ 2] 4717 	addw x,(1,sp)
      001B07                       4718 	_drop 2 
      001B07 5B 02            [ 2]    1     addw sp,#2 
      001B09 A6 0A            [ 1] 4719 	ld a,#TK_INTGR
      001B0B 81               [ 4] 4720 	ret
      001B0C                       4721 bad_port:
      001B0C A6 0A            [ 1] 4722 	ld a,#ERR_BAD_VALUE
      001B0E CC 06 92         [ 2] 4723 	jp tb_error
                                   4724 
                                   4725 ;----------------------
                                   4726 ; BASIC: ODR 
                                   4727 ; return offset of gpio
                                   4728 ; ODR register: 0
                                   4729 ; ---------------------
      001B11                       4730 port_odr:
      001B11 5F               [ 1] 4731 	clrw x 
      001B12 CF 00 12         [ 2] 4732 	ldw tokval,x 
      001B15 A6 0A            [ 1] 4733 	ld a,#TK_INTGR
      001B17 81               [ 4] 4734 	ret
                                   4735 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4736 ;----------------------
                                   4737 ; BASIC: IDR 
                                   4738 ; return offset of gpio
                                   4739 ; IDR register: 1
                                   4740 ; ---------------------
      001B18                       4741 port_idr:
      001B18 AE 00 01         [ 2] 4742 	ldw x,#1
      001B1B CF 00 12         [ 2] 4743 	ldw tokval,x 
      001B1E A6 0A            [ 1] 4744 	ld a,#TK_INTGR
      001B20 81               [ 4] 4745 	ret
                                   4746 
                                   4747 ;----------------------
                                   4748 ; BASIC: DDR 
                                   4749 ; return offset of gpio
                                   4750 ; DDR register: 2
                                   4751 ; ---------------------
      001B21                       4752 port_ddr:
      001B21 AE 00 02         [ 2] 4753 	ldw x,#2
      001B24 CF 00 12         [ 2] 4754 	ldw tokval,x 
      001B27 A6 0A            [ 1] 4755 	ld a,#TK_INTGR
      001B29 81               [ 4] 4756 	ret
                                   4757 
                                   4758 ;----------------------
                                   4759 ; BASIC: CRL  
                                   4760 ; return offset of gpio
                                   4761 ; CR1 register: 3
                                   4762 ; ---------------------
      001B2A                       4763 port_cr1:
      001B2A AE 00 03         [ 2] 4764 	ldw x,#3
      001B2D CF 00 12         [ 2] 4765 	ldw tokval,x 
      001B30 A6 0A            [ 1] 4766 	ld a,#TK_INTGR
      001B32 81               [ 4] 4767 	ret
                                   4768 
                                   4769 ;----------------------
                                   4770 ; BASIC: CRH  
                                   4771 ; return offset of gpio
                                   4772 ; CR2 register: 4
                                   4773 ; ---------------------
      001B33                       4774 port_cr2:
      001B33 AE 00 04         [ 2] 4775 	ldw x,#4
      001B36 CF 00 12         [ 2] 4776 	ldw tokval,x 
      001B39 A6 0A            [ 1] 4777 	ld a,#TK_INTGR
      001B3B 81               [ 4] 4778 	ret
                                   4779 
                                   4780 
                                   4781 ;---------------------
                                   4782 ;
                                   4783 ;---------------------
      001B3C                       4784 usr:
      001B3C AE 1C 75         [ 2] 4785 	ldw x,#USR 
      001B3F CD 02 3A         [ 4] 4786 	call prt_cstr 
      001B42 81               [ 4] 4787 	ret 
                                   4788 
                                   4789 ;------------------------------
                                   4790 ; BASIC: BYE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4791 ; halt mcu in its lowest power mode 
                                   4792 ; wait for reset or external interrupt
                                   4793 ; do a cold start on wakeup.
                                   4794 ;------------------------------
      001B43                       4795 bye:
      001B43 72 0D 52 40 FB   [ 2] 4796 	btjf UART3_SR,#UART_SR_TC,.
      001B48 8E               [10] 4797 	halt
      001B49 CC 04 E3         [ 2] 4798 	jp cold_start  
                                   4799 
                                   4800 ;----------------------------------
                                   4801 ; BASIC: SLEEP 
                                   4802 ; halt mcu until reset or external
                                   4803 ; interrupt.
                                   4804 ; Resume progam after SLEEP command
                                   4805 ;----------------------------------
      001B4C                       4806 sleep:
      001B4C 72 0D 52 40 FB   [ 2] 4807 	btjf UART3_SR,#UART_SR_TC,.
      001B51 72 16 00 25      [ 1] 4808 	bset flags,#FSLEEP
      001B55 8E               [10] 4809 	halt 
      001B56 81               [ 4] 4810 	ret 
                                   4811 
                                   4812 ;-------------------------------
                                   4813 ; BASIC: PAUSE expr 
                                   4814 ; suspend execution for n msec.
                                   4815 ; input:
                                   4816 ;	none
                                   4817 ; output:
                                   4818 ;	none 
                                   4819 ;------------------------------
      001B57                       4820 pause:
      001B57 CD 12 5E         [ 4] 4821 	call expression
      001B5A A1 0A            [ 1] 4822 	cp a,#TK_INTGR
      001B5C 27 03            [ 1] 4823 	jreq 0$
      001B5E CC 06 90         [ 2] 4824 	jp syntax_error
      001B61 CD 0F 1B         [ 4] 4825 0$: call dpop 	
      001B64 5D               [ 2] 4826 1$: tnzw x 
      001B65 27 04            [ 1] 4827 	jreq 2$
      001B67 8F               [10] 4828 	wfi 
      001B68 5A               [ 2] 4829 	decw x 
      001B69 26 F9            [ 1] 4830 	jrne 1$
      001B6B 4F               [ 1] 4831 2$:	clr a 
      001B6C 81               [ 4] 4832 	ret 
                                   4833 
                                   4834 ;------------------------------
                                   4835 ; BASIC: TICKS
                                   4836 ; return msec ticks counter value 
                                   4837 ; input:
                                   4838 ; 	none 
                                   4839 ; output:
                                   4840 ;	X 		TK_INTGR
                                   4841 ;-------------------------------
      001B6D                       4842 get_ticks:
      001B6D CE 00 0B         [ 2] 4843 	ldw x,ticks 
      001B70 A6 0A            [ 1] 4844 	ld a,#TK_INTGR
      001B72 81               [ 4] 4845 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4846 
                                   4847 
                                   4848 
                                   4849 ;------------------------------
                                   4850 ; BASIC: ABS(expr)
                                   4851 ; return absolute value of expr.
                                   4852 ; input:
                                   4853 ;   none
                                   4854 ; output:
                                   4855 ;   X     	positive integer
                                   4856 ;-------------------------------
      001B73                       4857 abs:
      001B73 A6 04            [ 1] 4858 	ld a,#TK_LPAREN
      001B75 CD 11 4F         [ 4] 4859 	call expect 
      001B78 CD 11 5C         [ 4] 4860 	call arg_list
      001B7B A1 01            [ 1] 4861 	cp a,#1 
      001B7D 27 03            [ 1] 4862 	jreq 0$ 
      001B7F CC 06 90         [ 2] 4863 	jp syntax_error
      001B82 A6 05            [ 1] 4864 0$: ld a,#TK_RPAREN 
      001B84 CD 11 4F         [ 4] 4865 	call expect 
      001B87 CD 0F 1B         [ 4] 4866     call dpop 
      001B8A 9E               [ 1] 4867 	ld a,xh 
      001B8B A5 80            [ 1] 4868 	bcp a,#0x80 
      001B8D 27 01            [ 1] 4869 	jreq 2$ 
      001B8F 50               [ 2] 4870 	negw x 
      001B90 A6 0A            [ 1] 4871 2$: ld a,#TK_INTGR 
      001B92 81               [ 4] 4872 	ret 
                                   4873 
                                   4874 ;------------------------------
                                   4875 ; BASIC: RND(expr)
                                   4876 ; return random number 
                                   4877 ; between 1 and expr inclusive
                                   4878 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4879 ; input:
                                   4880 ; 	none 
                                   4881 ; output:
                                   4882 ;	X 		random positive integer 
                                   4883 ;------------------------------
      001B93                       4884 random:
      001B93 A6 04            [ 1] 4885 	ld a,#TK_LPAREN 
      001B95 CD 11 4F         [ 4] 4886 	call expect 
      001B98 CD 11 5C         [ 4] 4887 	call arg_list 
      001B9B A1 01            [ 1] 4888 	cp a,#1
      001B9D 27 03            [ 1] 4889 	jreq 1$
      001B9F CC 06 90         [ 2] 4890 	jp syntax_error
      001BA2 A6 05            [ 1] 4891 1$: ld a,#TK_RPAREN
      001BA4 CD 11 4F         [ 4] 4892 	call expect 
      001BA7 CD 0F 1B         [ 4] 4893 	call dpop 
      001BAA 89               [ 2] 4894 	pushw x 
      001BAB 9E               [ 1] 4895 	ld a,xh 
      001BAC A5 80            [ 1] 4896 	bcp a,#0x80 
      001BAE 27 05            [ 1] 4897 	jreq 2$
      001BB0 A6 0A            [ 1] 4898 	ld a,#ERR_BAD_VALUE
      001BB2 CC 06 92         [ 2] 4899 	jp tb_error
      001BB5                       4900 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   4901 ; acc16=(x<<5)^x 
      001BB5 CE 00 0D         [ 2] 4902 	ldw x,seedx 
      001BB8 58               [ 2] 4903 	sllw x 
      001BB9 58               [ 2] 4904 	sllw x 
      001BBA 58               [ 2] 4905 	sllw x 
      001BBB 58               [ 2] 4906 	sllw x 
      001BBC 58               [ 2] 4907 	sllw x 
      001BBD 9E               [ 1] 4908 	ld a,xh 
      001BBE C8 00 0D         [ 1] 4909 	xor a,seedx 
      001BC1 C7 00 09         [ 1] 4910 	ld acc16,a 
      001BC4 9F               [ 1] 4911 	ld a,xl 
      001BC5 C8 00 0E         [ 1] 4912 	xor a,seedx+1 
      001BC8 C7 00 0A         [ 1] 4913 	ld acc8,a 
                                   4914 ; seedx=seedy 
      001BCB CE 00 0F         [ 2] 4915 	ldw x,seedy 
      001BCE CF 00 0D         [ 2] 4916 	ldw seedx,x  
                                   4917 ; seedy=seedy^(seedy>>1)
      001BD1 90 54            [ 2] 4918 	srlw y 
      001BD3 90 9E            [ 1] 4919 	ld a,yh 
      001BD5 C8 00 0F         [ 1] 4920 	xor a,seedy 
      001BD8 C7 00 0F         [ 1] 4921 	ld seedy,a  
      001BDB 90 9F            [ 1] 4922 	ld a,yl 
      001BDD C8 00 10         [ 1] 4923 	xor a,seedy+1 
      001BE0 C7 00 10         [ 1] 4924 	ld seedy+1,a 
                                   4925 ; acc16>>3 
      001BE3 CE 00 09         [ 2] 4926 	ldw x,acc16 
      001BE6 54               [ 2] 4927 	srlw x 
      001BE7 54               [ 2] 4928 	srlw x 
      001BE8 54               [ 2] 4929 	srlw x 
                                   4930 ; x=acc16^x 
      001BE9 9E               [ 1] 4931 	ld a,xh 
      001BEA C8 00 09         [ 1] 4932 	xor a,acc16 
      001BED 95               [ 1] 4933 	ld xh,a 
      001BEE 9F               [ 1] 4934 	ld a,xl 
      001BEF C8 00 0A         [ 1] 4935 	xor a,acc8 
      001BF2 97               [ 1] 4936 	ld xl,a 
                                   4937 ; seedy=x^seedy 
      001BF3 C8 00 10         [ 1] 4938 	xor a,seedy+1
      001BF6 97               [ 1] 4939 	ld xl,a 
      001BF7 9E               [ 1] 4940 	ld a,xh 
      001BF8 C8 00 0F         [ 1] 4941 	xor a,seedy
      001BFB 95               [ 1] 4942 	ld xh,a 
      001BFC CF 00 0F         [ 2] 4943 	ldw seedy,x 
                                   4944 ; return seedy modulo expr + 1 
      001BFF 90 85            [ 2] 4945 	popw y 
      001C01 65               [ 2] 4946 	divw x,y 
      001C02 93               [ 1] 4947 	ldw x,y 
      001C03 5C               [ 1] 4948 	incw x 
      001C04 A6 0A            [ 1] 4949 	ld a,#TK_INTGR
      001C06 81               [ 4] 4950 	ret 
                                   4951 
                                   4952 ;*********************************
                                   4953 
                                   4954 ;------------------------------
                                   4955 ;      dictionary 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4956 ; format:
                                   4957 ;   link   2 bytes 
                                   4958 ;   cmd_name 8 byte max 
                                   4959 ;   code_address 2 bytes 
                                   4960 ;------------------------------
                           000080  4961 	FFUNC=128 
                                   4962 	.macro _dict_entry len,name,cmd 
                                   4963 	.word LINK 
                                   4964 	LINK=.
                                   4965 name:
                                   4966 	.byte len 	
                                   4967 	.ascii "name"
                                   4968 	.word cmd 
                                   4969 	.endm 
                                   4970 
                           000000  4971 	LINK=0
      001C07                       4972 kword_end:
      001C07                       4973 	_dict_entry,3,BYE,bye 
      001C07 00 00                    1 	.word LINK 
                           001C09     2 	LINK=.
      001C09                          3 BYE:
      001C09 03                       4 	.byte 3 	
      001C0A 42 59 45                 5 	.ascii "BYE"
      001C0D 1B 43                    6 	.word bye 
      001C0F                       4974 	_dict_entry,5,SLEEP,sleep 
      001C0F 1C 09                    1 	.word LINK 
                           001C11     2 	LINK=.
      001C11                          3 SLEEP:
      001C11 05                       4 	.byte 5 	
      001C12 53 4C 45 45 50           5 	.ascii "SLEEP"
      001C17 1B 4C                    6 	.word sleep 
      001C19                       4975 	_dict_entry,6,FORGET,forget 
      001C19 1C 11                    1 	.word LINK 
                           001C1B     2 	LINK=.
      001C1B                          3 FORGET:
      001C1B 06                       4 	.byte 6 	
      001C1C 46 4F 52 47 45 54        5 	.ascii "FORGET"
      001C22 19 A0                    6 	.word forget 
      001C24                       4976 	_dict_entry,3,DIR,directory 
      001C24 1C 1B                    1 	.word LINK 
                           001C26     2 	LINK=.
      001C26                          3 DIR:
      001C26 03                       4 	.byte 3 	
      001C27 44 49 52                 5 	.ascii "DIR"
      001C2A 19 F1                    6 	.word directory 
      001C2C                       4977 	_dict_entry,4,LOAD,load 
      001C2C 1C 26                    1 	.word LINK 
                           001C2E     2 	LINK=.
      001C2E                          3 LOAD:
      001C2E 04                       4 	.byte 4 	
      001C2F 4C 4F 41 44              5 	.ascii "LOAD"
      001C33 19 3F                    6 	.word load 
      001C35                       4978 	_dict_entry,4,SAVE,save
      001C35 1C 2E                    1 	.word LINK 
                           001C37     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C37                          3 SAVE:
      001C37 04                       4 	.byte 4 	
      001C38 53 41 56 45              5 	.ascii "SAVE"
      001C3C 18 A0                    6 	.word save 
      001C3E                       4979 	_dict_entry,5,WRITE,write  
      001C3E 1C 37                    1 	.word LINK 
                           001C40     2 	LINK=.
      001C40                          3 WRITE:
      001C40 05                       4 	.byte 5 	
      001C41 57 52 49 54 45           5 	.ascii "WRITE"
      001C46 1A 58                    6 	.word write 
      001C48                       4980 	_dict_entry,3,NEW,new
      001C48 1C 40                    1 	.word LINK 
                           001C4A     2 	LINK=.
      001C4A                          3 NEW:
      001C4A 03                       4 	.byte 3 	
      001C4B 4E 45 57                 5 	.ascii "NEW"
      001C4E 17 85                    6 	.word new 
      001C50                       4981 	_dict_entry,4,STOP,stop 
      001C50 1C 4A                    1 	.word LINK 
                           001C52     2 	LINK=.
      001C52                          3 STOP:
      001C52 04                       4 	.byte 4 	
      001C53 53 54 4F 50              5 	.ascii "STOP"
      001C57 17 73                    6 	.word stop 
      001C59                       4982     _dict_entry,4,SHOW,show 
      001C59 1C 52                    1 	.word LINK 
                           001C5B     2 	LINK=.
      001C5B                          3 SHOW:
      001C5B 04                       4 	.byte 4 	
      001C5C 53 48 4F 57              5 	.ascii "SHOW"
      001C60 10 2D                    6 	.word show 
      001C62                       4983 	_dict_entry 3,RUN,run
      001C62 1C 5B                    1 	.word LINK 
                           001C64     2 	LINK=.
      001C64                          3 RUN:
      001C64 03                       4 	.byte 3 	
      001C65 52 55 4E                 5 	.ascii "RUN"
      001C68 17 41                    6 	.word run 
      001C6A                       4984 	_dict_entry 4,LIST,list
      001C6A 1C 64                    1 	.word LINK 
                           001C6C     2 	LINK=.
      001C6C                          3 LIST:
      001C6C 04                       4 	.byte 4 	
      001C6D 4C 49 53 54              5 	.ascii "LIST"
      001C71 13 4B                    6 	.word list 
      001C73                       4985 	_dict_entry,3,USR,usr
      001C73 1C 6C                    1 	.word LINK 
                           001C75     2 	LINK=.
      001C75                          3 USR:
      001C75 03                       4 	.byte 3 	
      001C76 55 53 52                 5 	.ascii "USR"
      001C79 1B 3C                    6 	.word usr 
      001C7B                       4986 	_dict_entry,3+FFUNC,ODR,port_odr
      001C7B 1C 75                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           001C7D     2 	LINK=.
      001C7D                          3 ODR:
      001C7D 83                       4 	.byte 3+FFUNC 	
      001C7E 4F 44 52                 5 	.ascii "ODR"
      001C81 1B 11                    6 	.word port_odr 
      001C83                       4987 	_dict_entry,3+FFUNC,IDR,port_idr
      001C83 1C 7D                    1 	.word LINK 
                           001C85     2 	LINK=.
      001C85                          3 IDR:
      001C85 83                       4 	.byte 3+FFUNC 	
      001C86 49 44 52                 5 	.ascii "IDR"
      001C89 1B 18                    6 	.word port_idr 
      001C8B                       4988 	_dict_entry,3+FFUNC,DDR,port_ddr 
      001C8B 1C 85                    1 	.word LINK 
                           001C8D     2 	LINK=.
      001C8D                          3 DDR:
      001C8D 83                       4 	.byte 3+FFUNC 	
      001C8E 44 44 52                 5 	.ascii "DDR"
      001C91 1B 21                    6 	.word port_ddr 
      001C93                       4989 	_dict_entry,3+FFUNC,CRL,port_cr1 
      001C93 1C 8D                    1 	.word LINK 
                           001C95     2 	LINK=.
      001C95                          3 CRL:
      001C95 83                       4 	.byte 3+FFUNC 	
      001C96 43 52 4C                 5 	.ascii "CRL"
      001C99 1B 2A                    6 	.word port_cr1 
      001C9B                       4990 	_dict_entry,3+FFUNC,CRH,port_cr2
      001C9B 1C 95                    1 	.word LINK 
                           001C9D     2 	LINK=.
      001C9D                          3 CRH:
      001C9D 83                       4 	.byte 3+FFUNC 	
      001C9E 43 52 48                 5 	.ascii "CRH"
      001CA1 1B 33                    6 	.word port_cr2 
      001CA3                       4991 	_dict_entry,4+FFUNC,GPIO,gpio 
      001CA3 1C 9D                    1 	.word LINK 
                           001CA5     2 	LINK=.
      001CA5                          3 GPIO:
      001CA5 84                       4 	.byte 4+FFUNC 	
      001CA6 47 50 49 4F              5 	.ascii "GPIO"
      001CAA 1A DB                    6 	.word gpio 
      001CAC                       4992 	_dict_entry,3+FFUNC,ASC,ascii  
      001CAC 1C A5                    1 	.word LINK 
                           001CAE     2 	LINK=.
      001CAE                          3 ASC:
      001CAE 83                       4 	.byte 3+FFUNC 	
      001CAF 41 53 43                 5 	.ascii "ASC"
      001CB2 1A 96                    6 	.word ascii 
      001CB4                       4993 	_dict_entry,4+FFUNC,CHAR,char
      001CB4 1C AE                    1 	.word LINK 
                           001CB6     2 	LINK=.
      001CB6                          3 CHAR:
      001CB6 84                       4 	.byte 4+FFUNC 	
      001CB7 43 48 41 52              5 	.ascii "CHAR"
      001CBB 1A 75                    6 	.word char 
      001CBD                       4994 	_dict_entry,4+FFUNC,QKEY,qkey  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001CBD 1C B6                    1 	.word LINK 
                           001CBF     2 	LINK=.
      001CBF                          3 QKEY:
      001CBF 84                       4 	.byte 4+FFUNC 	
      001CC0 51 4B 45 59              5 	.ascii "QKEY"
      001CC4 1A D1                    6 	.word qkey 
      001CC6                       4995 	_dict_entry,3+FFUNC,KEY,key 
      001CC6 1C BF                    1 	.word LINK 
                           001CC8     2 	LINK=.
      001CC8                          3 KEY:
      001CC8 83                       4 	.byte 3+FFUNC 	
      001CC9 4B 45 59                 5 	.ascii "KEY"
      001CCC 1A C6                    6 	.word key 
      001CCE                       4996 	_dict_entry,4+FFUNC,SIZE,size
      001CCE 1C C8                    1 	.word LINK 
                           001CD0     2 	LINK=.
      001CD0                          3 SIZE:
      001CD0 84                       4 	.byte 4+FFUNC 	
      001CD1 53 49 5A 45              5 	.ascii "SIZE"
      001CD5 13 03                    6 	.word size 
      001CD7                       4997 	_dict_entry,3,HEX,hex_base
      001CD7 1C D0                    1 	.word LINK 
                           001CD9     2 	LINK=.
      001CD9                          3 HEX:
      001CD9 03                       4 	.byte 3 	
      001CDA 48 45 58                 5 	.ascii "HEX"
      001CDD 12 F9                    6 	.word hex_base 
      001CDF                       4998 	_dict_entry,3,DEC,dec_base
      001CDF 1C D9                    1 	.word LINK 
                           001CE1     2 	LINK=.
      001CE1                          3 DEC:
      001CE1 03                       4 	.byte 3 	
      001CE2 44 45 43                 5 	.ascii "DEC"
      001CE5 12 FE                    6 	.word dec_base 
      001CE7                       4999 	_dict_entry,5+FFUNC,TICKS,get_ticks
      001CE7 1C E1                    1 	.word LINK 
                           001CE9     2 	LINK=.
      001CE9                          3 TICKS:
      001CE9 85                       4 	.byte 5+FFUNC 	
      001CEA 54 49 43 4B 53           5 	.ascii "TICKS"
      001CEF 1B 6D                    6 	.word get_ticks 
      001CF1                       5000 	_dict_entry,3+FFUNC,ABS,abs
      001CF1 1C E9                    1 	.word LINK 
                           001CF3     2 	LINK=.
      001CF3                          3 ABS:
      001CF3 83                       4 	.byte 3+FFUNC 	
      001CF4 41 42 53                 5 	.ascii "ABS"
      001CF7 1B 73                    6 	.word abs 
      001CF9                       5001 	_dict_entry,3+FFUNC,RND,random 
      001CF9 1C F3                    1 	.word LINK 
                           001CFB     2 	LINK=.
      001CFB                          3 RND:
      001CFB 83                       4 	.byte 3+FFUNC 	
      001CFC 52 4E 44                 5 	.ascii "RND"
      001CFF 1B 93                    6 	.word random 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D01                       5002 	_dict_entry,5,PAUSE,pause 
      001D01 1C FB                    1 	.word LINK 
                           001D03     2 	LINK=.
      001D03                          3 PAUSE:
      001D03 05                       4 	.byte 5 	
      001D04 50 41 55 53 45           5 	.ascii "PAUSE"
      001D09 1B 57                    6 	.word pause 
      001D0B                       5003 	_dict_entry,4,BSET,bit_set 
      001D0B 1D 03                    1 	.word LINK 
                           001D0D     2 	LINK=.
      001D0D                          3 BSET:
      001D0D 04                       4 	.byte 4 	
      001D0E 42 53 45 54              5 	.ascii "BSET"
      001D12 15 3F                    6 	.word bit_set 
      001D14                       5004 	_dict_entry,4,BRES,bit_reset
      001D14 1D 0D                    1 	.word LINK 
                           001D16     2 	LINK=.
      001D16                          3 BRES:
      001D16 04                       4 	.byte 4 	
      001D17 42 52 45 53              5 	.ascii "BRES"
      001D1B 15 54                    6 	.word bit_reset 
      001D1D                       5005 	_dict_entry,5,BTOGL,bit_toggle
      001D1D 1D 16                    1 	.word LINK 
                           001D1F     2 	LINK=.
      001D1F                          3 BTOGL:
      001D1F 05                       4 	.byte 5 	
      001D20 42 54 4F 47 4C           5 	.ascii "BTOGL"
      001D25 15 6A                    6 	.word bit_toggle 
      001D27                       5006 	_dict_entry 4,WAIT,wait 
      001D27 1D 1F                    1 	.word LINK 
                           001D29     2 	LINK=.
      001D29                          3 WAIT:
      001D29 04                       4 	.byte 4 	
      001D2A 57 41 49 54              5 	.ascii "WAIT"
      001D2E 15 13                    6 	.word wait 
      001D30                       5007 	_dict_entry 6,REMARK,rem 
      001D30 1D 29                    1 	.word LINK 
                           001D32     2 	LINK=.
      001D32                          3 REMARK:
      001D32 06                       4 	.byte 6 	
      001D33 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001D39 15 12                    6 	.word rem 
      001D3B                       5008 	_dict_entry 5,PRINT,print 
      001D3B 1D 32                    1 	.word LINK 
                           001D3D     2 	LINK=.
      001D3D                          3 PRINT:
      001D3D 05                       4 	.byte 5 	
      001D3E 50 52 49 4E 54           5 	.ascii "PRINT"
      001D43 14 01                    6 	.word print 
      001D45                       5009 	_dict_entry,2,IF,if 
      001D45 1D 3D                    1 	.word LINK 
                           001D47     2 	LINK=.
      001D47                          3 IF:
      001D47 02                       4 	.byte 2 	
      001D48 49 46                    5 	.ascii "IF"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D4A 15 B3                    6 	.word if 
      001D4C                       5010 	_dict_entry,5,GOSUB,gosub 
      001D4C 1D 47                    1 	.word LINK 
                           001D4E     2 	LINK=.
      001D4E                          3 GOSUB:
      001D4E 05                       4 	.byte 5 	
      001D4F 47 4F 53 55 42           5 	.ascii "GOSUB"
      001D54 16 D2                    6 	.word gosub 
      001D56                       5011 	_dict_entry,4,GOTO,goto 
      001D56 1D 4E                    1 	.word LINK 
                           001D58     2 	LINK=.
      001D58                          3 GOTO:
      001D58 04                       4 	.byte 4 	
      001D59 47 4F 54 4F              5 	.ascii "GOTO"
      001D5D 16 C5                    6 	.word goto 
      001D5F                       5012 	_dict_entry,3,FOR,for 
      001D5F 1D 58                    1 	.word LINK 
                           001D61     2 	LINK=.
      001D61                          3 FOR:
      001D61 03                       4 	.byte 3 	
      001D62 46 4F 52                 5 	.ascii "FOR"
      001D65 15 CB                    6 	.word for 
      001D67                       5013 	_dict_entry,2,TO,to
      001D67 1D 61                    1 	.word LINK 
                           001D69     2 	LINK=.
      001D69                          3 TO:
      001D69 02                       4 	.byte 2 	
      001D6A 54 4F                    5 	.ascii "TO"
      001D6C 15 F5                    6 	.word to 
      001D6E                       5014 	_dict_entry,4,STEP,step 
      001D6E 1D 69                    1 	.word LINK 
                           001D70     2 	LINK=.
      001D70                          3 STEP:
      001D70 04                       4 	.byte 4 	
      001D71 53 54 45 50              5 	.ascii "STEP"
      001D75 16 25                    6 	.word step 
      001D77                       5015 	_dict_entry,4,NEXT,next 
      001D77 1D 70                    1 	.word LINK 
                           001D79     2 	LINK=.
      001D79                          3 NEXT:
      001D79 04                       4 	.byte 4 	
      001D7A 4E 45 58 54              5 	.ascii "NEXT"
      001D7E 16 4E                    6 	.word next 
      001D80                       5016 	_dict_entry,6+FFUNC,UBOUND,ubound 
      001D80 1D 79                    1 	.word LINK 
                           001D82     2 	LINK=.
      001D82                          3 UBOUND:
      001D82 86                       4 	.byte 6+FFUNC 	
      001D83 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001D89 13 10                    6 	.word ubound 
      001D8B                       5017 	_dict_entry,6,RETURN,return 
      001D8B 1D 82                    1 	.word LINK 
                           001D8D     2 	LINK=.
      001D8D                          3 RETURN:
      001D8D 06                       4 	.byte 6 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001D8E 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001D94 17 1D                    6 	.word return 
      001D96                       5018 	_dict_entry,4+FFUNC,PEEK,peek 
      001D96 1D 8D                    1 	.word LINK 
                           001D98     2 	LINK=.
      001D98                          3 PEEK:
      001D98 84                       4 	.byte 4+FFUNC 	
      001D99 50 45 45 4B              5 	.ascii "PEEK"
      001D9D 15 93                    6 	.word peek 
      001D9F                       5019 	_dict_entry,4,POKE,poke 
      001D9F 1D 98                    1 	.word LINK 
                           001DA1     2 	LINK=.
      001DA1                          3 POKE:
      001DA1 04                       4 	.byte 4 	
      001DA2 50 4F 4B 45              5 	.ascii "POKE"
      001DA6 15 7F                    6 	.word poke 
      001DA8                       5020 	_dict_entry,5,INPUT,input_var  
      001DA8 1D A1                    1 	.word LINK 
                           001DAA     2 	LINK=.
      001DAA                          3 INPUT:
      001DAA 05                       4 	.byte 5 	
      001DAB 49 4E 50 55 54           5 	.ascii "INPUT"
      001DB0 14 9C                    6 	.word input_var 
      001DB2                       5021 kword_dict:
      001DB2                       5022 	_dict_entry 3,LET,let 
      001DB2 1D AA                    1 	.word LINK 
                           001DB4     2 	LINK=.
      001DB4                          3 LET:
      001DB4 03                       4 	.byte 3 	
      001DB5 4C 45 54                 5 	.ascii "LET"
      001DB8 13 21                    6 	.word let 
                                   5023 	
                                   5024 
      001E00                       5025 	.bndry 128 ; align on FLASH block.
                                   5026 ; free space for user application  
      001E00                       5027 user_space:
                                   5028 
                                   5029 	.area FLASH_DRIVE (ABS)
      010000                       5030 	.org 0x10000
      010000                       5031 fdrive:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        001CF3 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000003     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        001CAE R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  000005     |   5 BRES       001D16 R   |   5 BSET       001D0D R
    BSIZE   =  000005     |     BSP     =  000008     |   5 BTOGL      001D1F R
    BTW     =  000001     |   5 BYE        001C09 R   |     C       =  000001 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       001CB6 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CNT     =  000008     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        001C9D R   |   5 CRL        001C95 R   |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CURR    =  000002     |     CX_BPTR =  000001 
    CX_CNT  =  000005     |     CX_IN   =  000004     |     CX_LNO  =  000003 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |   5 DDR        001C8D R   |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   5 DEC        001CE1 R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        001C26 R   |     DIVIDND =  000007     |     DIVISR  =  000005 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |     DSTACK_S=  000040 
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    ERR_BAD_=  00000A     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_L=  000005     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FF      =  00000C     |     FFOR    =  000002     |     FFUNC   =  000080 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   5 FOR        001D61 R   |   5 FORGET     001C1B R
    FRUN    =  000000     |     FSIZE   =  000001     |     FSLEEP  =  000003 
    FTRAP   =  000001     |   5 GOSUB      001D4E R   |     GOS_RET =  000003 
  5 GOTO       001D58 R   |   5 GPIO       001CA5 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  5 HEX        001CD9 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        001C85 R
  5 IF         001D47 R   |     IN      =  000007     |     INCR    =  000001 
  5 INPUT      001DAA R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  000003     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]

Symbol Table

  5 KEY        001CC8 R   |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000005     |   5 LET        001DB4 R   |     LINENO  =  000005 
  5 LINK    =  001DB4 R   |   5 LIST       001C6C R   |     LL      =  000002 
    LLEN    =  000007     |     LL_HB   =  000001     |     LNO     =  000005 
    LN_PTR  =  000005     |   5 LOAD       001C2E R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NCLKOPT =  004808 
    NEG     =  000001     |   5 NEW        001C4A R   |   5 NEXT       001D79 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NL      =  00000A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000009 R   |   5 ODR        001C7D R   |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     PA      =  000000     |     PAD_SIZE=  000028 
  5 PAUSE      001D03 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   5 PEEK       001D98 R
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   5 POKE       001DA1 R   |     PREV    =  000001 
  5 PRINT      001D3D R   |     PROD    =  000002     |     PSIZE   =  000001 
  5 QKEY       001CBF R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 REG_A      0008B4 R   |   5 REG_CC     0008B9 R
  5 REG_EPC    0008A4 R   |   5 REG_SP     0008BF R   |   5 REG_X      0008AF R
  5 REG_Y      0008AA R   |     RELOP   =  000005     |   5 REMARK     001D32 R
    RETL1   =  000001     |   5 RETURN     001D8D R   |   5 RND        001CFB R
    ROP     =  004800     |     RST_SR  =  0050B3     |   5 RUN        001C64 R
    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]

Symbol Table

    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       001C37 R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       001C5B R   |     SIGN    =  000001 
  5 SIZE       001CD0 R   |     SKIP    =  000006     |   5 SLEEP      001C11 R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     000867 R   |   5 STEP       001D70 R
  5 STOP       001C52 R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      001CE9 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000003     |     TK_CHAR =  00000B     |     TK_CMD  =  000007 
    TK_COLON=  000001     |     TK_COMMA=  000008     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FUNC =  00000C     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_INTGR=  00000A     |     TK_LE   =  000036     |     TK_LPARE=  000004 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000006     |     TK_RPARE=  000005 
    TK_SHARP=  000009     |     TK_VAR  =  000002     |   5 TO         001D69 R
    TOK_TEST=  000000     |   5 Timer4Up   000019 R   |   5 TrapHand   00000A R
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     001D82 R   |   5 USER_ABO   000083 R   |   5 USR        001C75 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  5 UserButt   000025 R   |     VSIZE   =  000002     |     VT      =  00000B 
  5 WAIT       001D29 R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |   5 WRITE      001C40 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMASK   =  000001     |     XSAVE   =  000001 
    YSAVE   =  000003     |   5 abs        001B73 R   |   1 acc16      000009 R
  1 acc24      000008 R   |   1 acc8       00000A R   |   5 accept_c   000A16 R
  5 add        001035 R   |   5 ansi_seq   0009D4 R   |   5 arg_list   00115C R
  1 array_ad   000021 R   |   1 array_si   000023 R   |   5 ascii      001A96 R
  5 at_tst     000D16 R   |   5 atoi       000E4F R   |   5 atoi_exi   000EBD R
  5 bad_port   001B0C R   |   1 base       000007 R   |   1 basicptr   000003 R
  5 bin_exit   000BFB R   |   5 bit_rese   001554 R   |   5 bit_set    00153F R
  5 bit_togg   00156A R   |   5 bkslsh_t   000CC1 R   |   5 bksp       00024E R
  5 bye        001B43 R   |   5 char       001A75 R   |   5 clear_ba   00056E R
  5 clear_va   00047E R   |   5 clock_in   00009E R   |   5 cmd_itf    000A3A R
  5 cmp_name   001835 R   |   5 cold_sta   0004E3 R   |   5 colon_ts   000CEA R
  5 comma_ts   000CF5 R   |   5 convert_   000B61 R   |   1 count      000002 R
  5 cp_loop    001108 R   |   5 create_g   0003D3 R   |   5 cstk_pro   000FEC R
  5 dash_tst   000D0B R   |   5 ddrop      000F42 R   |   5 ddrop_n    0010E0 R
  5 ddup       000F4B R   |   5 dec_base   0012FE R   |   5 del_back   000A07 R
  5 del_line   0003A4 R   |   5 del_ln     0009F8 R   |   5 delete     00025E R
  5 dir_loop   0019FD R   |   5 director   0019F1 R   |   5 divide     00108B R
  5 divu24_8   000961 R   |   5 dotr       000FF5 R   |   5 dotr_loo   001003 R
  5 dots       000FBC R   |   5 dpick      000F5C R   |   5 dpop       000F1B R
  5 dpush      000F0E R   |   3 dstack     001740 R   |   3 dstack_u   001780 R
  5 dstk_pro   000FB2 R   |   1 dstkptr    00001A R   |   5 dswap      000F28 R
  5 empty      0013D2 R   |   5 eql_tst    000D78 R   |   5 erase_bl   000120 R
  5 erase_en   00010C R   |   5 erase_fl   000146 R   |   5 erase_st   0000E1 R
  5 err_bad_   00064F R   |   5 err_cmd_   000610 R   |   5 err_div0   0005D2 R
  5 err_dupl   00062B R   |   5 err_math   0005B8 R   |   5 err_mem_   00059B R
  5 err_msg    000583 R   |   5 err_no_a   00065C R   |   5 err_no_l   0005E2 R
  5 err_not_   00063D R   |   5 err_run_   0005F9 R   |   5 err_synt   0005A9 R
  5 execute    0010F3 R   |   5 expect     00114F R   |   5 expr_exi   00129F R
  5 expressi   00125E R   |   5 factor     0011BD R   |   1 farptr     000014 R
  7 fdrive     010000 R   |   5 fetch      000F6B R   |   5 fetchc     000B07 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

  1 ffree      000017 R   |   5 ffree_ms   00181E R   |   5 file_cou   001A50 R
  5 final_te   0009CE R   |   5 first_li   001376 R   |   1 flags      000025 R
  5 for        0015CB R   |   5 forget     0019A0 R   |   1 free_ram   00005B R
  5 get_arra   00118A R   |   5 get_tick   001B6D R   |   5 get_toke   000C48 R
  5 getc       000227 R   |   5 go_commo   0016F5 R   |   5 gosub      0016D2 R
  5 goto       0016C5 R   |   5 gpio       001ADB R   |   5 gt_tst     000D83 R
  5 hex_base   0012F9 R   |   5 hse_cloc   000207 R   |   5 hsi_cloc   000211 R
  5 if         0015B3 R   |   1 in         000001 R   |   1 in.w       000000 R
  5 incr_far   001791 R   |   5 input_ex   00150E R   |   5 input_lo   0014A8 R
  5 input_va   00149C R   |   5 insert_l   000404 R   |   5 insert_l   00047B R
  5 interp     000718 R   |   5 interp_l   00075E R   |   5 invalid    000A6F R
  5 invalid_   000ADD R   |   5 is_alpha   00048C R   |   5 is_digit   000E16 R
  5 itoa       00091A R   |   5 itoa_loo   000932 R   |   5 key        001AC6 R
  5 kword_di   001DB2 R   |   5 kword_en   001C07 R   |   5 last_lin   00137F R
  5 ledoff     00079F R   |   5 ledon      00079A R   |   5 ledtoggl   0007A4 R
  5 left_arr   0009D4 R   |   5 left_par   0007AD R   |   5 let        001321 R
  5 let02      00132B R   |   1 lineno     000005 R   |   5 lines_sk   001384 R
  5 list       00134B R   |   5 list_exi   0013CE R   |   5 list_sta   0013A7 R
  5 load       00193F R   |   5 loop_bac   001696 R   |   1 loop_dep   000020 R
  5 loop_don   0016B2 R   |   5 lt_tst     000DBC R   |   5 mem_peek   000A8B R
  5 modulo     0010CF R   |   5 move       000332 R   |   5 move_cod   00010C R
  5 move_dow   000350 R   |   5 move_exi   000372 R   |   5 move_loo   000355 R
  5 move_up    000342 R   |   5 multiply   001043 R   |   5 mulu24_8   000EC1 R
  5 nbr_tst    000C97 R   |   5 neg_acc2   000989 R   |   5 negate     001180 R
  5 new        001785 R   |   5 next       00164E R   |   5 no_match   00111A R
  5 none       000C48 R   |   5 number     000B0D GR  |   5 other      000DF4 R
  3 pad        001718 R   |   5 parse_bi   000BDB R   |   5 parse_in   000BA0 R
  5 parse_ke   000C03 R   |   5 parse_qu   000B26 R   |   5 parser_i   00090D GR
  5 pause      001B57 R   |   5 peek       001593 R   |   5 peek_byt   000AA7 R
  5 plus_tst   000D4C R   |   5 poke       00157F R   |   5 port_cr1   001B2A R
  5 port_cr2   001B33 R   |   5 port_ddr   001B21 R   |   5 port_idr   001B18 R
  5 port_odr   001B11 R   |   5 prcnt_ts   000D6D R   |   5 print      001401 R
  5 print_ex   001465 R   |   5 print_fa   000AEC R   |   5 print_re   000814 R
  5 print_st   000A7F R   |   5 prt_basi   0013E3 R   |   5 prt_cstr   00023A R
  5 prt_loop   001405 R   |   5 prt_peek   0002E2 R   |   5 prt_reg1   0007E0 R
  5 prt_reg8   0007B8 R   |   5 prt_regs   000278 R   |   5 prt_tos    000F7F R
  5 prti24     0008C5 R   |   5 putc       00021E R   |   5 puts       000230 R
  5 qkey       001AD1 R   |   5 qmark_ts   000D21 R   |   5 random     001B93 R
  5 readln     0009AC R   |   5 readln_l   0009B2 R   |   5 readln_q   000A2B R
  5 regs_sta   0002BB R   |   5 rel_exit   0012F6 R   |   5 relation   0012A2 R
  5 rem        001512 R   |   5 repl       000A48 R   |   5 repl_exi   000A6C R
  5 reprint    0009D4 R   |   5 reset_co   001403 R   |   5 rest_con   001487 R
  5 return     00171D R   |   5 right_ar   0009D4 R   |   5 rparnt_t   000CDF R
  5 run        001741 R   |   5 save       0018A0 R   |   5 save_con   001472 R
  5 scan       000B14 R   |   5 search_d   0010F7 R   |   5 search_e   00114B R
  5 search_f   001856 R   |   5 search_l   000375 R   |   5 search_l   000380 R
  5 search_n   0010FB R   |   1 seedx      00000D R   |   1 seedy      00000F R
  5 seek_fdr   00179F R   |   5 sharp_ts   000D00 R   |   5 show       00102D R
  5 size       001303 R   |   5 skip       000EFB R   |   5 slash_ts   000D62 R
  5 sleep      001B4C R   |   5 software   00049D R   |   5 spaces     00026C R
  3 stack_fu   001780 R   |   3 stack_un   001800 R   |   5 star_tst   000D57 R
  5 step       001625 R   |   5 stop       001773 R   |   5 store      000F75 R
  5 store_lo   001637 R   |   5 str_matc   001129 R   |   5 str_tst    000C86 R
  5 strcmp     000313 R   |   5 strcpy     000324 R   |   5 strlen     000306 R
  5 substrac   00103D R   |   5 syntax_e   000690 R   |   1 tab_widt   000026 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

  5 tb_error   000692 R   |   5 term       001211 R   |   5 term01     00121A R
  5 term_exi   00125B R   |   5 test_p     000A77 R   |   3 tib        0016C8 R
  5 tick_tst   000D38 R   |   1 ticks      00000B R   |   5 timer4_i   0000B4 R
  5 to         0015F5 R   |   5 to_lower   000E1F GR  |   5 to_upper   000E2A GR
  5 token_ch   000E03 R   |   5 token_ex   000E13 R   |   1 tokval     000012 R
  1 txtbgn     00001C R   |   1 txtend     00001E R   |   5 uart3_in   0001F4 R
  5 uart3_se   000200 R   |   5 uart_ena   000219 R   |   5 ubound     001310 R
  5 unget_to   000F9E R   |   5 unlock_e   0000C5 R   |   5 unlock_f   0000D3 R
  1 untok      000011 R   |   5 upper      000E36 R   |   5 upper_lo   000E3A R
  5 user_spa   001E00 R   |   5 usr        001B3C R   |   1 vars       000027 R
  5 wait       001513 R   |   5 warm_sta   0006F0 R   |   5 write      001A58 R
  5 write_bl   0001D1 R   |   5 write_by   00015C R   |   5 write_ee   000198 R
  5 write_ex   0001CC R   |   5 write_fl   000182 R   |   5 z          00140F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5B   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   1E00   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

