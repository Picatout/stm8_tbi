ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26 
                                     27 
                                     28 
                                     29     .module TBI_STM8
                                     30 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                     37     .list 
                                     38 
      000000                         39 _dbg 
                           000001     1     DEBUG=1
                                     40 
                                     41 ;--------------------------------------
                                     42     .area DATA 
                                     43 ;--------------------------------------	
                                     44 
                           000050    45 	TIB_SIZE=80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                           000028    46     PAD_SIZE=40
                           000040    47 	DSTACK_SIZE=64 
                           000080    48 	STACK_SIZE=128
                           0017FF    49 	STACK_EMPTY=RAM_SIZE-1  
                           000000    50 	FRUN=0 ; flags run code in variable flags
                           000001    51 	FTRAP=1 ; inside trap handler 
                           000002    52 	FFOR=2 ; FOR loop in preparation 
                           000003    53 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    54 	FBREAK=4 ; break point flag 
                           000005    55 	FCOMP=5  ; compiling flags 
                                     56 
      000000                         57 in.w:  .blkb 1 ; parser position in text line
      000001                         58 in:    .blkb 1 ; low byte of in.w
      000002                         59 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         60 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         61 basicptr:  .blkb 2  ; point to current BASIC line 
      000006                         62 base:  .blkb 1 ; nemeric base used to print integer 
      000007                         63 acc24: .blkb 1 ; 24 bit accumulator
      000008                         64 acc16: .blkb 1 ; 16 bit accumulator, middle byte of acc24
      000009                         65 acc8:  .blkb 1 ;  8 bit accumulator, least byte of acc24 
      00000A                         66 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000C                         67 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      00000E                         68 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000010                         69 farptr: .blkb 1 ; 24 bits pointer used by file system
      000011                         70 ptr16:  .blkb 1 ; 16 bits pointer ,  middle byte of farptr
      000012                         71 ptr8:   .blkb 1 ; 8 bits pointer, least byte of farptr 
      000013                         72 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000016                         73 dstkptr: .blkw 1  ; data stack pointer 
      000018                         74 txtbgn: .ds 2 ; tokenized BASIC text beginning address 
      00001A                         75 txtend: .ds 2 ; tokenized BASIC text end address 
      00001C                         76 loop_depth: .ds 1 ; FOR loop depth, level of nested loop. Conformity check   
      00001D                         77 array_size: .ds 2 ; array size 
      00001F                         78 flags: .ds 1 ; various boolean flags
      000020                         79 tab_width: .ds 1 ; print colon width (4)
      000021                         80 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     81 ; keep as last variable 
      000055                         82 free_ram: ; from here RAM free for BASIC text 
                                     83 
                                     84 ;-----------------------------------
                                     85     .area SSEG (ABS)
                                     86 ;-----------------------------------	
      0016C8                         87     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         88 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         89 pad: .ds PAD_SIZE             ; working buffer
      001740                         90 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         91 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         92 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         93 stack_unf: ; stack underflow ; control_stack bottom 
                                     94 
                                     95 
                                     96 ;--------------------------------------
                                     97     .area HOME 
                                     98 ;--------------------------------------
      000000 82 00 05 4C             99     int cold_start
                           000001   100 .if DEBUG
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000004 82 00 00 0A            101 	int TrapHandler 		;TRAP  software interrupt
                           000000   102 .else
                                    103 	int NonHandledInterrupt ;TRAP  software interrupt
                                    104 .endif
      000008 82 00 00 09            105 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            106 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            107 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            108 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            109 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            110 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            111 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 25            112 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            113 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            114 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            115 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            116 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            117 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            118 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            119 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            120 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            121 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            122 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            123 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            124 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            125 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            126 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            127 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            128 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            129 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            130 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            131 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            132 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            133 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            134 	int NonHandledInterrupt ;int29  not used
                                    135 
                                    136 ;---------------------------------------
                                    137     .area CODE
                                    138 ;---------------------------------------
                           000001   139 .if DEBUG
      000000 53 54 4D 38 5F 54 42   140 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    141 .endif 
                                    142 
      000009                        143 NonHandledInterrupt:
      000009 71                     144     .byte 0x71  ; reinitialize MCU
                                    145 
                                    146 
                                    147 ;------------------------------------
                                    148 ; software interrupt handler  
                                    149 ;------------------------------------
                           000001   150 .if DEBUG 
      00000A                        151 TrapHandler:
      00000A 72 12 00 1F      [ 1]  152 	bset flags,#FTRAP 
      00000E CD 08 85         [ 4]  153 	call print_registers
      000011 CD 0A F0         [ 4]  154 	call cmd_itf
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000014 72 13 00 1F      [ 1]  155 	bres flags,#FTRAP 	
      000018 80               [11]  156 	iret
                                    157 .endif 
                                    158 
      000019                        159 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  160 	clr TIM4_SR 
      00001D CE 00 0A         [ 2]  161 	ldw x,ticks
      000020 5C               [ 1]  162 	incw x
      000021 CF 00 0A         [ 2]  163 	ldw ticks,x 
      000024 80               [11]  164 	iret 
                                    165 
                                    166 
                                    167 ;------------------------------------
                                    168 ; Triggered by pressing USER UserButton 
                                    169 ; on NUCLEO card.
                                    170 ;------------------------------------
      000025                        171 UserButtonHandler:
                                    172 ; wait button release
      000025 5F               [ 1]  173 	clrw x
      000026 5A               [ 2]  174 1$: decw x 
      000027 26 FD            [ 1]  175 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  176 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    177 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 1F 05   [ 2]  178     btjf flags,#FSLEEP,2$
      000033 72 17 00 1F      [ 1]  179 	bres flags,#FSLEEP 
      000037 80               [11]  180 	iret
      000038 72 00 00 1F 03   [ 2]  181 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  182 	jp 9$ 
      000040                        183 4$:	; program interrupted by user 
      000040 72 11 00 1F      [ 1]  184 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  185 	ldw x,#USER_ABORT
      000047 CD 01 B0         [ 4]  186 	call puts 
      00004A CE 00 04         [ 2]  187 	ldw x,basicptr
      00004D FE               [ 2]  188 	ldw x,(x)
                                    189 ; print line number 
      00004E 35 0A 00 06      [ 1]  190 	mov base,#10 
      000052 35 06 00 20      [ 1]  191 	mov tab_width,#6
      000056 CD 09 78         [ 4]  192 	call print_int  	
      000059 CE 00 04         [ 2]  193 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  194 	addw x,#3  
      00005F CD 01 B0         [ 4]  195 	call puts 
      000062 A6 0D            [ 1]  196 	ld a,#CR 
      000064 CD 01 9E         [ 4]  197 	call putc
      000067 5F               [ 1]  198 	clrw x  
      000068 C6 00 01         [ 1]  199 	ld a,in 
      00006B AB 03            [ 1]  200 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  201 	ld xl,a 
      00006E CD 01 D8         [ 4]  202 	call spaces 
      000071 A6 5E            [ 1]  203 	ld a,#'^
      000073 CD 01 9E         [ 4]  204 	call putc 
      000076                        205 9$:
      000076 AE 17 FF         [ 2]  206     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  207     ldw sp,x
      00007A 9A               [ 1]  208 	rim 
      00007B CC 07 53         [ 2]  209 	jp warm_start
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    210 
      00007E 0A 50 72 6F 67 72 61   211 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    212 
                                    213 
                                    214 ;----------------------------------------
                                    215 ; inialize MCU clock 
                                    216 ; input:
                                    217 ;   A 		source  HSI | 1 HSE 
                                    218 ;   XL      CLK_CKDIVR , clock divisor 
                                    219 ; output:
                                    220 ;   none 
                                    221 ;----------------------------------------
      000099                        222 clock_init:	
      000099 C1 50 C3         [ 1]  223 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  224 	jreq 2$ ; no switching required 
                                    225 ; select clock source 
      00009E 72 12 50 C5      [ 1]  226 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  227 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  228 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  229 	jrne 1$
      0000AA                        230 2$: 	
                                    231 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  232 	ld a,xl 
      0000AB C7 50 C6         [ 1]  233 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  234 	ret
                                    235 
                                    236 ;---------------------------------
                                    237 ; TIM4 is configured to generate an 
                                    238 ; interrupt every millisecond 
                                    239 ;----------------------------------
      0000AF                        240 timer4_init:
      0000AF 35 07 53 45      [ 1]  241 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B3 35 7D 53 46      [ 1]  242 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B7 35 05 53 40      [ 1]  243 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BB 72 10 53 41      [ 1]  244 	bset TIM4_IER,#TIM4_IER_UIE 
      0000BF 81               [ 4]  245 	ret
                                    246 
                                    247 ;----------------------------------
                                    248 ; unlock EEPROM for writing/erasing
                                    249 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    250 ; input:
                                    251 ;  none
                                    252 ; output:
                                    253 ;  none 
                                    254 ;----------------------------------
      0000C0                        255 unlock_eeprom:
      0000C0 35 AE 50 64      [ 1]  256 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C4 35 56 50 64      [ 1]  257     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C8 72 07 50 5F FB   [ 2]  258 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000CD 81               [ 4]  259 	ret
                                    260 
                                    261 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    262 ; unlock FLASH for writing/erasing
                                    263 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    264 ; input:
                                    265 ;  none
                                    266 ; output:
                                    267 ;  none
                                    268 ;----------------------------------
      0000CE                        269 unlock_flash:
      0000CE 35 56 50 62      [ 1]  270 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D2 35 AE 50 62      [ 1]  271 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000D6 72 03 50 5F FB   [ 2]  272 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000DB 81               [ 4]  273 	ret
                                    274 
                           000000   275 	BLOCK_ERASE=0
                                    276 ;----------------------------
                                    277 ; erase block code must be 
                                    278 ;executed from RAM
                                    279 ;-----------------------------
                           000000   280 .if BLOCK_ERASE 
                                    281 ; this code is copied to RAM 
                                    282 erase_start:
                                    283 	clr a 
                                    284     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    285     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    286 	ldf [farptr],a
                                    287     inc farptr+2 
                                    288     ldf [farptr],a
                                    289     inc farptr+2 
                                    290     ldf [farptr],a
                                    291     inc farptr+2 
                                    292     ldf [farptr],a
                                    293 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    294 	ret
                                    295 erase_end:
                                    296 
                                    297 ; copy erase_start in RAM 
                                    298 move_code_in_ram:
                                    299 	ldw x,#erase_end 
                                    300 	subw x,#erase_start
                                    301 	ldw acc16,x 
                                    302 	ldw x,#pad 
                                    303 	ldw y,#erase_start 
                                    304 	call move 
                                    305 	ret 
                                    306 
                                    307 ;-----------------------------------
                                    308 ; erase flash or EEPROM block 
                                    309 ; a block is 128 bytes 
                                    310 ; input:
                                    311 ;   farptr  address block begin
                                    312 ; output:
                                    313 ;   none
                                    314 ;--------------------------------------
                                    315 erase_block:
                                    316 	ldw x,farptr+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    317 	pushw x 
                                    318 	call move_code_in_ram 
                                    319 	popw x 
                                    320 	ldw farptr+1,x 
                                    321 	tnz farptr
                                    322 	jrne erase_flash 
                                    323 	ldw x,#FLASH_BASE 
                                    324 	cpw x,farptr+1 
                                    325 	jrpl erase_flash 
                                    326 ; erase eeprom block
                                    327 	call unlock_eeprom 
                                    328 	sim 
                                    329 	call pad   
                                    330 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    331 	rim 
                                    332 	ret 
                                    333 ; erase flash block:
                                    334 erase_flash:
                                    335 	call unlock_flash 
                                    336 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    337 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    338 	clr a 
                                    339 	sim 
                                    340 	call pad 
                                    341     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    342 	rim 
                                    343 	ret 
                                    344 .endif ; BLOCK_ERASE 
                                    345 
                                    346 
                                    347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    348 ; write a byte to FLASH or EEPROM 
                                    349 ; input:
                                    350 ;    a  		byte to write
                                    351 ;    farptr  	address
                                    352 ;    x          farptr[x]
                                    353 ; output:
                                    354 ;    none
                                    355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    356 	; variables locales
                           000001   357 	BTW = 1   ; byte to write offset on stack
                           000002   358 	OPT = 2   ; OPTION flag offset on stack
                           000002   359 	VSIZE = 2
      0000DC                        360 write_byte:
      0000DC 90 89            [ 2]  361 	pushw y
      0000DE                        362 	_vars VSIZE
      0000DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E0 6B 01            [ 1]  363 	ld (BTW,sp),a ; byte to write 
      0000E2 0F 02            [ 1]  364 	clr (OPT,sp)  ; OPTION flag
                                    365 ; put addr[15:0] in Y, for bounds check.
      0000E4 90 CE 00 11      [ 2]  366 	ldw y,farptr+1   ; Y=addr15:0
                                    367 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000E8 72 5D 00 10      [ 1]  368 	tnz farptr 
      0000EC 26 14            [ 1]  369 	jrne write_flash
      0000EE 90 A3 21 80      [ 2]  370     cpw y,#user_space
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000F2 24 0E            [ 1]  371     jruge write_flash
      0000F4 90 A3 40 00      [ 2]  372 	cpw y,#EEPROM_BASE  
      0000F8 25 52            [ 1]  373     jrult write_exit
      0000FA 90 A3 48 00      [ 2]  374 	cpw y,#OPTION_BASE
      0000FE 25 18            [ 1]  375 	jrult write_eeprom
      000100 20 4A            [ 2]  376     jra write_exit
                                    377 ; write program memory
      000102                        378 write_flash:
      000102 CD 00 CE         [ 4]  379 	call unlock_flash 
      000105 9B               [ 1]  380 1$:	sim 
      000106 7B 01            [ 1]  381 	ld a,(BTW,sp)
      000108 92 A7 00 10      [ 4]  382 	ldf ([farptr],x),a ; farptr[x]=A
      00010C 72 05 50 5F FB   [ 2]  383 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000111 9A               [ 1]  384     rim 
      000112 72 13 50 5F      [ 1]  385     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000116 20 34            [ 2]  386     jra write_exit
                                    387 ; write eeprom and option
      000118                        388 write_eeprom:
      000118 CD 00 C0         [ 4]  389 	call unlock_eeprom
                                    390 	; check for data eeprom or option eeprom
      00011B 90 A3 48 00      [ 2]  391 	cpw y,#OPTION_BASE
      00011F 2B 08            [ 1]  392 	jrmi 1$
      000121 90 A3 48 80      [ 2]  393 	cpw y,#OPTION_END+1
      000125 2A 02            [ 1]  394 	jrpl 1$
      000127 03 02            [ 1]  395 	cpl (OPT,sp)
      000129                        396 1$: 
      000129 0D 02            [ 1]  397     tnz (OPT,sp)
      00012B 27 08            [ 1]  398     jreq 2$
                                    399 	; pour modifier une option il faut modifier ces 2 bits
      00012D 72 1E 50 5B      [ 1]  400     bset FLASH_CR2,#FLASH_CR2_OPT
      000131 72 1F 50 5C      [ 1]  401     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000135                        402 2$: 
      000135 7B 01            [ 1]  403     ld a,(BTW,sp)
      000137 92 A7 00 10      [ 4]  404     ldf ([farptr],x),a
      00013B 0D 02            [ 1]  405     tnz (OPT,sp)
      00013D 27 08            [ 1]  406     jreq 3$
      00013F 5C               [ 1]  407     incw x
      000140 7B 01            [ 1]  408     ld a,(BTW,sp)
      000142 43               [ 1]  409     cpl a
      000143 92 A7 00 10      [ 4]  410     ldf ([farptr],x),a
      000147 72 05 50 5F FB   [ 2]  411 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014C                        412 write_exit:
      00014C                        413 	_drop VSIZE 
      00014C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00014E 90 85            [ 2]  414 	popw y
      000150 81               [ 4]  415     ret
                                    416 
                                    417 ;--------------------------------------------
                                    418 ; write a data block to eeprom or flash 
                                    419 ; input:
                                    420 ;   Y        source address   
                                    421 ;   X        array index  destination  farptr[x]
                                    422 ;   BSIZE    block size bytes 
                                    423 ;   farptr   write address , byte* 
                                    424 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    425 ;	X 		after last byte written 
                                    426 ;   Y 		after last byte read 
                                    427 ;  farptr   point after block
                                    428 ;---------------------------------------------
      000151                        429 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000151                        430 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    431 	; local var 
                           000001   432 	XSAVE=1 
                           000002   433 	VSIZE=2 
      000151                        434 write_block:
      000151                        435 	_vars VSIZE
      000151 52 02            [ 2]    1     sub sp,#VSIZE 
      000153 1F 01            [ 2]  436 	ldw (XSAVE,sp),x 
      000155 1E 05            [ 2]  437 	ldw x,(BSIZE,sp) 
      000157 27 13            [ 1]  438 	jreq 9$
      000159 1E 01            [ 2]  439 1$:	ldw x,(XSAVE,sp)
      00015B 90 F6            [ 1]  440 	ld a,(y)
      00015D CD 00 DC         [ 4]  441 	call write_byte 
      000160 5C               [ 1]  442 	incw x 
      000161 90 5C            [ 1]  443 	incw y 
      000163 1F 01            [ 2]  444 	ldw (XSAVE,sp),x
      000165 1E 05            [ 2]  445 	ldw x,(BSIZE,sp)
      000167 5A               [ 2]  446 	decw x
      000168 1F 05            [ 2]  447 	ldw (BSIZE,sp),x 
      00016A 26 ED            [ 1]  448 	jrne 1$
      00016C                        449 9$:
      00016C 1E 01            [ 2]  450 	ldw x,(XSAVE,sp)
      00016E CD 1A 7E         [ 4]  451 	call incr_farptr
      000171                        452 	_drop VSIZE
      000171 5B 02            [ 2]    1     addw sp,#VSIZE 
      000173 81               [ 4]  453 	ret 
                                    454 
                                    455 
                                    456 ;---------------------------------------------
                                    457 ;   UART3 subroutines
                                    458 ;---------------------------------------------
                                    459 
                                    460 ;---------------------------------------------
                                    461 ; initialize UART3, 115200 8N1
                                    462 ; input:
                                    463 ;	none
                                    464 ; output:
                                    465 ;   none
                                    466 ;---------------------------------------------
      000174                        467 uart3_init:
                                    468 	; configure tx pin
      000174 72 1A 50 11      [ 1]  469 	bset PD_DDR,#BIT5 ; tx pin
      000178 72 1A 50 12      [ 1]  470 	bset PD_CR1,#BIT5 ; push-pull output
      00017C 72 1A 50 13      [ 1]  471 	bset PD_CR2,#BIT5 ; fast output
      000180                        472 uart3_set_baud: 
                                    473 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    474 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000180 A6 E1            [ 1]  475 	ld a,#CLK_SWR_HSI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000182 C1 50 C3         [ 1]  476 	cp a,CLK_CMSR 
      000185 27 0A            [ 1]  477 	jreq hsi_clock 
      000187                        478 hse_clock: ; 8 Mhz 	
      000187 35 05 52 43      [ 1]  479 	mov UART3_BRR2,#0x05 ; must be loaded first
      00018B 35 04 52 42      [ 1]  480 	mov UART3_BRR1,#0x4
      00018F 20 08            [ 2]  481 	jra uart_enable
      000191                        482 hsi_clock: ; 16 Mhz 	
      000191 35 0B 52 43      [ 1]  483 	mov UART3_BRR2,#0x0b ; must be loaded first
      000195 35 08 52 42      [ 1]  484 	mov UART3_BRR1,#0x08
      000199                        485 uart_enable:	
      000199 35 0C 52 45      [ 1]  486 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      00019D 81               [ 4]  487 	ret
                                    488 	
                                    489 ;---------------------------------
                                    490 ; send character to UART3 
                                    491 ; input:
                                    492 ;   A 
                                    493 ; output:
                                    494 ;   none 
                                    495 ;--------------------------------	
      00019E                        496 putc:
      00019E 72 0F 52 40 FB   [ 2]  497 	btjf UART3_SR,#UART_SR_TXE,.
      0001A3 C7 52 41         [ 1]  498 	ld UART3_DR,a 
      0001A6 81               [ 4]  499 	ret 
                                    500 
                                    501 ;---------------------------------
                                    502 ; wait character from UART3 
                                    503 ; input:
                                    504 ;   none
                                    505 ; output:
                                    506 ;   A 			char  
                                    507 ;--------------------------------	
      0001A7                        508 getc:
      0001A7 72 0B 52 40 FB   [ 2]  509 	btjf UART3_SR,#UART_SR_RXNE,.
      0001AC C6 52 41         [ 1]  510 	ld a,UART3_DR 
      0001AF 81               [ 4]  511 	ret 
                                    512 
                                    513 ;-----------------------------
                                    514 ; send an ASCIZ string to UART3 
                                    515 ; input: 
                                    516 ;   x 		char * 
                                    517 ; output:
                                    518 ;   none 
                                    519 ;-------------------------------
      0001B0                        520 puts:
      0001B0 F6               [ 1]  521     ld a,(x)
      0001B1 27 06            [ 1]  522 	jreq 1$
      0001B3 CD 01 9E         [ 4]  523 	call putc 
      0001B6 5C               [ 1]  524 	incw x 
      0001B7 20 F7            [ 2]  525 	jra puts 
      0001B9 81               [ 4]  526 1$:	ret 
                                    527 
                                    528 
                                    529 ;---------------------------
                                    530 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    531 ; of cursor on terminal 
                                    532 ; input:
                                    533 ;   none 
                                    534 ; output:
                                    535 ;	none 
                                    536 ;---------------------------
      0001BA                        537 bksp:
      0001BA A6 08            [ 1]  538 	ld a,#BSP 
      0001BC CD 01 9E         [ 4]  539 	call putc 
      0001BF A6 20            [ 1]  540 	ld a,#SPACE 
      0001C1 CD 01 9E         [ 4]  541 	call putc 
      0001C4 A6 08            [ 1]  542 	ld a,#BSP 
      0001C6 CD 01 9E         [ 4]  543 	call putc 
      0001C9 81               [ 4]  544 	ret 
                                    545 ;---------------------------
                                    546 ; delete n character left of cursor 
                                    547 ; at terminal.
                                    548 ; input: 
                                    549 ;   A   	number of characters to delete.
                                    550 ; output:
                                    551 ;    none 
                                    552 ;--------------------------	
      0001CA                        553 delete:
      0001CA 88               [ 1]  554 	push a 
      0001CB 0D 01            [ 1]  555 0$:	tnz (1,sp)
      0001CD 27 07            [ 1]  556 	jreq 1$
      0001CF CD 01 BA         [ 4]  557 	call bksp 
      0001D2 0A 01            [ 1]  558 	dec (1,sp)
      0001D4 20 F5            [ 2]  559 	jra 0$
      0001D6 84               [ 1]  560 1$:	pop a 
      0001D7 81               [ 4]  561 	ret
                                    562 
                                    563 ;--------------------------
                                    564 ; print n spaces on terminal
                                    565 ; input:
                                    566 ;  X 		number of spaces 
                                    567 ; output:
                                    568 ;	none 
                                    569 ;---------------------------
      0001D8                        570 spaces:
      0001D8 A6 20            [ 1]  571 	ld a,#SPACE 
      0001DA 5D               [ 2]  572 1$:	tnzw x
      0001DB 27 06            [ 1]  573 	jreq 9$
      0001DD CD 01 9E         [ 4]  574 	call putc 
      0001E0 5A               [ 2]  575 	decw x
      0001E1 20 F7            [ 2]  576 	jra 1$
      0001E3                        577 9$: 
      0001E3 81               [ 4]  578 	ret 
                                    579 
                           000001   580 .if DEBUG 
                                    581 ;---------------------------------
                                    582 ;; print actual registers states 
                                    583 ;; as pushed on stack 
                                    584 ;; {Y,X,CC,A}
                                    585 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4                        586 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001E4                        587 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001E4                        588 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001E4                        589 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001E4                        590 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001E4                        591 prt_regs:
      0001E4 AE 02 27         [ 2]  592 	ldw x,#regs_state 
      0001E7 CD 01 B0         [ 4]  593 	call puts
                                    594 ; register PC
      0001EA 16 01            [ 2]  595 	ldw y,(1,sp)
      0001EC AE 09 15         [ 2]  596 	ldw x,#REG_EPC 
      0001EF CD 08 66         [ 4]  597 	call prt_reg16 
                                    598 ; register CC 
      0001F2 7B 08            [ 1]  599 	ld a,(R_CC,sp)
      0001F4 AE 09 26         [ 2]  600 	ldw x,#REG_CC 
      0001F7 CD 08 41         [ 4]  601 	call prt_reg8 
                                    602 ; register A 
      0001FA 7B 07            [ 1]  603 	ld a,(R_A,sp)
      0001FC AE 09 22         [ 2]  604 	ldw x,#REG_A 
      0001FF CD 08 41         [ 4]  605 	call prt_reg8 
                                    606 ; register X 
      000202 16 05            [ 2]  607 	ldw y,(R_X,sp)
      000204 AE 09 1E         [ 2]  608 	ldw x,#REG_X 
      000207 CD 08 66         [ 4]  609 	call prt_reg16 
                                    610 ; register Y 
      00020A 16 03            [ 2]  611 	ldw y,(R_Y,sp)
      00020C AE 09 1A         [ 2]  612 	ldw x,#REG_Y 
      00020F CD 08 66         [ 4]  613 	call prt_reg16 
                                    614 ; register SP 
      000212 90 96            [ 1]  615 	ldw y,sp
      000214 72 A9 00 08      [ 2]  616 	addw y,#6+ARG_OFS  
      000218 AE 09 2B         [ 2]  617 	ldw x,#REG_SP
      00021B CD 08 66         [ 4]  618 	call prt_reg16
      00021E A6 0D            [ 1]  619 	ld a,#CR 
      000220 CD 01 9E         [ 4]  620 	call putc
      000223 CD 01 9E         [ 4]  621 	call putc   
      000226 81               [ 4]  622 	ret 
                                    623 
      000227 0A 72 65 67 69 73 74   624 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    625 
                                    626 
                                    627 ;--------------------
                                    628 ; print content at address in hex.
                                    629 ; input:
                                    630 ;   X 	address to peek 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    631 ; output:
                                    632 ;	none 
                                    633 ;--------------------	
      00024E                        634 prt_peek:
      00024E 89               [ 2]  635 	pushw x 
      00024F CF 00 08         [ 2]  636 	ldw acc16,x 
      000252 72 5F 00 07      [ 1]  637 	clr acc24 
      000256 5F               [ 1]  638 	clrw x 
      000257 A6 10            [ 1]  639 	ld a,#16 
      000259 CD 09 30         [ 4]  640 	call prti24 
      00025C A6 3A            [ 1]  641 	ld a,#': 
      00025E CD 01 9E         [ 4]  642 	call putc 
      000261 A6 20            [ 1]  643 	ld a,#SPACE 
      000263 CD 01 9E         [ 4]  644 	call putc 
      000266 85               [ 2]  645 	popw x 
      000267 F6               [ 1]  646 	ld a,(x)
      000268 C7 00 09         [ 1]  647 	ld acc8,a 
      00026B 5F               [ 1]  648 	clrw x 
      00026C A6 10            [ 1]  649 	ld a,#16 
      00026E CD 09 30         [ 4]  650 	call prti24
      000271 81               [ 4]  651 	ret 
                                    652 .endif ; DEBUG  
                                    653 
                                    654 ;-------------------------------------
                                    655 ; retrun string length
                                    656 ; input:
                                    657 ;   X         .asciz  
                                    658 ; output:
                                    659 ;   X         length 
                                    660 ;-------------------------------------
      000272                        661 strlen:
      000272 90 93            [ 1]  662 	ldw y,x 
      000274 5F               [ 1]  663 	clrw x 
      000275 90 7D            [ 1]  664 1$:	tnz (y) 
      000277 27 05            [ 1]  665 	jreq 9$ 
      000279 5C               [ 1]  666 	incw x
      00027A 90 5C            [ 1]  667 	incw y 
      00027C 20 F7            [ 2]  668 	jra 1$ 
      00027E 81               [ 4]  669 9$: ret 
                                    670 
                                    671 ;------------------------------------
                                    672 ; compare 2 strings
                                    673 ; input:
                                    674 ;   X 		char* first string 
                                    675 ;   Y       char* second string 
                                    676 ; output:
                                    677 ;   A 		0|1 
                                    678 ;-------------------------------------
      00027F                        679 strcmp:
      00027F F6               [ 1]  680 	ld a,(x)
      000280 27 0B            [ 1]  681 	jreq 5$ 
      000282 90 F1            [ 1]  682 	cp a,(y) 
      000284 26 05            [ 1]  683 	jrne 4$ 
      000286 5C               [ 1]  684 	incw x 
      000287 90 5C            [ 1]  685 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      000289 20 F4            [ 2]  686 	jra strcmp 
      00028B                        687 4$: ; not same  
      00028B 4F               [ 1]  688 	clr a 
      00028C 81               [ 4]  689 	ret 
      00028D                        690 5$: ; same 
      00028D A6 01            [ 1]  691 	ld a,#1 
      00028F 81               [ 4]  692 	ret 
                                    693 
                                    694 
                                    695 ;---------------------------------------
                                    696 ;  copy src to dest 
                                    697 ; input:
                                    698 ;   X 		dest 
                                    699 ;   Y 		src 
                                    700 ; output: 
                                    701 ;   X 		dest 
                                    702 ;----------------------------------
      000290                        703 strcpy:
      000290 89               [ 2]  704 	pushw x 
      000291 90 F6            [ 1]  705 1$: ld a,(y)
      000293 27 06            [ 1]  706 	jreq 9$ 
      000295 F7               [ 1]  707 	ld (x),a 
      000296 5C               [ 1]  708 	incw x 
      000297 90 5C            [ 1]  709 	incw y 
      000299 20 F6            [ 2]  710 	jra 1$ 
      00029B 7F               [ 1]  711 9$:	clr (x)
      00029C 85               [ 2]  712 	popw x 
      00029D 81               [ 4]  713 	ret 
                                    714 
                                    715 ;---------------------------------------
                                    716 ; move memory block 
                                    717 ; input:
                                    718 ;   X 		destination 
                                    719 ;   Y 	    source 
                                    720 ;   acc16	size 
                                    721 ; output:
                                    722 ;   none 
                                    723 ;--------------------------------------
                           000001   724 	INCR=1 ; increament high byte 
                           000002   725 	LB=2 ; increament low byte 
                           000002   726 	VSIZE=2
      00029E                        727 move:
      00029E                        728 	_vars VSIZE 
      00029E 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A0 0F 01            [ 1]  729 	clr (INCR,sp)
      0002A2 0F 02            [ 1]  730 	clr (LB,sp)
      0002A4 90 89            [ 2]  731 	pushw y 
      0002A6 13 01            [ 2]  732 	cpw x,(1,sp) ; compare DEST to SRC 
      0002A8 90 85            [ 2]  733 	popw y 
      0002AA 27 31            [ 1]  734 	jreq move_exit ; x==y 
      0002AC 2B 0E            [ 1]  735 	jrmi move_down
      0002AE                        736 move_up: ; start from top address with incr=-1
      0002AE 72 BB 00 08      [ 2]  737 	addw x,acc16
      0002B2 72 B9 00 08      [ 2]  738 	addw y,acc16
      0002B6 03 01            [ 1]  739 	cpl (INCR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002B8 03 02            [ 1]  740 	cpl (LB,sp)   ; increment = -1 
      0002BA 20 05            [ 2]  741 	jra move_loop  
      0002BC                        742 move_down: ; start from bottom address with incr=1 
      0002BC 5A               [ 2]  743     decw x 
      0002BD 90 5A            [ 2]  744 	decw y
      0002BF 0C 02            [ 1]  745 	inc (LB,sp) ; incr=1 
      0002C1                        746 move_loop:	
      0002C1 C6 00 08         [ 1]  747     ld a, acc16 
      0002C4 CA 00 09         [ 1]  748 	or a, acc8
      0002C7 27 14            [ 1]  749 	jreq move_exit 
      0002C9 72 FB 01         [ 2]  750 	addw x,(INCR,sp)
      0002CC 72 F9 01         [ 2]  751 	addw y,(INCR,sp) 
      0002CF 90 F6            [ 1]  752 	ld a,(y)
      0002D1 F7               [ 1]  753 	ld (x),a 
      0002D2 89               [ 2]  754 	pushw x 
      0002D3 CE 00 08         [ 2]  755 	ldw x,acc16 
      0002D6 5A               [ 2]  756 	decw x 
      0002D7 CF 00 08         [ 2]  757 	ldw acc16,x 
      0002DA 85               [ 2]  758 	popw x 
      0002DB 20 E4            [ 2]  759 	jra move_loop
      0002DD                        760 move_exit:
      0002DD                        761 	_drop VSIZE
      0002DD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002DF 81               [ 4]  762 	ret 	
                                    763 
                                    764 ;-------------------------------------
                                    765 ; search text area for a line with 
                                    766 ; same number as line#  
                                    767 ; input:
                                    768 ;	X 			line# 
                                    769 ; output:
                                    770 ;   X 			addr of line | 0 
                                    771 ;   Y           line#|insert address if not found  
                                    772 ;-------------------------------------
                           000001   773 	LL=1 ; line length 
                           000002   774 	LB=2 ; line length low byte 
                           000002   775 	VSIZE=2 
      0002E0                        776 search_lineno:
      0002E0                        777 	_vars VSIZE
      0002E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E2 0F 01            [ 1]  778 	clr (LL,sp)
      0002E4 90 CE 00 18      [ 2]  779 	ldw y,txtbgn
      0002E8                        780 search_ln_loop:
      0002E8 90 C3 00 1A      [ 2]  781 	cpw y,txtend 
      0002EC 2A 10            [ 1]  782 	jrpl 8$
      0002EE 90 F3            [ 1]  783 	cpw x,(y)
      0002F0 27 0E            [ 1]  784 	jreq 9$
      0002F2 2B 0A            [ 1]  785 	jrmi 8$ 
      0002F4 90 E6 02         [ 1]  786 	ld a,(2,y)
      0002F7 6B 02            [ 1]  787 	ld (LB,sp),a 
      0002F9 72 F9 01         [ 2]  788 	addw y,(LL,sp)
      0002FC 20 EA            [ 2]  789 	jra search_ln_loop 
      0002FE                        790 8$: 
      0002FE 5F               [ 1]  791 	clrw x 	
      0002FF 51               [ 1]  792 	exgw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000300                        793 9$: _drop VSIZE
      000300 5B 02            [ 2]    1     addw sp,#VSIZE 
      000302 51               [ 1]  794 	exgw x,y   
      000303 81               [ 4]  795 	ret 
                                    796 
                                    797 ;-------------------------------------
                                    798 ; delete line at addr
                                    799 ; move new line to insert with end of text 
                                    800 ; otherwise it would be overwritten.
                                    801 ; input:
                                    802 ;   X 		addr of line i.e DEST for move 
                                    803 ;-------------------------------------
                           000001   804 	LLEN=1
                           000003   805 	SRC=3
                           000004   806 	VSIZE=4
      000304                        807 del_line: 
      000304                        808 	_vars VSIZE 
      000304 52 04            [ 2]    1     sub sp,#VSIZE 
      000306 E6 02            [ 1]  809 	ld a,(2,x) ; line length
      000308 6B 02            [ 1]  810 	ld (LLEN+1,sp),a 
      00030A 0F 01            [ 1]  811 	clr (LLEN,sp)
      00030C 90 93            [ 1]  812 	ldw y,x  
      00030E 72 F9 01         [ 2]  813 	addw y,(LLEN,sp) ;SRC  
      000311 17 03            [ 2]  814 	ldw (SRC,sp),y  ;save source 
      000313 90 CE 00 1A      [ 2]  815 	ldw y,txtend 
      000317 90 E6 02         [ 1]  816 	ld a,(2,y)
      00031A 90 5F            [ 1]  817 	clrw y 
      00031C 90 97            [ 1]  818 	ld yl,a  
      00031E 72 B9 00 1A      [ 2]  819 	addw y,txtend
      000322 72 F2 03         [ 2]  820 	subw y,(SRC,sp) ; y=count 
      000325 90 CF 00 08      [ 2]  821 	ldw acc16,y 
      000329 16 03            [ 2]  822 	ldw y,(SRC,sp)    ; source
      00032B CD 02 9E         [ 4]  823 	call move
      00032E 90 CE 00 1A      [ 2]  824 	ldw y,txtend 
      000332 72 F2 01         [ 2]  825 	subw y,(LLEN,sp)
      000335 90 CF 00 1A      [ 2]  826 	ldw txtend,y  
      000339                        827 	_drop VSIZE     
      000339 5B 04            [ 2]    1     addw sp,#VSIZE 
      00033B 81               [ 4]  828 	ret 
                                    829 
                                    830 ;---------------------------------------------
                                    831 ; create a gap in text area 
                                    832 ; move new line to insert in gap with end of text
                                    833 ; otherwise it would be overwritten.
                                    834 ; input:
                                    835 ;    X 			addr gap start 
                                    836 ;    Y 			gap length 
                                    837 ; output:
                                    838 ;    X 			addr gap start 
                                    839 ;--------------------------------------------
                           000001   840 	DEST=1
                           000003   841 	SRC=3
                           000005   842 	LEN=5
                           000006   843 	VSIZE=6 
      00033C                        844 create_gap:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00033C                        845 	_vars VSIZE
      00033C 52 06            [ 2]    1     sub sp,#VSIZE 
      00033E 1F 03            [ 2]  846 	ldw (SRC,sp),x 
      000340 17 05            [ 2]  847 	ldw (LEN,sp),y 
      000342 90 CF 00 08      [ 2]  848 	ldw acc16,y 
      000346 90 93            [ 1]  849 	ldw y,x ; SRC
      000348 72 BB 00 08      [ 2]  850 	addw x,acc16  
      00034C 1F 01            [ 2]  851 	ldw (DEST,sp),x 
                                    852 ;compute size to move 	
      00034E CE 00 1A         [ 2]  853 	ldw x,txtend 
      000351 E6 02            [ 1]  854 	ld a,(2,x) ; pending line length 
      000353 C7 00 09         [ 1]  855 	ld acc8,a 
      000356 72 5F 00 08      [ 1]  856 	clr acc16 
      00035A 72 BB 00 08      [ 2]  857 	addw x,acc16 
      00035E 72 F0 03         [ 2]  858 	subw x,(SRC,sp)
      000361 CF 00 08         [ 2]  859 	ldw acc16,x ; size to move
      000364 1E 01            [ 2]  860 	ldw x,(DEST,sp) 
      000366 CD 02 9E         [ 4]  861 	call move
      000369 CE 00 1A         [ 2]  862 	ldw x,txtend
      00036C 72 FB 05         [ 2]  863 	addw x,(LEN,sp)
      00036F CF 00 1A         [ 2]  864 	ldw txtend,x
      000372                        865 9$:	_drop VSIZE 
      000372 5B 06            [ 2]    1     addw sp,#VSIZE 
      000374 81               [ 4]  866 	ret 
                                    867 
                                    868 
                                    869 ;--------------------------------------------
                                    870 ; insert line in tib into text area 
                                    871 ; first search for already existing 
                                    872 ; replace existing 
                                    873 ; if strlen(tib)==0 delete existing 
                                    874 ; input:
                                    875 ;   ptr16 				pointer to tokenized line  
                                    876 ; output:
                                    877 ;   none
                                    878 ;---------------------------------------------
                           000001   879 	DEST=1  ; text area insertion address 
                           000003   880 	SRC=3   ; str to insert address 
                           000005   881 	LINENO=5 ; line number 
                           000007   882 	LLEN=7 ; line length 
                           000008   883 	VSIZE=8  
      000375                        884 insert_line:
      000375                        885 	_vars VSIZE 
      000375 52 08            [ 2]    1     sub sp,#VSIZE 
      000377 CE 00 11         [ 2]  886 	ldw x,ptr16  
      00037A C3 00 18         [ 2]  887 	cpw x,txtbgn 
      00037D 26 0D            [ 1]  888 	jrne 0$
                                    889 ;first text line 
      00037F AE 00 02         [ 2]  890 	ldw x,#2 
      000382 72 D6 00 11      [ 4]  891 	ld a,([ptr16],x)
      000386 5F               [ 1]  892 	clrw x 
      000387 97               [ 1]  893 	ld xl,a
      000388 1F 07            [ 2]  894 	ldw (LLEN,sp),x  
      00038A 20 45            [ 2]  895 	jra 5$
      00038C 72 CE 00 11      [ 5]  896 0$:	ldw x,[ptr16]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    897 ; new line number
      000390 1F 05            [ 2]  898 	ldw (LINENO,sp),x 
      000392 AE 00 02         [ 2]  899 	ldw x,#2 
      000395 72 D6 00 11      [ 4]  900 	ld a,([ptr16],x)
      000399 97               [ 1]  901 	ld xl,a
                                    902 ; new line length
      00039A 1F 07            [ 2]  903 	ldw (LLEN,sp),x
                                    904 ; check if that line number already exit 	
      00039C 1E 05            [ 2]  905 	ldw x,(LINENO,sp)
      00039E CD 02 E0         [ 4]  906 	call search_lineno 
      0003A1 5D               [ 2]  907 	tnzw x 
      0003A2 26 04            [ 1]  908 	jrne 2$
                                    909 ; line doesn't exit
                                    910 ; it will be inserted at this point.  	
      0003A4 17 01            [ 2]  911 	ldw (DEST,sp),y 
      0003A6 20 05            [ 2]  912 	jra 3$
                                    913 ; line exit delete it.
                                    914 ; it will be replaced by new one 	
      0003A8 1F 01            [ 2]  915 2$: ldw (DEST,sp),x 
      0003AA CD 03 04         [ 4]  916 	call del_line
      0003AD                        917 3$: 
                                    918 ; insert new line or leave if LLEN==3
                                    919 ; LLEN==3 means empty line 
      0003AD A6 03            [ 1]  920 	ld a,#3
      0003AF 11 08            [ 1]  921 	cp a,(LLEN+1,sp)
      0003B1 27 27            [ 1]  922 	jreq insert_ln_exit ; empty line exit.
                                    923 ; if insertion point at txtend 
                                    924 ; no move required 
      0003B3 1E 01            [ 2]  925 	ldw x,(DEST,sp)
      0003B5 C3 00 1A         [ 2]  926 	cpw x,txtend 
      0003B8 2A 17            [ 1]  927 	jrpl 5$ 
                                    928 ; must create a gap
                                    929 ; at insertion point  
      0003BA 1E 01            [ 2]  930 	ldw x,(DEST,sp)
      0003BC 16 07            [ 2]  931 	ldw y,(LLEN,sp)
      0003BE CD 03 3C         [ 4]  932 	call create_gap 
                                    933 ; move new line in gap 
      0003C1 1E 07            [ 2]  934 	ldw x,(LLEN,sp)
      0003C3 CF 00 08         [ 2]  935 	ldw acc16,x 
      0003C6 90 CE 00 1A      [ 2]  936 	ldw y,txtend ;SRC 
      0003CA 1E 01            [ 2]  937 	ldw x,(DEST,sp) ; dest address 
      0003CC CD 02 9E         [ 4]  938 	call move 
      0003CF 20 09            [ 2]  939 	jra insert_ln_exit  
      0003D1                        940 5$: ; no move required 
      0003D1 1E 07            [ 2]  941 	ldw x,(LLEN,sp) 
      0003D3 72 BB 00 1A      [ 2]  942 	addw x,txtend 
      0003D7 CF 00 1A         [ 2]  943 	ldw txtend,x 
      0003DA                        944 insert_ln_exit:	
      0003DA                        945 	_drop VSIZE
      0003DA 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003DC 81               [ 4]  946 	ret
                                    947 
                                    948 
                                    949 ;-----------------------------
                                    950 ; check if text buffer full
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    951 ; input:
                                    952 ;   ptr16     addr start tokenize line 
                                    953 ;   X         buffer index 
                                    954 ; output:
                                    955 ;   none 
                                    956 ;-----------------------------------
      0003DD                        957 check_full:
      0003DD 72 BB 00 11      [ 2]  958 	addw x,ptr16 
      0003E1 A3 16 C8         [ 2]  959 	cpw x,#tib 
      0003E4 25 05            [ 1]  960 	jrult 1$
      0003E6 A6 01            [ 1]  961 	ld a,#ERR_MEM_FULL
      0003E8 CC 07 01         [ 2]  962 	jp tb_error 
      0003EB 81               [ 4]  963 1$: ret 
                                    964 
                                    965 
                                    966 ;-----------------------------------
                                    967 ; create token list form text line 
                                    968 ; save this list in text area
                                    969 ; input:
                                    970 ;   none
                                    971 ; output:
                                    972 ;   basicptr     token list buffer
                                    973 ;   line# 		 BASIC line number 
                                    974 ;   in.w  		 cleared 
                                    975 ;-----------------------------------
                                    976 	.macro _incr_ptr16 n 
                                    977 	ldw x,#n 
                                    978 	addw x,ptr16 
                                    979 	ldw ptr16,x 
                                    980 	.endm 
                                    981 
                           000001   982 	XSAVE=1
                           000003   983 	BUFIDX=3
                           000004   984 	VSIZE=4
      0003EC                        985 compile:
      0003EC                        986 	_vars VSIZE 
      0003EC 52 04            [ 2]    1     sub sp,#VSIZE 
      0003EE 72 1A 00 1F      [ 1]  987 	bset flags,#FCOMP 
      0003F2 CE 00 1A         [ 2]  988 	ldw x,txtend
      0003F5 CF 00 11         [ 2]  989 	ldw ptr16,x 
      0003F8 5F               [ 1]  990 	clrw x 
      0003F9 AE 00 03         [ 2]  991 	ldw x,#3
      0003FC 1F 03            [ 2]  992 	ldw (BUFIDX,sp),X  
      0003FE CD 03 DD         [ 4]  993 	call check_full
      000401 5F               [ 1]  994 	clrw x 
      000402 72 CF 00 11      [ 5]  995 	ldw [ptr16],x 
      000406 CD 0C DF         [ 4]  996 	call get_token
      000409 1F 01            [ 2]  997 	ldw (XSAVE,sp),x 
      00040B A1 04            [ 1]  998 	cp a,#TK_INTGR 
      00040D 26 11            [ 1]  999 	jrne 3$
      00040F A3 00 00         [ 2] 1000 	cpw x,#0  
      000412 22 03            [ 1] 1001 	jrugt 1$
      000414 CC 06 FF         [ 2] 1002 	jp syntax_error 
      000417 72 CF 00 11      [ 5] 1003 1$:	ldw [ptr16],x; line number
      00041B CD 0C DF         [ 4] 1004 2$:	call get_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00041E 1F 01            [ 2] 1005 	ldw (XSAVE,sp),x 
      000420 A1 00            [ 1] 1006 3$:	cp a,#TK_NONE 
      000422 26 03            [ 1] 1007 	jrne 30$
      000424 CC 04 B7         [ 2] 1008 	jp 9$
      000427                       1009 30$: 	 
      000427 1E 03            [ 2] 1010 	ldw x,(BUFIDX,sp)
      000429 CD 03 DD         [ 4] 1011 	call check_full 
      00042C 16 03            [ 2] 1012 	ldw y,(BUFIDX,sp) 
      00042E 91 D7 11         [ 4] 1013 	ld ([ptr16],y),a ; token attribute 
      000431 90 5C            [ 1] 1014 	incw y
      000433 17 03            [ 2] 1015 	ldw (BUFIDX,sp),y
      000435 A1 01            [ 1] 1016 	cp a,#TK_COLON 
      000437 26 02            [ 1] 1017 	jrne 31$
      000439 20 E0            [ 2] 1018 	jra 2$ 
      00043B                       1019 31$:
      00043B A1 03            [ 1] 1020 	cp a,#TK_CHAR
      00043D 26 0C            [ 1] 1021 	jrne 32$ 
      00043F 1E 01            [ 2] 1022 	ldw x,(XSAVE,sp)
      000441 9F               [ 1] 1023 	ld a,xl 
      000442 91 D7 11         [ 4] 1024 	ld ([ptr16],y),a
      000445 90 5C            [ 1] 1025 	incw y 
      000447 17 03            [ 2] 1026 	ldw (BUFIDX,sp),y 
      000449 20 D0            [ 2] 1027 	jra 2$ 
      00044B                       1028 32$:
      00044B A1 02            [ 1] 1029 	cp a,#TK_ARRAY 
      00044D 27 CC            [ 1] 1030 	jreq 2$ 
      00044F A1 0A            [ 1] 1031 	cp a,#TK_QSTR 
      000451 26 25            [ 1] 1032 	jrne 4$
      000453 AE 17 18         [ 2] 1033 	ldw x,#pad 
      000456 CD 02 72         [ 4] 1034 	call strlen
      000459 5C               [ 1] 1035 	incw x  
      00045A CD 03 DD         [ 4] 1036 	call check_full 
      00045D 90 AE 17 18      [ 2] 1037 	ldw y,#pad 
      000461 CE 00 11         [ 2] 1038 	ldw x,ptr16
      000464 72 FB 03         [ 2] 1039 	addw x,(BUFIDX,sp)	
      000467 CD 02 90         [ 4] 1040 	call strcpy 
      00046A AE 17 18         [ 2] 1041 	ldw x,#pad 
      00046D CD 02 72         [ 4] 1042 	call strlen 
      000470 5C               [ 1] 1043 	incw x
      000471 72 FB 03         [ 2] 1044 	addw x,(BUFIDX,sp) 
      000474 1F 03            [ 2] 1045 	ldw (BUFIDX,sp),x
      000476 20 A3            [ 2] 1046 	jra 2$  
      000478 A1 04            [ 1] 1047 4$: cp a,#TK_INTGR
      00047A 25 9F            [ 1] 1048 	jrult 2$
      00047C A1 09            [ 1] 1049 	cp a,#TK_CONST 
      00047E 22 9B            [ 1] 1050 	Jrugt 2$
      000480 1E 01            [ 2] 1051 	ldw x,(XSAVE,sp) 
      000482 16 03            [ 2] 1052 	ldw y,(BUFIDX,sp)
      000484 91 DF 11         [ 5] 1053 	ldw ([ptr16],y),x
      000487 A3 16 EB         [ 2] 1054 	cpw x,#rem 
      00048A 26 22            [ 1] 1055 	jrne 5$	
                                   1056 ; comment advance in.w to eol 
      00048C 72 A9 00 02      [ 2] 1057 	addw y,#2 ; skip exec address 
      000490 17 03            [ 2] 1058 	ldw (BUFIDX,sp),y 
      000492 CE 00 11         [ 2] 1059 	ldw x,ptr16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000495 72 FB 03         [ 2] 1060 	addw x,(BUFIDX,sp)
      000498 90 CE 00 00      [ 2] 1061 	ldw y,in.w 
      00049C 72 A9 16 C8      [ 2] 1062 	addw y,#tib 
      0004A0 CD 02 90         [ 4] 1063 	call strcpy 	
      0004A3 CD 02 72         [ 4] 1064 	call strlen 
      0004A6 5C               [ 1] 1065 	incw x ; skip string 0. 
      0004A7 72 FB 03         [ 2] 1066 	addw x,(BUFIDX,sp)
      0004AA 1F 03            [ 2] 1067 	ldw (BUFIDX,sp),x 
      0004AC 20 09            [ 2] 1068 	jra 9$
      0004AE 72 A9 00 02      [ 2] 1069 5$:	addw y,#2 
      0004B2 17 03            [ 2] 1070 	ldw (BUFIDX,sp),y 
      0004B4 CC 04 1B         [ 2] 1071 	jp 2$
      0004B7                       1072 9$: 
      0004B7 AE 00 02         [ 2] 1073 	ldw x,#2
      0004BA 16 03            [ 2] 1074 	ldw y,(BUFIDX,sp)
      0004BC 90 9F            [ 1] 1075 	ld a,yl 
      0004BE 72 D7 00 11      [ 4] 1076 	ld ([ptr16],x),a  	
      0004C2 72 CE 00 11      [ 5] 1077 	ldw x,[ptr16]
      0004C6 27 09            [ 1] 1078 	jreq 10$
      0004C8 CD 03 75         [ 4] 1079 	call insert_line
      0004CB 72 5F 00 03      [ 1] 1080 	clr  count 
      0004CF 20 0F            [ 2] 1081 	jra  11$ 
      0004D1                       1082 10$: 
      0004D1 CE 00 11         [ 2] 1083 	ldw x,ptr16 
      0004D4 CF 00 04         [ 2] 1084 	ldw basicptr,x 
      0004D7 E6 02            [ 1] 1085 	ld a,(2,x)
      0004D9 C7 00 03         [ 1] 1086 	ld count,a 
      0004DC 35 03 00 01      [ 1] 1087 	mov in,#3 
      0004E0                       1088 11$:
      0004E0                       1089 	_drop VSIZE 
      0004E0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004E2 72 1B 00 1F      [ 1] 1090 	bres flags,#FCOMP 
      0004E6 81               [ 4] 1091 	ret 
                                   1092 
                                   1093 
                                   1094 ;------------------------------------
                                   1095 ;  set all variables to zero 
                                   1096 ; input:
                                   1097 ;   none 
                                   1098 ; output:
                                   1099 ;	none
                                   1100 ;------------------------------------
      0004E7                       1101 clear_vars:
      0004E7 AE 00 21         [ 2] 1102 	ldw x,#vars 
      0004EA 90 AE 00 34      [ 2] 1103 	ldw y,#2*26 
      0004EE 7F               [ 1] 1104 1$:	clr (x)
      0004EF 5C               [ 1] 1105 	incw x 
      0004F0 90 5A            [ 2] 1106 	decw y 
      0004F2 26 FA            [ 1] 1107 	jrne 1$
      0004F4 81               [ 4] 1108 	ret 
                                   1109 
                                   1110 ;-------------------------------------
                                   1111 ; check if A is a letter
                                   1112 ; input:
                                   1113 ;   A 			character to test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1114 ; output:
                                   1115 ;   C flag      1 true, 0 false 
                                   1116 ;-------------------------------------
      0004F5                       1117 is_alpha:
      0004F5 A1 41            [ 1] 1118 	cp a,#'A 
      0004F7 8C               [ 1] 1119 	ccf
      0004F8 24 0B            [ 1] 1120 	jrnc 9$ 
      0004FA A1 5B            [ 1] 1121 	cp a,#'Z+1 
      0004FC 25 07            [ 1] 1122 	jrc 9$ 
      0004FE A1 61            [ 1] 1123 	cp a,#'a 
      000500 8C               [ 1] 1124 	ccf 
      000501 24 02            [ 1] 1125 	jrnc 9$
      000503 A1 7B            [ 1] 1126 	cp a,#'z+1   
      000505 81               [ 4] 1127 9$: ret 	
                                   1128 
                                   1129 ;-------------------------------------
                                   1130 ;  program initialization entry point 
                                   1131 ;-------------------------------------
                           000001  1132 	MAJOR=1
                           000000  1133 	MINOR=0
      000506 0A 0A 54 69 6E 79 20  1134 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00054C                       1135 cold_start:
                                   1136 ;set stack 
      00054C AE 17 FF         [ 2] 1137 	ldw x,#STACK_EMPTY
      00054F 94               [ 1] 1138 	ldw sp,x   
                                   1139 ; clear all ram 
      000550 7F               [ 1] 1140 0$: clr (x)
      000551 5A               [ 2] 1141 	decw x 
      000552 26 FC            [ 1] 1142 	jrne 0$
                                   1143 ; activate pull up on all inputs 
      000554 A6 FF            [ 1] 1144 	ld a,#255 
      000556 C7 50 03         [ 1] 1145 	ld PA_CR1,a 
      000559 C7 50 08         [ 1] 1146 	ld PB_CR1,a 
      00055C C7 50 0D         [ 1] 1147 	ld PC_CR1,a 
      00055F C7 50 12         [ 1] 1148 	ld PD_CR1,a 
      000562 C7 50 17         [ 1] 1149 	ld PE_CR1,a 
      000565 C7 50 1C         [ 1] 1150 	ld PF_CR1,a 
      000568 C7 50 21         [ 1] 1151 	ld PG_CR1,a 
      00056B C7 50 2B         [ 1] 1152 	ld PI_CR1,a 
                                   1153 ; select internal clock no divisor: 16 Mhz 	
      00056E A6 E1            [ 1] 1154 	ld a,#CLK_SWR_HSI 
      000570 5F               [ 1] 1155 	clrw x  
      000571 CD 00 99         [ 4] 1156     call clock_init 
      000574 CD 00 AF         [ 4] 1157 	call timer4_init
                                   1158 ; UART3 at 115200 BAUD
      000577 CD 01 74         [ 4] 1159 	call uart3_init
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1160 ; activate PE_4 (user button interrupt)
      00057A 72 18 50 18      [ 1] 1161     bset PE_CR2,#USR_BTN_BIT 
                                   1162 ; display system information
      00057E AE 05 06         [ 2] 1163 	ldw x,#software 
      000581 CD 01 B0         [ 4] 1164 	call puts 
      000584 A6 01            [ 1] 1165 	ld a,#MAJOR 
      000586 C7 00 09         [ 1] 1166 	ld acc8,a 
      000589 5F               [ 1] 1167 	clrw x 
      00058A CF 00 07         [ 2] 1168 	ldw acc24,x 
      00058D A6 0A            [ 1] 1169 	ld a,#10 
      00058F CD 09 30         [ 4] 1170 	call prti24 
      000592 A6 2E            [ 1] 1171 	ld a,#'.
      000594 CD 01 9E         [ 4] 1172 	call putc 
      000597 A6 00            [ 1] 1173 	ld a,#MINOR 
      000599 C7 00 09         [ 1] 1174 	ld acc8,a 
      00059C 5F               [ 1] 1175 	clrw x 
      00059D CF 00 07         [ 2] 1176 	ldw acc24,x 
      0005A0 A6 0A            [ 1] 1177 	ld a,#10 
      0005A2 CD 09 30         [ 4] 1178 	call prti24 
      0005A5 A6 0D            [ 1] 1179 	ld a,#CR 
      0005A7 CD 01 9E         [ 4] 1180 	call putc 
      0005AA CD 1A 8C         [ 4] 1181 	call seek_fdrive 
                                   1182 ; configure LD2 pin 
      0005AD 72 1A 50 0D      [ 1] 1183     bset PC_CR1,#LED2_BIT
      0005B1 72 1A 50 0E      [ 1] 1184     bset PC_CR2,#LED2_BIT
      0005B5 72 1A 50 0C      [ 1] 1185     bset PC_DDR,#LED2_BIT
      0005B9 9A               [ 1] 1186 	rim 
      0005BA 72 5C 00 0F      [ 1] 1187 	inc seedy+1 
      0005BE 72 5C 00 0D      [ 1] 1188 	inc seedx+1 
      0005C2 CD 05 D1         [ 4] 1189 	call clear_basic
      0005C5 CD 13 58         [ 4] 1190 	call ubound 
      0005C8 CD 0F 7E         [ 4] 1191 	call dpop 
      0005CB CF 00 1D         [ 2] 1192 	ldw array_size,x 
      0005CE CC 07 53         [ 2] 1193     jp warm_start 
                                   1194 
                                   1195 ;---------------------------
                                   1196 ; reset BASIC text variables 
                                   1197 ; and clear variables 
                                   1198 ;---------------------------
      0005D1                       1199 clear_basic:
      0005D1 72 5F 00 03      [ 1] 1200 	clr count 
      0005D5 AE 00 55         [ 2] 1201 	ldw x,#free_ram 
      0005D8 CF 00 18         [ 2] 1202 	ldw txtbgn,x 
      0005DB CF 00 1A         [ 2] 1203 	ldw txtend,x 
      0005DE CD 04 E7         [ 4] 1204 	call clear_vars 
      0005E1 81               [ 4] 1205 	ret 
                                   1206 
                                   1207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1208 ;;   Tiny BASIC error messages     ;;
                                   1209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005E2                       1210 err_msg:
      0005E2 00 00 05 FA 06 08 06  1211 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             17 06 31 06 41
      0005EE 06 58 06 6F 06 8A 06  1212 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             9C 06 AE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005F8 06 BB                 1213 	.word err_no_access 
                                   1214 
      0005FA 0A 4D 65 6D 6F 72 79  1215 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      000608 0A 73 79 6E 74 61 78  1216 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      000617 0A 6D 61 74 68 20 6F  1217 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      000631 0A 64 69 76 69 73 69  1218 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      000641 0A 69 6E 76 61 6C 69  1219 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      000658 0A 72 75 6E 20 74 69  1220 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      00066F 0A 63 6F 6D 6D 61 6E  1221 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      00068A 0A 64 75 70 6C 69 63  1222 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      00069C 0A 46 69 6C 65 20 6E  1223 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006AE 0A 62 61 64 20 76 61  1224 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006BB 0A 46 69 6C 65 20 69  1225 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1226 
      0006EF 6C 61 73 74 20 74 6F  1227 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1228 
      0006FF                       1229 syntax_error:
      0006FF A6 02            [ 1] 1230 	ld a,#ERR_SYNTAX 
                                   1231 
      000701                       1232 tb_error:
      000701 AE 05 E2         [ 2] 1233 	ldw x, #err_msg 
      000704 72 5F 00 08      [ 1] 1234 	clr acc16 
      000708 48               [ 1] 1235 	sll a
      000709 72 59 00 08      [ 1] 1236 	rlc acc16  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00070D C7 00 09         [ 1] 1237 	ld acc8, a 
      000710 72 BB 00 08      [ 2] 1238 	addw x,acc16 
      000714 FE               [ 2] 1239 	ldw x,(x)
      000715 CD 01 B0         [ 4] 1240 	call puts
      000718 72 0B 00 1F 18   [ 2] 1241 	btjf flags,#FCOMP, 1$
      00071D AE 16 C8         [ 2] 1242 	ldw x,#tib
      000720 CD 01 B0         [ 4] 1243 	call puts 
      000723 A6 0D            [ 1] 1244 	ld a,#CR 
      000725 CD 01 9E         [ 4] 1245 	call putc
      000728 CE 00 00         [ 2] 1246 	ldw x,in.w
      00072B CD 01 D8         [ 4] 1247 	call spaces
      00072E A6 5E            [ 1] 1248 	ld a,#'^
      000730 CD 01 9E         [ 4] 1249 	call putc 
      000733 20 1A            [ 2] 1250 	jra 6$
      000735 CE 00 04         [ 2] 1251 1$:	ldw x,basicptr
      000738 CD 14 75         [ 4] 1252 	call prt_basic_line
      00073B AE 06 EF         [ 2] 1253 	ldw x,#rt_msg 
      00073E CD 01 B0         [ 4] 1254 	call puts 
      000741 5F               [ 1] 1255 	clrw x 
      000742 C6 00 02         [ 1] 1256 	ld a,in.saved 
      000745 97               [ 1] 1257 	ld xl,a 
      000746 72 D6 00 04      [ 4] 1258 	ld a,([basicptr],x)
      00074A 5F               [ 1] 1259 	clrw x 
      00074B 97               [ 1] 1260 	ld xl,a 
      00074C CD 09 78         [ 4] 1261 	call print_int 
      00074F AE 17 FF         [ 2] 1262 6$: ldw x,#STACK_EMPTY 
      000752 94               [ 1] 1263     ldw sp,x
      000753                       1264 warm_start:
      000753 72 5F 00 1F      [ 1] 1265 	clr flags 
      000757 72 5F 00 1C      [ 1] 1266 	clr loop_depth 
      00075B AE 17 80         [ 2] 1267 	ldw x,#dstack_unf 
      00075E CF 00 16         [ 2] 1268 	ldw dstkptr,x 
      000761 35 04 00 20      [ 1] 1269 	mov tab_width,#TAB_WIDTH 
      000765 35 0A 00 06      [ 1] 1270 	mov base,#10 
      000769 AE 16 C8         [ 2] 1271 	ldw x,#tib 
      00076C CF 00 04         [ 2] 1272 	ldw basicptr,x 
                                   1273 ;----------------------------
                                   1274 ;   BASIC interpreter
                                   1275 ;----------------------------
      00076F                       1276 interp:
      00076F 72 5F 00 00      [ 1] 1277 	clr in.w
      000773 72 01 00 1F 23   [ 2] 1278 	btjf flags,#FRUN,4$ 
                                   1279 ; running program
                                   1280 ; goto next basic line 
      000778 CE 00 04         [ 2] 1281 	ldw x,basicptr
      00077B E6 02            [ 1] 1282 	ld a,(2,x) ; line length 
      00077D C7 00 09         [ 1] 1283 	ld acc8,a 
      000780 72 5F 00 08      [ 1] 1284 	clr acc16 
      000784 72 BB 00 08      [ 2] 1285 	addw x,acc16
      000788 C3 00 1A         [ 2] 1286 	cpw x,txtend 
      00078B 2A C6            [ 1] 1287 	jrpl warm_start
      00078D CF 00 04         [ 2] 1288 	ldw basicptr,x ; start of next line  
      000790 E6 02            [ 1] 1289 	ld a,(2,x)
      000792 C7 00 03         [ 1] 1290 	ld count,a 
      000795 35 03 00 01      [ 1] 1291 	mov in,#3 ; skip first 3 bytes of line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000799 20 14            [ 2] 1292 	jra interp_loop 
      00079B                       1293 4$: ; commande line mode 	
      00079B 72 5F 00 01      [ 1] 1294 	clr in
      00079F A6 0D            [ 1] 1295 	ld a,#CR 
      0007A1 CD 01 9E         [ 4] 1296 	call putc 
      0007A4 A6 3E            [ 1] 1297 	ld a,#'> 
      0007A6 CD 01 9E         [ 4] 1298 	call putc 
      0007A9 CD 0A 66         [ 4] 1299 	call readln
      0007AC CD 03 EC         [ 4] 1300 	call compile
      0007AF                       1301 interp_loop:  
      0007AF C6 00 01         [ 1] 1302 	ld a,in 
      0007B2 C1 00 03         [ 1] 1303 	cp a,count  
      0007B5 2A B8            [ 1] 1304 	jrpl interp
      0007B7 CD 07 DF         [ 4] 1305 	call next_token
      0007BA A1 01            [ 1] 1306 	cp a,#TK_COLON 
      0007BC 27 F1            [ 1] 1307 	jreq interp_loop 
      0007BE A1 00            [ 1] 1308 	cp a,#TK_NONE 
                                   1309 ;	jreq interp 
      0007C0                       1310 1$:
      0007C0 A1 05            [ 1] 1311 	cp a,#TK_VAR
      0007C2 26 05            [ 1] 1312 	jrne 2$
      0007C4 CD 13 84         [ 4] 1313 	call let02  
      0007C7 20 E6            [ 2] 1314 	jra interp_loop 
      0007C9                       1315 2$:	
      0007C9 A1 02            [ 1] 1316 	cp a,#TK_ARRAY 
      0007CB 26 08            [ 1] 1317 	jrne 3$
      0007CD CD 11 C2         [ 4] 1318 	call get_array_element
      0007D0 CD 13 84         [ 4] 1319 	call let02 
      0007D3 20 DA            [ 2] 1320 	jra interp_loop 
      0007D5                       1321 3$:
      0007D5 A1 06            [ 1] 1322 	cp a,#TK_CMD
      0007D7 26 03            [ 1] 1323 	jrne 4$
      0007D9 FD               [ 4] 1324 	call (x) 
      0007DA 20 D3            [ 2] 1325 	jra interp_loop 
      0007DC                       1326 4$:	
      0007DC CC 06 FF         [ 2] 1327 	jp syntax_error 
                                   1328 
                                   1329 ;--------------------------
                                   1330 ; extract next token from
                                   1331 ; token list 
                                   1332 ; basicptr -> base address 
                                   1333 ; in  -> offset in list array 
                                   1334 ; output:
                                   1335 ;   A 		token attribute
                                   1336 ;   X 		token value if there is one
                                   1337 ;----------------------------------------
      0007DF                       1338 next_token:
      0007DF C6 00 01         [ 1] 1339 	ld a,in 
      0007E2 C0 00 03         [ 1] 1340 	sub a,count 
      0007E5 27 3B            [ 1] 1341 	jreq 9$
      0007E7 55 00 01 00 02   [ 1] 1342 	mov in.saved,in
      0007EC CE 00 04         [ 2] 1343 	ldw x,basicptr 
      0007EF 72 D6 00 00      [ 4] 1344 	ld a,([in.w],x)
      0007F3 72 5C 00 01      [ 1] 1345 	inc in 
      0007F7 A1 02            [ 1] 1346 	cp a,#TK_ARRAY  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0007F9 23 27            [ 2] 1347 	jrule 9$
      0007FB A1 03            [ 1] 1348 	cp a,#TK_CHAR
      0007FD 26 0D            [ 1] 1349 	jrne 1$
      0007FF 72 D6 00 00      [ 4] 1350 	ld a,([in.w],x)
      000803 72 5C 00 01      [ 1] 1351 	inc in
      000807 5F               [ 1] 1352 	clrw x 
      000808 97               [ 1] 1353 	ld xl,a 
      000809 A6 03            [ 1] 1354 	ld a,#TK_CHAR
      00080B 81               [ 4] 1355 	ret 
      00080C A1 0A            [ 1] 1356 1$:	cp a,#TK_QSTR 
      00080E 25 06            [ 1] 1357 	jrult 2$
      000810 72 BB 00 00      [ 2] 1358 	addw x,in.w 
      000814 20 0C            [ 2] 1359 	jra 9$
      000816 72 DE 00 00      [ 5] 1360 2$: ldw x,([in.w],x)
      00081A 72 5C 00 01      [ 1] 1361 	inc in 
      00081E 72 5C 00 01      [ 1] 1362 	inc in
      000822 81               [ 4] 1363 9$: ret	
                                   1364 
                                   1365 
                                   1366 ;----------------------------------------
                                   1367 ;   DEBUG support functions
                                   1368 ;----------------------------------------
                           000001  1369 .if DEBUG 
                                   1370 ; turn LED on 
      000823                       1371 ledon:
      000823 72 1A 50 0A      [ 1] 1372     bset PC_ODR,#LED2_BIT
      000827 81               [ 4] 1373     ret 
                                   1374 
                                   1375 ; turn LED off 
      000828                       1376 ledoff:
      000828 72 1B 50 0A      [ 1] 1377     bres PC_ODR,#LED2_BIT 
      00082C 81               [ 4] 1378     ret 
                                   1379 
                                   1380 ; invert LED status 
      00082D                       1381 ledtoggle:
      00082D A6 20            [ 1] 1382     ld a,#LED2_MASK
      00082F C8 50 0A         [ 1] 1383     xor a,PC_ODR
      000832 C7 50 0A         [ 1] 1384     ld PC_ODR,a
      000835 81               [ 4] 1385     ret 
                                   1386 
      000836                       1387 left_paren:
      000836 A6 20            [ 1] 1388 	ld a,#SPACE 
      000838 CD 01 9E         [ 4] 1389 	call putc
      00083B A6 28            [ 1] 1390 	ld a,#'( 
      00083D CD 01 9E         [ 4] 1391 	call putc 	
      000840 81               [ 4] 1392 	ret 
                                   1393 
                                   1394 ;------------------------------
                                   1395 ; print 8 bit register 
                                   1396 ; input:
                                   1397 ;   X  point to register name 
                                   1398 ;   A  register value to print 
                                   1399 ; output:
                                   1400 ;   none
                                   1401 ;------------------------------- 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000841                       1402 prt_reg8:
      000841 88               [ 1] 1403 	push a 
      000842 CD 01 B0         [ 4] 1404 	call puts 
      000845 7B 01            [ 1] 1405 	ld a,(1,sp) 
      000847 C7 00 09         [ 1] 1406 	ld acc8,a 
      00084A 5F               [ 1] 1407 	clrw x 
      00084B 97               [ 1] 1408 	ld xl,a 
      00084C 35 10 00 06      [ 1] 1409 	mov base,#16
      000850 CD 09 78         [ 4] 1410 	call print_int 
      000853 CD 08 36         [ 4] 1411 	call left_paren 
      000856 84               [ 1] 1412 	pop a 
      000857 5F               [ 1] 1413 	clrw x 
      000858 97               [ 1] 1414 	ld xl,a 
      000859 35 0A 00 06      [ 1] 1415 	mov base,#10 
      00085D CD 09 78         [ 4] 1416 	call print_int  
      000860 A6 29            [ 1] 1417 	ld a,#') 
      000862 CD 01 9E         [ 4] 1418 	call putc
      000865 81               [ 4] 1419 	ret
                                   1420 
                                   1421 ;--------------------------------
                                   1422 ; print 16 bits register 
                                   1423 ; input:
                                   1424 ;   X   point register name 
                                   1425 ;   Y   register value to print 
                                   1426 ; output:
                                   1427 ;  none
                                   1428 ;--------------------------------
      000866                       1429 prt_reg16: 
      000866 90 89            [ 2] 1430 	pushw y 
      000868 CD 01 B0         [ 4] 1431 	call puts 
      00086B 1E 01            [ 2] 1432 	ldw x,(1,sp) 
      00086D 35 10 00 06      [ 1] 1433 	mov base,#16 
      000871 CD 09 78         [ 4] 1434 	call print_int  
      000874 CD 08 36         [ 4] 1435 	call left_paren 
      000877 85               [ 2] 1436 	popw x 
      000878 35 0A 00 06      [ 1] 1437 	mov base,#10 
      00087C CD 09 78         [ 4] 1438 	call print_int  
      00087F A6 29            [ 1] 1439 	ld a,#') 
      000881 CD 01 9E         [ 4] 1440 	call putc
      000884 81               [ 4] 1441 	ret 
                                   1442 
                                   1443 ;------------------------------------
                                   1444 ; print registers contents saved on
                                   1445 ; stack by trap interrupt.
                                   1446 ;------------------------------------
      000885                       1447 print_registers:
      000885 AE 08 D8         [ 2] 1448 	ldw x,#STATES
      000888 CD 01 B0         [ 4] 1449 	call puts
                                   1450 ; print EPC 
      00088B AE 09 15         [ 2] 1451 	ldw x, #REG_EPC
      00088E CD 01 B0         [ 4] 1452 	call puts 
      000891 7B 0B            [ 1] 1453 	ld a, (11,sp)
      000893 C7 00 09         [ 1] 1454 	ld acc8,a 
      000896 7B 0A            [ 1] 1455 	ld a, (10,sp) 
      000898 C7 00 08         [ 1] 1456 	ld acc16,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00089B 7B 09            [ 1] 1457 	ld a,(9,sp) 
      00089D C7 00 07         [ 1] 1458 	ld acc24,a
      0008A0 5F               [ 1] 1459 	clrw x  
      0008A1 A6 10            [ 1] 1460 	ld a,#16
      0008A3 CD 09 30         [ 4] 1461 	call prti24  
                                   1462 ; print X
      0008A6 AE 09 1E         [ 2] 1463 	ldw x,#REG_X
      0008A9 16 05            [ 2] 1464 	ldw y,(5,sp)
      0008AB CD 08 66         [ 4] 1465 	call prt_reg16  
                                   1466 ; print Y 
      0008AE AE 09 1A         [ 2] 1467 	ldw x,#REG_Y
      0008B1 16 07            [ 2] 1468 	ldw y, (7,sp)
      0008B3 CD 08 66         [ 4] 1469 	call prt_reg16  
                                   1470 ; print A 
      0008B6 AE 09 22         [ 2] 1471 	ldw x,#REG_A
      0008B9 7B 04            [ 1] 1472 	ld a, (4,sp) 
      0008BB CD 08 41         [ 4] 1473 	call prt_reg8
                                   1474 ; print CC 
      0008BE AE 09 26         [ 2] 1475 	ldw x,#REG_CC 
      0008C1 7B 03            [ 1] 1476 	ld a, (3,sp) 
      0008C3 CD 08 41         [ 4] 1477 	call prt_reg8 
                                   1478 ; print SP 
      0008C6 AE 09 2B         [ 2] 1479 	ldw x,#REG_SP
      0008C9 90 96            [ 1] 1480 	ldw y,sp 
      0008CB 72 A9 00 0C      [ 2] 1481 	addw y,#12
      0008CF CD 08 66         [ 4] 1482 	call prt_reg16  
      0008D2 A6 0A            [ 1] 1483 	ld a,#'\n' 
      0008D4 CD 01 9E         [ 4] 1484 	call putc
      0008D7 81               [ 4] 1485 	ret
                                   1486 
      0008D8 0A 52 65 67 69 73 74  1487 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000915 45 50 43 3A 00        1488 REG_EPC: .asciz "EPC:"
      00091A 0A 59 3A 00           1489 REG_Y:   .asciz "\nY:" 
      00091E 0A 58 3A 00           1490 REG_X:   .asciz "\nX:"
      000922 0A 41 3A 00           1491 REG_A:   .asciz "\nA:" 
      000926 0A 43 43 3A 00        1492 REG_CC:  .asciz "\nCC:"
      00092B 0A 53 50 3A 00        1493 REG_SP:  .asciz "\nSP:"
                                   1494 .endif ; DEBUG 
                                   1495 
                                   1496 ;------------------------------------
                                   1497 ; print integer in acc24 
                                   1498 ; input:
                                   1499 ;	acc24 		integer to print 
                                   1500 ;	A 			numerical base for conversion 
                                   1501 ;               if bit 7 is set add a space at print end.
                                   1502 ;   XL 			field width, 0 -> no fill.
                                   1503 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1504 ;    none 
                                   1505 ;------------------------------------
                           000001  1506 	WIDTH = 1
                           000002  1507 	BASE = 2
                           000003  1508 	ADD_SPACE=3 ; add a space after number 
                           000003  1509 	VSIZE = 3
      000930                       1510 prti24:
      000930                       1511 	_vars VSIZE 
      000930 52 03            [ 2]    1     sub sp,#VSIZE 
      000932 0F 03            [ 1] 1512 	clr (ADD_SPACE,sp)
      000934 A5 80            [ 1] 1513 	bcp a,#0x80 
      000936 27 02            [ 1] 1514 	jreq 0$ 
      000938 03 03            [ 1] 1515 	cpl (ADD_SPACE,sp)
      00093A A4 1F            [ 1] 1516 0$:	and a,#31 
      00093C 6B 02            [ 1] 1517 	ld (BASE,sp),a
      00093E 9F               [ 1] 1518 	ld a,xl
      00093F 6B 01            [ 1] 1519 	ld (WIDTH,sp),a 
      000941 7B 02            [ 1] 1520 	ld a, (BASE,sp)  
      000943 CD 09 D4         [ 4] 1521     call itoa  ; conversion entier en  .asciz
      000946 7B 01            [ 1] 1522 1$: ld a,(WIDTH,sp)
      000948 27 1F            [ 1] 1523 	jreq 4$
      00094A C7 00 09         [ 1] 1524 	ld acc8,a 
      00094D 89               [ 2] 1525 	pushw x 
      00094E CD 02 72         [ 4] 1526 	call strlen 
      000951 9F               [ 1] 1527 	ld a,xl 
      000952 85               [ 2] 1528 	popw x 
      000953 31 00 09         [ 3] 1529 	exg a,acc8 
      000956 C0 00 09         [ 1] 1530 	sub a,acc8 
      000959 2B 0E            [ 1] 1531 	jrmi 4$
      00095B 6B 01            [ 1] 1532 	ld (WIDTH,sp),a 
      00095D A6 20            [ 1] 1533 	ld  a,#SPACE
      00095F 0D 01            [ 1] 1534 3$: tnz (WIDTH,sp)
      000961 27 06            [ 1] 1535 	jreq 4$
      000963 5A               [ 2] 1536 	decw x 
      000964 F7               [ 1] 1537 	ld (x),a 
      000965 0A 01            [ 1] 1538 	dec (WIDTH,sp) 
      000967 20 F6            [ 2] 1539 	jra 3$
      000969                       1540 4$: 
      000969 CD 01 B0         [ 4] 1541 	call puts 
      00096C 0D 03            [ 1] 1542 	tnz (ADD_SPACE,sp)
      00096E 27 05            [ 1] 1543 	jreq 5$
      000970 A6 20            [ 1] 1544     ld a,#SPACE 
      000972 CD 01 9E         [ 4] 1545 	call putc 
      000975                       1546 5$: _drop VSIZE 
      000975 5B 03            [ 2]    1     addw sp,#VSIZE 
      000977 81               [ 4] 1547     ret	
                                   1548 
                                   1549 ;-----------------------------------
                                   1550 ; print a 16 bit integer 
                                   1551 ; using variable 'base' as conversion
                                   1552 ; format.
                                   1553 ; input:
                                   1554 ;   X       integer to print 
                                   1555 ;   base    conversion base 
                                   1556 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1557 ;   none 
                                   1558 ;-----------------------------------
                           000001  1559 	SIGN=1
                           000001  1560 	VSIZE=1
      000978                       1561 print_int: 
      000978                       1562 	_vars VSIZE 
      000978 52 01            [ 2]    1     sub sp,#VSIZE 
      00097A 0F 01            [ 1] 1563 	clr (SIGN,sp)
      00097C 90 AE 17 3F      [ 2] 1564 	ldw y,#pad+PAD_SIZE-1 
      000980 90 7F            [ 1] 1565 	clr (y)
      000982 C6 00 06         [ 1] 1566 	ld a,base  
      000985 A1 0A            [ 1] 1567 	cp a,#10 
      000987 26 06            [ 1] 1568 	jrne 1$ 
      000989 5D               [ 2] 1569 	tnzw x 
      00098A 2A 03            [ 1] 1570 	jrpl 1$ 
      00098C 03 01            [ 1] 1571 	cpl (SIGN,sp)
      00098E 50               [ 2] 1572 	negw x 	 
      00098F                       1573 1$:	
      00098F C6 00 06         [ 1] 1574 	ld a,base 
      000992 62               [ 2] 1575 	div x,a 
      000993 AB 30            [ 1] 1576 	add a,#'0 
      000995 A1 3A            [ 1] 1577 	cp a,#'9+1 
      000997 2B 02            [ 1] 1578 	jrmi 2$ 
      000999 AB 07            [ 1] 1579 	add a,#7 
      00099B 90 5A            [ 2] 1580 2$: decw y 
      00099D 90 F7            [ 1] 1581 	ld (y),a 
      00099F 5D               [ 2] 1582 	tnzw x 
      0009A0 26 ED            [ 1] 1583 	jrne 1$ 
      0009A2 A6 10            [ 1] 1584 	ld a,#16 
      0009A4 C1 00 06         [ 1] 1585 	cp a,base 
      0009A7 26 08            [ 1] 1586 	jrne 3$
      0009A9 A6 24            [ 1] 1587 	ld a,#'$
      0009AB 90 5A            [ 2] 1588 	decw y  
      0009AD 90 F7            [ 1] 1589 	ld (y),a
      0009AF 20 0A            [ 2] 1590 	jra 9$ 
      0009B1 0D 01            [ 1] 1591 3$: tnz (SIGN,sp)
      0009B3 27 06            [ 1] 1592 	jreq 9$ 
      0009B5 A6 2D            [ 1] 1593 	ld a,#'-
      0009B7 90 5A            [ 2] 1594 	decw y  
      0009B9 90 F7            [ 1] 1595 	ld (y),a
      0009BB                       1596 9$:	
      0009BB 93               [ 1] 1597 	ldw x,y 
      0009BC 1D 17 3F         [ 2] 1598 	subw x,#pad+PAD_SIZE-1 
      0009BF 50               [ 2] 1599 	negw x  
      0009C0                       1600 10$:
      0009C0 90 5A            [ 2] 1601 	decw y 
      0009C2 A6 20            [ 1] 1602 	ld a,#SPACE 
      0009C4 90 F7            [ 1] 1603 	ld (y),a
      0009C6 5C               [ 1] 1604 	incw x 
      0009C7 9F               [ 1] 1605 	ld a,xl 
      0009C8 C1 00 20         [ 1] 1606 	cp a,tab_width
      0009CB 2B F3            [ 1] 1607 	jrmi 10$ 
      0009CD                       1608 12$:
      0009CD 93               [ 1] 1609     ldw x,y 
      0009CE CD 01 B0         [ 4] 1610 	call puts  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009D1                       1611 	_drop VSIZE 
      0009D1 5B 01            [ 2]    1     addw sp,#VSIZE 
      0009D3 81               [ 4] 1612 	ret 
                                   1613 
                                   1614 ;------------------------------------
                                   1615 ; convert integer in acc24 to string
                                   1616 ; input:
                                   1617 ;   A	  	base
                                   1618 ;	acc24	integer to convert
                                   1619 ; output:
                                   1620 ;   X  		pointer to string
                                   1621 ;------------------------------------
                           000001  1622 	SIGN=1  ; integer sign 
                           000002  1623 	BASE=2  ; numeric base 
                           000002  1624 	VSIZE=2  ;locals size
      0009D4                       1625 itoa:
      0009D4 52 02            [ 2] 1626 	sub sp,#VSIZE
      0009D6 6B 02            [ 1] 1627 	ld (BASE,sp), a  ; base
      0009D8 0F 01            [ 1] 1628 	clr (SIGN,sp)    ; sign
      0009DA A1 0A            [ 1] 1629 	cp a,#10
      0009DC 26 0A            [ 1] 1630 	jrne 1$
                                   1631 	; base 10 string display with negative sign if bit 23==1
      0009DE 72 0F 00 07 05   [ 2] 1632 	btjf acc24,#7,1$
      0009E3 03 01            [ 1] 1633 	cpl (SIGN,sp)
      0009E5 CD 0A 43         [ 4] 1634 	call neg_acc24
      0009E8                       1635 1$:
                                   1636 ; initialize string pointer 
      0009E8 AE 17 3F         [ 2] 1637 	ldw x,#pad+PAD_SIZE-1
      0009EB 7F               [ 1] 1638 	clr (x)
      0009EC                       1639 itoa_loop:
      0009EC 7B 02            [ 1] 1640     ld a,(BASE,sp)
      0009EE CD 0A 1B         [ 4] 1641     call divu24_8 ; acc24/A 
      0009F1 AB 30            [ 1] 1642     add a,#'0  ; remainder of division
      0009F3 A1 3A            [ 1] 1643     cp a,#'9+1
      0009F5 2B 02            [ 1] 1644     jrmi 2$
      0009F7 AB 07            [ 1] 1645     add a,#7 
      0009F9 5A               [ 2] 1646 2$: decw x
      0009FA F7               [ 1] 1647     ld (x),a
                                   1648 	; if acc24==0 conversion done
      0009FB C6 00 07         [ 1] 1649 	ld a,acc24
      0009FE CA 00 08         [ 1] 1650 	or a,acc16
      000A01 CA 00 09         [ 1] 1651 	or a,acc8
      000A04 26 E6            [ 1] 1652     jrne itoa_loop
                                   1653 	;conversion done, next add '$' or '-' as required
      000A06 7B 02            [ 1] 1654 	ld a,(BASE,sp)
      000A08 A1 10            [ 1] 1655 	cp a,#16
      000A0A 27 08            [ 1] 1656 	jreq 8$
      000A0C 7B 01            [ 1] 1657 	ld a,(SIGN,sp)
      000A0E 27 08            [ 1] 1658     jreq 10$
      000A10 A6 2D            [ 1] 1659     ld a,#'-
      000A12 20 02            [ 2] 1660 	jra 9$ 
      000A14 A6 24            [ 1] 1661 8$: ld a,#'$ 
      000A16 5A               [ 2] 1662 9$: decw x
      000A17 F7               [ 1] 1663     ld (x),a
      000A18                       1664 10$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A18 5B 02            [ 2] 1665 	addw sp,#VSIZE
      000A1A 81               [ 4] 1666 	ret
                                   1667 
                                   1668 ;-------------------------------------
                                   1669 ; divide uint24_t by uint8_t
                                   1670 ; used to convert uint24_t to string
                                   1671 ; input:
                                   1672 ;	acc24	dividend
                                   1673 ;   A 		divisor
                                   1674 ; output:
                                   1675 ;   acc24	quotient
                                   1676 ;   A		remainder
                                   1677 ;------------------------------------- 
                                   1678 ; offset  on sp of arguments and locals
                           000001  1679 	U8   = 1   ; divisor on stack
                           000001  1680 	VSIZE =1
      000A1B                       1681 divu24_8:
      000A1B 89               [ 2] 1682 	pushw x ; save x
      000A1C 88               [ 1] 1683 	push a 
                                   1684 	; ld dividend UU:MM bytes in X
      000A1D C6 00 07         [ 1] 1685 	ld a, acc24
      000A20 95               [ 1] 1686 	ld xh,a
      000A21 C6 00 08         [ 1] 1687 	ld a,acc24+1
      000A24 97               [ 1] 1688 	ld xl,a
      000A25 7B 01            [ 1] 1689 	ld a,(U8,SP) ; divisor
      000A27 62               [ 2] 1690 	div x,a ; UU:MM/U8
      000A28 88               [ 1] 1691 	push a  ;save remainder
      000A29 9E               [ 1] 1692 	ld a,xh
      000A2A C7 00 07         [ 1] 1693 	ld acc24,a
      000A2D 9F               [ 1] 1694 	ld a,xl
      000A2E C7 00 08         [ 1] 1695 	ld acc24+1,a
      000A31 84               [ 1] 1696 	pop a
      000A32 95               [ 1] 1697 	ld xh,a
      000A33 C6 00 09         [ 1] 1698 	ld a,acc24+2
      000A36 97               [ 1] 1699 	ld xl,a
      000A37 7B 01            [ 1] 1700 	ld a,(U8,sp) ; divisor
      000A39 62               [ 2] 1701 	div x,a  ; R:LL/U8
      000A3A 6B 01            [ 1] 1702 	ld (U8,sp),a ; save remainder
      000A3C 9F               [ 1] 1703 	ld a,xl
      000A3D C7 00 09         [ 1] 1704 	ld acc24+2,a
      000A40 84               [ 1] 1705 	pop a
      000A41 85               [ 2] 1706 	popw x
      000A42 81               [ 4] 1707 	ret
                                   1708 
                                   1709 ;------------------------------------
                                   1710 ;  two's complement acc24
                                   1711 ;  input:
                                   1712 ;		acc24 variable
                                   1713 ;  output:
                                   1714 ;		acc24 variable
                                   1715 ;-------------------------------------
      000A43                       1716 neg_acc24:
      000A43 72 53 00 09      [ 1] 1717 	cpl acc24+2
      000A47 72 53 00 08      [ 1] 1718 	cpl acc24+1
      000A4B 72 53 00 07      [ 1] 1719 	cpl acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A4F A6 01            [ 1] 1720 	ld a,#1
      000A51 CB 00 09         [ 1] 1721 	add a,acc24+2
      000A54 C7 00 09         [ 1] 1722 	ld acc24+2,a
      000A57 4F               [ 1] 1723 	clr a
      000A58 C9 00 08         [ 1] 1724 	adc a,acc24+1
      000A5B C7 00 08         [ 1] 1725 	ld acc24+1,a 
      000A5E 4F               [ 1] 1726 	clr a 
      000A5F C9 00 07         [ 1] 1727 	adc a,acc24 
      000A62 C7 00 07         [ 1] 1728 	ld acc24,a 
      000A65 81               [ 4] 1729 	ret
                                   1730 
                                   1731 
                                   1732 ;------------------------------------
                                   1733 ; read a line of text from terminal
                                   1734 ; input:
                                   1735 ;	none
                                   1736 ; local variable on stack:
                                   1737 ;	LL  line length
                                   1738 ;   RXCHAR last received chaaracte 
                                   1739 ; output:
                                   1740 ;   text in tib  buffer
                                   1741 ;------------------------------------
                                   1742 	; local variables
                           000001  1743 	LL_HB=1
                           000001  1744 	RXCHAR = 1 ; last char received
                           000002  1745 	LL = 2  ; accepted line length
                           000002  1746 	VSIZE=2 
      000A66                       1747 readln:
      000A66 5F               [ 1] 1748 	clrw x 
      000A67 89               [ 2] 1749 	pushw x 
      000A68 90 AE 16 C8      [ 2] 1750  	ldw y,#tib ; input buffer
      000A6C                       1751 readln_loop:
      000A6C CD 01 A7         [ 4] 1752 	call getc
      000A6F 6B 01            [ 1] 1753 	ld (RXCHAR,sp),a
      000A71 A1 0D            [ 1] 1754 	cp a,#CR
      000A73 26 03            [ 1] 1755 	jrne 1$
      000A75 CC 0A E1         [ 2] 1756 	jp readln_quit
      000A78 A1 0A            [ 1] 1757 1$:	cp a,#NL
      000A7A 27 65            [ 1] 1758 	jreq readln_quit
      000A7C A1 08            [ 1] 1759 	cp a,#BSP
      000A7E 27 3D            [ 1] 1760 	jreq del_back
      000A80 A1 04            [ 1] 1761 	cp a,#CTRL_D
      000A82 27 2A            [ 1] 1762 	jreq del_ln
      000A84 A1 12            [ 1] 1763 	cp a,#CTRL_R 
      000A86 27 06            [ 1] 1764 	jreq reprint 
                                   1765 ;	cp a,#'[
                                   1766 ;	jreq ansi_seq
      000A88                       1767 final_test:
      000A88 A1 20            [ 1] 1768 	cp a,#SPACE
      000A8A 2A 40            [ 1] 1769 	jrpl accept_char
      000A8C 20 DE            [ 2] 1770 	jra readln_loop
      000A8E                       1771 ansi_seq:
                                   1772 ;	call getc
                                   1773 ;	cp a,#'C 
                                   1774 ;	jreq rigth_arrow
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1775 ;	cp a,#'D 
                                   1776 ;	jreq left_arrow 
                                   1777 ;	jra final_test
      000A8E                       1778 right_arrow:
                                   1779 ;	ld a,#BSP 
                                   1780 ;	call putc 
                                   1781 ;	jra realn_loop 
      000A8E                       1782 left_arrow:
                                   1783 
                                   1784 ;	jra readln_loop
      000A8E                       1785 reprint: 
      000A8E 0D 02            [ 1] 1786 	tnz (LL,sp)
      000A90 26 DA            [ 1] 1787 	jrne readln_loop
      000A92 AE 16 C8         [ 2] 1788 	ldw x,#tib 
      000A95 CD 02 72         [ 4] 1789 	call strlen 
      000A98 90 AE 16 C8      [ 2] 1790 	ldw y,#tib 
      000A9C 9F               [ 1] 1791 	ld a,xl
      000A9D 27 CD            [ 1] 1792 	jreq readln_loop
      000A9F 6B 02            [ 1] 1793 	ld (LL,sp),a 
      000AA1 AE 16 C8         [ 2] 1794 	ldw x,#tib 
      000AA4 CD 01 B0         [ 4] 1795 	call puts
      000AA7 0F 01            [ 1] 1796 	clr (LL_HB,sp)
      000AA9 72 F9 01         [ 2] 1797 	addw y,(LL_HB,sp)
      000AAC 20 BE            [ 2] 1798 	jra readln_loop 
      000AAE                       1799 del_ln:
      000AAE 7B 02            [ 1] 1800 	ld a,(LL,sp)
      000AB0 CD 01 CA         [ 4] 1801 	call delete
      000AB3 90 AE 16 C8      [ 2] 1802 	ldw y,#tib
      000AB7 90 7F            [ 1] 1803 	clr (y)
      000AB9 0F 02            [ 1] 1804 	clr (LL,sp)
      000ABB 20 AF            [ 2] 1805 	jra readln_loop
      000ABD                       1806 del_back:
      000ABD 0D 02            [ 1] 1807     tnz (LL,sp)
      000ABF 27 AB            [ 1] 1808     jreq readln_loop
      000AC1 0A 02            [ 1] 1809     dec (LL,sp)
      000AC3 90 5A            [ 2] 1810     decw y
      000AC5 90 7F            [ 1] 1811     clr  (y)
      000AC7 CD 01 BA         [ 4] 1812     call bksp 
      000ACA 20 A0            [ 2] 1813     jra readln_loop	
      000ACC                       1814 accept_char:
      000ACC A6 4F            [ 1] 1815 	ld a,#TIB_SIZE-1
      000ACE 11 02            [ 1] 1816 	cp a, (LL,sp)
      000AD0 27 9A            [ 1] 1817 	jreq readln_loop
      000AD2 7B 01            [ 1] 1818 	ld a,(RXCHAR,sp)
      000AD4 90 F7            [ 1] 1819 	ld (y),a
      000AD6 0C 02            [ 1] 1820 	inc (LL,sp)
      000AD8 90 5C            [ 1] 1821 	incw y
      000ADA 90 7F            [ 1] 1822 	clr (y)
      000ADC CD 01 9E         [ 4] 1823 	call putc 
      000ADF 20 8B            [ 2] 1824 	jra readln_loop
      000AE1                       1825 readln_quit:
      000AE1 90 7F            [ 1] 1826 	clr (y)
      000AE3 7B 02            [ 1] 1827 	ld a,(LL,sp)
      000AE5 C7 00 03         [ 1] 1828 	ld count,a 
      000AE8                       1829 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AE8 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AEA A6 0D            [ 1] 1830 	ld a,#CR
      000AEC CD 01 9E         [ 4] 1831 	call putc
      000AEF 81               [ 4] 1832 	ret
                                   1833 
                           000001  1834 .if DEBUG 	
                                   1835 ;----------------------------
                                   1836 ; command interface
                                   1837 ; only 3 commands:
                                   1838 ;  'q' to resume application
                                   1839 ;  'p [addr]' to print memory values 
                                   1840 ;  's addr' to print string 
                                   1841 ;----------------------------
                                   1842 ;local variable 
                           000001  1843 	PSIZE=1
                           000001  1844 	VSIZE=1 
      000AF0                       1845 cmd_itf:
      000AF0 52 01            [ 2] 1846 	sub sp,#VSIZE 
      000AF2 72 5F 00 10      [ 1] 1847 	clr farptr 
      000AF6 72 5F 00 11      [ 1] 1848 	clr farptr+1 
      000AFA 72 5F 00 12      [ 1] 1849 	clr farptr+2  
      000AFE                       1850 repl:
      000AFE A6 0D            [ 1] 1851 	ld a,#CR 
      000B00 CD 01 9E         [ 4] 1852 	call putc 
      000B03 A6 3F            [ 1] 1853 	ld a,#'? 
      000B05 CD 01 9E         [ 4] 1854 	call putc
      000B08 72 5F 00 00      [ 1] 1855 	clr in.w 
      000B0C 72 5F 00 01      [ 1] 1856 	clr in 
      000B10 CD 0A 66         [ 4] 1857 	call readln
      000B13 90 AE 16 C8      [ 2] 1858 	ldw y,#tib  
      000B17 90 F6            [ 1] 1859 	ld a,(y)
      000B19 27 E3            [ 1] 1860 	jreq repl  
      000B1B 72 5C 00 01      [ 1] 1861 	inc in 
      000B1F CD 0E A0         [ 4] 1862 	call to_upper 
      000B22 A1 51            [ 1] 1863 	cp a,#'Q 
      000B24 26 17            [ 1] 1864 	jrne test_p
      000B26                       1865 repl_exit:
      000B26 72 5F 16 C8      [ 1] 1866 	clr tib 
      000B2A 72 5F 00 03      [ 1] 1867 	clr count 
      000B2E 72 5F 00 01      [ 1] 1868 	clr in 
      000B32                       1869 	_drop #VSIZE 	
      000B32 5B 01            [ 2]    1     addw sp,##VSIZE 
      000B34 81               [ 4] 1870 	ret  
      000B35                       1871 invalid:
      000B35 AE 0B B3         [ 2] 1872 	ldw x,#invalid_cmd 
      000B38 CD 01 B0         [ 4] 1873 	call puts 
      000B3B 20 C1            [ 2] 1874 	jra repl 
      000B3D                       1875 test_p:	
      000B3D A1 50            [ 1] 1876     cp a,#'P 
      000B3F 27 11            [ 1] 1877 	jreq mem_peek
      000B41 A1 53            [ 1] 1878     cp a,#'S 
      000B43 26 F0            [ 1] 1879 	jrne invalid 
      000B45                       1880 print_string:	
      000B45 CD 0C DF         [ 4] 1881 	call get_token
      000B48 A1 04            [ 1] 1882 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B4A 26 E9            [ 1] 1883 	jrne invalid 
      000B4C CD 01 B0         [ 4] 1884 	call puts
      000B4F CC 0A FE         [ 2] 1885 	jp repl 	
      000B52                       1886 mem_peek:
      000B52 A6 20            [ 1] 1887 	ld a,#SPACE 
      000B54 CD 0F 58         [ 4] 1888 	call skip  	 
      000B57 72 B9 00 00      [ 2] 1889 	addw y,in.w 
      000B5B AE 17 18         [ 2] 1890 	ldw x,#pad 
      000B5E CD 02 90         [ 4] 1891 	call strcpy
      000B61 CD 0E AC         [ 4] 1892 	call atoi24 	
      000B64 C6 00 07         [ 1] 1893 	ld a, acc24 
      000B67 CA 00 08         [ 1] 1894 	or a,acc16 
      000B6A CA 00 09         [ 1] 1895 	or a,acc8 
      000B6D 26 02            [ 1] 1896 	jrne 1$ 
      000B6F 20 0C            [ 2] 1897 	jra peek_byte  
      000B71 CE 00 07         [ 2] 1898 1$:	ldw x,acc24 
      000B74 CF 00 10         [ 2] 1899 	ldw farptr,x 
      000B77 C6 00 09         [ 1] 1900 	ld a,acc8 
      000B7A C7 00 12         [ 1] 1901 	ld farptr+2,a 
      000B7D                       1902 peek_byte:
      000B7D CD 0B C2         [ 4] 1903 	call print_farptr 
      000B80 A6 08            [ 1] 1904 	ld a,#8 
      000B82 6B 01            [ 1] 1905 	ld (PSIZE,sp),a 
      000B84 5F               [ 1] 1906 	clrw x 
      000B85 CD 0B DD         [ 4] 1907 1$:	call fetchc  
      000B88 89               [ 2] 1908 	pushw x 
      000B89 C7 00 09         [ 1] 1909 	ld acc8,a 
      000B8C 5F               [ 1] 1910 	clrw x 
      000B8D CF 00 07         [ 2] 1911 	ldw acc24,x 
      000B90 A6 90            [ 1] 1912 	ld a,#16+128
      000B92 CD 09 30         [ 4] 1913 	call prti24
      000B95 85               [ 2] 1914 	popw x 
      000B96 0A 01            [ 1] 1915 	dec (PSIZE,sp)
      000B98 26 EB            [ 1] 1916 	jrne 1$ 
      000B9A A6 08            [ 1] 1917 	ld a,#8 
      000B9C CB 00 12         [ 1] 1918 	add a,farptr+2 
      000B9F C7 00 12         [ 1] 1919 	ld farptr+2,a
      000BA2 4F               [ 1] 1920 	clr a 
      000BA3 C9 00 11         [ 1] 1921 	adc a,farptr+1 
      000BA6 C7 00 11         [ 1] 1922 	ld farptr+1,a 
      000BA9 4F               [ 1] 1923 	clr a 
      000BAA C9 00 10         [ 1] 1924 	adc a,farptr 
      000BAD C7 00 10         [ 1] 1925 	ld farptr,a 
      000BB0 CC 0A FE         [ 2] 1926 	jp repl  
                                   1927 
      000BB3 6E 6F 74 20 61 20 63  1928 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1929 
                                   1930 ;----------------------------
                                   1931 ; display farptr address
                                   1932 ;----------------------------
      000BC2                       1933 print_farptr:
      000BC2 C6 00 12         [ 1] 1934 	ld a ,farptr+2 
      000BC5 C7 00 09         [ 1] 1935 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BC8 CE 00 10         [ 2] 1936 	ldw x,farptr 
      000BCB CF 00 07         [ 2] 1937 	ldw acc24,x 
      000BCE 5F               [ 1] 1938 	clrw x 
      000BCF A6 10            [ 1] 1939 	ld a,#16 
      000BD1 CD 09 30         [ 4] 1940 	call prti24
      000BD4 A6 20            [ 1] 1941 	ld a,#SPACE 
      000BD6 CD 01 9E         [ 4] 1942 	call putc 
      000BD9 CD 01 9E         [ 4] 1943 	call putc 
      000BDC 81               [ 4] 1944 	ret
                                   1945 
                                   1946 ;------------------------------------
                                   1947 ; get byte at address farptr[X]
                                   1948 ; input:
                                   1949 ;	 farptr   address to peek
                                   1950 ;    X		  farptr index 	
                                   1951 ; output:
                                   1952 ;	 A 		  byte from memory  
                                   1953 ;    x		  incremented by 1
                                   1954 ;------------------------------------
      000BDD                       1955 fetchc: ; @C
      000BDD 92 AF 00 10      [ 5] 1956 	ldf a,([farptr],x)
      000BE1 5C               [ 1] 1957 	incw x
      000BE2 81               [ 4] 1958 	ret
                                   1959 
                                   1960 
                                   1961 ;------------------------------------
                                   1962 ; expect a number from command line 
                                   1963 ; next argument
                                   1964 ;  input:
                                   1965 ;	  none
                                   1966 ;  output:
                                   1967 ;    acc24   int24_t 
                                   1968 ;------------------------------------
      000BE3                       1969 number::
      000BE3 CD 0C DF         [ 4] 1970 	call get_token
      000BE6 CD 0E AC         [ 4] 1971 	call atoi24
      000BE9 81               [ 4] 1972 	ret
                                   1973 .endif ; DEBUG 
                                   1974 
                                   1975 ;------------------------------------
                                   1976 ; parse quoted string 
                                   1977 ; input:
                                   1978 ;   Y 	pointer to tib 
                                   1979 ;   X   pointer to pad
                                   1980 ; output:
                                   1981 ;	pad   parsed string
                                   1982 ;   TOS  char* to pad  
                                   1983 ;------------------------------------
                           000001  1984 	PREV = 1
                           000002  1985 	CURR =2 
                           000002  1986 	VSIZE=2 
      000BEA                       1987 parse_quote: ; { -- addr }
      000BEA                       1988 	_vars VSIZE 
      000BEA 52 02            [ 2]    1     sub sp,#VSIZE 
      000BEC 4F               [ 1] 1989 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BED 6B 01            [ 1] 1990 1$:	ld (PREV,sp),a 
      000BEF 72 5C 00 01      [ 1] 1991 2$:	inc in
      000BF3 91 D6 00         [ 4] 1992 	ld a,([in.w],y)
      000BF6 27 24            [ 1] 1993 	jreq 6$
      000BF8 6B 02            [ 1] 1994 	ld (CURR,sp),a 
      000BFA A6 5C            [ 1] 1995 	ld a,#'\
      000BFC 11 01            [ 1] 1996 	cp a, (PREV,sp)
      000BFE 26 0A            [ 1] 1997 	jrne 3$
      000C00 0F 01            [ 1] 1998 	clr (PREV,sp)
      000C02 7B 02            [ 1] 1999 	ld a,(CURR,sp)
      000C04 AD 1F            [ 4] 2000 	callr convert_escape
      000C06 F7               [ 1] 2001 	ld (x),a 
      000C07 5C               [ 1] 2002 	incw x 
      000C08 20 E5            [ 2] 2003 	jra 2$
      000C0A                       2004 3$:
      000C0A 7B 02            [ 1] 2005 	ld a,(CURR,sp)
      000C0C A1 5C            [ 1] 2006 	cp a,#'\'
      000C0E 27 DD            [ 1] 2007 	jreq 1$
      000C10 A1 22            [ 1] 2008 	cp a,#'"
      000C12 27 04            [ 1] 2009 	jreq 5$ 
      000C14 F7               [ 1] 2010 	ld (x),a 
      000C15 5C               [ 1] 2011 	incw x 
      000C16 20 D7            [ 2] 2012 	jra 2$
      000C18 72 5C 00 01      [ 1] 2013 5$:	inc in 
      000C1C 7F               [ 1] 2014 6$: clr (x)
      000C1D AE 17 18         [ 2] 2015 	ldw x,#pad 
      000C20                       2016 	_drop VSIZE
      000C20 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C22 A6 0A            [ 1] 2017 	ld a,#TK_QSTR  
      000C24 81               [ 4] 2018 	ret 
                                   2019 
                                   2020 ;---------------------------------------
                                   2021 ; called by parse_quote
                                   2022 ; subtitute escaped character 
                                   2023 ; by their ASCII value .
                                   2024 ; input:
                                   2025 ;   A  character following '\'
                                   2026 ; output:
                                   2027 ;   A  substitued char or same if not valid.
                                   2028 ;---------------------------------------
      000C25                       2029 convert_escape:
      000C25 89               [ 2] 2030 	pushw x 
      000C26 AE 0C 3A         [ 2] 2031 	ldw x,#escaped 
      000C29 F1               [ 1] 2032 1$:	cp a,(x)
      000C2A 27 06            [ 1] 2033 	jreq 2$
      000C2C 7D               [ 1] 2034 	tnz (x)
      000C2D 27 09            [ 1] 2035 	jreq 3$
      000C2F 5C               [ 1] 2036 	incw x 
      000C30 20 F7            [ 2] 2037 	jra 1$
      000C32 1D 0C 3A         [ 2] 2038 2$: subw x,#escaped 
      000C35 9F               [ 1] 2039 	ld a,xl 
      000C36 AB 07            [ 1] 2040 	add a,#7
      000C38 85               [ 2] 2041 3$:	popw x 
      000C39 81               [ 4] 2042 	ret 
                                   2043 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C3A 61 62 74 6E 76 66 72  2044 escaped: .asciz "abtnvfr"
             00
                                   2045 
                                   2046 ;-------------------------
                                   2047 ; integer parser 
                                   2048 ; input:
                                   2049 ;   X 		point to pad 
                                   2050 ;   Y 		point to tib 
                                   2051 ;   A 	    first digit|'$' 
                                   2052 ; output:  
                                   2053 ;   pad     number string 
                                   2054 ;   X 		integer 
                                   2055 ;   A 		TK_INTGR
                                   2056 ;-------------------------
                           000001  2057 	BASE=1
                           000002  2058 	TCHAR=2 
                           000002  2059 	VSIZE=2 
      000C42                       2060 parse_integer: ; { -- n }
      000C42 4B 00            [ 1] 2061 	push #0 ; TCHAR 
      000C44 A1 24            [ 1] 2062 	cp a,#'$
      000C46 27 04            [ 1] 2063 	jreq 1$ 
      000C48 4B 0A            [ 1] 2064 	push #10 ; BASE=10 
      000C4A 20 02            [ 2] 2065 	jra 2$ 
      000C4C 4B 10            [ 1] 2066 1$: push #16  ; BASE=16
      000C4E F7               [ 1] 2067 2$:	ld (x),a 
      000C4F 5C               [ 1] 2068 	incw x 
      000C50 72 5C 00 01      [ 1] 2069 	inc in 
      000C54 91 D6 00         [ 4] 2070 	ld a,([in.w],y)
      000C57 CD 0E A0         [ 4] 2071 	call to_upper 
      000C5A 6B 02            [ 1] 2072 	ld (TCHAR,sp),a 
      000C5C CD 0E 97         [ 4] 2073 	call is_digit 
      000C5F 25 ED            [ 1] 2074 	jrc 2$
      000C61 A6 10            [ 1] 2075 	ld a,#16 
      000C63 11 01            [ 1] 2076 	cp a,(BASE,sp)
      000C65 26 0A            [ 1] 2077 	jrne 3$ 
      000C67 7B 02            [ 1] 2078 	ld a,(TCHAR,sp)
      000C69 A1 41            [ 1] 2079 	cp a,#'A 
      000C6B 2B 04            [ 1] 2080 	jrmi 3$ 
      000C6D A1 47            [ 1] 2081 	cp a,#'G 
      000C6F 2B DD            [ 1] 2082 	jrmi 2$ 
      000C71 7F               [ 1] 2083 3$:	clr (x)
      000C72 CD 0E AC         [ 4] 2084 	call atoi24
      000C75 CE 00 08         [ 2] 2085 	ldw x,acc16 
      000C78 A6 04            [ 1] 2086 	ld a,#TK_INTGR
      000C7A                       2087 	_drop VSIZE  
      000C7A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C7C 81               [ 4] 2088 	ret 	
                                   2089 
                                   2090 ;-------------------------
                                   2091 ; binary integer parser 
                                   2092 ; input:
                                   2093 ;   X 		point to pad 
                                   2094 ;   Y 		point to tib 
                                   2095 ;   A 	    '%' 
                                   2096 ; output:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2097 ;   pad     number string 
                                   2098 ;   X 		integer 
                                   2099 ;   A 		TK_INTGR
                                   2100 ;   TOS     integer 
                                   2101 ;-------------------------
                           000001  2102 	BINARY=1
                           000002  2103 	VSIZE=2
      000C7D                       2104 parse_binary: ; { -- n }
      000C7D 4B 00            [ 1] 2105 	push #0
      000C7F 4B 00            [ 1] 2106 	push #0
      000C81 F7               [ 1] 2107 1$: ld (x),a 
      000C82 5C               [ 1] 2108 	incw x 
      000C83 72 5C 00 01      [ 1] 2109 	inc in 
      000C87 91 D6 00         [ 4] 2110 	ld a,([in.w],y)
      000C8A A1 30            [ 1] 2111 	cp a,#'0 
      000C8C 27 06            [ 1] 2112 	jreq 2$
      000C8E A1 31            [ 1] 2113 	cp a,#'1 
      000C90 27 02            [ 1] 2114 	jreq 2$ 
      000C92 20 09            [ 2] 2115 	jra bin_exit 
      000C94 A0 30            [ 1] 2116 2$: sub a,#'0	
      000C96 46               [ 1] 2117 	rrc a 
      000C97 09 02            [ 1] 2118 	rlc (BINARY+1,sp)
      000C99 09 01            [ 1] 2119 	rlc (BINARY,sp)
      000C9B 20 E4            [ 2] 2120 	jra 1$  
      000C9D                       2121 bin_exit:
      000C9D 7F               [ 1] 2122 	clr (x)
      000C9E 1E 01            [ 2] 2123 	ldw x,(BINARY,sp)
      000CA0 A6 04            [ 1] 2124 	ld a,#TK_INTGR 	
      000CA2                       2125 	_drop VSIZE 
      000CA2 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CA4 81               [ 4] 2126 	ret
                                   2127 
                                   2128 ;---------------------------
                                   2129 ;  token begin with a letter,
                                   2130 ;  is keyword or variable. 	
                                   2131 ; input:
                                   2132 ;   X 		point to pad 
                                   2133 ;   Y 		point to text
                                   2134 ;   A 	    first letter  
                                   2135 ; output:
                                   2136 ;   X		exec_addr|var_addr 
                                   2137 ;   A 		TK_CMD 
                                   2138 ;   pad 	keyword|var_name  
                                   2139 ;   TOS     exec_addr|var_addr 
                                   2140 ;--------------------------  
      000CA5                       2141 parse_keyword: ; { -- exec_addr|var_addr}
      000CA5 CD 0E A0         [ 4] 2142 	call to_upper 
      000CA8 F7               [ 1] 2143 	ld (x),a 
      000CA9 5C               [ 1] 2144 	incw x 
      000CAA 72 5C 00 01      [ 1] 2145 	inc in 
      000CAE 91 D6 00         [ 4] 2146 	ld a,([in.w],y)
      000CB1 CD 04 F5         [ 4] 2147 	call is_alpha 
      000CB4 25 EF            [ 1] 2148 	jrc parse_keyword 
      000CB6 7F               [ 1] 2149 1$: clr (x)
      000CB7 72 5D 17 19      [ 1] 2150 	tnz pad+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CBB 26 15            [ 1] 2151 	jrne 2$
                                   2152 ; one letter variable name 
      000CBD C6 17 18         [ 1] 2153 	ld a,pad 
      000CC0 A0 41            [ 1] 2154 	sub a,#'A 
      000CC2 48               [ 1] 2155 	sll a 
      000CC3 88               [ 1] 2156 	push a 
      000CC4 4B 00            [ 1] 2157 	push #0
      000CC6 AE 00 21         [ 2] 2158 	ldw x,#vars 
      000CC9 72 FB 01         [ 2] 2159 	addw x,(1,sp) ; X=var address 
      000CCC                       2160 	_drop 2 
      000CCC 5B 02            [ 2]    1     addw sp,#2 
      000CCE A6 05            [ 1] 2161 	ld a,#TK_VAR 
      000CD0 20 0C            [ 2] 2162 	jra 4$ 
      000CD2                       2163 2$: ; check for keyword, otherwise syntax error.
      000CD2                       2164 	_ldx_dict kword_dict
      000CD2 AE 21 3C         [ 2]    1     ldw x,#kword_dict+2
      000CD5 CD 11 3C         [ 4] 2165 	call search_dict
      000CD8 4D               [ 1] 2166 	tnz a
      000CD9 26 03            [ 1] 2167 	jrne 4$ 
      000CDB CC 06 FF         [ 2] 2168 	jp syntax_error
      000CDE 81               [ 4] 2169 4$:	ret  	
                                   2170 
                                   2171 
                                   2172 ;------------------------------------
                                   2173 ; Command line tokenizer
                                   2174 ; scan text for next token
                                   2175 ; move token in 'pad'
                                   2176 ; input: 
      000CDF                       2177 	none: 
                                   2178 ; use:
                                   2179 ;	Y   pointer to text
                                   2180 ;   X	pointer to pad 
                                   2181 ;   in.w   index in text buffer
                                   2182 ; output:
                                   2183 ;   A       token attribute 
                                   2184 ;   pad 	token as .asciz
                                   2185 ;   X 		token value   
                                   2186 ;------------------------------------
                                   2187 	; use to check special character 
                                   2188 	.macro _case c t  
                                   2189 	ld a,#c 
                                   2190 	cp a,(TCHAR,sp) 
                                   2191 	jrne t
                                   2192 	.endm 
                                   2193 
                           000001  2194 	TCHAR=1
                           000002  2195 	ATTRIB=2 
                           000002  2196 	VSIZE=2
      000CDF                       2197 get_token: 
      000CDF 90 AE 16 C8      [ 2] 2198 	ldw y,#tib    	
      000CE3 C6 00 01         [ 1] 2199 	ld a,in 
      000CE6 C1 00 03         [ 1] 2200 	cp a,count 
      000CE9 2B 03            [ 1] 2201 	jrmi 1$
      000CEB A6 00            [ 1] 2202 	ld a,#TK_NONE 
      000CED 81               [ 4] 2203 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000CEE                       2204 1$:	
      000CEE                       2205 	_vars VSIZE
      000CEE 52 02            [ 2]    1     sub sp,#VSIZE 
      000CF0 AE 17 18         [ 2] 2206 	ldw x, #pad
      000CF3 A6 20            [ 1] 2207 	ld a,#SPACE
      000CF5 CD 0F 58         [ 4] 2208 	call skip
      000CF8 55 00 01 00 02   [ 1] 2209 	mov in.saved,in 
      000CFD 91 D6 00         [ 4] 2210 	ld a,([in.w],y)
      000D00 26 07            [ 1] 2211 	jrne str_tst
      000D02 72 5F 17 18      [ 1] 2212 	clr pad 
      000D06 CC 0E 94         [ 2] 2213 	jp token_exit ; end of line 
                                   2214 
      000D09                       2215 str_tst: ; check for quoted string  	
      000D09 CD 0E A0         [ 4] 2216 	call to_upper 
      000D0C 6B 01            [ 1] 2217 	ld (TCHAR,sp),a 
      000D0E                       2218 	_case '"' nbr_tst
      000D0E A6 22            [ 1]    1 	ld a,#'"' 
      000D10 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D12 26 06            [ 1]    3 	jrne nbr_tst
      000D14 CD 0B EA         [ 4] 2219 	call parse_quote
      000D17 CC 0E 94         [ 2] 2220 	jp token_exit
      000D1A                       2221 nbr_tst: ; check for number 
      000D1A A6 24            [ 1] 2222 	ld a,#'$'
      000D1C 11 01            [ 1] 2223 	cp a,(TCHAR,sp) 
      000D1E 27 13            [ 1] 2224 	jreq 1$
      000D20 A6 26            [ 1] 2225 	ld a,#'&
      000D22 11 01            [ 1] 2226 	cp a,(TCHAR,sp)
      000D24 26 06            [ 1] 2227 	jrne 0$
      000D26 CD 0C 7D         [ 4] 2228 	call parse_binary ; expect binary integer 
      000D29 CC 0E 94         [ 2] 2229 	jp token_exit 
      000D2C 7B 01            [ 1] 2230 0$:	ld a,(TCHAR,sp)
      000D2E CD 0E 97         [ 4] 2231 	call is_digit
      000D31 24 06            [ 1] 2232 	jrnc 3$
      000D33 CD 0C 42         [ 4] 2233 1$:	call parse_integer 
      000D36 CC 0E 94         [ 2] 2234 	jp token_exit 
      000D39                       2235 3$: 
      000D39                       2236 	_case '(' bkslsh_tst 
      000D39 A6 28            [ 1]    1 	ld a,#'(' 
      000D3B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3D 26 05            [ 1]    3 	jrne bkslsh_tst
      000D3F A6 0B            [ 1] 2237 	ld a,#TK_LPAREN
      000D41 CC 0E 84         [ 2] 2238 	jp token_char   	
      000D44                       2239 bkslsh_tst:
      000D44                       2240 	_case '\',rparnt_tst
      000D44 A6 5C            [ 1]    1 	ld a,#'\' 
      000D46 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D48 26 18            [ 1]    3 	jrne rparnt_tst
      000D4A 7B 01            [ 1] 2241 	ld a,(TCHAR,sp)
      000D4C F7               [ 1] 2242 	ld (x),a 
      000D4D 5C               [ 1] 2243 	incw x 
      000D4E 72 5C 00 01      [ 1] 2244 	inc in 
      000D52 91 D6 00         [ 4] 2245 	ld a,([in.w],y)
      000D55 F7               [ 1] 2246 	ld (x),a 
      000D56 5C               [ 1] 2247 	incw x 
      000D57 72 5C 00 01      [ 1] 2248 	inc in  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D5B 7F               [ 1] 2249 	clr (x) 
      000D5C 97               [ 1] 2250 	ld xl,a 
      000D5D A6 03            [ 1] 2251 	ld a,#TK_CHAR 
      000D5F CC 0E 94         [ 2] 2252 	jp token_exit 
      000D62                       2253 rparnt_tst:		
      000D62                       2254 	_case ')' colon_tst 
      000D62 A6 29            [ 1]    1 	ld a,#')' 
      000D64 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D66 26 05            [ 1]    3 	jrne colon_tst
      000D68 A6 0C            [ 1] 2255 	ld a,#TK_RPAREN 
      000D6A CC 0E 84         [ 2] 2256 	jp token_char 
      000D6D                       2257 colon_tst:
      000D6D                       2258 	_case ':' comma_tst 
      000D6D A6 3A            [ 1]    1 	ld a,#':' 
      000D6F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D71 26 05            [ 1]    3 	jrne comma_tst
      000D73 A6 01            [ 1] 2259 	ld a,#TK_COLON 
      000D75 CC 0E 84         [ 2] 2260 	jp token_char 
      000D78                       2261 comma_tst:
      000D78                       2262 	_case COMMA sharp_tst 
      000D78 A6 2C            [ 1]    1 	ld a,#COMMA 
      000D7A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D7C 26 05            [ 1]    3 	jrne sharp_tst
      000D7E A6 0D            [ 1] 2263 	ld a,#TK_COMMA
      000D80 CC 0E 84         [ 2] 2264 	jp token_char
      000D83                       2265 sharp_tst:
      000D83                       2266 	_case SHARP dash_tst 
      000D83 A6 23            [ 1]    1 	ld a,#SHARP 
      000D85 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D87 26 05            [ 1]    3 	jrne dash_tst
      000D89 A6 0E            [ 1] 2267 	ld a,#TK_SHARP
      000D8B CC 0E 84         [ 2] 2268 	jp token_char  	 	 
      000D8E                       2269 dash_tst: 	
      000D8E                       2270 	_case '-' at_tst 
      000D8E A6 2D            [ 1]    1 	ld a,#'-' 
      000D90 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D92 26 05            [ 1]    3 	jrne at_tst
      000D94 A6 11            [ 1] 2271 	ld a,#TK_MINUS  
      000D96 CC 0E 84         [ 2] 2272 	jp token_char 
      000D99                       2273 at_tst:
      000D99                       2274 	_case '@' qmark_tst 
      000D99 A6 40            [ 1]    1 	ld a,#'@' 
      000D9B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9D 26 05            [ 1]    3 	jrne qmark_tst
      000D9F A6 02            [ 1] 2275 	ld a,#TK_ARRAY 
      000DA1 CC 0E 84         [ 2] 2276 	jp token_char
      000DA4                       2277 qmark_tst:
      000DA4                       2278 	_case '?' tick_tst 
      000DA4 A6 3F            [ 1]    1 	ld a,#'?' 
      000DA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA8 26 11            [ 1]    3 	jrne tick_tst
      000DAA 7B 01            [ 1] 2279 	ld a,(TCHAR,sp)
      000DAC F7               [ 1] 2280 	ld (x),a 
      000DAD 5C               [ 1] 2281 	incw x 
      000DAE 7F               [ 1] 2282 	clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DAF 72 5C 00 01      [ 1] 2283 	inc in 
      000DB3 A6 06            [ 1] 2284 	ld a,#TK_CMD 
      000DB5 AE 15 E6         [ 2] 2285 	ldw x,#print 
      000DB8 CC 0E 94         [ 2] 2286 	jp token_exit
      000DBB                       2287 tick_tst: ; ignore comment 
      000DBB                       2288 	_case TICK plus_tst 
      000DBB A6 27            [ 1]    1 	ld a,#TICK 
      000DBD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DBF 26 0C            [ 1]    3 	jrne plus_tst
      000DC1 72 5C 00 01      [ 1] 2289 	inc in 
      000DC5 A6 06            [ 1] 2290 	ld a,#TK_CMD 
      000DC7 AE 16 EB         [ 2] 2291 	ldw x,#rem 
      000DCA CC 0E 94         [ 2] 2292 	jp token_exit 
      000DCD                       2293 plus_tst:
      000DCD                       2294 	_case '+' star_tst 
      000DCD A6 2B            [ 1]    1 	ld a,#'+' 
      000DCF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DD1 26 05            [ 1]    3 	jrne star_tst
      000DD3 A6 10            [ 1] 2295 	ld a,#TK_PLUS  
      000DD5 CC 0E 84         [ 2] 2296 	jp token_char 
      000DD8                       2297 star_tst:
      000DD8                       2298 	_case '*' slash_tst 
      000DD8 A6 2A            [ 1]    1 	ld a,#'*' 
      000DDA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DDC 26 05            [ 1]    3 	jrne slash_tst
      000DDE A6 20            [ 1] 2299 	ld a,#TK_MULT 
      000DE0 CC 0E 84         [ 2] 2300 	jp token_char 
      000DE3                       2301 slash_tst: 
      000DE3                       2302 	_case '/' prcnt_tst 
      000DE3 A6 2F            [ 1]    1 	ld a,#'/' 
      000DE5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE7 26 05            [ 1]    3 	jrne prcnt_tst
      000DE9 A6 21            [ 1] 2303 	ld a,#TK_DIV 
      000DEB CC 0E 84         [ 2] 2304 	jp token_char 
      000DEE                       2305 prcnt_tst:
      000DEE                       2306 	_case '%' eql_tst 
      000DEE A6 25            [ 1]    1 	ld a,#'%' 
      000DF0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF2 26 05            [ 1]    3 	jrne eql_tst
      000DF4 A6 22            [ 1] 2307 	ld a,#TK_MOD
      000DF6 CC 0E 84         [ 2] 2308 	jp token_char  
                                   2309 ; 1 or 2 character tokens 	
      000DF9                       2310 eql_tst:
      000DF9                       2311 	_case '=' gt_tst 		
      000DF9 A6 3D            [ 1]    1 	ld a,#'=' 
      000DFB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFD 26 05            [ 1]    3 	jrne gt_tst
      000DFF A6 32            [ 1] 2312 	ld a,#TK_EQUAL
      000E01 CC 0E 84         [ 2] 2313 	jp token_char 
      000E04                       2314 gt_tst:
      000E04                       2315 	_case '>' lt_tst 
      000E04 A6 3E            [ 1]    1 	ld a,#'>' 
      000E06 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E08 26 33            [ 1]    3 	jrne lt_tst
      000E0A A6 31            [ 1] 2316 	ld a,#TK_GT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E0C 6B 02            [ 1] 2317 	ld (ATTRIB,sp),a 
      000E0E 72 5C 00 01      [ 1] 2318 	inc in 
      000E12 91 D6 00         [ 4] 2319 	ld a,([in.w],y)
      000E15 A1 3D            [ 1] 2320 	cp a,#'=
      000E17 26 0C            [ 1] 2321 	jrne 1$
      000E19 7B 01            [ 1] 2322 	ld a,(TCHAR,sp)
      000E1B F7               [ 1] 2323 	ld (x),a
      000E1C 5C               [ 1] 2324 	incw x 
      000E1D A6 3D            [ 1] 2325 	ld a,#'=
      000E1F 6B 01            [ 1] 2326 	ld (TCHAR,sp),a 
      000E21 A6 33            [ 1] 2327 	ld a,#TK_GE 
      000E23 20 5F            [ 2] 2328 	jra token_char  
      000E25 A1 3C            [ 1] 2329 1$: cp a,#'<
      000E27 26 0C            [ 1] 2330 	jrne 2$
      000E29 7B 01            [ 1] 2331 	ld a,(TCHAR,sp)
      000E2B F7               [ 1] 2332 	ld (x),a
      000E2C 5C               [ 1] 2333 	incw x 
      000E2D A6 3C            [ 1] 2334 	ld a,#'<	
      000E2F 6B 01            [ 1] 2335 	ld (TCHAR,sp),a 
      000E31 A6 35            [ 1] 2336 	ld a,#TK_NE 
      000E33 20 4F            [ 2] 2337 	jra token_char 
      000E35 72 5A 00 01      [ 1] 2338 2$: dec in
      000E39 7B 02            [ 1] 2339 	ld a,(ATTRIB,sp)
      000E3B 20 47            [ 2] 2340 	jra token_char 
      000E3D                       2341 lt_tst:
      000E3D                       2342 	_case '<' other
      000E3D A6 3C            [ 1]    1 	ld a,#'<' 
      000E3F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E41 26 32            [ 1]    3 	jrne other
      000E43 A6 34            [ 1] 2343 	ld a,#TK_LT 
      000E45 6B 02            [ 1] 2344 	ld (ATTRIB,sp),a 
      000E47 72 5C 00 01      [ 1] 2345 	inc in 
      000E4B 91 D6 00         [ 4] 2346 	ld a,([in.w],y)
      000E4E A1 3D            [ 1] 2347 	cp a,#'=
      000E50 26 0B            [ 1] 2348 	jrne 1$
      000E52 7B 01            [ 1] 2349 	ld a,(TCHAR,sp)
      000E54 F7               [ 1] 2350 	ld (x),a 
      000E55 A6 3D            [ 1] 2351 	ld a,#'=
      000E57 6B 01            [ 1] 2352 	ld (TCHAR,sp),a 
      000E59 A6 36            [ 1] 2353 	ld a,#TK_LE 
      000E5B 20 27            [ 2] 2354 	jra token_char 
      000E5D A1 3E            [ 1] 2355 1$: cp a,#'>
      000E5F 26 0C            [ 1] 2356 	jrne 2$
      000E61 7B 01            [ 1] 2357 	ld a,(TCHAR,sp)
      000E63 F7               [ 1] 2358 	ld (x),a 
      000E64 5C               [ 1] 2359 	incw x 
      000E65 A6 3E            [ 1] 2360 	ld a,#'>
      000E67 6B 01            [ 1] 2361 	ld (TCHAR,sp),a 
      000E69 A6 35            [ 1] 2362 	ld a,#TK_NE 
      000E6B 20 17            [ 2] 2363 	jra token_char 
      000E6D 72 5A 00 01      [ 1] 2364 2$: dec in 
      000E71 7B 02            [ 1] 2365 	ld a,(ATTRIB,sp)
      000E73 20 0F            [ 2] 2366 	jra token_char 	
      000E75                       2367 other: ; not a special character 	 
      000E75 7B 01            [ 1] 2368 	ld a,(TCHAR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E77 CD 04 F5         [ 4] 2369 	call is_alpha 
      000E7A 25 03            [ 1] 2370 	jrc 30$ 
      000E7C CC 06 FF         [ 2] 2371 	jp syntax_error 
      000E7F                       2372 30$: 
      000E7F CD 0C A5         [ 4] 2373 	call parse_keyword
      000E82 20 10            [ 2] 2374 	jra token_exit 
      000E84                       2375 token_char:
      000E84 6B 02            [ 1] 2376 	ld (ATTRIB,sp),a 
      000E86 7B 01            [ 1] 2377 	ld a,(TCHAR,sp)
      000E88 F7               [ 1] 2378 	ld (x),a 
      000E89 5C               [ 1] 2379 	incw x 
      000E8A 7F               [ 1] 2380 	clr(x)
      000E8B 72 5C 00 01      [ 1] 2381 	inc in 
      000E8F 7B 02            [ 1] 2382 	ld a,(ATTRIB,sp)
      000E91 AE 17 18         [ 2] 2383 	ldw x,#pad 
      000E94                       2384 token_exit:
      000E94                       2385 	_drop VSIZE 
      000E94 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E96 81               [ 4] 2386 	ret
                                   2387 
                                   2388 
                                   2389 
                                   2390 ;------------------------------------
                                   2391 ; check if character in {'0'..'9'}
                                   2392 ; input:
                                   2393 ;    A  character to test
                                   2394 ; output:
                                   2395 ;    Carry  0 not digit | 1 digit
                                   2396 ;------------------------------------
      000E97                       2397 is_digit:
      000E97 A1 30            [ 1] 2398 	cp a,#'0
      000E99 25 03            [ 1] 2399 	jrc 1$
      000E9B A1 3A            [ 1] 2400     cp a,#'9+1
      000E9D 8C               [ 1] 2401 	ccf 
      000E9E 8C               [ 1] 2402 1$:	ccf 
      000E9F 81               [ 4] 2403     ret
                                   2404 
                                   2405 ;------------------------------------
                                   2406 ; convert alpha to uppercase
                                   2407 ; input:
                                   2408 ;    a  character to convert
                                   2409 ; output:
                                   2410 ;    a  uppercase character
                                   2411 ;------------------------------------
      000EA0                       2412 to_upper::
      000EA0 A1 61            [ 1] 2413 	cp a,#'a
      000EA2 2A 01            [ 1] 2414 	jrpl 1$
      000EA4 81               [ 4] 2415 0$:	ret
      000EA5 A1 7A            [ 1] 2416 1$: cp a,#'z	
      000EA7 22 FB            [ 1] 2417 	jrugt 0$
      000EA9 A0 20            [ 1] 2418 	sub a,#32
      000EAB 81               [ 4] 2419 	ret
                                   2420 	
                                   2421 ;------------------------------------
                                   2422 ; convert pad content in integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2423 ; input:
                                   2424 ;    pad		.asciz to convert
                                   2425 ; output:
                                   2426 ;    acc24      int24_t
                                   2427 ;------------------------------------
                                   2428 	; local variables
                           000001  2429 	SIGN=1 ; 1 byte, 
                           000002  2430 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2431 	TEMP=3 ; 1 byte, temporary storage
                           000003  2432 	VSIZE=3 ; 3 bytes reserved for local storage
      000EAC                       2433 atoi24:
      000EAC 89               [ 2] 2434 	pushw x ;save x
      000EAD 52 03            [ 2] 2435 	sub sp,#VSIZE
                                   2436 	; acc24=0 
      000EAF 72 5F 00 07      [ 1] 2437 	clr acc24    
      000EB3 72 5F 00 08      [ 1] 2438 	clr acc16
      000EB7 72 5F 00 09      [ 1] 2439 	clr acc8 
      000EBB C6 17 18         [ 1] 2440 	ld a, pad 
      000EBE 27 5A            [ 1] 2441 	jreq atoi_exit
      000EC0 0F 01            [ 1] 2442 	clr (SIGN,sp)
      000EC2 A6 0A            [ 1] 2443 	ld a,#10
      000EC4 6B 02            [ 1] 2444 	ld (BASE,sp),a ; default base decimal
      000EC6 AE 17 18         [ 2] 2445 	ldw x,#pad ; pointer to string to convert
      000EC9 F6               [ 1] 2446 	ld a,(x)
      000ECA 27 47            [ 1] 2447 	jreq 9$  ; completed if 0
      000ECC A1 2D            [ 1] 2448 	cp a,#'-
      000ECE 26 04            [ 1] 2449 	jrne 1$
      000ED0 03 01            [ 1] 2450 	cpl (SIGN,sp)
      000ED2 20 08            [ 2] 2451 	jra 2$
      000ED4 A1 24            [ 1] 2452 1$: cp a,#'$
      000ED6 26 06            [ 1] 2453 	jrne 3$
      000ED8 A6 10            [ 1] 2454 	ld a,#16
      000EDA 6B 02            [ 1] 2455 	ld (BASE,sp),a
      000EDC 5C               [ 1] 2456 2$:	incw x
      000EDD F6               [ 1] 2457 	ld a,(x)
      000EDE                       2458 3$:	
      000EDE A1 61            [ 1] 2459 	cp a,#'a
      000EE0 2B 02            [ 1] 2460 	jrmi 4$
      000EE2 A0 20            [ 1] 2461 	sub a,#32
      000EE4 A1 30            [ 1] 2462 4$:	cp a,#'0
      000EE6 2B 2B            [ 1] 2463 	jrmi 9$
      000EE8 A0 30            [ 1] 2464 	sub a,#'0
      000EEA A1 0A            [ 1] 2465 	cp a,#10
      000EEC 2B 06            [ 1] 2466 	jrmi 5$
      000EEE A0 07            [ 1] 2467 	sub a,#7
      000EF0 11 02            [ 1] 2468 	cp a,(BASE,sp)
      000EF2 2A 1F            [ 1] 2469 	jrpl 9$
      000EF4 6B 03            [ 1] 2470 5$:	ld (TEMP,sp),a
      000EF6 7B 02            [ 1] 2471 	ld a,(BASE,sp)
      000EF8 CD 0F 1E         [ 4] 2472 	call mulu24_8
      000EFB 7B 03            [ 1] 2473 	ld a,(TEMP,sp)
      000EFD CB 00 09         [ 1] 2474 	add a,acc24+2
      000F00 C7 00 09         [ 1] 2475 	ld acc24+2,a
      000F03 4F               [ 1] 2476 	clr a
      000F04 C9 00 08         [ 1] 2477 	adc a,acc24+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F07 C7 00 08         [ 1] 2478 	ld acc24+1,a
      000F0A 4F               [ 1] 2479 	clr a
      000F0B C9 00 07         [ 1] 2480 	adc a,acc24
      000F0E C7 00 07         [ 1] 2481 	ld acc24,a
      000F11 20 C9            [ 2] 2482 	jra 2$
      000F13 0D 01            [ 1] 2483 9$:	tnz (SIGN,sp)
      000F15 27 03            [ 1] 2484     jreq atoi_exit
      000F17 CD 0A 43         [ 4] 2485     call neg_acc24
      000F1A                       2486 atoi_exit: 
      000F1A 5B 03            [ 2] 2487 	addw sp,#VSIZE
      000F1C 85               [ 2] 2488 	popw x ; restore x
      000F1D 81               [ 4] 2489 	ret
                                   2490 
                                   2491 ;--------------------------------------
                                   2492 ; unsigned multiply uint24_t by uint8_t
                                   2493 ; use to convert numerical string to uint24_t
                                   2494 ; input:
                                   2495 ;	acc24	uint24_t 
                                   2496 ;   A		uint8_t
                                   2497 ; output:
                                   2498 ;   acc24   A*acc24
                                   2499 ;-------------------------------------
                                   2500 ; local variables offset  on sp
                           000003  2501 	U8   = 3   ; A pushed on stack
                           000002  2502 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2503 	OVFH = 1  ; multiplication overflow high byte
                           000003  2504 	VSIZE = 3
      000F1E                       2505 mulu24_8:
      000F1E 89               [ 2] 2506 	pushw x    ; save X
                                   2507 	; local variables
      000F1F 88               [ 1] 2508 	push a     ; U8
      000F20 5F               [ 1] 2509 	clrw x     ; initialize overflow to 0
      000F21 89               [ 2] 2510 	pushw x    ; multiplication overflow
                                   2511 ; multiply low byte.
      000F22 C6 00 09         [ 1] 2512 	ld a,acc24+2
      000F25 97               [ 1] 2513 	ld xl,a
      000F26 7B 03            [ 1] 2514 	ld a,(U8,sp)
      000F28 42               [ 4] 2515 	mul x,a
      000F29 9F               [ 1] 2516 	ld a,xl
      000F2A C7 00 09         [ 1] 2517 	ld acc24+2,a
      000F2D 9E               [ 1] 2518 	ld a, xh
      000F2E 6B 02            [ 1] 2519 	ld (OVFL,sp),a
                                   2520 ; multipy middle byte
      000F30 C6 00 08         [ 1] 2521 	ld a,acc24+1
      000F33 97               [ 1] 2522 	ld xl,a
      000F34 7B 03            [ 1] 2523 	ld a, (U8,sp)
      000F36 42               [ 4] 2524 	mul x,a
                                   2525 ; add overflow to this partial product
      000F37 72 FB 01         [ 2] 2526 	addw x,(OVFH,sp)
      000F3A 9F               [ 1] 2527 	ld a,xl
      000F3B C7 00 08         [ 1] 2528 	ld acc24+1,a
      000F3E 4F               [ 1] 2529 	clr a
      000F3F A9 00            [ 1] 2530 	adc a,#0
      000F41 6B 01            [ 1] 2531 	ld (OVFH,sp),a
      000F43 9E               [ 1] 2532 	ld a,xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000F44 6B 02            [ 1] 2533 	ld (OVFL,sp),a
                                   2534 ; multiply most signficant byte	
      000F46 C6 00 07         [ 1] 2535 	ld a, acc24
      000F49 97               [ 1] 2536 	ld xl, a
      000F4A 7B 03            [ 1] 2537 	ld a, (U8,sp)
      000F4C 42               [ 4] 2538 	mul x,a
      000F4D 72 FB 01         [ 2] 2539 	addw x, (OVFH,sp)
      000F50 9F               [ 1] 2540 	ld a, xl
      000F51 C7 00 07         [ 1] 2541 	ld acc24,a
      000F54 5B 03            [ 2] 2542     addw sp,#VSIZE
      000F56 85               [ 2] 2543 	popw x
      000F57 81               [ 4] 2544 	ret
                                   2545 
                                   2546 ;------------------------------------
                                   2547 ; skip character c in text starting from 'in'
                                   2548 ; input:
                                   2549 ;	 y 		point to text buffer
                                   2550 ;    a 		character to skip
                                   2551 ; output:  
                                   2552 ;	'in' ajusted to new position
                                   2553 ;------------------------------------
                           000001  2554 	C = 1 ; local var
      000F58                       2555 skip:
      000F58 88               [ 1] 2556 	push a
      000F59 91 D6 00         [ 4] 2557 1$:	ld a,([in.w],y)
      000F5C 27 0A            [ 1] 2558 	jreq 2$
      000F5E 11 01            [ 1] 2559 	cp a,(C,sp)
      000F60 26 06            [ 1] 2560 	jrne 2$
      000F62 72 5C 00 01      [ 1] 2561 	inc in
      000F66 20 F1            [ 2] 2562 	jra 1$
      000F68                       2563 2$: _drop 1 
      000F68 5B 01            [ 2]    1     addw sp,#1 
      000F6A 81               [ 4] 2564 	ret
                                   2565 	
                                   2566 ;------------------------------
                                   2567 ; restore 'in.w' variable to 
                                   2568 ; its value before last call
                                   2569 ; to get_token.
                                   2570 ;------------------------------
      000F6B                       2571 unget_token:
      000F6B 55 00 02 00 01   [ 1] 2572 	mov in,in.saved
      000F70 81               [ 4] 2573 	ret 
                                   2574 
                                   2575 
                                   2576 ;******************************
                                   2577 ;  data stack manipulation
                                   2578 ;*****************************
                                   2579 ;----------------------	
                                   2580 ; push X on data stack 
                                   2581 ; input:
                                   2582 ;	X 
                                   2583 ; output:
                                   2584 ;	none 
                                   2585 ;----------------------	
      000F71                       2586 dpush:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F71                       2587     _dp_down
      000F71 72 5A 00 17      [ 1]    1     dec dstkptr+1 
      000F75 72 5A 00 17      [ 1]    2     dec dstkptr+1
      000F79 72 CF 00 16      [ 5] 2588     ldw [dstkptr],x  
      000F7D 81               [ 4] 2589 	ret 
                                   2590 
                                   2591 
                                   2592 ;----------------------	
                                   2593 ; pop data stack in X 
                                   2594 ; input:
                                   2595 ;	none
                                   2596 ; output:
                                   2597 ;	X   
                                   2598 ;----------------------	
      000F7E                       2599 dpop: 
      000F7E 72 CE 00 16      [ 5] 2600     ldw x, [dstkptr]
      000F82                       2601 	_dp_up
      000F82 72 5C 00 17      [ 1]    1     inc dstkptr+1
      000F86 72 5C 00 17      [ 1]    2     inc dstkptr+1
      000F8A 81               [ 4] 2602 	ret 
                                   2603 
                                   2604 ;-----------------------------
                                   2605 ; swap top 2 elements of dstack
                                   2606 ;  {n1 n2 -- n2 n1 }
                                   2607 ;-----------------------------
      000F8B                       2608 dswap:
      000F8B 72 CE 00 16      [ 5] 2609 	ldw x,[dstkptr]
      000F8F 89               [ 2] 2610 	pushw x 
      000F90 AE 00 02         [ 2] 2611 	ldw x,#2 
      000F93 72 DE 00 16      [ 5] 2612 	ldw x,([dstkptr],x) 
      000F97 72 CF 00 16      [ 5] 2613 	ldw [dstkptr],x 
      000F9B AE 00 02         [ 2] 2614 	ldw x,#2
      000F9E 90 85            [ 2] 2615 	popw y 
      000FA0 72 DF 00 16      [ 5] 2616 	ldw ([dstkptr],x),y 
      000FA4 81               [ 4] 2617 	ret
                                   2618 
                                   2619 ;-----------------------------
                                   2620 ; drop TOS 
                                   2621 ;-----------------------------
      000FA5                       2622 ddrop: ; { n -- }
      000FA5                       2623 	_dp_up 
      000FA5 72 5C 00 17      [ 1]    1     inc dstkptr+1
      000FA9 72 5C 00 17      [ 1]    2     inc dstkptr+1
      000FAD 81               [ 4] 2624 	ret
                                   2625 	
                                   2626 ;-----------------------------
                                   2627 ; duplicate TOS 
                                   2628 ;  dstack: { ix...n -- ix...n n }
                                   2629 ;-----------------------------
      000FAE                       2630 ddup:
      000FAE 72 CE 00 16      [ 5] 2631 	ldw x,[dstkptr]
      000FB2                       2632 	_dp_down
      000FB2 72 5A 00 17      [ 1]    1     dec dstkptr+1 
      000FB6 72 5A 00 17      [ 1]    2     dec dstkptr+1
      000FBA 72 CF 00 16      [ 5] 2633     ldw [dstkptr],x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FBE 81               [ 4] 2634 	ret 
                                   2635 
                                   2636 
                                   2637 ;----------------------------------
                                   2638 ; pick value n from dstack 
                                   2639 ; put it on TOS
                                   2640 ; dstack: {ix,..,p -- ix,...,np }
                                   2641 ;-----------------------------------
      000FBF                       2642 dpick:
      000FBF 72 CE 00 16      [ 5] 2643 	ldw x,[dstkptr]
      000FC3 58               [ 2] 2644 	sllw x 
      000FC4 72 BB 00 16      [ 2] 2645 	addw x,dstkptr 
      000FC8 FE               [ 2] 2646 	ldw x,(x)
      000FC9 72 CF 00 16      [ 5] 2647 	ldw [dstkptr],x 
      000FCD 81               [ 4] 2648 	ret
                                   2649 
                                   2650 ;---------------------------
                                   2651 ;  fetch variable in X 
                                   2652 ;  dstack:{ addr -- value }
                                   2653 ;---------------------------
      000FCE                       2654 fetch:
      000FCE 72 CE 00 16      [ 5] 2655 	ldw x,[dstkptr]
      000FD2 FE               [ 2] 2656 	ldw x,(x)
      000FD3 72 CF 00 16      [ 5] 2657 	ldw [dstkptr],x
      000FD7 81               [ 4] 2658 	ret 
                                   2659 
                                   2660 ;----------------------------
                                   2661 ; store variable 
                                   2662 ; dstack: {addr value -- }
                                   2663 ;----------------------------
      000FD8                       2664 store:
      000FD8 CD 0F 7E         [ 4] 2665 	call dpop 
      000FDB 90 93            [ 1] 2666 	ldw y,x   ; y=value 
      000FDD CD 0F 7E         [ 4] 2667 	call dpop 
      000FE0 FF               [ 2] 2668 	ldw (x),y 
      000FE1 81               [ 4] 2669 	ret 
                                   2670 
                                   2671 ;---------------------------------
                                   2672 ; drop n elements from data stack 
                                   2673 ; input: 
                                   2674 ;   X 		n 
                                   2675 ; output:
                                   2676 ;   none 
                                   2677 ;-------------------------------------
      000FE2                       2678 ddrop_n:
      000FE2 90 89            [ 2] 2679 	pushw y 
      000FE4 90 CE 00 16      [ 2] 2680 	ldw y,dstkptr 
      000FE8 58               [ 2] 2681 	sllw x 
      000FE9 89               [ 2] 2682 	pushw x 
      000FEA 72 F9 01         [ 2] 2683 	addw y,(1,sp)
      000FED 90 CF 00 16      [ 2] 2684 	ldw dstkptr,y 
      000FF1 85               [ 2] 2685 	popw x 
      000FF2 90 85            [ 2] 2686 	popw y
      000FF4 81               [ 4] 2687 	ret 
                                   2688 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000FF5 0A 64 73 74 61 63 6B  2689 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2690 ;----------------------------
                                   2691 ; print dstack content 
                                   2692 ;---------------------------
                           000001  2693 	XSAVE=1
                           000002  2694 	VSIZE=2
      000FFF                       2695 dots:
      000FFF                       2696 	_vars VSIZE 
      000FFF 52 02            [ 2]    1     sub sp,#VSIZE 
      001001 AE 0F F5         [ 2] 2697 	ldw x,#dstk_prompt 
      001004 CD 01 B0         [ 4] 2698 	call puts
      001007 AE 17 7E         [ 2] 2699 	ldw x,#dstack_unf-CELL_SIZE
      00100A 35 0A 00 06      [ 1] 2700 	mov base,#10 
      00100E C3 00 16         [ 2] 2701 1$:	cpw x,dstkptr 
      001011 25 0D            [ 1] 2702 	jrult 4$ 
      001013 1F 01            [ 2] 2703 	ldw (XSAVE,sp),x
      001015 FE               [ 2] 2704 	ldw  x,(x)
      001016 CD 09 78         [ 4] 2705 	call print_int 
      001019 1E 01            [ 2] 2706 	ldw x,(XSAVE,sp)
      00101B 1D 00 02         [ 2] 2707 	subw x,#CELL_SIZE 
      00101E 20 EE            [ 2] 2708 	jra 1$ 
      001020 A6 0D            [ 1] 2709 4$: ld a,#CR 
      001022 CD 01 9E         [ 4] 2710 	call putc 
      001025                       2711 	_drop VSIZE
      001025 5B 02            [ 2]    1     addw sp,#VSIZE 
      001027 4F               [ 1] 2712 	clr a 
      001028 81               [ 4] 2713 	ret
                                   2714 
      001029 0A 63 74 61 63 6B 3A  2715 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2716 ;--------------------------------
                                   2717 ; print cstack content
                                   2718 ;--------------------------------
                           000001  2719 	XSAVE=1
                           000002  2720 	VSIZE=2 
      001032                       2721 dotr:
      001032                       2722 	_vars VSIZE 
      001032 52 02            [ 2]    1     sub sp,#VSIZE 
      001034 AE 10 29         [ 2] 2723 	ldw x,#cstk_prompt
      001037 CD 01 B0         [ 4] 2724 	call puts 
      00103A 96               [ 1] 2725 	ldw x,sp 
      00103B 1C 00 07         [ 2] 2726 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      00103E 1F 01            [ 2] 2727 	ldw (XSAVE,sp),x  
      001040 AE 17 FE         [ 2] 2728 	ldw x,#RAM_SIZE-2
      001043 35 10 00 06      [ 1] 2729 	mov base,#16
      001047                       2730 dotr_loop:
      001047 13 01            [ 2] 2731 	cpw x,(XSAVE,sp)
      001049 2B 0B            [ 1] 2732 	jrmi 9$
      00104B 89               [ 2] 2733 	pushw x  
      00104C FE               [ 2] 2734 	ldw x,(x)
      00104D CD 09 78         [ 4] 2735 	call print_int 
      001050 85               [ 2] 2736 	popw x  
      001051 1D 00 02         [ 2] 2737 	subw x,#CELL_SIZE
      001054 20 F1            [ 2] 2738 	jra dotr_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001056 A6 0D            [ 1] 2739 9$:	ld a,#CR 
      001058 CD 01 9E         [ 4] 2740 	call putc 
      00105B                       2741 	_drop VSIZE 
      00105B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00105D 4F               [ 1] 2742 	clr a 
      00105E 81               [ 4] 2743 	ret
                                   2744 
                                   2745 
                                   2746 ;--------------------------------
                                   2747 ;  add 2 integers
                                   2748 ;  input:
                                   2749 ;    N1     on cstack 
                                   2750 ;    N2     on cstack 
                                   2751 ;  output:
                                   2752 ;    X 		n2+n1 
                                   2753 ;--------------------------------
                                   2754 	;arugments on cstack 
      00105F                       2755 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00105F                       2756 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      00105F                       2757 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00105F                       2758 add:
      00105F 1E 05            [ 2] 2759 	ldw x ,(N2,sp)
      001061 72 FB 03         [ 2] 2760 	addw x,(N1,sp)
      001064 1F 03            [ 2] 2761 	ldw (N1,sp),x 
      001066 81               [ 4] 2762 	ret 
                                   2763 
                                   2764 ;--------------------------------
                                   2765 ;  substract 2 ntegers
                                   2766 ;  input:
                                   2767 ;    N1     on cstack 
                                   2768 ;    N2     on cstack 
                                   2769 ;  output:
                                   2770 ;    X 		n2+n1 
                                   2771 ;--------------------------------
      001067                       2772 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001067                       2773 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001067                       2774 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001067                       2775 substract:
      001067 1E 05            [ 2] 2776 	ldw x,(N2,sp)
      001069 72 F0 03         [ 2] 2777 	subw x,(N1,sp)
      00106C 81               [ 4] 2778 	ret 
                                   2779 
                                   2780 ;-------------------------------------
                                   2781 ; multiply 2 integers
                                   2782 ; product overflow is ignored unless
                                   2783 ; MATH_OVF assembler flag is set to 1
                                   2784 ; input:
                                   2785 ;  	N1      on cstack
                                   2786 ;   N2 		on cstack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2787 ; output:
                                   2788 ;	X        N1*N2 
                                   2789 ;-------------------------------------
                                   2790 	;arguments 
      00106D                       2791 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      00106D                       2792 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      00106D                       2793 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      00106D                       2794 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      00106D                       2795 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2796    ; local variables 
                           000001  2797 	SIGN=1
                           000002  2798 	PROD=2
                           000003  2799 	VSIZE=3
      00106D                       2800 multiply:
      00106D                       2801 	_vars VSIZE 
      00106D 52 03            [ 2]    1     sub sp,#VSIZE 
      00106F 0F 01            [ 1] 2802 	clr (SIGN,sp)
      001071 1E 06            [ 2] 2803 	ldw x,(N1_HB,sp)
      001073 9E               [ 1] 2804 	ld a,xh  
      001074 A5 80            [ 1] 2805 	bcp a,#0x80 
      001076 27 05            [ 1] 2806 	jreq 2$
      001078 03 01            [ 1] 2807 	cpl (SIGN,sp)
      00107A 50               [ 2] 2808 	negw x 
      00107B 1F 06            [ 2] 2809 	ldw (N1_HB,sp),x 
      00107D 1E 08            [ 2] 2810 2$: ldw x,(N2_HB,sp)
      00107F 9E               [ 1] 2811 	ld a,xh  
      001080 A5 80            [ 1] 2812 	bcp a,#0x80 
      001082 27 05            [ 1] 2813 	jreq 3$
      001084 03 01            [ 1] 2814 	cpl (SIGN,sp)
      001086 50               [ 2] 2815 	negw x 
      001087 1F 08            [ 2] 2816 	ldw (N2_HB,sp),x 
                                   2817 ; N1_LB * N2_LB 	
      001089 7B 07            [ 1] 2818 3$:	ld a,(N1_LB,sp)
      00108B 97               [ 1] 2819 	ld xl,a 
      00108C 7B 09            [ 1] 2820 	ld a,(N2_LB,sp) 
      00108E 42               [ 4] 2821 	mul x,a 
                           000000  2822 .if MATH_OVF 	
                                   2823 	ld a,xh 
                                   2824 	bcp a,#0x80 
                                   2825 	jreq 4$ 
                                   2826 	ld a,#ERR_MATH_OVF 
                                   2827 	jp tb_error
                                   2828 .endif 	 
      00108F 1F 02            [ 2] 2829 4$:	ldw (PROD,sp),x
                                   2830 ; N1_LB * N2_HB	 
      001091 7B 07            [ 1] 2831 	ld a,(N1_LB,sp) 
      001093 97               [ 1] 2832 	ld xl,a 
      001094 7B 08            [ 1] 2833 	ld a,(N2_HB,sp)
      001096 42               [ 4] 2834 	mul x,a
      001097 9F               [ 1] 2835 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001098 1B 02            [ 1] 2836 	add a,(PROD,sp)
                           000000  2837 .if MATH_OVF 	
                                   2838 	bcp a,#0x80 
                                   2839 	jreq 5$ 
                                   2840 	ld a,#ERR_MATH_OVF 
                                   2841 	jp tb_error
                                   2842 .endif 	 
      00109A 6B 02            [ 1] 2843 5$:	ld (PROD,sp),a 
                                   2844 ; N1_HB * N2_LB 
      00109C 7B 06            [ 1] 2845 	ld a,(N1_HB,sp)
      00109E 97               [ 1] 2846 	ld xl,a 
      00109F 7B 09            [ 1] 2847 	ld a,(N2_LB,sp)
      0010A1 42               [ 4] 2848 	mul x,a 
      0010A2 9F               [ 1] 2849 	ld a,xl 
      0010A3 1B 02            [ 1] 2850 	add a,(PROD,sp)
                           000000  2851 .if MATH_OVF 	
                                   2852 	bcp a,#0x80 
                                   2853 	jreq 6$ 
                                   2854 	ld a,#ERR_MATH_OVF 
                                   2855 	jp tb_error
                                   2856 .endif 	 
      0010A5 6B 02            [ 1] 2857 6$:	ld (PROD,sp),a 
                                   2858 ; N1_HB * N2_HB 	
                                   2859 ; it is pointless to multiply N1_HB*N2_HB 
                                   2860 ; as this product is over 65535 or 0 
                                   2861 ;
                                   2862 ; sign adjust product
      0010A7 0D 01            [ 1] 2863 	tnz (SIGN,sp)
      0010A9 27 05            [ 1] 2864 	jreq 7$
      0010AB 1E 02            [ 2] 2865 	ldw x, (PROD,sp)
      0010AD 50               [ 2] 2866 	negw x
      0010AE 1F 02            [ 2] 2867 	ldw (PROD,sp),x  
      0010B0                       2868 7$: 
      0010B0 1E 02            [ 2] 2869 	ldw x,(PROD,sp) 
      0010B2                       2870 	_drop VSIZE 
      0010B2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0010B4 81               [ 4] 2871 	ret
                                   2872 
                                   2873 ;----------------------------------
                                   2874 ;  euclidian divide n2/n1 
                                   2875 ; input:
                                   2876 ;    N2 	on cstack
                                   2877 ;    N1 	on cstack
                                   2878 ; output:
                                   2879 ;    X      n2/n1 
                                   2880 ;    Y      remainder 
                                   2881 ;----------------------------------
      0010B5                       2882 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      0010B5                       2883 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      0010B5                       2884 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2885 	; local variables
                           000001  2886 	SQUOT=1 ; sign quotient
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                           000002  2887 	SDIVD=2 ; sign dividend  
                           000002  2888 	VSIZE=2
      0010B5                       2889 divide:
      0010B5                       2890 	_vars VSIZE 
      0010B5 52 02            [ 2]    1     sub sp,#VSIZE 
      0010B7 0F 01            [ 1] 2891 	clr (SQUOT,sp)
      0010B9 0F 02            [ 1] 2892 	clr (SDIVD,sp)
                                   2893 ; check for 0 divisor
      0010BB 1E 05            [ 2] 2894 	ldw x,(DIVISR,sp)
      0010BD 5D               [ 2] 2895 	tnzw x 
      0010BE 26 05            [ 1] 2896     jrne 0$
      0010C0 A6 04            [ 1] 2897 	ld a,#ERR_DIV0 
      0010C2 CC 07 01         [ 2] 2898 	jp tb_error 
                                   2899 ; check divisor sign 	
      0010C5 9E               [ 1] 2900 0$:	ld a,xh 
      0010C6 A5 80            [ 1] 2901 	bcp a,#0x80 
      0010C8 27 03            [ 1] 2902 	jreq 1$
      0010CA 03 01            [ 1] 2903 	cpl (SQUOT,sp)
      0010CC 50               [ 2] 2904 	negw x 
      0010CD 1F 05            [ 2] 2905 1$:	ldw (DIVISR,sp),x
                                   2906 ; check dividend sign 	 
      0010CF 1E 07            [ 2] 2907     ldw x,(DIVIDND,sp)
      0010D1 9E               [ 1] 2908 	ld a,xh 
      0010D2 A5 80            [ 1] 2909 	bcp a,#0x80 
      0010D4 27 05            [ 1] 2910 	jreq 2$ 
      0010D6 03 01            [ 1] 2911 	cpl (SQUOT,sp)
      0010D8 03 02            [ 1] 2912 	cpl (SDIVD,sp)
      0010DA 50               [ 2] 2913 	negw x 
      0010DB 16 05            [ 2] 2914 2$:	ldw y,(DIVISR,sp)
      0010DD 65               [ 2] 2915 	divw x,y
      0010DE 90 CF 00 08      [ 2] 2916 	ldw acc16,y 
                                   2917 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      0010E2 0D 02            [ 1] 2918 	tnz (SDIVD,sp)
      0010E4 27 0B            [ 1] 2919 	jreq 7$
      0010E6 90 5D            [ 2] 2920 	tnzw y 
      0010E8 27 07            [ 1] 2921 	jreq 7$
      0010EA 5C               [ 1] 2922 	incw x
      0010EB 16 05            [ 2] 2923 	ldw y,(DIVISR,sp)
      0010ED 72 B2 00 08      [ 2] 2924 	subw y,acc16
      0010F1 0D 01            [ 1] 2925 7$: tnz (SQUOT,sp)
      0010F3 27 01            [ 1] 2926 	jreq 9$ 	 
      0010F5 50               [ 2] 2927 8$:	negw x 
      0010F6                       2928 9$: 
      0010F6                       2929 	_drop VSIZE 
      0010F6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010F8 81               [ 4] 2930 	ret 
                                   2931 
                                   2932 
                                   2933 ;----------------------------------
                                   2934 ;  remainder resulting from euclidian 
                                   2935 ;  division of n2/n1 
                                   2936 ; input:
                                   2937 ;   N1 		cstack 
                                   2938 ;   N2      cstack
                                   2939 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2940 ;   X       N2%N1 
                                   2941 ;----------------------------------
                           000003  2942 	N1=3
                           000005  2943 	N2=5
                           000004  2944 	VSIZE=4
      0010F9                       2945 modulo:
      0010F9 1E 03            [ 2] 2946 	Ldw x,(N1,sp)
      0010FB 16 05            [ 2] 2947 	ldw y,(N2,sp)
      0010FD                       2948 	_vars VSIZE 
      0010FD 52 04            [ 2]    1     sub sp,#VSIZE 
      0010FF 1F 01            [ 2] 2949 	ldw (1,sp),x 
      001101 17 03            [ 2] 2950 	ldw (3,sp),y 
      001103 CD 10 B5         [ 4] 2951 	call divide 
      001106 93               [ 1] 2952 	ldw x,y
      001107                       2953 	_drop VSIZE 
      001107 5B 04            [ 2]    1     addw sp,#VSIZE 
      001109 81               [ 4] 2954 	ret 
                                   2955 
                                   2956 
                                   2957 ;----------------------------------
                                   2958 ; search in kword_dict command name
                                   2959 ;  from its execution address 
                                   2960 ; input:
                                   2961 ;   X       	execution address 
                                   2962 ; output:
                                   2963 ;   X 			cstr*  | 0 
                                   2964 ;--------------------------------
                           000001  2965 	XADR=1 
                           000003  2966 	LINK=3 
                           000004  2967 	VSIZE=4
      00110A                       2968 cmd_name:
      00110A                       2969 	_vars VSIZE 
      00110A 52 04            [ 2]    1     sub sp,#VSIZE 
      00110C 72 5F 00 08      [ 1] 2970 	clr acc16 
      001110 1F 01            [ 2] 2971 	ldw (XADR,sp),x  
      001112 AE 21 3A         [ 2] 2972 	ldw x,#kword_dict	
      001115 1F 03            [ 2] 2973 1$:	ldw (LINK,sp),x
      001117 E6 02            [ 1] 2974 	ld a,(2,x)
      001119 A4 0F            [ 1] 2975 	and a,#15 
      00111B C7 00 09         [ 1] 2976 	ld acc8,a 
      00111E 1C 00 03         [ 2] 2977 	addw x,#3
      001121 72 BB 00 08      [ 2] 2978 	addw x,acc16
      001125 FE               [ 2] 2979 	ldw x,(x) ; execution address 
      001126 13 01            [ 2] 2980 	cpw x,(XADR,sp)
      001128 27 0A            [ 1] 2981 	jreq 2$
      00112A 1E 03            [ 2] 2982 	ldw x,(LINK,sp)
      00112C FE               [ 2] 2983 	ldw x,(x) 
      00112D 1D 00 02         [ 2] 2984 	subw x,#2  
      001130 26 E3            [ 1] 2985 	jrne 1$
      001132 20 05            [ 2] 2986 	jra 9$
      001134 1E 03            [ 2] 2987 2$: ldw x,(LINK,sp)
      001136 1C 00 02         [ 2] 2988 	addw x,#2 	
      001139                       2989 9$:	_drop VSIZE
      001139 5B 04            [ 2]    1     addw sp,#VSIZE 
      00113B 81               [ 4] 2990 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   2991 
                                   2992 
                                   2993 ;---------------------------------
                                   2994 ; input:
                                   2995 ;	X 		dictionary entry point 
                                   2996 ;  pad		.asciz name to search 
                                   2997 ; output:
                                   2998 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2999 ;  X		execution address | 0 
                                   3000 ;---------------------------------
                           000001  3001 	NLEN=1 ; cmd length 
                           000002  3002 	YSAVE=2
                           000003  3003 	VSIZE=3 
      00113C                       3004 search_dict:
      00113C                       3005 	_vars VSIZE 
      00113C 52 03            [ 2]    1     sub sp,#VSIZE 
      00113E 90 93            [ 1] 3006 	ldw y,x 
      001140                       3007 search_next:	
      001140 90 F6            [ 1] 3008 	ld a,(y)
      001142 A4 0F            [ 1] 3009 	and a,#0xf 
      001144 6B 01            [ 1] 3010 	ld (NLEN,sp),a  
      001146 AE 17 18         [ 2] 3011 	ldw x,#pad 
      001149 17 02            [ 2] 3012 	ldw (YSAVE,sp),y
      00114B 90 5C            [ 1] 3013 	incw y  
      00114D                       3014 cp_loop:
      00114D F6               [ 1] 3015 	ld a,(x)
      00114E 27 1E            [ 1] 3016 	jreq str_match 
      001150 0D 01            [ 1] 3017 	tnz (NLEN,sp)
      001152 27 0B            [ 1] 3018 	jreq no_match  
      001154 90 F1            [ 1] 3019 	cp a,(y)
      001156 26 07            [ 1] 3020 	jrne no_match 
      001158 90 5C            [ 1] 3021 	incw y 
      00115A 5C               [ 1] 3022 	incw x
      00115B 0A 01            [ 1] 3023 	dec (NLEN,sp)
      00115D 20 EE            [ 2] 3024 	jra cp_loop 
      00115F                       3025 no_match:
      00115F 16 02            [ 2] 3026 	ldw y,(YSAVE,sp) 
      001161 72 A2 00 02      [ 2] 3027 	subw y,#2 ; move Y to link field
      001165 4B 00            [ 1] 3028 	push #TK_NONE 
      001167 90 FE            [ 2] 3029 	ldw y,(y) ; next word link 
      001169 84               [ 1] 3030 	pop a ; TK_NONE 
      00116A 27 21            [ 1] 3031 	jreq search_exit  ; not found  
                                   3032 ;try next 
      00116C 20 D2            [ 2] 3033 	jra search_next
      00116E                       3034 str_match:
      00116E 16 02            [ 2] 3035 	ldw y,(YSAVE,sp)
      001170 90 F6            [ 1] 3036 	ld a,(y)
      001172 6B 01            [ 1] 3037 	ld (NLEN,sp),a ; needed to test keyword type  
      001174 A4 0F            [ 1] 3038 	and a,#0xf 
                                   3039 ; move y to procedure address field 	
      001176 4C               [ 1] 3040 	inc a 
      001177 C7 00 09         [ 1] 3041 	ld acc8,a 
      00117A 72 5F 00 08      [ 1] 3042 	clr acc16 
      00117E 72 B9 00 08      [ 2] 3043 	addw y,acc16 
      001182 90 FE            [ 2] 3044 	ldw y,(y) ; routine entry point 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3045 ;determine keyword type bits 7:6 
      001184 7B 01            [ 1] 3046 	ld a,(NLEN,sp)
      001186 4E               [ 1] 3047 	swap a 
      001187 A4 0C            [ 1] 3048 	and a,#0xc
      001189 44               [ 1] 3049 	srl a
      00118A 44               [ 1] 3050 	srl a 
      00118B AB 06            [ 1] 3051 	add a,#6
      00118D                       3052 search_exit: 
      00118D 93               [ 1] 3053 	ldw x,y ; x=routine address 
      00118E                       3054 	_drop VSIZE 	 
      00118E 5B 03            [ 2]    1     addw sp,#VSIZE 
      001190 81               [ 4] 3055 	ret 
                                   3056 
                                   3057 ;---------------------
                                   3058 ; check if next token
                                   3059 ;  is of expected type 
                                   3060 ; input:
                                   3061 ;   A 		 expected token attribute
                                   3062 ;  ouput:
                                   3063 ;   none     if fail call tb_error 
                                   3064 ;--------------------
      001191                       3065 expect:
      001191 88               [ 1] 3066 	push a 
      001192 CD 07 DF         [ 4] 3067 	call next_token 
      001195 11 01            [ 1] 3068 	cp a,(1,sp)
      001197 27 03            [ 1] 3069 	jreq 1$
      001199 CC 06 FF         [ 2] 3070 	jp syntax_error
      00119C 84               [ 1] 3071 1$: pop a 
      00119D 81               [ 4] 3072 	ret 
                                   3073 
                                   3074 
                                   3075 ;-------------------------------
                                   3076 ; parse embedded BASIC routines 
                                   3077 ; arguments list.
                                   3078 ; arg_list::=  rel[','rel]*
                                   3079 ; all arguments are of integer type
                                   3080 ; input:
                                   3081 ;   none
                                   3082 ; output:
                                   3083 ;   A 			number of arguments pushed on dstack  
                                   3084 ;--------------------------------
                           000001  3085 	ARG_CNT=1 
      00119E                       3086 arg_list:
      00119E 4B 00            [ 1] 3087 	push #0  
      0011A0 CD 12 DD         [ 4] 3088 1$: call relation
      0011A3 A1 00            [ 1] 3089 	cp a,#TK_NONE 
      0011A5 27 19            [ 1] 3090 	jreq 5$
      0011A7 A1 04            [ 1] 3091 	cp a,#TK_INTGR
      0011A9 26 12            [ 1] 3092 	jrne 4$
      0011AB CD 0F 71         [ 4] 3093 3$: call dpush 
      0011AE 0C 01            [ 1] 3094     inc (ARG_CNT,sp)
      0011B0 CD 07 DF         [ 4] 3095 	call next_token 
      0011B3 A1 00            [ 1] 3096 	cp a,#TK_NONE 
      0011B5 27 09            [ 1] 3097 	jreq 5$ 
      0011B7 A1 0D            [ 1] 3098 	cp a,#TK_COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011B9 26 02            [ 1] 3099 	jrne 4$
      0011BB 20 E3            [ 2] 3100 	jra 1$ 
      0011BD CD 0F 6B         [ 4] 3101 4$:	call unget_token 
      0011C0 84               [ 1] 3102 5$:	pop a 
      0011C1 81               [ 4] 3103 	ret 
                                   3104 
                                   3105 
                                   3106 
                                   3107 ;--------------------------------
                                   3108 ;   BASIC commnands 
                                   3109 ;--------------------------------
                                   3110 
                                   3111 ;--------------------------------
                                   3112 ;  arithmetic and relational 
                                   3113 ;  routines
                                   3114 ;  operators precedence
                                   3115 ;  highest to lowest
                                   3116 ;  operators on same row have 
                                   3117 ;  same precedence and are executed
                                   3118 ;  from left to right.
                                   3119 ;	'*','/','%'
                                   3120 ;   '-','+'
                                   3121 ;   '=','>','<','>=','<=','<>','><'
                                   3122 ;   '<>' and '><' are equivalent for not equal.
                                   3123 ;--------------------------------
                                   3124 
                                   3125 ;---------------------
                                   3126 ; return array element
                                   3127 ; address from @(expr)
                                   3128 ; input:
                                   3129 ;   A 		TK_ARRAY
                                   3130 ; output:
                                   3131 ;   A 		TK_INTGR
                                   3132 ;	X 		element address 
                                   3133 ;----------------------
      0011C2                       3134 get_array_element:
                                   3135 ;	call ddrop 
      0011C2 A6 0B            [ 1] 3136 	ld a,#TK_LPAREN 
      0011C4 CD 11 91         [ 4] 3137 	call expect
      0011C7 CD 12 DD         [ 4] 3138 	call relation 
      0011CA A1 04            [ 1] 3139 	cp a,#TK_INTGR 
      0011CC 27 03            [ 1] 3140 	jreq 1$
      0011CE CC 06 FF         [ 2] 3141 	jp syntax_error
      0011D1 89               [ 2] 3142 1$: pushw x 
      0011D2 A6 0C            [ 1] 3143 	ld a,#TK_RPAREN 
      0011D4 CD 11 91         [ 4] 3144 	call expect
                                   3145 	; check for bounds 
      0011D7 85               [ 2] 3146 	popw x   
      0011D8 C3 00 1D         [ 2] 3147 	cpw x,array_size 
      0011DB 23 05            [ 2] 3148 	jrule 3$
                                   3149 ; bounds {1..array_size}	
      0011DD A6 0A            [ 1] 3150 2$: ld a,#ERR_BAD_VALUE 
      0011DF CC 07 01         [ 2] 3151 	jp tb_error 
      0011E2 5D               [ 2] 3152 3$: tnzw  x
      0011E3 27 F8            [ 1] 3153 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011E5 58               [ 2] 3154 	sllw x 
      0011E6 89               [ 2] 3155 	pushw x 
      0011E7 AE 16 C8         [ 2] 3156 	ldw x,#tib
      0011EA 72 F0 01         [ 2] 3157 	subw x,(1,sp)
      0011ED                       3158 	_drop 2   
      0011ED 5B 02            [ 2]    1     addw sp,#2 
      0011EF A6 04            [ 1] 3159 	ld a,#TK_INTGR
      0011F1 81               [ 4] 3160 	ret 
                                   3161 
                                   3162 ;***********************************
                                   3163 ;   expression parse,execute 
                                   3164 ;***********************************
                                   3165 ;-----------------------------------
                                   3166 ; factor ::= ['+'|'-'|e] var | @ |
                                   3167 ;			 integer | function |
                                   3168 ;			 '('relation')' 
                                   3169 ; output:
                                   3170 ;   A    token attribute 
                                   3171 ;   X 	 integer
                                   3172 ; ---------------------------------
                           000001  3173 	NEG=1
                           000001  3174 	VSIZE=1
      0011F2                       3175 factor:
      0011F2                       3176 	_vars VSIZE 
      0011F2 52 01            [ 2]    1     sub sp,#VSIZE 
      0011F4 CD 07 DF         [ 4] 3177 	call next_token
      0011F7 A1 02            [ 1] 3178 	cp a,#CMD_END 
      0011F9 2B 4E            [ 1] 3179 	jrmi 20$
      0011FB 6B 01            [ 1] 3180 1$:	ld (NEG,sp),a 
      0011FD A4 30            [ 1] 3181 	and a,#TK_GRP_MASK
      0011FF A1 10            [ 1] 3182 	cp a,#TK_GRP_ADD 
      001201 27 04            [ 1] 3183 	jreq 2$
      001203 7B 01            [ 1] 3184 	ld a,(NEG,sp)
      001205 20 03            [ 2] 3185 	jra 4$  
      001207                       3186 2$:	
      001207 CD 07 DF         [ 4] 3187 	call next_token 
      00120A                       3188 4$:	
      00120A A1 07            [ 1] 3189 	cp a,#TK_IFUNC 
      00120C 26 03            [ 1] 3190 	jrne 5$ 
      00120E FD               [ 4] 3191 	call (x) 
      00120F 20 2F            [ 2] 3192 	jra 18$ 
      001211                       3193 5$:
      001211 A1 04            [ 1] 3194 	cp a,#TK_INTGR
      001213 26 02            [ 1] 3195 	jrne 6$
      001215 20 29            [ 2] 3196 	jra 18$
      001217                       3197 6$:
      001217 A1 02            [ 1] 3198 	cp a,#TK_ARRAY
      001219 26 06            [ 1] 3199 	jrne 10$
      00121B CD 11 C2         [ 4] 3200 	call get_array_element
      00121E FE               [ 2] 3201 	ldw x,(x)
      00121F 20 1F            [ 2] 3202 	jra 18$ 
      001221                       3203 10$:
      001221 A1 05            [ 1] 3204 	cp a,#TK_VAR 
      001223 26 03            [ 1] 3205 	jrne 11$
      001225 FE               [ 2] 3206 	ldw x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001226 20 18            [ 2] 3207 	jra 18$
      001228                       3208 11$: 
      001228 A1 09            [ 1] 3209 	cp a,#TK_CONST 
      00122A 27 14            [ 1] 3210 	jreq 18$
      00122C                       3211 12$:			
      00122C A1 0B            [ 1] 3212 	cp a,#TK_LPAREN
      00122E 26 0A            [ 1] 3213 	jrne 16$
      001230 CD 12 DD         [ 4] 3214 	call relation
      001233 A6 0C            [ 1] 3215 	ld a,#TK_RPAREN 
      001235 CD 11 91         [ 4] 3216 	call expect
      001238 20 06            [ 2] 3217 	jra 18$	
      00123A                       3218 16$:
      00123A CD 0F 6B         [ 4] 3219 	call unget_token
      00123D 4F               [ 1] 3220 	clr a 
      00123E 20 09            [ 2] 3221 	jra 20$ 
      001240                       3222 18$: 
      001240 A6 11            [ 1] 3223 	ld a,#TK_MINUS 
      001242 11 01            [ 1] 3224 	cp a,(NEG,sp)
      001244 26 01            [ 1] 3225 	jrne 19$
      001246 50               [ 2] 3226 	negw x
      001247                       3227 19$:
      001247 A6 04            [ 1] 3228 	ld a,#TK_INTGR
      001249                       3229 20$:
      001249                       3230 	_drop VSIZE
      001249 5B 01            [ 2]    1     addw sp,#VSIZE 
      00124B 81               [ 4] 3231 	ret
                                   3232 
                                   3233 ;-----------------------------------
                                   3234 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3235 ; output:
                                   3236 ;   A    	token attribute 
                                   3237 ;	X		integer
                                   3238 ;-----------------------------------
                           000001  3239 	N1=1
                           000003  3240 	N2=3
                           000005  3241 	MULOP=5
                           000005  3242 	VSIZE=5
      00124C                       3243 term:
      00124C                       3244 	_vars VSIZE
      00124C 52 05            [ 2]    1     sub sp,#VSIZE 
      00124E CD 11 F2         [ 4] 3245 	call factor
      001251 A1 02            [ 1] 3246 	cp a,#CMD_END
      001253 2B 41            [ 1] 3247 	jrmi term_exit
      001255                       3248 term01:	 ; check for  operator 
      001255 1F 03            [ 2] 3249 	ldw (N2,sp),x  ; save first factor 
      001257 CD 07 DF         [ 4] 3250 	call next_token
      00125A A1 02            [ 1] 3251 	cp a,#2
      00125C 2B 34            [ 1] 3252 	jrmi 9$
      00125E 6B 05            [ 1] 3253 0$:	ld (MULOP,sp),a
      001260 A4 30            [ 1] 3254 	and a,#TK_GRP_MASK
      001262 A1 20            [ 1] 3255 	cp a,#TK_GRP_MULT
      001264 27 07            [ 1] 3256 	jreq 1$
      001266 7B 05            [ 1] 3257 	ld a,(MULOP,sp) 
      001268 CD 0F 6B         [ 4] 3258 	call unget_token 
      00126B 20 25            [ 2] 3259 	jra 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00126D                       3260 1$:	; got *|/|%
      00126D CD 11 F2         [ 4] 3261 	call factor
      001270 A1 04            [ 1] 3262 	cp a,#TK_INTGR
      001272 27 03            [ 1] 3263 	jreq 2$ 
      001274 CC 06 FF         [ 2] 3264 	jp syntax_error
      001277 1F 01            [ 2] 3265 2$:	ldw (N1,sp),x  
      001279 7B 05            [ 1] 3266 	ld a,(MULOP,sp) 
      00127B A1 20            [ 1] 3267 	cp a,#TK_MULT 
      00127D 26 05            [ 1] 3268 	jrne 3$
      00127F CD 10 6D         [ 4] 3269 	call multiply 
      001282 20 D1            [ 2] 3270 	jra term01
      001284 A1 21            [ 1] 3271 3$: cp a,#TK_DIV 
      001286 26 05            [ 1] 3272 	jrne 4$ 
      001288 CD 10 B5         [ 4] 3273 	call divide 
      00128B 20 C8            [ 2] 3274 	jra term01 
      00128D CD 10 F9         [ 4] 3275 4$: call modulo
      001290 20 C3            [ 2] 3276 	jra term01 
      001292 1E 03            [ 2] 3277 9$: ldw x,(N2,sp)  
      001294 A6 04            [ 1] 3278 	ld a,#TK_INTGR 	
      001296                       3279 term_exit:
      001296                       3280 	_drop VSIZE 
      001296 5B 05            [ 2]    1     addw sp,#VSIZE 
      001298 81               [ 4] 3281 	ret 
                                   3282 
                                   3283 ;-------------------------------
                                   3284 ;  expr ::= term [['+'|'-'] term]*
                                   3285 ;  result range {-32768..32767}
                                   3286 ;  output:
                                   3287 ;   A    token attribute 
                                   3288 ;   X	 integer   
                                   3289 ;-------------------------------
                           000001  3290 	N1=1 
                           000003  3291 	N2=3
                           000005  3292 	OP=5 
                           000005  3293 	VSIZE=5 
      001299                       3294 expression:
      001299                       3295 	_vars VSIZE 
      001299 52 05            [ 2]    1     sub sp,#VSIZE 
      00129B CD 12 4C         [ 4] 3296 	call term
      00129E A1 02            [ 1] 3297 	cp a,#CMD_END 
      0012A0 2B 38            [ 1] 3298 	jrmi expr_exit 
      0012A2 1F 03            [ 2] 3299 0$:	ldw (N2,sp),x 
      0012A4 CD 07 DF         [ 4] 3300 	call next_token
      0012A7 A1 02            [ 1] 3301 	cp a,#2
      0012A9 2B 2B            [ 1] 3302 	jrmi 9$ 
      0012AB 6B 05            [ 1] 3303 1$:	ld (OP,sp),a  
      0012AD A4 30            [ 1] 3304 	and a,#TK_GRP_MASK
      0012AF A1 10            [ 1] 3305 	cp a,#TK_GRP_ADD 
      0012B1 27 07            [ 1] 3306 	jreq 2$ 
      0012B3 7B 05            [ 1] 3307 	ld a,(OP,sp)
      0012B5 CD 0F 6B         [ 4] 3308 	call unget_token
      0012B8 20 1C            [ 2] 3309 	jra 9$
      0012BA                       3310 2$: 
      0012BA CD 12 4C         [ 4] 3311 	call term
      0012BD A1 04            [ 1] 3312 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012BF 27 03            [ 1] 3313 	jreq 3$
      0012C1 CC 06 FF         [ 2] 3314 	jp syntax_error
      0012C4 1F 01            [ 2] 3315 3$:	ldw (N1,sp),x 
      0012C6 7B 05            [ 1] 3316 	ld a,(OP,sp)
      0012C8 A1 10            [ 1] 3317 	cp a,#TK_PLUS 
      0012CA 26 05            [ 1] 3318 	jrne 4$
      0012CC CD 10 5F         [ 4] 3319 	call add 
      0012CF 20 D1            [ 2] 3320 	jra 0$ 
      0012D1 CD 10 67         [ 4] 3321 4$:	call substract
      0012D4 20 CC            [ 2] 3322 	jra 0$
      0012D6 1E 03            [ 2] 3323 9$: ldw x,(N2,sp)
      0012D8 A6 04            [ 1] 3324 	ld a,#TK_INTGR	
      0012DA                       3325 expr_exit:
      0012DA                       3326 	_drop VSIZE 
      0012DA 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012DC 81               [ 4] 3327 	ret 
                                   3328 
                                   3329 ;---------------------------------------------
                                   3330 ; rel ::= expr rel_op expr
                                   3331 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3332 ;  relation return 1 | 0  for true | false 
                                   3333 ;  output:
                                   3334 ;    A 		token attribute  
                                   3335 ;	 X		1|0
                                   3336 ;---------------------------------------------
                           000001  3337 	N1=1
                           000003  3338 	N2=3
                           000005  3339 	RELOP=5
                           000005  3340 	VSIZE=5 
      0012DD                       3341 relation: 
      0012DD                       3342 	_vars VSIZE
      0012DD 52 05            [ 2]    1     sub sp,#VSIZE 
      0012DF CD 12 99         [ 4] 3343 	call expression
      0012E2 A1 02            [ 1] 3344 	cp a,#CMD_END  
      0012E4 2B 4B            [ 1] 3345 	jrmi rel_exit 
                                   3346 	; expect rel_op or leave 
      0012E6 1F 03            [ 2] 3347 	ldw (N2,sp),x 
      0012E8 CD 07 DF         [ 4] 3348 	call next_token 
      0012EB A1 02            [ 1] 3349 	cp a,#2
      0012ED 2B 3E            [ 1] 3350 	jrmi 9$
      0012EF                       3351 1$:	
      0012EF 6B 05            [ 1] 3352 	ld (RELOP,sp),a 
      0012F1 A4 30            [ 1] 3353 	and a,#TK_GRP_MASK
      0012F3 A1 30            [ 1] 3354 	cp a,#TK_GRP_RELOP 
      0012F5 27 07            [ 1] 3355 	jreq 2$
      0012F7 7B 05            [ 1] 3356 	ld a,(RELOP,sp)
      0012F9 CD 0F 6B         [ 4] 3357 	call unget_token  
      0012FC 20 2F            [ 2] 3358 	jra 9$
      0012FE                       3359 2$:	; expect another expression or error 
      0012FE CD 12 99         [ 4] 3360 	call expression
      001301 A1 04            [ 1] 3361 	cp a,#TK_INTGR 
      001303 27 03            [ 1] 3362 	jreq 3$
      001305 CC 06 FF         [ 2] 3363 	jp syntax_error 
      001308 1F 01            [ 2] 3364 3$:	ldw (N1,sp),x 
      00130A CD 10 67         [ 4] 3365 	call substract
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00130D 26 06            [ 1] 3366 	jrne 4$
      00130F 35 02 00 09      [ 1] 3367 	mov acc8,#2 ; n1==n2
      001313 20 0C            [ 2] 3368 	jra 6$ 
      001315                       3369 4$: 
      001315 2C 06            [ 1] 3370 	jrsgt 5$  
      001317 35 04 00 09      [ 1] 3371 	mov acc8,#4 ; n1<2 
      00131B 20 04            [ 2] 3372 	jra 6$
      00131D                       3373 5$:
      00131D 35 01 00 09      [ 1] 3374 	mov acc8,#1 ; n1>n2 
      001321                       3375 6$:
      001321 5F               [ 1] 3376 	clrw x 
      001322 C6 00 09         [ 1] 3377 	ld a, acc8  
      001325 14 05            [ 1] 3378 	and a,(RELOP,sp)
      001327 4D               [ 1] 3379 	tnz a 
      001328 27 05            [ 1] 3380 	jreq 10$
      00132A 5C               [ 1] 3381 	incw x 
      00132B                       3382 7$:	 
      00132B 20 02            [ 2] 3383 	jra 10$  	
      00132D 1E 03            [ 2] 3384 9$: ldw x,(N2,sp)
      00132F                       3385 10$:
      00132F A6 04            [ 1] 3386 	ld a,#TK_INTGR
      001331                       3387 rel_exit: 	 
      001331                       3388 	_drop VSIZE
      001331 5B 05            [ 2]    1     addw sp,#VSIZE 
      001333 81               [ 4] 3389 	ret 
                                   3390 
                                   3391 ;--------------------------------
                                   3392 ; BASIC: SHOW 
                                   3393 ;  show content of dstack,cstack
                                   3394 ;--------------------------------
      001334                       3395 show:
      001334 C6 00 06         [ 1] 3396 	ld a,base 
      001337 88               [ 1] 3397 	push a 
      001338 CD 0F FF         [ 4] 3398 	call dots
      00133B CD 10 32         [ 4] 3399 	call dotr 
      00133E 84               [ 1] 3400 	pop a 
      00133F C7 00 06         [ 1] 3401 	ld base,a 
      001342 4F               [ 1] 3402 	clr a 
      001343 81               [ 4] 3403 	ret
                                   3404 
                                   3405 ;--------------------------------------------
                                   3406 ; BASIC: HEX 
                                   3407 ; select hexadecimal base for integer print
                                   3408 ;---------------------------------------------
      001344                       3409 hex_base:
      001344 35 10 00 06      [ 1] 3410 	mov base,#16 
      001348 81               [ 4] 3411 	ret 
                                   3412 
                                   3413 ;--------------------------------------------
                                   3414 ; BASIC: DEC 
                                   3415 ; select decimal base for integer print
                                   3416 ;---------------------------------------------
      001349                       3417 dec_base:
      001349 35 0A 00 06      [ 1] 3418 	mov base,#10
      00134D 81               [ 4] 3419 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3420 
                                   3421 ;------------------------
                                   3422 ; BASIC: SIZE 
                                   3423 ; return free size in text area
                                   3424 ; output:
                                   3425 ;   A 		TK_INTGR
                                   3426 ;   X 	    size integer
                                   3427 ;--------------------------
      00134E                       3428 size:
      00134E AE 16 C8         [ 2] 3429 	ldw x,#tib 
      001351 72 B0 00 1A      [ 2] 3430 	subw x,txtend 
      001355 A6 04            [ 1] 3431 	ld a,#TK_INTGR
      001357 81               [ 4] 3432 	ret 
                                   3433 
                                   3434 
                                   3435 ;------------------------
                                   3436 ; BASIC: UBOUND  
                                   3437 ; return array variable size 
                                   3438 ; output:
                                   3439 ;   A 		TK_INTGR
                                   3440 ;   X 	    array size 
                                   3441 ;--------------------------
      001358                       3442 ubound:
      001358 AE 16 C8         [ 2] 3443 	ldw x,#tib
      00135B 72 B0 00 1A      [ 2] 3444 	subw x,txtend 
      00135F 90 CE 00 04      [ 2] 3445 	ldw y,basicptr 
      001363 90 C3 00 1A      [ 2] 3446 	cpw y,txtend 
      001367 25 0A            [ 1] 3447 	jrult 1$
      001369 3B 00 03         [ 1] 3448 	push count 
      00136C 4B 00            [ 1] 3449 	push #0 
      00136E 72 F0 01         [ 2] 3450 	subw x,(1,sp)
      001371                       3451 	_drop 2 
      001371 5B 02            [ 2]    1     addw sp,#2 
      001373 54               [ 2] 3452 1$:	srlw x 
      001374 CF 00 1D         [ 2] 3453 	ldw array_size,x
      001377 A6 04            [ 1] 3454 	ld a,#TK_INTGR
      001379 81               [ 4] 3455 	ret 
                                   3456 
                                   3457 ;-----------------------------
                                   3458 ; BASIC: LET var=expr 
                                   3459 ; variable assignement 
                                   3460 ; output:
                                   3461 ;   A 		TK_NONE 
                                   3462 ;-----------------------------
      00137A                       3463 let:
      00137A CD 07 DF         [ 4] 3464 	call next_token 
      00137D A1 05            [ 1] 3465 	cp a,#TK_VAR 
      00137F 27 03            [ 1] 3466 	jreq let02
      001381 CC 06 FF         [ 2] 3467 	jp syntax_error
      001384                       3468 let02:
      001384 CD 0F 71         [ 4] 3469 	call dpush 
      001387 CD 07 DF         [ 4] 3470 	call next_token 
      00138A A1 32            [ 1] 3471 	cp a,#TK_EQUAL
      00138C 27 03            [ 1] 3472 	jreq 1$
      00138E CC 06 FF         [ 2] 3473 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001391                       3474 1$:	
      001391 CD 12 DD         [ 4] 3475 	call relation   
      001394 A1 04            [ 1] 3476 	cp a,#TK_INTGR 
      001396 27 03            [ 1] 3477 	jreq 2$
      001398 CC 06 FF         [ 2] 3478 	jp syntax_error
      00139B                       3479 2$:	
      00139B 90 93            [ 1] 3480 	ldw y,x 
      00139D CD 0F 7E         [ 4] 3481 	call dpop  
      0013A0 FF               [ 2] 3482 	ldw (x),y   
      0013A1 81               [ 4] 3483 	ret 
                                   3484 
                                   3485 ;----------------------------
                                   3486 ; BASIC: LIST [[start][,end]]
                                   3487 ; list program lines 
                                   3488 ; form start to end 
                                   3489 ; if empty argument list then 
                                   3490 ; list all.
                                   3491 ;----------------------------
                           000001  3492 	FIRST=1
                           000003  3493 	LAST=3 
                           000005  3494 	LN_PTR=5
                           000006  3495 	VSIZE=6 
      0013A2                       3496 list:
      0013A2                       3497 	_vars VSIZE
      0013A2 52 06            [ 2]    1     sub sp,#VSIZE 
      0013A4 CE 00 18         [ 2] 3498 	ldw x,txtbgn 
      0013A7 C3 00 1A         [ 2] 3499 	cpw x,txtend 
      0013AA 2B 03            [ 1] 3500 	jrmi 1$
      0013AC CC 14 22         [ 2] 3501 	jp list_exit ; nothing to list 
      0013AF 1F 05            [ 2] 3502 1$:	ldw (LN_PTR,sp),x 
      0013B1 FE               [ 2] 3503 	ldw x,(x) 
      0013B2 1F 01            [ 2] 3504 	ldw (FIRST,sp),x ; list from first line 
      0013B4 AE 7F FF         [ 2] 3505 	ldw x,#0x7fff ; biggest line number 
      0013B7 1F 03            [ 2] 3506 	ldw (LAST,sp),x 
      0013B9 CD 11 9E         [ 4] 3507 	call arg_list
      0013BC 4D               [ 1] 3508 	tnz a
      0013BD 27 3F            [ 1] 3509 	jreq list_start 
      0013BF A1 02            [ 1] 3510 	cp a,#2 
      0013C1 27 07            [ 1] 3511 	jreq 4$
      0013C3 A1 01            [ 1] 3512 	cp a,#1 
      0013C5 27 06            [ 1] 3513 	jreq first_line 
      0013C7 CC 06 FF         [ 2] 3514 	jp syntax_error 
      0013CA CD 0F 8B         [ 4] 3515 4$:	call dswap
      0013CD                       3516 first_line:
      0013CD CD 0F 7E         [ 4] 3517 	call dpop 
      0013D0 1F 01            [ 2] 3518 	ldw (FIRST,sp),x 
      0013D2 A1 01            [ 1] 3519 	cp a,#1 
      0013D4 27 05            [ 1] 3520 	jreq lines_skip 	
      0013D6                       3521 last_line:
      0013D6 CD 0F 7E         [ 4] 3522 	call dpop 
      0013D9 1F 03            [ 2] 3523 	ldw (LAST,sp),x 
      0013DB                       3524 lines_skip:
      0013DB CE 00 18         [ 2] 3525 	ldw x,txtbgn
      0013DE 1F 05            [ 2] 3526 2$:	ldw (LN_PTR,sp),x 
      0013E0 C3 00 1A         [ 2] 3527 	cpw x,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013E3 2A 3D            [ 1] 3528 	jrpl list_exit 
      0013E5 FE               [ 2] 3529 	ldw x,(x) ;line# 
      0013E6 13 01            [ 2] 3530 	cpw x,(FIRST,sp)
      0013E8 2A 14            [ 1] 3531 	jrpl list_start 
      0013EA 1E 05            [ 2] 3532 	ldw x,(LN_PTR,sp) 
      0013EC 1C 00 02         [ 2] 3533 	addw x,#2 
      0013EF F6               [ 1] 3534 	ld a,(x)
      0013F0 5C               [ 1] 3535 	incw x 
      0013F1 C7 00 09         [ 1] 3536 	ld acc8,a 
      0013F4 72 5F 00 08      [ 1] 3537 	clr acc16 
      0013F8 72 BB 00 08      [ 2] 3538 	addw x,acc16
      0013FC 20 E0            [ 2] 3539 	jra 2$ 
                                   3540 ; print loop
      0013FE                       3541 list_start:
      0013FE 1E 05            [ 2] 3542 	ldw x,(LN_PTR,sp)
      001400                       3543 3$:	
      001400 CD 14 75         [ 4] 3544 	call prt_basic_line
      001403 1E 05            [ 2] 3545 	ldw x,(LN_PTR,sp)
      001405 E6 02            [ 1] 3546 	ld a,(2,x)
      001407 C7 00 09         [ 1] 3547 	ld acc8,a 
      00140A 72 5F 00 08      [ 1] 3548 	clr acc16 
      00140E 72 BB 00 08      [ 2] 3549 	addw x,acc16
      001412 C3 00 1A         [ 2] 3550 	cpw x,txtend 
      001415 2A 0B            [ 1] 3551 	jrpl list_exit
      001417 1F 05            [ 2] 3552 	ldw (LN_PTR,sp),x
      001419 FE               [ 2] 3553 	ldw x,(x)
      00141A 13 03            [ 2] 3554 	cpw x,(LAST,sp)  
      00141C 2C 04            [ 1] 3555 	jrsgt list_exit 
      00141E 1E 05            [ 2] 3556 	ldw x,(LN_PTR,sp)
      001420 20 DE            [ 2] 3557 	jra 3$
      001422                       3558 list_exit:
      001422                       3559 	_drop VSIZE 
      001422 5B 06            [ 2]    1     addw sp,#VSIZE 
      001424 81               [ 4] 3560 	ret
                                   3561 
                                   3562 ;-------------------------
                                   3563 ; print counted string 
                                   3564 ; input:
                                   3565 ;   X 		address of string
                                   3566 ;--------------------------
      001425                       3567 prt_cmd_name:
      001425 F6               [ 1] 3568 	ld a,(x)
      001426 5C               [ 1] 3569 	incw x
      001427 A4 0F            [ 1] 3570 	and a,#15  
      001429 88               [ 1] 3571 	push a 
      00142A 0D 01            [ 1] 3572 1$: tnz (1,sp) 
      00142C 27 09            [ 1] 3573 	jreq 9$
      00142E F6               [ 1] 3574 	ld a,(x)
      00142F CD 01 9E         [ 4] 3575 	call putc 
      001432 5C               [ 1] 3576 	incw x
      001433 0A 01            [ 1] 3577 	dec (1,sp)	 
      001435 20 F3            [ 2] 3578 	jra 1$
      001437 84               [ 1] 3579 9$: pop a 
      001438 81               [ 4] 3580 	ret	
                                   3581 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3582 ;--------------------------
                                   3583 ; print TK_QSTR
                                   3584 ; converting control character
                                   3585 ; to backslash sequence
                                   3586 ; input:
                                   3587 ;   X        char *
                                   3588 ;-----------------------------
      001439                       3589 prt_quote:
      001439 A6 22            [ 1] 3590 	ld a,#'"
      00143B CD 01 9E         [ 4] 3591 	call putc 
      00143E F6               [ 1] 3592 1$:	ld a,(x)
      00143F 27 2D            [ 1] 3593 	jreq 9$
      001441 5C               [ 1] 3594 	incw x 
      001442 A1 20            [ 1] 3595 	cp a,#SPACE 
      001444 25 0C            [ 1] 3596 	jrult 3$
      001446 CD 01 9E         [ 4] 3597 	call putc
      001449 A1 5C            [ 1] 3598 	cp a,#'\ 
      00144B 26 F1            [ 1] 3599 	jrne 1$ 
      00144D                       3600 2$:
      00144D CD 01 9E         [ 4] 3601 	call putc 
      001450 20 EC            [ 2] 3602 	jra 1$
      001452 88               [ 1] 3603 3$: push a 
      001453 A6 5C            [ 1] 3604 	ld a,#'\
      001455 CD 01 9E         [ 4] 3605 	call putc 
      001458 84               [ 1] 3606 	pop a 
      001459 A0 07            [ 1] 3607 	sub a,#7
      00145B C7 00 09         [ 1] 3608 	ld acc8,a 
      00145E 72 5F 00 08      [ 1] 3609 	clr acc16
      001462 90 AE 0C 3A      [ 2] 3610 	ldw y,#escaped 
      001466 72 B9 00 08      [ 2] 3611 	addw y,acc16 
      00146A 90 F6            [ 1] 3612 	ld a,(y)
      00146C 20 DF            [ 2] 3613 	jra 2$
      00146E A6 22            [ 1] 3614 9$: ld a,#'"
      001470 CD 01 9E         [ 4] 3615 	call putc 
      001473 5C               [ 1] 3616 	incw x 
      001474 81               [ 4] 3617 	ret
                                   3618 
                                   3619 
                                   3620 ;--------------------------
                                   3621 ; decompile line from token list 
                                   3622 ; input:
                                   3623 ;   X 		pointer at line
                                   3624 ; output:
                                   3625 ;   none 
                                   3626 ;--------------------------	
                           000001  3627 	BASE_SAV=1
                           000002  3628 	WIDTH_SAV=2
                           000003  3629 	XSAVE=3
                           000005  3630 	LLEN=5
                           000005  3631 	VSIZE=5 
      001475                       3632 prt_basic_line:
      001475                       3633 	_vars VSIZE 
      001475 52 05            [ 2]    1     sub sp,#VSIZE 
      001477 C6 00 06         [ 1] 3634 	ld a,base
      00147A 6B 01            [ 1] 3635 	ld (BASE_SAV,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00147C C6 00 20         [ 1] 3636 	ld a,tab_width 
      00147F 6B 02            [ 1] 3637 	ld (WIDTH_SAV,sp),a 
      001481 CF 00 11         [ 2] 3638 	ldw ptr16,x
      001484 FE               [ 2] 3639 	ldw x,(x)
      001485 35 0A 00 06      [ 1] 3640 	mov base,#10
      001489 35 05 00 20      [ 1] 3641 	mov tab_width,#5
      00148D CD 09 78         [ 4] 3642 	call print_int ; print line number 
      001490 A6 20            [ 1] 3643 	ld a,#SPACE 
      001492 CD 01 9E         [ 4] 3644 	call putc 
      001495 72 5F 00 20      [ 1] 3645 	clr tab_width
      001499 AE 00 02         [ 2] 3646 	ldw x,#2
      00149C 72 D6 00 11      [ 4] 3647 	ld a,([ptr16],x)
      0014A0 6B 05            [ 1] 3648 	ld (LLEN,sp),a 
      0014A2 5C               [ 1] 3649 	incw x
      0014A3 9F               [ 1] 3650 1$:	ld a,xl 
      0014A4 11 05            [ 1] 3651 	cp a,(LLEN,sp)
      0014A6 2B 03            [ 1] 3652 	jrmi 20$
      0014A8 CC 15 B2         [ 2] 3653 	jp 90$
      0014AB                       3654 20$:	 
      0014AB 72 D6 00 11      [ 4] 3655 	ld a,([ptr16],x)
      0014AF 5C               [ 1] 3656 	incw x 
      0014B0 1F 03            [ 2] 3657 	ldw (XSAVE,sp),x 
      0014B2 A1 06            [ 1] 3658 	cp a,#TK_CMD 
      0014B4 25 44            [ 1] 3659 	jrult 5$
      0014B6 A1 09            [ 1] 3660 	cp a,#TK_CONST 
      0014B8 22 2F            [ 1] 3661 	jrugt 4$
      0014BA                       3662 2$:	
      0014BA 72 DE 00 11      [ 5] 3663 	ldw x,([ptr16],x)
      0014BE A3 16 EB         [ 2] 3664 	cpw x,#rem 
      0014C1 26 14            [ 1] 3665 	jrne 3$
      0014C3 A6 27            [ 1] 3666 	ld a,#''
      0014C5 CD 01 9E         [ 4] 3667 	call putc 
      0014C8 1E 03            [ 2] 3668 	ldw x,(XSAVE,sp)
      0014CA 1C 00 02         [ 2] 3669 	addw x,#2
      0014CD 72 BB 00 11      [ 2] 3670 	addw x,ptr16  
      0014D1 CD 01 B0         [ 4] 3671 	call puts 
      0014D4 CC 15 B2         [ 2] 3672 	jp 90$ 
      0014D7 CD 11 0A         [ 4] 3673 3$:	call cmd_name
      0014DA CD 14 25         [ 4] 3674 	call prt_cmd_name
      0014DD A6 20            [ 1] 3675 	ld a,#SPACE 
      0014DF CD 01 9E         [ 4] 3676 	call putc 
      0014E2 1E 03            [ 2] 3677 	ldw x,(XSAVE,sp)
      0014E4 1C 00 02         [ 2] 3678 	addw x,#2
      0014E7 20 BA            [ 2] 3679 	jra 1$
      0014E9 A1 0A            [ 1] 3680 4$: cp a,#TK_QSTR 
      0014EB 26 0D            [ 1] 3681 	jrne 5$
      0014ED 72 BB 00 11      [ 2] 3682 	addw x,ptr16
      0014F1 CD 14 39         [ 4] 3683 	call prt_quote 
      0014F4 72 B0 00 11      [ 2] 3684 	subw x,ptr16  
      0014F8 20 A9            [ 2] 3685 	jra 1$
      0014FA A1 05            [ 1] 3686 5$:	cp a,#TK_VAR
      0014FC 26 1A            [ 1] 3687 	jrne 6$ 
      0014FE 72 DE 00 11      [ 5] 3688 	ldw x,([ptr16],x)
      001502 1D 00 21         [ 2] 3689 	subw x,#vars 
      001505 9F               [ 1] 3690 	ld a,xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001506 44               [ 1] 3691 	srl a 
      001507 AB 41            [ 1] 3692 	add a,#'A 
      001509 CD 01 9E         [ 4] 3693 	call putc 
      00150C A6 20            [ 1] 3694 	ld a,#SPACE 
      00150E CD 01 9E         [ 4] 3695 	call putc 
      001511 1E 03            [ 2] 3696 	ldw x,(XSAVE,sp)
      001513 1C 00 02         [ 2] 3697 	addw x,#2 
      001516 20 8B            [ 2] 3698 	jra 1$ 
      001518 A1 02            [ 1] 3699 6$: cp a,#TK_ARRAY 
      00151A 26 0A            [ 1] 3700 	jrne 7$
      00151C A6 40            [ 1] 3701 	ld a,#'@ 
      00151E CD 01 9E         [ 4] 3702 	call putc 
      001521 1E 03            [ 2] 3703 	ldw x,(XSAVE,sp)
      001523 CC 14 A3         [ 2] 3704 	jp 1$ 
      001526 A1 04            [ 1] 3705 7$: cp a,#TK_INTGR 
      001528 26 14            [ 1] 3706 	jrne 8$
      00152A 72 DE 00 11      [ 5] 3707 	ldw x,([ptr16],x)
      00152E CD 09 78         [ 4] 3708 	call print_int
      001531 A6 20            [ 1] 3709 	ld a,#SPACE 
      001533 CD 01 9E         [ 4] 3710 	call putc 
      001536 1E 03            [ 2] 3711 	ldw x,(XSAVE,sp)
      001538 1C 00 02         [ 2] 3712 	addw x,#2 
      00153B CC 14 A3         [ 2] 3713 	jp 1$
      00153E A1 31            [ 1] 3714 8$: cp a,#TK_GT 
      001540 2B 1A            [ 1] 3715 	jrmi 9$
      001542 A1 35            [ 1] 3716 	cp a,#TK_NE 
      001544 22 16            [ 1] 3717 	jrugt 9$
      001546 A0 31            [ 1] 3718 	sub a,#TK_GT  
      001548 48               [ 1] 3719 	sll a 
      001549 90 5F            [ 1] 3720 	clrw y 
      00154B 90 97            [ 1] 3721 	ld yl,a 
      00154D 72 A9 15 CB      [ 2] 3722 	addw y,#relop_str 
      001551 90 FE            [ 2] 3723 	ldw y,(y)
      001553 93               [ 1] 3724 	ldw x,y 
      001554 CD 01 B0         [ 4] 3725 	call puts 
      001557 1E 03            [ 2] 3726 	ldw x,(XSAVE,sp)
      001559 CC 14 A3         [ 2] 3727 	jp 1$
      00155C A1 10            [ 1] 3728 9$: cp a,#TK_PLUS 
      00155E 26 04            [ 1] 3729 	jrne 10$
      001560 A6 2B            [ 1] 3730 	ld a,#'+
      001562 20 46            [ 2] 3731 	jra 80$ 
      001564 A1 11            [ 1] 3732 10$: cp a,#TK_MINUS
      001566 26 04            [ 1] 3733 	jrne 11$
      001568 A6 2D            [ 1] 3734 	ld a,#'-
      00156A 20 3E            [ 2] 3735 	jra 80$
      00156C A1 20            [ 1] 3736 11$: cp a,#TK_MULT 
      00156E 2B 0E            [ 1] 3737 	jrmi 12$
      001570 A1 22            [ 1] 3738 	cp a,#TK_MOD 
      001572 22 0A            [ 1] 3739 	jrugt 12$
      001574 A0 20            [ 1] 3740 	sub a,#0x20
      001576 5F               [ 1] 3741 	clrw x 
      001577 97               [ 1] 3742 	ld xl,a 
      001578 1C 15 C8         [ 2] 3743 	addw x,#mul_char 
      00157B F6               [ 1] 3744 	ld a,(x)
      00157C 20 2C            [ 2] 3745 	jra 80$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00157E A1 0B            [ 1] 3746 12$: cp a,#TK_LPAREN 
      001580 2B 0E            [ 1] 3747 	jrmi 13$
      001582 A1 0E            [ 1] 3748 	cp a,#TK_SHARP 
      001584 22 0A            [ 1] 3749 	jrugt 13$
      001586 A0 0B            [ 1] 3750 	sub a,#TK_LPAREN
      001588 5F               [ 1] 3751 	clrw x 
      001589 97               [ 1] 3752 	ld xl,a 
      00158A 1C 15 C4         [ 2] 3753 	addw x,#single_char 
      00158D F6               [ 1] 3754 	ld a,(x)
      00158E 20 1A            [ 2] 3755 	jra 80$
      001590 A1 03            [ 1] 3756 13$: cp a,#TK_CHAR 
      001592 26 14            [ 1] 3757 	jrne 14$
      001594 A6 5C            [ 1] 3758 	ld a,#'\
      001596 CD 01 9E         [ 4] 3759 	call putc 
      001599 1E 03            [ 2] 3760 	ldw x,(XSAVE,sp)
      00159B 72 D6 00 11      [ 4] 3761 	ld a,([ptr16],x)
      00159F 5C               [ 1] 3762 	incw x 
      0015A0 1F 03            [ 2] 3763 	ldw (XSAVE,sp),x 
      0015A2 CD 01 9E         [ 4] 3764 	call putc 
      0015A5 CC 14 A3         [ 2] 3765 	jp 1$ 
      0015A8 A6 3A            [ 1] 3766 14$: ld a,#':
      0015AA CD 01 9E         [ 4] 3767 80$: call putc 
      0015AD 1E 03            [ 2] 3768 	ldw x,(XSAVE,sp)
      0015AF CC 14 A3         [ 2] 3769 	jp 1$ 
      0015B2                       3770 90$: 
      0015B2 A6 0D            [ 1] 3771 	ld a,#CR 
      0015B4 CD 01 9E         [ 4] 3772 	call putc
      0015B7 7B 02            [ 1] 3773 	ld a,(WIDTH_SAV,sp) 
      0015B9 C7 00 20         [ 1] 3774 	ld tab_width,a 
      0015BC 7B 01            [ 1] 3775 	ld a,(BASE_SAV,sp) 
      0015BE C7 00 06         [ 1] 3776 	ld base,a
      0015C1                       3777 	_drop VSIZE 
      0015C1 5B 05            [ 2]    1     addw sp,#VSIZE 
      0015C3 81               [ 4] 3778 	ret 	
      0015C4 28 29 2C 23           3779 single_char: .byte '(',')',',','#'
      0015C8 2A 2F 25              3780 mul_char: .byte '*','/','%'
      0015CB 15 D7 15 D9 15 DB 15  3781 relop_str: .word gt,equal,ge,lt,le,ne 
             DE 15 E0 15 E3
      0015D7 3E 00                 3782 gt: .asciz ">"
      0015D9 3D 00                 3783 equal: .asciz "="
      0015DB 3E 3D 00              3784 ge: .asciz ">="
      0015DE 3C 00                 3785 lt: .asciz "<"
      0015E0 3C 3D 00              3786 le: .asciz "<="
      0015E3 3C 3E 00              3787 ne:  .asciz "<>"
                                   3788 
                                   3789 
                                   3790 ;---------------------------------
                                   3791 ; BASIC: PRINT|? arg_list 
                                   3792 ; print values from argument list
                                   3793 ;----------------------------------
                           000001  3794 	COMMA=1
                           000001  3795 	VSIZE=1
      0015E6                       3796 print:
      0015E6 4B 00            [ 1] 3797 push #0 ; local variable COMMA 
      0015E8                       3798 reset_comma:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015E8 0F 01            [ 1] 3799 	clr (COMMA,sp)
      0015EA                       3800 prt_loop:
      0015EA CD 12 DD         [ 4] 3801 	call relation 
      0015ED A1 01            [ 1] 3802 	cp a,#TK_COLON 
      0015EF 27 5A            [ 1] 3803 	jreq print_exit   
      0015F1 A1 04            [ 1] 3804 	cp a,#TK_INTGR 
      0015F3 26 05            [ 1] 3805 	jrne 0$ 
      0015F5 CD 09 78         [ 4] 3806 	call print_int 
      0015F8 20 EE            [ 2] 3807 	jra reset_comma
      0015FA                       3808 0$: 	
      0015FA CD 07 DF         [ 4] 3809 	call next_token
      0015FD A1 00            [ 1] 3810 	cp a,#TK_NONE 
      0015FF 27 4A            [ 1] 3811 	jreq print_exit 
      001601 A1 0A            [ 1] 3812 1$:	cp a,#TK_QSTR
      001603 26 0E            [ 1] 3813 	jrne 2$   
      001605 CD 01 B0         [ 4] 3814 	call puts
      001608 5C               [ 1] 3815 	incw x 
      001609 72 B0 00 04      [ 2] 3816 	subw x,basicptr 
      00160D 9F               [ 1] 3817 	ld a,xl 
      00160E C7 00 01         [ 1] 3818 	ld in,a  
      001611 20 D5            [ 2] 3819 	jra reset_comma
      001613 A1 03            [ 1] 3820 2$: cp a,#TK_CHAR 
      001615 26 06            [ 1] 3821 	jrne 3$
      001617 9F               [ 1] 3822 	ld a,xl 
      001618 CD 01 9E         [ 4] 3823 	call putc 
      00161B 20 CB            [ 2] 3824 	jra reset_comma 
      00161D                       3825 3$: 	
      00161D A1 08            [ 1] 3826 	cp a,#TK_CFUNC 
      00161F 26 07            [ 1] 3827 	jrne 4$ 
      001621 FD               [ 4] 3828 	call (x)
      001622 9F               [ 1] 3829 	ld a,xl 
      001623 CD 01 9E         [ 4] 3830 	call putc
      001626 20 C0            [ 2] 3831 	jra reset_comma 
      001628                       3832 4$: 
      001628 A1 0D            [ 1] 3833 	cp a,#TK_COMMA 
      00162A 26 05            [ 1] 3834 	jrne 5$
      00162C 03 01            [ 1] 3835 	cpl (COMMA,sp) 
      00162E CC 15 EA         [ 2] 3836 	jp prt_loop   
      001631                       3837 5$: 
      001631 A1 0E            [ 1] 3838 	cp a,#TK_SHARP
      001633 26 13            [ 1] 3839 	jrne 7$
      001635 CD 07 DF         [ 4] 3840 	call next_token
      001638 A1 04            [ 1] 3841 	cp a,#TK_INTGR 
      00163A 27 03            [ 1] 3842 	jreq 6$
      00163C CC 06 FF         [ 2] 3843 	jp syntax_error 
      00163F                       3844 6$:
      00163F 9F               [ 1] 3845 	ld a,xl 
      001640 A4 0F            [ 1] 3846 	and a,#15 
      001642 C7 00 20         [ 1] 3847 	ld tab_width,a 
      001645 CC 15 E8         [ 2] 3848 	jp reset_comma 
      001648                       3849 7$:	
      001648 CD 0F 6B         [ 4] 3850 	call unget_token
      00164B                       3851 print_exit:
      00164B 0D 01            [ 1] 3852 	tnz (COMMA,sp)
      00164D 26 05            [ 1] 3853 	jrne 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00164F A6 0D            [ 1] 3854 	ld a,#CR 
      001651 CD 01 9E         [ 4] 3855     call putc 
      001654                       3856 9$:	_drop VSIZE 
      001654 5B 01            [ 2]    1     addw sp,#VSIZE 
      001656 81               [ 4] 3857 	ret 
                                   3858 
                                   3859 ;----------------------
                                   3860 ; 'save_context' and
                                   3861 ; 'rest_context' must be 
                                   3862 ; called at the same 
                                   3863 ; call stack depth 
                                   3864 ; i.e. SP must have the 
                                   3865 ; save value at  
                                   3866 ; entry point of both 
                                   3867 ; routine. 
                                   3868 ;---------------------
                           000006  3869 	CTXT_SIZE=6 ; size of saved data 
                                   3870 ;--------------------
                                   3871 ; save current BASIC
                                   3872 ; interpreter context 
                                   3873 ; on cstack 
                                   3874 ;--------------------
      001657                       3875 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001657                       3876 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001657                       3877 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001657                       3878 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001657                       3879 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      001657                       3880 save_context:
      001657 CE 00 04         [ 2] 3881 	ldw x,basicptr 
      00165A 1F 03            [ 2] 3882 	ldw (BPTR,sp),x
      00165C C6 00 01         [ 1] 3883 	ld a,in 
      00165F 6B 07            [ 1] 3884 	ld (IN,sp),a
      001661 C6 00 03         [ 1] 3885 	ld a,count 
      001664 6B 08            [ 1] 3886 	ld (CNT,sp),a  
      001666 81               [ 4] 3887 	ret
                                   3888 
                                   3889 ;-----------------------
                                   3890 ; restore previously saved 
                                   3891 ; BASIC interpreter context 
                                   3892 ; from cstack 
                                   3893 ;-------------------------
      001667                       3894 rest_context:
      001667 1E 03            [ 2] 3895 	ldw x,(BPTR,sp)
      001669 CF 00 04         [ 2] 3896 	ldw basicptr,x 
      00166C 7B 07            [ 1] 3897 	ld a,(IN,sp)
      00166E C7 00 01         [ 1] 3898 	ld in,a
      001671 7B 08            [ 1] 3899 	ld a,(CNT,sp)
      001673 C7 00 03         [ 1] 3900 	ld count,a  
      001676 81               [ 4] 3901 	ret
                                   3902 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3903 ;------------------------------------------
                                   3904 ; BASIC: INPUT [string],var[,[string],var]
                                   3905 ; input value in variables 
                                   3906 ; [string] optionally can be used as prompt 
                                   3907 ;-----------------------------------------
                           000001  3908 	CX_BPTR=1
                           000003  3909 	CX_LNO=3
                           000004  3910 	CX_IN=4
                           000005  3911 	CX_CNT=5
                           000006  3912 	SKIP=6
                           000007  3913 	VSIZE=7
      001677                       3914 input_var:
      001677 72 00 00 1F 05   [ 2] 3915 	btjt flags,#FRUN,1$ 
      00167C A6 06            [ 1] 3916 	ld a,#ERR_RUN_ONLY 
      00167E CC 07 01         [ 2] 3917 	jp tb_error 
      001681                       3918 1$:	_vars VSIZE 
      001681 52 07            [ 2]    1     sub sp,#VSIZE 
      001683                       3919 input_loop:
      001683 0F 06            [ 1] 3920 	clr (SKIP,sp)
      001685 CD 07 DF         [ 4] 3921 	call next_token 
      001688 A1 00            [ 1] 3922 	cp a,#TK_NONE 
      00168A 27 5C            [ 1] 3923 	jreq input_exit 
      00168C A1 0A            [ 1] 3924 	cp a,#TK_QSTR 
      00168E 26 08            [ 1] 3925 	jrne 1$ 
      001690 CD 01 B0         [ 4] 3926 	call puts 
      001693 03 06            [ 1] 3927 	cpl (SKIP,sp)
      001695 CD 07 DF         [ 4] 3928 	call next_token 
      001698 A1 05            [ 1] 3929 1$: cp a,#TK_VAR  
      00169A 27 03            [ 1] 3930 	jreq 2$ 
      00169C CC 06 FF         [ 2] 3931 	jp syntax_error
      00169F CD 0F 71         [ 4] 3932 2$:	call dpush 
      0016A2 0D 06            [ 1] 3933 	tnz (SKIP,sp)
      0016A4 26 0F            [ 1] 3934 	jrne 21$ 
      0016A6 A6 3A            [ 1] 3935 	ld a,#':
      0016A8 C7 17 19         [ 1] 3936 	ld pad+1,a 
      0016AB 72 5F 17 1A      [ 1] 3937 	clr pad+2
      0016AF AE 17 18         [ 2] 3938 	ldw x,#pad 
      0016B2 CD 01 B0         [ 4] 3939 	call puts   
      0016B5                       3940 21$:
      0016B5 CD 16 57         [ 4] 3941 	call save_context 
      0016B8 AE 16 C8         [ 2] 3942 	ldw x,#tib 
      0016BB CF 00 04         [ 2] 3943 	ldw basicptr,x  
      0016BE 72 5F 00 03      [ 1] 3944 	clr count  
      0016C2 CD 0A 66         [ 4] 3945 	call readln 
      0016C5 72 5F 00 01      [ 1] 3946 	clr in 
      0016C9 CD 12 DD         [ 4] 3947 	call relation 
      0016CC A1 04            [ 1] 3948 	cp a,#TK_INTGR
      0016CE 27 03            [ 1] 3949 	jreq 3$ 
      0016D0 CC 06 FF         [ 2] 3950 	jp syntax_error
      0016D3 CD 0F 71         [ 4] 3951 3$: call dpush 
      0016D6 CD 0F D8         [ 4] 3952 	call store 
      0016D9 CD 16 67         [ 4] 3953 	call rest_context
      0016DC CD 07 DF         [ 4] 3954 	call next_token 
      0016DF A1 0D            [ 1] 3955 	cp a,#TK_COMMA 
      0016E1 26 02            [ 1] 3956 	jrne 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016E3 20 9E            [ 2] 3957 	jra input_loop 
      0016E5 CD 0F 6B         [ 4] 3958 4$:	call unget_token 
      0016E8                       3959 input_exit:
      0016E8                       3960 	_drop VSIZE 
      0016E8 5B 07            [ 2]    1     addw sp,#VSIZE 
      0016EA 81               [ 4] 3961 	ret 
                                   3962 
                                   3963 
                                   3964 ;---------------------
                                   3965 ; BASIC: REMARK | ' 
                                   3966 ; skip comment to end of line 
                                   3967 ;---------------------- 
      0016EB                       3968 rem:
      0016EB 55 00 01 00 03   [ 1] 3969  	mov count,in 
      0016F0 81               [ 4] 3970 	ret 
                                   3971 
                                   3972 ;---------------------
                                   3973 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3974 ; read in loop 'addr'  
                                   3975 ; apply & 'mask' to value 
                                   3976 ; loop while result==0.  
                                   3977 ; if 'xor_mask' given 
                                   3978 ; apply ^ in second  
                                   3979 ; loop while result==0 
                                   3980 ;---------------------
                           000001  3981 	XMASK=1 
                           000002  3982 	MASK=2
                           000003  3983 	ADDR=3
                           000004  3984 	VSIZE=4
      0016F1                       3985 wait: 
      0016F1                       3986 	_vars VSIZE
      0016F1 52 04            [ 2]    1     sub sp,#VSIZE 
      0016F3 0F 01            [ 1] 3987 	clr (XMASK,sp) 
      0016F5 CD 11 9E         [ 4] 3988 	call arg_list 
      0016F8 A1 02            [ 1] 3989 	cp a,#2
      0016FA 24 03            [ 1] 3990 	jruge 0$
      0016FC CC 06 FF         [ 2] 3991 	jp syntax_error 
      0016FF A1 03            [ 1] 3992 0$:	cp a,#3
      001701 25 06            [ 1] 3993 	jrult 1$
      001703 CD 0F 7E         [ 4] 3994 	call dpop 
      001706 9F               [ 1] 3995 	ld a,xl
      001707 6B 01            [ 1] 3996 	ld (XMASK,sp),a 
      001709 CD 0F 7E         [ 4] 3997 1$: call dpop ; mask 
      00170C 9F               [ 1] 3998 	ld a,xl 
      00170D 6B 02            [ 1] 3999 	ld (MASK,sp),a 
      00170F CD 0F 7E         [ 4] 4000 	call dpop ; address 
      001712 F6               [ 1] 4001 2$:	ld a,(x)
      001713 14 02            [ 1] 4002 	and a,(MASK,sp)
      001715 18 01            [ 1] 4003 	xor a,(XMASK,sp)
      001717 27 F9            [ 1] 4004 	jreq 2$ 
      001719                       4005 	_drop VSIZE 
      001719 5B 04            [ 2]    1     addw sp,#VSIZE 
      00171B 81               [ 4] 4006 	ret 
                                   4007 
                                   4008 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4009 ; BASIC: BSET addr,mask
                                   4010 ; set bits at 'addr' corresponding 
                                   4011 ; to those of 'mask' that are at 1.
                                   4012 ; arguments:
                                   4013 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4014 ;   mask        mask|addr
                                   4015 ; output:
                                   4016 ;	none 
                                   4017 ;--------------------------
      00171C                       4018 bit_set:
      00171C CD 11 9E         [ 4] 4019 	call arg_list 
      00171F A1 02            [ 1] 4020 	cp a,#2	 
      001721 27 03            [ 1] 4021 	jreq 1$ 
      001723 CC 06 FF         [ 2] 4022 	jp syntax_error
      001726                       4023 1$: 
      001726 CD 0F 7E         [ 4] 4024 	call dpop ; mask 
      001729 9F               [ 1] 4025 	ld a,xl 
      00172A CD 0F 7E         [ 4] 4026 	call dpop ; addr  
      00172D FA               [ 1] 4027 	or a,(x)
      00172E F7               [ 1] 4028 	ld (x),a
      00172F 81               [ 4] 4029 	ret 
                                   4030 
                                   4031 ;---------------------
                                   4032 ; BASIC: BRES addr,mask
                                   4033 ; reset bits at 'addr' corresponding 
                                   4034 ; to those of 'mask' that are at 1.
                                   4035 ; arguments:
                                   4036 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4037 ;   mask	    ~mask&*addr  
                                   4038 ; output:
                                   4039 ;	none 
                                   4040 ;--------------------------
      001730                       4041 bit_reset:
      001730 CD 11 9E         [ 4] 4042 	call arg_list 
      001733 A1 02            [ 1] 4043 	cp a,#2  
      001735 27 03            [ 1] 4044 	jreq 1$ 
      001737 CC 06 FF         [ 2] 4045 	jp syntax_error
      00173A                       4046 1$: 
      00173A CD 0F 7E         [ 4] 4047 	call dpop ; mask 
      00173D 9F               [ 1] 4048 	ld a,xl 
      00173E 43               [ 1] 4049 	cpl a 
      00173F CD 0F 7E         [ 4] 4050 	call dpop ; addr  
      001742 F4               [ 1] 4051 	and a,(x)
      001743 F7               [ 1] 4052 	ld (x),a 
      001744 81               [ 4] 4053 	ret 
                                   4054 
                                   4055 ;---------------------
                                   4056 ; BASIC: BRES addr,mask
                                   4057 ; toggle bits at 'addr' corresponding 
                                   4058 ; to those of 'mask' that are at 1.
                                   4059 ; arguments:
                                   4060 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4061 ;   mask	    mask^*addr  
                                   4062 ; output:
                                   4063 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4064 ;--------------------------
      001745                       4065 bit_toggle:
      001745 CD 11 9E         [ 4] 4066 	call arg_list 
      001748 A1 02            [ 1] 4067 	cp a,#2 
      00174A 27 03            [ 1] 4068 	jreq 1$ 
      00174C CC 06 FF         [ 2] 4069 	jp syntax_error
      00174F CD 0F 7E         [ 4] 4070 1$: call dpop ; mask 
      001752 9F               [ 1] 4071 	ld a,xl 
      001753 CD 0F 7E         [ 4] 4072 	call dpop ; addr  
      001756 F8               [ 1] 4073 	xor a,(x)
      001757 F7               [ 1] 4074 	ld (x),a 
      001758 81               [ 4] 4075 	ret 
                                   4076 
                                   4077 
                                   4078 ;---------------------
                                   4079 ; BASIC: BTEST(addr,bit)
                                   4080 ; return bit value at 'addr' 
                                   4081 ; bit is in range {0..7}.
                                   4082 ; arguments:
                                   4083 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4084 ;   bit 	    bit position {0..7}  
                                   4085 ; output:
                                   4086 ;	none 
                                   4087 ;--------------------------
      001759                       4088 bit_test:
      001759 A6 0B            [ 1] 4089 	ld a,#TK_LPAREN 
      00175B CD 11 91         [ 4] 4090 	call expect 
      00175E CD 11 9E         [ 4] 4091 	call arg_list 
      001761 A1 02            [ 1] 4092 	cp a,#2
      001763 27 03            [ 1] 4093 	jreq 0$
      001765 CC 06 FF         [ 2] 4094 	jp syntax_error
      001768 A6 0C            [ 1] 4095 0$:	ld a,#TK_RPAREN
      00176A CD 11 91         [ 4] 4096 	call expect 
      00176D CD 0F 7E         [ 4] 4097 	call dpop 
      001770 9F               [ 1] 4098 	ld a,xl 
      001771 A4 07            [ 1] 4099 	and a,#7
      001773 88               [ 1] 4100 	push a 
      001774 A6 01            [ 1] 4101 	ld a,#1 
      001776 0D 01            [ 1] 4102 1$: tnz (1,sp)
      001778 27 05            [ 1] 4103 	jreq 2$
      00177A 48               [ 1] 4104 	sll a 
      00177B 0A 01            [ 1] 4105 	dec (1,sp)
      00177D 20 F7            [ 2] 4106 	jra 1$
      00177F CD 0F 7E         [ 4] 4107 2$: call dpop 
      001782 F4               [ 1] 4108 	and a,(x)
      001783 27 02            [ 1] 4109 	jreq 3$
      001785 A6 01            [ 1] 4110 	ld a,#1 
      001787 5F               [ 1] 4111 3$:	clrw x 
      001788 97               [ 1] 4112 	ld xl,a 
      001789 A6 04            [ 1] 4113 	ld a,#TK_INTGR
      00178B                       4114 	_drop 1 
      00178B 5B 01            [ 2]    1     addw sp,#1 
      00178D 81               [ 4] 4115 	ret
                                   4116 
                                   4117 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4118 ;--------------------
                                   4119 ; BASIC: POKE addr,byte
                                   4120 ; put a byte at addr 
                                   4121 ;--------------------
      00178E                       4122 poke:
      00178E CD 11 9E         [ 4] 4123 	call arg_list 
      001791 A1 02            [ 1] 4124 	cp a,#2
      001793 27 03            [ 1] 4125 	jreq 1$
      001795 CC 06 FF         [ 2] 4126 	jp syntax_error
      001798                       4127 1$:	
      001798 CD 0F 7E         [ 4] 4128 	call dpop 
      00179B 9F               [ 1] 4129     ld a,xl 
      00179C CD 0F 7E         [ 4] 4130 	call dpop 
      00179F F7               [ 1] 4131 	ld (x),a 
      0017A0 81               [ 4] 4132 	ret 
                                   4133 
                                   4134 ;-----------------------
                                   4135 ; BASIC: PEEK(addr)
                                   4136 ; get the byte at addr 
                                   4137 ; input:
                                   4138 ;	none 
                                   4139 ; output:
                                   4140 ;	X 		value 
                                   4141 ;-----------------------
      0017A1                       4142 peek:
      0017A1 A6 0B            [ 1] 4143 	ld a,#TK_LPAREN 
      0017A3 CD 11 91         [ 4] 4144 	call expect 
      0017A6 CD 11 9E         [ 4] 4145 	call arg_list
      0017A9 A1 01            [ 1] 4146 	cp a,#1 
      0017AB 27 03            [ 1] 4147 	jreq 1$
      0017AD CC 06 FF         [ 2] 4148 	jp syntax_error
      0017B0 A6 0C            [ 1] 4149 1$:	ld a,#TK_RPAREN 
      0017B2 CD 11 91         [ 4] 4150 	call expect 
      0017B5 CD 0F 7E         [ 4] 4151 	call dpop 
      0017B8 F6               [ 1] 4152 	ld a,(x)
      0017B9 5F               [ 1] 4153 	clrw x 
      0017BA 97               [ 1] 4154 	ld xl,a 
      0017BB A6 04            [ 1] 4155 	ld a,#TK_INTGR
      0017BD 81               [ 4] 4156 	ret 
                                   4157 
      0017BE                       4158 if: 
      0017BE CD 12 DD         [ 4] 4159 	call relation 
      0017C1 A1 04            [ 1] 4160 	cp a,#TK_INTGR
      0017C3 27 03            [ 1] 4161 	jreq 1$ 
      0017C5 CC 06 FF         [ 2] 4162 	jp syntax_error
      0017C8 4F               [ 1] 4163 1$:	clr a 
      0017C9 5D               [ 2] 4164 	tnzw x 
      0017CA 26 05            [ 1] 4165 	jrne 9$  
                                   4166 ;skip to next line
      0017CC 55 00 03 00 01   [ 1] 4167 	mov in,count
      0017D1 81               [ 4] 4168 9$:	ret 
                                   4169 
                                   4170 ;------------------------
                                   4171 ; BASIC: FOR var=expr 
                                   4172 ; set variable to expression 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4173 ; leave variable address 
                                   4174 ; on dstack and set
                                   4175 ; FFOR bit in 'flags'
                                   4176 ;-----------------
                           000001  4177 	RETL1=1
                           000003  4178 	INW=3
                           000005  4179 	BPTR=5
      0017D2                       4180 for: ; { -- var_addr }
      0017D2 A6 05            [ 1] 4181 	ld a,#TK_VAR 
      0017D4 CD 11 91         [ 4] 4182 	call expect
      0017D7 CD 0F 71         [ 4] 4183 	call dpush 
      0017DA CD 13 84         [ 4] 4184 	call let02 
      0017DD 72 14 00 1F      [ 1] 4185 	bset flags,#FFOR 
                                   4186 ; open space on cstack for BPTR and INW 
      0017E1 85               [ 2] 4187 	popw x ; call return address 
      0017E2                       4188 	_vars 4
      0017E2 52 04            [ 2]    1     sub sp,#4 
      0017E4 89               [ 2] 4189 	pushw x  ; RETL1 
      0017E5 5F               [ 1] 4190 	clrw x 
      0017E6 1F 05            [ 2] 4191 	ldw (BPTR,sp),x 
      0017E8 1F 03            [ 2] 4192 	ldw (INW,sp),x 
      0017EA CD 07 DF         [ 4] 4193 	call next_token 
      0017ED A1 06            [ 1] 4194 	cp a,#TK_CMD 
      0017EF 27 03            [ 1] 4195 	jreq 1$
      0017F1 CC 06 FF         [ 2] 4196 	jp syntax_error
      0017F4                       4197 1$:  
      0017F4 A3 17 FC         [ 2] 4198 	cpw x,#to 
      0017F7 27 03            [ 1] 4199 	jreq to
      0017F9 CC 06 FF         [ 2] 4200 	jp syntax_error 
                                   4201 
                                   4202 ;-----------------------------------
                                   4203 ; BASIC: TO expr 
                                   4204 ; second part of FOR loop initilization
                                   4205 ; leave limit on dstack and set 
                                   4206 ; FTO bit in 'flags'
                                   4207 ;-----------------------------------
      0017FC                       4208 to: ; { var_addr -- var_addr limit step }
      0017FC 72 04 00 1F 03   [ 2] 4209 	btjt flags,#FFOR,1$
      001801 CC 06 FF         [ 2] 4210 	jp syntax_error
      001804 CD 12 DD         [ 4] 4211 1$: call relation  
      001807 A1 04            [ 1] 4212 	cp a,#TK_INTGR 
      001809 27 03            [ 1] 4213 	jreq 2$ 
      00180B CC 06 FF         [ 2] 4214 	jp syntax_error
      00180E                       4215 2$: 
      00180E CD 0F 71         [ 4] 4216     call dpush ; limit
      001811 CE 00 00         [ 2] 4217 	ldw x,in.w 
      001814 CD 07 DF         [ 4] 4218 	call next_token
      001817 A1 00            [ 1] 4219 	cp a,#TK_NONE  
      001819 27 0C            [ 1] 4220 	jreq 4$ 
      00181B A1 06            [ 1] 4221 	cp a,#TK_CMD
      00181D 26 05            [ 1] 4222 	jrne 3$
      00181F A3 18 2C         [ 2] 4223 	cpw x,#step 
      001822 27 08            [ 1] 4224 	jreq step
      001824                       4225 3$:	
      001824 CD 0F 6B         [ 4] 4226 	call unget_token   	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001827                       4227 4$:	
      001827 AE 00 01         [ 2] 4228 	ldw x,#1   ; default step  
      00182A 20 12            [ 2] 4229 	jra store_loop_addr 
                                   4230 
                                   4231 
                                   4232 ;----------------------------------
                                   4233 ; BASIC: STEP expr 
                                   4234 ; optional third par of FOR loop
                                   4235 ; initialization. 	
                                   4236 ;------------------------------------
      00182C                       4237 step: ; {var limit -- var limit step}
      00182C 72 04 00 1F 03   [ 2] 4238 	btjt flags,#FFOR,1$
      001831 CC 06 FF         [ 2] 4239 	jp syntax_error
      001834 CD 12 DD         [ 4] 4240 1$: call relation
      001837 A1 04            [ 1] 4241 	cp a,#TK_INTGR
      001839 27 03            [ 1] 4242 	jreq store_loop_addr  
      00183B CC 06 FF         [ 2] 4243 	jp syntax_error
                                   4244 ; leave loop back entry point on cstack 
                                   4245 ; cstack is 2 call deep from interp_loop
      00183E                       4246 store_loop_addr:
      00183E CD 0F 71         [ 4] 4247 	call dpush 
      001841 CE 00 04         [ 2] 4248 	ldw x,basicptr  
      001844 1F 05            [ 2] 4249 	ldw (BPTR,sp),x 
      001846 CE 00 00         [ 2] 4250 	ldw x,in.w 
      001849 1F 03            [ 2] 4251 	ldw (INW,sp),x   
      00184B 72 15 00 1F      [ 1] 4252 	bres flags,#FFOR 
      00184F 72 5C 00 1C      [ 1] 4253 	inc loop_depth  
      001853 81               [ 4] 4254 	ret 
                                   4255 
                                   4256 ;--------------------------------
                                   4257 ; BASIC: NEXT var 
                                   4258 ; FOR loop control 
                                   4259 ; increment variable with step 
                                   4260 ; and compare with limit 
                                   4261 ; loop if threshold not crossed.
                                   4262 ; else clean both stacks. 
                                   4263 ; and decrement 'loop_depth' 
                                   4264 ;--------------------------------
      001854                       4265 next: ; {var limit step -- [var limit step ] }
      001854 72 5D 00 1C      [ 1] 4266 	tnz loop_depth 
      001858 26 03            [ 1] 4267 	jrne 1$ 
      00185A CC 06 FF         [ 2] 4268 	jp syntax_error 
      00185D                       4269 1$: 
      00185D A6 05            [ 1] 4270 	ld a,#TK_VAR 
      00185F CD 11 91         [ 4] 4271 	call expect
                                   4272 ; check for good variable after NEXT 	 
      001862 90 93            [ 1] 4273 	ldw y,x 
      001864 AE 00 04         [ 2] 4274 	ldw x,#4  
      001867 72 D3 00 16      [ 4] 4275 	cpw y,([dstkptr],x) ; compare variables address 
      00186B 27 03            [ 1] 4276 	jreq 2$  
      00186D CC 06 FF         [ 2] 4277 	jp syntax_error ; not the good one 
      001870                       4278 2$: ; increment variable 
      001870 93               [ 1] 4279 	ldw x,y
      001871 FE               [ 2] 4280 	ldw x,(x)  ; get var value 
      001872 CF 00 08         [ 2] 4281 	ldw acc16,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001875 72 CE 00 16      [ 5] 4282 	ldw x,[dstkptr] ; step
      001879 72 BB 00 08      [ 2] 4283 	addw x,acc16 ; var+step 
      00187D 90 FF            [ 2] 4284 	ldw (y),x ; save var new value 
                                   4285 ; compare with limit 
      00187F 90 93            [ 1] 4286 	ldw y,x 
      001881 72 CE 00 16      [ 5] 4287 	ldw x,[dstkptr] ; step in x 
      001885 5D               [ 2] 4288 	tnzw x  
      001886 2A 0B            [ 1] 4289 	jrpl 4$ ; positive step 
                                   4290 ;negative step 
      001888 AE 00 02         [ 2] 4291 	ldw x,#2
      00188B 72 D3 00 16      [ 4] 4292 	cpw y,([dstkptr],x)
      00188F 2F 20            [ 1] 4293 	jrslt loop_done
      001891 20 09            [ 2] 4294 	jra loop_back 
      001893                       4295 4$: ; positive step
      001893 AE 00 02         [ 2] 4296 	ldw x,#2 
      001896 72 D3 00 16      [ 4] 4297 	cpw y,([dstkptr],x)
      00189A 2C 15            [ 1] 4298 	jrsgt loop_done
      00189C                       4299 loop_back:
      00189C 1E 05            [ 2] 4300 	ldw x,(BPTR,sp)
      00189E CF 00 04         [ 2] 4301 	ldw basicptr,x 
      0018A1 72 01 00 1F 05   [ 2] 4302 	btjf flags,#FRUN,1$ 
      0018A6 E6 02            [ 1] 4303 	ld a,(2,x)
      0018A8 C7 00 03         [ 1] 4304 	ld count,a
      0018AB 1E 03            [ 2] 4305 1$:	ldw x,(INW,sp)
      0018AD CF 00 00         [ 2] 4306 	ldw in.w,x 
      0018B0 81               [ 4] 4307 	ret 
      0018B1                       4308 loop_done:
                                   4309 	; remove var limit step on dstack 
      0018B1 CE 00 16         [ 2] 4310 	ldw x,dstkptr 
      0018B4 1C 00 06         [ 2] 4311 	addw x,#3*CELL_SIZE
      0018B7 CF 00 16         [ 2] 4312 	ldw dstkptr,x 
                                   4313 	; remove 2 return address on cstack 
      0018BA 85               [ 2] 4314 	popw x
      0018BB                       4315 	_drop 4
      0018BB 5B 04            [ 2]    1     addw sp,#4 
      0018BD 89               [ 2] 4316 	pushw x 
      0018BE 72 5A 00 1C      [ 1] 4317 	dec loop_depth 
      0018C2 81               [ 4] 4318 	ret 
                                   4319 
                                   4320 
                                   4321 ;------------------------
                                   4322 ; BASIC: GOTO line# 
                                   4323 ; jump to line# 
                                   4324 ; here cstack is 2 call deep from interp_loop 
                                   4325 ;------------------------
      0018C3                       4326 goto:
      0018C3 72 00 00 1F 06   [ 2] 4327 	btjt flags,#FRUN,0$ 
      0018C8 A6 06            [ 1] 4328 	ld a,#ERR_RUN_ONLY
      0018CA CC 07 01         [ 2] 4329 	jp tb_error 
      0018CD 81               [ 4] 4330 	ret 
      0018CE 20 23            [ 2] 4331 0$:	jra go_common
                                   4332 
                                   4333 ;--------------------
                                   4334 ; BASIC: GOSUB line#
                                   4335 ; basic subroutine call
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4336 ; actual line# and basicptr 
                                   4337 ; are saved on cstack
                                   4338 ; here cstack is 2 call deep from interp_loop 
                                   4339 ;--------------------
                           000003  4340 	GOS_RET=3
      0018D0                       4341 gosub:
      0018D0 72 00 00 1F 06   [ 2] 4342 	btjt flags,#FRUN,0$ 
      0018D5 A6 06            [ 1] 4343 	ld a,#ERR_RUN_ONLY
      0018D7 CC 07 01         [ 2] 4344 	jp tb_error 
      0018DA 81               [ 4] 4345 	ret 
      0018DB 85               [ 2] 4346 0$:	popw x 
      0018DC 52 02            [ 2] 4347 	sub sp,#2 
      0018DE 89               [ 2] 4348 	pushw x 
      0018DF CE 00 04         [ 2] 4349 	ldw x,basicptr
      0018E2 E6 02            [ 1] 4350 	ld a,(2,x)
      0018E4 AB 03            [ 1] 4351 	add a,#3 
      0018E6 C7 00 09         [ 1] 4352 	ld acc8,a 
      0018E9 72 5F 00 08      [ 1] 4353 	clr acc16 
      0018ED 72 BB 00 08      [ 2] 4354 	addw x,acc16
      0018F1 1F 03            [ 2] 4355 	ldw (GOS_RET,sp),x 
      0018F3                       4356 go_common: 
      0018F3 CD 12 DD         [ 4] 4357 	call relation 
      0018F6 A1 04            [ 1] 4358 	cp a,#TK_INTGR
      0018F8 27 03            [ 1] 4359 	jreq 1$ 
      0018FA CC 06 FF         [ 2] 4360 	jp syntax_error
      0018FD                       4361 1$: 
      0018FD CD 02 E0         [ 4] 4362 	call search_lineno  
      001900 5D               [ 2] 4363 	tnzw x 
      001901 26 05            [ 1] 4364 	jrne 2$ 
      001903 A6 05            [ 1] 4365 	ld a,#ERR_NO_LINE 
      001905 CC 07 01         [ 2] 4366 	jp tb_error 
      001908                       4367 2$: 
      001908 CF 00 04         [ 2] 4368 	ldw basicptr,x 
      00190B E6 02            [ 1] 4369 	ld a,(2,x)
      00190D C7 00 03         [ 1] 4370 	ld count,a 
      001910 35 03 00 01      [ 1] 4371 	mov in,#3 
      001914 81               [ 4] 4372 	ret 
                                   4373 
                                   4374 ;------------------------
                                   4375 ; BASIC: RETURN 
                                   4376 ; exit from a subroutine 
                                   4377 ; cstack is 2 level deep from interp_loop 
                                   4378 ;------------------------
      001915                       4379 return:
      001915 72 00 00 1F 05   [ 2] 4380 	btjt flags,#FRUN,0$ 
      00191A A6 06            [ 1] 4381 	ld a,#ERR_RUN_ONLY
      00191C CC 07 01         [ 2] 4382 	jp tb_error 
      00191F                       4383 0$:	
      00191F 1E 03            [ 2] 4384 	ldw x,(GOS_RET,sp) 
      001921 CF 00 04         [ 2] 4385 	ldw basicptr,x 
      001924 E6 02            [ 1] 4386 	ld a,(2,x)
      001926 AB 03            [ 1] 4387 	add a,#3 
      001928 C7 00 03         [ 1] 4388 	ld count,a 
      00192B 35 03 00 01      [ 1] 4389 	mov in,#3
      00192F 4F               [ 1] 4390 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001930 85               [ 2] 4391 	popw x 
      001931                       4392 	_drop 2
      001931 5B 02            [ 2]    1     addw sp,#2 
      001933 89               [ 2] 4393 	pushw x
      001934 81               [ 4] 4394 	ret  
                                   4395 
                                   4396 
                                   4397 ;----------------------------------
                                   4398 ; BASIC: RUN
                                   4399 ; run BASIC program in RAM
                                   4400 ;----------------------------------- 
      001935                       4401 run: 
      001935 72 01 00 1F 02   [ 2] 4402 	btjf flags,#FRUN,0$  
      00193A 4F               [ 1] 4403 	clr a 
      00193B 81               [ 4] 4404 	ret
      00193C                       4405 0$: 
      00193C 72 09 00 1F 12   [ 2] 4406 	btjf flags,#FBREAK,1$
      001941                       4407 	_drop 2 
      001941 5B 02            [ 2]    1     addw sp,#2 
      001943 CD 16 67         [ 4] 4408 	call rest_context
      001946                       4409 	_drop CTXT_SIZE 
      001946 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      001948 72 19 00 1F      [ 1] 4410 	bres flags,#FBREAK 
      00194C 72 10 00 1F      [ 1] 4411 	bset flags,#FRUN 
      001950 CC 07 AF         [ 2] 4412 	jp interp_loop 
      001953 CE 00 18         [ 2] 4413 1$:	ldw x,txtbgn
      001956 C3 00 1A         [ 2] 4414 	cpw x,txtend 
      001959 2B 02            [ 1] 4415 	jrmi 2$ 
      00195B 4F               [ 1] 4416 	clr a 
      00195C 81               [ 4] 4417 	ret 
      00195D CD 13 58         [ 4] 4418 2$: call ubound 
      001960                       4419 	_drop 2 
      001960 5B 02            [ 2]    1     addw sp,#2 
      001962 CE 00 18         [ 2] 4420 	ldw x,txtbgn 
      001965 CF 00 04         [ 2] 4421 	ldw basicptr,x 
      001968 E6 02            [ 1] 4422 	ld a,(2,x)
      00196A C7 00 03         [ 1] 4423 	ld count,a
      00196D 35 03 00 01      [ 1] 4424 	mov in,#3	
      001971 72 10 00 1F      [ 1] 4425 	bset flags,#FRUN 
      001975 CC 07 AF         [ 2] 4426 	jp interp_loop 
                                   4427 
                                   4428 
                                   4429 ;----------------------
                                   4430 ; BASIC: STOP 
                                   4431 ; stop running program
                                   4432 ;---------------------- 
      001978                       4433 stop: 
                                   4434 ; clean dstack and cstack 
      001978 AE 17 FF         [ 2] 4435 	ldw x,#STACK_EMPTY 
      00197B 94               [ 1] 4436 	ldw sp,x 
      00197C 72 11 00 1F      [ 1] 4437 	bres flags,#FRUN 
      001980 72 19 00 1F      [ 1] 4438 	bres flags,#FBREAK
      001984 CC 07 53         [ 2] 4439 	jp warm_start
                                   4440 
                                   4441 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4442 ; BASIC BEEP expr1,expr2
                                   4443 ; used MCU internal beeper 
                                   4444 ; to produce a sound
                                   4445 ; arguments:
                                   4446 ;    expr1   frequency  (expr1%32)
                                   4447 ;    expr2   duration msec.
                                   4448 ;---------------------------
      001987                       4449 beep:
      001987 CD 11 9E         [ 4] 4450 	call arg_list 
      00198A A1 02            [ 1] 4451 	cp a,#2 
      00198C 27 03            [ 1] 4452 	jreq 1$
      00198E CC 06 FF         [ 2] 4453 	jp syntax_error 
      001991                       4454 1$: 
      001991 CE 00 16         [ 2] 4455 	ldw x,dstkptr 
      001994 EE 02            [ 2] 4456 	ldw x,(2,x);frequency 
      001996 A6 1F            [ 1] 4457 	ld a,#31
      001998 62               [ 2] 4458 	div x,a 
      001999 C7 50 F3         [ 1] 4459 	ld BEEP_CSR,a	
      00199C 72 1A 50 F3      [ 1] 4460 	bset BEEP_CSR,#5 
      0019A0 CD 0F 7E         [ 4] 4461 	call dpop 
      0019A3 CD 1E 55         [ 4] 4462 	call pause02 
      0019A6 CD 0F A5         [ 4] 4463 	call ddrop 
      0019A9 A6 1F            [ 1] 4464 	ld a,#0x1f
      0019AB C7 50 F3         [ 1] 4465 	ld BEEP_CSR,a 
      0019AE 81               [ 4] 4466 	ret 
                                   4467 
                                   4468 ;-------------------------------
                                   4469 ; BASIC: PWRADC 0|1 [,divisor]  
                                   4470 ; disable/enanble ADC 
                                   4471 ;-------------------------------
      0019AF                       4472 power_adc:
      0019AF CD 11 9E         [ 4] 4473 	call arg_list 
      0019B2 A1 02            [ 1] 4474 	cp a,#2	
      0019B4 27 0D            [ 1] 4475 	jreq 1$
      0019B6 A1 01            [ 1] 4476 	cp a,#1 
      0019B8 27 03            [ 1] 4477 	jreq 0$ 
      0019BA CC 06 FF         [ 2] 4478 	jp syntax_error 
      0019BD AE 00 00         [ 2] 4479 0$: ldw x,#0
      0019C0 CD 0F 71         [ 4] 4480 	call dpush 
      0019C3 AE 00 02         [ 2] 4481 1$: ldw x,#2
      0019C6 72 DE 00 16      [ 5] 4482 	ldw x,([dstkptr],x) ; on|off
      0019CA 5D               [ 2] 4483 	tnzw x 
      0019CB 27 1C            [ 1] 4484 	jreq 2$ 
      0019CD 72 CE 00 16      [ 5] 4485 	ldw x,[dstkptr] ; divisor 
      0019D1 9F               [ 1] 4486 	ld a,xl
      0019D2 A4 07            [ 1] 4487 	and a,#7
      0019D4 4E               [ 1] 4488 	swap a 
      0019D5 C7 54 01         [ 1] 4489 	ld ADC_CR1,a
      0019D8 72 16 54 02      [ 1] 4490 	bset ADC_CR2,#ADC_CR2_ALIGN ; right 
      0019DC 72 10 54 01      [ 1] 4491 	bset ADC_CR1,#ADC_CR1_ADON 
      0019E0                       4492 	_usec_dly 7 
      0019E0 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0019E3 5A               [ 2]    2     decw x
      0019E4 9D               [ 1]    3     nop 
      0019E5 26 FA            [ 1]    4     jrne .-4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0019E7 20 04            [ 2] 4493 	jra 3$
      0019E9 72 11 54 01      [ 1] 4494 2$: bres ADC_CR1,#ADC_CR1_ADON 
      0019ED AE 00 02         [ 2] 4495 3$:	ldw x,#2
      0019F0 CD 0F E2         [ 4] 4496 	call ddrop_n 
      0019F3 81               [ 4] 4497 	ret
                                   4498 
                                   4499 ;-----------------------------
                                   4500 ; BASIC: RDADC(channel)
                                   4501 ; read adc channel 
                                   4502 ; output:
                                   4503 ;   A 		TK_INTGR 
                                   4504 ;   X 		value 
                                   4505 ;-----------------------------
      0019F4                       4506 read_adc:
      0019F4 A6 0B            [ 1] 4507 	ld a,#TK_LPAREN 
      0019F6 CD 11 91         [ 4] 4508 	call expect 
      0019F9 CD 07 DF         [ 4] 4509 	call next_token 
      0019FC A1 04            [ 1] 4510 	cp a,#TK_INTGR 
      0019FE 27 03            [ 1] 4511 	jreq 1$
      001A00 CC 06 FF         [ 2] 4512 	jp syntax_error
      001A03 89               [ 2] 4513 1$: pushw x 
      001A04 A6 0C            [ 1] 4514 	ld a,#TK_RPAREN 
      001A06 CD 11 91         [ 4] 4515 	call expect 
      001A09 85               [ 2] 4516 	popw x 
      001A0A A3 00 10         [ 2] 4517 	cpw x,#16 
      001A0D 25 05            [ 1] 4518 	jrult 2$
      001A0F A6 0A            [ 1] 4519 	ld a,#ERR_BAD_VALUE
      001A11 CC 07 01         [ 2] 4520 	jp tb_error 
      001A14 9F               [ 1] 4521 2$: ld a,xl
      001A15 C7 54 00         [ 1] 4522 	ld ADC_CSR,a 
      001A18 72 10 54 01      [ 1] 4523 	bset ADC_CR1,#ADC_CR1_ADON
      001A1C 72 0F 54 00 FB   [ 2] 4524 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001A21 CE 54 04         [ 2] 4525 	ldw x,ADC_DRH 
      001A24 A6 04            [ 1] 4526 	ld a,#TK_INTGR
      001A26 81               [ 4] 4527 	ret 
                                   4528 
                                   4529 
                                   4530 ;-----------------------
                                   4531 ; BASIC: BREAK 
                                   4532 ; insert a breakpoint 
                                   4533 ; in pogram. 
                                   4534 ; the program is resumed
                                   4535 ; with RUN 
                                   4536 ;-------------------------
      001A27                       4537 break:
      001A27 72 00 00 1F 02   [ 2] 4538 	btjt flags,#FRUN,2$
      001A2C 4F               [ 1] 4539 	clr a
      001A2D 81               [ 4] 4540 	ret 
      001A2E                       4541 2$:	 
                                   4542 ; create space on cstack to save context 
      001A2E AE 1A 55         [ 2] 4543 	ldw x,#break_point 
      001A31 CD 01 B0         [ 4] 4544 	call puts 
      001A34                       4545 	_drop 2 ;drop return address 
      001A34 5B 02            [ 2]    1     addw sp,#2 
      001A36                       4546 	_vars CTXT_SIZE ; context size 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A36 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001A38 CD 16 57         [ 4] 4547 	call save_context 
      001A3B AE 16 C8         [ 2] 4548 	ldw x,#tib 
      001A3E CF 00 04         [ 2] 4549 	ldw basicptr,x
      001A41 7F               [ 1] 4550 	clr (x)
      001A42 72 5F 00 03      [ 1] 4551 	clr count  
      001A46 5F               [ 1] 4552 	clrw x 
      001A47 CF 00 00         [ 2] 4553 	ldw in.w,x
      001A4A 72 11 00 1F      [ 1] 4554 	bres flags,#FRUN 
      001A4E 72 18 00 1F      [ 1] 4555 	bset flags,#FBREAK
      001A52 CC 07 AF         [ 2] 4556 	jp interp_loop 
      001A55 0A 62 72 65 61 6B 20  4557 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4558 
                                   4559 ;-----------------------
                                   4560 ; BASIC: NEW
                                   4561 ; from command line only 
                                   4562 ; free program memory
                                   4563 ; and clear variables 
                                   4564 ;------------------------
      001A73                       4565 new: 
      001A73 72 01 00 1F 02   [ 2] 4566 	btjf flags,#FRUN,0$ 
      001A78 4F               [ 1] 4567 	clr a 
      001A79 81               [ 4] 4568 	ret 
      001A7A                       4569 0$:	
      001A7A CD 05 D1         [ 4] 4570 	call clear_basic 
      001A7D 81               [ 4] 4571 	ret 
                                   4572 	 
                                   4573 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4574 ;   file system routines
                                   4575 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4576 
                                   4577 ;--------------------
                                   4578 ; input:
                                   4579 ;   X     increment 
                                   4580 ; output:
                                   4581 ;   farptr  incremented 
                                   4582 ;---------------------
      001A7E                       4583 incr_farptr:
      001A7E 72 BB 00 11      [ 2] 4584 	addw x,farptr+1 
      001A82 24 04            [ 1] 4585 	jrnc 1$
      001A84 72 5C 00 10      [ 1] 4586 	inc farptr 
      001A88 CF 00 11         [ 2] 4587 1$:	ldw farptr+1,x  
      001A8B 81               [ 4] 4588 	ret 
                                   4589 
                                   4590 ;------------------------------
                                   4591 ; extended flash memory used as FLASH_DRIVE 
                                   4592 ; seek end of used flash drive   
                                   4593 ; starting at 0x10000 address.
                                   4594 ; 4 consecutives 0 bytes signal free space. 
                                   4595 ; input:
                                   4596 ;	none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4597 ; output:
                                   4598 ;   ffree     free_addr| 0 if memory full.
                                   4599 ;------------------------------
      001A8C                       4600 seek_fdrive:
                                   4601 ; start scan at 0x10000 address 
      001A8C A6 01            [ 1] 4602 	ld a,#1
      001A8E C7 00 10         [ 1] 4603 	ld farptr,a 
      001A91 5F               [ 1] 4604 	clrw x 
      001A92 CF 00 11         [ 2] 4605 	ldw farptr+1,x 
      001A95                       4606 1$:
      001A95 AE 00 03         [ 2] 4607 	ldw x,#3  
      001A98 92 AF 00 10      [ 5] 4608 2$:	ldf a,([farptr],x) 
      001A9C 26 05            [ 1] 4609 	jrne 3$
      001A9E 5A               [ 2] 4610 	decw x
      001A9F 2A F7            [ 1] 4611 	jrpl 2$
      001AA1 20 19            [ 2] 4612 	jra 4$ 
      001AA3 5C               [ 1] 4613 3$:	incw x 
      001AA4 CD 1A 7E         [ 4] 4614 	call incr_farptr
      001AA7 AE 02 7F         [ 2] 4615 	ldw x,#0x27f 
      001AAA C3 00 10         [ 2] 4616 	cpw x,farptr
      001AAD 2A E6            [ 1] 4617 	jrpl 1$
                                   4618 ; drive full 
      001AAF 72 5F 00 13      [ 1] 4619 	clr ffree 
      001AB3 72 5F 00 14      [ 1] 4620 	clr ffree+1 
      001AB7 72 5F 00 15      [ 1] 4621 	clr ffree+2 
      001ABB 81               [ 4] 4622 	ret
      001ABC                       4623 4$: ; copy farptr to ffree	 
      001ABC CE 00 10         [ 2] 4624 	ldw x,farptr 
      001ABF C6 00 12         [ 1] 4625 	ld a,farptr+2 
      001AC2 CF 00 13         [ 2] 4626 	ldw ffree,x 
      001AC5 C7 00 15         [ 1] 4627 	ld ffree+2,a  
      001AC8 81               [ 4] 4628 	ret 
                                   4629 
                                   4630 ;-----------------------
                                   4631 ; compare file name 
                                   4632 ; with name pointed by Y  
                                   4633 ; input:
                                   4634 ;   farptr   file name 
                                   4635 ;   Y        target name 
                                   4636 ; output:
                                   4637 ;   farptr 	 at file_name
                                   4638 ;   X 		 farptr[x] point at size field  
                                   4639 ;   Carry    0|1 no match|match  
                                   4640 ;----------------------
      001AC9                       4641 cmp_name:
      001AC9 5F               [ 1] 4642 	clrw x
      001ACA 92 AF 00 10      [ 5] 4643 1$:	ldf a,([farptr],x)
      001ACE 90 F1            [ 1] 4644 	cp a,(y)
      001AD0 26 08            [ 1] 4645 	jrne 4$
      001AD2 4D               [ 1] 4646 	tnz a 
      001AD3 27 12            [ 1] 4647 	jreq 9$ 
      001AD5 5C               [ 1] 4648     incw x 
      001AD6 90 5C            [ 1] 4649 	incw y 
      001AD8 20 F0            [ 2] 4650 	jra 1$
      001ADA                       4651 4$: ;no match 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001ADA 4D               [ 1] 4652 	tnz a 
      001ADB 27 07            [ 1] 4653 	jreq 5$
      001ADD 5C               [ 1] 4654 	incw x 
      001ADE 92 AF 00 10      [ 5] 4655 	ldf a,([farptr],x)
      001AE2 20 F6            [ 2] 4656 	jra 4$  
      001AE4 5C               [ 1] 4657 5$:	incw x ; farptr[x] point at 'size' field 
      001AE5 98               [ 1] 4658 	rcf 
      001AE6 81               [ 4] 4659 	ret
      001AE7                       4660 9$: ; match  
      001AE7 5C               [ 1] 4661 	incw x  ; farptr[x] at 'size' field 
      001AE8 99               [ 1] 4662 	scf 
      001AE9 81               [ 4] 4663 	ret 
                                   4664 
                                   4665 ;-----------------------
                                   4666 ; search file in 
                                   4667 ; flash memory 
                                   4668 ; input:
                                   4669 ;   Y       file name  
                                   4670 ; output:
                                   4671 ;   farptr  addr at name|0
                                   4672 ;-----------------------
                           000001  4673 	FSIZE=1
                           000003  4674 	YSAVE=3
                           000004  4675 	VSIZE=4 
      001AEA                       4676 search_file: 
      001AEA                       4677 	_vars VSIZE
      001AEA 52 04            [ 2]    1     sub sp,#VSIZE 
      001AEC 17 03            [ 2] 4678 	ldw (YSAVE,sp),y  
      001AEE 5F               [ 1] 4679 	clrw x 
      001AEF CF 00 11         [ 2] 4680 	ldw farptr+1,x 
      001AF2 35 01 00 10      [ 1] 4681 	mov farptr,#1
      001AF6                       4682 1$:	
                                   4683 ; check if farptr is after any file 
                                   4684 ; if  0 then so.
      001AF6 92 BC 00 10      [ 5] 4685 	ldf a,[farptr]
      001AFA 27 25            [ 1] 4686 	jreq 6$
      001AFC 5F               [ 1] 4687 2$: clrw x 	
      001AFD 16 03            [ 2] 4688 	ldw y,(YSAVE,sp) 
      001AFF CD 1A C9         [ 4] 4689 	call cmp_name
      001B02 25 2D            [ 1] 4690 	jrc 9$
      001B04 92 AF 00 10      [ 5] 4691 	ldf a,([farptr],x)
      001B08 6B 01            [ 1] 4692 	ld (FSIZE,sp),a 
      001B0A 5C               [ 1] 4693 	incw x 
      001B0B 92 AF 00 10      [ 5] 4694 	ldf a,([farptr],x)
      001B0F 6B 02            [ 1] 4695 	ld (FSIZE+1,sp),a 
      001B11 5C               [ 1] 4696 	incw x 
      001B12 72 FB 01         [ 2] 4697 	addw x,(FSIZE,sp) ; count to skip 
      001B15 5C               [ 1] 4698 	incw x ; skip over EOF marker 
      001B16 CD 1A 7E         [ 4] 4699 	call incr_farptr ; now at next file 'name_field'
      001B19 AE 02 80         [ 2] 4700 	ldw x,#0x280
      001B1C C3 00 10         [ 2] 4701 	cpw x,farptr 
      001B1F 2A D5            [ 1] 4702 	jrpl 1$
      001B21                       4703 6$: ; file not found 
      001B21 72 5F 00 10      [ 1] 4704 	clr farptr
      001B25 72 5F 00 11      [ 1] 4705 	clr farptr+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B29 72 5F 00 12      [ 1] 4706 	clr farptr+2 
      001B2D                       4707 	_drop VSIZE 
      001B2D 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B2F 98               [ 1] 4708 	rcf
      001B30 81               [ 4] 4709 	ret
      001B31                       4710 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001B31                       4711 	_drop VSIZE 
      001B31 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B33 99               [ 1] 4712 	scf 	
      001B34 81               [ 4] 4713 	ret
                                   4714 
                                   4715 ;--------------------------------
                                   4716 ; BASIC: SAVE "name" 
                                   4717 ; save text program in 
                                   4718 ; flash memory used as 
                                   4719 ;--------------------------------
                           000001  4720 	BSIZE=1
                           000003  4721 	NAMEPTR=3
                           000004  4722 	VSIZE=4
      001B35                       4723 save:
      001B35 72 01 00 1F 05   [ 2] 4724 	btjf flags,#FRUN,0$ 
      001B3A A6 07            [ 1] 4725 	ld a,#ERR_CMD_ONLY 
      001B3C CC 07 01         [ 2] 4726 	jp tb_error
      001B3F                       4727 0$:	 
      001B3F CE 00 1A         [ 2] 4728 	ldw x,txtend 
      001B42 72 B0 00 18      [ 2] 4729 	subw x,txtbgn
      001B46 26 01            [ 1] 4730 	jrne 1$
                                   4731 ; nothing to save 
      001B48 81               [ 4] 4732 	ret 
      001B49                       4733 1$:	
      001B49                       4734 	_vars VSIZE 
      001B49 52 04            [ 2]    1     sub sp,#VSIZE 
      001B4B 1F 01            [ 2] 4735 	ldw (BSIZE,sp),x 
      001B4D CD 07 DF         [ 4] 4736 	call next_token	
      001B50 A1 0A            [ 1] 4737 	cp a,#TK_QSTR
      001B52 27 03            [ 1] 4738 	jreq 2$
      001B54 CC 06 FF         [ 2] 4739 	jp syntax_error
      001B57                       4740 2$: 
      001B57 90 CE 00 04      [ 2] 4741 	ldw y,basicptr 
      001B5B 72 B9 00 00      [ 2] 4742 	addw y,in.w
      001B5F 17 03            [ 2] 4743 	ldw (NAMEPTR,sp),y  
      001B61 55 00 03 00 01   [ 1] 4744 	mov in,count 
                                   4745 ; check if enough free space 
      001B66 93               [ 1] 4746 	ldw x,y 
      001B67 CD 02 72         [ 4] 4747 	call strlen 
      001B6A 1C 00 03         [ 2] 4748 	addw x,#3 
      001B6D 72 FB 01         [ 2] 4749 	addw x,(BSIZE,sp)
      001B70 72 5D 00 13      [ 1] 4750 	tnz ffree 
      001B74 26 0B            [ 1] 4751 	jrne 21$
      001B76 72 B0 00 14      [ 2] 4752 	subw x,ffree+1 
      001B7A 23 05            [ 2] 4753 	jrule 21$
      001B7C A6 01            [ 1] 4754 	ld a,#ERR_MEM_FULL 
      001B7E CC 07 01         [ 2] 4755 	jp tb_error
      001B81                       4756 21$: 
                                   4757 ; check for existing file of that name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B81 16 03            [ 2] 4758 	ldw y,(NAMEPTR,sp)	
      001B83 CD 1A EA         [ 4] 4759 	call search_file 
      001B86 24 05            [ 1] 4760 	jrnc 3$ 
      001B88 A6 08            [ 1] 4761 	ld a,#ERR_DUPLICATE 
      001B8A CC 07 01         [ 2] 4762 	jp tb_error 
      001B8D                       4763 3$:	;** write file name to flash **
      001B8D CE 00 13         [ 2] 4764 	ldw x,ffree 
      001B90 C6 00 15         [ 1] 4765 	ld a,ffree+2 
      001B93 CF 00 10         [ 2] 4766 	ldw farptr,x 
      001B96 C7 00 12         [ 1] 4767 	ld farptr+2,a 
      001B99 1E 03            [ 2] 4768 	ldw x,(NAMEPTR,sp)  
      001B9B CD 02 72         [ 4] 4769 	call strlen 
      001B9E 5C               [ 1] 4770 	incw  x
      001B9F 1F 01            [ 2] 4771 	ldw (BSIZE,sp),x  
      001BA1 5F               [ 1] 4772 	clrw x   
      001BA2 16 03            [ 2] 4773 	ldw y,(NAMEPTR,sp)
      001BA4 CD 01 51         [ 4] 4774 	call write_block  
                                   4775 ;** write file length after name **
      001BA7 CE 00 1A         [ 2] 4776 	ldw x,txtend 
      001BAA 72 B0 00 18      [ 2] 4777 	subw x,txtbgn
      001BAE 1F 01            [ 2] 4778 	ldw (BSIZE,sp),x 
      001BB0 5F               [ 1] 4779 	clrw x 
      001BB1 7B 01            [ 1] 4780 	ld a,(1,sp)
      001BB3 CD 00 DC         [ 4] 4781 	call write_byte 
      001BB6 5C               [ 1] 4782 	incw x 
      001BB7 7B 02            [ 1] 4783 	ld a,(2,sp)
      001BB9 CD 00 DC         [ 4] 4784 	call write_byte
      001BBC 5C               [ 1] 4785 	incw x  
      001BBD CD 1A 7E         [ 4] 4786 	call incr_farptr ; move farptr after SIZE field 
                                   4787 ;** write BASIC text **
                                   4788 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001BC0 1E 01            [ 2] 4789 	ldw x,(BSIZE,sp)
      001BC2 89               [ 2] 4790 	pushw x ; write_block argument 
      001BC3 5F               [ 1] 4791 	clrw x 
      001BC4 90 CE 00 18      [ 2] 4792 	ldw y,txtbgn  ; BASIC text to save 
      001BC8 CD 01 51         [ 4] 4793 	call write_block 
      001BCB                       4794 	_drop 2 ;  drop write_block argument  
      001BCB 5B 02            [ 2]    1     addw sp,#2 
                                   4795 ; write en end of file marker 
      001BCD AE 00 01         [ 2] 4796 	ldw x,#1
      001BD0 A6 FF            [ 1] 4797 	ld a,#EOF  
      001BD2 CD 00 DC         [ 4] 4798 	call write_byte 
      001BD5 CD 1A 7E         [ 4] 4799 	call incr_farptr
                                   4800 ; save farptr in ffree
      001BD8 CE 00 10         [ 2] 4801 	ldw x,farptr 
      001BDB C6 00 12         [ 1] 4802 	ld a,farptr+2 
      001BDE CF 00 13         [ 2] 4803 	ldw ffree,x 
      001BE1 C7 00 15         [ 1] 4804 	ld ffree+2,a
                                   4805 ;write 4 zero bytes as an end of all files marker 
      001BE4 5F               [ 1] 4806     clrw x 
      001BE5 4B 04            [ 1] 4807 	push #4 
      001BE7                       4808 4$:
      001BE7 4F               [ 1] 4809 	clr a 
      001BE8 CD 00 DC         [ 4] 4810 	call write_byte 
      001BEB 5C               [ 1] 4811 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001BEC 0A 01            [ 1] 4812 	dec (1,sp)
      001BEE 26 F7            [ 1] 4813 	jrne 4$
      001BF0 84               [ 1] 4814 5$: pop a 
                                   4815 ; display saved size  
      001BF1 1E 01            [ 2] 4816 	ldw x,(BSIZE,sp) 
      001BF3 CD 09 78         [ 4] 4817 	call print_int 
      001BF6                       4818 	_drop VSIZE 
      001BF6 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BF8 81               [ 4] 4819 	ret 
                                   4820 
                                   4821 
                                   4822 ;------------------------
                                   4823 ; BASIC: LOAD "file" 
                                   4824 ; load file to RAM 
                                   4825 ; for execution 
                                   4826 ;------------------------
      001BF9                       4827 load:
      001BF9 72 01 00 1F 07   [ 2] 4828 	btjf flags,#FRUN,0$ 
      001BFE 27 05            [ 1] 4829 	jreq 0$ 
      001C00 A6 07            [ 1] 4830 	ld a,#ERR_CMD_ONLY 
      001C02 CC 07 01         [ 2] 4831 	jp tb_error 
      001C05                       4832 0$:	
      001C05 CD 07 DF         [ 4] 4833 	call next_token 
      001C08 A1 0A            [ 1] 4834 	cp a,#TK_QSTR
      001C0A 27 03            [ 1] 4835 	jreq 1$
      001C0C CC 06 FF         [ 2] 4836 	jp syntax_error 
      001C0F                       4837 1$:	
      001C0F 90 CE 00 04      [ 2] 4838 	ldw y,basicptr
      001C13 72 B9 00 00      [ 2] 4839 	addw y,in.w 
      001C17 55 00 03 00 01   [ 1] 4840 	mov in,count 
      001C1C CD 1A EA         [ 4] 4841 	call search_file 
      001C1F 25 05            [ 1] 4842 	jrc 2$ 
      001C21 A6 09            [ 1] 4843 	ld a,#ERR_NOT_FILE
      001C23 CC 07 01         [ 2] 4844 	jp tb_error  
      001C26                       4845 2$:	
      001C26 CD 1A 7E         [ 4] 4846 	call incr_farptr  
      001C29 CD 05 D1         [ 4] 4847 	call clear_basic  
      001C2C 5F               [ 1] 4848 	clrw x
      001C2D 92 AF 00 10      [ 5] 4849 	ldf a,([farptr],x)
      001C31 90 95            [ 1] 4850 	ld yh,a 
      001C33 5C               [ 1] 4851 	incw x  
      001C34 92 AF 00 10      [ 5] 4852 	ldf a,([farptr],x)
      001C38 5C               [ 1] 4853 	incw x 
      001C39 90 97            [ 1] 4854 	ld yl,a 
      001C3B 72 B9 00 18      [ 2] 4855 	addw y,txtbgn
      001C3F 90 CF 00 1A      [ 2] 4856 	ldw txtend,y
      001C43 90 CE 00 18      [ 2] 4857 	ldw y,txtbgn
      001C47                       4858 3$:	; load BASIC text 	
      001C47 92 AF 00 10      [ 5] 4859 	ldf a,([farptr],x)
      001C4B 90 F7            [ 1] 4860 	ld (y),a 
      001C4D 5C               [ 1] 4861 	incw x 
      001C4E 90 5C            [ 1] 4862 	incw y 
      001C50 90 C3 00 1A      [ 2] 4863 	cpw y,txtend 
      001C54 2B F1            [ 1] 4864 	jrmi 3$
                                   4865 ; print loaded size 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C56 CE 00 1A         [ 2] 4866 	ldw x,txtend 
      001C59 72 B0 00 18      [ 2] 4867 	subw x,txtbgn
      001C5D CD 09 78         [ 4] 4868 	call print_int 
      001C60 81               [ 4] 4869 	ret 
                                   4870 
                                   4871 ;-----------------------------------
                                   4872 ; BASIC: FORGET ["file_name"] 
                                   4873 ; erase file_name and all others 
                                   4874 ; after it. 
                                   4875 ; without argument erase all files 
                                   4876 ;-----------------------------------
      001C61                       4877 forget:
      001C61 CD 07 DF         [ 4] 4878 	call next_token 
      001C64 A1 00            [ 1] 4879 	cp a,#TK_NONE 
      001C66 27 26            [ 1] 4880 	jreq 3$ 
      001C68 A1 0A            [ 1] 4881 	cp a,#TK_QSTR
      001C6A 27 03            [ 1] 4882 	jreq 1$
      001C6C CC 06 FF         [ 2] 4883 	jp syntax_error
      001C6F 90 CE 00 04      [ 2] 4884 1$: ldw y,basicptr
      001C73 72 B9 00 00      [ 2] 4885 	addw y,in.w
      001C77 55 00 03 00 01   [ 1] 4886 	mov in,count 
      001C7C CD 1A EA         [ 4] 4887 	call search_file
      001C7F 25 05            [ 1] 4888 	jrc 2$
      001C81 A6 09            [ 1] 4889 	ld a,#ERR_NOT_FILE 
      001C83 CC 07 01         [ 2] 4890 	jp tb_error 
      001C86                       4891 2$: 
      001C86 CE 00 10         [ 2] 4892 	ldw x,farptr
      001C89 C6 00 12         [ 1] 4893 	ld a,farptr+2
      001C8C 20 0A            [ 2] 4894 	jra 4$ 
      001C8E                       4895 3$: ; forget all files 
      001C8E AE 01 00         [ 2] 4896 	ldw x,#0x100
      001C91 4F               [ 1] 4897 	clr a 
      001C92 CF 00 10         [ 2] 4898 	ldw farptr,x 
      001C95 C7 00 12         [ 1] 4899 	ld farptr+2,a 
      001C98                       4900 4$:
      001C98 CF 00 13         [ 2] 4901 	ldw ffree,x 
      001C9B C7 00 15         [ 1] 4902 	ld ffree+2,a 
      001C9E 4B 04            [ 1] 4903 	push #4
      001CA0 5F               [ 1] 4904 	clrw x 
      001CA1                       4905 5$: 
      001CA1 4F               [ 1] 4906 	clr a  
      001CA2 CD 00 DC         [ 4] 4907 	call write_byte 
      001CA5 5C               [ 1] 4908 	incw x 
      001CA6 0A 01            [ 1] 4909 	dec (1,sp)
      001CA8 26 F7            [ 1] 4910 	jrne 5$	
      001CAA 84               [ 1] 4911 6$: pop a 
      001CAB 81               [ 4] 4912 	ret 
                                   4913 
                                   4914 ;----------------------
                                   4915 ; BASIC: DIR 
                                   4916 ; list saved files 
                                   4917 ;----------------------
                           000001  4918 	COUNT=1 ; files counter 
                           000002  4919 	VSIZE=2 
      001CAC                       4920 directory:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001CAC                       4921 	_vars VSIZE 
      001CAC 52 02            [ 2]    1     sub sp,#VSIZE 
      001CAE 5F               [ 1] 4922 	clrw x 
      001CAF 1F 01            [ 2] 4923 	ldw (COUNT,sp),x 
      001CB1 CF 00 11         [ 2] 4924 	ldw farptr+1,x 
      001CB4 35 01 00 10      [ 1] 4925 	mov farptr,#1 
      001CB8                       4926 dir_loop:
      001CB8 5F               [ 1] 4927 	clrw x 
      001CB9 92 AF 00 10      [ 5] 4928 	ldf a,([farptr],x)
      001CBD 27 39            [ 1] 4929 	jreq 8$ 
      001CBF                       4930 1$: ;name loop 	
      001CBF 92 AF 00 10      [ 5] 4931 	ldf a,([farptr],x)
      001CC3 27 06            [ 1] 4932 	jreq 2$ 
      001CC5 CD 01 9E         [ 4] 4933 	call putc 
      001CC8 5C               [ 1] 4934 	incw x 
      001CC9 20 F4            [ 2] 4935 	jra 1$
      001CCB 5C               [ 1] 4936 2$: incw x ; skip ending 0. 
      001CCC A6 20            [ 1] 4937 	ld a,#SPACE 
      001CCE CD 01 9E         [ 4] 4938 	call putc 
                                   4939 ; get file size 	
      001CD1 92 AF 00 10      [ 5] 4940 	ldf a,([farptr],x)
      001CD5 90 95            [ 1] 4941 	ld yh,a 
      001CD7 5C               [ 1] 4942 	incw x 
      001CD8 92 AF 00 10      [ 5] 4943 	ldf a,([farptr],x)
      001CDC 5C               [ 1] 4944 	incw x 
      001CDD 90 97            [ 1] 4945 	ld yl,a 
      001CDF 90 89            [ 2] 4946 	pushw y 
      001CE1 72 FB 01         [ 2] 4947 	addw x,(1,sp)
      001CE4 5C               [ 1] 4948 	incw x ; skip EOF marker 
                                   4949 ; skip to next file 
      001CE5 CD 1A 7E         [ 4] 4950 	call incr_farptr 
                                   4951 ; print file size 
      001CE8 85               [ 2] 4952 	popw x ; file size 
      001CE9 CD 09 78         [ 4] 4953 	call print_int 
      001CEC A6 0D            [ 1] 4954 	ld a,#CR 
      001CEE CD 01 9E         [ 4] 4955 	call putc
      001CF1 1E 01            [ 2] 4956 	ldw x,(COUNT,sp)
      001CF3 5C               [ 1] 4957 	incw x
      001CF4 1F 01            [ 2] 4958 	ldw (COUNT,sp),x  
      001CF6 20 C0            [ 2] 4959 	jra dir_loop 
      001CF8                       4960 8$: ; print number of files 
      001CF8 1E 01            [ 2] 4961 	ldw x,(COUNT,sp)
      001CFA CD 09 78         [ 4] 4962 	call print_int 
      001CFD AE 1D 2D         [ 2] 4963 	ldw x,#file_count 
      001D00 CD 01 B0         [ 4] 4964 	call puts  
                                   4965 ; print drive free space 	
      001D03 A6 FF            [ 1] 4966 	ld a,#0xff 
      001D05 C0 00 15         [ 1] 4967 	sub a,ffree+2 
      001D08 C7 00 09         [ 1] 4968 	ld acc8,a 
      001D0B A6 7F            [ 1] 4969 	ld a,#0x7f 
      001D0D C2 00 14         [ 1] 4970 	sbc a,ffree+1 
      001D10 C7 00 08         [ 1] 4971 	ld acc16,a 
      001D13 A6 02            [ 1] 4972 	ld a,#2 
      001D15 C2 00 13         [ 1] 4973 	sbc a,ffree 
      001D18 C7 00 07         [ 1] 4974 	ld acc24,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D1B 5F               [ 1] 4975 	clrw x  
      001D1C A6 06            [ 1] 4976 	ld a,#6 
      001D1E 97               [ 1] 4977 	ld xl,a 
      001D1F A6 0A            [ 1] 4978 	ld a,#10 
      001D21 CD 09 30         [ 4] 4979 	call prti24 
      001D24 AE 1D 35         [ 2] 4980 	ldw x,#drive_free
      001D27 CD 01 B0         [ 4] 4981 	call puts 
      001D2A                       4982 	_drop VSIZE 
      001D2A 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D2C 81               [ 4] 4983 	ret
      001D2D 20 66 69 6C 65 73 0A  4984 file_count: .asciz " files\n"
             00
      001D35 20 62 79 74 65 73 20  4985 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4986 
                                   4987 ;---------------------
                                   4988 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4989 ; write 1 or more byte to FLASH or EEPROM
                                   4990 ; starting at address  
                                   4991 ; input:
                                   4992 ;   expr1  	is address 
                                   4993 ;   expr2   is byte to write
                                   4994 ; output:
                                   4995 ;   none 
                                   4996 ;---------------------
                           000001  4997 	ADDR=1
                           000002  4998 	VSIZ=2 
      001D42                       4999 write:
      001D42                       5000 	_vars VSIZE 
      001D42 52 02            [ 2]    1     sub sp,#VSIZE 
      001D44 72 5F 00 10      [ 1] 5001 	clr farptr ; expect 16 bits address 
      001D48 CD 12 99         [ 4] 5002 	call expression
      001D4B A1 04            [ 1] 5003 	cp a,#TK_INTGR 
      001D4D 27 03            [ 1] 5004 	jreq 0$
      001D4F CC 06 FF         [ 2] 5005 	jp syntax_error
      001D52 1F 01            [ 2] 5006 0$: ldw (ADDR,sp),x 
      001D54 CD 07 DF         [ 4] 5007 	call next_token 
      001D57 A1 0D            [ 1] 5008 	cp a,#TK_COMMA 
      001D59 27 02            [ 1] 5009 	jreq 1$ 
      001D5B 20 19            [ 2] 5010 	jra 9$ 
      001D5D CD 12 99         [ 4] 5011 1$:	call expression
      001D60 A1 04            [ 1] 5012 	cp a,#TK_INTGR
      001D62 27 03            [ 1] 5013 	jreq 2$
      001D64 CC 06 FF         [ 2] 5014 	jp syntax_error
      001D67 9F               [ 1] 5015 2$:	ld a,xl 
      001D68 1E 01            [ 2] 5016 	ldw x,(ADDR,sp) 
      001D6A CF 00 11         [ 2] 5017 	ldw farptr+1,x 
      001D6D 5F               [ 1] 5018 	clrw x 
      001D6E CD 00 DC         [ 4] 5019 	call write_byte
      001D71 1E 01            [ 2] 5020 	ldw x,(ADDR,sp)
      001D73 5C               [ 1] 5021 	incw x 
      001D74 20 DC            [ 2] 5022 	jra 0$ 
      001D76                       5023 9$:
      001D76                       5024 	_drop VSIZE
      001D76 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001D78 81               [ 4] 5025 	ret 
                                   5026 
                                   5027 
                                   5028 ;---------------------
                                   5029 ;BASIC: CHAR(expr)
                                   5030 ; évaluate expression 
                                   5031 ; and take the 7 least 
                                   5032 ; bits as ASCII character
                                   5033 ;---------------------
      001D79                       5034 char:
      001D79 A6 0B            [ 1] 5035 	ld a,#TK_LPAREN 
      001D7B CD 11 91         [ 4] 5036 	call expect 
      001D7E CD 12 DD         [ 4] 5037 	call relation 
      001D81 A1 04            [ 1] 5038 	cp a,#TK_INTGR 
      001D83 27 03            [ 1] 5039 	jreq 1$
      001D85 CC 06 FF         [ 2] 5040 	jp syntax_error
      001D88 89               [ 2] 5041 1$:	pushw x 
      001D89 A6 0C            [ 1] 5042 	ld a,#TK_RPAREN 
      001D8B CD 11 91         [ 4] 5043 	call expect
      001D8E 85               [ 2] 5044 	popw x  
      001D8F 9F               [ 1] 5045 	ld a,xl 
      001D90 A4 7F            [ 1] 5046 	and a,#0x7f 
      001D92 97               [ 1] 5047 	ld xl,a
      001D93 A6 03            [ 1] 5048 	ld a,#TK_CHAR
      001D95 81               [ 4] 5049 	ret
                                   5050 
                                   5051 ;---------------------
                                   5052 ; BASIC: ASC(string|char)
                                   5053 ; extract first character 
                                   5054 ; of string argument 
                                   5055 ; return it as TK_INTGR 
                                   5056 ;---------------------
      001D96                       5057 ascii:
      001D96 A6 0B            [ 1] 5058 	ld a,#TK_LPAREN
      001D98 CD 11 91         [ 4] 5059 	call expect 
      001D9B CD 07 DF         [ 4] 5060 	call next_token 
      001D9E A1 0A            [ 1] 5061 	cp a,#TK_QSTR 
      001DA0 27 07            [ 1] 5062 	jreq 1$
      001DA2 A1 03            [ 1] 5063 	cp a,#TK_CHAR 
      001DA4 27 06            [ 1] 5064 	jreq 2$ 
      001DA6 CC 06 FF         [ 2] 5065 	jp syntax_error
      001DA9                       5066 1$: 
      001DA9 F6               [ 1] 5067 	ld a,(x)
      001DAA 20 01            [ 2] 5068 	jra 3$
      001DAC                       5069 2$: 
      001DAC 9F               [ 1] 5070 	ld a,xl 
      001DAD 97               [ 1] 5071 3$:	ld xl,a 
      001DAE 4F               [ 1] 5072 	clr a  
      001DAF 95               [ 1] 5073 	ld xh,a 
      001DB0 89               [ 2] 5074 	pushw x  
      001DB1 A6 0C            [ 1] 5075 	ld a,#TK_RPAREN 
      001DB3 CD 11 91         [ 4] 5076 	call expect 
      001DB6 85               [ 2] 5077 	popw x 
      001DB7 A6 04            [ 1] 5078 	ld a,#TK_INTGR 
      001DB9 81               [ 4] 5079 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5080 
                                   5081 ;---------------------
                                   5082 ;BASIC: KEY
                                   5083 ; wait for a character 
                                   5084 ; received from STDIN 
                                   5085 ; input:
                                   5086 ;	none 
                                   5087 ; output:
                                   5088 ;	X 		ASCII character 
                                   5089 ;---------------------
      001DBA                       5090 key:
      001DBA CD 01 A7         [ 4] 5091 	call getc 
      001DBD 5F               [ 1] 5092 	clrw x 
      001DBE 97               [ 1] 5093 	ld xl,a 
      001DBF A6 04            [ 1] 5094 	ld a,#TK_INTGR
      001DC1 81               [ 4] 5095 	ret
                                   5096 
                                   5097 ;----------------------
                                   5098 ; BASIC: QKEY
                                   5099 ; Return true if there 
                                   5100 ; is a character in 
                                   5101 ; waiting in STDIN 
                                   5102 ; input:
                                   5103 ;  none 
                                   5104 ; output:
                                   5105 ;   X 		0|1 
                                   5106 ;-----------------------
      001DC2                       5107 qkey: 
      001DC2 5F               [ 1] 5108 	clrw x 
      001DC3 72 0B 52 40 01   [ 2] 5109 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001DC8 5C               [ 1] 5110 	incw x 
      001DC9 A6 04            [ 1] 5111 9$: ld a,#TK_INTGR
      001DCB 81               [ 4] 5112 	ret 
                                   5113 
                                   5114 ;---------------------
                                   5115 ; BASIC: GPIO(expr,reg)
                                   5116 ; return gpio address 
                                   5117 ; expr {0..8}
                                   5118 ; input:
                                   5119 ;   none 
                                   5120 ; output:
                                   5121 ;   X 		gpio register address
                                   5122 ;----------------------------
      001DCC                       5123 gpio:
      001DCC A6 0B            [ 1] 5124 	ld a,#TK_LPAREN 
      001DCE CD 11 91         [ 4] 5125 	call expect 
      001DD1 CD 11 9E         [ 4] 5126 	call arg_list
      001DD4 A1 02            [ 1] 5127 	cp a,#2
      001DD6 27 03            [ 1] 5128 	jreq 1$
      001DD8 CC 06 FF         [ 2] 5129 	jp syntax_error  
      001DDB                       5130 1$:	
      001DDB A6 0C            [ 1] 5131 	ld a,#TK_RPAREN 
      001DDD CD 11 91         [ 4] 5132 	call expect 
      001DE0 AE 00 02         [ 2] 5133 	ldw x,#2
      001DE3 72 DE 00 16      [ 5] 5134 	ldw x,([dstkptr],x) ; port 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001DE7 2B 1B            [ 1] 5135 	jrmi bad_port
      001DE9 A3 00 09         [ 2] 5136 	cpw x,#9
      001DEC 2A 16            [ 1] 5137 	jrpl bad_port
      001DEE A6 05            [ 1] 5138 	ld a,#5
      001DF0 42               [ 4] 5139 	mul x,a
      001DF1 1C 50 00         [ 2] 5140 	addw x,#GPIO_BASE 
      001DF4 89               [ 2] 5141 	pushw x 
      001DF5 CD 0F 7E         [ 4] 5142 	call dpop 
      001DF8 72 FB 01         [ 2] 5143 	addw x,(1,sp)
      001DFB 1F 01            [ 2] 5144 	ldw (1,sp),x  
      001DFD CD 0F A5         [ 4] 5145 	call ddrop  
      001E00 85               [ 2] 5146 	popw x 
      001E01 A6 04            [ 1] 5147 	ld a,#TK_INTGR
      001E03 81               [ 4] 5148 	ret
      001E04                       5149 bad_port:
      001E04 A6 0A            [ 1] 5150 	ld a,#ERR_BAD_VALUE
      001E06 CC 07 01         [ 2] 5151 	jp tb_error
                                   5152 
                                   5153 
                                   5154 ;-------------------------
                                   5155 ; BASIC: UFLASH 
                                   5156 ; return user flash address
                                   5157 ; input:
                                   5158 ;  none 
                                   5159 ; output:
                                   5160 ;	A		TK_INTGR
                                   5161 ;   X 		user address 
                                   5162 ;---------------------------
      001E09                       5163 uflash:
      001E09 AE 21 80         [ 2] 5164 	ldw x,#user_space 
      001E0C A6 04            [ 1] 5165 	ld a,#TK_INTGR 
      001E0E 81               [ 4] 5166 	ret 
                                   5167 
                                   5168 
                                   5169 ;---------------------
                                   5170 ; BASIC: USR(addr[,arg])
                                   5171 ; execute a function written 
                                   5172 ; in binary code.
                                   5173 ; binary fonction should 
                                   5174 ; return token attribute in A 
                                   5175 ; and value in X. 
                                   5176 ; input:
                                   5177 ;   addr	routine address 
                                   5178 ;   arg 	is an optional argument 
                                   5179 ; output:
                                   5180 ;   A 		token attribute 
                                   5181 ;   X       returned value 
                                   5182 ;---------------------
      001E0F                       5183 usr:
      001E0F 90 89            [ 2] 5184 	pushw y 	
      001E11 A6 0B            [ 1] 5185 	ld a,#TK_LPAREN 
      001E13 CD 11 91         [ 4] 5186 	call expect 
      001E16 CD 11 9E         [ 4] 5187 	call arg_list 
      001E19 A1 01            [ 1] 5188 	cp a,#1 
      001E1B 2A 03            [ 1] 5189 	jrpl 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E1D CC 06 FF         [ 2] 5190 	jp syntax_error 
      001E20 A6 0C            [ 1] 5191 2$: ld a,#TK_RPAREN
      001E22 CD 11 91         [ 4] 5192 	call expect 
      001E25 CD 0F 7E         [ 4] 5193 	call dpop 
      001E28 A1 02            [ 1] 5194 	cp a,#2 
      001E2A 2B 05            [ 1] 5195 	jrmi 4$
      001E2C 90 93            [ 1] 5196 	ldw y,x ; y=arg 
      001E2E CD 0F 7E         [ 4] 5197 	call dpop ;x=addr 
      001E31 51               [ 1] 5198 4$:	exgw y,x ; y=addr,x=arg 
      001E32 90 FD            [ 4] 5199 	call (y)
      001E34 90 85            [ 2] 5200 	popw y 
      001E36 81               [ 4] 5201 	ret 
                                   5202 
                                   5203 ;------------------------------
                                   5204 ; BASIC: BYE 
                                   5205 ; halt mcu in its lowest power mode 
                                   5206 ; wait for reset or external interrupt
                                   5207 ; do a cold start on wakeup.
                                   5208 ;------------------------------
      001E37                       5209 bye:
      001E37 72 0D 52 40 FB   [ 2] 5210 	btjf UART3_SR,#UART_SR_TC,.
      001E3C 8E               [10] 5211 	halt
      001E3D CC 05 4C         [ 2] 5212 	jp cold_start  
                                   5213 
                                   5214 ;----------------------------------
                                   5215 ; BASIC: SLEEP 
                                   5216 ; halt mcu until reset or external
                                   5217 ; interrupt.
                                   5218 ; Resume progam after SLEEP command
                                   5219 ;----------------------------------
      001E40                       5220 sleep:
      001E40 72 0D 52 40 FB   [ 2] 5221 	btjf UART3_SR,#UART_SR_TC,.
      001E45 72 16 00 1F      [ 1] 5222 	bset flags,#FSLEEP
      001E49 8E               [10] 5223 	halt 
      001E4A 81               [ 4] 5224 	ret 
                                   5225 
                                   5226 ;-------------------------------
                                   5227 ; BASIC: PAUSE expr 
                                   5228 ; suspend execution for n msec.
                                   5229 ; input:
                                   5230 ;	none
                                   5231 ; output:
                                   5232 ;	none 
                                   5233 ;------------------------------
      001E4B                       5234 pause:
      001E4B CD 12 99         [ 4] 5235 	call expression
      001E4E A1 04            [ 1] 5236 	cp a,#TK_INTGR
      001E50 27 03            [ 1] 5237 	jreq pause02 
      001E52 CC 06 FF         [ 2] 5238 	jp syntax_error
      001E55                       5239 pause02: 
      001E55 5D               [ 2] 5240 1$: tnzw x 
      001E56 27 04            [ 1] 5241 	jreq 2$
      001E58 8F               [10] 5242 	wfi 
      001E59 5A               [ 2] 5243 	decw x 
      001E5A 26 F9            [ 1] 5244 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E5C 4F               [ 1] 5245 2$:	clr a 
      001E5D 81               [ 4] 5246 	ret 
                                   5247 
                                   5248 ;------------------------------
                                   5249 ; BASIC: TICKS
                                   5250 ; return msec ticks counter value 
                                   5251 ; input:
                                   5252 ; 	none 
                                   5253 ; output:
                                   5254 ;	X 		TK_INTGR
                                   5255 ;-------------------------------
      001E5E                       5256 get_ticks:
      001E5E CE 00 0A         [ 2] 5257 	ldw x,ticks 
      001E61 A6 04            [ 1] 5258 	ld a,#TK_INTGR
      001E63 81               [ 4] 5259 	ret 
                                   5260 
                                   5261 
                                   5262 
                                   5263 ;------------------------------
                                   5264 ; BASIC: ABS(expr)
                                   5265 ; return absolute value of expr.
                                   5266 ; input:
                                   5267 ;   none
                                   5268 ; output:
                                   5269 ;   X     	positive integer
                                   5270 ;-------------------------------
      001E64                       5271 abs:
      001E64 A6 0B            [ 1] 5272 	ld a,#TK_LPAREN
      001E66 CD 11 91         [ 4] 5273 	call expect 
      001E69 CD 11 9E         [ 4] 5274 	call arg_list
      001E6C A1 01            [ 1] 5275 	cp a,#1 
      001E6E 27 03            [ 1] 5276 	jreq 0$ 
      001E70 CC 06 FF         [ 2] 5277 	jp syntax_error
      001E73                       5278 0$:  
      001E73 A6 0C            [ 1] 5279 	ld a,#TK_RPAREN 
      001E75 CD 11 91         [ 4] 5280 	call expect 
      001E78 CD 0F 7E         [ 4] 5281     call dpop   
      001E7B 9E               [ 1] 5282 	ld a,xh 
      001E7C A5 80            [ 1] 5283 	bcp a,#0x80 
      001E7E 27 01            [ 1] 5284 	jreq 2$ 
      001E80 50               [ 2] 5285 	negw x 
      001E81 A6 04            [ 1] 5286 2$: ld a,#TK_INTGR 
      001E83 81               [ 4] 5287 	ret 
                                   5288 
                                   5289 ;------------------------------
                                   5290 ; BASIC: RND(expr)
                                   5291 ; return random number 
                                   5292 ; between 1 and expr inclusive
                                   5293 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5294 ; input:
                                   5295 ; 	none 
                                   5296 ; output:
                                   5297 ;	X 		random positive integer 
                                   5298 ;------------------------------
      001E84                       5299 random:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E84 A6 0B            [ 1] 5300 	ld a,#TK_LPAREN 
      001E86 CD 11 91         [ 4] 5301 	call expect 
      001E89 CD 11 9E         [ 4] 5302 	call arg_list 
      001E8C A1 01            [ 1] 5303 	cp a,#1
      001E8E 27 03            [ 1] 5304 	jreq 1$
      001E90 CC 06 FF         [ 2] 5305 	jp syntax_error
      001E93 A6 0C            [ 1] 5306 1$: ld a,#TK_RPAREN
      001E95 CD 11 91         [ 4] 5307 	call expect 
      001E98 CD 0F 7E         [ 4] 5308 	call dpop 
      001E9B 89               [ 2] 5309 	pushw x 
      001E9C 9E               [ 1] 5310 	ld a,xh 
      001E9D A5 80            [ 1] 5311 	bcp a,#0x80 
      001E9F 27 05            [ 1] 5312 	jreq 2$
      001EA1 A6 0A            [ 1] 5313 	ld a,#ERR_BAD_VALUE
      001EA3 CC 07 01         [ 2] 5314 	jp tb_error
      001EA6                       5315 2$: 
                                   5316 ; acc16=(x<<5)^x 
      001EA6 CE 00 0C         [ 2] 5317 	ldw x,seedx 
      001EA9 58               [ 2] 5318 	sllw x 
      001EAA 58               [ 2] 5319 	sllw x 
      001EAB 58               [ 2] 5320 	sllw x 
      001EAC 58               [ 2] 5321 	sllw x 
      001EAD 58               [ 2] 5322 	sllw x 
      001EAE 9E               [ 1] 5323 	ld a,xh 
      001EAF C8 00 0C         [ 1] 5324 	xor a,seedx 
      001EB2 C7 00 08         [ 1] 5325 	ld acc16,a 
      001EB5 9F               [ 1] 5326 	ld a,xl 
      001EB6 C8 00 0D         [ 1] 5327 	xor a,seedx+1 
      001EB9 C7 00 09         [ 1] 5328 	ld acc8,a 
                                   5329 ; seedx=seedy 
      001EBC CE 00 0E         [ 2] 5330 	ldw x,seedy 
      001EBF CF 00 0C         [ 2] 5331 	ldw seedx,x  
                                   5332 ; seedy=seedy^(seedy>>1)
      001EC2 90 54            [ 2] 5333 	srlw y 
      001EC4 90 9E            [ 1] 5334 	ld a,yh 
      001EC6 C8 00 0E         [ 1] 5335 	xor a,seedy 
      001EC9 C7 00 0E         [ 1] 5336 	ld seedy,a  
      001ECC 90 9F            [ 1] 5337 	ld a,yl 
      001ECE C8 00 0F         [ 1] 5338 	xor a,seedy+1 
      001ED1 C7 00 0F         [ 1] 5339 	ld seedy+1,a 
                                   5340 ; acc16>>3 
      001ED4 CE 00 08         [ 2] 5341 	ldw x,acc16 
      001ED7 54               [ 2] 5342 	srlw x 
      001ED8 54               [ 2] 5343 	srlw x 
      001ED9 54               [ 2] 5344 	srlw x 
                                   5345 ; x=acc16^x 
      001EDA 9E               [ 1] 5346 	ld a,xh 
      001EDB C8 00 08         [ 1] 5347 	xor a,acc16 
      001EDE 95               [ 1] 5348 	ld xh,a 
      001EDF 9F               [ 1] 5349 	ld a,xl 
      001EE0 C8 00 09         [ 1] 5350 	xor a,acc8 
      001EE3 97               [ 1] 5351 	ld xl,a 
                                   5352 ; seedy=x^seedy 
      001EE4 C8 00 0F         [ 1] 5353 	xor a,seedy+1
      001EE7 97               [ 1] 5354 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001EE8 9E               [ 1] 5355 	ld a,xh 
      001EE9 C8 00 0E         [ 1] 5356 	xor a,seedy
      001EEC 95               [ 1] 5357 	ld xh,a 
      001EED CF 00 0E         [ 2] 5358 	ldw seedy,x 
                                   5359 ; return seedy modulo expr + 1 
      001EF0 90 85            [ 2] 5360 	popw y 
      001EF2 65               [ 2] 5361 	divw x,y 
      001EF3 93               [ 1] 5362 	ldw x,y 
      001EF4 5C               [ 1] 5363 	incw x 
      001EF5 A6 04            [ 1] 5364 	ld a,#TK_INTGR
      001EF7 81               [ 4] 5365 	ret 
                                   5366 
                                   5367 ;---------------------------------
                                   5368 ; BASIC: WORDS 
                                   5369 ; affiche la listes des mots du
                                   5370 ; dictionnaire.
                                   5371 ;---------------------------------
                           000001  5372 	WLEN=1
                           000002  5373 	LLEN=2  
                           000002  5374 	VSIZE=2 
      001EF8                       5375 words:
      001EF8                       5376 	_vars VSIZE
      001EF8 52 02            [ 2]    1     sub sp,#VSIZE 
      001EFA 0F 02            [ 1] 5377 	clr (LLEN,sp)
      001EFC 90 AE 21 3C      [ 2] 5378 	ldw y,#kword_dict+2
      001F00 93               [ 1] 5379 0$:	ldw x,y
      001F01 F6               [ 1] 5380 	ld a,(x)
      001F02 A4 0F            [ 1] 5381 	and a,#15 
      001F04 6B 01            [ 1] 5382 	ld (WLEN,sp),a 
      001F06 5C               [ 1] 5383 1$:	incw x 
      001F07 F6               [ 1] 5384 	ld a,(x)
      001F08 CD 01 9E         [ 4] 5385 	call putc 
      001F0B 0C 02            [ 1] 5386 	inc (LLEN,sp)
      001F0D 0A 01            [ 1] 5387 	dec (WLEN,sp)
      001F0F 26 F5            [ 1] 5388 	jrne 1$
      001F11 A6 46            [ 1] 5389 	ld a,#70
      001F13 11 02            [ 1] 5390 	cp a,(LLEN,sp)
      001F15 2B 09            [ 1] 5391 	jrmi 2$   
      001F17 A6 20            [ 1] 5392 	ld a,#SPACE 
      001F19 CD 01 9E         [ 4] 5393 	call putc 
      001F1C 0C 02            [ 1] 5394 	inc (LLEN,sp) 
      001F1E 20 07            [ 2] 5395 	jra 3$
      001F20 A6 0D            [ 1] 5396 2$: ld a,#CR 
      001F22 CD 01 9E         [ 4] 5397 	call putc 
      001F25 0F 02            [ 1] 5398 	clr (LLEN,sp)
      001F27 72 A2 00 02      [ 2] 5399 3$:	subw y,#2 
      001F2B 90 FE            [ 2] 5400 	ldw y,(y)
      001F2D 26 D1            [ 1] 5401 	jrne 0$  
      001F2F                       5402 	_drop VSIZE 
      001F2F 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F31 81               [ 4] 5403 	ret 
                                   5404 
                                   5405 
                                   5406 ;*********************************
                                   5407 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5408 ;------------------------------
                                   5409 ;      dictionary 
                                   5410 ; format:
                                   5411 ;   link:   2 bytes 
                                   5412 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5413 ;   cmd_name: 16 byte max 
                                   5414 ;   code_address: 2 bytes 
                                   5415 ;------------------------------
                                   5416 	.macro _dict_entry len,name,cmd 
                                   5417 	.word LINK 
                                   5418 	LINK=.
                                   5419 name:
                                   5420 	.byte len 	
                                   5421 	.ascii "name"
                                   5422 	.word cmd 
                                   5423 	.endm 
                                   5424 
                           000000  5425 	LINK=0
      001F32                       5426 kword_end:
      001F32                       5427 	_dict_entry,5,WRITE,write  
      001F32 00 00                    1 	.word LINK 
                           001F34     2 	LINK=.
      001F34                          3 WRITE:
      001F34 05                       4 	.byte 5 	
      001F35 57 52 49 54 45           5 	.ascii "WRITE"
      001F3A 1D 42                    6 	.word write 
      001F3C                       5428 	_dict_entry,5,WORDS,words 
      001F3C 1F 34                    1 	.word LINK 
                           001F3E     2 	LINK=.
      001F3E                          3 WORDS:
      001F3E 05                       4 	.byte 5 	
      001F3F 57 4F 52 44 53           5 	.ascii "WORDS"
      001F44 1E F8                    6 	.word words 
      001F46                       5429 	_dict_entry 4,WAIT,wait 
      001F46 1F 3E                    1 	.word LINK 
                           001F48     2 	LINK=.
      001F48                          3 WAIT:
      001F48 04                       4 	.byte 4 	
      001F49 57 41 49 54              5 	.ascii "WAIT"
      001F4D 16 F1                    6 	.word wait 
      001F4F                       5430 	_dict_entry,3+F_IFUNC,USR,usr
      001F4F 1F 48                    1 	.word LINK 
                           001F51     2 	LINK=.
      001F51                          3 USR:
      001F51 43                       4 	.byte 3+F_IFUNC 	
      001F52 55 53 52                 5 	.ascii "USR"
      001F55 1E 0F                    6 	.word usr 
      001F57                       5431 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      001F57 1F 51                    1 	.word LINK 
                           001F59     2 	LINK=.
      001F59                          3 UFLASH:
      001F59 46                       4 	.byte 6+F_IFUNC 	
      001F5A 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001F60 1E 09                    6 	.word uflash 
      001F62                       5432 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F62 1F 59                    1 	.word LINK 
                           001F64     2 	LINK=.
      001F64                          3 UBOUND:
      001F64 46                       4 	.byte 6+F_IFUNC 	
      001F65 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001F6B 13 58                    6 	.word ubound 
      001F6D                       5433 	_dict_entry,2,TO,to
      001F6D 1F 64                    1 	.word LINK 
                           001F6F     2 	LINK=.
      001F6F                          3 TO:
      001F6F 02                       4 	.byte 2 	
      001F70 54 4F                    5 	.ascii "TO"
      001F72 17 FC                    6 	.word to 
      001F74                       5434 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      001F74 1F 6F                    1 	.word LINK 
                           001F76     2 	LINK=.
      001F76                          3 TICKS:
      001F76 45                       4 	.byte 5+F_IFUNC 	
      001F77 54 49 43 4B 53           5 	.ascii "TICKS"
      001F7C 1E 5E                    6 	.word get_ticks 
      001F7E                       5435 	_dict_entry,4,STOP,stop 
      001F7E 1F 76                    1 	.word LINK 
                           001F80     2 	LINK=.
      001F80                          3 STOP:
      001F80 04                       4 	.byte 4 	
      001F81 53 54 4F 50              5 	.ascii "STOP"
      001F85 19 78                    6 	.word stop 
      001F87                       5436 	_dict_entry,4,STEP,step 
      001F87 1F 80                    1 	.word LINK 
                           001F89     2 	LINK=.
      001F89                          3 STEP:
      001F89 04                       4 	.byte 4 	
      001F8A 53 54 45 50              5 	.ascii "STEP"
      001F8E 18 2C                    6 	.word step 
      001F90                       5437 	_dict_entry,5,SLEEP,sleep 
      001F90 1F 89                    1 	.word LINK 
                           001F92     2 	LINK=.
      001F92                          3 SLEEP:
      001F92 05                       4 	.byte 5 	
      001F93 53 4C 45 45 50           5 	.ascii "SLEEP"
      001F98 1E 40                    6 	.word sleep 
      001F9A                       5438 	_dict_entry,4+F_IFUNC,SIZE,size
      001F9A 1F 92                    1 	.word LINK 
                           001F9C     2 	LINK=.
      001F9C                          3 SIZE:
      001F9C 44                       4 	.byte 4+F_IFUNC 	
      001F9D 53 49 5A 45              5 	.ascii "SIZE"
      001FA1 13 4E                    6 	.word size 
      001FA3                       5439     _dict_entry,4,SHOW,show 
      001FA3 1F 9C                    1 	.word LINK 
                           001FA5     2 	LINK=.
      001FA5                          3 SHOW:
      001FA5 04                       4 	.byte 4 	
      001FA6 53 48 4F 57              5 	.ascii "SHOW"
      001FAA 13 34                    6 	.word show 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001FAC                       5440 	_dict_entry,4,SAVE,save
      001FAC 1F A5                    1 	.word LINK 
                           001FAE     2 	LINK=.
      001FAE                          3 SAVE:
      001FAE 04                       4 	.byte 4 	
      001FAF 53 41 56 45              5 	.ascii "SAVE"
      001FB3 1B 35                    6 	.word save 
      001FB5                       5441 	_dict_entry 3,RUN,run
      001FB5 1F AE                    1 	.word LINK 
                           001FB7     2 	LINK=.
      001FB7                          3 RUN:
      001FB7 03                       4 	.byte 3 	
      001FB8 52 55 4E                 5 	.ascii "RUN"
      001FBB 19 35                    6 	.word run 
      001FBD                       5442 	_dict_entry,3+F_IFUNC,RND,random 
      001FBD 1F B7                    1 	.word LINK 
                           001FBF     2 	LINK=.
      001FBF                          3 RND:
      001FBF 43                       4 	.byte 3+F_IFUNC 	
      001FC0 52 4E 44                 5 	.ascii "RND"
      001FC3 1E 84                    6 	.word random 
      001FC5                       5443 	_dict_entry,6,RETURN,return 
      001FC5 1F BF                    1 	.word LINK 
                           001FC7     2 	LINK=.
      001FC7                          3 RETURN:
      001FC7 06                       4 	.byte 6 	
      001FC8 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001FCE 19 15                    6 	.word return 
      001FD0                       5444 	_dict_entry 6,REMARK,rem 
      001FD0 1F C7                    1 	.word LINK 
                           001FD2     2 	LINK=.
      001FD2                          3 REMARK:
      001FD2 06                       4 	.byte 6 	
      001FD3 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001FD9 16 EB                    6 	.word rem 
      001FDB                       5445 	_dict_entry,6,REBOOT,cold_start 
      001FDB 1F D2                    1 	.word LINK 
                           001FDD     2 	LINK=.
      001FDD                          3 REBOOT:
      001FDD 06                       4 	.byte 6 	
      001FDE 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001FE4 05 4C                    6 	.word cold_start 
      001FE6                       5446 	_dict_entry,5+F_IFUNC,RDADC,read_adc
      001FE6 1F DD                    1 	.word LINK 
                           001FE8     2 	LINK=.
      001FE8                          3 RDADC:
      001FE8 45                       4 	.byte 5+F_IFUNC 	
      001FE9 52 44 41 44 43           5 	.ascii "RDADC"
      001FEE 19 F4                    6 	.word read_adc 
      001FF0                       5447 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      001FF0 1F E8                    1 	.word LINK 
                           001FF2     2 	LINK=.
      001FF2                          3 QKEY:
      001FF2 44                       4 	.byte 4+F_IFUNC 	
      001FF3 51 4B 45 59              5 	.ascii "QKEY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001FF7 1D C2                    6 	.word qkey 
      001FF9                       5448 	_dict_entry,6,PWRADC,power_adc 
      001FF9 1F F2                    1 	.word LINK 
                           001FFB     2 	LINK=.
      001FFB                          3 PWRADC:
      001FFB 06                       4 	.byte 6 	
      001FFC 50 57 52 41 44 43        5 	.ascii "PWRADC"
      002002 19 AF                    6 	.word power_adc 
      002004                       5449 	_dict_entry 5,PRINT,print 
      002004 1F FB                    1 	.word LINK 
                           002006     2 	LINK=.
      002006                          3 PRINT:
      002006 05                       4 	.byte 5 	
      002007 50 52 49 4E 54           5 	.ascii "PRINT"
      00200C 15 E6                    6 	.word print 
      00200E                       5450 	_dict_entry,4,POKE,poke 
      00200E 20 06                    1 	.word LINK 
                           002010     2 	LINK=.
      002010                          3 POKE:
      002010 04                       4 	.byte 4 	
      002011 50 4F 4B 45              5 	.ascii "POKE"
      002015 17 8E                    6 	.word poke 
      002017                       5451 	_dict_entry,4+F_IFUNC,PEEK,peek 
      002017 20 10                    1 	.word LINK 
                           002019     2 	LINK=.
      002019                          3 PEEK:
      002019 44                       4 	.byte 4+F_IFUNC 	
      00201A 50 45 45 4B              5 	.ascii "PEEK"
      00201E 17 A1                    6 	.word peek 
      002020                       5452 	_dict_entry,5,PAUSE,pause 
      002020 20 19                    1 	.word LINK 
                           002022     2 	LINK=.
      002022                          3 PAUSE:
      002022 05                       4 	.byte 5 	
      002023 50 41 55 53 45           5 	.ascii "PAUSE"
      002028 1E 4B                    6 	.word pause 
      00202A                       5453 	_dict_entry,3+F_CONST,ODR,GPIO_ODR
      00202A 20 22                    1 	.word LINK 
                           00202C     2 	LINK=.
      00202C                          3 ODR:
      00202C C3                       4 	.byte 3+F_CONST 	
      00202D 4F 44 52                 5 	.ascii "ODR"
      002030 00 00                    6 	.word GPIO_ODR 
      002032                       5454 	_dict_entry,3,NEW,new
      002032 20 2C                    1 	.word LINK 
                           002034     2 	LINK=.
      002034                          3 NEW:
      002034 03                       4 	.byte 3 	
      002035 4E 45 57                 5 	.ascii "NEW"
      002038 1A 73                    6 	.word new 
      00203A                       5455 	_dict_entry,4,NEXT,next 
      00203A 20 34                    1 	.word LINK 
                           00203C     2 	LINK=.
      00203C                          3 NEXT:
      00203C 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      00203D 4E 45 58 54              5 	.ascii "NEXT"
      002041 18 54                    6 	.word next 
      002043                       5456 	_dict_entry,4,LOAD,load 
      002043 20 3C                    1 	.word LINK 
                           002045     2 	LINK=.
      002045                          3 LOAD:
      002045 04                       4 	.byte 4 	
      002046 4C 4F 41 44              5 	.ascii "LOAD"
      00204A 1B F9                    6 	.word load 
      00204C                       5457 	_dict_entry 4,LIST,list
      00204C 20 45                    1 	.word LINK 
                           00204E     2 	LINK=.
      00204E                          3 LIST:
      00204E 04                       4 	.byte 4 	
      00204F 4C 49 53 54              5 	.ascii "LIST"
      002053 13 A2                    6 	.word list 
      002055                       5458 	_dict_entry 3,LET,let 
      002055 20 4E                    1 	.word LINK 
                           002057     2 	LINK=.
      002057                          3 LET:
      002057 03                       4 	.byte 3 	
      002058 4C 45 54                 5 	.ascii "LET"
      00205B 13 7A                    6 	.word let 
      00205D                       5459 	_dict_entry,3+F_IFUNC,KEY,key 
      00205D 20 57                    1 	.word LINK 
                           00205F     2 	LINK=.
      00205F                          3 KEY:
      00205F 43                       4 	.byte 3+F_IFUNC 	
      002060 4B 45 59                 5 	.ascii "KEY"
      002063 1D BA                    6 	.word key 
      002065                       5460 	_dict_entry,5,INPUT,input_var  
      002065 20 5F                    1 	.word LINK 
                           002067     2 	LINK=.
      002067                          3 INPUT:
      002067 05                       4 	.byte 5 	
      002068 49 4E 50 55 54           5 	.ascii "INPUT"
      00206D 16 77                    6 	.word input_var 
      00206F                       5461 	_dict_entry,2,IF,if 
      00206F 20 67                    1 	.word LINK 
                           002071     2 	LINK=.
      002071                          3 IF:
      002071 02                       4 	.byte 2 	
      002072 49 46                    5 	.ascii "IF"
      002074 17 BE                    6 	.word if 
      002076                       5462 	_dict_entry,3+F_CONST,IDR,GPIO_IDR
      002076 20 71                    1 	.word LINK 
                           002078     2 	LINK=.
      002078                          3 IDR:
      002078 C3                       4 	.byte 3+F_CONST 	
      002079 49 44 52                 5 	.ascii "IDR"
      00207C 00 01                    6 	.word GPIO_IDR 
      00207E                       5463 	_dict_entry,3,HEX,hex_base
      00207E 20 78                    1 	.word LINK 
                           002080     2 	LINK=.
      002080                          3 HEX:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      002080 03                       4 	.byte 3 	
      002081 48 45 58                 5 	.ascii "HEX"
      002084 13 44                    6 	.word hex_base 
      002086                       5464 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      002086 20 80                    1 	.word LINK 
                           002088     2 	LINK=.
      002088                          3 GPIO:
      002088 44                       4 	.byte 4+F_IFUNC 	
      002089 47 50 49 4F              5 	.ascii "GPIO"
      00208D 1D CC                    6 	.word gpio 
      00208F                       5465 	_dict_entry,4,GOTO,goto 
      00208F 20 88                    1 	.word LINK 
                           002091     2 	LINK=.
      002091                          3 GOTO:
      002091 04                       4 	.byte 4 	
      002092 47 4F 54 4F              5 	.ascii "GOTO"
      002096 18 C3                    6 	.word goto 
      002098                       5466 	_dict_entry,5,GOSUB,gosub 
      002098 20 91                    1 	.word LINK 
                           00209A     2 	LINK=.
      00209A                          3 GOSUB:
      00209A 05                       4 	.byte 5 	
      00209B 47 4F 53 55 42           5 	.ascii "GOSUB"
      0020A0 18 D0                    6 	.word gosub 
      0020A2                       5467 	_dict_entry,6,FORGET,forget 
      0020A2 20 9A                    1 	.word LINK 
                           0020A4     2 	LINK=.
      0020A4                          3 FORGET:
      0020A4 06                       4 	.byte 6 	
      0020A5 46 4F 52 47 45 54        5 	.ascii "FORGET"
      0020AB 1C 61                    6 	.word forget 
      0020AD                       5468 	_dict_entry,3,FOR,for 
      0020AD 20 A4                    1 	.word LINK 
                           0020AF     2 	LINK=.
      0020AF                          3 FOR:
      0020AF 03                       4 	.byte 3 	
      0020B0 46 4F 52                 5 	.ascii "FOR"
      0020B3 17 D2                    6 	.word for 
      0020B5                       5469 	_dict_entry,6+F_CONST,EEPROM,EEPROM_BASE  
      0020B5 20 AF                    1 	.word LINK 
                           0020B7     2 	LINK=.
      0020B7                          3 EEPROM:
      0020B7 C6                       4 	.byte 6+F_CONST 	
      0020B8 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0020BE 40 00                    6 	.word EEPROM_BASE 
      0020C0                       5470 	_dict_entry,3,DIR,directory 
      0020C0 20 B7                    1 	.word LINK 
                           0020C2     2 	LINK=.
      0020C2                          3 DIR:
      0020C2 03                       4 	.byte 3 	
      0020C3 44 49 52                 5 	.ascii "DIR"
      0020C6 1C AC                    6 	.word directory 
      0020C8                       5471 	_dict_entry,3,DEC,dec_base
      0020C8 20 C2                    1 	.word LINK 
                           0020CA     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0020CA                          3 DEC:
      0020CA 03                       4 	.byte 3 	
      0020CB 44 45 43                 5 	.ascii "DEC"
      0020CE 13 49                    6 	.word dec_base 
      0020D0                       5472 	_dict_entry,3+F_CONST,DDR,GPIO_DDR
      0020D0 20 CA                    1 	.word LINK 
                           0020D2     2 	LINK=.
      0020D2                          3 DDR:
      0020D2 C3                       4 	.byte 3+F_CONST 	
      0020D3 44 44 52                 5 	.ascii "DDR"
      0020D6 00 02                    6 	.word GPIO_DDR 
      0020D8                       5473 	_dict_entry,3+F_CONST,CRL,GPIO_CR1
      0020D8 20 D2                    1 	.word LINK 
                           0020DA     2 	LINK=.
      0020DA                          3 CRL:
      0020DA C3                       4 	.byte 3+F_CONST 	
      0020DB 43 52 4C                 5 	.ascii "CRL"
      0020DE 00 03                    6 	.word GPIO_CR1 
      0020E0                       5474 	_dict_entry,3+F_CONST,CRH,GPIO_CR2
      0020E0 20 DA                    1 	.word LINK 
                           0020E2     2 	LINK=.
      0020E2                          3 CRH:
      0020E2 C3                       4 	.byte 3+F_CONST 	
      0020E3 43 52 48                 5 	.ascii "CRH"
      0020E6 00 04                    6 	.word GPIO_CR2 
      0020E8                       5475 	_dict_entry,4+F_CFUNC,CHAR,char
      0020E8 20 E2                    1 	.word LINK 
                           0020EA     2 	LINK=.
      0020EA                          3 CHAR:
      0020EA 84                       4 	.byte 4+F_CFUNC 	
      0020EB 43 48 41 52              5 	.ascii "CHAR"
      0020EF 1D 79                    6 	.word char 
      0020F1                       5476 	_dict_entry,3,BYE,bye 
      0020F1 20 EA                    1 	.word LINK 
                           0020F3     2 	LINK=.
      0020F3                          3 BYE:
      0020F3 03                       4 	.byte 3 	
      0020F4 42 59 45                 5 	.ascii "BYE"
      0020F7 1E 37                    6 	.word bye 
      0020F9                       5477 	_dict_entry,5,BTOGL,bit_toggle
      0020F9 20 F3                    1 	.word LINK 
                           0020FB     2 	LINK=.
      0020FB                          3 BTOGL:
      0020FB 05                       4 	.byte 5 	
      0020FC 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002101 17 45                    6 	.word bit_toggle 
      002103                       5478 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      002103 20 FB                    1 	.word LINK 
                           002105     2 	LINK=.
      002105                          3 BTEST:
      002105 45                       4 	.byte 5+F_IFUNC 	
      002106 42 54 45 53 54           5 	.ascii "BTEST"
      00210B 17 59                    6 	.word bit_test 
      00210D                       5479 	_dict_entry,4,BSET,bit_set 
      00210D 21 05                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                           00210F     2 	LINK=.
      00210F                          3 BSET:
      00210F 04                       4 	.byte 4 	
      002110 42 53 45 54              5 	.ascii "BSET"
      002114 17 1C                    6 	.word bit_set 
      002116                       5480 	_dict_entry,4,BRES,bit_reset
      002116 21 0F                    1 	.word LINK 
                           002118     2 	LINK=.
      002118                          3 BRES:
      002118 04                       4 	.byte 4 	
      002119 42 52 45 53              5 	.ascii "BRES"
      00211D 17 30                    6 	.word bit_reset 
      00211F                       5481 	_dict_entry,5,BREAK,break 
      00211F 21 18                    1 	.word LINK 
                           002121     2 	LINK=.
      002121                          3 BREAK:
      002121 05                       4 	.byte 5 	
      002122 42 52 45 41 4B           5 	.ascii "BREAK"
      002127 1A 27                    6 	.word break 
      002129                       5482 	_dict_entry,4,BEEP,beep 
      002129 21 21                    1 	.word LINK 
                           00212B     2 	LINK=.
      00212B                          3 BEEP:
      00212B 04                       4 	.byte 4 	
      00212C 42 45 45 50              5 	.ascii "BEEP"
      002130 19 87                    6 	.word beep 
      002132                       5483 	_dict_entry,3+F_IFUNC,ASC,ascii  
      002132 21 2B                    1 	.word LINK 
                           002134     2 	LINK=.
      002134                          3 ASC:
      002134 43                       4 	.byte 3+F_IFUNC 	
      002135 41 53 43                 5 	.ascii "ASC"
      002138 1D 96                    6 	.word ascii 
      00213A                       5484 kword_dict:
      00213A                       5485 	_dict_entry,3+F_IFUNC,ABS,abs
      00213A 21 34                    1 	.word LINK 
                           00213C     2 	LINK=.
      00213C                          3 ABS:
      00213C 43                       4 	.byte 3+F_IFUNC 	
      00213D 41 42 53                 5 	.ascii "ABS"
      002140 1E 64                    6 	.word abs 
                                   5486 	
                                   5487 
      002180                       5488 	.bndry 128 ; align on FLASH block.
                                   5489 ; free space for user application  
      002180                       5490 user_space:
                                   5491 ; USR() function test
      002180 89               [ 2] 5492 	pushw x 
      002181 72 1A 50 0A      [ 1] 5493 	bset PC_ODR,#5 
      002185 85               [ 2] 5494 	popw x 
      002186 CD 1E 55         [ 4] 5495 	call pause02 
      002189 72 1B 50 0A      [ 1] 5496 	bres PC_ODR,#5 
      00218D 81               [ 4] 5497 	ret
                                   5498 
                                   5499 	.area FLASH_DRIVE (ABS)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      010000                       5500 	.org 0x10000
      010000                       5501 fdrive:
                                   5502 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00213C R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        002134 R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |   5 BEEP       00212B R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_ER=  000000 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  000005     |   5 BREAK      002121 R   |   5 BRES       002118 R
  5 BSET       00210F R   |     BSIZE   =  000001     |     BSP     =  000008 
  5 BTEST      002105 R   |   5 BTOGL      0020FB R   |     BTW     =  000001 
    BUFIDX  =  000003     |   5 BYE        0020F3 R   |     C       =  000001 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       0020EA R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000008     |     COMMA   =  000001 
    COUNT   =  000001     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   5 CRH        0020E2 R   |   5 CRL        0020DA R
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000006 
    CURR    =  000002     |     CX_BPTR =  000001     |     CX_CNT  =  000005 
    CX_IN   =  000004     |     CX_LNO  =  000003     |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
  5 DDR        0020D2 R   |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   5 DEC        0020CA R   |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   5 DIR        0020C2 R
    DIVIDND =  000007     |     DIVISR  =  000005     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |     DSTACK_S=  000040     |   5 EEPROM     0020B7 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EOF     =  0000FF     |     ERR_BAD_=  00000A     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_L=  000005     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
    FF      =  00000C     |     FFOR    =  000002     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  5 FOR        0020AF R   |   5 FORGET     0020A4 R   |     FRUN    =  000000 
    FSIZE   =  000001     |     FSLEEP  =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      00209A R   |     GOS_RET =  000003 
  5 GOTO       002091 R   |   5 GPIO       002088 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  5 HEX        002080 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        002078 R
  5 IF         002071 R   |     IN      =  000007     |     INCR    =  000001 
  5 INPUT      002067 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  000003     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        00205F R   |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000005     |   5 LET        002057 R   |     LINENO  =  000005 
  5 LINK    =  00213C R   |   5 LIST       00204E R   |     LL      =  000002 
    LLEN    =  000002     |     LL_HB   =  000001     |     LNO     =  000005 
    LN_PTR  =  000005     |   5 LOAD       002045 R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        002034 R
  5 NEXT       00203C R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NL      =  00000A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R   |   5 ODR        00202C R
    OP      =  000005     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000028     |   5 PAUSE      002022 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       002019 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 POKE       002010 R
    PREV    =  000001     |   5 PRINT      002006 R   |     PROD    =  000002 
    PSIZE   =  000001     |   5 PWRADC     001FFB R   |   5 QKEY       001FF2 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

  5 RDADC      001FE8 R   |   5 REBOOT     001FDD R   |   5 REG_A      000922 R
  5 REG_CC     000926 R   |   5 REG_EPC    000915 R   |   5 REG_SP     00092B R
  5 REG_X      00091E R   |   5 REG_Y      00091A R   |     RELOP   =  000005 
  5 REMARK     001FD2 R   |     RETL1   =  000001     |   5 RETURN     001FC7 R
  5 RND        001FBF R   |     ROP     =  004800     |     RST_SR  =  0050B3 
  5 RUN        001FB7 R   |     RXCHAR  =  000001     |     R_A     =  000007 
    R_CC    =  000008     |     R_X     =  000005     |     R_Y     =  000003 
  5 SAVE       001FAE R   |     SDIVD   =  000002     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   5 SHOW       001FA5 R
    SIGN    =  000001     |   5 SIZE       001F9C R   |     SKIP    =  000006 
  5 SLEEP      001F92 R   |     SPACE   =  000020     |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SQUOT   =  000001     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  000080     |   5 STATES     0008D8 R
  5 STEP       001F89 R   |   5 STOP       001F80 R   |     SWIM_CSR=  007F80 
    TAB     =  000009     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      001F76 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000002     |     TK_CFUNC=  000008 
    TK_CHAR =  000003     |     TK_CMD  =  000006     |     TK_COLON=  000001 
    TK_COMMA=  00000D     |     TK_CONST=  000009     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_IFUNC=  000007 
    TK_INTGR=  000004     |     TK_LE   =  000036     |     TK_LPARE=  00000B 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  00000A     |     TK_RPARE=  00000C 
    TK_SHARP=  00000E     |     TK_VAR  =  000005     |   5 TO         001F6F R
  5 Timer4Up   000019 R   |   5 TrapHand   00000A R   |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     001F64 R
  5 UFLASH     001F59 R   |   5 USER_ABO   00007E R   |   5 USR        001F51 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  5 UserButt   000025 R   |     VSIZ    =  000002     |     VSIZE   =  000002 
    VT      =  00000B     |   5 WAIT       001F48 R   |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH   =  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   5 WORDS      001F3E R   |   5 WRITE      001F34 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XADR    =  000001 
    XMASK   =  000001     |     XSAVE   =  000003     |     YSAVE   =  000003 
  5 abs        001E64 R   |   1 acc16      000008 R   |   1 acc24      000007 R
  1 acc8       000009 R   |   5 accept_c   000ACC R   |   5 add        00105F R
  5 ansi_seq   000A8E R   |   5 arg_list   00119E R   |   1 array_si   00001D R
  5 ascii      001D96 R   |   5 at_tst     000D99 R   |   5 atoi24     000EAC R
  5 atoi_exi   000F1A R   |   5 bad_port   001E04 R   |   1 base       000006 R
  1 basicptr   000004 R   |   5 beep       001987 R   |   5 bin_exit   000C9D R
  5 bit_rese   001730 R   |   5 bit_set    00171C R   |   5 bit_test   001759 R
  5 bit_togg   001745 R   |   5 bkslsh_t   000D44 R   |   5 bksp       0001BA R
  5 break      001A27 R   |   5 break_po   001A55 R   |   5 bye        001E37 R
  5 char       001D79 R   |   5 check_fu   0003DD R   |   5 clear_ba   0005D1 R
  5 clear_va   0004E7 R   |   5 clock_in   000099 R   |   5 cmd_itf    000AF0 R
  5 cmd_name   00110A R   |   5 cmp_name   001AC9 R   |   5 cold_sta   00054C R
  5 colon_ts   000D6D R   |   5 comma_ts   000D78 R   |   5 compile    0003EC R
  5 convert_   000C25 R   |   1 count      000003 R   |   5 cp_loop    00114D R
  5 create_g   00033C R   |   5 cstk_pro   001029 R   |   5 dash_tst   000D8E R
  5 ddrop      000FA5 R   |   5 ddrop_n    000FE2 R   |   5 ddup       000FAE R
  5 dec_base   001349 R   |   5 del_back   000ABD R   |   5 del_line   000304 R
  5 del_ln     000AAE R   |   5 delete     0001CA R   |   5 dir_loop   001CB8 R
  5 director   001CAC R   |   5 divide     0010B5 R   |   5 divu24_8   000A1B R
  5 dotr       001032 R   |   5 dotr_loo   001047 R   |   5 dots       000FFF R
  5 dpick      000FBF R   |   5 dpop       000F7E R   |   5 dpush      000F71 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

  5 drive_fr   001D35 R   |   3 dstack     001740 R   |   3 dstack_u   001780 R
  5 dstk_pro   000FF5 R   |   1 dstkptr    000016 R   |   5 dswap      000F8B R
  5 eql_tst    000DF9 R   |   5 equal      0015D9 R   |   5 err_bad_   0006AE R
  5 err_cmd_   00066F R   |   5 err_div0   000631 R   |   5 err_dupl   00068A R
  5 err_math   000617 R   |   5 err_mem_   0005FA R   |   5 err_msg    0005E2 R
  5 err_no_a   0006BB R   |   5 err_no_l   000641 R   |   5 err_not_   00069C R
  5 err_run_   000658 R   |   5 err_synt   000608 R   |   5 escaped    000C3A R
  5 expect     001191 R   |   5 expr_exi   0012DA R   |   5 expressi   001299 R
  5 factor     0011F2 R   |   1 farptr     000010 R   |   7 fdrive     010000 R
  5 fetch      000FCE R   |   5 fetchc     000BDD R   |   1 ffree      000013 R
  5 file_cou   001D2D R   |   5 final_te   000A88 R   |   5 first_li   0013CD R
  1 flags      00001F R   |   5 for        0017D2 R   |   5 forget     001C61 R
  1 free_ram   000055 R   |   5 ge         0015DB R   |   5 get_arra   0011C2 R
  5 get_tick   001E5E R   |   5 get_toke   000CDF R   |   5 getc       0001A7 R
  5 go_commo   0018F3 R   |   5 gosub      0018D0 R   |   5 goto       0018C3 R
  5 gpio       001DCC R   |   5 gt         0015D7 R   |   5 gt_tst     000E04 R
  5 hex_base   001344 R   |   5 hse_cloc   000187 R   |   5 hsi_cloc   000191 R
  5 if         0017BE R   |   1 in         000001 R   |   1 in.saved   000002 R
  1 in.w       000000 R   |   5 incr_far   001A7E R   |   5 input_ex   0016E8 R
  5 input_lo   001683 R   |   5 input_va   001677 R   |   5 insert_l   000375 R
  5 insert_l   0003DA R   |   5 interp     00076F R   |   5 interp_l   0007AF R
  5 invalid    000B35 R   |   5 invalid_   000BB3 R   |   5 is_alpha   0004F5 R
  5 is_digit   000E97 R   |   5 itoa       0009D4 R   |   5 itoa_loo   0009EC R
  5 key        001DBA R   |   5 kword_di   00213A R   |   5 kword_en   001F32 R
  5 last_lin   0013D6 R   |   5 le         0015E0 R   |   5 ledoff     000828 R
  5 ledon      000823 R   |   5 ledtoggl   00082D R   |   5 left_arr   000A8E R
  5 left_par   000836 R   |   5 let        00137A R   |   5 let02      001384 R
  5 lines_sk   0013DB R   |   5 list       0013A2 R   |   5 list_exi   001422 R
  5 list_sta   0013FE R   |   5 load       001BF9 R   |   5 loop_bac   00189C R
  1 loop_dep   00001C R   |   5 loop_don   0018B1 R   |   5 lt         0015DE R
  5 lt_tst     000E3D R   |   5 mem_peek   000B52 R   |   5 modulo     0010F9 R
  5 move       00029E R   |   5 move_dow   0002BC R   |   5 move_exi   0002DD R
  5 move_loo   0002C1 R   |   5 move_up    0002AE R   |   5 mul_char   0015C8 R
  5 multiply   00106D R   |   5 mulu24_8   000F1E R   |   5 nbr_tst    000D1A R
  5 ne         0015E3 R   |   5 neg_acc2   000A43 R   |   5 new        001A73 R
  5 next       001854 R   |   5 next_tok   0007DF R   |   5 no_match   00115F R
  5 none       000CDF R   |   5 number     000BE3 GR  |   5 other      000E75 R
  3 pad        001718 R   |   5 parse_bi   000C7D R   |   5 parse_in   000C42 R
  5 parse_ke   000CA5 R   |   5 parse_qu   000BEA R   |   5 pause      001E4B R
  5 pause02    001E55 R   |   5 peek       0017A1 R   |   5 peek_byt   000B7D R
  5 plus_tst   000DCD R   |   5 poke       00178E R   |   5 power_ad   0019AF R
  5 prcnt_ts   000DEE R   |   5 print      0015E6 R   |   5 print_ex   00164B R
  5 print_fa   000BC2 R   |   5 print_in   000978 R   |   5 print_re   000885 R
  5 print_st   000B45 R   |   5 prt_basi   001475 R   |   5 prt_cmd_   001425 R
  5 prt_loop   0015EA R   |   5 prt_peek   00024E R   |   5 prt_quot   001439 R
  5 prt_reg1   000866 R   |   5 prt_reg8   000841 R   |   5 prt_regs   0001E4 R
  5 prti24     000930 R   |   1 ptr16      000011 R   |   1 ptr8       000012 R
  5 putc       00019E R   |   5 puts       0001B0 R   |   5 qkey       001DC2 R
  5 qmark_ts   000DA4 R   |   5 random     001E84 R   |   5 read_adc   0019F4 R
  5 readln     000A66 R   |   5 readln_l   000A6C R   |   5 readln_q   000AE1 R
  5 regs_sta   000227 R   |   5 rel_exit   001331 R   |   5 relation   0012DD R
  5 relop_st   0015CB R   |   5 rem        0016EB R   |   5 repl       000AFE R
  5 repl_exi   000B26 R   |   5 reprint    000A8E R   |   5 reset_co   0015E8 R
  5 rest_con   001667 R   |   5 return     001915 R   |   5 right_ar   000A8E R
  5 rparnt_t   000D62 R   |   5 rt_msg     0006EF R   |   5 run        001935 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

  5 save       001B35 R   |   5 save_con   001657 R   |   5 search_d   00113C R
  5 search_e   00118D R   |   5 search_f   001AEA R   |   5 search_l   0002E0 R
  5 search_l   0002E8 R   |   5 search_n   001140 R   |   1 seedx      00000C R
  1 seedy      00000E R   |   5 seek_fdr   001A8C R   |   5 sharp_ts   000D83 R
  5 show       001334 R   |   5 single_c   0015C4 R   |   5 size       00134E R
  5 skip       000F58 R   |   5 slash_ts   000DE3 R   |   5 sleep      001E40 R
  5 software   000506 R   |   5 spaces     0001D8 R   |   3 stack_fu   001780 R
  3 stack_un   001800 R   |   5 star_tst   000DD8 R   |   5 step       00182C R
  5 stop       001978 R   |   5 store      000FD8 R   |   5 store_lo   00183E R
  5 str_matc   00116E R   |   5 str_tst    000D09 R   |   5 strcmp     00027F R
  5 strcpy     000290 R   |   5 strlen     000272 R   |   5 substrac   001067 R
  5 syntax_e   0006FF R   |   1 tab_widt   000020 R   |   5 tb_error   000701 R
  5 term       00124C R   |   5 term01     001255 R   |   5 term_exi   001296 R
  5 test_p     000B3D R   |   3 tib        0016C8 R   |   5 tick_tst   000DBB R
  1 ticks      00000A R   |   5 timer4_i   0000AF R   |   5 to         0017FC R
  5 to_upper   000EA0 GR  |   5 token_ch   000E84 R   |   5 token_ex   000E94 R
  1 txtbgn     000018 R   |   1 txtend     00001A R   |   5 uart3_in   000174 R
  5 uart3_se   000180 R   |   5 uart_ena   000199 R   |   5 ubound     001358 R
  5 uflash     001E09 R   |   5 unget_to   000F6B R   |   5 unlock_e   0000C0 R
  5 unlock_f   0000CE R   |   5 user_spa   002180 R   |   5 usr        001E0F R
  1 vars       000021 R   |   5 wait       0016F1 R   |   5 warm_sta   000753 R
  5 words      001EF8 R   |   5 write      001D42 R   |   5 write_bl   000151 R
  5 write_by   0000DC R   |   5 write_ee   000118 R   |   5 write_ex   00014C R
  5 write_fl   000102 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     55   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   218E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

