ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26 
                                     27 
                                     28 
                                     29     .module TBI_STM8
                                     30 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                     37     .list 
                                     38 
      000000                         39 _dbg 
                           000001     1     DEBUG=1
                                     40 
                                     41 	
                                     42 ;--------------------------------------
                                     43     .area DATA 
                                     44 ;--------------------------------------	
                                     45 
                           000050    46 	TIB_SIZE=80
                           000028    47     PAD_SIZE=40
                           000040    48 	DSTACK_SIZE=64 
                           000080    49 	STACK_SIZE=128
                           0017FF    50 	STACK_EMPTY=RAM_SIZE-1  
                           000000    51 	FRUN=0 ; flags run code in variable flags
                           000001    52 	FTRAP=1 ; inside trap handler 
                           000002    53 	FFOR=2 ; FOR loop in preparation 
                           000003    54 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    55 	FBREAK=4 ; break point flag 
                           000005    56 	FCOMP=5  ; compiling flags 
                                     57 
                           004000    58 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line
      000001                         61 in:    .blkb 1 ; low byte of in.w
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line 
      000006                         65 base:  .blkb 1 ; nemeric base used to print integer 
      000007                         66 acc24: .blkb 1 ; 24 bit accumulator
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000008                         67 acc16: .blkb 1 ; 16 bit accumulator, middle byte of acc24
      000009                         68 acc8:  .blkb 1 ;  8 bit accumulator, least byte of acc24 
      00000A                         69 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000C                         70 timer: .blkw 1 ;  milliseconds count down timer 
      00000E                         71 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000010                         72 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000012                         73 farptr: .blkb 1 ; 24 bits pointer used by file system
      000013                         74 ptr16:  .blkb 1 ; 16 bits pointer ,  middle byte of farptr
      000014                         75 ptr8:   .blkb 1 ; 8 bits pointer, least byte of farptr 
      000015                         76 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000018                         77 dstkptr: .blkw 1  ; data stack pointer 
      00001A                         78 txtbgn: .ds 2 ; tokenized BASIC text beginning address 
      00001C                         79 txtend: .ds 2 ; tokenized BASIC text end address 
      00001E                         80 loop_depth: .ds 1 ; FOR loop depth, level of nested loop. Conformity check   
      00001F                         81 array_size: .ds 2 ; array size 
      000021                         82 flags: .ds 1 ; various boolean flags
      000022                         83 tab_width: .ds 1 ; print colon width (4)
      000023                         84 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     85 ; keep as last variable 
      000057                         86 free_ram: ; from here RAM free for BASIC text 
                                     87 
                                     88 ;-----------------------------------
                                     89     .area SSEG (ABS)
                                     90 ;-----------------------------------	
      0016C8                         91     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         92 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         93 pad: .ds PAD_SIZE             ; working buffer
      001740                         94 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         95 dstack_empty: ; dstack underflow ; data stack bottom 
      001780                         96 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         97 stack_unf: ; stack underflow ; control_stack bottom 
                                     98 
                                     99 
                                    100 ;--------------------------------------
                                    101     .area HOME 
                                    102 ;--------------------------------------
      000000 82 00 05 60            103     int cold_start
                           000001   104 .if DEBUG
      000004 82 00 00 18            105 	int TrapHandler 		;TRAP  software interrupt
                           000000   106 .else
                                    107 	int NonHandledInterrupt ;TRAP  software interrupt
                                    108 .endif
      000008 82 00 00 09            109 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 0A            110 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            111 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            112 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            113 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            114 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            115 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 3D            116 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            117 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            118 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            119 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            120 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            121 	int NonHandledInterrupt ;int12 TIM1 capture/compare
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      00003C 82 00 00 09            122 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            123 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            124 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            125 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            126 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            127 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            128 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            129 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 09            130 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 09            131 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 27            132 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            133 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            134 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            135 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            136 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            137 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            138 	int NonHandledInterrupt ;int29  not used
                                    139 
                                    140 ;---------------------------------------
                                    141     .area CODE
                                    142 ;---------------------------------------
                           000001   143 .if DEBUG
      000000 53 54 4D 38 5F 54 42   144 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    145 .endif 
                                    146 
      000009                        147 NonHandledInterrupt:
      000009 71                     148     .byte 0x71  ; reinitialize MCU
                                    149 
                                    150 ; auto wakeup from halt
      00000A                        151 AWUHandler:
      00000A 72 19 50 F0      [ 1]  152 	bres AWU_CSR,#AWU_CSR_AWUEN
      00000E 55 00 3F 50 F1   [ 1]  153 	mov AWU_APR,0x3F
      000013 72 5F 50 F2      [ 1]  154 	clr AWU_TBR 
      000017 80               [11]  155 	iret
                                    156 
                                    157 ;------------------------------------
                                    158 ; software interrupt handler  
                                    159 ;------------------------------------
                           000001   160 .if DEBUG 
      000018                        161 TrapHandler:
      000018 72 12 00 21      [ 1]  162 	bset flags,#FTRAP 
      00001C CD 08 EC         [ 4]  163 	call print_registers
      00001F CD 0B 57         [ 4]  164 	call cmd_itf
      000022 72 13 00 21      [ 1]  165 	bres flags,#FTRAP 	
      000026 80               [11]  166 	iret
                                    167 .endif 
                                    168 
      000027                        169 Timer4UpdateHandler:
      000027 72 5F 53 42      [ 1]  170 	clr TIM4_SR 
      00002B CE 00 0A         [ 2]  171 	ldw x,ticks
      00002E 5C               [ 2]  172 	incw x
      00002F CF 00 0A         [ 2]  173 	ldw ticks,x 
      000032 CE 00 0C         [ 2]  174 	ldw x,timer
      000035 5D               [ 2]  175 	tnzw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000036 27 04            [ 1]  176 	jreq 1$
      000038 5A               [ 2]  177 	decw x 
      000039 CF 00 0C         [ 2]  178 	ldw timer,x 
      00003C                        179 1$:	
      00003C 80               [11]  180 	iret 
                                    181 
                                    182 
                                    183 ;------------------------------------
                                    184 ; Triggered by pressing USER UserButton 
                                    185 ; on NUCLEO card.
                                    186 ;------------------------------------
      00003D                        187 UserButtonHandler:
                                    188 ; wait button release
      00003D 5F               [ 1]  189 	clrw x
      00003E 5A               [ 2]  190 1$: decw x 
      00003F 26 FD            [ 1]  191 	jrne 1$
      000041 72 09 50 15 F8   [ 2]  192 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    193 ; if MCU suspended by SLEEP resume program
      000046 72 07 00 21 05   [ 2]  194     btjf flags,#FSLEEP,2$
      00004B 72 17 00 21      [ 1]  195 	bres flags,#FSLEEP 
      00004F 80               [11]  196 	iret
      000050 72 00 00 21 03   [ 2]  197 2$:	btjt flags,#FRUN,4$
      000055 CC 00 68         [ 2]  198 	jp 9$ 
      000058                        199 4$:	; program interrupted by user 
      000058 72 11 00 21      [ 1]  200 	bres flags,#FRUN 
      00005C AE 00 70         [ 2]  201 	ldw x,#USER_ABORT
      00005F CD 01 C4         [ 4]  202 	call puts 
      000062 CE 00 04         [ 2]  203 	ldw x,basicptr 
      000065 CD 14 E5         [ 4]  204 	call prt_basic_line
      000068                        205 9$:
      000068 AE 17 FF         [ 2]  206     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  207     ldw sp,x
      00006C 9A               [ 1]  208 	rim 
      00006D CC 07 D3         [ 2]  209 	jp warm_start
                                    210 
      000070 0A 50 72 6F 67 72 61   211 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    212 
                                    213 ;----------------------------------------
                                    214 ; inialize MCU clock 
                                    215 ; input:
                                    216 ;   A 		source  HSI | 1 HSE 
                                    217 ;   XL      CLK_CKDIVR , clock divisor 
                                    218 ; output:
                                    219 ;   none 
                                    220 ;----------------------------------------
      00008B                        221 clock_init:	
      00008B C1 50 C3         [ 1]  222 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  223 	jreq 2$ ; no switching required 
                                    224 ; select clock source 
      000090 72 12 50 C5      [ 1]  225 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  226 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  227 1$:	cp a,CLK_CMSR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      00009A 26 FB            [ 1]  228 	jrne 1$
      00009C                        229 2$: 	
                                    230 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  231 	ld a,xl 
      00009D C7 50 C6         [ 1]  232 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  233 	ret
                                    234 
                                    235 ;----------------------------------
                                    236 ; TIMER4 used as audio tone output 
                                    237 ; on port D:5.
                                    238 ; channel 1 configured as PWM mode 1 
                                    239 ;-----------------------------------  
                           00F424   240 TIM2_CLK_FREQ=62500
      0000A1                        241 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  242 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  243  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  244 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  245 	ret 
                                    246 
                                    247 ;---------------------------------
                                    248 ; TIM4 is configured to generate an 
                                    249 ; interrupt every millisecond 
                                    250 ;----------------------------------
      0000AE                        251 timer4_init:
      0000AE 72 18 50 C7      [ 1]  252 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  253 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  254 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  255 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  256 	bset TIM4_IER,#TIM4_IER_UIE 
      0000C2 81               [ 4]  257 	ret
                                    258 
                                    259 
                                    260 ;----------------------------------
                                    261 ; unlock EEPROM for writing/erasing
                                    262 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    263 ; input:
                                    264 ;  none
                                    265 ; output:
                                    266 ;  none 
                                    267 ;----------------------------------
      0000C3                        268 unlock_eeprom:
      0000C3 35 AE 50 64      [ 1]  269 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C7 35 56 50 64      [ 1]  270     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000CB 72 07 50 5F FB   [ 2]  271 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000D0 81               [ 4]  272 	ret
                                    273 
                                    274 ;----------------------------------
                                    275 ; unlock FLASH for writing/erasing
                                    276 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    277 ; input:
                                    278 ;  none
                                    279 ; output:
                                    280 ;  none
                                    281 ;----------------------------------
      0000D1                        282 unlock_flash:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000D1 35 56 50 62      [ 1]  283 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D5 35 AE 50 62      [ 1]  284 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000D9 72 03 50 5F FB   [ 2]  285 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000DE 81               [ 4]  286 	ret
                                    287 
                           000000   288 	BLOCK_ERASE=0
                                    289 ;----------------------------
                                    290 ; erase block code must be 
                                    291 ;executed from RAM
                                    292 ;-----------------------------
                           000000   293 .if BLOCK_ERASE 
                                    294 ; this code is copied to RAM 
                                    295 erase_start:
                                    296 	clr a 
                                    297     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    298     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    299 	ldf [farptr],a
                                    300     inc farptr+2 
                                    301     ldf [farptr],a
                                    302     inc farptr+2 
                                    303     ldf [farptr],a
                                    304     inc farptr+2 
                                    305     ldf [farptr],a
                                    306 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    307 	ret
                                    308 erase_end:
                                    309 
                                    310 ; copy erase_start in RAM 
                                    311 move_code_in_ram:
                                    312 	ldw x,#erase_end 
                                    313 	subw x,#erase_start
                                    314 	ldw acc16,x 
                                    315 	ldw x,#pad 
                                    316 	ldw y,#erase_start 
                                    317 	call move 
                                    318 	ret 
                                    319 
                                    320 ;-----------------------------------
                                    321 ; erase flash or EEPROM block 
                                    322 ; a block is 128 bytes 
                                    323 ; input:
                                    324 ;   farptr  address block begin
                                    325 ; output:
                                    326 ;   none
                                    327 ;--------------------------------------
                                    328 erase_block:
                                    329 	ldw x,farptr+1 
                                    330 	pushw x 
                                    331 	call move_code_in_ram 
                                    332 	popw x 
                                    333 	ldw farptr+1,x 
                                    334 	tnz farptr
                                    335 	jrne erase_flash 
                                    336 	ldw x,#FLASH_BASE 
                                    337 	cpw x,farptr+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    338 	jrpl erase_flash 
                                    339 ; erase eeprom block
                                    340 	call unlock_eeprom 
                                    341 	sim 
                                    342 	call pad   
                                    343 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    344 	rim 
                                    345 	ret 
                                    346 ; erase flash block:
                                    347 erase_flash:
                                    348 	call unlock_flash 
                                    349 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    350 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    351 	clr a 
                                    352 	sim 
                                    353 	call pad 
                                    354     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    355 	rim 
                                    356 	ret 
                                    357 .endif ; BLOCK_ERASE 
                                    358 
                                    359 
                                    360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    361 ; write a byte to FLASH or EEPROM 
                                    362 ; input:
                                    363 ;    a  		byte to write
                                    364 ;    farptr  	address
                                    365 ;    x          farptr[x]
                                    366 ; output:
                                    367 ;    none
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 	; variables locales
                           000001   370 	BTW = 1   ; byte to write offset on stack
                           000002   371 	OPT = 2   ; OPTION flag offset on stack
                           000002   372 	VSIZE = 2
      0000DF                        373 write_byte:
      0000DF 90 89            [ 2]  374 	pushw y
      0000E1                        375 	_vars VSIZE
      0000E1 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E3 6B 01            [ 1]  376 	ld (BTW,sp),a ; byte to write 
      0000E5 0F 02            [ 1]  377 	clr (OPT,sp)  ; OPTION flag
                                    378 ; put addr[15:0] in Y, for bounds check.
      0000E7 90 CE 00 13      [ 2]  379 	ldw y,farptr+1   ; Y=addr15:0
                                    380 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000EB 72 5D 00 12      [ 1]  381 	tnz farptr 
      0000EF 26 14            [ 1]  382 	jrne write_flash
      0000F1 90 A3 25 80      [ 2]  383     cpw y,#user_space
      0000F5 24 0E            [ 1]  384     jruge write_flash
      0000F7 90 A3 40 00      [ 2]  385 	cpw y,#EEPROM_BASE  
      0000FB 25 52            [ 1]  386     jrult write_exit
      0000FD 90 A3 48 7F      [ 2]  387 	cpw y,#OPTION_END 
      000101 22 4C            [ 1]  388 	jrugt write_exit
      000103 20 16            [ 2]  389 	jra write_eeprom 
                                    390 ; write program memory
      000105                        391 write_flash:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000105 CD 00 D1         [ 4]  392 	call unlock_flash 
      000108 9B               [ 1]  393 1$:	sim 
      000109 7B 01            [ 1]  394 	ld a,(BTW,sp)
      00010B 92 A7 00 12      [ 4]  395 	ldf ([farptr],x),a ; farptr[x]=A
      00010F 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000114 9A               [ 1]  397     rim 
      000115 72 13 50 5F      [ 1]  398     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000119 20 34            [ 2]  399     jra write_exit
                                    400 ; write eeprom and option
      00011B                        401 write_eeprom:
      00011B CD 00 C3         [ 4]  402 	call unlock_eeprom
                                    403 	; check for data eeprom or option eeprom
      00011E 90 A3 48 00      [ 2]  404 	cpw y,#OPTION_BASE
      000122 2B 08            [ 1]  405 	jrmi 1$
      000124 90 A3 48 80      [ 2]  406 	cpw y,#OPTION_END+1
      000128 2A 02            [ 1]  407 	jrpl 1$
      00012A 03 02            [ 1]  408 	cpl (OPT,sp)
      00012C                        409 1$: 
      00012C 0D 02            [ 1]  410     tnz (OPT,sp)
      00012E 27 08            [ 1]  411     jreq 2$
                                    412 	; pour modifier une option il faut modifier ces 2 bits
      000130 72 1E 50 5B      [ 1]  413     bset FLASH_CR2,#FLASH_CR2_OPT
      000134 72 1F 50 5C      [ 1]  414     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000138                        415 2$: 
      000138 7B 01            [ 1]  416     ld a,(BTW,sp)
      00013A 92 A7 00 12      [ 4]  417     ldf ([farptr],x),a
      00013E 0D 02            [ 1]  418     tnz (OPT,sp)
      000140 27 08            [ 1]  419     jreq 3$
      000142 5C               [ 2]  420     incw x
      000143 7B 01            [ 1]  421     ld a,(BTW,sp)
      000145 43               [ 1]  422     cpl a
      000146 92 A7 00 12      [ 4]  423     ldf ([farptr],x),a
      00014A 72 05 50 5F FB   [ 2]  424 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014F                        425 write_exit:
      00014F                        426 	_drop VSIZE 
      00014F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000151 90 85            [ 2]  427 	popw y
      000153 81               [ 4]  428     ret
                                    429 
                                    430 ;--------------------------------------------
                                    431 ; write a data block to eeprom or flash 
                                    432 ; input:
                                    433 ;   Y        source address   
                                    434 ;   X        array index  destination  farptr[x]
                                    435 ;   BSIZE    block size bytes 
                                    436 ;   farptr   write address , byte* 
                                    437 ; output:
                                    438 ;	X 		after last byte written 
                                    439 ;   Y 		after last byte read 
                                    440 ;  farptr   point after block
                                    441 ;---------------------------------------------
      000154                        442 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000154                        443 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    444 	; local var 
                           000001   445 	XSAVE=1 
                           000002   446 	VSIZE=2 
      000154                        447 write_block:
      000154                        448 	_vars VSIZE
      000154 52 02            [ 2]    1     sub sp,#VSIZE 
      000156 1F 01            [ 2]  449 	ldw (XSAVE,sp),x 
      000158 1E 05            [ 2]  450 	ldw x,(BSIZE,sp) 
      00015A 27 13            [ 1]  451 	jreq 9$
      00015C 1E 01            [ 2]  452 1$:	ldw x,(XSAVE,sp)
      00015E 90 F6            [ 1]  453 	ld a,(y)
      000160 CD 00 DF         [ 4]  454 	call write_byte 
      000163 5C               [ 2]  455 	incw x 
      000164 90 5C            [ 2]  456 	incw y 
      000166 1F 01            [ 2]  457 	ldw (XSAVE,sp),x
      000168 1E 05            [ 2]  458 	ldw x,(BSIZE,sp)
      00016A 5A               [ 2]  459 	decw x
      00016B 1F 05            [ 2]  460 	ldw (BSIZE,sp),x 
      00016D 26 ED            [ 1]  461 	jrne 1$
      00016F                        462 9$:
      00016F 1E 01            [ 2]  463 	ldw x,(XSAVE,sp)
      000171 CD 1B 98         [ 4]  464 	call incr_farptr
      000174                        465 	_drop VSIZE
      000174 5B 02            [ 2]    1     addw sp,#VSIZE 
      000176 81               [ 4]  466 	ret 
                                    467 
                                    468 
                                    469 ;---------------------------------------------
                                    470 ;   UART1 subroutines
                                    471 ;---------------------------------------------
                                    472 
                                    473 ;---------------------------------------------
                                    474 ; initialize UART1, 115200 8N1
                                    475 ; input:
                                    476 ;	none
                                    477 ; output:
                                    478 ;   none
                                    479 ;---------------------------------------------
      000177                        480 uart1_init:
      000177 72 1A 50 02      [ 1]  481     bset PA_DDR,#UART1_TX_PIN
      00017B 72 1A 50 03      [ 1]  482     bset PA_CR1,#UART1_TX_PIN 
      00017F 72 1A 50 04      [ 1]  483     bset PA_CR2,#UART1_TX_PIN 
                                    484 ; enable UART1 clock
      000183 72 14 50 C7      [ 1]  485 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000187                        486 uart1_set_baud: 
                                    487 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    488 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000187 A6 E1            [ 1]  489 	ld a,#CLK_SWR_HSI
      000189 C1 50 C3         [ 1]  490 	cp a,CLK_CMSR 
      00018C 27 0A            [ 1]  491 	jreq 2$ 
      00018E                        492 1$: ; 8 Mhz 	
      00018E 35 05 52 33      [ 1]  493 	mov UART1_BRR2,#0x05 ; must be loaded first
      000192 35 04 52 32      [ 1]  494 	mov UART1_BRR1,#0x4
      000196 20 08            [ 2]  495 	jra 3$
      000198                        496 2$: ; 16 Mhz 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000198 35 0B 52 33      [ 1]  497 	mov UART1_BRR2,#0x0b ; must be loaded first
      00019C 35 08 52 32      [ 1]  498 	mov UART1_BRR1,#0x08
      0001A0                        499 3$:
      0001A0 72 5F 52 31      [ 1]  500     clr UART1_DR
      0001A4 35 0C 52 35      [ 1]  501 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      0001A8 72 10 52 35      [ 1]  502 	bset UART1_CR2,#UART_CR2_SBK
      0001AC 72 0D 52 30 FB   [ 2]  503     btjf UART1_SR,#UART_SR_TC,.
      0001B1 81               [ 4]  504     ret
                                    505 
                                    506 ;---------------------------------
                                    507 ; send character to UART1 
                                    508 ; input:
                                    509 ;   A 
                                    510 ; output:
                                    511 ;   none 
                                    512 ;--------------------------------	
      0001B2                        513 putc:
      0001B2 72 0F 52 30 FB   [ 2]  514 	btjf UART1_SR,#UART_SR_TXE,.
      0001B7 C7 52 31         [ 1]  515 	ld UART1_DR,a 
      0001BA 81               [ 4]  516 	ret 
                                    517 
                                    518 ;---------------------------------
                                    519 ; wait character from UART1 
                                    520 ; input:
                                    521 ;   none
                                    522 ; output:
                                    523 ;   A 			char  
                                    524 ;--------------------------------	
      0001BB                        525 getc:
      0001BB 72 0B 52 30 FB   [ 2]  526 	btjf UART1_SR,#UART_SR_RXNE,.
      0001C0 C6 52 31         [ 1]  527 	ld a,UART1_DR 
      0001C3 81               [ 4]  528 	ret 
                                    529 
                                    530 ;-----------------------------
                                    531 ; send an ASCIZ string to UART1 
                                    532 ; input: 
                                    533 ;   x 		char * 
                                    534 ; output:
                                    535 ;   none 
                                    536 ;-------------------------------
      0001C4                        537 puts:
      0001C4 F6               [ 1]  538     ld a,(x)
      0001C5 27 06            [ 1]  539 	jreq 1$
      0001C7 CD 01 B2         [ 4]  540 	call putc 
      0001CA 5C               [ 2]  541 	incw x 
      0001CB 20 F7            [ 2]  542 	jra puts 
      0001CD 81               [ 4]  543 1$:	ret 
                                    544 
                                    545 
                                    546 ;---------------------------
                                    547 ; delete character at left 
                                    548 ; of cursor on terminal 
                                    549 ; input:
                                    550 ;   none 
                                    551 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    552 ;	none 
                                    553 ;---------------------------
      0001CE                        554 bksp:
      0001CE A6 08            [ 1]  555 	ld a,#BSP 
      0001D0 CD 01 B2         [ 4]  556 	call putc 
      0001D3 A6 20            [ 1]  557 	ld a,#SPACE 
      0001D5 CD 01 B2         [ 4]  558 	call putc 
      0001D8 A6 08            [ 1]  559 	ld a,#BSP 
      0001DA CD 01 B2         [ 4]  560 	call putc 
      0001DD 81               [ 4]  561 	ret 
                                    562 ;---------------------------
                                    563 ; delete n character left of cursor 
                                    564 ; at terminal.
                                    565 ; input: 
                                    566 ;   A   	number of characters to delete.
                                    567 ; output:
                                    568 ;    none 
                                    569 ;--------------------------	
      0001DE                        570 delete:
      0001DE 88               [ 1]  571 	push a 
      0001DF 0D 01            [ 1]  572 0$:	tnz (1,sp)
      0001E1 27 07            [ 1]  573 	jreq 1$
      0001E3 CD 01 CE         [ 4]  574 	call bksp 
      0001E6 0A 01            [ 1]  575 	dec (1,sp)
      0001E8 20 F5            [ 2]  576 	jra 0$
      0001EA 84               [ 1]  577 1$:	pop a 
      0001EB 81               [ 4]  578 	ret
                                    579 
                                    580 ;--------------------------
                                    581 ; print n spaces on terminal
                                    582 ; input:
                                    583 ;  X 		number of spaces 
                                    584 ; output:
                                    585 ;	none 
                                    586 ;---------------------------
      0001EC                        587 spaces:
      0001EC A6 20            [ 1]  588 	ld a,#SPACE 
      0001EE 5D               [ 2]  589 1$:	tnzw x
      0001EF 27 06            [ 1]  590 	jreq 9$
      0001F1 CD 01 B2         [ 4]  591 	call putc 
      0001F4 5A               [ 2]  592 	decw x
      0001F5 20 F7            [ 2]  593 	jra 1$
      0001F7                        594 9$: 
      0001F7 81               [ 4]  595 	ret 
                                    596 
                           000001   597 .if DEBUG 
                                    598 ;---------------------------------
                                    599 ;; print actual registers states 
                                    600 ;; as pushed on stack 
                                    601 ;; {Y,X,CC,A}
                                    602 ;---------------------------------
      0001F8                        603 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001F8                        604 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001F8                        605 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001F8                        606 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001F8                        607 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001F8                        608 prt_regs:
      0001F8 AE 02 3B         [ 2]  609 	ldw x,#regs_state 
      0001FB CD 01 C4         [ 4]  610 	call puts
                                    611 ; register PC
      0001FE 16 01            [ 2]  612 	ldw y,(1,sp)
      000200 AE 09 7C         [ 2]  613 	ldw x,#REG_EPC 
      000203 CD 08 CD         [ 4]  614 	call prt_reg16 
                                    615 ; register CC 
      000206 7B 08            [ 1]  616 	ld a,(R_CC,sp)
      000208 AE 09 8D         [ 2]  617 	ldw x,#REG_CC 
      00020B CD 08 A8         [ 4]  618 	call prt_reg8 
                                    619 ; register A 
      00020E 7B 07            [ 1]  620 	ld a,(R_A,sp)
      000210 AE 09 89         [ 2]  621 	ldw x,#REG_A 
      000213 CD 08 A8         [ 4]  622 	call prt_reg8 
                                    623 ; register X 
      000216 16 05            [ 2]  624 	ldw y,(R_X,sp)
      000218 AE 09 85         [ 2]  625 	ldw x,#REG_X 
      00021B CD 08 CD         [ 4]  626 	call prt_reg16 
                                    627 ; register Y 
      00021E 16 03            [ 2]  628 	ldw y,(R_Y,sp)
      000220 AE 09 81         [ 2]  629 	ldw x,#REG_Y 
      000223 CD 08 CD         [ 4]  630 	call prt_reg16 
                                    631 ; register SP 
      000226 90 96            [ 1]  632 	ldw y,sp
      000228 72 A9 00 08      [ 2]  633 	addw y,#6+ARG_OFS  
      00022C AE 09 92         [ 2]  634 	ldw x,#REG_SP
      00022F CD 08 CD         [ 4]  635 	call prt_reg16
      000232 A6 0D            [ 1]  636 	ld a,#CR 
      000234 CD 01 B2         [ 4]  637 	call putc
      000237 CD 01 B2         [ 4]  638 	call putc   
      00023A 81               [ 4]  639 	ret 
                                    640 
      00023B 0A 72 65 67 69 73 74   641 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    642 
                                    643 
                                    644 ;--------------------
                                    645 ; print content at address in hex.
                                    646 ; input:
                                    647 ;   X 	address to peek 
                                    648 ; output:
                                    649 ;	none 
                                    650 ;--------------------	
      000262                        651 prt_peek:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000262 89               [ 2]  652 	pushw x 
      000263 CF 00 08         [ 2]  653 	ldw acc16,x 
      000266 72 5F 00 07      [ 1]  654 	clr acc24 
      00026A 5F               [ 1]  655 	clrw x 
      00026B A6 10            [ 1]  656 	ld a,#16 
      00026D CD 09 97         [ 4]  657 	call prti24 
      000270 A6 3A            [ 1]  658 	ld a,#': 
      000272 CD 01 B2         [ 4]  659 	call putc 
      000275 A6 20            [ 1]  660 	ld a,#SPACE 
      000277 CD 01 B2         [ 4]  661 	call putc 
      00027A 85               [ 2]  662 	popw x 
      00027B F6               [ 1]  663 	ld a,(x)
      00027C C7 00 09         [ 1]  664 	ld acc8,a 
      00027F 5F               [ 1]  665 	clrw x 
      000280 A6 10            [ 1]  666 	ld a,#16 
      000282 CD 09 97         [ 4]  667 	call prti24
      000285 81               [ 4]  668 	ret 
                                    669 .endif ; DEBUG  
                                    670 
                                    671 ;-------------------------------------
                                    672 ; retrun string length
                                    673 ; input:
                                    674 ;   X         .asciz  
                                    675 ; output:
                                    676 ;   X         length 
                                    677 ;-------------------------------------
      000286                        678 strlen:
      000286 90 93            [ 1]  679 	ldw y,x 
      000288 5F               [ 1]  680 	clrw x 
      000289 90 7D            [ 1]  681 1$:	tnz (y) 
      00028B 27 05            [ 1]  682 	jreq 9$ 
      00028D 5C               [ 2]  683 	incw x
      00028E 90 5C            [ 2]  684 	incw y 
      000290 20 F7            [ 2]  685 	jra 1$ 
      000292 81               [ 4]  686 9$: ret 
                                    687 
                                    688 ;------------------------------------
                                    689 ; compare 2 strings
                                    690 ; input:
                                    691 ;   X 		char* first string 
                                    692 ;   Y       char* second string 
                                    693 ; output:
                                    694 ;   A 		0|1 
                                    695 ;-------------------------------------
      000293                        696 strcmp:
      000293 F6               [ 1]  697 	ld a,(x)
      000294 27 0B            [ 1]  698 	jreq 5$ 
      000296 90 F1            [ 1]  699 	cp a,(y) 
      000298 26 05            [ 1]  700 	jrne 4$ 
      00029A 5C               [ 2]  701 	incw x 
      00029B 90 5C            [ 2]  702 	incw y 
      00029D 20 F4            [ 2]  703 	jra strcmp 
      00029F                        704 4$: ; not same  
      00029F 4F               [ 1]  705 	clr a 
      0002A0 81               [ 4]  706 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A1                        707 5$: ; same 
      0002A1 A6 01            [ 1]  708 	ld a,#1 
      0002A3 81               [ 4]  709 	ret 
                                    710 
                                    711 
                                    712 ;---------------------------------------
                                    713 ;  copy src to dest 
                                    714 ; input:
                                    715 ;   X 		dest 
                                    716 ;   Y 		src 
                                    717 ; output: 
                                    718 ;   X 		dest 
                                    719 ;----------------------------------
      0002A4                        720 strcpy:
      0002A4 89               [ 2]  721 	pushw x 
      0002A5 90 F6            [ 1]  722 1$: ld a,(y)
      0002A7 27 06            [ 1]  723 	jreq 9$ 
      0002A9 F7               [ 1]  724 	ld (x),a 
      0002AA 5C               [ 2]  725 	incw x 
      0002AB 90 5C            [ 2]  726 	incw y 
      0002AD 20 F6            [ 2]  727 	jra 1$ 
      0002AF 7F               [ 1]  728 9$:	clr (x)
      0002B0 85               [ 2]  729 	popw x 
      0002B1 81               [ 4]  730 	ret 
                                    731 
                                    732 ;---------------------------------------
                                    733 ; move memory block 
                                    734 ; input:
                                    735 ;   X 		destination 
                                    736 ;   Y 	    source 
                                    737 ;   acc16	size 
                                    738 ; output:
                                    739 ;   none 
                                    740 ;--------------------------------------
                           000001   741 	INCR=1 ; increament high byte 
                           000002   742 	LB=2 ; increament low byte 
                           000002   743 	VSIZE=2
      0002B2                        744 move:
      0002B2                        745 	_vars VSIZE 
      0002B2 52 02            [ 2]    1     sub sp,#VSIZE 
      0002B4 0F 01            [ 1]  746 	clr (INCR,sp)
      0002B6 0F 02            [ 1]  747 	clr (LB,sp)
      0002B8 90 89            [ 2]  748 	pushw y 
      0002BA 13 01            [ 2]  749 	cpw x,(1,sp) ; compare DEST to SRC 
      0002BC 90 85            [ 2]  750 	popw y 
      0002BE 27 31            [ 1]  751 	jreq move_exit ; x==y 
      0002C0 2B 0E            [ 1]  752 	jrmi move_down
      0002C2                        753 move_up: ; start from top address with incr=-1
      0002C2 72 BB 00 08      [ 2]  754 	addw x,acc16
      0002C6 72 B9 00 08      [ 2]  755 	addw y,acc16
      0002CA 03 01            [ 1]  756 	cpl (INCR,sp)
      0002CC 03 02            [ 1]  757 	cpl (LB,sp)   ; increment = -1 
      0002CE 20 05            [ 2]  758 	jra move_loop  
      0002D0                        759 move_down: ; start from bottom address with incr=1 
      0002D0 5A               [ 2]  760     decw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002D1 90 5A            [ 2]  761 	decw y
      0002D3 0C 02            [ 1]  762 	inc (LB,sp) ; incr=1 
      0002D5                        763 move_loop:	
      0002D5 C6 00 08         [ 1]  764     ld a, acc16 
      0002D8 CA 00 09         [ 1]  765 	or a, acc8
      0002DB 27 14            [ 1]  766 	jreq move_exit 
      0002DD 72 FB 01         [ 2]  767 	addw x,(INCR,sp)
      0002E0 72 F9 01         [ 2]  768 	addw y,(INCR,sp) 
      0002E3 90 F6            [ 1]  769 	ld a,(y)
      0002E5 F7               [ 1]  770 	ld (x),a 
      0002E6 89               [ 2]  771 	pushw x 
      0002E7 CE 00 08         [ 2]  772 	ldw x,acc16 
      0002EA 5A               [ 2]  773 	decw x 
      0002EB CF 00 08         [ 2]  774 	ldw acc16,x 
      0002EE 85               [ 2]  775 	popw x 
      0002EF 20 E4            [ 2]  776 	jra move_loop
      0002F1                        777 move_exit:
      0002F1                        778 	_drop VSIZE
      0002F1 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002F3 81               [ 4]  779 	ret 	
                                    780 
                                    781 ;-------------------------------------
                                    782 ; search text area for a line with 
                                    783 ; same number as line#  
                                    784 ; input:
                                    785 ;	X 			line# 
                                    786 ; output:
                                    787 ;   X 			addr of line | 0 
                                    788 ;   Y           line#|insert address if not found  
                                    789 ;-------------------------------------
                           000001   790 	LL=1 ; line length 
                           000002   791 	LB=2 ; line length low byte 
                           000002   792 	VSIZE=2 
      0002F4                        793 search_lineno:
      0002F4                        794 	_vars VSIZE
      0002F4 52 02            [ 2]    1     sub sp,#VSIZE 
      0002F6 0F 01            [ 1]  795 	clr (LL,sp)
      0002F8 90 CE 00 1A      [ 2]  796 	ldw y,txtbgn
      0002FC                        797 search_ln_loop:
      0002FC 90 C3 00 1C      [ 2]  798 	cpw y,txtend 
      000300 2A 10            [ 1]  799 	jrpl 8$
      000302 90 F3            [ 1]  800 	cpw x,(y)
      000304 27 0E            [ 1]  801 	jreq 9$
      000306 2B 0A            [ 1]  802 	jrmi 8$ 
      000308 90 E6 02         [ 1]  803 	ld a,(2,y)
      00030B 6B 02            [ 1]  804 	ld (LB,sp),a 
      00030D 72 F9 01         [ 2]  805 	addw y,(LL,sp)
      000310 20 EA            [ 2]  806 	jra search_ln_loop 
      000312                        807 8$: 
      000312 5F               [ 1]  808 	clrw x 	
      000313 51               [ 1]  809 	exgw x,y 
      000314                        810 9$: _drop VSIZE
      000314 5B 02            [ 2]    1     addw sp,#VSIZE 
      000316 51               [ 1]  811 	exgw x,y   
      000317 81               [ 4]  812 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    813 
                                    814 ;-------------------------------------
                                    815 ; delete line at addr
                                    816 ; move new line to insert with end of text 
                                    817 ; otherwise it would be overwritten.
                                    818 ; input:
                                    819 ;   X 		addr of line i.e DEST for move 
                                    820 ;-------------------------------------
                           000001   821 	LLEN=1
                           000003   822 	SRC=3
                           000004   823 	VSIZE=4
      000318                        824 del_line: 
      000318                        825 	_vars VSIZE 
      000318 52 04            [ 2]    1     sub sp,#VSIZE 
      00031A E6 02            [ 1]  826 	ld a,(2,x) ; line length
      00031C 6B 02            [ 1]  827 	ld (LLEN+1,sp),a 
      00031E 0F 01            [ 1]  828 	clr (LLEN,sp)
      000320 90 93            [ 1]  829 	ldw y,x  
      000322 72 F9 01         [ 2]  830 	addw y,(LLEN,sp) ;SRC  
      000325 17 03            [ 2]  831 	ldw (SRC,sp),y  ;save source 
      000327 90 CE 00 1C      [ 2]  832 	ldw y,txtend 
      00032B 90 E6 02         [ 1]  833 	ld a,(2,y)
      00032E 90 5F            [ 1]  834 	clrw y 
      000330 90 97            [ 1]  835 	ld yl,a  
      000332 72 B9 00 1C      [ 2]  836 	addw y,txtend
      000336 72 F2 03         [ 2]  837 	subw y,(SRC,sp) ; y=count 
      000339 90 CF 00 08      [ 2]  838 	ldw acc16,y 
      00033D 16 03            [ 2]  839 	ldw y,(SRC,sp)    ; source
      00033F CD 02 B2         [ 4]  840 	call move
      000342 90 CE 00 1C      [ 2]  841 	ldw y,txtend 
      000346 72 F2 01         [ 2]  842 	subw y,(LLEN,sp)
      000349 90 CF 00 1C      [ 2]  843 	ldw txtend,y  
      00034D                        844 	_drop VSIZE     
      00034D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00034F 81               [ 4]  845 	ret 
                                    846 
                                    847 ;---------------------------------------------
                                    848 ; create a gap in text area 
                                    849 ; move new line to insert in gap with end of text
                                    850 ; otherwise it would be overwritten.
                                    851 ; input:
                                    852 ;    X 			addr gap start 
                                    853 ;    Y 			gap length 
                                    854 ; output:
                                    855 ;    X 			addr gap start 
                                    856 ;--------------------------------------------
                           000001   857 	DEST=1
                           000003   858 	SRC=3
                           000005   859 	LEN=5
                           000006   860 	VSIZE=6 
      000350                        861 create_gap:
      000350                        862 	_vars VSIZE
      000350 52 06            [ 2]    1     sub sp,#VSIZE 
      000352 1F 03            [ 2]  863 	ldw (SRC,sp),x 
      000354 17 05            [ 2]  864 	ldw (LEN,sp),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000356 90 CF 00 08      [ 2]  865 	ldw acc16,y 
      00035A 90 93            [ 1]  866 	ldw y,x ; SRC
      00035C 72 BB 00 08      [ 2]  867 	addw x,acc16  
      000360 1F 01            [ 2]  868 	ldw (DEST,sp),x 
                                    869 ;compute size to move 	
      000362 CE 00 1C         [ 2]  870 	ldw x,txtend 
      000365 E6 02            [ 1]  871 	ld a,(2,x) ; pending line length 
      000367 C7 00 09         [ 1]  872 	ld acc8,a 
      00036A 72 5F 00 08      [ 1]  873 	clr acc16 
      00036E 72 BB 00 08      [ 2]  874 	addw x,acc16 
      000372 72 F0 03         [ 2]  875 	subw x,(SRC,sp)
      000375 CF 00 08         [ 2]  876 	ldw acc16,x ; size to move
      000378 1E 01            [ 2]  877 	ldw x,(DEST,sp) 
      00037A CD 02 B2         [ 4]  878 	call move
      00037D CE 00 1C         [ 2]  879 	ldw x,txtend
      000380 72 FB 05         [ 2]  880 	addw x,(LEN,sp)
      000383 CF 00 1C         [ 2]  881 	ldw txtend,x
      000386                        882 9$:	_drop VSIZE 
      000386 5B 06            [ 2]    1     addw sp,#VSIZE 
      000388 81               [ 4]  883 	ret 
                                    884 
                                    885 
                                    886 ;--------------------------------------------
                                    887 ; insert line in tib into text area 
                                    888 ; first search for already existing 
                                    889 ; replace existing 
                                    890 ; if strlen(tib)==0 delete existing 
                                    891 ; input:
                                    892 ;   ptr16 				pointer to tokenized line  
                                    893 ; output:
                                    894 ;   none
                                    895 ;---------------------------------------------
                           000001   896 	DEST=1  ; text area insertion address 
                           000003   897 	SRC=3   ; str to insert address 
                           000005   898 	LINENO=5 ; line number 
                           000007   899 	LLEN=7 ; line length 
                           000008   900 	VSIZE=8  
      000389                        901 insert_line:
      000389                        902 	_vars VSIZE 
      000389 52 08            [ 2]    1     sub sp,#VSIZE 
      00038B CE 00 13         [ 2]  903 	ldw x,ptr16  
      00038E C3 00 1A         [ 2]  904 	cpw x,txtbgn 
      000391 26 0D            [ 1]  905 	jrne 0$
                                    906 ;first text line 
      000393 AE 00 02         [ 2]  907 	ldw x,#2 
      000396 72 D6 00 13      [ 4]  908 	ld a,([ptr16],x)
      00039A 5F               [ 1]  909 	clrw x 
      00039B 97               [ 1]  910 	ld xl,a
      00039C 1F 07            [ 2]  911 	ldw (LLEN,sp),x  
      00039E 20 45            [ 2]  912 	jra 5$
      0003A0 72 CE 00 13      [ 5]  913 0$:	ldw x,[ptr16]
                                    914 ; new line number
      0003A4 1F 05            [ 2]  915 	ldw (LINENO,sp),x 
      0003A6 AE 00 02         [ 2]  916 	ldw x,#2 
      0003A9 72 D6 00 13      [ 4]  917 	ld a,([ptr16],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003AD 97               [ 1]  918 	ld xl,a
                                    919 ; new line length
      0003AE 1F 07            [ 2]  920 	ldw (LLEN,sp),x
                                    921 ; check if that line number already exit 	
      0003B0 1E 05            [ 2]  922 	ldw x,(LINENO,sp)
      0003B2 CD 02 F4         [ 4]  923 	call search_lineno 
      0003B5 5D               [ 2]  924 	tnzw x 
      0003B6 26 04            [ 1]  925 	jrne 2$
                                    926 ; line doesn't exit
                                    927 ; it will be inserted at this point.  	
      0003B8 17 01            [ 2]  928 	ldw (DEST,sp),y 
      0003BA 20 05            [ 2]  929 	jra 3$
                                    930 ; line exit delete it.
                                    931 ; it will be replaced by new one 	
      0003BC 1F 01            [ 2]  932 2$: ldw (DEST,sp),x 
      0003BE CD 03 18         [ 4]  933 	call del_line
      0003C1                        934 3$: 
                                    935 ; insert new line or leave if LLEN==3
                                    936 ; LLEN==3 means empty line 
      0003C1 A6 03            [ 1]  937 	ld a,#3
      0003C3 11 08            [ 1]  938 	cp a,(LLEN+1,sp)
      0003C5 27 27            [ 1]  939 	jreq insert_ln_exit ; empty line exit.
                                    940 ; if insertion point at txtend 
                                    941 ; no move required 
      0003C7 1E 01            [ 2]  942 	ldw x,(DEST,sp)
      0003C9 C3 00 1C         [ 2]  943 	cpw x,txtend 
      0003CC 2A 17            [ 1]  944 	jrpl 5$ 
                                    945 ; must create a gap
                                    946 ; at insertion point  
      0003CE 1E 01            [ 2]  947 	ldw x,(DEST,sp)
      0003D0 16 07            [ 2]  948 	ldw y,(LLEN,sp)
      0003D2 CD 03 50         [ 4]  949 	call create_gap 
                                    950 ; move new line in gap 
      0003D5 1E 07            [ 2]  951 	ldw x,(LLEN,sp)
      0003D7 CF 00 08         [ 2]  952 	ldw acc16,x 
      0003DA 90 CE 00 1C      [ 2]  953 	ldw y,txtend ;SRC 
      0003DE 1E 01            [ 2]  954 	ldw x,(DEST,sp) ; dest address 
      0003E0 CD 02 B2         [ 4]  955 	call move 
      0003E3 20 09            [ 2]  956 	jra insert_ln_exit  
      0003E5                        957 5$: ; no move required 
      0003E5 1E 07            [ 2]  958 	ldw x,(LLEN,sp) 
      0003E7 72 BB 00 1C      [ 2]  959 	addw x,txtend 
      0003EB CF 00 1C         [ 2]  960 	ldw txtend,x 
      0003EE                        961 insert_ln_exit:	
      0003EE                        962 	_drop VSIZE
      0003EE 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003F0 81               [ 4]  963 	ret
                                    964 
                                    965 
                                    966 ;-----------------------------
                                    967 ; check if text buffer full
                                    968 ; input:
                                    969 ;   ptr16     addr start tokenize line 
                                    970 ;   X         buffer index 
                                    971 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    972 ;   none 
                                    973 ;-----------------------------------
      0003F1                        974 check_full:
      0003F1 72 BB 00 13      [ 2]  975 	addw x,ptr16 
      0003F5 A3 16 C8         [ 2]  976 	cpw x,#tib 
      0003F8 25 05            [ 1]  977 	jrult 1$
      0003FA A6 01            [ 1]  978 	ld a,#ERR_MEM_FULL
      0003FC CC 07 81         [ 2]  979 	jp tb_error 
      0003FF 81               [ 4]  980 1$: ret 
                                    981 
                                    982 
                                    983 ;-----------------------------------
                                    984 ; create token list form text line 
                                    985 ; save this list in text area
                                    986 ; input:
                                    987 ;   none
                                    988 ; output:
                                    989 ;   basicptr     token list buffer
                                    990 ;   line# 		 BASIC line number 
                                    991 ;   in.w  		 cleared 
                                    992 ;-----------------------------------
                                    993 	.macro _incr_ptr16 n 
                                    994 	ldw x,#n 
                                    995 	addw x,ptr16 
                                    996 	ldw ptr16,x 
                                    997 	.endm 
                                    998 
                           000001   999 	XSAVE=1
                           000003  1000 	BUFIDX=3
                           000004  1001 	VSIZE=4
      000400                       1002 compile:
      000400                       1003 	_vars VSIZE 
      000400 52 04            [ 2]    1     sub sp,#VSIZE 
      000402 72 1A 00 21      [ 1] 1004 	bset flags,#FCOMP 
      000406 CE 00 1C         [ 2] 1005 	ldw x,txtend
      000409 CF 00 13         [ 2] 1006 	ldw ptr16,x 
      00040C 5F               [ 1] 1007 	clrw x 
      00040D AE 00 03         [ 2] 1008 	ldw x,#3
      000410 1F 03            [ 2] 1009 	ldw (BUFIDX,sp),X  
      000412 CD 03 F1         [ 4] 1010 	call check_full
      000415 5F               [ 1] 1011 	clrw x 
      000416 72 CF 00 13      [ 5] 1012 	ldw [ptr16],x 
      00041A CD 0D 46         [ 4] 1013 	call get_token
      00041D 1F 01            [ 2] 1014 	ldw (XSAVE,sp),x 
      00041F A1 04            [ 1] 1015 	cp a,#TK_INTGR 
      000421 26 11            [ 1] 1016 	jrne 3$
      000423 A3 00 00         [ 2] 1017 	cpw x,#0  
      000426 22 03            [ 1] 1018 	jrugt 1$
      000428 CC 07 7F         [ 2] 1019 	jp syntax_error 
      00042B 72 CF 00 13      [ 5] 1020 1$:	ldw [ptr16],x; line number
      00042F CD 0D 46         [ 4] 1021 2$:	call get_token
      000432 1F 01            [ 2] 1022 	ldw (XSAVE,sp),x 
      000434 A1 00            [ 1] 1023 3$:	cp a,#TK_NONE 
      000436 26 03            [ 1] 1024 	jrne 30$
      000438 CC 04 CB         [ 2] 1025 	jp 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00043B                       1026 30$: 	 
      00043B 1E 03            [ 2] 1027 	ldw x,(BUFIDX,sp)
      00043D CD 03 F1         [ 4] 1028 	call check_full 
      000440 16 03            [ 2] 1029 	ldw y,(BUFIDX,sp) 
      000442 91 D7 13         [ 4] 1030 	ld ([ptr16],y),a ; token attribute 
      000445 90 5C            [ 2] 1031 	incw y
      000447 17 03            [ 2] 1032 	ldw (BUFIDX,sp),y
      000449 A1 01            [ 1] 1033 	cp a,#TK_COLON 
      00044B 26 02            [ 1] 1034 	jrne 31$
      00044D 20 E0            [ 2] 1035 	jra 2$ 
      00044F                       1036 31$:
      00044F A1 03            [ 1] 1037 	cp a,#TK_CHAR
      000451 26 0C            [ 1] 1038 	jrne 32$ 
      000453 1E 01            [ 2] 1039 	ldw x,(XSAVE,sp)
      000455 9F               [ 1] 1040 	ld a,xl 
      000456 91 D7 13         [ 4] 1041 	ld ([ptr16],y),a
      000459 90 5C            [ 2] 1042 	incw y 
      00045B 17 03            [ 2] 1043 	ldw (BUFIDX,sp),y 
      00045D 20 D0            [ 2] 1044 	jra 2$ 
      00045F                       1045 32$:
      00045F A1 02            [ 1] 1046 	cp a,#TK_ARRAY 
      000461 27 CC            [ 1] 1047 	jreq 2$ 
      000463 A1 0A            [ 1] 1048 	cp a,#TK_QSTR 
      000465 26 25            [ 1] 1049 	jrne 4$
      000467 AE 17 18         [ 2] 1050 	ldw x,#pad 
      00046A CD 02 86         [ 4] 1051 	call strlen
      00046D 5C               [ 2] 1052 	incw x  
      00046E CD 03 F1         [ 4] 1053 	call check_full 
      000471 90 AE 17 18      [ 2] 1054 	ldw y,#pad 
      000475 CE 00 13         [ 2] 1055 	ldw x,ptr16
      000478 72 FB 03         [ 2] 1056 	addw x,(BUFIDX,sp)	
      00047B CD 02 A4         [ 4] 1057 	call strcpy 
      00047E AE 17 18         [ 2] 1058 	ldw x,#pad 
      000481 CD 02 86         [ 4] 1059 	call strlen 
      000484 5C               [ 2] 1060 	incw x
      000485 72 FB 03         [ 2] 1061 	addw x,(BUFIDX,sp) 
      000488 1F 03            [ 2] 1062 	ldw (BUFIDX,sp),x
      00048A 20 A3            [ 2] 1063 	jra 2$  
      00048C A1 04            [ 1] 1064 4$: cp a,#TK_INTGR
      00048E 25 9F            [ 1] 1065 	jrult 2$
      000490 A1 09            [ 1] 1066 	cp a,#TK_CONST 
      000492 22 9B            [ 1] 1067 	Jrugt 2$
      000494 1E 01            [ 2] 1068 	ldw x,(XSAVE,sp) 
      000496 16 03            [ 2] 1069 	ldw y,(BUFIDX,sp)
      000498 91 DF 13         [ 5] 1070 	ldw ([ptr16],y),x
      00049B A3 17 5B         [ 2] 1071 	cpw x,#rem 
      00049E 26 22            [ 1] 1072 	jrne 5$	
                                   1073 ; comment advance in.w to eol 
      0004A0 72 A9 00 02      [ 2] 1074 	addw y,#2 ; skip exec address 
      0004A4 17 03            [ 2] 1075 	ldw (BUFIDX,sp),y 
      0004A6 CE 00 13         [ 2] 1076 	ldw x,ptr16 
      0004A9 72 FB 03         [ 2] 1077 	addw x,(BUFIDX,sp)
      0004AC 90 CE 00 00      [ 2] 1078 	ldw y,in.w 
      0004B0 72 A9 16 C8      [ 2] 1079 	addw y,#tib 
      0004B4 CD 02 A4         [ 4] 1080 	call strcpy 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004B7 CD 02 86         [ 4] 1081 	call strlen 
      0004BA 5C               [ 2] 1082 	incw x ; skip string 0. 
      0004BB 72 FB 03         [ 2] 1083 	addw x,(BUFIDX,sp)
      0004BE 1F 03            [ 2] 1084 	ldw (BUFIDX,sp),x 
      0004C0 20 09            [ 2] 1085 	jra 9$
      0004C2 72 A9 00 02      [ 2] 1086 5$:	addw y,#2 
      0004C6 17 03            [ 2] 1087 	ldw (BUFIDX,sp),y 
      0004C8 CC 04 2F         [ 2] 1088 	jp 2$
      0004CB                       1089 9$: 
      0004CB AE 00 02         [ 2] 1090 	ldw x,#2
      0004CE 16 03            [ 2] 1091 	ldw y,(BUFIDX,sp)
      0004D0 90 9F            [ 1] 1092 	ld a,yl 
      0004D2 72 D7 00 13      [ 4] 1093 	ld ([ptr16],x),a  	
      0004D6 72 CE 00 13      [ 5] 1094 	ldw x,[ptr16]
      0004DA 27 09            [ 1] 1095 	jreq 10$
      0004DC CD 03 89         [ 4] 1096 	call insert_line
      0004DF 72 5F 00 03      [ 1] 1097 	clr  count 
      0004E3 20 0F            [ 2] 1098 	jra  11$ 
      0004E5                       1099 10$: 
      0004E5 CE 00 13         [ 2] 1100 	ldw x,ptr16 
      0004E8 CF 00 04         [ 2] 1101 	ldw basicptr,x 
      0004EB E6 02            [ 1] 1102 	ld a,(2,x)
      0004ED C7 00 03         [ 1] 1103 	ld count,a 
      0004F0 35 03 00 01      [ 1] 1104 	mov in,#3 
      0004F4                       1105 11$:
      0004F4                       1106 	_drop VSIZE 
      0004F4 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004F6 72 1B 00 21      [ 1] 1107 	bres flags,#FCOMP 
      0004FA 81               [ 4] 1108 	ret 
                                   1109 
                                   1110 
                                   1111 ;------------------------------------
                                   1112 ;  set all variables to zero 
                                   1113 ; input:
                                   1114 ;   none 
                                   1115 ; output:
                                   1116 ;	none
                                   1117 ;------------------------------------
      0004FB                       1118 clear_vars:
      0004FB AE 00 23         [ 2] 1119 	ldw x,#vars 
      0004FE 90 AE 00 34      [ 2] 1120 	ldw y,#2*26 
      000502 7F               [ 1] 1121 1$:	clr (x)
      000503 5C               [ 2] 1122 	incw x 
      000504 90 5A            [ 2] 1123 	decw y 
      000506 26 FA            [ 1] 1124 	jrne 1$
      000508 81               [ 4] 1125 	ret 
                                   1126 
                                   1127 ;-------------------------------------
                                   1128 ; check if A is a letter
                                   1129 ; input:
                                   1130 ;   A 			character to test 
                                   1131 ; output:
                                   1132 ;   C flag      1 true, 0 false 
                                   1133 ;-------------------------------------
      000509                       1134 is_alpha:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000509 A1 41            [ 1] 1135 	cp a,#'A 
      00050B 8C               [ 1] 1136 	ccf
      00050C 24 0B            [ 1] 1137 	jrnc 9$ 
      00050E A1 5B            [ 1] 1138 	cp a,#'Z+1 
      000510 25 07            [ 1] 1139 	jrc 9$ 
      000512 A1 61            [ 1] 1140 	cp a,#'a 
      000514 8C               [ 1] 1141 	ccf 
      000515 24 02            [ 1] 1142 	jrnc 9$
      000517 A1 7B            [ 1] 1143 	cp a,#'z+1   
      000519 81               [ 4] 1144 9$: ret 	
                                   1145 
                                   1146 ;-------------------------------------
                                   1147 ;  program initialization entry point 
                                   1148 ;-------------------------------------
                           000001  1149 	MAJOR=1
                           000000  1150 	MINOR=0
      00051A 0A 0A 54 69 6E 79 20  1151 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      000560                       1152 cold_start:
                                   1153 ;set stack 
      000560 AE 17 FF         [ 2] 1154 	ldw x,#STACK_EMPTY
      000563 94               [ 1] 1155 	ldw sp,x   
                                   1156 ; clear all ram 
      000564 7F               [ 1] 1157 0$: clr (x)
      000565 5A               [ 2] 1158 	decw x 
      000566 26 FC            [ 1] 1159 	jrne 0$
                                   1160 ; activate pull up on all inputs 
      000568 A6 FF            [ 1] 1161 	ld a,#255 
      00056A C7 50 03         [ 1] 1162 	ld PA_CR1,a 
      00056D C7 50 08         [ 1] 1163 	ld PB_CR1,a 
      000570 C7 50 0D         [ 1] 1164 	ld PC_CR1,a 
      000573 C7 50 12         [ 1] 1165 	ld PD_CR1,a 
      000576 C7 50 17         [ 1] 1166 	ld PE_CR1,a 
      000579 C7 50 1C         [ 1] 1167 	ld PF_CR1,a 
      00057C C7 50 21         [ 1] 1168 	ld PG_CR1,a 
      00057F C7 50 2B         [ 1] 1169 	ld PI_CR1,a 
                                   1170 ; disable schmitt triggers on Arduino CN4 analog inputs
      000582 55 00 3F 54 07   [ 1] 1171 	mov ADC_TDRL,0x3f
                                   1172 ; disable peripherals clocks
                                   1173 ;	clr CLK_PCKENR1 
                                   1174 ;	clr CLK_PCKENR2
      000587 72 5F 50 F2      [ 1] 1175 	clr AWU_TBR 
      00058B 72 14 50 CA      [ 1] 1176 	bset CLK_PCKENR2,#2 ; enable LSI for beeper
                                   1177 ; select internal clock no divisor: 16 Mhz 	
      00058F A6 E1            [ 1] 1178 	ld a,#CLK_SWR_HSI 
      000591 5F               [ 1] 1179 	clrw x  
      000592 CD 00 8B         [ 4] 1180     call clock_init 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000595 CD 00 AE         [ 4] 1181 	call timer4_init
      000598 CD 00 A1         [ 4] 1182 	call timer2_init
                                   1183 ; UART1 at 115200 BAUD
      00059B CD 01 77         [ 4] 1184 	call uart1_init
                                   1185 ; activate PE_4 (user button interrupt)
      00059E 72 18 50 18      [ 1] 1186     bset PE_CR2,#USR_BTN_BIT 
                                   1187 ; display system information
      0005A2 AE 05 1A         [ 2] 1188 	ldw x,#software 
      0005A5 CD 01 C4         [ 4] 1189 	call puts 
      0005A8 A6 01            [ 1] 1190 	ld a,#MAJOR 
      0005AA C7 00 09         [ 1] 1191 	ld acc8,a 
      0005AD 5F               [ 1] 1192 	clrw x 
      0005AE CF 00 07         [ 2] 1193 	ldw acc24,x 
      0005B1 A6 0A            [ 1] 1194 	ld a,#10 
      0005B3 CD 09 97         [ 4] 1195 	call prti24 
      0005B6 A6 2E            [ 1] 1196 	ld a,#'.
      0005B8 CD 01 B2         [ 4] 1197 	call putc 
      0005BB A6 00            [ 1] 1198 	ld a,#MINOR 
      0005BD C7 00 09         [ 1] 1199 	ld acc8,a 
      0005C0 5F               [ 1] 1200 	clrw x 
      0005C1 CF 00 07         [ 2] 1201 	ldw acc24,x 
      0005C4 A6 0A            [ 1] 1202 	ld a,#10 
      0005C6 CD 09 97         [ 4] 1203 	call prti24 
      0005C9 A6 0D            [ 1] 1204 	ld a,#CR 
      0005CB CD 01 B2         [ 4] 1205 	call putc 
      0005CE CD 1B A6         [ 4] 1206 	call seek_fdrive 
                                   1207 ; configure LD2 pin 
      0005D1 72 1A 50 0D      [ 1] 1208     bset PC_CR1,#LED2_BIT
      0005D5 72 1A 50 0E      [ 1] 1209     bset PC_CR2,#LED2_BIT
      0005D9 72 1A 50 0C      [ 1] 1210     bset PC_DDR,#LED2_BIT
      0005DD 9A               [ 1] 1211 	rim 
      0005DE 72 5C 00 11      [ 1] 1212 	inc seedy+1 
      0005E2 72 5C 00 0F      [ 1] 1213 	inc seedx+1 
      0005E6 CD 06 51         [ 4] 1214 	call clear_basic
      0005E9 CD 13 C8         [ 4] 1215 	call ubound 
      0005EC CD 0F E5         [ 4] 1216 	call dpop 
      0005EF CF 00 1F         [ 2] 1217 	ldw array_size,x
      0005F2 CD 05 FB         [ 4] 1218 	call warm_init
      0005F5 CD 06 18         [ 4] 1219 	call load_autorun
      0005F8 CC 07 D6         [ 2] 1220     jp interp 
                                   1221 
      0005FB                       1222 warm_init:
      0005FB 72 5F 00 21      [ 1] 1223 	clr flags 
      0005FF 72 5F 00 1E      [ 1] 1224 	clr loop_depth 
      000603 AE 17 80         [ 2] 1225 	ldw x,#dstack_empty 
      000606 CF 00 18         [ 2] 1226 	ldw dstkptr,x 
      000609 35 04 00 22      [ 1] 1227 	mov tab_width,#TAB_WIDTH 
      00060D 35 0A 00 06      [ 1] 1228 	mov base,#10 
      000611 AE 16 C8         [ 2] 1229 	ldw x,#tib 
      000614 CF 00 04         [ 2] 1230 	ldw basicptr,x 
      000617 81               [ 4] 1231 	ret 
                                   1232 
                                   1233 ;--------------------------
                                   1234 ; if autorun file defined 
                                   1235 ; in eeprom address AUTORUN_NAME 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1236 ; load and run it.
                                   1237 ;-------------------------
      000618                       1238 load_autorun:
      000618 AE 40 00         [ 2] 1239 	ldw x,#AUTORUN_NAME
      00061B F6               [ 1] 1240 	ld a,(x)
      00061C 27 1D            [ 1] 1241 	jreq 9$
      00061E 90 AE 40 00      [ 2] 1242 	ldw y,#AUTORUN_NAME
      000622 CD 1C 04         [ 4] 1243 	call search_file
      000625 25 02            [ 1] 1244 	jrc 2$ 
      000627 20 12            [ 2] 1245 	jra 9$ 
      000629 CD 1D 13         [ 4] 1246 2$:	call load_file
      00062C AE 40 00         [ 2] 1247 	ldw x,#AUTORUN_NAME 
      00062F CD 01 C4         [ 4] 1248 	call puts
      000632 AE 06 3C         [ 2] 1249 	ldw x,#autorun_msg 
      000635 CD 01 C4         [ 4] 1250 	call puts 
      000638 CC 19 D9         [ 2] 1251 	jp run_it    
      00063B 81               [ 4] 1252 9$: ret 	
                                   1253 
      00063C 20 6C 6F 61 64 65 64  1254 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1255 ;---------------------------
                                   1256 ; reset BASIC text variables 
                                   1257 ; and clear variables 
                                   1258 ;---------------------------
      000651                       1259 clear_basic:
      000651 72 5F 00 03      [ 1] 1260 	clr count 
      000655 AE 00 57         [ 2] 1261 	ldw x,#free_ram 
      000658 CF 00 1A         [ 2] 1262 	ldw txtbgn,x 
      00065B CF 00 1C         [ 2] 1263 	ldw txtend,x 
      00065E CD 04 FB         [ 4] 1264 	call clear_vars 
      000661 81               [ 4] 1265 	ret 
                                   1266 
                                   1267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1268 ;;   Tiny BASIC error messages     ;;
                                   1269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000662                       1270 err_msg:
      000662 00 00 06 7A 06 88 06  1271 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             97 06 B1 06 C1
      00066E 06 D8 06 EF 07 0A 07  1272 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             1C 07 2E
      000678 07 3B                 1273 	.word err_no_access 
                                   1274 
      00067A 0A 4D 65 6D 6F 72 79  1275 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      000688 0A 73 79 6E 74 61 78  1276 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      000697 0A 6D 61 74 68 20 6F  1277 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      0006B1 0A 64 69 76 69 73 69  1278 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0006C1 0A 69 6E 76 61 6C 69  1279 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      0006D8 0A 72 75 6E 20 74 69  1280 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      0006EF 0A 63 6F 6D 6D 61 6E  1281 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      00070A 0A 64 75 70 6C 69 63  1282 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      00071C 0A 46 69 6C 65 20 6E  1283 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      00072E 0A 62 61 64 20 76 61  1284 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      00073B 0A 46 69 6C 65 20 69  1285 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1286 
      00076F 6C 61 73 74 20 74 6F  1287 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1288 
      00077F                       1289 syntax_error:
      00077F A6 02            [ 1] 1290 	ld a,#ERR_SYNTAX 
                                   1291 
      000781                       1292 tb_error:
      000781 AE 06 62         [ 2] 1293 	ldw x, #err_msg 
      000784 72 5F 00 08      [ 1] 1294 	clr acc16 
      000788 48               [ 1] 1295 	sll a
      000789 72 59 00 08      [ 1] 1296 	rlc acc16  
      00078D C7 00 09         [ 1] 1297 	ld acc8, a 
      000790 72 BB 00 08      [ 2] 1298 	addw x,acc16 
      000794 FE               [ 2] 1299 	ldw x,(x)
      000795 CD 01 C4         [ 4] 1300 	call puts
      000798 72 0B 00 21 18   [ 2] 1301 	btjf flags,#FCOMP, 1$
      00079D AE 16 C8         [ 2] 1302 	ldw x,#tib
      0007A0 CD 01 C4         [ 4] 1303 	call puts 
      0007A3 A6 0D            [ 1] 1304 	ld a,#CR 
      0007A5 CD 01 B2         [ 4] 1305 	call putc
      0007A8 CE 00 00         [ 2] 1306 	ldw x,in.w
      0007AB CD 01 EC         [ 4] 1307 	call spaces
      0007AE A6 5E            [ 1] 1308 	ld a,#'^
      0007B0 CD 01 B2         [ 4] 1309 	call putc 
      0007B3 20 1A            [ 2] 1310 	jra 6$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0007B5 CE 00 04         [ 2] 1311 1$:	ldw x,basicptr
      0007B8 CD 14 E5         [ 4] 1312 	call prt_basic_line
      0007BB AE 07 6F         [ 2] 1313 	ldw x,#rt_msg 
      0007BE CD 01 C4         [ 4] 1314 	call puts 
      0007C1 5F               [ 1] 1315 	clrw x 
      0007C2 C6 00 02         [ 1] 1316 	ld a,in.saved 
      0007C5 97               [ 1] 1317 	ld xl,a 
      0007C6 72 D6 00 04      [ 4] 1318 	ld a,([basicptr],x)
      0007CA 5F               [ 1] 1319 	clrw x 
      0007CB 97               [ 1] 1320 	ld xl,a 
      0007CC CD 09 DF         [ 4] 1321 	call print_int 
      0007CF AE 17 FF         [ 2] 1322 6$: ldw x,#STACK_EMPTY 
      0007D2 94               [ 1] 1323     ldw sp,x
      0007D3                       1324 warm_start:
      0007D3 CD 05 FB         [ 4] 1325 	call warm_init
                                   1326 ;----------------------------
                                   1327 ;   BASIC interpreter
                                   1328 ;----------------------------
      0007D6                       1329 interp:
      0007D6 72 5F 00 00      [ 1] 1330 	clr in.w
      0007DA 72 01 00 21 23   [ 2] 1331 	btjf flags,#FRUN,4$ 
                                   1332 ; running program
                                   1333 ; goto next basic line 
      0007DF CE 00 04         [ 2] 1334 	ldw x,basicptr
      0007E2 E6 02            [ 1] 1335 	ld a,(2,x) ; line length 
      0007E4 C7 00 09         [ 1] 1336 	ld acc8,a 
      0007E7 72 5F 00 08      [ 1] 1337 	clr acc16 
      0007EB 72 BB 00 08      [ 2] 1338 	addw x,acc16
      0007EF C3 00 1C         [ 2] 1339 	cpw x,txtend 
      0007F2 2A DF            [ 1] 1340 	jrpl warm_start
      0007F4 CF 00 04         [ 2] 1341 	ldw basicptr,x ; start of next line  
      0007F7 E6 02            [ 1] 1342 	ld a,(2,x)
      0007F9 C7 00 03         [ 1] 1343 	ld count,a 
      0007FC 35 03 00 01      [ 1] 1344 	mov in,#3 ; skip first 3 bytes of line 
      000800 20 14            [ 2] 1345 	jra interp_loop 
      000802                       1346 4$: ; commande line mode 	
      000802 72 5F 00 01      [ 1] 1347 	clr in
      000806 A6 0D            [ 1] 1348 	ld a,#CR 
      000808 CD 01 B2         [ 4] 1349 	call putc 
      00080B A6 3E            [ 1] 1350 	ld a,#'> 
      00080D CD 01 B2         [ 4] 1351 	call putc 
      000810 CD 0A CD         [ 4] 1352 	call readln
      000813 CD 04 00         [ 4] 1353 	call compile
      000816                       1354 interp_loop:  
      000816 C6 00 01         [ 1] 1355 	ld a,in 
      000819 C1 00 03         [ 1] 1356 	cp a,count  
      00081C 2A B8            [ 1] 1357 	jrpl interp
      00081E CD 08 46         [ 4] 1358 	call next_token
      000821 A1 01            [ 1] 1359 	cp a,#TK_COLON 
      000823 27 F1            [ 1] 1360 	jreq interp_loop 
      000825 A1 00            [ 1] 1361 	cp a,#TK_NONE 
                                   1362 ;	jreq interp 
      000827                       1363 1$:
      000827 A1 05            [ 1] 1364 	cp a,#TK_VAR
      000829 26 05            [ 1] 1365 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00082B CD 13 F4         [ 4] 1366 	call let02  
      00082E 20 E6            [ 2] 1367 	jra interp_loop 
      000830                       1368 2$:	
      000830 A1 02            [ 1] 1369 	cp a,#TK_ARRAY 
      000832 26 08            [ 1] 1370 	jrne 3$
      000834 CD 12 39         [ 4] 1371 	call get_array_element
      000837 CD 13 F4         [ 4] 1372 	call let02 
      00083A 20 DA            [ 2] 1373 	jra interp_loop 
      00083C                       1374 3$:
      00083C A1 06            [ 1] 1375 	cp a,#TK_CMD
      00083E 26 03            [ 1] 1376 	jrne 4$
      000840 FD               [ 4] 1377 	call (x) 
      000841 20 D3            [ 2] 1378 	jra interp_loop 
      000843                       1379 4$:	
      000843 CC 07 7F         [ 2] 1380 	jp syntax_error 
                                   1381 
                                   1382 ;--------------------------
                                   1383 ; extract next token from
                                   1384 ; token list 
                                   1385 ; basicptr -> base address 
                                   1386 ; in  -> offset in list array 
                                   1387 ; output:
                                   1388 ;   A 		token attribute
                                   1389 ;   X 		token value if there is one
                                   1390 ;----------------------------------------
      000846                       1391 next_token:
      000846 C6 00 01         [ 1] 1392 	ld a,in 
      000849 C0 00 03         [ 1] 1393 	sub a,count 
      00084C 27 3B            [ 1] 1394 	jreq 9$
      00084E 55 00 01 00 02   [ 1] 1395 	mov in.saved,in
      000853 CE 00 04         [ 2] 1396 	ldw x,basicptr 
      000856 72 D6 00 00      [ 4] 1397 	ld a,([in.w],x)
      00085A 72 5C 00 01      [ 1] 1398 	inc in 
      00085E A1 02            [ 1] 1399 	cp a,#TK_ARRAY  
      000860 23 27            [ 2] 1400 	jrule 9$
      000862 A1 03            [ 1] 1401 	cp a,#TK_CHAR
      000864 26 0D            [ 1] 1402 	jrne 1$
      000866 72 D6 00 00      [ 4] 1403 	ld a,([in.w],x)
      00086A 72 5C 00 01      [ 1] 1404 	inc in
      00086E 5F               [ 1] 1405 	clrw x 
      00086F 97               [ 1] 1406 	ld xl,a 
      000870 A6 03            [ 1] 1407 	ld a,#TK_CHAR
      000872 81               [ 4] 1408 	ret 
      000873 A1 0A            [ 1] 1409 1$:	cp a,#TK_QSTR 
      000875 25 06            [ 1] 1410 	jrult 2$
      000877 72 BB 00 00      [ 2] 1411 	addw x,in.w 
      00087B 20 0C            [ 2] 1412 	jra 9$
      00087D 72 DE 00 00      [ 5] 1413 2$: ldw x,([in.w],x)
      000881 72 5C 00 01      [ 1] 1414 	inc in 
      000885 72 5C 00 01      [ 1] 1415 	inc in
      000889 81               [ 4] 1416 9$: ret	
                                   1417 
                                   1418 
                                   1419 ;----------------------------------------
                                   1420 ;   DEBUG support functions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1421 ;----------------------------------------
                           000001  1422 .if DEBUG 
                                   1423 ; turn LED on 
      00088A                       1424 ledon:
      00088A 72 1A 50 0A      [ 1] 1425     bset PC_ODR,#LED2_BIT
      00088E 81               [ 4] 1426     ret 
                                   1427 
                                   1428 ; turn LED off 
      00088F                       1429 ledoff:
      00088F 72 1B 50 0A      [ 1] 1430     bres PC_ODR,#LED2_BIT 
      000893 81               [ 4] 1431     ret 
                                   1432 
                                   1433 ; invert LED status 
      000894                       1434 ledtoggle:
      000894 A6 20            [ 1] 1435     ld a,#LED2_MASK
      000896 C8 50 0A         [ 1] 1436     xor a,PC_ODR
      000899 C7 50 0A         [ 1] 1437     ld PC_ODR,a
      00089C 81               [ 4] 1438     ret 
                                   1439 
      00089D                       1440 left_paren:
      00089D A6 20            [ 1] 1441 	ld a,#SPACE 
      00089F CD 01 B2         [ 4] 1442 	call putc
      0008A2 A6 28            [ 1] 1443 	ld a,#'( 
      0008A4 CD 01 B2         [ 4] 1444 	call putc 	
      0008A7 81               [ 4] 1445 	ret 
                                   1446 
                                   1447 ;------------------------------
                                   1448 ; print 8 bit register 
                                   1449 ; input:
                                   1450 ;   X  point to register name 
                                   1451 ;   A  register value to print 
                                   1452 ; output:
                                   1453 ;   none
                                   1454 ;------------------------------- 
      0008A8                       1455 prt_reg8:
      0008A8 88               [ 1] 1456 	push a 
      0008A9 CD 01 C4         [ 4] 1457 	call puts 
      0008AC 7B 01            [ 1] 1458 	ld a,(1,sp) 
      0008AE C7 00 09         [ 1] 1459 	ld acc8,a 
      0008B1 5F               [ 1] 1460 	clrw x 
      0008B2 97               [ 1] 1461 	ld xl,a 
      0008B3 35 10 00 06      [ 1] 1462 	mov base,#16
      0008B7 CD 09 DF         [ 4] 1463 	call print_int 
      0008BA CD 08 9D         [ 4] 1464 	call left_paren 
      0008BD 84               [ 1] 1465 	pop a 
      0008BE 5F               [ 1] 1466 	clrw x 
      0008BF 97               [ 1] 1467 	ld xl,a 
      0008C0 35 0A 00 06      [ 1] 1468 	mov base,#10 
      0008C4 CD 09 DF         [ 4] 1469 	call print_int  
      0008C7 A6 29            [ 1] 1470 	ld a,#') 
      0008C9 CD 01 B2         [ 4] 1471 	call putc
      0008CC 81               [ 4] 1472 	ret
                                   1473 
                                   1474 ;--------------------------------
                                   1475 ; print 16 bits register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1476 ; input:
                                   1477 ;   X   point register name 
                                   1478 ;   Y   register value to print 
                                   1479 ; output:
                                   1480 ;  none
                                   1481 ;--------------------------------
      0008CD                       1482 prt_reg16: 
      0008CD 90 89            [ 2] 1483 	pushw y 
      0008CF CD 01 C4         [ 4] 1484 	call puts 
      0008D2 1E 01            [ 2] 1485 	ldw x,(1,sp) 
      0008D4 35 10 00 06      [ 1] 1486 	mov base,#16 
      0008D8 CD 09 DF         [ 4] 1487 	call print_int  
      0008DB CD 08 9D         [ 4] 1488 	call left_paren 
      0008DE 85               [ 2] 1489 	popw x 
      0008DF 35 0A 00 06      [ 1] 1490 	mov base,#10 
      0008E3 CD 09 DF         [ 4] 1491 	call print_int  
      0008E6 A6 29            [ 1] 1492 	ld a,#') 
      0008E8 CD 01 B2         [ 4] 1493 	call putc
      0008EB 81               [ 4] 1494 	ret 
                                   1495 
                                   1496 ;------------------------------------
                                   1497 ; print registers contents saved on
                                   1498 ; stack by trap interrupt.
                                   1499 ;------------------------------------
      0008EC                       1500 print_registers:
      0008EC AE 09 3F         [ 2] 1501 	ldw x,#STATES
      0008EF CD 01 C4         [ 4] 1502 	call puts
                                   1503 ; print EPC 
      0008F2 AE 09 7C         [ 2] 1504 	ldw x, #REG_EPC
      0008F5 CD 01 C4         [ 4] 1505 	call puts 
      0008F8 7B 0B            [ 1] 1506 	ld a, (11,sp)
      0008FA C7 00 09         [ 1] 1507 	ld acc8,a 
      0008FD 7B 0A            [ 1] 1508 	ld a, (10,sp) 
      0008FF C7 00 08         [ 1] 1509 	ld acc16,a 
      000902 7B 09            [ 1] 1510 	ld a,(9,sp) 
      000904 C7 00 07         [ 1] 1511 	ld acc24,a
      000907 5F               [ 1] 1512 	clrw x  
      000908 A6 10            [ 1] 1513 	ld a,#16
      00090A CD 09 97         [ 4] 1514 	call prti24  
                                   1515 ; print X
      00090D AE 09 85         [ 2] 1516 	ldw x,#REG_X
      000910 16 05            [ 2] 1517 	ldw y,(5,sp)
      000912 CD 08 CD         [ 4] 1518 	call prt_reg16  
                                   1519 ; print Y 
      000915 AE 09 81         [ 2] 1520 	ldw x,#REG_Y
      000918 16 07            [ 2] 1521 	ldw y, (7,sp)
      00091A CD 08 CD         [ 4] 1522 	call prt_reg16  
                                   1523 ; print A 
      00091D AE 09 89         [ 2] 1524 	ldw x,#REG_A
      000920 7B 04            [ 1] 1525 	ld a, (4,sp) 
      000922 CD 08 A8         [ 4] 1526 	call prt_reg8
                                   1527 ; print CC 
      000925 AE 09 8D         [ 2] 1528 	ldw x,#REG_CC 
      000928 7B 03            [ 1] 1529 	ld a, (3,sp) 
      00092A CD 08 A8         [ 4] 1530 	call prt_reg8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1531 ; print SP 
      00092D AE 09 92         [ 2] 1532 	ldw x,#REG_SP
      000930 90 96            [ 1] 1533 	ldw y,sp 
      000932 72 A9 00 0C      [ 2] 1534 	addw y,#12
      000936 CD 08 CD         [ 4] 1535 	call prt_reg16  
      000939 A6 0A            [ 1] 1536 	ld a,#'\n' 
      00093B CD 01 B2         [ 4] 1537 	call putc
      00093E 81               [ 4] 1538 	ret
                                   1539 
      00093F 0A 52 65 67 69 73 74  1540 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      00097C 45 50 43 3A 00        1541 REG_EPC: .asciz "EPC:"
      000981 0A 59 3A 00           1542 REG_Y:   .asciz "\nY:" 
      000985 0A 58 3A 00           1543 REG_X:   .asciz "\nX:"
      000989 0A 41 3A 00           1544 REG_A:   .asciz "\nA:" 
      00098D 0A 43 43 3A 00        1545 REG_CC:  .asciz "\nCC:"
      000992 0A 53 50 3A 00        1546 REG_SP:  .asciz "\nSP:"
                                   1547 .endif ; DEBUG 
                                   1548 
                                   1549 ;------------------------------------
                                   1550 ; print integer in acc24 
                                   1551 ; input:
                                   1552 ;	acc24 		integer to print 
                                   1553 ;	A 			numerical base for conversion 
                                   1554 ;               if bit 7 is set add a space at print end.
                                   1555 ;   XL 			field width, 0 -> no fill.
                                   1556 ;  output:
                                   1557 ;    none 
                                   1558 ;------------------------------------
                           000001  1559 	WIDTH = 1
                           000002  1560 	BASE = 2
                           000003  1561 	ADD_SPACE=3 ; add a space after number 
                           000003  1562 	VSIZE = 3
      000997                       1563 prti24:
      000997                       1564 	_vars VSIZE 
      000997 52 03            [ 2]    1     sub sp,#VSIZE 
      000999 0F 03            [ 1] 1565 	clr (ADD_SPACE,sp)
      00099B A5 80            [ 1] 1566 	bcp a,#0x80 
      00099D 27 02            [ 1] 1567 	jreq 0$ 
      00099F 03 03            [ 1] 1568 	cpl (ADD_SPACE,sp)
      0009A1 A4 1F            [ 1] 1569 0$:	and a,#31 
      0009A3 6B 02            [ 1] 1570 	ld (BASE,sp),a
      0009A5 9F               [ 1] 1571 	ld a,xl
      0009A6 6B 01            [ 1] 1572 	ld (WIDTH,sp),a 
      0009A8 7B 02            [ 1] 1573 	ld a, (BASE,sp)  
      0009AA CD 0A 3B         [ 4] 1574     call itoa  ; conversion entier en  .asciz
      0009AD 7B 01            [ 1] 1575 1$: ld a,(WIDTH,sp)
      0009AF 27 1F            [ 1] 1576 	jreq 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0009B1 C7 00 09         [ 1] 1577 	ld acc8,a 
      0009B4 89               [ 2] 1578 	pushw x 
      0009B5 CD 02 86         [ 4] 1579 	call strlen 
      0009B8 9F               [ 1] 1580 	ld a,xl 
      0009B9 85               [ 2] 1581 	popw x 
      0009BA 31 00 09         [ 3] 1582 	exg a,acc8 
      0009BD C0 00 09         [ 1] 1583 	sub a,acc8 
      0009C0 2B 0E            [ 1] 1584 	jrmi 4$
      0009C2 6B 01            [ 1] 1585 	ld (WIDTH,sp),a 
      0009C4 A6 20            [ 1] 1586 	ld  a,#SPACE
      0009C6 0D 01            [ 1] 1587 3$: tnz (WIDTH,sp)
      0009C8 27 06            [ 1] 1588 	jreq 4$
      0009CA 5A               [ 2] 1589 	decw x 
      0009CB F7               [ 1] 1590 	ld (x),a 
      0009CC 0A 01            [ 1] 1591 	dec (WIDTH,sp) 
      0009CE 20 F6            [ 2] 1592 	jra 3$
      0009D0                       1593 4$: 
      0009D0 CD 01 C4         [ 4] 1594 	call puts 
      0009D3 0D 03            [ 1] 1595 	tnz (ADD_SPACE,sp)
      0009D5 27 05            [ 1] 1596 	jreq 5$
      0009D7 A6 20            [ 1] 1597     ld a,#SPACE 
      0009D9 CD 01 B2         [ 4] 1598 	call putc 
      0009DC                       1599 5$: _drop VSIZE 
      0009DC 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009DE 81               [ 4] 1600     ret	
                                   1601 
                                   1602 ;-----------------------------------
                                   1603 ; print a 16 bit integer 
                                   1604 ; using variable 'base' as conversion
                                   1605 ; format.
                                   1606 ; input:
                                   1607 ;   X       integer to print 
                                   1608 ;   base    conversion base 
                                   1609 ; output:
                                   1610 ;   none 
                                   1611 ;-----------------------------------
                           000001  1612 	SIGN=1
                           000001  1613 	VSIZE=1
      0009DF                       1614 print_int: 
      0009DF                       1615 	_vars VSIZE 
      0009DF 52 01            [ 2]    1     sub sp,#VSIZE 
      0009E1 0F 01            [ 1] 1616 	clr (SIGN,sp)
      0009E3 90 AE 17 3F      [ 2] 1617 	ldw y,#pad+PAD_SIZE-1 
      0009E7 90 7F            [ 1] 1618 	clr (y)
      0009E9 C6 00 06         [ 1] 1619 	ld a,base  
      0009EC A1 0A            [ 1] 1620 	cp a,#10 
      0009EE 26 06            [ 1] 1621 	jrne 1$ 
      0009F0 5D               [ 2] 1622 	tnzw x 
      0009F1 2A 03            [ 1] 1623 	jrpl 1$ 
      0009F3 03 01            [ 1] 1624 	cpl (SIGN,sp)
      0009F5 50               [ 2] 1625 	negw x 	 
      0009F6                       1626 1$:	
      0009F6 C6 00 06         [ 1] 1627 	ld a,base 
      0009F9 62               [ 2] 1628 	div x,a 
      0009FA AB 30            [ 1] 1629 	add a,#'0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009FC A1 3A            [ 1] 1630 	cp a,#'9+1 
      0009FE 2B 02            [ 1] 1631 	jrmi 2$ 
      000A00 AB 07            [ 1] 1632 	add a,#7 
      000A02 90 5A            [ 2] 1633 2$: decw y 
      000A04 90 F7            [ 1] 1634 	ld (y),a 
      000A06 5D               [ 2] 1635 	tnzw x 
      000A07 26 ED            [ 1] 1636 	jrne 1$ 
      000A09 A6 10            [ 1] 1637 	ld a,#16 
      000A0B C1 00 06         [ 1] 1638 	cp a,base 
      000A0E 26 08            [ 1] 1639 	jrne 3$
      000A10 A6 24            [ 1] 1640 	ld a,#'$
      000A12 90 5A            [ 2] 1641 	decw y  
      000A14 90 F7            [ 1] 1642 	ld (y),a
      000A16 20 0A            [ 2] 1643 	jra 9$ 
      000A18 0D 01            [ 1] 1644 3$: tnz (SIGN,sp)
      000A1A 27 06            [ 1] 1645 	jreq 9$ 
      000A1C A6 2D            [ 1] 1646 	ld a,#'-
      000A1E 90 5A            [ 2] 1647 	decw y  
      000A20 90 F7            [ 1] 1648 	ld (y),a
      000A22                       1649 9$:	
      000A22 93               [ 1] 1650 	ldw x,y 
      000A23 1D 17 3F         [ 2] 1651 	subw x,#pad+PAD_SIZE-1 
      000A26 50               [ 2] 1652 	negw x  
      000A27                       1653 10$:
      000A27 90 5A            [ 2] 1654 	decw y 
      000A29 A6 20            [ 1] 1655 	ld a,#SPACE 
      000A2B 90 F7            [ 1] 1656 	ld (y),a
      000A2D 5C               [ 2] 1657 	incw x 
      000A2E 9F               [ 1] 1658 	ld a,xl 
      000A2F C1 00 22         [ 1] 1659 	cp a,tab_width
      000A32 2B F3            [ 1] 1660 	jrmi 10$ 
      000A34                       1661 12$:
      000A34 93               [ 1] 1662     ldw x,y 
      000A35 CD 01 C4         [ 4] 1663 	call puts  
      000A38                       1664 	_drop VSIZE 
      000A38 5B 01            [ 2]    1     addw sp,#VSIZE 
      000A3A 81               [ 4] 1665 	ret 
                                   1666 
                                   1667 ;------------------------------------
                                   1668 ; convert integer in acc24 to string
                                   1669 ; input:
                                   1670 ;   A	  	base
                                   1671 ;	acc24	integer to convert
                                   1672 ; output:
                                   1673 ;   X  		pointer to string
                                   1674 ;------------------------------------
                           000001  1675 	SIGN=1  ; integer sign 
                           000002  1676 	BASE=2  ; numeric base 
                           000002  1677 	VSIZE=2  ;locals size
      000A3B                       1678 itoa:
      000A3B 52 02            [ 2] 1679 	sub sp,#VSIZE
      000A3D 6B 02            [ 1] 1680 	ld (BASE,sp), a  ; base
      000A3F 0F 01            [ 1] 1681 	clr (SIGN,sp)    ; sign
      000A41 A1 0A            [ 1] 1682 	cp a,#10
      000A43 26 0A            [ 1] 1683 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1684 	; base 10 string display with negative sign if bit 23==1
      000A45 72 0F 00 07 05   [ 2] 1685 	btjf acc24,#7,1$
      000A4A 03 01            [ 1] 1686 	cpl (SIGN,sp)
      000A4C CD 0A AA         [ 4] 1687 	call neg_acc24
      000A4F                       1688 1$:
                                   1689 ; initialize string pointer 
      000A4F AE 17 3F         [ 2] 1690 	ldw x,#pad+PAD_SIZE-1
      000A52 7F               [ 1] 1691 	clr (x)
      000A53                       1692 itoa_loop:
      000A53 7B 02            [ 1] 1693     ld a,(BASE,sp)
      000A55 CD 0A 82         [ 4] 1694     call divu24_8 ; acc24/A 
      000A58 AB 30            [ 1] 1695     add a,#'0  ; remainder of division
      000A5A A1 3A            [ 1] 1696     cp a,#'9+1
      000A5C 2B 02            [ 1] 1697     jrmi 2$
      000A5E AB 07            [ 1] 1698     add a,#7 
      000A60 5A               [ 2] 1699 2$: decw x
      000A61 F7               [ 1] 1700     ld (x),a
                                   1701 	; if acc24==0 conversion done
      000A62 C6 00 07         [ 1] 1702 	ld a,acc24
      000A65 CA 00 08         [ 1] 1703 	or a,acc16
      000A68 CA 00 09         [ 1] 1704 	or a,acc8
      000A6B 26 E6            [ 1] 1705     jrne itoa_loop
                                   1706 	;conversion done, next add '$' or '-' as required
      000A6D 7B 02            [ 1] 1707 	ld a,(BASE,sp)
      000A6F A1 10            [ 1] 1708 	cp a,#16
      000A71 27 08            [ 1] 1709 	jreq 8$
      000A73 7B 01            [ 1] 1710 	ld a,(SIGN,sp)
      000A75 27 08            [ 1] 1711     jreq 10$
      000A77 A6 2D            [ 1] 1712     ld a,#'-
      000A79 20 02            [ 2] 1713 	jra 9$ 
      000A7B A6 24            [ 1] 1714 8$: ld a,#'$ 
      000A7D 5A               [ 2] 1715 9$: decw x
      000A7E F7               [ 1] 1716     ld (x),a
      000A7F                       1717 10$:
      000A7F 5B 02            [ 2] 1718 	addw sp,#VSIZE
      000A81 81               [ 4] 1719 	ret
                                   1720 
                                   1721 ;-------------------------------------
                                   1722 ; divide uint24_t by uint8_t
                                   1723 ; used to convert uint24_t to string
                                   1724 ; input:
                                   1725 ;	acc24	dividend
                                   1726 ;   A 		divisor
                                   1727 ; output:
                                   1728 ;   acc24	quotient
                                   1729 ;   A		remainder
                                   1730 ;------------------------------------- 
                                   1731 ; offset  on sp of arguments and locals
                           000001  1732 	U8   = 1   ; divisor on stack
                           000001  1733 	VSIZE =1
      000A82                       1734 divu24_8:
      000A82 89               [ 2] 1735 	pushw x ; save x
      000A83 88               [ 1] 1736 	push a 
                                   1737 	; ld dividend UU:MM bytes in X
      000A84 C6 00 07         [ 1] 1738 	ld a, acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A87 95               [ 1] 1739 	ld xh,a
      000A88 C6 00 08         [ 1] 1740 	ld a,acc24+1
      000A8B 97               [ 1] 1741 	ld xl,a
      000A8C 7B 01            [ 1] 1742 	ld a,(U8,SP) ; divisor
      000A8E 62               [ 2] 1743 	div x,a ; UU:MM/U8
      000A8F 88               [ 1] 1744 	push a  ;save remainder
      000A90 9E               [ 1] 1745 	ld a,xh
      000A91 C7 00 07         [ 1] 1746 	ld acc24,a
      000A94 9F               [ 1] 1747 	ld a,xl
      000A95 C7 00 08         [ 1] 1748 	ld acc24+1,a
      000A98 84               [ 1] 1749 	pop a
      000A99 95               [ 1] 1750 	ld xh,a
      000A9A C6 00 09         [ 1] 1751 	ld a,acc24+2
      000A9D 97               [ 1] 1752 	ld xl,a
      000A9E 7B 01            [ 1] 1753 	ld a,(U8,sp) ; divisor
      000AA0 62               [ 2] 1754 	div x,a  ; R:LL/U8
      000AA1 6B 01            [ 1] 1755 	ld (U8,sp),a ; save remainder
      000AA3 9F               [ 1] 1756 	ld a,xl
      000AA4 C7 00 09         [ 1] 1757 	ld acc24+2,a
      000AA7 84               [ 1] 1758 	pop a
      000AA8 85               [ 2] 1759 	popw x
      000AA9 81               [ 4] 1760 	ret
                                   1761 
                                   1762 ;------------------------------------
                                   1763 ;  two's complement acc24
                                   1764 ;  input:
                                   1765 ;		acc24 variable
                                   1766 ;  output:
                                   1767 ;		acc24 variable
                                   1768 ;-------------------------------------
      000AAA                       1769 neg_acc24:
      000AAA 72 53 00 09      [ 1] 1770 	cpl acc24+2
      000AAE 72 53 00 08      [ 1] 1771 	cpl acc24+1
      000AB2 72 53 00 07      [ 1] 1772 	cpl acc24
      000AB6 A6 01            [ 1] 1773 	ld a,#1
      000AB8 CB 00 09         [ 1] 1774 	add a,acc24+2
      000ABB C7 00 09         [ 1] 1775 	ld acc24+2,a
      000ABE 4F               [ 1] 1776 	clr a
      000ABF C9 00 08         [ 1] 1777 	adc a,acc24+1
      000AC2 C7 00 08         [ 1] 1778 	ld acc24+1,a 
      000AC5 4F               [ 1] 1779 	clr a 
      000AC6 C9 00 07         [ 1] 1780 	adc a,acc24 
      000AC9 C7 00 07         [ 1] 1781 	ld acc24,a 
      000ACC 81               [ 4] 1782 	ret
                                   1783 
                                   1784 
                                   1785 ;------------------------------------
                                   1786 ; read a line of text from terminal
                                   1787 ; input:
                                   1788 ;	none
                                   1789 ; local variable on stack:
                                   1790 ;	LL  line length
                                   1791 ;   RXCHAR last received chaaracte 
                                   1792 ; output:
                                   1793 ;   text in tib  buffer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1794 ;------------------------------------
                                   1795 	; local variables
                           000001  1796 	LL_HB=1
                           000001  1797 	RXCHAR = 1 ; last char received
                           000002  1798 	LL = 2  ; accepted line length
                           000002  1799 	VSIZE=2 
      000ACD                       1800 readln:
      000ACD 5F               [ 1] 1801 	clrw x 
      000ACE 89               [ 2] 1802 	pushw x 
      000ACF 90 AE 16 C8      [ 2] 1803  	ldw y,#tib ; input buffer
      000AD3                       1804 readln_loop:
      000AD3 CD 01 BB         [ 4] 1805 	call getc
      000AD6 6B 01            [ 1] 1806 	ld (RXCHAR,sp),a
      000AD8 A1 0D            [ 1] 1807 	cp a,#CR
      000ADA 26 03            [ 1] 1808 	jrne 1$
      000ADC CC 0B 48         [ 2] 1809 	jp readln_quit
      000ADF A1 0A            [ 1] 1810 1$:	cp a,#NL
      000AE1 27 65            [ 1] 1811 	jreq readln_quit
      000AE3 A1 08            [ 1] 1812 	cp a,#BSP
      000AE5 27 3D            [ 1] 1813 	jreq del_back
      000AE7 A1 04            [ 1] 1814 	cp a,#CTRL_D
      000AE9 27 2A            [ 1] 1815 	jreq del_ln
      000AEB A1 12            [ 1] 1816 	cp a,#CTRL_R 
      000AED 27 06            [ 1] 1817 	jreq reprint 
                                   1818 ;	cp a,#'[
                                   1819 ;	jreq ansi_seq
      000AEF                       1820 final_test:
      000AEF A1 20            [ 1] 1821 	cp a,#SPACE
      000AF1 2A 40            [ 1] 1822 	jrpl accept_char
      000AF3 20 DE            [ 2] 1823 	jra readln_loop
      000AF5                       1824 ansi_seq:
                                   1825 ;	call getc
                                   1826 ;	cp a,#'C 
                                   1827 ;	jreq rigth_arrow
                                   1828 ;	cp a,#'D 
                                   1829 ;	jreq left_arrow 
                                   1830 ;	jra final_test
      000AF5                       1831 right_arrow:
                                   1832 ;	ld a,#BSP 
                                   1833 ;	call putc 
                                   1834 ;	jra realn_loop 
      000AF5                       1835 left_arrow:
                                   1836 
                                   1837 ;	jra readln_loop
      000AF5                       1838 reprint: 
      000AF5 0D 02            [ 1] 1839 	tnz (LL,sp)
      000AF7 26 DA            [ 1] 1840 	jrne readln_loop
      000AF9 AE 16 C8         [ 2] 1841 	ldw x,#tib 
      000AFC CD 02 86         [ 4] 1842 	call strlen 
      000AFF 90 AE 16 C8      [ 2] 1843 	ldw y,#tib 
      000B03 9F               [ 1] 1844 	ld a,xl
      000B04 27 CD            [ 1] 1845 	jreq readln_loop
      000B06 6B 02            [ 1] 1846 	ld (LL,sp),a 
      000B08 AE 16 C8         [ 2] 1847 	ldw x,#tib 
      000B0B CD 01 C4         [ 4] 1848 	call puts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000B0E 0F 01            [ 1] 1849 	clr (LL_HB,sp)
      000B10 72 F9 01         [ 2] 1850 	addw y,(LL_HB,sp)
      000B13 20 BE            [ 2] 1851 	jra readln_loop 
      000B15                       1852 del_ln:
      000B15 7B 02            [ 1] 1853 	ld a,(LL,sp)
      000B17 CD 01 DE         [ 4] 1854 	call delete
      000B1A 90 AE 16 C8      [ 2] 1855 	ldw y,#tib
      000B1E 90 7F            [ 1] 1856 	clr (y)
      000B20 0F 02            [ 1] 1857 	clr (LL,sp)
      000B22 20 AF            [ 2] 1858 	jra readln_loop
      000B24                       1859 del_back:
      000B24 0D 02            [ 1] 1860     tnz (LL,sp)
      000B26 27 AB            [ 1] 1861     jreq readln_loop
      000B28 0A 02            [ 1] 1862     dec (LL,sp)
      000B2A 90 5A            [ 2] 1863     decw y
      000B2C 90 7F            [ 1] 1864     clr  (y)
      000B2E CD 01 CE         [ 4] 1865     call bksp 
      000B31 20 A0            [ 2] 1866     jra readln_loop	
      000B33                       1867 accept_char:
      000B33 A6 4F            [ 1] 1868 	ld a,#TIB_SIZE-1
      000B35 11 02            [ 1] 1869 	cp a, (LL,sp)
      000B37 27 9A            [ 1] 1870 	jreq readln_loop
      000B39 7B 01            [ 1] 1871 	ld a,(RXCHAR,sp)
      000B3B 90 F7            [ 1] 1872 	ld (y),a
      000B3D 0C 02            [ 1] 1873 	inc (LL,sp)
      000B3F 90 5C            [ 2] 1874 	incw y
      000B41 90 7F            [ 1] 1875 	clr (y)
      000B43 CD 01 B2         [ 4] 1876 	call putc 
      000B46 20 8B            [ 2] 1877 	jra readln_loop
      000B48                       1878 readln_quit:
      000B48 90 7F            [ 1] 1879 	clr (y)
      000B4A 7B 02            [ 1] 1880 	ld a,(LL,sp)
      000B4C C7 00 03         [ 1] 1881 	ld count,a 
      000B4F                       1882 	_drop VSIZE 
      000B4F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B51 A6 0D            [ 1] 1883 	ld a,#CR
      000B53 CD 01 B2         [ 4] 1884 	call putc
      000B56 81               [ 4] 1885 	ret
                                   1886 
                           000001  1887 .if DEBUG 	
                                   1888 ;----------------------------
                                   1889 ; command interface
                                   1890 ; only 3 commands:
                                   1891 ;  'q' to resume application
                                   1892 ;  'p [addr]' to print memory values 
                                   1893 ;  's addr' to print string 
                                   1894 ;----------------------------
                                   1895 ;local variable 
                           000001  1896 	PSIZE=1
                           000001  1897 	VSIZE=1 
      000B57                       1898 cmd_itf:
      000B57 52 01            [ 2] 1899 	sub sp,#VSIZE 
      000B59 72 5F 00 12      [ 1] 1900 	clr farptr 
      000B5D 72 5F 00 13      [ 1] 1901 	clr farptr+1 
      000B61 72 5F 00 14      [ 1] 1902 	clr farptr+2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B65                       1903 repl:
      000B65 A6 0D            [ 1] 1904 	ld a,#CR 
      000B67 CD 01 B2         [ 4] 1905 	call putc 
      000B6A A6 3F            [ 1] 1906 	ld a,#'? 
      000B6C CD 01 B2         [ 4] 1907 	call putc
      000B6F 72 5F 00 00      [ 1] 1908 	clr in.w 
      000B73 72 5F 00 01      [ 1] 1909 	clr in 
      000B77 CD 0A CD         [ 4] 1910 	call readln
      000B7A 90 AE 16 C8      [ 2] 1911 	ldw y,#tib  
      000B7E 90 F6            [ 1] 1912 	ld a,(y)
      000B80 27 E3            [ 1] 1913 	jreq repl  
      000B82 72 5C 00 01      [ 1] 1914 	inc in 
      000B86 CD 0F 07         [ 4] 1915 	call to_upper 
      000B89 A1 51            [ 1] 1916 	cp a,#'Q 
      000B8B 26 17            [ 1] 1917 	jrne test_p
      000B8D                       1918 repl_exit:
      000B8D 72 5F 16 C8      [ 1] 1919 	clr tib 
      000B91 72 5F 00 03      [ 1] 1920 	clr count 
      000B95 72 5F 00 01      [ 1] 1921 	clr in 
      000B99                       1922 	_drop #VSIZE 	
      000B99 5B 01            [ 2]    1     addw sp,##VSIZE 
      000B9B 81               [ 4] 1923 	ret  
      000B9C                       1924 invalid:
      000B9C AE 0C 1A         [ 2] 1925 	ldw x,#invalid_cmd 
      000B9F CD 01 C4         [ 4] 1926 	call puts 
      000BA2 20 C1            [ 2] 1927 	jra repl 
      000BA4                       1928 test_p:	
      000BA4 A1 50            [ 1] 1929     cp a,#'P 
      000BA6 27 11            [ 1] 1930 	jreq mem_peek
      000BA8 A1 53            [ 1] 1931     cp a,#'S 
      000BAA 26 F0            [ 1] 1932 	jrne invalid 
      000BAC                       1933 print_string:	
      000BAC CD 0D 46         [ 4] 1934 	call get_token
      000BAF A1 04            [ 1] 1935 	cp a,#TK_INTGR 
      000BB1 26 E9            [ 1] 1936 	jrne invalid 
      000BB3 CD 01 C4         [ 4] 1937 	call puts
      000BB6 CC 0B 65         [ 2] 1938 	jp repl 	
      000BB9                       1939 mem_peek:
      000BB9 A6 20            [ 1] 1940 	ld a,#SPACE 
      000BBB CD 0F BF         [ 4] 1941 	call skip  	 
      000BBE 72 B9 00 00      [ 2] 1942 	addw y,in.w 
      000BC2 AE 17 18         [ 2] 1943 	ldw x,#pad 
      000BC5 CD 02 A4         [ 4] 1944 	call strcpy
      000BC8 CD 0F 13         [ 4] 1945 	call atoi24 	
      000BCB C6 00 07         [ 1] 1946 	ld a, acc24 
      000BCE CA 00 08         [ 1] 1947 	or a,acc16 
      000BD1 CA 00 09         [ 1] 1948 	or a,acc8 
      000BD4 26 02            [ 1] 1949 	jrne 1$ 
      000BD6 20 0C            [ 2] 1950 	jra peek_byte  
      000BD8 CE 00 07         [ 2] 1951 1$:	ldw x,acc24 
      000BDB CF 00 12         [ 2] 1952 	ldw farptr,x 
      000BDE C6 00 09         [ 1] 1953 	ld a,acc8 
      000BE1 C7 00 14         [ 1] 1954 	ld farptr+2,a 
      000BE4                       1955 peek_byte:
      000BE4 CD 0C 29         [ 4] 1956 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BE7 A6 08            [ 1] 1957 	ld a,#8 
      000BE9 6B 01            [ 1] 1958 	ld (PSIZE,sp),a 
      000BEB 5F               [ 1] 1959 	clrw x 
      000BEC CD 0C 44         [ 4] 1960 1$:	call fetchc  
      000BEF 89               [ 2] 1961 	pushw x 
      000BF0 C7 00 09         [ 1] 1962 	ld acc8,a 
      000BF3 5F               [ 1] 1963 	clrw x 
      000BF4 CF 00 07         [ 2] 1964 	ldw acc24,x 
      000BF7 A6 90            [ 1] 1965 	ld a,#16+128
      000BF9 CD 09 97         [ 4] 1966 	call prti24
      000BFC 85               [ 2] 1967 	popw x 
      000BFD 0A 01            [ 1] 1968 	dec (PSIZE,sp)
      000BFF 26 EB            [ 1] 1969 	jrne 1$ 
      000C01 A6 08            [ 1] 1970 	ld a,#8 
      000C03 CB 00 14         [ 1] 1971 	add a,farptr+2 
      000C06 C7 00 14         [ 1] 1972 	ld farptr+2,a
      000C09 4F               [ 1] 1973 	clr a 
      000C0A C9 00 13         [ 1] 1974 	adc a,farptr+1 
      000C0D C7 00 13         [ 1] 1975 	ld farptr+1,a 
      000C10 4F               [ 1] 1976 	clr a 
      000C11 C9 00 12         [ 1] 1977 	adc a,farptr 
      000C14 C7 00 12         [ 1] 1978 	ld farptr,a 
      000C17 CC 0B 65         [ 2] 1979 	jp repl  
                                   1980 
      000C1A 6E 6F 74 20 61 20 63  1981 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1982 
                                   1983 ;----------------------------
                                   1984 ; display farptr address
                                   1985 ;----------------------------
      000C29                       1986 print_farptr:
      000C29 C6 00 14         [ 1] 1987 	ld a ,farptr+2 
      000C2C C7 00 09         [ 1] 1988 	ld acc8,a 
      000C2F CE 00 12         [ 2] 1989 	ldw x,farptr 
      000C32 CF 00 07         [ 2] 1990 	ldw acc24,x 
      000C35 5F               [ 1] 1991 	clrw x 
      000C36 A6 10            [ 1] 1992 	ld a,#16 
      000C38 CD 09 97         [ 4] 1993 	call prti24
      000C3B A6 20            [ 1] 1994 	ld a,#SPACE 
      000C3D CD 01 B2         [ 4] 1995 	call putc 
      000C40 CD 01 B2         [ 4] 1996 	call putc 
      000C43 81               [ 4] 1997 	ret
                                   1998 
                                   1999 ;------------------------------------
                                   2000 ; get byte at address farptr[X]
                                   2001 ; input:
                                   2002 ;	 farptr   address to peek
                                   2003 ;    X		  farptr index 	
                                   2004 ; output:
                                   2005 ;	 A 		  byte from memory  
                                   2006 ;    x		  incremented by 1
                                   2007 ;------------------------------------
      000C44                       2008 fetchc: ; @C
      000C44 92 AF 00 12      [ 5] 2009 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000C48 5C               [ 2] 2010 	incw x
      000C49 81               [ 4] 2011 	ret
                                   2012 
                                   2013 
                                   2014 ;------------------------------------
                                   2015 ; expect a number from command line 
                                   2016 ; next argument
                                   2017 ;  input:
                                   2018 ;	  none
                                   2019 ;  output:
                                   2020 ;    acc24   int24_t 
                                   2021 ;------------------------------------
      000C4A                       2022 number::
      000C4A CD 0D 46         [ 4] 2023 	call get_token
      000C4D CD 0F 13         [ 4] 2024 	call atoi24
      000C50 81               [ 4] 2025 	ret
                                   2026 .endif ; DEBUG 
                                   2027 
                                   2028 ;------------------------------------
                                   2029 ; parse quoted string 
                                   2030 ; input:
                                   2031 ;   Y 	pointer to tib 
                                   2032 ;   X   pointer to pad
                                   2033 ; output:
                                   2034 ;	pad   parsed string
                                   2035 ;   TOS  char* to pad  
                                   2036 ;------------------------------------
                           000001  2037 	PREV = 1
                           000002  2038 	CURR =2 
                           000002  2039 	VSIZE=2 
      000C51                       2040 parse_quote: ; { -- addr }
      000C51                       2041 	_vars VSIZE 
      000C51 52 02            [ 2]    1     sub sp,#VSIZE 
      000C53 4F               [ 1] 2042 	clr a
      000C54 6B 01            [ 1] 2043 1$:	ld (PREV,sp),a 
      000C56 72 5C 00 01      [ 1] 2044 2$:	inc in
      000C5A 91 D6 00         [ 4] 2045 	ld a,([in.w],y)
      000C5D 27 24            [ 1] 2046 	jreq 6$
      000C5F 6B 02            [ 1] 2047 	ld (CURR,sp),a 
      000C61 A6 5C            [ 1] 2048 	ld a,#'\
      000C63 11 01            [ 1] 2049 	cp a, (PREV,sp)
      000C65 26 0A            [ 1] 2050 	jrne 3$
      000C67 0F 01            [ 1] 2051 	clr (PREV,sp)
      000C69 7B 02            [ 1] 2052 	ld a,(CURR,sp)
      000C6B AD 1F            [ 4] 2053 	callr convert_escape
      000C6D F7               [ 1] 2054 	ld (x),a 
      000C6E 5C               [ 2] 2055 	incw x 
      000C6F 20 E5            [ 2] 2056 	jra 2$
      000C71                       2057 3$:
      000C71 7B 02            [ 1] 2058 	ld a,(CURR,sp)
      000C73 A1 5C            [ 1] 2059 	cp a,#'\'
      000C75 27 DD            [ 1] 2060 	jreq 1$
      000C77 A1 22            [ 1] 2061 	cp a,#'"
      000C79 27 04            [ 1] 2062 	jreq 5$ 
      000C7B F7               [ 1] 2063 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C7C 5C               [ 2] 2064 	incw x 
      000C7D 20 D7            [ 2] 2065 	jra 2$
      000C7F 72 5C 00 01      [ 1] 2066 5$:	inc in 
      000C83 7F               [ 1] 2067 6$: clr (x)
      000C84 AE 17 18         [ 2] 2068 	ldw x,#pad 
      000C87                       2069 	_drop VSIZE
      000C87 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C89 A6 0A            [ 1] 2070 	ld a,#TK_QSTR  
      000C8B 81               [ 4] 2071 	ret 
                                   2072 
                                   2073 ;---------------------------------------
                                   2074 ; called by parse_quote
                                   2075 ; subtitute escaped character 
                                   2076 ; by their ASCII value .
                                   2077 ; input:
                                   2078 ;   A  character following '\'
                                   2079 ; output:
                                   2080 ;   A  substitued char or same if not valid.
                                   2081 ;---------------------------------------
      000C8C                       2082 convert_escape:
      000C8C 89               [ 2] 2083 	pushw x 
      000C8D AE 0C A1         [ 2] 2084 	ldw x,#escaped 
      000C90 F1               [ 1] 2085 1$:	cp a,(x)
      000C91 27 06            [ 1] 2086 	jreq 2$
      000C93 7D               [ 1] 2087 	tnz (x)
      000C94 27 09            [ 1] 2088 	jreq 3$
      000C96 5C               [ 2] 2089 	incw x 
      000C97 20 F7            [ 2] 2090 	jra 1$
      000C99 1D 0C A1         [ 2] 2091 2$: subw x,#escaped 
      000C9C 9F               [ 1] 2092 	ld a,xl 
      000C9D AB 07            [ 1] 2093 	add a,#7
      000C9F 85               [ 2] 2094 3$:	popw x 
      000CA0 81               [ 4] 2095 	ret 
                                   2096 
      000CA1 61 62 74 6E 76 66 72  2097 escaped: .asciz "abtnvfr"
             00
                                   2098 
                                   2099 ;-------------------------
                                   2100 ; integer parser 
                                   2101 ; input:
                                   2102 ;   X 		point to pad 
                                   2103 ;   Y 		point to tib 
                                   2104 ;   A 	    first digit|'$' 
                                   2105 ; output:  
                                   2106 ;   pad     number string 
                                   2107 ;   X 		integer 
                                   2108 ;   A 		TK_INTGR
                                   2109 ;-------------------------
                           000001  2110 	BASE=1
                           000002  2111 	TCHAR=2 
                           000002  2112 	VSIZE=2 
      000CA9                       2113 parse_integer: ; { -- n }
      000CA9 4B 00            [ 1] 2114 	push #0 ; TCHAR 
      000CAB A1 24            [ 1] 2115 	cp a,#'$
      000CAD 27 04            [ 1] 2116 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000CAF 4B 0A            [ 1] 2117 	push #10 ; BASE=10 
      000CB1 20 02            [ 2] 2118 	jra 2$ 
      000CB3 4B 10            [ 1] 2119 1$: push #16  ; BASE=16
      000CB5 F7               [ 1] 2120 2$:	ld (x),a 
      000CB6 5C               [ 2] 2121 	incw x 
      000CB7 72 5C 00 01      [ 1] 2122 	inc in 
      000CBB 91 D6 00         [ 4] 2123 	ld a,([in.w],y)
      000CBE CD 0F 07         [ 4] 2124 	call to_upper 
      000CC1 6B 02            [ 1] 2125 	ld (TCHAR,sp),a 
      000CC3 CD 0E FE         [ 4] 2126 	call is_digit 
      000CC6 25 ED            [ 1] 2127 	jrc 2$
      000CC8 A6 10            [ 1] 2128 	ld a,#16 
      000CCA 11 01            [ 1] 2129 	cp a,(BASE,sp)
      000CCC 26 0A            [ 1] 2130 	jrne 3$ 
      000CCE 7B 02            [ 1] 2131 	ld a,(TCHAR,sp)
      000CD0 A1 41            [ 1] 2132 	cp a,#'A 
      000CD2 2B 04            [ 1] 2133 	jrmi 3$ 
      000CD4 A1 47            [ 1] 2134 	cp a,#'G 
      000CD6 2B DD            [ 1] 2135 	jrmi 2$ 
      000CD8 7F               [ 1] 2136 3$:	clr (x)
      000CD9 CD 0F 13         [ 4] 2137 	call atoi24
      000CDC CE 00 08         [ 2] 2138 	ldw x,acc16 
      000CDF A6 04            [ 1] 2139 	ld a,#TK_INTGR
      000CE1                       2140 	_drop VSIZE  
      000CE1 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CE3 81               [ 4] 2141 	ret 	
                                   2142 
                                   2143 ;-------------------------
                                   2144 ; binary integer parser 
                                   2145 ; input:
                                   2146 ;   X 		point to pad 
                                   2147 ;   Y 		point to tib 
                                   2148 ;   A 	    '%' 
                                   2149 ; output:  
                                   2150 ;   pad     number string 
                                   2151 ;   X 		integer 
                                   2152 ;   A 		TK_INTGR
                                   2153 ;   TOS     integer 
                                   2154 ;-------------------------
                           000001  2155 	BINARY=1
                           000002  2156 	VSIZE=2
      000CE4                       2157 parse_binary: ; { -- n }
      000CE4 4B 00            [ 1] 2158 	push #0
      000CE6 4B 00            [ 1] 2159 	push #0
      000CE8 F7               [ 1] 2160 1$: ld (x),a 
      000CE9 5C               [ 2] 2161 	incw x 
      000CEA 72 5C 00 01      [ 1] 2162 	inc in 
      000CEE 91 D6 00         [ 4] 2163 	ld a,([in.w],y)
      000CF1 A1 30            [ 1] 2164 	cp a,#'0 
      000CF3 27 06            [ 1] 2165 	jreq 2$
      000CF5 A1 31            [ 1] 2166 	cp a,#'1 
      000CF7 27 02            [ 1] 2167 	jreq 2$ 
      000CF9 20 09            [ 2] 2168 	jra bin_exit 
      000CFB A0 30            [ 1] 2169 2$: sub a,#'0	
      000CFD 46               [ 1] 2170 	rrc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CFE 09 02            [ 1] 2171 	rlc (BINARY+1,sp)
      000D00 09 01            [ 1] 2172 	rlc (BINARY,sp)
      000D02 20 E4            [ 2] 2173 	jra 1$  
      000D04                       2174 bin_exit:
      000D04 7F               [ 1] 2175 	clr (x)
      000D05 1E 01            [ 2] 2176 	ldw x,(BINARY,sp)
      000D07 A6 04            [ 1] 2177 	ld a,#TK_INTGR 	
      000D09                       2178 	_drop VSIZE 
      000D09 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D0B 81               [ 4] 2179 	ret
                                   2180 
                                   2181 ;---------------------------
                                   2182 ;  token begin with a letter,
                                   2183 ;  is keyword or variable. 	
                                   2184 ; input:
                                   2185 ;   X 		point to pad 
                                   2186 ;   Y 		point to text
                                   2187 ;   A 	    first letter  
                                   2188 ; output:
                                   2189 ;   X		exec_addr|var_addr 
                                   2190 ;   A 		TK_CMD 
                                   2191 ;   pad 	keyword|var_name  
                                   2192 ;   TOS     exec_addr|var_addr 
                                   2193 ;--------------------------  
      000D0C                       2194 parse_keyword: ; { -- exec_addr|var_addr}
      000D0C CD 0F 07         [ 4] 2195 	call to_upper 
      000D0F F7               [ 1] 2196 	ld (x),a 
      000D10 5C               [ 2] 2197 	incw x 
      000D11 72 5C 00 01      [ 1] 2198 	inc in 
      000D15 91 D6 00         [ 4] 2199 	ld a,([in.w],y)
      000D18 CD 05 09         [ 4] 2200 	call is_alpha 
      000D1B 25 EF            [ 1] 2201 	jrc parse_keyword 
      000D1D 7F               [ 1] 2202 1$: clr (x)
      000D1E 72 5D 17 19      [ 1] 2203 	tnz pad+1 
      000D22 26 15            [ 1] 2204 	jrne 2$
                                   2205 ; one letter variable name 
      000D24 C6 17 18         [ 1] 2206 	ld a,pad 
      000D27 A0 41            [ 1] 2207 	sub a,#'A 
      000D29 48               [ 1] 2208 	sll a 
      000D2A 88               [ 1] 2209 	push a 
      000D2B 4B 00            [ 1] 2210 	push #0
      000D2D AE 00 23         [ 2] 2211 	ldw x,#vars 
      000D30 72 FB 01         [ 2] 2212 	addw x,(1,sp) ; X=var address 
      000D33                       2213 	_drop 2 
      000D33 5B 02            [ 2]    1     addw sp,#2 
      000D35 A6 05            [ 1] 2214 	ld a,#TK_VAR 
      000D37 20 0C            [ 2] 2215 	jra 4$ 
      000D39                       2216 2$: ; check for keyword, otherwise syntax error.
      000D39                       2217 	_ldx_dict kword_dict
      000D39 AE 25 2D         [ 2]    1     ldw x,#kword_dict+2
      000D3C CD 11 A3         [ 4] 2218 	call search_dict
      000D3F 4D               [ 1] 2219 	tnz a
      000D40 26 03            [ 1] 2220 	jrne 4$ 
      000D42 CC 07 7F         [ 2] 2221 	jp syntax_error
      000D45 81               [ 4] 2222 4$:	ret  	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2223 
                                   2224 
                                   2225 ;------------------------------------
                                   2226 ; Command line tokenizer
                                   2227 ; scan text for next token
                                   2228 ; move token in 'pad'
                                   2229 ; input: 
      000D46                       2230 	none: 
                                   2231 ; use:
                                   2232 ;	Y   pointer to text
                                   2233 ;   X	pointer to pad 
                                   2234 ;   in.w   index in text buffer
                                   2235 ; output:
                                   2236 ;   A       token attribute 
                                   2237 ;   pad 	token as .asciz
                                   2238 ;   X 		token value   
                                   2239 ;------------------------------------
                                   2240 	; use to check special character 
                                   2241 	.macro _case c t  
                                   2242 	ld a,#c 
                                   2243 	cp a,(TCHAR,sp) 
                                   2244 	jrne t
                                   2245 	.endm 
                                   2246 
                           000001  2247 	TCHAR=1
                           000002  2248 	ATTRIB=2 
                           000002  2249 	VSIZE=2
      000D46                       2250 get_token: 
      000D46 90 AE 16 C8      [ 2] 2251 	ldw y,#tib    	
      000D4A C6 00 01         [ 1] 2252 	ld a,in 
      000D4D C1 00 03         [ 1] 2253 	cp a,count 
      000D50 2B 03            [ 1] 2254 	jrmi 1$
      000D52 A6 00            [ 1] 2255 	ld a,#TK_NONE 
      000D54 81               [ 4] 2256 	ret 
      000D55                       2257 1$:	
      000D55                       2258 	_vars VSIZE
      000D55 52 02            [ 2]    1     sub sp,#VSIZE 
      000D57 AE 17 18         [ 2] 2259 	ldw x, #pad
      000D5A A6 20            [ 1] 2260 	ld a,#SPACE
      000D5C CD 0F BF         [ 4] 2261 	call skip
      000D5F 55 00 01 00 02   [ 1] 2262 	mov in.saved,in 
      000D64 91 D6 00         [ 4] 2263 	ld a,([in.w],y)
      000D67 26 07            [ 1] 2264 	jrne str_tst
      000D69 72 5F 17 18      [ 1] 2265 	clr pad 
      000D6D CC 0E FB         [ 2] 2266 	jp token_exit ; end of line 
                                   2267 
      000D70                       2268 str_tst: ; check for quoted string  	
      000D70 CD 0F 07         [ 4] 2269 	call to_upper 
      000D73 6B 01            [ 1] 2270 	ld (TCHAR,sp),a 
      000D75                       2271 	_case '"' nbr_tst
      000D75 A6 22            [ 1]    1 	ld a,#'"' 
      000D77 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D79 26 06            [ 1]    3 	jrne nbr_tst
      000D7B CD 0C 51         [ 4] 2272 	call parse_quote
      000D7E CC 0E FB         [ 2] 2273 	jp token_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D81                       2274 nbr_tst: ; check for number 
      000D81 A6 24            [ 1] 2275 	ld a,#'$'
      000D83 11 01            [ 1] 2276 	cp a,(TCHAR,sp) 
      000D85 27 13            [ 1] 2277 	jreq 1$
      000D87 A6 26            [ 1] 2278 	ld a,#'&
      000D89 11 01            [ 1] 2279 	cp a,(TCHAR,sp)
      000D8B 26 06            [ 1] 2280 	jrne 0$
      000D8D CD 0C E4         [ 4] 2281 	call parse_binary ; expect binary integer 
      000D90 CC 0E FB         [ 2] 2282 	jp token_exit 
      000D93 7B 01            [ 1] 2283 0$:	ld a,(TCHAR,sp)
      000D95 CD 0E FE         [ 4] 2284 	call is_digit
      000D98 24 06            [ 1] 2285 	jrnc 3$
      000D9A CD 0C A9         [ 4] 2286 1$:	call parse_integer 
      000D9D CC 0E FB         [ 2] 2287 	jp token_exit 
      000DA0                       2288 3$: 
      000DA0                       2289 	_case '(' bkslsh_tst 
      000DA0 A6 28            [ 1]    1 	ld a,#'(' 
      000DA2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA4 26 05            [ 1]    3 	jrne bkslsh_tst
      000DA6 A6 0B            [ 1] 2290 	ld a,#TK_LPAREN
      000DA8 CC 0E EB         [ 2] 2291 	jp token_char   	
      000DAB                       2292 bkslsh_tst:
      000DAB                       2293 	_case '\',rparnt_tst
      000DAB A6 5C            [ 1]    1 	ld a,#'\' 
      000DAD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DAF 26 18            [ 1]    3 	jrne rparnt_tst
      000DB1 7B 01            [ 1] 2294 	ld a,(TCHAR,sp)
      000DB3 F7               [ 1] 2295 	ld (x),a 
      000DB4 5C               [ 2] 2296 	incw x 
      000DB5 72 5C 00 01      [ 1] 2297 	inc in 
      000DB9 91 D6 00         [ 4] 2298 	ld a,([in.w],y)
      000DBC F7               [ 1] 2299 	ld (x),a 
      000DBD 5C               [ 2] 2300 	incw x 
      000DBE 72 5C 00 01      [ 1] 2301 	inc in  
      000DC2 7F               [ 1] 2302 	clr (x) 
      000DC3 97               [ 1] 2303 	ld xl,a 
      000DC4 A6 03            [ 1] 2304 	ld a,#TK_CHAR 
      000DC6 CC 0E FB         [ 2] 2305 	jp token_exit 
      000DC9                       2306 rparnt_tst:		
      000DC9                       2307 	_case ')' colon_tst 
      000DC9 A6 29            [ 1]    1 	ld a,#')' 
      000DCB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DCD 26 05            [ 1]    3 	jrne colon_tst
      000DCF A6 0C            [ 1] 2308 	ld a,#TK_RPAREN 
      000DD1 CC 0E EB         [ 2] 2309 	jp token_char 
      000DD4                       2310 colon_tst:
      000DD4                       2311 	_case ':' comma_tst 
      000DD4 A6 3A            [ 1]    1 	ld a,#':' 
      000DD6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DD8 26 05            [ 1]    3 	jrne comma_tst
      000DDA A6 01            [ 1] 2312 	ld a,#TK_COLON 
      000DDC CC 0E EB         [ 2] 2313 	jp token_char 
      000DDF                       2314 comma_tst:
      000DDF                       2315 	_case COMMA sharp_tst 
      000DDF A6 2C            [ 1]    1 	ld a,#COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DE1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE3 26 05            [ 1]    3 	jrne sharp_tst
      000DE5 A6 0D            [ 1] 2316 	ld a,#TK_COMMA
      000DE7 CC 0E EB         [ 2] 2317 	jp token_char
      000DEA                       2318 sharp_tst:
      000DEA                       2319 	_case SHARP dash_tst 
      000DEA A6 23            [ 1]    1 	ld a,#SHARP 
      000DEC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DEE 26 05            [ 1]    3 	jrne dash_tst
      000DF0 A6 0E            [ 1] 2320 	ld a,#TK_SHARP
      000DF2 CC 0E EB         [ 2] 2321 	jp token_char  	 	 
      000DF5                       2322 dash_tst: 	
      000DF5                       2323 	_case '-' at_tst 
      000DF5 A6 2D            [ 1]    1 	ld a,#'-' 
      000DF7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF9 26 05            [ 1]    3 	jrne at_tst
      000DFB A6 11            [ 1] 2324 	ld a,#TK_MINUS  
      000DFD CC 0E EB         [ 2] 2325 	jp token_char 
      000E00                       2326 at_tst:
      000E00                       2327 	_case '@' qmark_tst 
      000E00 A6 40            [ 1]    1 	ld a,#'@' 
      000E02 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E04 26 05            [ 1]    3 	jrne qmark_tst
      000E06 A6 02            [ 1] 2328 	ld a,#TK_ARRAY 
      000E08 CC 0E EB         [ 2] 2329 	jp token_char
      000E0B                       2330 qmark_tst:
      000E0B                       2331 	_case '?' tick_tst 
      000E0B A6 3F            [ 1]    1 	ld a,#'?' 
      000E0D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E0F 26 11            [ 1]    3 	jrne tick_tst
      000E11 7B 01            [ 1] 2332 	ld a,(TCHAR,sp)
      000E13 F7               [ 1] 2333 	ld (x),a 
      000E14 5C               [ 2] 2334 	incw x 
      000E15 7F               [ 1] 2335 	clr (x)
      000E16 72 5C 00 01      [ 1] 2336 	inc in 
      000E1A A6 06            [ 1] 2337 	ld a,#TK_CMD 
      000E1C AE 16 56         [ 2] 2338 	ldw x,#print 
      000E1F CC 0E FB         [ 2] 2339 	jp token_exit
      000E22                       2340 tick_tst: ; ignore comment 
      000E22                       2341 	_case TICK plus_tst 
      000E22 A6 27            [ 1]    1 	ld a,#TICK 
      000E24 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E26 26 0C            [ 1]    3 	jrne plus_tst
      000E28 72 5C 00 01      [ 1] 2342 	inc in 
      000E2C A6 06            [ 1] 2343 	ld a,#TK_CMD 
      000E2E AE 17 5B         [ 2] 2344 	ldw x,#rem 
      000E31 CC 0E FB         [ 2] 2345 	jp token_exit 
      000E34                       2346 plus_tst:
      000E34                       2347 	_case '+' star_tst 
      000E34 A6 2B            [ 1]    1 	ld a,#'+' 
      000E36 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E38 26 05            [ 1]    3 	jrne star_tst
      000E3A A6 10            [ 1] 2348 	ld a,#TK_PLUS  
      000E3C CC 0E EB         [ 2] 2349 	jp token_char 
      000E3F                       2350 star_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E3F                       2351 	_case '*' slash_tst 
      000E3F A6 2A            [ 1]    1 	ld a,#'*' 
      000E41 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E43 26 05            [ 1]    3 	jrne slash_tst
      000E45 A6 20            [ 1] 2352 	ld a,#TK_MULT 
      000E47 CC 0E EB         [ 2] 2353 	jp token_char 
      000E4A                       2354 slash_tst: 
      000E4A                       2355 	_case '/' prcnt_tst 
      000E4A A6 2F            [ 1]    1 	ld a,#'/' 
      000E4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E4E 26 05            [ 1]    3 	jrne prcnt_tst
      000E50 A6 21            [ 1] 2356 	ld a,#TK_DIV 
      000E52 CC 0E EB         [ 2] 2357 	jp token_char 
      000E55                       2358 prcnt_tst:
      000E55                       2359 	_case '%' eql_tst 
      000E55 A6 25            [ 1]    1 	ld a,#'%' 
      000E57 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E59 26 05            [ 1]    3 	jrne eql_tst
      000E5B A6 22            [ 1] 2360 	ld a,#TK_MOD
      000E5D CC 0E EB         [ 2] 2361 	jp token_char  
                                   2362 ; 1 or 2 character tokens 	
      000E60                       2363 eql_tst:
      000E60                       2364 	_case '=' gt_tst 		
      000E60 A6 3D            [ 1]    1 	ld a,#'=' 
      000E62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E64 26 05            [ 1]    3 	jrne gt_tst
      000E66 A6 32            [ 1] 2365 	ld a,#TK_EQUAL
      000E68 CC 0E EB         [ 2] 2366 	jp token_char 
      000E6B                       2367 gt_tst:
      000E6B                       2368 	_case '>' lt_tst 
      000E6B A6 3E            [ 1]    1 	ld a,#'>' 
      000E6D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E6F 26 33            [ 1]    3 	jrne lt_tst
      000E71 A6 31            [ 1] 2369 	ld a,#TK_GT 
      000E73 6B 02            [ 1] 2370 	ld (ATTRIB,sp),a 
      000E75 72 5C 00 01      [ 1] 2371 	inc in 
      000E79 91 D6 00         [ 4] 2372 	ld a,([in.w],y)
      000E7C A1 3D            [ 1] 2373 	cp a,#'=
      000E7E 26 0C            [ 1] 2374 	jrne 1$
      000E80 7B 01            [ 1] 2375 	ld a,(TCHAR,sp)
      000E82 F7               [ 1] 2376 	ld (x),a
      000E83 5C               [ 2] 2377 	incw x 
      000E84 A6 3D            [ 1] 2378 	ld a,#'=
      000E86 6B 01            [ 1] 2379 	ld (TCHAR,sp),a 
      000E88 A6 33            [ 1] 2380 	ld a,#TK_GE 
      000E8A 20 5F            [ 2] 2381 	jra token_char  
      000E8C A1 3C            [ 1] 2382 1$: cp a,#'<
      000E8E 26 0C            [ 1] 2383 	jrne 2$
      000E90 7B 01            [ 1] 2384 	ld a,(TCHAR,sp)
      000E92 F7               [ 1] 2385 	ld (x),a
      000E93 5C               [ 2] 2386 	incw x 
      000E94 A6 3C            [ 1] 2387 	ld a,#'<	
      000E96 6B 01            [ 1] 2388 	ld (TCHAR,sp),a 
      000E98 A6 35            [ 1] 2389 	ld a,#TK_NE 
      000E9A 20 4F            [ 2] 2390 	jra token_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E9C 72 5A 00 01      [ 1] 2391 2$: dec in
      000EA0 7B 02            [ 1] 2392 	ld a,(ATTRIB,sp)
      000EA2 20 47            [ 2] 2393 	jra token_char 
      000EA4                       2394 lt_tst:
      000EA4                       2395 	_case '<' other
      000EA4 A6 3C            [ 1]    1 	ld a,#'<' 
      000EA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EA8 26 32            [ 1]    3 	jrne other
      000EAA A6 34            [ 1] 2396 	ld a,#TK_LT 
      000EAC 6B 02            [ 1] 2397 	ld (ATTRIB,sp),a 
      000EAE 72 5C 00 01      [ 1] 2398 	inc in 
      000EB2 91 D6 00         [ 4] 2399 	ld a,([in.w],y)
      000EB5 A1 3D            [ 1] 2400 	cp a,#'=
      000EB7 26 0B            [ 1] 2401 	jrne 1$
      000EB9 7B 01            [ 1] 2402 	ld a,(TCHAR,sp)
      000EBB F7               [ 1] 2403 	ld (x),a 
      000EBC A6 3D            [ 1] 2404 	ld a,#'=
      000EBE 6B 01            [ 1] 2405 	ld (TCHAR,sp),a 
      000EC0 A6 36            [ 1] 2406 	ld a,#TK_LE 
      000EC2 20 27            [ 2] 2407 	jra token_char 
      000EC4 A1 3E            [ 1] 2408 1$: cp a,#'>
      000EC6 26 0C            [ 1] 2409 	jrne 2$
      000EC8 7B 01            [ 1] 2410 	ld a,(TCHAR,sp)
      000ECA F7               [ 1] 2411 	ld (x),a 
      000ECB 5C               [ 2] 2412 	incw x 
      000ECC A6 3E            [ 1] 2413 	ld a,#'>
      000ECE 6B 01            [ 1] 2414 	ld (TCHAR,sp),a 
      000ED0 A6 35            [ 1] 2415 	ld a,#TK_NE 
      000ED2 20 17            [ 2] 2416 	jra token_char 
      000ED4 72 5A 00 01      [ 1] 2417 2$: dec in 
      000ED8 7B 02            [ 1] 2418 	ld a,(ATTRIB,sp)
      000EDA 20 0F            [ 2] 2419 	jra token_char 	
      000EDC                       2420 other: ; not a special character 	 
      000EDC 7B 01            [ 1] 2421 	ld a,(TCHAR,sp)
      000EDE CD 05 09         [ 4] 2422 	call is_alpha 
      000EE1 25 03            [ 1] 2423 	jrc 30$ 
      000EE3 CC 07 7F         [ 2] 2424 	jp syntax_error 
      000EE6                       2425 30$: 
      000EE6 CD 0D 0C         [ 4] 2426 	call parse_keyword
      000EE9 20 10            [ 2] 2427 	jra token_exit 
      000EEB                       2428 token_char:
      000EEB 6B 02            [ 1] 2429 	ld (ATTRIB,sp),a 
      000EED 7B 01            [ 1] 2430 	ld a,(TCHAR,sp)
      000EEF F7               [ 1] 2431 	ld (x),a 
      000EF0 5C               [ 2] 2432 	incw x 
      000EF1 7F               [ 1] 2433 	clr(x)
      000EF2 72 5C 00 01      [ 1] 2434 	inc in 
      000EF6 7B 02            [ 1] 2435 	ld a,(ATTRIB,sp)
      000EF8 AE 17 18         [ 2] 2436 	ldw x,#pad 
      000EFB                       2437 token_exit:
      000EFB                       2438 	_drop VSIZE 
      000EFB 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EFD 81               [ 4] 2439 	ret
                                   2440 
                                   2441 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2442 
                                   2443 ;------------------------------------
                                   2444 ; check if character in {'0'..'9'}
                                   2445 ; input:
                                   2446 ;    A  character to test
                                   2447 ; output:
                                   2448 ;    Carry  0 not digit | 1 digit
                                   2449 ;------------------------------------
      000EFE                       2450 is_digit:
      000EFE A1 30            [ 1] 2451 	cp a,#'0
      000F00 25 03            [ 1] 2452 	jrc 1$
      000F02 A1 3A            [ 1] 2453     cp a,#'9+1
      000F04 8C               [ 1] 2454 	ccf 
      000F05 8C               [ 1] 2455 1$:	ccf 
      000F06 81               [ 4] 2456     ret
                                   2457 
                                   2458 ;------------------------------------
                                   2459 ; convert alpha to uppercase
                                   2460 ; input:
                                   2461 ;    a  character to convert
                                   2462 ; output:
                                   2463 ;    a  uppercase character
                                   2464 ;------------------------------------
      000F07                       2465 to_upper::
      000F07 A1 61            [ 1] 2466 	cp a,#'a
      000F09 2A 01            [ 1] 2467 	jrpl 1$
      000F0B 81               [ 4] 2468 0$:	ret
      000F0C A1 7A            [ 1] 2469 1$: cp a,#'z	
      000F0E 22 FB            [ 1] 2470 	jrugt 0$
      000F10 A0 20            [ 1] 2471 	sub a,#32
      000F12 81               [ 4] 2472 	ret
                                   2473 	
                                   2474 ;------------------------------------
                                   2475 ; convert pad content in integer
                                   2476 ; input:
                                   2477 ;    pad		.asciz to convert
                                   2478 ; output:
                                   2479 ;    acc24      int24_t
                                   2480 ;------------------------------------
                                   2481 	; local variables
                           000001  2482 	SIGN=1 ; 1 byte, 
                           000002  2483 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2484 	TEMP=3 ; 1 byte, temporary storage
                           000003  2485 	VSIZE=3 ; 3 bytes reserved for local storage
      000F13                       2486 atoi24:
      000F13 89               [ 2] 2487 	pushw x ;save x
      000F14 52 03            [ 2] 2488 	sub sp,#VSIZE
                                   2489 	; acc24=0 
      000F16 72 5F 00 07      [ 1] 2490 	clr acc24    
      000F1A 72 5F 00 08      [ 1] 2491 	clr acc16
      000F1E 72 5F 00 09      [ 1] 2492 	clr acc8 
      000F22 C6 17 18         [ 1] 2493 	ld a, pad 
      000F25 27 5A            [ 1] 2494 	jreq atoi_exit
      000F27 0F 01            [ 1] 2495 	clr (SIGN,sp)
      000F29 A6 0A            [ 1] 2496 	ld a,#10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F2B 6B 02            [ 1] 2497 	ld (BASE,sp),a ; default base decimal
      000F2D AE 17 18         [ 2] 2498 	ldw x,#pad ; pointer to string to convert
      000F30 F6               [ 1] 2499 	ld a,(x)
      000F31 27 47            [ 1] 2500 	jreq 9$  ; completed if 0
      000F33 A1 2D            [ 1] 2501 	cp a,#'-
      000F35 26 04            [ 1] 2502 	jrne 1$
      000F37 03 01            [ 1] 2503 	cpl (SIGN,sp)
      000F39 20 08            [ 2] 2504 	jra 2$
      000F3B A1 24            [ 1] 2505 1$: cp a,#'$
      000F3D 26 06            [ 1] 2506 	jrne 3$
      000F3F A6 10            [ 1] 2507 	ld a,#16
      000F41 6B 02            [ 1] 2508 	ld (BASE,sp),a
      000F43 5C               [ 2] 2509 2$:	incw x
      000F44 F6               [ 1] 2510 	ld a,(x)
      000F45                       2511 3$:	
      000F45 A1 61            [ 1] 2512 	cp a,#'a
      000F47 2B 02            [ 1] 2513 	jrmi 4$
      000F49 A0 20            [ 1] 2514 	sub a,#32
      000F4B A1 30            [ 1] 2515 4$:	cp a,#'0
      000F4D 2B 2B            [ 1] 2516 	jrmi 9$
      000F4F A0 30            [ 1] 2517 	sub a,#'0
      000F51 A1 0A            [ 1] 2518 	cp a,#10
      000F53 2B 06            [ 1] 2519 	jrmi 5$
      000F55 A0 07            [ 1] 2520 	sub a,#7
      000F57 11 02            [ 1] 2521 	cp a,(BASE,sp)
      000F59 2A 1F            [ 1] 2522 	jrpl 9$
      000F5B 6B 03            [ 1] 2523 5$:	ld (TEMP,sp),a
      000F5D 7B 02            [ 1] 2524 	ld a,(BASE,sp)
      000F5F CD 0F 85         [ 4] 2525 	call mulu24_8
      000F62 7B 03            [ 1] 2526 	ld a,(TEMP,sp)
      000F64 CB 00 09         [ 1] 2527 	add a,acc24+2
      000F67 C7 00 09         [ 1] 2528 	ld acc24+2,a
      000F6A 4F               [ 1] 2529 	clr a
      000F6B C9 00 08         [ 1] 2530 	adc a,acc24+1
      000F6E C7 00 08         [ 1] 2531 	ld acc24+1,a
      000F71 4F               [ 1] 2532 	clr a
      000F72 C9 00 07         [ 1] 2533 	adc a,acc24
      000F75 C7 00 07         [ 1] 2534 	ld acc24,a
      000F78 20 C9            [ 2] 2535 	jra 2$
      000F7A 0D 01            [ 1] 2536 9$:	tnz (SIGN,sp)
      000F7C 27 03            [ 1] 2537     jreq atoi_exit
      000F7E CD 0A AA         [ 4] 2538     call neg_acc24
      000F81                       2539 atoi_exit: 
      000F81 5B 03            [ 2] 2540 	addw sp,#VSIZE
      000F83 85               [ 2] 2541 	popw x ; restore x
      000F84 81               [ 4] 2542 	ret
                                   2543 
                                   2544 ;--------------------------------------
                                   2545 ; unsigned multiply uint24_t by uint8_t
                                   2546 ; use to convert numerical string to uint24_t
                                   2547 ; input:
                                   2548 ;	acc24	uint24_t 
                                   2549 ;   A		uint8_t
                                   2550 ; output:
                                   2551 ;   acc24   A*acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2552 ;-------------------------------------
                                   2553 ; local variables offset  on sp
                           000003  2554 	U8   = 3   ; A pushed on stack
                           000002  2555 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2556 	OVFH = 1  ; multiplication overflow high byte
                           000003  2557 	VSIZE = 3
      000F85                       2558 mulu24_8:
      000F85 89               [ 2] 2559 	pushw x    ; save X
                                   2560 	; local variables
      000F86 88               [ 1] 2561 	push a     ; U8
      000F87 5F               [ 1] 2562 	clrw x     ; initialize overflow to 0
      000F88 89               [ 2] 2563 	pushw x    ; multiplication overflow
                                   2564 ; multiply low byte.
      000F89 C6 00 09         [ 1] 2565 	ld a,acc24+2
      000F8C 97               [ 1] 2566 	ld xl,a
      000F8D 7B 03            [ 1] 2567 	ld a,(U8,sp)
      000F8F 42               [ 4] 2568 	mul x,a
      000F90 9F               [ 1] 2569 	ld a,xl
      000F91 C7 00 09         [ 1] 2570 	ld acc24+2,a
      000F94 9E               [ 1] 2571 	ld a, xh
      000F95 6B 02            [ 1] 2572 	ld (OVFL,sp),a
                                   2573 ; multipy middle byte
      000F97 C6 00 08         [ 1] 2574 	ld a,acc24+1
      000F9A 97               [ 1] 2575 	ld xl,a
      000F9B 7B 03            [ 1] 2576 	ld a, (U8,sp)
      000F9D 42               [ 4] 2577 	mul x,a
                                   2578 ; add overflow to this partial product
      000F9E 72 FB 01         [ 2] 2579 	addw x,(OVFH,sp)
      000FA1 9F               [ 1] 2580 	ld a,xl
      000FA2 C7 00 08         [ 1] 2581 	ld acc24+1,a
      000FA5 4F               [ 1] 2582 	clr a
      000FA6 A9 00            [ 1] 2583 	adc a,#0
      000FA8 6B 01            [ 1] 2584 	ld (OVFH,sp),a
      000FAA 9E               [ 1] 2585 	ld a,xh
      000FAB 6B 02            [ 1] 2586 	ld (OVFL,sp),a
                                   2587 ; multiply most signficant byte	
      000FAD C6 00 07         [ 1] 2588 	ld a, acc24
      000FB0 97               [ 1] 2589 	ld xl, a
      000FB1 7B 03            [ 1] 2590 	ld a, (U8,sp)
      000FB3 42               [ 4] 2591 	mul x,a
      000FB4 72 FB 01         [ 2] 2592 	addw x, (OVFH,sp)
      000FB7 9F               [ 1] 2593 	ld a, xl
      000FB8 C7 00 07         [ 1] 2594 	ld acc24,a
      000FBB 5B 03            [ 2] 2595     addw sp,#VSIZE
      000FBD 85               [ 2] 2596 	popw x
      000FBE 81               [ 4] 2597 	ret
                                   2598 
                                   2599 ;------------------------------------
                                   2600 ; skip character c in text starting from 'in'
                                   2601 ; input:
                                   2602 ;	 y 		point to text buffer
                                   2603 ;    a 		character to skip
                                   2604 ; output:  
                                   2605 ;	'in' ajusted to new position
                                   2606 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           000001  2607 	C = 1 ; local var
      000FBF                       2608 skip:
      000FBF 88               [ 1] 2609 	push a
      000FC0 91 D6 00         [ 4] 2610 1$:	ld a,([in.w],y)
      000FC3 27 0A            [ 1] 2611 	jreq 2$
      000FC5 11 01            [ 1] 2612 	cp a,(C,sp)
      000FC7 26 06            [ 1] 2613 	jrne 2$
      000FC9 72 5C 00 01      [ 1] 2614 	inc in
      000FCD 20 F1            [ 2] 2615 	jra 1$
      000FCF                       2616 2$: _drop 1 
      000FCF 5B 01            [ 2]    1     addw sp,#1 
      000FD1 81               [ 4] 2617 	ret
                                   2618 	
                                   2619 ;------------------------------
                                   2620 ; restore 'in.w' variable to 
                                   2621 ; its value before last call
                                   2622 ; to get_token.
                                   2623 ;------------------------------
      000FD2                       2624 unget_token:
      000FD2 55 00 02 00 01   [ 1] 2625 	mov in,in.saved
      000FD7 81               [ 4] 2626 	ret 
                                   2627 
                                   2628 
                                   2629 ;******************************
                                   2630 ;  data stack manipulation
                                   2631 ;*****************************
                                   2632 ;----------------------	
                                   2633 ; push X on data stack 
                                   2634 ; input:
                                   2635 ;	X 
                                   2636 ; output:
                                   2637 ;	none 
                                   2638 ;----------------------	
      000FD8                       2639 dpush:
      000FD8                       2640     _dp_down
      000FD8 72 5A 00 19      [ 1]    1     dec dstkptr+1 
      000FDC 72 5A 00 19      [ 1]    2     dec dstkptr+1
      000FE0 72 CF 00 18      [ 5] 2641     ldw [dstkptr],x  
      000FE4 81               [ 4] 2642 	ret 
                                   2643 
                                   2644 
                                   2645 ;----------------------	
                                   2646 ; pop data stack in X 
                                   2647 ; input:
                                   2648 ;	none
                                   2649 ; output:
                                   2650 ;	X   
                                   2651 ;----------------------	
      000FE5                       2652 dpop: 
      000FE5 72 CE 00 18      [ 5] 2653     ldw x, [dstkptr]
      000FE9                       2654 	_dp_up
      000FE9 72 5C 00 19      [ 1]    1     inc dstkptr+1
      000FED 72 5C 00 19      [ 1]    2     inc dstkptr+1
      000FF1 81               [ 4] 2655 	ret 
                                   2656 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2657 ;-----------------------------
                                   2658 ; swap top 2 elements of dstack
                                   2659 ;  {n1 n2 -- n2 n1 }
                                   2660 ;-----------------------------
      000FF2                       2661 dswap:
      000FF2 72 CE 00 18      [ 5] 2662 	ldw x,[dstkptr]
      000FF6 89               [ 2] 2663 	pushw x 
      000FF7 AE 00 02         [ 2] 2664 	ldw x,#2 
      000FFA 72 DE 00 18      [ 5] 2665 	ldw x,([dstkptr],x) 
      000FFE 72 CF 00 18      [ 5] 2666 	ldw [dstkptr],x 
      001002 AE 00 02         [ 2] 2667 	ldw x,#2
      001005 90 85            [ 2] 2668 	popw y 
      001007 72 DF 00 18      [ 5] 2669 	ldw ([dstkptr],x),y 
      00100B 81               [ 4] 2670 	ret
                                   2671 
                                   2672 ;-----------------------------
                                   2673 ; drop TOS 
                                   2674 ;-----------------------------
      00100C                       2675 ddrop: ; { n -- }
      00100C                       2676 	_dp_up 
      00100C 72 5C 00 19      [ 1]    1     inc dstkptr+1
      001010 72 5C 00 19      [ 1]    2     inc dstkptr+1
      001014 81               [ 4] 2677 	ret
                                   2678 	
                                   2679 ;-----------------------------
                                   2680 ; duplicate TOS 
                                   2681 ;  dstack: { ix...n -- ix...n n }
                                   2682 ;-----------------------------
      001015                       2683 ddup:
      001015 72 CE 00 18      [ 5] 2684 	ldw x,[dstkptr]
      001019                       2685 	_dp_down
      001019 72 5A 00 19      [ 1]    1     dec dstkptr+1 
      00101D 72 5A 00 19      [ 1]    2     dec dstkptr+1
      001021 72 CF 00 18      [ 5] 2686     ldw [dstkptr],x  
      001025 81               [ 4] 2687 	ret 
                                   2688 
                                   2689 
                                   2690 ;----------------------------------
                                   2691 ; pick value n from dstack 
                                   2692 ; put it on TOS
                                   2693 ; dstack: {ix,..,p -- ix,...,np }
                                   2694 ;-----------------------------------
      001026                       2695 dpick:
      001026 72 CE 00 18      [ 5] 2696 	ldw x,[dstkptr]
      00102A 58               [ 2] 2697 	sllw x 
      00102B 72 BB 00 18      [ 2] 2698 	addw x,dstkptr 
      00102F FE               [ 2] 2699 	ldw x,(x)
      001030 72 CF 00 18      [ 5] 2700 	ldw [dstkptr],x 
      001034 81               [ 4] 2701 	ret
                                   2702 
                                   2703 ;---------------------------
                                   2704 ;  fetch variable in X 
                                   2705 ;  dstack:{ addr -- value }
                                   2706 ;---------------------------
      001035                       2707 fetch:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      001035 72 CE 00 18      [ 5] 2708 	ldw x,[dstkptr]
      001039 FE               [ 2] 2709 	ldw x,(x)
      00103A 72 CF 00 18      [ 5] 2710 	ldw [dstkptr],x
      00103E 81               [ 4] 2711 	ret 
                                   2712 
                                   2713 ;----------------------------
                                   2714 ; store variable 
                                   2715 ; dstack: {addr value -- }
                                   2716 ;----------------------------
      00103F                       2717 store:
      00103F CD 0F E5         [ 4] 2718 	call dpop 
      001042 90 93            [ 1] 2719 	ldw y,x   ; y=value 
      001044 CD 0F E5         [ 4] 2720 	call dpop 
      001047 FF               [ 2] 2721 	ldw (x),y 
      001048 81               [ 4] 2722 	ret 
                                   2723 
                                   2724 ;---------------------------------
                                   2725 ; drop n elements from data stack 
                                   2726 ; input: 
                                   2727 ;   X 		n 
                                   2728 ; output:
                                   2729 ;   none 
                                   2730 ;-------------------------------------
      001049                       2731 ddrop_n:
      001049 90 89            [ 2] 2732 	pushw y 
      00104B 90 CE 00 18      [ 2] 2733 	ldw y,dstkptr 
      00104F 58               [ 2] 2734 	sllw x 
      001050 89               [ 2] 2735 	pushw x 
      001051 72 F9 01         [ 2] 2736 	addw y,(1,sp)
      001054 90 CF 00 18      [ 2] 2737 	ldw dstkptr,y 
      001058 85               [ 2] 2738 	popw x 
      001059 90 85            [ 2] 2739 	popw y
      00105B 81               [ 4] 2740 	ret 
                                   2741 
      00105C 0A 64 73 74 61 63 6B  2742 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2743 ;----------------------------
                                   2744 ; print dstack content 
                                   2745 ;---------------------------
                           000001  2746 	XSAVE=1
                           000002  2747 	VSIZE=2
      001066                       2748 dots:
      001066                       2749 	_vars VSIZE 
      001066 52 02            [ 2]    1     sub sp,#VSIZE 
      001068 AE 10 5C         [ 2] 2750 	ldw x,#dstk_prompt 
      00106B CD 01 C4         [ 4] 2751 	call puts
      00106E AE 17 7E         [ 2] 2752 	ldw x,#dstack_empty-CELL_SIZE
      001071 35 0A 00 06      [ 1] 2753 	mov base,#10 
      001075 C3 00 18         [ 2] 2754 1$:	cpw x,dstkptr 
      001078 25 0D            [ 1] 2755 	jrult 4$ 
      00107A 1F 01            [ 2] 2756 	ldw (XSAVE,sp),x
      00107C FE               [ 2] 2757 	ldw  x,(x)
      00107D CD 09 DF         [ 4] 2758 	call print_int 
      001080 1E 01            [ 2] 2759 	ldw x,(XSAVE,sp)
      001082 1D 00 02         [ 2] 2760 	subw x,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001085 20 EE            [ 2] 2761 	jra 1$ 
      001087 A6 0D            [ 1] 2762 4$: ld a,#CR 
      001089 CD 01 B2         [ 4] 2763 	call putc 
      00108C                       2764 	_drop VSIZE
      00108C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00108E 4F               [ 1] 2765 	clr a 
      00108F 81               [ 4] 2766 	ret
                                   2767 
      001090 0A 63 74 61 63 6B 3A  2768 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2769 ;--------------------------------
                                   2770 ; print cstack content
                                   2771 ;--------------------------------
                           000001  2772 	XSAVE=1
                           000002  2773 	VSIZE=2 
      001099                       2774 dotr:
      001099                       2775 	_vars VSIZE 
      001099 52 02            [ 2]    1     sub sp,#VSIZE 
      00109B AE 10 90         [ 2] 2776 	ldw x,#cstk_prompt
      00109E CD 01 C4         [ 4] 2777 	call puts 
      0010A1 96               [ 1] 2778 	ldw x,sp 
      0010A2 1C 00 07         [ 2] 2779 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      0010A5 1F 01            [ 2] 2780 	ldw (XSAVE,sp),x  
      0010A7 AE 17 FE         [ 2] 2781 	ldw x,#RAM_SIZE-2
      0010AA 35 10 00 06      [ 1] 2782 	mov base,#16
      0010AE                       2783 dotr_loop:
      0010AE 13 01            [ 2] 2784 	cpw x,(XSAVE,sp)
      0010B0 2B 0B            [ 1] 2785 	jrmi 9$
      0010B2 89               [ 2] 2786 	pushw x  
      0010B3 FE               [ 2] 2787 	ldw x,(x)
      0010B4 CD 09 DF         [ 4] 2788 	call print_int 
      0010B7 85               [ 2] 2789 	popw x  
      0010B8 1D 00 02         [ 2] 2790 	subw x,#CELL_SIZE
      0010BB 20 F1            [ 2] 2791 	jra dotr_loop 
      0010BD A6 0D            [ 1] 2792 9$:	ld a,#CR 
      0010BF CD 01 B2         [ 4] 2793 	call putc 
      0010C2                       2794 	_drop VSIZE 
      0010C2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010C4 4F               [ 1] 2795 	clr a 
      0010C5 81               [ 4] 2796 	ret
                                   2797 
                                   2798 
                                   2799 ;--------------------------------
                                   2800 ;  add 2 integers
                                   2801 ;  input:
                                   2802 ;    N1     on cstack 
                                   2803 ;    N2     on cstack 
                                   2804 ;  output:
                                   2805 ;    X 		n2+n1 
                                   2806 ;--------------------------------
                                   2807 	;arugments on cstack 
      0010C6                       2808 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0010C6                       2809 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0010C6                       2810 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      0010C6                       2811 add:
      0010C6 1E 05            [ 2] 2812 	ldw x ,(N2,sp)
      0010C8 72 FB 03         [ 2] 2813 	addw x,(N1,sp)
      0010CB 1F 03            [ 2] 2814 	ldw (N1,sp),x 
      0010CD 81               [ 4] 2815 	ret 
                                   2816 
                                   2817 ;--------------------------------
                                   2818 ;  substract 2 ntegers
                                   2819 ;  input:
                                   2820 ;    N1     on cstack 
                                   2821 ;    N2     on cstack 
                                   2822 ;  output:
                                   2823 ;    X 		n2+n1 
                                   2824 ;--------------------------------
      0010CE                       2825 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0010CE                       2826 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      0010CE                       2827 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      0010CE                       2828 substract:
      0010CE 1E 05            [ 2] 2829 	ldw x,(N2,sp)
      0010D0 72 F0 03         [ 2] 2830 	subw x,(N1,sp)
      0010D3 81               [ 4] 2831 	ret 
                                   2832 
                                   2833 ;-------------------------------------
                                   2834 ; multiply 2 integers
                                   2835 ; product overflow is ignored unless
                                   2836 ; MATH_OVF assembler flag is set to 1
                                   2837 ; input:
                                   2838 ;  	N1      on cstack
                                   2839 ;   N2 		on cstack 
                                   2840 ; output:
                                   2841 ;	X        N1*N2 
                                   2842 ;-------------------------------------
                                   2843 	;arguments 
      0010D4                       2844 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      0010D4                       2845 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      0010D4                       2846 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      0010D4                       2847 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      0010D4                       2848 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2849    ; local variables 
                           000001  2850 	SIGN=1
                           000002  2851 	PROD=2
                           000003  2852 	VSIZE=3
      0010D4                       2853 multiply:
      0010D4                       2854 	_vars VSIZE 
      0010D4 52 03            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010D6 0F 01            [ 1] 2855 	clr (SIGN,sp)
      0010D8 1E 06            [ 2] 2856 	ldw x,(N1_HB,sp)
      0010DA 9E               [ 1] 2857 	ld a,xh  
      0010DB A5 80            [ 1] 2858 	bcp a,#0x80 
      0010DD 27 05            [ 1] 2859 	jreq 2$
      0010DF 03 01            [ 1] 2860 	cpl (SIGN,sp)
      0010E1 50               [ 2] 2861 	negw x 
      0010E2 1F 06            [ 2] 2862 	ldw (N1_HB,sp),x 
      0010E4 1E 08            [ 2] 2863 2$: ldw x,(N2_HB,sp)
      0010E6 9E               [ 1] 2864 	ld a,xh  
      0010E7 A5 80            [ 1] 2865 	bcp a,#0x80 
      0010E9 27 05            [ 1] 2866 	jreq 3$
      0010EB 03 01            [ 1] 2867 	cpl (SIGN,sp)
      0010ED 50               [ 2] 2868 	negw x 
      0010EE 1F 08            [ 2] 2869 	ldw (N2_HB,sp),x 
                                   2870 ; N1_LB * N2_LB 	
      0010F0 7B 07            [ 1] 2871 3$:	ld a,(N1_LB,sp)
      0010F2 97               [ 1] 2872 	ld xl,a 
      0010F3 7B 09            [ 1] 2873 	ld a,(N2_LB,sp) 
      0010F5 42               [ 4] 2874 	mul x,a 
                           000000  2875 .if MATH_OVF 	
                                   2876 	ld a,xh 
                                   2877 	bcp a,#0x80 
                                   2878 	jreq 4$ 
                                   2879 	ld a,#ERR_MATH_OVF 
                                   2880 	jp tb_error
                                   2881 .endif 	 
      0010F6 1F 02            [ 2] 2882 4$:	ldw (PROD,sp),x
                                   2883 ; N1_LB * N2_HB	 
      0010F8 7B 07            [ 1] 2884 	ld a,(N1_LB,sp) 
      0010FA 97               [ 1] 2885 	ld xl,a 
      0010FB 7B 08            [ 1] 2886 	ld a,(N2_HB,sp)
      0010FD 42               [ 4] 2887 	mul x,a
      0010FE 9F               [ 1] 2888 	ld a,xl 
      0010FF 1B 02            [ 1] 2889 	add a,(PROD,sp)
                           000000  2890 .if MATH_OVF 	
                                   2891 	bcp a,#0x80 
                                   2892 	jreq 5$ 
                                   2893 	ld a,#ERR_MATH_OVF 
                                   2894 	jp tb_error
                                   2895 .endif 	 
      001101 6B 02            [ 1] 2896 5$:	ld (PROD,sp),a 
                                   2897 ; N1_HB * N2_LB 
      001103 7B 06            [ 1] 2898 	ld a,(N1_HB,sp)
      001105 97               [ 1] 2899 	ld xl,a 
      001106 7B 09            [ 1] 2900 	ld a,(N2_LB,sp)
      001108 42               [ 4] 2901 	mul x,a 
      001109 9F               [ 1] 2902 	ld a,xl 
      00110A 1B 02            [ 1] 2903 	add a,(PROD,sp)
                           000000  2904 .if MATH_OVF 	
                                   2905 	bcp a,#0x80 
                                   2906 	jreq 6$ 
                                   2907 	ld a,#ERR_MATH_OVF 
                                   2908 	jp tb_error
                                   2909 .endif 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00110C 6B 02            [ 1] 2910 6$:	ld (PROD,sp),a 
                                   2911 ; N1_HB * N2_HB 	
                                   2912 ; it is pointless to multiply N1_HB*N2_HB 
                                   2913 ; as this product is over 65535 or 0 
                                   2914 ;
                                   2915 ; sign adjust product
      00110E 0D 01            [ 1] 2916 	tnz (SIGN,sp)
      001110 27 05            [ 1] 2917 	jreq 7$
      001112 1E 02            [ 2] 2918 	ldw x, (PROD,sp)
      001114 50               [ 2] 2919 	negw x
      001115 1F 02            [ 2] 2920 	ldw (PROD,sp),x  
      001117                       2921 7$: 
      001117 1E 02            [ 2] 2922 	ldw x,(PROD,sp) 
      001119                       2923 	_drop VSIZE 
      001119 5B 03            [ 2]    1     addw sp,#VSIZE 
      00111B 81               [ 4] 2924 	ret
                                   2925 
                                   2926 ;----------------------------------
                                   2927 ;  euclidian divide n2/n1 
                                   2928 ; input:
                                   2929 ;    N2 	on cstack
                                   2930 ;    N1 	on cstack
                                   2931 ; output:
                                   2932 ;    X      n2/n1 
                                   2933 ;    Y      remainder 
                                   2934 ;----------------------------------
      00111C                       2935 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      00111C                       2936 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      00111C                       2937 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2938 	; local variables
                           000001  2939 	SQUOT=1 ; sign quotient
                           000002  2940 	SDIVD=2 ; sign dividend  
                           000002  2941 	VSIZE=2
      00111C                       2942 divide:
      00111C                       2943 	_vars VSIZE 
      00111C 52 02            [ 2]    1     sub sp,#VSIZE 
      00111E 0F 01            [ 1] 2944 	clr (SQUOT,sp)
      001120 0F 02            [ 1] 2945 	clr (SDIVD,sp)
                                   2946 ; check for 0 divisor
      001122 1E 05            [ 2] 2947 	ldw x,(DIVISR,sp)
      001124 5D               [ 2] 2948 	tnzw x 
      001125 26 05            [ 1] 2949     jrne 0$
      001127 A6 04            [ 1] 2950 	ld a,#ERR_DIV0 
      001129 CC 07 81         [ 2] 2951 	jp tb_error 
                                   2952 ; check divisor sign 	
      00112C 9E               [ 1] 2953 0$:	ld a,xh 
      00112D A5 80            [ 1] 2954 	bcp a,#0x80 
      00112F 27 03            [ 1] 2955 	jreq 1$
      001131 03 01            [ 1] 2956 	cpl (SQUOT,sp)
      001133 50               [ 2] 2957 	negw x 
      001134 1F 05            [ 2] 2958 1$:	ldw (DIVISR,sp),x
                                   2959 ; check dividend sign 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001136 1E 07            [ 2] 2960     ldw x,(DIVIDND,sp)
      001138 9E               [ 1] 2961 	ld a,xh 
      001139 A5 80            [ 1] 2962 	bcp a,#0x80 
      00113B 27 05            [ 1] 2963 	jreq 2$ 
      00113D 03 01            [ 1] 2964 	cpl (SQUOT,sp)
      00113F 03 02            [ 1] 2965 	cpl (SDIVD,sp)
      001141 50               [ 2] 2966 	negw x 
      001142 16 05            [ 2] 2967 2$:	ldw y,(DIVISR,sp)
      001144 65               [ 2] 2968 	divw x,y
      001145 90 CF 00 08      [ 2] 2969 	ldw acc16,y 
                                   2970 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      001149 0D 02            [ 1] 2971 	tnz (SDIVD,sp)
      00114B 27 0B            [ 1] 2972 	jreq 7$
      00114D 90 5D            [ 2] 2973 	tnzw y 
      00114F 27 07            [ 1] 2974 	jreq 7$
      001151 5C               [ 2] 2975 	incw x
      001152 16 05            [ 2] 2976 	ldw y,(DIVISR,sp)
      001154 72 B2 00 08      [ 2] 2977 	subw y,acc16
      001158 0D 01            [ 1] 2978 7$: tnz (SQUOT,sp)
      00115A 27 01            [ 1] 2979 	jreq 9$ 	 
      00115C 50               [ 2] 2980 8$:	negw x 
      00115D                       2981 9$: 
      00115D                       2982 	_drop VSIZE 
      00115D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00115F 81               [ 4] 2983 	ret 
                                   2984 
                                   2985 
                                   2986 ;----------------------------------
                                   2987 ;  remainder resulting from euclidian 
                                   2988 ;  division of n2/n1 
                                   2989 ; input:
                                   2990 ;   N1 		cstack 
                                   2991 ;   N2      cstack
                                   2992 ; output:
                                   2993 ;   X       N2%N1 
                                   2994 ;----------------------------------
                           000003  2995 	N1=3
                           000005  2996 	N2=5
                           000004  2997 	VSIZE=4
      001160                       2998 modulo:
      001160 1E 03            [ 2] 2999 	Ldw x,(N1,sp)
      001162 16 05            [ 2] 3000 	ldw y,(N2,sp)
      001164                       3001 	_vars VSIZE 
      001164 52 04            [ 2]    1     sub sp,#VSIZE 
      001166 1F 01            [ 2] 3002 	ldw (1,sp),x 
      001168 17 03            [ 2] 3003 	ldw (3,sp),y 
      00116A CD 11 1C         [ 4] 3004 	call divide 
      00116D 93               [ 1] 3005 	ldw x,y
      00116E                       3006 	_drop VSIZE 
      00116E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001170 81               [ 4] 3007 	ret 
                                   3008 
                                   3009 
                                   3010 ;----------------------------------
                                   3011 ; search in kword_dict command name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3012 ;  from its execution address 
                                   3013 ; input:
                                   3014 ;   X       	execution address 
                                   3015 ; output:
                                   3016 ;   X 			cstr*  | 0 
                                   3017 ;--------------------------------
                           000001  3018 	XADR=1 
                           000003  3019 	LINK=3 
                           000004  3020 	VSIZE=4
      001171                       3021 cmd_name:
      001171                       3022 	_vars VSIZE 
      001171 52 04            [ 2]    1     sub sp,#VSIZE 
      001173 72 5F 00 08      [ 1] 3023 	clr acc16 
      001177 1F 01            [ 2] 3024 	ldw (XADR,sp),x  
      001179 AE 25 2B         [ 2] 3025 	ldw x,#kword_dict	
      00117C 1F 03            [ 2] 3026 1$:	ldw (LINK,sp),x
      00117E E6 02            [ 1] 3027 	ld a,(2,x)
      001180 A4 0F            [ 1] 3028 	and a,#15 
      001182 C7 00 09         [ 1] 3029 	ld acc8,a 
      001185 1C 00 03         [ 2] 3030 	addw x,#3
      001188 72 BB 00 08      [ 2] 3031 	addw x,acc16
      00118C FE               [ 2] 3032 	ldw x,(x) ; execution address 
      00118D 13 01            [ 2] 3033 	cpw x,(XADR,sp)
      00118F 27 0A            [ 1] 3034 	jreq 2$
      001191 1E 03            [ 2] 3035 	ldw x,(LINK,sp)
      001193 FE               [ 2] 3036 	ldw x,(x) 
      001194 1D 00 02         [ 2] 3037 	subw x,#2  
      001197 26 E3            [ 1] 3038 	jrne 1$
      001199 20 05            [ 2] 3039 	jra 9$
      00119B 1E 03            [ 2] 3040 2$: ldw x,(LINK,sp)
      00119D 1C 00 02         [ 2] 3041 	addw x,#2 	
      0011A0                       3042 9$:	_drop VSIZE
      0011A0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0011A2 81               [ 4] 3043 	ret
                                   3044 
                                   3045 
                                   3046 ;---------------------------------
                                   3047 ; input:
                                   3048 ;	X 		dictionary entry point 
                                   3049 ;  pad		.asciz name to search 
                                   3050 ; output:
                                   3051 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3052 ;  X		execution address | 0 
                                   3053 ;---------------------------------
                           000001  3054 	NLEN=1 ; cmd length 
                           000002  3055 	YSAVE=2
                           000003  3056 	VSIZE=3 
      0011A3                       3057 search_dict:
      0011A3                       3058 	_vars VSIZE 
      0011A3 52 03            [ 2]    1     sub sp,#VSIZE 
      0011A5 90 93            [ 1] 3059 	ldw y,x 
      0011A7                       3060 search_next:	
      0011A7 90 F6            [ 1] 3061 	ld a,(y)
      0011A9 A4 0F            [ 1] 3062 	and a,#0xf 
      0011AB 6B 01            [ 1] 3063 	ld (NLEN,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011AD AE 17 18         [ 2] 3064 	ldw x,#pad 
      0011B0 17 02            [ 2] 3065 	ldw (YSAVE,sp),y
      0011B2 90 5C            [ 2] 3066 	incw y  
      0011B4                       3067 cp_loop:
      0011B4 F6               [ 1] 3068 	ld a,(x)
      0011B5 27 1E            [ 1] 3069 	jreq str_match 
      0011B7 0D 01            [ 1] 3070 	tnz (NLEN,sp)
      0011B9 27 0B            [ 1] 3071 	jreq no_match  
      0011BB 90 F1            [ 1] 3072 	cp a,(y)
      0011BD 26 07            [ 1] 3073 	jrne no_match 
      0011BF 90 5C            [ 2] 3074 	incw y 
      0011C1 5C               [ 2] 3075 	incw x
      0011C2 0A 01            [ 1] 3076 	dec (NLEN,sp)
      0011C4 20 EE            [ 2] 3077 	jra cp_loop 
      0011C6                       3078 no_match:
      0011C6 16 02            [ 2] 3079 	ldw y,(YSAVE,sp) 
      0011C8 72 A2 00 02      [ 2] 3080 	subw y,#2 ; move Y to link field
      0011CC 4B 00            [ 1] 3081 	push #TK_NONE 
      0011CE 90 FE            [ 2] 3082 	ldw y,(y) ; next word link 
      0011D0 84               [ 1] 3083 	pop a ; TK_NONE 
      0011D1 27 21            [ 1] 3084 	jreq search_exit  ; not found  
                                   3085 ;try next 
      0011D3 20 D2            [ 2] 3086 	jra search_next
      0011D5                       3087 str_match:
      0011D5 16 02            [ 2] 3088 	ldw y,(YSAVE,sp)
      0011D7 90 F6            [ 1] 3089 	ld a,(y)
      0011D9 6B 01            [ 1] 3090 	ld (NLEN,sp),a ; needed to test keyword type  
      0011DB A4 0F            [ 1] 3091 	and a,#0xf 
                                   3092 ; move y to procedure address field 	
      0011DD 4C               [ 1] 3093 	inc a 
      0011DE C7 00 09         [ 1] 3094 	ld acc8,a 
      0011E1 72 5F 00 08      [ 1] 3095 	clr acc16 
      0011E5 72 B9 00 08      [ 2] 3096 	addw y,acc16 
      0011E9 90 FE            [ 2] 3097 	ldw y,(y) ; routine entry point 
                                   3098 ;determine keyword type bits 7:6 
      0011EB 7B 01            [ 1] 3099 	ld a,(NLEN,sp)
      0011ED 4E               [ 1] 3100 	swap a 
      0011EE A4 0C            [ 1] 3101 	and a,#0xc
      0011F0 44               [ 1] 3102 	srl a
      0011F1 44               [ 1] 3103 	srl a 
      0011F2 AB 06            [ 1] 3104 	add a,#6
      0011F4                       3105 search_exit: 
      0011F4 93               [ 1] 3106 	ldw x,y ; x=routine address 
      0011F5                       3107 	_drop VSIZE 	 
      0011F5 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011F7 81               [ 4] 3108 	ret 
                                   3109 
                                   3110 ;---------------------
                                   3111 ; check if next token
                                   3112 ;  is of expected type 
                                   3113 ; input:
                                   3114 ;   A 		 expected token attribute
                                   3115 ;  ouput:
                                   3116 ;   none     if fail call tb_error 
                                   3117 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011F8                       3118 expect:
      0011F8 88               [ 1] 3119 	push a 
      0011F9 CD 08 46         [ 4] 3120 	call next_token 
      0011FC 11 01            [ 1] 3121 	cp a,(1,sp)
      0011FE 27 03            [ 1] 3122 	jreq 1$
      001200 CC 07 7F         [ 2] 3123 	jp syntax_error
      001203 84               [ 1] 3124 1$: pop a 
      001204 81               [ 4] 3125 	ret 
                                   3126 
                                   3127 
                                   3128 ;-------------------------------
                                   3129 ; parse embedded BASIC routines 
                                   3130 ; arguments list.
                                   3131 ; arg_list::=  rel[','rel]*
                                   3132 ; all arguments are of integer type
                                   3133 ; input:
                                   3134 ;   none
                                   3135 ; output:
                                   3136 ;   A 			number of arguments pushed on dstack  
                                   3137 ;--------------------------------
                           000001  3138 	ARG_CNT=1 
      001205                       3139 arg_list:
      001205 4B 00            [ 1] 3140 	push #0  
      001207 CD 13 4D         [ 4] 3141 1$: call relation
      00120A A1 00            [ 1] 3142 	cp a,#TK_NONE 
      00120C 27 19            [ 1] 3143 	jreq 5$
      00120E A1 04            [ 1] 3144 	cp a,#TK_INTGR
      001210 26 12            [ 1] 3145 	jrne 4$
      001212 CD 0F D8         [ 4] 3146 3$: call dpush 
      001215 0C 01            [ 1] 3147     inc (ARG_CNT,sp)
      001217 CD 08 46         [ 4] 3148 	call next_token 
      00121A A1 00            [ 1] 3149 	cp a,#TK_NONE 
      00121C 27 09            [ 1] 3150 	jreq 5$ 
      00121E A1 0D            [ 1] 3151 	cp a,#TK_COMMA 
      001220 26 02            [ 1] 3152 	jrne 4$
      001222 20 E3            [ 2] 3153 	jra 1$ 
      001224 CD 0F D2         [ 4] 3154 4$:	call unget_token 
      001227 84               [ 1] 3155 5$:	pop a 
      001228 81               [ 4] 3156 	ret 
                                   3157 
                                   3158 
      001229                       3159 func_args:
      001229 A6 0B            [ 1] 3160 	ld a,#TK_LPAREN 
      00122B CD 11 F8         [ 4] 3161 	call expect 
      00122E CD 12 05         [ 4] 3162 	call arg_list 
      001231 88               [ 1] 3163 	push a 
      001232 A6 0C            [ 1] 3164 	ld a,#TK_RPAREN 
      001234 CD 11 F8         [ 4] 3165 	call expect 
      001237 84               [ 1] 3166 	pop a 
      001238 81               [ 4] 3167 	ret 
                                   3168 
                                   3169 
                                   3170 ;--------------------------------
                                   3171 ;   BASIC commnands 
                                   3172 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3173 
                                   3174 ;--------------------------------
                                   3175 ;  arithmetic and relational 
                                   3176 ;  routines
                                   3177 ;  operators precedence
                                   3178 ;  highest to lowest
                                   3179 ;  operators on same row have 
                                   3180 ;  same precedence and are executed
                                   3181 ;  from left to right.
                                   3182 ;	'*','/','%'
                                   3183 ;   '-','+'
                                   3184 ;   '=','>','<','>=','<=','<>','><'
                                   3185 ;   '<>' and '><' are equivalent for not equal.
                                   3186 ;--------------------------------
                                   3187 
                                   3188 ;---------------------
                                   3189 ; return array element
                                   3190 ; address from @(expr)
                                   3191 ; input:
                                   3192 ;   A 		TK_ARRAY
                                   3193 ; output:
                                   3194 ;   A 		TK_INTGR
                                   3195 ;	X 		element address 
                                   3196 ;----------------------
      001239                       3197 get_array_element:
      001239 CD 12 29         [ 4] 3198 	call func_args 
      00123C A1 01            [ 1] 3199 	cp a,#1
      00123E 27 03            [ 1] 3200 	jreq 1$
      001240 CC 07 7F         [ 2] 3201 	jp syntax_error
      001243 CD 0F E5         [ 4] 3202 1$: call dpop  
                                   3203 	; check for bounds 
      001246 C3 00 1F         [ 2] 3204 	cpw x,array_size 
      001249 23 05            [ 2] 3205 	jrule 3$
                                   3206 ; bounds {1..array_size}	
      00124B A6 0A            [ 1] 3207 2$: ld a,#ERR_BAD_VALUE 
      00124D CC 07 81         [ 2] 3208 	jp tb_error 
      001250 5D               [ 2] 3209 3$: tnzw  x
      001251 27 F8            [ 1] 3210 	jreq 2$ 
      001253 58               [ 2] 3211 	sllw x 
      001254 89               [ 2] 3212 	pushw x 
      001255 AE 16 C8         [ 2] 3213 	ldw x,#tib
      001258 72 F0 01         [ 2] 3214 	subw x,(1,sp)
      00125B                       3215 	_drop 2   
      00125B 5B 02            [ 2]    1     addw sp,#2 
      00125D A6 04            [ 1] 3216 	ld a,#TK_INTGR
      00125F 81               [ 4] 3217 	ret 
                                   3218 
                                   3219 ;***********************************
                                   3220 ;   expression parse,execute 
                                   3221 ;***********************************
                                   3222 ;-----------------------------------
                                   3223 ; factor ::= ['+'|'-'|e] var | @ |
                                   3224 ;			 integer | function |
                                   3225 ;			 '('relation')' 
                                   3226 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3227 ;   A    token attribute 
                                   3228 ;   X 	 integer
                                   3229 ; ---------------------------------
                           000001  3230 	NEG=1
                           000001  3231 	VSIZE=1
      001260                       3232 factor:
      001260                       3233 	_vars VSIZE 
      001260 52 01            [ 2]    1     sub sp,#VSIZE 
      001262 CD 08 46         [ 4] 3234 	call next_token
      001265 A1 02            [ 1] 3235 	cp a,#CMD_END 
      001267 2B 50            [ 1] 3236 	jrmi 20$
      001269 6B 01            [ 1] 3237 1$:	ld (NEG,sp),a 
      00126B A4 30            [ 1] 3238 	and a,#TK_GRP_MASK
      00126D A1 10            [ 1] 3239 	cp a,#TK_GRP_ADD 
      00126F 27 04            [ 1] 3240 	jreq 2$
      001271 7B 01            [ 1] 3241 	ld a,(NEG,sp)
      001273 20 03            [ 2] 3242 	jra 4$  
      001275                       3243 2$:	
      001275 CD 08 46         [ 4] 3244 	call next_token 
      001278                       3245 4$:	
      001278 A1 07            [ 1] 3246 	cp a,#TK_IFUNC 
      00127A 26 03            [ 1] 3247 	jrne 5$ 
      00127C FD               [ 4] 3248 	call (x) 
      00127D 20 31            [ 2] 3249 	jra 18$ 
      00127F                       3250 5$:
      00127F A1 04            [ 1] 3251 	cp a,#TK_INTGR
      001281 26 02            [ 1] 3252 	jrne 6$
      001283 20 2B            [ 2] 3253 	jra 18$
      001285                       3254 6$:
      001285 A1 02            [ 1] 3255 	cp a,#TK_ARRAY
      001287 26 06            [ 1] 3256 	jrne 10$
      001289 CD 12 39         [ 4] 3257 	call get_array_element
      00128C FE               [ 2] 3258 	ldw x,(x)
      00128D 20 21            [ 2] 3259 	jra 18$ 
      00128F                       3260 10$:
      00128F A1 05            [ 1] 3261 	cp a,#TK_VAR 
      001291 26 03            [ 1] 3262 	jrne 11$
      001293 FE               [ 2] 3263 	ldw x,(x)
      001294 20 1A            [ 2] 3264 	jra 18$
      001296                       3265 11$: 
      001296 A1 09            [ 1] 3266 	cp a,#TK_CONST 
      001298 27 16            [ 1] 3267 	jreq 18$
      00129A                       3268 12$:			
      00129A A1 0B            [ 1] 3269 	cp a,#TK_LPAREN
      00129C 26 0C            [ 1] 3270 	jrne 16$
      00129E CD 13 4D         [ 4] 3271 	call relation
      0012A1 89               [ 2] 3272 	pushw x 
      0012A2 A6 0C            [ 1] 3273 	ld a,#TK_RPAREN 
      0012A4 CD 11 F8         [ 4] 3274 	call expect
      0012A7 85               [ 2] 3275 	popw x 
      0012A8 20 06            [ 2] 3276 	jra 18$	
      0012AA                       3277 16$:
      0012AA CD 0F D2         [ 4] 3278 	call unget_token
      0012AD 4F               [ 1] 3279 	clr a 
      0012AE 20 09            [ 2] 3280 	jra 20$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0012B0                       3281 18$: 
      0012B0 A6 11            [ 1] 3282 	ld a,#TK_MINUS 
      0012B2 11 01            [ 1] 3283 	cp a,(NEG,sp)
      0012B4 26 01            [ 1] 3284 	jrne 19$
      0012B6 50               [ 2] 3285 	negw x
      0012B7                       3286 19$:
      0012B7 A6 04            [ 1] 3287 	ld a,#TK_INTGR
      0012B9                       3288 20$:
      0012B9                       3289 	_drop VSIZE
      0012B9 5B 01            [ 2]    1     addw sp,#VSIZE 
      0012BB 81               [ 4] 3290 	ret
                                   3291 
                                   3292 ;-----------------------------------
                                   3293 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3294 ; output:
                                   3295 ;   A    	token attribute 
                                   3296 ;	X		integer
                                   3297 ;-----------------------------------
                           000001  3298 	N1=1
                           000003  3299 	N2=3
                           000005  3300 	MULOP=5
                           000005  3301 	VSIZE=5
      0012BC                       3302 term:
      0012BC                       3303 	_vars VSIZE
      0012BC 52 05            [ 2]    1     sub sp,#VSIZE 
      0012BE CD 12 60         [ 4] 3304 	call factor
      0012C1 A1 02            [ 1] 3305 	cp a,#CMD_END
      0012C3 2B 41            [ 1] 3306 	jrmi term_exit
      0012C5                       3307 term01:	 ; check for  operator 
      0012C5 1F 03            [ 2] 3308 	ldw (N2,sp),x  ; save first factor 
      0012C7 CD 08 46         [ 4] 3309 	call next_token
      0012CA A1 02            [ 1] 3310 	cp a,#2
      0012CC 2B 34            [ 1] 3311 	jrmi 9$
      0012CE 6B 05            [ 1] 3312 0$:	ld (MULOP,sp),a
      0012D0 A4 30            [ 1] 3313 	and a,#TK_GRP_MASK
      0012D2 A1 20            [ 1] 3314 	cp a,#TK_GRP_MULT
      0012D4 27 07            [ 1] 3315 	jreq 1$
      0012D6 7B 05            [ 1] 3316 	ld a,(MULOP,sp) 
      0012D8 CD 0F D2         [ 4] 3317 	call unget_token 
      0012DB 20 25            [ 2] 3318 	jra 9$
      0012DD                       3319 1$:	; got *|/|%
      0012DD CD 12 60         [ 4] 3320 	call factor
      0012E0 A1 04            [ 1] 3321 	cp a,#TK_INTGR
      0012E2 27 03            [ 1] 3322 	jreq 2$ 
      0012E4 CC 07 7F         [ 2] 3323 	jp syntax_error
      0012E7 1F 01            [ 2] 3324 2$:	ldw (N1,sp),x  
      0012E9 7B 05            [ 1] 3325 	ld a,(MULOP,sp) 
      0012EB A1 20            [ 1] 3326 	cp a,#TK_MULT 
      0012ED 26 05            [ 1] 3327 	jrne 3$
      0012EF CD 10 D4         [ 4] 3328 	call multiply 
      0012F2 20 D1            [ 2] 3329 	jra term01
      0012F4 A1 21            [ 1] 3330 3$: cp a,#TK_DIV 
      0012F6 26 05            [ 1] 3331 	jrne 4$ 
      0012F8 CD 11 1C         [ 4] 3332 	call divide 
      0012FB 20 C8            [ 2] 3333 	jra term01 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012FD CD 11 60         [ 4] 3334 4$: call modulo
      001300 20 C3            [ 2] 3335 	jra term01 
      001302 1E 03            [ 2] 3336 9$: ldw x,(N2,sp)  
      001304 A6 04            [ 1] 3337 	ld a,#TK_INTGR 	
      001306                       3338 term_exit:
      001306                       3339 	_drop VSIZE 
      001306 5B 05            [ 2]    1     addw sp,#VSIZE 
      001308 81               [ 4] 3340 	ret 
                                   3341 
                                   3342 ;-------------------------------
                                   3343 ;  expr ::= term [['+'|'-'] term]*
                                   3344 ;  result range {-32768..32767}
                                   3345 ;  output:
                                   3346 ;   A    token attribute 
                                   3347 ;   X	 integer   
                                   3348 ;-------------------------------
                           000001  3349 	N1=1 
                           000003  3350 	N2=3
                           000005  3351 	OP=5 
                           000005  3352 	VSIZE=5 
      001309                       3353 expression:
      001309                       3354 	_vars VSIZE 
      001309 52 05            [ 2]    1     sub sp,#VSIZE 
      00130B CD 12 BC         [ 4] 3355 	call term
      00130E A1 02            [ 1] 3356 	cp a,#CMD_END 
      001310 2B 38            [ 1] 3357 	jrmi expr_exit 
      001312 1F 03            [ 2] 3358 0$:	ldw (N2,sp),x 
      001314 CD 08 46         [ 4] 3359 	call next_token
      001317 A1 02            [ 1] 3360 	cp a,#2
      001319 2B 2B            [ 1] 3361 	jrmi 9$ 
      00131B 6B 05            [ 1] 3362 1$:	ld (OP,sp),a  
      00131D A4 30            [ 1] 3363 	and a,#TK_GRP_MASK
      00131F A1 10            [ 1] 3364 	cp a,#TK_GRP_ADD 
      001321 27 07            [ 1] 3365 	jreq 2$ 
      001323 7B 05            [ 1] 3366 	ld a,(OP,sp)
      001325 CD 0F D2         [ 4] 3367 	call unget_token
      001328 20 1C            [ 2] 3368 	jra 9$
      00132A                       3369 2$: 
      00132A CD 12 BC         [ 4] 3370 	call term
      00132D A1 04            [ 1] 3371 	cp a,#TK_INTGR 
      00132F 27 03            [ 1] 3372 	jreq 3$
      001331 CC 07 7F         [ 2] 3373 	jp syntax_error
      001334 1F 01            [ 2] 3374 3$:	ldw (N1,sp),x 
      001336 7B 05            [ 1] 3375 	ld a,(OP,sp)
      001338 A1 10            [ 1] 3376 	cp a,#TK_PLUS 
      00133A 26 05            [ 1] 3377 	jrne 4$
      00133C CD 10 C6         [ 4] 3378 	call add 
      00133F 20 D1            [ 2] 3379 	jra 0$ 
      001341 CD 10 CE         [ 4] 3380 4$:	call substract
      001344 20 CC            [ 2] 3381 	jra 0$
      001346 1E 03            [ 2] 3382 9$: ldw x,(N2,sp)
      001348 A6 04            [ 1] 3383 	ld a,#TK_INTGR	
      00134A                       3384 expr_exit:
      00134A                       3385 	_drop VSIZE 
      00134A 5B 05            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00134C 81               [ 4] 3386 	ret 
                                   3387 
                                   3388 ;---------------------------------------------
                                   3389 ; rel ::= expr rel_op expr
                                   3390 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3391 ;  relation return 1 | 0  for true | false 
                                   3392 ;  output:
                                   3393 ;    A 		token attribute  
                                   3394 ;	 X		1|0
                                   3395 ;---------------------------------------------
                           000001  3396 	N1=1
                           000003  3397 	N2=3
                           000005  3398 	RELOP=5
                           000005  3399 	VSIZE=5 
      00134D                       3400 relation: 
      00134D                       3401 	_vars VSIZE
      00134D 52 05            [ 2]    1     sub sp,#VSIZE 
      00134F CD 13 09         [ 4] 3402 	call expression
      001352 A1 02            [ 1] 3403 	cp a,#CMD_END  
      001354 2B 4B            [ 1] 3404 	jrmi rel_exit 
                                   3405 	; expect rel_op or leave 
      001356 1F 03            [ 2] 3406 	ldw (N2,sp),x 
      001358 CD 08 46         [ 4] 3407 	call next_token 
      00135B A1 02            [ 1] 3408 	cp a,#2
      00135D 2B 3E            [ 1] 3409 	jrmi 9$
      00135F                       3410 1$:	
      00135F 6B 05            [ 1] 3411 	ld (RELOP,sp),a 
      001361 A4 30            [ 1] 3412 	and a,#TK_GRP_MASK
      001363 A1 30            [ 1] 3413 	cp a,#TK_GRP_RELOP 
      001365 27 07            [ 1] 3414 	jreq 2$
      001367 7B 05            [ 1] 3415 	ld a,(RELOP,sp)
      001369 CD 0F D2         [ 4] 3416 	call unget_token  
      00136C 20 2F            [ 2] 3417 	jra 9$
      00136E                       3418 2$:	; expect another expression or error 
      00136E CD 13 09         [ 4] 3419 	call expression
      001371 A1 04            [ 1] 3420 	cp a,#TK_INTGR 
      001373 27 03            [ 1] 3421 	jreq 3$
      001375 CC 07 7F         [ 2] 3422 	jp syntax_error 
      001378 1F 01            [ 2] 3423 3$:	ldw (N1,sp),x 
      00137A CD 10 CE         [ 4] 3424 	call substract
      00137D 26 06            [ 1] 3425 	jrne 4$
      00137F 35 02 00 09      [ 1] 3426 	mov acc8,#2 ; n1==n2
      001383 20 0C            [ 2] 3427 	jra 6$ 
      001385                       3428 4$: 
      001385 2C 06            [ 1] 3429 	jrsgt 5$  
      001387 35 04 00 09      [ 1] 3430 	mov acc8,#4 ; n1<2 
      00138B 20 04            [ 2] 3431 	jra 6$
      00138D                       3432 5$:
      00138D 35 01 00 09      [ 1] 3433 	mov acc8,#1 ; n1>n2 
      001391                       3434 6$:
      001391 5F               [ 1] 3435 	clrw x 
      001392 C6 00 09         [ 1] 3436 	ld a, acc8  
      001395 14 05            [ 1] 3437 	and a,(RELOP,sp)
      001397 4D               [ 1] 3438 	tnz a 
      001398 27 05            [ 1] 3439 	jreq 10$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00139A 5C               [ 2] 3440 	incw x 
      00139B                       3441 7$:	 
      00139B 20 02            [ 2] 3442 	jra 10$  	
      00139D 1E 03            [ 2] 3443 9$: ldw x,(N2,sp)
      00139F                       3444 10$:
      00139F A6 04            [ 1] 3445 	ld a,#TK_INTGR
      0013A1                       3446 rel_exit: 	 
      0013A1                       3447 	_drop VSIZE
      0013A1 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013A3 81               [ 4] 3448 	ret 
                                   3449 
                                   3450 ;--------------------------------
                                   3451 ; BASIC: SHOW 
                                   3452 ;  show content of dstack,cstack
                                   3453 ;--------------------------------
      0013A4                       3454 show:
      0013A4 C6 00 06         [ 1] 3455 	ld a,base 
      0013A7 88               [ 1] 3456 	push a 
      0013A8 CD 10 66         [ 4] 3457 	call dots
      0013AB CD 10 99         [ 4] 3458 	call dotr 
      0013AE 84               [ 1] 3459 	pop a 
      0013AF C7 00 06         [ 1] 3460 	ld base,a 
      0013B2 4F               [ 1] 3461 	clr a 
      0013B3 81               [ 4] 3462 	ret
                                   3463 
                                   3464 ;--------------------------------------------
                                   3465 ; BASIC: HEX 
                                   3466 ; select hexadecimal base for integer print
                                   3467 ;---------------------------------------------
      0013B4                       3468 hex_base:
      0013B4 35 10 00 06      [ 1] 3469 	mov base,#16 
      0013B8 81               [ 4] 3470 	ret 
                                   3471 
                                   3472 ;--------------------------------------------
                                   3473 ; BASIC: DEC 
                                   3474 ; select decimal base for integer print
                                   3475 ;---------------------------------------------
      0013B9                       3476 dec_base:
      0013B9 35 0A 00 06      [ 1] 3477 	mov base,#10
      0013BD 81               [ 4] 3478 	ret 
                                   3479 
                                   3480 ;------------------------
                                   3481 ; BASIC: SIZE 
                                   3482 ; return free size in text area
                                   3483 ; output:
                                   3484 ;   A 		TK_INTGR
                                   3485 ;   X 	    size integer
                                   3486 ;--------------------------
      0013BE                       3487 size:
      0013BE AE 16 C8         [ 2] 3488 	ldw x,#tib 
      0013C1 72 B0 00 1C      [ 2] 3489 	subw x,txtend 
      0013C5 A6 04            [ 1] 3490 	ld a,#TK_INTGR
      0013C7 81               [ 4] 3491 	ret 
                                   3492 
                                   3493 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3494 ;------------------------
                                   3495 ; BASIC: UBOUND  
                                   3496 ; return array variable size 
                                   3497 ; output:
                                   3498 ;   A 		TK_INTGR
                                   3499 ;   X 	    array size 
                                   3500 ;--------------------------
      0013C8                       3501 ubound:
      0013C8 AE 16 C8         [ 2] 3502 	ldw x,#tib
      0013CB 72 B0 00 1C      [ 2] 3503 	subw x,txtend 
      0013CF 90 CE 00 04      [ 2] 3504 	ldw y,basicptr 
      0013D3 90 C3 00 1C      [ 2] 3505 	cpw y,txtend 
      0013D7 25 0A            [ 1] 3506 	jrult 1$
      0013D9 3B 00 03         [ 1] 3507 	push count 
      0013DC 4B 00            [ 1] 3508 	push #0 
      0013DE 72 F0 01         [ 2] 3509 	subw x,(1,sp)
      0013E1                       3510 	_drop 2 
      0013E1 5B 02            [ 2]    1     addw sp,#2 
      0013E3 54               [ 2] 3511 1$:	srlw x 
      0013E4 CF 00 1F         [ 2] 3512 	ldw array_size,x
      0013E7 A6 04            [ 1] 3513 	ld a,#TK_INTGR
      0013E9 81               [ 4] 3514 	ret 
                                   3515 
                                   3516 ;-----------------------------
                                   3517 ; BASIC: LET var=expr 
                                   3518 ; variable assignement 
                                   3519 ; output:
                                   3520 ;   A 		TK_NONE 
                                   3521 ;-----------------------------
      0013EA                       3522 let:
      0013EA CD 08 46         [ 4] 3523 	call next_token 
      0013ED A1 05            [ 1] 3524 	cp a,#TK_VAR 
      0013EF 27 03            [ 1] 3525 	jreq let02
      0013F1 CC 07 7F         [ 2] 3526 	jp syntax_error
      0013F4                       3527 let02:
      0013F4 CD 0F D8         [ 4] 3528 	call dpush 
      0013F7 CD 08 46         [ 4] 3529 	call next_token 
      0013FA A1 32            [ 1] 3530 	cp a,#TK_EQUAL
      0013FC 27 03            [ 1] 3531 	jreq 1$
      0013FE CC 07 7F         [ 2] 3532 	jp syntax_error
      001401                       3533 1$:	
      001401 CD 13 4D         [ 4] 3534 	call relation   
      001404 A1 04            [ 1] 3535 	cp a,#TK_INTGR 
      001406 27 03            [ 1] 3536 	jreq 2$
      001408 CC 07 7F         [ 2] 3537 	jp syntax_error
      00140B                       3538 2$:	
      00140B 90 93            [ 1] 3539 	ldw y,x 
      00140D CD 0F E5         [ 4] 3540 	call dpop  
      001410 FF               [ 2] 3541 	ldw (x),y   
      001411 81               [ 4] 3542 	ret 
                                   3543 
                                   3544 ;----------------------------
                                   3545 ; BASIC: LIST [[start][,end]]
                                   3546 ; list program lines 
                                   3547 ; form start to end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3548 ; if empty argument list then 
                                   3549 ; list all.
                                   3550 ;----------------------------
                           000001  3551 	FIRST=1
                           000003  3552 	LAST=3 
                           000005  3553 	LN_PTR=5
                           000006  3554 	VSIZE=6 
      001412                       3555 list:
      001412                       3556 	_vars VSIZE
      001412 52 06            [ 2]    1     sub sp,#VSIZE 
      001414 CE 00 1A         [ 2] 3557 	ldw x,txtbgn 
      001417 C3 00 1C         [ 2] 3558 	cpw x,txtend 
      00141A 2B 03            [ 1] 3559 	jrmi 1$
      00141C CC 14 92         [ 2] 3560 	jp list_exit ; nothing to list 
      00141F 1F 05            [ 2] 3561 1$:	ldw (LN_PTR,sp),x 
      001421 FE               [ 2] 3562 	ldw x,(x) 
      001422 1F 01            [ 2] 3563 	ldw (FIRST,sp),x ; list from first line 
      001424 AE 7F FF         [ 2] 3564 	ldw x,#0x7fff ; biggest line number 
      001427 1F 03            [ 2] 3565 	ldw (LAST,sp),x 
      001429 CD 12 05         [ 4] 3566 	call arg_list
      00142C 4D               [ 1] 3567 	tnz a
      00142D 27 3F            [ 1] 3568 	jreq list_start 
      00142F A1 02            [ 1] 3569 	cp a,#2 
      001431 27 07            [ 1] 3570 	jreq 4$
      001433 A1 01            [ 1] 3571 	cp a,#1 
      001435 27 06            [ 1] 3572 	jreq first_line 
      001437 CC 07 7F         [ 2] 3573 	jp syntax_error 
      00143A CD 0F F2         [ 4] 3574 4$:	call dswap
      00143D                       3575 first_line:
      00143D CD 0F E5         [ 4] 3576 	call dpop 
      001440 1F 01            [ 2] 3577 	ldw (FIRST,sp),x 
      001442 A1 01            [ 1] 3578 	cp a,#1 
      001444 27 05            [ 1] 3579 	jreq lines_skip 	
      001446                       3580 last_line:
      001446 CD 0F E5         [ 4] 3581 	call dpop 
      001449 1F 03            [ 2] 3582 	ldw (LAST,sp),x 
      00144B                       3583 lines_skip:
      00144B CE 00 1A         [ 2] 3584 	ldw x,txtbgn
      00144E 1F 05            [ 2] 3585 2$:	ldw (LN_PTR,sp),x 
      001450 C3 00 1C         [ 2] 3586 	cpw x,txtend 
      001453 2A 3D            [ 1] 3587 	jrpl list_exit 
      001455 FE               [ 2] 3588 	ldw x,(x) ;line# 
      001456 13 01            [ 2] 3589 	cpw x,(FIRST,sp)
      001458 2A 14            [ 1] 3590 	jrpl list_start 
      00145A 1E 05            [ 2] 3591 	ldw x,(LN_PTR,sp) 
      00145C 1C 00 02         [ 2] 3592 	addw x,#2 
      00145F F6               [ 1] 3593 	ld a,(x)
      001460 5C               [ 2] 3594 	incw x 
      001461 C7 00 09         [ 1] 3595 	ld acc8,a 
      001464 72 5F 00 08      [ 1] 3596 	clr acc16 
      001468 72 BB 00 08      [ 2] 3597 	addw x,acc16
      00146C 20 E0            [ 2] 3598 	jra 2$ 
                                   3599 ; print loop
      00146E                       3600 list_start:
      00146E 1E 05            [ 2] 3601 	ldw x,(LN_PTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001470                       3602 3$:	
      001470 CD 14 E5         [ 4] 3603 	call prt_basic_line
      001473 1E 05            [ 2] 3604 	ldw x,(LN_PTR,sp)
      001475 E6 02            [ 1] 3605 	ld a,(2,x)
      001477 C7 00 09         [ 1] 3606 	ld acc8,a 
      00147A 72 5F 00 08      [ 1] 3607 	clr acc16 
      00147E 72 BB 00 08      [ 2] 3608 	addw x,acc16
      001482 C3 00 1C         [ 2] 3609 	cpw x,txtend 
      001485 2A 0B            [ 1] 3610 	jrpl list_exit
      001487 1F 05            [ 2] 3611 	ldw (LN_PTR,sp),x
      001489 FE               [ 2] 3612 	ldw x,(x)
      00148A 13 03            [ 2] 3613 	cpw x,(LAST,sp)  
      00148C 2C 04            [ 1] 3614 	jrsgt list_exit 
      00148E 1E 05            [ 2] 3615 	ldw x,(LN_PTR,sp)
      001490 20 DE            [ 2] 3616 	jra 3$
      001492                       3617 list_exit:
      001492                       3618 	_drop VSIZE 
      001492 5B 06            [ 2]    1     addw sp,#VSIZE 
      001494 81               [ 4] 3619 	ret
                                   3620 
                                   3621 ;-------------------------
                                   3622 ; print counted string 
                                   3623 ; input:
                                   3624 ;   X 		address of string
                                   3625 ;--------------------------
      001495                       3626 prt_cmd_name:
      001495 F6               [ 1] 3627 	ld a,(x)
      001496 5C               [ 2] 3628 	incw x
      001497 A4 0F            [ 1] 3629 	and a,#15  
      001499 88               [ 1] 3630 	push a 
      00149A 0D 01            [ 1] 3631 1$: tnz (1,sp) 
      00149C 27 09            [ 1] 3632 	jreq 9$
      00149E F6               [ 1] 3633 	ld a,(x)
      00149F CD 01 B2         [ 4] 3634 	call putc 
      0014A2 5C               [ 2] 3635 	incw x
      0014A3 0A 01            [ 1] 3636 	dec (1,sp)	 
      0014A5 20 F3            [ 2] 3637 	jra 1$
      0014A7 84               [ 1] 3638 9$: pop a 
      0014A8 81               [ 4] 3639 	ret	
                                   3640 
                                   3641 ;--------------------------
                                   3642 ; print TK_QSTR
                                   3643 ; converting control character
                                   3644 ; to backslash sequence
                                   3645 ; input:
                                   3646 ;   X        char *
                                   3647 ;-----------------------------
      0014A9                       3648 prt_quote:
      0014A9 A6 22            [ 1] 3649 	ld a,#'"
      0014AB CD 01 B2         [ 4] 3650 	call putc 
      0014AE F6               [ 1] 3651 1$:	ld a,(x)
      0014AF 27 2D            [ 1] 3652 	jreq 9$
      0014B1 5C               [ 2] 3653 	incw x 
      0014B2 A1 20            [ 1] 3654 	cp a,#SPACE 
      0014B4 25 0C            [ 1] 3655 	jrult 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014B6 CD 01 B2         [ 4] 3656 	call putc
      0014B9 A1 5C            [ 1] 3657 	cp a,#'\ 
      0014BB 26 F1            [ 1] 3658 	jrne 1$ 
      0014BD                       3659 2$:
      0014BD CD 01 B2         [ 4] 3660 	call putc 
      0014C0 20 EC            [ 2] 3661 	jra 1$
      0014C2 88               [ 1] 3662 3$: push a 
      0014C3 A6 5C            [ 1] 3663 	ld a,#'\
      0014C5 CD 01 B2         [ 4] 3664 	call putc 
      0014C8 84               [ 1] 3665 	pop a 
      0014C9 A0 07            [ 1] 3666 	sub a,#7
      0014CB C7 00 09         [ 1] 3667 	ld acc8,a 
      0014CE 72 5F 00 08      [ 1] 3668 	clr acc16
      0014D2 90 AE 0C A1      [ 2] 3669 	ldw y,#escaped 
      0014D6 72 B9 00 08      [ 2] 3670 	addw y,acc16 
      0014DA 90 F6            [ 1] 3671 	ld a,(y)
      0014DC 20 DF            [ 2] 3672 	jra 2$
      0014DE A6 22            [ 1] 3673 9$: ld a,#'"
      0014E0 CD 01 B2         [ 4] 3674 	call putc 
      0014E3 5C               [ 2] 3675 	incw x 
      0014E4 81               [ 4] 3676 	ret
                                   3677 
                                   3678 
                                   3679 ;--------------------------
                                   3680 ; decompile line from token list 
                                   3681 ; input:
                                   3682 ;   X 		pointer at line
                                   3683 ; output:
                                   3684 ;   none 
                                   3685 ;--------------------------	
                           000001  3686 	BASE_SAV=1
                           000002  3687 	WIDTH_SAV=2
                           000003  3688 	XSAVE=3
                           000005  3689 	LLEN=5
                           000005  3690 	VSIZE=5 
      0014E5                       3691 prt_basic_line:
      0014E5                       3692 	_vars VSIZE 
      0014E5 52 05            [ 2]    1     sub sp,#VSIZE 
      0014E7 C6 00 06         [ 1] 3693 	ld a,base
      0014EA 6B 01            [ 1] 3694 	ld (BASE_SAV,sp),a  
      0014EC C6 00 22         [ 1] 3695 	ld a,tab_width 
      0014EF 6B 02            [ 1] 3696 	ld (WIDTH_SAV,sp),a 
      0014F1 CF 00 13         [ 2] 3697 	ldw ptr16,x
      0014F4 FE               [ 2] 3698 	ldw x,(x)
      0014F5 35 0A 00 06      [ 1] 3699 	mov base,#10
      0014F9 35 05 00 22      [ 1] 3700 	mov tab_width,#5
      0014FD CD 09 DF         [ 4] 3701 	call print_int ; print line number 
      001500 A6 20            [ 1] 3702 	ld a,#SPACE 
      001502 CD 01 B2         [ 4] 3703 	call putc 
      001505 72 5F 00 22      [ 1] 3704 	clr tab_width
      001509 AE 00 02         [ 2] 3705 	ldw x,#2
      00150C 72 D6 00 13      [ 4] 3706 	ld a,([ptr16],x)
      001510 6B 05            [ 1] 3707 	ld (LLEN,sp),a 
      001512 5C               [ 2] 3708 	incw x
      001513 9F               [ 1] 3709 1$:	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001514 11 05            [ 1] 3710 	cp a,(LLEN,sp)
      001516 2B 03            [ 1] 3711 	jrmi 20$
      001518 CC 16 22         [ 2] 3712 	jp 90$
      00151B                       3713 20$:	 
      00151B 72 D6 00 13      [ 4] 3714 	ld a,([ptr16],x)
      00151F 5C               [ 2] 3715 	incw x 
      001520 1F 03            [ 2] 3716 	ldw (XSAVE,sp),x 
      001522 A1 06            [ 1] 3717 	cp a,#TK_CMD 
      001524 25 44            [ 1] 3718 	jrult 5$
      001526 A1 09            [ 1] 3719 	cp a,#TK_CONST 
      001528 22 2F            [ 1] 3720 	jrugt 4$
      00152A                       3721 2$:	
      00152A 72 DE 00 13      [ 5] 3722 	ldw x,([ptr16],x)
      00152E A3 17 5B         [ 2] 3723 	cpw x,#rem 
      001531 26 14            [ 1] 3724 	jrne 3$
      001533 A6 27            [ 1] 3725 	ld a,#''
      001535 CD 01 B2         [ 4] 3726 	call putc 
      001538 1E 03            [ 2] 3727 	ldw x,(XSAVE,sp)
      00153A 1C 00 02         [ 2] 3728 	addw x,#2
      00153D 72 BB 00 13      [ 2] 3729 	addw x,ptr16  
      001541 CD 01 C4         [ 4] 3730 	call puts 
      001544 CC 16 22         [ 2] 3731 	jp 90$ 
      001547 CD 11 71         [ 4] 3732 3$:	call cmd_name
      00154A CD 14 95         [ 4] 3733 	call prt_cmd_name
      00154D A6 20            [ 1] 3734 	ld a,#SPACE 
      00154F CD 01 B2         [ 4] 3735 	call putc 
      001552 1E 03            [ 2] 3736 	ldw x,(XSAVE,sp)
      001554 1C 00 02         [ 2] 3737 	addw x,#2
      001557 20 BA            [ 2] 3738 	jra 1$
      001559 A1 0A            [ 1] 3739 4$: cp a,#TK_QSTR 
      00155B 26 0D            [ 1] 3740 	jrne 5$
      00155D 72 BB 00 13      [ 2] 3741 	addw x,ptr16
      001561 CD 14 A9         [ 4] 3742 	call prt_quote 
      001564 72 B0 00 13      [ 2] 3743 	subw x,ptr16  
      001568 20 A9            [ 2] 3744 	jra 1$
      00156A A1 05            [ 1] 3745 5$:	cp a,#TK_VAR
      00156C 26 1A            [ 1] 3746 	jrne 6$ 
      00156E 72 DE 00 13      [ 5] 3747 	ldw x,([ptr16],x)
      001572 1D 00 23         [ 2] 3748 	subw x,#vars 
      001575 9F               [ 1] 3749 	ld a,xl
      001576 44               [ 1] 3750 	srl a 
      001577 AB 41            [ 1] 3751 	add a,#'A 
      001579 CD 01 B2         [ 4] 3752 	call putc 
      00157C A6 20            [ 1] 3753 	ld a,#SPACE 
      00157E CD 01 B2         [ 4] 3754 	call putc 
      001581 1E 03            [ 2] 3755 	ldw x,(XSAVE,sp)
      001583 1C 00 02         [ 2] 3756 	addw x,#2 
      001586 20 8B            [ 2] 3757 	jra 1$ 
      001588 A1 02            [ 1] 3758 6$: cp a,#TK_ARRAY 
      00158A 26 0A            [ 1] 3759 	jrne 7$
      00158C A6 40            [ 1] 3760 	ld a,#'@ 
      00158E CD 01 B2         [ 4] 3761 	call putc 
      001591 1E 03            [ 2] 3762 	ldw x,(XSAVE,sp)
      001593 CC 15 13         [ 2] 3763 	jp 1$ 
      001596 A1 04            [ 1] 3764 7$: cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001598 26 14            [ 1] 3765 	jrne 8$
      00159A 72 DE 00 13      [ 5] 3766 	ldw x,([ptr16],x)
      00159E CD 09 DF         [ 4] 3767 	call print_int
      0015A1 A6 20            [ 1] 3768 	ld a,#SPACE 
      0015A3 CD 01 B2         [ 4] 3769 	call putc 
      0015A6 1E 03            [ 2] 3770 	ldw x,(XSAVE,sp)
      0015A8 1C 00 02         [ 2] 3771 	addw x,#2 
      0015AB CC 15 13         [ 2] 3772 	jp 1$
      0015AE A1 31            [ 1] 3773 8$: cp a,#TK_GT 
      0015B0 2B 1A            [ 1] 3774 	jrmi 9$
      0015B2 A1 35            [ 1] 3775 	cp a,#TK_NE 
      0015B4 22 16            [ 1] 3776 	jrugt 9$
      0015B6 A0 31            [ 1] 3777 	sub a,#TK_GT  
      0015B8 48               [ 1] 3778 	sll a 
      0015B9 90 5F            [ 1] 3779 	clrw y 
      0015BB 90 97            [ 1] 3780 	ld yl,a 
      0015BD 72 A9 16 3B      [ 2] 3781 	addw y,#relop_str 
      0015C1 90 FE            [ 2] 3782 	ldw y,(y)
      0015C3 93               [ 1] 3783 	ldw x,y 
      0015C4 CD 01 C4         [ 4] 3784 	call puts 
      0015C7 1E 03            [ 2] 3785 	ldw x,(XSAVE,sp)
      0015C9 CC 15 13         [ 2] 3786 	jp 1$
      0015CC A1 10            [ 1] 3787 9$: cp a,#TK_PLUS 
      0015CE 26 04            [ 1] 3788 	jrne 10$
      0015D0 A6 2B            [ 1] 3789 	ld a,#'+
      0015D2 20 46            [ 2] 3790 	jra 80$ 
      0015D4 A1 11            [ 1] 3791 10$: cp a,#TK_MINUS
      0015D6 26 04            [ 1] 3792 	jrne 11$
      0015D8 A6 2D            [ 1] 3793 	ld a,#'-
      0015DA 20 3E            [ 2] 3794 	jra 80$
      0015DC A1 20            [ 1] 3795 11$: cp a,#TK_MULT 
      0015DE 2B 0E            [ 1] 3796 	jrmi 12$
      0015E0 A1 22            [ 1] 3797 	cp a,#TK_MOD 
      0015E2 22 0A            [ 1] 3798 	jrugt 12$
      0015E4 A0 20            [ 1] 3799 	sub a,#0x20
      0015E6 5F               [ 1] 3800 	clrw x 
      0015E7 97               [ 1] 3801 	ld xl,a 
      0015E8 1C 16 38         [ 2] 3802 	addw x,#mul_char 
      0015EB F6               [ 1] 3803 	ld a,(x)
      0015EC 20 2C            [ 2] 3804 	jra 80$ 
      0015EE A1 0B            [ 1] 3805 12$: cp a,#TK_LPAREN 
      0015F0 2B 0E            [ 1] 3806 	jrmi 13$
      0015F2 A1 0E            [ 1] 3807 	cp a,#TK_SHARP 
      0015F4 22 0A            [ 1] 3808 	jrugt 13$
      0015F6 A0 0B            [ 1] 3809 	sub a,#TK_LPAREN
      0015F8 5F               [ 1] 3810 	clrw x 
      0015F9 97               [ 1] 3811 	ld xl,a 
      0015FA 1C 16 34         [ 2] 3812 	addw x,#single_char 
      0015FD F6               [ 1] 3813 	ld a,(x)
      0015FE 20 1A            [ 2] 3814 	jra 80$
      001600 A1 03            [ 1] 3815 13$: cp a,#TK_CHAR 
      001602 26 14            [ 1] 3816 	jrne 14$
      001604 A6 5C            [ 1] 3817 	ld a,#'\
      001606 CD 01 B2         [ 4] 3818 	call putc 
      001609 1E 03            [ 2] 3819 	ldw x,(XSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00160B 72 D6 00 13      [ 4] 3820 	ld a,([ptr16],x)
      00160F 5C               [ 2] 3821 	incw x 
      001610 1F 03            [ 2] 3822 	ldw (XSAVE,sp),x 
      001612 CD 01 B2         [ 4] 3823 	call putc 
      001615 CC 15 13         [ 2] 3824 	jp 1$ 
      001618 A6 3A            [ 1] 3825 14$: ld a,#':
      00161A CD 01 B2         [ 4] 3826 80$: call putc 
      00161D 1E 03            [ 2] 3827 	ldw x,(XSAVE,sp)
      00161F CC 15 13         [ 2] 3828 	jp 1$ 
      001622                       3829 90$: 
      001622 A6 0D            [ 1] 3830 	ld a,#CR 
      001624 CD 01 B2         [ 4] 3831 	call putc
      001627 7B 02            [ 1] 3832 	ld a,(WIDTH_SAV,sp) 
      001629 C7 00 22         [ 1] 3833 	ld tab_width,a 
      00162C 7B 01            [ 1] 3834 	ld a,(BASE_SAV,sp) 
      00162E C7 00 06         [ 1] 3835 	ld base,a
      001631                       3836 	_drop VSIZE 
      001631 5B 05            [ 2]    1     addw sp,#VSIZE 
      001633 81               [ 4] 3837 	ret 	
      001634 28 29 2C 23           3838 single_char: .byte '(',')',',','#'
      001638 2A 2F 25              3839 mul_char: .byte '*','/','%'
      00163B 16 47 16 49 16 4B 16  3840 relop_str: .word gt,equal,ge,lt,le,ne 
             4E 16 50 16 53
      001647 3E 00                 3841 gt: .asciz ">"
      001649 3D 00                 3842 equal: .asciz "="
      00164B 3E 3D 00              3843 ge: .asciz ">="
      00164E 3C 00                 3844 lt: .asciz "<"
      001650 3C 3D 00              3845 le: .asciz "<="
      001653 3C 3E 00              3846 ne:  .asciz "<>"
                                   3847 
                                   3848 
                                   3849 ;---------------------------------
                                   3850 ; BASIC: PRINT|? arg_list 
                                   3851 ; print values from argument list
                                   3852 ;----------------------------------
                           000001  3853 	COMMA=1
                           000001  3854 	VSIZE=1
      001656                       3855 print:
      001656 4B 00            [ 1] 3856 push #0 ; local variable COMMA 
      001658                       3857 reset_comma:
      001658 0F 01            [ 1] 3858 	clr (COMMA,sp)
      00165A                       3859 prt_loop:
      00165A CD 13 4D         [ 4] 3860 	call relation 
      00165D A1 01            [ 1] 3861 	cp a,#TK_COLON 
      00165F 27 5A            [ 1] 3862 	jreq print_exit   
      001661 A1 04            [ 1] 3863 	cp a,#TK_INTGR 
      001663 26 05            [ 1] 3864 	jrne 0$ 
      001665 CD 09 DF         [ 4] 3865 	call print_int 
      001668 20 EE            [ 2] 3866 	jra reset_comma
      00166A                       3867 0$: 	
      00166A CD 08 46         [ 4] 3868 	call next_token
      00166D A1 00            [ 1] 3869 	cp a,#TK_NONE 
      00166F 27 4A            [ 1] 3870 	jreq print_exit 
      001671 A1 0A            [ 1] 3871 1$:	cp a,#TK_QSTR
      001673 26 0E            [ 1] 3872 	jrne 2$   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001675 CD 01 C4         [ 4] 3873 	call puts
      001678 5C               [ 2] 3874 	incw x 
      001679 72 B0 00 04      [ 2] 3875 	subw x,basicptr 
      00167D 9F               [ 1] 3876 	ld a,xl 
      00167E C7 00 01         [ 1] 3877 	ld in,a  
      001681 20 D5            [ 2] 3878 	jra reset_comma
      001683 A1 03            [ 1] 3879 2$: cp a,#TK_CHAR 
      001685 26 06            [ 1] 3880 	jrne 3$
      001687 9F               [ 1] 3881 	ld a,xl 
      001688 CD 01 B2         [ 4] 3882 	call putc 
      00168B 20 CB            [ 2] 3883 	jra reset_comma 
      00168D                       3884 3$: 	
      00168D A1 08            [ 1] 3885 	cp a,#TK_CFUNC 
      00168F 26 07            [ 1] 3886 	jrne 4$ 
      001691 FD               [ 4] 3887 	call (x)
      001692 9F               [ 1] 3888 	ld a,xl 
      001693 CD 01 B2         [ 4] 3889 	call putc
      001696 20 C0            [ 2] 3890 	jra reset_comma 
      001698                       3891 4$: 
      001698 A1 0D            [ 1] 3892 	cp a,#TK_COMMA 
      00169A 26 05            [ 1] 3893 	jrne 5$
      00169C 03 01            [ 1] 3894 	cpl (COMMA,sp) 
      00169E CC 16 5A         [ 2] 3895 	jp prt_loop   
      0016A1                       3896 5$: 
      0016A1 A1 0E            [ 1] 3897 	cp a,#TK_SHARP
      0016A3 26 13            [ 1] 3898 	jrne 7$
      0016A5 CD 08 46         [ 4] 3899 	call next_token
      0016A8 A1 04            [ 1] 3900 	cp a,#TK_INTGR 
      0016AA 27 03            [ 1] 3901 	jreq 6$
      0016AC CC 07 7F         [ 2] 3902 	jp syntax_error 
      0016AF                       3903 6$:
      0016AF 9F               [ 1] 3904 	ld a,xl 
      0016B0 A4 0F            [ 1] 3905 	and a,#15 
      0016B2 C7 00 22         [ 1] 3906 	ld tab_width,a 
      0016B5 CC 16 58         [ 2] 3907 	jp reset_comma 
      0016B8                       3908 7$:	
      0016B8 CD 0F D2         [ 4] 3909 	call unget_token
      0016BB                       3910 print_exit:
      0016BB 0D 01            [ 1] 3911 	tnz (COMMA,sp)
      0016BD 26 05            [ 1] 3912 	jrne 9$
      0016BF A6 0D            [ 1] 3913 	ld a,#CR 
      0016C1 CD 01 B2         [ 4] 3914     call putc 
      0016C4                       3915 9$:	_drop VSIZE 
      0016C4 5B 01            [ 2]    1     addw sp,#VSIZE 
      0016C6 81               [ 4] 3916 	ret 
                                   3917 
                                   3918 ;----------------------
                                   3919 ; 'save_context' and
                                   3920 ; 'rest_context' must be 
                                   3921 ; called at the same 
                                   3922 ; call stack depth 
                                   3923 ; i.e. SP must have the 
                                   3924 ; save value at  
                                   3925 ; entry point of both 
                                   3926 ; routine. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3927 ;---------------------
                           000006  3928 	CTXT_SIZE=6 ; size of saved data 
                                   3929 ;--------------------
                                   3930 ; save current BASIC
                                   3931 ; interpreter context 
                                   3932 ; on cstack 
                                   3933 ;--------------------
      0016C7                       3934 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0016C7                       3935 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      0016C7                       3936 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      0016C7                       3937 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      0016C7                       3938 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      0016C7                       3939 save_context:
      0016C7 CE 00 04         [ 2] 3940 	ldw x,basicptr 
      0016CA 1F 03            [ 2] 3941 	ldw (BPTR,sp),x
      0016CC C6 00 01         [ 1] 3942 	ld a,in 
      0016CF 6B 07            [ 1] 3943 	ld (IN,sp),a
      0016D1 C6 00 03         [ 1] 3944 	ld a,count 
      0016D4 6B 08            [ 1] 3945 	ld (CNT,sp),a  
      0016D6 81               [ 4] 3946 	ret
                                   3947 
                                   3948 ;-----------------------
                                   3949 ; restore previously saved 
                                   3950 ; BASIC interpreter context 
                                   3951 ; from cstack 
                                   3952 ;-------------------------
      0016D7                       3953 rest_context:
      0016D7 1E 03            [ 2] 3954 	ldw x,(BPTR,sp)
      0016D9 CF 00 04         [ 2] 3955 	ldw basicptr,x 
      0016DC 7B 07            [ 1] 3956 	ld a,(IN,sp)
      0016DE C7 00 01         [ 1] 3957 	ld in,a
      0016E1 7B 08            [ 1] 3958 	ld a,(CNT,sp)
      0016E3 C7 00 03         [ 1] 3959 	ld count,a  
      0016E6 81               [ 4] 3960 	ret
                                   3961 
                                   3962 ;------------------------------------------
                                   3963 ; BASIC: INPUT [string],var[,[string],var]
                                   3964 ; input value in variables 
                                   3965 ; [string] optionally can be used as prompt 
                                   3966 ;-----------------------------------------
                           000001  3967 	CX_BPTR=1
                           000003  3968 	CX_LNO=3
                           000004  3969 	CX_IN=4
                           000005  3970 	CX_CNT=5
                           000006  3971 	SKIP=6
                           000007  3972 	VSIZE=7
      0016E7                       3973 input_var:
      0016E7 72 00 00 21 05   [ 2] 3974 	btjt flags,#FRUN,1$ 
      0016EC A6 06            [ 1] 3975 	ld a,#ERR_RUN_ONLY 
      0016EE CC 07 81         [ 2] 3976 	jp tb_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016F1                       3977 1$:	_vars VSIZE 
      0016F1 52 07            [ 2]    1     sub sp,#VSIZE 
      0016F3                       3978 input_loop:
      0016F3 0F 06            [ 1] 3979 	clr (SKIP,sp)
      0016F5 CD 08 46         [ 4] 3980 	call next_token 
      0016F8 A1 00            [ 1] 3981 	cp a,#TK_NONE 
      0016FA 27 5C            [ 1] 3982 	jreq input_exit 
      0016FC A1 0A            [ 1] 3983 	cp a,#TK_QSTR 
      0016FE 26 08            [ 1] 3984 	jrne 1$ 
      001700 CD 01 C4         [ 4] 3985 	call puts 
      001703 03 06            [ 1] 3986 	cpl (SKIP,sp)
      001705 CD 08 46         [ 4] 3987 	call next_token 
      001708 A1 05            [ 1] 3988 1$: cp a,#TK_VAR  
      00170A 27 03            [ 1] 3989 	jreq 2$ 
      00170C CC 07 7F         [ 2] 3990 	jp syntax_error
      00170F CD 0F D8         [ 4] 3991 2$:	call dpush 
      001712 0D 06            [ 1] 3992 	tnz (SKIP,sp)
      001714 26 0F            [ 1] 3993 	jrne 21$ 
      001716 A6 3A            [ 1] 3994 	ld a,#':
      001718 C7 17 19         [ 1] 3995 	ld pad+1,a 
      00171B 72 5F 17 1A      [ 1] 3996 	clr pad+2
      00171F AE 17 18         [ 2] 3997 	ldw x,#pad 
      001722 CD 01 C4         [ 4] 3998 	call puts   
      001725                       3999 21$:
      001725 CD 16 C7         [ 4] 4000 	call save_context 
      001728 AE 16 C8         [ 2] 4001 	ldw x,#tib 
      00172B CF 00 04         [ 2] 4002 	ldw basicptr,x  
      00172E 72 5F 00 03      [ 1] 4003 	clr count  
      001732 CD 0A CD         [ 4] 4004 	call readln 
      001735 72 5F 00 01      [ 1] 4005 	clr in 
      001739 CD 13 4D         [ 4] 4006 	call relation 
      00173C A1 04            [ 1] 4007 	cp a,#TK_INTGR
      00173E 27 03            [ 1] 4008 	jreq 3$ 
      001740 CC 07 7F         [ 2] 4009 	jp syntax_error
      001743 CD 0F D8         [ 4] 4010 3$: call dpush 
      001746 CD 10 3F         [ 4] 4011 	call store 
      001749 CD 16 D7         [ 4] 4012 	call rest_context
      00174C CD 08 46         [ 4] 4013 	call next_token 
      00174F A1 0D            [ 1] 4014 	cp a,#TK_COMMA 
      001751 26 02            [ 1] 4015 	jrne 4$
      001753 20 9E            [ 2] 4016 	jra input_loop 
      001755 CD 0F D2         [ 4] 4017 4$:	call unget_token 
      001758                       4018 input_exit:
      001758                       4019 	_drop VSIZE 
      001758 5B 07            [ 2]    1     addw sp,#VSIZE 
      00175A 81               [ 4] 4020 	ret 
                                   4021 
                                   4022 
                                   4023 ;---------------------
                                   4024 ; BASIC: REMARK | ' 
                                   4025 ; skip comment to end of line 
                                   4026 ;---------------------- 
      00175B                       4027 rem:
      00175B 55 00 01 00 03   [ 1] 4028  	mov count,in 
      001760 81               [ 4] 4029 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4030 
                                   4031 ;---------------------
                                   4032 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   4033 ; read in loop 'addr'  
                                   4034 ; apply & 'mask' to value 
                                   4035 ; loop while result==0.  
                                   4036 ; if 'xor_mask' given 
                                   4037 ; apply ^ in second  
                                   4038 ; loop while result==0 
                                   4039 ;---------------------
                           000001  4040 	XMASK=1 
                           000002  4041 	MASK=2
                           000003  4042 	ADDR=3
                           000004  4043 	VSIZE=4
      001761                       4044 wait: 
      001761                       4045 	_vars VSIZE
      001761 52 04            [ 2]    1     sub sp,#VSIZE 
      001763 0F 01            [ 1] 4046 	clr (XMASK,sp) 
      001765 CD 12 05         [ 4] 4047 	call arg_list 
      001768 A1 02            [ 1] 4048 	cp a,#2
      00176A 24 03            [ 1] 4049 	jruge 0$
      00176C CC 07 7F         [ 2] 4050 	jp syntax_error 
      00176F A1 03            [ 1] 4051 0$:	cp a,#3
      001771 25 06            [ 1] 4052 	jrult 1$
      001773 CD 0F E5         [ 4] 4053 	call dpop 
      001776 9F               [ 1] 4054 	ld a,xl
      001777 6B 01            [ 1] 4055 	ld (XMASK,sp),a 
      001779 CD 0F E5         [ 4] 4056 1$: call dpop ; mask 
      00177C 9F               [ 1] 4057 	ld a,xl 
      00177D 6B 02            [ 1] 4058 	ld (MASK,sp),a 
      00177F CD 0F E5         [ 4] 4059 	call dpop ; address 
      001782 F6               [ 1] 4060 2$:	ld a,(x)
      001783 14 02            [ 1] 4061 	and a,(MASK,sp)
      001785 18 01            [ 1] 4062 	xor a,(XMASK,sp)
      001787 27 F9            [ 1] 4063 	jreq 2$ 
      001789                       4064 	_drop VSIZE 
      001789 5B 04            [ 2]    1     addw sp,#VSIZE 
      00178B 81               [ 4] 4065 	ret 
                                   4066 
                                   4067 ;---------------------
                                   4068 ; BASIC: BSET addr,mask
                                   4069 ; set bits at 'addr' corresponding 
                                   4070 ; to those of 'mask' that are at 1.
                                   4071 ; arguments:
                                   4072 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4073 ;   mask        mask|addr
                                   4074 ; output:
                                   4075 ;	none 
                                   4076 ;--------------------------
      00178C                       4077 bit_set:
      00178C CD 12 05         [ 4] 4078 	call arg_list 
      00178F A1 02            [ 1] 4079 	cp a,#2	 
      001791 27 03            [ 1] 4080 	jreq 1$ 
      001793 CC 07 7F         [ 2] 4081 	jp syntax_error
      001796                       4082 1$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001796 CD 0F E5         [ 4] 4083 	call dpop ; mask 
      001799 9F               [ 1] 4084 	ld a,xl 
      00179A CD 0F E5         [ 4] 4085 	call dpop ; addr  
      00179D FA               [ 1] 4086 	or a,(x)
      00179E F7               [ 1] 4087 	ld (x),a
      00179F 81               [ 4] 4088 	ret 
                                   4089 
                                   4090 ;---------------------
                                   4091 ; BASIC: BRES addr,mask
                                   4092 ; reset bits at 'addr' corresponding 
                                   4093 ; to those of 'mask' that are at 1.
                                   4094 ; arguments:
                                   4095 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4096 ;   mask	    ~mask&*addr  
                                   4097 ; output:
                                   4098 ;	none 
                                   4099 ;--------------------------
      0017A0                       4100 bit_reset:
      0017A0 CD 12 05         [ 4] 4101 	call arg_list 
      0017A3 A1 02            [ 1] 4102 	cp a,#2  
      0017A5 27 03            [ 1] 4103 	jreq 1$ 
      0017A7 CC 07 7F         [ 2] 4104 	jp syntax_error
      0017AA                       4105 1$: 
      0017AA CD 0F E5         [ 4] 4106 	call dpop ; mask 
      0017AD 9F               [ 1] 4107 	ld a,xl 
      0017AE 43               [ 1] 4108 	cpl a 
      0017AF CD 0F E5         [ 4] 4109 	call dpop ; addr  
      0017B2 F4               [ 1] 4110 	and a,(x)
      0017B3 F7               [ 1] 4111 	ld (x),a 
      0017B4 81               [ 4] 4112 	ret 
                                   4113 
                                   4114 ;---------------------
                                   4115 ; BASIC: BRES addr,mask
                                   4116 ; toggle bits at 'addr' corresponding 
                                   4117 ; to those of 'mask' that are at 1.
                                   4118 ; arguments:
                                   4119 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4120 ;   mask	    mask^*addr  
                                   4121 ; output:
                                   4122 ;	none 
                                   4123 ;--------------------------
      0017B5                       4124 bit_toggle:
      0017B5 CD 12 05         [ 4] 4125 	call arg_list 
      0017B8 A1 02            [ 1] 4126 	cp a,#2 
      0017BA 27 03            [ 1] 4127 	jreq 1$ 
      0017BC CC 07 7F         [ 2] 4128 	jp syntax_error
      0017BF CD 0F E5         [ 4] 4129 1$: call dpop ; mask 
      0017C2 9F               [ 1] 4130 	ld a,xl 
      0017C3 CD 0F E5         [ 4] 4131 	call dpop ; addr  
      0017C6 F8               [ 1] 4132 	xor a,(x)
      0017C7 F7               [ 1] 4133 	ld (x),a 
      0017C8 81               [ 4] 4134 	ret 
                                   4135 
                                   4136 
                                   4137 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4138 ; BASIC: BTEST(addr,bit)
                                   4139 ; return bit value at 'addr' 
                                   4140 ; bit is in range {0..7}.
                                   4141 ; arguments:
                                   4142 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4143 ;   bit 	    bit position {0..7}  
                                   4144 ; output:
                                   4145 ;	none 
                                   4146 ;--------------------------
      0017C9                       4147 bit_test:
      0017C9 CD 12 29         [ 4] 4148 	call func_args 
      0017CC A1 02            [ 1] 4149 	cp a,#2
      0017CE 27 03            [ 1] 4150 	jreq 0$
      0017D0 CC 07 7F         [ 2] 4151 	jp syntax_error
      0017D3                       4152 0$:	
      0017D3 CD 0F E5         [ 4] 4153 	call dpop 
      0017D6 9F               [ 1] 4154 	ld a,xl 
      0017D7 A4 07            [ 1] 4155 	and a,#7
      0017D9 88               [ 1] 4156 	push a 
      0017DA A6 01            [ 1] 4157 	ld a,#1 
      0017DC 0D 01            [ 1] 4158 1$: tnz (1,sp)
      0017DE 27 05            [ 1] 4159 	jreq 2$
      0017E0 48               [ 1] 4160 	sll a 
      0017E1 0A 01            [ 1] 4161 	dec (1,sp)
      0017E3 20 F7            [ 2] 4162 	jra 1$
      0017E5 CD 0F E5         [ 4] 4163 2$: call dpop 
      0017E8 F4               [ 1] 4164 	and a,(x)
      0017E9 27 02            [ 1] 4165 	jreq 3$
      0017EB A6 01            [ 1] 4166 	ld a,#1 
      0017ED 5F               [ 1] 4167 3$:	clrw x 
      0017EE 97               [ 1] 4168 	ld xl,a 
      0017EF A6 04            [ 1] 4169 	ld a,#TK_INTGR
      0017F1                       4170 	_drop 1 
      0017F1 5B 01            [ 2]    1     addw sp,#1 
      0017F3 81               [ 4] 4171 	ret
                                   4172 
                                   4173 
                                   4174 ;--------------------
                                   4175 ; BASIC: POKE addr,byte
                                   4176 ; put a byte at addr 
                                   4177 ;--------------------
      0017F4                       4178 poke:
      0017F4 CD 12 05         [ 4] 4179 	call arg_list 
      0017F7 A1 02            [ 1] 4180 	cp a,#2
      0017F9 27 03            [ 1] 4181 	jreq 1$
      0017FB CC 07 7F         [ 2] 4182 	jp syntax_error
      0017FE                       4183 1$:	
      0017FE CD 0F E5         [ 4] 4184 	call dpop 
      001801 9F               [ 1] 4185     ld a,xl 
      001802 CD 0F E5         [ 4] 4186 	call dpop 
      001805 F7               [ 1] 4187 	ld (x),a 
      001806 81               [ 4] 4188 	ret 
                                   4189 
                                   4190 ;-----------------------
                                   4191 ; BASIC: PEEK(addr)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4192 ; get the byte at addr 
                                   4193 ; input:
                                   4194 ;	none 
                                   4195 ; output:
                                   4196 ;	X 		value 
                                   4197 ;-----------------------
      001807                       4198 peek:
      001807 CD 12 29         [ 4] 4199 	call func_args
      00180A A1 01            [ 1] 4200 	cp a,#1
      00180C 27 03            [ 1] 4201 	jreq 1$
      00180E CC 07 7F         [ 2] 4202 	jp syntax_error
      001811 CD 0F E5         [ 4] 4203 1$:	call dpop 
      001814 F6               [ 1] 4204 	ld a,(x)
      001815 5F               [ 1] 4205 	clrw x 
      001816 97               [ 1] 4206 	ld xl,a 
      001817 A6 04            [ 1] 4207 	ld a,#TK_INTGR
      001819 81               [ 4] 4208 	ret 
                                   4209 
                                   4210 ;----------------------------
                                   4211 ; BASIC: XPEEK(page,addr)
                                   4212 ; read extended memory byte
                                   4213 ; page in range {0,1,2}
                                   4214 ;----------------------------
      00181A                       4215 xpeek:
      00181A CD 12 29         [ 4] 4216 	call func_args 
      00181D A1 02            [ 1] 4217 	cp a,#2 
      00181F 27 03            [ 1] 4218 	jreq 1$
      001821 CC 07 7F         [ 2] 4219 	jp syntax_error
      001824                       4220 1$: 
      001824 CD 0F E5         [ 4] 4221 	call dpop 
      001827 CF 00 13         [ 2] 4222 	ldw farptr+1,x 
      00182A CD 0F E5         [ 4] 4223 	call dpop 
      00182D 9F               [ 1] 4224 	ld a,xl 
      00182E C7 00 12         [ 1] 4225 	ld farptr,a 
      001831 5F               [ 1] 4226 	clrw x
      001832 92 BC 00 12      [ 5] 4227 	ldf a,[farptr]
      001836 97               [ 1] 4228 	ld xl,a 
      001837 A6 04            [ 1] 4229 	ld a,#TK_INTGR 
      001839 81               [ 4] 4230 	ret 
                                   4231 
                                   4232 ;---------------------------
                                   4233 ; BASIC IF expr : instructions
                                   4234 ; evaluate expr and if true 
                                   4235 ; execute instructions on same line. 
                                   4236 ;----------------------------
      00183A                       4237 if: 
      00183A CD 13 4D         [ 4] 4238 	call relation 
      00183D A1 04            [ 1] 4239 	cp a,#TK_INTGR
      00183F 27 03            [ 1] 4240 	jreq 1$ 
      001841 CC 07 7F         [ 2] 4241 	jp syntax_error
      001844 4F               [ 1] 4242 1$:	clr a 
      001845 5D               [ 2] 4243 	tnzw x 
      001846 26 05            [ 1] 4244 	jrne 9$  
                                   4245 ;skip to next line
      001848 55 00 03 00 01   [ 1] 4246 	mov in,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00184D 81               [ 4] 4247 9$:	ret 
                                   4248 
                                   4249 ;------------------------
                                   4250 ; BASIC: FOR var=expr 
                                   4251 ; set variable to expression 
                                   4252 ; leave variable address 
                                   4253 ; on dstack and set
                                   4254 ; FFOR bit in 'flags'
                                   4255 ;-----------------
                           000001  4256 	RETL1=1
                           000003  4257 	INW=3
                           000005  4258 	BPTR=5
      00184E                       4259 for: ; { -- var_addr }
      00184E A6 05            [ 1] 4260 	ld a,#TK_VAR 
      001850 CD 11 F8         [ 4] 4261 	call expect
      001853 CD 0F D8         [ 4] 4262 	call dpush 
      001856 CD 13 F4         [ 4] 4263 	call let02 
      001859 72 14 00 21      [ 1] 4264 	bset flags,#FFOR 
                                   4265 ; open space on cstack for BPTR and INW 
      00185D 85               [ 2] 4266 	popw x ; call return address 
      00185E                       4267 	_vars 4
      00185E 52 04            [ 2]    1     sub sp,#4 
      001860 89               [ 2] 4268 	pushw x  ; RETL1 
      001861 5F               [ 1] 4269 	clrw x 
      001862 1F 05            [ 2] 4270 	ldw (BPTR,sp),x 
      001864 1F 03            [ 2] 4271 	ldw (INW,sp),x 
      001866 CD 08 46         [ 4] 4272 	call next_token 
      001869 A1 06            [ 1] 4273 	cp a,#TK_CMD 
      00186B 27 03            [ 1] 4274 	jreq 1$
      00186D CC 07 7F         [ 2] 4275 	jp syntax_error
      001870                       4276 1$:  
      001870 A3 18 78         [ 2] 4277 	cpw x,#to 
      001873 27 03            [ 1] 4278 	jreq to
      001875 CC 07 7F         [ 2] 4279 	jp syntax_error 
                                   4280 
                                   4281 ;-----------------------------------
                                   4282 ; BASIC: TO expr 
                                   4283 ; second part of FOR loop initilization
                                   4284 ; leave limit on dstack and set 
                                   4285 ; FTO bit in 'flags'
                                   4286 ;-----------------------------------
      001878                       4287 to: ; { var_addr -- var_addr limit step }
      001878 72 04 00 21 03   [ 2] 4288 	btjt flags,#FFOR,1$
      00187D CC 07 7F         [ 2] 4289 	jp syntax_error
      001880 CD 13 4D         [ 4] 4290 1$: call relation  
      001883 A1 04            [ 1] 4291 	cp a,#TK_INTGR 
      001885 27 03            [ 1] 4292 	jreq 2$ 
      001887 CC 07 7F         [ 2] 4293 	jp syntax_error
      00188A                       4294 2$: 
      00188A CD 0F D8         [ 4] 4295     call dpush ; limit
      00188D CE 00 00         [ 2] 4296 	ldw x,in.w 
      001890 CD 08 46         [ 4] 4297 	call next_token
      001893 A1 00            [ 1] 4298 	cp a,#TK_NONE  
      001895 27 0C            [ 1] 4299 	jreq 4$ 
      001897 A1 06            [ 1] 4300 	cp a,#TK_CMD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001899 26 05            [ 1] 4301 	jrne 3$
      00189B A3 18 A8         [ 2] 4302 	cpw x,#step 
      00189E 27 08            [ 1] 4303 	jreq step
      0018A0                       4304 3$:	
      0018A0 CD 0F D2         [ 4] 4305 	call unget_token   	 
      0018A3                       4306 4$:	
      0018A3 AE 00 01         [ 2] 4307 	ldw x,#1   ; default step  
      0018A6 20 12            [ 2] 4308 	jra store_loop_addr 
                                   4309 
                                   4310 
                                   4311 ;----------------------------------
                                   4312 ; BASIC: STEP expr 
                                   4313 ; optional third par of FOR loop
                                   4314 ; initialization. 	
                                   4315 ;------------------------------------
      0018A8                       4316 step: ; {var limit -- var limit step}
      0018A8 72 04 00 21 03   [ 2] 4317 	btjt flags,#FFOR,1$
      0018AD CC 07 7F         [ 2] 4318 	jp syntax_error
      0018B0 CD 13 4D         [ 4] 4319 1$: call relation
      0018B3 A1 04            [ 1] 4320 	cp a,#TK_INTGR
      0018B5 27 03            [ 1] 4321 	jreq store_loop_addr  
      0018B7 CC 07 7F         [ 2] 4322 	jp syntax_error
                                   4323 ; leave loop back entry point on cstack 
                                   4324 ; cstack is 2 call deep from interp_loop
      0018BA                       4325 store_loop_addr:
      0018BA CD 0F D8         [ 4] 4326 	call dpush 
      0018BD CE 00 04         [ 2] 4327 	ldw x,basicptr  
      0018C0 1F 05            [ 2] 4328 	ldw (BPTR,sp),x 
      0018C2 CE 00 00         [ 2] 4329 	ldw x,in.w 
      0018C5 1F 03            [ 2] 4330 	ldw (INW,sp),x   
      0018C7 72 15 00 21      [ 1] 4331 	bres flags,#FFOR 
      0018CB 72 5C 00 1E      [ 1] 4332 	inc loop_depth  
      0018CF 81               [ 4] 4333 	ret 
                                   4334 
                                   4335 ;--------------------------------
                                   4336 ; BASIC: NEXT var 
                                   4337 ; FOR loop control 
                                   4338 ; increment variable with step 
                                   4339 ; and compare with limit 
                                   4340 ; loop if threshold not crossed.
                                   4341 ; else clean both stacks. 
                                   4342 ; and decrement 'loop_depth' 
                                   4343 ;--------------------------------
      0018D0                       4344 next: ; {var limit step -- [var limit step ] }
      0018D0 72 5D 00 1E      [ 1] 4345 	tnz loop_depth 
      0018D4 26 03            [ 1] 4346 	jrne 1$ 
      0018D6 CC 07 7F         [ 2] 4347 	jp syntax_error 
      0018D9                       4348 1$: 
      0018D9 A6 05            [ 1] 4349 	ld a,#TK_VAR 
      0018DB CD 11 F8         [ 4] 4350 	call expect
                                   4351 ; check for good variable after NEXT 	 
      0018DE 90 93            [ 1] 4352 	ldw y,x 
      0018E0 AE 00 04         [ 2] 4353 	ldw x,#4  
      0018E3 72 D3 00 18      [ 4] 4354 	cpw y,([dstkptr],x) ; compare variables address 
      0018E7 27 03            [ 1] 4355 	jreq 2$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018E9 CC 07 7F         [ 2] 4356 	jp syntax_error ; not the good one 
      0018EC                       4357 2$: ; increment variable 
      0018EC 93               [ 1] 4358 	ldw x,y
      0018ED FE               [ 2] 4359 	ldw x,(x)  ; get var value 
      0018EE CF 00 08         [ 2] 4360 	ldw acc16,x 
      0018F1 72 CE 00 18      [ 5] 4361 	ldw x,[dstkptr] ; step
      0018F5 72 BB 00 08      [ 2] 4362 	addw x,acc16 ; var+step 
      0018F9 90 FF            [ 2] 4363 	ldw (y),x ; save var new value 
                                   4364 ; compare with limit 
      0018FB 90 93            [ 1] 4365 	ldw y,x 
      0018FD 72 CE 00 18      [ 5] 4366 	ldw x,[dstkptr] ; step in x 
      001901 5D               [ 2] 4367 	tnzw x  
      001902 2A 0B            [ 1] 4368 	jrpl 4$ ; positive step 
                                   4369 ;negative step 
      001904 AE 00 02         [ 2] 4370 	ldw x,#2
      001907 72 D3 00 18      [ 4] 4371 	cpw y,([dstkptr],x)
      00190B 2F 20            [ 1] 4372 	jrslt loop_done
      00190D 20 09            [ 2] 4373 	jra loop_back 
      00190F                       4374 4$: ; positive step
      00190F AE 00 02         [ 2] 4375 	ldw x,#2 
      001912 72 D3 00 18      [ 4] 4376 	cpw y,([dstkptr],x)
      001916 2C 15            [ 1] 4377 	jrsgt loop_done
      001918                       4378 loop_back:
      001918 1E 05            [ 2] 4379 	ldw x,(BPTR,sp)
      00191A CF 00 04         [ 2] 4380 	ldw basicptr,x 
      00191D 72 01 00 21 05   [ 2] 4381 	btjf flags,#FRUN,1$ 
      001922 E6 02            [ 1] 4382 	ld a,(2,x)
      001924 C7 00 03         [ 1] 4383 	ld count,a
      001927 1E 03            [ 2] 4384 1$:	ldw x,(INW,sp)
      001929 CF 00 00         [ 2] 4385 	ldw in.w,x 
      00192C 81               [ 4] 4386 	ret 
      00192D                       4387 loop_done:
                                   4388 	; remove var limit step on dstack 
      00192D CE 00 18         [ 2] 4389 	ldw x,dstkptr 
      001930 1C 00 06         [ 2] 4390 	addw x,#3*CELL_SIZE
      001933 CF 00 18         [ 2] 4391 	ldw dstkptr,x 
                                   4392 	; remove 2 return address on cstack 
      001936 85               [ 2] 4393 	popw x
      001937                       4394 	_drop 4
      001937 5B 04            [ 2]    1     addw sp,#4 
      001939 89               [ 2] 4395 	pushw x 
      00193A 72 5A 00 1E      [ 1] 4396 	dec loop_depth 
      00193E 81               [ 4] 4397 	ret 
                                   4398 
                                   4399 
                                   4400 ;------------------------
                                   4401 ; BASIC: GOTO line# 
                                   4402 ; jump to line# 
                                   4403 ; here cstack is 2 call deep from interp_loop 
                                   4404 ;------------------------
      00193F                       4405 goto:
      00193F 72 00 00 21 06   [ 2] 4406 	btjt flags,#FRUN,0$ 
      001944 A6 06            [ 1] 4407 	ld a,#ERR_RUN_ONLY
      001946 CC 07 81         [ 2] 4408 	jp tb_error 
      001949 81               [ 4] 4409 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      00194A 20 23            [ 2] 4410 0$:	jra go_common
                                   4411 
                                   4412 ;--------------------
                                   4413 ; BASIC: GOSUB line#
                                   4414 ; basic subroutine call
                                   4415 ; actual line# and basicptr 
                                   4416 ; are saved on cstack
                                   4417 ; here cstack is 2 call deep from interp_loop 
                                   4418 ;--------------------
                           000003  4419 	GOS_RET=3
      00194C                       4420 gosub:
      00194C 72 00 00 21 06   [ 2] 4421 	btjt flags,#FRUN,0$ 
      001951 A6 06            [ 1] 4422 	ld a,#ERR_RUN_ONLY
      001953 CC 07 81         [ 2] 4423 	jp tb_error 
      001956 81               [ 4] 4424 	ret 
      001957 85               [ 2] 4425 0$:	popw x 
      001958 52 02            [ 2] 4426 	sub sp,#2 
      00195A 89               [ 2] 4427 	pushw x 
      00195B CE 00 04         [ 2] 4428 	ldw x,basicptr
      00195E E6 02            [ 1] 4429 	ld a,(2,x)
      001960 AB 03            [ 1] 4430 	add a,#3 
      001962 C7 00 09         [ 1] 4431 	ld acc8,a 
      001965 72 5F 00 08      [ 1] 4432 	clr acc16 
      001969 72 BB 00 08      [ 2] 4433 	addw x,acc16
      00196D 1F 03            [ 2] 4434 	ldw (GOS_RET,sp),x 
      00196F                       4435 go_common: 
      00196F CD 13 4D         [ 4] 4436 	call relation 
      001972 A1 04            [ 1] 4437 	cp a,#TK_INTGR
      001974 27 03            [ 1] 4438 	jreq 1$ 
      001976 CC 07 7F         [ 2] 4439 	jp syntax_error
      001979                       4440 1$: 
      001979 CD 02 F4         [ 4] 4441 	call search_lineno  
      00197C 5D               [ 2] 4442 	tnzw x 
      00197D 26 05            [ 1] 4443 	jrne 2$ 
      00197F A6 05            [ 1] 4444 	ld a,#ERR_NO_LINE 
      001981 CC 07 81         [ 2] 4445 	jp tb_error 
      001984                       4446 2$: 
      001984 CF 00 04         [ 2] 4447 	ldw basicptr,x 
      001987 E6 02            [ 1] 4448 	ld a,(2,x)
      001989 C7 00 03         [ 1] 4449 	ld count,a 
      00198C 35 03 00 01      [ 1] 4450 	mov in,#3 
      001990 81               [ 4] 4451 	ret 
                                   4452 
                                   4453 ;------------------------
                                   4454 ; BASIC: RETURN 
                                   4455 ; exit from a subroutine 
                                   4456 ; cstack is 2 level deep from interp_loop 
                                   4457 ;------------------------
      001991                       4458 return:
      001991 72 00 00 21 05   [ 2] 4459 	btjt flags,#FRUN,0$ 
      001996 A6 06            [ 1] 4460 	ld a,#ERR_RUN_ONLY
      001998 CC 07 81         [ 2] 4461 	jp tb_error 
      00199B                       4462 0$:	
      00199B 1E 03            [ 2] 4463 	ldw x,(GOS_RET,sp) 
      00199D CF 00 04         [ 2] 4464 	ldw basicptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0019A0 E6 02            [ 1] 4465 	ld a,(2,x)
      0019A2 AB 03            [ 1] 4466 	add a,#3 
      0019A4 C7 00 03         [ 1] 4467 	ld count,a 
      0019A7 35 03 00 01      [ 1] 4468 	mov in,#3
      0019AB 4F               [ 1] 4469 	clr a 
      0019AC 85               [ 2] 4470 	popw x 
      0019AD                       4471 	_drop 2
      0019AD 5B 02            [ 2]    1     addw sp,#2 
      0019AF 89               [ 2] 4472 	pushw x
      0019B0 81               [ 4] 4473 	ret  
                                   4474 
                                   4475 
                                   4476 ;----------------------------------
                                   4477 ; BASIC: RUN
                                   4478 ; run BASIC program in RAM
                                   4479 ;----------------------------------- 
      0019B1                       4480 run: 
      0019B1 72 01 00 21 02   [ 2] 4481 	btjf flags,#FRUN,0$  
      0019B6 4F               [ 1] 4482 	clr a 
      0019B7 81               [ 4] 4483 	ret
      0019B8                       4484 0$: 
      0019B8 72 09 00 21 12   [ 2] 4485 	btjf flags,#FBREAK,1$
      0019BD                       4486 	_drop 2 
      0019BD 5B 02            [ 2]    1     addw sp,#2 
      0019BF CD 16 D7         [ 4] 4487 	call rest_context
      0019C2                       4488 	_drop CTXT_SIZE 
      0019C2 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      0019C4 72 19 00 21      [ 1] 4489 	bres flags,#FBREAK 
      0019C8 72 10 00 21      [ 1] 4490 	bset flags,#FRUN 
      0019CC CC 08 16         [ 2] 4491 	jp interp_loop 
      0019CF CE 00 1A         [ 2] 4492 1$:	ldw x,txtbgn
      0019D2 C3 00 1C         [ 2] 4493 	cpw x,txtend 
      0019D5 2B 02            [ 1] 4494 	jrmi run_it 
      0019D7 4F               [ 1] 4495 	clr a 
      0019D8 81               [ 4] 4496 	ret
                                   4497 
      0019D9                       4498 run_it:	 
      0019D9 CD 13 C8         [ 4] 4499     call ubound 
      0019DC                       4500 	_drop 2 
      0019DC 5B 02            [ 2]    1     addw sp,#2 
      0019DE CE 00 1A         [ 2] 4501 	ldw x,txtbgn 
      0019E1 CF 00 04         [ 2] 4502 	ldw basicptr,x 
      0019E4 E6 02            [ 1] 4503 	ld a,(2,x)
      0019E6 C7 00 03         [ 1] 4504 	ld count,a
      0019E9 35 03 00 01      [ 1] 4505 	mov in,#3	
      0019ED 72 10 00 21      [ 1] 4506 	bset flags,#FRUN 
      0019F1 CC 08 16         [ 2] 4507 	jp interp_loop 
                                   4508 
                                   4509 
                                   4510 ;----------------------
                                   4511 ; BASIC: STOP 
                                   4512 ; stop running program
                                   4513 ;---------------------- 
      0019F4                       4514 stop: 
                                   4515 ; clean dstack and cstack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0019F4 AE 17 FF         [ 2] 4516 	ldw x,#STACK_EMPTY 
      0019F7 94               [ 1] 4517 	ldw sp,x 
      0019F8 72 11 00 21      [ 1] 4518 	bres flags,#FRUN 
      0019FC 72 19 00 21      [ 1] 4519 	bres flags,#FBREAK
      001A00 CC 07 D3         [ 2] 4520 	jp warm_start
                                   4521 
                                   4522 
                                   4523 ;-----------------------
                                   4524 ; BASIC BEEP expr1,expr2
                                   4525 ; used MCU internal beeper 
                                   4526 ; to produce a sound
                                   4527 ; arguments:
                                   4528 ;    expr1   frequency  (expr1%32)
                                   4529 ;    expr2   duration msec.
                                   4530 ;---------------------------
      001A03                       4531 tone:
      001A03 CD 12 05         [ 4] 4532 	call arg_list 
      001A06 A1 02            [ 1] 4533 	cp a,#2 
      001A08 27 03            [ 1] 4534 	jreq 1$
      001A0A CC 07 7F         [ 2] 4535 	jp syntax_error 
      001A0D                       4536 1$: 
      001A0D CD 0F E5         [ 4] 4537 	call dpop ; duration
      001A10 89               [ 2] 4538 	pushw x 
      001A11 CD 0F E5         [ 4] 4539 	call dpop ; frequency
      001A14 90 93            [ 1] 4540 	ldw y,x 
      001A16 AE F4 24         [ 2] 4541 	ldw x,#TIM2_CLK_FREQ
      001A19 65               [ 2] 4542 	divw x,y 
                                   4543 ; round to nearest integer 
      001A1A 90 A3 7A 12      [ 2] 4544 	cpw y,#TIM2_CLK_FREQ/2
      001A1E 2B 01            [ 1] 4545 	jrmi 2$
      001A20 5C               [ 2] 4546 	incw x 
      001A21                       4547 2$:	 
      001A21 9E               [ 1] 4548 	ld a,xh 
      001A22 C7 53 0D         [ 1] 4549 	ld TIM2_ARRH,a 
      001A25 9F               [ 1] 4550 	ld a,xl 
      001A26 C7 53 0E         [ 1] 4551 	ld TIM2_ARRL,a 
                                   4552 ; 50% duty cycle 
      001A29 8C               [ 1] 4553 	ccf 
      001A2A 56               [ 2] 4554 	rrcw x 
      001A2B 9E               [ 1] 4555 	ld a,xh 
      001A2C C7 53 0F         [ 1] 4556 	ld TIM2_CCR1H,a 
      001A2F 9F               [ 1] 4557 	ld a,xl
      001A30 C7 53 10         [ 1] 4558 	ld TIM2_CCR1L,a
      001A33 72 10 53 08      [ 1] 4559 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001A37 72 10 53 00      [ 1] 4560 	bset TIM2_CR1,#TIM2_CR1_CEN
      001A3B 72 10 53 04      [ 1] 4561 	bset TIM2_EGR,#TIM2_EGR_UG
      001A3F 85               [ 2] 4562 	popw x 
      001A40 CF 00 0C         [ 2] 4563 	ldw timer,x 
      001A43 CE 00 0C         [ 2] 4564 3$: ldw x,timer 	
      001A46 26 FB            [ 1] 4565 	jrne 3$ 
      001A48 72 11 53 08      [ 1] 4566 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      001A4C 72 11 53 00      [ 1] 4567 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001A50 81               [ 4] 4568 	ret 
                                   4569 
                                   4570 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4571 ; BASIC: PWRADC 0|1 [,divisor]  
                                   4572 ; disable/enanble ADC 
                                   4573 ;-------------------------------
      001A51                       4574 power_adc:
      001A51 CD 12 05         [ 4] 4575 	call arg_list 
      001A54 A1 02            [ 1] 4576 	cp a,#2	
      001A56 27 0D            [ 1] 4577 	jreq 1$
      001A58 A1 01            [ 1] 4578 	cp a,#1 
      001A5A 27 03            [ 1] 4579 	jreq 0$ 
      001A5C CC 07 7F         [ 2] 4580 	jp syntax_error 
      001A5F AE 00 00         [ 2] 4581 0$: ldw x,#0
      001A62 CD 0F D8         [ 4] 4582 	call dpush 
      001A65 AE 00 02         [ 2] 4583 1$: ldw x,#2
      001A68 72 DE 00 18      [ 5] 4584 	ldw x,([dstkptr],x) ; on|off
      001A6C 5D               [ 2] 4585 	tnzw x 
      001A6D 27 1C            [ 1] 4586 	jreq 2$ 
      001A6F 72 CE 00 18      [ 5] 4587 	ldw x,[dstkptr] ; divisor 
      001A73 9F               [ 1] 4588 	ld a,xl
      001A74 A4 07            [ 1] 4589 	and a,#7
      001A76 4E               [ 1] 4590 	swap a 
      001A77 C7 54 01         [ 1] 4591 	ld ADC_CR1,a
      001A7A 72 16 50 CA      [ 1] 4592 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001A7E 72 10 54 01      [ 1] 4593 	bset ADC_CR1,#ADC_CR1_ADON 
      001A82                       4594 	_usec_dly 7 
      001A82 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001A85 5A               [ 2]    2     decw x
      001A86 9D               [ 1]    3     nop 
      001A87 26 FA            [ 1]    4     jrne .-4
      001A89 20 08            [ 2] 4595 	jra 3$
      001A8B 72 11 54 01      [ 1] 4596 2$: bres ADC_CR1,#ADC_CR1_ADON
      001A8F 72 17 50 CA      [ 1] 4597 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001A93 AE 00 02         [ 2] 4598 3$:	ldw x,#2
      001A96 CD 10 49         [ 4] 4599 	call ddrop_n 
      001A99 81               [ 4] 4600 	ret
                                   4601 
                                   4602 ;-----------------------------
                                   4603 ; BASIC: RDADC(channel)
                                   4604 ; read adc channel {0..5}
                                   4605 ; output:
                                   4606 ;   A 		TK_INTGR 
                                   4607 ;   X 		value 
                                   4608 ;-----------------------------
      001A9A                       4609 analog_read:
      001A9A CD 12 29         [ 4] 4610 	call func_args 
      001A9D A1 01            [ 1] 4611 	cp a,#1 
      001A9F 27 03            [ 1] 4612 	jreq 1$
      001AA1 CC 07 7F         [ 2] 4613 	jp syntax_error
      001AA4 CD 0F E5         [ 4] 4614 1$: call dpop 
      001AA7 A3 00 05         [ 2] 4615 	cpw x,#5 
      001AAA 23 05            [ 2] 4616 	jrule 2$
      001AAC A6 0A            [ 1] 4617 	ld a,#ERR_BAD_VALUE
      001AAE CC 07 81         [ 2] 4618 	jp tb_error 
      001AB1 9F               [ 1] 4619 2$: ld a,xl
      001AB2 C7 00 09         [ 1] 4620 	ld acc8,a 
      001AB5 A6 05            [ 1] 4621 	ld a,#5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001AB7 C0 00 09         [ 1] 4622 	sub a,acc8 
      001ABA C7 54 00         [ 1] 4623 	ld ADC_CSR,a
      001ABD 72 16 54 02      [ 1] 4624 	bset ADC_CR2,#ADC_CR2_ALIGN
      001AC1 72 10 54 01      [ 1] 4625 	bset ADC_CR1,#ADC_CR1_ADON
      001AC5 72 0F 54 00 FB   [ 2] 4626 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001ACA CE 54 04         [ 2] 4627 	ldw x,ADC_DRH
      001ACD A6 04            [ 1] 4628 	ld a,#TK_INTGR
      001ACF 81               [ 4] 4629 	ret 
                                   4630 
                                   4631 ;-----------------------
                                   4632 ; BASIC: DREAD(pin)
                                   4633 ; read state of a digital pin 
                                   4634 ; pin# {0..15}
                                   4635 ; output:
                                   4636 ;    A 		TK_INTGR
                                   4637 ;    X      0|1 
                                   4638 ;-------------------------
                           000001  4639 	PINNO=1
                           000001  4640 	VSIZE=1
      001AD0                       4641 digital_read:
      001AD0                       4642 	_vars VSIZE 
      001AD0 52 01            [ 2]    1     sub sp,#VSIZE 
      001AD2 CD 12 29         [ 4] 4643 	call func_args
      001AD5 A1 01            [ 1] 4644 	cp a,#1
      001AD7 27 03            [ 1] 4645 	jreq 1$
      001AD9 CC 07 7F         [ 2] 4646 	jp syntax_error
      001ADC CD 0F E5         [ 4] 4647 1$: call dpop 
      001ADF A3 00 0F         [ 2] 4648 	cpw x,#15 
      001AE2 23 05            [ 2] 4649 	jrule 2$
      001AE4 A6 0A            [ 1] 4650 	ld a,#ERR_BAD_VALUE
      001AE6 CC 07 81         [ 2] 4651 	jp tb_error 
      001AE9 CD 20 E1         [ 4] 4652 2$:	call select_pin 
      001AEC 6B 01            [ 1] 4653 	ld (PINNO,sp),a
      001AEE E6 01            [ 1] 4654 	ld a,(GPIO_IDR,x)
      001AF0 0D 01            [ 1] 4655 	tnz (PINNO,sp)
      001AF2 27 05            [ 1] 4656 	jreq 8$
      001AF4 44               [ 1] 4657 3$: srl a 
      001AF5 0A 01            [ 1] 4658 	dec (PINNO,sp)
      001AF7 26 FB            [ 1] 4659 	jrne 3$ 
      001AF9 A4 01            [ 1] 4660 8$: and a,#1 
      001AFB 5F               [ 1] 4661 	clrw x 
      001AFC 97               [ 1] 4662 	ld xl,a 
      001AFD A6 04            [ 1] 4663 	ld a,#TK_INTGR
      001AFF                       4664 	_drop VSIZE
      001AFF 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B01 81               [ 4] 4665 	ret
                                   4666 
                                   4667 ;-----------------------
                                   4668 ; BASIC: DWRITE pin,0|1
                                   4669 ; write to a digital pin 
                                   4670 ; pin# {0..15}
                                   4671 ; output:
                                   4672 ;    A 		TK_INTGR
                                   4673 ;    X      0|1 
                                   4674 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                           000001  4675 	PINNO=1
                           000002  4676 	PINVAL=2
                           000002  4677 	VSIZE=2
      001B02                       4678 digital_write:
      001B02                       4679 	_vars VSIZE 
      001B02 52 02            [ 2]    1     sub sp,#VSIZE 
      001B04 CD 12 05         [ 4] 4680 	call arg_list  
      001B07 A1 02            [ 1] 4681 	cp a,#2 
      001B09 27 03            [ 1] 4682 	jreq 1$
      001B0B CC 07 7F         [ 2] 4683 	jp syntax_error
      001B0E CD 0F E5         [ 4] 4684 1$: call dpop 
      001B11 9F               [ 1] 4685 	ld a,xl 
      001B12 6B 02            [ 1] 4686 	ld (PINVAL,sp),a
      001B14 CD 0F E5         [ 4] 4687 	call dpop
      001B17 A3 00 0F         [ 2] 4688 	cpw x,#15 
      001B1A 23 05            [ 2] 4689 	jrule 2$
      001B1C A6 0A            [ 1] 4690 	ld a,#ERR_BAD_VALUE
      001B1E CC 07 81         [ 2] 4691 	jp tb_error 
      001B21 CD 20 E1         [ 4] 4692 2$:	call select_pin 
      001B24 6B 01            [ 1] 4693 	ld (PINNO,sp),a 
      001B26 A6 01            [ 1] 4694 	ld a,#1
      001B28 0D 01            [ 1] 4695 	tnz (PINNO,sp)
      001B2A 27 05            [ 1] 4696 	jreq 4$
      001B2C 48               [ 1] 4697 3$: sll a
      001B2D 0A 01            [ 1] 4698 	dec (PINNO,sp)
      001B2F 26 FB            [ 1] 4699 	jrne 3$
      001B31 0D 02            [ 1] 4700 4$: tnz (PINVAL,sp)
      001B33 26 05            [ 1] 4701 	jrne 5$
      001B35 43               [ 1] 4702 	cpl a 
      001B36 E4 00            [ 1] 4703 	and a,(GPIO_ODR,x)
      001B38 20 02            [ 2] 4704 	jra 8$
      001B3A EA 00            [ 1] 4705 5$: or a,(GPIO_ODR,x)
      001B3C E7 00            [ 1] 4706 8$: ld (GPIO_ODR,x),a 
      001B3E                       4707 	_drop VSIZE 
      001B3E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B40 81               [ 4] 4708 	ret
                                   4709 
                                   4710 
                                   4711 ;-----------------------
                                   4712 ; BASIC: BREAK 
                                   4713 ; insert a breakpoint 
                                   4714 ; in pogram. 
                                   4715 ; the program is resumed
                                   4716 ; with RUN 
                                   4717 ;-------------------------
      001B41                       4718 break:
      001B41 72 00 00 21 02   [ 2] 4719 	btjt flags,#FRUN,2$
      001B46 4F               [ 1] 4720 	clr a
      001B47 81               [ 4] 4721 	ret 
      001B48                       4722 2$:	 
                                   4723 ; create space on cstack to save context 
      001B48 AE 1B 6F         [ 2] 4724 	ldw x,#break_point 
      001B4B CD 01 C4         [ 4] 4725 	call puts 
      001B4E                       4726 	_drop 2 ;drop return address 
      001B4E 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B50                       4727 	_vars CTXT_SIZE ; context size 
      001B50 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001B52 CD 16 C7         [ 4] 4728 	call save_context 
      001B55 AE 16 C8         [ 2] 4729 	ldw x,#tib 
      001B58 CF 00 04         [ 2] 4730 	ldw basicptr,x
      001B5B 7F               [ 1] 4731 	clr (x)
      001B5C 72 5F 00 03      [ 1] 4732 	clr count  
      001B60 5F               [ 1] 4733 	clrw x 
      001B61 CF 00 00         [ 2] 4734 	ldw in.w,x
      001B64 72 11 00 21      [ 1] 4735 	bres flags,#FRUN 
      001B68 72 18 00 21      [ 1] 4736 	bset flags,#FBREAK
      001B6C CC 08 16         [ 2] 4737 	jp interp_loop 
      001B6F 0A 62 72 65 61 6B 20  4738 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4739 
                                   4740 ;-----------------------
                                   4741 ; BASIC: NEW
                                   4742 ; from command line only 
                                   4743 ; free program memory
                                   4744 ; and clear variables 
                                   4745 ;------------------------
      001B8D                       4746 new: 
      001B8D 72 01 00 21 02   [ 2] 4747 	btjf flags,#FRUN,0$ 
      001B92 4F               [ 1] 4748 	clr a 
      001B93 81               [ 4] 4749 	ret 
      001B94                       4750 0$:	
      001B94 CD 06 51         [ 4] 4751 	call clear_basic 
      001B97 81               [ 4] 4752 	ret 
                                   4753 	 
                                   4754 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4755 ;   file system routines
                                   4756 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4757 
                                   4758 ;--------------------
                                   4759 ; input:
                                   4760 ;   X     increment 
                                   4761 ; output:
                                   4762 ;   farptr  incremented 
                                   4763 ;---------------------
      001B98                       4764 incr_farptr:
      001B98 72 BB 00 13      [ 2] 4765 	addw x,farptr+1 
      001B9C 24 04            [ 1] 4766 	jrnc 1$
      001B9E 72 5C 00 12      [ 1] 4767 	inc farptr 
      001BA2 CF 00 13         [ 2] 4768 1$:	ldw farptr+1,x  
      001BA5 81               [ 4] 4769 	ret 
                                   4770 
                                   4771 ;------------------------------
                                   4772 ; extended flash memory used as FLASH_DRIVE 
                                   4773 ; seek end of used flash drive   
                                   4774 ; starting at 0x10000 address.
                                   4775 ; 4 consecutives 0 bytes signal free space. 
                                   4776 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4777 ;	none
                                   4778 ; output:
                                   4779 ;   ffree     free_addr| 0 if memory full.
                                   4780 ;------------------------------
      001BA6                       4781 seek_fdrive:
                                   4782 ; start scan at 0x10000 address 
      001BA6 A6 01            [ 1] 4783 	ld a,#1
      001BA8 C7 00 12         [ 1] 4784 	ld farptr,a 
      001BAB 5F               [ 1] 4785 	clrw x 
      001BAC CF 00 13         [ 2] 4786 	ldw farptr+1,x 
      001BAF                       4787 1$:
      001BAF AE 00 03         [ 2] 4788 	ldw x,#3  
      001BB2 92 AF 00 12      [ 5] 4789 2$:	ldf a,([farptr],x) 
      001BB6 26 05            [ 1] 4790 	jrne 3$
      001BB8 5A               [ 2] 4791 	decw x
      001BB9 2A F7            [ 1] 4792 	jrpl 2$
      001BBB 20 19            [ 2] 4793 	jra 4$ 
      001BBD 5C               [ 2] 4794 3$:	incw x 
      001BBE CD 1B 98         [ 4] 4795 	call incr_farptr
      001BC1 AE 02 7F         [ 2] 4796 	ldw x,#0x27f 
      001BC4 C3 00 12         [ 2] 4797 	cpw x,farptr
      001BC7 2A E6            [ 1] 4798 	jrpl 1$
                                   4799 ; drive full 
      001BC9 72 5F 00 15      [ 1] 4800 	clr ffree 
      001BCD 72 5F 00 16      [ 1] 4801 	clr ffree+1 
      001BD1 72 5F 00 17      [ 1] 4802 	clr ffree+2 
      001BD5 81               [ 4] 4803 	ret
      001BD6                       4804 4$: ; copy farptr to ffree	 
      001BD6 CE 00 12         [ 2] 4805 	ldw x,farptr 
      001BD9 C6 00 14         [ 1] 4806 	ld a,farptr+2 
      001BDC CF 00 15         [ 2] 4807 	ldw ffree,x 
      001BDF C7 00 17         [ 1] 4808 	ld ffree+2,a  
      001BE2 81               [ 4] 4809 	ret 
                                   4810 
                                   4811 ;-----------------------
                                   4812 ; compare file name 
                                   4813 ; with name pointed by Y  
                                   4814 ; input:
                                   4815 ;   farptr   file name 
                                   4816 ;   Y        target name 
                                   4817 ; output:
                                   4818 ;   farptr 	 at file_name
                                   4819 ;   X 		 farptr[x] point at size field  
                                   4820 ;   Carry    0|1 no match|match  
                                   4821 ;----------------------
      001BE3                       4822 cmp_name:
      001BE3 5F               [ 1] 4823 	clrw x
      001BE4 92 AF 00 12      [ 5] 4824 1$:	ldf a,([farptr],x)
      001BE8 90 F1            [ 1] 4825 	cp a,(y)
      001BEA 26 08            [ 1] 4826 	jrne 4$
      001BEC 4D               [ 1] 4827 	tnz a 
      001BED 27 12            [ 1] 4828 	jreq 9$ 
      001BEF 5C               [ 2] 4829     incw x 
      001BF0 90 5C            [ 2] 4830 	incw y 
      001BF2 20 F0            [ 2] 4831 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001BF4                       4832 4$: ;no match 
      001BF4 4D               [ 1] 4833 	tnz a 
      001BF5 27 07            [ 1] 4834 	jreq 5$
      001BF7 5C               [ 2] 4835 	incw x 
      001BF8 92 AF 00 12      [ 5] 4836 	ldf a,([farptr],x)
      001BFC 20 F6            [ 2] 4837 	jra 4$  
      001BFE 5C               [ 2] 4838 5$:	incw x ; farptr[x] point at 'size' field 
      001BFF 98               [ 1] 4839 	rcf 
      001C00 81               [ 4] 4840 	ret
      001C01                       4841 9$: ; match  
      001C01 5C               [ 2] 4842 	incw x  ; farptr[x] at 'size' field 
      001C02 99               [ 1] 4843 	scf 
      001C03 81               [ 4] 4844 	ret 
                                   4845 
                                   4846 ;-----------------------
                                   4847 ; search file in 
                                   4848 ; flash memory 
                                   4849 ; input:
                                   4850 ;   Y       file name  
                                   4851 ; output:
                                   4852 ;   farptr  addr at name|0
                                   4853 ;-----------------------
                           000001  4854 	FSIZE=1
                           000003  4855 	YSAVE=3
                           000004  4856 	VSIZE=4 
      001C04                       4857 search_file: 
      001C04                       4858 	_vars VSIZE
      001C04 52 04            [ 2]    1     sub sp,#VSIZE 
      001C06 17 03            [ 2] 4859 	ldw (YSAVE,sp),y  
      001C08 5F               [ 1] 4860 	clrw x 
      001C09 CF 00 13         [ 2] 4861 	ldw farptr+1,x 
      001C0C 35 01 00 12      [ 1] 4862 	mov farptr,#1
      001C10                       4863 1$:	
                                   4864 ; check if farptr is after any file 
                                   4865 ; if  0 then so.
      001C10 92 BC 00 12      [ 5] 4866 	ldf a,[farptr]
      001C14 27 25            [ 1] 4867 	jreq 6$
      001C16 5F               [ 1] 4868 2$: clrw x 	
      001C17 16 03            [ 2] 4869 	ldw y,(YSAVE,sp) 
      001C19 CD 1B E3         [ 4] 4870 	call cmp_name
      001C1C 25 2D            [ 1] 4871 	jrc 9$
      001C1E 92 AF 00 12      [ 5] 4872 	ldf a,([farptr],x)
      001C22 6B 01            [ 1] 4873 	ld (FSIZE,sp),a 
      001C24 5C               [ 2] 4874 	incw x 
      001C25 92 AF 00 12      [ 5] 4875 	ldf a,([farptr],x)
      001C29 6B 02            [ 1] 4876 	ld (FSIZE+1,sp),a 
      001C2B 5C               [ 2] 4877 	incw x 
      001C2C 72 FB 01         [ 2] 4878 	addw x,(FSIZE,sp) ; count to skip 
      001C2F 5C               [ 2] 4879 	incw x ; skip over EOF marker 
      001C30 CD 1B 98         [ 4] 4880 	call incr_farptr ; now at next file 'name_field'
      001C33 AE 02 80         [ 2] 4881 	ldw x,#0x280
      001C36 C3 00 12         [ 2] 4882 	cpw x,farptr 
      001C39 2A D5            [ 1] 4883 	jrpl 1$
      001C3B                       4884 6$: ; file not found 
      001C3B 72 5F 00 12      [ 1] 4885 	clr farptr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C3F 72 5F 00 13      [ 1] 4886 	clr farptr+1 
      001C43 72 5F 00 14      [ 1] 4887 	clr farptr+2 
      001C47                       4888 	_drop VSIZE 
      001C47 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C49 98               [ 1] 4889 	rcf
      001C4A 81               [ 4] 4890 	ret
      001C4B                       4891 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001C4B                       4892 	_drop VSIZE 
      001C4B 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C4D 99               [ 1] 4893 	scf 	
      001C4E 81               [ 4] 4894 	ret
                                   4895 
                                   4896 ;--------------------------------
                                   4897 ; BASIC: SAVE "name" 
                                   4898 ; save text program in 
                                   4899 ; flash memory used as 
                                   4900 ;--------------------------------
                           000001  4901 	BSIZE=1
                           000003  4902 	NAMEPTR=3
                           000004  4903 	VSIZE=4
      001C4F                       4904 save:
      001C4F 72 01 00 21 05   [ 2] 4905 	btjf flags,#FRUN,0$ 
      001C54 A6 07            [ 1] 4906 	ld a,#ERR_CMD_ONLY 
      001C56 CC 07 81         [ 2] 4907 	jp tb_error
      001C59                       4908 0$:	 
      001C59 CE 00 1C         [ 2] 4909 	ldw x,txtend 
      001C5C 72 B0 00 1A      [ 2] 4910 	subw x,txtbgn
      001C60 26 01            [ 1] 4911 	jrne 1$
                                   4912 ; nothing to save 
      001C62 81               [ 4] 4913 	ret 
      001C63                       4914 1$:	
      001C63                       4915 	_vars VSIZE 
      001C63 52 04            [ 2]    1     sub sp,#VSIZE 
      001C65 1F 01            [ 2] 4916 	ldw (BSIZE,sp),x 
      001C67 CD 08 46         [ 4] 4917 	call next_token	
      001C6A A1 0A            [ 1] 4918 	cp a,#TK_QSTR
      001C6C 27 03            [ 1] 4919 	jreq 2$
      001C6E CC 07 7F         [ 2] 4920 	jp syntax_error
      001C71                       4921 2$: 
      001C71 90 CE 00 04      [ 2] 4922 	ldw y,basicptr 
      001C75 72 B9 00 00      [ 2] 4923 	addw y,in.w
      001C79 17 03            [ 2] 4924 	ldw (NAMEPTR,sp),y  
      001C7B 55 00 03 00 01   [ 1] 4925 	mov in,count 
                                   4926 ; check if enough free space 
      001C80 93               [ 1] 4927 	ldw x,y 
      001C81 CD 02 86         [ 4] 4928 	call strlen 
      001C84 1C 00 03         [ 2] 4929 	addw x,#3 
      001C87 72 FB 01         [ 2] 4930 	addw x,(BSIZE,sp)
      001C8A 72 5D 00 15      [ 1] 4931 	tnz ffree 
      001C8E 26 0B            [ 1] 4932 	jrne 21$
      001C90 72 B0 00 16      [ 2] 4933 	subw x,ffree+1 
      001C94 23 05            [ 2] 4934 	jrule 21$
      001C96 A6 01            [ 1] 4935 	ld a,#ERR_MEM_FULL 
      001C98 CC 07 81         [ 2] 4936 	jp tb_error
      001C9B                       4937 21$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4938 ; check for existing file of that name 
      001C9B 16 03            [ 2] 4939 	ldw y,(NAMEPTR,sp)	
      001C9D CD 1C 04         [ 4] 4940 	call search_file 
      001CA0 24 05            [ 1] 4941 	jrnc 3$ 
      001CA2 A6 08            [ 1] 4942 	ld a,#ERR_DUPLICATE 
      001CA4 CC 07 81         [ 2] 4943 	jp tb_error 
      001CA7                       4944 3$:	;** write file name to flash **
      001CA7 CE 00 15         [ 2] 4945 	ldw x,ffree 
      001CAA C6 00 17         [ 1] 4946 	ld a,ffree+2 
      001CAD CF 00 12         [ 2] 4947 	ldw farptr,x 
      001CB0 C7 00 14         [ 1] 4948 	ld farptr+2,a 
      001CB3 1E 03            [ 2] 4949 	ldw x,(NAMEPTR,sp)  
      001CB5 CD 02 86         [ 4] 4950 	call strlen 
      001CB8 5C               [ 2] 4951 	incw  x
      001CB9 1F 01            [ 2] 4952 	ldw (BSIZE,sp),x  
      001CBB 5F               [ 1] 4953 	clrw x   
      001CBC 16 03            [ 2] 4954 	ldw y,(NAMEPTR,sp)
      001CBE CD 01 54         [ 4] 4955 	call write_block  
                                   4956 ;** write file length after name **
      001CC1 CE 00 1C         [ 2] 4957 	ldw x,txtend 
      001CC4 72 B0 00 1A      [ 2] 4958 	subw x,txtbgn
      001CC8 1F 01            [ 2] 4959 	ldw (BSIZE,sp),x 
      001CCA 5F               [ 1] 4960 	clrw x 
      001CCB 7B 01            [ 1] 4961 	ld a,(1,sp)
      001CCD CD 00 DF         [ 4] 4962 	call write_byte 
      001CD0 5C               [ 2] 4963 	incw x 
      001CD1 7B 02            [ 1] 4964 	ld a,(2,sp)
      001CD3 CD 00 DF         [ 4] 4965 	call write_byte
      001CD6 5C               [ 2] 4966 	incw x  
      001CD7 CD 1B 98         [ 4] 4967 	call incr_farptr ; move farptr after SIZE field 
                                   4968 ;** write BASIC text **
                                   4969 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001CDA 1E 01            [ 2] 4970 	ldw x,(BSIZE,sp)
      001CDC 89               [ 2] 4971 	pushw x ; write_block argument 
      001CDD 5F               [ 1] 4972 	clrw x 
      001CDE 90 CE 00 1A      [ 2] 4973 	ldw y,txtbgn  ; BASIC text to save 
      001CE2 CD 01 54         [ 4] 4974 	call write_block 
      001CE5                       4975 	_drop 2 ;  drop write_block argument  
      001CE5 5B 02            [ 2]    1     addw sp,#2 
                                   4976 ; write en end of file marker 
      001CE7 AE 00 01         [ 2] 4977 	ldw x,#1
      001CEA A6 FF            [ 1] 4978 	ld a,#EOF  
      001CEC CD 00 DF         [ 4] 4979 	call write_byte 
      001CEF CD 1B 98         [ 4] 4980 	call incr_farptr
                                   4981 ; save farptr in ffree
      001CF2 CE 00 12         [ 2] 4982 	ldw x,farptr 
      001CF5 C6 00 14         [ 1] 4983 	ld a,farptr+2 
      001CF8 CF 00 15         [ 2] 4984 	ldw ffree,x 
      001CFB C7 00 17         [ 1] 4985 	ld ffree+2,a
                                   4986 ;write 4 zero bytes as an end of all files marker 
      001CFE 5F               [ 1] 4987     clrw x 
      001CFF 4B 04            [ 1] 4988 	push #4 
      001D01                       4989 4$:
      001D01 4F               [ 1] 4990 	clr a 
      001D02 CD 00 DF         [ 4] 4991 	call write_byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D05 5C               [ 2] 4992 	incw x 
      001D06 0A 01            [ 1] 4993 	dec (1,sp)
      001D08 26 F7            [ 1] 4994 	jrne 4$
      001D0A 84               [ 1] 4995 5$: pop a 
                                   4996 ; display saved size  
      001D0B 1E 01            [ 2] 4997 	ldw x,(BSIZE,sp) 
      001D0D CD 09 DF         [ 4] 4998 	call print_int 
      001D10                       4999 	_drop VSIZE 
      001D10 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D12 81               [ 4] 5000 	ret 
                                   5001 
                                   5002 ;----------------------
                                   5003 ; load file in RAM memory
                                   5004 ; input:
                                   5005 ;    farptr point at file size 
                                   5006 ; output:
                                   5007 ;   y point after BASIC program in RAM.
                                   5008 ;------------------------
      001D13                       5009 load_file:
      001D13 CD 1B 98         [ 4] 5010 	call incr_farptr  
      001D16 CD 06 51         [ 4] 5011 	call clear_basic  
      001D19 5F               [ 1] 5012 	clrw x
      001D1A 92 AF 00 12      [ 5] 5013 	ldf a,([farptr],x)
      001D1E 90 95            [ 1] 5014 	ld yh,a 
      001D20 5C               [ 2] 5015 	incw x  
      001D21 92 AF 00 12      [ 5] 5016 	ldf a,([farptr],x)
      001D25 5C               [ 2] 5017 	incw x 
      001D26 90 97            [ 1] 5018 	ld yl,a 
      001D28 72 B9 00 1A      [ 2] 5019 	addw y,txtbgn
      001D2C 90 CF 00 1C      [ 2] 5020 	ldw txtend,y
      001D30 90 CE 00 1A      [ 2] 5021 	ldw y,txtbgn
      001D34                       5022 3$:	; load BASIC text 	
      001D34 92 AF 00 12      [ 5] 5023 	ldf a,([farptr],x)
      001D38 90 F7            [ 1] 5024 	ld (y),a 
      001D3A 5C               [ 2] 5025 	incw x 
      001D3B 90 5C            [ 2] 5026 	incw y 
      001D3D 90 C3 00 1C      [ 2] 5027 	cpw y,txtend 
      001D41 2B F1            [ 1] 5028 	jrmi 3$
      001D43 81               [ 4] 5029 	ret 
                                   5030 
                                   5031 ;------------------------
                                   5032 ; BASIC: LOAD "file" 
                                   5033 ; load file to RAM 
                                   5034 ; for execution 
                                   5035 ;------------------------
      001D44                       5036 load:
      001D44 72 01 00 21 07   [ 2] 5037 	btjf flags,#FRUN,0$ 
      001D49 27 05            [ 1] 5038 	jreq 0$ 
      001D4B A6 07            [ 1] 5039 	ld a,#ERR_CMD_ONLY 
      001D4D CC 07 81         [ 2] 5040 	jp tb_error 
      001D50                       5041 0$:	
      001D50 CD 08 46         [ 4] 5042 	call next_token 
      001D53 A1 0A            [ 1] 5043 	cp a,#TK_QSTR
      001D55 27 03            [ 1] 5044 	jreq 1$
      001D57 CC 07 7F         [ 2] 5045 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001D5A                       5046 1$:	
      001D5A 90 CE 00 04      [ 2] 5047 	ldw y,basicptr
      001D5E 72 B9 00 00      [ 2] 5048 	addw y,in.w 
      001D62 55 00 03 00 01   [ 1] 5049 	mov in,count 
      001D67 CD 1C 04         [ 4] 5050 	call search_file 
      001D6A 25 05            [ 1] 5051 	jrc 2$ 
      001D6C A6 09            [ 1] 5052 	ld a,#ERR_NOT_FILE
      001D6E CC 07 81         [ 2] 5053 	jp tb_error  
      001D71                       5054 2$:
      001D71 CD 1D 13         [ 4] 5055 	call load_file
                                   5056 ; print loaded size 	 
      001D74 CE 00 1C         [ 2] 5057 	ldw x,txtend 
      001D77 72 B0 00 1A      [ 2] 5058 	subw x,txtbgn
      001D7B CD 09 DF         [ 4] 5059 	call print_int 
      001D7E 81               [ 4] 5060 	ret 
                                   5061 
                                   5062 ;-----------------------------------
                                   5063 ; BASIC: FORGET ["file_name"] 
                                   5064 ; erase file_name and all others 
                                   5065 ; after it. 
                                   5066 ; without argument erase all files 
                                   5067 ;-----------------------------------
      001D7F                       5068 forget:
      001D7F CD 08 46         [ 4] 5069 	call next_token 
      001D82 A1 00            [ 1] 5070 	cp a,#TK_NONE 
      001D84 27 26            [ 1] 5071 	jreq 3$ 
      001D86 A1 0A            [ 1] 5072 	cp a,#TK_QSTR
      001D88 27 03            [ 1] 5073 	jreq 1$
      001D8A CC 07 7F         [ 2] 5074 	jp syntax_error
      001D8D 90 CE 00 04      [ 2] 5075 1$: ldw y,basicptr
      001D91 72 B9 00 00      [ 2] 5076 	addw y,in.w
      001D95 55 00 03 00 01   [ 1] 5077 	mov in,count 
      001D9A CD 1C 04         [ 4] 5078 	call search_file
      001D9D 25 05            [ 1] 5079 	jrc 2$
      001D9F A6 09            [ 1] 5080 	ld a,#ERR_NOT_FILE 
      001DA1 CC 07 81         [ 2] 5081 	jp tb_error 
      001DA4                       5082 2$: 
      001DA4 CE 00 12         [ 2] 5083 	ldw x,farptr
      001DA7 C6 00 14         [ 1] 5084 	ld a,farptr+2
      001DAA 20 0A            [ 2] 5085 	jra 4$ 
      001DAC                       5086 3$: ; forget all files 
      001DAC AE 01 00         [ 2] 5087 	ldw x,#0x100
      001DAF 4F               [ 1] 5088 	clr a 
      001DB0 CF 00 12         [ 2] 5089 	ldw farptr,x 
      001DB3 C7 00 14         [ 1] 5090 	ld farptr+2,a 
      001DB6                       5091 4$:
      001DB6 CF 00 15         [ 2] 5092 	ldw ffree,x 
      001DB9 C7 00 17         [ 1] 5093 	ld ffree+2,a 
      001DBC 4B 04            [ 1] 5094 	push #4
      001DBE 5F               [ 1] 5095 	clrw x 
      001DBF                       5096 5$: 
      001DBF 4F               [ 1] 5097 	clr a  
      001DC0 CD 00 DF         [ 4] 5098 	call write_byte 
      001DC3 5C               [ 2] 5099 	incw x 
      001DC4 0A 01            [ 1] 5100 	dec (1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001DC6 26 F7            [ 1] 5101 	jrne 5$	
      001DC8 84               [ 1] 5102 6$: pop a 
      001DC9 81               [ 4] 5103 	ret 
                                   5104 
                                   5105 ;----------------------
                                   5106 ; BASIC: DIR 
                                   5107 ; list saved files 
                                   5108 ;----------------------
                           000001  5109 	COUNT=1 ; files counter 
                           000002  5110 	VSIZE=2 
      001DCA                       5111 directory:
      001DCA                       5112 	_vars VSIZE 
      001DCA 52 02            [ 2]    1     sub sp,#VSIZE 
      001DCC 5F               [ 1] 5113 	clrw x 
      001DCD 1F 01            [ 2] 5114 	ldw (COUNT,sp),x 
      001DCF CF 00 13         [ 2] 5115 	ldw farptr+1,x 
      001DD2 35 01 00 12      [ 1] 5116 	mov farptr,#1 
      001DD6                       5117 dir_loop:
      001DD6 5F               [ 1] 5118 	clrw x 
      001DD7 92 AF 00 12      [ 5] 5119 	ldf a,([farptr],x)
      001DDB 27 39            [ 1] 5120 	jreq 8$ 
      001DDD                       5121 1$: ;name loop 	
      001DDD 92 AF 00 12      [ 5] 5122 	ldf a,([farptr],x)
      001DE1 27 06            [ 1] 5123 	jreq 2$ 
      001DE3 CD 01 B2         [ 4] 5124 	call putc 
      001DE6 5C               [ 2] 5125 	incw x 
      001DE7 20 F4            [ 2] 5126 	jra 1$
      001DE9 5C               [ 2] 5127 2$: incw x ; skip ending 0. 
      001DEA A6 20            [ 1] 5128 	ld a,#SPACE 
      001DEC CD 01 B2         [ 4] 5129 	call putc 
                                   5130 ; get file size 	
      001DEF 92 AF 00 12      [ 5] 5131 	ldf a,([farptr],x)
      001DF3 90 95            [ 1] 5132 	ld yh,a 
      001DF5 5C               [ 2] 5133 	incw x 
      001DF6 92 AF 00 12      [ 5] 5134 	ldf a,([farptr],x)
      001DFA 5C               [ 2] 5135 	incw x 
      001DFB 90 97            [ 1] 5136 	ld yl,a 
      001DFD 90 89            [ 2] 5137 	pushw y 
      001DFF 72 FB 01         [ 2] 5138 	addw x,(1,sp)
      001E02 5C               [ 2] 5139 	incw x ; skip EOF marker 
                                   5140 ; skip to next file 
      001E03 CD 1B 98         [ 4] 5141 	call incr_farptr 
                                   5142 ; print file size 
      001E06 85               [ 2] 5143 	popw x ; file size 
      001E07 CD 09 DF         [ 4] 5144 	call print_int 
      001E0A A6 0D            [ 1] 5145 	ld a,#CR 
      001E0C CD 01 B2         [ 4] 5146 	call putc
      001E0F 1E 01            [ 2] 5147 	ldw x,(COUNT,sp)
      001E11 5C               [ 2] 5148 	incw x
      001E12 1F 01            [ 2] 5149 	ldw (COUNT,sp),x  
      001E14 20 C0            [ 2] 5150 	jra dir_loop 
      001E16                       5151 8$: ; print number of files 
      001E16 1E 01            [ 2] 5152 	ldw x,(COUNT,sp)
      001E18 CD 09 DF         [ 4] 5153 	call print_int 
      001E1B AE 1E 4B         [ 2] 5154 	ldw x,#file_count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E1E CD 01 C4         [ 4] 5155 	call puts  
                                   5156 ; print drive free space 	
      001E21 A6 FF            [ 1] 5157 	ld a,#0xff 
      001E23 C0 00 17         [ 1] 5158 	sub a,ffree+2 
      001E26 C7 00 09         [ 1] 5159 	ld acc8,a 
      001E29 A6 7F            [ 1] 5160 	ld a,#0x7f 
      001E2B C2 00 16         [ 1] 5161 	sbc a,ffree+1 
      001E2E C7 00 08         [ 1] 5162 	ld acc16,a 
      001E31 A6 02            [ 1] 5163 	ld a,#2 
      001E33 C2 00 15         [ 1] 5164 	sbc a,ffree 
      001E36 C7 00 07         [ 1] 5165 	ld acc24,a 
      001E39 5F               [ 1] 5166 	clrw x  
      001E3A A6 06            [ 1] 5167 	ld a,#6 
      001E3C 97               [ 1] 5168 	ld xl,a 
      001E3D A6 0A            [ 1] 5169 	ld a,#10 
      001E3F CD 09 97         [ 4] 5170 	call prti24 
      001E42 AE 1E 53         [ 2] 5171 	ldw x,#drive_free
      001E45 CD 01 C4         [ 4] 5172 	call puts 
      001E48                       5173 	_drop VSIZE 
      001E48 5B 02            [ 2]    1     addw sp,#VSIZE 
      001E4A 81               [ 4] 5174 	ret
      001E4B 20 66 69 6C 65 73 0A  5175 file_count: .asciz " files\n"
             00
      001E53 20 62 79 74 65 73 20  5176 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5177 
                                   5178 ;---------------------
                                   5179 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5180 ; write 1 or more byte to FLASH or EEPROM
                                   5181 ; starting at address  
                                   5182 ; input:
                                   5183 ;   expr1  	is address 
                                   5184 ;   expr2,...,exprn   are bytes to write
                                   5185 ; output:
                                   5186 ;   none 
                                   5187 ;---------------------
                           000001  5188 	ADDR=1
                           000002  5189 	VSIZ=2 
      001E60                       5190 write:
      001E60                       5191 	_vars VSIZE 
      001E60 52 02            [ 2]    1     sub sp,#VSIZE 
      001E62 72 5F 00 12      [ 1] 5192 	clr farptr ; expect 16 bits address 
      001E66 CD 13 09         [ 4] 5193 	call expression
      001E69 A1 04            [ 1] 5194 	cp a,#TK_INTGR 
      001E6B 27 03            [ 1] 5195 	jreq 0$
      001E6D CC 07 7F         [ 2] 5196 	jp syntax_error
      001E70 1F 01            [ 2] 5197 0$: ldw (ADDR,sp),x 
      001E72 CD 08 46         [ 4] 5198 	call next_token 
      001E75 A1 0D            [ 1] 5199 	cp a,#TK_COMMA 
      001E77 27 02            [ 1] 5200 	jreq 1$ 
      001E79 20 19            [ 2] 5201 	jra 9$ 
      001E7B CD 13 09         [ 4] 5202 1$:	call expression
      001E7E A1 04            [ 1] 5203 	cp a,#TK_INTGR
      001E80 27 03            [ 1] 5204 	jreq 2$
      001E82 CC 07 7F         [ 2] 5205 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E85 9F               [ 1] 5206 2$:	ld a,xl 
      001E86 1E 01            [ 2] 5207 	ldw x,(ADDR,sp) 
      001E88 CF 00 13         [ 2] 5208 	ldw farptr+1,x 
      001E8B 5F               [ 1] 5209 	clrw x 
      001E8C CD 00 DF         [ 4] 5210 	call write_byte
      001E8F 1E 01            [ 2] 5211 	ldw x,(ADDR,sp)
      001E91 5C               [ 2] 5212 	incw x 
      001E92 20 DC            [ 2] 5213 	jra 0$ 
      001E94                       5214 9$:
      001E94                       5215 	_drop VSIZE
      001E94 5B 02            [ 2]    1     addw sp,#VSIZE 
      001E96 81               [ 4] 5216 	ret 
                                   5217 
                                   5218 
                                   5219 ;---------------------
                                   5220 ;BASIC: CHAR(expr)
                                   5221 ; évaluate expression 
                                   5222 ; and take the 7 least 
                                   5223 ; bits as ASCII character
                                   5224 ;---------------------
      001E97                       5225 char:
      001E97 CD 12 29         [ 4] 5226 	call func_args 
      001E9A A1 01            [ 1] 5227 	cp a,#1
      001E9C 27 03            [ 1] 5228 	jreq 1$
      001E9E CC 07 7F         [ 2] 5229 	jp syntax_error
      001EA1 CD 0F E5         [ 4] 5230 1$:	call dpop 
      001EA4 9F               [ 1] 5231 	ld a,xl 
      001EA5 A4 7F            [ 1] 5232 	and a,#0x7f 
      001EA7 97               [ 1] 5233 	ld xl,a
      001EA8 A6 03            [ 1] 5234 	ld a,#TK_CHAR
      001EAA 81               [ 4] 5235 	ret
                                   5236 
                                   5237 ;---------------------
                                   5238 ; BASIC: ASC(string|char)
                                   5239 ; extract first character 
                                   5240 ; of string argument 
                                   5241 ; return it as TK_INTGR 
                                   5242 ;---------------------
      001EAB                       5243 ascii:
      001EAB CD 12 29         [ 4] 5244 	call func_args 
      001EAE CD 08 46         [ 4] 5245 	call next_token 
      001EB1 A1 0A            [ 1] 5246 	cp a,#TK_QSTR 
      001EB3 27 07            [ 1] 5247 	jreq 1$
      001EB5 A1 03            [ 1] 5248 	cp a,#TK_CHAR 
      001EB7 27 06            [ 1] 5249 	jreq 2$ 
      001EB9 CC 07 7F         [ 2] 5250 	jp syntax_error
      001EBC                       5251 1$: 
      001EBC F6               [ 1] 5252 	ld a,(x)
      001EBD 20 01            [ 2] 5253 	jra 3$
      001EBF                       5254 2$: 
      001EBF 9F               [ 1] 5255 	ld a,xl 
      001EC0 97               [ 1] 5256 3$:	ld xl,a 
      001EC1 4F               [ 1] 5257 	clr a  
      001EC2 95               [ 1] 5258 	ld xh,a 
      001EC3 A6 04            [ 1] 5259 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001EC5 81               [ 4] 5260 	ret 
                                   5261 
                                   5262 ;---------------------
                                   5263 ;BASIC: KEY
                                   5264 ; wait for a character 
                                   5265 ; received from STDIN 
                                   5266 ; input:
                                   5267 ;	none 
                                   5268 ; output:
                                   5269 ;	X 		ASCII character 
                                   5270 ;---------------------
      001EC6                       5271 key:
      001EC6 CD 01 BB         [ 4] 5272 	call getc 
      001EC9 5F               [ 1] 5273 	clrw x 
      001ECA 97               [ 1] 5274 	ld xl,a 
      001ECB A6 04            [ 1] 5275 	ld a,#TK_INTGR
      001ECD 81               [ 4] 5276 	ret
                                   5277 
                                   5278 ;----------------------
                                   5279 ; BASIC: QKEY
                                   5280 ; Return true if there 
                                   5281 ; is a character in 
                                   5282 ; waiting in STDIN 
                                   5283 ; input:
                                   5284 ;  none 
                                   5285 ; output:
                                   5286 ;   X 		0|1 
                                   5287 ;-----------------------
      001ECE                       5288 qkey: 
      001ECE 5F               [ 1] 5289 	clrw x 
      001ECF 72 0B 52 30 01   [ 2] 5290 	btjf UART1_SR,#UART_SR_RXNE,9$ 
      001ED4 5C               [ 2] 5291 	incw x 
      001ED5 A6 04            [ 1] 5292 9$: ld a,#TK_INTGR
      001ED7 81               [ 4] 5293 	ret 
                                   5294 
                                   5295 ;---------------------
                                   5296 ; BASIC: GPIO(expr,reg)
                                   5297 ; return gpio address 
                                   5298 ; expr {0..8}
                                   5299 ; input:
                                   5300 ;   none 
                                   5301 ; output:
                                   5302 ;   X 		gpio register address
                                   5303 ;----------------------------
      001ED8                       5304 gpio:
      001ED8 CD 12 29         [ 4] 5305 	call func_args 
      001EDB A1 02            [ 1] 5306 	cp a,#2
      001EDD 27 03            [ 1] 5307 	jreq 1$
      001EDF CC 07 7F         [ 2] 5308 	jp syntax_error  
      001EE2                       5309 1$:	
      001EE2 AE 00 02         [ 2] 5310 	ldw x,#2
      001EE5 72 DE 00 18      [ 5] 5311 	ldw x,([dstkptr],x) ; port 
      001EE9 2B 1B            [ 1] 5312 	jrmi bad_port
      001EEB A3 00 09         [ 2] 5313 	cpw x,#9
      001EEE 2A 16            [ 1] 5314 	jrpl bad_port
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001EF0 A6 05            [ 1] 5315 	ld a,#5
      001EF2 42               [ 4] 5316 	mul x,a
      001EF3 1C 50 00         [ 2] 5317 	addw x,#GPIO_BASE 
      001EF6 89               [ 2] 5318 	pushw x 
      001EF7 CD 0F E5         [ 4] 5319 	call dpop 
      001EFA 72 FB 01         [ 2] 5320 	addw x,(1,sp)
      001EFD 1F 01            [ 2] 5321 	ldw (1,sp),x  
      001EFF CD 10 0C         [ 4] 5322 	call ddrop  
      001F02 85               [ 2] 5323 	popw x 
      001F03 A6 04            [ 1] 5324 	ld a,#TK_INTGR
      001F05 81               [ 4] 5325 	ret
      001F06                       5326 bad_port:
      001F06 A6 0A            [ 1] 5327 	ld a,#ERR_BAD_VALUE
      001F08 CC 07 81         [ 2] 5328 	jp tb_error
                                   5329 
                                   5330 
                                   5331 ;-------------------------
                                   5332 ; BASIC: UFLASH 
                                   5333 ; return user flash address
                                   5334 ; input:
                                   5335 ;  none 
                                   5336 ; output:
                                   5337 ;	A		TK_INTGR
                                   5338 ;   X 		user address 
                                   5339 ;---------------------------
      001F0B                       5340 uflash:
      001F0B AE 25 80         [ 2] 5341 	ldw x,#user_space 
      001F0E A6 04            [ 1] 5342 	ld a,#TK_INTGR 
      001F10 81               [ 4] 5343 	ret 
                                   5344 
                                   5345 
                                   5346 ;---------------------
                                   5347 ; BASIC: USR(addr[,arg])
                                   5348 ; execute a function written 
                                   5349 ; in binary code.
                                   5350 ; binary fonction should 
                                   5351 ; return token attribute in A 
                                   5352 ; and value in X. 
                                   5353 ; input:
                                   5354 ;   addr	routine address 
                                   5355 ;   arg 	is an optional argument 
                                   5356 ; output:
                                   5357 ;   A 		token attribute 
                                   5358 ;   X       returned value 
                                   5359 ;---------------------
      001F11                       5360 usr:
      001F11 90 89            [ 2] 5361 	pushw y 	
      001F13 CD 12 29         [ 4] 5362 	call func_args 
      001F16 A1 01            [ 1] 5363 	cp a,#1 
      001F18 2A 03            [ 1] 5364 	jrpl 2$ 
      001F1A CC 07 7F         [ 2] 5365 	jp syntax_error 
      001F1D                       5366 2$: 
      001F1D CD 0F E5         [ 4] 5367 	call dpop 
      001F20 A1 02            [ 1] 5368 	cp a,#2 
      001F22 2B 05            [ 1] 5369 	jrmi 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001F24 90 93            [ 1] 5370 	ldw y,x ; y=arg 
      001F26 CD 0F E5         [ 4] 5371 	call dpop ;x=addr 
      001F29 51               [ 1] 5372 4$:	exgw y,x ; y=addr,x=arg 
      001F2A 90 FD            [ 4] 5373 	call (y)
      001F2C 90 85            [ 2] 5374 	popw y 
      001F2E 81               [ 4] 5375 	ret 
                                   5376 
                                   5377 ;------------------------------
                                   5378 ; BASIC: BYE 
                                   5379 ; halt mcu in its lowest power mode 
                                   5380 ; wait for reset or external interrupt
                                   5381 ; do a cold start on wakeup.
                                   5382 ;------------------------------
      001F2F                       5383 bye:
      001F2F 72 0D 52 30 FB   [ 2] 5384 	btjf UART1_SR,#UART_SR_TC,.
      001F34 8E               [10] 5385 	halt
      001F35 CC 05 60         [ 2] 5386 	jp cold_start  
                                   5387 
                                   5388 ;----------------------------------
                                   5389 ; BASIC: AUTORUN "file_name" 
                                   5390 ; record in eeprom at adrress AUTORUN_NAME
                                   5391 ; the name of file to load and execute
                                   5392 ; at startup 
                                   5393 ; input:
                                   5394 ;   file_name   file to execute 
                                   5395 ; output:
                                   5396 ;   none
                                   5397 ;-----------------------------------
      001F38                       5398 autorun: 
      001F38 72 01 00 21 07   [ 2] 5399 	btjf flags,#FRUN,0$ 
      001F3D 27 05            [ 1] 5400 	jreq 0$ 
      001F3F A6 07            [ 1] 5401 	ld a,#ERR_CMD_ONLY 
      001F41 CC 07 81         [ 2] 5402 	jp tb_error 
      001F44                       5403 0$:	
      001F44 CD 08 46         [ 4] 5404 	call next_token 
      001F47 A1 0A            [ 1] 5405 	cp a,#TK_QSTR
      001F49 27 03            [ 1] 5406 	jreq 1$
      001F4B CC 07 7F         [ 2] 5407 	jp syntax_error 
      001F4E                       5408 1$:	
      001F4E 89               [ 2] 5409 	pushw x ; file name char*
      001F4F 90 93            [ 1] 5410 	ldw y,x  
      001F51 CD 1C 04         [ 4] 5411 	call search_file 
      001F54 25 05            [ 1] 5412 	jrc 2$ 
      001F56 A6 09            [ 1] 5413 	ld a,#ERR_NOT_FILE
      001F58 CC 07 81         [ 2] 5414 	jp tb_error  
      001F5B                       5415 2$: 
      001F5B 55 00 03 00 01   [ 1] 5416 	mov in,count 
      001F60 72 5F 00 12      [ 1] 5417 	clr farptr 
      001F64 AE 40 00         [ 2] 5418 	ldw x,#AUTORUN_NAME
      001F67 CF 00 13         [ 2] 5419 	ldw farptr+1,x 
      001F6A 1E 01            [ 2] 5420 	ldw x,(1,sp)  
      001F6C CD 02 86         [ 4] 5421 	call strlen  ; return length in X 
      001F6F 90 85            [ 2] 5422 	popw y 
      001F71 89               [ 2] 5423 	pushw x 
      001F72 5F               [ 1] 5424 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F73 CD 01 54         [ 4] 5425 	call write_block 
      001F76                       5426 	_drop 2 
      001F76 5B 02            [ 2]    1     addw sp,#2 
      001F78 81               [ 4] 5427 	ret 
                                   5428 
                                   5429 ;----------------------------------
                                   5430 ; BASIC: SLEEP 
                                   5431 ; halt mcu until reset or external
                                   5432 ; interrupt.
                                   5433 ; Resume progam after SLEEP command
                                   5434 ;----------------------------------
      001F79                       5435 sleep:
      001F79 72 0D 52 30 FB   [ 2] 5436 	btjf UART1_SR,#UART_SR_TC,.
      001F7E 72 16 00 21      [ 1] 5437 	bset flags,#FSLEEP
      001F82 8E               [10] 5438 	halt 
      001F83 81               [ 4] 5439 	ret 
                                   5440 
                                   5441 ;-------------------------------
                                   5442 ; BASIC: PAUSE expr 
                                   5443 ; suspend execution for n msec.
                                   5444 ; input:
                                   5445 ;	none
                                   5446 ; output:
                                   5447 ;	none 
                                   5448 ;------------------------------
      001F84                       5449 pause:
      001F84 CD 13 09         [ 4] 5450 	call expression
      001F87 A1 04            [ 1] 5451 	cp a,#TK_INTGR
      001F89 27 03            [ 1] 5452 	jreq pause02 
      001F8B CC 07 7F         [ 2] 5453 	jp syntax_error
      001F8E                       5454 pause02: 
      001F8E 5D               [ 2] 5455 1$: tnzw x 
      001F8F 27 04            [ 1] 5456 	jreq 2$
      001F91 8F               [10] 5457 	wfi 
      001F92 5A               [ 2] 5458 	decw x 
      001F93 26 F9            [ 1] 5459 	jrne 1$
      001F95 4F               [ 1] 5460 2$:	clr a 
      001F96 81               [ 4] 5461 	ret 
                                   5462 
                                   5463 ;------------------------------
                                   5464 ; BASIC: AWU expr
                                   5465 ; halt mcu for 'expr' milliseconds
                                   5466 ; use Auto wakeup peripheral
                                   5467 ; all oscillators stopped except LSI
                                   5468 ; range: 1ms - 511ms
                                   5469 ; input:
                                   5470 ;  none
                                   5471 ; output:
                                   5472 ;  none:
                                   5473 ;------------------------------
      001F97                       5474 awu:
      001F97 CD 13 09         [ 4] 5475   call expression
      001F9A A1 04            [ 1] 5476   cp a,#TK_INTGR
      001F9C 27 03            [ 1] 5477   jreq awu02
      001F9E CC 07 7F         [ 2] 5478   jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001FA1                       5479 awu02:
      001FA1 A3 14 00         [ 2] 5480   cpw x,#5120
      001FA4 2B 0C            [ 1] 5481   jrmi 1$ 
      001FA6 35 0F 50 F2      [ 1] 5482   mov AWU_TBR,#15 
      001FAA A6 1E            [ 1] 5483   ld a,#30
      001FAC 62               [ 2] 5484   div x,a
      001FAD A6 10            [ 1] 5485   ld a,#16
      001FAF 62               [ 2] 5486   div x,a 
      001FB0 20 1E            [ 2] 5487   jra 4$
      001FB2                       5488 1$: 
      001FB2 A3 08 00         [ 2] 5489   cpw x,#2048
      001FB5 2B 09            [ 1] 5490   jrmi 2$ 
      001FB7 35 0E 50 F2      [ 1] 5491   mov AWU_TBR,#14
      001FBB A6 50            [ 1] 5492   ld a,#80
      001FBD 62               [ 2] 5493   div x,a 
      001FBE 20 10            [ 2] 5494   jra 4$   
      001FC0                       5495 2$:
      001FC0 35 07 50 F2      [ 1] 5496   mov AWU_TBR,#7
      001FC4                       5497 3$:  
                                   5498 ; while X > 64  divide by 2 and increment AWU_TBR 
      001FC4 A3 00 40         [ 2] 5499   cpw x,#64 
      001FC7 23 07            [ 2] 5500   jrule 4$ 
      001FC9 72 5C 50 F2      [ 1] 5501   inc AWU_TBR 
      001FCD 54               [ 2] 5502   srlw x 
      001FCE 20 F4            [ 2] 5503   jra 3$ 
      001FD0                       5504 4$:
      001FD0 9F               [ 1] 5505   ld a, xl
      001FD1 4A               [ 1] 5506   dec a 
      001FD2 27 01            [ 1] 5507   jreq 5$
      001FD4 4A               [ 1] 5508   dec a 	
      001FD5                       5509 5$: 
      001FD5 A4 3E            [ 1] 5510   and a,#0x3e 
      001FD7 C7 50 F1         [ 1] 5511   ld AWU_APR,a 
      001FDA 72 18 50 F0      [ 1] 5512   bset AWU_CSR,#AWU_CSR_AWUEN
      001FDE 8E               [10] 5513   halt 
                                   5514 
      001FDF 81               [ 4] 5515   ret 
                                   5516 
                                   5517 ;------------------------------
                                   5518 ; BASIC: TICKS
                                   5519 ; return msec ticks counter value 
                                   5520 ; input:
                                   5521 ; 	none 
                                   5522 ; output:
                                   5523 ;	X 		TK_INTGR
                                   5524 ;-------------------------------
      001FE0                       5525 get_ticks:
      001FE0 CE 00 0A         [ 2] 5526 	ldw x,ticks 
      001FE3 A6 04            [ 1] 5527 	ld a,#TK_INTGR
      001FE5 81               [ 4] 5528 	ret 
                                   5529 
                                   5530 
                                   5531 
                                   5532 ;------------------------------
                                   5533 ; BASIC: ABS(expr)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   5534 ; return absolute value of expr.
                                   5535 ; input:
                                   5536 ;   none
                                   5537 ; output:
                                   5538 ;   X     	positive integer
                                   5539 ;-------------------------------
      001FE6                       5540 abs:
      001FE6 CD 12 29         [ 4] 5541 	call func_args 
      001FE9 A1 01            [ 1] 5542 	cp a,#1 
      001FEB 27 03            [ 1] 5543 	jreq 0$ 
      001FED CC 07 7F         [ 2] 5544 	jp syntax_error
      001FF0                       5545 0$:  
      001FF0 CD 0F E5         [ 4] 5546     call dpop   
      001FF3 9E               [ 1] 5547 	ld a,xh 
      001FF4 A5 80            [ 1] 5548 	bcp a,#0x80 
      001FF6 27 01            [ 1] 5549 	jreq 2$ 
      001FF8 50               [ 2] 5550 	negw x 
      001FF9 A6 04            [ 1] 5551 2$: ld a,#TK_INTGR 
      001FFB 81               [ 4] 5552 	ret 
                                   5553 
                                   5554 ;------------------------------
                                   5555 ; BASIC: AND(expr1,expr2)
                                   5556 ; Apply bit AND relation between
                                   5557 ; the 2 arguments, i.e expr1 & expr2 
                                   5558 ; output:
                                   5559 ; 	A 		TK_INTGR
                                   5560 ;   X 		result 
                                   5561 ;------------------------------
      001FFC                       5562 bit_and:
      001FFC CD 12 29         [ 4] 5563 	call func_args 
      001FFF A1 02            [ 1] 5564 	cp a,#2
      002001 27 03            [ 1] 5565 	jreq 1$
      002003 CC 07 7F         [ 2] 5566 	jp syntax_error 
      002006 CD 0F E5         [ 4] 5567 1$:	call dpop 
      002009 89               [ 2] 5568 	pushw x 
      00200A CD 0F E5         [ 4] 5569 	call dpop 
      00200D 9E               [ 1] 5570 	ld a,xh 
      00200E 14 01            [ 1] 5571 	and a,(1,sp)
      002010 95               [ 1] 5572 	ld xh,a 
      002011 9F               [ 1] 5573 	ld a,xl
      002012 14 02            [ 1] 5574 	and a,(2,sp)
      002014 97               [ 1] 5575 	ld xl,a 
      002015                       5576 	_drop 2 
      002015 5B 02            [ 2]    1     addw sp,#2 
      002017 A6 04            [ 1] 5577 	ld a,#TK_INTGR
      002019 81               [ 4] 5578 	ret
                                   5579 
                                   5580 ;------------------------------
                                   5581 ; BASIC: OR(expr1,expr2)
                                   5582 ; Apply bit OR relation between
                                   5583 ; the 2 arguments, i.e expr1 | expr2 
                                   5584 ; output:
                                   5585 ; 	A 		TK_INTGR
                                   5586 ;   X 		result 
                                   5587 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      00201A                       5588 bit_or:
      00201A CD 12 29         [ 4] 5589 	call func_args 
      00201D A1 02            [ 1] 5590 	cp a,#2
      00201F 27 03            [ 1] 5591 	jreq 1$
      002021 CC 07 7F         [ 2] 5592 	jp syntax_error 
      002024                       5593 1$: 
      002024 CD 0F E5         [ 4] 5594 	call dpop 
      002027 89               [ 2] 5595 	pushw x 
      002028 CD 0F E5         [ 4] 5596 	call dpop 
      00202B 9E               [ 1] 5597 	ld a,xh 
      00202C 1A 01            [ 1] 5598 	or a,(1,sp)
      00202E 95               [ 1] 5599 	ld xh,a 
      00202F 9F               [ 1] 5600 	ld a,xl 
      002030 1A 02            [ 1] 5601 	or a,(2,sp)
      002032 97               [ 1] 5602 	ld xl,a 
      002033                       5603 	_drop 2 
      002033 5B 02            [ 2]    1     addw sp,#2 
      002035 A6 04            [ 1] 5604 	ld a,#TK_INTGR 
      002037 81               [ 4] 5605 	ret
                                   5606 
                                   5607 ;------------------------------
                                   5608 ; BASIC: XOR(expr1,expr2)
                                   5609 ; Apply bit XOR relation between
                                   5610 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5611 ; output:
                                   5612 ; 	A 		TK_INTGR
                                   5613 ;   X 		result 
                                   5614 ;------------------------------
      002038                       5615 bit_xor:
      002038 CD 12 29         [ 4] 5616 	call func_args 
      00203B A1 02            [ 1] 5617 	cp a,#2
      00203D 27 03            [ 1] 5618 	jreq 1$
      00203F CC 07 7F         [ 2] 5619 	jp syntax_error 
      002042                       5620 1$: 
      002042 CD 0F E5         [ 4] 5621 	call dpop 
      002045 89               [ 2] 5622 	pushw x 
      002046 CD 0F E5         [ 4] 5623 	call dpop 
      002049 9E               [ 1] 5624 	ld a,xh 
      00204A 18 01            [ 1] 5625 	xor a,(1,sp)
      00204C 95               [ 1] 5626 	ld xh,a 
      00204D 9F               [ 1] 5627 	ld a,xl 
      00204E 18 02            [ 1] 5628 	xor a,(2,sp)
      002050 97               [ 1] 5629 	ld xl,a 
      002051                       5630 	_drop 2 
      002051 5B 02            [ 2]    1     addw sp,#2 
      002053 A6 04            [ 1] 5631 	ld a,#TK_INTGR 
      002055 81               [ 4] 5632 	ret 
                                   5633 
                                   5634 ;------------------------------
                                   5635 ; BASIC: LSHIFT(expr1,expr2)
                                   5636 ; logical shift left expr1 by 
                                   5637 ; expr2 bits 
                                   5638 ; output:
                                   5639 ; 	A 		TK_INTGR
                                   5640 ;   X 		result 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                   5641 ;------------------------------
      002056                       5642 lshift:
      002056 CD 12 29         [ 4] 5643 	call func_args
      002059 A1 02            [ 1] 5644 	cp a,#2 
      00205B 27 03            [ 1] 5645 	jreq 1$
      00205D CC 07 7F         [ 2] 5646 	jp syntax_error
      002060 CD 0F E5         [ 4] 5647 1$: call dpop  
      002063 51               [ 1] 5648 	exgw x,y 
      002064 CD 0F E5         [ 4] 5649 	call dpop
      002067 90 5D            [ 2] 5650 	tnzw y 
      002069 27 05            [ 1] 5651 	jreq 4$
      00206B 58               [ 2] 5652 2$:	sllw x 
      00206C 90 5A            [ 2] 5653 	decw y 
      00206E 26 FB            [ 1] 5654 	jrne 2$
      002070                       5655 4$:  
      002070 A6 04            [ 1] 5656 	ld a,#TK_INTGR
      002072 81               [ 4] 5657 	ret
                                   5658 
                                   5659 ;------------------------------
                                   5660 ; BASIC: RSHIFT(expr1,expr2)
                                   5661 ; logical shift right expr1 by 
                                   5662 ; expr2 bits.
                                   5663 ; output:
                                   5664 ; 	A 		TK_INTGR
                                   5665 ;   X 		result 
                                   5666 ;------------------------------
      002073                       5667 rshift:
      002073 CD 12 29         [ 4] 5668 	call func_args
      002076 A1 02            [ 1] 5669 	cp a,#2 
      002078 27 03            [ 1] 5670 	jreq 1$
      00207A CC 07 7F         [ 2] 5671 	jp syntax_error
      00207D CD 0F E5         [ 4] 5672 1$: call dpop  
      002080 51               [ 1] 5673 	exgw x,y 
      002081 CD 0F E5         [ 4] 5674 	call dpop
      002084 90 5D            [ 2] 5675 	tnzw y 
      002086 27 05            [ 1] 5676 	jreq 4$
      002088 54               [ 2] 5677 2$:	srlw x 
      002089 90 5A            [ 2] 5678 	decw y 
      00208B 26 FB            [ 1] 5679 	jrne 2$
      00208D                       5680 4$:  
      00208D A6 04            [ 1] 5681 	ld a,#TK_INTGR
      00208F 81               [ 4] 5682 	ret
                                   5683 
                                   5684 ;--------------------------
                                   5685 ; BASIC: FCPU integer
                                   5686 ; set CPU frequency 
                                   5687 ;-------------------------- 
                                   5688 
      002090                       5689 fcpu:
      002090 A6 04            [ 1] 5690 	ld a,#TK_INTGR
      002092 CD 11 F8         [ 4] 5691 	call expect 
      002095 9F               [ 1] 5692 	ld a,xl 
      002096 A4 07            [ 1] 5693 	and a,#7 
      002098 C7 50 C6         [ 1] 5694 	ld CLK_CKDIVR,a 
      00209B 81               [ 4] 5695 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   5696 
                                   5697 ;------------------------------
                                   5698 ; BASIC: PMODE pin#, mode 
                                   5699 ; define pin as input or output
                                   5700 ; pin#: {0..15}
                                   5701 ; mode: INPUT|OUTPUT  
                                   5702 ;------------------------------
                           000001  5703 	PINNO=1
                           000001  5704 	VSIZE=1
      00209C                       5705 pin_mode:
      00209C                       5706 	_vars VSIZE 
      00209C 52 01            [ 2]    1     sub sp,#VSIZE 
      00209E CD 12 05         [ 4] 5707 	call arg_list 
      0020A1 A1 02            [ 1] 5708 	cp a,#2 
      0020A3 27 03            [ 1] 5709 	jreq 1$
      0020A5 CC 07 7F         [ 2] 5710 	jp syntax_error 
      0020A8 CD 0F E5         [ 4] 5711 1$: call dpop ; mode 
      0020AB 51               [ 1] 5712 	exgw x,y 
      0020AC CD 0F E5         [ 4] 5713 	call dpop ; Dx pin 
      0020AF CD 20 E1         [ 4] 5714 	call select_pin 
      0020B2 6B 01            [ 1] 5715 	ld (PINNO,sp),a  
      0020B4 A6 01            [ 1] 5716 	ld a,#1 
      0020B6 0D 01            [ 1] 5717 	tnz (PINNO,sp)
      0020B8 27 0B            [ 1] 5718 	jreq 4$
      0020BA 48               [ 1] 5719 2$:	sll a 
      0020BB 0A 01            [ 1] 5720 	dec (PINNO,sp)
      0020BD 26 FB            [ 1] 5721 	jrne 2$ 
      0020BF 6B 01            [ 1] 5722 	ld (PINNO,sp),a
      0020C1 EA 03            [ 1] 5723 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      0020C3 E7 03            [ 1] 5724 	ld (GPIO_CR1,x),a 
      0020C5 90 A3 00 01      [ 2] 5725 4$:	cpw y,#OUTP 
      0020C9 27 07            [ 1] 5726 	jreq 6$
                                   5727 ; input mode
      0020CB 7B 01            [ 1] 5728 	ld a,(PINNO,sp)
      0020CD 43               [ 1] 5729 	cpl a 
      0020CE E4 02            [ 1] 5730 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      0020D0 20 0A            [ 2] 5731 	jra 9$
      0020D2                       5732 6$: ;output mode  
      0020D2 7B 01            [ 1] 5733 	ld a,(PINNO,sp)
      0020D4 EA 04            [ 1] 5734 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0020D6 E7 04            [ 1] 5735 	ld (GPIO_CR2,x),a 
      0020D8 7B 01            [ 1] 5736 	ld a,(PINNO,sp)
      0020DA EA 02            [ 1] 5737 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0020DC E7 02            [ 1] 5738 9$:	ld (GPIO_DDR,x),a 
      0020DE                       5739 	_drop VSIZE 
      0020DE 5B 01            [ 2]    1     addw sp,#VSIZE 
      0020E0 81               [ 4] 5740 	ret
                                   5741 
                                   5742 ;------------------------
                                   5743 ; select pin 
                                   5744 ; input:
                                   5745 ;   X 	 {0..15} Arduino Dx 
                                   5746 ; output:
                                   5747 ;   A     stm8s208 pin 
                                   5748 ;   X     base address s208 GPIO port 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   5749 ;---------------------------
      0020E1                       5750 select_pin:
      0020E1 58               [ 2] 5751 	sllw x 
      0020E2 1C 20 F1         [ 2] 5752 	addw x,#arduino_to_8s208 
      0020E5 FE               [ 2] 5753 	ldw x,(x)
      0020E6 9F               [ 1] 5754 	ld a,xl 
      0020E7 88               [ 1] 5755 	push a 
      0020E8 5E               [ 1] 5756 	swapw x 
      0020E9 A6 05            [ 1] 5757 	ld a,#5 
      0020EB 42               [ 4] 5758 	mul x,a 
      0020EC 1C 50 00         [ 2] 5759 	addw x,#GPIO_BASE 
      0020EF 84               [ 1] 5760 	pop a 
      0020F0 81               [ 4] 5761 	ret 
                                   5762 ; translation from Arduino D0..D15 to stm8s208rb 
      0020F1                       5763 arduino_to_8s208:
      0020F1 03 06                 5764 .byte 3,6 ; D0 
      0020F3 03 05                 5765 .byte 3,5 ; D1 
      0020F5 04 00                 5766 .byte 4,0 ; D2 
      0020F7 02 01                 5767 .byte 2,1 ; D3
      0020F9 06 00                 5768 .byte 6,0 ; D4
      0020FB 02 02                 5769 .byte 2,2 ; D5
      0020FD 02 03                 5770 .byte 2,3 ; D6
      0020FF 03 01                 5771 .byte 3,1 ; D7
      002101 03 03                 5772 .byte 3,3 ; D8
      002103 02 04                 5773 .byte 2,4 ; D9
      002105 04 05                 5774 .byte 4,5 ; D10
      002107 02 06                 5775 .byte 2,6 ; D11
      002109 02 07                 5776 .byte 2,7 ; D12
      00210B 02 05                 5777 .byte 2,5 ; D13
      00210D 04 02                 5778 .byte 4,2 ; D14
      00210F 04 01                 5779 .byte 4,1 ; D15
                                   5780 
                                   5781 
                                   5782 ;------------------------------
                                   5783 ; BASIC: RND(expr)
                                   5784 ; return random number 
                                   5785 ; between 1 and expr inclusive
                                   5786 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5787 ; input:
                                   5788 ; 	none 
                                   5789 ; output:
                                   5790 ;	X 		random positive integer 
                                   5791 ;------------------------------
      002111                       5792 random:
      002111 CD 12 29         [ 4] 5793 	call func_args 
      002114 A1 01            [ 1] 5794 	cp a,#1
      002116 27 03            [ 1] 5795 	jreq 1$
      002118 CC 07 7F         [ 2] 5796 	jp syntax_error
      00211B                       5797 1$: 
      00211B CD 0F E5         [ 4] 5798 	call dpop 
      00211E 89               [ 2] 5799 	pushw x 
      00211F 9E               [ 1] 5800 	ld a,xh 
      002120 A5 80            [ 1] 5801 	bcp a,#0x80 
      002122 27 05            [ 1] 5802 	jreq 2$
      002124 A6 0A            [ 1] 5803 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      002126 CC 07 81         [ 2] 5804 	jp tb_error
      002129                       5805 2$: 
                                   5806 ; acc16=(x<<5)^x 
      002129 CE 00 0E         [ 2] 5807 	ldw x,seedx 
      00212C 58               [ 2] 5808 	sllw x 
      00212D 58               [ 2] 5809 	sllw x 
      00212E 58               [ 2] 5810 	sllw x 
      00212F 58               [ 2] 5811 	sllw x 
      002130 58               [ 2] 5812 	sllw x 
      002131 9E               [ 1] 5813 	ld a,xh 
      002132 C8 00 0E         [ 1] 5814 	xor a,seedx 
      002135 C7 00 08         [ 1] 5815 	ld acc16,a 
      002138 9F               [ 1] 5816 	ld a,xl 
      002139 C8 00 0F         [ 1] 5817 	xor a,seedx+1 
      00213C C7 00 09         [ 1] 5818 	ld acc8,a 
                                   5819 ; seedx=seedy 
      00213F CE 00 10         [ 2] 5820 	ldw x,seedy 
      002142 CF 00 0E         [ 2] 5821 	ldw seedx,x  
                                   5822 ; seedy=seedy^(seedy>>1)
      002145 90 54            [ 2] 5823 	srlw y 
      002147 90 9E            [ 1] 5824 	ld a,yh 
      002149 C8 00 10         [ 1] 5825 	xor a,seedy 
      00214C C7 00 10         [ 1] 5826 	ld seedy,a  
      00214F 90 9F            [ 1] 5827 	ld a,yl 
      002151 C8 00 11         [ 1] 5828 	xor a,seedy+1 
      002154 C7 00 11         [ 1] 5829 	ld seedy+1,a 
                                   5830 ; acc16>>3 
      002157 CE 00 08         [ 2] 5831 	ldw x,acc16 
      00215A 54               [ 2] 5832 	srlw x 
      00215B 54               [ 2] 5833 	srlw x 
      00215C 54               [ 2] 5834 	srlw x 
                                   5835 ; x=acc16^x 
      00215D 9E               [ 1] 5836 	ld a,xh 
      00215E C8 00 08         [ 1] 5837 	xor a,acc16 
      002161 95               [ 1] 5838 	ld xh,a 
      002162 9F               [ 1] 5839 	ld a,xl 
      002163 C8 00 09         [ 1] 5840 	xor a,acc8 
      002166 97               [ 1] 5841 	ld xl,a 
                                   5842 ; seedy=x^seedy 
      002167 C8 00 11         [ 1] 5843 	xor a,seedy+1
      00216A 97               [ 1] 5844 	ld xl,a 
      00216B 9E               [ 1] 5845 	ld a,xh 
      00216C C8 00 10         [ 1] 5846 	xor a,seedy
      00216F 95               [ 1] 5847 	ld xh,a 
      002170 CF 00 10         [ 2] 5848 	ldw seedy,x 
                                   5849 ; return seedy modulo expr + 1 
      002173 90 85            [ 2] 5850 	popw y 
      002175 65               [ 2] 5851 	divw x,y 
      002176 93               [ 1] 5852 	ldw x,y 
      002177 5C               [ 2] 5853 	incw x 
      002178 A6 04            [ 1] 5854 	ld a,#TK_INTGR
      00217A 81               [ 4] 5855 	ret 
                                   5856 
                                   5857 ;---------------------------------
                                   5858 ; BASIC: WORDS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                   5859 ; affiche la listes des mots du
                                   5860 ; dictionnaire.
                                   5861 ;---------------------------------
                           000001  5862 	WLEN=1
                           000002  5863 	LLEN=2  
                           000002  5864 	VSIZE=2 
      00217B                       5865 words:
      00217B                       5866 	_vars VSIZE
      00217B 52 02            [ 2]    1     sub sp,#VSIZE 
      00217D 0F 02            [ 1] 5867 	clr (LLEN,sp)
      00217F 90 AE 25 2D      [ 2] 5868 	ldw y,#kword_dict+2
      002183 93               [ 1] 5869 0$:	ldw x,y
      002184 F6               [ 1] 5870 	ld a,(x)
      002185 A4 0F            [ 1] 5871 	and a,#15 
      002187 6B 01            [ 1] 5872 	ld (WLEN,sp),a 
      002189 5C               [ 2] 5873 1$:	incw x 
      00218A F6               [ 1] 5874 	ld a,(x)
      00218B CD 01 B2         [ 4] 5875 	call putc 
      00218E 0C 02            [ 1] 5876 	inc (LLEN,sp)
      002190 0A 01            [ 1] 5877 	dec (WLEN,sp)
      002192 26 F5            [ 1] 5878 	jrne 1$
      002194 A6 46            [ 1] 5879 	ld a,#70
      002196 11 02            [ 1] 5880 	cp a,(LLEN,sp)
      002198 2B 09            [ 1] 5881 	jrmi 2$   
      00219A A6 20            [ 1] 5882 	ld a,#SPACE 
      00219C CD 01 B2         [ 4] 5883 	call putc 
      00219F 0C 02            [ 1] 5884 	inc (LLEN,sp) 
      0021A1 20 07            [ 2] 5885 	jra 3$
      0021A3 A6 0D            [ 1] 5886 2$: ld a,#CR 
      0021A5 CD 01 B2         [ 4] 5887 	call putc 
      0021A8 0F 02            [ 1] 5888 	clr (LLEN,sp)
      0021AA 72 A2 00 02      [ 2] 5889 3$:	subw y,#2 
      0021AE 90 FE            [ 2] 5890 	ldw y,(y)
      0021B0 26 D1            [ 1] 5891 	jrne 0$  
      0021B2                       5892 	_drop VSIZE 
      0021B2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0021B4 81               [ 4] 5893 	ret 
                                   5894 
                                   5895 
                                   5896 ;-----------------------------
                                   5897 ; BASIC: TIMER expr 
                                   5898 ; initialize count down timer 
                                   5899 ;-----------------------------
      0021B5                       5900 set_timer:
      0021B5 CD 12 05         [ 4] 5901 	call arg_list
      0021B8 A1 01            [ 1] 5902 	cp a,#1 
      0021BA 27 03            [ 1] 5903 	jreq 1$
      0021BC CC 07 7F         [ 2] 5904 	jp syntax_error
      0021BF                       5905 1$: 
      0021BF CD 0F E5         [ 4] 5906 	call dpop 
      0021C2 CF 00 0C         [ 2] 5907 	ldw timer,x 
      0021C5 81               [ 4] 5908 	ret 
                                   5909 
                                   5910 ;------------------------------
                                   5911 ; BASIC: TIMEOUT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                   5912 ; return state of timer 
                                   5913 ;------------------------------
      0021C6                       5914 timeout:
      0021C6 CE 00 0C         [ 2] 5915 	ldw x,timer 
      0021C9                       5916 logical_complement:
      0021C9 53               [ 2] 5917 	cplw x 
      0021CA A3 FF FF         [ 2] 5918 	cpw x,#-1
      0021CD 27 01            [ 1] 5919 	jreq 2$
      0021CF 5F               [ 1] 5920 	clrw x 
      0021D0 A6 04            [ 1] 5921 2$:	ld a,#TK_INTGR
      0021D2 81               [ 4] 5922 	ret 
                                   5923 
                                   5924 ;--------------------------------
                                   5925 ; BASIC NOT(expr) 
                                   5926 ; return logical complement of expr
                                   5927 ;--------------------------------
      0021D3                       5928 func_not:
      0021D3 CD 12 29         [ 4] 5929 	call func_args  
      0021D6 A1 01            [ 1] 5930 	cp a,#1
      0021D8 27 03            [ 1] 5931 	jreq 1$
      0021DA CC 07 7F         [ 2] 5932 	jp syntax_error
      0021DD CD 0F E5         [ 4] 5933 1$:	call dpop 
      0021E0 20 E7            [ 2] 5934 	jra logical_complement
                                   5935 
                                   5936 
                                   5937 
                                   5938 ;-----------------------------------
                                   5939 ; BASIC: IWDGEN expr1 
                                   5940 ; enable independant watchdog timer
                                   5941 ; expr1 is delay in multiple of 62.5µsec
                                   5942 ; expr1 -> {1..16383}
                                   5943 ;-----------------------------------
      0021E2                       5944 enable_iwdg:
      0021E2 CD 12 05         [ 4] 5945 	call arg_list
      0021E5 A1 01            [ 1] 5946 	cp a,#1 
      0021E7 27 03            [ 1] 5947 	jreq 1$
      0021E9 CC 07 7F         [ 2] 5948 	jp syntax_error 
      0021EC 4B 00            [ 1] 5949 1$: push #0
      0021EE 35 CC 50 E0      [ 1] 5950 	mov IWDG_KR,#IWDG_KEY_ENABLE
      0021F2 CD 0F E5         [ 4] 5951 	call dpop
      0021F5 9E               [ 1] 5952 	ld a,xh 
      0021F6 A4 3F            [ 1] 5953 	and a,#0x3f
      0021F8 95               [ 1] 5954 	ld xh,a  
      0021F9 A3 00 FF         [ 2] 5955 2$:	cpw x,#255
      0021FC 23 06            [ 2] 5956 	jrule 3$
      0021FE 0C 01            [ 1] 5957 	inc (1,sp)
      002200 98               [ 1] 5958 	rcf 
      002201 56               [ 2] 5959 	rrcw x 
      002202 20 F5            [ 2] 5960 	jra 2$
      002204 35 55 50 E0      [ 1] 5961 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002208 84               [ 1] 5962 	pop a  
      002209 C7 50 E1         [ 1] 5963 	ld IWDG_PR,a 
      00220C 9F               [ 1] 5964 	ld a,xl
      00220D 4A               [ 1] 5965 	dec a 
      00220E 35 55 50 E0      [ 1] 5966 	mov IWDG_KR,#IWDG_KEY_ACCESS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002212 C7 50 E2         [ 1] 5967 	ld IWDG_RLR,a 
      002215 35 AA 50 E0      [ 1] 5968 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002219 81               [ 4] 5969 	ret 
                                   5970 
                                   5971 
                                   5972 ;-----------------------------------
                                   5973 ; BASIC: IWDGREF  
                                   5974 ; refresh independant watchdog count down 
                                   5975 ; timer before it reset MCU. 
                                   5976 ;-----------------------------------
      00221A                       5977 refresh_iwdg:
      00221A 35 AA 50 E0      [ 1] 5978 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      00221E 81               [ 4] 5979 	ret 
                                   5980 
                                   5981 
                                   5982 ;-------------------------------------
                                   5983 ; BASIC: LOG(expr)
                                   5984 ; return logarithm base 2 of expr 
                                   5985 ; this is the position of most significant
                                   5986 ; bit set. 
                                   5987 ; input: 
                                   5988 ; output:
                                   5989 ;   X     log2 
                                   5990 ;   A     TK_INTGR 
                                   5991 ;*********************************
      00221F                       5992 log2:
      00221F CD 12 29         [ 4] 5993 	call func_args 
      002222 A1 01            [ 1] 5994 	cp a,#1 
      002224 27 03            [ 1] 5995 	jreq 1$
      002226 CC 07 7F         [ 2] 5996 	jp syntax_error 
      002229 CD 0F E5         [ 4] 5997 1$: call dpop
      00222C                       5998 leading_one:
      00222C 5D               [ 2] 5999 	tnzw x 
      00222D 27 0A            [ 1] 6000 	jreq 4$
      00222F A6 0F            [ 1] 6001 	ld a,#15 
      002231 59               [ 2] 6002 2$: rlcw x 
      002232 25 03            [ 1] 6003     jrc 3$
      002234 4A               [ 1] 6004 	dec a 
      002235 20 FA            [ 2] 6005 	jra 2$
      002237 5F               [ 1] 6006 3$: clrw x 
      002238 97               [ 1] 6007     ld xl,a
      002239 A6 04            [ 1] 6008 4$:	ld a,#TK_INTGR
      00223B 81               [ 4] 6009 	ret 
                                   6010 
                                   6011 ;-----------------------------------
                                   6012 ; BASIC: PWR(expr) 
                                   6013 ; expr ->{0..15}
                                   6014 ; return 2^expr 
                                   6015 ; output:
                                   6016 ;    x    2^expr 
                                   6017 ;-----------------------------------
      00223C                       6018 pwr2:
      00223C CD 12 29         [ 4] 6019     call func_args 
      00223F A1 01            [ 1] 6020 	cp a,#1
      002241 27 03            [ 1] 6021 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      002243 CC 07 7F         [ 2] 6022 	jp syntax_error 
      002246 CD 0F E5         [ 4] 6023 1$: call dpop 
      002249 9F               [ 1] 6024 	ld a,xl 
      00224A A4 0F            [ 1] 6025 	and a,#15
      00224C 5F               [ 1] 6026 	clrw x 
      00224D 5C               [ 2] 6027 	incw x 
      00224E 4D               [ 1] 6028 2$: tnz a 
      00224F 27 04            [ 1] 6029 	jreq 3$
      002251 58               [ 2] 6030 	slaw x 
      002252 4A               [ 1] 6031 	dec a 
      002253 20 F9            [ 2] 6032 	jra 2$ 
      002255 A6 04            [ 1] 6033 3$: ld a,#TK_INTGR
      002257 81               [ 4] 6034 	ret 
                                   6035 
                                   6036 
                                   6037 ;------------------------------
                                   6038 ;      dictionary 
                                   6039 ; format:
                                   6040 ;   link:   2 bytes 
                                   6041 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6042 ;   cmd_name: 16 byte max 
                                   6043 ;   code_address: 2 bytes 
                                   6044 ;------------------------------
                                   6045 	.macro _dict_entry len,name,cmd 
                                   6046 	.word LINK 
                                   6047 	LINK=.
                                   6048 name:
                                   6049 	.byte len 	
                                   6050 	.ascii "name"
                                   6051 	.word cmd 
                                   6052 	.endm 
                                   6053 
                           000000  6054 	LINK=0
      002258                       6055 kword_end:
      002258                       6056 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      002258 00 00                    1 	.word LINK 
                           00225A     2 	LINK=.
      00225A                          3 XPEEK:
      00225A 45                       4 	.byte 5+F_IFUNC 	
      00225B 58 50 45 45 4B           5 	.ascii "XPEEK"
      002260 18 1A                    6 	.word xpeek 
      002262                       6057 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      002262 22 5A                    1 	.word LINK 
                           002264     2 	LINK=.
      002264                          3 XOR:
      002264 43                       4 	.byte 3+F_IFUNC 	
      002265 58 4F 52                 5 	.ascii "XOR"
      002268 20 38                    6 	.word bit_xor 
      00226A                       6058 	_dict_entry,5,WRITE,write  
      00226A 22 64                    1 	.word LINK 
                           00226C     2 	LINK=.
      00226C                          3 WRITE:
      00226C 05                       4 	.byte 5 	
      00226D 57 52 49 54 45           5 	.ascii "WRITE"
      002272 1E 60                    6 	.word write 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002274                       6059 	_dict_entry,5,WORDS,words 
      002274 22 6C                    1 	.word LINK 
                           002276     2 	LINK=.
      002276                          3 WORDS:
      002276 05                       4 	.byte 5 	
      002277 57 4F 52 44 53           5 	.ascii "WORDS"
      00227C 21 7B                    6 	.word words 
      00227E                       6060 	_dict_entry 4,WAIT,wait 
      00227E 22 76                    1 	.word LINK 
                           002280     2 	LINK=.
      002280                          3 WAIT:
      002280 04                       4 	.byte 4 	
      002281 57 41 49 54              5 	.ascii "WAIT"
      002285 17 61                    6 	.word wait 
      002287                       6061 	_dict_entry,3+F_IFUNC,USR,usr
      002287 22 80                    1 	.word LINK 
                           002289     2 	LINK=.
      002289                          3 USR:
      002289 43                       4 	.byte 3+F_IFUNC 	
      00228A 55 53 52                 5 	.ascii "USR"
      00228D 1F 11                    6 	.word usr 
      00228F                       6062 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00228F 22 89                    1 	.word LINK 
                           002291     2 	LINK=.
      002291                          3 UFLASH:
      002291 46                       4 	.byte 6+F_IFUNC 	
      002292 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002298 1F 0B                    6 	.word uflash 
      00229A                       6063 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      00229A 22 91                    1 	.word LINK 
                           00229C     2 	LINK=.
      00229C                          3 UBOUND:
      00229C 46                       4 	.byte 6+F_IFUNC 	
      00229D 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0022A3 13 C8                    6 	.word ubound 
      0022A5                       6064 	_dict_entry,4,TONE,tone  
      0022A5 22 9C                    1 	.word LINK 
                           0022A7     2 	LINK=.
      0022A7                          3 TONE:
      0022A7 04                       4 	.byte 4 	
      0022A8 54 4F 4E 45              5 	.ascii "TONE"
      0022AC 1A 03                    6 	.word tone 
      0022AE                       6065 	_dict_entry,2,TO,to
      0022AE 22 A7                    1 	.word LINK 
                           0022B0     2 	LINK=.
      0022B0                          3 TO:
      0022B0 02                       4 	.byte 2 	
      0022B1 54 4F                    5 	.ascii "TO"
      0022B3 18 78                    6 	.word to 
      0022B5                       6066 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      0022B5 22 B0                    1 	.word LINK 
                           0022B7     2 	LINK=.
      0022B7                          3 TIMEOUT:
      0022B7 47                       4 	.byte 7+F_IFUNC 	
      0022B8 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0022BF 21 C6                    6 	.word timeout 
      0022C1                       6067 	_dict_entry,5,TIMER,set_timer
      0022C1 22 B7                    1 	.word LINK 
                           0022C3     2 	LINK=.
      0022C3                          3 TIMER:
      0022C3 05                       4 	.byte 5 	
      0022C4 54 49 4D 45 52           5 	.ascii "TIMER"
      0022C9 21 B5                    6 	.word set_timer 
      0022CB                       6068 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      0022CB 22 C3                    1 	.word LINK 
                           0022CD     2 	LINK=.
      0022CD                          3 TICKS:
      0022CD 45                       4 	.byte 5+F_IFUNC 	
      0022CE 54 49 43 4B 53           5 	.ascii "TICKS"
      0022D3 1F E0                    6 	.word get_ticks 
      0022D5                       6069 	_dict_entry,4,STOP,stop 
      0022D5 22 CD                    1 	.word LINK 
                           0022D7     2 	LINK=.
      0022D7                          3 STOP:
      0022D7 04                       4 	.byte 4 	
      0022D8 53 54 4F 50              5 	.ascii "STOP"
      0022DC 19 F4                    6 	.word stop 
      0022DE                       6070 	_dict_entry,4,STEP,step 
      0022DE 22 D7                    1 	.word LINK 
                           0022E0     2 	LINK=.
      0022E0                          3 STEP:
      0022E0 04                       4 	.byte 4 	
      0022E1 53 54 45 50              5 	.ascii "STEP"
      0022E5 18 A8                    6 	.word step 
      0022E7                       6071 	_dict_entry,5,SLEEP,sleep 
      0022E7 22 E0                    1 	.word LINK 
                           0022E9     2 	LINK=.
      0022E9                          3 SLEEP:
      0022E9 05                       4 	.byte 5 	
      0022EA 53 4C 45 45 50           5 	.ascii "SLEEP"
      0022EF 1F 79                    6 	.word sleep 
      0022F1                       6072 	_dict_entry,4+F_IFUNC,SIZE,size
      0022F1 22 E9                    1 	.word LINK 
                           0022F3     2 	LINK=.
      0022F3                          3 SIZE:
      0022F3 44                       4 	.byte 4+F_IFUNC 	
      0022F4 53 49 5A 45              5 	.ascii "SIZE"
      0022F8 13 BE                    6 	.word size 
      0022FA                       6073     _dict_entry,4,SHOW,show 
      0022FA 22 F3                    1 	.word LINK 
                           0022FC     2 	LINK=.
      0022FC                          3 SHOW:
      0022FC 04                       4 	.byte 4 	
      0022FD 53 48 4F 57              5 	.ascii "SHOW"
      002301 13 A4                    6 	.word show 
      002303                       6074 	_dict_entry,4,SAVE,save
      002303 22 FC                    1 	.word LINK 
                           002305     2 	LINK=.
      002305                          3 SAVE:
      002305 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      002306 53 41 56 45              5 	.ascii "SAVE"
      00230A 1C 4F                    6 	.word save 
      00230C                       6075 	_dict_entry 3,RUN,run
      00230C 23 05                    1 	.word LINK 
                           00230E     2 	LINK=.
      00230E                          3 RUN:
      00230E 03                       4 	.byte 3 	
      00230F 52 55 4E                 5 	.ascii "RUN"
      002312 19 B1                    6 	.word run 
      002314                       6076 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      002314 23 0E                    1 	.word LINK 
                           002316     2 	LINK=.
      002316                          3 RSHIFT:
      002316 46                       4 	.byte 6+F_IFUNC 	
      002317 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00231D 20 73                    6 	.word rshift 
      00231F                       6077 	_dict_entry,3+F_IFUNC,RND,random 
      00231F 23 16                    1 	.word LINK 
                           002321     2 	LINK=.
      002321                          3 RND:
      002321 43                       4 	.byte 3+F_IFUNC 	
      002322 52 4E 44                 5 	.ascii "RND"
      002325 21 11                    6 	.word random 
      002327                       6078 	_dict_entry,6,RETURN,return 
      002327 23 21                    1 	.word LINK 
                           002329     2 	LINK=.
      002329                          3 RETURN:
      002329 06                       4 	.byte 6 	
      00232A 52 45 54 55 52 4E        5 	.ascii "RETURN"
      002330 19 91                    6 	.word return 
      002332                       6079 	_dict_entry 6,REMARK,rem 
      002332 23 29                    1 	.word LINK 
                           002334     2 	LINK=.
      002334                          3 REMARK:
      002334 06                       4 	.byte 6 	
      002335 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      00233B 17 5B                    6 	.word rem 
      00233D                       6080 	_dict_entry,6,REBOOT,cold_start 
      00233D 23 34                    1 	.word LINK 
                           00233F     2 	LINK=.
      00233F                          3 REBOOT:
      00233F 06                       4 	.byte 6 	
      002340 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002346 05 60                    6 	.word cold_start 
      002348                       6081 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002348 23 3F                    1 	.word LINK 
                           00234A     2 	LINK=.
      00234A                          3 QKEY:
      00234A 44                       4 	.byte 4+F_IFUNC 	
      00234B 51 4B 45 59              5 	.ascii "QKEY"
      00234F 1E CE                    6 	.word qkey 
      002351                       6082 	_dict_entry,3+F_IFUNC,PWR,pwr2
      002351 23 4A                    1 	.word LINK 
                           002353     2 	LINK=.
      002353                          3 PWR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002353 43                       4 	.byte 3+F_IFUNC 	
      002354 50 57 52                 5 	.ascii "PWR"
      002357 22 3C                    6 	.word pwr2 
      002359                       6083 	_dict_entry 5,PRINT,print 
      002359 23 53                    1 	.word LINK 
                           00235B     2 	LINK=.
      00235B                          3 PRINT:
      00235B 05                       4 	.byte 5 	
      00235C 50 52 49 4E 54           5 	.ascii "PRINT"
      002361 16 56                    6 	.word print 
      002363                       6084 	_dict_entry,4+F_CONST,POUT,OUTP 
      002363 23 5B                    1 	.word LINK 
                           002365     2 	LINK=.
      002365                          3 POUT:
      002365 C4                       4 	.byte 4+F_CONST 	
      002366 50 4F 55 54              5 	.ascii "POUT"
      00236A 00 01                    6 	.word OUTP 
      00236C                       6085 	_dict_entry,4,POKE,poke 
      00236C 23 65                    1 	.word LINK 
                           00236E     2 	LINK=.
      00236E                          3 POKE:
      00236E 04                       4 	.byte 4 	
      00236F 50 4F 4B 45              5 	.ascii "POKE"
      002373 17 F4                    6 	.word poke 
      002375                       6086 	_dict_entry,4+F_CONST,PINP,INP 
      002375 23 6E                    1 	.word LINK 
                           002377     2 	LINK=.
      002377                          3 PINP:
      002377 C4                       4 	.byte 4+F_CONST 	
      002378 50 49 4E 50              5 	.ascii "PINP"
      00237C 00 00                    6 	.word INP 
      00237E                       6087 	_dict_entry,4+F_IFUNC,PEEK,peek 
      00237E 23 77                    1 	.word LINK 
                           002380     2 	LINK=.
      002380                          3 PEEK:
      002380 44                       4 	.byte 4+F_IFUNC 	
      002381 50 45 45 4B              5 	.ascii "PEEK"
      002385 18 07                    6 	.word peek 
      002387                       6088 	_dict_entry,5,PMODE,pin_mode 
      002387 23 80                    1 	.word LINK 
                           002389     2 	LINK=.
      002389                          3 PMODE:
      002389 05                       4 	.byte 5 	
      00238A 50 4D 4F 44 45           5 	.ascii "PMODE"
      00238F 20 9C                    6 	.word pin_mode 
      002391                       6089 	_dict_entry,5,PAUSE,pause 
      002391 23 89                    1 	.word LINK 
                           002393     2 	LINK=.
      002393                          3 PAUSE:
      002393 05                       4 	.byte 5 	
      002394 50 41 55 53 45           5 	.ascii "PAUSE"
      002399 1F 84                    6 	.word pause 
      00239B                       6090 	_dict_entry,2+F_IFUNC,OR,bit_or
      00239B 23 93                    1 	.word LINK 
                           00239D     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      00239D                          3 OR:
      00239D 42                       4 	.byte 2+F_IFUNC 	
      00239E 4F 52                    5 	.ascii "OR"
      0023A0 20 1A                    6 	.word bit_or 
      0023A2                       6091 	_dict_entry,3+F_CONST,ODR,GPIO_ODR
      0023A2 23 9D                    1 	.word LINK 
                           0023A4     2 	LINK=.
      0023A4                          3 ODR:
      0023A4 C3                       4 	.byte 3+F_CONST 	
      0023A5 4F 44 52                 5 	.ascii "ODR"
      0023A8 00 00                    6 	.word GPIO_ODR 
      0023AA                       6092 	_dict_entry,3+F_IFUNC,NOT,func_not 
      0023AA 23 A4                    1 	.word LINK 
                           0023AC     2 	LINK=.
      0023AC                          3 NOT:
      0023AC 43                       4 	.byte 3+F_IFUNC 	
      0023AD 4E 4F 54                 5 	.ascii "NOT"
      0023B0 21 D3                    6 	.word func_not 
      0023B2                       6093 	_dict_entry,3,NEW,new
      0023B2 23 AC                    1 	.word LINK 
                           0023B4     2 	LINK=.
      0023B4                          3 NEW:
      0023B4 03                       4 	.byte 3 	
      0023B5 4E 45 57                 5 	.ascii "NEW"
      0023B8 1B 8D                    6 	.word new 
      0023BA                       6094 	_dict_entry,4,NEXT,next 
      0023BA 23 B4                    1 	.word LINK 
                           0023BC     2 	LINK=.
      0023BC                          3 NEXT:
      0023BC 04                       4 	.byte 4 	
      0023BD 4E 45 58 54              5 	.ascii "NEXT"
      0023C1 18 D0                    6 	.word next 
      0023C3                       6095 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0023C3 23 BC                    1 	.word LINK 
                           0023C5     2 	LINK=.
      0023C5                          3 LSHIFT:
      0023C5 46                       4 	.byte 6+F_IFUNC 	
      0023C6 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0023CC 20 56                    6 	.word lshift 
      0023CE                       6096 	_dict_entry,3+F_IFUNC,LOG,log2 
      0023CE 23 C5                    1 	.word LINK 
                           0023D0     2 	LINK=.
      0023D0                          3 LOG:
      0023D0 43                       4 	.byte 3+F_IFUNC 	
      0023D1 4C 4F 47                 5 	.ascii "LOG"
      0023D4 22 1F                    6 	.word log2 
      0023D6                       6097 	_dict_entry,4,LOAD,load 
      0023D6 23 D0                    1 	.word LINK 
                           0023D8     2 	LINK=.
      0023D8                          3 LOAD:
      0023D8 04                       4 	.byte 4 	
      0023D9 4C 4F 41 44              5 	.ascii "LOAD"
      0023DD 1D 44                    6 	.word load 
      0023DF                       6098 	_dict_entry 4,LIST,list
      0023DF 23 D8                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                           0023E1     2 	LINK=.
      0023E1                          3 LIST:
      0023E1 04                       4 	.byte 4 	
      0023E2 4C 49 53 54              5 	.ascii "LIST"
      0023E6 14 12                    6 	.word list 
      0023E8                       6099 	_dict_entry 3,LET,let 
      0023E8 23 E1                    1 	.word LINK 
                           0023EA     2 	LINK=.
      0023EA                          3 LET:
      0023EA 03                       4 	.byte 3 	
      0023EB 4C 45 54                 5 	.ascii "LET"
      0023EE 13 EA                    6 	.word let 
      0023F0                       6100 	_dict_entry,3+F_IFUNC,KEY,key 
      0023F0 23 EA                    1 	.word LINK 
                           0023F2     2 	LINK=.
      0023F2                          3 KEY:
      0023F2 43                       4 	.byte 3+F_IFUNC 	
      0023F3 4B 45 59                 5 	.ascii "KEY"
      0023F6 1E C6                    6 	.word key 
      0023F8                       6101 	_dict_entry,7,IWDGREF,refresh_iwdg
      0023F8 23 F2                    1 	.word LINK 
                           0023FA     2 	LINK=.
      0023FA                          3 IWDGREF:
      0023FA 07                       4 	.byte 7 	
      0023FB 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      002402 22 1A                    6 	.word refresh_iwdg 
      002404                       6102 	_dict_entry,6,IWDGEN,enable_iwdg
      002404 23 FA                    1 	.word LINK 
                           002406     2 	LINK=.
      002406                          3 IWDGEN:
      002406 06                       4 	.byte 6 	
      002407 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      00240D 21 E2                    6 	.word enable_iwdg 
      00240F                       6103 	_dict_entry,5,INPUT,input_var  
      00240F 24 06                    1 	.word LINK 
                           002411     2 	LINK=.
      002411                          3 INPUT:
      002411 05                       4 	.byte 5 	
      002412 49 4E 50 55 54           5 	.ascii "INPUT"
      002417 16 E7                    6 	.word input_var 
      002419                       6104 	_dict_entry,2,IF,if 
      002419 24 11                    1 	.word LINK 
                           00241B     2 	LINK=.
      00241B                          3 IF:
      00241B 02                       4 	.byte 2 	
      00241C 49 46                    5 	.ascii "IF"
      00241E 18 3A                    6 	.word if 
      002420                       6105 	_dict_entry,3+F_CONST,IDR,GPIO_IDR
      002420 24 1B                    1 	.word LINK 
                           002422     2 	LINK=.
      002422                          3 IDR:
      002422 C3                       4 	.byte 3+F_CONST 	
      002423 49 44 52                 5 	.ascii "IDR"
      002426 00 01                    6 	.word GPIO_IDR 
      002428                       6106 	_dict_entry,3,HEX,hex_base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002428 24 22                    1 	.word LINK 
                           00242A     2 	LINK=.
      00242A                          3 HEX:
      00242A 03                       4 	.byte 3 	
      00242B 48 45 58                 5 	.ascii "HEX"
      00242E 13 B4                    6 	.word hex_base 
      002430                       6107 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      002430 24 2A                    1 	.word LINK 
                           002432     2 	LINK=.
      002432                          3 GPIO:
      002432 44                       4 	.byte 4+F_IFUNC 	
      002433 47 50 49 4F              5 	.ascii "GPIO"
      002437 1E D8                    6 	.word gpio 
      002439                       6108 	_dict_entry,4,GOTO,goto 
      002439 24 32                    1 	.word LINK 
                           00243B     2 	LINK=.
      00243B                          3 GOTO:
      00243B 04                       4 	.byte 4 	
      00243C 47 4F 54 4F              5 	.ascii "GOTO"
      002440 19 3F                    6 	.word goto 
      002442                       6109 	_dict_entry,5,GOSUB,gosub 
      002442 24 3B                    1 	.word LINK 
                           002444     2 	LINK=.
      002444                          3 GOSUB:
      002444 05                       4 	.byte 5 	
      002445 47 4F 53 55 42           5 	.ascii "GOSUB"
      00244A 19 4C                    6 	.word gosub 
      00244C                       6110 	_dict_entry,6,FORGET,forget 
      00244C 24 44                    1 	.word LINK 
                           00244E     2 	LINK=.
      00244E                          3 FORGET:
      00244E 06                       4 	.byte 6 	
      00244F 46 4F 52 47 45 54        5 	.ascii "FORGET"
      002455 1D 7F                    6 	.word forget 
      002457                       6111 	_dict_entry,3,FOR,for 
      002457 24 4E                    1 	.word LINK 
                           002459     2 	LINK=.
      002459                          3 FOR:
      002459 03                       4 	.byte 3 	
      00245A 46 4F 52                 5 	.ascii "FOR"
      00245D 18 4E                    6 	.word for 
      00245F                       6112 	_dict_entry,4,FCPU,fcpu 
      00245F 24 59                    1 	.word LINK 
                           002461     2 	LINK=.
      002461                          3 FCPU:
      002461 04                       4 	.byte 4 	
      002462 46 43 50 55              5 	.ascii "FCPU"
      002466 20 90                    6 	.word fcpu 
      002468                       6113 	_dict_entry,6+F_CONST,EEPROM,EEPROM_BASE  
      002468 24 61                    1 	.word LINK 
                           00246A     2 	LINK=.
      00246A                          3 EEPROM:
      00246A C6                       4 	.byte 6+F_CONST 	
      00246B 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      002471 40 00                    6 	.word EEPROM_BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      002473                       6114 	_dict_entry,6+F_CMD,DWRITE,digital_write
      002473 24 6A                    1 	.word LINK 
                           002475     2 	LINK=.
      002475                          3 DWRITE:
      002475 06                       4 	.byte 6+F_CMD 	
      002476 44 57 52 49 54 45        5 	.ascii "DWRITE"
      00247C 1B 02                    6 	.word digital_write 
      00247E                       6115 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00247E 24 75                    1 	.word LINK 
                           002480     2 	LINK=.
      002480                          3 DREAD:
      002480 45                       4 	.byte 5+F_IFUNC 	
      002481 44 52 45 41 44           5 	.ascii "DREAD"
      002486 1A D0                    6 	.word digital_read 
      002488                       6116 	_dict_entry,3,DIR,directory 
      002488 24 80                    1 	.word LINK 
                           00248A     2 	LINK=.
      00248A                          3 DIR:
      00248A 03                       4 	.byte 3 	
      00248B 44 49 52                 5 	.ascii "DIR"
      00248E 1D CA                    6 	.word directory 
      002490                       6117 	_dict_entry,3,DEC,dec_base
      002490 24 8A                    1 	.word LINK 
                           002492     2 	LINK=.
      002492                          3 DEC:
      002492 03                       4 	.byte 3 	
      002493 44 45 43                 5 	.ascii "DEC"
      002496 13 B9                    6 	.word dec_base 
      002498                       6118 	_dict_entry,3+F_CONST,DDR,GPIO_DDR
      002498 24 92                    1 	.word LINK 
                           00249A     2 	LINK=.
      00249A                          3 DDR:
      00249A C3                       4 	.byte 3+F_CONST 	
      00249B 44 44 52                 5 	.ascii "DDR"
      00249E 00 02                    6 	.word GPIO_DDR 
      0024A0                       6119 	_dict_entry,3+F_CONST,CRL,GPIO_CR1
      0024A0 24 9A                    1 	.word LINK 
                           0024A2     2 	LINK=.
      0024A2                          3 CRL:
      0024A2 C3                       4 	.byte 3+F_CONST 	
      0024A3 43 52 4C                 5 	.ascii "CRL"
      0024A6 00 03                    6 	.word GPIO_CR1 
      0024A8                       6120 	_dict_entry,3+F_CONST,CRH,GPIO_CR2
      0024A8 24 A2                    1 	.word LINK 
                           0024AA     2 	LINK=.
      0024AA                          3 CRH:
      0024AA C3                       4 	.byte 3+F_CONST 	
      0024AB 43 52 48                 5 	.ascii "CRH"
      0024AE 00 04                    6 	.word GPIO_CR2 
      0024B0                       6121 	_dict_entry,4+F_CFUNC,CHAR,char
      0024B0 24 AA                    1 	.word LINK 
                           0024B2     2 	LINK=.
      0024B2                          3 CHAR:
      0024B2 84                       4 	.byte 4+F_CFUNC 	
      0024B3 43 48 41 52              5 	.ascii "CHAR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0024B7 1E 97                    6 	.word char 
      0024B9                       6122 	_dict_entry,3,BYE,bye 
      0024B9 24 B2                    1 	.word LINK 
                           0024BB     2 	LINK=.
      0024BB                          3 BYE:
      0024BB 03                       4 	.byte 3 	
      0024BC 42 59 45                 5 	.ascii "BYE"
      0024BF 1F 2F                    6 	.word bye 
      0024C1                       6123 	_dict_entry,5,BTOGL,bit_toggle
      0024C1 24 BB                    1 	.word LINK 
                           0024C3     2 	LINK=.
      0024C3                          3 BTOGL:
      0024C3 05                       4 	.byte 5 	
      0024C4 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0024C9 17 B5                    6 	.word bit_toggle 
      0024CB                       6124 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      0024CB 24 C3                    1 	.word LINK 
                           0024CD     2 	LINK=.
      0024CD                          3 BTEST:
      0024CD 45                       4 	.byte 5+F_IFUNC 	
      0024CE 42 54 45 53 54           5 	.ascii "BTEST"
      0024D3 17 C9                    6 	.word bit_test 
      0024D5                       6125 	_dict_entry,4,BSET,bit_set 
      0024D5 24 CD                    1 	.word LINK 
                           0024D7     2 	LINK=.
      0024D7                          3 BSET:
      0024D7 04                       4 	.byte 4 	
      0024D8 42 53 45 54              5 	.ascii "BSET"
      0024DC 17 8C                    6 	.word bit_set 
      0024DE                       6126 	_dict_entry,4,BRES,bit_reset
      0024DE 24 D7                    1 	.word LINK 
                           0024E0     2 	LINK=.
      0024E0                          3 BRES:
      0024E0 04                       4 	.byte 4 	
      0024E1 42 52 45 53              5 	.ascii "BRES"
      0024E5 17 A0                    6 	.word bit_reset 
      0024E7                       6127 	_dict_entry,5,BREAK,break 
      0024E7 24 E0                    1 	.word LINK 
                           0024E9     2 	LINK=.
      0024E9                          3 BREAK:
      0024E9 05                       4 	.byte 5 	
      0024EA 42 52 45 41 4B           5 	.ascii "BREAK"
      0024EF 1B 41                    6 	.word break 
      0024F1                       6128 	_dict_entry,3,AWU,awu 
      0024F1 24 E9                    1 	.word LINK 
                           0024F3     2 	LINK=.
      0024F3                          3 AWU:
      0024F3 03                       4 	.byte 3 	
      0024F4 41 57 55                 5 	.ascii "AWU"
      0024F7 1F 97                    6 	.word awu 
      0024F9                       6129 	_dict_entry,7,AUTORUN,autorun
      0024F9 24 F3                    1 	.word LINK 
                           0024FB     2 	LINK=.
      0024FB                          3 AUTORUN:
      0024FB 07                       4 	.byte 7 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      0024FC 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002503 1F 38                    6 	.word autorun 
      002505                       6130 	_dict_entry,3+F_IFUNC,ASC,ascii
      002505 24 FB                    1 	.word LINK 
                           002507     2 	LINK=.
      002507                          3 ASC:
      002507 43                       4 	.byte 3+F_IFUNC 	
      002508 41 53 43                 5 	.ascii "ASC"
      00250B 1E AB                    6 	.word ascii 
      00250D                       6131 	_dict_entry,3+F_IFUNC,AND,bit_and
      00250D 25 07                    1 	.word LINK 
                           00250F     2 	LINK=.
      00250F                          3 AND:
      00250F 43                       4 	.byte 3+F_IFUNC 	
      002510 41 4E 44                 5 	.ascii "AND"
      002513 1F FC                    6 	.word bit_and 
      002515                       6132 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      002515 25 0F                    1 	.word LINK 
                           002517     2 	LINK=.
      002517                          3 ADCREAD:
      002517 47                       4 	.byte 7+F_IFUNC 	
      002518 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      00251F 1A 9A                    6 	.word analog_read 
      002521                       6133 	_dict_entry,5,ADCON,power_adc 
      002521 25 17                    1 	.word LINK 
                           002523     2 	LINK=.
      002523                          3 ADCON:
      002523 05                       4 	.byte 5 	
      002524 41 44 43 4F 4E           5 	.ascii "ADCON"
      002529 1A 51                    6 	.word power_adc 
      00252B                       6134 kword_dict:
      00252B                       6135 	_dict_entry,3+F_IFUNC,ABS,abs
      00252B 25 23                    1 	.word LINK 
                           00252D     2 	LINK=.
      00252D                          3 ABS:
      00252D 43                       4 	.byte 3+F_IFUNC 	
      00252E 41 42 53                 5 	.ascii "ABS"
      002531 1F E6                    6 	.word abs 
                                   6136 	
                                   6137 
      002580                       6138 	.bndry 128 ; align on FLASH block.
                                   6139 ; free space for user application  
      002580                       6140 user_space:
                                   6141 ; USR() function test
      002580 89               [ 2] 6142 	pushw x 
      002581 72 1A 50 0A      [ 1] 6143 	bset PC_ODR,#5 
      002585 85               [ 2] 6144 	popw x 
      002586 CD 1F 8E         [ 4] 6145 	call pause02 
      002589 72 1B 50 0A      [ 1] 6146 	bres PC_ODR,#5 
      00258D 81               [ 4] 6147 	ret
                                   6148 
                                   6149 	.area FLASH_DRIVE (ABS)
      010000                       6150 	.org 0x10000
      010000                       6151 fdrive:
      010000 00 00 00 00           6152 .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00252D R   |   5 ADCON      002523 R
  5 ADCREAD    002517 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDR    =  000001 
    ADD_SPAC=  000003     |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   5 AND        00250F R   |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        002507 R   |     ATTRIB  =  000002 
  5 AUTORUN    0024FB R   |     AUTORUN_=  004000     |   5 AWU        0024F3 R
  5 AWUHandl   00000A R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_CSR_=  000004     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCK_ER=  000000     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  000005     |   5 BREAK      0024E9 R
  5 BRES       0024E0 R   |   5 BSET       0024D7 R   |     BSIZE   =  000001 
    BSP     =  000008     |   5 BTEST      0024CD R   |   5 BTOGL      0024C3 R
    BTW     =  000001     |     BUFIDX  =  000003     |   5 BYE        0024BB R
    C       =  000001     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       0024B2 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000008 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        0024AA R
  5 CRL        0024A2 R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000006     |     CURR    =  000002     |     CX_BPTR =  000001 
    CX_CNT  =  000005     |     CX_IN   =  000004     |     CX_LNO  =  000003 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |   5 DDR        00249A R   |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   5 DEC        002492 R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        00248A R   |     DIVIDND =  000007     |     DIVISR  =  000005 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   5 DREAD      002480 R
    DSTACK_S=  000040     |   5 DWRITE     002475 R   |   5 EEPROM     00246A R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EOF     =  0000FF     |     ERR_BAD_=  00000A     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_L=  000005     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       002461 R   |     FF      =  00000C     |     FFOR    =  000002 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   5 FOR        002459 R   |   5 FORGET     00244E R
    FRUN    =  000000     |     FSIZE   =  000001     |     FSLEEP  =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      002444 R
    GOS_RET =  000003     |   5 GOTO       00243B R   |   5 GPIO       002432 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   5 HEX        00242A R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        002422 R   |   5 IF         00241B R   |     IN      =  000007 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      002411 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  000003 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     002406 R
  5 IWDGREF    0023FA R   |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        0023F2 R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        0023EA R
    LINENO  =  000005     |   5 LINK    =  00252D R   |   5 LIST       0023E1 R
    LL      =  000002     |     LLEN    =  000002     |     LL_HB   =  000001 
    LNO     =  000005     |     LN_PTR  =  000005     |   5 LOAD       0023D8 R
  5 LOG        0023D0 R   |   5 LSHIFT     0023C5 R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        0023B4 R
  5 NEXT       0023BC R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NL      =  00000A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   5 NOT        0023AC R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R
  5 ODR        0023A4 R   |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         00239D R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000028     |   5 PAUSE      002393 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       002380 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]

Symbol Table

    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       002377 R   |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      002389 R
  5 POKE       00236E R   |   5 POUT       002365 R   |     PREV    =  000001 
  5 PRINT      00235B R   |     PROD    =  000002     |     PSIZE   =  000001 
  5 PWR        002353 R   |   5 QKEY       00234A R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 REBOOT     00233F R
  5 REG_A      000989 R   |   5 REG_CC     00098D R   |   5 REG_EPC    00097C R
  5 REG_SP     000992 R   |   5 REG_X      000985 R   |   5 REG_Y      000981 R
    RELOP   =  000005     |   5 REMARK     002334 R   |     RETL1   =  000001 
  5 RETURN     002329 R   |   5 RND        002321 R   |     ROP     =  004800 
  5 RSHIFT     002316 R   |     RST_SR  =  0050B3     |   5 RUN        00230E R
    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       002305 R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       0022FC R   |     SIGN    =  000001 
  5 SIZE       0022F3 R   |     SKIP    =  000006     |   5 SLEEP      0022E9 R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     00093F R   |   5 STEP       0022E0 R
  5 STOP       0022D7 R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      0022CD R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   5 TIMEOUT    0022B7 R   |   5 TIMER      0022C3 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000002 
    TK_CFUNC=  000008     |     TK_CHAR =  000003     |     TK_CMD  =  000006 
    TK_COLON=  000001     |     TK_COMMA=  00000D     |     TK_CONST=  000009 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]

Symbol Table

    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000007     |     TK_INTGR=  000004     |     TK_LE   =  000036 
    TK_LPARE=  00000B     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  00000A 
    TK_RPARE=  00000C     |     TK_SHARP=  00000E     |     TK_VAR  =  000005 
  5 TO         0022B0 R   |   5 TONE       0022A7 R   |   5 Timer4Up   000027 R
  5 TrapHand   000018 R   |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     00229C R   |   5 UFLASH     002291 R
  5 USER_ABO   000070 R   |   5 USR        002289 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   5 UserButt   00003D R
    VSIZ    =  000002     |     VSIZE   =  000002     |     VT      =  00000B 
  5 WAIT       002280 R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      002276 R   |   5 WRITE      00226C R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XADR    =  000001     |     XMASK   =  000001 
  5 XOR        002264 R   |   5 XPEEK      00225A R   |     XSAVE   =  000003 
    YSAVE   =  000003     |   5 abs        001FE6 R   |   1 acc16      000008 R
  1 acc24      000007 R   |   1 acc8       000009 R   |   5 accept_c   000B33 R
  5 add        0010C6 R   |   5 analog_r   001A9A R   |   5 ansi_seq   000AF5 R
  5 arduino_   0020F1 R   |   5 arg_list   001205 R   |   1 array_si   00001F R
  5 ascii      001EAB R   |   5 at_tst     000E00 R   |   5 atoi24     000F13 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]

Symbol Table

  5 atoi_exi   000F81 R   |   5 autorun    001F38 R   |   5 autorun_   00063C R
  5 awu        001F97 R   |   5 awu02      001FA1 R   |   5 bad_port   001F06 R
  1 base       000006 R   |   1 basicptr   000004 R   |   5 bin_exit   000D04 R
  5 bit_and    001FFC R   |   5 bit_or     00201A R   |   5 bit_rese   0017A0 R
  5 bit_set    00178C R   |   5 bit_test   0017C9 R   |   5 bit_togg   0017B5 R
  5 bit_xor    002038 R   |   5 bkslsh_t   000DAB R   |   5 bksp       0001CE R
  5 break      001B41 R   |   5 break_po   001B6F R   |   5 bye        001F2F R
  5 char       001E97 R   |   5 check_fu   0003F1 R   |   5 clear_ba   000651 R
  5 clear_va   0004FB R   |   5 clock_in   00008B R   |   5 cmd_itf    000B57 R
  5 cmd_name   001171 R   |   5 cmp_name   001BE3 R   |   5 cold_sta   000560 R
  5 colon_ts   000DD4 R   |   5 comma_ts   000DDF R   |   5 compile    000400 R
  5 convert_   000C8C R   |   1 count      000003 R   |   5 cp_loop    0011B4 R
  5 create_g   000350 R   |   5 cstk_pro   001090 R   |   5 dash_tst   000DF5 R
  5 ddrop      00100C R   |   5 ddrop_n    001049 R   |   5 ddup       001015 R
  5 dec_base   0013B9 R   |   5 del_back   000B24 R   |   5 del_line   000318 R
  5 del_ln     000B15 R   |   5 delete     0001DE R   |   5 digital_   001AD0 R
  5 digital_   001B02 R   |   5 dir_loop   001DD6 R   |   5 director   001DCA R
  5 divide     00111C R   |   5 divu24_8   000A82 R   |   5 dotr       001099 R
  5 dotr_loo   0010AE R   |   5 dots       001066 R   |   5 dpick      001026 R
  5 dpop       000FE5 R   |   5 dpush      000FD8 R   |   5 drive_fr   001E53 R
  3 dstack     001740 R   |   3 dstack_e   001780 R   |   5 dstk_pro   00105C R
  1 dstkptr    000018 R   |   5 dswap      000FF2 R   |   5 enable_i   0021E2 R
  5 eql_tst    000E60 R   |   5 equal      001649 R   |   5 err_bad_   00072E R
  5 err_cmd_   0006EF R   |   5 err_div0   0006B1 R   |   5 err_dupl   00070A R
  5 err_math   000697 R   |   5 err_mem_   00067A R   |   5 err_msg    000662 R
  5 err_no_a   00073B R   |   5 err_no_l   0006C1 R   |   5 err_not_   00071C R
  5 err_run_   0006D8 R   |   5 err_synt   000688 R   |   5 escaped    000CA1 R
  5 expect     0011F8 R   |   5 expr_exi   00134A R   |   5 expressi   001309 R
  5 factor     001260 R   |   1 farptr     000012 R   |   5 fcpu       002090 R
  7 fdrive     010000 R   |   5 fetch      001035 R   |   5 fetchc     000C44 R
  1 ffree      000015 R   |   5 file_cou   001E4B R   |   5 final_te   000AEF R
  5 first_li   00143D R   |   1 flags      000021 R   |   5 for        00184E R
  5 forget     001D7F R   |   1 free_ram   000057 R   |   5 func_arg   001229 R
  5 func_not   0021D3 R   |   5 ge         00164B R   |   5 get_arra   001239 R
  5 get_tick   001FE0 R   |   5 get_toke   000D46 R   |   5 getc       0001BB R
  5 go_commo   00196F R   |   5 gosub      00194C R   |   5 goto       00193F R
  5 gpio       001ED8 R   |   5 gt         001647 R   |   5 gt_tst     000E6B R
  5 hex_base   0013B4 R   |   5 if         00183A R   |   1 in         000001 R
  1 in.saved   000002 R   |   1 in.w       000000 R   |   5 incr_far   001B98 R
  5 input_ex   001758 R   |   5 input_lo   0016F3 R   |   5 input_va   0016E7 R
  5 insert_l   000389 R   |   5 insert_l   0003EE R   |   5 interp     0007D6 R
  5 interp_l   000816 R   |   5 invalid    000B9C R   |   5 invalid_   000C1A R
  5 is_alpha   000509 R   |   5 is_digit   000EFE R   |   5 itoa       000A3B R
  5 itoa_loo   000A53 R   |   5 key        001EC6 R   |   5 kword_di   00252B R
  5 kword_en   002258 R   |   5 last_lin   001446 R   |   5 le         001650 R
  5 leading_   00222C R   |   5 ledoff     00088F R   |   5 ledon      00088A R
  5 ledtoggl   000894 R   |   5 left_arr   000AF5 R   |   5 left_par   00089D R
  5 let        0013EA R   |   5 let02      0013F4 R   |   5 lines_sk   00144B R
  5 list       001412 R   |   5 list_exi   001492 R   |   5 list_sta   00146E R
  5 load       001D44 R   |   5 load_aut   000618 R   |   5 load_fil   001D13 R
  5 log2       00221F R   |   5 logical_   0021C9 R   |   5 loop_bac   001918 R
  1 loop_dep   00001E R   |   5 loop_don   00192D R   |   5 lshift     002056 R
  5 lt         00164E R   |   5 lt_tst     000EA4 R   |   5 mem_peek   000BB9 R
  5 modulo     001160 R   |   5 move       0002B2 R   |   5 move_dow   0002D0 R
  5 move_exi   0002F1 R   |   5 move_loo   0002D5 R   |   5 move_up    0002C2 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]

Symbol Table

  5 mul_char   001638 R   |   5 multiply   0010D4 R   |   5 mulu24_8   000F85 R
  5 nbr_tst    000D81 R   |   5 ne         001653 R   |   5 neg_acc2   000AAA R
  5 new        001B8D R   |   5 next       0018D0 R   |   5 next_tok   000846 R
  5 no_match   0011C6 R   |   5 none       000D46 R   |   5 number     000C4A GR
  5 other      000EDC R   |   3 pad        001718 R   |   5 parse_bi   000CE4 R
  5 parse_in   000CA9 R   |   5 parse_ke   000D0C R   |   5 parse_qu   000C51 R
  5 pause      001F84 R   |   5 pause02    001F8E R   |   5 peek       001807 R
  5 peek_byt   000BE4 R   |   5 pin_mode   00209C R   |   5 plus_tst   000E34 R
  5 poke       0017F4 R   |   5 power_ad   001A51 R   |   5 prcnt_ts   000E55 R
  5 print      001656 R   |   5 print_ex   0016BB R   |   5 print_fa   000C29 R
  5 print_in   0009DF R   |   5 print_re   0008EC R   |   5 print_st   000BAC R
  5 prt_basi   0014E5 R   |   5 prt_cmd_   001495 R   |   5 prt_loop   00165A R
  5 prt_peek   000262 R   |   5 prt_quot   0014A9 R   |   5 prt_reg1   0008CD R
  5 prt_reg8   0008A8 R   |   5 prt_regs   0001F8 R   |   5 prti24     000997 R
  1 ptr16      000013 R   |   1 ptr8       000014 R   |   5 putc       0001B2 R
  5 puts       0001C4 R   |   5 pwr2       00223C R   |   5 qkey       001ECE R
  5 qmark_ts   000E0B R   |   5 random     002111 R   |   5 readln     000ACD R
  5 readln_l   000AD3 R   |   5 readln_q   000B48 R   |   5 refresh_   00221A R
  5 regs_sta   00023B R   |   5 rel_exit   0013A1 R   |   5 relation   00134D R
  5 relop_st   00163B R   |   5 rem        00175B R   |   5 repl       000B65 R
  5 repl_exi   000B8D R   |   5 reprint    000AF5 R   |   5 reset_co   001658 R
  5 rest_con   0016D7 R   |   5 return     001991 R   |   5 right_ar   000AF5 R
  5 rparnt_t   000DC9 R   |   5 rshift     002073 R   |   5 rt_msg     00076F R
  5 run        0019B1 R   |   5 run_it     0019D9 R   |   5 save       001C4F R
  5 save_con   0016C7 R   |   5 search_d   0011A3 R   |   5 search_e   0011F4 R
  5 search_f   001C04 R   |   5 search_l   0002F4 R   |   5 search_l   0002FC R
  5 search_n   0011A7 R   |   1 seedx      00000E R   |   1 seedy      000010 R
  5 seek_fdr   001BA6 R   |   5 select_p   0020E1 R   |   5 set_time   0021B5 R
  5 sharp_ts   000DEA R   |   5 show       0013A4 R   |   5 single_c   001634 R
  5 size       0013BE R   |   5 skip       000FBF R   |   5 slash_ts   000E4A R
  5 sleep      001F79 R   |   5 software   00051A R   |   5 spaces     0001EC R
  3 stack_fu   001780 R   |   3 stack_un   001800 R   |   5 star_tst   000E3F R
  5 step       0018A8 R   |   5 stop       0019F4 R   |   5 store      00103F R
  5 store_lo   0018BA R   |   5 str_matc   0011D5 R   |   5 str_tst    000D70 R
  5 strcmp     000293 R   |   5 strcpy     0002A4 R   |   5 strlen     000286 R
  5 substrac   0010CE R   |   5 syntax_e   00077F R   |   1 tab_widt   000022 R
  5 tb_error   000781 R   |   5 term       0012BC R   |   5 term01     0012C5 R
  5 term_exi   001306 R   |   5 test_p     000BA4 R   |   3 tib        0016C8 R
  5 tick_tst   000E22 R   |   1 ticks      00000A R   |   5 timeout    0021C6 R
  1 timer      00000C R   |   5 timer2_i   0000A1 R   |   5 timer4_i   0000AE R
  5 to         001878 R   |   5 to_upper   000F07 GR  |   5 token_ch   000EEB R
  5 token_ex   000EFB R   |   5 tone       001A03 R   |   1 txtbgn     00001A R
  1 txtend     00001C R   |   5 uart1_in   000177 R   |   5 uart1_se   000187 R
  5 ubound     0013C8 R   |   5 uflash     001F0B R   |   5 unget_to   000FD2 R
  5 unlock_e   0000C3 R   |   5 unlock_f   0000D1 R   |   5 user_spa   002580 R
  5 usr        001F11 R   |   1 vars       000023 R   |   5 wait       001761 R
  5 warm_ini   0005FB R   |   5 warm_sta   0007D3 R   |   5 words      00217B R
  5 write      001E60 R   |   5 write_bl   000154 R   |   5 write_by   0000DF R
  5 write_ee   00011B R   |   5 write_ex   00014F R   |   5 write_fl   000105 R
  5 xpeek      00181A R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     57   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   258E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      4   flags    8

