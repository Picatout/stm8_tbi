ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26 
                                     27 
                                     28 
                                     29     .module TBI_STM8
                                     30 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                     37     .list 
                                     38 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000000                         39 _dbg 
                           000001     1     DEBUG=1
                                     40 
                                     41 ;--------------------------------------
                                     42     .area DATA 
                                     43 ;--------------------------------------	
                                     44 
                           000050    45 	TIB_SIZE=80
                           000028    46     PAD_SIZE=40
                           000040    47 	DSTACK_SIZE=64 
                           000080    48 	STACK_SIZE=128
                           0017FF    49 	STACK_EMPTY=RAM_SIZE-1  
                           000000    50 	FRUN=0 ; flags run code in variable flags
                           000001    51 	FTRAP=1 ; inside trap handler 
                           000002    52 	FFOR=2 ; FOR loop in preparation 
                           000003    53 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    54 	FBREAK=4 ; break point flag 
                           000005    55 	FCOMP=5  ; compiling flags 
                                     56 
                           004000    57 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     58 
      000000                         59 in.w:  .blkb 1 ; parser position in text line
      000001                         60 in:    .blkb 1 ; low byte of in.w
      000002                         61 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         62 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         63 basicptr:  .blkb 2  ; point to current BASIC line 
      000006                         64 base:  .blkb 1 ; nemeric base used to print integer 
      000007                         65 acc24: .blkb 1 ; 24 bit accumulator
      000008                         66 acc16: .blkb 1 ; 16 bit accumulator, middle byte of acc24
      000009                         67 acc8:  .blkb 1 ;  8 bit accumulator, least byte of acc24 
      00000A                         68 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000C                         69 timer: .blkw 1 ;  milliseconds count down timer 
      00000E                         70 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000010                         71 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000012                         72 farptr: .blkb 1 ; 24 bits pointer used by file system
      000013                         73 ptr16:  .blkb 1 ; 16 bits pointer ,  middle byte of farptr
      000014                         74 ptr8:   .blkb 1 ; 8 bits pointer, least byte of farptr 
      000015                         75 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000018                         76 dstkptr: .blkw 1  ; data stack pointer 
      00001A                         77 txtbgn: .ds 2 ; tokenized BASIC text beginning address 
      00001C                         78 txtend: .ds 2 ; tokenized BASIC text end address 
      00001E                         79 loop_depth: .ds 1 ; FOR loop depth, level of nested loop. Conformity check   
      00001F                         80 array_size: .ds 2 ; array size 
      000021                         81 flags: .ds 1 ; various boolean flags
      000022                         82 tab_width: .ds 1 ; print colon width (4)
      000023                         83 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     84 ; keep as last variable 
      000057                         85 free_ram: ; from here RAM free for BASIC text 
                                     86 
                                     87 ;-----------------------------------
                                     88     .area SSEG (ABS)
                                     89 ;-----------------------------------	
      0016C8                         90     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         91 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         92 pad: .ds PAD_SIZE             ; working buffer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      001740                         93 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         94 dstack_empty: ; dstack underflow ; data stack bottom 
      001780                         95 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         96 stack_unf: ; stack underflow ; control_stack bottom 
                                     97 
                                     98 
                                     99 ;--------------------------------------
                                    100     .area HOME 
                                    101 ;--------------------------------------
      000000 82 00 05 79            102     int cold_start
                           000001   103 .if DEBUG
      000004 82 00 00 18            104 	int TrapHandler 		;TRAP  software interrupt
                           000000   105 .else
                                    106 	int NonHandledInterrupt ;TRAP  software interrupt
                                    107 .endif
      000008 82 00 00 09            108 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 0A            109 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            110 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            111 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            112 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            113 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            114 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 3D            115 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            116 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            117 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            118 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            119 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            120 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            121 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            122 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            123 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            124 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            125 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            126 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            127 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            128 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 09            129 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 09            130 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 27            131 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            132 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            133 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            134 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            135 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            136 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            137 	int NonHandledInterrupt ;int29  not used
                                    138 
                                    139 ;---------------------------------------
                                    140     .area CODE
                                    141 ;---------------------------------------
                           000001   142 .if DEBUG
      000000 53 54 4D 38 5F 54 42   143 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    144 .endif 
                                    145 
      000009                        146 NonHandledInterrupt:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000009 71                     147     .byte 0x71  ; reinitialize MCU
                                    148 
      00000A                        149 AWUHandler:
      00000A 72 19 50 F0      [ 1]  150 	bres AWU_CSR,#AWU_CSR_AWUEN
      00000E 55 00 3F 50 F1   [ 1]  151 	mov AWU_APR,0x3F
      000013 72 5F 50 F2      [ 1]  152 	clr AWU_TBR 
      000017 80               [11]  153 	iret
                                    154 
                                    155 ;------------------------------------
                                    156 ; software interrupt handler  
                                    157 ;------------------------------------
                           000001   158 .if DEBUG 
      000018                        159 TrapHandler:
      000018 72 12 00 21      [ 1]  160 	bset flags,#FTRAP 
      00001C CD 09 02         [ 4]  161 	call print_registers
      00001F CD 0B 6D         [ 4]  162 	call cmd_itf
      000022 72 13 00 21      [ 1]  163 	bres flags,#FTRAP 	
      000026 80               [11]  164 	iret
                                    165 .endif 
                                    166 
      000027                        167 Timer4UpdateHandler:
      000027 72 5F 53 42      [ 1]  168 	clr TIM4_SR 
      00002B CE 00 0A         [ 2]  169 	ldw x,ticks
      00002E 5C               [ 2]  170 	incw x
      00002F CF 00 0A         [ 2]  171 	ldw ticks,x 
      000032 CE 00 0C         [ 2]  172 	ldw x,timer
      000035 5D               [ 2]  173 	tnzw x 
      000036 27 04            [ 1]  174 	jreq 1$
      000038 5A               [ 2]  175 	decw x 
      000039 CF 00 0C         [ 2]  176 	ldw timer,x 
      00003C                        177 1$:	
      00003C 80               [11]  178 	iret 
                                    179 
                                    180 
                                    181 ;------------------------------------
                                    182 ; Triggered by pressing USER UserButton 
                                    183 ; on NUCLEO card.
                                    184 ;------------------------------------
      00003D                        185 UserButtonHandler:
                                    186 ; wait button release
      00003D 5F               [ 1]  187 	clrw x
      00003E 5A               [ 2]  188 1$: decw x 
      00003F 26 FD            [ 1]  189 	jrne 1$
      000041 72 09 50 15 F8   [ 2]  190 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    191 ; if MCU suspended by SLEEP resume program
      000046 72 07 00 21 05   [ 2]  192     btjf flags,#FSLEEP,2$
      00004B 72 17 00 21      [ 1]  193 	bres flags,#FSLEEP 
      00004F 80               [11]  194 	iret
      000050 72 00 00 21 03   [ 2]  195 2$:	btjt flags,#FRUN,4$
      000055 CC 00 8E         [ 2]  196 	jp 9$ 
      000058                        197 4$:	; program interrupted by user 
      000058 72 11 00 21      [ 1]  198 	bres flags,#FRUN 
      00005C AE 00 96         [ 2]  199 	ldw x,#USER_ABORT
      00005F CD 01 DD         [ 4]  200 	call puts 
      000062 CE 00 04         [ 2]  201 	ldw x,basicptr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000065 FE               [ 2]  202 	ldw x,(x)
                                    203 ; print line number 
      000066 35 0A 00 06      [ 1]  204 	mov base,#10 
      00006A 35 06 00 22      [ 1]  205 	mov tab_width,#6
      00006E CD 09 F5         [ 4]  206 	call print_int  	
      000071 CE 00 04         [ 2]  207 	ldw x,basicptr 
      000074 1C 00 03         [ 2]  208 	addw x,#3  
      000077 CD 01 DD         [ 4]  209 	call puts 
      00007A A6 0D            [ 1]  210 	ld a,#CR 
      00007C CD 01 CB         [ 4]  211 	call putc
      00007F 5F               [ 1]  212 	clrw x  
      000080 C6 00 01         [ 1]  213 	ld a,in 
      000083 AB 03            [ 1]  214 	add a,#3 ; adjustment for line number display 
      000085 97               [ 1]  215 	ld xl,a 
      000086 CD 02 05         [ 4]  216 	call spaces 
      000089 A6 5E            [ 1]  217 	ld a,#'^
      00008B CD 01 CB         [ 4]  218 	call putc 
      00008E                        219 9$:
      00008E AE 17 FF         [ 2]  220     ldw x,#STACK_EMPTY 
      000091 94               [ 1]  221     ldw sp,x
      000092 9A               [ 1]  222 	rim 
      000093 CC 07 E9         [ 2]  223 	jp warm_start
                                    224 
      000096 0A 50 72 6F 67 72 61   225 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    226 
                                    227 ;----------------------------------------
                                    228 ; inialize MCU clock 
                                    229 ; input:
                                    230 ;   A 		source  HSI | 1 HSE 
                                    231 ;   XL      CLK_CKDIVR , clock divisor 
                                    232 ; output:
                                    233 ;   none 
                                    234 ;----------------------------------------
      0000B1                        235 clock_init:	
      0000B1 C1 50 C3         [ 1]  236 	cp a,CLK_CMSR 
      0000B4 27 0C            [ 1]  237 	jreq 2$ ; no switching required 
                                    238 ; select clock source 
      0000B6 72 12 50 C5      [ 1]  239 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000BA C7 50 C4         [ 1]  240 	ld CLK_SWR,a
      0000BD C1 50 C3         [ 1]  241 1$:	cp a,CLK_CMSR
      0000C0 26 FB            [ 1]  242 	jrne 1$
      0000C2                        243 2$: 	
                                    244 ; HSI and cpu clock divisor 
      0000C2 9F               [ 1]  245 	ld a,xl 
      0000C3 C7 50 C6         [ 1]  246 	ld CLK_CKDIVR,a  
      0000C6 81               [ 4]  247 	ret
                                    248 
                                    249 ;---------------------------------
                                    250 ; TIM4 is configured to generate an 
                                    251 ; interrupt every millisecond 
                                    252 ;----------------------------------
      0000C7                        253 timer4_init:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000C7 72 18 50 C7      [ 1]  254 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000CB 35 07 53 45      [ 1]  255 	mov TIM4_PSCR,#7 ; prescale 128  
      0000CF 35 7D 53 46      [ 1]  256 	mov TIM4_ARR,#125 ; set for 1msec.
      0000D3 35 05 53 40      [ 1]  257 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D7 72 10 53 41      [ 1]  258 	bset TIM4_IER,#TIM4_IER_UIE 
      0000DB 81               [ 4]  259 	ret
                                    260 
                                    261 
                                    262 ;----------------------------------
                                    263 ; unlock EEPROM for writing/erasing
                                    264 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    265 ; input:
                                    266 ;  none
                                    267 ; output:
                                    268 ;  none 
                                    269 ;----------------------------------
      0000DC                        270 unlock_eeprom:
      0000DC 35 AE 50 64      [ 1]  271 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000E0 35 56 50 64      [ 1]  272     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000E4 72 07 50 5F FB   [ 2]  273 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000E9 81               [ 4]  274 	ret
                                    275 
                                    276 ;----------------------------------
                                    277 ; unlock FLASH for writing/erasing
                                    278 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    279 ; input:
                                    280 ;  none
                                    281 ; output:
                                    282 ;  none
                                    283 ;----------------------------------
      0000EA                        284 unlock_flash:
      0000EA 35 56 50 62      [ 1]  285 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000EE 35 AE 50 62      [ 1]  286 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000F2 72 03 50 5F FB   [ 2]  287 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000F7 81               [ 4]  288 	ret
                                    289 
                           000000   290 	BLOCK_ERASE=0
                                    291 ;----------------------------
                                    292 ; erase block code must be 
                                    293 ;executed from RAM
                                    294 ;-----------------------------
                           000000   295 .if BLOCK_ERASE 
                                    296 ; this code is copied to RAM 
                                    297 erase_start:
                                    298 	clr a 
                                    299     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    300     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    301 	ldf [farptr],a
                                    302     inc farptr+2 
                                    303     ldf [farptr],a
                                    304     inc farptr+2 
                                    305     ldf [farptr],a
                                    306     inc farptr+2 
                                    307     ldf [farptr],a
                                    308 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    309 	ret
                                    310 erase_end:
                                    311 
                                    312 ; copy erase_start in RAM 
                                    313 move_code_in_ram:
                                    314 	ldw x,#erase_end 
                                    315 	subw x,#erase_start
                                    316 	ldw acc16,x 
                                    317 	ldw x,#pad 
                                    318 	ldw y,#erase_start 
                                    319 	call move 
                                    320 	ret 
                                    321 
                                    322 ;-----------------------------------
                                    323 ; erase flash or EEPROM block 
                                    324 ; a block is 128 bytes 
                                    325 ; input:
                                    326 ;   farptr  address block begin
                                    327 ; output:
                                    328 ;   none
                                    329 ;--------------------------------------
                                    330 erase_block:
                                    331 	ldw x,farptr+1 
                                    332 	pushw x 
                                    333 	call move_code_in_ram 
                                    334 	popw x 
                                    335 	ldw farptr+1,x 
                                    336 	tnz farptr
                                    337 	jrne erase_flash 
                                    338 	ldw x,#FLASH_BASE 
                                    339 	cpw x,farptr+1 
                                    340 	jrpl erase_flash 
                                    341 ; erase eeprom block
                                    342 	call unlock_eeprom 
                                    343 	sim 
                                    344 	call pad   
                                    345 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    346 	rim 
                                    347 	ret 
                                    348 ; erase flash block:
                                    349 erase_flash:
                                    350 	call unlock_flash 
                                    351 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    352 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    353 	clr a 
                                    354 	sim 
                                    355 	call pad 
                                    356     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    357 	rim 
                                    358 	ret 
                                    359 .endif ; BLOCK_ERASE 
                                    360 
                                    361 
                                    362 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    363 ; write a byte to FLASH or EEPROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    364 ; input:
                                    365 ;    a  		byte to write
                                    366 ;    farptr  	address
                                    367 ;    x          farptr[x]
                                    368 ; output:
                                    369 ;    none
                                    370 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    371 	; variables locales
                           000001   372 	BTW = 1   ; byte to write offset on stack
                           000002   373 	OPT = 2   ; OPTION flag offset on stack
                           000002   374 	VSIZE = 2
      0000F8                        375 write_byte:
      0000F8 90 89            [ 2]  376 	pushw y
      0000FA                        377 	_vars VSIZE
      0000FA 52 02            [ 2]    1     sub sp,#VSIZE 
      0000FC 6B 01            [ 1]  378 	ld (BTW,sp),a ; byte to write 
      0000FE 0F 02            [ 1]  379 	clr (OPT,sp)  ; OPTION flag
                                    380 ; put addr[15:0] in Y, for bounds check.
      000100 90 CE 00 13      [ 2]  381 	ldw y,farptr+1   ; Y=addr15:0
                                    382 ; check addr[23:16], if <> 0 then it is extened flash memory
      000104 72 5D 00 12      [ 1]  383 	tnz farptr 
      000108 26 14            [ 1]  384 	jrne write_flash
      00010A 90 A3 25 00      [ 2]  385     cpw y,#user_space
      00010E 24 0E            [ 1]  386     jruge write_flash
      000110 90 A3 40 00      [ 2]  387 	cpw y,#EEPROM_BASE  
      000114 25 52            [ 1]  388     jrult write_exit
      000116 90 A3 48 00      [ 2]  389 	cpw y,#OPTION_BASE
      00011A 25 18            [ 1]  390 	jrult write_eeprom
      00011C 20 4A            [ 2]  391     jra write_exit
                                    392 ; write program memory
      00011E                        393 write_flash:
      00011E CD 00 EA         [ 4]  394 	call unlock_flash 
      000121 9B               [ 1]  395 1$:	sim 
      000122 7B 01            [ 1]  396 	ld a,(BTW,sp)
      000124 92 A7 00 12      [ 4]  397 	ldf ([farptr],x),a ; farptr[x]=A
      000128 72 05 50 5F FB   [ 2]  398 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00012D 9A               [ 1]  399     rim 
      00012E 72 13 50 5F      [ 1]  400     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000132 20 34            [ 2]  401     jra write_exit
                                    402 ; write eeprom and option
      000134                        403 write_eeprom:
      000134 CD 00 DC         [ 4]  404 	call unlock_eeprom
                                    405 	; check for data eeprom or option eeprom
      000137 90 A3 48 00      [ 2]  406 	cpw y,#OPTION_BASE
      00013B 2B 08            [ 1]  407 	jrmi 1$
      00013D 90 A3 48 80      [ 2]  408 	cpw y,#OPTION_END+1
      000141 2A 02            [ 1]  409 	jrpl 1$
      000143 03 02            [ 1]  410 	cpl (OPT,sp)
      000145                        411 1$: 
      000145 0D 02            [ 1]  412     tnz (OPT,sp)
      000147 27 08            [ 1]  413     jreq 2$
                                    414 	; pour modifier une option il faut modifier ces 2 bits
      000149 72 1E 50 5B      [ 1]  415     bset FLASH_CR2,#FLASH_CR2_OPT
      00014D 72 1F 50 5C      [ 1]  416     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000151                        417 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000151 7B 01            [ 1]  418     ld a,(BTW,sp)
      000153 92 A7 00 12      [ 4]  419     ldf ([farptr],x),a
      000157 0D 02            [ 1]  420     tnz (OPT,sp)
      000159 27 08            [ 1]  421     jreq 3$
      00015B 5C               [ 2]  422     incw x
      00015C 7B 01            [ 1]  423     ld a,(BTW,sp)
      00015E 43               [ 1]  424     cpl a
      00015F 92 A7 00 12      [ 4]  425     ldf ([farptr],x),a
      000163 72 05 50 5F FB   [ 2]  426 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000168                        427 write_exit:
      000168                        428 	_drop VSIZE 
      000168 5B 02            [ 2]    1     addw sp,#VSIZE 
      00016A 90 85            [ 2]  429 	popw y
      00016C 81               [ 4]  430     ret
                                    431 
                                    432 ;--------------------------------------------
                                    433 ; write a data block to eeprom or flash 
                                    434 ; input:
                                    435 ;   Y        source address   
                                    436 ;   X        array index  destination  farptr[x]
                                    437 ;   BSIZE    block size bytes 
                                    438 ;   farptr   write address , byte* 
                                    439 ; output:
                                    440 ;	X 		after last byte written 
                                    441 ;   Y 		after last byte read 
                                    442 ;  farptr   point after block
                                    443 ;---------------------------------------------
      00016D                        444 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00016D                        445 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    446 	; local var 
                           000001   447 	XSAVE=1 
                           000002   448 	VSIZE=2 
      00016D                        449 write_block:
      00016D                        450 	_vars VSIZE
      00016D 52 02            [ 2]    1     sub sp,#VSIZE 
      00016F 1F 01            [ 2]  451 	ldw (XSAVE,sp),x 
      000171 1E 05            [ 2]  452 	ldw x,(BSIZE,sp) 
      000173 27 13            [ 1]  453 	jreq 9$
      000175 1E 01            [ 2]  454 1$:	ldw x,(XSAVE,sp)
      000177 90 F6            [ 1]  455 	ld a,(y)
      000179 CD 00 F8         [ 4]  456 	call write_byte 
      00017C 5C               [ 2]  457 	incw x 
      00017D 90 5C            [ 2]  458 	incw y 
      00017F 1F 01            [ 2]  459 	ldw (XSAVE,sp),x
      000181 1E 05            [ 2]  460 	ldw x,(BSIZE,sp)
      000183 5A               [ 2]  461 	decw x
      000184 1F 05            [ 2]  462 	ldw (BSIZE,sp),x 
      000186 26 ED            [ 1]  463 	jrne 1$
      000188                        464 9$:
      000188 1E 01            [ 2]  465 	ldw x,(XSAVE,sp)
      00018A CD 1B 88         [ 4]  466 	call incr_farptr
      00018D                        467 	_drop VSIZE
      00018D 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00018F 81               [ 4]  468 	ret 
                                    469 
                                    470 
                                    471 ;---------------------------------------------
                                    472 ;   UART1 subroutines
                                    473 ;---------------------------------------------
                                    474 
                                    475 ;---------------------------------------------
                                    476 ; initialize UART1, 115200 8N1
                                    477 ; input:
                                    478 ;	none
                                    479 ; output:
                                    480 ;   none
                                    481 ;---------------------------------------------
      000190                        482 uart1_init:
      000190 72 1A 50 02      [ 1]  483     bset PA_DDR,#UART1_TX_PIN
      000194 72 1A 50 03      [ 1]  484     bset PA_CR1,#UART1_TX_PIN 
      000198 72 1A 50 04      [ 1]  485     bset PA_CR2,#UART1_TX_PIN 
                                    486 ; enable UART1 clock
      00019C 72 14 50 C7      [ 1]  487 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0001A0                        488 uart1_set_baud: 
                                    489 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    490 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0001A0 A6 E1            [ 1]  491 	ld a,#CLK_SWR_HSI
      0001A2 C1 50 C3         [ 1]  492 	cp a,CLK_CMSR 
      0001A5 27 0A            [ 1]  493 	jreq 2$ 
      0001A7                        494 1$: ; 8 Mhz 	
      0001A7 35 05 52 33      [ 1]  495 	mov UART1_BRR2,#0x05 ; must be loaded first
      0001AB 35 04 52 32      [ 1]  496 	mov UART1_BRR1,#0x4
      0001AF 20 08            [ 2]  497 	jra 3$
      0001B1                        498 2$: ; 16 Mhz 	
      0001B1 35 0B 52 33      [ 1]  499 	mov UART1_BRR2,#0x0b ; must be loaded first
      0001B5 35 08 52 32      [ 1]  500 	mov UART1_BRR1,#0x08
      0001B9                        501 3$:
      0001B9 72 5F 52 31      [ 1]  502     clr UART1_DR
      0001BD 35 0C 52 35      [ 1]  503 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      0001C1 72 10 52 35      [ 1]  504 	bset UART1_CR2,#UART_CR2_SBK
      0001C5 72 0D 52 30 FB   [ 2]  505     btjf UART1_SR,#UART_SR_TC,.
      0001CA 81               [ 4]  506     ret
                                    507 
                                    508 ;---------------------------------
                                    509 ; send character to UART1 
                                    510 ; input:
                                    511 ;   A 
                                    512 ; output:
                                    513 ;   none 
                                    514 ;--------------------------------	
      0001CB                        515 putc:
      0001CB 72 0F 52 30 FB   [ 2]  516 	btjf UART1_SR,#UART_SR_TXE,.
      0001D0 C7 52 31         [ 1]  517 	ld UART1_DR,a 
      0001D3 81               [ 4]  518 	ret 
                                    519 
                                    520 ;---------------------------------
                                    521 ; wait character from UART1 
                                    522 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    523 ;   none
                                    524 ; output:
                                    525 ;   A 			char  
                                    526 ;--------------------------------	
      0001D4                        527 getc:
      0001D4 72 0B 52 30 FB   [ 2]  528 	btjf UART1_SR,#UART_SR_RXNE,.
      0001D9 C6 52 31         [ 1]  529 	ld a,UART1_DR 
      0001DC 81               [ 4]  530 	ret 
                                    531 
                                    532 ;-----------------------------
                                    533 ; send an ASCIZ string to UART1 
                                    534 ; input: 
                                    535 ;   x 		char * 
                                    536 ; output:
                                    537 ;   none 
                                    538 ;-------------------------------
      0001DD                        539 puts:
      0001DD F6               [ 1]  540     ld a,(x)
      0001DE 27 06            [ 1]  541 	jreq 1$
      0001E0 CD 01 CB         [ 4]  542 	call putc 
      0001E3 5C               [ 2]  543 	incw x 
      0001E4 20 F7            [ 2]  544 	jra puts 
      0001E6 81               [ 4]  545 1$:	ret 
                                    546 
                                    547 
                                    548 ;---------------------------
                                    549 ; delete character at left 
                                    550 ; of cursor on terminal 
                                    551 ; input:
                                    552 ;   none 
                                    553 ; output:
                                    554 ;	none 
                                    555 ;---------------------------
      0001E7                        556 bksp:
      0001E7 A6 08            [ 1]  557 	ld a,#BSP 
      0001E9 CD 01 CB         [ 4]  558 	call putc 
      0001EC A6 20            [ 1]  559 	ld a,#SPACE 
      0001EE CD 01 CB         [ 4]  560 	call putc 
      0001F1 A6 08            [ 1]  561 	ld a,#BSP 
      0001F3 CD 01 CB         [ 4]  562 	call putc 
      0001F6 81               [ 4]  563 	ret 
                                    564 ;---------------------------
                                    565 ; delete n character left of cursor 
                                    566 ; at terminal.
                                    567 ; input: 
                                    568 ;   A   	number of characters to delete.
                                    569 ; output:
                                    570 ;    none 
                                    571 ;--------------------------	
      0001F7                        572 delete:
      0001F7 88               [ 1]  573 	push a 
      0001F8 0D 01            [ 1]  574 0$:	tnz (1,sp)
      0001FA 27 07            [ 1]  575 	jreq 1$
      0001FC CD 01 E7         [ 4]  576 	call bksp 
      0001FF 0A 01            [ 1]  577 	dec (1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000201 20 F5            [ 2]  578 	jra 0$
      000203 84               [ 1]  579 1$:	pop a 
      000204 81               [ 4]  580 	ret
                                    581 
                                    582 ;--------------------------
                                    583 ; print n spaces on terminal
                                    584 ; input:
                                    585 ;  X 		number of spaces 
                                    586 ; output:
                                    587 ;	none 
                                    588 ;---------------------------
      000205                        589 spaces:
      000205 A6 20            [ 1]  590 	ld a,#SPACE 
      000207 5D               [ 2]  591 1$:	tnzw x
      000208 27 06            [ 1]  592 	jreq 9$
      00020A CD 01 CB         [ 4]  593 	call putc 
      00020D 5A               [ 2]  594 	decw x
      00020E 20 F7            [ 2]  595 	jra 1$
      000210                        596 9$: 
      000210 81               [ 4]  597 	ret 
                                    598 
                           000001   599 .if DEBUG 
                                    600 ;---------------------------------
                                    601 ;; print actual registers states 
                                    602 ;; as pushed on stack 
                                    603 ;; {Y,X,CC,A}
                                    604 ;---------------------------------
      000211                        605 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      000211                        606 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      000211                        607 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      000211                        608 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      000211                        609 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      000211                        610 prt_regs:
      000211 AE 02 54         [ 2]  611 	ldw x,#regs_state 
      000214 CD 01 DD         [ 4]  612 	call puts
                                    613 ; register PC
      000217 16 01            [ 2]  614 	ldw y,(1,sp)
      000219 AE 09 92         [ 2]  615 	ldw x,#REG_EPC 
      00021C CD 08 E3         [ 4]  616 	call prt_reg16 
                                    617 ; register CC 
      00021F 7B 08            [ 1]  618 	ld a,(R_CC,sp)
      000221 AE 09 A3         [ 2]  619 	ldw x,#REG_CC 
      000224 CD 08 BE         [ 4]  620 	call prt_reg8 
                                    621 ; register A 
      000227 7B 07            [ 1]  622 	ld a,(R_A,sp)
      000229 AE 09 9F         [ 2]  623 	ldw x,#REG_A 
      00022C CD 08 BE         [ 4]  624 	call prt_reg8 
                                    625 ; register X 
      00022F 16 05            [ 2]  626 	ldw y,(R_X,sp)
      000231 AE 09 9B         [ 2]  627 	ldw x,#REG_X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000234 CD 08 E3         [ 4]  628 	call prt_reg16 
                                    629 ; register Y 
      000237 16 03            [ 2]  630 	ldw y,(R_Y,sp)
      000239 AE 09 97         [ 2]  631 	ldw x,#REG_Y 
      00023C CD 08 E3         [ 4]  632 	call prt_reg16 
                                    633 ; register SP 
      00023F 90 96            [ 1]  634 	ldw y,sp
      000241 72 A9 00 08      [ 2]  635 	addw y,#6+ARG_OFS  
      000245 AE 09 A8         [ 2]  636 	ldw x,#REG_SP
      000248 CD 08 E3         [ 4]  637 	call prt_reg16
      00024B A6 0D            [ 1]  638 	ld a,#CR 
      00024D CD 01 CB         [ 4]  639 	call putc
      000250 CD 01 CB         [ 4]  640 	call putc   
      000253 81               [ 4]  641 	ret 
                                    642 
      000254 0A 72 65 67 69 73 74   643 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    644 
                                    645 
                                    646 ;--------------------
                                    647 ; print content at address in hex.
                                    648 ; input:
                                    649 ;   X 	address to peek 
                                    650 ; output:
                                    651 ;	none 
                                    652 ;--------------------	
      00027B                        653 prt_peek:
      00027B 89               [ 2]  654 	pushw x 
      00027C CF 00 08         [ 2]  655 	ldw acc16,x 
      00027F 72 5F 00 07      [ 1]  656 	clr acc24 
      000283 5F               [ 1]  657 	clrw x 
      000284 A6 10            [ 1]  658 	ld a,#16 
      000286 CD 09 AD         [ 4]  659 	call prti24 
      000289 A6 3A            [ 1]  660 	ld a,#': 
      00028B CD 01 CB         [ 4]  661 	call putc 
      00028E A6 20            [ 1]  662 	ld a,#SPACE 
      000290 CD 01 CB         [ 4]  663 	call putc 
      000293 85               [ 2]  664 	popw x 
      000294 F6               [ 1]  665 	ld a,(x)
      000295 C7 00 09         [ 1]  666 	ld acc8,a 
      000298 5F               [ 1]  667 	clrw x 
      000299 A6 10            [ 1]  668 	ld a,#16 
      00029B CD 09 AD         [ 4]  669 	call prti24
      00029E 81               [ 4]  670 	ret 
                                    671 .endif ; DEBUG  
                                    672 
                                    673 ;-------------------------------------
                                    674 ; retrun string length
                                    675 ; input:
                                    676 ;   X         .asciz  
                                    677 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    678 ;   X         length 
                                    679 ;-------------------------------------
      00029F                        680 strlen:
      00029F 90 93            [ 1]  681 	ldw y,x 
      0002A1 5F               [ 1]  682 	clrw x 
      0002A2 90 7D            [ 1]  683 1$:	tnz (y) 
      0002A4 27 05            [ 1]  684 	jreq 9$ 
      0002A6 5C               [ 2]  685 	incw x
      0002A7 90 5C            [ 2]  686 	incw y 
      0002A9 20 F7            [ 2]  687 	jra 1$ 
      0002AB 81               [ 4]  688 9$: ret 
                                    689 
                                    690 ;------------------------------------
                                    691 ; compare 2 strings
                                    692 ; input:
                                    693 ;   X 		char* first string 
                                    694 ;   Y       char* second string 
                                    695 ; output:
                                    696 ;   A 		0|1 
                                    697 ;-------------------------------------
      0002AC                        698 strcmp:
      0002AC F6               [ 1]  699 	ld a,(x)
      0002AD 27 0B            [ 1]  700 	jreq 5$ 
      0002AF 90 F1            [ 1]  701 	cp a,(y) 
      0002B1 26 05            [ 1]  702 	jrne 4$ 
      0002B3 5C               [ 2]  703 	incw x 
      0002B4 90 5C            [ 2]  704 	incw y 
      0002B6 20 F4            [ 2]  705 	jra strcmp 
      0002B8                        706 4$: ; not same  
      0002B8 4F               [ 1]  707 	clr a 
      0002B9 81               [ 4]  708 	ret 
      0002BA                        709 5$: ; same 
      0002BA A6 01            [ 1]  710 	ld a,#1 
      0002BC 81               [ 4]  711 	ret 
                                    712 
                                    713 
                                    714 ;---------------------------------------
                                    715 ;  copy src to dest 
                                    716 ; input:
                                    717 ;   X 		dest 
                                    718 ;   Y 		src 
                                    719 ; output: 
                                    720 ;   X 		dest 
                                    721 ;----------------------------------
      0002BD                        722 strcpy:
      0002BD 89               [ 2]  723 	pushw x 
      0002BE 90 F6            [ 1]  724 1$: ld a,(y)
      0002C0 27 06            [ 1]  725 	jreq 9$ 
      0002C2 F7               [ 1]  726 	ld (x),a 
      0002C3 5C               [ 2]  727 	incw x 
      0002C4 90 5C            [ 2]  728 	incw y 
      0002C6 20 F6            [ 2]  729 	jra 1$ 
      0002C8 7F               [ 1]  730 9$:	clr (x)
      0002C9 85               [ 2]  731 	popw x 
      0002CA 81               [ 4]  732 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    733 
                                    734 ;---------------------------------------
                                    735 ; move memory block 
                                    736 ; input:
                                    737 ;   X 		destination 
                                    738 ;   Y 	    source 
                                    739 ;   acc16	size 
                                    740 ; output:
                                    741 ;   none 
                                    742 ;--------------------------------------
                           000001   743 	INCR=1 ; increament high byte 
                           000002   744 	LB=2 ; increament low byte 
                           000002   745 	VSIZE=2
      0002CB                        746 move:
      0002CB                        747 	_vars VSIZE 
      0002CB 52 02            [ 2]    1     sub sp,#VSIZE 
      0002CD 0F 01            [ 1]  748 	clr (INCR,sp)
      0002CF 0F 02            [ 1]  749 	clr (LB,sp)
      0002D1 90 89            [ 2]  750 	pushw y 
      0002D3 13 01            [ 2]  751 	cpw x,(1,sp) ; compare DEST to SRC 
      0002D5 90 85            [ 2]  752 	popw y 
      0002D7 27 31            [ 1]  753 	jreq move_exit ; x==y 
      0002D9 2B 0E            [ 1]  754 	jrmi move_down
      0002DB                        755 move_up: ; start from top address with incr=-1
      0002DB 72 BB 00 08      [ 2]  756 	addw x,acc16
      0002DF 72 B9 00 08      [ 2]  757 	addw y,acc16
      0002E3 03 01            [ 1]  758 	cpl (INCR,sp)
      0002E5 03 02            [ 1]  759 	cpl (LB,sp)   ; increment = -1 
      0002E7 20 05            [ 2]  760 	jra move_loop  
      0002E9                        761 move_down: ; start from bottom address with incr=1 
      0002E9 5A               [ 2]  762     decw x 
      0002EA 90 5A            [ 2]  763 	decw y
      0002EC 0C 02            [ 1]  764 	inc (LB,sp) ; incr=1 
      0002EE                        765 move_loop:	
      0002EE C6 00 08         [ 1]  766     ld a, acc16 
      0002F1 CA 00 09         [ 1]  767 	or a, acc8
      0002F4 27 14            [ 1]  768 	jreq move_exit 
      0002F6 72 FB 01         [ 2]  769 	addw x,(INCR,sp)
      0002F9 72 F9 01         [ 2]  770 	addw y,(INCR,sp) 
      0002FC 90 F6            [ 1]  771 	ld a,(y)
      0002FE F7               [ 1]  772 	ld (x),a 
      0002FF 89               [ 2]  773 	pushw x 
      000300 CE 00 08         [ 2]  774 	ldw x,acc16 
      000303 5A               [ 2]  775 	decw x 
      000304 CF 00 08         [ 2]  776 	ldw acc16,x 
      000307 85               [ 2]  777 	popw x 
      000308 20 E4            [ 2]  778 	jra move_loop
      00030A                        779 move_exit:
      00030A                        780 	_drop VSIZE
      00030A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00030C 81               [ 4]  781 	ret 	
                                    782 
                                    783 ;-------------------------------------
                                    784 ; search text area for a line with 
                                    785 ; same number as line#  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    786 ; input:
                                    787 ;	X 			line# 
                                    788 ; output:
                                    789 ;   X 			addr of line | 0 
                                    790 ;   Y           line#|insert address if not found  
                                    791 ;-------------------------------------
                           000001   792 	LL=1 ; line length 
                           000002   793 	LB=2 ; line length low byte 
                           000002   794 	VSIZE=2 
      00030D                        795 search_lineno:
      00030D                        796 	_vars VSIZE
      00030D 52 02            [ 2]    1     sub sp,#VSIZE 
      00030F 0F 01            [ 1]  797 	clr (LL,sp)
      000311 90 CE 00 1A      [ 2]  798 	ldw y,txtbgn
      000315                        799 search_ln_loop:
      000315 90 C3 00 1C      [ 2]  800 	cpw y,txtend 
      000319 2A 10            [ 1]  801 	jrpl 8$
      00031B 90 F3            [ 1]  802 	cpw x,(y)
      00031D 27 0E            [ 1]  803 	jreq 9$
      00031F 2B 0A            [ 1]  804 	jrmi 8$ 
      000321 90 E6 02         [ 1]  805 	ld a,(2,y)
      000324 6B 02            [ 1]  806 	ld (LB,sp),a 
      000326 72 F9 01         [ 2]  807 	addw y,(LL,sp)
      000329 20 EA            [ 2]  808 	jra search_ln_loop 
      00032B                        809 8$: 
      00032B 5F               [ 1]  810 	clrw x 	
      00032C 51               [ 1]  811 	exgw x,y 
      00032D                        812 9$: _drop VSIZE
      00032D 5B 02            [ 2]    1     addw sp,#VSIZE 
      00032F 51               [ 1]  813 	exgw x,y   
      000330 81               [ 4]  814 	ret 
                                    815 
                                    816 ;-------------------------------------
                                    817 ; delete line at addr
                                    818 ; move new line to insert with end of text 
                                    819 ; otherwise it would be overwritten.
                                    820 ; input:
                                    821 ;   X 		addr of line i.e DEST for move 
                                    822 ;-------------------------------------
                           000001   823 	LLEN=1
                           000003   824 	SRC=3
                           000004   825 	VSIZE=4
      000331                        826 del_line: 
      000331                        827 	_vars VSIZE 
      000331 52 04            [ 2]    1     sub sp,#VSIZE 
      000333 E6 02            [ 1]  828 	ld a,(2,x) ; line length
      000335 6B 02            [ 1]  829 	ld (LLEN+1,sp),a 
      000337 0F 01            [ 1]  830 	clr (LLEN,sp)
      000339 90 93            [ 1]  831 	ldw y,x  
      00033B 72 F9 01         [ 2]  832 	addw y,(LLEN,sp) ;SRC  
      00033E 17 03            [ 2]  833 	ldw (SRC,sp),y  ;save source 
      000340 90 CE 00 1C      [ 2]  834 	ldw y,txtend 
      000344 90 E6 02         [ 1]  835 	ld a,(2,y)
      000347 90 5F            [ 1]  836 	clrw y 
      000349 90 97            [ 1]  837 	ld yl,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00034B 72 B9 00 1C      [ 2]  838 	addw y,txtend
      00034F 72 F2 03         [ 2]  839 	subw y,(SRC,sp) ; y=count 
      000352 90 CF 00 08      [ 2]  840 	ldw acc16,y 
      000356 16 03            [ 2]  841 	ldw y,(SRC,sp)    ; source
      000358 CD 02 CB         [ 4]  842 	call move
      00035B 90 CE 00 1C      [ 2]  843 	ldw y,txtend 
      00035F 72 F2 01         [ 2]  844 	subw y,(LLEN,sp)
      000362 90 CF 00 1C      [ 2]  845 	ldw txtend,y  
      000366                        846 	_drop VSIZE     
      000366 5B 04            [ 2]    1     addw sp,#VSIZE 
      000368 81               [ 4]  847 	ret 
                                    848 
                                    849 ;---------------------------------------------
                                    850 ; create a gap in text area 
                                    851 ; move new line to insert in gap with end of text
                                    852 ; otherwise it would be overwritten.
                                    853 ; input:
                                    854 ;    X 			addr gap start 
                                    855 ;    Y 			gap length 
                                    856 ; output:
                                    857 ;    X 			addr gap start 
                                    858 ;--------------------------------------------
                           000001   859 	DEST=1
                           000003   860 	SRC=3
                           000005   861 	LEN=5
                           000006   862 	VSIZE=6 
      000369                        863 create_gap:
      000369                        864 	_vars VSIZE
      000369 52 06            [ 2]    1     sub sp,#VSIZE 
      00036B 1F 03            [ 2]  865 	ldw (SRC,sp),x 
      00036D 17 05            [ 2]  866 	ldw (LEN,sp),y 
      00036F 90 CF 00 08      [ 2]  867 	ldw acc16,y 
      000373 90 93            [ 1]  868 	ldw y,x ; SRC
      000375 72 BB 00 08      [ 2]  869 	addw x,acc16  
      000379 1F 01            [ 2]  870 	ldw (DEST,sp),x 
                                    871 ;compute size to move 	
      00037B CE 00 1C         [ 2]  872 	ldw x,txtend 
      00037E E6 02            [ 1]  873 	ld a,(2,x) ; pending line length 
      000380 C7 00 09         [ 1]  874 	ld acc8,a 
      000383 72 5F 00 08      [ 1]  875 	clr acc16 
      000387 72 BB 00 08      [ 2]  876 	addw x,acc16 
      00038B 72 F0 03         [ 2]  877 	subw x,(SRC,sp)
      00038E CF 00 08         [ 2]  878 	ldw acc16,x ; size to move
      000391 1E 01            [ 2]  879 	ldw x,(DEST,sp) 
      000393 CD 02 CB         [ 4]  880 	call move
      000396 CE 00 1C         [ 2]  881 	ldw x,txtend
      000399 72 FB 05         [ 2]  882 	addw x,(LEN,sp)
      00039C CF 00 1C         [ 2]  883 	ldw txtend,x
      00039F                        884 9$:	_drop VSIZE 
      00039F 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A1 81               [ 4]  885 	ret 
                                    886 
                                    887 
                                    888 ;--------------------------------------------
                                    889 ; insert line in tib into text area 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    890 ; first search for already existing 
                                    891 ; replace existing 
                                    892 ; if strlen(tib)==0 delete existing 
                                    893 ; input:
                                    894 ;   ptr16 				pointer to tokenized line  
                                    895 ; output:
                                    896 ;   none
                                    897 ;---------------------------------------------
                           000001   898 	DEST=1  ; text area insertion address 
                           000003   899 	SRC=3   ; str to insert address 
                           000005   900 	LINENO=5 ; line number 
                           000007   901 	LLEN=7 ; line length 
                           000008   902 	VSIZE=8  
      0003A2                        903 insert_line:
      0003A2                        904 	_vars VSIZE 
      0003A2 52 08            [ 2]    1     sub sp,#VSIZE 
      0003A4 CE 00 13         [ 2]  905 	ldw x,ptr16  
      0003A7 C3 00 1A         [ 2]  906 	cpw x,txtbgn 
      0003AA 26 0D            [ 1]  907 	jrne 0$
                                    908 ;first text line 
      0003AC AE 00 02         [ 2]  909 	ldw x,#2 
      0003AF 72 D6 00 13      [ 4]  910 	ld a,([ptr16],x)
      0003B3 5F               [ 1]  911 	clrw x 
      0003B4 97               [ 1]  912 	ld xl,a
      0003B5 1F 07            [ 2]  913 	ldw (LLEN,sp),x  
      0003B7 20 45            [ 2]  914 	jra 5$
      0003B9 72 CE 00 13      [ 5]  915 0$:	ldw x,[ptr16]
                                    916 ; new line number
      0003BD 1F 05            [ 2]  917 	ldw (LINENO,sp),x 
      0003BF AE 00 02         [ 2]  918 	ldw x,#2 
      0003C2 72 D6 00 13      [ 4]  919 	ld a,([ptr16],x)
      0003C6 97               [ 1]  920 	ld xl,a
                                    921 ; new line length
      0003C7 1F 07            [ 2]  922 	ldw (LLEN,sp),x
                                    923 ; check if that line number already exit 	
      0003C9 1E 05            [ 2]  924 	ldw x,(LINENO,sp)
      0003CB CD 03 0D         [ 4]  925 	call search_lineno 
      0003CE 5D               [ 2]  926 	tnzw x 
      0003CF 26 04            [ 1]  927 	jrne 2$
                                    928 ; line doesn't exit
                                    929 ; it will be inserted at this point.  	
      0003D1 17 01            [ 2]  930 	ldw (DEST,sp),y 
      0003D3 20 05            [ 2]  931 	jra 3$
                                    932 ; line exit delete it.
                                    933 ; it will be replaced by new one 	
      0003D5 1F 01            [ 2]  934 2$: ldw (DEST,sp),x 
      0003D7 CD 03 31         [ 4]  935 	call del_line
      0003DA                        936 3$: 
                                    937 ; insert new line or leave if LLEN==3
                                    938 ; LLEN==3 means empty line 
      0003DA A6 03            [ 1]  939 	ld a,#3
      0003DC 11 08            [ 1]  940 	cp a,(LLEN+1,sp)
      0003DE 27 27            [ 1]  941 	jreq insert_ln_exit ; empty line exit.
                                    942 ; if insertion point at txtend 
                                    943 ; no move required 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003E0 1E 01            [ 2]  944 	ldw x,(DEST,sp)
      0003E2 C3 00 1C         [ 2]  945 	cpw x,txtend 
      0003E5 2A 17            [ 1]  946 	jrpl 5$ 
                                    947 ; must create a gap
                                    948 ; at insertion point  
      0003E7 1E 01            [ 2]  949 	ldw x,(DEST,sp)
      0003E9 16 07            [ 2]  950 	ldw y,(LLEN,sp)
      0003EB CD 03 69         [ 4]  951 	call create_gap 
                                    952 ; move new line in gap 
      0003EE 1E 07            [ 2]  953 	ldw x,(LLEN,sp)
      0003F0 CF 00 08         [ 2]  954 	ldw acc16,x 
      0003F3 90 CE 00 1C      [ 2]  955 	ldw y,txtend ;SRC 
      0003F7 1E 01            [ 2]  956 	ldw x,(DEST,sp) ; dest address 
      0003F9 CD 02 CB         [ 4]  957 	call move 
      0003FC 20 09            [ 2]  958 	jra insert_ln_exit  
      0003FE                        959 5$: ; no move required 
      0003FE 1E 07            [ 2]  960 	ldw x,(LLEN,sp) 
      000400 72 BB 00 1C      [ 2]  961 	addw x,txtend 
      000404 CF 00 1C         [ 2]  962 	ldw txtend,x 
      000407                        963 insert_ln_exit:	
      000407                        964 	_drop VSIZE
      000407 5B 08            [ 2]    1     addw sp,#VSIZE 
      000409 81               [ 4]  965 	ret
                                    966 
                                    967 
                                    968 ;-----------------------------
                                    969 ; check if text buffer full
                                    970 ; input:
                                    971 ;   ptr16     addr start tokenize line 
                                    972 ;   X         buffer index 
                                    973 ; output:
                                    974 ;   none 
                                    975 ;-----------------------------------
      00040A                        976 check_full:
      00040A 72 BB 00 13      [ 2]  977 	addw x,ptr16 
      00040E A3 16 C8         [ 2]  978 	cpw x,#tib 
      000411 25 05            [ 1]  979 	jrult 1$
      000413 A6 01            [ 1]  980 	ld a,#ERR_MEM_FULL
      000415 CC 07 97         [ 2]  981 	jp tb_error 
      000418 81               [ 4]  982 1$: ret 
                                    983 
                                    984 
                                    985 ;-----------------------------------
                                    986 ; create token list form text line 
                                    987 ; save this list in text area
                                    988 ; input:
                                    989 ;   none
                                    990 ; output:
                                    991 ;   basicptr     token list buffer
                                    992 ;   line# 		 BASIC line number 
                                    993 ;   in.w  		 cleared 
                                    994 ;-----------------------------------
                                    995 	.macro _incr_ptr16 n 
                                    996 	ldw x,#n 
                                    997 	addw x,ptr16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    998 	ldw ptr16,x 
                                    999 	.endm 
                                   1000 
                           000001  1001 	XSAVE=1
                           000003  1002 	BUFIDX=3
                           000004  1003 	VSIZE=4
      000419                       1004 compile:
      000419                       1005 	_vars VSIZE 
      000419 52 04            [ 2]    1     sub sp,#VSIZE 
      00041B 72 1A 00 21      [ 1] 1006 	bset flags,#FCOMP 
      00041F CE 00 1C         [ 2] 1007 	ldw x,txtend
      000422 CF 00 13         [ 2] 1008 	ldw ptr16,x 
      000425 5F               [ 1] 1009 	clrw x 
      000426 AE 00 03         [ 2] 1010 	ldw x,#3
      000429 1F 03            [ 2] 1011 	ldw (BUFIDX,sp),X  
      00042B CD 04 0A         [ 4] 1012 	call check_full
      00042E 5F               [ 1] 1013 	clrw x 
      00042F 72 CF 00 13      [ 5] 1014 	ldw [ptr16],x 
      000433 CD 0D 5C         [ 4] 1015 	call get_token
      000436 1F 01            [ 2] 1016 	ldw (XSAVE,sp),x 
      000438 A1 04            [ 1] 1017 	cp a,#TK_INTGR 
      00043A 26 11            [ 1] 1018 	jrne 3$
      00043C A3 00 00         [ 2] 1019 	cpw x,#0  
      00043F 22 03            [ 1] 1020 	jrugt 1$
      000441 CC 07 95         [ 2] 1021 	jp syntax_error 
      000444 72 CF 00 13      [ 5] 1022 1$:	ldw [ptr16],x; line number
      000448 CD 0D 5C         [ 4] 1023 2$:	call get_token
      00044B 1F 01            [ 2] 1024 	ldw (XSAVE,sp),x 
      00044D A1 00            [ 1] 1025 3$:	cp a,#TK_NONE 
      00044F 26 03            [ 1] 1026 	jrne 30$
      000451 CC 04 E4         [ 2] 1027 	jp 9$
      000454                       1028 30$: 	 
      000454 1E 03            [ 2] 1029 	ldw x,(BUFIDX,sp)
      000456 CD 04 0A         [ 4] 1030 	call check_full 
      000459 16 03            [ 2] 1031 	ldw y,(BUFIDX,sp) 
      00045B 91 D7 13         [ 4] 1032 	ld ([ptr16],y),a ; token attribute 
      00045E 90 5C            [ 2] 1033 	incw y
      000460 17 03            [ 2] 1034 	ldw (BUFIDX,sp),y
      000462 A1 01            [ 1] 1035 	cp a,#TK_COLON 
      000464 26 02            [ 1] 1036 	jrne 31$
      000466 20 E0            [ 2] 1037 	jra 2$ 
      000468                       1038 31$:
      000468 A1 03            [ 1] 1039 	cp a,#TK_CHAR
      00046A 26 0C            [ 1] 1040 	jrne 32$ 
      00046C 1E 01            [ 2] 1041 	ldw x,(XSAVE,sp)
      00046E 9F               [ 1] 1042 	ld a,xl 
      00046F 91 D7 13         [ 4] 1043 	ld ([ptr16],y),a
      000472 90 5C            [ 2] 1044 	incw y 
      000474 17 03            [ 2] 1045 	ldw (BUFIDX,sp),y 
      000476 20 D0            [ 2] 1046 	jra 2$ 
      000478                       1047 32$:
      000478 A1 02            [ 1] 1048 	cp a,#TK_ARRAY 
      00047A 27 CC            [ 1] 1049 	jreq 2$ 
      00047C A1 0A            [ 1] 1050 	cp a,#TK_QSTR 
      00047E 26 25            [ 1] 1051 	jrne 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000480 AE 17 18         [ 2] 1052 	ldw x,#pad 
      000483 CD 02 9F         [ 4] 1053 	call strlen
      000486 5C               [ 2] 1054 	incw x  
      000487 CD 04 0A         [ 4] 1055 	call check_full 
      00048A 90 AE 17 18      [ 2] 1056 	ldw y,#pad 
      00048E CE 00 13         [ 2] 1057 	ldw x,ptr16
      000491 72 FB 03         [ 2] 1058 	addw x,(BUFIDX,sp)	
      000494 CD 02 BD         [ 4] 1059 	call strcpy 
      000497 AE 17 18         [ 2] 1060 	ldw x,#pad 
      00049A CD 02 9F         [ 4] 1061 	call strlen 
      00049D 5C               [ 2] 1062 	incw x
      00049E 72 FB 03         [ 2] 1063 	addw x,(BUFIDX,sp) 
      0004A1 1F 03            [ 2] 1064 	ldw (BUFIDX,sp),x
      0004A3 20 A3            [ 2] 1065 	jra 2$  
      0004A5 A1 04            [ 1] 1066 4$: cp a,#TK_INTGR
      0004A7 25 9F            [ 1] 1067 	jrult 2$
      0004A9 A1 09            [ 1] 1068 	cp a,#TK_CONST 
      0004AB 22 9B            [ 1] 1069 	Jrugt 2$
      0004AD 1E 01            [ 2] 1070 	ldw x,(XSAVE,sp) 
      0004AF 16 03            [ 2] 1071 	ldw y,(BUFIDX,sp)
      0004B1 91 DF 13         [ 5] 1072 	ldw ([ptr16],y),x
      0004B4 A3 17 71         [ 2] 1073 	cpw x,#rem 
      0004B7 26 22            [ 1] 1074 	jrne 5$	
                                   1075 ; comment advance in.w to eol 
      0004B9 72 A9 00 02      [ 2] 1076 	addw y,#2 ; skip exec address 
      0004BD 17 03            [ 2] 1077 	ldw (BUFIDX,sp),y 
      0004BF CE 00 13         [ 2] 1078 	ldw x,ptr16 
      0004C2 72 FB 03         [ 2] 1079 	addw x,(BUFIDX,sp)
      0004C5 90 CE 00 00      [ 2] 1080 	ldw y,in.w 
      0004C9 72 A9 16 C8      [ 2] 1081 	addw y,#tib 
      0004CD CD 02 BD         [ 4] 1082 	call strcpy 	
      0004D0 CD 02 9F         [ 4] 1083 	call strlen 
      0004D3 5C               [ 2] 1084 	incw x ; skip string 0. 
      0004D4 72 FB 03         [ 2] 1085 	addw x,(BUFIDX,sp)
      0004D7 1F 03            [ 2] 1086 	ldw (BUFIDX,sp),x 
      0004D9 20 09            [ 2] 1087 	jra 9$
      0004DB 72 A9 00 02      [ 2] 1088 5$:	addw y,#2 
      0004DF 17 03            [ 2] 1089 	ldw (BUFIDX,sp),y 
      0004E1 CC 04 48         [ 2] 1090 	jp 2$
      0004E4                       1091 9$: 
      0004E4 AE 00 02         [ 2] 1092 	ldw x,#2
      0004E7 16 03            [ 2] 1093 	ldw y,(BUFIDX,sp)
      0004E9 90 9F            [ 1] 1094 	ld a,yl 
      0004EB 72 D7 00 13      [ 4] 1095 	ld ([ptr16],x),a  	
      0004EF 72 CE 00 13      [ 5] 1096 	ldw x,[ptr16]
      0004F3 27 09            [ 1] 1097 	jreq 10$
      0004F5 CD 03 A2         [ 4] 1098 	call insert_line
      0004F8 72 5F 00 03      [ 1] 1099 	clr  count 
      0004FC 20 0F            [ 2] 1100 	jra  11$ 
      0004FE                       1101 10$: 
      0004FE CE 00 13         [ 2] 1102 	ldw x,ptr16 
      000501 CF 00 04         [ 2] 1103 	ldw basicptr,x 
      000504 E6 02            [ 1] 1104 	ld a,(2,x)
      000506 C7 00 03         [ 1] 1105 	ld count,a 
      000509 35 03 00 01      [ 1] 1106 	mov in,#3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00050D                       1107 11$:
      00050D                       1108 	_drop VSIZE 
      00050D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00050F 72 1B 00 21      [ 1] 1109 	bres flags,#FCOMP 
      000513 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 
                                   1113 ;------------------------------------
                                   1114 ;  set all variables to zero 
                                   1115 ; input:
                                   1116 ;   none 
                                   1117 ; output:
                                   1118 ;	none
                                   1119 ;------------------------------------
      000514                       1120 clear_vars:
      000514 AE 00 23         [ 2] 1121 	ldw x,#vars 
      000517 90 AE 00 34      [ 2] 1122 	ldw y,#2*26 
      00051B 7F               [ 1] 1123 1$:	clr (x)
      00051C 5C               [ 2] 1124 	incw x 
      00051D 90 5A            [ 2] 1125 	decw y 
      00051F 26 FA            [ 1] 1126 	jrne 1$
      000521 81               [ 4] 1127 	ret 
                                   1128 
                                   1129 ;-------------------------------------
                                   1130 ; check if A is a letter
                                   1131 ; input:
                                   1132 ;   A 			character to test 
                                   1133 ; output:
                                   1134 ;   C flag      1 true, 0 false 
                                   1135 ;-------------------------------------
      000522                       1136 is_alpha:
      000522 A1 41            [ 1] 1137 	cp a,#'A 
      000524 8C               [ 1] 1138 	ccf
      000525 24 0B            [ 1] 1139 	jrnc 9$ 
      000527 A1 5B            [ 1] 1140 	cp a,#'Z+1 
      000529 25 07            [ 1] 1141 	jrc 9$ 
      00052B A1 61            [ 1] 1142 	cp a,#'a 
      00052D 8C               [ 1] 1143 	ccf 
      00052E 24 02            [ 1] 1144 	jrnc 9$
      000530 A1 7B            [ 1] 1145 	cp a,#'z+1   
      000532 81               [ 4] 1146 9$: ret 	
                                   1147 
                                   1148 ;-------------------------------------
                                   1149 ;  program initialization entry point 
                                   1150 ;-------------------------------------
                           000001  1151 	MAJOR=1
                           000000  1152 	MINOR=0
      000533 0A 0A 54 69 6E 79 20  1153 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      000579                       1154 cold_start:
                                   1155 ;set stack 
      000579 AE 17 FF         [ 2] 1156 	ldw x,#STACK_EMPTY
      00057C 94               [ 1] 1157 	ldw sp,x   
                                   1158 ; clear all ram 
      00057D 7F               [ 1] 1159 0$: clr (x)
      00057E 5A               [ 2] 1160 	decw x 
      00057F 26 FC            [ 1] 1161 	jrne 0$
                                   1162 ; activate pull up on all inputs 
      000581 A6 FF            [ 1] 1163 	ld a,#255 
      000583 C7 50 03         [ 1] 1164 	ld PA_CR1,a 
      000586 C7 50 08         [ 1] 1165 	ld PB_CR1,a 
      000589 C7 50 0D         [ 1] 1166 	ld PC_CR1,a 
      00058C C7 50 12         [ 1] 1167 	ld PD_CR1,a 
      00058F C7 50 17         [ 1] 1168 	ld PE_CR1,a 
      000592 C7 50 1C         [ 1] 1169 	ld PF_CR1,a 
      000595 C7 50 21         [ 1] 1170 	ld PG_CR1,a 
      000598 C7 50 2B         [ 1] 1171 	ld PI_CR1,a 
                                   1172 ; disable schmitt triggers on Arduino CN4 analog inputs
      00059B 55 00 3F 54 07   [ 1] 1173 	mov ADC_TDRL,0x3f
                                   1174 ; disable peripherals clocks
                                   1175 ;	clr CLK_PCKENR1 
                                   1176 ;	clr CLK_PCKENR2
      0005A0 72 5F 50 F2      [ 1] 1177 	clr AWU_TBR 
      0005A4 72 14 50 CA      [ 1] 1178 	bset CLK_PCKENR2,#2 ; enable LSI for beeper
                                   1179 ; select internal clock no divisor: 16 Mhz 	
      0005A8 A6 E1            [ 1] 1180 	ld a,#CLK_SWR_HSI 
      0005AA 5F               [ 1] 1181 	clrw x  
      0005AB CD 00 B1         [ 4] 1182     call clock_init 
      0005AE CD 00 C7         [ 4] 1183 	call timer4_init
                                   1184 ; UART1 at 115200 BAUD
      0005B1 CD 01 90         [ 4] 1185 	call uart1_init
                                   1186 ; activate PE_4 (user button interrupt)
      0005B4 72 18 50 18      [ 1] 1187     bset PE_CR2,#USR_BTN_BIT 
                                   1188 ; display system information
      0005B8 AE 05 33         [ 2] 1189 	ldw x,#software 
      0005BB CD 01 DD         [ 4] 1190 	call puts 
      0005BE A6 01            [ 1] 1191 	ld a,#MAJOR 
      0005C0 C7 00 09         [ 1] 1192 	ld acc8,a 
      0005C3 5F               [ 1] 1193 	clrw x 
      0005C4 CF 00 07         [ 2] 1194 	ldw acc24,x 
      0005C7 A6 0A            [ 1] 1195 	ld a,#10 
      0005C9 CD 09 AD         [ 4] 1196 	call prti24 
      0005CC A6 2E            [ 1] 1197 	ld a,#'.
      0005CE CD 01 CB         [ 4] 1198 	call putc 
      0005D1 A6 00            [ 1] 1199 	ld a,#MINOR 
      0005D3 C7 00 09         [ 1] 1200 	ld acc8,a 
      0005D6 5F               [ 1] 1201 	clrw x 
      0005D7 CF 00 07         [ 2] 1202 	ldw acc24,x 
      0005DA A6 0A            [ 1] 1203 	ld a,#10 
      0005DC CD 09 AD         [ 4] 1204 	call prti24 
      0005DF A6 0D            [ 1] 1205 	ld a,#CR 
      0005E1 CD 01 CB         [ 4] 1206 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005E4 CD 1B 96         [ 4] 1207 	call seek_fdrive 
                                   1208 ; configure LD2 pin 
      0005E7 72 1A 50 0D      [ 1] 1209     bset PC_CR1,#LED2_BIT
      0005EB 72 1A 50 0E      [ 1] 1210     bset PC_CR2,#LED2_BIT
      0005EF 72 1A 50 0C      [ 1] 1211     bset PC_DDR,#LED2_BIT
      0005F3 9A               [ 1] 1212 	rim 
      0005F4 72 5C 00 11      [ 1] 1213 	inc seedy+1 
      0005F8 72 5C 00 0F      [ 1] 1214 	inc seedx+1 
      0005FC CD 06 67         [ 4] 1215 	call clear_basic
      0005FF CD 13 DE         [ 4] 1216 	call ubound 
      000602 CD 0F FB         [ 4] 1217 	call dpop 
      000605 CF 00 1F         [ 2] 1218 	ldw array_size,x
      000608 CD 06 11         [ 4] 1219 	call warm_init
      00060B CD 06 2E         [ 4] 1220 	call load_autorun
      00060E CC 07 EC         [ 2] 1221     jp interp 
                                   1222 
      000611                       1223 warm_init:
      000611 72 5F 00 21      [ 1] 1224 	clr flags 
      000615 72 5F 00 1E      [ 1] 1225 	clr loop_depth 
      000619 AE 17 80         [ 2] 1226 	ldw x,#dstack_empty 
      00061C CF 00 18         [ 2] 1227 	ldw dstkptr,x 
      00061F 35 04 00 22      [ 1] 1228 	mov tab_width,#TAB_WIDTH 
      000623 35 0A 00 06      [ 1] 1229 	mov base,#10 
      000627 AE 16 C8         [ 2] 1230 	ldw x,#tib 
      00062A CF 00 04         [ 2] 1231 	ldw basicptr,x 
      00062D 81               [ 4] 1232 	ret 
                                   1233 
                                   1234 ;--------------------------
                                   1235 ; if autorun file defined 
                                   1236 ; in eeprom address AUTORUN_NAME 
                                   1237 ; load and run it.
                                   1238 ;-------------------------
      00062E                       1239 load_autorun:
      00062E AE 40 00         [ 2] 1240 	ldw x,#AUTORUN_NAME
      000631 F6               [ 1] 1241 	ld a,(x)
      000632 27 1D            [ 1] 1242 	jreq 9$
      000634 90 AE 40 00      [ 2] 1243 	ldw y,#AUTORUN_NAME
      000638 CD 1B F4         [ 4] 1244 	call search_file
      00063B 25 02            [ 1] 1245 	jrc 2$ 
      00063D 20 12            [ 2] 1246 	jra 9$ 
      00063F CD 1D 03         [ 4] 1247 2$:	call load_file
      000642 AE 40 00         [ 2] 1248 	ldw x,#AUTORUN_NAME 
      000645 CD 01 DD         [ 4] 1249 	call puts
      000648 AE 06 52         [ 2] 1250 	ldw x,#autorun_msg 
      00064B CD 01 DD         [ 4] 1251 	call puts 
      00064E CC 19 EF         [ 2] 1252 	jp run_it    
      000651 81               [ 4] 1253 9$: ret 	
                                   1254 
      000652 20 6C 6F 61 64 65 64  1255 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1256 ;---------------------------
                                   1257 ; reset BASIC text variables 
                                   1258 ; and clear variables 
                                   1259 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000667                       1260 clear_basic:
      000667 72 5F 00 03      [ 1] 1261 	clr count 
      00066B AE 00 57         [ 2] 1262 	ldw x,#free_ram 
      00066E CF 00 1A         [ 2] 1263 	ldw txtbgn,x 
      000671 CF 00 1C         [ 2] 1264 	ldw txtend,x 
      000674 CD 05 14         [ 4] 1265 	call clear_vars 
      000677 81               [ 4] 1266 	ret 
                                   1267 
                                   1268 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1269 ;;   Tiny BASIC error messages     ;;
                                   1270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000678                       1271 err_msg:
      000678 00 00 06 90 06 9E 06  1272 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             AD 06 C7 06 D7
      000684 06 EE 07 05 07 20 07  1273 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             32 07 44
      00068E 07 51                 1274 	.word err_no_access 
                                   1275 
      000690 0A 4D 65 6D 6F 72 79  1276 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      00069E 0A 73 79 6E 74 61 78  1277 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      0006AD 0A 6D 61 74 68 20 6F  1278 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      0006C7 0A 64 69 76 69 73 69  1279 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      0006D7 0A 69 6E 76 61 6C 69  1280 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      0006EE 0A 72 75 6E 20 74 69  1281 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000705 0A 63 6F 6D 6D 61 6E  1282 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      000720 0A 64 75 70 6C 69 63  1283 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      000732 0A 46 69 6C 65 20 6E  1284 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      000744 0A 62 61 64 20 76 61  1285 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      000751 0A 46 69 6C 65 20 69  1286 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1287 
      000785 6C 61 73 74 20 74 6F  1288 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1289 
      000795                       1290 syntax_error:
      000795 A6 02            [ 1] 1291 	ld a,#ERR_SYNTAX 
                                   1292 
      000797                       1293 tb_error:
      000797 AE 06 78         [ 2] 1294 	ldw x, #err_msg 
      00079A 72 5F 00 08      [ 1] 1295 	clr acc16 
      00079E 48               [ 1] 1296 	sll a
      00079F 72 59 00 08      [ 1] 1297 	rlc acc16  
      0007A3 C7 00 09         [ 1] 1298 	ld acc8, a 
      0007A6 72 BB 00 08      [ 2] 1299 	addw x,acc16 
      0007AA FE               [ 2] 1300 	ldw x,(x)
      0007AB CD 01 DD         [ 4] 1301 	call puts
      0007AE 72 0B 00 21 18   [ 2] 1302 	btjf flags,#FCOMP, 1$
      0007B3 AE 16 C8         [ 2] 1303 	ldw x,#tib
      0007B6 CD 01 DD         [ 4] 1304 	call puts 
      0007B9 A6 0D            [ 1] 1305 	ld a,#CR 
      0007BB CD 01 CB         [ 4] 1306 	call putc
      0007BE CE 00 00         [ 2] 1307 	ldw x,in.w
      0007C1 CD 02 05         [ 4] 1308 	call spaces
      0007C4 A6 5E            [ 1] 1309 	ld a,#'^
      0007C6 CD 01 CB         [ 4] 1310 	call putc 
      0007C9 20 1A            [ 2] 1311 	jra 6$
      0007CB CE 00 04         [ 2] 1312 1$:	ldw x,basicptr
      0007CE CD 14 FB         [ 4] 1313 	call prt_basic_line
      0007D1 AE 07 85         [ 2] 1314 	ldw x,#rt_msg 
      0007D4 CD 01 DD         [ 4] 1315 	call puts 
      0007D7 5F               [ 1] 1316 	clrw x 
      0007D8 C6 00 02         [ 1] 1317 	ld a,in.saved 
      0007DB 97               [ 1] 1318 	ld xl,a 
      0007DC 72 D6 00 04      [ 4] 1319 	ld a,([basicptr],x)
      0007E0 5F               [ 1] 1320 	clrw x 
      0007E1 97               [ 1] 1321 	ld xl,a 
      0007E2 CD 09 F5         [ 4] 1322 	call print_int 
      0007E5 AE 17 FF         [ 2] 1323 6$: ldw x,#STACK_EMPTY 
      0007E8 94               [ 1] 1324     ldw sp,x
      0007E9                       1325 warm_start:
      0007E9 CD 06 11         [ 4] 1326 	call warm_init
                                   1327 ;----------------------------
                                   1328 ;   BASIC interpreter
                                   1329 ;----------------------------
      0007EC                       1330 interp:
      0007EC 72 5F 00 00      [ 1] 1331 	clr in.w
      0007F0 72 01 00 21 23   [ 2] 1332 	btjf flags,#FRUN,4$ 
                                   1333 ; running program
                                   1334 ; goto next basic line 
      0007F5 CE 00 04         [ 2] 1335 	ldw x,basicptr
      0007F8 E6 02            [ 1] 1336 	ld a,(2,x) ; line length 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0007FA C7 00 09         [ 1] 1337 	ld acc8,a 
      0007FD 72 5F 00 08      [ 1] 1338 	clr acc16 
      000801 72 BB 00 08      [ 2] 1339 	addw x,acc16
      000805 C3 00 1C         [ 2] 1340 	cpw x,txtend 
      000808 2A DF            [ 1] 1341 	jrpl warm_start
      00080A CF 00 04         [ 2] 1342 	ldw basicptr,x ; start of next line  
      00080D E6 02            [ 1] 1343 	ld a,(2,x)
      00080F C7 00 03         [ 1] 1344 	ld count,a 
      000812 35 03 00 01      [ 1] 1345 	mov in,#3 ; skip first 3 bytes of line 
      000816 20 14            [ 2] 1346 	jra interp_loop 
      000818                       1347 4$: ; commande line mode 	
      000818 72 5F 00 01      [ 1] 1348 	clr in
      00081C A6 0D            [ 1] 1349 	ld a,#CR 
      00081E CD 01 CB         [ 4] 1350 	call putc 
      000821 A6 3E            [ 1] 1351 	ld a,#'> 
      000823 CD 01 CB         [ 4] 1352 	call putc 
      000826 CD 0A E3         [ 4] 1353 	call readln
      000829 CD 04 19         [ 4] 1354 	call compile
      00082C                       1355 interp_loop:  
      00082C C6 00 01         [ 1] 1356 	ld a,in 
      00082F C1 00 03         [ 1] 1357 	cp a,count  
      000832 2A B8            [ 1] 1358 	jrpl interp
      000834 CD 08 5C         [ 4] 1359 	call next_token
      000837 A1 01            [ 1] 1360 	cp a,#TK_COLON 
      000839 27 F1            [ 1] 1361 	jreq interp_loop 
      00083B A1 00            [ 1] 1362 	cp a,#TK_NONE 
                                   1363 ;	jreq interp 
      00083D                       1364 1$:
      00083D A1 05            [ 1] 1365 	cp a,#TK_VAR
      00083F 26 05            [ 1] 1366 	jrne 2$
      000841 CD 14 0A         [ 4] 1367 	call let02  
      000844 20 E6            [ 2] 1368 	jra interp_loop 
      000846                       1369 2$:	
      000846 A1 02            [ 1] 1370 	cp a,#TK_ARRAY 
      000848 26 08            [ 1] 1371 	jrne 3$
      00084A CD 12 4F         [ 4] 1372 	call get_array_element
      00084D CD 14 0A         [ 4] 1373 	call let02 
      000850 20 DA            [ 2] 1374 	jra interp_loop 
      000852                       1375 3$:
      000852 A1 06            [ 1] 1376 	cp a,#TK_CMD
      000854 26 03            [ 1] 1377 	jrne 4$
      000856 FD               [ 4] 1378 	call (x) 
      000857 20 D3            [ 2] 1379 	jra interp_loop 
      000859                       1380 4$:	
      000859 CC 07 95         [ 2] 1381 	jp syntax_error 
                                   1382 
                                   1383 ;--------------------------
                                   1384 ; extract next token from
                                   1385 ; token list 
                                   1386 ; basicptr -> base address 
                                   1387 ; in  -> offset in list array 
                                   1388 ; output:
                                   1389 ;   A 		token attribute
                                   1390 ;   X 		token value if there is one
                                   1391 ;----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00085C                       1392 next_token:
      00085C C6 00 01         [ 1] 1393 	ld a,in 
      00085F C0 00 03         [ 1] 1394 	sub a,count 
      000862 27 3B            [ 1] 1395 	jreq 9$
      000864 55 00 01 00 02   [ 1] 1396 	mov in.saved,in
      000869 CE 00 04         [ 2] 1397 	ldw x,basicptr 
      00086C 72 D6 00 00      [ 4] 1398 	ld a,([in.w],x)
      000870 72 5C 00 01      [ 1] 1399 	inc in 
      000874 A1 02            [ 1] 1400 	cp a,#TK_ARRAY  
      000876 23 27            [ 2] 1401 	jrule 9$
      000878 A1 03            [ 1] 1402 	cp a,#TK_CHAR
      00087A 26 0D            [ 1] 1403 	jrne 1$
      00087C 72 D6 00 00      [ 4] 1404 	ld a,([in.w],x)
      000880 72 5C 00 01      [ 1] 1405 	inc in
      000884 5F               [ 1] 1406 	clrw x 
      000885 97               [ 1] 1407 	ld xl,a 
      000886 A6 03            [ 1] 1408 	ld a,#TK_CHAR
      000888 81               [ 4] 1409 	ret 
      000889 A1 0A            [ 1] 1410 1$:	cp a,#TK_QSTR 
      00088B 25 06            [ 1] 1411 	jrult 2$
      00088D 72 BB 00 00      [ 2] 1412 	addw x,in.w 
      000891 20 0C            [ 2] 1413 	jra 9$
      000893 72 DE 00 00      [ 5] 1414 2$: ldw x,([in.w],x)
      000897 72 5C 00 01      [ 1] 1415 	inc in 
      00089B 72 5C 00 01      [ 1] 1416 	inc in
      00089F 81               [ 4] 1417 9$: ret	
                                   1418 
                                   1419 
                                   1420 ;----------------------------------------
                                   1421 ;   DEBUG support functions
                                   1422 ;----------------------------------------
                           000001  1423 .if DEBUG 
                                   1424 ; turn LED on 
      0008A0                       1425 ledon:
      0008A0 72 1A 50 0A      [ 1] 1426     bset PC_ODR,#LED2_BIT
      0008A4 81               [ 4] 1427     ret 
                                   1428 
                                   1429 ; turn LED off 
      0008A5                       1430 ledoff:
      0008A5 72 1B 50 0A      [ 1] 1431     bres PC_ODR,#LED2_BIT 
      0008A9 81               [ 4] 1432     ret 
                                   1433 
                                   1434 ; invert LED status 
      0008AA                       1435 ledtoggle:
      0008AA A6 20            [ 1] 1436     ld a,#LED2_MASK
      0008AC C8 50 0A         [ 1] 1437     xor a,PC_ODR
      0008AF C7 50 0A         [ 1] 1438     ld PC_ODR,a
      0008B2 81               [ 4] 1439     ret 
                                   1440 
      0008B3                       1441 left_paren:
      0008B3 A6 20            [ 1] 1442 	ld a,#SPACE 
      0008B5 CD 01 CB         [ 4] 1443 	call putc
      0008B8 A6 28            [ 1] 1444 	ld a,#'( 
      0008BA CD 01 CB         [ 4] 1445 	call putc 	
      0008BD 81               [ 4] 1446 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1447 
                                   1448 ;------------------------------
                                   1449 ; print 8 bit register 
                                   1450 ; input:
                                   1451 ;   X  point to register name 
                                   1452 ;   A  register value to print 
                                   1453 ; output:
                                   1454 ;   none
                                   1455 ;------------------------------- 
      0008BE                       1456 prt_reg8:
      0008BE 88               [ 1] 1457 	push a 
      0008BF CD 01 DD         [ 4] 1458 	call puts 
      0008C2 7B 01            [ 1] 1459 	ld a,(1,sp) 
      0008C4 C7 00 09         [ 1] 1460 	ld acc8,a 
      0008C7 5F               [ 1] 1461 	clrw x 
      0008C8 97               [ 1] 1462 	ld xl,a 
      0008C9 35 10 00 06      [ 1] 1463 	mov base,#16
      0008CD CD 09 F5         [ 4] 1464 	call print_int 
      0008D0 CD 08 B3         [ 4] 1465 	call left_paren 
      0008D3 84               [ 1] 1466 	pop a 
      0008D4 5F               [ 1] 1467 	clrw x 
      0008D5 97               [ 1] 1468 	ld xl,a 
      0008D6 35 0A 00 06      [ 1] 1469 	mov base,#10 
      0008DA CD 09 F5         [ 4] 1470 	call print_int  
      0008DD A6 29            [ 1] 1471 	ld a,#') 
      0008DF CD 01 CB         [ 4] 1472 	call putc
      0008E2 81               [ 4] 1473 	ret
                                   1474 
                                   1475 ;--------------------------------
                                   1476 ; print 16 bits register 
                                   1477 ; input:
                                   1478 ;   X   point register name 
                                   1479 ;   Y   register value to print 
                                   1480 ; output:
                                   1481 ;  none
                                   1482 ;--------------------------------
      0008E3                       1483 prt_reg16: 
      0008E3 90 89            [ 2] 1484 	pushw y 
      0008E5 CD 01 DD         [ 4] 1485 	call puts 
      0008E8 1E 01            [ 2] 1486 	ldw x,(1,sp) 
      0008EA 35 10 00 06      [ 1] 1487 	mov base,#16 
      0008EE CD 09 F5         [ 4] 1488 	call print_int  
      0008F1 CD 08 B3         [ 4] 1489 	call left_paren 
      0008F4 85               [ 2] 1490 	popw x 
      0008F5 35 0A 00 06      [ 1] 1491 	mov base,#10 
      0008F9 CD 09 F5         [ 4] 1492 	call print_int  
      0008FC A6 29            [ 1] 1493 	ld a,#') 
      0008FE CD 01 CB         [ 4] 1494 	call putc
      000901 81               [ 4] 1495 	ret 
                                   1496 
                                   1497 ;------------------------------------
                                   1498 ; print registers contents saved on
                                   1499 ; stack by trap interrupt.
                                   1500 ;------------------------------------
      000902                       1501 print_registers:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000902 AE 09 55         [ 2] 1502 	ldw x,#STATES
      000905 CD 01 DD         [ 4] 1503 	call puts
                                   1504 ; print EPC 
      000908 AE 09 92         [ 2] 1505 	ldw x, #REG_EPC
      00090B CD 01 DD         [ 4] 1506 	call puts 
      00090E 7B 0B            [ 1] 1507 	ld a, (11,sp)
      000910 C7 00 09         [ 1] 1508 	ld acc8,a 
      000913 7B 0A            [ 1] 1509 	ld a, (10,sp) 
      000915 C7 00 08         [ 1] 1510 	ld acc16,a 
      000918 7B 09            [ 1] 1511 	ld a,(9,sp) 
      00091A C7 00 07         [ 1] 1512 	ld acc24,a
      00091D 5F               [ 1] 1513 	clrw x  
      00091E A6 10            [ 1] 1514 	ld a,#16
      000920 CD 09 AD         [ 4] 1515 	call prti24  
                                   1516 ; print X
      000923 AE 09 9B         [ 2] 1517 	ldw x,#REG_X
      000926 16 05            [ 2] 1518 	ldw y,(5,sp)
      000928 CD 08 E3         [ 4] 1519 	call prt_reg16  
                                   1520 ; print Y 
      00092B AE 09 97         [ 2] 1521 	ldw x,#REG_Y
      00092E 16 07            [ 2] 1522 	ldw y, (7,sp)
      000930 CD 08 E3         [ 4] 1523 	call prt_reg16  
                                   1524 ; print A 
      000933 AE 09 9F         [ 2] 1525 	ldw x,#REG_A
      000936 7B 04            [ 1] 1526 	ld a, (4,sp) 
      000938 CD 08 BE         [ 4] 1527 	call prt_reg8
                                   1528 ; print CC 
      00093B AE 09 A3         [ 2] 1529 	ldw x,#REG_CC 
      00093E 7B 03            [ 1] 1530 	ld a, (3,sp) 
      000940 CD 08 BE         [ 4] 1531 	call prt_reg8 
                                   1532 ; print SP 
      000943 AE 09 A8         [ 2] 1533 	ldw x,#REG_SP
      000946 90 96            [ 1] 1534 	ldw y,sp 
      000948 72 A9 00 0C      [ 2] 1535 	addw y,#12
      00094C CD 08 E3         [ 4] 1536 	call prt_reg16  
      00094F A6 0A            [ 1] 1537 	ld a,#'\n' 
      000951 CD 01 CB         [ 4] 1538 	call putc
      000954 81               [ 4] 1539 	ret
                                   1540 
      000955 0A 52 65 67 69 73 74  1541 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000992 45 50 43 3A 00        1542 REG_EPC: .asciz "EPC:"
      000997 0A 59 3A 00           1543 REG_Y:   .asciz "\nY:" 
      00099B 0A 58 3A 00           1544 REG_X:   .asciz "\nX:"
      00099F 0A 41 3A 00           1545 REG_A:   .asciz "\nA:" 
      0009A3 0A 43 43 3A 00        1546 REG_CC:  .asciz "\nCC:"
      0009A8 0A 53 50 3A 00        1547 REG_SP:  .asciz "\nSP:"
                                   1548 .endif ; DEBUG 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1549 
                                   1550 ;------------------------------------
                                   1551 ; print integer in acc24 
                                   1552 ; input:
                                   1553 ;	acc24 		integer to print 
                                   1554 ;	A 			numerical base for conversion 
                                   1555 ;               if bit 7 is set add a space at print end.
                                   1556 ;   XL 			field width, 0 -> no fill.
                                   1557 ;  output:
                                   1558 ;    none 
                                   1559 ;------------------------------------
                           000001  1560 	WIDTH = 1
                           000002  1561 	BASE = 2
                           000003  1562 	ADD_SPACE=3 ; add a space after number 
                           000003  1563 	VSIZE = 3
      0009AD                       1564 prti24:
      0009AD                       1565 	_vars VSIZE 
      0009AD 52 03            [ 2]    1     sub sp,#VSIZE 
      0009AF 0F 03            [ 1] 1566 	clr (ADD_SPACE,sp)
      0009B1 A5 80            [ 1] 1567 	bcp a,#0x80 
      0009B3 27 02            [ 1] 1568 	jreq 0$ 
      0009B5 03 03            [ 1] 1569 	cpl (ADD_SPACE,sp)
      0009B7 A4 1F            [ 1] 1570 0$:	and a,#31 
      0009B9 6B 02            [ 1] 1571 	ld (BASE,sp),a
      0009BB 9F               [ 1] 1572 	ld a,xl
      0009BC 6B 01            [ 1] 1573 	ld (WIDTH,sp),a 
      0009BE 7B 02            [ 1] 1574 	ld a, (BASE,sp)  
      0009C0 CD 0A 51         [ 4] 1575     call itoa  ; conversion entier en  .asciz
      0009C3 7B 01            [ 1] 1576 1$: ld a,(WIDTH,sp)
      0009C5 27 1F            [ 1] 1577 	jreq 4$
      0009C7 C7 00 09         [ 1] 1578 	ld acc8,a 
      0009CA 89               [ 2] 1579 	pushw x 
      0009CB CD 02 9F         [ 4] 1580 	call strlen 
      0009CE 9F               [ 1] 1581 	ld a,xl 
      0009CF 85               [ 2] 1582 	popw x 
      0009D0 31 00 09         [ 3] 1583 	exg a,acc8 
      0009D3 C0 00 09         [ 1] 1584 	sub a,acc8 
      0009D6 2B 0E            [ 1] 1585 	jrmi 4$
      0009D8 6B 01            [ 1] 1586 	ld (WIDTH,sp),a 
      0009DA A6 20            [ 1] 1587 	ld  a,#SPACE
      0009DC 0D 01            [ 1] 1588 3$: tnz (WIDTH,sp)
      0009DE 27 06            [ 1] 1589 	jreq 4$
      0009E0 5A               [ 2] 1590 	decw x 
      0009E1 F7               [ 1] 1591 	ld (x),a 
      0009E2 0A 01            [ 1] 1592 	dec (WIDTH,sp) 
      0009E4 20 F6            [ 2] 1593 	jra 3$
      0009E6                       1594 4$: 
      0009E6 CD 01 DD         [ 4] 1595 	call puts 
      0009E9 0D 03            [ 1] 1596 	tnz (ADD_SPACE,sp)
      0009EB 27 05            [ 1] 1597 	jreq 5$
      0009ED A6 20            [ 1] 1598     ld a,#SPACE 
      0009EF CD 01 CB         [ 4] 1599 	call putc 
      0009F2                       1600 5$: _drop VSIZE 
      0009F2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0009F4 81               [ 4] 1601     ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1602 
                                   1603 ;-----------------------------------
                                   1604 ; print a 16 bit integer 
                                   1605 ; using variable 'base' as conversion
                                   1606 ; format.
                                   1607 ; input:
                                   1608 ;   X       integer to print 
                                   1609 ;   base    conversion base 
                                   1610 ; output:
                                   1611 ;   none 
                                   1612 ;-----------------------------------
                           000001  1613 	SIGN=1
                           000001  1614 	VSIZE=1
      0009F5                       1615 print_int: 
      0009F5                       1616 	_vars VSIZE 
      0009F5 52 01            [ 2]    1     sub sp,#VSIZE 
      0009F7 0F 01            [ 1] 1617 	clr (SIGN,sp)
      0009F9 90 AE 17 3F      [ 2] 1618 	ldw y,#pad+PAD_SIZE-1 
      0009FD 90 7F            [ 1] 1619 	clr (y)
      0009FF C6 00 06         [ 1] 1620 	ld a,base  
      000A02 A1 0A            [ 1] 1621 	cp a,#10 
      000A04 26 06            [ 1] 1622 	jrne 1$ 
      000A06 5D               [ 2] 1623 	tnzw x 
      000A07 2A 03            [ 1] 1624 	jrpl 1$ 
      000A09 03 01            [ 1] 1625 	cpl (SIGN,sp)
      000A0B 50               [ 2] 1626 	negw x 	 
      000A0C                       1627 1$:	
      000A0C C6 00 06         [ 1] 1628 	ld a,base 
      000A0F 62               [ 2] 1629 	div x,a 
      000A10 AB 30            [ 1] 1630 	add a,#'0 
      000A12 A1 3A            [ 1] 1631 	cp a,#'9+1 
      000A14 2B 02            [ 1] 1632 	jrmi 2$ 
      000A16 AB 07            [ 1] 1633 	add a,#7 
      000A18 90 5A            [ 2] 1634 2$: decw y 
      000A1A 90 F7            [ 1] 1635 	ld (y),a 
      000A1C 5D               [ 2] 1636 	tnzw x 
      000A1D 26 ED            [ 1] 1637 	jrne 1$ 
      000A1F A6 10            [ 1] 1638 	ld a,#16 
      000A21 C1 00 06         [ 1] 1639 	cp a,base 
      000A24 26 08            [ 1] 1640 	jrne 3$
      000A26 A6 24            [ 1] 1641 	ld a,#'$
      000A28 90 5A            [ 2] 1642 	decw y  
      000A2A 90 F7            [ 1] 1643 	ld (y),a
      000A2C 20 0A            [ 2] 1644 	jra 9$ 
      000A2E 0D 01            [ 1] 1645 3$: tnz (SIGN,sp)
      000A30 27 06            [ 1] 1646 	jreq 9$ 
      000A32 A6 2D            [ 1] 1647 	ld a,#'-
      000A34 90 5A            [ 2] 1648 	decw y  
      000A36 90 F7            [ 1] 1649 	ld (y),a
      000A38                       1650 9$:	
      000A38 93               [ 1] 1651 	ldw x,y 
      000A39 1D 17 3F         [ 2] 1652 	subw x,#pad+PAD_SIZE-1 
      000A3C 50               [ 2] 1653 	negw x  
      000A3D                       1654 10$:
      000A3D 90 5A            [ 2] 1655 	decw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A3F A6 20            [ 1] 1656 	ld a,#SPACE 
      000A41 90 F7            [ 1] 1657 	ld (y),a
      000A43 5C               [ 2] 1658 	incw x 
      000A44 9F               [ 1] 1659 	ld a,xl 
      000A45 C1 00 22         [ 1] 1660 	cp a,tab_width
      000A48 2B F3            [ 1] 1661 	jrmi 10$ 
      000A4A                       1662 12$:
      000A4A 93               [ 1] 1663     ldw x,y 
      000A4B CD 01 DD         [ 4] 1664 	call puts  
      000A4E                       1665 	_drop VSIZE 
      000A4E 5B 01            [ 2]    1     addw sp,#VSIZE 
      000A50 81               [ 4] 1666 	ret 
                                   1667 
                                   1668 ;------------------------------------
                                   1669 ; convert integer in acc24 to string
                                   1670 ; input:
                                   1671 ;   A	  	base
                                   1672 ;	acc24	integer to convert
                                   1673 ; output:
                                   1674 ;   X  		pointer to string
                                   1675 ;------------------------------------
                           000001  1676 	SIGN=1  ; integer sign 
                           000002  1677 	BASE=2  ; numeric base 
                           000002  1678 	VSIZE=2  ;locals size
      000A51                       1679 itoa:
      000A51 52 02            [ 2] 1680 	sub sp,#VSIZE
      000A53 6B 02            [ 1] 1681 	ld (BASE,sp), a  ; base
      000A55 0F 01            [ 1] 1682 	clr (SIGN,sp)    ; sign
      000A57 A1 0A            [ 1] 1683 	cp a,#10
      000A59 26 0A            [ 1] 1684 	jrne 1$
                                   1685 	; base 10 string display with negative sign if bit 23==1
      000A5B 72 0F 00 07 05   [ 2] 1686 	btjf acc24,#7,1$
      000A60 03 01            [ 1] 1687 	cpl (SIGN,sp)
      000A62 CD 0A C0         [ 4] 1688 	call neg_acc24
      000A65                       1689 1$:
                                   1690 ; initialize string pointer 
      000A65 AE 17 3F         [ 2] 1691 	ldw x,#pad+PAD_SIZE-1
      000A68 7F               [ 1] 1692 	clr (x)
      000A69                       1693 itoa_loop:
      000A69 7B 02            [ 1] 1694     ld a,(BASE,sp)
      000A6B CD 0A 98         [ 4] 1695     call divu24_8 ; acc24/A 
      000A6E AB 30            [ 1] 1696     add a,#'0  ; remainder of division
      000A70 A1 3A            [ 1] 1697     cp a,#'9+1
      000A72 2B 02            [ 1] 1698     jrmi 2$
      000A74 AB 07            [ 1] 1699     add a,#7 
      000A76 5A               [ 2] 1700 2$: decw x
      000A77 F7               [ 1] 1701     ld (x),a
                                   1702 	; if acc24==0 conversion done
      000A78 C6 00 07         [ 1] 1703 	ld a,acc24
      000A7B CA 00 08         [ 1] 1704 	or a,acc16
      000A7E CA 00 09         [ 1] 1705 	or a,acc8
      000A81 26 E6            [ 1] 1706     jrne itoa_loop
                                   1707 	;conversion done, next add '$' or '-' as required
      000A83 7B 02            [ 1] 1708 	ld a,(BASE,sp)
      000A85 A1 10            [ 1] 1709 	cp a,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A87 27 08            [ 1] 1710 	jreq 8$
      000A89 7B 01            [ 1] 1711 	ld a,(SIGN,sp)
      000A8B 27 08            [ 1] 1712     jreq 10$
      000A8D A6 2D            [ 1] 1713     ld a,#'-
      000A8F 20 02            [ 2] 1714 	jra 9$ 
      000A91 A6 24            [ 1] 1715 8$: ld a,#'$ 
      000A93 5A               [ 2] 1716 9$: decw x
      000A94 F7               [ 1] 1717     ld (x),a
      000A95                       1718 10$:
      000A95 5B 02            [ 2] 1719 	addw sp,#VSIZE
      000A97 81               [ 4] 1720 	ret
                                   1721 
                                   1722 ;-------------------------------------
                                   1723 ; divide uint24_t by uint8_t
                                   1724 ; used to convert uint24_t to string
                                   1725 ; input:
                                   1726 ;	acc24	dividend
                                   1727 ;   A 		divisor
                                   1728 ; output:
                                   1729 ;   acc24	quotient
                                   1730 ;   A		remainder
                                   1731 ;------------------------------------- 
                                   1732 ; offset  on sp of arguments and locals
                           000001  1733 	U8   = 1   ; divisor on stack
                           000001  1734 	VSIZE =1
      000A98                       1735 divu24_8:
      000A98 89               [ 2] 1736 	pushw x ; save x
      000A99 88               [ 1] 1737 	push a 
                                   1738 	; ld dividend UU:MM bytes in X
      000A9A C6 00 07         [ 1] 1739 	ld a, acc24
      000A9D 95               [ 1] 1740 	ld xh,a
      000A9E C6 00 08         [ 1] 1741 	ld a,acc24+1
      000AA1 97               [ 1] 1742 	ld xl,a
      000AA2 7B 01            [ 1] 1743 	ld a,(U8,SP) ; divisor
      000AA4 62               [ 2] 1744 	div x,a ; UU:MM/U8
      000AA5 88               [ 1] 1745 	push a  ;save remainder
      000AA6 9E               [ 1] 1746 	ld a,xh
      000AA7 C7 00 07         [ 1] 1747 	ld acc24,a
      000AAA 9F               [ 1] 1748 	ld a,xl
      000AAB C7 00 08         [ 1] 1749 	ld acc24+1,a
      000AAE 84               [ 1] 1750 	pop a
      000AAF 95               [ 1] 1751 	ld xh,a
      000AB0 C6 00 09         [ 1] 1752 	ld a,acc24+2
      000AB3 97               [ 1] 1753 	ld xl,a
      000AB4 7B 01            [ 1] 1754 	ld a,(U8,sp) ; divisor
      000AB6 62               [ 2] 1755 	div x,a  ; R:LL/U8
      000AB7 6B 01            [ 1] 1756 	ld (U8,sp),a ; save remainder
      000AB9 9F               [ 1] 1757 	ld a,xl
      000ABA C7 00 09         [ 1] 1758 	ld acc24+2,a
      000ABD 84               [ 1] 1759 	pop a
      000ABE 85               [ 2] 1760 	popw x
      000ABF 81               [ 4] 1761 	ret
                                   1762 
                                   1763 ;------------------------------------
                                   1764 ;  two's complement acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1765 ;  input:
                                   1766 ;		acc24 variable
                                   1767 ;  output:
                                   1768 ;		acc24 variable
                                   1769 ;-------------------------------------
      000AC0                       1770 neg_acc24:
      000AC0 72 53 00 09      [ 1] 1771 	cpl acc24+2
      000AC4 72 53 00 08      [ 1] 1772 	cpl acc24+1
      000AC8 72 53 00 07      [ 1] 1773 	cpl acc24
      000ACC A6 01            [ 1] 1774 	ld a,#1
      000ACE CB 00 09         [ 1] 1775 	add a,acc24+2
      000AD1 C7 00 09         [ 1] 1776 	ld acc24+2,a
      000AD4 4F               [ 1] 1777 	clr a
      000AD5 C9 00 08         [ 1] 1778 	adc a,acc24+1
      000AD8 C7 00 08         [ 1] 1779 	ld acc24+1,a 
      000ADB 4F               [ 1] 1780 	clr a 
      000ADC C9 00 07         [ 1] 1781 	adc a,acc24 
      000ADF C7 00 07         [ 1] 1782 	ld acc24,a 
      000AE2 81               [ 4] 1783 	ret
                                   1784 
                                   1785 
                                   1786 ;------------------------------------
                                   1787 ; read a line of text from terminal
                                   1788 ; input:
                                   1789 ;	none
                                   1790 ; local variable on stack:
                                   1791 ;	LL  line length
                                   1792 ;   RXCHAR last received chaaracte 
                                   1793 ; output:
                                   1794 ;   text in tib  buffer
                                   1795 ;------------------------------------
                                   1796 	; local variables
                           000001  1797 	LL_HB=1
                           000001  1798 	RXCHAR = 1 ; last char received
                           000002  1799 	LL = 2  ; accepted line length
                           000002  1800 	VSIZE=2 
      000AE3                       1801 readln:
      000AE3 5F               [ 1] 1802 	clrw x 
      000AE4 89               [ 2] 1803 	pushw x 
      000AE5 90 AE 16 C8      [ 2] 1804  	ldw y,#tib ; input buffer
      000AE9                       1805 readln_loop:
      000AE9 CD 01 D4         [ 4] 1806 	call getc
      000AEC 6B 01            [ 1] 1807 	ld (RXCHAR,sp),a
      000AEE A1 0D            [ 1] 1808 	cp a,#CR
      000AF0 26 03            [ 1] 1809 	jrne 1$
      000AF2 CC 0B 5E         [ 2] 1810 	jp readln_quit
      000AF5 A1 0A            [ 1] 1811 1$:	cp a,#NL
      000AF7 27 65            [ 1] 1812 	jreq readln_quit
      000AF9 A1 08            [ 1] 1813 	cp a,#BSP
      000AFB 27 3D            [ 1] 1814 	jreq del_back
      000AFD A1 04            [ 1] 1815 	cp a,#CTRL_D
      000AFF 27 2A            [ 1] 1816 	jreq del_ln
      000B01 A1 12            [ 1] 1817 	cp a,#CTRL_R 
      000B03 27 06            [ 1] 1818 	jreq reprint 
                                   1819 ;	cp a,#'[
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1820 ;	jreq ansi_seq
      000B05                       1821 final_test:
      000B05 A1 20            [ 1] 1822 	cp a,#SPACE
      000B07 2A 40            [ 1] 1823 	jrpl accept_char
      000B09 20 DE            [ 2] 1824 	jra readln_loop
      000B0B                       1825 ansi_seq:
                                   1826 ;	call getc
                                   1827 ;	cp a,#'C 
                                   1828 ;	jreq rigth_arrow
                                   1829 ;	cp a,#'D 
                                   1830 ;	jreq left_arrow 
                                   1831 ;	jra final_test
      000B0B                       1832 right_arrow:
                                   1833 ;	ld a,#BSP 
                                   1834 ;	call putc 
                                   1835 ;	jra realn_loop 
      000B0B                       1836 left_arrow:
                                   1837 
                                   1838 ;	jra readln_loop
      000B0B                       1839 reprint: 
      000B0B 0D 02            [ 1] 1840 	tnz (LL,sp)
      000B0D 26 DA            [ 1] 1841 	jrne readln_loop
      000B0F AE 16 C8         [ 2] 1842 	ldw x,#tib 
      000B12 CD 02 9F         [ 4] 1843 	call strlen 
      000B15 90 AE 16 C8      [ 2] 1844 	ldw y,#tib 
      000B19 9F               [ 1] 1845 	ld a,xl
      000B1A 27 CD            [ 1] 1846 	jreq readln_loop
      000B1C 6B 02            [ 1] 1847 	ld (LL,sp),a 
      000B1E AE 16 C8         [ 2] 1848 	ldw x,#tib 
      000B21 CD 01 DD         [ 4] 1849 	call puts
      000B24 0F 01            [ 1] 1850 	clr (LL_HB,sp)
      000B26 72 F9 01         [ 2] 1851 	addw y,(LL_HB,sp)
      000B29 20 BE            [ 2] 1852 	jra readln_loop 
      000B2B                       1853 del_ln:
      000B2B 7B 02            [ 1] 1854 	ld a,(LL,sp)
      000B2D CD 01 F7         [ 4] 1855 	call delete
      000B30 90 AE 16 C8      [ 2] 1856 	ldw y,#tib
      000B34 90 7F            [ 1] 1857 	clr (y)
      000B36 0F 02            [ 1] 1858 	clr (LL,sp)
      000B38 20 AF            [ 2] 1859 	jra readln_loop
      000B3A                       1860 del_back:
      000B3A 0D 02            [ 1] 1861     tnz (LL,sp)
      000B3C 27 AB            [ 1] 1862     jreq readln_loop
      000B3E 0A 02            [ 1] 1863     dec (LL,sp)
      000B40 90 5A            [ 2] 1864     decw y
      000B42 90 7F            [ 1] 1865     clr  (y)
      000B44 CD 01 E7         [ 4] 1866     call bksp 
      000B47 20 A0            [ 2] 1867     jra readln_loop	
      000B49                       1868 accept_char:
      000B49 A6 4F            [ 1] 1869 	ld a,#TIB_SIZE-1
      000B4B 11 02            [ 1] 1870 	cp a, (LL,sp)
      000B4D 27 9A            [ 1] 1871 	jreq readln_loop
      000B4F 7B 01            [ 1] 1872 	ld a,(RXCHAR,sp)
      000B51 90 F7            [ 1] 1873 	ld (y),a
      000B53 0C 02            [ 1] 1874 	inc (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B55 90 5C            [ 2] 1875 	incw y
      000B57 90 7F            [ 1] 1876 	clr (y)
      000B59 CD 01 CB         [ 4] 1877 	call putc 
      000B5C 20 8B            [ 2] 1878 	jra readln_loop
      000B5E                       1879 readln_quit:
      000B5E 90 7F            [ 1] 1880 	clr (y)
      000B60 7B 02            [ 1] 1881 	ld a,(LL,sp)
      000B62 C7 00 03         [ 1] 1882 	ld count,a 
      000B65                       1883 	_drop VSIZE 
      000B65 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B67 A6 0D            [ 1] 1884 	ld a,#CR
      000B69 CD 01 CB         [ 4] 1885 	call putc
      000B6C 81               [ 4] 1886 	ret
                                   1887 
                           000001  1888 .if DEBUG 	
                                   1889 ;----------------------------
                                   1890 ; command interface
                                   1891 ; only 3 commands:
                                   1892 ;  'q' to resume application
                                   1893 ;  'p [addr]' to print memory values 
                                   1894 ;  's addr' to print string 
                                   1895 ;----------------------------
                                   1896 ;local variable 
                           000001  1897 	PSIZE=1
                           000001  1898 	VSIZE=1 
      000B6D                       1899 cmd_itf:
      000B6D 52 01            [ 2] 1900 	sub sp,#VSIZE 
      000B6F 72 5F 00 12      [ 1] 1901 	clr farptr 
      000B73 72 5F 00 13      [ 1] 1902 	clr farptr+1 
      000B77 72 5F 00 14      [ 1] 1903 	clr farptr+2  
      000B7B                       1904 repl:
      000B7B A6 0D            [ 1] 1905 	ld a,#CR 
      000B7D CD 01 CB         [ 4] 1906 	call putc 
      000B80 A6 3F            [ 1] 1907 	ld a,#'? 
      000B82 CD 01 CB         [ 4] 1908 	call putc
      000B85 72 5F 00 00      [ 1] 1909 	clr in.w 
      000B89 72 5F 00 01      [ 1] 1910 	clr in 
      000B8D CD 0A E3         [ 4] 1911 	call readln
      000B90 90 AE 16 C8      [ 2] 1912 	ldw y,#tib  
      000B94 90 F6            [ 1] 1913 	ld a,(y)
      000B96 27 E3            [ 1] 1914 	jreq repl  
      000B98 72 5C 00 01      [ 1] 1915 	inc in 
      000B9C CD 0F 1D         [ 4] 1916 	call to_upper 
      000B9F A1 51            [ 1] 1917 	cp a,#'Q 
      000BA1 26 17            [ 1] 1918 	jrne test_p
      000BA3                       1919 repl_exit:
      000BA3 72 5F 16 C8      [ 1] 1920 	clr tib 
      000BA7 72 5F 00 03      [ 1] 1921 	clr count 
      000BAB 72 5F 00 01      [ 1] 1922 	clr in 
      000BAF                       1923 	_drop #VSIZE 	
      000BAF 5B 01            [ 2]    1     addw sp,##VSIZE 
      000BB1 81               [ 4] 1924 	ret  
      000BB2                       1925 invalid:
      000BB2 AE 0C 30         [ 2] 1926 	ldw x,#invalid_cmd 
      000BB5 CD 01 DD         [ 4] 1927 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BB8 20 C1            [ 2] 1928 	jra repl 
      000BBA                       1929 test_p:	
      000BBA A1 50            [ 1] 1930     cp a,#'P 
      000BBC 27 11            [ 1] 1931 	jreq mem_peek
      000BBE A1 53            [ 1] 1932     cp a,#'S 
      000BC0 26 F0            [ 1] 1933 	jrne invalid 
      000BC2                       1934 print_string:	
      000BC2 CD 0D 5C         [ 4] 1935 	call get_token
      000BC5 A1 04            [ 1] 1936 	cp a,#TK_INTGR 
      000BC7 26 E9            [ 1] 1937 	jrne invalid 
      000BC9 CD 01 DD         [ 4] 1938 	call puts
      000BCC CC 0B 7B         [ 2] 1939 	jp repl 	
      000BCF                       1940 mem_peek:
      000BCF A6 20            [ 1] 1941 	ld a,#SPACE 
      000BD1 CD 0F D5         [ 4] 1942 	call skip  	 
      000BD4 72 B9 00 00      [ 2] 1943 	addw y,in.w 
      000BD8 AE 17 18         [ 2] 1944 	ldw x,#pad 
      000BDB CD 02 BD         [ 4] 1945 	call strcpy
      000BDE CD 0F 29         [ 4] 1946 	call atoi24 	
      000BE1 C6 00 07         [ 1] 1947 	ld a, acc24 
      000BE4 CA 00 08         [ 1] 1948 	or a,acc16 
      000BE7 CA 00 09         [ 1] 1949 	or a,acc8 
      000BEA 26 02            [ 1] 1950 	jrne 1$ 
      000BEC 20 0C            [ 2] 1951 	jra peek_byte  
      000BEE CE 00 07         [ 2] 1952 1$:	ldw x,acc24 
      000BF1 CF 00 12         [ 2] 1953 	ldw farptr,x 
      000BF4 C6 00 09         [ 1] 1954 	ld a,acc8 
      000BF7 C7 00 14         [ 1] 1955 	ld farptr+2,a 
      000BFA                       1956 peek_byte:
      000BFA CD 0C 3F         [ 4] 1957 	call print_farptr 
      000BFD A6 08            [ 1] 1958 	ld a,#8 
      000BFF 6B 01            [ 1] 1959 	ld (PSIZE,sp),a 
      000C01 5F               [ 1] 1960 	clrw x 
      000C02 CD 0C 5A         [ 4] 1961 1$:	call fetchc  
      000C05 89               [ 2] 1962 	pushw x 
      000C06 C7 00 09         [ 1] 1963 	ld acc8,a 
      000C09 5F               [ 1] 1964 	clrw x 
      000C0A CF 00 07         [ 2] 1965 	ldw acc24,x 
      000C0D A6 90            [ 1] 1966 	ld a,#16+128
      000C0F CD 09 AD         [ 4] 1967 	call prti24
      000C12 85               [ 2] 1968 	popw x 
      000C13 0A 01            [ 1] 1969 	dec (PSIZE,sp)
      000C15 26 EB            [ 1] 1970 	jrne 1$ 
      000C17 A6 08            [ 1] 1971 	ld a,#8 
      000C19 CB 00 14         [ 1] 1972 	add a,farptr+2 
      000C1C C7 00 14         [ 1] 1973 	ld farptr+2,a
      000C1F 4F               [ 1] 1974 	clr a 
      000C20 C9 00 13         [ 1] 1975 	adc a,farptr+1 
      000C23 C7 00 13         [ 1] 1976 	ld farptr+1,a 
      000C26 4F               [ 1] 1977 	clr a 
      000C27 C9 00 12         [ 1] 1978 	adc a,farptr 
      000C2A C7 00 12         [ 1] 1979 	ld farptr,a 
      000C2D CC 0B 7B         [ 2] 1980 	jp repl  
                                   1981 
      000C30 6E 6F 74 20 61 20 63  1982 invalid_cmd: .asciz "not a command\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



             6F 6D 6D 61 6E 64 0A
             00
                                   1983 
                                   1984 ;----------------------------
                                   1985 ; display farptr address
                                   1986 ;----------------------------
      000C3F                       1987 print_farptr:
      000C3F C6 00 14         [ 1] 1988 	ld a ,farptr+2 
      000C42 C7 00 09         [ 1] 1989 	ld acc8,a 
      000C45 CE 00 12         [ 2] 1990 	ldw x,farptr 
      000C48 CF 00 07         [ 2] 1991 	ldw acc24,x 
      000C4B 5F               [ 1] 1992 	clrw x 
      000C4C A6 10            [ 1] 1993 	ld a,#16 
      000C4E CD 09 AD         [ 4] 1994 	call prti24
      000C51 A6 20            [ 1] 1995 	ld a,#SPACE 
      000C53 CD 01 CB         [ 4] 1996 	call putc 
      000C56 CD 01 CB         [ 4] 1997 	call putc 
      000C59 81               [ 4] 1998 	ret
                                   1999 
                                   2000 ;------------------------------------
                                   2001 ; get byte at address farptr[X]
                                   2002 ; input:
                                   2003 ;	 farptr   address to peek
                                   2004 ;    X		  farptr index 	
                                   2005 ; output:
                                   2006 ;	 A 		  byte from memory  
                                   2007 ;    x		  incremented by 1
                                   2008 ;------------------------------------
      000C5A                       2009 fetchc: ; @C
      000C5A 92 AF 00 12      [ 5] 2010 	ldf a,([farptr],x)
      000C5E 5C               [ 2] 2011 	incw x
      000C5F 81               [ 4] 2012 	ret
                                   2013 
                                   2014 
                                   2015 ;------------------------------------
                                   2016 ; expect a number from command line 
                                   2017 ; next argument
                                   2018 ;  input:
                                   2019 ;	  none
                                   2020 ;  output:
                                   2021 ;    acc24   int24_t 
                                   2022 ;------------------------------------
      000C60                       2023 number::
      000C60 CD 0D 5C         [ 4] 2024 	call get_token
      000C63 CD 0F 29         [ 4] 2025 	call atoi24
      000C66 81               [ 4] 2026 	ret
                                   2027 .endif ; DEBUG 
                                   2028 
                                   2029 ;------------------------------------
                                   2030 ; parse quoted string 
                                   2031 ; input:
                                   2032 ;   Y 	pointer to tib 
                                   2033 ;   X   pointer to pad
                                   2034 ; output:
                                   2035 ;	pad   parsed string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2036 ;   TOS  char* to pad  
                                   2037 ;------------------------------------
                           000001  2038 	PREV = 1
                           000002  2039 	CURR =2 
                           000002  2040 	VSIZE=2 
      000C67                       2041 parse_quote: ; { -- addr }
      000C67                       2042 	_vars VSIZE 
      000C67 52 02            [ 2]    1     sub sp,#VSIZE 
      000C69 4F               [ 1] 2043 	clr a
      000C6A 6B 01            [ 1] 2044 1$:	ld (PREV,sp),a 
      000C6C 72 5C 00 01      [ 1] 2045 2$:	inc in
      000C70 91 D6 00         [ 4] 2046 	ld a,([in.w],y)
      000C73 27 24            [ 1] 2047 	jreq 6$
      000C75 6B 02            [ 1] 2048 	ld (CURR,sp),a 
      000C77 A6 5C            [ 1] 2049 	ld a,#'\
      000C79 11 01            [ 1] 2050 	cp a, (PREV,sp)
      000C7B 26 0A            [ 1] 2051 	jrne 3$
      000C7D 0F 01            [ 1] 2052 	clr (PREV,sp)
      000C7F 7B 02            [ 1] 2053 	ld a,(CURR,sp)
      000C81 AD 1F            [ 4] 2054 	callr convert_escape
      000C83 F7               [ 1] 2055 	ld (x),a 
      000C84 5C               [ 2] 2056 	incw x 
      000C85 20 E5            [ 2] 2057 	jra 2$
      000C87                       2058 3$:
      000C87 7B 02            [ 1] 2059 	ld a,(CURR,sp)
      000C89 A1 5C            [ 1] 2060 	cp a,#'\'
      000C8B 27 DD            [ 1] 2061 	jreq 1$
      000C8D A1 22            [ 1] 2062 	cp a,#'"
      000C8F 27 04            [ 1] 2063 	jreq 5$ 
      000C91 F7               [ 1] 2064 	ld (x),a 
      000C92 5C               [ 2] 2065 	incw x 
      000C93 20 D7            [ 2] 2066 	jra 2$
      000C95 72 5C 00 01      [ 1] 2067 5$:	inc in 
      000C99 7F               [ 1] 2068 6$: clr (x)
      000C9A AE 17 18         [ 2] 2069 	ldw x,#pad 
      000C9D                       2070 	_drop VSIZE
      000C9D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C9F A6 0A            [ 1] 2071 	ld a,#TK_QSTR  
      000CA1 81               [ 4] 2072 	ret 
                                   2073 
                                   2074 ;---------------------------------------
                                   2075 ; called by parse_quote
                                   2076 ; subtitute escaped character 
                                   2077 ; by their ASCII value .
                                   2078 ; input:
                                   2079 ;   A  character following '\'
                                   2080 ; output:
                                   2081 ;   A  substitued char or same if not valid.
                                   2082 ;---------------------------------------
      000CA2                       2083 convert_escape:
      000CA2 89               [ 2] 2084 	pushw x 
      000CA3 AE 0C B7         [ 2] 2085 	ldw x,#escaped 
      000CA6 F1               [ 1] 2086 1$:	cp a,(x)
      000CA7 27 06            [ 1] 2087 	jreq 2$
      000CA9 7D               [ 1] 2088 	tnz (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000CAA 27 09            [ 1] 2089 	jreq 3$
      000CAC 5C               [ 2] 2090 	incw x 
      000CAD 20 F7            [ 2] 2091 	jra 1$
      000CAF 1D 0C B7         [ 2] 2092 2$: subw x,#escaped 
      000CB2 9F               [ 1] 2093 	ld a,xl 
      000CB3 AB 07            [ 1] 2094 	add a,#7
      000CB5 85               [ 2] 2095 3$:	popw x 
      000CB6 81               [ 4] 2096 	ret 
                                   2097 
      000CB7 61 62 74 6E 76 66 72  2098 escaped: .asciz "abtnvfr"
             00
                                   2099 
                                   2100 ;-------------------------
                                   2101 ; integer parser 
                                   2102 ; input:
                                   2103 ;   X 		point to pad 
                                   2104 ;   Y 		point to tib 
                                   2105 ;   A 	    first digit|'$' 
                                   2106 ; output:  
                                   2107 ;   pad     number string 
                                   2108 ;   X 		integer 
                                   2109 ;   A 		TK_INTGR
                                   2110 ;-------------------------
                           000001  2111 	BASE=1
                           000002  2112 	TCHAR=2 
                           000002  2113 	VSIZE=2 
      000CBF                       2114 parse_integer: ; { -- n }
      000CBF 4B 00            [ 1] 2115 	push #0 ; TCHAR 
      000CC1 A1 24            [ 1] 2116 	cp a,#'$
      000CC3 27 04            [ 1] 2117 	jreq 1$ 
      000CC5 4B 0A            [ 1] 2118 	push #10 ; BASE=10 
      000CC7 20 02            [ 2] 2119 	jra 2$ 
      000CC9 4B 10            [ 1] 2120 1$: push #16  ; BASE=16
      000CCB F7               [ 1] 2121 2$:	ld (x),a 
      000CCC 5C               [ 2] 2122 	incw x 
      000CCD 72 5C 00 01      [ 1] 2123 	inc in 
      000CD1 91 D6 00         [ 4] 2124 	ld a,([in.w],y)
      000CD4 CD 0F 1D         [ 4] 2125 	call to_upper 
      000CD7 6B 02            [ 1] 2126 	ld (TCHAR,sp),a 
      000CD9 CD 0F 14         [ 4] 2127 	call is_digit 
      000CDC 25 ED            [ 1] 2128 	jrc 2$
      000CDE A6 10            [ 1] 2129 	ld a,#16 
      000CE0 11 01            [ 1] 2130 	cp a,(BASE,sp)
      000CE2 26 0A            [ 1] 2131 	jrne 3$ 
      000CE4 7B 02            [ 1] 2132 	ld a,(TCHAR,sp)
      000CE6 A1 41            [ 1] 2133 	cp a,#'A 
      000CE8 2B 04            [ 1] 2134 	jrmi 3$ 
      000CEA A1 47            [ 1] 2135 	cp a,#'G 
      000CEC 2B DD            [ 1] 2136 	jrmi 2$ 
      000CEE 7F               [ 1] 2137 3$:	clr (x)
      000CEF CD 0F 29         [ 4] 2138 	call atoi24
      000CF2 CE 00 08         [ 2] 2139 	ldw x,acc16 
      000CF5 A6 04            [ 1] 2140 	ld a,#TK_INTGR
      000CF7                       2141 	_drop VSIZE  
      000CF7 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CF9 81               [ 4] 2142 	ret 	
                                   2143 
                                   2144 ;-------------------------
                                   2145 ; binary integer parser 
                                   2146 ; input:
                                   2147 ;   X 		point to pad 
                                   2148 ;   Y 		point to tib 
                                   2149 ;   A 	    '%' 
                                   2150 ; output:  
                                   2151 ;   pad     number string 
                                   2152 ;   X 		integer 
                                   2153 ;   A 		TK_INTGR
                                   2154 ;   TOS     integer 
                                   2155 ;-------------------------
                           000001  2156 	BINARY=1
                           000002  2157 	VSIZE=2
      000CFA                       2158 parse_binary: ; { -- n }
      000CFA 4B 00            [ 1] 2159 	push #0
      000CFC 4B 00            [ 1] 2160 	push #0
      000CFE F7               [ 1] 2161 1$: ld (x),a 
      000CFF 5C               [ 2] 2162 	incw x 
      000D00 72 5C 00 01      [ 1] 2163 	inc in 
      000D04 91 D6 00         [ 4] 2164 	ld a,([in.w],y)
      000D07 A1 30            [ 1] 2165 	cp a,#'0 
      000D09 27 06            [ 1] 2166 	jreq 2$
      000D0B A1 31            [ 1] 2167 	cp a,#'1 
      000D0D 27 02            [ 1] 2168 	jreq 2$ 
      000D0F 20 09            [ 2] 2169 	jra bin_exit 
      000D11 A0 30            [ 1] 2170 2$: sub a,#'0	
      000D13 46               [ 1] 2171 	rrc a 
      000D14 09 02            [ 1] 2172 	rlc (BINARY+1,sp)
      000D16 09 01            [ 1] 2173 	rlc (BINARY,sp)
      000D18 20 E4            [ 2] 2174 	jra 1$  
      000D1A                       2175 bin_exit:
      000D1A 7F               [ 1] 2176 	clr (x)
      000D1B 1E 01            [ 2] 2177 	ldw x,(BINARY,sp)
      000D1D A6 04            [ 1] 2178 	ld a,#TK_INTGR 	
      000D1F                       2179 	_drop VSIZE 
      000D1F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D21 81               [ 4] 2180 	ret
                                   2181 
                                   2182 ;---------------------------
                                   2183 ;  token begin with a letter,
                                   2184 ;  is keyword or variable. 	
                                   2185 ; input:
                                   2186 ;   X 		point to pad 
                                   2187 ;   Y 		point to text
                                   2188 ;   A 	    first letter  
                                   2189 ; output:
                                   2190 ;   X		exec_addr|var_addr 
                                   2191 ;   A 		TK_CMD 
                                   2192 ;   pad 	keyword|var_name  
                                   2193 ;   TOS     exec_addr|var_addr 
                                   2194 ;--------------------------  
      000D22                       2195 parse_keyword: ; { -- exec_addr|var_addr}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D22 CD 0F 1D         [ 4] 2196 	call to_upper 
      000D25 F7               [ 1] 2197 	ld (x),a 
      000D26 5C               [ 2] 2198 	incw x 
      000D27 72 5C 00 01      [ 1] 2199 	inc in 
      000D2B 91 D6 00         [ 4] 2200 	ld a,([in.w],y)
      000D2E CD 05 22         [ 4] 2201 	call is_alpha 
      000D31 25 EF            [ 1] 2202 	jrc parse_keyword 
      000D33 7F               [ 1] 2203 1$: clr (x)
      000D34 72 5D 17 19      [ 1] 2204 	tnz pad+1 
      000D38 26 15            [ 1] 2205 	jrne 2$
                                   2206 ; one letter variable name 
      000D3A C6 17 18         [ 1] 2207 	ld a,pad 
      000D3D A0 41            [ 1] 2208 	sub a,#'A 
      000D3F 48               [ 1] 2209 	sll a 
      000D40 88               [ 1] 2210 	push a 
      000D41 4B 00            [ 1] 2211 	push #0
      000D43 AE 00 23         [ 2] 2212 	ldw x,#vars 
      000D46 72 FB 01         [ 2] 2213 	addw x,(1,sp) ; X=var address 
      000D49                       2214 	_drop 2 
      000D49 5B 02            [ 2]    1     addw sp,#2 
      000D4B A6 05            [ 1] 2215 	ld a,#TK_VAR 
      000D4D 20 0C            [ 2] 2216 	jra 4$ 
      000D4F                       2217 2$: ; check for keyword, otherwise syntax error.
      000D4F                       2218 	_ldx_dict kword_dict
      000D4F AE 24 80         [ 2]    1     ldw x,#kword_dict+2
      000D52 CD 11 B9         [ 4] 2219 	call search_dict
      000D55 4D               [ 1] 2220 	tnz a
      000D56 26 03            [ 1] 2221 	jrne 4$ 
      000D58 CC 07 95         [ 2] 2222 	jp syntax_error
      000D5B 81               [ 4] 2223 4$:	ret  	
                                   2224 
                                   2225 
                                   2226 ;------------------------------------
                                   2227 ; Command line tokenizer
                                   2228 ; scan text for next token
                                   2229 ; move token in 'pad'
                                   2230 ; input: 
      000D5C                       2231 	none: 
                                   2232 ; use:
                                   2233 ;	Y   pointer to text
                                   2234 ;   X	pointer to pad 
                                   2235 ;   in.w   index in text buffer
                                   2236 ; output:
                                   2237 ;   A       token attribute 
                                   2238 ;   pad 	token as .asciz
                                   2239 ;   X 		token value   
                                   2240 ;------------------------------------
                                   2241 	; use to check special character 
                                   2242 	.macro _case c t  
                                   2243 	ld a,#c 
                                   2244 	cp a,(TCHAR,sp) 
                                   2245 	jrne t
                                   2246 	.endm 
                                   2247 
                           000001  2248 	TCHAR=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                           000002  2249 	ATTRIB=2 
                           000002  2250 	VSIZE=2
      000D5C                       2251 get_token: 
      000D5C 90 AE 16 C8      [ 2] 2252 	ldw y,#tib    	
      000D60 C6 00 01         [ 1] 2253 	ld a,in 
      000D63 C1 00 03         [ 1] 2254 	cp a,count 
      000D66 2B 03            [ 1] 2255 	jrmi 1$
      000D68 A6 00            [ 1] 2256 	ld a,#TK_NONE 
      000D6A 81               [ 4] 2257 	ret 
      000D6B                       2258 1$:	
      000D6B                       2259 	_vars VSIZE
      000D6B 52 02            [ 2]    1     sub sp,#VSIZE 
      000D6D AE 17 18         [ 2] 2260 	ldw x, #pad
      000D70 A6 20            [ 1] 2261 	ld a,#SPACE
      000D72 CD 0F D5         [ 4] 2262 	call skip
      000D75 55 00 01 00 02   [ 1] 2263 	mov in.saved,in 
      000D7A 91 D6 00         [ 4] 2264 	ld a,([in.w],y)
      000D7D 26 07            [ 1] 2265 	jrne str_tst
      000D7F 72 5F 17 18      [ 1] 2266 	clr pad 
      000D83 CC 0F 11         [ 2] 2267 	jp token_exit ; end of line 
                                   2268 
      000D86                       2269 str_tst: ; check for quoted string  	
      000D86 CD 0F 1D         [ 4] 2270 	call to_upper 
      000D89 6B 01            [ 1] 2271 	ld (TCHAR,sp),a 
      000D8B                       2272 	_case '"' nbr_tst
      000D8B A6 22            [ 1]    1 	ld a,#'"' 
      000D8D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D8F 26 06            [ 1]    3 	jrne nbr_tst
      000D91 CD 0C 67         [ 4] 2273 	call parse_quote
      000D94 CC 0F 11         [ 2] 2274 	jp token_exit
      000D97                       2275 nbr_tst: ; check for number 
      000D97 A6 24            [ 1] 2276 	ld a,#'$'
      000D99 11 01            [ 1] 2277 	cp a,(TCHAR,sp) 
      000D9B 27 13            [ 1] 2278 	jreq 1$
      000D9D A6 26            [ 1] 2279 	ld a,#'&
      000D9F 11 01            [ 1] 2280 	cp a,(TCHAR,sp)
      000DA1 26 06            [ 1] 2281 	jrne 0$
      000DA3 CD 0C FA         [ 4] 2282 	call parse_binary ; expect binary integer 
      000DA6 CC 0F 11         [ 2] 2283 	jp token_exit 
      000DA9 7B 01            [ 1] 2284 0$:	ld a,(TCHAR,sp)
      000DAB CD 0F 14         [ 4] 2285 	call is_digit
      000DAE 24 06            [ 1] 2286 	jrnc 3$
      000DB0 CD 0C BF         [ 4] 2287 1$:	call parse_integer 
      000DB3 CC 0F 11         [ 2] 2288 	jp token_exit 
      000DB6                       2289 3$: 
      000DB6                       2290 	_case '(' bkslsh_tst 
      000DB6 A6 28            [ 1]    1 	ld a,#'(' 
      000DB8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DBA 26 05            [ 1]    3 	jrne bkslsh_tst
      000DBC A6 0B            [ 1] 2291 	ld a,#TK_LPAREN
      000DBE CC 0F 01         [ 2] 2292 	jp token_char   	
      000DC1                       2293 bkslsh_tst:
      000DC1                       2294 	_case '\',rparnt_tst
      000DC1 A6 5C            [ 1]    1 	ld a,#'\' 
      000DC3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DC5 26 18            [ 1]    3 	jrne rparnt_tst
      000DC7 7B 01            [ 1] 2295 	ld a,(TCHAR,sp)
      000DC9 F7               [ 1] 2296 	ld (x),a 
      000DCA 5C               [ 2] 2297 	incw x 
      000DCB 72 5C 00 01      [ 1] 2298 	inc in 
      000DCF 91 D6 00         [ 4] 2299 	ld a,([in.w],y)
      000DD2 F7               [ 1] 2300 	ld (x),a 
      000DD3 5C               [ 2] 2301 	incw x 
      000DD4 72 5C 00 01      [ 1] 2302 	inc in  
      000DD8 7F               [ 1] 2303 	clr (x) 
      000DD9 97               [ 1] 2304 	ld xl,a 
      000DDA A6 03            [ 1] 2305 	ld a,#TK_CHAR 
      000DDC CC 0F 11         [ 2] 2306 	jp token_exit 
      000DDF                       2307 rparnt_tst:		
      000DDF                       2308 	_case ')' colon_tst 
      000DDF A6 29            [ 1]    1 	ld a,#')' 
      000DE1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE3 26 05            [ 1]    3 	jrne colon_tst
      000DE5 A6 0C            [ 1] 2309 	ld a,#TK_RPAREN 
      000DE7 CC 0F 01         [ 2] 2310 	jp token_char 
      000DEA                       2311 colon_tst:
      000DEA                       2312 	_case ':' comma_tst 
      000DEA A6 3A            [ 1]    1 	ld a,#':' 
      000DEC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DEE 26 05            [ 1]    3 	jrne comma_tst
      000DF0 A6 01            [ 1] 2313 	ld a,#TK_COLON 
      000DF2 CC 0F 01         [ 2] 2314 	jp token_char 
      000DF5                       2315 comma_tst:
      000DF5                       2316 	_case COMMA sharp_tst 
      000DF5 A6 2C            [ 1]    1 	ld a,#COMMA 
      000DF7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF9 26 05            [ 1]    3 	jrne sharp_tst
      000DFB A6 0D            [ 1] 2317 	ld a,#TK_COMMA
      000DFD CC 0F 01         [ 2] 2318 	jp token_char
      000E00                       2319 sharp_tst:
      000E00                       2320 	_case SHARP dash_tst 
      000E00 A6 23            [ 1]    1 	ld a,#SHARP 
      000E02 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E04 26 05            [ 1]    3 	jrne dash_tst
      000E06 A6 0E            [ 1] 2321 	ld a,#TK_SHARP
      000E08 CC 0F 01         [ 2] 2322 	jp token_char  	 	 
      000E0B                       2323 dash_tst: 	
      000E0B                       2324 	_case '-' at_tst 
      000E0B A6 2D            [ 1]    1 	ld a,#'-' 
      000E0D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E0F 26 05            [ 1]    3 	jrne at_tst
      000E11 A6 11            [ 1] 2325 	ld a,#TK_MINUS  
      000E13 CC 0F 01         [ 2] 2326 	jp token_char 
      000E16                       2327 at_tst:
      000E16                       2328 	_case '@' qmark_tst 
      000E16 A6 40            [ 1]    1 	ld a,#'@' 
      000E18 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E1A 26 05            [ 1]    3 	jrne qmark_tst
      000E1C A6 02            [ 1] 2329 	ld a,#TK_ARRAY 
      000E1E CC 0F 01         [ 2] 2330 	jp token_char
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E21                       2331 qmark_tst:
      000E21                       2332 	_case '?' tick_tst 
      000E21 A6 3F            [ 1]    1 	ld a,#'?' 
      000E23 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E25 26 11            [ 1]    3 	jrne tick_tst
      000E27 7B 01            [ 1] 2333 	ld a,(TCHAR,sp)
      000E29 F7               [ 1] 2334 	ld (x),a 
      000E2A 5C               [ 2] 2335 	incw x 
      000E2B 7F               [ 1] 2336 	clr (x)
      000E2C 72 5C 00 01      [ 1] 2337 	inc in 
      000E30 A6 06            [ 1] 2338 	ld a,#TK_CMD 
      000E32 AE 16 6C         [ 2] 2339 	ldw x,#print 
      000E35 CC 0F 11         [ 2] 2340 	jp token_exit
      000E38                       2341 tick_tst: ; ignore comment 
      000E38                       2342 	_case TICK plus_tst 
      000E38 A6 27            [ 1]    1 	ld a,#TICK 
      000E3A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E3C 26 0C            [ 1]    3 	jrne plus_tst
      000E3E 72 5C 00 01      [ 1] 2343 	inc in 
      000E42 A6 06            [ 1] 2344 	ld a,#TK_CMD 
      000E44 AE 17 71         [ 2] 2345 	ldw x,#rem 
      000E47 CC 0F 11         [ 2] 2346 	jp token_exit 
      000E4A                       2347 plus_tst:
      000E4A                       2348 	_case '+' star_tst 
      000E4A A6 2B            [ 1]    1 	ld a,#'+' 
      000E4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E4E 26 05            [ 1]    3 	jrne star_tst
      000E50 A6 10            [ 1] 2349 	ld a,#TK_PLUS  
      000E52 CC 0F 01         [ 2] 2350 	jp token_char 
      000E55                       2351 star_tst:
      000E55                       2352 	_case '*' slash_tst 
      000E55 A6 2A            [ 1]    1 	ld a,#'*' 
      000E57 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E59 26 05            [ 1]    3 	jrne slash_tst
      000E5B A6 20            [ 1] 2353 	ld a,#TK_MULT 
      000E5D CC 0F 01         [ 2] 2354 	jp token_char 
      000E60                       2355 slash_tst: 
      000E60                       2356 	_case '/' prcnt_tst 
      000E60 A6 2F            [ 1]    1 	ld a,#'/' 
      000E62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E64 26 05            [ 1]    3 	jrne prcnt_tst
      000E66 A6 21            [ 1] 2357 	ld a,#TK_DIV 
      000E68 CC 0F 01         [ 2] 2358 	jp token_char 
      000E6B                       2359 prcnt_tst:
      000E6B                       2360 	_case '%' eql_tst 
      000E6B A6 25            [ 1]    1 	ld a,#'%' 
      000E6D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E6F 26 05            [ 1]    3 	jrne eql_tst
      000E71 A6 22            [ 1] 2361 	ld a,#TK_MOD
      000E73 CC 0F 01         [ 2] 2362 	jp token_char  
                                   2363 ; 1 or 2 character tokens 	
      000E76                       2364 eql_tst:
      000E76                       2365 	_case '=' gt_tst 		
      000E76 A6 3D            [ 1]    1 	ld a,#'=' 
      000E78 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E7A 26 05            [ 1]    3 	jrne gt_tst
      000E7C A6 32            [ 1] 2366 	ld a,#TK_EQUAL
      000E7E CC 0F 01         [ 2] 2367 	jp token_char 
      000E81                       2368 gt_tst:
      000E81                       2369 	_case '>' lt_tst 
      000E81 A6 3E            [ 1]    1 	ld a,#'>' 
      000E83 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E85 26 33            [ 1]    3 	jrne lt_tst
      000E87 A6 31            [ 1] 2370 	ld a,#TK_GT 
      000E89 6B 02            [ 1] 2371 	ld (ATTRIB,sp),a 
      000E8B 72 5C 00 01      [ 1] 2372 	inc in 
      000E8F 91 D6 00         [ 4] 2373 	ld a,([in.w],y)
      000E92 A1 3D            [ 1] 2374 	cp a,#'=
      000E94 26 0C            [ 1] 2375 	jrne 1$
      000E96 7B 01            [ 1] 2376 	ld a,(TCHAR,sp)
      000E98 F7               [ 1] 2377 	ld (x),a
      000E99 5C               [ 2] 2378 	incw x 
      000E9A A6 3D            [ 1] 2379 	ld a,#'=
      000E9C 6B 01            [ 1] 2380 	ld (TCHAR,sp),a 
      000E9E A6 33            [ 1] 2381 	ld a,#TK_GE 
      000EA0 20 5F            [ 2] 2382 	jra token_char  
      000EA2 A1 3C            [ 1] 2383 1$: cp a,#'<
      000EA4 26 0C            [ 1] 2384 	jrne 2$
      000EA6 7B 01            [ 1] 2385 	ld a,(TCHAR,sp)
      000EA8 F7               [ 1] 2386 	ld (x),a
      000EA9 5C               [ 2] 2387 	incw x 
      000EAA A6 3C            [ 1] 2388 	ld a,#'<	
      000EAC 6B 01            [ 1] 2389 	ld (TCHAR,sp),a 
      000EAE A6 35            [ 1] 2390 	ld a,#TK_NE 
      000EB0 20 4F            [ 2] 2391 	jra token_char 
      000EB2 72 5A 00 01      [ 1] 2392 2$: dec in
      000EB6 7B 02            [ 1] 2393 	ld a,(ATTRIB,sp)
      000EB8 20 47            [ 2] 2394 	jra token_char 
      000EBA                       2395 lt_tst:
      000EBA                       2396 	_case '<' other
      000EBA A6 3C            [ 1]    1 	ld a,#'<' 
      000EBC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000EBE 26 32            [ 1]    3 	jrne other
      000EC0 A6 34            [ 1] 2397 	ld a,#TK_LT 
      000EC2 6B 02            [ 1] 2398 	ld (ATTRIB,sp),a 
      000EC4 72 5C 00 01      [ 1] 2399 	inc in 
      000EC8 91 D6 00         [ 4] 2400 	ld a,([in.w],y)
      000ECB A1 3D            [ 1] 2401 	cp a,#'=
      000ECD 26 0B            [ 1] 2402 	jrne 1$
      000ECF 7B 01            [ 1] 2403 	ld a,(TCHAR,sp)
      000ED1 F7               [ 1] 2404 	ld (x),a 
      000ED2 A6 3D            [ 1] 2405 	ld a,#'=
      000ED4 6B 01            [ 1] 2406 	ld (TCHAR,sp),a 
      000ED6 A6 36            [ 1] 2407 	ld a,#TK_LE 
      000ED8 20 27            [ 2] 2408 	jra token_char 
      000EDA A1 3E            [ 1] 2409 1$: cp a,#'>
      000EDC 26 0C            [ 1] 2410 	jrne 2$
      000EDE 7B 01            [ 1] 2411 	ld a,(TCHAR,sp)
      000EE0 F7               [ 1] 2412 	ld (x),a 
      000EE1 5C               [ 2] 2413 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EE2 A6 3E            [ 1] 2414 	ld a,#'>
      000EE4 6B 01            [ 1] 2415 	ld (TCHAR,sp),a 
      000EE6 A6 35            [ 1] 2416 	ld a,#TK_NE 
      000EE8 20 17            [ 2] 2417 	jra token_char 
      000EEA 72 5A 00 01      [ 1] 2418 2$: dec in 
      000EEE 7B 02            [ 1] 2419 	ld a,(ATTRIB,sp)
      000EF0 20 0F            [ 2] 2420 	jra token_char 	
      000EF2                       2421 other: ; not a special character 	 
      000EF2 7B 01            [ 1] 2422 	ld a,(TCHAR,sp)
      000EF4 CD 05 22         [ 4] 2423 	call is_alpha 
      000EF7 25 03            [ 1] 2424 	jrc 30$ 
      000EF9 CC 07 95         [ 2] 2425 	jp syntax_error 
      000EFC                       2426 30$: 
      000EFC CD 0D 22         [ 4] 2427 	call parse_keyword
      000EFF 20 10            [ 2] 2428 	jra token_exit 
      000F01                       2429 token_char:
      000F01 6B 02            [ 1] 2430 	ld (ATTRIB,sp),a 
      000F03 7B 01            [ 1] 2431 	ld a,(TCHAR,sp)
      000F05 F7               [ 1] 2432 	ld (x),a 
      000F06 5C               [ 2] 2433 	incw x 
      000F07 7F               [ 1] 2434 	clr(x)
      000F08 72 5C 00 01      [ 1] 2435 	inc in 
      000F0C 7B 02            [ 1] 2436 	ld a,(ATTRIB,sp)
      000F0E AE 17 18         [ 2] 2437 	ldw x,#pad 
      000F11                       2438 token_exit:
      000F11                       2439 	_drop VSIZE 
      000F11 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F13 81               [ 4] 2440 	ret
                                   2441 
                                   2442 
                                   2443 
                                   2444 ;------------------------------------
                                   2445 ; check if character in {'0'..'9'}
                                   2446 ; input:
                                   2447 ;    A  character to test
                                   2448 ; output:
                                   2449 ;    Carry  0 not digit | 1 digit
                                   2450 ;------------------------------------
      000F14                       2451 is_digit:
      000F14 A1 30            [ 1] 2452 	cp a,#'0
      000F16 25 03            [ 1] 2453 	jrc 1$
      000F18 A1 3A            [ 1] 2454     cp a,#'9+1
      000F1A 8C               [ 1] 2455 	ccf 
      000F1B 8C               [ 1] 2456 1$:	ccf 
      000F1C 81               [ 4] 2457     ret
                                   2458 
                                   2459 ;------------------------------------
                                   2460 ; convert alpha to uppercase
                                   2461 ; input:
                                   2462 ;    a  character to convert
                                   2463 ; output:
                                   2464 ;    a  uppercase character
                                   2465 ;------------------------------------
      000F1D                       2466 to_upper::
      000F1D A1 61            [ 1] 2467 	cp a,#'a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F1F 2A 01            [ 1] 2468 	jrpl 1$
      000F21 81               [ 4] 2469 0$:	ret
      000F22 A1 7A            [ 1] 2470 1$: cp a,#'z	
      000F24 22 FB            [ 1] 2471 	jrugt 0$
      000F26 A0 20            [ 1] 2472 	sub a,#32
      000F28 81               [ 4] 2473 	ret
                                   2474 	
                                   2475 ;------------------------------------
                                   2476 ; convert pad content in integer
                                   2477 ; input:
                                   2478 ;    pad		.asciz to convert
                                   2479 ; output:
                                   2480 ;    acc24      int24_t
                                   2481 ;------------------------------------
                                   2482 	; local variables
                           000001  2483 	SIGN=1 ; 1 byte, 
                           000002  2484 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2485 	TEMP=3 ; 1 byte, temporary storage
                           000003  2486 	VSIZE=3 ; 3 bytes reserved for local storage
      000F29                       2487 atoi24:
      000F29 89               [ 2] 2488 	pushw x ;save x
      000F2A 52 03            [ 2] 2489 	sub sp,#VSIZE
                                   2490 	; acc24=0 
      000F2C 72 5F 00 07      [ 1] 2491 	clr acc24    
      000F30 72 5F 00 08      [ 1] 2492 	clr acc16
      000F34 72 5F 00 09      [ 1] 2493 	clr acc8 
      000F38 C6 17 18         [ 1] 2494 	ld a, pad 
      000F3B 27 5A            [ 1] 2495 	jreq atoi_exit
      000F3D 0F 01            [ 1] 2496 	clr (SIGN,sp)
      000F3F A6 0A            [ 1] 2497 	ld a,#10
      000F41 6B 02            [ 1] 2498 	ld (BASE,sp),a ; default base decimal
      000F43 AE 17 18         [ 2] 2499 	ldw x,#pad ; pointer to string to convert
      000F46 F6               [ 1] 2500 	ld a,(x)
      000F47 27 47            [ 1] 2501 	jreq 9$  ; completed if 0
      000F49 A1 2D            [ 1] 2502 	cp a,#'-
      000F4B 26 04            [ 1] 2503 	jrne 1$
      000F4D 03 01            [ 1] 2504 	cpl (SIGN,sp)
      000F4F 20 08            [ 2] 2505 	jra 2$
      000F51 A1 24            [ 1] 2506 1$: cp a,#'$
      000F53 26 06            [ 1] 2507 	jrne 3$
      000F55 A6 10            [ 1] 2508 	ld a,#16
      000F57 6B 02            [ 1] 2509 	ld (BASE,sp),a
      000F59 5C               [ 2] 2510 2$:	incw x
      000F5A F6               [ 1] 2511 	ld a,(x)
      000F5B                       2512 3$:	
      000F5B A1 61            [ 1] 2513 	cp a,#'a
      000F5D 2B 02            [ 1] 2514 	jrmi 4$
      000F5F A0 20            [ 1] 2515 	sub a,#32
      000F61 A1 30            [ 1] 2516 4$:	cp a,#'0
      000F63 2B 2B            [ 1] 2517 	jrmi 9$
      000F65 A0 30            [ 1] 2518 	sub a,#'0
      000F67 A1 0A            [ 1] 2519 	cp a,#10
      000F69 2B 06            [ 1] 2520 	jrmi 5$
      000F6B A0 07            [ 1] 2521 	sub a,#7
      000F6D 11 02            [ 1] 2522 	cp a,(BASE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000F6F 2A 1F            [ 1] 2523 	jrpl 9$
      000F71 6B 03            [ 1] 2524 5$:	ld (TEMP,sp),a
      000F73 7B 02            [ 1] 2525 	ld a,(BASE,sp)
      000F75 CD 0F 9B         [ 4] 2526 	call mulu24_8
      000F78 7B 03            [ 1] 2527 	ld a,(TEMP,sp)
      000F7A CB 00 09         [ 1] 2528 	add a,acc24+2
      000F7D C7 00 09         [ 1] 2529 	ld acc24+2,a
      000F80 4F               [ 1] 2530 	clr a
      000F81 C9 00 08         [ 1] 2531 	adc a,acc24+1
      000F84 C7 00 08         [ 1] 2532 	ld acc24+1,a
      000F87 4F               [ 1] 2533 	clr a
      000F88 C9 00 07         [ 1] 2534 	adc a,acc24
      000F8B C7 00 07         [ 1] 2535 	ld acc24,a
      000F8E 20 C9            [ 2] 2536 	jra 2$
      000F90 0D 01            [ 1] 2537 9$:	tnz (SIGN,sp)
      000F92 27 03            [ 1] 2538     jreq atoi_exit
      000F94 CD 0A C0         [ 4] 2539     call neg_acc24
      000F97                       2540 atoi_exit: 
      000F97 5B 03            [ 2] 2541 	addw sp,#VSIZE
      000F99 85               [ 2] 2542 	popw x ; restore x
      000F9A 81               [ 4] 2543 	ret
                                   2544 
                                   2545 ;--------------------------------------
                                   2546 ; unsigned multiply uint24_t by uint8_t
                                   2547 ; use to convert numerical string to uint24_t
                                   2548 ; input:
                                   2549 ;	acc24	uint24_t 
                                   2550 ;   A		uint8_t
                                   2551 ; output:
                                   2552 ;   acc24   A*acc24
                                   2553 ;-------------------------------------
                                   2554 ; local variables offset  on sp
                           000003  2555 	U8   = 3   ; A pushed on stack
                           000002  2556 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2557 	OVFH = 1  ; multiplication overflow high byte
                           000003  2558 	VSIZE = 3
      000F9B                       2559 mulu24_8:
      000F9B 89               [ 2] 2560 	pushw x    ; save X
                                   2561 	; local variables
      000F9C 88               [ 1] 2562 	push a     ; U8
      000F9D 5F               [ 1] 2563 	clrw x     ; initialize overflow to 0
      000F9E 89               [ 2] 2564 	pushw x    ; multiplication overflow
                                   2565 ; multiply low byte.
      000F9F C6 00 09         [ 1] 2566 	ld a,acc24+2
      000FA2 97               [ 1] 2567 	ld xl,a
      000FA3 7B 03            [ 1] 2568 	ld a,(U8,sp)
      000FA5 42               [ 4] 2569 	mul x,a
      000FA6 9F               [ 1] 2570 	ld a,xl
      000FA7 C7 00 09         [ 1] 2571 	ld acc24+2,a
      000FAA 9E               [ 1] 2572 	ld a, xh
      000FAB 6B 02            [ 1] 2573 	ld (OVFL,sp),a
                                   2574 ; multipy middle byte
      000FAD C6 00 08         [ 1] 2575 	ld a,acc24+1
      000FB0 97               [ 1] 2576 	ld xl,a
      000FB1 7B 03            [ 1] 2577 	ld a, (U8,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000FB3 42               [ 4] 2578 	mul x,a
                                   2579 ; add overflow to this partial product
      000FB4 72 FB 01         [ 2] 2580 	addw x,(OVFH,sp)
      000FB7 9F               [ 1] 2581 	ld a,xl
      000FB8 C7 00 08         [ 1] 2582 	ld acc24+1,a
      000FBB 4F               [ 1] 2583 	clr a
      000FBC A9 00            [ 1] 2584 	adc a,#0
      000FBE 6B 01            [ 1] 2585 	ld (OVFH,sp),a
      000FC0 9E               [ 1] 2586 	ld a,xh
      000FC1 6B 02            [ 1] 2587 	ld (OVFL,sp),a
                                   2588 ; multiply most signficant byte	
      000FC3 C6 00 07         [ 1] 2589 	ld a, acc24
      000FC6 97               [ 1] 2590 	ld xl, a
      000FC7 7B 03            [ 1] 2591 	ld a, (U8,sp)
      000FC9 42               [ 4] 2592 	mul x,a
      000FCA 72 FB 01         [ 2] 2593 	addw x, (OVFH,sp)
      000FCD 9F               [ 1] 2594 	ld a, xl
      000FCE C7 00 07         [ 1] 2595 	ld acc24,a
      000FD1 5B 03            [ 2] 2596     addw sp,#VSIZE
      000FD3 85               [ 2] 2597 	popw x
      000FD4 81               [ 4] 2598 	ret
                                   2599 
                                   2600 ;------------------------------------
                                   2601 ; skip character c in text starting from 'in'
                                   2602 ; input:
                                   2603 ;	 y 		point to text buffer
                                   2604 ;    a 		character to skip
                                   2605 ; output:  
                                   2606 ;	'in' ajusted to new position
                                   2607 ;------------------------------------
                           000001  2608 	C = 1 ; local var
      000FD5                       2609 skip:
      000FD5 88               [ 1] 2610 	push a
      000FD6 91 D6 00         [ 4] 2611 1$:	ld a,([in.w],y)
      000FD9 27 0A            [ 1] 2612 	jreq 2$
      000FDB 11 01            [ 1] 2613 	cp a,(C,sp)
      000FDD 26 06            [ 1] 2614 	jrne 2$
      000FDF 72 5C 00 01      [ 1] 2615 	inc in
      000FE3 20 F1            [ 2] 2616 	jra 1$
      000FE5                       2617 2$: _drop 1 
      000FE5 5B 01            [ 2]    1     addw sp,#1 
      000FE7 81               [ 4] 2618 	ret
                                   2619 	
                                   2620 ;------------------------------
                                   2621 ; restore 'in.w' variable to 
                                   2622 ; its value before last call
                                   2623 ; to get_token.
                                   2624 ;------------------------------
      000FE8                       2625 unget_token:
      000FE8 55 00 02 00 01   [ 1] 2626 	mov in,in.saved
      000FED 81               [ 4] 2627 	ret 
                                   2628 
                                   2629 
                                   2630 ;******************************
                                   2631 ;  data stack manipulation
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2632 ;*****************************
                                   2633 ;----------------------	
                                   2634 ; push X on data stack 
                                   2635 ; input:
                                   2636 ;	X 
                                   2637 ; output:
                                   2638 ;	none 
                                   2639 ;----------------------	
      000FEE                       2640 dpush:
      000FEE                       2641     _dp_down
      000FEE 72 5A 00 19      [ 1]    1     dec dstkptr+1 
      000FF2 72 5A 00 19      [ 1]    2     dec dstkptr+1
      000FF6 72 CF 00 18      [ 5] 2642     ldw [dstkptr],x  
      000FFA 81               [ 4] 2643 	ret 
                                   2644 
                                   2645 
                                   2646 ;----------------------	
                                   2647 ; pop data stack in X 
                                   2648 ; input:
                                   2649 ;	none
                                   2650 ; output:
                                   2651 ;	X   
                                   2652 ;----------------------	
      000FFB                       2653 dpop: 
      000FFB 72 CE 00 18      [ 5] 2654     ldw x, [dstkptr]
      000FFF                       2655 	_dp_up
      000FFF 72 5C 00 19      [ 1]    1     inc dstkptr+1
      001003 72 5C 00 19      [ 1]    2     inc dstkptr+1
      001007 81               [ 4] 2656 	ret 
                                   2657 
                                   2658 ;-----------------------------
                                   2659 ; swap top 2 elements of dstack
                                   2660 ;  {n1 n2 -- n2 n1 }
                                   2661 ;-----------------------------
      001008                       2662 dswap:
      001008 72 CE 00 18      [ 5] 2663 	ldw x,[dstkptr]
      00100C 89               [ 2] 2664 	pushw x 
      00100D AE 00 02         [ 2] 2665 	ldw x,#2 
      001010 72 DE 00 18      [ 5] 2666 	ldw x,([dstkptr],x) 
      001014 72 CF 00 18      [ 5] 2667 	ldw [dstkptr],x 
      001018 AE 00 02         [ 2] 2668 	ldw x,#2
      00101B 90 85            [ 2] 2669 	popw y 
      00101D 72 DF 00 18      [ 5] 2670 	ldw ([dstkptr],x),y 
      001021 81               [ 4] 2671 	ret
                                   2672 
                                   2673 ;-----------------------------
                                   2674 ; drop TOS 
                                   2675 ;-----------------------------
      001022                       2676 ddrop: ; { n -- }
      001022                       2677 	_dp_up 
      001022 72 5C 00 19      [ 1]    1     inc dstkptr+1
      001026 72 5C 00 19      [ 1]    2     inc dstkptr+1
      00102A 81               [ 4] 2678 	ret
                                   2679 	
                                   2680 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2681 ; duplicate TOS 
                                   2682 ;  dstack: { ix...n -- ix...n n }
                                   2683 ;-----------------------------
      00102B                       2684 ddup:
      00102B 72 CE 00 18      [ 5] 2685 	ldw x,[dstkptr]
      00102F                       2686 	_dp_down
      00102F 72 5A 00 19      [ 1]    1     dec dstkptr+1 
      001033 72 5A 00 19      [ 1]    2     dec dstkptr+1
      001037 72 CF 00 18      [ 5] 2687     ldw [dstkptr],x  
      00103B 81               [ 4] 2688 	ret 
                                   2689 
                                   2690 
                                   2691 ;----------------------------------
                                   2692 ; pick value n from dstack 
                                   2693 ; put it on TOS
                                   2694 ; dstack: {ix,..,p -- ix,...,np }
                                   2695 ;-----------------------------------
      00103C                       2696 dpick:
      00103C 72 CE 00 18      [ 5] 2697 	ldw x,[dstkptr]
      001040 58               [ 2] 2698 	sllw x 
      001041 72 BB 00 18      [ 2] 2699 	addw x,dstkptr 
      001045 FE               [ 2] 2700 	ldw x,(x)
      001046 72 CF 00 18      [ 5] 2701 	ldw [dstkptr],x 
      00104A 81               [ 4] 2702 	ret
                                   2703 
                                   2704 ;---------------------------
                                   2705 ;  fetch variable in X 
                                   2706 ;  dstack:{ addr -- value }
                                   2707 ;---------------------------
      00104B                       2708 fetch:
      00104B 72 CE 00 18      [ 5] 2709 	ldw x,[dstkptr]
      00104F FE               [ 2] 2710 	ldw x,(x)
      001050 72 CF 00 18      [ 5] 2711 	ldw [dstkptr],x
      001054 81               [ 4] 2712 	ret 
                                   2713 
                                   2714 ;----------------------------
                                   2715 ; store variable 
                                   2716 ; dstack: {addr value -- }
                                   2717 ;----------------------------
      001055                       2718 store:
      001055 CD 0F FB         [ 4] 2719 	call dpop 
      001058 90 93            [ 1] 2720 	ldw y,x   ; y=value 
      00105A CD 0F FB         [ 4] 2721 	call dpop 
      00105D FF               [ 2] 2722 	ldw (x),y 
      00105E 81               [ 4] 2723 	ret 
                                   2724 
                                   2725 ;---------------------------------
                                   2726 ; drop n elements from data stack 
                                   2727 ; input: 
                                   2728 ;   X 		n 
                                   2729 ; output:
                                   2730 ;   none 
                                   2731 ;-------------------------------------
      00105F                       2732 ddrop_n:
      00105F 90 89            [ 2] 2733 	pushw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001061 90 CE 00 18      [ 2] 2734 	ldw y,dstkptr 
      001065 58               [ 2] 2735 	sllw x 
      001066 89               [ 2] 2736 	pushw x 
      001067 72 F9 01         [ 2] 2737 	addw y,(1,sp)
      00106A 90 CF 00 18      [ 2] 2738 	ldw dstkptr,y 
      00106E 85               [ 2] 2739 	popw x 
      00106F 90 85            [ 2] 2740 	popw y
      001071 81               [ 4] 2741 	ret 
                                   2742 
      001072 0A 64 73 74 61 63 6B  2743 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2744 ;----------------------------
                                   2745 ; print dstack content 
                                   2746 ;---------------------------
                           000001  2747 	XSAVE=1
                           000002  2748 	VSIZE=2
      00107C                       2749 dots:
      00107C                       2750 	_vars VSIZE 
      00107C 52 02            [ 2]    1     sub sp,#VSIZE 
      00107E AE 10 72         [ 2] 2751 	ldw x,#dstk_prompt 
      001081 CD 01 DD         [ 4] 2752 	call puts
      001084 AE 17 7E         [ 2] 2753 	ldw x,#dstack_empty-CELL_SIZE
      001087 35 0A 00 06      [ 1] 2754 	mov base,#10 
      00108B C3 00 18         [ 2] 2755 1$:	cpw x,dstkptr 
      00108E 25 0D            [ 1] 2756 	jrult 4$ 
      001090 1F 01            [ 2] 2757 	ldw (XSAVE,sp),x
      001092 FE               [ 2] 2758 	ldw  x,(x)
      001093 CD 09 F5         [ 4] 2759 	call print_int 
      001096 1E 01            [ 2] 2760 	ldw x,(XSAVE,sp)
      001098 1D 00 02         [ 2] 2761 	subw x,#CELL_SIZE 
      00109B 20 EE            [ 2] 2762 	jra 1$ 
      00109D A6 0D            [ 1] 2763 4$: ld a,#CR 
      00109F CD 01 CB         [ 4] 2764 	call putc 
      0010A2                       2765 	_drop VSIZE
      0010A2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010A4 4F               [ 1] 2766 	clr a 
      0010A5 81               [ 4] 2767 	ret
                                   2768 
      0010A6 0A 63 74 61 63 6B 3A  2769 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2770 ;--------------------------------
                                   2771 ; print cstack content
                                   2772 ;--------------------------------
                           000001  2773 	XSAVE=1
                           000002  2774 	VSIZE=2 
      0010AF                       2775 dotr:
      0010AF                       2776 	_vars VSIZE 
      0010AF 52 02            [ 2]    1     sub sp,#VSIZE 
      0010B1 AE 10 A6         [ 2] 2777 	ldw x,#cstk_prompt
      0010B4 CD 01 DD         [ 4] 2778 	call puts 
      0010B7 96               [ 1] 2779 	ldw x,sp 
      0010B8 1C 00 07         [ 2] 2780 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      0010BB 1F 01            [ 2] 2781 	ldw (XSAVE,sp),x  
      0010BD AE 17 FE         [ 2] 2782 	ldw x,#RAM_SIZE-2
      0010C0 35 10 00 06      [ 1] 2783 	mov base,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0010C4                       2784 dotr_loop:
      0010C4 13 01            [ 2] 2785 	cpw x,(XSAVE,sp)
      0010C6 2B 0B            [ 1] 2786 	jrmi 9$
      0010C8 89               [ 2] 2787 	pushw x  
      0010C9 FE               [ 2] 2788 	ldw x,(x)
      0010CA CD 09 F5         [ 4] 2789 	call print_int 
      0010CD 85               [ 2] 2790 	popw x  
      0010CE 1D 00 02         [ 2] 2791 	subw x,#CELL_SIZE
      0010D1 20 F1            [ 2] 2792 	jra dotr_loop 
      0010D3 A6 0D            [ 1] 2793 9$:	ld a,#CR 
      0010D5 CD 01 CB         [ 4] 2794 	call putc 
      0010D8                       2795 	_drop VSIZE 
      0010D8 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010DA 4F               [ 1] 2796 	clr a 
      0010DB 81               [ 4] 2797 	ret
                                   2798 
                                   2799 
                                   2800 ;--------------------------------
                                   2801 ;  add 2 integers
                                   2802 ;  input:
                                   2803 ;    N1     on cstack 
                                   2804 ;    N2     on cstack 
                                   2805 ;  output:
                                   2806 ;    X 		n2+n1 
                                   2807 ;--------------------------------
                                   2808 	;arugments on cstack 
      0010DC                       2809 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0010DC                       2810 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      0010DC                       2811 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      0010DC                       2812 add:
      0010DC 1E 05            [ 2] 2813 	ldw x ,(N2,sp)
      0010DE 72 FB 03         [ 2] 2814 	addw x,(N1,sp)
      0010E1 1F 03            [ 2] 2815 	ldw (N1,sp),x 
      0010E3 81               [ 4] 2816 	ret 
                                   2817 
                                   2818 ;--------------------------------
                                   2819 ;  substract 2 ntegers
                                   2820 ;  input:
                                   2821 ;    N1     on cstack 
                                   2822 ;    N2     on cstack 
                                   2823 ;  output:
                                   2824 ;    X 		n2+n1 
                                   2825 ;--------------------------------
      0010E4                       2826 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0010E4                       2827 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      0010E4                       2828 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      0010E4                       2829 substract:
      0010E4 1E 05            [ 2] 2830 	ldw x,(N2,sp)
      0010E6 72 F0 03         [ 2] 2831 	subw x,(N1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010E9 81               [ 4] 2832 	ret 
                                   2833 
                                   2834 ;-------------------------------------
                                   2835 ; multiply 2 integers
                                   2836 ; product overflow is ignored unless
                                   2837 ; MATH_OVF assembler flag is set to 1
                                   2838 ; input:
                                   2839 ;  	N1      on cstack
                                   2840 ;   N2 		on cstack 
                                   2841 ; output:
                                   2842 ;	X        N1*N2 
                                   2843 ;-------------------------------------
                                   2844 	;arguments 
      0010EA                       2845 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      0010EA                       2846 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      0010EA                       2847 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      0010EA                       2848 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      0010EA                       2849 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2850    ; local variables 
                           000001  2851 	SIGN=1
                           000002  2852 	PROD=2
                           000003  2853 	VSIZE=3
      0010EA                       2854 multiply:
      0010EA                       2855 	_vars VSIZE 
      0010EA 52 03            [ 2]    1     sub sp,#VSIZE 
      0010EC 0F 01            [ 1] 2856 	clr (SIGN,sp)
      0010EE 1E 06            [ 2] 2857 	ldw x,(N1_HB,sp)
      0010F0 9E               [ 1] 2858 	ld a,xh  
      0010F1 A5 80            [ 1] 2859 	bcp a,#0x80 
      0010F3 27 05            [ 1] 2860 	jreq 2$
      0010F5 03 01            [ 1] 2861 	cpl (SIGN,sp)
      0010F7 50               [ 2] 2862 	negw x 
      0010F8 1F 06            [ 2] 2863 	ldw (N1_HB,sp),x 
      0010FA 1E 08            [ 2] 2864 2$: ldw x,(N2_HB,sp)
      0010FC 9E               [ 1] 2865 	ld a,xh  
      0010FD A5 80            [ 1] 2866 	bcp a,#0x80 
      0010FF 27 05            [ 1] 2867 	jreq 3$
      001101 03 01            [ 1] 2868 	cpl (SIGN,sp)
      001103 50               [ 2] 2869 	negw x 
      001104 1F 08            [ 2] 2870 	ldw (N2_HB,sp),x 
                                   2871 ; N1_LB * N2_LB 	
      001106 7B 07            [ 1] 2872 3$:	ld a,(N1_LB,sp)
      001108 97               [ 1] 2873 	ld xl,a 
      001109 7B 09            [ 1] 2874 	ld a,(N2_LB,sp) 
      00110B 42               [ 4] 2875 	mul x,a 
                           000000  2876 .if MATH_OVF 	
                                   2877 	ld a,xh 
                                   2878 	bcp a,#0x80 
                                   2879 	jreq 4$ 
                                   2880 	ld a,#ERR_MATH_OVF 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2881 	jp tb_error
                                   2882 .endif 	 
      00110C 1F 02            [ 2] 2883 4$:	ldw (PROD,sp),x
                                   2884 ; N1_LB * N2_HB	 
      00110E 7B 07            [ 1] 2885 	ld a,(N1_LB,sp) 
      001110 97               [ 1] 2886 	ld xl,a 
      001111 7B 08            [ 1] 2887 	ld a,(N2_HB,sp)
      001113 42               [ 4] 2888 	mul x,a
      001114 9F               [ 1] 2889 	ld a,xl 
      001115 1B 02            [ 1] 2890 	add a,(PROD,sp)
                           000000  2891 .if MATH_OVF 	
                                   2892 	bcp a,#0x80 
                                   2893 	jreq 5$ 
                                   2894 	ld a,#ERR_MATH_OVF 
                                   2895 	jp tb_error
                                   2896 .endif 	 
      001117 6B 02            [ 1] 2897 5$:	ld (PROD,sp),a 
                                   2898 ; N1_HB * N2_LB 
      001119 7B 06            [ 1] 2899 	ld a,(N1_HB,sp)
      00111B 97               [ 1] 2900 	ld xl,a 
      00111C 7B 09            [ 1] 2901 	ld a,(N2_LB,sp)
      00111E 42               [ 4] 2902 	mul x,a 
      00111F 9F               [ 1] 2903 	ld a,xl 
      001120 1B 02            [ 1] 2904 	add a,(PROD,sp)
                           000000  2905 .if MATH_OVF 	
                                   2906 	bcp a,#0x80 
                                   2907 	jreq 6$ 
                                   2908 	ld a,#ERR_MATH_OVF 
                                   2909 	jp tb_error
                                   2910 .endif 	 
      001122 6B 02            [ 1] 2911 6$:	ld (PROD,sp),a 
                                   2912 ; N1_HB * N2_HB 	
                                   2913 ; it is pointless to multiply N1_HB*N2_HB 
                                   2914 ; as this product is over 65535 or 0 
                                   2915 ;
                                   2916 ; sign adjust product
      001124 0D 01            [ 1] 2917 	tnz (SIGN,sp)
      001126 27 05            [ 1] 2918 	jreq 7$
      001128 1E 02            [ 2] 2919 	ldw x, (PROD,sp)
      00112A 50               [ 2] 2920 	negw x
      00112B 1F 02            [ 2] 2921 	ldw (PROD,sp),x  
      00112D                       2922 7$: 
      00112D 1E 02            [ 2] 2923 	ldw x,(PROD,sp) 
      00112F                       2924 	_drop VSIZE 
      00112F 5B 03            [ 2]    1     addw sp,#VSIZE 
      001131 81               [ 4] 2925 	ret
                                   2926 
                                   2927 ;----------------------------------
                                   2928 ;  euclidian divide n2/n1 
                                   2929 ; input:
                                   2930 ;    N2 	on cstack
                                   2931 ;    N1 	on cstack
                                   2932 ; output:
                                   2933 ;    X      n2/n1 
                                   2934 ;    Y      remainder 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2935 ;----------------------------------
      001132                       2936 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      001132                       2937 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      001132                       2938 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2939 	; local variables
                           000001  2940 	SQUOT=1 ; sign quotient
                           000002  2941 	SDIVD=2 ; sign dividend  
                           000002  2942 	VSIZE=2
      001132                       2943 divide:
      001132                       2944 	_vars VSIZE 
      001132 52 02            [ 2]    1     sub sp,#VSIZE 
      001134 0F 01            [ 1] 2945 	clr (SQUOT,sp)
      001136 0F 02            [ 1] 2946 	clr (SDIVD,sp)
                                   2947 ; check for 0 divisor
      001138 1E 05            [ 2] 2948 	ldw x,(DIVISR,sp)
      00113A 5D               [ 2] 2949 	tnzw x 
      00113B 26 05            [ 1] 2950     jrne 0$
      00113D A6 04            [ 1] 2951 	ld a,#ERR_DIV0 
      00113F CC 07 97         [ 2] 2952 	jp tb_error 
                                   2953 ; check divisor sign 	
      001142 9E               [ 1] 2954 0$:	ld a,xh 
      001143 A5 80            [ 1] 2955 	bcp a,#0x80 
      001145 27 03            [ 1] 2956 	jreq 1$
      001147 03 01            [ 1] 2957 	cpl (SQUOT,sp)
      001149 50               [ 2] 2958 	negw x 
      00114A 1F 05            [ 2] 2959 1$:	ldw (DIVISR,sp),x
                                   2960 ; check dividend sign 	 
      00114C 1E 07            [ 2] 2961     ldw x,(DIVIDND,sp)
      00114E 9E               [ 1] 2962 	ld a,xh 
      00114F A5 80            [ 1] 2963 	bcp a,#0x80 
      001151 27 05            [ 1] 2964 	jreq 2$ 
      001153 03 01            [ 1] 2965 	cpl (SQUOT,sp)
      001155 03 02            [ 1] 2966 	cpl (SDIVD,sp)
      001157 50               [ 2] 2967 	negw x 
      001158 16 05            [ 2] 2968 2$:	ldw y,(DIVISR,sp)
      00115A 65               [ 2] 2969 	divw x,y
      00115B 90 CF 00 08      [ 2] 2970 	ldw acc16,y 
                                   2971 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      00115F 0D 02            [ 1] 2972 	tnz (SDIVD,sp)
      001161 27 0B            [ 1] 2973 	jreq 7$
      001163 90 5D            [ 2] 2974 	tnzw y 
      001165 27 07            [ 1] 2975 	jreq 7$
      001167 5C               [ 2] 2976 	incw x
      001168 16 05            [ 2] 2977 	ldw y,(DIVISR,sp)
      00116A 72 B2 00 08      [ 2] 2978 	subw y,acc16
      00116E 0D 01            [ 1] 2979 7$: tnz (SQUOT,sp)
      001170 27 01            [ 1] 2980 	jreq 9$ 	 
      001172 50               [ 2] 2981 8$:	negw x 
      001173                       2982 9$: 
      001173                       2983 	_drop VSIZE 
      001173 5B 02            [ 2]    1     addw sp,#VSIZE 
      001175 81               [ 4] 2984 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   2985 
                                   2986 
                                   2987 ;----------------------------------
                                   2988 ;  remainder resulting from euclidian 
                                   2989 ;  division of n2/n1 
                                   2990 ; input:
                                   2991 ;   N1 		cstack 
                                   2992 ;   N2      cstack
                                   2993 ; output:
                                   2994 ;   X       N2%N1 
                                   2995 ;----------------------------------
                           000003  2996 	N1=3
                           000005  2997 	N2=5
                           000004  2998 	VSIZE=4
      001176                       2999 modulo:
      001176 1E 03            [ 2] 3000 	Ldw x,(N1,sp)
      001178 16 05            [ 2] 3001 	ldw y,(N2,sp)
      00117A                       3002 	_vars VSIZE 
      00117A 52 04            [ 2]    1     sub sp,#VSIZE 
      00117C 1F 01            [ 2] 3003 	ldw (1,sp),x 
      00117E 17 03            [ 2] 3004 	ldw (3,sp),y 
      001180 CD 11 32         [ 4] 3005 	call divide 
      001183 93               [ 1] 3006 	ldw x,y
      001184                       3007 	_drop VSIZE 
      001184 5B 04            [ 2]    1     addw sp,#VSIZE 
      001186 81               [ 4] 3008 	ret 
                                   3009 
                                   3010 
                                   3011 ;----------------------------------
                                   3012 ; search in kword_dict command name
                                   3013 ;  from its execution address 
                                   3014 ; input:
                                   3015 ;   X       	execution address 
                                   3016 ; output:
                                   3017 ;   X 			cstr*  | 0 
                                   3018 ;--------------------------------
                           000001  3019 	XADR=1 
                           000003  3020 	LINK=3 
                           000004  3021 	VSIZE=4
      001187                       3022 cmd_name:
      001187                       3023 	_vars VSIZE 
      001187 52 04            [ 2]    1     sub sp,#VSIZE 
      001189 72 5F 00 08      [ 1] 3024 	clr acc16 
      00118D 1F 01            [ 2] 3025 	ldw (XADR,sp),x  
      00118F AE 24 7E         [ 2] 3026 	ldw x,#kword_dict	
      001192 1F 03            [ 2] 3027 1$:	ldw (LINK,sp),x
      001194 E6 02            [ 1] 3028 	ld a,(2,x)
      001196 A4 0F            [ 1] 3029 	and a,#15 
      001198 C7 00 09         [ 1] 3030 	ld acc8,a 
      00119B 1C 00 03         [ 2] 3031 	addw x,#3
      00119E 72 BB 00 08      [ 2] 3032 	addw x,acc16
      0011A2 FE               [ 2] 3033 	ldw x,(x) ; execution address 
      0011A3 13 01            [ 2] 3034 	cpw x,(XADR,sp)
      0011A5 27 0A            [ 1] 3035 	jreq 2$
      0011A7 1E 03            [ 2] 3036 	ldw x,(LINK,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011A9 FE               [ 2] 3037 	ldw x,(x) 
      0011AA 1D 00 02         [ 2] 3038 	subw x,#2  
      0011AD 26 E3            [ 1] 3039 	jrne 1$
      0011AF 20 05            [ 2] 3040 	jra 9$
      0011B1 1E 03            [ 2] 3041 2$: ldw x,(LINK,sp)
      0011B3 1C 00 02         [ 2] 3042 	addw x,#2 	
      0011B6                       3043 9$:	_drop VSIZE
      0011B6 5B 04            [ 2]    1     addw sp,#VSIZE 
      0011B8 81               [ 4] 3044 	ret
                                   3045 
                                   3046 
                                   3047 ;---------------------------------
                                   3048 ; input:
                                   3049 ;	X 		dictionary entry point 
                                   3050 ;  pad		.asciz name to search 
                                   3051 ; output:
                                   3052 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3053 ;  X		execution address | 0 
                                   3054 ;---------------------------------
                           000001  3055 	NLEN=1 ; cmd length 
                           000002  3056 	YSAVE=2
                           000003  3057 	VSIZE=3 
      0011B9                       3058 search_dict:
      0011B9                       3059 	_vars VSIZE 
      0011B9 52 03            [ 2]    1     sub sp,#VSIZE 
      0011BB 90 93            [ 1] 3060 	ldw y,x 
      0011BD                       3061 search_next:	
      0011BD 90 F6            [ 1] 3062 	ld a,(y)
      0011BF A4 0F            [ 1] 3063 	and a,#0xf 
      0011C1 6B 01            [ 1] 3064 	ld (NLEN,sp),a  
      0011C3 AE 17 18         [ 2] 3065 	ldw x,#pad 
      0011C6 17 02            [ 2] 3066 	ldw (YSAVE,sp),y
      0011C8 90 5C            [ 2] 3067 	incw y  
      0011CA                       3068 cp_loop:
      0011CA F6               [ 1] 3069 	ld a,(x)
      0011CB 27 1E            [ 1] 3070 	jreq str_match 
      0011CD 0D 01            [ 1] 3071 	tnz (NLEN,sp)
      0011CF 27 0B            [ 1] 3072 	jreq no_match  
      0011D1 90 F1            [ 1] 3073 	cp a,(y)
      0011D3 26 07            [ 1] 3074 	jrne no_match 
      0011D5 90 5C            [ 2] 3075 	incw y 
      0011D7 5C               [ 2] 3076 	incw x
      0011D8 0A 01            [ 1] 3077 	dec (NLEN,sp)
      0011DA 20 EE            [ 2] 3078 	jra cp_loop 
      0011DC                       3079 no_match:
      0011DC 16 02            [ 2] 3080 	ldw y,(YSAVE,sp) 
      0011DE 72 A2 00 02      [ 2] 3081 	subw y,#2 ; move Y to link field
      0011E2 4B 00            [ 1] 3082 	push #TK_NONE 
      0011E4 90 FE            [ 2] 3083 	ldw y,(y) ; next word link 
      0011E6 84               [ 1] 3084 	pop a ; TK_NONE 
      0011E7 27 21            [ 1] 3085 	jreq search_exit  ; not found  
                                   3086 ;try next 
      0011E9 20 D2            [ 2] 3087 	jra search_next
      0011EB                       3088 str_match:
      0011EB 16 02            [ 2] 3089 	ldw y,(YSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011ED 90 F6            [ 1] 3090 	ld a,(y)
      0011EF 6B 01            [ 1] 3091 	ld (NLEN,sp),a ; needed to test keyword type  
      0011F1 A4 0F            [ 1] 3092 	and a,#0xf 
                                   3093 ; move y to procedure address field 	
      0011F3 4C               [ 1] 3094 	inc a 
      0011F4 C7 00 09         [ 1] 3095 	ld acc8,a 
      0011F7 72 5F 00 08      [ 1] 3096 	clr acc16 
      0011FB 72 B9 00 08      [ 2] 3097 	addw y,acc16 
      0011FF 90 FE            [ 2] 3098 	ldw y,(y) ; routine entry point 
                                   3099 ;determine keyword type bits 7:6 
      001201 7B 01            [ 1] 3100 	ld a,(NLEN,sp)
      001203 4E               [ 1] 3101 	swap a 
      001204 A4 0C            [ 1] 3102 	and a,#0xc
      001206 44               [ 1] 3103 	srl a
      001207 44               [ 1] 3104 	srl a 
      001208 AB 06            [ 1] 3105 	add a,#6
      00120A                       3106 search_exit: 
      00120A 93               [ 1] 3107 	ldw x,y ; x=routine address 
      00120B                       3108 	_drop VSIZE 	 
      00120B 5B 03            [ 2]    1     addw sp,#VSIZE 
      00120D 81               [ 4] 3109 	ret 
                                   3110 
                                   3111 ;---------------------
                                   3112 ; check if next token
                                   3113 ;  is of expected type 
                                   3114 ; input:
                                   3115 ;   A 		 expected token attribute
                                   3116 ;  ouput:
                                   3117 ;   none     if fail call tb_error 
                                   3118 ;--------------------
      00120E                       3119 expect:
      00120E 88               [ 1] 3120 	push a 
      00120F CD 08 5C         [ 4] 3121 	call next_token 
      001212 11 01            [ 1] 3122 	cp a,(1,sp)
      001214 27 03            [ 1] 3123 	jreq 1$
      001216 CC 07 95         [ 2] 3124 	jp syntax_error
      001219 84               [ 1] 3125 1$: pop a 
      00121A 81               [ 4] 3126 	ret 
                                   3127 
                                   3128 
                                   3129 ;-------------------------------
                                   3130 ; parse embedded BASIC routines 
                                   3131 ; arguments list.
                                   3132 ; arg_list::=  rel[','rel]*
                                   3133 ; all arguments are of integer type
                                   3134 ; input:
                                   3135 ;   none
                                   3136 ; output:
                                   3137 ;   A 			number of arguments pushed on dstack  
                                   3138 ;--------------------------------
                           000001  3139 	ARG_CNT=1 
      00121B                       3140 arg_list:
      00121B 4B 00            [ 1] 3141 	push #0  
      00121D CD 13 63         [ 4] 3142 1$: call relation
      001220 A1 00            [ 1] 3143 	cp a,#TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001222 27 19            [ 1] 3144 	jreq 5$
      001224 A1 04            [ 1] 3145 	cp a,#TK_INTGR
      001226 26 12            [ 1] 3146 	jrne 4$
      001228 CD 0F EE         [ 4] 3147 3$: call dpush 
      00122B 0C 01            [ 1] 3148     inc (ARG_CNT,sp)
      00122D CD 08 5C         [ 4] 3149 	call next_token 
      001230 A1 00            [ 1] 3150 	cp a,#TK_NONE 
      001232 27 09            [ 1] 3151 	jreq 5$ 
      001234 A1 0D            [ 1] 3152 	cp a,#TK_COMMA 
      001236 26 02            [ 1] 3153 	jrne 4$
      001238 20 E3            [ 2] 3154 	jra 1$ 
      00123A CD 0F E8         [ 4] 3155 4$:	call unget_token 
      00123D 84               [ 1] 3156 5$:	pop a 
      00123E 81               [ 4] 3157 	ret 
                                   3158 
                                   3159 
      00123F                       3160 func_args:
      00123F A6 0B            [ 1] 3161 	ld a,#TK_LPAREN 
      001241 CD 12 0E         [ 4] 3162 	call expect 
      001244 CD 12 1B         [ 4] 3163 	call arg_list 
      001247 88               [ 1] 3164 	push a 
      001248 A6 0C            [ 1] 3165 	ld a,#TK_RPAREN 
      00124A CD 12 0E         [ 4] 3166 	call expect 
      00124D 84               [ 1] 3167 	pop a 
      00124E 81               [ 4] 3168 	ret 
                                   3169 
                                   3170 
                                   3171 ;--------------------------------
                                   3172 ;   BASIC commnands 
                                   3173 ;--------------------------------
                                   3174 
                                   3175 ;--------------------------------
                                   3176 ;  arithmetic and relational 
                                   3177 ;  routines
                                   3178 ;  operators precedence
                                   3179 ;  highest to lowest
                                   3180 ;  operators on same row have 
                                   3181 ;  same precedence and are executed
                                   3182 ;  from left to right.
                                   3183 ;	'*','/','%'
                                   3184 ;   '-','+'
                                   3185 ;   '=','>','<','>=','<=','<>','><'
                                   3186 ;   '<>' and '><' are equivalent for not equal.
                                   3187 ;--------------------------------
                                   3188 
                                   3189 ;---------------------
                                   3190 ; return array element
                                   3191 ; address from @(expr)
                                   3192 ; input:
                                   3193 ;   A 		TK_ARRAY
                                   3194 ; output:
                                   3195 ;   A 		TK_INTGR
                                   3196 ;	X 		element address 
                                   3197 ;----------------------
      00124F                       3198 get_array_element:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00124F CD 12 3F         [ 4] 3199 	call func_args 
      001252 A1 01            [ 1] 3200 	cp a,#1
      001254 27 03            [ 1] 3201 	jreq 1$
      001256 CC 07 95         [ 2] 3202 	jp syntax_error
      001259 CD 0F FB         [ 4] 3203 1$: call dpop  
                                   3204 	; check for bounds 
      00125C C3 00 1F         [ 2] 3205 	cpw x,array_size 
      00125F 23 05            [ 2] 3206 	jrule 3$
                                   3207 ; bounds {1..array_size}	
      001261 A6 0A            [ 1] 3208 2$: ld a,#ERR_BAD_VALUE 
      001263 CC 07 97         [ 2] 3209 	jp tb_error 
      001266 5D               [ 2] 3210 3$: tnzw  x
      001267 27 F8            [ 1] 3211 	jreq 2$ 
      001269 58               [ 2] 3212 	sllw x 
      00126A 89               [ 2] 3213 	pushw x 
      00126B AE 16 C8         [ 2] 3214 	ldw x,#tib
      00126E 72 F0 01         [ 2] 3215 	subw x,(1,sp)
      001271                       3216 	_drop 2   
      001271 5B 02            [ 2]    1     addw sp,#2 
      001273 A6 04            [ 1] 3217 	ld a,#TK_INTGR
      001275 81               [ 4] 3218 	ret 
                                   3219 
                                   3220 ;***********************************
                                   3221 ;   expression parse,execute 
                                   3222 ;***********************************
                                   3223 ;-----------------------------------
                                   3224 ; factor ::= ['+'|'-'|e] var | @ |
                                   3225 ;			 integer | function |
                                   3226 ;			 '('relation')' 
                                   3227 ; output:
                                   3228 ;   A    token attribute 
                                   3229 ;   X 	 integer
                                   3230 ; ---------------------------------
                           000001  3231 	NEG=1
                           000001  3232 	VSIZE=1
      001276                       3233 factor:
      001276                       3234 	_vars VSIZE 
      001276 52 01            [ 2]    1     sub sp,#VSIZE 
      001278 CD 08 5C         [ 4] 3235 	call next_token
      00127B A1 02            [ 1] 3236 	cp a,#CMD_END 
      00127D 2B 50            [ 1] 3237 	jrmi 20$
      00127F 6B 01            [ 1] 3238 1$:	ld (NEG,sp),a 
      001281 A4 30            [ 1] 3239 	and a,#TK_GRP_MASK
      001283 A1 10            [ 1] 3240 	cp a,#TK_GRP_ADD 
      001285 27 04            [ 1] 3241 	jreq 2$
      001287 7B 01            [ 1] 3242 	ld a,(NEG,sp)
      001289 20 03            [ 2] 3243 	jra 4$  
      00128B                       3244 2$:	
      00128B CD 08 5C         [ 4] 3245 	call next_token 
      00128E                       3246 4$:	
      00128E A1 07            [ 1] 3247 	cp a,#TK_IFUNC 
      001290 26 03            [ 1] 3248 	jrne 5$ 
      001292 FD               [ 4] 3249 	call (x) 
      001293 20 31            [ 2] 3250 	jra 18$ 
      001295                       3251 5$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001295 A1 04            [ 1] 3252 	cp a,#TK_INTGR
      001297 26 02            [ 1] 3253 	jrne 6$
      001299 20 2B            [ 2] 3254 	jra 18$
      00129B                       3255 6$:
      00129B A1 02            [ 1] 3256 	cp a,#TK_ARRAY
      00129D 26 06            [ 1] 3257 	jrne 10$
      00129F CD 12 4F         [ 4] 3258 	call get_array_element
      0012A2 FE               [ 2] 3259 	ldw x,(x)
      0012A3 20 21            [ 2] 3260 	jra 18$ 
      0012A5                       3261 10$:
      0012A5 A1 05            [ 1] 3262 	cp a,#TK_VAR 
      0012A7 26 03            [ 1] 3263 	jrne 11$
      0012A9 FE               [ 2] 3264 	ldw x,(x)
      0012AA 20 1A            [ 2] 3265 	jra 18$
      0012AC                       3266 11$: 
      0012AC A1 09            [ 1] 3267 	cp a,#TK_CONST 
      0012AE 27 16            [ 1] 3268 	jreq 18$
      0012B0                       3269 12$:			
      0012B0 A1 0B            [ 1] 3270 	cp a,#TK_LPAREN
      0012B2 26 0C            [ 1] 3271 	jrne 16$
      0012B4 CD 13 63         [ 4] 3272 	call relation
      0012B7 89               [ 2] 3273 	pushw x 
      0012B8 A6 0C            [ 1] 3274 	ld a,#TK_RPAREN 
      0012BA CD 12 0E         [ 4] 3275 	call expect
      0012BD 85               [ 2] 3276 	popw x 
      0012BE 20 06            [ 2] 3277 	jra 18$	
      0012C0                       3278 16$:
      0012C0 CD 0F E8         [ 4] 3279 	call unget_token
      0012C3 4F               [ 1] 3280 	clr a 
      0012C4 20 09            [ 2] 3281 	jra 20$ 
      0012C6                       3282 18$: 
      0012C6 A6 11            [ 1] 3283 	ld a,#TK_MINUS 
      0012C8 11 01            [ 1] 3284 	cp a,(NEG,sp)
      0012CA 26 01            [ 1] 3285 	jrne 19$
      0012CC 50               [ 2] 3286 	negw x
      0012CD                       3287 19$:
      0012CD A6 04            [ 1] 3288 	ld a,#TK_INTGR
      0012CF                       3289 20$:
      0012CF                       3290 	_drop VSIZE
      0012CF 5B 01            [ 2]    1     addw sp,#VSIZE 
      0012D1 81               [ 4] 3291 	ret
                                   3292 
                                   3293 ;-----------------------------------
                                   3294 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3295 ; output:
                                   3296 ;   A    	token attribute 
                                   3297 ;	X		integer
                                   3298 ;-----------------------------------
                           000001  3299 	N1=1
                           000003  3300 	N2=3
                           000005  3301 	MULOP=5
                           000005  3302 	VSIZE=5
      0012D2                       3303 term:
      0012D2                       3304 	_vars VSIZE
      0012D2 52 05            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012D4 CD 12 76         [ 4] 3305 	call factor
      0012D7 A1 02            [ 1] 3306 	cp a,#CMD_END
      0012D9 2B 41            [ 1] 3307 	jrmi term_exit
      0012DB                       3308 term01:	 ; check for  operator 
      0012DB 1F 03            [ 2] 3309 	ldw (N2,sp),x  ; save first factor 
      0012DD CD 08 5C         [ 4] 3310 	call next_token
      0012E0 A1 02            [ 1] 3311 	cp a,#2
      0012E2 2B 34            [ 1] 3312 	jrmi 9$
      0012E4 6B 05            [ 1] 3313 0$:	ld (MULOP,sp),a
      0012E6 A4 30            [ 1] 3314 	and a,#TK_GRP_MASK
      0012E8 A1 20            [ 1] 3315 	cp a,#TK_GRP_MULT
      0012EA 27 07            [ 1] 3316 	jreq 1$
      0012EC 7B 05            [ 1] 3317 	ld a,(MULOP,sp) 
      0012EE CD 0F E8         [ 4] 3318 	call unget_token 
      0012F1 20 25            [ 2] 3319 	jra 9$
      0012F3                       3320 1$:	; got *|/|%
      0012F3 CD 12 76         [ 4] 3321 	call factor
      0012F6 A1 04            [ 1] 3322 	cp a,#TK_INTGR
      0012F8 27 03            [ 1] 3323 	jreq 2$ 
      0012FA CC 07 95         [ 2] 3324 	jp syntax_error
      0012FD 1F 01            [ 2] 3325 2$:	ldw (N1,sp),x  
      0012FF 7B 05            [ 1] 3326 	ld a,(MULOP,sp) 
      001301 A1 20            [ 1] 3327 	cp a,#TK_MULT 
      001303 26 05            [ 1] 3328 	jrne 3$
      001305 CD 10 EA         [ 4] 3329 	call multiply 
      001308 20 D1            [ 2] 3330 	jra term01
      00130A A1 21            [ 1] 3331 3$: cp a,#TK_DIV 
      00130C 26 05            [ 1] 3332 	jrne 4$ 
      00130E CD 11 32         [ 4] 3333 	call divide 
      001311 20 C8            [ 2] 3334 	jra term01 
      001313 CD 11 76         [ 4] 3335 4$: call modulo
      001316 20 C3            [ 2] 3336 	jra term01 
      001318 1E 03            [ 2] 3337 9$: ldw x,(N2,sp)  
      00131A A6 04            [ 1] 3338 	ld a,#TK_INTGR 	
      00131C                       3339 term_exit:
      00131C                       3340 	_drop VSIZE 
      00131C 5B 05            [ 2]    1     addw sp,#VSIZE 
      00131E 81               [ 4] 3341 	ret 
                                   3342 
                                   3343 ;-------------------------------
                                   3344 ;  expr ::= term [['+'|'-'] term]*
                                   3345 ;  result range {-32768..32767}
                                   3346 ;  output:
                                   3347 ;   A    token attribute 
                                   3348 ;   X	 integer   
                                   3349 ;-------------------------------
                           000001  3350 	N1=1 
                           000003  3351 	N2=3
                           000005  3352 	OP=5 
                           000005  3353 	VSIZE=5 
      00131F                       3354 expression:
      00131F                       3355 	_vars VSIZE 
      00131F 52 05            [ 2]    1     sub sp,#VSIZE 
      001321 CD 12 D2         [ 4] 3356 	call term
      001324 A1 02            [ 1] 3357 	cp a,#CMD_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001326 2B 38            [ 1] 3358 	jrmi expr_exit 
      001328 1F 03            [ 2] 3359 0$:	ldw (N2,sp),x 
      00132A CD 08 5C         [ 4] 3360 	call next_token
      00132D A1 02            [ 1] 3361 	cp a,#2
      00132F 2B 2B            [ 1] 3362 	jrmi 9$ 
      001331 6B 05            [ 1] 3363 1$:	ld (OP,sp),a  
      001333 A4 30            [ 1] 3364 	and a,#TK_GRP_MASK
      001335 A1 10            [ 1] 3365 	cp a,#TK_GRP_ADD 
      001337 27 07            [ 1] 3366 	jreq 2$ 
      001339 7B 05            [ 1] 3367 	ld a,(OP,sp)
      00133B CD 0F E8         [ 4] 3368 	call unget_token
      00133E 20 1C            [ 2] 3369 	jra 9$
      001340                       3370 2$: 
      001340 CD 12 D2         [ 4] 3371 	call term
      001343 A1 04            [ 1] 3372 	cp a,#TK_INTGR 
      001345 27 03            [ 1] 3373 	jreq 3$
      001347 CC 07 95         [ 2] 3374 	jp syntax_error
      00134A 1F 01            [ 2] 3375 3$:	ldw (N1,sp),x 
      00134C 7B 05            [ 1] 3376 	ld a,(OP,sp)
      00134E A1 10            [ 1] 3377 	cp a,#TK_PLUS 
      001350 26 05            [ 1] 3378 	jrne 4$
      001352 CD 10 DC         [ 4] 3379 	call add 
      001355 20 D1            [ 2] 3380 	jra 0$ 
      001357 CD 10 E4         [ 4] 3381 4$:	call substract
      00135A 20 CC            [ 2] 3382 	jra 0$
      00135C 1E 03            [ 2] 3383 9$: ldw x,(N2,sp)
      00135E A6 04            [ 1] 3384 	ld a,#TK_INTGR	
      001360                       3385 expr_exit:
      001360                       3386 	_drop VSIZE 
      001360 5B 05            [ 2]    1     addw sp,#VSIZE 
      001362 81               [ 4] 3387 	ret 
                                   3388 
                                   3389 ;---------------------------------------------
                                   3390 ; rel ::= expr rel_op expr
                                   3391 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3392 ;  relation return 1 | 0  for true | false 
                                   3393 ;  output:
                                   3394 ;    A 		token attribute  
                                   3395 ;	 X		1|0
                                   3396 ;---------------------------------------------
                           000001  3397 	N1=1
                           000003  3398 	N2=3
                           000005  3399 	RELOP=5
                           000005  3400 	VSIZE=5 
      001363                       3401 relation: 
      001363                       3402 	_vars VSIZE
      001363 52 05            [ 2]    1     sub sp,#VSIZE 
      001365 CD 13 1F         [ 4] 3403 	call expression
      001368 A1 02            [ 1] 3404 	cp a,#CMD_END  
      00136A 2B 4B            [ 1] 3405 	jrmi rel_exit 
                                   3406 	; expect rel_op or leave 
      00136C 1F 03            [ 2] 3407 	ldw (N2,sp),x 
      00136E CD 08 5C         [ 4] 3408 	call next_token 
      001371 A1 02            [ 1] 3409 	cp a,#2
      001373 2B 3E            [ 1] 3410 	jrmi 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001375                       3411 1$:	
      001375 6B 05            [ 1] 3412 	ld (RELOP,sp),a 
      001377 A4 30            [ 1] 3413 	and a,#TK_GRP_MASK
      001379 A1 30            [ 1] 3414 	cp a,#TK_GRP_RELOP 
      00137B 27 07            [ 1] 3415 	jreq 2$
      00137D 7B 05            [ 1] 3416 	ld a,(RELOP,sp)
      00137F CD 0F E8         [ 4] 3417 	call unget_token  
      001382 20 2F            [ 2] 3418 	jra 9$
      001384                       3419 2$:	; expect another expression or error 
      001384 CD 13 1F         [ 4] 3420 	call expression
      001387 A1 04            [ 1] 3421 	cp a,#TK_INTGR 
      001389 27 03            [ 1] 3422 	jreq 3$
      00138B CC 07 95         [ 2] 3423 	jp syntax_error 
      00138E 1F 01            [ 2] 3424 3$:	ldw (N1,sp),x 
      001390 CD 10 E4         [ 4] 3425 	call substract
      001393 26 06            [ 1] 3426 	jrne 4$
      001395 35 02 00 09      [ 1] 3427 	mov acc8,#2 ; n1==n2
      001399 20 0C            [ 2] 3428 	jra 6$ 
      00139B                       3429 4$: 
      00139B 2C 06            [ 1] 3430 	jrsgt 5$  
      00139D 35 04 00 09      [ 1] 3431 	mov acc8,#4 ; n1<2 
      0013A1 20 04            [ 2] 3432 	jra 6$
      0013A3                       3433 5$:
      0013A3 35 01 00 09      [ 1] 3434 	mov acc8,#1 ; n1>n2 
      0013A7                       3435 6$:
      0013A7 5F               [ 1] 3436 	clrw x 
      0013A8 C6 00 09         [ 1] 3437 	ld a, acc8  
      0013AB 14 05            [ 1] 3438 	and a,(RELOP,sp)
      0013AD 4D               [ 1] 3439 	tnz a 
      0013AE 27 05            [ 1] 3440 	jreq 10$
      0013B0 5C               [ 2] 3441 	incw x 
      0013B1                       3442 7$:	 
      0013B1 20 02            [ 2] 3443 	jra 10$  	
      0013B3 1E 03            [ 2] 3444 9$: ldw x,(N2,sp)
      0013B5                       3445 10$:
      0013B5 A6 04            [ 1] 3446 	ld a,#TK_INTGR
      0013B7                       3447 rel_exit: 	 
      0013B7                       3448 	_drop VSIZE
      0013B7 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013B9 81               [ 4] 3449 	ret 
                                   3450 
                                   3451 ;--------------------------------
                                   3452 ; BASIC: SHOW 
                                   3453 ;  show content of dstack,cstack
                                   3454 ;--------------------------------
      0013BA                       3455 show:
      0013BA C6 00 06         [ 1] 3456 	ld a,base 
      0013BD 88               [ 1] 3457 	push a 
      0013BE CD 10 7C         [ 4] 3458 	call dots
      0013C1 CD 10 AF         [ 4] 3459 	call dotr 
      0013C4 84               [ 1] 3460 	pop a 
      0013C5 C7 00 06         [ 1] 3461 	ld base,a 
      0013C8 4F               [ 1] 3462 	clr a 
      0013C9 81               [ 4] 3463 	ret
                                   3464 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3465 ;--------------------------------------------
                                   3466 ; BASIC: HEX 
                                   3467 ; select hexadecimal base for integer print
                                   3468 ;---------------------------------------------
      0013CA                       3469 hex_base:
      0013CA 35 10 00 06      [ 1] 3470 	mov base,#16 
      0013CE 81               [ 4] 3471 	ret 
                                   3472 
                                   3473 ;--------------------------------------------
                                   3474 ; BASIC: DEC 
                                   3475 ; select decimal base for integer print
                                   3476 ;---------------------------------------------
      0013CF                       3477 dec_base:
      0013CF 35 0A 00 06      [ 1] 3478 	mov base,#10
      0013D3 81               [ 4] 3479 	ret 
                                   3480 
                                   3481 ;------------------------
                                   3482 ; BASIC: SIZE 
                                   3483 ; return free size in text area
                                   3484 ; output:
                                   3485 ;   A 		TK_INTGR
                                   3486 ;   X 	    size integer
                                   3487 ;--------------------------
      0013D4                       3488 size:
      0013D4 AE 16 C8         [ 2] 3489 	ldw x,#tib 
      0013D7 72 B0 00 1C      [ 2] 3490 	subw x,txtend 
      0013DB A6 04            [ 1] 3491 	ld a,#TK_INTGR
      0013DD 81               [ 4] 3492 	ret 
                                   3493 
                                   3494 
                                   3495 ;------------------------
                                   3496 ; BASIC: UBOUND  
                                   3497 ; return array variable size 
                                   3498 ; output:
                                   3499 ;   A 		TK_INTGR
                                   3500 ;   X 	    array size 
                                   3501 ;--------------------------
      0013DE                       3502 ubound:
      0013DE AE 16 C8         [ 2] 3503 	ldw x,#tib
      0013E1 72 B0 00 1C      [ 2] 3504 	subw x,txtend 
      0013E5 90 CE 00 04      [ 2] 3505 	ldw y,basicptr 
      0013E9 90 C3 00 1C      [ 2] 3506 	cpw y,txtend 
      0013ED 25 0A            [ 1] 3507 	jrult 1$
      0013EF 3B 00 03         [ 1] 3508 	push count 
      0013F2 4B 00            [ 1] 3509 	push #0 
      0013F4 72 F0 01         [ 2] 3510 	subw x,(1,sp)
      0013F7                       3511 	_drop 2 
      0013F7 5B 02            [ 2]    1     addw sp,#2 
      0013F9 54               [ 2] 3512 1$:	srlw x 
      0013FA CF 00 1F         [ 2] 3513 	ldw array_size,x
      0013FD A6 04            [ 1] 3514 	ld a,#TK_INTGR
      0013FF 81               [ 4] 3515 	ret 
                                   3516 
                                   3517 ;-----------------------------
                                   3518 ; BASIC: LET var=expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3519 ; variable assignement 
                                   3520 ; output:
                                   3521 ;   A 		TK_NONE 
                                   3522 ;-----------------------------
      001400                       3523 let:
      001400 CD 08 5C         [ 4] 3524 	call next_token 
      001403 A1 05            [ 1] 3525 	cp a,#TK_VAR 
      001405 27 03            [ 1] 3526 	jreq let02
      001407 CC 07 95         [ 2] 3527 	jp syntax_error
      00140A                       3528 let02:
      00140A CD 0F EE         [ 4] 3529 	call dpush 
      00140D CD 08 5C         [ 4] 3530 	call next_token 
      001410 A1 32            [ 1] 3531 	cp a,#TK_EQUAL
      001412 27 03            [ 1] 3532 	jreq 1$
      001414 CC 07 95         [ 2] 3533 	jp syntax_error
      001417                       3534 1$:	
      001417 CD 13 63         [ 4] 3535 	call relation   
      00141A A1 04            [ 1] 3536 	cp a,#TK_INTGR 
      00141C 27 03            [ 1] 3537 	jreq 2$
      00141E CC 07 95         [ 2] 3538 	jp syntax_error
      001421                       3539 2$:	
      001421 90 93            [ 1] 3540 	ldw y,x 
      001423 CD 0F FB         [ 4] 3541 	call dpop  
      001426 FF               [ 2] 3542 	ldw (x),y   
      001427 81               [ 4] 3543 	ret 
                                   3544 
                                   3545 ;----------------------------
                                   3546 ; BASIC: LIST [[start][,end]]
                                   3547 ; list program lines 
                                   3548 ; form start to end 
                                   3549 ; if empty argument list then 
                                   3550 ; list all.
                                   3551 ;----------------------------
                           000001  3552 	FIRST=1
                           000003  3553 	LAST=3 
                           000005  3554 	LN_PTR=5
                           000006  3555 	VSIZE=6 
      001428                       3556 list:
      001428                       3557 	_vars VSIZE
      001428 52 06            [ 2]    1     sub sp,#VSIZE 
      00142A CE 00 1A         [ 2] 3558 	ldw x,txtbgn 
      00142D C3 00 1C         [ 2] 3559 	cpw x,txtend 
      001430 2B 03            [ 1] 3560 	jrmi 1$
      001432 CC 14 A8         [ 2] 3561 	jp list_exit ; nothing to list 
      001435 1F 05            [ 2] 3562 1$:	ldw (LN_PTR,sp),x 
      001437 FE               [ 2] 3563 	ldw x,(x) 
      001438 1F 01            [ 2] 3564 	ldw (FIRST,sp),x ; list from first line 
      00143A AE 7F FF         [ 2] 3565 	ldw x,#0x7fff ; biggest line number 
      00143D 1F 03            [ 2] 3566 	ldw (LAST,sp),x 
      00143F CD 12 1B         [ 4] 3567 	call arg_list
      001442 4D               [ 1] 3568 	tnz a
      001443 27 3F            [ 1] 3569 	jreq list_start 
      001445 A1 02            [ 1] 3570 	cp a,#2 
      001447 27 07            [ 1] 3571 	jreq 4$
      001449 A1 01            [ 1] 3572 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00144B 27 06            [ 1] 3573 	jreq first_line 
      00144D CC 07 95         [ 2] 3574 	jp syntax_error 
      001450 CD 10 08         [ 4] 3575 4$:	call dswap
      001453                       3576 first_line:
      001453 CD 0F FB         [ 4] 3577 	call dpop 
      001456 1F 01            [ 2] 3578 	ldw (FIRST,sp),x 
      001458 A1 01            [ 1] 3579 	cp a,#1 
      00145A 27 05            [ 1] 3580 	jreq lines_skip 	
      00145C                       3581 last_line:
      00145C CD 0F FB         [ 4] 3582 	call dpop 
      00145F 1F 03            [ 2] 3583 	ldw (LAST,sp),x 
      001461                       3584 lines_skip:
      001461 CE 00 1A         [ 2] 3585 	ldw x,txtbgn
      001464 1F 05            [ 2] 3586 2$:	ldw (LN_PTR,sp),x 
      001466 C3 00 1C         [ 2] 3587 	cpw x,txtend 
      001469 2A 3D            [ 1] 3588 	jrpl list_exit 
      00146B FE               [ 2] 3589 	ldw x,(x) ;line# 
      00146C 13 01            [ 2] 3590 	cpw x,(FIRST,sp)
      00146E 2A 14            [ 1] 3591 	jrpl list_start 
      001470 1E 05            [ 2] 3592 	ldw x,(LN_PTR,sp) 
      001472 1C 00 02         [ 2] 3593 	addw x,#2 
      001475 F6               [ 1] 3594 	ld a,(x)
      001476 5C               [ 2] 3595 	incw x 
      001477 C7 00 09         [ 1] 3596 	ld acc8,a 
      00147A 72 5F 00 08      [ 1] 3597 	clr acc16 
      00147E 72 BB 00 08      [ 2] 3598 	addw x,acc16
      001482 20 E0            [ 2] 3599 	jra 2$ 
                                   3600 ; print loop
      001484                       3601 list_start:
      001484 1E 05            [ 2] 3602 	ldw x,(LN_PTR,sp)
      001486                       3603 3$:	
      001486 CD 14 FB         [ 4] 3604 	call prt_basic_line
      001489 1E 05            [ 2] 3605 	ldw x,(LN_PTR,sp)
      00148B E6 02            [ 1] 3606 	ld a,(2,x)
      00148D C7 00 09         [ 1] 3607 	ld acc8,a 
      001490 72 5F 00 08      [ 1] 3608 	clr acc16 
      001494 72 BB 00 08      [ 2] 3609 	addw x,acc16
      001498 C3 00 1C         [ 2] 3610 	cpw x,txtend 
      00149B 2A 0B            [ 1] 3611 	jrpl list_exit
      00149D 1F 05            [ 2] 3612 	ldw (LN_PTR,sp),x
      00149F FE               [ 2] 3613 	ldw x,(x)
      0014A0 13 03            [ 2] 3614 	cpw x,(LAST,sp)  
      0014A2 2C 04            [ 1] 3615 	jrsgt list_exit 
      0014A4 1E 05            [ 2] 3616 	ldw x,(LN_PTR,sp)
      0014A6 20 DE            [ 2] 3617 	jra 3$
      0014A8                       3618 list_exit:
      0014A8                       3619 	_drop VSIZE 
      0014A8 5B 06            [ 2]    1     addw sp,#VSIZE 
      0014AA 81               [ 4] 3620 	ret
                                   3621 
                                   3622 ;-------------------------
                                   3623 ; print counted string 
                                   3624 ; input:
                                   3625 ;   X 		address of string
                                   3626 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014AB                       3627 prt_cmd_name:
      0014AB F6               [ 1] 3628 	ld a,(x)
      0014AC 5C               [ 2] 3629 	incw x
      0014AD A4 0F            [ 1] 3630 	and a,#15  
      0014AF 88               [ 1] 3631 	push a 
      0014B0 0D 01            [ 1] 3632 1$: tnz (1,sp) 
      0014B2 27 09            [ 1] 3633 	jreq 9$
      0014B4 F6               [ 1] 3634 	ld a,(x)
      0014B5 CD 01 CB         [ 4] 3635 	call putc 
      0014B8 5C               [ 2] 3636 	incw x
      0014B9 0A 01            [ 1] 3637 	dec (1,sp)	 
      0014BB 20 F3            [ 2] 3638 	jra 1$
      0014BD 84               [ 1] 3639 9$: pop a 
      0014BE 81               [ 4] 3640 	ret	
                                   3641 
                                   3642 ;--------------------------
                                   3643 ; print TK_QSTR
                                   3644 ; converting control character
                                   3645 ; to backslash sequence
                                   3646 ; input:
                                   3647 ;   X        char *
                                   3648 ;-----------------------------
      0014BF                       3649 prt_quote:
      0014BF A6 22            [ 1] 3650 	ld a,#'"
      0014C1 CD 01 CB         [ 4] 3651 	call putc 
      0014C4 F6               [ 1] 3652 1$:	ld a,(x)
      0014C5 27 2D            [ 1] 3653 	jreq 9$
      0014C7 5C               [ 2] 3654 	incw x 
      0014C8 A1 20            [ 1] 3655 	cp a,#SPACE 
      0014CA 25 0C            [ 1] 3656 	jrult 3$
      0014CC CD 01 CB         [ 4] 3657 	call putc
      0014CF A1 5C            [ 1] 3658 	cp a,#'\ 
      0014D1 26 F1            [ 1] 3659 	jrne 1$ 
      0014D3                       3660 2$:
      0014D3 CD 01 CB         [ 4] 3661 	call putc 
      0014D6 20 EC            [ 2] 3662 	jra 1$
      0014D8 88               [ 1] 3663 3$: push a 
      0014D9 A6 5C            [ 1] 3664 	ld a,#'\
      0014DB CD 01 CB         [ 4] 3665 	call putc 
      0014DE 84               [ 1] 3666 	pop a 
      0014DF A0 07            [ 1] 3667 	sub a,#7
      0014E1 C7 00 09         [ 1] 3668 	ld acc8,a 
      0014E4 72 5F 00 08      [ 1] 3669 	clr acc16
      0014E8 90 AE 0C B7      [ 2] 3670 	ldw y,#escaped 
      0014EC 72 B9 00 08      [ 2] 3671 	addw y,acc16 
      0014F0 90 F6            [ 1] 3672 	ld a,(y)
      0014F2 20 DF            [ 2] 3673 	jra 2$
      0014F4 A6 22            [ 1] 3674 9$: ld a,#'"
      0014F6 CD 01 CB         [ 4] 3675 	call putc 
      0014F9 5C               [ 2] 3676 	incw x 
      0014FA 81               [ 4] 3677 	ret
                                   3678 
                                   3679 
                                   3680 ;--------------------------
                                   3681 ; decompile line from token list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3682 ; input:
                                   3683 ;   X 		pointer at line
                                   3684 ; output:
                                   3685 ;   none 
                                   3686 ;--------------------------	
                           000001  3687 	BASE_SAV=1
                           000002  3688 	WIDTH_SAV=2
                           000003  3689 	XSAVE=3
                           000005  3690 	LLEN=5
                           000005  3691 	VSIZE=5 
      0014FB                       3692 prt_basic_line:
      0014FB                       3693 	_vars VSIZE 
      0014FB 52 05            [ 2]    1     sub sp,#VSIZE 
      0014FD C6 00 06         [ 1] 3694 	ld a,base
      001500 6B 01            [ 1] 3695 	ld (BASE_SAV,sp),a  
      001502 C6 00 22         [ 1] 3696 	ld a,tab_width 
      001505 6B 02            [ 1] 3697 	ld (WIDTH_SAV,sp),a 
      001507 CF 00 13         [ 2] 3698 	ldw ptr16,x
      00150A FE               [ 2] 3699 	ldw x,(x)
      00150B 35 0A 00 06      [ 1] 3700 	mov base,#10
      00150F 35 05 00 22      [ 1] 3701 	mov tab_width,#5
      001513 CD 09 F5         [ 4] 3702 	call print_int ; print line number 
      001516 A6 20            [ 1] 3703 	ld a,#SPACE 
      001518 CD 01 CB         [ 4] 3704 	call putc 
      00151B 72 5F 00 22      [ 1] 3705 	clr tab_width
      00151F AE 00 02         [ 2] 3706 	ldw x,#2
      001522 72 D6 00 13      [ 4] 3707 	ld a,([ptr16],x)
      001526 6B 05            [ 1] 3708 	ld (LLEN,sp),a 
      001528 5C               [ 2] 3709 	incw x
      001529 9F               [ 1] 3710 1$:	ld a,xl 
      00152A 11 05            [ 1] 3711 	cp a,(LLEN,sp)
      00152C 2B 03            [ 1] 3712 	jrmi 20$
      00152E CC 16 38         [ 2] 3713 	jp 90$
      001531                       3714 20$:	 
      001531 72 D6 00 13      [ 4] 3715 	ld a,([ptr16],x)
      001535 5C               [ 2] 3716 	incw x 
      001536 1F 03            [ 2] 3717 	ldw (XSAVE,sp),x 
      001538 A1 06            [ 1] 3718 	cp a,#TK_CMD 
      00153A 25 44            [ 1] 3719 	jrult 5$
      00153C A1 09            [ 1] 3720 	cp a,#TK_CONST 
      00153E 22 2F            [ 1] 3721 	jrugt 4$
      001540                       3722 2$:	
      001540 72 DE 00 13      [ 5] 3723 	ldw x,([ptr16],x)
      001544 A3 17 71         [ 2] 3724 	cpw x,#rem 
      001547 26 14            [ 1] 3725 	jrne 3$
      001549 A6 27            [ 1] 3726 	ld a,#''
      00154B CD 01 CB         [ 4] 3727 	call putc 
      00154E 1E 03            [ 2] 3728 	ldw x,(XSAVE,sp)
      001550 1C 00 02         [ 2] 3729 	addw x,#2
      001553 72 BB 00 13      [ 2] 3730 	addw x,ptr16  
      001557 CD 01 DD         [ 4] 3731 	call puts 
      00155A CC 16 38         [ 2] 3732 	jp 90$ 
      00155D CD 11 87         [ 4] 3733 3$:	call cmd_name
      001560 CD 14 AB         [ 4] 3734 	call prt_cmd_name
      001563 A6 20            [ 1] 3735 	ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001565 CD 01 CB         [ 4] 3736 	call putc 
      001568 1E 03            [ 2] 3737 	ldw x,(XSAVE,sp)
      00156A 1C 00 02         [ 2] 3738 	addw x,#2
      00156D 20 BA            [ 2] 3739 	jra 1$
      00156F A1 0A            [ 1] 3740 4$: cp a,#TK_QSTR 
      001571 26 0D            [ 1] 3741 	jrne 5$
      001573 72 BB 00 13      [ 2] 3742 	addw x,ptr16
      001577 CD 14 BF         [ 4] 3743 	call prt_quote 
      00157A 72 B0 00 13      [ 2] 3744 	subw x,ptr16  
      00157E 20 A9            [ 2] 3745 	jra 1$
      001580 A1 05            [ 1] 3746 5$:	cp a,#TK_VAR
      001582 26 1A            [ 1] 3747 	jrne 6$ 
      001584 72 DE 00 13      [ 5] 3748 	ldw x,([ptr16],x)
      001588 1D 00 23         [ 2] 3749 	subw x,#vars 
      00158B 9F               [ 1] 3750 	ld a,xl
      00158C 44               [ 1] 3751 	srl a 
      00158D AB 41            [ 1] 3752 	add a,#'A 
      00158F CD 01 CB         [ 4] 3753 	call putc 
      001592 A6 20            [ 1] 3754 	ld a,#SPACE 
      001594 CD 01 CB         [ 4] 3755 	call putc 
      001597 1E 03            [ 2] 3756 	ldw x,(XSAVE,sp)
      001599 1C 00 02         [ 2] 3757 	addw x,#2 
      00159C 20 8B            [ 2] 3758 	jra 1$ 
      00159E A1 02            [ 1] 3759 6$: cp a,#TK_ARRAY 
      0015A0 26 0A            [ 1] 3760 	jrne 7$
      0015A2 A6 40            [ 1] 3761 	ld a,#'@ 
      0015A4 CD 01 CB         [ 4] 3762 	call putc 
      0015A7 1E 03            [ 2] 3763 	ldw x,(XSAVE,sp)
      0015A9 CC 15 29         [ 2] 3764 	jp 1$ 
      0015AC A1 04            [ 1] 3765 7$: cp a,#TK_INTGR 
      0015AE 26 14            [ 1] 3766 	jrne 8$
      0015B0 72 DE 00 13      [ 5] 3767 	ldw x,([ptr16],x)
      0015B4 CD 09 F5         [ 4] 3768 	call print_int
      0015B7 A6 20            [ 1] 3769 	ld a,#SPACE 
      0015B9 CD 01 CB         [ 4] 3770 	call putc 
      0015BC 1E 03            [ 2] 3771 	ldw x,(XSAVE,sp)
      0015BE 1C 00 02         [ 2] 3772 	addw x,#2 
      0015C1 CC 15 29         [ 2] 3773 	jp 1$
      0015C4 A1 31            [ 1] 3774 8$: cp a,#TK_GT 
      0015C6 2B 1A            [ 1] 3775 	jrmi 9$
      0015C8 A1 35            [ 1] 3776 	cp a,#TK_NE 
      0015CA 22 16            [ 1] 3777 	jrugt 9$
      0015CC A0 31            [ 1] 3778 	sub a,#TK_GT  
      0015CE 48               [ 1] 3779 	sll a 
      0015CF 90 5F            [ 1] 3780 	clrw y 
      0015D1 90 97            [ 1] 3781 	ld yl,a 
      0015D3 72 A9 16 51      [ 2] 3782 	addw y,#relop_str 
      0015D7 90 FE            [ 2] 3783 	ldw y,(y)
      0015D9 93               [ 1] 3784 	ldw x,y 
      0015DA CD 01 DD         [ 4] 3785 	call puts 
      0015DD 1E 03            [ 2] 3786 	ldw x,(XSAVE,sp)
      0015DF CC 15 29         [ 2] 3787 	jp 1$
      0015E2 A1 10            [ 1] 3788 9$: cp a,#TK_PLUS 
      0015E4 26 04            [ 1] 3789 	jrne 10$
      0015E6 A6 2B            [ 1] 3790 	ld a,#'+
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015E8 20 46            [ 2] 3791 	jra 80$ 
      0015EA A1 11            [ 1] 3792 10$: cp a,#TK_MINUS
      0015EC 26 04            [ 1] 3793 	jrne 11$
      0015EE A6 2D            [ 1] 3794 	ld a,#'-
      0015F0 20 3E            [ 2] 3795 	jra 80$
      0015F2 A1 20            [ 1] 3796 11$: cp a,#TK_MULT 
      0015F4 2B 0E            [ 1] 3797 	jrmi 12$
      0015F6 A1 22            [ 1] 3798 	cp a,#TK_MOD 
      0015F8 22 0A            [ 1] 3799 	jrugt 12$
      0015FA A0 20            [ 1] 3800 	sub a,#0x20
      0015FC 5F               [ 1] 3801 	clrw x 
      0015FD 97               [ 1] 3802 	ld xl,a 
      0015FE 1C 16 4E         [ 2] 3803 	addw x,#mul_char 
      001601 F6               [ 1] 3804 	ld a,(x)
      001602 20 2C            [ 2] 3805 	jra 80$ 
      001604 A1 0B            [ 1] 3806 12$: cp a,#TK_LPAREN 
      001606 2B 0E            [ 1] 3807 	jrmi 13$
      001608 A1 0E            [ 1] 3808 	cp a,#TK_SHARP 
      00160A 22 0A            [ 1] 3809 	jrugt 13$
      00160C A0 0B            [ 1] 3810 	sub a,#TK_LPAREN
      00160E 5F               [ 1] 3811 	clrw x 
      00160F 97               [ 1] 3812 	ld xl,a 
      001610 1C 16 4A         [ 2] 3813 	addw x,#single_char 
      001613 F6               [ 1] 3814 	ld a,(x)
      001614 20 1A            [ 2] 3815 	jra 80$
      001616 A1 03            [ 1] 3816 13$: cp a,#TK_CHAR 
      001618 26 14            [ 1] 3817 	jrne 14$
      00161A A6 5C            [ 1] 3818 	ld a,#'\
      00161C CD 01 CB         [ 4] 3819 	call putc 
      00161F 1E 03            [ 2] 3820 	ldw x,(XSAVE,sp)
      001621 72 D6 00 13      [ 4] 3821 	ld a,([ptr16],x)
      001625 5C               [ 2] 3822 	incw x 
      001626 1F 03            [ 2] 3823 	ldw (XSAVE,sp),x 
      001628 CD 01 CB         [ 4] 3824 	call putc 
      00162B CC 15 29         [ 2] 3825 	jp 1$ 
      00162E A6 3A            [ 1] 3826 14$: ld a,#':
      001630 CD 01 CB         [ 4] 3827 80$: call putc 
      001633 1E 03            [ 2] 3828 	ldw x,(XSAVE,sp)
      001635 CC 15 29         [ 2] 3829 	jp 1$ 
      001638                       3830 90$: 
      001638 A6 0D            [ 1] 3831 	ld a,#CR 
      00163A CD 01 CB         [ 4] 3832 	call putc
      00163D 7B 02            [ 1] 3833 	ld a,(WIDTH_SAV,sp) 
      00163F C7 00 22         [ 1] 3834 	ld tab_width,a 
      001642 7B 01            [ 1] 3835 	ld a,(BASE_SAV,sp) 
      001644 C7 00 06         [ 1] 3836 	ld base,a
      001647                       3837 	_drop VSIZE 
      001647 5B 05            [ 2]    1     addw sp,#VSIZE 
      001649 81               [ 4] 3838 	ret 	
      00164A 28 29 2C 23           3839 single_char: .byte '(',')',',','#'
      00164E 2A 2F 25              3840 mul_char: .byte '*','/','%'
      001651 16 5D 16 5F 16 61 16  3841 relop_str: .word gt,equal,ge,lt,le,ne 
             64 16 66 16 69
      00165D 3E 00                 3842 gt: .asciz ">"
      00165F 3D 00                 3843 equal: .asciz "="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001661 3E 3D 00              3844 ge: .asciz ">="
      001664 3C 00                 3845 lt: .asciz "<"
      001666 3C 3D 00              3846 le: .asciz "<="
      001669 3C 3E 00              3847 ne:  .asciz "<>"
                                   3848 
                                   3849 
                                   3850 ;---------------------------------
                                   3851 ; BASIC: PRINT|? arg_list 
                                   3852 ; print values from argument list
                                   3853 ;----------------------------------
                           000001  3854 	COMMA=1
                           000001  3855 	VSIZE=1
      00166C                       3856 print:
      00166C 4B 00            [ 1] 3857 push #0 ; local variable COMMA 
      00166E                       3858 reset_comma:
      00166E 0F 01            [ 1] 3859 	clr (COMMA,sp)
      001670                       3860 prt_loop:
      001670 CD 13 63         [ 4] 3861 	call relation 
      001673 A1 01            [ 1] 3862 	cp a,#TK_COLON 
      001675 27 5A            [ 1] 3863 	jreq print_exit   
      001677 A1 04            [ 1] 3864 	cp a,#TK_INTGR 
      001679 26 05            [ 1] 3865 	jrne 0$ 
      00167B CD 09 F5         [ 4] 3866 	call print_int 
      00167E 20 EE            [ 2] 3867 	jra reset_comma
      001680                       3868 0$: 	
      001680 CD 08 5C         [ 4] 3869 	call next_token
      001683 A1 00            [ 1] 3870 	cp a,#TK_NONE 
      001685 27 4A            [ 1] 3871 	jreq print_exit 
      001687 A1 0A            [ 1] 3872 1$:	cp a,#TK_QSTR
      001689 26 0E            [ 1] 3873 	jrne 2$   
      00168B CD 01 DD         [ 4] 3874 	call puts
      00168E 5C               [ 2] 3875 	incw x 
      00168F 72 B0 00 04      [ 2] 3876 	subw x,basicptr 
      001693 9F               [ 1] 3877 	ld a,xl 
      001694 C7 00 01         [ 1] 3878 	ld in,a  
      001697 20 D5            [ 2] 3879 	jra reset_comma
      001699 A1 03            [ 1] 3880 2$: cp a,#TK_CHAR 
      00169B 26 06            [ 1] 3881 	jrne 3$
      00169D 9F               [ 1] 3882 	ld a,xl 
      00169E CD 01 CB         [ 4] 3883 	call putc 
      0016A1 20 CB            [ 2] 3884 	jra reset_comma 
      0016A3                       3885 3$: 	
      0016A3 A1 08            [ 1] 3886 	cp a,#TK_CFUNC 
      0016A5 26 07            [ 1] 3887 	jrne 4$ 
      0016A7 FD               [ 4] 3888 	call (x)
      0016A8 9F               [ 1] 3889 	ld a,xl 
      0016A9 CD 01 CB         [ 4] 3890 	call putc
      0016AC 20 C0            [ 2] 3891 	jra reset_comma 
      0016AE                       3892 4$: 
      0016AE A1 0D            [ 1] 3893 	cp a,#TK_COMMA 
      0016B0 26 05            [ 1] 3894 	jrne 5$
      0016B2 03 01            [ 1] 3895 	cpl (COMMA,sp) 
      0016B4 CC 16 70         [ 2] 3896 	jp prt_loop   
      0016B7                       3897 5$: 
      0016B7 A1 0E            [ 1] 3898 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0016B9 26 13            [ 1] 3899 	jrne 7$
      0016BB CD 08 5C         [ 4] 3900 	call next_token
      0016BE A1 04            [ 1] 3901 	cp a,#TK_INTGR 
      0016C0 27 03            [ 1] 3902 	jreq 6$
      0016C2 CC 07 95         [ 2] 3903 	jp syntax_error 
      0016C5                       3904 6$:
      0016C5 9F               [ 1] 3905 	ld a,xl 
      0016C6 A4 0F            [ 1] 3906 	and a,#15 
      0016C8 C7 00 22         [ 1] 3907 	ld tab_width,a 
      0016CB CC 16 6E         [ 2] 3908 	jp reset_comma 
      0016CE                       3909 7$:	
      0016CE CD 0F E8         [ 4] 3910 	call unget_token
      0016D1                       3911 print_exit:
      0016D1 0D 01            [ 1] 3912 	tnz (COMMA,sp)
      0016D3 26 05            [ 1] 3913 	jrne 9$
      0016D5 A6 0D            [ 1] 3914 	ld a,#CR 
      0016D7 CD 01 CB         [ 4] 3915     call putc 
      0016DA                       3916 9$:	_drop VSIZE 
      0016DA 5B 01            [ 2]    1     addw sp,#VSIZE 
      0016DC 81               [ 4] 3917 	ret 
                                   3918 
                                   3919 ;----------------------
                                   3920 ; 'save_context' and
                                   3921 ; 'rest_context' must be 
                                   3922 ; called at the same 
                                   3923 ; call stack depth 
                                   3924 ; i.e. SP must have the 
                                   3925 ; save value at  
                                   3926 ; entry point of both 
                                   3927 ; routine. 
                                   3928 ;---------------------
                           000006  3929 	CTXT_SIZE=6 ; size of saved data 
                                   3930 ;--------------------
                                   3931 ; save current BASIC
                                   3932 ; interpreter context 
                                   3933 ; on cstack 
                                   3934 ;--------------------
      0016DD                       3935 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0016DD                       3936 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      0016DD                       3937 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      0016DD                       3938 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      0016DD                       3939 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      0016DD                       3940 save_context:
      0016DD CE 00 04         [ 2] 3941 	ldw x,basicptr 
      0016E0 1F 03            [ 2] 3942 	ldw (BPTR,sp),x
      0016E2 C6 00 01         [ 1] 3943 	ld a,in 
      0016E5 6B 07            [ 1] 3944 	ld (IN,sp),a
      0016E7 C6 00 03         [ 1] 3945 	ld a,count 
      0016EA 6B 08            [ 1] 3946 	ld (CNT,sp),a  
      0016EC 81               [ 4] 3947 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3948 
                                   3949 ;-----------------------
                                   3950 ; restore previously saved 
                                   3951 ; BASIC interpreter context 
                                   3952 ; from cstack 
                                   3953 ;-------------------------
      0016ED                       3954 rest_context:
      0016ED 1E 03            [ 2] 3955 	ldw x,(BPTR,sp)
      0016EF CF 00 04         [ 2] 3956 	ldw basicptr,x 
      0016F2 7B 07            [ 1] 3957 	ld a,(IN,sp)
      0016F4 C7 00 01         [ 1] 3958 	ld in,a
      0016F7 7B 08            [ 1] 3959 	ld a,(CNT,sp)
      0016F9 C7 00 03         [ 1] 3960 	ld count,a  
      0016FC 81               [ 4] 3961 	ret
                                   3962 
                                   3963 ;------------------------------------------
                                   3964 ; BASIC: INPUT [string],var[,[string],var]
                                   3965 ; input value in variables 
                                   3966 ; [string] optionally can be used as prompt 
                                   3967 ;-----------------------------------------
                           000001  3968 	CX_BPTR=1
                           000003  3969 	CX_LNO=3
                           000004  3970 	CX_IN=4
                           000005  3971 	CX_CNT=5
                           000006  3972 	SKIP=6
                           000007  3973 	VSIZE=7
      0016FD                       3974 input_var:
      0016FD 72 00 00 21 05   [ 2] 3975 	btjt flags,#FRUN,1$ 
      001702 A6 06            [ 1] 3976 	ld a,#ERR_RUN_ONLY 
      001704 CC 07 97         [ 2] 3977 	jp tb_error 
      001707                       3978 1$:	_vars VSIZE 
      001707 52 07            [ 2]    1     sub sp,#VSIZE 
      001709                       3979 input_loop:
      001709 0F 06            [ 1] 3980 	clr (SKIP,sp)
      00170B CD 08 5C         [ 4] 3981 	call next_token 
      00170E A1 00            [ 1] 3982 	cp a,#TK_NONE 
      001710 27 5C            [ 1] 3983 	jreq input_exit 
      001712 A1 0A            [ 1] 3984 	cp a,#TK_QSTR 
      001714 26 08            [ 1] 3985 	jrne 1$ 
      001716 CD 01 DD         [ 4] 3986 	call puts 
      001719 03 06            [ 1] 3987 	cpl (SKIP,sp)
      00171B CD 08 5C         [ 4] 3988 	call next_token 
      00171E A1 05            [ 1] 3989 1$: cp a,#TK_VAR  
      001720 27 03            [ 1] 3990 	jreq 2$ 
      001722 CC 07 95         [ 2] 3991 	jp syntax_error
      001725 CD 0F EE         [ 4] 3992 2$:	call dpush 
      001728 0D 06            [ 1] 3993 	tnz (SKIP,sp)
      00172A 26 0F            [ 1] 3994 	jrne 21$ 
      00172C A6 3A            [ 1] 3995 	ld a,#':
      00172E C7 17 19         [ 1] 3996 	ld pad+1,a 
      001731 72 5F 17 1A      [ 1] 3997 	clr pad+2
      001735 AE 17 18         [ 2] 3998 	ldw x,#pad 
      001738 CD 01 DD         [ 4] 3999 	call puts   
      00173B                       4000 21$:
      00173B CD 16 DD         [ 4] 4001 	call save_context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00173E AE 16 C8         [ 2] 4002 	ldw x,#tib 
      001741 CF 00 04         [ 2] 4003 	ldw basicptr,x  
      001744 72 5F 00 03      [ 1] 4004 	clr count  
      001748 CD 0A E3         [ 4] 4005 	call readln 
      00174B 72 5F 00 01      [ 1] 4006 	clr in 
      00174F CD 13 63         [ 4] 4007 	call relation 
      001752 A1 04            [ 1] 4008 	cp a,#TK_INTGR
      001754 27 03            [ 1] 4009 	jreq 3$ 
      001756 CC 07 95         [ 2] 4010 	jp syntax_error
      001759 CD 0F EE         [ 4] 4011 3$: call dpush 
      00175C CD 10 55         [ 4] 4012 	call store 
      00175F CD 16 ED         [ 4] 4013 	call rest_context
      001762 CD 08 5C         [ 4] 4014 	call next_token 
      001765 A1 0D            [ 1] 4015 	cp a,#TK_COMMA 
      001767 26 02            [ 1] 4016 	jrne 4$
      001769 20 9E            [ 2] 4017 	jra input_loop 
      00176B CD 0F E8         [ 4] 4018 4$:	call unget_token 
      00176E                       4019 input_exit:
      00176E                       4020 	_drop VSIZE 
      00176E 5B 07            [ 2]    1     addw sp,#VSIZE 
      001770 81               [ 4] 4021 	ret 
                                   4022 
                                   4023 
                                   4024 ;---------------------
                                   4025 ; BASIC: REMARK | ' 
                                   4026 ; skip comment to end of line 
                                   4027 ;---------------------- 
      001771                       4028 rem:
      001771 55 00 01 00 03   [ 1] 4029  	mov count,in 
      001776 81               [ 4] 4030 	ret 
                                   4031 
                                   4032 ;---------------------
                                   4033 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   4034 ; read in loop 'addr'  
                                   4035 ; apply & 'mask' to value 
                                   4036 ; loop while result==0.  
                                   4037 ; if 'xor_mask' given 
                                   4038 ; apply ^ in second  
                                   4039 ; loop while result==0 
                                   4040 ;---------------------
                           000001  4041 	XMASK=1 
                           000002  4042 	MASK=2
                           000003  4043 	ADDR=3
                           000004  4044 	VSIZE=4
      001777                       4045 wait: 
      001777                       4046 	_vars VSIZE
      001777 52 04            [ 2]    1     sub sp,#VSIZE 
      001779 0F 01            [ 1] 4047 	clr (XMASK,sp) 
      00177B CD 12 1B         [ 4] 4048 	call arg_list 
      00177E A1 02            [ 1] 4049 	cp a,#2
      001780 24 03            [ 1] 4050 	jruge 0$
      001782 CC 07 95         [ 2] 4051 	jp syntax_error 
      001785 A1 03            [ 1] 4052 0$:	cp a,#3
      001787 25 06            [ 1] 4053 	jrult 1$
      001789 CD 0F FB         [ 4] 4054 	call dpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00178C 9F               [ 1] 4055 	ld a,xl
      00178D 6B 01            [ 1] 4056 	ld (XMASK,sp),a 
      00178F CD 0F FB         [ 4] 4057 1$: call dpop ; mask 
      001792 9F               [ 1] 4058 	ld a,xl 
      001793 6B 02            [ 1] 4059 	ld (MASK,sp),a 
      001795 CD 0F FB         [ 4] 4060 	call dpop ; address 
      001798 F6               [ 1] 4061 2$:	ld a,(x)
      001799 14 02            [ 1] 4062 	and a,(MASK,sp)
      00179B 18 01            [ 1] 4063 	xor a,(XMASK,sp)
      00179D 27 F9            [ 1] 4064 	jreq 2$ 
      00179F                       4065 	_drop VSIZE 
      00179F 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017A1 81               [ 4] 4066 	ret 
                                   4067 
                                   4068 ;---------------------
                                   4069 ; BASIC: BSET addr,mask
                                   4070 ; set bits at 'addr' corresponding 
                                   4071 ; to those of 'mask' that are at 1.
                                   4072 ; arguments:
                                   4073 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4074 ;   mask        mask|addr
                                   4075 ; output:
                                   4076 ;	none 
                                   4077 ;--------------------------
      0017A2                       4078 bit_set:
      0017A2 CD 12 1B         [ 4] 4079 	call arg_list 
      0017A5 A1 02            [ 1] 4080 	cp a,#2	 
      0017A7 27 03            [ 1] 4081 	jreq 1$ 
      0017A9 CC 07 95         [ 2] 4082 	jp syntax_error
      0017AC                       4083 1$: 
      0017AC CD 0F FB         [ 4] 4084 	call dpop ; mask 
      0017AF 9F               [ 1] 4085 	ld a,xl 
      0017B0 CD 0F FB         [ 4] 4086 	call dpop ; addr  
      0017B3 FA               [ 1] 4087 	or a,(x)
      0017B4 F7               [ 1] 4088 	ld (x),a
      0017B5 81               [ 4] 4089 	ret 
                                   4090 
                                   4091 ;---------------------
                                   4092 ; BASIC: BRES addr,mask
                                   4093 ; reset bits at 'addr' corresponding 
                                   4094 ; to those of 'mask' that are at 1.
                                   4095 ; arguments:
                                   4096 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4097 ;   mask	    ~mask&*addr  
                                   4098 ; output:
                                   4099 ;	none 
                                   4100 ;--------------------------
      0017B6                       4101 bit_reset:
      0017B6 CD 12 1B         [ 4] 4102 	call arg_list 
      0017B9 A1 02            [ 1] 4103 	cp a,#2  
      0017BB 27 03            [ 1] 4104 	jreq 1$ 
      0017BD CC 07 95         [ 2] 4105 	jp syntax_error
      0017C0                       4106 1$: 
      0017C0 CD 0F FB         [ 4] 4107 	call dpop ; mask 
      0017C3 9F               [ 1] 4108 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0017C4 43               [ 1] 4109 	cpl a 
      0017C5 CD 0F FB         [ 4] 4110 	call dpop ; addr  
      0017C8 F4               [ 1] 4111 	and a,(x)
      0017C9 F7               [ 1] 4112 	ld (x),a 
      0017CA 81               [ 4] 4113 	ret 
                                   4114 
                                   4115 ;---------------------
                                   4116 ; BASIC: BRES addr,mask
                                   4117 ; toggle bits at 'addr' corresponding 
                                   4118 ; to those of 'mask' that are at 1.
                                   4119 ; arguments:
                                   4120 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4121 ;   mask	    mask^*addr  
                                   4122 ; output:
                                   4123 ;	none 
                                   4124 ;--------------------------
      0017CB                       4125 bit_toggle:
      0017CB CD 12 1B         [ 4] 4126 	call arg_list 
      0017CE A1 02            [ 1] 4127 	cp a,#2 
      0017D0 27 03            [ 1] 4128 	jreq 1$ 
      0017D2 CC 07 95         [ 2] 4129 	jp syntax_error
      0017D5 CD 0F FB         [ 4] 4130 1$: call dpop ; mask 
      0017D8 9F               [ 1] 4131 	ld a,xl 
      0017D9 CD 0F FB         [ 4] 4132 	call dpop ; addr  
      0017DC F8               [ 1] 4133 	xor a,(x)
      0017DD F7               [ 1] 4134 	ld (x),a 
      0017DE 81               [ 4] 4135 	ret 
                                   4136 
                                   4137 
                                   4138 ;---------------------
                                   4139 ; BASIC: BTEST(addr,bit)
                                   4140 ; return bit value at 'addr' 
                                   4141 ; bit is in range {0..7}.
                                   4142 ; arguments:
                                   4143 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4144 ;   bit 	    bit position {0..7}  
                                   4145 ; output:
                                   4146 ;	none 
                                   4147 ;--------------------------
      0017DF                       4148 bit_test:
      0017DF CD 12 3F         [ 4] 4149 	call func_args 
      0017E2 A1 02            [ 1] 4150 	cp a,#2
      0017E4 27 03            [ 1] 4151 	jreq 0$
      0017E6 CC 07 95         [ 2] 4152 	jp syntax_error
      0017E9                       4153 0$:	
      0017E9 CD 0F FB         [ 4] 4154 	call dpop 
      0017EC 9F               [ 1] 4155 	ld a,xl 
      0017ED A4 07            [ 1] 4156 	and a,#7
      0017EF 88               [ 1] 4157 	push a 
      0017F0 A6 01            [ 1] 4158 	ld a,#1 
      0017F2 0D 01            [ 1] 4159 1$: tnz (1,sp)
      0017F4 27 05            [ 1] 4160 	jreq 2$
      0017F6 48               [ 1] 4161 	sll a 
      0017F7 0A 01            [ 1] 4162 	dec (1,sp)
      0017F9 20 F7            [ 2] 4163 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0017FB CD 0F FB         [ 4] 4164 2$: call dpop 
      0017FE F4               [ 1] 4165 	and a,(x)
      0017FF 27 02            [ 1] 4166 	jreq 3$
      001801 A6 01            [ 1] 4167 	ld a,#1 
      001803 5F               [ 1] 4168 3$:	clrw x 
      001804 97               [ 1] 4169 	ld xl,a 
      001805 A6 04            [ 1] 4170 	ld a,#TK_INTGR
      001807                       4171 	_drop 1 
      001807 5B 01            [ 2]    1     addw sp,#1 
      001809 81               [ 4] 4172 	ret
                                   4173 
                                   4174 
                                   4175 ;--------------------
                                   4176 ; BASIC: POKE addr,byte
                                   4177 ; put a byte at addr 
                                   4178 ;--------------------
      00180A                       4179 poke:
      00180A CD 12 1B         [ 4] 4180 	call arg_list 
      00180D A1 02            [ 1] 4181 	cp a,#2
      00180F 27 03            [ 1] 4182 	jreq 1$
      001811 CC 07 95         [ 2] 4183 	jp syntax_error
      001814                       4184 1$:	
      001814 CD 0F FB         [ 4] 4185 	call dpop 
      001817 9F               [ 1] 4186     ld a,xl 
      001818 CD 0F FB         [ 4] 4187 	call dpop 
      00181B F7               [ 1] 4188 	ld (x),a 
      00181C 81               [ 4] 4189 	ret 
                                   4190 
                                   4191 ;-----------------------
                                   4192 ; BASIC: PEEK(addr)
                                   4193 ; get the byte at addr 
                                   4194 ; input:
                                   4195 ;	none 
                                   4196 ; output:
                                   4197 ;	X 		value 
                                   4198 ;-----------------------
      00181D                       4199 peek:
      00181D CD 12 3F         [ 4] 4200 	call func_args
      001820 A1 01            [ 1] 4201 	cp a,#1
      001822 27 03            [ 1] 4202 	jreq 1$
      001824 CC 07 95         [ 2] 4203 	jp syntax_error
      001827 CD 0F FB         [ 4] 4204 1$:	call dpop 
      00182A F6               [ 1] 4205 	ld a,(x)
      00182B 5F               [ 1] 4206 	clrw x 
      00182C 97               [ 1] 4207 	ld xl,a 
      00182D A6 04            [ 1] 4208 	ld a,#TK_INTGR
      00182F 81               [ 4] 4209 	ret 
                                   4210 
                                   4211 ;----------------------------
                                   4212 ; BASIC: XPEEK(page,addr)
                                   4213 ; read extended memory byte
                                   4214 ; page in range {0,1,2}
                                   4215 ;----------------------------
      001830                       4216 xpeek:
      001830 CD 12 3F         [ 4] 4217 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001833 A1 02            [ 1] 4218 	cp a,#2 
      001835 27 03            [ 1] 4219 	jreq 1$
      001837 CC 07 95         [ 2] 4220 	jp syntax_error
      00183A                       4221 1$: 
      00183A CD 0F FB         [ 4] 4222 	call dpop 
      00183D CF 00 13         [ 2] 4223 	ldw farptr+1,x 
      001840 CD 0F FB         [ 4] 4224 	call dpop 
      001843 9F               [ 1] 4225 	ld a,xl 
      001844 C7 00 12         [ 1] 4226 	ld farptr,a 
      001847 5F               [ 1] 4227 	clrw x
      001848 92 BC 00 12      [ 5] 4228 	ldf a,[farptr]
      00184C 97               [ 1] 4229 	ld xl,a 
      00184D A6 04            [ 1] 4230 	ld a,#TK_INTGR 
      00184F 81               [ 4] 4231 	ret 
                                   4232 
                                   4233 ;---------------------------
                                   4234 ; BASIC IF expr : instructions
                                   4235 ; evaluate expr and if true 
                                   4236 ; execute instructions on same line. 
                                   4237 ;----------------------------
      001850                       4238 if: 
      001850 CD 13 63         [ 4] 4239 	call relation 
      001853 A1 04            [ 1] 4240 	cp a,#TK_INTGR
      001855 27 03            [ 1] 4241 	jreq 1$ 
      001857 CC 07 95         [ 2] 4242 	jp syntax_error
      00185A 4F               [ 1] 4243 1$:	clr a 
      00185B 5D               [ 2] 4244 	tnzw x 
      00185C 26 05            [ 1] 4245 	jrne 9$  
                                   4246 ;skip to next line
      00185E 55 00 03 00 01   [ 1] 4247 	mov in,count
      001863 81               [ 4] 4248 9$:	ret 
                                   4249 
                                   4250 ;------------------------
                                   4251 ; BASIC: FOR var=expr 
                                   4252 ; set variable to expression 
                                   4253 ; leave variable address 
                                   4254 ; on dstack and set
                                   4255 ; FFOR bit in 'flags'
                                   4256 ;-----------------
                           000001  4257 	RETL1=1
                           000003  4258 	INW=3
                           000005  4259 	BPTR=5
      001864                       4260 for: ; { -- var_addr }
      001864 A6 05            [ 1] 4261 	ld a,#TK_VAR 
      001866 CD 12 0E         [ 4] 4262 	call expect
      001869 CD 0F EE         [ 4] 4263 	call dpush 
      00186C CD 14 0A         [ 4] 4264 	call let02 
      00186F 72 14 00 21      [ 1] 4265 	bset flags,#FFOR 
                                   4266 ; open space on cstack for BPTR and INW 
      001873 85               [ 2] 4267 	popw x ; call return address 
      001874                       4268 	_vars 4
      001874 52 04            [ 2]    1     sub sp,#4 
      001876 89               [ 2] 4269 	pushw x  ; RETL1 
      001877 5F               [ 1] 4270 	clrw x 
      001878 1F 05            [ 2] 4271 	ldw (BPTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00187A 1F 03            [ 2] 4272 	ldw (INW,sp),x 
      00187C CD 08 5C         [ 4] 4273 	call next_token 
      00187F A1 06            [ 1] 4274 	cp a,#TK_CMD 
      001881 27 03            [ 1] 4275 	jreq 1$
      001883 CC 07 95         [ 2] 4276 	jp syntax_error
      001886                       4277 1$:  
      001886 A3 18 8E         [ 2] 4278 	cpw x,#to 
      001889 27 03            [ 1] 4279 	jreq to
      00188B CC 07 95         [ 2] 4280 	jp syntax_error 
                                   4281 
                                   4282 ;-----------------------------------
                                   4283 ; BASIC: TO expr 
                                   4284 ; second part of FOR loop initilization
                                   4285 ; leave limit on dstack and set 
                                   4286 ; FTO bit in 'flags'
                                   4287 ;-----------------------------------
      00188E                       4288 to: ; { var_addr -- var_addr limit step }
      00188E 72 04 00 21 03   [ 2] 4289 	btjt flags,#FFOR,1$
      001893 CC 07 95         [ 2] 4290 	jp syntax_error
      001896 CD 13 63         [ 4] 4291 1$: call relation  
      001899 A1 04            [ 1] 4292 	cp a,#TK_INTGR 
      00189B 27 03            [ 1] 4293 	jreq 2$ 
      00189D CC 07 95         [ 2] 4294 	jp syntax_error
      0018A0                       4295 2$: 
      0018A0 CD 0F EE         [ 4] 4296     call dpush ; limit
      0018A3 CE 00 00         [ 2] 4297 	ldw x,in.w 
      0018A6 CD 08 5C         [ 4] 4298 	call next_token
      0018A9 A1 00            [ 1] 4299 	cp a,#TK_NONE  
      0018AB 27 0C            [ 1] 4300 	jreq 4$ 
      0018AD A1 06            [ 1] 4301 	cp a,#TK_CMD
      0018AF 26 05            [ 1] 4302 	jrne 3$
      0018B1 A3 18 BE         [ 2] 4303 	cpw x,#step 
      0018B4 27 08            [ 1] 4304 	jreq step
      0018B6                       4305 3$:	
      0018B6 CD 0F E8         [ 4] 4306 	call unget_token   	 
      0018B9                       4307 4$:	
      0018B9 AE 00 01         [ 2] 4308 	ldw x,#1   ; default step  
      0018BC 20 12            [ 2] 4309 	jra store_loop_addr 
                                   4310 
                                   4311 
                                   4312 ;----------------------------------
                                   4313 ; BASIC: STEP expr 
                                   4314 ; optional third par of FOR loop
                                   4315 ; initialization. 	
                                   4316 ;------------------------------------
      0018BE                       4317 step: ; {var limit -- var limit step}
      0018BE 72 04 00 21 03   [ 2] 4318 	btjt flags,#FFOR,1$
      0018C3 CC 07 95         [ 2] 4319 	jp syntax_error
      0018C6 CD 13 63         [ 4] 4320 1$: call relation
      0018C9 A1 04            [ 1] 4321 	cp a,#TK_INTGR
      0018CB 27 03            [ 1] 4322 	jreq store_loop_addr  
      0018CD CC 07 95         [ 2] 4323 	jp syntax_error
                                   4324 ; leave loop back entry point on cstack 
                                   4325 ; cstack is 2 call deep from interp_loop
      0018D0                       4326 store_loop_addr:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018D0 CD 0F EE         [ 4] 4327 	call dpush 
      0018D3 CE 00 04         [ 2] 4328 	ldw x,basicptr  
      0018D6 1F 05            [ 2] 4329 	ldw (BPTR,sp),x 
      0018D8 CE 00 00         [ 2] 4330 	ldw x,in.w 
      0018DB 1F 03            [ 2] 4331 	ldw (INW,sp),x   
      0018DD 72 15 00 21      [ 1] 4332 	bres flags,#FFOR 
      0018E1 72 5C 00 1E      [ 1] 4333 	inc loop_depth  
      0018E5 81               [ 4] 4334 	ret 
                                   4335 
                                   4336 ;--------------------------------
                                   4337 ; BASIC: NEXT var 
                                   4338 ; FOR loop control 
                                   4339 ; increment variable with step 
                                   4340 ; and compare with limit 
                                   4341 ; loop if threshold not crossed.
                                   4342 ; else clean both stacks. 
                                   4343 ; and decrement 'loop_depth' 
                                   4344 ;--------------------------------
      0018E6                       4345 next: ; {var limit step -- [var limit step ] }
      0018E6 72 5D 00 1E      [ 1] 4346 	tnz loop_depth 
      0018EA 26 03            [ 1] 4347 	jrne 1$ 
      0018EC CC 07 95         [ 2] 4348 	jp syntax_error 
      0018EF                       4349 1$: 
      0018EF A6 05            [ 1] 4350 	ld a,#TK_VAR 
      0018F1 CD 12 0E         [ 4] 4351 	call expect
                                   4352 ; check for good variable after NEXT 	 
      0018F4 90 93            [ 1] 4353 	ldw y,x 
      0018F6 AE 00 04         [ 2] 4354 	ldw x,#4  
      0018F9 72 D3 00 18      [ 4] 4355 	cpw y,([dstkptr],x) ; compare variables address 
      0018FD 27 03            [ 1] 4356 	jreq 2$  
      0018FF CC 07 95         [ 2] 4357 	jp syntax_error ; not the good one 
      001902                       4358 2$: ; increment variable 
      001902 93               [ 1] 4359 	ldw x,y
      001903 FE               [ 2] 4360 	ldw x,(x)  ; get var value 
      001904 CF 00 08         [ 2] 4361 	ldw acc16,x 
      001907 72 CE 00 18      [ 5] 4362 	ldw x,[dstkptr] ; step
      00190B 72 BB 00 08      [ 2] 4363 	addw x,acc16 ; var+step 
      00190F 90 FF            [ 2] 4364 	ldw (y),x ; save var new value 
                                   4365 ; compare with limit 
      001911 90 93            [ 1] 4366 	ldw y,x 
      001913 72 CE 00 18      [ 5] 4367 	ldw x,[dstkptr] ; step in x 
      001917 5D               [ 2] 4368 	tnzw x  
      001918 2A 0B            [ 1] 4369 	jrpl 4$ ; positive step 
                                   4370 ;negative step 
      00191A AE 00 02         [ 2] 4371 	ldw x,#2
      00191D 72 D3 00 18      [ 4] 4372 	cpw y,([dstkptr],x)
      001921 2F 20            [ 1] 4373 	jrslt loop_done
      001923 20 09            [ 2] 4374 	jra loop_back 
      001925                       4375 4$: ; positive step
      001925 AE 00 02         [ 2] 4376 	ldw x,#2 
      001928 72 D3 00 18      [ 4] 4377 	cpw y,([dstkptr],x)
      00192C 2C 15            [ 1] 4378 	jrsgt loop_done
      00192E                       4379 loop_back:
      00192E 1E 05            [ 2] 4380 	ldw x,(BPTR,sp)
      001930 CF 00 04         [ 2] 4381 	ldw basicptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001933 72 01 00 21 05   [ 2] 4382 	btjf flags,#FRUN,1$ 
      001938 E6 02            [ 1] 4383 	ld a,(2,x)
      00193A C7 00 03         [ 1] 4384 	ld count,a
      00193D 1E 03            [ 2] 4385 1$:	ldw x,(INW,sp)
      00193F CF 00 00         [ 2] 4386 	ldw in.w,x 
      001942 81               [ 4] 4387 	ret 
      001943                       4388 loop_done:
                                   4389 	; remove var limit step on dstack 
      001943 CE 00 18         [ 2] 4390 	ldw x,dstkptr 
      001946 1C 00 06         [ 2] 4391 	addw x,#3*CELL_SIZE
      001949 CF 00 18         [ 2] 4392 	ldw dstkptr,x 
                                   4393 	; remove 2 return address on cstack 
      00194C 85               [ 2] 4394 	popw x
      00194D                       4395 	_drop 4
      00194D 5B 04            [ 2]    1     addw sp,#4 
      00194F 89               [ 2] 4396 	pushw x 
      001950 72 5A 00 1E      [ 1] 4397 	dec loop_depth 
      001954 81               [ 4] 4398 	ret 
                                   4399 
                                   4400 
                                   4401 ;------------------------
                                   4402 ; BASIC: GOTO line# 
                                   4403 ; jump to line# 
                                   4404 ; here cstack is 2 call deep from interp_loop 
                                   4405 ;------------------------
      001955                       4406 goto:
      001955 72 00 00 21 06   [ 2] 4407 	btjt flags,#FRUN,0$ 
      00195A A6 06            [ 1] 4408 	ld a,#ERR_RUN_ONLY
      00195C CC 07 97         [ 2] 4409 	jp tb_error 
      00195F 81               [ 4] 4410 	ret 
      001960 20 23            [ 2] 4411 0$:	jra go_common
                                   4412 
                                   4413 ;--------------------
                                   4414 ; BASIC: GOSUB line#
                                   4415 ; basic subroutine call
                                   4416 ; actual line# and basicptr 
                                   4417 ; are saved on cstack
                                   4418 ; here cstack is 2 call deep from interp_loop 
                                   4419 ;--------------------
                           000003  4420 	GOS_RET=3
      001962                       4421 gosub:
      001962 72 00 00 21 06   [ 2] 4422 	btjt flags,#FRUN,0$ 
      001967 A6 06            [ 1] 4423 	ld a,#ERR_RUN_ONLY
      001969 CC 07 97         [ 2] 4424 	jp tb_error 
      00196C 81               [ 4] 4425 	ret 
      00196D 85               [ 2] 4426 0$:	popw x 
      00196E 52 02            [ 2] 4427 	sub sp,#2 
      001970 89               [ 2] 4428 	pushw x 
      001971 CE 00 04         [ 2] 4429 	ldw x,basicptr
      001974 E6 02            [ 1] 4430 	ld a,(2,x)
      001976 AB 03            [ 1] 4431 	add a,#3 
      001978 C7 00 09         [ 1] 4432 	ld acc8,a 
      00197B 72 5F 00 08      [ 1] 4433 	clr acc16 
      00197F 72 BB 00 08      [ 2] 4434 	addw x,acc16
      001983 1F 03            [ 2] 4435 	ldw (GOS_RET,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001985                       4436 go_common: 
      001985 CD 13 63         [ 4] 4437 	call relation 
      001988 A1 04            [ 1] 4438 	cp a,#TK_INTGR
      00198A 27 03            [ 1] 4439 	jreq 1$ 
      00198C CC 07 95         [ 2] 4440 	jp syntax_error
      00198F                       4441 1$: 
      00198F CD 03 0D         [ 4] 4442 	call search_lineno  
      001992 5D               [ 2] 4443 	tnzw x 
      001993 26 05            [ 1] 4444 	jrne 2$ 
      001995 A6 05            [ 1] 4445 	ld a,#ERR_NO_LINE 
      001997 CC 07 97         [ 2] 4446 	jp tb_error 
      00199A                       4447 2$: 
      00199A CF 00 04         [ 2] 4448 	ldw basicptr,x 
      00199D E6 02            [ 1] 4449 	ld a,(2,x)
      00199F C7 00 03         [ 1] 4450 	ld count,a 
      0019A2 35 03 00 01      [ 1] 4451 	mov in,#3 
      0019A6 81               [ 4] 4452 	ret 
                                   4453 
                                   4454 ;------------------------
                                   4455 ; BASIC: RETURN 
                                   4456 ; exit from a subroutine 
                                   4457 ; cstack is 2 level deep from interp_loop 
                                   4458 ;------------------------
      0019A7                       4459 return:
      0019A7 72 00 00 21 05   [ 2] 4460 	btjt flags,#FRUN,0$ 
      0019AC A6 06            [ 1] 4461 	ld a,#ERR_RUN_ONLY
      0019AE CC 07 97         [ 2] 4462 	jp tb_error 
      0019B1                       4463 0$:	
      0019B1 1E 03            [ 2] 4464 	ldw x,(GOS_RET,sp) 
      0019B3 CF 00 04         [ 2] 4465 	ldw basicptr,x 
      0019B6 E6 02            [ 1] 4466 	ld a,(2,x)
      0019B8 AB 03            [ 1] 4467 	add a,#3 
      0019BA C7 00 03         [ 1] 4468 	ld count,a 
      0019BD 35 03 00 01      [ 1] 4469 	mov in,#3
      0019C1 4F               [ 1] 4470 	clr a 
      0019C2 85               [ 2] 4471 	popw x 
      0019C3                       4472 	_drop 2
      0019C3 5B 02            [ 2]    1     addw sp,#2 
      0019C5 89               [ 2] 4473 	pushw x
      0019C6 81               [ 4] 4474 	ret  
                                   4475 
                                   4476 
                                   4477 ;----------------------------------
                                   4478 ; BASIC: RUN
                                   4479 ; run BASIC program in RAM
                                   4480 ;----------------------------------- 
      0019C7                       4481 run: 
      0019C7 72 01 00 21 02   [ 2] 4482 	btjf flags,#FRUN,0$  
      0019CC 4F               [ 1] 4483 	clr a 
      0019CD 81               [ 4] 4484 	ret
      0019CE                       4485 0$: 
      0019CE 72 09 00 21 12   [ 2] 4486 	btjf flags,#FBREAK,1$
      0019D3                       4487 	_drop 2 
      0019D3 5B 02            [ 2]    1     addw sp,#2 
      0019D5 CD 16 ED         [ 4] 4488 	call rest_context
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0019D8                       4489 	_drop CTXT_SIZE 
      0019D8 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      0019DA 72 19 00 21      [ 1] 4490 	bres flags,#FBREAK 
      0019DE 72 10 00 21      [ 1] 4491 	bset flags,#FRUN 
      0019E2 CC 08 2C         [ 2] 4492 	jp interp_loop 
      0019E5 CE 00 1A         [ 2] 4493 1$:	ldw x,txtbgn
      0019E8 C3 00 1C         [ 2] 4494 	cpw x,txtend 
      0019EB 2B 02            [ 1] 4495 	jrmi run_it 
      0019ED 4F               [ 1] 4496 	clr a 
      0019EE 81               [ 4] 4497 	ret
                                   4498 
      0019EF                       4499 run_it:	 
      0019EF CD 13 DE         [ 4] 4500     call ubound 
      0019F2                       4501 	_drop 2 
      0019F2 5B 02            [ 2]    1     addw sp,#2 
      0019F4 CE 00 1A         [ 2] 4502 	ldw x,txtbgn 
      0019F7 CF 00 04         [ 2] 4503 	ldw basicptr,x 
      0019FA E6 02            [ 1] 4504 	ld a,(2,x)
      0019FC C7 00 03         [ 1] 4505 	ld count,a
      0019FF 35 03 00 01      [ 1] 4506 	mov in,#3	
      001A03 72 10 00 21      [ 1] 4507 	bset flags,#FRUN 
      001A07 CC 08 2C         [ 2] 4508 	jp interp_loop 
                                   4509 
                                   4510 
                                   4511 ;----------------------
                                   4512 ; BASIC: STOP 
                                   4513 ; stop running program
                                   4514 ;---------------------- 
      001A0A                       4515 stop: 
                                   4516 ; clean dstack and cstack 
      001A0A AE 17 FF         [ 2] 4517 	ldw x,#STACK_EMPTY 
      001A0D 94               [ 1] 4518 	ldw sp,x 
      001A0E 72 11 00 21      [ 1] 4519 	bres flags,#FRUN 
      001A12 72 19 00 21      [ 1] 4520 	bres flags,#FBREAK
      001A16 CC 07 E9         [ 2] 4521 	jp warm_start
                                   4522 
                                   4523 ;-----------------------
                                   4524 ; BASIC BEEP expr1,expr2
                                   4525 ; used MCU internal beeper 
                                   4526 ; to produce a sound
                                   4527 ; arguments:
                                   4528 ;    expr1   frequency  (expr1%32)
                                   4529 ;    expr2   duration msec.
                                   4530 ;---------------------------
      001A19                       4531 beep:
      001A19 CD 12 1B         [ 4] 4532 	call arg_list 
      001A1C A1 02            [ 1] 4533 	cp a,#2 
      001A1E 27 03            [ 1] 4534 	jreq 1$
      001A20 CC 07 95         [ 2] 4535 	jp syntax_error 
      001A23                       4536 1$: 
      001A23 CE 00 18         [ 2] 4537 	ldw x,dstkptr 
      001A26 EE 02            [ 2] 4538 	ldw x,(2,x);frequency 
      001A28 A6 1F            [ 1] 4539 	ld a,#31
      001A2A 62               [ 2] 4540 	div x,a 
      001A2B C7 50 F3         [ 1] 4541 	ld BEEP_CSR,a	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A2E 72 1A 50 F3      [ 1] 4542 	bset BEEP_CSR,#5 
      001A32 CD 0F FB         [ 4] 4543 	call dpop 
      001A35 CD 1F 7E         [ 4] 4544 	call pause02 
      001A38 CD 10 22         [ 4] 4545 	call ddrop 
      001A3B A6 1F            [ 1] 4546 	ld a,#0x1f
      001A3D C7 50 F3         [ 1] 4547 	ld BEEP_CSR,a 
      001A40 81               [ 4] 4548 	ret 
                                   4549 
                                   4550 ;-------------------------------
                                   4551 ; BASIC: PWRADC 0|1 [,divisor]  
                                   4552 ; disable/enanble ADC 
                                   4553 ;-------------------------------
      001A41                       4554 power_adc:
      001A41 CD 12 1B         [ 4] 4555 	call arg_list 
      001A44 A1 02            [ 1] 4556 	cp a,#2	
      001A46 27 0D            [ 1] 4557 	jreq 1$
      001A48 A1 01            [ 1] 4558 	cp a,#1 
      001A4A 27 03            [ 1] 4559 	jreq 0$ 
      001A4C CC 07 95         [ 2] 4560 	jp syntax_error 
      001A4F AE 00 00         [ 2] 4561 0$: ldw x,#0
      001A52 CD 0F EE         [ 4] 4562 	call dpush 
      001A55 AE 00 02         [ 2] 4563 1$: ldw x,#2
      001A58 72 DE 00 18      [ 5] 4564 	ldw x,([dstkptr],x) ; on|off
      001A5C 5D               [ 2] 4565 	tnzw x 
      001A5D 27 1C            [ 1] 4566 	jreq 2$ 
      001A5F 72 CE 00 18      [ 5] 4567 	ldw x,[dstkptr] ; divisor 
      001A63 9F               [ 1] 4568 	ld a,xl
      001A64 A4 07            [ 1] 4569 	and a,#7
      001A66 4E               [ 1] 4570 	swap a 
      001A67 C7 54 01         [ 1] 4571 	ld ADC_CR1,a
      001A6A 72 16 50 CA      [ 1] 4572 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      001A6E 72 10 54 01      [ 1] 4573 	bset ADC_CR1,#ADC_CR1_ADON 
      001A72                       4574 	_usec_dly 7 
      001A72 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001A75 5A               [ 2]    2     decw x
      001A76 9D               [ 1]    3     nop 
      001A77 26 FA            [ 1]    4     jrne .-4
      001A79 20 08            [ 2] 4575 	jra 3$
      001A7B 72 11 54 01      [ 1] 4576 2$: bres ADC_CR1,#ADC_CR1_ADON
      001A7F 72 17 50 CA      [ 1] 4577 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001A83 AE 00 02         [ 2] 4578 3$:	ldw x,#2
      001A86 CD 10 5F         [ 4] 4579 	call ddrop_n 
      001A89 81               [ 4] 4580 	ret
                                   4581 
                                   4582 ;-----------------------------
                                   4583 ; BASIC: RDADC(channel)
                                   4584 ; read adc channel {0..5}
                                   4585 ; output:
                                   4586 ;   A 		TK_INTGR 
                                   4587 ;   X 		value 
                                   4588 ;-----------------------------
      001A8A                       4589 analog_read:
      001A8A CD 12 3F         [ 4] 4590 	call func_args 
      001A8D A1 01            [ 1] 4591 	cp a,#1 
      001A8F 27 03            [ 1] 4592 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A91 CC 07 95         [ 2] 4593 	jp syntax_error
      001A94 CD 0F FB         [ 4] 4594 1$: call dpop 
      001A97 A3 00 05         [ 2] 4595 	cpw x,#5 
      001A9A 23 05            [ 2] 4596 	jrule 2$
      001A9C A6 0A            [ 1] 4597 	ld a,#ERR_BAD_VALUE
      001A9E CC 07 97         [ 2] 4598 	jp tb_error 
      001AA1 9F               [ 1] 4599 2$: ld a,xl
      001AA2 C7 00 09         [ 1] 4600 	ld acc8,a 
      001AA5 A6 05            [ 1] 4601 	ld a,#5
      001AA7 C0 00 09         [ 1] 4602 	sub a,acc8 
      001AAA C7 54 00         [ 1] 4603 	ld ADC_CSR,a
      001AAD 72 16 54 02      [ 1] 4604 	bset ADC_CR2,#ADC_CR2_ALIGN
      001AB1 72 10 54 01      [ 1] 4605 	bset ADC_CR1,#ADC_CR1_ADON
      001AB5 72 0F 54 00 FB   [ 2] 4606 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001ABA CE 54 04         [ 2] 4607 	ldw x,ADC_DRH
      001ABD A6 04            [ 1] 4608 	ld a,#TK_INTGR
      001ABF 81               [ 4] 4609 	ret 
                                   4610 
                                   4611 ;-----------------------
                                   4612 ; BASIC: DREAD(pin)
                                   4613 ; read state of a digital pin 
                                   4614 ; pin# {0..15}
                                   4615 ; output:
                                   4616 ;    A 		TK_INTGR
                                   4617 ;    X      0|1 
                                   4618 ;-------------------------
                           000001  4619 	PINNO=1
                           000001  4620 	VSIZE=1
      001AC0                       4621 digital_read:
      001AC0                       4622 	_vars VSIZE 
      001AC0 52 01            [ 2]    1     sub sp,#VSIZE 
      001AC2 CD 12 3F         [ 4] 4623 	call func_args
      001AC5 A1 01            [ 1] 4624 	cp a,#1
      001AC7 27 03            [ 1] 4625 	jreq 1$
      001AC9 CC 07 95         [ 2] 4626 	jp syntax_error
      001ACC CD 0F FB         [ 4] 4627 1$: call dpop 
      001ACF A3 00 0F         [ 2] 4628 	cpw x,#15 
      001AD2 23 05            [ 2] 4629 	jrule 2$
      001AD4 A6 0A            [ 1] 4630 	ld a,#ERR_BAD_VALUE
      001AD6 CC 07 97         [ 2] 4631 	jp tb_error 
      001AD9 CD 20 D1         [ 4] 4632 2$:	call select_pin 
      001ADC 6B 01            [ 1] 4633 	ld (PINNO,sp),a
      001ADE E6 01            [ 1] 4634 	ld a,(GPIO_IDR,x)
      001AE0 0D 01            [ 1] 4635 	tnz (PINNO,sp)
      001AE2 27 05            [ 1] 4636 	jreq 8$
      001AE4 44               [ 1] 4637 3$: srl a 
      001AE5 0A 01            [ 1] 4638 	dec (PINNO,sp)
      001AE7 26 FB            [ 1] 4639 	jrne 3$ 
      001AE9 A4 01            [ 1] 4640 8$: and a,#1 
      001AEB 5F               [ 1] 4641 	clrw x 
      001AEC 97               [ 1] 4642 	ld xl,a 
      001AED A6 04            [ 1] 4643 	ld a,#TK_INTGR
      001AEF                       4644 	_drop VSIZE
      001AEF 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AF1 81               [ 4] 4645 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4646 
                                   4647 ;-----------------------
                                   4648 ; BASIC: DWRITE pin,0|1
                                   4649 ; write to a digital pin 
                                   4650 ; pin# {0..15}
                                   4651 ; output:
                                   4652 ;    A 		TK_INTGR
                                   4653 ;    X      0|1 
                                   4654 ;-------------------------
                           000001  4655 	PINNO=1
                           000002  4656 	PINVAL=2
                           000002  4657 	VSIZE=2
      001AF2                       4658 digital_write:
      001AF2                       4659 	_vars VSIZE 
      001AF2 52 02            [ 2]    1     sub sp,#VSIZE 
      001AF4 CD 12 1B         [ 4] 4660 	call arg_list  
      001AF7 A1 02            [ 1] 4661 	cp a,#2 
      001AF9 27 03            [ 1] 4662 	jreq 1$
      001AFB CC 07 95         [ 2] 4663 	jp syntax_error
      001AFE CD 0F FB         [ 4] 4664 1$: call dpop 
      001B01 9F               [ 1] 4665 	ld a,xl 
      001B02 6B 02            [ 1] 4666 	ld (PINVAL,sp),a
      001B04 CD 0F FB         [ 4] 4667 	call dpop
      001B07 A3 00 0F         [ 2] 4668 	cpw x,#15 
      001B0A 23 05            [ 2] 4669 	jrule 2$
      001B0C A6 0A            [ 1] 4670 	ld a,#ERR_BAD_VALUE
      001B0E CC 07 97         [ 2] 4671 	jp tb_error 
      001B11 CD 20 D1         [ 4] 4672 2$:	call select_pin 
      001B14 6B 01            [ 1] 4673 	ld (PINNO,sp),a 
      001B16 A6 01            [ 1] 4674 	ld a,#1
      001B18 0D 01            [ 1] 4675 	tnz (PINNO,sp)
      001B1A 27 05            [ 1] 4676 	jreq 4$
      001B1C 48               [ 1] 4677 3$: sll a
      001B1D 0A 01            [ 1] 4678 	dec (PINNO,sp)
      001B1F 26 FB            [ 1] 4679 	jrne 3$
      001B21 0D 02            [ 1] 4680 4$: tnz (PINVAL,sp)
      001B23 26 05            [ 1] 4681 	jrne 5$
      001B25 43               [ 1] 4682 	cpl a 
      001B26 E4 00            [ 1] 4683 	and a,(GPIO_ODR,x)
      001B28 20 02            [ 2] 4684 	jra 8$
      001B2A EA 00            [ 1] 4685 5$: or a,(GPIO_ODR,x)
      001B2C E7 00            [ 1] 4686 8$: ld (GPIO_ODR,x),a 
      001B2E                       4687 	_drop VSIZE 
      001B2E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B30 81               [ 4] 4688 	ret
                                   4689 
                                   4690 
                                   4691 ;-----------------------
                                   4692 ; BASIC: BREAK 
                                   4693 ; insert a breakpoint 
                                   4694 ; in pogram. 
                                   4695 ; the program is resumed
                                   4696 ; with RUN 
                                   4697 ;-------------------------
      001B31                       4698 break:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B31 72 00 00 21 02   [ 2] 4699 	btjt flags,#FRUN,2$
      001B36 4F               [ 1] 4700 	clr a
      001B37 81               [ 4] 4701 	ret 
      001B38                       4702 2$:	 
                                   4703 ; create space on cstack to save context 
      001B38 AE 1B 5F         [ 2] 4704 	ldw x,#break_point 
      001B3B CD 01 DD         [ 4] 4705 	call puts 
      001B3E                       4706 	_drop 2 ;drop return address 
      001B3E 5B 02            [ 2]    1     addw sp,#2 
      001B40                       4707 	_vars CTXT_SIZE ; context size 
      001B40 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001B42 CD 16 DD         [ 4] 4708 	call save_context 
      001B45 AE 16 C8         [ 2] 4709 	ldw x,#tib 
      001B48 CF 00 04         [ 2] 4710 	ldw basicptr,x
      001B4B 7F               [ 1] 4711 	clr (x)
      001B4C 72 5F 00 03      [ 1] 4712 	clr count  
      001B50 5F               [ 1] 4713 	clrw x 
      001B51 CF 00 00         [ 2] 4714 	ldw in.w,x
      001B54 72 11 00 21      [ 1] 4715 	bres flags,#FRUN 
      001B58 72 18 00 21      [ 1] 4716 	bset flags,#FBREAK
      001B5C CC 08 2C         [ 2] 4717 	jp interp_loop 
      001B5F 0A 62 72 65 61 6B 20  4718 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4719 
                                   4720 ;-----------------------
                                   4721 ; BASIC: NEW
                                   4722 ; from command line only 
                                   4723 ; free program memory
                                   4724 ; and clear variables 
                                   4725 ;------------------------
      001B7D                       4726 new: 
      001B7D 72 01 00 21 02   [ 2] 4727 	btjf flags,#FRUN,0$ 
      001B82 4F               [ 1] 4728 	clr a 
      001B83 81               [ 4] 4729 	ret 
      001B84                       4730 0$:	
      001B84 CD 06 67         [ 4] 4731 	call clear_basic 
      001B87 81               [ 4] 4732 	ret 
                                   4733 	 
                                   4734 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4735 ;   file system routines
                                   4736 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4737 
                                   4738 ;--------------------
                                   4739 ; input:
                                   4740 ;   X     increment 
                                   4741 ; output:
                                   4742 ;   farptr  incremented 
                                   4743 ;---------------------
      001B88                       4744 incr_farptr:
      001B88 72 BB 00 13      [ 2] 4745 	addw x,farptr+1 
      001B8C 24 04            [ 1] 4746 	jrnc 1$
      001B8E 72 5C 00 12      [ 1] 4747 	inc farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B92 CF 00 13         [ 2] 4748 1$:	ldw farptr+1,x  
      001B95 81               [ 4] 4749 	ret 
                                   4750 
                                   4751 ;------------------------------
                                   4752 ; extended flash memory used as FLASH_DRIVE 
                                   4753 ; seek end of used flash drive   
                                   4754 ; starting at 0x10000 address.
                                   4755 ; 4 consecutives 0 bytes signal free space. 
                                   4756 ; input:
                                   4757 ;	none
                                   4758 ; output:
                                   4759 ;   ffree     free_addr| 0 if memory full.
                                   4760 ;------------------------------
      001B96                       4761 seek_fdrive:
                                   4762 ; start scan at 0x10000 address 
      001B96 A6 01            [ 1] 4763 	ld a,#1
      001B98 C7 00 12         [ 1] 4764 	ld farptr,a 
      001B9B 5F               [ 1] 4765 	clrw x 
      001B9C CF 00 13         [ 2] 4766 	ldw farptr+1,x 
      001B9F                       4767 1$:
      001B9F AE 00 03         [ 2] 4768 	ldw x,#3  
      001BA2 92 AF 00 12      [ 5] 4769 2$:	ldf a,([farptr],x) 
      001BA6 26 05            [ 1] 4770 	jrne 3$
      001BA8 5A               [ 2] 4771 	decw x
      001BA9 2A F7            [ 1] 4772 	jrpl 2$
      001BAB 20 19            [ 2] 4773 	jra 4$ 
      001BAD 5C               [ 2] 4774 3$:	incw x 
      001BAE CD 1B 88         [ 4] 4775 	call incr_farptr
      001BB1 AE 02 7F         [ 2] 4776 	ldw x,#0x27f 
      001BB4 C3 00 12         [ 2] 4777 	cpw x,farptr
      001BB7 2A E6            [ 1] 4778 	jrpl 1$
                                   4779 ; drive full 
      001BB9 72 5F 00 15      [ 1] 4780 	clr ffree 
      001BBD 72 5F 00 16      [ 1] 4781 	clr ffree+1 
      001BC1 72 5F 00 17      [ 1] 4782 	clr ffree+2 
      001BC5 81               [ 4] 4783 	ret
      001BC6                       4784 4$: ; copy farptr to ffree	 
      001BC6 CE 00 12         [ 2] 4785 	ldw x,farptr 
      001BC9 C6 00 14         [ 1] 4786 	ld a,farptr+2 
      001BCC CF 00 15         [ 2] 4787 	ldw ffree,x 
      001BCF C7 00 17         [ 1] 4788 	ld ffree+2,a  
      001BD2 81               [ 4] 4789 	ret 
                                   4790 
                                   4791 ;-----------------------
                                   4792 ; compare file name 
                                   4793 ; with name pointed by Y  
                                   4794 ; input:
                                   4795 ;   farptr   file name 
                                   4796 ;   Y        target name 
                                   4797 ; output:
                                   4798 ;   farptr 	 at file_name
                                   4799 ;   X 		 farptr[x] point at size field  
                                   4800 ;   Carry    0|1 no match|match  
                                   4801 ;----------------------
      001BD3                       4802 cmp_name:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001BD3 5F               [ 1] 4803 	clrw x
      001BD4 92 AF 00 12      [ 5] 4804 1$:	ldf a,([farptr],x)
      001BD8 90 F1            [ 1] 4805 	cp a,(y)
      001BDA 26 08            [ 1] 4806 	jrne 4$
      001BDC 4D               [ 1] 4807 	tnz a 
      001BDD 27 12            [ 1] 4808 	jreq 9$ 
      001BDF 5C               [ 2] 4809     incw x 
      001BE0 90 5C            [ 2] 4810 	incw y 
      001BE2 20 F0            [ 2] 4811 	jra 1$
      001BE4                       4812 4$: ;no match 
      001BE4 4D               [ 1] 4813 	tnz a 
      001BE5 27 07            [ 1] 4814 	jreq 5$
      001BE7 5C               [ 2] 4815 	incw x 
      001BE8 92 AF 00 12      [ 5] 4816 	ldf a,([farptr],x)
      001BEC 20 F6            [ 2] 4817 	jra 4$  
      001BEE 5C               [ 2] 4818 5$:	incw x ; farptr[x] point at 'size' field 
      001BEF 98               [ 1] 4819 	rcf 
      001BF0 81               [ 4] 4820 	ret
      001BF1                       4821 9$: ; match  
      001BF1 5C               [ 2] 4822 	incw x  ; farptr[x] at 'size' field 
      001BF2 99               [ 1] 4823 	scf 
      001BF3 81               [ 4] 4824 	ret 
                                   4825 
                                   4826 ;-----------------------
                                   4827 ; search file in 
                                   4828 ; flash memory 
                                   4829 ; input:
                                   4830 ;   Y       file name  
                                   4831 ; output:
                                   4832 ;   farptr  addr at name|0
                                   4833 ;-----------------------
                           000001  4834 	FSIZE=1
                           000003  4835 	YSAVE=3
                           000004  4836 	VSIZE=4 
      001BF4                       4837 search_file: 
      001BF4                       4838 	_vars VSIZE
      001BF4 52 04            [ 2]    1     sub sp,#VSIZE 
      001BF6 17 03            [ 2] 4839 	ldw (YSAVE,sp),y  
      001BF8 5F               [ 1] 4840 	clrw x 
      001BF9 CF 00 13         [ 2] 4841 	ldw farptr+1,x 
      001BFC 35 01 00 12      [ 1] 4842 	mov farptr,#1
      001C00                       4843 1$:	
                                   4844 ; check if farptr is after any file 
                                   4845 ; if  0 then so.
      001C00 92 BC 00 12      [ 5] 4846 	ldf a,[farptr]
      001C04 27 25            [ 1] 4847 	jreq 6$
      001C06 5F               [ 1] 4848 2$: clrw x 	
      001C07 16 03            [ 2] 4849 	ldw y,(YSAVE,sp) 
      001C09 CD 1B D3         [ 4] 4850 	call cmp_name
      001C0C 25 2D            [ 1] 4851 	jrc 9$
      001C0E 92 AF 00 12      [ 5] 4852 	ldf a,([farptr],x)
      001C12 6B 01            [ 1] 4853 	ld (FSIZE,sp),a 
      001C14 5C               [ 2] 4854 	incw x 
      001C15 92 AF 00 12      [ 5] 4855 	ldf a,([farptr],x)
      001C19 6B 02            [ 1] 4856 	ld (FSIZE+1,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C1B 5C               [ 2] 4857 	incw x 
      001C1C 72 FB 01         [ 2] 4858 	addw x,(FSIZE,sp) ; count to skip 
      001C1F 5C               [ 2] 4859 	incw x ; skip over EOF marker 
      001C20 CD 1B 88         [ 4] 4860 	call incr_farptr ; now at next file 'name_field'
      001C23 AE 02 80         [ 2] 4861 	ldw x,#0x280
      001C26 C3 00 12         [ 2] 4862 	cpw x,farptr 
      001C29 2A D5            [ 1] 4863 	jrpl 1$
      001C2B                       4864 6$: ; file not found 
      001C2B 72 5F 00 12      [ 1] 4865 	clr farptr
      001C2F 72 5F 00 13      [ 1] 4866 	clr farptr+1 
      001C33 72 5F 00 14      [ 1] 4867 	clr farptr+2 
      001C37                       4868 	_drop VSIZE 
      001C37 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C39 98               [ 1] 4869 	rcf
      001C3A 81               [ 4] 4870 	ret
      001C3B                       4871 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001C3B                       4872 	_drop VSIZE 
      001C3B 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C3D 99               [ 1] 4873 	scf 	
      001C3E 81               [ 4] 4874 	ret
                                   4875 
                                   4876 ;--------------------------------
                                   4877 ; BASIC: SAVE "name" 
                                   4878 ; save text program in 
                                   4879 ; flash memory used as 
                                   4880 ;--------------------------------
                           000001  4881 	BSIZE=1
                           000003  4882 	NAMEPTR=3
                           000004  4883 	VSIZE=4
      001C3F                       4884 save:
      001C3F 72 01 00 21 05   [ 2] 4885 	btjf flags,#FRUN,0$ 
      001C44 A6 07            [ 1] 4886 	ld a,#ERR_CMD_ONLY 
      001C46 CC 07 97         [ 2] 4887 	jp tb_error
      001C49                       4888 0$:	 
      001C49 CE 00 1C         [ 2] 4889 	ldw x,txtend 
      001C4C 72 B0 00 1A      [ 2] 4890 	subw x,txtbgn
      001C50 26 01            [ 1] 4891 	jrne 1$
                                   4892 ; nothing to save 
      001C52 81               [ 4] 4893 	ret 
      001C53                       4894 1$:	
      001C53                       4895 	_vars VSIZE 
      001C53 52 04            [ 2]    1     sub sp,#VSIZE 
      001C55 1F 01            [ 2] 4896 	ldw (BSIZE,sp),x 
      001C57 CD 08 5C         [ 4] 4897 	call next_token	
      001C5A A1 0A            [ 1] 4898 	cp a,#TK_QSTR
      001C5C 27 03            [ 1] 4899 	jreq 2$
      001C5E CC 07 95         [ 2] 4900 	jp syntax_error
      001C61                       4901 2$: 
      001C61 90 CE 00 04      [ 2] 4902 	ldw y,basicptr 
      001C65 72 B9 00 00      [ 2] 4903 	addw y,in.w
      001C69 17 03            [ 2] 4904 	ldw (NAMEPTR,sp),y  
      001C6B 55 00 03 00 01   [ 1] 4905 	mov in,count 
                                   4906 ; check if enough free space 
      001C70 93               [ 1] 4907 	ldw x,y 
      001C71 CD 02 9F         [ 4] 4908 	call strlen 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001C74 1C 00 03         [ 2] 4909 	addw x,#3 
      001C77 72 FB 01         [ 2] 4910 	addw x,(BSIZE,sp)
      001C7A 72 5D 00 15      [ 1] 4911 	tnz ffree 
      001C7E 26 0B            [ 1] 4912 	jrne 21$
      001C80 72 B0 00 16      [ 2] 4913 	subw x,ffree+1 
      001C84 23 05            [ 2] 4914 	jrule 21$
      001C86 A6 01            [ 1] 4915 	ld a,#ERR_MEM_FULL 
      001C88 CC 07 97         [ 2] 4916 	jp tb_error
      001C8B                       4917 21$: 
                                   4918 ; check for existing file of that name 
      001C8B 16 03            [ 2] 4919 	ldw y,(NAMEPTR,sp)	
      001C8D CD 1B F4         [ 4] 4920 	call search_file 
      001C90 24 05            [ 1] 4921 	jrnc 3$ 
      001C92 A6 08            [ 1] 4922 	ld a,#ERR_DUPLICATE 
      001C94 CC 07 97         [ 2] 4923 	jp tb_error 
      001C97                       4924 3$:	;** write file name to flash **
      001C97 CE 00 15         [ 2] 4925 	ldw x,ffree 
      001C9A C6 00 17         [ 1] 4926 	ld a,ffree+2 
      001C9D CF 00 12         [ 2] 4927 	ldw farptr,x 
      001CA0 C7 00 14         [ 1] 4928 	ld farptr+2,a 
      001CA3 1E 03            [ 2] 4929 	ldw x,(NAMEPTR,sp)  
      001CA5 CD 02 9F         [ 4] 4930 	call strlen 
      001CA8 5C               [ 2] 4931 	incw  x
      001CA9 1F 01            [ 2] 4932 	ldw (BSIZE,sp),x  
      001CAB 5F               [ 1] 4933 	clrw x   
      001CAC 16 03            [ 2] 4934 	ldw y,(NAMEPTR,sp)
      001CAE CD 01 6D         [ 4] 4935 	call write_block  
                                   4936 ;** write file length after name **
      001CB1 CE 00 1C         [ 2] 4937 	ldw x,txtend 
      001CB4 72 B0 00 1A      [ 2] 4938 	subw x,txtbgn
      001CB8 1F 01            [ 2] 4939 	ldw (BSIZE,sp),x 
      001CBA 5F               [ 1] 4940 	clrw x 
      001CBB 7B 01            [ 1] 4941 	ld a,(1,sp)
      001CBD CD 00 F8         [ 4] 4942 	call write_byte 
      001CC0 5C               [ 2] 4943 	incw x 
      001CC1 7B 02            [ 1] 4944 	ld a,(2,sp)
      001CC3 CD 00 F8         [ 4] 4945 	call write_byte
      001CC6 5C               [ 2] 4946 	incw x  
      001CC7 CD 1B 88         [ 4] 4947 	call incr_farptr ; move farptr after SIZE field 
                                   4948 ;** write BASIC text **
                                   4949 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001CCA 1E 01            [ 2] 4950 	ldw x,(BSIZE,sp)
      001CCC 89               [ 2] 4951 	pushw x ; write_block argument 
      001CCD 5F               [ 1] 4952 	clrw x 
      001CCE 90 CE 00 1A      [ 2] 4953 	ldw y,txtbgn  ; BASIC text to save 
      001CD2 CD 01 6D         [ 4] 4954 	call write_block 
      001CD5                       4955 	_drop 2 ;  drop write_block argument  
      001CD5 5B 02            [ 2]    1     addw sp,#2 
                                   4956 ; write en end of file marker 
      001CD7 AE 00 01         [ 2] 4957 	ldw x,#1
      001CDA A6 FF            [ 1] 4958 	ld a,#EOF  
      001CDC CD 00 F8         [ 4] 4959 	call write_byte 
      001CDF CD 1B 88         [ 4] 4960 	call incr_farptr
                                   4961 ; save farptr in ffree
      001CE2 CE 00 12         [ 2] 4962 	ldw x,farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001CE5 C6 00 14         [ 1] 4963 	ld a,farptr+2 
      001CE8 CF 00 15         [ 2] 4964 	ldw ffree,x 
      001CEB C7 00 17         [ 1] 4965 	ld ffree+2,a
                                   4966 ;write 4 zero bytes as an end of all files marker 
      001CEE 5F               [ 1] 4967     clrw x 
      001CEF 4B 04            [ 1] 4968 	push #4 
      001CF1                       4969 4$:
      001CF1 4F               [ 1] 4970 	clr a 
      001CF2 CD 00 F8         [ 4] 4971 	call write_byte 
      001CF5 5C               [ 2] 4972 	incw x 
      001CF6 0A 01            [ 1] 4973 	dec (1,sp)
      001CF8 26 F7            [ 1] 4974 	jrne 4$
      001CFA 84               [ 1] 4975 5$: pop a 
                                   4976 ; display saved size  
      001CFB 1E 01            [ 2] 4977 	ldw x,(BSIZE,sp) 
      001CFD CD 09 F5         [ 4] 4978 	call print_int 
      001D00                       4979 	_drop VSIZE 
      001D00 5B 04            [ 2]    1     addw sp,#VSIZE 
      001D02 81               [ 4] 4980 	ret 
                                   4981 
                                   4982 ;----------------------
                                   4983 ; load file in RAM memory
                                   4984 ; input:
                                   4985 ;    farptr point at file size 
                                   4986 ; output:
                                   4987 ;   y point after BASIC program in RAM.
                                   4988 ;------------------------
      001D03                       4989 load_file:
      001D03 CD 1B 88         [ 4] 4990 	call incr_farptr  
      001D06 CD 06 67         [ 4] 4991 	call clear_basic  
      001D09 5F               [ 1] 4992 	clrw x
      001D0A 92 AF 00 12      [ 5] 4993 	ldf a,([farptr],x)
      001D0E 90 95            [ 1] 4994 	ld yh,a 
      001D10 5C               [ 2] 4995 	incw x  
      001D11 92 AF 00 12      [ 5] 4996 	ldf a,([farptr],x)
      001D15 5C               [ 2] 4997 	incw x 
      001D16 90 97            [ 1] 4998 	ld yl,a 
      001D18 72 B9 00 1A      [ 2] 4999 	addw y,txtbgn
      001D1C 90 CF 00 1C      [ 2] 5000 	ldw txtend,y
      001D20 90 CE 00 1A      [ 2] 5001 	ldw y,txtbgn
      001D24                       5002 3$:	; load BASIC text 	
      001D24 92 AF 00 12      [ 5] 5003 	ldf a,([farptr],x)
      001D28 90 F7            [ 1] 5004 	ld (y),a 
      001D2A 5C               [ 2] 5005 	incw x 
      001D2B 90 5C            [ 2] 5006 	incw y 
      001D2D 90 C3 00 1C      [ 2] 5007 	cpw y,txtend 
      001D31 2B F1            [ 1] 5008 	jrmi 3$
      001D33 81               [ 4] 5009 	ret 
                                   5010 
                                   5011 ;------------------------
                                   5012 ; BASIC: LOAD "file" 
                                   5013 ; load file to RAM 
                                   5014 ; for execution 
                                   5015 ;------------------------
      001D34                       5016 load:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001D34 72 01 00 21 07   [ 2] 5017 	btjf flags,#FRUN,0$ 
      001D39 27 05            [ 1] 5018 	jreq 0$ 
      001D3B A6 07            [ 1] 5019 	ld a,#ERR_CMD_ONLY 
      001D3D CC 07 97         [ 2] 5020 	jp tb_error 
      001D40                       5021 0$:	
      001D40 CD 08 5C         [ 4] 5022 	call next_token 
      001D43 A1 0A            [ 1] 5023 	cp a,#TK_QSTR
      001D45 27 03            [ 1] 5024 	jreq 1$
      001D47 CC 07 95         [ 2] 5025 	jp syntax_error 
      001D4A                       5026 1$:	
      001D4A 90 CE 00 04      [ 2] 5027 	ldw y,basicptr
      001D4E 72 B9 00 00      [ 2] 5028 	addw y,in.w 
      001D52 55 00 03 00 01   [ 1] 5029 	mov in,count 
      001D57 CD 1B F4         [ 4] 5030 	call search_file 
      001D5A 25 05            [ 1] 5031 	jrc 2$ 
      001D5C A6 09            [ 1] 5032 	ld a,#ERR_NOT_FILE
      001D5E CC 07 97         [ 2] 5033 	jp tb_error  
      001D61                       5034 2$:
      001D61 CD 1D 03         [ 4] 5035 	call load_file
                                   5036 ; print loaded size 	 
      001D64 CE 00 1C         [ 2] 5037 	ldw x,txtend 
      001D67 72 B0 00 1A      [ 2] 5038 	subw x,txtbgn
      001D6B CD 09 F5         [ 4] 5039 	call print_int 
      001D6E 81               [ 4] 5040 	ret 
                                   5041 
                                   5042 ;-----------------------------------
                                   5043 ; BASIC: FORGET ["file_name"] 
                                   5044 ; erase file_name and all others 
                                   5045 ; after it. 
                                   5046 ; without argument erase all files 
                                   5047 ;-----------------------------------
      001D6F                       5048 forget:
      001D6F CD 08 5C         [ 4] 5049 	call next_token 
      001D72 A1 00            [ 1] 5050 	cp a,#TK_NONE 
      001D74 27 26            [ 1] 5051 	jreq 3$ 
      001D76 A1 0A            [ 1] 5052 	cp a,#TK_QSTR
      001D78 27 03            [ 1] 5053 	jreq 1$
      001D7A CC 07 95         [ 2] 5054 	jp syntax_error
      001D7D 90 CE 00 04      [ 2] 5055 1$: ldw y,basicptr
      001D81 72 B9 00 00      [ 2] 5056 	addw y,in.w
      001D85 55 00 03 00 01   [ 1] 5057 	mov in,count 
      001D8A CD 1B F4         [ 4] 5058 	call search_file
      001D8D 25 05            [ 1] 5059 	jrc 2$
      001D8F A6 09            [ 1] 5060 	ld a,#ERR_NOT_FILE 
      001D91 CC 07 97         [ 2] 5061 	jp tb_error 
      001D94                       5062 2$: 
      001D94 CE 00 12         [ 2] 5063 	ldw x,farptr
      001D97 C6 00 14         [ 1] 5064 	ld a,farptr+2
      001D9A 20 0A            [ 2] 5065 	jra 4$ 
      001D9C                       5066 3$: ; forget all files 
      001D9C AE 01 00         [ 2] 5067 	ldw x,#0x100
      001D9F 4F               [ 1] 5068 	clr a 
      001DA0 CF 00 12         [ 2] 5069 	ldw farptr,x 
      001DA3 C7 00 14         [ 1] 5070 	ld farptr+2,a 
      001DA6                       5071 4$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001DA6 CF 00 15         [ 2] 5072 	ldw ffree,x 
      001DA9 C7 00 17         [ 1] 5073 	ld ffree+2,a 
      001DAC 4B 04            [ 1] 5074 	push #4
      001DAE 5F               [ 1] 5075 	clrw x 
      001DAF                       5076 5$: 
      001DAF 4F               [ 1] 5077 	clr a  
      001DB0 CD 00 F8         [ 4] 5078 	call write_byte 
      001DB3 5C               [ 2] 5079 	incw x 
      001DB4 0A 01            [ 1] 5080 	dec (1,sp)
      001DB6 26 F7            [ 1] 5081 	jrne 5$	
      001DB8 84               [ 1] 5082 6$: pop a 
      001DB9 81               [ 4] 5083 	ret 
                                   5084 
                                   5085 ;----------------------
                                   5086 ; BASIC: DIR 
                                   5087 ; list saved files 
                                   5088 ;----------------------
                           000001  5089 	COUNT=1 ; files counter 
                           000002  5090 	VSIZE=2 
      001DBA                       5091 directory:
      001DBA                       5092 	_vars VSIZE 
      001DBA 52 02            [ 2]    1     sub sp,#VSIZE 
      001DBC 5F               [ 1] 5093 	clrw x 
      001DBD 1F 01            [ 2] 5094 	ldw (COUNT,sp),x 
      001DBF CF 00 13         [ 2] 5095 	ldw farptr+1,x 
      001DC2 35 01 00 12      [ 1] 5096 	mov farptr,#1 
      001DC6                       5097 dir_loop:
      001DC6 5F               [ 1] 5098 	clrw x 
      001DC7 92 AF 00 12      [ 5] 5099 	ldf a,([farptr],x)
      001DCB 27 39            [ 1] 5100 	jreq 8$ 
      001DCD                       5101 1$: ;name loop 	
      001DCD 92 AF 00 12      [ 5] 5102 	ldf a,([farptr],x)
      001DD1 27 06            [ 1] 5103 	jreq 2$ 
      001DD3 CD 01 CB         [ 4] 5104 	call putc 
      001DD6 5C               [ 2] 5105 	incw x 
      001DD7 20 F4            [ 2] 5106 	jra 1$
      001DD9 5C               [ 2] 5107 2$: incw x ; skip ending 0. 
      001DDA A6 20            [ 1] 5108 	ld a,#SPACE 
      001DDC CD 01 CB         [ 4] 5109 	call putc 
                                   5110 ; get file size 	
      001DDF 92 AF 00 12      [ 5] 5111 	ldf a,([farptr],x)
      001DE3 90 95            [ 1] 5112 	ld yh,a 
      001DE5 5C               [ 2] 5113 	incw x 
      001DE6 92 AF 00 12      [ 5] 5114 	ldf a,([farptr],x)
      001DEA 5C               [ 2] 5115 	incw x 
      001DEB 90 97            [ 1] 5116 	ld yl,a 
      001DED 90 89            [ 2] 5117 	pushw y 
      001DEF 72 FB 01         [ 2] 5118 	addw x,(1,sp)
      001DF2 5C               [ 2] 5119 	incw x ; skip EOF marker 
                                   5120 ; skip to next file 
      001DF3 CD 1B 88         [ 4] 5121 	call incr_farptr 
                                   5122 ; print file size 
      001DF6 85               [ 2] 5123 	popw x ; file size 
      001DF7 CD 09 F5         [ 4] 5124 	call print_int 
      001DFA A6 0D            [ 1] 5125 	ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001DFC CD 01 CB         [ 4] 5126 	call putc
      001DFF 1E 01            [ 2] 5127 	ldw x,(COUNT,sp)
      001E01 5C               [ 2] 5128 	incw x
      001E02 1F 01            [ 2] 5129 	ldw (COUNT,sp),x  
      001E04 20 C0            [ 2] 5130 	jra dir_loop 
      001E06                       5131 8$: ; print number of files 
      001E06 1E 01            [ 2] 5132 	ldw x,(COUNT,sp)
      001E08 CD 09 F5         [ 4] 5133 	call print_int 
      001E0B AE 1E 3B         [ 2] 5134 	ldw x,#file_count 
      001E0E CD 01 DD         [ 4] 5135 	call puts  
                                   5136 ; print drive free space 	
      001E11 A6 FF            [ 1] 5137 	ld a,#0xff 
      001E13 C0 00 17         [ 1] 5138 	sub a,ffree+2 
      001E16 C7 00 09         [ 1] 5139 	ld acc8,a 
      001E19 A6 7F            [ 1] 5140 	ld a,#0x7f 
      001E1B C2 00 16         [ 1] 5141 	sbc a,ffree+1 
      001E1E C7 00 08         [ 1] 5142 	ld acc16,a 
      001E21 A6 02            [ 1] 5143 	ld a,#2 
      001E23 C2 00 15         [ 1] 5144 	sbc a,ffree 
      001E26 C7 00 07         [ 1] 5145 	ld acc24,a 
      001E29 5F               [ 1] 5146 	clrw x  
      001E2A A6 06            [ 1] 5147 	ld a,#6 
      001E2C 97               [ 1] 5148 	ld xl,a 
      001E2D A6 0A            [ 1] 5149 	ld a,#10 
      001E2F CD 09 AD         [ 4] 5150 	call prti24 
      001E32 AE 1E 43         [ 2] 5151 	ldw x,#drive_free
      001E35 CD 01 DD         [ 4] 5152 	call puts 
      001E38                       5153 	_drop VSIZE 
      001E38 5B 02            [ 2]    1     addw sp,#VSIZE 
      001E3A 81               [ 4] 5154 	ret
      001E3B 20 66 69 6C 65 73 0A  5155 file_count: .asciz " files\n"
             00
      001E43 20 62 79 74 65 73 20  5156 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5157 
                                   5158 ;---------------------
                                   5159 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5160 ; write 1 or more byte to FLASH or EEPROM
                                   5161 ; starting at address  
                                   5162 ; input:
                                   5163 ;   expr1  	is address 
                                   5164 ;   expr2   is byte to write
                                   5165 ; output:
                                   5166 ;   none 
                                   5167 ;---------------------
                           000001  5168 	ADDR=1
                           000002  5169 	VSIZ=2 
      001E50                       5170 write:
      001E50                       5171 	_vars VSIZE 
      001E50 52 02            [ 2]    1     sub sp,#VSIZE 
      001E52 72 5F 00 12      [ 1] 5172 	clr farptr ; expect 16 bits address 
      001E56 CD 13 1F         [ 4] 5173 	call expression
      001E59 A1 04            [ 1] 5174 	cp a,#TK_INTGR 
      001E5B 27 03            [ 1] 5175 	jreq 0$
      001E5D CC 07 95         [ 2] 5176 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E60 1F 01            [ 2] 5177 0$: ldw (ADDR,sp),x 
      001E62 CD 08 5C         [ 4] 5178 	call next_token 
      001E65 A1 0D            [ 1] 5179 	cp a,#TK_COMMA 
      001E67 27 02            [ 1] 5180 	jreq 1$ 
      001E69 20 19            [ 2] 5181 	jra 9$ 
      001E6B CD 13 1F         [ 4] 5182 1$:	call expression
      001E6E A1 04            [ 1] 5183 	cp a,#TK_INTGR
      001E70 27 03            [ 1] 5184 	jreq 2$
      001E72 CC 07 95         [ 2] 5185 	jp syntax_error
      001E75 9F               [ 1] 5186 2$:	ld a,xl 
      001E76 1E 01            [ 2] 5187 	ldw x,(ADDR,sp) 
      001E78 CF 00 13         [ 2] 5188 	ldw farptr+1,x 
      001E7B 5F               [ 1] 5189 	clrw x 
      001E7C CD 00 F8         [ 4] 5190 	call write_byte
      001E7F 1E 01            [ 2] 5191 	ldw x,(ADDR,sp)
      001E81 5C               [ 2] 5192 	incw x 
      001E82 20 DC            [ 2] 5193 	jra 0$ 
      001E84                       5194 9$:
      001E84                       5195 	_drop VSIZE
      001E84 5B 02            [ 2]    1     addw sp,#VSIZE 
      001E86 81               [ 4] 5196 	ret 
                                   5197 
                                   5198 
                                   5199 ;---------------------
                                   5200 ;BASIC: CHAR(expr)
                                   5201 ; évaluate expression 
                                   5202 ; and take the 7 least 
                                   5203 ; bits as ASCII character
                                   5204 ;---------------------
      001E87                       5205 char:
      001E87 CD 12 3F         [ 4] 5206 	call func_args 
      001E8A A1 01            [ 1] 5207 	cp a,#1
      001E8C 27 03            [ 1] 5208 	jreq 1$
      001E8E CC 07 95         [ 2] 5209 	jp syntax_error
      001E91 CD 0F FB         [ 4] 5210 1$:	call dpop 
      001E94 9F               [ 1] 5211 	ld a,xl 
      001E95 A4 7F            [ 1] 5212 	and a,#0x7f 
      001E97 97               [ 1] 5213 	ld xl,a
      001E98 A6 03            [ 1] 5214 	ld a,#TK_CHAR
      001E9A 81               [ 4] 5215 	ret
                                   5216 
                                   5217 ;---------------------
                                   5218 ; BASIC: ASC(string|char)
                                   5219 ; extract first character 
                                   5220 ; of string argument 
                                   5221 ; return it as TK_INTGR 
                                   5222 ;---------------------
      001E9B                       5223 ascii:
      001E9B CD 12 3F         [ 4] 5224 	call func_args 
      001E9E CD 08 5C         [ 4] 5225 	call next_token 
      001EA1 A1 0A            [ 1] 5226 	cp a,#TK_QSTR 
      001EA3 27 07            [ 1] 5227 	jreq 1$
      001EA5 A1 03            [ 1] 5228 	cp a,#TK_CHAR 
      001EA7 27 06            [ 1] 5229 	jreq 2$ 
      001EA9 CC 07 95         [ 2] 5230 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001EAC                       5231 1$: 
      001EAC F6               [ 1] 5232 	ld a,(x)
      001EAD 20 01            [ 2] 5233 	jra 3$
      001EAF                       5234 2$: 
      001EAF 9F               [ 1] 5235 	ld a,xl 
      001EB0 97               [ 1] 5236 3$:	ld xl,a 
      001EB1 4F               [ 1] 5237 	clr a  
      001EB2 95               [ 1] 5238 	ld xh,a 
      001EB3 A6 04            [ 1] 5239 	ld a,#TK_INTGR 
      001EB5 81               [ 4] 5240 	ret 
                                   5241 
                                   5242 ;---------------------
                                   5243 ;BASIC: KEY
                                   5244 ; wait for a character 
                                   5245 ; received from STDIN 
                                   5246 ; input:
                                   5247 ;	none 
                                   5248 ; output:
                                   5249 ;	X 		ASCII character 
                                   5250 ;---------------------
      001EB6                       5251 key:
      001EB6 CD 01 D4         [ 4] 5252 	call getc 
      001EB9 5F               [ 1] 5253 	clrw x 
      001EBA 97               [ 1] 5254 	ld xl,a 
      001EBB A6 04            [ 1] 5255 	ld a,#TK_INTGR
      001EBD 81               [ 4] 5256 	ret
                                   5257 
                                   5258 ;----------------------
                                   5259 ; BASIC: QKEY
                                   5260 ; Return true if there 
                                   5261 ; is a character in 
                                   5262 ; waiting in STDIN 
                                   5263 ; input:
                                   5264 ;  none 
                                   5265 ; output:
                                   5266 ;   X 		0|1 
                                   5267 ;-----------------------
      001EBE                       5268 qkey: 
      001EBE 5F               [ 1] 5269 	clrw x 
      001EBF 72 0B 52 30 01   [ 2] 5270 	btjf UART1_SR,#UART_SR_RXNE,9$ 
      001EC4 5C               [ 2] 5271 	incw x 
      001EC5 A6 04            [ 1] 5272 9$: ld a,#TK_INTGR
      001EC7 81               [ 4] 5273 	ret 
                                   5274 
                                   5275 ;---------------------
                                   5276 ; BASIC: GPIO(expr,reg)
                                   5277 ; return gpio address 
                                   5278 ; expr {0..8}
                                   5279 ; input:
                                   5280 ;   none 
                                   5281 ; output:
                                   5282 ;   X 		gpio register address
                                   5283 ;----------------------------
      001EC8                       5284 gpio:
      001EC8 CD 12 3F         [ 4] 5285 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001ECB A1 02            [ 1] 5286 	cp a,#2
      001ECD 27 03            [ 1] 5287 	jreq 1$
      001ECF CC 07 95         [ 2] 5288 	jp syntax_error  
      001ED2                       5289 1$:	
      001ED2 AE 00 02         [ 2] 5290 	ldw x,#2
      001ED5 72 DE 00 18      [ 5] 5291 	ldw x,([dstkptr],x) ; port 
      001ED9 2B 1B            [ 1] 5292 	jrmi bad_port
      001EDB A3 00 09         [ 2] 5293 	cpw x,#9
      001EDE 2A 16            [ 1] 5294 	jrpl bad_port
      001EE0 A6 05            [ 1] 5295 	ld a,#5
      001EE2 42               [ 4] 5296 	mul x,a
      001EE3 1C 50 00         [ 2] 5297 	addw x,#GPIO_BASE 
      001EE6 89               [ 2] 5298 	pushw x 
      001EE7 CD 0F FB         [ 4] 5299 	call dpop 
      001EEA 72 FB 01         [ 2] 5300 	addw x,(1,sp)
      001EED 1F 01            [ 2] 5301 	ldw (1,sp),x  
      001EEF CD 10 22         [ 4] 5302 	call ddrop  
      001EF2 85               [ 2] 5303 	popw x 
      001EF3 A6 04            [ 1] 5304 	ld a,#TK_INTGR
      001EF5 81               [ 4] 5305 	ret
      001EF6                       5306 bad_port:
      001EF6 A6 0A            [ 1] 5307 	ld a,#ERR_BAD_VALUE
      001EF8 CC 07 97         [ 2] 5308 	jp tb_error
                                   5309 
                                   5310 
                                   5311 ;-------------------------
                                   5312 ; BASIC: UFLASH 
                                   5313 ; return user flash address
                                   5314 ; input:
                                   5315 ;  none 
                                   5316 ; output:
                                   5317 ;	A		TK_INTGR
                                   5318 ;   X 		user address 
                                   5319 ;---------------------------
      001EFB                       5320 uflash:
      001EFB AE 25 00         [ 2] 5321 	ldw x,#user_space 
      001EFE A6 04            [ 1] 5322 	ld a,#TK_INTGR 
      001F00 81               [ 4] 5323 	ret 
                                   5324 
                                   5325 
                                   5326 ;---------------------
                                   5327 ; BASIC: USR(addr[,arg])
                                   5328 ; execute a function written 
                                   5329 ; in binary code.
                                   5330 ; binary fonction should 
                                   5331 ; return token attribute in A 
                                   5332 ; and value in X. 
                                   5333 ; input:
                                   5334 ;   addr	routine address 
                                   5335 ;   arg 	is an optional argument 
                                   5336 ; output:
                                   5337 ;   A 		token attribute 
                                   5338 ;   X       returned value 
                                   5339 ;---------------------
      001F01                       5340 usr:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001F01 90 89            [ 2] 5341 	pushw y 	
      001F03 CD 12 3F         [ 4] 5342 	call func_args 
      001F06 A1 01            [ 1] 5343 	cp a,#1 
      001F08 2A 03            [ 1] 5344 	jrpl 2$ 
      001F0A CC 07 95         [ 2] 5345 	jp syntax_error 
      001F0D                       5346 2$: 
      001F0D CD 0F FB         [ 4] 5347 	call dpop 
      001F10 A1 02            [ 1] 5348 	cp a,#2 
      001F12 2B 05            [ 1] 5349 	jrmi 4$
      001F14 90 93            [ 1] 5350 	ldw y,x ; y=arg 
      001F16 CD 0F FB         [ 4] 5351 	call dpop ;x=addr 
      001F19 51               [ 1] 5352 4$:	exgw y,x ; y=addr,x=arg 
      001F1A 90 FD            [ 4] 5353 	call (y)
      001F1C 90 85            [ 2] 5354 	popw y 
      001F1E 81               [ 4] 5355 	ret 
                                   5356 
                                   5357 ;------------------------------
                                   5358 ; BASIC: BYE 
                                   5359 ; halt mcu in its lowest power mode 
                                   5360 ; wait for reset or external interrupt
                                   5361 ; do a cold start on wakeup.
                                   5362 ;------------------------------
      001F1F                       5363 bye:
      001F1F 72 0D 52 30 FB   [ 2] 5364 	btjf UART1_SR,#UART_SR_TC,.
      001F24 8E               [10] 5365 	halt
      001F25 CC 05 79         [ 2] 5366 	jp cold_start  
                                   5367 
                                   5368 ;----------------------------------
                                   5369 ; BASIC: AUTORUN "file_name" 
                                   5370 ; record in eeprom at adrress AUTORUN_NAME
                                   5371 ; the name of file to load and execute
                                   5372 ; at startup 
                                   5373 ; input:
                                   5374 ;   file_name   file to execute 
                                   5375 ; output:
                                   5376 ;   none
                                   5377 ;-----------------------------------
      001F28                       5378 autorun: 
      001F28 72 01 00 21 07   [ 2] 5379 	btjf flags,#FRUN,0$ 
      001F2D 27 05            [ 1] 5380 	jreq 0$ 
      001F2F A6 07            [ 1] 5381 	ld a,#ERR_CMD_ONLY 
      001F31 CC 07 97         [ 2] 5382 	jp tb_error 
      001F34                       5383 0$:	
      001F34 CD 08 5C         [ 4] 5384 	call next_token 
      001F37 A1 0A            [ 1] 5385 	cp a,#TK_QSTR
      001F39 27 03            [ 1] 5386 	jreq 1$
      001F3B CC 07 95         [ 2] 5387 	jp syntax_error 
      001F3E                       5388 1$:	
      001F3E 89               [ 2] 5389 	pushw x ; file name char*
      001F3F 90 93            [ 1] 5390 	ldw y,x  
      001F41 CD 1B F4         [ 4] 5391 	call search_file 
      001F44 25 05            [ 1] 5392 	jrc 2$ 
      001F46 A6 09            [ 1] 5393 	ld a,#ERR_NOT_FILE
      001F48 CC 07 97         [ 2] 5394 	jp tb_error  
      001F4B                       5395 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F4B 55 00 03 00 01   [ 1] 5396 	mov in,count 
      001F50 72 5F 00 12      [ 1] 5397 	clr farptr 
      001F54 AE 40 00         [ 2] 5398 	ldw x,#AUTORUN_NAME
      001F57 CF 00 13         [ 2] 5399 	ldw farptr+1,x 
      001F5A 1E 01            [ 2] 5400 	ldw x,(1,sp)  
      001F5C CD 02 9F         [ 4] 5401 	call strlen  ; return length in X 
      001F5F 90 85            [ 2] 5402 	popw y 
      001F61 89               [ 2] 5403 	pushw x 
      001F62 5F               [ 1] 5404 	clrw x 
      001F63 CD 01 6D         [ 4] 5405 	call write_block 
      001F66                       5406 	_drop 2 
      001F66 5B 02            [ 2]    1     addw sp,#2 
      001F68 81               [ 4] 5407 	ret 
                                   5408 
                                   5409 ;----------------------------------
                                   5410 ; BASIC: SLEEP 
                                   5411 ; halt mcu until reset or external
                                   5412 ; interrupt.
                                   5413 ; Resume progam after SLEEP command
                                   5414 ;----------------------------------
      001F69                       5415 sleep:
      001F69 72 0D 52 30 FB   [ 2] 5416 	btjf UART1_SR,#UART_SR_TC,.
      001F6E 72 16 00 21      [ 1] 5417 	bset flags,#FSLEEP
      001F72 8E               [10] 5418 	halt 
      001F73 81               [ 4] 5419 	ret 
                                   5420 
                                   5421 ;-------------------------------
                                   5422 ; BASIC: PAUSE expr 
                                   5423 ; suspend execution for n msec.
                                   5424 ; input:
                                   5425 ;	none
                                   5426 ; output:
                                   5427 ;	none 
                                   5428 ;------------------------------
      001F74                       5429 pause:
      001F74 CD 13 1F         [ 4] 5430 	call expression
      001F77 A1 04            [ 1] 5431 	cp a,#TK_INTGR
      001F79 27 03            [ 1] 5432 	jreq pause02 
      001F7B CC 07 95         [ 2] 5433 	jp syntax_error
      001F7E                       5434 pause02: 
      001F7E 5D               [ 2] 5435 1$: tnzw x 
      001F7F 27 04            [ 1] 5436 	jreq 2$
      001F81 8F               [10] 5437 	wfi 
      001F82 5A               [ 2] 5438 	decw x 
      001F83 26 F9            [ 1] 5439 	jrne 1$
      001F85 4F               [ 1] 5440 2$:	clr a 
      001F86 81               [ 4] 5441 	ret 
                                   5442 
                                   5443 ;------------------------------
                                   5444 ; BASIC: AWU expr
                                   5445 ; halt mcu for 'expr' milliseconds
                                   5446 ; use Auto wakeup peripheral
                                   5447 ; all oscillators stopped except LSI
                                   5448 ; range: 1ms - 511ms
                                   5449 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   5450 ;  none
                                   5451 ; output:
                                   5452 ;  none:
                                   5453 ;------------------------------
      001F87                       5454 awu:
      001F87 CD 13 1F         [ 4] 5455   call expression
      001F8A A1 04            [ 1] 5456   cp a,#TK_INTGR
      001F8C 27 03            [ 1] 5457   jreq awu02
      001F8E CC 07 95         [ 2] 5458   jp syntax_error
      001F91                       5459 awu02:
      001F91 A3 14 00         [ 2] 5460   cpw x,#5120
      001F94 2B 0C            [ 1] 5461   jrmi 1$ 
      001F96 35 0F 50 F2      [ 1] 5462   mov AWU_TBR,#15 
      001F9A A6 1E            [ 1] 5463   ld a,#30
      001F9C 62               [ 2] 5464   div x,a
      001F9D A6 10            [ 1] 5465   ld a,#16
      001F9F 62               [ 2] 5466   div x,a 
      001FA0 20 1E            [ 2] 5467   jra 4$
      001FA2                       5468 1$: 
      001FA2 A3 08 00         [ 2] 5469   cpw x,#2048
      001FA5 2B 09            [ 1] 5470   jrmi 2$ 
      001FA7 35 0E 50 F2      [ 1] 5471   mov AWU_TBR,#14
      001FAB A6 50            [ 1] 5472   ld a,#80
      001FAD 62               [ 2] 5473   div x,a 
      001FAE 20 10            [ 2] 5474   jra 4$   
      001FB0                       5475 2$:
      001FB0 35 07 50 F2      [ 1] 5476   mov AWU_TBR,#7
      001FB4                       5477 3$:  
                                   5478 ; while X > 64  divide by 2 and increment AWU_TBR 
      001FB4 A3 00 40         [ 2] 5479   cpw x,#64 
      001FB7 23 07            [ 2] 5480   jrule 4$ 
      001FB9 72 5C 50 F2      [ 1] 5481   inc AWU_TBR 
      001FBD 54               [ 2] 5482   srlw x 
      001FBE 20 F4            [ 2] 5483   jra 3$ 
      001FC0                       5484 4$:
      001FC0 9F               [ 1] 5485   ld a, xl
      001FC1 4A               [ 1] 5486   dec a 
      001FC2 27 01            [ 1] 5487   jreq 5$
      001FC4 4A               [ 1] 5488   dec a 	
      001FC5                       5489 5$: 
      001FC5 A4 3E            [ 1] 5490   and a,#0x3e 
      001FC7 C7 50 F1         [ 1] 5491   ld AWU_APR,a 
      001FCA 72 18 50 F0      [ 1] 5492   bset AWU_CSR,#AWU_CSR_AWUEN
      001FCE 8E               [10] 5493   halt 
                                   5494 
      001FCF 81               [ 4] 5495   ret 
                                   5496 
                                   5497 ;------------------------------
                                   5498 ; BASIC: TICKS
                                   5499 ; return msec ticks counter value 
                                   5500 ; input:
                                   5501 ; 	none 
                                   5502 ; output:
                                   5503 ;	X 		TK_INTGR
                                   5504 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001FD0                       5505 get_ticks:
      001FD0 CE 00 0A         [ 2] 5506 	ldw x,ticks 
      001FD3 A6 04            [ 1] 5507 	ld a,#TK_INTGR
      001FD5 81               [ 4] 5508 	ret 
                                   5509 
                                   5510 
                                   5511 
                                   5512 ;------------------------------
                                   5513 ; BASIC: ABS(expr)
                                   5514 ; return absolute value of expr.
                                   5515 ; input:
                                   5516 ;   none
                                   5517 ; output:
                                   5518 ;   X     	positive integer
                                   5519 ;-------------------------------
      001FD6                       5520 abs:
      001FD6 CD 12 3F         [ 4] 5521 	call func_args 
      001FD9 A1 01            [ 1] 5522 	cp a,#1 
      001FDB 27 03            [ 1] 5523 	jreq 0$ 
      001FDD CC 07 95         [ 2] 5524 	jp syntax_error
      001FE0                       5525 0$:  
      001FE0 CD 0F FB         [ 4] 5526     call dpop   
      001FE3 9E               [ 1] 5527 	ld a,xh 
      001FE4 A5 80            [ 1] 5528 	bcp a,#0x80 
      001FE6 27 01            [ 1] 5529 	jreq 2$ 
      001FE8 50               [ 2] 5530 	negw x 
      001FE9 A6 04            [ 1] 5531 2$: ld a,#TK_INTGR 
      001FEB 81               [ 4] 5532 	ret 
                                   5533 
                                   5534 ;------------------------------
                                   5535 ; BASIC: AND(expr1,expr2)
                                   5536 ; Apply bit AND relation between
                                   5537 ; the 2 arguments, i.e expr1 & expr2 
                                   5538 ; output:
                                   5539 ; 	A 		TK_INTGR
                                   5540 ;   X 		result 
                                   5541 ;------------------------------
      001FEC                       5542 bit_and:
      001FEC CD 12 3F         [ 4] 5543 	call func_args 
      001FEF A1 02            [ 1] 5544 	cp a,#2
      001FF1 27 03            [ 1] 5545 	jreq 1$
      001FF3 CC 07 95         [ 2] 5546 	jp syntax_error 
      001FF6 CD 0F FB         [ 4] 5547 1$:	call dpop 
      001FF9 89               [ 2] 5548 	pushw x 
      001FFA CD 0F FB         [ 4] 5549 	call dpop 
      001FFD 9E               [ 1] 5550 	ld a,xh 
      001FFE 14 01            [ 1] 5551 	and a,(1,sp)
      002000 95               [ 1] 5552 	ld xh,a 
      002001 9F               [ 1] 5553 	ld a,xl
      002002 14 02            [ 1] 5554 	and a,(2,sp)
      002004 97               [ 1] 5555 	ld xl,a 
      002005                       5556 	_drop 2 
      002005 5B 02            [ 2]    1     addw sp,#2 
      002007 A6 04            [ 1] 5557 	ld a,#TK_INTGR
      002009 81               [ 4] 5558 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   5559 
                                   5560 ;------------------------------
                                   5561 ; BASIC: OR(expr1,expr2)
                                   5562 ; Apply bit OR relation between
                                   5563 ; the 2 arguments, i.e expr1 | expr2 
                                   5564 ; output:
                                   5565 ; 	A 		TK_INTGR
                                   5566 ;   X 		result 
                                   5567 ;------------------------------
      00200A                       5568 bit_or:
      00200A CD 12 3F         [ 4] 5569 	call func_args 
      00200D A1 02            [ 1] 5570 	cp a,#2
      00200F 27 03            [ 1] 5571 	jreq 1$
      002011 CC 07 95         [ 2] 5572 	jp syntax_error 
      002014                       5573 1$: 
      002014 CD 0F FB         [ 4] 5574 	call dpop 
      002017 89               [ 2] 5575 	pushw x 
      002018 CD 0F FB         [ 4] 5576 	call dpop 
      00201B 9E               [ 1] 5577 	ld a,xh 
      00201C 1A 01            [ 1] 5578 	or a,(1,sp)
      00201E 95               [ 1] 5579 	ld xh,a 
      00201F 9F               [ 1] 5580 	ld a,xl 
      002020 1A 02            [ 1] 5581 	or a,(2,sp)
      002022 97               [ 1] 5582 	ld xl,a 
      002023                       5583 	_drop 2 
      002023 5B 02            [ 2]    1     addw sp,#2 
      002025 A6 04            [ 1] 5584 	ld a,#TK_INTGR 
      002027 81               [ 4] 5585 	ret
                                   5586 
                                   5587 ;------------------------------
                                   5588 ; BASIC: XOR(expr1,expr2)
                                   5589 ; Apply bit XOR relation between
                                   5590 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5591 ; output:
                                   5592 ; 	A 		TK_INTGR
                                   5593 ;   X 		result 
                                   5594 ;------------------------------
      002028                       5595 bit_xor:
      002028 CD 12 3F         [ 4] 5596 	call func_args 
      00202B A1 02            [ 1] 5597 	cp a,#2
      00202D 27 03            [ 1] 5598 	jreq 1$
      00202F CC 07 95         [ 2] 5599 	jp syntax_error 
      002032                       5600 1$: 
      002032 CD 0F FB         [ 4] 5601 	call dpop 
      002035 89               [ 2] 5602 	pushw x 
      002036 CD 0F FB         [ 4] 5603 	call dpop 
      002039 9E               [ 1] 5604 	ld a,xh 
      00203A 18 01            [ 1] 5605 	xor a,(1,sp)
      00203C 95               [ 1] 5606 	ld xh,a 
      00203D 9F               [ 1] 5607 	ld a,xl 
      00203E 18 02            [ 1] 5608 	xor a,(2,sp)
      002040 97               [ 1] 5609 	ld xl,a 
      002041                       5610 	_drop 2 
      002041 5B 02            [ 2]    1     addw sp,#2 
      002043 A6 04            [ 1] 5611 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      002045 81               [ 4] 5612 	ret 
                                   5613 
                                   5614 ;------------------------------
                                   5615 ; BASIC: LSHIFT(expr1,expr2)
                                   5616 ; logical shift left expr1 by 
                                   5617 ; expr2 bits 
                                   5618 ; output:
                                   5619 ; 	A 		TK_INTGR
                                   5620 ;   X 		result 
                                   5621 ;------------------------------
      002046                       5622 lshift:
      002046 CD 12 3F         [ 4] 5623 	call func_args
      002049 A1 02            [ 1] 5624 	cp a,#2 
      00204B 27 03            [ 1] 5625 	jreq 1$
      00204D CC 07 95         [ 2] 5626 	jp syntax_error
      002050 CD 0F FB         [ 4] 5627 1$: call dpop  
      002053 51               [ 1] 5628 	exgw x,y 
      002054 CD 0F FB         [ 4] 5629 	call dpop
      002057 90 5D            [ 2] 5630 	tnzw y 
      002059 27 05            [ 1] 5631 	jreq 4$
      00205B 58               [ 2] 5632 2$:	sllw x 
      00205C 90 5A            [ 2] 5633 	decw y 
      00205E 26 FB            [ 1] 5634 	jrne 2$
      002060                       5635 4$:  
      002060 A6 04            [ 1] 5636 	ld a,#TK_INTGR
      002062 81               [ 4] 5637 	ret
                                   5638 
                                   5639 ;------------------------------
                                   5640 ; BASIC: RSHIFT(expr1,expr2)
                                   5641 ; logical shift right expr1 by 
                                   5642 ; expr2 bits.
                                   5643 ; output:
                                   5644 ; 	A 		TK_INTGR
                                   5645 ;   X 		result 
                                   5646 ;------------------------------
      002063                       5647 rshift:
      002063 CD 12 3F         [ 4] 5648 	call func_args
      002066 A1 02            [ 1] 5649 	cp a,#2 
      002068 27 03            [ 1] 5650 	jreq 1$
      00206A CC 07 95         [ 2] 5651 	jp syntax_error
      00206D CD 0F FB         [ 4] 5652 1$: call dpop  
      002070 51               [ 1] 5653 	exgw x,y 
      002071 CD 0F FB         [ 4] 5654 	call dpop
      002074 90 5D            [ 2] 5655 	tnzw y 
      002076 27 05            [ 1] 5656 	jreq 4$
      002078 54               [ 2] 5657 2$:	srlw x 
      002079 90 5A            [ 2] 5658 	decw y 
      00207B 26 FB            [ 1] 5659 	jrne 2$
      00207D                       5660 4$:  
      00207D A6 04            [ 1] 5661 	ld a,#TK_INTGR
      00207F 81               [ 4] 5662 	ret
                                   5663 
                                   5664 ;--------------------------
                                   5665 ; BASIC: FCPU integer
                                   5666 ; set CPU frequency 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   5667 ;-------------------------- 
                                   5668 
      002080                       5669 fcpu:
      002080 A6 04            [ 1] 5670 	ld a,#TK_INTGR
      002082 CD 12 0E         [ 4] 5671 	call expect 
      002085 9F               [ 1] 5672 	ld a,xl 
      002086 A4 07            [ 1] 5673 	and a,#7 
      002088 C7 50 C6         [ 1] 5674 	ld CLK_CKDIVR,a 
      00208B 81               [ 4] 5675 	ret 
                                   5676 
                                   5677 ;------------------------------
                                   5678 ; BASIC: PMODE pin#, mode 
                                   5679 ; define pin as input or output
                                   5680 ; pin#: {0..15}
                                   5681 ; mode: INPUT|OUTPUT  
                                   5682 ;------------------------------
                           000001  5683 	PINNO=1
                           000001  5684 	VSIZE=1
      00208C                       5685 pin_mode:
      00208C                       5686 	_vars VSIZE 
      00208C 52 01            [ 2]    1     sub sp,#VSIZE 
      00208E CD 12 1B         [ 4] 5687 	call arg_list 
      002091 A1 02            [ 1] 5688 	cp a,#2 
      002093 27 03            [ 1] 5689 	jreq 1$
      002095 CC 07 95         [ 2] 5690 	jp syntax_error 
      002098 CD 0F FB         [ 4] 5691 1$: call dpop ; mode 
      00209B 51               [ 1] 5692 	exgw x,y 
      00209C CD 0F FB         [ 4] 5693 	call dpop ; Dx pin 
      00209F CD 20 D1         [ 4] 5694 	call select_pin 
      0020A2 6B 01            [ 1] 5695 	ld (PINNO,sp),a  
      0020A4 A6 01            [ 1] 5696 	ld a,#1 
      0020A6 0D 01            [ 1] 5697 	tnz (PINNO,sp)
      0020A8 27 0B            [ 1] 5698 	jreq 4$
      0020AA 48               [ 1] 5699 2$:	sll a 
      0020AB 0A 01            [ 1] 5700 	dec (PINNO,sp)
      0020AD 26 FB            [ 1] 5701 	jrne 2$ 
      0020AF 6B 01            [ 1] 5702 	ld (PINNO,sp),a
      0020B1 EA 03            [ 1] 5703 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      0020B3 E7 03            [ 1] 5704 	ld (GPIO_CR1,x),a 
      0020B5 90 A3 00 01      [ 2] 5705 4$:	cpw y,#OUTP 
      0020B9 27 07            [ 1] 5706 	jreq 6$
                                   5707 ; input mode
      0020BB 7B 01            [ 1] 5708 	ld a,(PINNO,sp)
      0020BD 43               [ 1] 5709 	cpl a 
      0020BE E4 02            [ 1] 5710 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      0020C0 20 0A            [ 2] 5711 	jra 9$
      0020C2                       5712 6$: ;output mode  
      0020C2 7B 01            [ 1] 5713 	ld a,(PINNO,sp)
      0020C4 EA 04            [ 1] 5714 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      0020C6 E7 04            [ 1] 5715 	ld (GPIO_CR2,x),a 
      0020C8 7B 01            [ 1] 5716 	ld a,(PINNO,sp)
      0020CA EA 02            [ 1] 5717 	or a,(GPIO_DDR,x) ; bit==1 for output 
      0020CC E7 02            [ 1] 5718 9$:	ld (GPIO_DDR,x),a 
      0020CE                       5719 	_drop VSIZE 
      0020CE 5B 01            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0020D0 81               [ 4] 5720 	ret
                                   5721 
                                   5722 ;------------------------
                                   5723 ; select pin 
                                   5724 ; input:
                                   5725 ;   X 	 {0..15} Arduino Dx 
                                   5726 ; output:
                                   5727 ;   A     stm8s208 pin 
                                   5728 ;   X     base address s208 GPIO port 
                                   5729 ;---------------------------
      0020D1                       5730 select_pin:
      0020D1 58               [ 2] 5731 	sllw x 
      0020D2 1C 20 E1         [ 2] 5732 	addw x,#arduino_to_8s208 
      0020D5 FE               [ 2] 5733 	ldw x,(x)
      0020D6 9F               [ 1] 5734 	ld a,xl 
      0020D7 88               [ 1] 5735 	push a 
      0020D8 5E               [ 1] 5736 	swapw x 
      0020D9 A6 05            [ 1] 5737 	ld a,#5 
      0020DB 42               [ 4] 5738 	mul x,a 
      0020DC 1C 50 00         [ 2] 5739 	addw x,#GPIO_BASE 
      0020DF 84               [ 1] 5740 	pop a 
      0020E0 81               [ 4] 5741 	ret 
                                   5742 ; translation from Arduino D0..D15 to stm8s208rb 
      0020E1                       5743 arduino_to_8s208:
      0020E1 03 06                 5744 .byte 3,6 ; D0 
      0020E3 03 05                 5745 .byte 3,5 ; D1 
      0020E5 04 00                 5746 .byte 4,0 ; D2 
      0020E7 02 01                 5747 .byte 2,1 ; D3
      0020E9 06 00                 5748 .byte 6,0 ; D4
      0020EB 02 02                 5749 .byte 2,2 ; D5
      0020ED 02 03                 5750 .byte 2,3 ; D6
      0020EF 03 01                 5751 .byte 3,1 ; D7
      0020F1 03 03                 5752 .byte 3,3 ; D8
      0020F3 02 04                 5753 .byte 2,4 ; D9
      0020F5 04 05                 5754 .byte 4,5 ; D10
      0020F7 02 06                 5755 .byte 2,6 ; D11
      0020F9 02 07                 5756 .byte 2,7 ; D12
      0020FB 02 05                 5757 .byte 2,5 ; D13
      0020FD 04 02                 5758 .byte 4,2 ; D14
      0020FF 04 01                 5759 .byte 4,1 ; D15
                                   5760 
                                   5761 
                                   5762 ;------------------------------
                                   5763 ; BASIC: RND(expr)
                                   5764 ; return random number 
                                   5765 ; between 1 and expr inclusive
                                   5766 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5767 ; input:
                                   5768 ; 	none 
                                   5769 ; output:
                                   5770 ;	X 		random positive integer 
                                   5771 ;------------------------------
      002101                       5772 random:
      002101 CD 12 3F         [ 4] 5773 	call func_args 
      002104 A1 01            [ 1] 5774 	cp a,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      002106 27 03            [ 1] 5775 	jreq 1$
      002108 CC 07 95         [ 2] 5776 	jp syntax_error
      00210B                       5777 1$: 
      00210B CD 0F FB         [ 4] 5778 	call dpop 
      00210E 89               [ 2] 5779 	pushw x 
      00210F 9E               [ 1] 5780 	ld a,xh 
      002110 A5 80            [ 1] 5781 	bcp a,#0x80 
      002112 27 05            [ 1] 5782 	jreq 2$
      002114 A6 0A            [ 1] 5783 	ld a,#ERR_BAD_VALUE
      002116 CC 07 97         [ 2] 5784 	jp tb_error
      002119                       5785 2$: 
                                   5786 ; acc16=(x<<5)^x 
      002119 CE 00 0E         [ 2] 5787 	ldw x,seedx 
      00211C 58               [ 2] 5788 	sllw x 
      00211D 58               [ 2] 5789 	sllw x 
      00211E 58               [ 2] 5790 	sllw x 
      00211F 58               [ 2] 5791 	sllw x 
      002120 58               [ 2] 5792 	sllw x 
      002121 9E               [ 1] 5793 	ld a,xh 
      002122 C8 00 0E         [ 1] 5794 	xor a,seedx 
      002125 C7 00 08         [ 1] 5795 	ld acc16,a 
      002128 9F               [ 1] 5796 	ld a,xl 
      002129 C8 00 0F         [ 1] 5797 	xor a,seedx+1 
      00212C C7 00 09         [ 1] 5798 	ld acc8,a 
                                   5799 ; seedx=seedy 
      00212F CE 00 10         [ 2] 5800 	ldw x,seedy 
      002132 CF 00 0E         [ 2] 5801 	ldw seedx,x  
                                   5802 ; seedy=seedy^(seedy>>1)
      002135 90 54            [ 2] 5803 	srlw y 
      002137 90 9E            [ 1] 5804 	ld a,yh 
      002139 C8 00 10         [ 1] 5805 	xor a,seedy 
      00213C C7 00 10         [ 1] 5806 	ld seedy,a  
      00213F 90 9F            [ 1] 5807 	ld a,yl 
      002141 C8 00 11         [ 1] 5808 	xor a,seedy+1 
      002144 C7 00 11         [ 1] 5809 	ld seedy+1,a 
                                   5810 ; acc16>>3 
      002147 CE 00 08         [ 2] 5811 	ldw x,acc16 
      00214A 54               [ 2] 5812 	srlw x 
      00214B 54               [ 2] 5813 	srlw x 
      00214C 54               [ 2] 5814 	srlw x 
                                   5815 ; x=acc16^x 
      00214D 9E               [ 1] 5816 	ld a,xh 
      00214E C8 00 08         [ 1] 5817 	xor a,acc16 
      002151 95               [ 1] 5818 	ld xh,a 
      002152 9F               [ 1] 5819 	ld a,xl 
      002153 C8 00 09         [ 1] 5820 	xor a,acc8 
      002156 97               [ 1] 5821 	ld xl,a 
                                   5822 ; seedy=x^seedy 
      002157 C8 00 11         [ 1] 5823 	xor a,seedy+1
      00215A 97               [ 1] 5824 	ld xl,a 
      00215B 9E               [ 1] 5825 	ld a,xh 
      00215C C8 00 10         [ 1] 5826 	xor a,seedy
      00215F 95               [ 1] 5827 	ld xh,a 
      002160 CF 00 10         [ 2] 5828 	ldw seedy,x 
                                   5829 ; return seedy modulo expr + 1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002163 90 85            [ 2] 5830 	popw y 
      002165 65               [ 2] 5831 	divw x,y 
      002166 93               [ 1] 5832 	ldw x,y 
      002167 5C               [ 2] 5833 	incw x 
      002168 A6 04            [ 1] 5834 	ld a,#TK_INTGR
      00216A 81               [ 4] 5835 	ret 
                                   5836 
                                   5837 ;---------------------------------
                                   5838 ; BASIC: WORDS 
                                   5839 ; affiche la listes des mots du
                                   5840 ; dictionnaire.
                                   5841 ;---------------------------------
                           000001  5842 	WLEN=1
                           000002  5843 	LLEN=2  
                           000002  5844 	VSIZE=2 
      00216B                       5845 words:
      00216B                       5846 	_vars VSIZE
      00216B 52 02            [ 2]    1     sub sp,#VSIZE 
      00216D 0F 02            [ 1] 5847 	clr (LLEN,sp)
      00216F 90 AE 24 80      [ 2] 5848 	ldw y,#kword_dict+2
      002173 93               [ 1] 5849 0$:	ldw x,y
      002174 F6               [ 1] 5850 	ld a,(x)
      002175 A4 0F            [ 1] 5851 	and a,#15 
      002177 6B 01            [ 1] 5852 	ld (WLEN,sp),a 
      002179 5C               [ 2] 5853 1$:	incw x 
      00217A F6               [ 1] 5854 	ld a,(x)
      00217B CD 01 CB         [ 4] 5855 	call putc 
      00217E 0C 02            [ 1] 5856 	inc (LLEN,sp)
      002180 0A 01            [ 1] 5857 	dec (WLEN,sp)
      002182 26 F5            [ 1] 5858 	jrne 1$
      002184 A6 46            [ 1] 5859 	ld a,#70
      002186 11 02            [ 1] 5860 	cp a,(LLEN,sp)
      002188 2B 09            [ 1] 5861 	jrmi 2$   
      00218A A6 20            [ 1] 5862 	ld a,#SPACE 
      00218C CD 01 CB         [ 4] 5863 	call putc 
      00218F 0C 02            [ 1] 5864 	inc (LLEN,sp) 
      002191 20 07            [ 2] 5865 	jra 3$
      002193 A6 0D            [ 1] 5866 2$: ld a,#CR 
      002195 CD 01 CB         [ 4] 5867 	call putc 
      002198 0F 02            [ 1] 5868 	clr (LLEN,sp)
      00219A 72 A2 00 02      [ 2] 5869 3$:	subw y,#2 
      00219E 90 FE            [ 2] 5870 	ldw y,(y)
      0021A0 26 D1            [ 1] 5871 	jrne 0$  
      0021A2                       5872 	_drop VSIZE 
      0021A2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0021A4 81               [ 4] 5873 	ret 
                                   5874 
                                   5875 
                                   5876 ;-----------------------------
                                   5877 ; BASIC: TIMER expr 
                                   5878 ; initialize count down timer 
                                   5879 ;-----------------------------
      0021A5                       5880 set_timer:
      0021A5 CD 12 1B         [ 4] 5881 	call arg_list
      0021A8 A1 01            [ 1] 5882 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      0021AA 27 03            [ 1] 5883 	jreq 1$
      0021AC CC 07 95         [ 2] 5884 	jp syntax_error
      0021AF                       5885 1$: 
      0021AF CD 0F FB         [ 4] 5886 	call dpop 
      0021B2 CF 00 0C         [ 2] 5887 	ldw timer,x 
      0021B5 81               [ 4] 5888 	ret 
                                   5889 
                                   5890 ;------------------------------
                                   5891 ; BASIC: TIMEOUT 
                                   5892 ; return state of timer 
                                   5893 ;------------------------------
      0021B6                       5894 timeout:
      0021B6 CE 00 0C         [ 2] 5895 	ldw x,timer 
      0021B9                       5896 logical_complement:
      0021B9 53               [ 2] 5897 	cplw x 
      0021BA A3 FF FF         [ 2] 5898 	cpw x,#-1
      0021BD 27 01            [ 1] 5899 	jreq 2$
      0021BF 5F               [ 1] 5900 	clrw x 
      0021C0 A6 04            [ 1] 5901 2$:	ld a,#TK_INTGR
      0021C2 81               [ 4] 5902 	ret 
                                   5903 
                                   5904 ;--------------------------------
                                   5905 ; BASIC NOT(expr) 
                                   5906 ; return logical complement of expr
                                   5907 ;--------------------------------
      0021C3                       5908 func_not:
      0021C3 CD 12 3F         [ 4] 5909 	call func_args  
      0021C6 A1 01            [ 1] 5910 	cp a,#1
      0021C8 27 03            [ 1] 5911 	jreq 1$
      0021CA CC 07 95         [ 2] 5912 	jp syntax_error
      0021CD CD 0F FB         [ 4] 5913 1$:	call dpop 
      0021D0 20 E7            [ 2] 5914 	jra logical_complement
                                   5915 
                                   5916 
                                   5917 ;*********************************
                                   5918 
                                   5919 ;------------------------------
                                   5920 ;      dictionary 
                                   5921 ; format:
                                   5922 ;   link:   2 bytes 
                                   5923 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5924 ;   cmd_name: 16 byte max 
                                   5925 ;   code_address: 2 bytes 
                                   5926 ;------------------------------
                                   5927 	.macro _dict_entry len,name,cmd 
                                   5928 	.word LINK 
                                   5929 	LINK=.
                                   5930 name:
                                   5931 	.byte len 	
                                   5932 	.ascii "name"
                                   5933 	.word cmd 
                                   5934 	.endm 
                                   5935 
                           000000  5936 	LINK=0
      0021D2                       5937 kword_end:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0021D2                       5938 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      0021D2 00 00                    1 	.word LINK 
                           0021D4     2 	LINK=.
      0021D4                          3 XPEEK:
      0021D4 45                       4 	.byte 5+F_IFUNC 	
      0021D5 58 50 45 45 4B           5 	.ascii "XPEEK"
      0021DA 18 30                    6 	.word xpeek 
      0021DC                       5939 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      0021DC 21 D4                    1 	.word LINK 
                           0021DE     2 	LINK=.
      0021DE                          3 XOR:
      0021DE 43                       4 	.byte 3+F_IFUNC 	
      0021DF 58 4F 52                 5 	.ascii "XOR"
      0021E2 20 28                    6 	.word bit_xor 
      0021E4                       5940 	_dict_entry,5,WRITE,write  
      0021E4 21 DE                    1 	.word LINK 
                           0021E6     2 	LINK=.
      0021E6                          3 WRITE:
      0021E6 05                       4 	.byte 5 	
      0021E7 57 52 49 54 45           5 	.ascii "WRITE"
      0021EC 1E 50                    6 	.word write 
      0021EE                       5941 	_dict_entry,5,WORDS,words 
      0021EE 21 E6                    1 	.word LINK 
                           0021F0     2 	LINK=.
      0021F0                          3 WORDS:
      0021F0 05                       4 	.byte 5 	
      0021F1 57 4F 52 44 53           5 	.ascii "WORDS"
      0021F6 21 6B                    6 	.word words 
      0021F8                       5942 	_dict_entry 4,WAIT,wait 
      0021F8 21 F0                    1 	.word LINK 
                           0021FA     2 	LINK=.
      0021FA                          3 WAIT:
      0021FA 04                       4 	.byte 4 	
      0021FB 57 41 49 54              5 	.ascii "WAIT"
      0021FF 17 77                    6 	.word wait 
      002201                       5943 	_dict_entry,3+F_IFUNC,USR,usr
      002201 21 FA                    1 	.word LINK 
                           002203     2 	LINK=.
      002203                          3 USR:
      002203 43                       4 	.byte 3+F_IFUNC 	
      002204 55 53 52                 5 	.ascii "USR"
      002207 1F 01                    6 	.word usr 
      002209                       5944 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      002209 22 03                    1 	.word LINK 
                           00220B     2 	LINK=.
      00220B                          3 UFLASH:
      00220B 46                       4 	.byte 6+F_IFUNC 	
      00220C 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002212 1E FB                    6 	.word uflash 
      002214                       5945 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      002214 22 0B                    1 	.word LINK 
                           002216     2 	LINK=.
      002216                          3 UBOUND:
      002216 46                       4 	.byte 6+F_IFUNC 	
      002217 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      00221D 13 DE                    6 	.word ubound 
      00221F                       5946 	_dict_entry,2,TO,to
      00221F 22 16                    1 	.word LINK 
                           002221     2 	LINK=.
      002221                          3 TO:
      002221 02                       4 	.byte 2 	
      002222 54 4F                    5 	.ascii "TO"
      002224 18 8E                    6 	.word to 
      002226                       5947 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      002226 22 21                    1 	.word LINK 
                           002228     2 	LINK=.
      002228                          3 TIMEOUT:
      002228 47                       4 	.byte 7+F_IFUNC 	
      002229 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      002230 21 B6                    6 	.word timeout 
      002232                       5948 	_dict_entry,5,TIMER,set_timer
      002232 22 28                    1 	.word LINK 
                           002234     2 	LINK=.
      002234                          3 TIMER:
      002234 05                       4 	.byte 5 	
      002235 54 49 4D 45 52           5 	.ascii "TIMER"
      00223A 21 A5                    6 	.word set_timer 
      00223C                       5949 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      00223C 22 34                    1 	.word LINK 
                           00223E     2 	LINK=.
      00223E                          3 TICKS:
      00223E 45                       4 	.byte 5+F_IFUNC 	
      00223F 54 49 43 4B 53           5 	.ascii "TICKS"
      002244 1F D0                    6 	.word get_ticks 
      002246                       5950 	_dict_entry,4,STOP,stop 
      002246 22 3E                    1 	.word LINK 
                           002248     2 	LINK=.
      002248                          3 STOP:
      002248 04                       4 	.byte 4 	
      002249 53 54 4F 50              5 	.ascii "STOP"
      00224D 1A 0A                    6 	.word stop 
      00224F                       5951 	_dict_entry,4,STEP,step 
      00224F 22 48                    1 	.word LINK 
                           002251     2 	LINK=.
      002251                          3 STEP:
      002251 04                       4 	.byte 4 	
      002252 53 54 45 50              5 	.ascii "STEP"
      002256 18 BE                    6 	.word step 
      002258                       5952 	_dict_entry,5,SLEEP,sleep 
      002258 22 51                    1 	.word LINK 
                           00225A     2 	LINK=.
      00225A                          3 SLEEP:
      00225A 05                       4 	.byte 5 	
      00225B 53 4C 45 45 50           5 	.ascii "SLEEP"
      002260 1F 69                    6 	.word sleep 
      002262                       5953 	_dict_entry,4+F_IFUNC,SIZE,size
      002262 22 5A                    1 	.word LINK 
                           002264     2 	LINK=.
      002264                          3 SIZE:
      002264 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002265 53 49 5A 45              5 	.ascii "SIZE"
      002269 13 D4                    6 	.word size 
      00226B                       5954     _dict_entry,4,SHOW,show 
      00226B 22 64                    1 	.word LINK 
                           00226D     2 	LINK=.
      00226D                          3 SHOW:
      00226D 04                       4 	.byte 4 	
      00226E 53 48 4F 57              5 	.ascii "SHOW"
      002272 13 BA                    6 	.word show 
      002274                       5955 	_dict_entry,4,SAVE,save
      002274 22 6D                    1 	.word LINK 
                           002276     2 	LINK=.
      002276                          3 SAVE:
      002276 04                       4 	.byte 4 	
      002277 53 41 56 45              5 	.ascii "SAVE"
      00227B 1C 3F                    6 	.word save 
      00227D                       5956 	_dict_entry 3,RUN,run
      00227D 22 76                    1 	.word LINK 
                           00227F     2 	LINK=.
      00227F                          3 RUN:
      00227F 03                       4 	.byte 3 	
      002280 52 55 4E                 5 	.ascii "RUN"
      002283 19 C7                    6 	.word run 
      002285                       5957 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      002285 22 7F                    1 	.word LINK 
                           002287     2 	LINK=.
      002287                          3 RSHIFT:
      002287 46                       4 	.byte 6+F_IFUNC 	
      002288 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00228E 20 63                    6 	.word rshift 
      002290                       5958 	_dict_entry,3+F_IFUNC,RND,random 
      002290 22 87                    1 	.word LINK 
                           002292     2 	LINK=.
      002292                          3 RND:
      002292 43                       4 	.byte 3+F_IFUNC 	
      002293 52 4E 44                 5 	.ascii "RND"
      002296 21 01                    6 	.word random 
      002298                       5959 	_dict_entry,6,RETURN,return 
      002298 22 92                    1 	.word LINK 
                           00229A     2 	LINK=.
      00229A                          3 RETURN:
      00229A 06                       4 	.byte 6 	
      00229B 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0022A1 19 A7                    6 	.word return 
      0022A3                       5960 	_dict_entry 6,REMARK,rem 
      0022A3 22 9A                    1 	.word LINK 
                           0022A5     2 	LINK=.
      0022A5                          3 REMARK:
      0022A5 06                       4 	.byte 6 	
      0022A6 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0022AC 17 71                    6 	.word rem 
      0022AE                       5961 	_dict_entry,6,REBOOT,cold_start 
      0022AE 22 A5                    1 	.word LINK 
                           0022B0     2 	LINK=.
      0022B0                          3 REBOOT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0022B0 06                       4 	.byte 6 	
      0022B1 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0022B7 05 79                    6 	.word cold_start 
      0022B9                       5962 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      0022B9 22 B0                    1 	.word LINK 
                           0022BB     2 	LINK=.
      0022BB                          3 QKEY:
      0022BB 44                       4 	.byte 4+F_IFUNC 	
      0022BC 51 4B 45 59              5 	.ascii "QKEY"
      0022C0 1E BE                    6 	.word qkey 
      0022C2                       5963 	_dict_entry,6,PWRADC,power_adc 
      0022C2 22 BB                    1 	.word LINK 
                           0022C4     2 	LINK=.
      0022C4                          3 PWRADC:
      0022C4 06                       4 	.byte 6 	
      0022C5 50 57 52 41 44 43        5 	.ascii "PWRADC"
      0022CB 1A 41                    6 	.word power_adc 
      0022CD                       5964 	_dict_entry 5,PRINT,print 
      0022CD 22 C4                    1 	.word LINK 
                           0022CF     2 	LINK=.
      0022CF                          3 PRINT:
      0022CF 05                       4 	.byte 5 	
      0022D0 50 52 49 4E 54           5 	.ascii "PRINT"
      0022D5 16 6C                    6 	.word print 
      0022D7                       5965 	_dict_entry,4+F_CONST,POUT,OUTP 
      0022D7 22 CF                    1 	.word LINK 
                           0022D9     2 	LINK=.
      0022D9                          3 POUT:
      0022D9 C4                       4 	.byte 4+F_CONST 	
      0022DA 50 4F 55 54              5 	.ascii "POUT"
      0022DE 00 01                    6 	.word OUTP 
      0022E0                       5966 	_dict_entry,4,POKE,poke 
      0022E0 22 D9                    1 	.word LINK 
                           0022E2     2 	LINK=.
      0022E2                          3 POKE:
      0022E2 04                       4 	.byte 4 	
      0022E3 50 4F 4B 45              5 	.ascii "POKE"
      0022E7 18 0A                    6 	.word poke 
      0022E9                       5967 	_dict_entry,4+F_CONST,PINP,INP 
      0022E9 22 E2                    1 	.word LINK 
                           0022EB     2 	LINK=.
      0022EB                          3 PINP:
      0022EB C4                       4 	.byte 4+F_CONST 	
      0022EC 50 49 4E 50              5 	.ascii "PINP"
      0022F0 00 00                    6 	.word INP 
      0022F2                       5968 	_dict_entry,4+F_IFUNC,PEEK,peek 
      0022F2 22 EB                    1 	.word LINK 
                           0022F4     2 	LINK=.
      0022F4                          3 PEEK:
      0022F4 44                       4 	.byte 4+F_IFUNC 	
      0022F5 50 45 45 4B              5 	.ascii "PEEK"
      0022F9 18 1D                    6 	.word peek 
      0022FB                       5969 	_dict_entry,5,PMODE,pin_mode 
      0022FB 22 F4                    1 	.word LINK 
                           0022FD     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      0022FD                          3 PMODE:
      0022FD 05                       4 	.byte 5 	
      0022FE 50 4D 4F 44 45           5 	.ascii "PMODE"
      002303 20 8C                    6 	.word pin_mode 
      002305                       5970 	_dict_entry,5,PAUSE,pause 
      002305 22 FD                    1 	.word LINK 
                           002307     2 	LINK=.
      002307                          3 PAUSE:
      002307 05                       4 	.byte 5 	
      002308 50 41 55 53 45           5 	.ascii "PAUSE"
      00230D 1F 74                    6 	.word pause 
      00230F                       5971 	_dict_entry,2+F_IFUNC,OR,bit_or
      00230F 23 07                    1 	.word LINK 
                           002311     2 	LINK=.
      002311                          3 OR:
      002311 42                       4 	.byte 2+F_IFUNC 	
      002312 4F 52                    5 	.ascii "OR"
      002314 20 0A                    6 	.word bit_or 
      002316                       5972 	_dict_entry,3+F_CONST,ODR,GPIO_ODR
      002316 23 11                    1 	.word LINK 
                           002318     2 	LINK=.
      002318                          3 ODR:
      002318 C3                       4 	.byte 3+F_CONST 	
      002319 4F 44 52                 5 	.ascii "ODR"
      00231C 00 00                    6 	.word GPIO_ODR 
      00231E                       5973 	_dict_entry,3+F_IFUNC,NOT,func_not 
      00231E 23 18                    1 	.word LINK 
                           002320     2 	LINK=.
      002320                          3 NOT:
      002320 43                       4 	.byte 3+F_IFUNC 	
      002321 4E 4F 54                 5 	.ascii "NOT"
      002324 21 C3                    6 	.word func_not 
      002326                       5974 	_dict_entry,3,NEW,new
      002326 23 20                    1 	.word LINK 
                           002328     2 	LINK=.
      002328                          3 NEW:
      002328 03                       4 	.byte 3 	
      002329 4E 45 57                 5 	.ascii "NEW"
      00232C 1B 7D                    6 	.word new 
      00232E                       5975 	_dict_entry,4,NEXT,next 
      00232E 23 28                    1 	.word LINK 
                           002330     2 	LINK=.
      002330                          3 NEXT:
      002330 04                       4 	.byte 4 	
      002331 4E 45 58 54              5 	.ascii "NEXT"
      002335 18 E6                    6 	.word next 
      002337                       5976 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      002337 23 30                    1 	.word LINK 
                           002339     2 	LINK=.
      002339                          3 LSHIFT:
      002339 46                       4 	.byte 6+F_IFUNC 	
      00233A 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      002340 20 46                    6 	.word lshift 
      002342                       5977 	_dict_entry,4,LOAD,load 
      002342 23 39                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                           002344     2 	LINK=.
      002344                          3 LOAD:
      002344 04                       4 	.byte 4 	
      002345 4C 4F 41 44              5 	.ascii "LOAD"
      002349 1D 34                    6 	.word load 
      00234B                       5978 	_dict_entry 4,LIST,list
      00234B 23 44                    1 	.word LINK 
                           00234D     2 	LINK=.
      00234D                          3 LIST:
      00234D 04                       4 	.byte 4 	
      00234E 4C 49 53 54              5 	.ascii "LIST"
      002352 14 28                    6 	.word list 
      002354                       5979 	_dict_entry 3,LET,let 
      002354 23 4D                    1 	.word LINK 
                           002356     2 	LINK=.
      002356                          3 LET:
      002356 03                       4 	.byte 3 	
      002357 4C 45 54                 5 	.ascii "LET"
      00235A 14 00                    6 	.word let 
      00235C                       5980 	_dict_entry,3+F_IFUNC,KEY,key 
      00235C 23 56                    1 	.word LINK 
                           00235E     2 	LINK=.
      00235E                          3 KEY:
      00235E 43                       4 	.byte 3+F_IFUNC 	
      00235F 4B 45 59                 5 	.ascii "KEY"
      002362 1E B6                    6 	.word key 
      002364                       5981 	_dict_entry,5,INPUT,input_var  
      002364 23 5E                    1 	.word LINK 
                           002366     2 	LINK=.
      002366                          3 INPUT:
      002366 05                       4 	.byte 5 	
      002367 49 4E 50 55 54           5 	.ascii "INPUT"
      00236C 16 FD                    6 	.word input_var 
      00236E                       5982 	_dict_entry,2,IF,if 
      00236E 23 66                    1 	.word LINK 
                           002370     2 	LINK=.
      002370                          3 IF:
      002370 02                       4 	.byte 2 	
      002371 49 46                    5 	.ascii "IF"
      002373 18 50                    6 	.word if 
      002375                       5983 	_dict_entry,3+F_CONST,IDR,GPIO_IDR
      002375 23 70                    1 	.word LINK 
                           002377     2 	LINK=.
      002377                          3 IDR:
      002377 C3                       4 	.byte 3+F_CONST 	
      002378 49 44 52                 5 	.ascii "IDR"
      00237B 00 01                    6 	.word GPIO_IDR 
      00237D                       5984 	_dict_entry,3,HEX,hex_base
      00237D 23 77                    1 	.word LINK 
                           00237F     2 	LINK=.
      00237F                          3 HEX:
      00237F 03                       4 	.byte 3 	
      002380 48 45 58                 5 	.ascii "HEX"
      002383 13 CA                    6 	.word hex_base 
      002385                       5985 	_dict_entry,4+F_IFUNC,GPIO,gpio 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      002385 23 7F                    1 	.word LINK 
                           002387     2 	LINK=.
      002387                          3 GPIO:
      002387 44                       4 	.byte 4+F_IFUNC 	
      002388 47 50 49 4F              5 	.ascii "GPIO"
      00238C 1E C8                    6 	.word gpio 
      00238E                       5986 	_dict_entry,4,GOTO,goto 
      00238E 23 87                    1 	.word LINK 
                           002390     2 	LINK=.
      002390                          3 GOTO:
      002390 04                       4 	.byte 4 	
      002391 47 4F 54 4F              5 	.ascii "GOTO"
      002395 19 55                    6 	.word goto 
      002397                       5987 	_dict_entry,5,GOSUB,gosub 
      002397 23 90                    1 	.word LINK 
                           002399     2 	LINK=.
      002399                          3 GOSUB:
      002399 05                       4 	.byte 5 	
      00239A 47 4F 53 55 42           5 	.ascii "GOSUB"
      00239F 19 62                    6 	.word gosub 
      0023A1                       5988 	_dict_entry,6,FORGET,forget 
      0023A1 23 99                    1 	.word LINK 
                           0023A3     2 	LINK=.
      0023A3                          3 FORGET:
      0023A3 06                       4 	.byte 6 	
      0023A4 46 4F 52 47 45 54        5 	.ascii "FORGET"
      0023AA 1D 6F                    6 	.word forget 
      0023AC                       5989 	_dict_entry,3,FOR,for 
      0023AC 23 A3                    1 	.word LINK 
                           0023AE     2 	LINK=.
      0023AE                          3 FOR:
      0023AE 03                       4 	.byte 3 	
      0023AF 46 4F 52                 5 	.ascii "FOR"
      0023B2 18 64                    6 	.word for 
      0023B4                       5990 	_dict_entry,4,FCPU,fcpu 
      0023B4 23 AE                    1 	.word LINK 
                           0023B6     2 	LINK=.
      0023B6                          3 FCPU:
      0023B6 04                       4 	.byte 4 	
      0023B7 46 43 50 55              5 	.ascii "FCPU"
      0023BB 20 80                    6 	.word fcpu 
      0023BD                       5991 	_dict_entry,6+F_CONST,EEPROM,EEPROM_BASE  
      0023BD 23 B6                    1 	.word LINK 
                           0023BF     2 	LINK=.
      0023BF                          3 EEPROM:
      0023BF C6                       4 	.byte 6+F_CONST 	
      0023C0 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0023C6 40 00                    6 	.word EEPROM_BASE 
      0023C8                       5992 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0023C8 23 BF                    1 	.word LINK 
                           0023CA     2 	LINK=.
      0023CA                          3 DWRITE:
      0023CA 06                       4 	.byte 6+F_CMD 	
      0023CB 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0023D1 1A F2                    6 	.word digital_write 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0023D3                       5993 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0023D3 23 CA                    1 	.word LINK 
                           0023D5     2 	LINK=.
      0023D5                          3 DREAD:
      0023D5 45                       4 	.byte 5+F_IFUNC 	
      0023D6 44 52 45 41 44           5 	.ascii "DREAD"
      0023DB 1A C0                    6 	.word digital_read 
      0023DD                       5994 	_dict_entry,3,DIR,directory 
      0023DD 23 D5                    1 	.word LINK 
                           0023DF     2 	LINK=.
      0023DF                          3 DIR:
      0023DF 03                       4 	.byte 3 	
      0023E0 44 49 52                 5 	.ascii "DIR"
      0023E3 1D BA                    6 	.word directory 
      0023E5                       5995 	_dict_entry,3,DEC,dec_base
      0023E5 23 DF                    1 	.word LINK 
                           0023E7     2 	LINK=.
      0023E7                          3 DEC:
      0023E7 03                       4 	.byte 3 	
      0023E8 44 45 43                 5 	.ascii "DEC"
      0023EB 13 CF                    6 	.word dec_base 
      0023ED                       5996 	_dict_entry,3+F_CONST,DDR,GPIO_DDR
      0023ED 23 E7                    1 	.word LINK 
                           0023EF     2 	LINK=.
      0023EF                          3 DDR:
      0023EF C3                       4 	.byte 3+F_CONST 	
      0023F0 44 44 52                 5 	.ascii "DDR"
      0023F3 00 02                    6 	.word GPIO_DDR 
      0023F5                       5997 	_dict_entry,3+F_CONST,CRL,GPIO_CR1
      0023F5 23 EF                    1 	.word LINK 
                           0023F7     2 	LINK=.
      0023F7                          3 CRL:
      0023F7 C3                       4 	.byte 3+F_CONST 	
      0023F8 43 52 4C                 5 	.ascii "CRL"
      0023FB 00 03                    6 	.word GPIO_CR1 
      0023FD                       5998 	_dict_entry,3+F_CONST,CRH,GPIO_CR2
      0023FD 23 F7                    1 	.word LINK 
                           0023FF     2 	LINK=.
      0023FF                          3 CRH:
      0023FF C3                       4 	.byte 3+F_CONST 	
      002400 43 52 48                 5 	.ascii "CRH"
      002403 00 04                    6 	.word GPIO_CR2 
      002405                       5999 	_dict_entry,4+F_CFUNC,CHAR,char
      002405 23 FF                    1 	.word LINK 
                           002407     2 	LINK=.
      002407                          3 CHAR:
      002407 84                       4 	.byte 4+F_CFUNC 	
      002408 43 48 41 52              5 	.ascii "CHAR"
      00240C 1E 87                    6 	.word char 
      00240E                       6000 	_dict_entry,3,BYE,bye 
      00240E 24 07                    1 	.word LINK 
                           002410     2 	LINK=.
      002410                          3 BYE:
      002410 03                       4 	.byte 3 	
      002411 42 59 45                 5 	.ascii "BYE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      002414 1F 1F                    6 	.word bye 
      002416                       6001 	_dict_entry,5,BTOGL,bit_toggle
      002416 24 10                    1 	.word LINK 
                           002418     2 	LINK=.
      002418                          3 BTOGL:
      002418 05                       4 	.byte 5 	
      002419 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00241E 17 CB                    6 	.word bit_toggle 
      002420                       6002 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      002420 24 18                    1 	.word LINK 
                           002422     2 	LINK=.
      002422                          3 BTEST:
      002422 45                       4 	.byte 5+F_IFUNC 	
      002423 42 54 45 53 54           5 	.ascii "BTEST"
      002428 17 DF                    6 	.word bit_test 
      00242A                       6003 	_dict_entry,4,BSET,bit_set 
      00242A 24 22                    1 	.word LINK 
                           00242C     2 	LINK=.
      00242C                          3 BSET:
      00242C 04                       4 	.byte 4 	
      00242D 42 53 45 54              5 	.ascii "BSET"
      002431 17 A2                    6 	.word bit_set 
      002433                       6004 	_dict_entry,4,BRES,bit_reset
      002433 24 2C                    1 	.word LINK 
                           002435     2 	LINK=.
      002435                          3 BRES:
      002435 04                       4 	.byte 4 	
      002436 42 52 45 53              5 	.ascii "BRES"
      00243A 17 B6                    6 	.word bit_reset 
      00243C                       6005 	_dict_entry,5,BREAK,break 
      00243C 24 35                    1 	.word LINK 
                           00243E     2 	LINK=.
      00243E                          3 BREAK:
      00243E 05                       4 	.byte 5 	
      00243F 42 52 45 41 4B           5 	.ascii "BREAK"
      002444 1B 31                    6 	.word break 
      002446                       6006 	_dict_entry,4,BEEP,beep 
      002446 24 3E                    1 	.word LINK 
                           002448     2 	LINK=.
      002448                          3 BEEP:
      002448 04                       4 	.byte 4 	
      002449 42 45 45 50              5 	.ascii "BEEP"
      00244D 1A 19                    6 	.word beep 
      00244F                       6007 	_dict_entry,3,AWU,awu 
      00244F 24 48                    1 	.word LINK 
                           002451     2 	LINK=.
      002451                          3 AWU:
      002451 03                       4 	.byte 3 	
      002452 41 57 55                 5 	.ascii "AWU"
      002455 1F 87                    6 	.word awu 
      002457                       6008 	_dict_entry,7,AUTORUN,autorun
      002457 24 51                    1 	.word LINK 
                           002459     2 	LINK=.
      002459                          3 AUTORUN:
      002459 07                       4 	.byte 7 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      00245A 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002461 1F 28                    6 	.word autorun 
      002463                       6009 	_dict_entry,3+F_IFUNC,ASC,ascii
      002463 24 59                    1 	.word LINK 
                           002465     2 	LINK=.
      002465                          3 ASC:
      002465 43                       4 	.byte 3+F_IFUNC 	
      002466 41 53 43                 5 	.ascii "ASC"
      002469 1E 9B                    6 	.word ascii 
      00246B                       6010 	_dict_entry,6+F_IFUNC,ANREAD,analog_read
      00246B 24 65                    1 	.word LINK 
                           00246D     2 	LINK=.
      00246D                          3 ANREAD:
      00246D 46                       4 	.byte 6+F_IFUNC 	
      00246E 41 4E 52 45 41 44        5 	.ascii "ANREAD"
      002474 1A 8A                    6 	.word analog_read 
      002476                       6011 	_dict_entry,3+F_IFUNC,AND,bit_and
      002476 24 6D                    1 	.word LINK 
                           002478     2 	LINK=.
      002478                          3 AND:
      002478 43                       4 	.byte 3+F_IFUNC 	
      002479 41 4E 44                 5 	.ascii "AND"
      00247C 1F EC                    6 	.word bit_and 
      00247E                       6012 kword_dict:
      00247E                       6013 	_dict_entry,3+F_IFUNC,ABS,abs
      00247E 24 78                    1 	.word LINK 
                           002480     2 	LINK=.
      002480                          3 ABS:
      002480 43                       4 	.byte 3+F_IFUNC 	
      002481 41 42 53                 5 	.ascii "ABS"
      002484 1F D6                    6 	.word abs 
                                   6014 	
                                   6015 
      002500                       6016 	.bndry 128 ; align on FLASH block.
                                   6017 ; free space for user application  
      002500                       6018 user_space:
                                   6019 ; USR() function test
      002500 89               [ 2] 6020 	pushw x 
      002501 72 1A 50 0A      [ 1] 6021 	bset PC_ODR,#5 
      002505 85               [ 2] 6022 	popw x 
      002506 CD 1F 7E         [ 4] 6023 	call pause02 
      002509 72 1B 50 0A      [ 1] 6024 	bres PC_ODR,#5 
      00250D 81               [ 4] 6025 	ret
                                   6026 
                                   6027 	.area FLASH_DRIVE (ABS)
      010000                       6028 	.org 0x10000
      010000                       6029 fdrive:
      010000 00 00 00 00           6030 .byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002480 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   5 AND        002478 R
  5 ANREAD     00246D R   |     ARG_CNT =  000001     |     ARG_OFS =  000002 
  5 ASC        002465 R   |     ATTRIB  =  000002     |   5 AUTORUN    002459 R
    AUTORUN_=  004000     |   5 AWU        002451 R   |   5 AWUHandl   00000A R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
  5 BEEP       002448 R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCK_ER=  000000     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  000005     |   5 BREAK      00243E R
  5 BRES       002435 R   |   5 BSET       00242C R   |     BSIZE   =  000001 
    BSP     =  000008     |   5 BTEST      002422 R   |   5 BTOGL      002418 R
    BTW     =  000001     |     BUFIDX  =  000003     |   5 BYE        002410 R
    C       =  000001     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       002407 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000008 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        0023FF R
  5 CRL        0023F7 R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000006     |     CURR    =  000002     |     CX_BPTR =  000001 
    CX_CNT  =  000005     |     CX_IN   =  000004     |     CX_LNO  =  000003 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |   5 DDR        0023EF R   |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   5 DEC        0023E7 R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        0023DF R   |     DIVIDND =  000007     |     DIVISR  =  000005 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   5 DREAD      0023D5 R
    DSTACK_S=  000040     |   5 DWRITE     0023CA R   |   5 EEPROM     0023BF R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EOF     =  0000FF     |     ERR_BAD_=  00000A     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_L=  000005     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       0023B6 R   |     FF      =  00000C     |     FFOR    =  000002 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   5 FOR        0023AE R   |   5 FORGET     0023A3 R
    FRUN    =  000000     |     FSIZE   =  000001     |     FSLEEP  =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      002399 R
    GOS_RET =  000003     |   5 GOTO       002390 R   |   5 GPIO       002387 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   5 HEX        00237F R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        002377 R   |   5 IF         002370 R   |     IN      =  000007 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      002366 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  000003 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   5 KEY        00235E R
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000005 
  5 LET        002356 R   |     LINENO  =  000005     |   5 LINK    =  002480 R
  5 LIST       00234D R   |     LL      =  000002     |     LLEN    =  000002 
    LL_HB   =  000001     |     LNO     =  000005     |     LN_PTR  =  000005 
  5 LOAD       002344 R   |   5 LSHIFT     002339 R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        002328 R
  5 NEXT       002330 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NL      =  00000A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   5 NOT        002320 R   |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R
  5 ODR        002318 R   |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         002311 R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000028     |   5 PAUSE      002307 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       0022F4 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]

Symbol Table

  5 PINP       0022EB R   |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      0022FD R
  5 POKE       0022E2 R   |   5 POUT       0022D9 R   |     PREV    =  000001 
  5 PRINT      0022CF R   |     PROD    =  000002     |     PSIZE   =  000001 
  5 PWRADC     0022C4 R   |   5 QKEY       0022BB R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 REBOOT     0022B0 R
  5 REG_A      00099F R   |   5 REG_CC     0009A3 R   |   5 REG_EPC    000992 R
  5 REG_SP     0009A8 R   |   5 REG_X      00099B R   |   5 REG_Y      000997 R
    RELOP   =  000005     |   5 REMARK     0022A5 R   |     RETL1   =  000001 
  5 RETURN     00229A R   |   5 RND        002292 R   |     ROP     =  004800 
  5 RSHIFT     002287 R   |     RST_SR  =  0050B3     |   5 RUN        00227F R
    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       002276 R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       00226D R   |     SIGN    =  000001 
  5 SIZE       002264 R   |     SKIP    =  000006     |   5 SLEEP      00225A R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     000955 R   |   5 STEP       002251 R
  5 STOP       002248 R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      00223E R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   5 TIMEOUT    002228 R   |   5 TIMER      002234 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000002 
    TK_CFUNC=  000008     |     TK_CHAR =  000003     |     TK_CMD  =  000006 
    TK_COLON=  000001     |     TK_COMMA=  00000D     |     TK_CONST=  000009 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000007     |     TK_INTGR=  000004     |     TK_LE   =  000036 
    TK_LPARE=  00000B     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  00000A 
    TK_RPARE=  00000C     |     TK_SHARP=  00000E     |     TK_VAR  =  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]

Symbol Table

  5 TO         002221 R   |   5 Timer4Up   000027 R   |   5 TrapHand   000018 R
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     002216 R   |   5 UFLASH     00220B R   |   5 USER_ABO   000096 R
  5 USR        002203 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   5 UserButt   00003D R   |     VSIZ    =  000002 
    VSIZE   =  000002     |     VT      =  00000B     |   5 WAIT       0021FA R
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   5 WORDS      0021F0 R
  5 WRITE      0021E6 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XADR    =  000001     |     XMASK   =  000001     |   5 XOR        0021DE R
  5 XPEEK      0021D4 R   |     XSAVE   =  000003     |     YSAVE   =  000003 
  5 abs        001FD6 R   |   1 acc16      000008 R   |   1 acc24      000007 R
  1 acc8       000009 R   |   5 accept_c   000B49 R   |   5 add        0010DC R
  5 analog_r   001A8A R   |   5 ansi_seq   000B0B R   |   5 arduino_   0020E1 R
  5 arg_list   00121B R   |   1 array_si   00001F R   |   5 ascii      001E9B R
  5 at_tst     000E16 R   |   5 atoi24     000F29 R   |   5 atoi_exi   000F97 R
  5 autorun    001F28 R   |   5 autorun_   000652 R   |   5 awu        001F87 R
  5 awu02      001F91 R   |   5 bad_port   001EF6 R   |   1 base       000006 R
  1 basicptr   000004 R   |   5 beep       001A19 R   |   5 bin_exit   000D1A R
  5 bit_and    001FEC R   |   5 bit_or     00200A R   |   5 bit_rese   0017B6 R
  5 bit_set    0017A2 R   |   5 bit_test   0017DF R   |   5 bit_togg   0017CB R
  5 bit_xor    002028 R   |   5 bkslsh_t   000DC1 R   |   5 bksp       0001E7 R
  5 break      001B31 R   |   5 break_po   001B5F R   |   5 bye        001F1F R
  5 char       001E87 R   |   5 check_fu   00040A R   |   5 clear_ba   000667 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]

Symbol Table

  5 clear_va   000514 R   |   5 clock_in   0000B1 R   |   5 cmd_itf    000B6D R
  5 cmd_name   001187 R   |   5 cmp_name   001BD3 R   |   5 cold_sta   000579 R
  5 colon_ts   000DEA R   |   5 comma_ts   000DF5 R   |   5 compile    000419 R
  5 convert_   000CA2 R   |   1 count      000003 R   |   5 cp_loop    0011CA R
  5 create_g   000369 R   |   5 cstk_pro   0010A6 R   |   5 dash_tst   000E0B R
  5 ddrop      001022 R   |   5 ddrop_n    00105F R   |   5 ddup       00102B R
  5 dec_base   0013CF R   |   5 del_back   000B3A R   |   5 del_line   000331 R
  5 del_ln     000B2B R   |   5 delete     0001F7 R   |   5 digital_   001AC0 R
  5 digital_   001AF2 R   |   5 dir_loop   001DC6 R   |   5 director   001DBA R
  5 divide     001132 R   |   5 divu24_8   000A98 R   |   5 dotr       0010AF R
  5 dotr_loo   0010C4 R   |   5 dots       00107C R   |   5 dpick      00103C R
  5 dpop       000FFB R   |   5 dpush      000FEE R   |   5 drive_fr   001E43 R
  3 dstack     001740 R   |   3 dstack_e   001780 R   |   5 dstk_pro   001072 R
  1 dstkptr    000018 R   |   5 dswap      001008 R   |   5 eql_tst    000E76 R
  5 equal      00165F R   |   5 err_bad_   000744 R   |   5 err_cmd_   000705 R
  5 err_div0   0006C7 R   |   5 err_dupl   000720 R   |   5 err_math   0006AD R
  5 err_mem_   000690 R   |   5 err_msg    000678 R   |   5 err_no_a   000751 R
  5 err_no_l   0006D7 R   |   5 err_not_   000732 R   |   5 err_run_   0006EE R
  5 err_synt   00069E R   |   5 escaped    000CB7 R   |   5 expect     00120E R
  5 expr_exi   001360 R   |   5 expressi   00131F R   |   5 factor     001276 R
  1 farptr     000012 R   |   5 fcpu       002080 R   |   7 fdrive     010000 R
  5 fetch      00104B R   |   5 fetchc     000C5A R   |   1 ffree      000015 R
  5 file_cou   001E3B R   |   5 final_te   000B05 R   |   5 first_li   001453 R
  1 flags      000021 R   |   5 for        001864 R   |   5 forget     001D6F R
  1 free_ram   000057 R   |   5 func_arg   00123F R   |   5 func_not   0021C3 R
  5 ge         001661 R   |   5 get_arra   00124F R   |   5 get_tick   001FD0 R
  5 get_toke   000D5C R   |   5 getc       0001D4 R   |   5 go_commo   001985 R
  5 gosub      001962 R   |   5 goto       001955 R   |   5 gpio       001EC8 R
  5 gt         00165D R   |   5 gt_tst     000E81 R   |   5 hex_base   0013CA R
  5 if         001850 R   |   1 in         000001 R   |   1 in.saved   000002 R
  1 in.w       000000 R   |   5 incr_far   001B88 R   |   5 input_ex   00176E R
  5 input_lo   001709 R   |   5 input_va   0016FD R   |   5 insert_l   0003A2 R
  5 insert_l   000407 R   |   5 interp     0007EC R   |   5 interp_l   00082C R
  5 invalid    000BB2 R   |   5 invalid_   000C30 R   |   5 is_alpha   000522 R
  5 is_digit   000F14 R   |   5 itoa       000A51 R   |   5 itoa_loo   000A69 R
  5 key        001EB6 R   |   5 kword_di   00247E R   |   5 kword_en   0021D2 R
  5 last_lin   00145C R   |   5 le         001666 R   |   5 ledoff     0008A5 R
  5 ledon      0008A0 R   |   5 ledtoggl   0008AA R   |   5 left_arr   000B0B R
  5 left_par   0008B3 R   |   5 let        001400 R   |   5 let02      00140A R
  5 lines_sk   001461 R   |   5 list       001428 R   |   5 list_exi   0014A8 R
  5 list_sta   001484 R   |   5 load       001D34 R   |   5 load_aut   00062E R
  5 load_fil   001D03 R   |   5 logical_   0021B9 R   |   5 loop_bac   00192E R
  1 loop_dep   00001E R   |   5 loop_don   001943 R   |   5 lshift     002046 R
  5 lt         001664 R   |   5 lt_tst     000EBA R   |   5 mem_peek   000BCF R
  5 modulo     001176 R   |   5 move       0002CB R   |   5 move_dow   0002E9 R
  5 move_exi   00030A R   |   5 move_loo   0002EE R   |   5 move_up    0002DB R
  5 mul_char   00164E R   |   5 multiply   0010EA R   |   5 mulu24_8   000F9B R
  5 nbr_tst    000D97 R   |   5 ne         001669 R   |   5 neg_acc2   000AC0 R
  5 new        001B7D R   |   5 next       0018E6 R   |   5 next_tok   00085C R
  5 no_match   0011DC R   |   5 none       000D5C R   |   5 number     000C60 GR
  5 other      000EF2 R   |   3 pad        001718 R   |   5 parse_bi   000CFA R
  5 parse_in   000CBF R   |   5 parse_ke   000D22 R   |   5 parse_qu   000C67 R
  5 pause      001F74 R   |   5 pause02    001F7E R   |   5 peek       00181D R
  5 peek_byt   000BFA R   |   5 pin_mode   00208C R   |   5 plus_tst   000E4A R
  5 poke       00180A R   |   5 power_ad   001A41 R   |   5 prcnt_ts   000E6B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]

Symbol Table

  5 print      00166C R   |   5 print_ex   0016D1 R   |   5 print_fa   000C3F R
  5 print_in   0009F5 R   |   5 print_re   000902 R   |   5 print_st   000BC2 R
  5 prt_basi   0014FB R   |   5 prt_cmd_   0014AB R   |   5 prt_loop   001670 R
  5 prt_peek   00027B R   |   5 prt_quot   0014BF R   |   5 prt_reg1   0008E3 R
  5 prt_reg8   0008BE R   |   5 prt_regs   000211 R   |   5 prti24     0009AD R
  1 ptr16      000013 R   |   1 ptr8       000014 R   |   5 putc       0001CB R
  5 puts       0001DD R   |   5 qkey       001EBE R   |   5 qmark_ts   000E21 R
  5 random     002101 R   |   5 readln     000AE3 R   |   5 readln_l   000AE9 R
  5 readln_q   000B5E R   |   5 regs_sta   000254 R   |   5 rel_exit   0013B7 R
  5 relation   001363 R   |   5 relop_st   001651 R   |   5 rem        001771 R
  5 repl       000B7B R   |   5 repl_exi   000BA3 R   |   5 reprint    000B0B R
  5 reset_co   00166E R   |   5 rest_con   0016ED R   |   5 return     0019A7 R
  5 right_ar   000B0B R   |   5 rparnt_t   000DDF R   |   5 rshift     002063 R
  5 rt_msg     000785 R   |   5 run        0019C7 R   |   5 run_it     0019EF R
  5 save       001C3F R   |   5 save_con   0016DD R   |   5 search_d   0011B9 R
  5 search_e   00120A R   |   5 search_f   001BF4 R   |   5 search_l   00030D R
  5 search_l   000315 R   |   5 search_n   0011BD R   |   1 seedx      00000E R
  1 seedy      000010 R   |   5 seek_fdr   001B96 R   |   5 select_p   0020D1 R
  5 set_time   0021A5 R   |   5 sharp_ts   000E00 R   |   5 show       0013BA R
  5 single_c   00164A R   |   5 size       0013D4 R   |   5 skip       000FD5 R
  5 slash_ts   000E60 R   |   5 sleep      001F69 R   |   5 software   000533 R
  5 spaces     000205 R   |   3 stack_fu   001780 R   |   3 stack_un   001800 R
  5 star_tst   000E55 R   |   5 step       0018BE R   |   5 stop       001A0A R
  5 store      001055 R   |   5 store_lo   0018D0 R   |   5 str_matc   0011EB R
  5 str_tst    000D86 R   |   5 strcmp     0002AC R   |   5 strcpy     0002BD R
  5 strlen     00029F R   |   5 substrac   0010E4 R   |   5 syntax_e   000795 R
  1 tab_widt   000022 R   |   5 tb_error   000797 R   |   5 term       0012D2 R
  5 term01     0012DB R   |   5 term_exi   00131C R   |   5 test_p     000BBA R
  3 tib        0016C8 R   |   5 tick_tst   000E38 R   |   1 ticks      00000A R
  5 timeout    0021B6 R   |   1 timer      00000C R   |   5 timer4_i   0000C7 R
  5 to         00188E R   |   5 to_upper   000F1D GR  |   5 token_ch   000F01 R
  5 token_ex   000F11 R   |   1 txtbgn     00001A R   |   1 txtend     00001C R
  5 uart1_in   000190 R   |   5 uart1_se   0001A0 R   |   5 ubound     0013DE R
  5 uflash     001EFB R   |   5 unget_to   000FE8 R   |   5 unlock_e   0000DC R
  5 unlock_f   0000EA R   |   5 user_spa   002500 R   |   5 usr        001F01 R
  1 vars       000023 R   |   5 wait       001777 R   |   5 warm_ini   000611 R
  5 warm_sta   0007E9 R   |   5 words      00216B R   |   5 write      001E50 R
  5 write_bl   00016D R   |   5 write_by   0000F8 R   |   5 write_ee   000134 R
  5 write_ex   000168 R   |   5 write_fl   00011E R   |   5 xpeek      001830 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     57   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   250E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      4   flags    8

