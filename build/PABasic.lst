ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           000040    44 	DSTACK_SIZE=64 
                           000080    45 	STACK_SIZE=128
                           0017FF    46 	STACK_EMPTY=RAM_SIZE-1  
                           000000    47 	FRUN=0 ; flags run code in variable flags
                           000001    48 	FTRAP=1 ; inside trap handler 
                           000002    49 	FFOR=2 ; FOR loop in preparation 
                           000003    50 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    51 	FBREAK=4 ; break point flag 
                           000005    52 	FCOMP=5  ; compiling flags 
                                     53 
      000000                         54 in.w:  .blkb 1 ; parser position in text line
      000001                         55 in:    .blkb 1 ; low byte of in.w
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000002                         56 count: .blkb 1 ; length of string in text line  
      000003                         57 basicptr:  .blkb 2  ; point to text buffer 
      000005                         58 lineno: .blkb 2  ; BASIC line number 
      000007                         59 base:  .blkb 1 ; nemeric base used to print integer 
      000008                         60 acc24: .blkb 1 ; 24 accumulator
      000009                         61 acc16: .blkb 1
      00000A                         62 acc8:  .blkb 1
      00000B                         63 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000D                         64 seedx: .blkw 1  ; xorshift 16 seed x 
      00000F                         65 seedy: .blkw 1  ; xorshift 16 seed y 
      000011                         66 in.w.saved: .blkw 1 ; set by get_token before parsing next token, used by unget_token
      000013                         67 farptr: .blkb 1 ; far pointer used by file system
      000014                         68 ptr16:  .blkb 1 ; middle byte of farptr
      000015                         69 ptr8:   .blkb 1 ; least byte of farptr 
      000016                         70 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000019                         71 dstkptr: .blkw 1  ; data stack pointer 
      00001B                         72 txtbgn: .ds 2 ; BASIC text beginning address 
      00001D                         73 txtend: .ds 2 ; BASIC text end address 
      00001F                         74 loop_depth: .ds 1 ; FOR loop depth, level of nested loop.  
      000020                         75 array_addr: .ds 2 ; address of @ array 
      000022                         76 array_size: .ds 2 ; array size 
      000024                         77 flags: .ds 1 ; boolean flags
      000025                         78 tab_width: .ds 1 ; print colon width (4)
      000026                         79 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     80 ; keep as last variable 
      00005A                         81 free_ram: ; from here RAM free for BASIC text 
                                     82 
                                     83 ;-----------------------------------
                                     84     .area SSEG (ABS)
                                     85 ;-----------------------------------	
      0016C8                         86     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         87 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         88 pad: .ds PAD_SIZE             ; working buffer
      001740                         89 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         90 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         91 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         92 stack_unf: ; stack underflow ; control_stack bottom 
                                     93 
                                     94 
                                     95 ;--------------------------------------
                                     96     .area HOME 
                                     97 ;--------------------------------------
      000000 82 00 05 4C             98     int cold_start
                           000001    99 .if DEBUG
      000004 82 00 00 0A            100 	int TrapHandler 		;TRAP  software interrupt
                           000000   101 .else
                                    102 	int NonHandledInterrupt ;TRAP  software interrupt
                                    103 .endif
      000008 82 00 00 09            104 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            105 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            106 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            107 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            108 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            109 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            110 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000024 82 00 00 25            111 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            112 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            113 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            114 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            115 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            116 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            117 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            118 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            119 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            120 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            121 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            122 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            123 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            124 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            125 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            126 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            127 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            128 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            129 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            130 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            131 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            132 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            133 	int NonHandledInterrupt ;int29  not used
                                    134 
                                    135 ;---------------------------------------
                                    136     .area CODE
                                    137 ;---------------------------------------
                           000001   138 .if DEBUG
      000000 53 54 4D 38 5F 54 42   139 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    140 .endif 
                                    141 
      000009                        142 NonHandledInterrupt:
      000009 71                     143     .byte 0x71  ; reinitialize MCU
                                    144 
                                    145 
                                    146 ;------------------------------------
                                    147 ; software interrupt handler  
                                    148 ;------------------------------------
                           000001   149 .if DEBUG 
      00000A                        150 TrapHandler:
      00000A 72 12 00 24      [ 1]  151 	bset flags,#FTRAP 
      00000E CD 08 8E         [ 4]  152 	call print_registers
      000011 CD 0A FD         [ 4]  153 	call cmd_itf
      000014 72 13 00 24      [ 1]  154 	bres flags,#FTRAP 	
      000018 80               [11]  155 	iret
                                    156 .endif 
                                    157 
      000019                        158 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  159 	clr TIM4_SR 
      00001D CE 00 0B         [ 2]  160 	ldw x,ticks
      000020 5C               [ 1]  161 	incw x
      000021 CF 00 0B         [ 2]  162 	ldw ticks,x 
      000024 80               [11]  163 	iret 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    165 
                                    166 ;------------------------------------
                                    167 ; Triggered by pressing USER UserButton 
                                    168 ; on NUCLEO card.
                                    169 ;------------------------------------
      000025                        170 UserButtonHandler:
                                    171 ; wait button release
      000025 5F               [ 1]  172 	clrw x
      000026 5A               [ 2]  173 1$: decw x 
      000027 26 FD            [ 1]  174 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  175 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    176 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 24 05   [ 2]  177     btjf flags,#FSLEEP,2$
      000033 72 17 00 24      [ 1]  178 	bres flags,#FSLEEP 
      000037 80               [11]  179 	iret
      000038 72 00 00 24 03   [ 2]  180 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  181 	jp 9$ 
      000040                        182 4$:	; program interrupted by user 
      000040 72 11 00 24      [ 1]  183 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  184 	ldw x,#USER_ABORT
      000047 CD 01 B0         [ 4]  185 	call puts 
      00004A CE 00 03         [ 2]  186 	ldw x,basicptr
      00004D FE               [ 2]  187 	ldw x,(x)
                                    188 ; print line number 
      00004E 35 0A 00 07      [ 1]  189 	mov base,#10 
      000052 35 06 00 25      [ 1]  190 	mov tab_width,#6
      000056 CD 09 81         [ 4]  191 	call print_int  	
      000059 CE 00 03         [ 2]  192 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  193 	addw x,#3  
      00005F CD 01 B0         [ 4]  194 	call puts 
      000062 A6 0D            [ 1]  195 	ld a,#CR 
      000064 CD 01 9E         [ 4]  196 	call putc
      000067 5F               [ 1]  197 	clrw x  
      000068 C6 00 01         [ 1]  198 	ld a,in 
      00006B AB 03            [ 1]  199 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  200 	ld xl,a 
      00006E CD 01 D8         [ 4]  201 	call spaces 
      000071 A6 5E            [ 1]  202 	ld a,#'^
      000073 CD 01 9E         [ 4]  203 	call putc 
      000076                        204 9$:
      000076 AE 17 FF         [ 2]  205     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  206     ldw sp,x
      00007A 9A               [ 1]  207 	rim 
      00007B CC 07 5B         [ 2]  208 	jp warm_start
                                    209 
      00007E 0A 50 72 6F 67 72 61   210 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    211 
                                    212 
                                    213 ;----------------------------------------
                                    214 ; inialize MCU clock 
                                    215 ; input:
                                    216 ;   A 		source  HSI | 1 HSE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    217 ;   XL      CLK_CKDIVR , clock divisor 
                                    218 ; output:
                                    219 ;   none 
                                    220 ;----------------------------------------
      000099                        221 clock_init:	
      000099 C1 50 C3         [ 1]  222 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  223 	jreq 2$ ; no switching required 
                                    224 ; select clock source 
      00009E 72 12 50 C5      [ 1]  225 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  226 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  227 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  228 	jrne 1$
      0000AA                        229 2$: 	
                                    230 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  231 	ld a,xl 
      0000AB C7 50 C6         [ 1]  232 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  233 	ret
                                    234 
                                    235 ;---------------------------------
                                    236 ; TIM4 is configured to generate an 
                                    237 ; interrupt every millisecond 
                                    238 ;----------------------------------
      0000AF                        239 timer4_init:
      0000AF 35 07 53 45      [ 1]  240 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B3 35 7D 53 46      [ 1]  241 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B7 35 05 53 40      [ 1]  242 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BB 72 10 53 41      [ 1]  243 	bset TIM4_IER,#TIM4_IER_UIE 
      0000BF 81               [ 4]  244 	ret
                                    245 
                                    246 ;----------------------------------
                                    247 ; unlock EEPROM for writing/erasing
                                    248 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    249 ; input:
                                    250 ;  none
                                    251 ; output:
                                    252 ;  none 
                                    253 ;----------------------------------
      0000C0                        254 unlock_eeprom:
      0000C0 35 AE 50 64      [ 1]  255 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C4 35 56 50 64      [ 1]  256     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C8 72 07 50 5F FB   [ 2]  257 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000CD 81               [ 4]  258 	ret
                                    259 
                                    260 ;----------------------------------
                                    261 ; unlock FLASH for writing/erasing
                                    262 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    263 ; input:
                                    264 ;  none
                                    265 ; output:
                                    266 ;  none
                                    267 ;----------------------------------
      0000CE                        268 unlock_flash:
      0000CE 35 56 50 62      [ 1]  269 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D2 35 AE 50 62      [ 1]  270 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000D6 72 03 50 5F FB   [ 2]  271 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000DB 81               [ 4]  272 	ret
                                    273 
                           000000   274 	BLOCK_ERASE=0
                                    275 ;----------------------------
                                    276 ; erase block code must be 
                                    277 ;executed from RAM
                                    278 ;-----------------------------
                           000000   279 .if BLOCK_ERASE 
                                    280 ; this code is copied to RAM 
                                    281 erase_start:
                                    282 	clr a 
                                    283     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    284     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    285 	ldf [farptr],a
                                    286     inc farptr+2 
                                    287     ldf [farptr],a
                                    288     inc farptr+2 
                                    289     ldf [farptr],a
                                    290     inc farptr+2 
                                    291     ldf [farptr],a
                                    292 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    293 	ret
                                    294 erase_end:
                                    295 
                                    296 ; copy erase_start in RAM 
                                    297 move_code_in_ram:
                                    298 	ldw x,#erase_end 
                                    299 	subw x,#erase_start
                                    300 	ldw acc16,x 
                                    301 	ldw x,#pad 
                                    302 	ldw y,#erase_start 
                                    303 	call move 
                                    304 	ret 
                                    305 
                                    306 ;-----------------------------------
                                    307 ; erase flash or EEPROM block 
                                    308 ; a block is 128 bytes 
                                    309 ; input:
                                    310 ;   farptr  address block begin
                                    311 ; output:
                                    312 ;   none
                                    313 ;--------------------------------------
                                    314 erase_block:
                                    315 	ldw x,farptr+1 
                                    316 	pushw x 
                                    317 	call move_code_in_ram 
                                    318 	popw x 
                                    319 	ldw farptr+1,x 
                                    320 	tnz farptr
                                    321 	jrne erase_flash 
                                    322 	ldw x,#FLASH_BASE 
                                    323 	cpw x,farptr+1 
                                    324 	jrpl erase_flash 
                                    325 ; erase eeprom block
                                    326 	call unlock_eeprom 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    327 	sim 
                                    328 	call pad   
                                    329 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    330 	rim 
                                    331 	ret 
                                    332 ; erase flash block:
                                    333 erase_flash:
                                    334 	call unlock_flash 
                                    335 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    336 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    337 	clr a 
                                    338 	sim 
                                    339 	call pad 
                                    340     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    341 	rim 
                                    342 	ret 
                                    343 .endif ; BLOCK_ERASE 
                                    344 
                                    345 
                                    346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    347 ; write a byte to FLASH or EEPROM 
                                    348 ; input:
                                    349 ;    a  		byte to write
                                    350 ;    farptr  	address
                                    351 ;    x          farptr[x]
                                    352 ; output:
                                    353 ;    none
                                    354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    355 	; variables locales
                           000001   356 	BTW = 1   ; byte to write offset on stack
                           000002   357 	OPT = 2   ; OPTION flag offset on stack
                           000002   358 	VSIZE = 2
      0000DC                        359 write_byte:
      0000DC 90 89            [ 2]  360 	pushw y
      0000DE                        361 	_vars VSIZE
      0000DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E0 6B 01            [ 1]  362 	ld (BTW,sp),a ; byte to write 
      0000E2 0F 02            [ 1]  363 	clr (OPT,sp)  ; OPTION flag
                                    364 ; put addr[15:0] in Y, for bounds check.
      0000E4 90 CE 00 14      [ 2]  365 	ldw y,farptr+1   ; Y=addr15:0
                                    366 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000E8 72 5D 00 13      [ 1]  367 	tnz farptr 
      0000EC 26 14            [ 1]  368 	jrne write_flash
      0000EE 90 A3 21 80      [ 2]  369     cpw y,#user_space
      0000F2 24 0E            [ 1]  370     jruge write_flash
      0000F4 90 A3 40 00      [ 2]  371 	cpw y,#EEPROM_BASE  
      0000F8 25 52            [ 1]  372     jrult write_exit
      0000FA 90 A3 48 00      [ 2]  373 	cpw y,#OPTION_BASE
      0000FE 25 18            [ 1]  374 	jrult write_eeprom
      000100 20 4A            [ 2]  375     jra write_exit
                                    376 ; write program memory
      000102                        377 write_flash:
      000102 CD 00 CE         [ 4]  378 	call unlock_flash 
      000105 9B               [ 1]  379 1$:	sim 
      000106 7B 01            [ 1]  380 	ld a,(BTW,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000108 92 A7 00 13      [ 4]  381 	ldf ([farptr],x),a ; farptr[x]=A
      00010C 72 05 50 5F FB   [ 2]  382 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000111 9A               [ 1]  383     rim 
      000112 72 13 50 5F      [ 1]  384     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000116 20 34            [ 2]  385     jra write_exit
                                    386 ; write eeprom and option
      000118                        387 write_eeprom:
      000118 CD 00 C0         [ 4]  388 	call unlock_eeprom
                                    389 	; check for data eeprom or option eeprom
      00011B 90 A3 48 00      [ 2]  390 	cpw y,#OPTION_BASE
      00011F 2B 08            [ 1]  391 	jrmi 1$
      000121 90 A3 48 80      [ 2]  392 	cpw y,#OPTION_END+1
      000125 2A 02            [ 1]  393 	jrpl 1$
      000127 03 02            [ 1]  394 	cpl (OPT,sp)
      000129                        395 1$: 
      000129 0D 02            [ 1]  396     tnz (OPT,sp)
      00012B 27 08            [ 1]  397     jreq 2$
                                    398 	; pour modifier une option il faut modifier ces 2 bits
      00012D 72 1E 50 5B      [ 1]  399     bset FLASH_CR2,#FLASH_CR2_OPT
      000131 72 1F 50 5C      [ 1]  400     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000135                        401 2$: 
      000135 7B 01            [ 1]  402     ld a,(BTW,sp)
      000137 92 A7 00 13      [ 4]  403     ldf ([farptr],x),a
      00013B 0D 02            [ 1]  404     tnz (OPT,sp)
      00013D 27 08            [ 1]  405     jreq 3$
      00013F 5C               [ 1]  406     incw x
      000140 7B 01            [ 1]  407     ld a,(BTW,sp)
      000142 43               [ 1]  408     cpl a
      000143 92 A7 00 13      [ 4]  409     ldf ([farptr],x),a
      000147 72 05 50 5F FB   [ 2]  410 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014C                        411 write_exit:
      00014C                        412 	_drop VSIZE 
      00014C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00014E 90 85            [ 2]  413 	popw y
      000150 81               [ 4]  414     ret
                                    415 
                                    416 ;--------------------------------------------
                                    417 ; write a data block to eeprom or flash 
                                    418 ; input:
                                    419 ;   Y        source address   
                                    420 ;   X        array index  destination  farptr[x]
                                    421 ;   BSIZE    block size bytes 
                                    422 ;   farptr   write address , byte* 
                                    423 ; output:
                                    424 ;	X 		after last byte written 
                                    425 ;   Y 		after last byte read 
                                    426 ;  farptr   point after block
                                    427 ;---------------------------------------------
      000151                        428 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000151                        429 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    430 	; local var 
                           000001   431 	XSAVE=1 
                           000002   432 	VSIZE=2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000151                        433 write_block:
      000151                        434 	_vars VSIZE
      000151 52 02            [ 2]    1     sub sp,#VSIZE 
      000153 1F 01            [ 2]  435 	ldw (XSAVE,sp),x 
      000155 1E 05            [ 2]  436 	ldw x,(BSIZE,sp) 
      000157 27 13            [ 1]  437 	jreq 9$
      000159 1E 01            [ 2]  438 1$:	ldw x,(XSAVE,sp)
      00015B 90 F6            [ 1]  439 	ld a,(y)
      00015D CD 00 DC         [ 4]  440 	call write_byte 
      000160 5C               [ 1]  441 	incw x 
      000161 90 5C            [ 1]  442 	incw y 
      000163 1F 01            [ 2]  443 	ldw (XSAVE,sp),x
      000165 1E 05            [ 2]  444 	ldw x,(BSIZE,sp)
      000167 5A               [ 2]  445 	decw x
      000168 1F 05            [ 2]  446 	ldw (BSIZE,sp),x 
      00016A 26 ED            [ 1]  447 	jrne 1$
      00016C                        448 9$:
      00016C 1E 01            [ 2]  449 	ldw x,(XSAVE,sp)
      00016E CD 1A 29         [ 4]  450 	call incr_farptr
      000171                        451 	_drop VSIZE
      000171 5B 02            [ 2]    1     addw sp,#VSIZE 
      000173 81               [ 4]  452 	ret 
                                    453 
                                    454 
                                    455 ;---------------------------------------------
                                    456 ;   UART3 subroutines
                                    457 ;---------------------------------------------
                                    458 
                                    459 ;---------------------------------------------
                                    460 ; initialize UART3, 115200 8N1
                                    461 ; input:
                                    462 ;	none
                                    463 ; output:
                                    464 ;   none
                                    465 ;---------------------------------------------
      000174                        466 uart3_init:
                                    467 	; configure tx pin
      000174 72 1A 50 11      [ 1]  468 	bset PD_DDR,#BIT5 ; tx pin
      000178 72 1A 50 12      [ 1]  469 	bset PD_CR1,#BIT5 ; push-pull output
      00017C 72 1A 50 13      [ 1]  470 	bset PD_CR2,#BIT5 ; fast output
      000180                        471 uart3_set_baud: 
                                    472 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    473 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000180 A6 E1            [ 1]  474 	ld a,#CLK_SWR_HSI
      000182 C1 50 C3         [ 1]  475 	cp a,CLK_CMSR 
      000185 27 0A            [ 1]  476 	jreq hsi_clock 
      000187                        477 hse_clock: ; 8 Mhz 	
      000187 35 05 52 43      [ 1]  478 	mov UART3_BRR2,#0x05 ; must be loaded first
      00018B 35 04 52 42      [ 1]  479 	mov UART3_BRR1,#0x4
      00018F 20 08            [ 2]  480 	jra uart_enable
      000191                        481 hsi_clock: ; 16 Mhz 	
      000191 35 0B 52 43      [ 1]  482 	mov UART3_BRR2,#0x0b ; must be loaded first
      000195 35 08 52 42      [ 1]  483 	mov UART3_BRR1,#0x08
      000199                        484 uart_enable:	
      000199 35 0C 52 45      [ 1]  485 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00019D 81               [ 4]  486 	ret
                                    487 	
                                    488 ;---------------------------------
                                    489 ; send character to UART3 
                                    490 ; input:
                                    491 ;   A 
                                    492 ; output:
                                    493 ;   none 
                                    494 ;--------------------------------	
      00019E                        495 putc:
      00019E 72 0F 52 40 FB   [ 2]  496 	btjf UART3_SR,#UART_SR_TXE,.
      0001A3 C7 52 41         [ 1]  497 	ld UART3_DR,a 
      0001A6 81               [ 4]  498 	ret 
                                    499 
                                    500 ;---------------------------------
                                    501 ; wait character from UART3 
                                    502 ; input:
                                    503 ;   none
                                    504 ; output:
                                    505 ;   A 			char  
                                    506 ;--------------------------------	
      0001A7                        507 getc:
      0001A7 72 0B 52 40 FB   [ 2]  508 	btjf UART3_SR,#UART_SR_RXNE,.
      0001AC C6 52 41         [ 1]  509 	ld a,UART3_DR 
      0001AF 81               [ 4]  510 	ret 
                                    511 
                                    512 ;-----------------------------
                                    513 ; send an ASCIZ string to UART3 
                                    514 ; input: 
                                    515 ;   x 		char * 
                                    516 ; output:
                                    517 ;   none 
                                    518 ;-------------------------------
      0001B0                        519 puts:
      0001B0 F6               [ 1]  520     ld a,(x)
      0001B1 27 06            [ 1]  521 	jreq 1$
      0001B3 CD 01 9E         [ 4]  522 	call putc 
      0001B6 5C               [ 1]  523 	incw x 
      0001B7 20 F7            [ 2]  524 	jra puts 
      0001B9 81               [ 4]  525 1$:	ret 
                                    526 
                                    527 
                                    528 ;---------------------------
                                    529 ; delete character at left 
                                    530 ; of cursor on terminal 
                                    531 ; input:
                                    532 ;   none 
                                    533 ; output:
                                    534 ;	none 
                                    535 ;---------------------------
      0001BA                        536 bksp:
      0001BA A6 08            [ 1]  537 	ld a,#BSP 
      0001BC CD 01 9E         [ 4]  538 	call putc 
      0001BF A6 20            [ 1]  539 	ld a,#SPACE 
      0001C1 CD 01 9E         [ 4]  540 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001C4 A6 08            [ 1]  541 	ld a,#BSP 
      0001C6 CD 01 9E         [ 4]  542 	call putc 
      0001C9 81               [ 4]  543 	ret 
                                    544 ;---------------------------
                                    545 ; delete n character left of cursor 
                                    546 ; at terminal.
                                    547 ; input: 
                                    548 ;   A   	number of characters to delete.
                                    549 ; output:
                                    550 ;    none 
                                    551 ;--------------------------	
      0001CA                        552 delete:
      0001CA 88               [ 1]  553 	push a 
      0001CB 0D 01            [ 1]  554 0$:	tnz (1,sp)
      0001CD 27 07            [ 1]  555 	jreq 1$
      0001CF CD 01 BA         [ 4]  556 	call bksp 
      0001D2 0A 01            [ 1]  557 	dec (1,sp)
      0001D4 20 F5            [ 2]  558 	jra 0$
      0001D6 84               [ 1]  559 1$:	pop a 
      0001D7 81               [ 4]  560 	ret
                                    561 
                                    562 ;--------------------------
                                    563 ; print n spaces on terminal
                                    564 ; input:
                                    565 ;  X 		number of spaces 
                                    566 ; output:
                                    567 ;	none 
                                    568 ;---------------------------
      0001D8                        569 spaces:
      0001D8 A6 20            [ 1]  570 	ld a,#SPACE 
      0001DA 5D               [ 2]  571 1$:	tnzw x
      0001DB 27 06            [ 1]  572 	jreq 9$
      0001DD CD 01 9E         [ 4]  573 	call putc 
      0001E0 5A               [ 2]  574 	decw x
      0001E1 20 F7            [ 2]  575 	jra 1$
      0001E3                        576 9$: 
      0001E3 81               [ 4]  577 	ret 
                                    578 
                           000001   579 .if DEBUG 
                                    580 ;---------------------------------
                                    581 ;; print actual registers states 
                                    582 ;; as pushed on stack 
                                    583 ;; {Y,X,CC,A}
                                    584 ;---------------------------------
      0001E4                        585 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001E4                        586 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001E4                        587 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001E4                        588 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001E4                        589 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001E4                        590 prt_regs:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4 AE 02 27         [ 2]  591 	ldw x,#regs_state 
      0001E7 CD 01 B0         [ 4]  592 	call puts
                                    593 ; register PC
      0001EA 16 01            [ 2]  594 	ldw y,(1,sp)
      0001EC AE 09 1E         [ 2]  595 	ldw x,#REG_EPC 
      0001EF CD 08 6F         [ 4]  596 	call prt_reg16 
                                    597 ; register CC 
      0001F2 7B 08            [ 1]  598 	ld a,(R_CC,sp)
      0001F4 AE 09 2F         [ 2]  599 	ldw x,#REG_CC 
      0001F7 CD 08 4A         [ 4]  600 	call prt_reg8 
                                    601 ; register A 
      0001FA 7B 07            [ 1]  602 	ld a,(R_A,sp)
      0001FC AE 09 2B         [ 2]  603 	ldw x,#REG_A 
      0001FF CD 08 4A         [ 4]  604 	call prt_reg8 
                                    605 ; register X 
      000202 16 05            [ 2]  606 	ldw y,(R_X,sp)
      000204 AE 09 27         [ 2]  607 	ldw x,#REG_X 
      000207 CD 08 6F         [ 4]  608 	call prt_reg16 
                                    609 ; register Y 
      00020A 16 03            [ 2]  610 	ldw y,(R_Y,sp)
      00020C AE 09 23         [ 2]  611 	ldw x,#REG_Y 
      00020F CD 08 6F         [ 4]  612 	call prt_reg16 
                                    613 ; register SP 
      000212 90 96            [ 1]  614 	ldw y,sp
      000214 72 A9 00 08      [ 2]  615 	addw y,#6+ARG_OFS  
      000218 AE 09 34         [ 2]  616 	ldw x,#REG_SP
      00021B CD 08 6F         [ 4]  617 	call prt_reg16
      00021E A6 0D            [ 1]  618 	ld a,#CR 
      000220 CD 01 9E         [ 4]  619 	call putc
      000223 CD 01 9E         [ 4]  620 	call putc   
      000226 81               [ 4]  621 	ret 
                                    622 
      000227 0A 72 65 67 69 73 74   623 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    624 
                                    625 
                                    626 ;--------------------
                                    627 ; print content at address in hex.
                                    628 ; input:
                                    629 ;   X 	address to peek 
                                    630 ; output:
                                    631 ;	none 
                                    632 ;--------------------	
      00024E                        633 prt_peek:
      00024E 89               [ 2]  634 	pushw x 
      00024F CF 00 09         [ 2]  635 	ldw acc16,x 
      000252 72 5F 00 08      [ 1]  636 	clr acc24 
      000256 5F               [ 1]  637 	clrw x 
      000257 A6 10            [ 1]  638 	ld a,#16 
      000259 CD 09 39         [ 4]  639 	call prti24 
      00025C A6 3A            [ 1]  640 	ld a,#': 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025E CD 01 9E         [ 4]  641 	call putc 
      000261 A6 20            [ 1]  642 	ld a,#SPACE 
      000263 CD 01 9E         [ 4]  643 	call putc 
      000266 85               [ 2]  644 	popw x 
      000267 F6               [ 1]  645 	ld a,(x)
      000268 C7 00 0A         [ 1]  646 	ld acc8,a 
      00026B 5F               [ 1]  647 	clrw x 
      00026C A6 10            [ 1]  648 	ld a,#16 
      00026E CD 09 39         [ 4]  649 	call prti24
      000271 81               [ 4]  650 	ret 
                                    651 .endif ; DEBUG  
                                    652 
                                    653 ;-------------------------------------
                                    654 ; retrun string length
                                    655 ; input:
                                    656 ;   X         .asciz  
                                    657 ; output:
                                    658 ;   X         length 
                                    659 ;-------------------------------------
      000272                        660 strlen:
      000272 90 93            [ 1]  661 	ldw y,x 
      000274 5F               [ 1]  662 	clrw x 
      000275 90 7D            [ 1]  663 1$:	tnz (y) 
      000277 27 05            [ 1]  664 	jreq 9$ 
      000279 5C               [ 1]  665 	incw x
      00027A 90 5C            [ 1]  666 	incw y 
      00027C 20 F7            [ 2]  667 	jra 1$ 
      00027E 81               [ 4]  668 9$: ret 
                                    669 
                                    670 ;------------------------------------
                                    671 ; compare 2 strings
                                    672 ; input:
                                    673 ;   X 		char* first string 
                                    674 ;   Y       char* second string 
                                    675 ; output:
                                    676 ;   A 		0|1 
                                    677 ;-------------------------------------
      00027F                        678 strcmp:
      00027F F6               [ 1]  679 	ld a,(x)
      000280 27 0B            [ 1]  680 	jreq 5$ 
      000282 90 F1            [ 1]  681 	cp a,(y) 
      000284 26 05            [ 1]  682 	jrne 4$ 
      000286 5C               [ 1]  683 	incw x 
      000287 90 5C            [ 1]  684 	incw y 
      000289 20 F4            [ 2]  685 	jra strcmp 
      00028B                        686 4$: ; not same  
      00028B 4F               [ 1]  687 	clr a 
      00028C 81               [ 4]  688 	ret 
      00028D                        689 5$: ; same 
      00028D A6 01            [ 1]  690 	ld a,#1 
      00028F 81               [ 4]  691 	ret 
                                    692 
                                    693 
                                    694 ;---------------------------------------
                                    695 ;  copy src to dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    696 ; input:
                                    697 ;   X 		dest 
                                    698 ;   Y 		src 
                                    699 ; output: 
                                    700 ;   X 		dest 
                                    701 ;----------------------------------
      000290                        702 strcpy:
      000290 89               [ 2]  703 	pushw x 
      000291 90 F6            [ 1]  704 1$: ld a,(y)
      000293 27 06            [ 1]  705 	jreq 9$ 
      000295 F7               [ 1]  706 	ld (x),a 
      000296 5C               [ 1]  707 	incw x 
      000297 90 5C            [ 1]  708 	incw y 
      000299 20 F6            [ 2]  709 	jra 1$ 
      00029B 7F               [ 1]  710 9$:	clr (x)
      00029C 85               [ 2]  711 	popw x 
      00029D 81               [ 4]  712 	ret 
                                    713 
                                    714 ;---------------------------------------
                                    715 ; move memory block 
                                    716 ; input:
                                    717 ;   X 		destination 
                                    718 ;   Y 	    source 
                                    719 ;   acc16	size 
                                    720 ; output:
                                    721 ;   none 
                                    722 ;--------------------------------------
                           000001   723 	INCR=1 ; increament high byte 
                           000002   724 	LB=2 ; increament low byte 
                           000002   725 	VSIZE=2
      00029E                        726 move:
      00029E                        727 	_vars VSIZE 
      00029E 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A0 0F 01            [ 1]  728 	clr (INCR,sp)
      0002A2 0F 02            [ 1]  729 	clr (LB,sp)
      0002A4 90 89            [ 2]  730 	pushw y 
      0002A6 13 01            [ 2]  731 	cpw x,(1,sp) ; compare DEST to SRC 
      0002A8 90 85            [ 2]  732 	popw y 
      0002AA 27 31            [ 1]  733 	jreq move_exit ; x==y 
      0002AC 2B 0E            [ 1]  734 	jrmi move_down
      0002AE                        735 move_up: ; start from top address with incr=-1
      0002AE 72 BB 00 09      [ 2]  736 	addw x,acc16
      0002B2 72 B9 00 09      [ 2]  737 	addw y,acc16
      0002B6 03 01            [ 1]  738 	cpl (INCR,sp)
      0002B8 03 02            [ 1]  739 	cpl (LB,sp)   ; increment = -1 
      0002BA 20 05            [ 2]  740 	jra move_loop  
      0002BC                        741 move_down: ; start from bottom address with incr=1 
      0002BC 5A               [ 2]  742     decw x 
      0002BD 90 5A            [ 2]  743 	decw y
      0002BF 0C 02            [ 1]  744 	inc (LB,sp) ; incr=1 
      0002C1                        745 move_loop:	
      0002C1 C6 00 09         [ 1]  746     ld a, acc16 
      0002C4 CA 00 0A         [ 1]  747 	or a, acc8
      0002C7 27 14            [ 1]  748 	jreq move_exit 
      0002C9 72 FB 01         [ 2]  749 	addw x,(INCR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002CC 72 F9 01         [ 2]  750 	addw y,(INCR,sp) 
      0002CF 90 F6            [ 1]  751 	ld a,(y)
      0002D1 F7               [ 1]  752 	ld (x),a 
      0002D2 89               [ 2]  753 	pushw x 
      0002D3 CE 00 09         [ 2]  754 	ldw x,acc16 
      0002D6 5A               [ 2]  755 	decw x 
      0002D7 CF 00 09         [ 2]  756 	ldw acc16,x 
      0002DA 85               [ 2]  757 	popw x 
      0002DB 20 E4            [ 2]  758 	jra move_loop
      0002DD                        759 move_exit:
      0002DD                        760 	_drop VSIZE
      0002DD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002DF 81               [ 4]  761 	ret 	
                                    762 
                                    763 ;-------------------------------------
                                    764 ; search text area for a line with 
                                    765 ; same number as lineno  
                                    766 ; input:
                                    767 ;	X 			lineno 
                                    768 ; output:
                                    769 ;   X 			addr of line | 0 
                                    770 ;   Y           lineno|insert address if not found  
                                    771 ;-------------------------------------
                           000001   772 	LL=1 ; line length 
                           000002   773 	LB=2 ; line length low byte 
                           000002   774 	VSIZE=2 
      0002E0                        775 search_lineno:
      0002E0                        776 	_vars VSIZE
      0002E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E2 CF 00 09         [ 2]  777 	ldw acc16,x 
      0002E5 0F 01            [ 1]  778 	clr (LL,sp)
      0002E7 90 CE 00 1B      [ 2]  779 	ldw y,txtbgn
      0002EB                        780 search_ln_loop:
      0002EB 90 C3 00 1D      [ 2]  781 	cpw y,txtend 
      0002EF 2A 13            [ 1]  782 	jrpl 8$
      0002F1 93               [ 1]  783 	ldw x,y 
      0002F2 FE               [ 2]  784 	ldw x,(x) ; x=line number 
      0002F3 C3 00 09         [ 2]  785 	cpw x,acc16 
      0002F6 27 0F            [ 1]  786 	jreq 9$ 
      0002F8 2A 0A            [ 1]  787 	jrpl 8$ ; from here all lines are > lineno 
      0002FA 90 E6 02         [ 1]  788 	ld a,(2,y)
      0002FD 6B 02            [ 1]  789 	ld (LB,sp),a 
      0002FF 72 F9 01         [ 2]  790 	addw y,(LL,sp)
      000302 20 E7            [ 2]  791 	jra search_ln_loop 
      000304 51               [ 1]  792 8$: exgw x,y 
      000305 90 5F            [ 1]  793 	clrw y 	
      000307                        794 9$: _drop VSIZE
      000307 5B 02            [ 2]    1     addw sp,#VSIZE 
      000309 51               [ 1]  795 	exgw x,y   
      00030A 81               [ 4]  796 	ret 
                                    797 
                                    798 ;-------------------------------------
                                    799 ; delete line at addr
                                    800 ; input:
                                    801 ;   X 		addr of line i.e DEST for move 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    802 ;-------------------------------------
                           000001   803 	LLEN=1
                           000003   804 	SRC=3
                           000004   805 	VSIZE=4
      00030B                        806 del_line: 
      00030B                        807 	_vars VSIZE 
      00030B 52 04            [ 2]    1     sub sp,#VSIZE 
      00030D E6 02            [ 1]  808 	ld a,(2,x) ; line length
      00030F 6B 02            [ 1]  809 	ld (LLEN+1,sp),a 
      000311 0F 01            [ 1]  810 	clr (LLEN,sp)
      000313 90 93            [ 1]  811 	ldw y,x  
      000315 72 F9 01         [ 2]  812 	addw y,(LLEN,sp) ;SRC  
      000318 17 03            [ 2]  813 	ldw (SRC,sp),y  ;save source 
      00031A 90 CE 00 14      [ 2]  814 	ldw y,ptr16
      00031E 90 E6 02         [ 1]  815 	ld a,(2,y)
      000321 90 5F            [ 1]  816 	clrw y 
      000323 90 97            [ 1]  817 	ld yl,a  
      000325 72 B9 00 1D      [ 2]  818 	addw y,txtend
      000329 72 F2 03         [ 2]  819 	subw y,(SRC,sp) ; y=count 
      00032C 90 CF 00 09      [ 2]  820 	ldw acc16,y 
      000330 16 03            [ 2]  821 	ldw y,(SRC,sp)    ; source
      000332 CD 02 9E         [ 4]  822 	call move
      000335 90 CE 00 1D      [ 2]  823 	ldw y,txtend 
      000339 72 F2 01         [ 2]  824 	subw y,(LLEN,sp)
      00033C 90 CF 00 1D      [ 2]  825 	ldw txtend,y  
      000340                        826 	_drop VSIZE     
      000340 5B 04            [ 2]    1     addw sp,#VSIZE 
      000342 81               [ 4]  827 	ret 
                                    828 
                                    829 ;---------------------------------------------
                                    830 ; create a gap in text area 
                                    831 ; input:
                                    832 ;    X 			addr gap start 
                                    833 ;    Y 			gap length 
                                    834 ; output:
                                    835 ;    X 			addr gap start 
                                    836 ;--------------------------------------------
                           000001   837 	DEST=1
                           000003   838 	SRC=3
                           000005   839 	LEN=5
                           000006   840 	VSIZE=6 
      000343                        841 create_gap:
      000343                        842 	_vars VSIZE
      000343 52 06            [ 2]    1     sub sp,#VSIZE 
      000345 C3 00 1D         [ 2]  843 	cpw x,txtend 
      000348 2A 27            [ 1]  844 	jrpl 9$ ; no need for a gap since at end of text.
      00034A 1F 03            [ 2]  845 	ldw (SRC,sp),x 
      00034C 17 05            [ 2]  846 	ldw (LEN,sp),y 
      00034E 90 CF 00 09      [ 2]  847 	ldw acc16,y 
      000352 90 93            [ 1]  848 	ldw y,x ; SRC
      000354 72 BB 00 09      [ 2]  849 	addw x,acc16  
      000358 1F 01            [ 2]  850 	ldw (DEST,sp),x 
                                    851 ;compute size to move 	
      00035A CE 00 1D         [ 2]  852 	ldw x,txtend 
      00035D 72 F0 03         [ 2]  853 	subw x,(SRC,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000360 CF 00 09         [ 2]  854 	ldw acc16,x
      000363 1E 01            [ 2]  855 	ldw x,(DEST,sp) 
      000365 CD 02 9E         [ 4]  856 	call move
      000368 CE 00 1D         [ 2]  857 	ldw x,txtend
      00036B 72 FB 05         [ 2]  858 	addw x,(LEN,sp)
      00036E CF 00 1D         [ 2]  859 	ldw txtend,x
      000371                        860 9$:	_drop VSIZE 
      000371 5B 06            [ 2]    1     addw sp,#VSIZE 
      000373 81               [ 4]  861 	ret 
                                    862 
                                    863 
                                    864 ;--------------------------------------------
                                    865 ; insert line in tib into text area 
                                    866 ; first search for already existing 
                                    867 ; replace existing 
                                    868 ; if strlen(tib)==0 delete existing 
                                    869 ; input:
                                    870 ;   ptr16 				pointer to tokenized line  
                                    871 ; output:
                                    872 ;   none
                                    873 ;---------------------------------------------
                           000001   874 	DEST=1  ; text area insertion address 
                           000003   875 	SRC=3   ; str to insert address 
                           000005   876 	LINENO=5 ; line number 
                           000007   877 	LLEN=7 ; line length 
                           000008   878 	VSIZE=8  
      000374                        879 insert_line:
      000374                        880 	_vars VSIZE 
      000374 52 08            [ 2]    1     sub sp,#VSIZE 
      000376 CE 00 14         [ 2]  881 	ldw x,ptr16  
      000379 C3 00 1B         [ 2]  882 	cpw x,txtbgn 
      00037C 26 0D            [ 1]  883 	jrne 0$
      00037E AE 00 02         [ 2]  884 	ldw x,#2 
      000381 72 D6 00 14      [ 4]  885 	ld a,([ptr16],x)
      000385 5F               [ 1]  886 	clrw x 
      000386 97               [ 1]  887 	ld xl,a
      000387 1F 07            [ 2]  888 	ldw (LLEN,sp),x  
      000389 20 3E            [ 2]  889 	jra 4$
      00038B 72 CE 00 14      [ 5]  890 0$:	ldw x,[ptr16]
      00038F 1F 05            [ 2]  891 	ldw (LINENO,sp),x 
      000391 AE 00 02         [ 2]  892 	ldw x,#2 
      000394 72 D6 00 14      [ 4]  893 	ld a,([ptr16],x); line length 
      000398 97               [ 1]  894 	ld xl,a
      000399 1F 07            [ 2]  895 	ldw (LLEN,sp),x
      00039B 1E 05            [ 2]  896 	ldw x,(LINENO,sp)
      00039D CD 02 E0         [ 4]  897 	call search_lineno 
      0003A0 5D               [ 2]  898 	tnzw x 
      0003A1 26 04            [ 1]  899 	jrne 2$
                                    900 ; line doesn't exit 	
      0003A3 17 01            [ 2]  901 	ldw (DEST,sp),y 
      0003A5 20 05            [ 2]  902 	jra 3$
                                    903 ; line exit delete it.	
      0003A7 1F 01            [ 2]  904 2$: ldw (DEST,sp),x 
      0003A9 CD 03 0B         [ 4]  905 	call del_line
                                    906 ; leave or insert new line if LLEN>0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003AC                        907 3$: 
      0003AC 0D 08            [ 1]  908 	tnz (LLEN+1,sp)
      0003AE 27 3F            [ 1]  909 	jreq insert_ln_exit ; empty line forget it.
      0003B0 1E 01            [ 2]  910 	ldw x,(DEST,sp)
      0003B2 C3 00 1D         [ 2]  911 	cpw x,txtend 
      0003B5 2A 12            [ 1]  912 	jrpl 4$ 
                                    913 ; must create a gap 
      0003B7 CE 00 1D         [ 2]  914 	ldw x,txtend 
      0003BA 72 FB 07         [ 2]  915 	addw x,(LLEN,sp)
      0003BD CF 00 1D         [ 2]  916 	ldw txtend,x 
      0003C0 1E 01            [ 2]  917 	ldw x,(DEST,sp)
      0003C2 16 07            [ 2]  918 	ldw y,(LLEN,sp)
      0003C4 CD 03 43         [ 4]  919 	call create_gap 
      0003C7 20 0B            [ 2]  920 	jra 5$ 
      0003C9                        921 4$: ; leave line at end. 
      0003C9 1E 07            [ 2]  922 	ldw x,(LLEN,sp) 
      0003CB 72 BB 00 1D      [ 2]  923 	addw x,txtend 
      0003CF CF 00 1D         [ 2]  924 	ldw txtend,x 
      0003D2 20 1B            [ 2]  925 	jra insert_ln_exit 
      0003D4                        926 5$:	
      0003D4 1E 07            [ 2]  927 	ldw x,(LLEN,sp)
      0003D6 CF 00 09         [ 2]  928 	ldw acc16,x 
      0003D9 90 CE 00 14      [ 2]  929 	ldw y,ptr16 
      0003DD 72 F9 07         [ 2]  930 	addw y,(LLEN,sp)
      0003E0 1E 01            [ 2]  931 	ldw x,(DEST,sp) ; dest address 
      0003E2 CD 02 9E         [ 4]  932 	call move 
      0003E5 CE 00 1D         [ 2]  933 	ldw x,txtend 
      0003E8 72 F0 07         [ 2]  934 	subw x,(LLEN,sp)
      0003EB CF 00 1D         [ 2]  935 	ldw txtend,x
      0003EE 7F               [ 1]  936 	clr (x) 
      0003EF                        937 insert_ln_exit:	
      0003EF                        938 	_drop VSIZE
      0003EF 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003F1 81               [ 4]  939 	ret
                                    940 
                                    941 
                                    942 ;-----------------------------
                                    943 ; check if text buffer full
                                    944 ; input:
                                    945 ;   ptr16     addr start tokenize line 
                                    946 ;   X         buffer index 
                                    947 ; output:
                                    948 ;   none 
                                    949 ;-----------------------------------
      0003F2                        950 check_full:
      0003F2 72 BB 00 14      [ 2]  951 	addw x,ptr16 
      0003F6 A3 16 C8         [ 2]  952 	cpw x,#tib 
      0003F9 25 05            [ 1]  953 	jrult 1$
      0003FB A6 01            [ 1]  954 	ld a,#ERR_MEM_FULL
      0003FD CC 07 0B         [ 2]  955 	jp tb_error 
      000400 81               [ 4]  956 1$: ret 
                                    957 
                                    958 
                                    959 ;-----------------------------------
                                    960 ; create token list form text line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    961 ; save this list in text area
                                    962 ; input:
                                    963 ;   none
                                    964 ; output:
                                    965 ;   basicptr     token list buffer
                                    966 ;   lineno 		 BASIC line number 
                                    967 ;   in.w  		 cleared 
                                    968 ;-----------------------------------
                                    969 	.macro _incr_ptr16 n 
                                    970 	ldw x,#n 
                                    971 	addw x,ptr16 
                                    972 	ldw ptr16,x 
                                    973 	.endm 
                                    974 
                           000001   975 	XSAVE=1
                           000003   976 	BUFIDX=3
                           000004   977 	VSIZE=4
      000401                        978 compile:
      000401                        979 	_vars VSIZE 
      000401 52 04            [ 2]    1     sub sp,#VSIZE 
      000403 72 1A 00 24      [ 1]  980 	bset flags,#FCOMP 
      000407 CE 00 1D         [ 2]  981 	ldw x,txtend
      00040A CF 00 14         [ 2]  982 	ldw ptr16,x 
      00040D 5F               [ 1]  983 	clrw x 
      00040E AE 00 03         [ 2]  984 	ldw x,#3
      000411 1F 03            [ 2]  985 	ldw (BUFIDX,sp),X  
      000413 CD 03 F2         [ 4]  986 	call check_full
      000416 5F               [ 1]  987 	clrw x 
      000417 72 CF 00 14      [ 5]  988 	ldw [ptr16],x 
      00041B CD 0D 0E         [ 4]  989 	call get_token
      00041E 1F 01            [ 2]  990 	ldw (XSAVE,sp),x 
      000420 A1 02            [ 1]  991 	cp a,#TK_INTGR 
      000422 26 11            [ 1]  992 	jrne 3$
      000424 A3 00 00         [ 2]  993 	cpw x,#0  
      000427 22 03            [ 1]  994 	jrugt 1$
      000429 CC 07 09         [ 2]  995 	jp syntax_error 
      00042C 72 CF 00 14      [ 5]  996 1$:	ldw [ptr16],x; line number
      000430 CD 0D 0E         [ 4]  997 2$:	call get_token
      000433 1F 01            [ 2]  998 	ldw (XSAVE,sp),x 
      000435 A1 00            [ 1]  999 3$:	cp a,#TK_NONE 
      000437 27 7A            [ 1] 1000 	jreq 9$ 
      000439 1E 03            [ 2] 1001 	ldw x,(BUFIDX,sp)
      00043B CD 03 F2         [ 4] 1002 	call check_full 
      00043E 16 03            [ 2] 1003 	ldw y,(BUFIDX,sp) 
      000440 91 D7 14         [ 4] 1004 	ld ([ptr16],y),a 
      000443 90 5C            [ 1] 1005 	incw y
      000445 17 03            [ 2] 1006 	ldw (BUFIDX,sp),y
      000447 A1 08            [ 1] 1007 	cp a,#TK_QSTR 
      000449 26 25            [ 1] 1008 	jrne 4$
      00044B AE 17 18         [ 2] 1009 	ldw x,#pad 
      00044E CD 02 72         [ 4] 1010 	call strlen
      000451 5C               [ 1] 1011 	incw x  
      000452 CD 03 F2         [ 4] 1012 	call check_full 
      000455 90 AE 17 18      [ 2] 1013 	ldw y,#pad 
      000459 CE 00 14         [ 2] 1014 	ldw x,ptr16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00045C 72 FB 03         [ 2] 1015 	addw x,(BUFIDX,sp)	
      00045F CD 02 90         [ 4] 1016 	call strcpy 
      000462 AE 17 18         [ 2] 1017 	ldw x,#pad 
      000465 CD 02 72         [ 4] 1018 	call strlen 
      000468 5C               [ 1] 1019 	incw x
      000469 72 FB 03         [ 2] 1020 	addw x,(BUFIDX,sp) 
      00046C 1F 03            [ 2] 1021 	ldw (BUFIDX,sp),x
      00046E 20 C0            [ 2] 1022 	jra 2$  
      000470 A1 02            [ 1] 1023 4$: cp a,#TK_INTGR
      000472 25 BC            [ 1] 1024 	jrult 2$
      000474 A1 07            [ 1] 1025 	cp a,#TK_FUNC 
      000476 22 B8            [ 1] 1026 	Jrugt 2$
      000478 1E 01            [ 2] 1027 	ldw x,(XSAVE,sp) 
      00047A 16 03            [ 2] 1028 	ldw y,(BUFIDX,sp)
      00047C 91 DF 14         [ 5] 1029 	ldw ([ptr16],y),x
      00047F A3 16 C2         [ 2] 1030 	cpw x,#rem 
      000482 26 26            [ 1] 1031 	jrne 5$
      000484 72 A9 00 02      [ 2] 1032 	addw y,#2 
      000488 90 89            [ 2] 1033 	pushw y 
      00048A CE 00 14         [ 2] 1034 	ldw x,ptr16 
      00048D 72 FB 01         [ 2] 1035 	addw x,(1,sp)
      000490                       1036 	_drop 2  
      000490 5B 02            [ 2]    1     addw sp,#2 
      000492 90 CE 00 00      [ 2] 1037 	ldw y,in.w 
      000496 72 A9 16 C8      [ 2] 1038 	addw y,#tib 
      00049A CD 02 90         [ 4] 1039 	call strcpy 	
      00049D CD 02 72         [ 4] 1040 	call strlen 
      0004A0 1C 00 03         [ 2] 1041 	addw x,#3 ; rem exec address+string 0. 
      0004A3 72 FB 03         [ 2] 1042 	addw x,(BUFIDX,sp)
      0004A6 1F 03            [ 2] 1043 	ldw (BUFIDX,sp),x 
      0004A8 20 09            [ 2] 1044 	jra 9$
      0004AA 72 A9 00 02      [ 2] 1045 5$:	addw y,#2 
      0004AE 17 03            [ 2] 1046 	ldw (BUFIDX,sp),y 
      0004B0 CC 04 30         [ 2] 1047 	jp 2$
      0004B3                       1048 9$: 
      0004B3 AE 00 02         [ 2] 1049 	ldw x,#2
      0004B6 16 03            [ 2] 1050 	ldw y,(BUFIDX,sp)
      0004B8 90 9F            [ 1] 1051 	ld a,yl 
      0004BA 72 D7 00 14      [ 4] 1052 	ld ([ptr16],x),a  	
      0004BE 72 CE 00 14      [ 5] 1053 	ldw x,[ptr16]
      0004C2 27 09            [ 1] 1054 	jreq 10$
      0004C4 CD 03 74         [ 4] 1055 	call insert_line
      0004C7 72 5F 00 02      [ 1] 1056 	clr  count 
      0004CB 20 13            [ 2] 1057 	jra  11$ 
      0004CD                       1058 10$: 
      0004CD CE 00 14         [ 2] 1059 	ldw x,ptr16 
      0004D0 CF 00 03         [ 2] 1060 	ldw basicptr,x 
      0004D3 E6 02            [ 1] 1061 	ld a,(2,x)
      0004D5 C7 00 02         [ 1] 1062 	ld count,a 
      0004D8 FE               [ 2] 1063 	ldw x,(x)
      0004D9 CF 00 05         [ 2] 1064 	ldw lineno,x 
      0004DC 35 03 00 01      [ 1] 1065 	mov in,#3 
      0004E0                       1066 11$:
      0004E0                       1067 	_drop VSIZE 
      0004E0 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004E2 72 1B 00 24      [ 1] 1068 	bres flags,#FCOMP 
      0004E6 81               [ 4] 1069 	ret 
                                   1070 
                                   1071 
                                   1072 ;------------------------------------
                                   1073 ;  set all variables to zero 
                                   1074 ; input:
                                   1075 ;   none 
                                   1076 ; output:
                                   1077 ;	none
                                   1078 ;------------------------------------
      0004E7                       1079 clear_vars:
      0004E7 AE 00 26         [ 2] 1080 	ldw x,#vars 
      0004EA 90 AE 00 34      [ 2] 1081 	ldw y,#2*26 
      0004EE 7F               [ 1] 1082 1$:	clr (x)
      0004EF 5C               [ 1] 1083 	incw x 
      0004F0 90 5A            [ 2] 1084 	decw y 
      0004F2 26 FA            [ 1] 1085 	jrne 1$
      0004F4 81               [ 4] 1086 	ret 
                                   1087 
                                   1088 ;-------------------------------------
                                   1089 ; check if A is a letter
                                   1090 ; input:
                                   1091 ;   A 			character to test 
                                   1092 ; output:
                                   1093 ;   C flag      1 true, 0 false 
                                   1094 ;-------------------------------------
      0004F5                       1095 is_alpha:
      0004F5 A1 41            [ 1] 1096 	cp a,#'A 
      0004F7 8C               [ 1] 1097 	ccf
      0004F8 24 0B            [ 1] 1098 	jrnc 9$ 
      0004FA A1 5B            [ 1] 1099 	cp a,#'Z+1 
      0004FC 25 07            [ 1] 1100 	jrc 9$ 
      0004FE A1 61            [ 1] 1101 	cp a,#'a 
      000500 8C               [ 1] 1102 	ccf 
      000501 24 02            [ 1] 1103 	jrnc 9$
      000503 A1 7B            [ 1] 1104 	cp a,#'z+1   
      000505 81               [ 4] 1105 9$: ret 	
                                   1106 
                                   1107 ;-------------------------------------
                                   1108 ;  program initialization entry point 
                                   1109 ;-------------------------------------
                           000001  1110 	MAJOR=1
                           000000  1111 	MINOR=0
      000506 0A 0A 54 69 6E 79 20  1112 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00054C                       1113 cold_start:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1114 ;set stack 
      00054C AE 17 FF         [ 2] 1115 	ldw x,#STACK_EMPTY
      00054F 94               [ 1] 1116 	ldw sp,x   
                                   1117 ; clear all ram 
      000550 7F               [ 1] 1118 0$: clr (x)
      000551 5A               [ 2] 1119 	decw x 
      000552 26 FC            [ 1] 1120 	jrne 0$
                                   1121 ; activate pull up on all inputs 
      000554 A6 FF            [ 1] 1122 	ld a,#255 
      000556 C7 50 03         [ 1] 1123 	ld PA_CR1,a 
      000559 C7 50 08         [ 1] 1124 	ld PB_CR1,a 
      00055C C7 50 0D         [ 1] 1125 	ld PC_CR1,a 
      00055F C7 50 12         [ 1] 1126 	ld PD_CR1,a 
      000562 C7 50 17         [ 1] 1127 	ld PE_CR1,a 
      000565 C7 50 1C         [ 1] 1128 	ld PF_CR1,a 
      000568 C7 50 21         [ 1] 1129 	ld PG_CR1,a 
      00056B C7 50 2B         [ 1] 1130 	ld PI_CR1,a 
                                   1131 ; select internal clock no divisor: 16 Mhz 	
      00056E A6 E1            [ 1] 1132 	ld a,#CLK_SWR_HSI 
      000570 5F               [ 1] 1133 	clrw x  
      000571 CD 00 99         [ 4] 1134     call clock_init 
      000574 CD 00 AF         [ 4] 1135 	call timer4_init
                                   1136 ; UART3 at 115200 BAUD
      000577 CD 01 74         [ 4] 1137 	call uart3_init
                                   1138 ; activate PE_4 (user button interrupt)
      00057A 72 18 50 18      [ 1] 1139     bset PE_CR2,#USR_BTN_BIT 
                                   1140 ; display system information
      00057E AE 05 06         [ 2] 1141 	ldw x,#software 
      000581 CD 01 B0         [ 4] 1142 	call puts 
      000584 A6 01            [ 1] 1143 	ld a,#MAJOR 
      000586 C7 00 0A         [ 1] 1144 	ld acc8,a 
      000589 5F               [ 1] 1145 	clrw x 
      00058A CF 00 08         [ 2] 1146 	ldw acc24,x 
      00058D A6 0A            [ 1] 1147 	ld a,#10 
      00058F CD 09 39         [ 4] 1148 	call prti24 
      000592 A6 2E            [ 1] 1149 	ld a,#'.
      000594 CD 01 9E         [ 4] 1150 	call putc 
      000597 A6 00            [ 1] 1151 	ld a,#MINOR 
      000599 C7 00 0A         [ 1] 1152 	ld acc8,a 
      00059C 5F               [ 1] 1153 	clrw x 
      00059D CF 00 08         [ 2] 1154 	ldw acc24,x 
      0005A0 A6 0A            [ 1] 1155 	ld a,#10 
      0005A2 CD 09 39         [ 4] 1156 	call prti24 
      0005A5 A6 0D            [ 1] 1157 	ld a,#CR 
      0005A7 CD 01 9E         [ 4] 1158 	call putc 
      0005AA CD 1A 37         [ 4] 1159 	call seek_fdrive 
                                   1160 ; configure LED2 pin 
      0005AD 72 1A 50 0D      [ 1] 1161     bset PC_CR1,#LED2_BIT
      0005B1 72 1A 50 0E      [ 1] 1162     bset PC_CR2,#LED2_BIT
      0005B5 72 1A 50 0C      [ 1] 1163     bset PC_DDR,#LED2_BIT
      0005B9 9A               [ 1] 1164 	rim 
      0005BA AE 16 C8         [ 2] 1165 	ldw x,#tib
      0005BD CF 00 20         [ 2] 1166 	ldw array_addr,x 
      0005C0 72 5C 00 10      [ 1] 1167 	inc seedy+1 
      0005C4 72 5C 00 0E      [ 1] 1168 	inc seedx+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0005C8 CD 05 D7         [ 4] 1169 	call clear_basic
      0005CB CD 13 88         [ 4] 1170 	call ubound 
      0005CE CD 0F AC         [ 4] 1171 	call dpop 
      0005D1 CF 00 22         [ 2] 1172 	ldw array_size,x 
      0005D4 CC 07 5B         [ 2] 1173     jp warm_start 
                                   1174 
                                   1175 ;---------------------------
                                   1176 ; reset BASIC text variables 
                                   1177 ; and clear variables 
                                   1178 ;---------------------------
      0005D7                       1179 clear_basic:
      0005D7 5F               [ 1] 1180 	clrw x 
      0005D8 CF 00 05         [ 2] 1181 	ldw lineno,x
      0005DB 72 5F 00 02      [ 1] 1182 	clr count 
      0005DF AE 00 5A         [ 2] 1183 	ldw x,#free_ram 
      0005E2 CF 00 1B         [ 2] 1184 	ldw txtbgn,x 
      0005E5 CF 00 1D         [ 2] 1185 	ldw txtend,x 
      0005E8 CD 04 E7         [ 4] 1186 	call clear_vars 
      0005EB 81               [ 4] 1187 	ret 
                                   1188 
                                   1189 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1190 ;;   Tiny BASIC error messages     ;;
                                   1191 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005EC                       1192 err_msg:
      0005EC 00 00 06 04 06 12 06  1193 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             21 06 3B 06 4B
      0005F8 06 62 06 79 06 94 06  1194 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             A6 06 B8
      000602 06 C5                 1195 	.word err_no_access 
                                   1196 
      000604 0A 4D 65 6D 6F 72 79  1197 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      000612 0A 73 79 6E 74 61 78  1198 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      000621 0A 6D 61 74 68 20 6F  1199 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      00063B 0A 64 69 76 69 73 69  1200 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      00064B 0A 69 6E 76 61 6C 69  1201 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      000662 0A 72 75 6E 20 74 69  1202 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000679 0A 63 6F 6D 6D 61 6E  1203 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      000694 0A 64 75 70 6C 69 63  1204 err_duplicate: .asciz "\nduplicate name.\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



             61 74 65 20 6E 61 6D
             65 2E 0A 00
      0006A6 0A 46 69 6C 65 20 6E  1205 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006B8 0A 62 61 64 20 76 61  1206 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006C5 0A 46 69 6C 65 20 69  1207 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1208 
      0006F9 6C 61 73 74 20 74 6F  1209 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1210 
      000709                       1211 syntax_error:
      000709 A6 02            [ 1] 1212 	ld a,#ERR_SYNTAX 
                                   1213 
      00070B                       1214 tb_error:
      00070B AE 05 EC         [ 2] 1215 	ldw x, #err_msg 
      00070E 72 5F 00 09      [ 1] 1216 	clr acc16 
      000712 48               [ 1] 1217 	sll a
      000713 72 59 00 09      [ 1] 1218 	rlc acc16  
      000717 C7 00 0A         [ 1] 1219 	ld acc8, a 
      00071A 72 BB 00 09      [ 2] 1220 	addw x,acc16 
      00071E FE               [ 2] 1221 	ldw x,(x)
      00071F CD 01 B0         [ 4] 1222 	call puts
      000722 72 0B 00 24 18   [ 2] 1223 	btjf flags,#FCOMP, 1$
      000727 AE 16 C8         [ 2] 1224 	ldw x,#tib
      00072A CD 01 B0         [ 4] 1225 	call puts 
      00072D A6 0D            [ 1] 1226 	ld a,#CR 
      00072F CD 01 9E         [ 4] 1227 	call putc
      000732 AE 00 11         [ 2] 1228 	ldw x,#in.w.saved
      000735 CD 01 D8         [ 4] 1229 	call spaces
      000738 A6 5E            [ 1] 1230 	ld a,#'^
      00073A CD 01 9E         [ 4] 1231 	call putc 
      00073D 20 18            [ 2] 1232 	jra 6$
      00073F CE 00 03         [ 2] 1233 1$:	ldw x,basicptr
      000742 CD 14 55         [ 4] 1234 	call prt_basic_line
      000745 AE 06 F9         [ 2] 1235 	ldw x,#rt_msg 
      000748 CD 01 B0         [ 4] 1236 	call puts 
      00074B CE 00 11         [ 2] 1237 	ldw x,in.w.saved 
      00074E 72 D6 00 03      [ 4] 1238 	ld a,([basicptr],x)
      000752 5F               [ 1] 1239 	clrw x 
      000753 97               [ 1] 1240 	ld xl,a 
      000754 CD 09 81         [ 4] 1241 	call print_int 
      000757 AE 17 FF         [ 2] 1242 6$: ldw x,#STACK_EMPTY 
      00075A 94               [ 1] 1243     ldw sp,x
      00075B                       1244 warm_start:
      00075B 72 5F 00 24      [ 1] 1245 	clr flags 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00075F 72 5F 00 1F      [ 1] 1246 	clr loop_depth 
      000763 AE 17 80         [ 2] 1247 	ldw x,#dstack_unf 
      000766 CF 00 19         [ 2] 1248 	ldw dstkptr,x 
      000769 35 04 00 25      [ 1] 1249 	mov tab_width,#TAB_WIDTH 
      00076D 35 0A 00 07      [ 1] 1250 	mov base,#10 
      000771 5F               [ 1] 1251 	clrw x 
      000772 CF 00 05         [ 2] 1252 	ldw lineno,x 
      000775 AE 16 C8         [ 2] 1253 	ldw x,#tib 
      000778 CF 00 03         [ 2] 1254 	ldw basicptr,x 
                                   1255 ;----------------------------
                                   1256 ;   BASIC interpreter
                                   1257 ;----------------------------
      00077B                       1258 interp:
      00077B 72 5F 00 00      [ 1] 1259 	clr in.w
      00077F 72 01 00 24 27   [ 2] 1260 	btjf flags,#FRUN,4$ 
                                   1261 ; running program
                                   1262 ; goto next basic line 
      000784 CE 00 03         [ 2] 1263 	ldw x,basicptr
      000787 E6 02            [ 1] 1264 	ld a,(2,x) ; line length 
      000789 C7 00 0A         [ 1] 1265 	ld acc8,a 
      00078C 72 5F 00 09      [ 1] 1266 	clr acc16 
      000790 72 BB 00 09      [ 2] 1267 	addw x,acc16
      000794 C3 00 1D         [ 2] 1268 	cpw x,txtend 
      000797 2A C2            [ 1] 1269 	jrpl warm_start
      000799 CF 00 03         [ 2] 1270 	ldw basicptr,x ; start of next line  
      00079C E6 02            [ 1] 1271 	ld a,(2,x)
      00079E C7 00 02         [ 1] 1272 	ld count,a 
      0007A1 FE               [ 2] 1273 	ldw x,(x) ; line no 
      0007A2 CF 00 05         [ 2] 1274 	ldw lineno,x 
      0007A5 35 03 00 01      [ 1] 1275 	mov in,#3 ; skip first 3 bytes of line 
      0007A9 20 14            [ 2] 1276 	jra interp_loop 
      0007AB                       1277 4$: ; commande line mode 	
      0007AB 72 5F 00 01      [ 1] 1278 	clr in
      0007AF A6 0D            [ 1] 1279 	ld a,#CR 
      0007B1 CD 01 9E         [ 4] 1280 	call putc 
      0007B4 A6 3E            [ 1] 1281 	ld a,#'> 
      0007B6 CD 01 9E         [ 4] 1282 	call putc 
      0007B9 CD 0A 6F         [ 4] 1283 	call readln
      0007BC CD 04 01         [ 4] 1284 	call compile
      0007BF                       1285 interp_loop:  
      0007BF C6 00 01         [ 1] 1286 	ld a,in 
      0007C2 C1 00 02         [ 1] 1287 	cp a,count  
      0007C5 2A B4            [ 1] 1288 	jrpl interp
      0007C7 CD 07 EF         [ 4] 1289 	call next_token
      0007CA A1 01            [ 1] 1290 	cp a,#TK_COLON 
      0007CC 27 F1            [ 1] 1291 	jreq interp_loop 
      0007CE A1 00            [ 1] 1292 	cp a,#TK_NONE 
                                   1293 ;	jreq interp 
      0007D0                       1294 1$:
      0007D0 A1 03            [ 1] 1295 	cp a,#TK_VAR
      0007D2 26 05            [ 1] 1296 	jrne 2$
      0007D4 CD 13 A0         [ 4] 1297 	call let02  
      0007D7 20 E6            [ 2] 1298 	jra interp_loop 
      0007D9                       1299 2$:	
      0007D9 A1 04            [ 1] 1300 	cp a,#TK_ARRAY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0007DB 26 08            [ 1] 1301 	jrne 3$
      0007DD CD 11 F3         [ 4] 1302 	call get_array_element
      0007E0 CD 13 A0         [ 4] 1303 	call let02 
      0007E3 20 DA            [ 2] 1304 	jra interp_loop 
      0007E5                       1305 3$:
      0007E5 A1 06            [ 1] 1306 	cp a,#TK_CMD
      0007E7 26 03            [ 1] 1307 	jrne 4$
      0007E9 FD               [ 4] 1308 	call (x) 
      0007EA 20 D3            [ 2] 1309 	jra interp_loop 
      0007EC                       1310 4$:	
      0007EC CC 07 09         [ 2] 1311 	jp syntax_error 
                                   1312 
                                   1313 ;--------------------------
                                   1314 ; extract next token from
                                   1315 ; token list 
                                   1316 ; basicptr -> base address 
                                   1317 ; in  -> offset in list array 
                                   1318 ; output:
                                   1319 ;   A 		token attribute
                                   1320 ;   X 		token value if there is one
                                   1321 ;----------------------------------------
      0007EF                       1322 next_token:
      0007EF 4B 00            [ 1] 1323 	push #0
      0007F1 C6 00 01         [ 1] 1324 	ld a,in 
      0007F4 C1 00 02         [ 1] 1325 	cp a,count 
      0007F7 84               [ 1] 1326 	pop a 
      0007F8 2A 31            [ 1] 1327 	jrpl 9$ 
      0007FA CE 00 00         [ 2] 1328 	ldw x,in.w 
      0007FD CF 00 11         [ 2] 1329 	ldw in.w.saved,x 
      000800 CE 00 03         [ 2] 1330 	ldw x,basicptr 
      000803 72 D6 00 00      [ 4] 1331 	ld a,([in.w],x)
      000807 72 5C 00 01      [ 1] 1332 	inc in 
      00080B A1 02            [ 1] 1333 	cp a,#CMD_END 
      00080D 25 1C            [ 1] 1334 	jrult 9$
      00080F A1 08            [ 1] 1335 	cp a,#TK_QSTR 
      000811 22 18            [ 1] 1336 	jrugt 9$
      000813 25 06            [ 1] 1337 	jrult 2$
      000815 72 BB 00 00      [ 2] 1338 	addw x,in.w 
      000819 20 10            [ 2] 1339 	jra 9$
      00081B 72 DE 00 00      [ 5] 1340 2$: ldw x,([in.w],x)
      00081F 90 CE 00 00      [ 2] 1341 	ldw y,in.w 
      000823 72 A9 00 02      [ 2] 1342 	addw y,#2
      000827 90 CF 00 00      [ 2] 1343 	ldw in.w,y
      00082B 81               [ 4] 1344 9$: ret	
                                   1345 
                                   1346 
                                   1347 ;----------------------------------------
                                   1348 ;   DEBUG support functions
                                   1349 ;----------------------------------------
                           000001  1350 .if DEBUG 
                                   1351 ; turn LED on 
      00082C                       1352 ledon:
      00082C 72 1A 50 0A      [ 1] 1353     bset PC_ODR,#LED2_BIT
      000830 81               [ 4] 1354     ret 
                                   1355 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1356 ; turn LED off 
      000831                       1357 ledoff:
      000831 72 1B 50 0A      [ 1] 1358     bres PC_ODR,#LED2_BIT 
      000835 81               [ 4] 1359     ret 
                                   1360 
                                   1361 ; invert LED status 
      000836                       1362 ledtoggle:
      000836 A6 20            [ 1] 1363     ld a,#LED2_MASK
      000838 C8 50 0A         [ 1] 1364     xor a,PC_ODR
      00083B C7 50 0A         [ 1] 1365     ld PC_ODR,a
      00083E 81               [ 4] 1366     ret 
                                   1367 
      00083F                       1368 left_paren:
      00083F A6 20            [ 1] 1369 	ld a,#SPACE 
      000841 CD 01 9E         [ 4] 1370 	call putc
      000844 A6 28            [ 1] 1371 	ld a,#'( 
      000846 CD 01 9E         [ 4] 1372 	call putc 	
      000849 81               [ 4] 1373 	ret 
                                   1374 
                                   1375 ;------------------------------
                                   1376 ; print 8 bit register 
                                   1377 ; input:
                                   1378 ;   X  point to register name 
                                   1379 ;   A  register value to print 
                                   1380 ; output:
                                   1381 ;   none
                                   1382 ;------------------------------- 
      00084A                       1383 prt_reg8:
      00084A 88               [ 1] 1384 	push a 
      00084B CD 01 B0         [ 4] 1385 	call puts 
      00084E 7B 01            [ 1] 1386 	ld a,(1,sp) 
      000850 C7 00 0A         [ 1] 1387 	ld acc8,a 
      000853 5F               [ 1] 1388 	clrw x 
      000854 97               [ 1] 1389 	ld xl,a 
      000855 35 10 00 07      [ 1] 1390 	mov base,#16
      000859 CD 09 81         [ 4] 1391 	call print_int 
      00085C CD 08 3F         [ 4] 1392 	call left_paren 
      00085F 84               [ 1] 1393 	pop a 
      000860 5F               [ 1] 1394 	clrw x 
      000861 97               [ 1] 1395 	ld xl,a 
      000862 35 0A 00 07      [ 1] 1396 	mov base,#10 
      000866 CD 09 81         [ 4] 1397 	call print_int  
      000869 A6 29            [ 1] 1398 	ld a,#') 
      00086B CD 01 9E         [ 4] 1399 	call putc
      00086E 81               [ 4] 1400 	ret
                                   1401 
                                   1402 ;--------------------------------
                                   1403 ; print 16 bits register 
                                   1404 ; input:
                                   1405 ;   X   point register name 
                                   1406 ;   Y   register value to print 
                                   1407 ; output:
                                   1408 ;  none
                                   1409 ;--------------------------------
      00086F                       1410 prt_reg16: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00086F 90 89            [ 2] 1411 	pushw y 
      000871 CD 01 B0         [ 4] 1412 	call puts 
      000874 1E 01            [ 2] 1413 	ldw x,(1,sp) 
      000876 35 10 00 07      [ 1] 1414 	mov base,#16 
      00087A CD 09 81         [ 4] 1415 	call print_int  
      00087D CD 08 3F         [ 4] 1416 	call left_paren 
      000880 85               [ 2] 1417 	popw x 
      000881 35 0A 00 07      [ 1] 1418 	mov base,#10 
      000885 CD 09 81         [ 4] 1419 	call print_int  
      000888 A6 29            [ 1] 1420 	ld a,#') 
      00088A CD 01 9E         [ 4] 1421 	call putc
      00088D 81               [ 4] 1422 	ret 
                                   1423 
                                   1424 ;------------------------------------
                                   1425 ; print registers contents saved on
                                   1426 ; stack by trap interrupt.
                                   1427 ;------------------------------------
      00088E                       1428 print_registers:
      00088E AE 08 E1         [ 2] 1429 	ldw x,#STATES
      000891 CD 01 B0         [ 4] 1430 	call puts
                                   1431 ; print EPC 
      000894 AE 09 1E         [ 2] 1432 	ldw x, #REG_EPC
      000897 CD 01 B0         [ 4] 1433 	call puts 
      00089A 7B 0B            [ 1] 1434 	ld a, (11,sp)
      00089C C7 00 0A         [ 1] 1435 	ld acc8,a 
      00089F 7B 0A            [ 1] 1436 	ld a, (10,sp) 
      0008A1 C7 00 09         [ 1] 1437 	ld acc16,a 
      0008A4 7B 09            [ 1] 1438 	ld a,(9,sp) 
      0008A6 C7 00 08         [ 1] 1439 	ld acc24,a
      0008A9 5F               [ 1] 1440 	clrw x  
      0008AA A6 10            [ 1] 1441 	ld a,#16
      0008AC CD 09 39         [ 4] 1442 	call prti24  
                                   1443 ; print X
      0008AF AE 09 27         [ 2] 1444 	ldw x,#REG_X
      0008B2 16 05            [ 2] 1445 	ldw y,(5,sp)
      0008B4 CD 08 6F         [ 4] 1446 	call prt_reg16  
                                   1447 ; print Y 
      0008B7 AE 09 23         [ 2] 1448 	ldw x,#REG_Y
      0008BA 16 07            [ 2] 1449 	ldw y, (7,sp)
      0008BC CD 08 6F         [ 4] 1450 	call prt_reg16  
                                   1451 ; print A 
      0008BF AE 09 2B         [ 2] 1452 	ldw x,#REG_A
      0008C2 7B 04            [ 1] 1453 	ld a, (4,sp) 
      0008C4 CD 08 4A         [ 4] 1454 	call prt_reg8
                                   1455 ; print CC 
      0008C7 AE 09 2F         [ 2] 1456 	ldw x,#REG_CC 
      0008CA 7B 03            [ 1] 1457 	ld a, (3,sp) 
      0008CC CD 08 4A         [ 4] 1458 	call prt_reg8 
                                   1459 ; print SP 
      0008CF AE 09 34         [ 2] 1460 	ldw x,#REG_SP
      0008D2 90 96            [ 1] 1461 	ldw y,sp 
      0008D4 72 A9 00 0C      [ 2] 1462 	addw y,#12
      0008D8 CD 08 6F         [ 4] 1463 	call prt_reg16  
      0008DB A6 0A            [ 1] 1464 	ld a,#'\n' 
      0008DD CD 01 9E         [ 4] 1465 	call putc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0008E0 81               [ 4] 1466 	ret
                                   1467 
      0008E1 0A 52 65 67 69 73 74  1468 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      00091E 45 50 43 3A 00        1469 REG_EPC: .asciz "EPC:"
      000923 0A 59 3A 00           1470 REG_Y:   .asciz "\nY:" 
      000927 0A 58 3A 00           1471 REG_X:   .asciz "\nX:"
      00092B 0A 41 3A 00           1472 REG_A:   .asciz "\nA:" 
      00092F 0A 43 43 3A 00        1473 REG_CC:  .asciz "\nCC:"
      000934 0A 53 50 3A 00        1474 REG_SP:  .asciz "\nSP:"
                                   1475 .endif ; DEBUG 
                                   1476 
                                   1477 ;------------------------------------
                                   1478 ; print integer in acc24 
                                   1479 ; input:
                                   1480 ;	acc24 		integer to print 
                                   1481 ;	A 			numerical base for conversion 
                                   1482 ;               if bit 7 is set add a space at print end.
                                   1483 ;   XL 			field width, 0 -> no fill.
                                   1484 ;  output:
                                   1485 ;    none 
                                   1486 ;------------------------------------
                           000001  1487 	WIDTH = 1
                           000002  1488 	BASE = 2
                           000003  1489 	ADD_SPACE=3 ; add a space after number 
                           000003  1490 	VSIZE = 3
      000939                       1491 prti24:
      000939                       1492 	_vars VSIZE 
      000939 52 03            [ 2]    1     sub sp,#VSIZE 
      00093B 0F 03            [ 1] 1493 	clr (ADD_SPACE,sp)
      00093D A5 80            [ 1] 1494 	bcp a,#0x80 
      00093F 27 02            [ 1] 1495 	jreq 0$ 
      000941 03 03            [ 1] 1496 	cpl (ADD_SPACE,sp)
      000943 A4 1F            [ 1] 1497 0$:	and a,#31 
      000945 6B 02            [ 1] 1498 	ld (BASE,sp),a
      000947 9F               [ 1] 1499 	ld a,xl
      000948 6B 01            [ 1] 1500 	ld (WIDTH,sp),a 
      00094A 7B 02            [ 1] 1501 	ld a, (BASE,sp)  
      00094C CD 09 DD         [ 4] 1502     call itoa  ; conversion entier en  .asciz
      00094F 7B 01            [ 1] 1503 1$: ld a,(WIDTH,sp)
      000951 27 1F            [ 1] 1504 	jreq 4$
      000953 C7 00 0A         [ 1] 1505 	ld acc8,a 
      000956 89               [ 2] 1506 	pushw x 
      000957 CD 02 72         [ 4] 1507 	call strlen 
      00095A 9F               [ 1] 1508 	ld a,xl 
      00095B 85               [ 2] 1509 	popw x 
      00095C 31 00 0A         [ 3] 1510 	exg a,acc8 
      00095F C0 00 0A         [ 1] 1511 	sub a,acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000962 2B 0E            [ 1] 1512 	jrmi 4$
      000964 6B 01            [ 1] 1513 	ld (WIDTH,sp),a 
      000966 A6 20            [ 1] 1514 	ld  a,#SPACE
      000968 0D 01            [ 1] 1515 3$: tnz (WIDTH,sp)
      00096A 27 06            [ 1] 1516 	jreq 4$
      00096C 5A               [ 2] 1517 	decw x 
      00096D F7               [ 1] 1518 	ld (x),a 
      00096E 0A 01            [ 1] 1519 	dec (WIDTH,sp) 
      000970 20 F6            [ 2] 1520 	jra 3$
      000972                       1521 4$: 
      000972 CD 01 B0         [ 4] 1522 	call puts 
      000975 0D 03            [ 1] 1523 	tnz (ADD_SPACE,sp)
      000977 27 05            [ 1] 1524 	jreq 5$
      000979 A6 20            [ 1] 1525     ld a,#SPACE 
      00097B CD 01 9E         [ 4] 1526 	call putc 
      00097E                       1527 5$: _drop VSIZE 
      00097E 5B 03            [ 2]    1     addw sp,#VSIZE 
      000980 81               [ 4] 1528     ret	
                                   1529 
                                   1530 ;-----------------------------------
                                   1531 ; print a 16 bit integer 
                                   1532 ; using variable 'base' as conversion
                                   1533 ; format.
                                   1534 ; input:
                                   1535 ;   X       integer to print 
                                   1536 ;   base    conversion base 
                                   1537 ; output:
                                   1538 ;   none 
                                   1539 ;-----------------------------------
                           000001  1540 	SIGN=1
                           000001  1541 	VSIZE=1
      000981                       1542 print_int: 
      000981                       1543 	_vars VSIZE 
      000981 52 01            [ 2]    1     sub sp,#VSIZE 
      000983 0F 01            [ 1] 1544 	clr (SIGN,sp)
      000985 90 AE 17 3F      [ 2] 1545 	ldw y,#pad+PAD_SIZE-1 
      000989 90 7F            [ 1] 1546 	clr (y)
      00098B C6 00 07         [ 1] 1547 	ld a,base  
      00098E A1 0A            [ 1] 1548 	cp a,#10 
      000990 26 06            [ 1] 1549 	jrne 1$ 
      000992 5D               [ 2] 1550 	tnzw x 
      000993 2A 03            [ 1] 1551 	jrpl 1$ 
      000995 03 01            [ 1] 1552 	cpl (SIGN,sp)
      000997 50               [ 2] 1553 	negw x 	 
      000998                       1554 1$:	
      000998 C6 00 07         [ 1] 1555 	ld a,base 
      00099B 62               [ 2] 1556 	div x,a 
      00099C AB 30            [ 1] 1557 	add a,#'0 
      00099E A1 3A            [ 1] 1558 	cp a,#'9+1 
      0009A0 2B 02            [ 1] 1559 	jrmi 2$ 
      0009A2 AB 07            [ 1] 1560 	add a,#7 
      0009A4 90 5A            [ 2] 1561 2$: decw y 
      0009A6 90 F7            [ 1] 1562 	ld (y),a 
      0009A8 5D               [ 2] 1563 	tnzw x 
      0009A9 26 ED            [ 1] 1564 	jrne 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0009AB A6 10            [ 1] 1565 	ld a,#16 
      0009AD C1 00 07         [ 1] 1566 	cp a,base 
      0009B0 26 08            [ 1] 1567 	jrne 3$
      0009B2 A6 24            [ 1] 1568 	ld a,#'$
      0009B4 90 5A            [ 2] 1569 	decw y  
      0009B6 90 F7            [ 1] 1570 	ld (y),a
      0009B8 20 0A            [ 2] 1571 	jra 9$ 
      0009BA 0D 01            [ 1] 1572 3$: tnz (SIGN,sp)
      0009BC 27 06            [ 1] 1573 	jreq 9$ 
      0009BE A6 2D            [ 1] 1574 	ld a,#'-
      0009C0 90 5A            [ 2] 1575 	decw y  
      0009C2 90 F7            [ 1] 1576 	ld (y),a
      0009C4                       1577 9$:	
      0009C4 93               [ 1] 1578 	ldw x,y 
      0009C5 1D 17 3F         [ 2] 1579 	subw x,#pad+PAD_SIZE-1 
      0009C8 50               [ 2] 1580 	negw x  
      0009C9                       1581 10$:
      0009C9 90 5A            [ 2] 1582 	decw y 
      0009CB A6 20            [ 1] 1583 	ld a,#SPACE 
      0009CD 90 F7            [ 1] 1584 	ld (y),a
      0009CF 5C               [ 1] 1585 	incw x 
      0009D0 9F               [ 1] 1586 	ld a,xl 
      0009D1 C1 00 25         [ 1] 1587 	cp a,tab_width
      0009D4 2B F3            [ 1] 1588 	jrmi 10$ 
      0009D6                       1589 12$:
      0009D6 93               [ 1] 1590     ldw x,y 
      0009D7 CD 01 B0         [ 4] 1591 	call puts  
      0009DA                       1592 	_drop VSIZE 
      0009DA 5B 01            [ 2]    1     addw sp,#VSIZE 
      0009DC 81               [ 4] 1593 	ret 
                                   1594 
                                   1595 ;------------------------------------
                                   1596 ; convert integer in acc24 to string
                                   1597 ; input:
                                   1598 ;   A	  	base
                                   1599 ;	acc24	integer to convert
                                   1600 ; output:
                                   1601 ;   X  		pointer to string
                                   1602 ;------------------------------------
                           000001  1603 	SIGN=1  ; integer sign 
                           000002  1604 	BASE=2  ; numeric base 
                           000002  1605 	VSIZE=2  ;locals size
      0009DD                       1606 itoa:
      0009DD 52 02            [ 2] 1607 	sub sp,#VSIZE
      0009DF 6B 02            [ 1] 1608 	ld (BASE,sp), a  ; base
      0009E1 0F 01            [ 1] 1609 	clr (SIGN,sp)    ; sign
      0009E3 A1 0A            [ 1] 1610 	cp a,#10
      0009E5 26 0A            [ 1] 1611 	jrne 1$
                                   1612 	; base 10 string display with negative sign if bit 23==1
      0009E7 72 0F 00 08 05   [ 2] 1613 	btjf acc24,#7,1$
      0009EC 03 01            [ 1] 1614 	cpl (SIGN,sp)
      0009EE CD 0A 4C         [ 4] 1615 	call neg_acc24
      0009F1                       1616 1$:
                                   1617 ; initialize string pointer 
      0009F1 AE 17 3F         [ 2] 1618 	ldw x,#pad+PAD_SIZE-1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009F4 7F               [ 1] 1619 	clr (x)
      0009F5                       1620 itoa_loop:
      0009F5 7B 02            [ 1] 1621     ld a,(BASE,sp)
      0009F7 CD 0A 24         [ 4] 1622     call divu24_8 ; acc24/A 
      0009FA AB 30            [ 1] 1623     add a,#'0  ; remainder of division
      0009FC A1 3A            [ 1] 1624     cp a,#'9+1
      0009FE 2B 02            [ 1] 1625     jrmi 2$
      000A00 AB 07            [ 1] 1626     add a,#7 
      000A02 5A               [ 2] 1627 2$: decw x
      000A03 F7               [ 1] 1628     ld (x),a
                                   1629 	; if acc24==0 conversion done
      000A04 C6 00 08         [ 1] 1630 	ld a,acc24
      000A07 CA 00 09         [ 1] 1631 	or a,acc16
      000A0A CA 00 0A         [ 1] 1632 	or a,acc8
      000A0D 26 E6            [ 1] 1633     jrne itoa_loop
                                   1634 	;conversion done, next add '$' or '-' as required
      000A0F 7B 02            [ 1] 1635 	ld a,(BASE,sp)
      000A11 A1 10            [ 1] 1636 	cp a,#16
      000A13 27 08            [ 1] 1637 	jreq 8$
      000A15 7B 01            [ 1] 1638 	ld a,(SIGN,sp)
      000A17 27 08            [ 1] 1639     jreq 10$
      000A19 A6 2D            [ 1] 1640     ld a,#'-
      000A1B 20 02            [ 2] 1641 	jra 9$ 
      000A1D A6 24            [ 1] 1642 8$: ld a,#'$ 
      000A1F 5A               [ 2] 1643 9$: decw x
      000A20 F7               [ 1] 1644     ld (x),a
      000A21                       1645 10$:
      000A21 5B 02            [ 2] 1646 	addw sp,#VSIZE
      000A23 81               [ 4] 1647 	ret
                                   1648 
                                   1649 ;-------------------------------------
                                   1650 ; divide uint24_t by uint8_t
                                   1651 ; used to convert uint24_t to string
                                   1652 ; input:
                                   1653 ;	acc24	dividend
                                   1654 ;   A 		divisor
                                   1655 ; output:
                                   1656 ;   acc24	quotient
                                   1657 ;   A		remainder
                                   1658 ;------------------------------------- 
                                   1659 ; offset  on sp of arguments and locals
                           000001  1660 	U8   = 1   ; divisor on stack
                           000001  1661 	VSIZE =1
      000A24                       1662 divu24_8:
      000A24 89               [ 2] 1663 	pushw x ; save x
      000A25 88               [ 1] 1664 	push a 
                                   1665 	; ld dividend UU:MM bytes in X
      000A26 C6 00 08         [ 1] 1666 	ld a, acc24
      000A29 95               [ 1] 1667 	ld xh,a
      000A2A C6 00 09         [ 1] 1668 	ld a,acc24+1
      000A2D 97               [ 1] 1669 	ld xl,a
      000A2E 7B 01            [ 1] 1670 	ld a,(U8,SP) ; divisor
      000A30 62               [ 2] 1671 	div x,a ; UU:MM/U8
      000A31 88               [ 1] 1672 	push a  ;save remainder
      000A32 9E               [ 1] 1673 	ld a,xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A33 C7 00 08         [ 1] 1674 	ld acc24,a
      000A36 9F               [ 1] 1675 	ld a,xl
      000A37 C7 00 09         [ 1] 1676 	ld acc24+1,a
      000A3A 84               [ 1] 1677 	pop a
      000A3B 95               [ 1] 1678 	ld xh,a
      000A3C C6 00 0A         [ 1] 1679 	ld a,acc24+2
      000A3F 97               [ 1] 1680 	ld xl,a
      000A40 7B 01            [ 1] 1681 	ld a,(U8,sp) ; divisor
      000A42 62               [ 2] 1682 	div x,a  ; R:LL/U8
      000A43 6B 01            [ 1] 1683 	ld (U8,sp),a ; save remainder
      000A45 9F               [ 1] 1684 	ld a,xl
      000A46 C7 00 0A         [ 1] 1685 	ld acc24+2,a
      000A49 84               [ 1] 1686 	pop a
      000A4A 85               [ 2] 1687 	popw x
      000A4B 81               [ 4] 1688 	ret
                                   1689 
                                   1690 ;------------------------------------
                                   1691 ;  two's complement acc24
                                   1692 ;  input:
                                   1693 ;		acc24 variable
                                   1694 ;  output:
                                   1695 ;		acc24 variable
                                   1696 ;-------------------------------------
      000A4C                       1697 neg_acc24:
      000A4C 72 53 00 0A      [ 1] 1698 	cpl acc24+2
      000A50 72 53 00 09      [ 1] 1699 	cpl acc24+1
      000A54 72 53 00 08      [ 1] 1700 	cpl acc24
      000A58 A6 01            [ 1] 1701 	ld a,#1
      000A5A CB 00 0A         [ 1] 1702 	add a,acc24+2
      000A5D C7 00 0A         [ 1] 1703 	ld acc24+2,a
      000A60 4F               [ 1] 1704 	clr a
      000A61 C9 00 09         [ 1] 1705 	adc a,acc24+1
      000A64 C7 00 09         [ 1] 1706 	ld acc24+1,a 
      000A67 4F               [ 1] 1707 	clr a 
      000A68 C9 00 08         [ 1] 1708 	adc a,acc24 
      000A6B C7 00 08         [ 1] 1709 	ld acc24,a 
      000A6E 81               [ 4] 1710 	ret
                                   1711 
                                   1712 
                                   1713 ;------------------------------------
                                   1714 ; read a line of text from terminal
                                   1715 ; input:
                                   1716 ;	none
                                   1717 ; local variable on stack:
                                   1718 ;	LL  line length
                                   1719 ;   RXCHAR last received chaaracte 
                                   1720 ; output:
                                   1721 ;   text in tib  buffer
                                   1722 ;------------------------------------
                                   1723 	; local variables
                           000001  1724 	LL_HB=1
                           000001  1725 	RXCHAR = 1 ; last char received
                           000002  1726 	LL = 2  ; accepted line length
                           000002  1727 	VSIZE=2 
      000A6F                       1728 readln:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A6F 5F               [ 1] 1729 	clrw x 
      000A70 89               [ 2] 1730 	pushw x 
      000A71 90 AE 16 C8      [ 2] 1731  	ldw y,#tib ; input buffer
      000A75                       1732 readln_loop:
      000A75 CD 01 A7         [ 4] 1733 	call getc
      000A78 6B 01            [ 1] 1734 	ld (RXCHAR,sp),a
      000A7A A1 0D            [ 1] 1735 	cp a,#CR
      000A7C 26 03            [ 1] 1736 	jrne 1$
      000A7E CC 0A EE         [ 2] 1737 	jp readln_quit
      000A81 A1 0A            [ 1] 1738 1$:	cp a,#NL
      000A83 27 69            [ 1] 1739 	jreq readln_quit
      000A85 A1 08            [ 1] 1740 	cp a,#BSP
      000A87 27 41            [ 1] 1741 	jreq del_back
      000A89 A1 04            [ 1] 1742 	cp a,#CTRL_D
      000A8B 27 2E            [ 1] 1743 	jreq del_ln
      000A8D A1 12            [ 1] 1744 	cp a,#CTRL_R 
      000A8F 27 06            [ 1] 1745 	jreq reprint 
                                   1746 ;	cp a,#'[
                                   1747 ;	jreq ansi_seq
      000A91                       1748 final_test:
      000A91 A1 20            [ 1] 1749 	cp a,#SPACE
      000A93 2A 44            [ 1] 1750 	jrpl accept_char
      000A95 20 DE            [ 2] 1751 	jra readln_loop
      000A97                       1752 ansi_seq:
                                   1753 ;	call getc
                                   1754 ;	cp a,#'C 
                                   1755 ;	jreq rigth_arrow
                                   1756 ;	cp a,#'D 
                                   1757 ;	jreq left_arrow 
                                   1758 ;	jra final_test
      000A97                       1759 right_arrow:
                                   1760 ;	ld a,#BSP 
                                   1761 ;	call putc 
                                   1762 ;	jra realn_loop 
      000A97                       1763 left_arrow:
                                   1764 
                                   1765 ;	jra readln_loop
      000A97                       1766 reprint: 
      000A97 72 5D 00 02      [ 1] 1767 	tnz count 
      000A9B 27 D8            [ 1] 1768 	jreq readln_loop
      000A9D 0D 02            [ 1] 1769 	tnz (LL,sp)
      000A9F 26 D4            [ 1] 1770 	jrne readln_loop
      000AA1 AE 16 C8         [ 2] 1771 	ldw x,#tib 
      000AA4 CD 01 B0         [ 4] 1772 	call puts
      000AA7 90 AE 16 C8      [ 2] 1773 	ldw y,#tib 
      000AAB C6 00 02         [ 1] 1774 	ld a,count 
      000AAE 6B 02            [ 1] 1775 	ld (LL,sp),a
      000AB0 72 5F 00 02      [ 1] 1776 	clr count 
      000AB4 0F 01            [ 1] 1777 	clr (LL_HB,sp)
      000AB6 72 F9 01         [ 2] 1778 	addw y,(LL_HB,sp)
      000AB9 20 BA            [ 2] 1779 	jra readln_loop 
      000ABB                       1780 del_ln:
      000ABB 7B 02            [ 1] 1781 	ld a,(LL,sp)
      000ABD CD 01 CA         [ 4] 1782 	call delete
      000AC0 90 AE 16 C8      [ 2] 1783 	ldw y,#tib
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AC4 90 7F            [ 1] 1784 	clr (y)
      000AC6 0F 02            [ 1] 1785 	clr (LL,sp)
      000AC8 20 AB            [ 2] 1786 	jra readln_loop
      000ACA                       1787 del_back:
      000ACA 0D 02            [ 1] 1788     tnz (LL,sp)
      000ACC 27 A7            [ 1] 1789     jreq readln_loop
      000ACE 0A 02            [ 1] 1790     dec (LL,sp)
      000AD0 90 5A            [ 2] 1791     decw y
      000AD2 90 7F            [ 1] 1792     clr  (y)
      000AD4 CD 01 BA         [ 4] 1793     call bksp 
      000AD7 20 9C            [ 2] 1794     jra readln_loop	
      000AD9                       1795 accept_char:
      000AD9 A6 4F            [ 1] 1796 	ld a,#TIB_SIZE-1
      000ADB 11 02            [ 1] 1797 	cp a, (LL,sp)
      000ADD 27 96            [ 1] 1798 	jreq readln_loop
      000ADF 7B 01            [ 1] 1799 	ld a,(RXCHAR,sp)
      000AE1 90 F7            [ 1] 1800 	ld (y),a
      000AE3 0C 02            [ 1] 1801 	inc (LL,sp)
      000AE5 90 5C            [ 1] 1802 	incw y
      000AE7 90 7F            [ 1] 1803 	clr (y)
      000AE9 CD 01 9E         [ 4] 1804 	call putc 
      000AEC 20 87            [ 2] 1805 	jra readln_loop
      000AEE                       1806 readln_quit:
      000AEE 90 7F            [ 1] 1807 	clr (y)
      000AF0 7B 02            [ 1] 1808 	ld a,(LL,sp)
      000AF2 C7 00 02         [ 1] 1809 	ld count,a 
      000AF5                       1810 	_drop VSIZE 
      000AF5 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AF7 A6 0D            [ 1] 1811 	ld a,#CR
      000AF9 CD 01 9E         [ 4] 1812 	call putc
      000AFC 81               [ 4] 1813 	ret
                                   1814 
                           000001  1815 .if DEBUG 	
                                   1816 ;----------------------------
                                   1817 ; command interface
                                   1818 ; only 3 commands:
                                   1819 ;  'q' to resume application
                                   1820 ;  'p [addr]' to print memory values 
                                   1821 ;  's addr' to print string 
                                   1822 ;----------------------------
                                   1823 ;local variable 
                           000001  1824 	PSIZE=1
                           000001  1825 	VSIZE=1 
      000AFD                       1826 cmd_itf:
      000AFD 52 01            [ 2] 1827 	sub sp,#VSIZE 
      000AFF 72 5F 00 13      [ 1] 1828 	clr farptr 
      000B03 72 5F 00 14      [ 1] 1829 	clr farptr+1 
      000B07 72 5F 00 15      [ 1] 1830 	clr farptr+2  
      000B0B                       1831 repl:
      000B0B A6 0D            [ 1] 1832 	ld a,#CR 
      000B0D CD 01 9E         [ 4] 1833 	call putc 
      000B10 A6 3F            [ 1] 1834 	ld a,#'? 
      000B12 CD 01 9E         [ 4] 1835 	call putc
      000B15 72 5F 00 00      [ 1] 1836 	clr in.w 
      000B19 72 5F 00 01      [ 1] 1837 	clr in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000B1D CD 0A 6F         [ 4] 1838 	call readln
      000B20 90 AE 16 C8      [ 2] 1839 	ldw y,#tib  
      000B24 90 F6            [ 1] 1840 	ld a,(y)
      000B26 27 E3            [ 1] 1841 	jreq repl  
      000B28 72 5C 00 01      [ 1] 1842 	inc in 
      000B2C CD 0E CD         [ 4] 1843 	call to_upper 
      000B2F A1 51            [ 1] 1844 	cp a,#'Q 
      000B31 26 17            [ 1] 1845 	jrne test_p
      000B33                       1846 repl_exit:
      000B33 72 5F 16 C8      [ 1] 1847 	clr tib 
      000B37 72 5F 00 02      [ 1] 1848 	clr count 
      000B3B 72 5F 00 01      [ 1] 1849 	clr in 
      000B3F                       1850 	_drop #VSIZE 	
      000B3F 5B 01            [ 2]    1     addw sp,##VSIZE 
      000B41 81               [ 4] 1851 	ret  
      000B42                       1852 invalid:
      000B42 AE 0B C0         [ 2] 1853 	ldw x,#invalid_cmd 
      000B45 CD 01 B0         [ 4] 1854 	call puts 
      000B48 20 C1            [ 2] 1855 	jra repl 
      000B4A                       1856 test_p:	
      000B4A A1 50            [ 1] 1857     cp a,#'P 
      000B4C 27 11            [ 1] 1858 	jreq mem_peek
      000B4E A1 53            [ 1] 1859     cp a,#'S 
      000B50 26 F0            [ 1] 1860 	jrne invalid 
      000B52                       1861 print_string:	
      000B52 CD 0D 0E         [ 4] 1862 	call get_token
      000B55 A1 02            [ 1] 1863 	cp a,#TK_INTGR 
      000B57 26 E9            [ 1] 1864 	jrne invalid 
      000B59 CD 01 B0         [ 4] 1865 	call puts
      000B5C CC 0B 0B         [ 2] 1866 	jp repl 	
      000B5F                       1867 mem_peek:
      000B5F A6 20            [ 1] 1868 	ld a,#SPACE 
      000B61 CD 0F 85         [ 4] 1869 	call skip  	 
      000B64 72 B9 00 00      [ 2] 1870 	addw y,in.w 
      000B68 AE 17 18         [ 2] 1871 	ldw x,#pad 
      000B6B CD 02 90         [ 4] 1872 	call strcpy
      000B6E CD 0E D9         [ 4] 1873 	call atoi24 	
      000B71 C6 00 08         [ 1] 1874 	ld a, acc24 
      000B74 CA 00 09         [ 1] 1875 	or a,acc16 
      000B77 CA 00 0A         [ 1] 1876 	or a,acc8 
      000B7A 26 02            [ 1] 1877 	jrne 1$ 
      000B7C 20 0C            [ 2] 1878 	jra peek_byte  
      000B7E CE 00 08         [ 2] 1879 1$:	ldw x,acc24 
      000B81 CF 00 13         [ 2] 1880 	ldw farptr,x 
      000B84 C6 00 0A         [ 1] 1881 	ld a,acc8 
      000B87 C7 00 15         [ 1] 1882 	ld farptr+2,a 
      000B8A                       1883 peek_byte:
      000B8A CD 0B CF         [ 4] 1884 	call print_farptr 
      000B8D A6 08            [ 1] 1885 	ld a,#8 
      000B8F 6B 01            [ 1] 1886 	ld (PSIZE,sp),a 
      000B91 5F               [ 1] 1887 	clrw x 
      000B92 CD 0B EA         [ 4] 1888 1$:	call fetchc  
      000B95 89               [ 2] 1889 	pushw x 
      000B96 C7 00 0A         [ 1] 1890 	ld acc8,a 
      000B99 5F               [ 1] 1891 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B9A CF 00 08         [ 2] 1892 	ldw acc24,x 
      000B9D A6 90            [ 1] 1893 	ld a,#16+128
      000B9F CD 09 39         [ 4] 1894 	call prti24
      000BA2 85               [ 2] 1895 	popw x 
      000BA3 0A 01            [ 1] 1896 	dec (PSIZE,sp)
      000BA5 26 EB            [ 1] 1897 	jrne 1$ 
      000BA7 A6 08            [ 1] 1898 	ld a,#8 
      000BA9 CB 00 15         [ 1] 1899 	add a,farptr+2 
      000BAC C7 00 15         [ 1] 1900 	ld farptr+2,a
      000BAF 4F               [ 1] 1901 	clr a 
      000BB0 C9 00 14         [ 1] 1902 	adc a,farptr+1 
      000BB3 C7 00 14         [ 1] 1903 	ld farptr+1,a 
      000BB6 4F               [ 1] 1904 	clr a 
      000BB7 C9 00 13         [ 1] 1905 	adc a,farptr 
      000BBA C7 00 13         [ 1] 1906 	ld farptr,a 
      000BBD CC 0B 0B         [ 2] 1907 	jp repl  
                                   1908 
      000BC0 6E 6F 74 20 61 20 63  1909 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1910 
                                   1911 ;----------------------------
                                   1912 ; display farptr address
                                   1913 ;----------------------------
      000BCF                       1914 print_farptr:
      000BCF C6 00 15         [ 1] 1915 	ld a ,farptr+2 
      000BD2 C7 00 0A         [ 1] 1916 	ld acc8,a 
      000BD5 CE 00 13         [ 2] 1917 	ldw x,farptr 
      000BD8 CF 00 08         [ 2] 1918 	ldw acc24,x 
      000BDB 5F               [ 1] 1919 	clrw x 
      000BDC A6 10            [ 1] 1920 	ld a,#16 
      000BDE CD 09 39         [ 4] 1921 	call prti24
      000BE1 A6 20            [ 1] 1922 	ld a,#SPACE 
      000BE3 CD 01 9E         [ 4] 1923 	call putc 
      000BE6 CD 01 9E         [ 4] 1924 	call putc 
      000BE9 81               [ 4] 1925 	ret
                                   1926 
                                   1927 ;------------------------------------
                                   1928 ; get byte at address farptr[X]
                                   1929 ; input:
                                   1930 ;	 farptr   address to peek
                                   1931 ;    X		  farptr index 	
                                   1932 ; output:
                                   1933 ;	 A 		  byte from memory  
                                   1934 ;    x		  incremented by 1
                                   1935 ;------------------------------------
      000BEA                       1936 fetchc: ; @C
      000BEA 92 AF 00 13      [ 5] 1937 	ldf a,([farptr],x)
      000BEE 5C               [ 1] 1938 	incw x
      000BEF 81               [ 4] 1939 	ret
                                   1940 
                                   1941 
                                   1942 ;------------------------------------
                                   1943 ; expect a number from command line 
                                   1944 ; next argument
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1945 ;  input:
                                   1946 ;	  none
                                   1947 ;  output:
                                   1948 ;    acc24   int24_t 
                                   1949 ;------------------------------------
      000BF0                       1950 number::
      000BF0 CD 0D 0E         [ 4] 1951 	call get_token
      000BF3 CD 0E D9         [ 4] 1952 	call atoi24
      000BF6 81               [ 4] 1953 	ret
                                   1954 .endif ; DEBUG 
                                   1955 
                                   1956 ;------------------------------------
                                   1957 ; parse quoted string 
                                   1958 ; input:
                                   1959 ;   Y 	pointer to tib 
                                   1960 ;   X   pointer to pad
                                   1961 ; output:
                                   1962 ;	pad   parsed string
                                   1963 ;   TOS  char* to pad  
                                   1964 ;------------------------------------
                           000001  1965 	PREV = 1
                           000002  1966 	CURR =2 
                           000002  1967 	VSIZE=2 
      000BF7                       1968 parse_quote: ; { -- addr }
      000BF7                       1969 	_vars VSIZE 
      000BF7 52 02            [ 2]    1     sub sp,#VSIZE 
      000BF9 4F               [ 1] 1970 	clr a
      000BFA 6B 01            [ 1] 1971 1$:	ld (PREV,sp),a 
      000BFC 72 5C 00 01      [ 1] 1972 2$:	inc in
      000C00 91 D6 00         [ 4] 1973 	ld a,([in.w],y)
      000C03 27 24            [ 1] 1974 	jreq 6$
      000C05 6B 02            [ 1] 1975 	ld (CURR,sp),a 
      000C07 A6 5C            [ 1] 1976 	ld a,#'\
      000C09 11 01            [ 1] 1977 	cp a, (PREV,sp)
      000C0B 26 0A            [ 1] 1978 	jrne 3$
      000C0D 0F 01            [ 1] 1979 	clr (PREV,sp)
      000C0F 7B 02            [ 1] 1980 	ld a,(CURR,sp)
      000C11 AD 1F            [ 4] 1981 	callr convert_escape
      000C13 F7               [ 1] 1982 	ld (x),a 
      000C14 5C               [ 1] 1983 	incw x 
      000C15 20 E5            [ 2] 1984 	jra 2$
      000C17                       1985 3$:
      000C17 7B 02            [ 1] 1986 	ld a,(CURR,sp)
      000C19 A1 5C            [ 1] 1987 	cp a,#'\'
      000C1B 27 DD            [ 1] 1988 	jreq 1$
      000C1D A1 22            [ 1] 1989 	cp a,#'"
      000C1F 27 04            [ 1] 1990 	jreq 5$ 
      000C21 F7               [ 1] 1991 	ld (x),a 
      000C22 5C               [ 1] 1992 	incw x 
      000C23 20 D7            [ 2] 1993 	jra 2$
      000C25 72 5C 00 01      [ 1] 1994 5$:	inc in 
      000C29 7F               [ 1] 1995 6$: clr (x)
      000C2A AE 17 18         [ 2] 1996 	ldw x,#pad 
      000C2D                       1997 	_drop VSIZE
      000C2D 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000C2F A6 08            [ 1] 1998 	ld a,#TK_QSTR  
      000C31 81               [ 4] 1999 	ret 
                                   2000 
                                   2001 ;---------------------------------------
                                   2002 ; called by parse_quote
                                   2003 ; subtitute escaped character 
                                   2004 ; by their ASCII value .
                                   2005 ; input:
                                   2006 ;   A  character following '\'
                                   2007 ; output:
                                   2008 ;   A  substitued char or same if not valid.
                                   2009 ;---------------------------------------
      000C32                       2010 convert_escape:
      000C32 A1 61            [ 1] 2011 	cp a,#'a'
      000C34 26 03            [ 1] 2012 	jrne 1$
      000C36 A6 07            [ 1] 2013 	ld a,#7
      000C38 81               [ 4] 2014 	ret 
      000C39 A1 62            [ 1] 2015 1$: cp a,#'b'
      000C3B 26 03            [ 1] 2016 	jrne 2$
      000C3D A6 08            [ 1] 2017 	ld a,#8
      000C3F 81               [ 4] 2018 	ret 
      000C40 A1 65            [ 1] 2019 2$: cp a,#'e' 
      000C42 26 03            [ 1] 2020     jrne 3$
      000C44 A6 5C            [ 1] 2021 	ld a,#'\'
      000C46 81               [ 4] 2022 	ret  
      000C47 A1 5C            [ 1] 2023 3$: cp a,#'\'
      000C49 26 03            [ 1] 2024 	jrne 4$
      000C4B A6 5C            [ 1] 2025 	ld a,#'\'
      000C4D 81               [ 4] 2026 	ret 
      000C4E A1 66            [ 1] 2027 4$: cp a,#'f' 
      000C50 26 03            [ 1] 2028 	jrne 5$ 
      000C52 A6 0C            [ 1] 2029 	ld a,#FF 
      000C54 81               [ 4] 2030 	ret  
      000C55 A1 6E            [ 1] 2031 5$: cp a,#'n' 
      000C57 26 03            [ 1] 2032     jrne 6$ 
      000C59 A6 0A            [ 1] 2033 	ld a,#0xa 
      000C5B 81               [ 4] 2034 	ret  
      000C5C A1 72            [ 1] 2035 6$: cp a,#'r' 
      000C5E 26 03            [ 1] 2036 	jrne 7$
      000C60 A6 0D            [ 1] 2037 	ld a,#0xd 
      000C62 81               [ 4] 2038 	ret  
      000C63 A1 74            [ 1] 2039 7$: cp a,#'t' 
      000C65 26 03            [ 1] 2040 	jrne 8$ 
      000C67 A6 09            [ 1] 2041 	ld a,#9 
      000C69 81               [ 4] 2042 	ret  
      000C6A A1 76            [ 1] 2043 8$: cp a,#'v' 
      000C6C 26 02            [ 1] 2044 	jrne 9$  
      000C6E A6 0B            [ 1] 2045 	ld a,#0xb 
      000C70 81               [ 4] 2046 9$:	ret 
                                   2047 
                                   2048 ;-------------------------
                                   2049 ; integer parser 
                                   2050 ; input:
                                   2051 ;   X 		point to pad 
                                   2052 ;   Y 		point to tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2053 ;   A 	    first digit|'$' 
                                   2054 ; output:  
                                   2055 ;   pad     number string 
                                   2056 ;   X 		integer 
                                   2057 ;   A 		TK_INTGR
                                   2058 ;-------------------------
                           000001  2059 	BASE=1
                           000002  2060 	TCHAR=2 
                           000002  2061 	VSIZE=2 
      000C71                       2062 parse_integer: ; { -- n }
      000C71 4B 00            [ 1] 2063 	push #0 ; TCHAR 
      000C73 A1 24            [ 1] 2064 	cp a,#'$
      000C75 27 04            [ 1] 2065 	jreq 1$ 
      000C77 4B 0A            [ 1] 2066 	push #10 ; BASE=10 
      000C79 20 02            [ 2] 2067 	jra 2$ 
      000C7B 4B 10            [ 1] 2068 1$: push #16  ; BASE=16
      000C7D F7               [ 1] 2069 2$:	ld (x),a 
      000C7E 5C               [ 1] 2070 	incw x 
      000C7F 72 5C 00 01      [ 1] 2071 	inc in 
      000C83 91 D6 00         [ 4] 2072 	ld a,([in.w],y)
      000C86 CD 0E CD         [ 4] 2073 	call to_upper 
      000C89 6B 02            [ 1] 2074 	ld (TCHAR,sp),a 
      000C8B CD 0E C4         [ 4] 2075 	call is_digit 
      000C8E 25 ED            [ 1] 2076 	jrc 2$
      000C90 A6 10            [ 1] 2077 	ld a,#16 
      000C92 11 01            [ 1] 2078 	cp a,(BASE,sp)
      000C94 26 0A            [ 1] 2079 	jrne 3$ 
      000C96 7B 02            [ 1] 2080 	ld a,(TCHAR,sp)
      000C98 A1 41            [ 1] 2081 	cp a,#'A 
      000C9A 2B 04            [ 1] 2082 	jrmi 3$ 
      000C9C A1 47            [ 1] 2083 	cp a,#'G 
      000C9E 2B DD            [ 1] 2084 	jrmi 2$ 
      000CA0 7F               [ 1] 2085 3$:	clr (x)
      000CA1 CD 0E D9         [ 4] 2086 	call atoi24
      000CA4 CE 00 09         [ 2] 2087 	ldw x,acc16 
      000CA7 A6 02            [ 1] 2088 	ld a,#TK_INTGR
      000CA9                       2089 	_drop VSIZE  
      000CA9 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CAB 81               [ 4] 2090 	ret 	
                                   2091 
                                   2092 ;-------------------------
                                   2093 ; binary integer parser 
                                   2094 ; input:
                                   2095 ;   X 		point to pad 
                                   2096 ;   Y 		point to tib 
                                   2097 ;   A 	    '%' 
                                   2098 ; output:  
                                   2099 ;   pad     number string 
                                   2100 ;   X 		integer 
                                   2101 ;   A 		TK_INTGR
                                   2102 ;   TOS     integer 
                                   2103 ;-------------------------
                           000001  2104 	BINARY=1
                           000002  2105 	VSIZE=2
      000CAC                       2106 parse_binary: ; { -- n }
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000CAC 4B 00            [ 1] 2107 	push #0
      000CAE 4B 00            [ 1] 2108 	push #0
      000CB0 F7               [ 1] 2109 1$: ld (x),a 
      000CB1 5C               [ 1] 2110 	incw x 
      000CB2 72 5C 00 01      [ 1] 2111 	inc in 
      000CB6 91 D6 00         [ 4] 2112 	ld a,([in.w],y)
      000CB9 A1 30            [ 1] 2113 	cp a,#'0 
      000CBB 27 06            [ 1] 2114 	jreq 2$
      000CBD A1 31            [ 1] 2115 	cp a,#'1 
      000CBF 27 02            [ 1] 2116 	jreq 2$ 
      000CC1 20 09            [ 2] 2117 	jra bin_exit 
      000CC3 A0 30            [ 1] 2118 2$: sub a,#'0	
      000CC5 46               [ 1] 2119 	rrc a 
      000CC6 09 02            [ 1] 2120 	rlc (BINARY+1,sp)
      000CC8 09 01            [ 1] 2121 	rlc (BINARY,sp)
      000CCA 20 E4            [ 2] 2122 	jra 1$  
      000CCC                       2123 bin_exit:
      000CCC 7F               [ 1] 2124 	clr (x)
      000CCD 1E 01            [ 2] 2125 	ldw x,(BINARY,sp)
      000CCF A6 02            [ 1] 2126 	ld a,#TK_INTGR 	
      000CD1                       2127 	_drop VSIZE 
      000CD1 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CD3 81               [ 4] 2128 	ret
                                   2129 
                                   2130 ;---------------------------
                                   2131 ;  token begin with a letter,
                                   2132 ;  is keyword or variable. 	
                                   2133 ; input:
                                   2134 ;   X 		point to pad 
                                   2135 ;   Y 		point to text
                                   2136 ;   A 	    first letter  
                                   2137 ; output:
                                   2138 ;   X		exec_addr|var_addr 
                                   2139 ;   A 		TK_CMD 
                                   2140 ;   pad 	keyword|var_name  
                                   2141 ;   TOS     exec_addr|var_addr 
                                   2142 ;--------------------------  
      000CD4                       2143 parse_keyword: ; { -- exec_addr|var_addr}
      000CD4 CD 0E CD         [ 4] 2144 	call to_upper 
      000CD7 F7               [ 1] 2145 	ld (x),a 
      000CD8 5C               [ 1] 2146 	incw x 
      000CD9 72 5C 00 01      [ 1] 2147 	inc in 
      000CDD 91 D6 00         [ 4] 2148 	ld a,([in.w],y)
      000CE0 CD 04 F5         [ 4] 2149 	call is_alpha 
      000CE3 25 EF            [ 1] 2150 	jrc parse_keyword 
      000CE5 7F               [ 1] 2151 1$: clr (x)
      000CE6 72 5D 17 19      [ 1] 2152 	tnz pad+1 
      000CEA 26 15            [ 1] 2153 	jrne 2$
                                   2154 ; one letter variable name 
      000CEC C6 17 18         [ 1] 2155 	ld a,pad 
      000CEF A0 41            [ 1] 2156 	sub a,#'A 
      000CF1 48               [ 1] 2157 	sll a 
      000CF2 88               [ 1] 2158 	push a 
      000CF3 4B 00            [ 1] 2159 	push #0
      000CF5 AE 00 26         [ 2] 2160 	ldw x,#vars 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CF8 72 FB 01         [ 2] 2161 	addw x,(1,sp) ; X=var address 
      000CFB                       2162 	_drop 2 
      000CFB 5B 02            [ 2]    1     addw sp,#2 
      000CFD A6 03            [ 1] 2163 	ld a,#TK_VAR 
      000CFF 20 0C            [ 2] 2164 	jra 4$ 
      000D01                       2165 2$: ; check for keyword, otherwise syntax error.
      000D01                       2166 	_ldx_dict kword_dict
      000D01 AE 21 0D         [ 2]    1     ldw x,#kword_dict+2
      000D04 CD 11 6A         [ 4] 2167 	call search_dict
      000D07 4D               [ 1] 2168 	tnz a
      000D08 26 03            [ 1] 2169 	jrne 4$ 
      000D0A CC 07 09         [ 2] 2170 	jp syntax_error
      000D0D 81               [ 4] 2171 4$:	ret  	
                                   2172 
                                   2173 
                                   2174 ;------------------------------------
                                   2175 ; Command line tokenizer
                                   2176 ; scan text for next token
                                   2177 ; move token in 'pad'
                                   2178 ; input: 
      000D0E                       2179 	none: 
                                   2180 ; use:
                                   2181 ;	Y   pointer to text
                                   2182 ;   X	pointer to pad 
                                   2183 ;   in.w   index in text buffer
                                   2184 ; output:
                                   2185 ;   A       token attribute 
                                   2186 ;   pad 	token as .asciz
                                   2187 ;   X 		token value   
                                   2188 ;------------------------------------
                                   2189 	; use to check special character 
                                   2190 	.macro _case c t  
                                   2191 	ld a,#c 
                                   2192 	cp a,(TCHAR,sp) 
                                   2193 	jrne t
                                   2194 	.endm 
                                   2195 
                           000001  2196 	TCHAR=1
                           000002  2197 	ATTRIB=2 
                           000002  2198 	VSIZE=2
      000D0E                       2199 get_token: 
      000D0E 90 AE 16 C8      [ 2] 2200 	ldw y,#tib    	
      000D12 C6 00 01         [ 1] 2201 	ld a,in 
      000D15 C1 00 02         [ 1] 2202 	cp a,count 
      000D18 2B 03            [ 1] 2203 	jrmi 1$
      000D1A A6 00            [ 1] 2204 	ld a,#TK_NONE 
      000D1C 81               [ 4] 2205 	ret 
      000D1D                       2206 1$:	
      000D1D                       2207 	_vars VSIZE
      000D1D 52 02            [ 2]    1     sub sp,#VSIZE 
      000D1F AE 17 18         [ 2] 2208 	ldw x, #pad
      000D22 A6 20            [ 1] 2209 	ld a,#SPACE
      000D24 CD 0F 85         [ 4] 2210 	call skip
      000D27 CF 00 11         [ 2] 2211 	ldw in.w.saved,x 
      000D2A 91 D6 00         [ 4] 2212 	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D2D 26 07            [ 1] 2213 	jrne str_tst
      000D2F 72 5F 17 18      [ 1] 2214 	clr pad 
      000D33 CC 0E C1         [ 2] 2215 	jp token_exit ; end of line 
                                   2216 
      000D36                       2217 str_tst: ; check for quoted string  	
      000D36 CD 0E CD         [ 4] 2218 	call to_upper 
      000D39 6B 01            [ 1] 2219 	ld (TCHAR,sp),a 
      000D3B                       2220 	_case '"' nbr_tst
      000D3B A6 22            [ 1]    1 	ld a,#'"' 
      000D3D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3F 26 06            [ 1]    3 	jrne nbr_tst
      000D41 CD 0B F7         [ 4] 2221 	call parse_quote
      000D44 CC 0E C1         [ 2] 2222 	jp token_exit
      000D47                       2223 nbr_tst: ; check for number 
      000D47 A6 24            [ 1] 2224 	ld a,#'$'
      000D49 11 01            [ 1] 2225 	cp a,(TCHAR,sp) 
      000D4B 27 13            [ 1] 2226 	jreq 1$
      000D4D A6 26            [ 1] 2227 	ld a,#'&
      000D4F 11 01            [ 1] 2228 	cp a,(TCHAR,sp)
      000D51 26 06            [ 1] 2229 	jrne 0$
      000D53 CD 0C AC         [ 4] 2230 	call parse_binary ; expect binary integer 
      000D56 CC 0E C1         [ 2] 2231 	jp token_exit 
      000D59 7B 01            [ 1] 2232 0$:	ld a,(TCHAR,sp)
      000D5B CD 0E C4         [ 4] 2233 	call is_digit
      000D5E 24 06            [ 1] 2234 	jrnc 3$
      000D60 CD 0C 71         [ 4] 2235 1$:	call parse_integer 
      000D63 CC 0E C1         [ 2] 2236 	jp token_exit 
      000D66                       2237 3$: 
      000D66                       2238 	_case '(' bkslsh_tst 
      000D66 A6 28            [ 1]    1 	ld a,#'(' 
      000D68 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D6A 26 05            [ 1]    3 	jrne bkslsh_tst
      000D6C A6 09            [ 1] 2239 	ld a,#TK_LPAREN
      000D6E CC 0E B1         [ 2] 2240 	jp token_char   	
      000D71                       2241 bkslsh_tst:
      000D71                       2242 	_case '\',rparnt_tst
      000D71 A6 5C            [ 1]    1 	ld a,#'\' 
      000D73 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D75 26 18            [ 1]    3 	jrne rparnt_tst
      000D77 7B 01            [ 1] 2243 	ld a,(TCHAR,sp)
      000D79 F7               [ 1] 2244 	ld (x),a 
      000D7A 5C               [ 1] 2245 	incw x 
      000D7B 72 5C 00 01      [ 1] 2246 	inc in 
      000D7F 91 D6 00         [ 4] 2247 	ld a,([in.w],y)
      000D82 F7               [ 1] 2248 	ld (x),a 
      000D83 5C               [ 1] 2249 	incw x 
      000D84 72 5C 00 01      [ 1] 2250 	inc in  
      000D88 7F               [ 1] 2251 	clr (x) 
      000D89 97               [ 1] 2252 	ld xl,a 
      000D8A A6 05            [ 1] 2253 	ld a,#TK_CHAR 
      000D8C CC 0E C1         [ 2] 2254 	jp token_exit 
      000D8F                       2255 rparnt_tst:		
      000D8F                       2256 	_case ')' colon_tst 
      000D8F A6 29            [ 1]    1 	ld a,#')' 
      000D91 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D93 26 05            [ 1]    3 	jrne colon_tst
      000D95 A6 0A            [ 1] 2257 	ld a,#TK_RPAREN 
      000D97 CC 0E B1         [ 2] 2258 	jp token_char 
      000D9A                       2259 colon_tst:
      000D9A                       2260 	_case ':' comma_tst 
      000D9A A6 3A            [ 1]    1 	ld a,#':' 
      000D9C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9E 26 05            [ 1]    3 	jrne comma_tst
      000DA0 A6 01            [ 1] 2261 	ld a,#TK_COLON 
      000DA2 CC 0E B1         [ 2] 2262 	jp token_char 
      000DA5                       2263 comma_tst:
      000DA5                       2264 	_case COMMA sharp_tst 
      000DA5 A6 2C            [ 1]    1 	ld a,#COMMA 
      000DA7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA9 26 05            [ 1]    3 	jrne sharp_tst
      000DAB A6 0B            [ 1] 2265 	ld a,#TK_COMMA
      000DAD CC 0E B1         [ 2] 2266 	jp token_char
      000DB0                       2267 sharp_tst:
      000DB0                       2268 	_case SHARP dash_tst 
      000DB0 A6 23            [ 1]    1 	ld a,#SHARP 
      000DB2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DB4 26 05            [ 1]    3 	jrne dash_tst
      000DB6 A6 0C            [ 1] 2269 	ld a,#TK_SHARP
      000DB8 CC 0E B1         [ 2] 2270 	jp token_char  	 	 
      000DBB                       2271 dash_tst: 	
      000DBB                       2272 	_case '-' at_tst 
      000DBB A6 2D            [ 1]    1 	ld a,#'-' 
      000DBD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DBF 26 05            [ 1]    3 	jrne at_tst
      000DC1 A6 11            [ 1] 2273 	ld a,#TK_MINUS  
      000DC3 CC 0E B1         [ 2] 2274 	jp token_char 
      000DC6                       2275 at_tst:
      000DC6                       2276 	_case '@' qmark_tst 
      000DC6 A6 40            [ 1]    1 	ld a,#'@' 
      000DC8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DCA 26 05            [ 1]    3 	jrne qmark_tst
      000DCC A6 04            [ 1] 2277 	ld a,#TK_ARRAY 
      000DCE CC 0E B1         [ 2] 2278 	jp token_char
      000DD1                       2279 qmark_tst:
      000DD1                       2280 	_case '?' tick_tst 
      000DD1 A6 3F            [ 1]    1 	ld a,#'?' 
      000DD3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DD5 26 11            [ 1]    3 	jrne tick_tst
      000DD7 7B 01            [ 1] 2281 	ld a,(TCHAR,sp)
      000DD9 F7               [ 1] 2282 	ld (x),a 
      000DDA 5C               [ 1] 2283 	incw x 
      000DDB 7F               [ 1] 2284 	clr (x)
      000DDC 72 5C 00 01      [ 1] 2285 	inc in 
      000DE0 A6 06            [ 1] 2286 	ld a,#TK_CMD 
      000DE2 AE 15 B4         [ 2] 2287 	ldw x,#print 
      000DE5 CC 0E C1         [ 2] 2288 	jp token_exit
      000DE8                       2289 tick_tst: ; ignore comment 
      000DE8                       2290 	_case TICK plus_tst 
      000DE8 A6 27            [ 1]    1 	ld a,#TICK 
      000DEA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DEC 26 0C            [ 1]    3 	jrne plus_tst
      000DEE 72 5C 00 01      [ 1] 2291 	inc in 
      000DF2 A6 06            [ 1] 2292 	ld a,#TK_CMD 
      000DF4 AE 16 C2         [ 2] 2293 	ldw x,#rem 
      000DF7 CC 0E C1         [ 2] 2294 	jp token_exit 
      000DFA                       2295 plus_tst:
      000DFA                       2296 	_case '+' star_tst 
      000DFA A6 2B            [ 1]    1 	ld a,#'+' 
      000DFC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFE 26 05            [ 1]    3 	jrne star_tst
      000E00 A6 10            [ 1] 2297 	ld a,#TK_PLUS  
      000E02 CC 0E B1         [ 2] 2298 	jp token_char 
      000E05                       2299 star_tst:
      000E05                       2300 	_case '*' slash_tst 
      000E05 A6 2A            [ 1]    1 	ld a,#'*' 
      000E07 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E09 26 05            [ 1]    3 	jrne slash_tst
      000E0B A6 20            [ 1] 2301 	ld a,#TK_MULT 
      000E0D CC 0E B1         [ 2] 2302 	jp token_char 
      000E10                       2303 slash_tst: 
      000E10                       2304 	_case '/' prcnt_tst 
      000E10 A6 2F            [ 1]    1 	ld a,#'/' 
      000E12 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E14 26 05            [ 1]    3 	jrne prcnt_tst
      000E16 A6 21            [ 1] 2305 	ld a,#TK_DIV 
      000E18 CC 0E B1         [ 2] 2306 	jp token_char 
      000E1B                       2307 prcnt_tst:
      000E1B                       2308 	_case '%' eql_tst 
      000E1B A6 25            [ 1]    1 	ld a,#'%' 
      000E1D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E1F 26 05            [ 1]    3 	jrne eql_tst
      000E21 A6 22            [ 1] 2309 	ld a,#TK_MOD
      000E23 CC 0E B1         [ 2] 2310 	jp token_char  
                                   2311 ; 1 or 2 character tokens 	
      000E26                       2312 eql_tst:
      000E26                       2313 	_case '=' gt_tst 		
      000E26 A6 3D            [ 1]    1 	ld a,#'=' 
      000E28 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E2A 26 05            [ 1]    3 	jrne gt_tst
      000E2C A6 32            [ 1] 2314 	ld a,#TK_EQUAL
      000E2E CC 0E B1         [ 2] 2315 	jp token_char 
      000E31                       2316 gt_tst:
      000E31                       2317 	_case '>' lt_tst 
      000E31 A6 3E            [ 1]    1 	ld a,#'>' 
      000E33 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E35 26 33            [ 1]    3 	jrne lt_tst
      000E37 A6 31            [ 1] 2318 	ld a,#TK_GT 
      000E39 6B 02            [ 1] 2319 	ld (ATTRIB,sp),a 
      000E3B 72 5C 00 01      [ 1] 2320 	inc in 
      000E3F 91 D6 00         [ 4] 2321 	ld a,([in.w],y)
      000E42 A1 3D            [ 1] 2322 	cp a,#'=
      000E44 26 0C            [ 1] 2323 	jrne 1$
      000E46 7B 01            [ 1] 2324 	ld a,(TCHAR,sp)
      000E48 F7               [ 1] 2325 	ld (x),a
      000E49 5C               [ 1] 2326 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E4A A6 3D            [ 1] 2327 	ld a,#'=
      000E4C 6B 01            [ 1] 2328 	ld (TCHAR,sp),a 
      000E4E A6 33            [ 1] 2329 	ld a,#TK_GE 
      000E50 20 5F            [ 2] 2330 	jra token_char  
      000E52 A1 3C            [ 1] 2331 1$: cp a,#'<
      000E54 26 0C            [ 1] 2332 	jrne 2$
      000E56 7B 01            [ 1] 2333 	ld a,(TCHAR,sp)
      000E58 F7               [ 1] 2334 	ld (x),a
      000E59 5C               [ 1] 2335 	incw x 
      000E5A A6 3C            [ 1] 2336 	ld a,#'<	
      000E5C 6B 01            [ 1] 2337 	ld (TCHAR,sp),a 
      000E5E A6 35            [ 1] 2338 	ld a,#TK_NE 
      000E60 20 4F            [ 2] 2339 	jra token_char 
      000E62 72 5A 00 01      [ 1] 2340 2$: dec in
      000E66 7B 02            [ 1] 2341 	ld a,(ATTRIB,sp)
      000E68 20 47            [ 2] 2342 	jra token_char 
      000E6A                       2343 lt_tst:
      000E6A                       2344 	_case '<' other
      000E6A A6 3C            [ 1]    1 	ld a,#'<' 
      000E6C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E6E 26 32            [ 1]    3 	jrne other
      000E70 A6 34            [ 1] 2345 	ld a,#TK_LT 
      000E72 6B 02            [ 1] 2346 	ld (ATTRIB,sp),a 
      000E74 72 5C 00 01      [ 1] 2347 	inc in 
      000E78 91 D6 00         [ 4] 2348 	ld a,([in.w],y)
      000E7B A1 3D            [ 1] 2349 	cp a,#'=
      000E7D 26 0B            [ 1] 2350 	jrne 1$
      000E7F 7B 01            [ 1] 2351 	ld a,(TCHAR,sp)
      000E81 F7               [ 1] 2352 	ld (x),a 
      000E82 A6 3D            [ 1] 2353 	ld a,#'=
      000E84 6B 01            [ 1] 2354 	ld (TCHAR,sp),a 
      000E86 A6 36            [ 1] 2355 	ld a,#TK_LE 
      000E88 20 27            [ 2] 2356 	jra token_char 
      000E8A A1 3E            [ 1] 2357 1$: cp a,#'>
      000E8C 26 0C            [ 1] 2358 	jrne 2$
      000E8E 7B 01            [ 1] 2359 	ld a,(TCHAR,sp)
      000E90 F7               [ 1] 2360 	ld (x),a 
      000E91 5C               [ 1] 2361 	incw x 
      000E92 A6 3E            [ 1] 2362 	ld a,#'>
      000E94 6B 01            [ 1] 2363 	ld (TCHAR,sp),a 
      000E96 A6 35            [ 1] 2364 	ld a,#TK_NE 
      000E98 20 17            [ 2] 2365 	jra token_char 
      000E9A 72 5A 00 01      [ 1] 2366 2$: dec in 
      000E9E 7B 02            [ 1] 2367 	ld a,(ATTRIB,sp)
      000EA0 20 0F            [ 2] 2368 	jra token_char 	
      000EA2                       2369 other: ; not a special character 	 
      000EA2 7B 01            [ 1] 2370 	ld a,(TCHAR,sp)
      000EA4 CD 04 F5         [ 4] 2371 	call is_alpha 
      000EA7 25 03            [ 1] 2372 	jrc 30$ 
      000EA9 CC 07 09         [ 2] 2373 	jp syntax_error 
      000EAC                       2374 30$: 
      000EAC CD 0C D4         [ 4] 2375 	call parse_keyword
      000EAF 20 10            [ 2] 2376 	jra token_exit 
      000EB1                       2377 token_char:
      000EB1 6B 02            [ 1] 2378 	ld (ATTRIB,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000EB3 7B 01            [ 1] 2379 	ld a,(TCHAR,sp)
      000EB5 F7               [ 1] 2380 	ld (x),a 
      000EB6 5C               [ 1] 2381 	incw x 
      000EB7 7F               [ 1] 2382 	clr(x)
      000EB8 72 5C 00 01      [ 1] 2383 	inc in 
      000EBC 7B 02            [ 1] 2384 	ld a,(ATTRIB,sp)
      000EBE AE 17 18         [ 2] 2385 	ldw x,#pad 
      000EC1                       2386 token_exit:
      000EC1                       2387 	_drop VSIZE 
      000EC1 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EC3 81               [ 4] 2388 	ret
                                   2389 
                                   2390 
                                   2391 
                                   2392 ;------------------------------------
                                   2393 ; check if character in {'0'..'9'}
                                   2394 ; input:
                                   2395 ;    A  character to test
                                   2396 ; output:
                                   2397 ;    Carry  0 not digit | 1 digit
                                   2398 ;------------------------------------
      000EC4                       2399 is_digit:
      000EC4 A1 30            [ 1] 2400 	cp a,#'0
      000EC6 25 03            [ 1] 2401 	jrc 1$
      000EC8 A1 3A            [ 1] 2402     cp a,#'9+1
      000ECA 8C               [ 1] 2403 	ccf 
      000ECB 8C               [ 1] 2404 1$:	ccf 
      000ECC 81               [ 4] 2405     ret
                                   2406 
                                   2407 ;------------------------------------
                                   2408 ; convert alpha to uppercase
                                   2409 ; input:
                                   2410 ;    a  character to convert
                                   2411 ; output:
                                   2412 ;    a  uppercase character
                                   2413 ;------------------------------------
      000ECD                       2414 to_upper::
      000ECD A1 61            [ 1] 2415 	cp a,#'a
      000ECF 2A 01            [ 1] 2416 	jrpl 1$
      000ED1 81               [ 4] 2417 0$:	ret
      000ED2 A1 7A            [ 1] 2418 1$: cp a,#'z	
      000ED4 22 FB            [ 1] 2419 	jrugt 0$
      000ED6 A0 20            [ 1] 2420 	sub a,#32
      000ED8 81               [ 4] 2421 	ret
                                   2422 	
                                   2423 ;------------------------------------
                                   2424 ; convert pad content in integer
                                   2425 ; input:
                                   2426 ;    pad		.asciz to convert
                                   2427 ; output:
                                   2428 ;    acc24      int24_t
                                   2429 ;------------------------------------
                                   2430 	; local variables
                           000001  2431 	SIGN=1 ; 1 byte, 
                           000002  2432 	BASE=2 ; 1 byte, numeric base used in conversion
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                           000003  2433 	TEMP=3 ; 1 byte, temporary storage
                           000003  2434 	VSIZE=3 ; 3 bytes reserved for local storage
      000ED9                       2435 atoi24:
      000ED9 89               [ 2] 2436 	pushw x ;save x
      000EDA 52 03            [ 2] 2437 	sub sp,#VSIZE
                                   2438 	; acc24=0 
      000EDC 72 5F 00 08      [ 1] 2439 	clr acc24    
      000EE0 72 5F 00 09      [ 1] 2440 	clr acc16
      000EE4 72 5F 00 0A      [ 1] 2441 	clr acc8 
      000EE8 C6 17 18         [ 1] 2442 	ld a, pad 
      000EEB 27 5A            [ 1] 2443 	jreq atoi_exit
      000EED 0F 01            [ 1] 2444 	clr (SIGN,sp)
      000EEF A6 0A            [ 1] 2445 	ld a,#10
      000EF1 6B 02            [ 1] 2446 	ld (BASE,sp),a ; default base decimal
      000EF3 AE 17 18         [ 2] 2447 	ldw x,#pad ; pointer to string to convert
      000EF6 F6               [ 1] 2448 	ld a,(x)
      000EF7 27 47            [ 1] 2449 	jreq 9$  ; completed if 0
      000EF9 A1 2D            [ 1] 2450 	cp a,#'-
      000EFB 26 04            [ 1] 2451 	jrne 1$
      000EFD 03 01            [ 1] 2452 	cpl (SIGN,sp)
      000EFF 20 08            [ 2] 2453 	jra 2$
      000F01 A1 24            [ 1] 2454 1$: cp a,#'$
      000F03 26 06            [ 1] 2455 	jrne 3$
      000F05 A6 10            [ 1] 2456 	ld a,#16
      000F07 6B 02            [ 1] 2457 	ld (BASE,sp),a
      000F09 5C               [ 1] 2458 2$:	incw x
      000F0A F6               [ 1] 2459 	ld a,(x)
      000F0B                       2460 3$:	
      000F0B A1 61            [ 1] 2461 	cp a,#'a
      000F0D 2B 02            [ 1] 2462 	jrmi 4$
      000F0F A0 20            [ 1] 2463 	sub a,#32
      000F11 A1 30            [ 1] 2464 4$:	cp a,#'0
      000F13 2B 2B            [ 1] 2465 	jrmi 9$
      000F15 A0 30            [ 1] 2466 	sub a,#'0
      000F17 A1 0A            [ 1] 2467 	cp a,#10
      000F19 2B 06            [ 1] 2468 	jrmi 5$
      000F1B A0 07            [ 1] 2469 	sub a,#7
      000F1D 11 02            [ 1] 2470 	cp a,(BASE,sp)
      000F1F 2A 1F            [ 1] 2471 	jrpl 9$
      000F21 6B 03            [ 1] 2472 5$:	ld (TEMP,sp),a
      000F23 7B 02            [ 1] 2473 	ld a,(BASE,sp)
      000F25 CD 0F 4B         [ 4] 2474 	call mulu24_8
      000F28 7B 03            [ 1] 2475 	ld a,(TEMP,sp)
      000F2A CB 00 0A         [ 1] 2476 	add a,acc24+2
      000F2D C7 00 0A         [ 1] 2477 	ld acc24+2,a
      000F30 4F               [ 1] 2478 	clr a
      000F31 C9 00 09         [ 1] 2479 	adc a,acc24+1
      000F34 C7 00 09         [ 1] 2480 	ld acc24+1,a
      000F37 4F               [ 1] 2481 	clr a
      000F38 C9 00 08         [ 1] 2482 	adc a,acc24
      000F3B C7 00 08         [ 1] 2483 	ld acc24,a
      000F3E 20 C9            [ 2] 2484 	jra 2$
      000F40 0D 01            [ 1] 2485 9$:	tnz (SIGN,sp)
      000F42 27 03            [ 1] 2486     jreq atoi_exit
      000F44 CD 0A 4C         [ 4] 2487     call neg_acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F47                       2488 atoi_exit: 
      000F47 5B 03            [ 2] 2489 	addw sp,#VSIZE
      000F49 85               [ 2] 2490 	popw x ; restore x
      000F4A 81               [ 4] 2491 	ret
                                   2492 
                                   2493 ;--------------------------------------
                                   2494 ; unsigned multiply uint24_t by uint8_t
                                   2495 ; use to convert numerical string to uint24_t
                                   2496 ; input:
                                   2497 ;	acc24	uint24_t 
                                   2498 ;   A		uint8_t
                                   2499 ; output:
                                   2500 ;   acc24   A*acc24
                                   2501 ;-------------------------------------
                                   2502 ; local variables offset  on sp
                           000003  2503 	U8   = 3   ; A pushed on stack
                           000002  2504 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2505 	OVFH = 1  ; multiplication overflow high byte
                           000003  2506 	VSIZE = 3
      000F4B                       2507 mulu24_8:
      000F4B 89               [ 2] 2508 	pushw x    ; save X
                                   2509 	; local variables
      000F4C 88               [ 1] 2510 	push a     ; U8
      000F4D 5F               [ 1] 2511 	clrw x     ; initialize overflow to 0
      000F4E 89               [ 2] 2512 	pushw x    ; multiplication overflow
                                   2513 ; multiply low byte.
      000F4F C6 00 0A         [ 1] 2514 	ld a,acc24+2
      000F52 97               [ 1] 2515 	ld xl,a
      000F53 7B 03            [ 1] 2516 	ld a,(U8,sp)
      000F55 42               [ 4] 2517 	mul x,a
      000F56 9F               [ 1] 2518 	ld a,xl
      000F57 C7 00 0A         [ 1] 2519 	ld acc24+2,a
      000F5A 9E               [ 1] 2520 	ld a, xh
      000F5B 6B 02            [ 1] 2521 	ld (OVFL,sp),a
                                   2522 ; multipy middle byte
      000F5D C6 00 09         [ 1] 2523 	ld a,acc24+1
      000F60 97               [ 1] 2524 	ld xl,a
      000F61 7B 03            [ 1] 2525 	ld a, (U8,sp)
      000F63 42               [ 4] 2526 	mul x,a
                                   2527 ; add overflow to this partial product
      000F64 72 FB 01         [ 2] 2528 	addw x,(OVFH,sp)
      000F67 9F               [ 1] 2529 	ld a,xl
      000F68 C7 00 09         [ 1] 2530 	ld acc24+1,a
      000F6B 4F               [ 1] 2531 	clr a
      000F6C A9 00            [ 1] 2532 	adc a,#0
      000F6E 6B 01            [ 1] 2533 	ld (OVFH,sp),a
      000F70 9E               [ 1] 2534 	ld a,xh
      000F71 6B 02            [ 1] 2535 	ld (OVFL,sp),a
                                   2536 ; multiply most signficant byte	
      000F73 C6 00 08         [ 1] 2537 	ld a, acc24
      000F76 97               [ 1] 2538 	ld xl, a
      000F77 7B 03            [ 1] 2539 	ld a, (U8,sp)
      000F79 42               [ 4] 2540 	mul x,a
      000F7A 72 FB 01         [ 2] 2541 	addw x, (OVFH,sp)
      000F7D 9F               [ 1] 2542 	ld a, xl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000F7E C7 00 08         [ 1] 2543 	ld acc24,a
      000F81 5B 03            [ 2] 2544     addw sp,#VSIZE
      000F83 85               [ 2] 2545 	popw x
      000F84 81               [ 4] 2546 	ret
                                   2547 
                                   2548 ;------------------------------------
                                   2549 ; skip character c in text starting from 'in'
                                   2550 ; input:
                                   2551 ;	 y 		point to text buffer
                                   2552 ;    a 		character to skip
                                   2553 ; output:  
                                   2554 ;	'in' ajusted to new position
                                   2555 ;------------------------------------
                           000001  2556 	C = 1 ; local var
      000F85                       2557 skip:
      000F85 88               [ 1] 2558 	push a
      000F86 91 D6 00         [ 4] 2559 1$:	ld a,([in.w],y)
      000F89 27 0A            [ 1] 2560 	jreq 2$
      000F8B 11 01            [ 1] 2561 	cp a,(C,sp)
      000F8D 26 06            [ 1] 2562 	jrne 2$
      000F8F 72 5C 00 01      [ 1] 2563 	inc in
      000F93 20 F1            [ 2] 2564 	jra 1$
      000F95                       2565 2$: _drop 1 
      000F95 5B 01            [ 2]    1     addw sp,#1 
      000F97 81               [ 4] 2566 	ret
                                   2567 	
                                   2568 ;------------------------------
                                   2569 ; restore 'in.w' variable to 
                                   2570 ; its value before last call
                                   2571 ; to get_token.
                                   2572 ;------------------------------
      000F98                       2573 unget_token:
      000F98 CE 00 11         [ 2] 2574 	ldw x,in.w.saved
      000F9B CF 00 00         [ 2] 2575 	ldw in.w,x 
      000F9E 81               [ 4] 2576 	ret 
                                   2577 
                                   2578 
                                   2579 ;******************************
                                   2580 ;  data stack manipulation
                                   2581 ;*****************************
                                   2582 ;----------------------	
                                   2583 ; push X on data stack 
                                   2584 ; input:
                                   2585 ;	X 
                                   2586 ; output:
                                   2587 ;	none 
                                   2588 ;----------------------	
      000F9F                       2589 dpush:
      000F9F                       2590     _dp_down
      000F9F 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000FA3 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000FA7 72 CF 00 19      [ 5] 2591     ldw [dstkptr],x  
      000FAB 81               [ 4] 2592 	ret 
                                   2593 
                                   2594 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2595 ;----------------------	
                                   2596 ; pop data stack in X 
                                   2597 ; input:
                                   2598 ;	none
                                   2599 ; output:
                                   2600 ;	X   
                                   2601 ;----------------------	
      000FAC                       2602 dpop: 
      000FAC 72 CE 00 19      [ 5] 2603     ldw x, [dstkptr]
      000FB0                       2604 	_dp_up
      000FB0 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FB4 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000FB8 81               [ 4] 2605 	ret 
                                   2606 
                                   2607 ;-----------------------------
                                   2608 ; swap top 2 elements of dstack
                                   2609 ;  {n1 n2 -- n2 n1 }
                                   2610 ;-----------------------------
      000FB9                       2611 dswap:
      000FB9 72 CE 00 19      [ 5] 2612 	ldw x,[dstkptr]
      000FBD 89               [ 2] 2613 	pushw x 
      000FBE AE 00 02         [ 2] 2614 	ldw x,#2 
      000FC1 72 DE 00 19      [ 5] 2615 	ldw x,([dstkptr],x) 
      000FC5 72 CF 00 19      [ 5] 2616 	ldw [dstkptr],x 
      000FC9 AE 00 02         [ 2] 2617 	ldw x,#2
      000FCC 90 85            [ 2] 2618 	popw y 
      000FCE 72 DF 00 19      [ 5] 2619 	ldw ([dstkptr],x),y 
      000FD2 81               [ 4] 2620 	ret
                                   2621 
                                   2622 ;-----------------------------
                                   2623 ; drop TOS 
                                   2624 ;-----------------------------
      000FD3                       2625 ddrop: ; { n -- }
      000FD3                       2626 	_dp_up 
      000FD3 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FD7 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000FDB 81               [ 4] 2627 	ret
                                   2628 	
                                   2629 ;-----------------------------
                                   2630 ; duplicate TOS 
                                   2631 ;  dstack: { ix...n -- ix...n n }
                                   2632 ;-----------------------------
      000FDC                       2633 ddup:
      000FDC 72 CE 00 19      [ 5] 2634 	ldw x,[dstkptr]
      000FE0                       2635 	_dp_down
      000FE0 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000FE4 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000FE8 72 CF 00 19      [ 5] 2636     ldw [dstkptr],x  
      000FEC 81               [ 4] 2637 	ret 
                                   2638 
                                   2639 
                                   2640 ;----------------------------------
                                   2641 ; pick value n from dstack 
                                   2642 ; put it on TOS
                                   2643 ; dstack: {ix,..,p -- ix,...,np }
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2644 ;-----------------------------------
      000FED                       2645 dpick:
      000FED 72 CE 00 19      [ 5] 2646 	ldw x,[dstkptr]
      000FF1 58               [ 2] 2647 	sllw x 
      000FF2 72 BB 00 19      [ 2] 2648 	addw x,dstkptr 
      000FF6 FE               [ 2] 2649 	ldw x,(x)
      000FF7 72 CF 00 19      [ 5] 2650 	ldw [dstkptr],x 
      000FFB 81               [ 4] 2651 	ret
                                   2652 
                                   2653 ;---------------------------
                                   2654 ;  fetch variable in X 
                                   2655 ;  dstack:{ addr -- value }
                                   2656 ;---------------------------
      000FFC                       2657 fetch:
      000FFC 72 CE 00 19      [ 5] 2658 	ldw x,[dstkptr]
      001000 FE               [ 2] 2659 	ldw x,(x)
      001001 72 CF 00 19      [ 5] 2660 	ldw [dstkptr],x
      001005 81               [ 4] 2661 	ret 
                                   2662 
                                   2663 ;----------------------------
                                   2664 ; store variable 
                                   2665 ; dstack: {addr value -- }
                                   2666 ;----------------------------
      001006                       2667 store:
      001006 CD 0F AC         [ 4] 2668 	call dpop 
      001009 90 93            [ 1] 2669 	ldw y,x   ; y=value 
      00100B CD 0F AC         [ 4] 2670 	call dpop 
      00100E FF               [ 2] 2671 	ldw (x),y 
      00100F 81               [ 4] 2672 	ret 
                                   2673 
                                   2674 ;---------------------------------
                                   2675 ; drop n elements from data stack 
                                   2676 ; input: 
                                   2677 ;   X 		n 
                                   2678 ; output:
                                   2679 ;   none 
                                   2680 ;-------------------------------------
      001010                       2681 ddrop_n:
      001010 90 89            [ 2] 2682 	pushw y 
      001012 90 CE 00 19      [ 2] 2683 	ldw y,dstkptr 
      001016 58               [ 2] 2684 	sllw x 
      001017 89               [ 2] 2685 	pushw x 
      001018 72 F9 01         [ 2] 2686 	addw y,(1,sp)
      00101B 90 CF 00 19      [ 2] 2687 	ldw dstkptr,y 
      00101F 85               [ 2] 2688 	popw x 
      001020 90 85            [ 2] 2689 	popw y
      001022 81               [ 4] 2690 	ret 
                                   2691 
      001023 0A 64 73 74 61 63 6B  2692 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2693 ;----------------------------
                                   2694 ; print dstack content 
                                   2695 ;---------------------------
                           000001  2696 	XSAVE=1
                           000002  2697 	VSIZE=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00102D                       2698 dots:
      00102D                       2699 	_vars VSIZE 
      00102D 52 02            [ 2]    1     sub sp,#VSIZE 
      00102F AE 10 23         [ 2] 2700 	ldw x,#dstk_prompt 
      001032 CD 01 B0         [ 4] 2701 	call puts
      001035 AE 17 7E         [ 2] 2702 	ldw x,#dstack_unf-CELL_SIZE
      001038 35 0A 00 07      [ 1] 2703 	mov base,#10 
      00103C C3 00 19         [ 2] 2704 1$:	cpw x,dstkptr 
      00103F 25 0D            [ 1] 2705 	jrult 4$ 
      001041 1F 01            [ 2] 2706 	ldw (XSAVE,sp),x
      001043 FE               [ 2] 2707 	ldw  x,(x)
      001044 CD 09 81         [ 4] 2708 	call print_int 
      001047 1E 01            [ 2] 2709 	ldw x,(XSAVE,sp)
      001049 1D 00 02         [ 2] 2710 	subw x,#CELL_SIZE 
      00104C 20 EE            [ 2] 2711 	jra 1$ 
      00104E A6 0D            [ 1] 2712 4$: ld a,#CR 
      001050 CD 01 9E         [ 4] 2713 	call putc 
      001053                       2714 	_drop VSIZE
      001053 5B 02            [ 2]    1     addw sp,#VSIZE 
      001055 4F               [ 1] 2715 	clr a 
      001056 81               [ 4] 2716 	ret
                                   2717 
      001057 0A 63 74 61 63 6B 3A  2718 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2719 ;--------------------------------
                                   2720 ; print cstack content
                                   2721 ;--------------------------------
                           000001  2722 	XSAVE=1
                           000002  2723 	VSIZE=2 
      001060                       2724 dotr:
      001060                       2725 	_vars VSIZE 
      001060 52 02            [ 2]    1     sub sp,#VSIZE 
      001062 AE 10 57         [ 2] 2726 	ldw x,#cstk_prompt
      001065 CD 01 B0         [ 4] 2727 	call puts 
      001068 96               [ 1] 2728 	ldw x,sp 
      001069 1C 00 07         [ 2] 2729 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      00106C 1F 01            [ 2] 2730 	ldw (XSAVE,sp),x  
      00106E AE 17 FE         [ 2] 2731 	ldw x,#RAM_SIZE-2
      001071 35 10 00 07      [ 1] 2732 	mov base,#16
      001075                       2733 dotr_loop:
      001075 13 01            [ 2] 2734 	cpw x,(XSAVE,sp)
      001077 2B 0B            [ 1] 2735 	jrmi 9$
      001079 89               [ 2] 2736 	pushw x  
      00107A FE               [ 2] 2737 	ldw x,(x)
      00107B CD 09 81         [ 4] 2738 	call print_int 
      00107E 85               [ 2] 2739 	popw x  
      00107F 1D 00 02         [ 2] 2740 	subw x,#CELL_SIZE
      001082 20 F1            [ 2] 2741 	jra dotr_loop 
      001084 A6 0D            [ 1] 2742 9$:	ld a,#CR 
      001086 CD 01 9E         [ 4] 2743 	call putc 
      001089                       2744 	_drop VSIZE 
      001089 5B 02            [ 2]    1     addw sp,#VSIZE 
      00108B 4F               [ 1] 2745 	clr a 
      00108C 81               [ 4] 2746 	ret
                                   2747 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2748 
                                   2749 ;--------------------------------
                                   2750 ;  add 2 integers
                                   2751 ;  input:
                                   2752 ;    N1     on cstack 
                                   2753 ;    N2     on cstack 
                                   2754 ;  output:
                                   2755 ;    X 		n2+n1 
                                   2756 ;--------------------------------
                                   2757 	;arugments on cstack 
      00108D                       2758 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00108D                       2759 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      00108D                       2760 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00108D                       2761 add:
      00108D 1E 05            [ 2] 2762 	ldw x ,(N2,sp)
      00108F 72 FB 03         [ 2] 2763 	addw x,(N1,sp)
      001092 1F 03            [ 2] 2764 	ldw (N1,sp),x 
      001094 81               [ 4] 2765 	ret 
                                   2766 
                                   2767 ;--------------------------------
                                   2768 ;  substract 2 ntegers
                                   2769 ;  input:
                                   2770 ;    N1     on cstack 
                                   2771 ;    N2     on cstack 
                                   2772 ;  output:
                                   2773 ;    X 		n2+n1 
                                   2774 ;--------------------------------
      001095                       2775 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001095                       2776 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001095                       2777 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001095                       2778 substract:
      001095 1E 05            [ 2] 2779 	ldw x,(N2,sp)
      001097 72 F0 03         [ 2] 2780 	subw x,(N1,sp)
      00109A 81               [ 4] 2781 	ret 
                                   2782 
                                   2783 ;-------------------------------------
                                   2784 ; multiply 2 integers
                                   2785 ; product overflow is ignored unless
                                   2786 ; MATH_OVF assembler flag is set to 1
                                   2787 ; input:
                                   2788 ;  	N1      on cstack
                                   2789 ;   N2 		on cstack 
                                   2790 ; output:
                                   2791 ;	X        N1*N2 
                                   2792 ;-------------------------------------
                                   2793 	;arguments 
      00109B                       2794 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      00109B                       2795 	_arg N1_HB 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                           000006     1     N1_HB=ARG_OFS+1 
      00109B                       2796 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      00109B                       2797 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      00109B                       2798 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2799    ; local variables 
                           000001  2800 	SIGN=1
                           000002  2801 	PROD=2
                           000003  2802 	VSIZE=3
      00109B                       2803 multiply:
      00109B                       2804 	_vars VSIZE 
      00109B 52 03            [ 2]    1     sub sp,#VSIZE 
      00109D 0F 01            [ 1] 2805 	clr (SIGN,sp)
      00109F 1E 06            [ 2] 2806 	ldw x,(N1_HB,sp)
      0010A1 9E               [ 1] 2807 	ld a,xh  
      0010A2 A5 80            [ 1] 2808 	bcp a,#0x80 
      0010A4 27 05            [ 1] 2809 	jreq 2$
      0010A6 03 01            [ 1] 2810 	cpl (SIGN,sp)
      0010A8 50               [ 2] 2811 	negw x 
      0010A9 1F 06            [ 2] 2812 	ldw (N1_HB,sp),x 
      0010AB 1E 08            [ 2] 2813 2$: ldw x,(N2_HB,sp)
      0010AD 9E               [ 1] 2814 	ld a,xh  
      0010AE A5 80            [ 1] 2815 	bcp a,#0x80 
      0010B0 27 05            [ 1] 2816 	jreq 3$
      0010B2 03 01            [ 1] 2817 	cpl (SIGN,sp)
      0010B4 50               [ 2] 2818 	negw x 
      0010B5 1F 08            [ 2] 2819 	ldw (N2_HB,sp),x 
                                   2820 ; N1_LB * N2_LB 	
      0010B7 7B 07            [ 1] 2821 3$:	ld a,(N1_LB,sp)
      0010B9 97               [ 1] 2822 	ld xl,a 
      0010BA 7B 09            [ 1] 2823 	ld a,(N2_LB,sp) 
      0010BC 42               [ 4] 2824 	mul x,a 
                           000000  2825 .if MATH_OVF 	
                                   2826 	ld a,xh 
                                   2827 	bcp a,#0x80 
                                   2828 	jreq 4$ 
                                   2829 	ld a,#ERR_MATH_OVF 
                                   2830 	jp tb_error
                                   2831 .endif 	 
      0010BD 1F 02            [ 2] 2832 4$:	ldw (PROD,sp),x
                                   2833 ; N1_LB * N2_HB	 
      0010BF 7B 07            [ 1] 2834 	ld a,(N1_LB,sp) 
      0010C1 97               [ 1] 2835 	ld xl,a 
      0010C2 7B 08            [ 1] 2836 	ld a,(N2_HB,sp)
      0010C4 42               [ 4] 2837 	mul x,a
      0010C5 9F               [ 1] 2838 	ld a,xl 
      0010C6 1B 02            [ 1] 2839 	add a,(PROD,sp)
                           000000  2840 .if MATH_OVF 	
                                   2841 	bcp a,#0x80 
                                   2842 	jreq 5$ 
                                   2843 	ld a,#ERR_MATH_OVF 
                                   2844 	jp tb_error
                                   2845 .endif 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010C8 6B 02            [ 1] 2846 5$:	ld (PROD,sp),a 
                                   2847 ; N1_HB * N2_LB 
      0010CA 7B 06            [ 1] 2848 	ld a,(N1_HB,sp)
      0010CC 97               [ 1] 2849 	ld xl,a 
      0010CD 7B 09            [ 1] 2850 	ld a,(N2_LB,sp)
      0010CF 42               [ 4] 2851 	mul x,a 
      0010D0 9F               [ 1] 2852 	ld a,xl 
      0010D1 1B 02            [ 1] 2853 	add a,(PROD,sp)
                           000000  2854 .if MATH_OVF 	
                                   2855 	bcp a,#0x80 
                                   2856 	jreq 6$ 
                                   2857 	ld a,#ERR_MATH_OVF 
                                   2858 	jp tb_error
                                   2859 .endif 	 
      0010D3 6B 02            [ 1] 2860 6$:	ld (PROD,sp),a 
                                   2861 ; N1_HB * N2_HB 	
                                   2862 ; it is pointless to multiply N1_HB*N2_HB 
                                   2863 ; as this product is over 65535 or 0 
                                   2864 ;
                                   2865 ; sign adjust product
      0010D5 0D 01            [ 1] 2866 	tnz (SIGN,sp)
      0010D7 27 05            [ 1] 2867 	jreq 7$
      0010D9 1E 02            [ 2] 2868 	ldw x, (PROD,sp)
      0010DB 50               [ 2] 2869 	negw x
      0010DC 1F 02            [ 2] 2870 	ldw (PROD,sp),x  
      0010DE                       2871 7$: 
      0010DE 1E 02            [ 2] 2872 	ldw x,(PROD,sp) 
      0010E0                       2873 	_drop VSIZE 
      0010E0 5B 03            [ 2]    1     addw sp,#VSIZE 
      0010E2 81               [ 4] 2874 	ret
                                   2875 
                                   2876 ;----------------------------------
                                   2877 ;  euclidian divide n2/n1 
                                   2878 ; input:
                                   2879 ;    N2 	on cstack
                                   2880 ;    N1 	on cstack
                                   2881 ; output:
                                   2882 ;    X      n2/n1 
                                   2883 ;    Y      remainder 
                                   2884 ;----------------------------------
      0010E3                       2885 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      0010E3                       2886 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      0010E3                       2887 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2888 	; local variables
                           000001  2889 	SQUOT=1 ; sign quotient
                           000002  2890 	SDIVD=2 ; sign dividend  
                           000002  2891 	VSIZE=2
      0010E3                       2892 divide:
      0010E3                       2893 	_vars VSIZE 
      0010E3 52 02            [ 2]    1     sub sp,#VSIZE 
      0010E5 0F 01            [ 1] 2894 	clr (SQUOT,sp)
      0010E7 0F 02            [ 1] 2895 	clr (SDIVD,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2896 ; check for 0 divisor
      0010E9 1E 05            [ 2] 2897 	ldw x,(DIVISR,sp)
      0010EB 5D               [ 2] 2898 	tnzw x 
      0010EC 26 05            [ 1] 2899     jrne 0$
      0010EE A6 04            [ 1] 2900 	ld a,#ERR_DIV0 
      0010F0 CC 07 0B         [ 2] 2901 	jp tb_error 
                                   2902 ; check divisor sign 	
      0010F3 9E               [ 1] 2903 0$:	ld a,xh 
      0010F4 A5 80            [ 1] 2904 	bcp a,#0x80 
      0010F6 27 03            [ 1] 2905 	jreq 1$
      0010F8 03 01            [ 1] 2906 	cpl (SQUOT,sp)
      0010FA 50               [ 2] 2907 	negw x 
      0010FB 1F 05            [ 2] 2908 1$:	ldw (DIVISR,sp),x
                                   2909 ; check dividend sign 	 
      0010FD 1E 07            [ 2] 2910     ldw x,(DIVIDND,sp)
      0010FF 9E               [ 1] 2911 	ld a,xh 
      001100 A5 80            [ 1] 2912 	bcp a,#0x80 
      001102 27 05            [ 1] 2913 	jreq 2$ 
      001104 03 01            [ 1] 2914 	cpl (SQUOT,sp)
      001106 03 02            [ 1] 2915 	cpl (SDIVD,sp)
      001108 50               [ 2] 2916 	negw x 
      001109 16 05            [ 2] 2917 2$:	ldw y,(DIVISR,sp)
      00110B 65               [ 2] 2918 	divw x,y
      00110C 90 CF 00 09      [ 2] 2919 	ldw acc16,y 
                                   2920 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      001110 0D 02            [ 1] 2921 	tnz (SDIVD,sp)
      001112 27 0B            [ 1] 2922 	jreq 7$
      001114 90 5D            [ 2] 2923 	tnzw y 
      001116 27 07            [ 1] 2924 	jreq 7$
      001118 5C               [ 1] 2925 	incw x
      001119 16 05            [ 2] 2926 	ldw y,(DIVISR,sp)
      00111B 72 B2 00 09      [ 2] 2927 	subw y,acc16
      00111F 0D 01            [ 1] 2928 7$: tnz (SQUOT,sp)
      001121 27 01            [ 1] 2929 	jreq 9$ 	 
      001123 50               [ 2] 2930 8$:	negw x 
      001124                       2931 9$: 
      001124                       2932 	_drop VSIZE 
      001124 5B 02            [ 2]    1     addw sp,#VSIZE 
      001126 81               [ 4] 2933 	ret 
                                   2934 
                                   2935 
                                   2936 ;----------------------------------
                                   2937 ;  remainder resulting from euclidian 
                                   2938 ;  division of n2/n1 
                                   2939 ; input:
                                   2940 ;   N1 		cstack 
                                   2941 ;   N2      cstack
                                   2942 ; output:
                                   2943 ;   X       N2%N1 
                                   2944 ;----------------------------------
                           000003  2945 	N1=3
                           000005  2946 	N2=5
                           000004  2947 	VSIZE=4
      001127                       2948 modulo:
      001127 1E 03            [ 2] 2949 	Ldw x,(N1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001129 16 05            [ 2] 2950 	ldw y,(N2,sp)
      00112B                       2951 	_vars VSIZE 
      00112B 52 04            [ 2]    1     sub sp,#VSIZE 
      00112D 1F 01            [ 2] 2952 	ldw (1,sp),x 
      00112F 17 03            [ 2] 2953 	ldw (3,sp),y 
      001131 CD 10 E3         [ 4] 2954 	call divide 
      001134 93               [ 1] 2955 	ldw x,y
      001135                       2956 	_drop VSIZE 
      001135 5B 04            [ 2]    1     addw sp,#VSIZE 
      001137 81               [ 4] 2957 	ret 
                                   2958 
                                   2959 
                                   2960 ;----------------------------------
                                   2961 ; search in kword_dict command name
                                   2962 ;  from its execution address 
                                   2963 ; input:
                                   2964 ;   X       	execution address 
                                   2965 ; output:
                                   2966 ;   X 			cstr*  | 0 
                                   2967 ;--------------------------------
                           000001  2968 	XADR=1 
                           000003  2969 	LINK=3 
                           000004  2970 	VSIZE=4
      001138                       2971 cmd_name:
      001138                       2972 	_vars VSIZE 
      001138 52 04            [ 2]    1     sub sp,#VSIZE 
      00113A 72 5F 00 09      [ 1] 2973 	clr acc16 
      00113E 1F 01            [ 2] 2974 	ldw (XADR,sp),x  
      001140 AE 21 0B         [ 2] 2975 	ldw x,#kword_dict	
      001143 1F 03            [ 2] 2976 1$:	ldw (LINK,sp),x
      001145 E6 02            [ 1] 2977 	ld a,(2,x)
      001147 A4 0F            [ 1] 2978 	and a,#15 
      001149 C7 00 0A         [ 1] 2979 	ld acc8,a 
      00114C 1C 00 03         [ 2] 2980 	addw x,#3
      00114F 72 BB 00 09      [ 2] 2981 	addw x,acc16
      001153 FE               [ 2] 2982 	ldw x,(x) ; execution address 
      001154 13 01            [ 2] 2983 	cpw x,(XADR,sp)
      001156 27 0A            [ 1] 2984 	jreq 2$
      001158 1E 03            [ 2] 2985 	ldw x,(LINK,sp)
      00115A FE               [ 2] 2986 	ldw x,(x) 
      00115B 1D 00 02         [ 2] 2987 	subw x,#2  
      00115E 26 E3            [ 1] 2988 	jrne 1$
      001160 20 05            [ 2] 2989 	jra 9$
      001162 1E 03            [ 2] 2990 2$: ldw x,(LINK,sp)
      001164 1C 00 02         [ 2] 2991 	addw x,#2 	
      001167                       2992 9$:	_drop VSIZE
      001167 5B 04            [ 2]    1     addw sp,#VSIZE 
      001169 81               [ 4] 2993 	ret
                                   2994 
                                   2995 
                                   2996 ;---------------------------------
                                   2997 ; input:
                                   2998 ;	X 		dictionary entry point 
                                   2999 ;  pad		.asciz name to search 
                                   3000 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3001 ;  A 		TK_CMD|TK_FUNC|TK_NONE 
                                   3002 ;  X		execution address | 0 
                                   3003 ;---------------------------------
                           000001  3004 	NLEN=1 ; cmd length 
                           000002  3005 	YSAVE=2
                           000003  3006 	VSIZE=3 
      00116A                       3007 search_dict:
      00116A                       3008 	_vars VSIZE 
      00116A 52 03            [ 2]    1     sub sp,#VSIZE 
      00116C 90 93            [ 1] 3009 	ldw y,x 
      00116E                       3010 search_next:	
      00116E 90 F6            [ 1] 3011 	ld a,(y)
      001170 A4 0F            [ 1] 3012 	and a,#0xf 
      001172 6B 01            [ 1] 3013 	ld (NLEN,sp),a  
      001174 AE 17 18         [ 2] 3014 	ldw x,#pad 
      001177 17 02            [ 2] 3015 	ldw (YSAVE,sp),y
      001179 90 5C            [ 1] 3016 	incw y  
      00117B                       3017 cp_loop:
      00117B F6               [ 1] 3018 	ld a,(x)
      00117C 27 1E            [ 1] 3019 	jreq str_match 
      00117E 0D 01            [ 1] 3020 	tnz (NLEN,sp)
      001180 27 0B            [ 1] 3021 	jreq no_match  
      001182 90 F1            [ 1] 3022 	cp a,(y)
      001184 26 07            [ 1] 3023 	jrne no_match 
      001186 90 5C            [ 1] 3024 	incw y 
      001188 5C               [ 1] 3025 	incw x
      001189 0A 01            [ 1] 3026 	dec (NLEN,sp)
      00118B 20 EE            [ 2] 3027 	jra cp_loop 
      00118D                       3028 no_match:
      00118D 16 02            [ 2] 3029 	ldw y,(YSAVE,sp) 
      00118F 72 A2 00 02      [ 2] 3030 	subw y,#2 ; move Y to link field
      001193 4B 00            [ 1] 3031 	push #TK_NONE 
      001195 90 FE            [ 2] 3032 	ldw y,(y) ; next word link 
      001197 84               [ 1] 3033 	pop a ; TK_NONE 
      001198 27 24            [ 1] 3034 	jreq search_exit  ; not found  
                                   3035 ;try next 
      00119A 20 D2            [ 2] 3036 	jra search_next
      00119C                       3037 str_match:
      00119C 16 02            [ 2] 3038 	ldw y,(YSAVE,sp)
      00119E 90 F6            [ 1] 3039 	ld a,(y)
      0011A0 6B 01            [ 1] 3040 	ld (NLEN,sp),a ; needed to test bit 7 
      0011A2 A4 7F            [ 1] 3041 	and a,#0x7f 
                                   3042 ; move y to procedure address field 	
      0011A4 4C               [ 1] 3043 	inc a 
      0011A5 C7 00 0A         [ 1] 3044 	ld acc8,a 
      0011A8 72 5F 00 09      [ 1] 3045 	clr acc16 
      0011AC 72 B9 00 09      [ 2] 3046 	addw y,acc16 
      0011B0 90 FE            [ 2] 3047 	ldw y,(y) ; routine entry point 
      0011B2 7B 01            [ 1] 3048 	ld a,(NLEN,sp)
      0011B4 A5 80            [ 1] 3049 	bcp a,#0x80 
      0011B6 27 04            [ 1] 3050 	jreq 1$
      0011B8 A6 07            [ 1] 3051 	ld a,#TK_FUNC 
      0011BA 20 02            [ 2] 3052 	jra search_exit
      0011BC A6 06            [ 1] 3053 1$: ld a,#TK_CMD 
      0011BE                       3054 search_exit: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011BE 93               [ 1] 3055 	ldw x,y ; x=routine address 
      0011BF                       3056 	_drop VSIZE 	 
      0011BF 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011C1 81               [ 4] 3057 	ret 
                                   3058 
                                   3059 ;---------------------
                                   3060 ; check if next token
                                   3061 ;  is of expected type 
                                   3062 ; input:
                                   3063 ;   A 		 expected token attribute
                                   3064 ;  ouput:
                                   3065 ;   none     if fail call tb_error 
                                   3066 ;--------------------
      0011C2                       3067 expect:
      0011C2 88               [ 1] 3068 	push a 
      0011C3 CD 07 EF         [ 4] 3069 	call next_token 
      0011C6 11 01            [ 1] 3070 	cp a,(1,sp)
      0011C8 27 03            [ 1] 3071 	jreq 1$
      0011CA CC 07 09         [ 2] 3072 	jp syntax_error
      0011CD 84               [ 1] 3073 1$: pop a 
      0011CE 81               [ 4] 3074 	ret 
                                   3075 
                                   3076 
                                   3077 ;-------------------------------
                                   3078 ; parse embedded BASIC routines 
                                   3079 ; arguments list.
                                   3080 ; arg_list::=  rel[','rel]*
                                   3081 ; all arguments are of integer type
                                   3082 ; input:
                                   3083 ;   none
                                   3084 ; output:
                                   3085 ;   A 			number of arguments pushed on dstack  
                                   3086 ;--------------------------------
                           000001  3087 	ARG_CNT=1 
      0011CF                       3088 arg_list:
      0011CF 4B 00            [ 1] 3089 	push #0  
      0011D1 CD 13 0D         [ 4] 3090 1$: call relation
      0011D4 A1 00            [ 1] 3091 	cp a,#TK_NONE 
      0011D6 27 19            [ 1] 3092 	jreq 5$
      0011D8 A1 02            [ 1] 3093 	cp a,#TK_INTGR
      0011DA 26 12            [ 1] 3094 	jrne 4$
      0011DC CD 0F 9F         [ 4] 3095 3$: call dpush 
      0011DF 0C 01            [ 1] 3096     inc (ARG_CNT,sp)
      0011E1 CD 07 EF         [ 4] 3097 	call next_token 
      0011E4 A1 00            [ 1] 3098 	cp a,#TK_NONE 
      0011E6 27 09            [ 1] 3099 	jreq 5$ 
      0011E8 A1 0B            [ 1] 3100 	cp a,#TK_COMMA 
      0011EA 26 02            [ 1] 3101 	jrne 4$
      0011EC 20 E3            [ 2] 3102 	jra 1$ 
      0011EE CD 0F 98         [ 4] 3103 4$:	call unget_token 
      0011F1 84               [ 1] 3104 5$:	pop a 
      0011F2 81               [ 4] 3105 	ret 
                                   3106 
                                   3107 
                                   3108 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3109 ;--------------------------------
                                   3110 ;   BASIC commnands 
                                   3111 ;--------------------------------
                                   3112 
                                   3113 ;--------------------------------
                                   3114 ;  arithmetic and relational 
                                   3115 ;  routines
                                   3116 ;  operators precedence
                                   3117 ;  highest to lowest
                                   3118 ;  operators on same row have 
                                   3119 ;  same precedence and are executed
                                   3120 ;  from left to right.
                                   3121 ;	'*','/','%'
                                   3122 ;   '-','+'
                                   3123 ;   '=','>','<','>=','<=','<>','><'
                                   3124 ;   '<>' and '><' are equivalent for not equal.
                                   3125 ;--------------------------------
                                   3126 
                                   3127 ;---------------------
                                   3128 ; return array element
                                   3129 ; address from @(expr)
                                   3130 ; input:
                                   3131 ;   A 		TK_ARRAY
                                   3132 ; output:
                                   3133 ;   A 		TK_INTGR
                                   3134 ;	X 		element address 
                                   3135 ;----------------------
      0011F3                       3136 get_array_element:
      0011F3 CD 0F D3         [ 4] 3137 	call ddrop 
      0011F6 A6 09            [ 1] 3138 	ld a,#TK_LPAREN 
      0011F8 CD 11 C2         [ 4] 3139 	call expect
      0011FB CD 13 0D         [ 4] 3140 	call relation 
      0011FE A1 02            [ 1] 3141 	cp a,#TK_INTGR 
      001200 27 03            [ 1] 3142 	jreq 1$
      001202 CC 07 09         [ 2] 3143 	jp syntax_error
      001205 89               [ 2] 3144 1$: pushw x 
      001206 A6 0A            [ 1] 3145 	ld a,#TK_RPAREN 
      001208 CD 11 C2         [ 4] 3146 	call expect
                                   3147 	; check for bounds 
      00120B 85               [ 2] 3148 	popw x   
      00120C C3 00 22         [ 2] 3149 	cpw x,array_size 
      00120F 23 05            [ 2] 3150 	jrule 3$
                                   3151 ; bounds {1..array_size}	
      001211 A6 0A            [ 1] 3152 2$: ld a,#ERR_BAD_VALUE 
      001213 CC 07 0B         [ 2] 3153 	jp tb_error 
      001216 5D               [ 2] 3154 3$: tnzw  x
      001217 27 F8            [ 1] 3155 	jreq 2$ 
      001219 58               [ 2] 3156 	sllw x 
      00121A 89               [ 2] 3157 	pushw x 
      00121B CE 00 20         [ 2] 3158 	ldw x,array_addr  
      00121E 72 F0 01         [ 2] 3159 	subw x,(1,sp)
      001221                       3160 	_drop 2   
      001221 5B 02            [ 2]    1     addw sp,#2 
      001223 A6 02            [ 1] 3161 	ld a,#TK_INTGR
      001225 81               [ 4] 3162 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3163 
                                   3164 ;***********************************
                                   3165 ;   expression parse,execute 
                                   3166 ;***********************************
                                   3167 ;-----------------------------------
                                   3168 ; factor ::= ['+'|'-'|e] var | @ |
                                   3169 ;			 integer | function |
                                   3170 ;			 '('relation')' 
                                   3171 ; output:
                                   3172 ;   A    token attribute 
                                   3173 ;   X 	 integer
                                   3174 ; ---------------------------------
                           000001  3175 	NEG=1
                           000001  3176 	VSIZE=1
      001226                       3177 factor:
      001226                       3178 	_vars VSIZE 
      001226 52 01            [ 2]    1     sub sp,#VSIZE 
      001228 CD 07 EF         [ 4] 3179 	call next_token
      00122B A1 02            [ 1] 3180 	cp a,#CMD_END 
      00122D 2B 4A            [ 1] 3181 	jrmi 20$
      00122F 6B 01            [ 1] 3182 1$:	ld (NEG,sp),a 
      001231 A4 30            [ 1] 3183 	and a,#TK_GRP_MASK
      001233 A1 10            [ 1] 3184 	cp a,#TK_GRP_ADD 
      001235 27 04            [ 1] 3185 	jreq 2$
      001237 7B 01            [ 1] 3186 	ld a,(NEG,sp)
      001239 20 03            [ 2] 3187 	jra 4$  
      00123B                       3188 2$:	
      00123B CD 07 EF         [ 4] 3189 	call next_token 
      00123E                       3190 4$:	
      00123E A1 07            [ 1] 3191 	cp a,#TK_FUNC 
      001240 26 03            [ 1] 3192 	jrne 5$ 
      001242 FD               [ 4] 3193 	call (x) 
      001243 20 2B            [ 2] 3194 	jra 18$ 
      001245                       3195 5$:
      001245 A1 02            [ 1] 3196 	cp a,#TK_INTGR
      001247 26 02            [ 1] 3197 	jrne 6$
      001249 20 25            [ 2] 3198 	jra 18$
      00124B                       3199 6$:
      00124B A1 04            [ 1] 3200 	cp a,#TK_ARRAY
      00124D 26 06            [ 1] 3201 	jrne 10$
      00124F CD 11 F3         [ 4] 3202 	call get_array_element
      001252 FE               [ 2] 3203 	ldw x,(x)
      001253 20 1B            [ 2] 3204 	jra 18$ 
      001255                       3205 10$:
      001255 A1 03            [ 1] 3206 	cp a,#TK_VAR 
      001257 26 03            [ 1] 3207 	jrne 12$
      001259 FE               [ 2] 3208 	ldw x,(x)
      00125A 20 14            [ 2] 3209 	jra 18$
      00125C                       3210 12$:			
      00125C A1 09            [ 1] 3211 	cp a,#TK_LPAREN
      00125E 26 0A            [ 1] 3212 	jrne 16$
      001260 CD 13 0D         [ 4] 3213 	call relation
      001263 A6 0A            [ 1] 3214 	ld a,#TK_RPAREN 
      001265 CD 11 C2         [ 4] 3215 	call expect
      001268 20 06            [ 2] 3216 	jra 18$	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00126A                       3217 16$:
      00126A CD 0F 98         [ 4] 3218 	call unget_token
      00126D 4F               [ 1] 3219 	clr a 
      00126E 20 09            [ 2] 3220 	jra 20$ 
      001270                       3221 18$: 
      001270 A6 11            [ 1] 3222 	ld a,#TK_MINUS 
      001272 11 01            [ 1] 3223 	cp a,(NEG,sp)
      001274 26 01            [ 1] 3224 	jrne 19$
      001276 50               [ 2] 3225 	negw x
      001277                       3226 19$:
      001277 A6 02            [ 1] 3227 	ld a,#TK_INTGR
      001279                       3228 20$:
      001279                       3229 	_drop VSIZE
      001279 5B 01            [ 2]    1     addw sp,#VSIZE 
      00127B 81               [ 4] 3230 	ret
                                   3231 
                                   3232 ;-----------------------------------
                                   3233 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3234 ; output:
                                   3235 ;   A    	token attribute 
                                   3236 ;	X		integer
                                   3237 ;-----------------------------------
                           000001  3238 	N1=1
                           000003  3239 	N2=3
                           000005  3240 	MULOP=5
                           000005  3241 	VSIZE=5
      00127C                       3242 term:
      00127C                       3243 	_vars VSIZE
      00127C 52 05            [ 2]    1     sub sp,#VSIZE 
      00127E CD 12 26         [ 4] 3244 	call factor
      001281 A1 02            [ 1] 3245 	cp a,#CMD_END
      001283 2B 41            [ 1] 3246 	jrmi term_exit
      001285                       3247 term01:	 ; check for  operator 
      001285 1F 03            [ 2] 3248 	ldw (N2,sp),x  ; save first factor 
      001287 CD 07 EF         [ 4] 3249 	call next_token
      00128A A1 02            [ 1] 3250 	cp a,#2
      00128C 2B 34            [ 1] 3251 	jrmi 9$
      00128E 6B 05            [ 1] 3252 0$:	ld (MULOP,sp),a
      001290 A4 30            [ 1] 3253 	and a,#TK_GRP_MASK
      001292 A1 20            [ 1] 3254 	cp a,#TK_GRP_MULT
      001294 27 07            [ 1] 3255 	jreq 1$
      001296 7B 05            [ 1] 3256 	ld a,(MULOP,sp) 
      001298 CD 0F 98         [ 4] 3257 	call unget_token 
      00129B 20 25            [ 2] 3258 	jra 9$
      00129D                       3259 1$:	; got *|/|%
      00129D CD 12 26         [ 4] 3260 	call factor
      0012A0 A1 02            [ 1] 3261 	cp a,#TK_INTGR
      0012A2 27 03            [ 1] 3262 	jreq 2$ 
      0012A4 CC 07 09         [ 2] 3263 	jp syntax_error
      0012A7 1F 01            [ 2] 3264 2$:	ldw (N1,sp),x  
      0012A9 7B 05            [ 1] 3265 	ld a,(MULOP,sp) 
      0012AB A1 20            [ 1] 3266 	cp a,#TK_MULT 
      0012AD 26 05            [ 1] 3267 	jrne 3$
      0012AF CD 10 9B         [ 4] 3268 	call multiply 
      0012B2 20 D1            [ 2] 3269 	jra term01
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0012B4 A1 21            [ 1] 3270 3$: cp a,#TK_DIV 
      0012B6 26 05            [ 1] 3271 	jrne 4$ 
      0012B8 CD 10 E3         [ 4] 3272 	call divide 
      0012BB 20 C8            [ 2] 3273 	jra term01 
      0012BD CD 11 27         [ 4] 3274 4$: call modulo
      0012C0 20 C3            [ 2] 3275 	jra term01 
      0012C2 1E 03            [ 2] 3276 9$: ldw x,(N2,sp)  
      0012C4 A6 02            [ 1] 3277 	ld a,#TK_INTGR 	
      0012C6                       3278 term_exit:
      0012C6                       3279 	_drop VSIZE 
      0012C6 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012C8 81               [ 4] 3280 	ret 
                                   3281 
                                   3282 ;-------------------------------
                                   3283 ;  expr ::= term [['+'|'-'] term]*
                                   3284 ;  result range {-32768..32767}
                                   3285 ;  output:
                                   3286 ;   A    token attribute 
                                   3287 ;   X	 integer   
                                   3288 ;-------------------------------
                           000001  3289 	N1=1 
                           000003  3290 	N2=3
                           000005  3291 	OP=5 
                           000005  3292 	VSIZE=5 
      0012C9                       3293 expression:
      0012C9                       3294 	_vars VSIZE 
      0012C9 52 05            [ 2]    1     sub sp,#VSIZE 
      0012CB CD 12 7C         [ 4] 3295 	call term
      0012CE A1 02            [ 1] 3296 	cp a,#CMD_END 
      0012D0 2B 38            [ 1] 3297 	jrmi expr_exit 
      0012D2 1F 03            [ 2] 3298 0$:	ldw (N2,sp),x 
      0012D4 CD 07 EF         [ 4] 3299 	call next_token
      0012D7 A1 02            [ 1] 3300 	cp a,#2
      0012D9 2B 2B            [ 1] 3301 	jrmi 9$ 
      0012DB 6B 05            [ 1] 3302 1$:	ld (OP,sp),a  
      0012DD A4 30            [ 1] 3303 	and a,#TK_GRP_MASK
      0012DF A1 10            [ 1] 3304 	cp a,#TK_GRP_ADD 
      0012E1 27 07            [ 1] 3305 	jreq 2$ 
      0012E3 7B 05            [ 1] 3306 	ld a,(OP,sp)
      0012E5 CD 0F 98         [ 4] 3307 	call unget_token
      0012E8 20 1C            [ 2] 3308 	jra 9$
      0012EA                       3309 2$: 
      0012EA CD 12 7C         [ 4] 3310 	call term
      0012ED A1 02            [ 1] 3311 	cp a,#TK_INTGR 
      0012EF 27 03            [ 1] 3312 	jreq 3$
      0012F1 CC 07 09         [ 2] 3313 	jp syntax_error
      0012F4 1F 01            [ 2] 3314 3$:	ldw (N1,sp),x 
      0012F6 7B 05            [ 1] 3315 	ld a,(OP,sp)
      0012F8 A1 10            [ 1] 3316 	cp a,#TK_PLUS 
      0012FA 26 05            [ 1] 3317 	jrne 4$
      0012FC CD 10 8D         [ 4] 3318 	call add 
      0012FF 20 D1            [ 2] 3319 	jra 0$ 
      001301 CD 10 95         [ 4] 3320 4$:	call substract
      001304 20 CC            [ 2] 3321 	jra 0$
      001306 1E 03            [ 2] 3322 9$: ldw x,(N2,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001308 A6 02            [ 1] 3323 	ld a,#TK_INTGR	
      00130A                       3324 expr_exit:
      00130A                       3325 	_drop VSIZE 
      00130A 5B 05            [ 2]    1     addw sp,#VSIZE 
      00130C 81               [ 4] 3326 	ret 
                                   3327 
                                   3328 ;---------------------------------------------
                                   3329 ; rel ::= expr rel_op expr
                                   3330 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3331 ;  relation return 1 | 0  for true | false 
                                   3332 ;  output:
                                   3333 ;    A 		token attribute  
                                   3334 ;	 X		1|0
                                   3335 ;---------------------------------------------
                           000001  3336 	N1=1
                           000003  3337 	N2=3
                           000005  3338 	RELOP=5
                           000005  3339 	VSIZE=5 
      00130D                       3340 relation: 
      00130D                       3341 	_vars VSIZE
      00130D 52 05            [ 2]    1     sub sp,#VSIZE 
      00130F CD 12 C9         [ 4] 3342 	call expression
      001312 A1 02            [ 1] 3343 	cp a,#CMD_END  
      001314 2B 4B            [ 1] 3344 	jrmi rel_exit 
                                   3345 	; expect rel_op or leave 
      001316 1F 03            [ 2] 3346 	ldw (N2,sp),x 
      001318 CD 07 EF         [ 4] 3347 	call next_token 
      00131B A1 02            [ 1] 3348 	cp a,#2
      00131D 2B 3E            [ 1] 3349 	jrmi 9$
      00131F                       3350 1$:	
      00131F 6B 05            [ 1] 3351 	ld (RELOP,sp),a 
      001321 A4 30            [ 1] 3352 	and a,#TK_GRP_MASK
      001323 A1 30            [ 1] 3353 	cp a,#TK_GRP_RELOP 
      001325 27 07            [ 1] 3354 	jreq 2$
      001327 7B 05            [ 1] 3355 	ld a,(RELOP,sp)
      001329 CD 0F 98         [ 4] 3356 	call unget_token  
      00132C 20 2F            [ 2] 3357 	jra 9$
      00132E                       3358 2$:	; expect another expression or error 
      00132E CD 12 C9         [ 4] 3359 	call expression
      001331 A1 02            [ 1] 3360 	cp a,#TK_INTGR 
      001333 27 03            [ 1] 3361 	jreq 3$
      001335 CC 07 09         [ 2] 3362 	jp syntax_error 
      001338 1F 01            [ 2] 3363 3$:	ldw (N1,sp),x 
      00133A CD 10 95         [ 4] 3364 	call substract
      00133D 26 06            [ 1] 3365 	jrne 4$
      00133F 35 02 00 0A      [ 1] 3366 	mov acc8,#2 ; n1==n2
      001343 20 0C            [ 2] 3367 	jra 6$ 
      001345                       3368 4$: 
      001345 2C 06            [ 1] 3369 	jrsgt 5$  
      001347 35 04 00 0A      [ 1] 3370 	mov acc8,#4 ; n1<2 
      00134B 20 04            [ 2] 3371 	jra 6$
      00134D                       3372 5$:
      00134D 35 01 00 0A      [ 1] 3373 	mov acc8,#1 ; n1>n2 
      001351                       3374 6$:
      001351 5F               [ 1] 3375 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001352 C6 00 0A         [ 1] 3376 	ld a, acc8  
      001355 14 05            [ 1] 3377 	and a,(RELOP,sp)
      001357 4D               [ 1] 3378 	tnz a 
      001358 27 05            [ 1] 3379 	jreq 10$
      00135A 5C               [ 1] 3380 	incw x 
      00135B                       3381 7$:	 
      00135B 20 02            [ 2] 3382 	jra 10$  	
      00135D 1E 03            [ 2] 3383 9$: ldw x,(N2,sp)
      00135F                       3384 10$:
      00135F A6 02            [ 1] 3385 	ld a,#TK_INTGR
      001361                       3386 rel_exit: 	 
      001361                       3387 	_drop VSIZE
      001361 5B 05            [ 2]    1     addw sp,#VSIZE 
      001363 81               [ 4] 3388 	ret 
                                   3389 
                                   3390 ;--------------------------------
                                   3391 ; BASIC: SHOW 
                                   3392 ;  show content of dstack,cstack
                                   3393 ;--------------------------------
      001364                       3394 show:
      001364 C6 00 07         [ 1] 3395 	ld a,base 
      001367 88               [ 1] 3396 	push a 
      001368 CD 10 2D         [ 4] 3397 	call dots
      00136B CD 10 60         [ 4] 3398 	call dotr 
      00136E 84               [ 1] 3399 	pop a 
      00136F C7 00 07         [ 1] 3400 	ld base,a 
      001372 4F               [ 1] 3401 	clr a 
      001373 81               [ 4] 3402 	ret
                                   3403 
                                   3404 ;--------------------------------------------
                                   3405 ; BASIC: HEX 
                                   3406 ; select hexadecimal base for integer print
                                   3407 ;---------------------------------------------
      001374                       3408 hex_base:
      001374 35 10 00 07      [ 1] 3409 	mov base,#16 
      001378 81               [ 4] 3410 	ret 
                                   3411 
                                   3412 ;--------------------------------------------
                                   3413 ; BASIC: DEC 
                                   3414 ; select decimal base for integer print
                                   3415 ;---------------------------------------------
      001379                       3416 dec_base:
      001379 35 0A 00 07      [ 1] 3417 	mov base,#10
      00137D 81               [ 4] 3418 	ret 
                                   3419 
                                   3420 ;------------------------
                                   3421 ; BASIC: SIZE 
                                   3422 ; return free size in text area
                                   3423 ; output:
                                   3424 ;   A 		TK_INTGR
                                   3425 ;   X 	    size integer
                                   3426 ;--------------------------
      00137E                       3427 size:
      00137E AE 16 C8         [ 2] 3428 	ldw x,#tib 
      001381 72 B0 00 1D      [ 2] 3429 	subw x,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001385 A6 02            [ 1] 3430 	ld a,#TK_INTGR
      001387 81               [ 4] 3431 	ret 
                                   3432 
                                   3433 
                                   3434 ;------------------------
                                   3435 ; BASIC: UBOUND  
                                   3436 ; return array variable size 
                                   3437 ; output:
                                   3438 ;   A 		TK_INTGR
                                   3439 ;   X 	    array size 
                                   3440 ;--------------------------
      001388                       3441 ubound:
      001388 AE 16 C8         [ 2] 3442 	ldw x,#tib
      00138B 72 B0 00 1D      [ 2] 3443 	subw x,txtend 
      00138F 54               [ 2] 3444 	srlw x 
      001390 CF 00 22         [ 2] 3445 	ldw array_size,x
      001393 A6 02            [ 1] 3446 	ld a,#TK_INTGR
      001395 81               [ 4] 3447 	ret 
                                   3448 
                                   3449 ;-----------------------------
                                   3450 ; BASIC: LET var=expr 
                                   3451 ; variable assignement 
                                   3452 ; output:
                                   3453 ;   A 		TK_NONE 
                                   3454 ;-----------------------------
      001396                       3455 let:
      001396 CD 07 EF         [ 4] 3456 	call next_token 
      001399 A1 03            [ 1] 3457 	cp a,#TK_VAR 
      00139B 27 03            [ 1] 3458 	jreq let02
      00139D CC 07 09         [ 2] 3459 	jp syntax_error
      0013A0                       3460 let02:
      0013A0 CD 0F 9F         [ 4] 3461 	call dpush 
      0013A3 CD 07 EF         [ 4] 3462 	call next_token 
      0013A6 A1 32            [ 1] 3463 	cp a,#TK_EQUAL
      0013A8 27 03            [ 1] 3464 	jreq 1$
      0013AA CC 07 09         [ 2] 3465 	jp syntax_error
      0013AD                       3466 1$:	
      0013AD CD 13 0D         [ 4] 3467 	call relation   
      0013B0 A1 02            [ 1] 3468 	cp a,#TK_INTGR 
      0013B2 27 03            [ 1] 3469 	jreq 2$
      0013B4 CC 07 09         [ 2] 3470 	jp syntax_error
      0013B7                       3471 2$:	
      0013B7 90 93            [ 1] 3472 	ldw y,x 
      0013B9 CD 0F AC         [ 4] 3473 	call dpop  
      0013BC FF               [ 2] 3474 	ldw (x),y   
      0013BD 81               [ 4] 3475 	ret 
                                   3476 
                                   3477 ;----------------------------
                                   3478 ; BASIC: LIST [[start][,end]]
                                   3479 ; list program lines 
                                   3480 ; form start to end 
                                   3481 ; if empty argument list then 
                                   3482 ; list all.
                                   3483 ;----------------------------
                           000001  3484 	FIRST=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                           000003  3485 	LAST=3 
                           000005  3486 	LN_PTR=5
                           000006  3487 	VSIZE=6 
      0013BE                       3488 list:
      0013BE                       3489 	_vars VSIZE
      0013BE 52 06            [ 2]    1     sub sp,#VSIZE 
      0013C0 CE 00 1B         [ 2] 3490 	ldw x,txtbgn 
      0013C3 C3 00 1D         [ 2] 3491 	cpw x,txtend 
      0013C6 2B 03            [ 1] 3492 	jrmi 1$
      0013C8 CC 14 3E         [ 2] 3493 	jp list_exit ; nothing to list 
      0013CB 1F 05            [ 2] 3494 1$:	ldw (LN_PTR,sp),x 
      0013CD FE               [ 2] 3495 	ldw x,(x) 
      0013CE 1F 01            [ 2] 3496 	ldw (FIRST,sp),x ; list from first line 
      0013D0 AE 7F FF         [ 2] 3497 	ldw x,#0x7fff ; biggest line number 
      0013D3 1F 03            [ 2] 3498 	ldw (LAST,sp),x 
      0013D5 CD 11 CF         [ 4] 3499 	call arg_list
      0013D8 4D               [ 1] 3500 	tnz a
      0013D9 27 3F            [ 1] 3501 	jreq list_start 
      0013DB A1 02            [ 1] 3502 	cp a,#2 
      0013DD 27 07            [ 1] 3503 	jreq 4$
      0013DF A1 01            [ 1] 3504 	cp a,#1 
      0013E1 27 06            [ 1] 3505 	jreq first_line 
      0013E3 CC 07 09         [ 2] 3506 	jp syntax_error 
      0013E6 CD 0F B9         [ 4] 3507 4$:	call dswap
      0013E9                       3508 first_line:
      0013E9 CD 0F AC         [ 4] 3509 	call dpop 
      0013EC 1F 01            [ 2] 3510 	ldw (FIRST,sp),x 
      0013EE A1 01            [ 1] 3511 	cp a,#1 
      0013F0 27 05            [ 1] 3512 	jreq lines_skip 	
      0013F2                       3513 last_line:
      0013F2 CD 0F AC         [ 4] 3514 	call dpop 
      0013F5 1F 03            [ 2] 3515 	ldw (LAST,sp),x 
      0013F7                       3516 lines_skip:
      0013F7 CE 00 1B         [ 2] 3517 	ldw x,txtbgn
      0013FA 1F 05            [ 2] 3518 2$:	ldw (LN_PTR,sp),x 
      0013FC C3 00 1D         [ 2] 3519 	cpw x,txtend 
      0013FF 2A 3D            [ 1] 3520 	jrpl list_exit 
      001401 FE               [ 2] 3521 	ldw x,(x) ;lineno 
      001402 13 01            [ 2] 3522 	cpw x,(FIRST,sp)
      001404 2A 14            [ 1] 3523 	jrpl list_start 
      001406 1E 05            [ 2] 3524 	ldw x,(LN_PTR,sp) 
      001408 1C 00 02         [ 2] 3525 	addw x,#2 
      00140B F6               [ 1] 3526 	ld a,(x)
      00140C 5C               [ 1] 3527 	incw x 
      00140D C7 00 0A         [ 1] 3528 	ld acc8,a 
      001410 72 5F 00 09      [ 1] 3529 	clr acc16 
      001414 72 BB 00 09      [ 2] 3530 	addw x,acc16
      001418 20 E0            [ 2] 3531 	jra 2$ 
                                   3532 ; print loop
      00141A                       3533 list_start:
      00141A 1E 05            [ 2] 3534 	ldw x,(LN_PTR,sp)
      00141C                       3535 3$:	
      00141C CD 14 55         [ 4] 3536 	call prt_basic_line
      00141F 1E 05            [ 2] 3537 	ldw x,(LN_PTR,sp)
      001421 E6 02            [ 1] 3538 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001423 C7 00 0A         [ 1] 3539 	ld acc8,a 
      001426 72 5F 00 09      [ 1] 3540 	clr acc16 
      00142A 72 BB 00 09      [ 2] 3541 	addw x,acc16
      00142E C3 00 1D         [ 2] 3542 	cpw x,txtend 
      001431 2A 0B            [ 1] 3543 	jrpl list_exit
      001433 1F 05            [ 2] 3544 	ldw (LN_PTR,sp),x
      001435 FE               [ 2] 3545 	ldw x,(x)
      001436 13 03            [ 2] 3546 	cpw x,(LAST,sp)  
      001438 2C 04            [ 1] 3547 	jrsgt list_exit 
      00143A 1E 05            [ 2] 3548 	ldw x,(LN_PTR,sp)
      00143C 20 DE            [ 2] 3549 	jra 3$
      00143E                       3550 list_exit:
      00143E                       3551 	_drop VSIZE 
      00143E 5B 06            [ 2]    1     addw sp,#VSIZE 
      001440 81               [ 4] 3552 	ret
                                   3553 
                                   3554 ;-------------------------
                                   3555 ; print counted string 
                                   3556 ; input:
                                   3557 ;   X 		address of string
                                   3558 ;--------------------------
      001441                       3559 prt_cmd_name:
      001441 F6               [ 1] 3560 	ld a,(x)
      001442 5C               [ 1] 3561 	incw x
      001443 A4 0F            [ 1] 3562 	and a,#15  
      001445 88               [ 1] 3563 	push a 
      001446 0D 01            [ 1] 3564 1$: tnz (1,sp) 
      001448 27 09            [ 1] 3565 	jreq 9$
      00144A F6               [ 1] 3566 	ld a,(x)
      00144B CD 01 9E         [ 4] 3567 	call putc 
      00144E 5C               [ 1] 3568 	incw x
      00144F 0A 01            [ 1] 3569 	dec (1,sp)	 
      001451 20 F3            [ 2] 3570 	jra 1$
      001453 84               [ 1] 3571 9$: pop a 
      001454 81               [ 4] 3572 	ret	
                                   3573 
                                   3574 ;--------------------------
                                   3575 ; decompile line from token list 
                                   3576 ; input:
                                   3577 ;   X 		pointer at line
                                   3578 ; output:
                                   3579 ;   none 
                                   3580 ;--------------------------	
                           000001  3581 	BASE_SAV=1
                           000002  3582 	WIDTH_SAV=2
                           000003  3583 	XSAVE=3
                           000005  3584 	LLEN=5
                           000005  3585 	VSIZE=5 
      001455                       3586 prt_basic_line:
      001455                       3587 	_vars VSIZE 
      001455 52 05            [ 2]    1     sub sp,#VSIZE 
      001457 C6 00 07         [ 1] 3588 	ld a,base
      00145A 6B 01            [ 1] 3589 	ld (BASE_SAV,sp),a  
      00145C C6 00 25         [ 1] 3590 	ld a,tab_width 
      00145F 6B 02            [ 1] 3591 	ld (WIDTH_SAV,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001461 CF 00 14         [ 2] 3592 	ldw ptr16,x
      001464 FE               [ 2] 3593 	ldw x,(x)
      001465 35 0A 00 07      [ 1] 3594 	mov base,#10
      001469 35 05 00 25      [ 1] 3595 	mov tab_width,#5
      00146D CD 09 81         [ 4] 3596 	call print_int ; print line number 
      001470 A6 20            [ 1] 3597 	ld a,#SPACE 
      001472 CD 01 9E         [ 4] 3598 	call putc 
      001475 72 5F 00 25      [ 1] 3599 	clr tab_width
      001479 AE 00 02         [ 2] 3600 	ldw x,#2
      00147C 72 D6 00 14      [ 4] 3601 	ld a,([ptr16],x)
      001480 6B 05            [ 1] 3602 	ld (LLEN,sp),a 
      001482 5C               [ 1] 3603 	incw x
      001483 9F               [ 1] 3604 1$:	ld a,xl 
      001484 11 05            [ 1] 3605 	cp a,(LLEN,sp)
      001486 2B 03            [ 1] 3606 	jrmi 19$
      001488 CC 15 80         [ 2] 3607 	jp 90$
      00148B                       3608 19$:	 
      00148B 72 D6 00 14      [ 4] 3609 	ld a,([ptr16],x)
      00148F 5C               [ 1] 3610 	incw x 
      001490 1F 03            [ 2] 3611 	ldw (XSAVE,sp),x 
      001492 A1 06            [ 1] 3612 	cp a,#TK_CMD 
      001494 27 04            [ 1] 3613 	jreq 2$
      001496 A1 07            [ 1] 3614 	cp a,#TK_FUNC 
      001498 26 2F            [ 1] 3615 	jrne 4$
      00149A                       3616 2$:	
      00149A 72 DE 00 14      [ 5] 3617 	ldw x,([ptr16],x)
      00149E A3 16 C2         [ 2] 3618 	cpw x,#rem 
      0014A1 26 14            [ 1] 3619 	jrne 3$
      0014A3 A6 27            [ 1] 3620 	ld a,#''
      0014A5 CD 01 9E         [ 4] 3621 	call putc 
      0014A8 1E 03            [ 2] 3622 	ldw x,(XSAVE,sp)
      0014AA 1C 00 02         [ 2] 3623 	addw x,#2
      0014AD 72 BB 00 14      [ 2] 3624 	addw x,ptr16  
      0014B1 CD 01 B0         [ 4] 3625 	call puts 
      0014B4 CC 15 80         [ 2] 3626 	jp 90$ 
      0014B7 CD 11 38         [ 4] 3627 3$:	call cmd_name
      0014BA CD 14 41         [ 4] 3628 	call prt_cmd_name
      0014BD A6 20            [ 1] 3629 	ld a,#SPACE 
      0014BF CD 01 9E         [ 4] 3630 	call putc 
      0014C2 1E 03            [ 2] 3631 	ldw x,(XSAVE,sp)
      0014C4 1C 00 02         [ 2] 3632 	addw x,#2
      0014C7 20 BA            [ 2] 3633 	jra 1$
      0014C9 A1 08            [ 1] 3634 4$: cp a,#TK_QSTR 
      0014CB 26 18            [ 1] 3635 	jrne 5$
      0014CD A6 22            [ 1] 3636 	ld a,#'" 
      0014CF CD 01 9E         [ 4] 3637 	call putc 
      0014D2 72 BB 00 14      [ 2] 3638 	addw x,ptr16
      0014D6 CD 01 B0         [ 4] 3639 	call puts 
      0014D9 A6 22            [ 1] 3640 	ld a,#'" 
      0014DB CD 01 9E         [ 4] 3641 	call putc 
      0014DE 5C               [ 1] 3642 	incw x
      0014DF 72 B0 00 14      [ 2] 3643 	subw x,ptr16  
      0014E3 20 9E            [ 2] 3644 	jra 1$
      0014E5 A1 03            [ 1] 3645 5$:	cp a,#TK_VAR
      0014E7 26 15            [ 1] 3646 	jrne 6$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014E9 72 DE 00 14      [ 5] 3647 	ldw x,([ptr16],x)
      0014ED 1D 00 26         [ 2] 3648 	subw x,#vars 
      0014F0 9F               [ 1] 3649 	ld a,xl
      0014F1 44               [ 1] 3650 	srl a 
      0014F2 AB 41            [ 1] 3651 	add a,#'A 
      0014F4 CD 01 9E         [ 4] 3652 	call putc 
      0014F7 1E 03            [ 2] 3653 	ldw x,(XSAVE,sp)
      0014F9 1C 00 02         [ 2] 3654 	addw x,#2 
      0014FC 20 85            [ 2] 3655 	jra 1$ 
      0014FE A1 04            [ 1] 3656 6$: cp a,#TK_ARRAY 
      001500 26 0A            [ 1] 3657 	jrne 7$
      001502 A6 40            [ 1] 3658 	ld a,#'@ 
      001504 CD 01 9E         [ 4] 3659 	call putc 
      001507 1E 03            [ 2] 3660 	ldw x,(XSAVE,sp)
      001509 CC 14 83         [ 2] 3661 	jp 1$ 
      00150C A1 02            [ 1] 3662 7$: cp a,#TK_INTGR 
      00150E 26 14            [ 1] 3663 	jrne 8$
      001510 72 DE 00 14      [ 5] 3664 	ldw x,([ptr16],x)
      001514 CD 09 81         [ 4] 3665 	call print_int
      001517 A6 20            [ 1] 3666 	ld a,#SPACE 
      001519 CD 01 9E         [ 4] 3667 	call putc 
      00151C 1E 03            [ 2] 3668 	ldw x,(XSAVE,sp)
      00151E 1C 00 02         [ 2] 3669 	addw x,#2 
      001521 CC 14 83         [ 2] 3670 	jp 1$
      001524 A1 31            [ 1] 3671 8$: cp a,#TK_GT 
      001526 2B 1A            [ 1] 3672 	jrmi 9$
      001528 A1 35            [ 1] 3673 	cp a,#TK_NE 
      00152A 22 16            [ 1] 3674 	jrugt 9$
      00152C A0 31            [ 1] 3675 	sub a,#TK_GT  
      00152E 48               [ 1] 3676 	sll a 
      00152F 90 5F            [ 1] 3677 	clrw y 
      001531 90 97            [ 1] 3678 	ld yl,a 
      001533 72 A9 15 99      [ 2] 3679 	addw y,#relop_str 
      001537 90 FE            [ 2] 3680 	ldw y,(y)
      001539 93               [ 1] 3681 	ldw x,y 
      00153A CD 01 B0         [ 4] 3682 	call puts 
      00153D 1E 03            [ 2] 3683 	ldw x,(XSAVE,sp)
      00153F CC 14 83         [ 2] 3684 	jp 1$
      001542 A1 10            [ 1] 3685 9$: cp a,#TK_PLUS 
      001544 26 04            [ 1] 3686 	jrne 10$
      001546 A6 2B            [ 1] 3687 	ld a,#'+
      001548 20 2E            [ 2] 3688 	jra 80$ 
      00154A A1 11            [ 1] 3689 10$: cp a,#TK_MINUS
      00154C 26 04            [ 1] 3690 	jrne 11$
      00154E A6 2D            [ 1] 3691 	ld a,#'-
      001550 20 26            [ 2] 3692 	jra 80$
      001552 A1 20            [ 1] 3693 11$: cp a,#TK_MULT 
      001554 2B 0E            [ 1] 3694 	jrmi 12$
      001556 A1 22            [ 1] 3695 	cp a,#TK_MOD 
      001558 22 0A            [ 1] 3696 	jrugt 12$
      00155A A0 20            [ 1] 3697 	sub a,#0x20
      00155C 5F               [ 1] 3698 	clrw x 
      00155D 97               [ 1] 3699 	ld xl,a 
      00155E 1C 15 96         [ 2] 3700 	addw x,#mul_char 
      001561 F6               [ 1] 3701 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001562 20 14            [ 2] 3702 	jra 80$ 
      001564 A1 09            [ 1] 3703 12$: cp a,#TK_LPAREN 
      001566 2B 0E            [ 1] 3704 	jrmi 13$
      001568 A1 0C            [ 1] 3705 	cp a,#TK_SHARP 
      00156A 22 0A            [ 1] 3706 	jrugt 13$
      00156C A0 09            [ 1] 3707 	sub a,#TK_LPAREN
      00156E 5F               [ 1] 3708 	clrw x 
      00156F 97               [ 1] 3709 	ld xl,a 
      001570 1C 15 92         [ 2] 3710 	addw x,#single_char 
      001573 F6               [ 1] 3711 	ld a,(x)
      001574 20 02            [ 2] 3712 	jra 80$
      001576 A6 3A            [ 1] 3713 13$: ld a,#':
      001578 CD 01 9E         [ 4] 3714 80$: call putc 
      00157B 1E 03            [ 2] 3715 	ldw x,(XSAVE,sp)
      00157D CC 14 83         [ 2] 3716 	jp 1$ 
      001580                       3717 90$: 
      001580 A6 0D            [ 1] 3718 	ld a,#CR 
      001582 CD 01 9E         [ 4] 3719 	call putc
      001585 7B 02            [ 1] 3720 	ld a,(WIDTH_SAV,sp) 
      001587 C7 00 25         [ 1] 3721 	ld tab_width,a 
      00158A 7B 01            [ 1] 3722 	ld a,(BASE_SAV,sp) 
      00158C C7 00 07         [ 1] 3723 	ld base,a
      00158F                       3724 	_drop VSIZE 
      00158F 5B 05            [ 2]    1     addw sp,#VSIZE 
      001591 81               [ 4] 3725 	ret 	
      001592 28 29 2C 23           3726 single_char: .byte '(',')',',','#'
      001596 2A 2F 25              3727 mul_char: .byte '*','/','%'
      001599 15 A5 15 A7 15 A9 15  3728 relop_str: .word gt,equal,ge,lt,le,ne 
             AC 15 AE 15 B1
      0015A5 3E 00                 3729 gt: .asciz ">"
      0015A7 3D 00                 3730 equal: .asciz "="
      0015A9 3E 3D 00              3731 ge: .asciz ">="
      0015AC 3C 00                 3732 lt: .asciz "<"
      0015AE 3C 3D 00              3733 le: .asciz "<="
      0015B1 3C 3E 00              3734 ne:  .asciz "<>"
                                   3735 
                                   3736 
                                   3737 ;---------------------------------
                                   3738 ; BASIC: PRINT|? arg_list 
                                   3739 ; print values from argument list
                                   3740 ;----------------------------------
                           000001  3741 	COMMA=1
                           000001  3742 	VSIZE=1
      0015B4                       3743 print:
      0015B4 4B 00            [ 1] 3744 push #0 ; local variable COMMA 
      0015B6                       3745 reset_comma:
      0015B6 0F 01            [ 1] 3746 	clr (COMMA,sp)
      0015B8                       3747 prt_loop:
      0015B8 CD 13 0D         [ 4] 3748 	call relation 
      0015BB A1 01            [ 1] 3749 	cp a,#TK_COLON 
      0015BD 27 59            [ 1] 3750 	jreq print_exit   
      0015BF A1 02            [ 1] 3751 	cp a,#TK_INTGR 
      0015C1 26 05            [ 1] 3752 	jrne 0$ 
      0015C3 CD 09 81         [ 4] 3753 	call print_int 
      0015C6 20 EE            [ 2] 3754 	jra reset_comma
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0015C8                       3755 0$: 	
      0015C8 CD 07 EF         [ 4] 3756 	call next_token
      0015CB A1 00            [ 1] 3757 	cp a,#TK_NONE 
      0015CD 27 49            [ 1] 3758 	jreq print_exit 
      0015CF A1 08            [ 1] 3759 1$:	cp a,#TK_QSTR
      0015D1 26 0E            [ 1] 3760 	jrne 2$   
      0015D3 CD 01 B0         [ 4] 3761 	call puts
      0015D6 5C               [ 1] 3762 	incw x 
      0015D7 72 B0 00 03      [ 2] 3763 	subw x,basicptr 
      0015DB 9F               [ 1] 3764 	ld a,xl 
      0015DC C7 00 01         [ 1] 3765 	ld in,a  
      0015DF 20 D5            [ 2] 3766 	jra reset_comma
      0015E1 A1 05            [ 1] 3767 2$: cp a,#TK_CHAR 
      0015E3 26 06            [ 1] 3768 	jrne 3$
      0015E5 9F               [ 1] 3769 	ld a,xl 
      0015E6 CD 01 9E         [ 4] 3770 	call putc 
      0015E9 20 CB            [ 2] 3771 	jra reset_comma 
      0015EB                       3772 3$: 	
      0015EB A1 07            [ 1] 3773 	cp a,#TK_FUNC 
      0015ED 26 06            [ 1] 3774 	jrne 4$ 
      0015EF FD               [ 4] 3775 	call (x)
      0015F0 CD 09 81         [ 4] 3776 	call print_int 
      0015F3 20 C1            [ 2] 3777 	jra reset_comma 
      0015F5                       3778 4$: 
      0015F5 A1 0B            [ 1] 3779 	cp a,#TK_COMMA 
      0015F7 26 05            [ 1] 3780 	jrne 5$
      0015F9 03 01            [ 1] 3781 	cpl (COMMA,sp) 
      0015FB CC 15 B8         [ 2] 3782 	jp prt_loop   
      0015FE                       3783 5$: 
      0015FE A1 0C            [ 1] 3784 	cp a,#TK_SHARP
      001600 26 13            [ 1] 3785 	jrne 7$
      001602 CD 07 EF         [ 4] 3786 	call next_token
      001605 A1 02            [ 1] 3787 	cp a,#TK_INTGR 
      001607 27 03            [ 1] 3788 	jreq 6$
      001609 CC 07 09         [ 2] 3789 	jp syntax_error 
      00160C                       3790 6$:
      00160C 9F               [ 1] 3791 	ld a,xl 
      00160D A4 0F            [ 1] 3792 	and a,#15 
      00160F C7 00 25         [ 1] 3793 	ld tab_width,a 
      001612 CC 15 B6         [ 2] 3794 	jp reset_comma 
      001615                       3795 7$:	
      001615 CD 0F 98         [ 4] 3796 	call unget_token
      001618                       3797 print_exit:
      001618 0D 01            [ 1] 3798 	tnz (COMMA,sp)
      00161A 26 05            [ 1] 3799 	jrne 9$
      00161C A6 0D            [ 1] 3800 	ld a,#CR 
      00161E CD 01 9E         [ 4] 3801     call putc 
      001621                       3802 9$:	_drop VSIZE 
      001621 5B 01            [ 2]    1     addw sp,#VSIZE 
      001623 81               [ 4] 3803 	ret 
                                   3804 
                                   3805 ;----------------------
                                   3806 ; 'save_context' and
                                   3807 ; 'rest_context' must be 
                                   3808 ; called at the same 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3809 ; call stack depth 
                                   3810 ; i.e. SP must have the 
                                   3811 ; save value at  
                                   3812 ; entry point of both 
                                   3813 ; routine. 
                                   3814 ;---------------------
                           000006  3815 	CTXT_SIZE=6 ; size of saved data 
                                   3816 ;--------------------
                                   3817 ; save current BASIC
                                   3818 ; interpreter context 
                                   3819 ; on cstack 
                                   3820 ;--------------------
      001624                       3821 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001624                       3822 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001624                       3823 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001624                       3824 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001624                       3825 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      001624                       3826 save_context:
      001624 CE 00 03         [ 2] 3827 	ldw x,basicptr 
      001627 1F 03            [ 2] 3828 	ldw (BPTR,sp),x
      001629 CE 00 05         [ 2] 3829 	ldw x,lineno 
      00162C 1F 05            [ 2] 3830 	ldw (LNO,sp),x 
      00162E C6 00 01         [ 1] 3831 	ld a,in 
      001631 6B 07            [ 1] 3832 	ld (IN,sp),a
      001633 C6 00 02         [ 1] 3833 	ld a,count 
      001636 6B 08            [ 1] 3834 	ld (CNT,sp),a  
      001638 81               [ 4] 3835 	ret
                                   3836 
                                   3837 ;-----------------------
                                   3838 ; restore previously saved 
                                   3839 ; BASIC interpreter context 
                                   3840 ; from cstack 
                                   3841 ;-------------------------
      001639                       3842 rest_context:
      001639 1E 03            [ 2] 3843 	ldw x,(BPTR,sp)
      00163B CF 00 03         [ 2] 3844 	ldw basicptr,x 
      00163E 1E 05            [ 2] 3845 	ldw x,(LNO,sp)
      001640 CF 00 05         [ 2] 3846 	ldw lineno,x 
      001643 7B 07            [ 1] 3847 	ld a,(IN,sp)
      001645 C7 00 01         [ 1] 3848 	ld in,a
      001648 7B 08            [ 1] 3849 	ld a,(CNT,sp)
      00164A C7 00 02         [ 1] 3850 	ld count,a  
      00164D 81               [ 4] 3851 	ret
                                   3852 
                                   3853 ;------------------------------------------
                                   3854 ; BASIC: INPUT [string],var[,[string],var]
                                   3855 ; input value in variables 
                                   3856 ; [string] optionally can be used as prompt 
                                   3857 ;-----------------------------------------
                           000001  3858 	CX_BPTR=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                           000003  3859 	CX_LNO=3
                           000004  3860 	CX_IN=4
                           000005  3861 	CX_CNT=5
                           000006  3862 	SKIP=6
                           000007  3863 	VSIZE=7
      00164E                       3864 input_var:
      00164E 72 00 00 24 05   [ 2] 3865 	btjt flags,#FRUN,1$ 
      001653 A6 06            [ 1] 3866 	ld a,#ERR_RUN_ONLY 
      001655 CC 07 0B         [ 2] 3867 	jp tb_error 
      001658                       3868 1$:	_vars VSIZE 
      001658 52 07            [ 2]    1     sub sp,#VSIZE 
      00165A                       3869 input_loop:
      00165A 0F 06            [ 1] 3870 	clr (SKIP,sp)
      00165C CD 07 EF         [ 4] 3871 	call next_token 
      00165F A1 00            [ 1] 3872 	cp a,#TK_NONE 
      001661 27 5C            [ 1] 3873 	jreq input_exit 
      001663 A1 08            [ 1] 3874 	cp a,#TK_QSTR 
      001665 26 08            [ 1] 3875 	jrne 1$ 
      001667 CD 01 B0         [ 4] 3876 	call puts 
      00166A 03 06            [ 1] 3877 	cpl (SKIP,sp)
      00166C CD 07 EF         [ 4] 3878 	call next_token 
      00166F A1 03            [ 1] 3879 1$: cp a,#TK_VAR  
      001671 27 03            [ 1] 3880 	jreq 2$ 
      001673 CC 07 09         [ 2] 3881 	jp syntax_error
      001676 CD 0F 9F         [ 4] 3882 2$:	call dpush 
      001679 0D 06            [ 1] 3883 	tnz (SKIP,sp)
      00167B 26 0F            [ 1] 3884 	jrne 21$ 
      00167D A6 3A            [ 1] 3885 	ld a,#':
      00167F C7 17 19         [ 1] 3886 	ld pad+1,a 
      001682 72 5F 17 1A      [ 1] 3887 	clr pad+2
      001686 AE 17 18         [ 2] 3888 	ldw x,#pad 
      001689 CD 01 B0         [ 4] 3889 	call puts   
      00168C                       3890 21$:
      00168C CD 16 24         [ 4] 3891 	call save_context 
      00168F AE 16 C8         [ 2] 3892 	ldw x,#tib 
      001692 CF 00 03         [ 2] 3893 	ldw basicptr,x  
      001695 72 5F 00 02      [ 1] 3894 	clr count  
      001699 CD 0A 6F         [ 4] 3895 	call readln 
      00169C 72 5F 00 01      [ 1] 3896 	clr in 
      0016A0 CD 13 0D         [ 4] 3897 	call relation 
      0016A3 A1 02            [ 1] 3898 	cp a,#TK_INTGR
      0016A5 27 03            [ 1] 3899 	jreq 3$ 
      0016A7 CC 07 09         [ 2] 3900 	jp syntax_error
      0016AA CD 0F 9F         [ 4] 3901 3$: call dpush 
      0016AD CD 10 06         [ 4] 3902 	call store 
      0016B0 CD 16 39         [ 4] 3903 	call rest_context
      0016B3 CD 07 EF         [ 4] 3904 	call next_token 
      0016B6 A1 0B            [ 1] 3905 	cp a,#TK_COMMA 
      0016B8 26 02            [ 1] 3906 	jrne 4$
      0016BA 20 9E            [ 2] 3907 	jra input_loop 
      0016BC CD 0F 98         [ 4] 3908 4$:	call unget_token 
      0016BF                       3909 input_exit:
      0016BF                       3910 	_drop VSIZE 
      0016BF 5B 07            [ 2]    1     addw sp,#VSIZE 
      0016C1 81               [ 4] 3911 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3912 
                                   3913 
                                   3914 ;---------------------
                                   3915 ; BASIC: REMARK | ' 
                                   3916 ; skip comment to end of line 
                                   3917 ;---------------------- 
      0016C2                       3918 rem:
      0016C2 55 00 01 00 02   [ 1] 3919  	mov count,in 
      0016C7 81               [ 4] 3920 	ret 
                                   3921 
                                   3922 ;---------------------
                                   3923 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3924 ; read in loop 'addr'  
                                   3925 ; apply & 'mask' to value 
                                   3926 ; loop while result==0.  
                                   3927 ; if 'xor_mask' given 
                                   3928 ; apply ^ in second  
                                   3929 ; loop while result==0 
                                   3930 ;---------------------
                           000001  3931 	XMASK=1 
                           000002  3932 	MASK=2
                           000003  3933 	ADDR=3
                           000004  3934 	VSIZE=4
      0016C8                       3935 wait: 
      0016C8                       3936 	_vars VSIZE
      0016C8 52 04            [ 2]    1     sub sp,#VSIZE 
      0016CA 0F 01            [ 1] 3937 	clr (XMASK,sp) 
      0016CC CD 11 CF         [ 4] 3938 	call arg_list 
      0016CF A1 02            [ 1] 3939 	cp a,#2
      0016D1 24 03            [ 1] 3940 	jruge 0$
      0016D3 CC 07 09         [ 2] 3941 	jp syntax_error 
      0016D6 A1 03            [ 1] 3942 0$:	cp a,#3
      0016D8 25 06            [ 1] 3943 	jrult 1$
      0016DA CD 0F AC         [ 4] 3944 	call dpop 
      0016DD 9F               [ 1] 3945 	ld a,xl
      0016DE 6B 01            [ 1] 3946 	ld (XMASK,sp),a 
      0016E0 CD 0F AC         [ 4] 3947 1$: call dpop ; mask 
      0016E3 9F               [ 1] 3948 	ld a,xl 
      0016E4 6B 02            [ 1] 3949 	ld (MASK,sp),a 
      0016E6 CD 0F AC         [ 4] 3950 	call dpop ; address 
      0016E9 F6               [ 1] 3951 2$:	ld a,(x)
      0016EA 14 02            [ 1] 3952 	and a,(MASK,sp)
      0016EC 18 01            [ 1] 3953 	xor a,(XMASK,sp)
      0016EE 27 F9            [ 1] 3954 	jreq 2$ 
      0016F0                       3955 	_drop VSIZE 
      0016F0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0016F2 81               [ 4] 3956 	ret 
                                   3957 
                                   3958 ;---------------------
                                   3959 ; BASIC: BSET addr,mask
                                   3960 ; set bits at 'addr' corresponding 
                                   3961 ; to those of 'mask' that are at 1.
                                   3962 ; arguments:
                                   3963 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3964 ;   mask        mask|addr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3965 ; output:
                                   3966 ;	none 
                                   3967 ;--------------------------
      0016F3                       3968 bit_set:
      0016F3 CD 11 CF         [ 4] 3969 	call arg_list 
      0016F6 A1 02            [ 1] 3970 	cp a,#2	 
      0016F8 27 03            [ 1] 3971 	jreq 1$ 
      0016FA CC 07 09         [ 2] 3972 	jp syntax_error
      0016FD                       3973 1$: 
      0016FD CD 0F AC         [ 4] 3974 	call dpop ; mask 
      001700 9F               [ 1] 3975 	ld a,xl 
      001701 CD 0F AC         [ 4] 3976 	call dpop ; addr  
      001704 FA               [ 1] 3977 	or a,(x)
      001705 F7               [ 1] 3978 	ld (x),a
      001706 81               [ 4] 3979 	ret 
                                   3980 
                                   3981 ;---------------------
                                   3982 ; BASIC: BRES addr,mask
                                   3983 ; reset bits at 'addr' corresponding 
                                   3984 ; to those of 'mask' that are at 1.
                                   3985 ; arguments:
                                   3986 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3987 ;   mask	    ~mask&*addr  
                                   3988 ; output:
                                   3989 ;	none 
                                   3990 ;--------------------------
      001707                       3991 bit_reset:
      001707 CD 11 CF         [ 4] 3992 	call arg_list 
      00170A A1 02            [ 1] 3993 	cp a,#2  
      00170C 27 03            [ 1] 3994 	jreq 1$ 
      00170E CC 07 09         [ 2] 3995 	jp syntax_error
      001711                       3996 1$: 
      001711 CD 0F AC         [ 4] 3997 	call dpop ; mask 
      001714 9F               [ 1] 3998 	ld a,xl 
      001715 43               [ 1] 3999 	cpl a 
      001716 CD 0F AC         [ 4] 4000 	call dpop ; addr  
      001719 F4               [ 1] 4001 	and a,(x)
      00171A F7               [ 1] 4002 	ld (x),a 
      00171B 81               [ 4] 4003 	ret 
                                   4004 
                                   4005 ;---------------------
                                   4006 ; BASIC: BRES addr,mask
                                   4007 ; toggle bits at 'addr' corresponding 
                                   4008 ; to those of 'mask' that are at 1.
                                   4009 ; arguments:
                                   4010 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4011 ;   mask	    mask^*addr  
                                   4012 ; output:
                                   4013 ;	none 
                                   4014 ;--------------------------
      00171C                       4015 bit_toggle:
      00171C CD 11 CF         [ 4] 4016 	call arg_list 
      00171F A1 02            [ 1] 4017 	cp a,#2 
      001721 27 03            [ 1] 4018 	jreq 1$ 
      001723 CC 07 09         [ 2] 4019 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001726 CD 0F AC         [ 4] 4020 1$: call dpop ; mask 
      001729 9F               [ 1] 4021 	ld a,xl 
      00172A CD 0F AC         [ 4] 4022 	call dpop ; addr  
      00172D F8               [ 1] 4023 	xor a,(x)
      00172E F7               [ 1] 4024 	ld (x),a 
      00172F 81               [ 4] 4025 	ret 
                                   4026 
                                   4027 
                                   4028 ;--------------------
                                   4029 ; BASIC: POKE addr,byte
                                   4030 ; put a byte at addr 
                                   4031 ;--------------------
      001730                       4032 poke:
      001730 CD 11 CF         [ 4] 4033 	call arg_list 
      001733 A1 02            [ 1] 4034 	cp a,#2
      001735 27 03            [ 1] 4035 	jreq 1$
      001737 CC 07 09         [ 2] 4036 	jp syntax_error
      00173A                       4037 1$:	
      00173A CD 0F AC         [ 4] 4038 	call dpop 
      00173D 9F               [ 1] 4039     ld a,xl 
      00173E CD 0F AC         [ 4] 4040 	call dpop 
      001741 F7               [ 1] 4041 	ld (x),a 
      001742 81               [ 4] 4042 	ret 
                                   4043 
                                   4044 ;-----------------------
                                   4045 ; BASIC: PEEK(addr)
                                   4046 ; get the byte at addr 
                                   4047 ; input:
                                   4048 ;	none 
                                   4049 ; output:
                                   4050 ;	X 		value 
                                   4051 ;-----------------------
      001743                       4052 peek:
      001743 A6 09            [ 1] 4053 	ld a,#TK_LPAREN 
      001745 CD 11 C2         [ 4] 4054 	call expect 
      001748 CD 11 CF         [ 4] 4055 	call arg_list
      00174B A1 01            [ 1] 4056 	cp a,#1 
      00174D 27 03            [ 1] 4057 	jreq 1$
      00174F CC 07 09         [ 2] 4058 	jp syntax_error
      001752 A6 0A            [ 1] 4059 1$:	ld a,#TK_RPAREN 
      001754 CD 11 C2         [ 4] 4060 	call expect 
      001757 CD 0F AC         [ 4] 4061 	call dpop 
      00175A F6               [ 1] 4062 	ld a,(x)
      00175B 5F               [ 1] 4063 	clrw x 
      00175C 97               [ 1] 4064 	ld xl,a 
      00175D A6 02            [ 1] 4065 	ld a,#TK_INTGR
      00175F 81               [ 4] 4066 	ret 
                                   4067 
      001760                       4068 if: 
      001760 CD 13 0D         [ 4] 4069 	call relation 
      001763 A1 02            [ 1] 4070 	cp a,#TK_INTGR
      001765 27 03            [ 1] 4071 	jreq 1$ 
      001767 CC 07 09         [ 2] 4072 	jp syntax_error
      00176A 4F               [ 1] 4073 1$:	clr a 
      00176B 5D               [ 2] 4074 	tnzw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00176C 26 05            [ 1] 4075 	jrne 9$  
                                   4076 ;skip to next line
      00176E 55 00 02 00 01   [ 1] 4077 	mov in,count
      001773 81               [ 4] 4078 9$:	ret 
                                   4079 
                                   4080 ;------------------------
                                   4081 ; BASIC: FOR var=expr 
                                   4082 ; set variable to expression 
                                   4083 ; leave variable address 
                                   4084 ; on dstack and set
                                   4085 ; FFOR bit in 'flags'
                                   4086 ;-----------------
                           000001  4087 	RETL1=1
                           000003  4088 	INW=3
                           000005  4089 	BPTR=5
      001774                       4090 for: ; { -- var_addr }
      001774 A6 03            [ 1] 4091 	ld a,#TK_VAR 
      001776 CD 11 C2         [ 4] 4092 	call expect
      001779 CD 0F 9F         [ 4] 4093 	call dpush 
      00177C CD 13 A0         [ 4] 4094 	call let02 
      00177F 72 14 00 24      [ 1] 4095 	bset flags,#FFOR 
                                   4096 ; open space on cstack for BPTR and INW 
      001783 85               [ 2] 4097 	popw x ; call return address 
      001784                       4098 	_vars 4
      001784 52 04            [ 2]    1     sub sp,#4 
      001786 89               [ 2] 4099 	pushw x  ; RETL1 
      001787 5F               [ 1] 4100 	clrw x 
      001788 1F 05            [ 2] 4101 	ldw (BPTR,sp),x 
      00178A 1F 03            [ 2] 4102 	ldw (INW,sp),x 
      00178C CD 07 EF         [ 4] 4103 	call next_token 
      00178F A1 06            [ 1] 4104 	cp a,#TK_CMD 
      001791 27 03            [ 1] 4105 	jreq 1$
      001793 CC 07 09         [ 2] 4106 	jp syntax_error
      001796                       4107 1$:  
      001796 A3 17 9E         [ 2] 4108 	cpw x,#to 
      001799 27 03            [ 1] 4109 	jreq to
      00179B CC 07 09         [ 2] 4110 	jp syntax_error 
                                   4111 
                                   4112 ;-----------------------------------
                                   4113 ; BASIC: TO expr 
                                   4114 ; second part of FOR loop initilization
                                   4115 ; leave limit on dstack and set 
                                   4116 ; FTO bit in 'flags'
                                   4117 ;-----------------------------------
      00179E                       4118 to: ; { var_addr -- var_addr limit step }
      00179E 72 04 00 24 03   [ 2] 4119 	btjt flags,#FFOR,1$
      0017A3 CC 07 09         [ 2] 4120 	jp syntax_error
      0017A6 CD 13 0D         [ 4] 4121 1$: call relation  
      0017A9 A1 02            [ 1] 4122 	cp a,#TK_INTGR 
      0017AB 27 03            [ 1] 4123 	jreq 2$ 
      0017AD CC 07 09         [ 2] 4124 	jp syntax_error
      0017B0                       4125 2$: 
      0017B0 CD 0F 9F         [ 4] 4126     call dpush ; limit
      0017B3 CE 00 00         [ 2] 4127 	ldw x,in.w 
      0017B6 CD 07 EF         [ 4] 4128 	call next_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0017B9 A1 00            [ 1] 4129 	cp a,#TK_NONE  
      0017BB 27 0C            [ 1] 4130 	jreq 4$ 
      0017BD A1 06            [ 1] 4131 	cp a,#TK_CMD
      0017BF 26 05            [ 1] 4132 	jrne 3$
      0017C1 A3 17 CE         [ 2] 4133 	cpw x,#step 
      0017C4 27 08            [ 1] 4134 	jreq step
      0017C6                       4135 3$:	
      0017C6 CD 0F 98         [ 4] 4136 	call unget_token   	 
      0017C9                       4137 4$:	
      0017C9 AE 00 01         [ 2] 4138 	ldw x,#1   ; default step  
      0017CC 20 12            [ 2] 4139 	jra store_loop_addr 
                                   4140 
                                   4141 
                                   4142 ;----------------------------------
                                   4143 ; BASIC: STEP expr 
                                   4144 ; optional third par of FOR loop
                                   4145 ; initialization. 	
                                   4146 ;------------------------------------
      0017CE                       4147 step: ; {var limit -- var limit step}
      0017CE 72 04 00 24 03   [ 2] 4148 	btjt flags,#FFOR,1$
      0017D3 CC 07 09         [ 2] 4149 	jp syntax_error
      0017D6 CD 13 0D         [ 4] 4150 1$: call relation
      0017D9 A1 02            [ 1] 4151 	cp a,#TK_INTGR
      0017DB 27 03            [ 1] 4152 	jreq store_loop_addr  
      0017DD CC 07 09         [ 2] 4153 	jp syntax_error
                                   4154 ; leave loop back entry point on cstack 
                                   4155 ; cstack is 2 call deep from interp_loop
      0017E0                       4156 store_loop_addr:
      0017E0 CD 0F 9F         [ 4] 4157 	call dpush 
      0017E3 CE 00 03         [ 2] 4158 	ldw x,basicptr  
      0017E6 1F 05            [ 2] 4159 	ldw (BPTR,sp),x 
      0017E8 CE 00 00         [ 2] 4160 	ldw x,in.w 
      0017EB 1F 03            [ 2] 4161 	ldw (INW,sp),x   
      0017ED 72 15 00 24      [ 1] 4162 	bres flags,#FFOR 
      0017F1 72 5C 00 1F      [ 1] 4163 	inc loop_depth  
      0017F5 81               [ 4] 4164 	ret 
                                   4165 
                                   4166 ;--------------------------------
                                   4167 ; BASIC: NEXT var 
                                   4168 ; FOR loop control 
                                   4169 ; increment variable with step 
                                   4170 ; and compare with limit 
                                   4171 ; loop if threshold not crossed.
                                   4172 ; else clean both stacks. 
                                   4173 ; and decrement 'loop_depth' 
                                   4174 ;--------------------------------
      0017F6                       4175 next: ; {var limit step -- [var limit step ] }
      0017F6 72 5D 00 1F      [ 1] 4176 	tnz loop_depth 
      0017FA 26 03            [ 1] 4177 	jrne 1$ 
      0017FC CC 07 09         [ 2] 4178 	jp syntax_error 
      0017FF                       4179 1$: 
      0017FF A6 03            [ 1] 4180 	ld a,#TK_VAR 
      001801 CD 11 C2         [ 4] 4181 	call expect
                                   4182 ; check for good variable after NEXT 	 
      001804 90 93            [ 1] 4183 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001806 AE 00 04         [ 2] 4184 	ldw x,#4  
      001809 72 D3 00 19      [ 4] 4185 	cpw y,([dstkptr],x) ; compare variables address 
      00180D 27 03            [ 1] 4186 	jreq 2$  
      00180F CC 07 09         [ 2] 4187 	jp syntax_error ; not the good one 
      001812                       4188 2$: ; increment variable 
      001812 93               [ 1] 4189 	ldw x,y
      001813 FE               [ 2] 4190 	ldw x,(x)  ; get var value 
      001814 CF 00 09         [ 2] 4191 	ldw acc16,x 
      001817 72 CE 00 19      [ 5] 4192 	ldw x,[dstkptr] ; step
      00181B 72 BB 00 09      [ 2] 4193 	addw x,acc16 ; var+step 
      00181F 90 FF            [ 2] 4194 	ldw (y),x ; save var new value 
                                   4195 ; compare with limit 
      001821 90 93            [ 1] 4196 	ldw y,x 
      001823 72 CE 00 19      [ 5] 4197 	ldw x,[dstkptr] ; step in x 
      001827 5D               [ 2] 4198 	tnzw x  
      001828 2A 0B            [ 1] 4199 	jrpl 4$ ; positive step 
                                   4200 ;negative step 
      00182A AE 00 02         [ 2] 4201 	ldw x,#2
      00182D 72 D3 00 19      [ 4] 4202 	cpw y,([dstkptr],x)
      001831 2F 24            [ 1] 4203 	jrslt loop_done
      001833 20 09            [ 2] 4204 	jra loop_back 
      001835                       4205 4$: ; positive step
      001835 AE 00 02         [ 2] 4206 	ldw x,#2 
      001838 72 D3 00 19      [ 4] 4207 	cpw y,([dstkptr],x)
      00183C 2C 19            [ 1] 4208 	jrsgt loop_done
      00183E                       4209 loop_back:
      00183E 1E 05            [ 2] 4210 	ldw x,(BPTR,sp)
      001840 CF 00 03         [ 2] 4211 	ldw basicptr,x 
      001843 72 01 00 24 09   [ 2] 4212 	btjf flags,#FRUN,1$ 
      001848 E6 02            [ 1] 4213 	ld a,(2,x)
      00184A C7 00 02         [ 1] 4214 	ld count,a
      00184D FE               [ 2] 4215 	ldw x,(x)
      00184E CF 00 05         [ 2] 4216 	ldw lineno,x
      001851 1E 03            [ 2] 4217 1$:	ldw x,(INW,sp)
      001853 CF 00 00         [ 2] 4218 	ldw in.w,x 
      001856 81               [ 4] 4219 	ret 
      001857                       4220 loop_done:
                                   4221 	; remove var limit step on dstack 
      001857 CE 00 19         [ 2] 4222 	ldw x,dstkptr 
      00185A 1C 00 06         [ 2] 4223 	addw x,#3*CELL_SIZE
      00185D CF 00 19         [ 2] 4224 	ldw dstkptr,x 
                                   4225 	; remove 2 return address on cstack 
      001860 85               [ 2] 4226 	popw x
      001861                       4227 	_drop 4
      001861 5B 04            [ 2]    1     addw sp,#4 
      001863 89               [ 2] 4228 	pushw x 
      001864 72 5A 00 1F      [ 1] 4229 	dec loop_depth 
      001868 81               [ 4] 4230 	ret 
                                   4231 
                                   4232 
                                   4233 ;------------------------
                                   4234 ; BASIC: GOTO lineno 
                                   4235 ; jump to lineno 
                                   4236 ; here cstack is 2 call deep from interp_loop 
                                   4237 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001869                       4238 goto:
      001869 72 00 00 24 06   [ 2] 4239 	btjt flags,#FRUN,0$ 
      00186E A6 06            [ 1] 4240 	ld a,#ERR_RUN_ONLY
      001870 CC 07 0B         [ 2] 4241 	jp tb_error 
      001873 81               [ 4] 4242 	ret 
      001874 20 23            [ 2] 4243 0$:	jra go_common
                                   4244 
                                   4245 ;--------------------
                                   4246 ; BASIC: GOSUB lineno
                                   4247 ; basic subroutine call
                                   4248 ; actual lineno and basicptr 
                                   4249 ; are saved on cstack
                                   4250 ; here cstack is 2 call deep from interp_loop 
                                   4251 ;--------------------
                           000003  4252 	GOS_RET=3
      001876                       4253 gosub:
      001876 72 00 00 24 06   [ 2] 4254 	btjt flags,#FRUN,0$ 
      00187B A6 06            [ 1] 4255 	ld a,#ERR_RUN_ONLY
      00187D CC 07 0B         [ 2] 4256 	jp tb_error 
      001880 81               [ 4] 4257 	ret 
      001881 85               [ 2] 4258 0$:	popw x 
      001882 52 02            [ 2] 4259 	sub sp,#2 
      001884 89               [ 2] 4260 	pushw x 
      001885 CE 00 03         [ 2] 4261 	ldw x,basicptr
      001888 E6 02            [ 1] 4262 	ld a,(2,x)
      00188A AB 03            [ 1] 4263 	add a,#3 
      00188C C7 00 0A         [ 1] 4264 	ld acc8,a 
      00188F 72 5F 00 09      [ 1] 4265 	clr acc16 
      001893 72 BB 00 09      [ 2] 4266 	addw x,acc16
      001897 1F 03            [ 2] 4267 	ldw (GOS_RET,sp),x 
      001899                       4268 go_common: 
      001899 CD 13 0D         [ 4] 4269 	call relation 
      00189C A1 02            [ 1] 4270 	cp a,#TK_INTGR
      00189E 27 03            [ 1] 4271 	jreq 1$ 
      0018A0 CC 07 09         [ 2] 4272 	jp syntax_error
      0018A3                       4273 1$: 
      0018A3 CD 02 E0         [ 4] 4274 	call search_lineno  
      0018A6 5D               [ 2] 4275 	tnzw x 
      0018A7 26 05            [ 1] 4276 	jrne 2$ 
      0018A9 A6 05            [ 1] 4277 	ld a,#ERR_NO_LINE 
      0018AB CC 07 0B         [ 2] 4278 	jp tb_error 
      0018AE                       4279 2$: 
      0018AE CF 00 03         [ 2] 4280 	ldw basicptr,x 
      0018B1 E6 02            [ 1] 4281 	ld a,(2,x)
      0018B3 C7 00 02         [ 1] 4282 	ld count,a 
      0018B6 FE               [ 2] 4283 	ldw x,(x)
      0018B7 CF 00 05         [ 2] 4284 	ldw lineno,x 
      0018BA 35 03 00 01      [ 1] 4285 	mov in,#3 
      0018BE 81               [ 4] 4286 	ret 
                                   4287 
                                   4288 ;------------------------
                                   4289 ; BASIC: RETURN 
                                   4290 ; exit from a subroutine 
                                   4291 ; cstack is 2 level deep from interp_loop 
                                   4292 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0018BF                       4293 return:
      0018BF 72 00 00 24 05   [ 2] 4294 	btjt flags,#FRUN,0$ 
      0018C4 A6 06            [ 1] 4295 	ld a,#ERR_RUN_ONLY
      0018C6 CC 07 0B         [ 2] 4296 	jp tb_error 
      0018C9                       4297 0$:	
      0018C9 1E 03            [ 2] 4298 	ldw x,(GOS_RET,sp) 
      0018CB CF 00 03         [ 2] 4299 	ldw basicptr,x 
      0018CE E6 02            [ 1] 4300 	ld a,(2,x)
      0018D0 AB 03            [ 1] 4301 	add a,#3 
      0018D2 C7 00 02         [ 1] 4302 	ld count,a 
      0018D5 35 03 00 01      [ 1] 4303 	mov in,#3
      0018D9 FE               [ 2] 4304 	ldw x,(x)
      0018DA CF 00 05         [ 2] 4305 	ldw lineno,x 
      0018DD 4F               [ 1] 4306 	clr a 
      0018DE 85               [ 2] 4307 	popw x 
      0018DF                       4308 	_drop 2
      0018DF 5B 02            [ 2]    1     addw sp,#2 
      0018E1 89               [ 2] 4309 	pushw x
      0018E2 81               [ 4] 4310 	ret  
                                   4311 
                                   4312 
                                   4313 ;----------------------------------
                                   4314 ; BASIC: RUN
                                   4315 ; run BASIC program in RAM
                                   4316 ;----------------------------------- 
      0018E3                       4317 run: 
      0018E3 72 01 00 24 02   [ 2] 4318 	btjf flags,#FRUN,0$  
      0018E8 4F               [ 1] 4319 	clr a 
      0018E9 81               [ 4] 4320 	ret
      0018EA                       4321 0$: 
      0018EA 72 09 00 24 12   [ 2] 4322 	btjf flags,#FBREAK,1$
      0018EF                       4323 	_drop 2 
      0018EF 5B 02            [ 2]    1     addw sp,#2 
      0018F1 CD 16 39         [ 4] 4324 	call rest_context
      0018F4                       4325 	_drop CTXT_SIZE 
      0018F4 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      0018F6 72 19 00 24      [ 1] 4326 	bres flags,#FBREAK 
      0018FA 72 10 00 24      [ 1] 4327 	bset flags,#FRUN 
      0018FE CC 07 BF         [ 2] 4328 	jp interp_loop 
      001901 CE 00 1B         [ 2] 4329 1$:	ldw x,txtbgn
      001904 C3 00 1D         [ 2] 4330 	cpw x,txtend 
      001907 2B 02            [ 1] 4331 	jrmi 2$ 
      001909 4F               [ 1] 4332 	clr a 
      00190A 81               [ 4] 4333 	ret 
      00190B CD 13 88         [ 4] 4334 2$: call ubound 
      00190E                       4335 	_drop 2 
      00190E 5B 02            [ 2]    1     addw sp,#2 
      001910 CE 00 1B         [ 2] 4336 	ldw x,txtbgn 
      001913 CF 00 03         [ 2] 4337 	ldw basicptr,x 
      001916 E6 02            [ 1] 4338 	ld a,(2,x)
      001918 C7 00 02         [ 1] 4339 	ld count,a
      00191B FE               [ 2] 4340 	ldw x,(x)
      00191C CF 00 05         [ 2] 4341 	ldw lineno,x
      00191F 35 03 00 01      [ 1] 4342 	mov in,#3	
      001923 72 10 00 24      [ 1] 4343 	bset flags,#FRUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001927 CC 07 BF         [ 2] 4344 	jp interp_loop 
                                   4345 
                                   4346 
                                   4347 ;----------------------
                                   4348 ; BASIC: STOP 
                                   4349 ; stop running program
                                   4350 ;---------------------- 
      00192A                       4351 stop: 
                                   4352 ; clean dstack and cstack 
      00192A AE 17 FF         [ 2] 4353 	ldw x,#STACK_EMPTY 
      00192D 94               [ 1] 4354 	ldw sp,x 
      00192E 72 11 00 24      [ 1] 4355 	bres flags,#FRUN 
      001932 72 19 00 24      [ 1] 4356 	bres flags,#FBREAK
      001936 CC 07 5B         [ 2] 4357 	jp warm_start
                                   4358 
                                   4359 ;-----------------------
                                   4360 ; BASIC BEEP expr1,expr2
                                   4361 ; used MCU internal beeper 
                                   4362 ; to produce a sound
                                   4363 ; arguments:
                                   4364 ;    expr1   frequency, {1,2,4} mapping to 1K,2K,4K
                                   4365 ;    expr2   duration msec.
                                   4366 ;---------------------------
      001939                       4367 beep:
      001939 CD 11 CF         [ 4] 4368 	call arg_list 
      00193C A1 02            [ 1] 4369 	cp a,#2 
      00193E 27 03            [ 1] 4370 	jreq 2$
      001940 CC 07 09         [ 2] 4371 	jp syntax_error 
      001943 CE 00 19         [ 2] 4372 2$: ldw x,dstkptr 
      001946 EE 02            [ 2] 4373 	ldw x,(2,x);frequency 
      001948 9F               [ 1] 4374 	ld a,xl
      001949 4A               [ 1] 4375 	dec a 
      00194A 4E               [ 1] 4376 	swap a 
      00194B 48               [ 1] 4377 	sll a 
      00194C 48               [ 1] 4378 	sll a 
      00194D AB 3E            [ 1] 4379 	add a,#0x3e 
      00194F C7 50 F3         [ 1] 4380 	ld BEEP_CSR,a 
      001952 CD 0F AC         [ 4] 4381 	call dpop 
      001955 CD 1E 3B         [ 4] 4382 	call pause02 
      001958 CD 0F D3         [ 4] 4383 	call ddrop 
      00195B A6 1F            [ 1] 4384 	ld a,#0x1f
      00195D C7 50 F3         [ 1] 4385 	ld BEEP_CSR,a 
      001960 81               [ 4] 4386 	ret 
                                   4387 
                                   4388 ;-------------------------------
                                   4389 ; BASIC: PWRADC 0|1,divisor  
                                   4390 ; disable/enanble ADC 
                                   4391 ;-------------------------------
      001961                       4392 power_adc:
      001961 CD 11 CF         [ 4] 4393 	call arg_list 
      001964 A1 02            [ 1] 4394 	cp a,#2	
      001966 27 03            [ 1] 4395 	jreq 1$
      001968 CC 07 09         [ 2] 4396 	jp syntax_error 
      00196B AE 00 02         [ 2] 4397 1$: ldw x,#2
      00196E 72 DE 00 19      [ 5] 4398 	ldw x,([dstkptr],x) ; on|off
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001972 5D               [ 2] 4399 	tnzw x 
      001973 27 1C            [ 1] 4400 	jreq 2$ 
      001975 72 CE 00 19      [ 5] 4401 	ldw x,[dstkptr] ; channel
      001979 9F               [ 1] 4402 	ld a,xl
      00197A A4 07            [ 1] 4403 	and a,#7
      00197C 4E               [ 1] 4404 	swap a 
      00197D C7 54 01         [ 1] 4405 	ld ADC_CR1,a
      001980 72 16 54 02      [ 1] 4406 	bset ADC_CR2,#ADC_CR2_ALIGN ; right 
      001984 72 10 54 01      [ 1] 4407 	bset ADC_CR1,#ADC_CR1_ADON 
      001988                       4408 	_usec_dly 7 
      001988 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00198B 5A               [ 2]    2     decw x
      00198C 9D               [ 1]    3     nop 
      00198D 26 FA            [ 1]    4     jrne .-4
      00198F 20 04            [ 2] 4409 	jra 3$
      001991 72 11 54 01      [ 1] 4410 2$: bres ADC_CR1,#ADC_CR1_ADON 
      001995 AE 00 02         [ 2] 4411 3$:	ldw x,#2
      001998 CD 10 10         [ 4] 4412 	call ddrop_n 
      00199B 81               [ 4] 4413 	ret
                                   4414 
                                   4415 ;-----------------------------
                                   4416 ; BASIC: RDADC(channel)
                                   4417 ; read adc channel 
                                   4418 ; output:
                                   4419 ;   A 		TK_INTGR 
                                   4420 ;   X 		value 
                                   4421 ;-----------------------------
      00199C                       4422 read_adc:
      00199C A6 09            [ 1] 4423 	ld a,#TK_LPAREN 
      00199E CD 11 C2         [ 4] 4424 	call expect 
      0019A1 CD 07 EF         [ 4] 4425 	call next_token 
      0019A4 A1 02            [ 1] 4426 	cp a,#TK_INTGR 
      0019A6 27 03            [ 1] 4427 	jreq 1$
      0019A8 CC 07 09         [ 2] 4428 	jp syntax_error
      0019AB 89               [ 2] 4429 1$: pushw x 
      0019AC A6 0A            [ 1] 4430 	ld a,#TK_RPAREN 
      0019AE CD 11 C2         [ 4] 4431 	call expect 
      0019B1 85               [ 2] 4432 	popw x 
      0019B2 A3 00 10         [ 2] 4433 	cpw x,#16 
      0019B5 25 05            [ 1] 4434 	jrult 2$
      0019B7 A6 0A            [ 1] 4435 	ld a,#ERR_BAD_VALUE
      0019B9 CC 07 0B         [ 2] 4436 	jp tb_error 
      0019BC 9F               [ 1] 4437 2$: ld a,xl
      0019BD C7 54 00         [ 1] 4438 	ld ADC_CSR,a 
      0019C0 72 10 54 01      [ 1] 4439 	bset ADC_CR1,#ADC_CR1_ADON
      0019C4 72 0F 54 00 FB   [ 2] 4440 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0019C9 CE 54 04         [ 2] 4441 	ldw x,ADC_DRH 
      0019CC A6 02            [ 1] 4442 	ld a,#TK_INTGR
      0019CE 81               [ 4] 4443 	ret 
                                   4444 
                                   4445 
                                   4446 ;-----------------------
                                   4447 ; BASIC: BREAK 
                                   4448 ; insert a breakpoint 
                                   4449 ; in pogram. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4450 ; the program is resumed
                                   4451 ; with RUN 
                                   4452 ;-------------------------
      0019CF                       4453 break:
      0019CF 72 00 00 24 02   [ 2] 4454 	btjt flags,#FRUN,2$
      0019D4 4F               [ 1] 4455 	clr a
      0019D5 81               [ 4] 4456 	ret 
      0019D6                       4457 2$:	 
                                   4458 ; create space on cstack to save context 
      0019D6 AE 1A 00         [ 2] 4459 	ldw x,#break_point 
      0019D9 CD 01 B0         [ 4] 4460 	call puts 
      0019DC                       4461 	_drop 2 ;drop return address 
      0019DC 5B 02            [ 2]    1     addw sp,#2 
      0019DE                       4462 	_vars CTXT_SIZE ; context size 
      0019DE 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      0019E0 CD 16 24         [ 4] 4463 	call save_context 
      0019E3 AE 16 C8         [ 2] 4464 	ldw x,#tib 
      0019E6 CF 00 03         [ 2] 4465 	ldw basicptr,x
      0019E9 7F               [ 1] 4466 	clr (x)
      0019EA 72 5F 00 02      [ 1] 4467 	clr count  
      0019EE 5F               [ 1] 4468 	clrw x 
      0019EF CF 00 05         [ 2] 4469 	ldw lineno,x 
      0019F2 CF 00 00         [ 2] 4470 	ldw in.w,x
      0019F5 72 11 00 24      [ 1] 4471 	bres flags,#FRUN 
      0019F9 72 18 00 24      [ 1] 4472 	bset flags,#FBREAK
      0019FD CC 07 BF         [ 2] 4473 	jp interp_loop 
      001A00 0A 62 72 65 61 6B 20  4474 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4475 
                                   4476 ;-----------------------
                                   4477 ; BASIC: NEW
                                   4478 ; from command line only 
                                   4479 ; free program memory
                                   4480 ; and clear variables 
                                   4481 ;------------------------
      001A1E                       4482 new: 
      001A1E 72 01 00 24 02   [ 2] 4483 	btjf flags,#FRUN,0$ 
      001A23 4F               [ 1] 4484 	clr a 
      001A24 81               [ 4] 4485 	ret 
      001A25                       4486 0$:	
      001A25 CD 05 D7         [ 4] 4487 	call clear_basic 
      001A28 81               [ 4] 4488 	ret 
                                   4489 	 
                                   4490 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4491 ;   file system routines
                                   4492 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4493 
                                   4494 ;--------------------
                                   4495 ; input:
                                   4496 ;   X     increment 
                                   4497 ; output:
                                   4498 ;   farptr  incremented 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4499 ;---------------------
      001A29                       4500 incr_farptr:
      001A29 72 BB 00 14      [ 2] 4501 	addw x,farptr+1 
      001A2D 24 04            [ 1] 4502 	jrnc 1$
      001A2F 72 5C 00 13      [ 1] 4503 	inc farptr 
      001A33 CF 00 14         [ 2] 4504 1$:	ldw farptr+1,x  
      001A36 81               [ 4] 4505 	ret 
                                   4506 
                                   4507 ;------------------------------
                                   4508 ; extended flash memory used as FLASH_DRIVE 
                                   4509 ; seek end of used flash drive   
                                   4510 ; starting at 0x10000 address.
                                   4511 ; 4 consecutives 0 bytes signal free space. 
                                   4512 ; input:
                                   4513 ;	none
                                   4514 ; output:
                                   4515 ;   ffree     free_addr| 0 if memory full.
                                   4516 ;------------------------------
      001A37                       4517 seek_fdrive:
      001A37 A6 01            [ 1] 4518 	ld a,#1
      001A39 C7 00 13         [ 1] 4519 	ld farptr,a 
      001A3C 5F               [ 1] 4520 	clrw x 
      001A3D CF 00 14         [ 2] 4521 	ldw farptr+1,x 
      001A40                       4522 1$:
      001A40 5F               [ 1] 4523 	clrw x 
      001A41 92 AF 00 13      [ 5] 4524 	ldf a,([farptr],x) 
      001A45 26 15            [ 1] 4525 	jrne 2$
      001A47 5C               [ 1] 4526 	incw x 
      001A48 92 AF 00 13      [ 5] 4527 	ldf a,([farptr],x)
      001A4C 26 0E            [ 1] 4528 	jrne 2$ 
      001A4E 5C               [ 1] 4529 	incw x 
      001A4F 92 AF 00 13      [ 5] 4530 	ldf a,([farptr],x)
      001A53 26 07            [ 1] 4531 	jrne 2$ 
      001A55 5C               [ 1] 4532 	incw x 
      001A56 92 AF 00 13      [ 5] 4533 	ldf a,([farptr],x)
      001A5A 27 28            [ 1] 4534 	jreq 4$ 
      001A5C                       4535 2$: 
      001A5C 1C 00 01         [ 2] 4536 	addw x,#1
      001A5F CD 1A 29         [ 4] 4537 	call incr_farptr
      001A62 AE 02 7F         [ 2] 4538 	ldw x,#0x27f 
      001A65 C3 00 13         [ 2] 4539 	cpw x,farptr
      001A68 2A D6            [ 1] 4540 	jrpl 1$
      001A6A 72 5F 00 16      [ 1] 4541 	clr ffree 
      001A6E 72 5F 00 17      [ 1] 4542 	clr ffree+1 
      001A72 72 5F 00 18      [ 1] 4543 	clr ffree+2 
      001A76 72 5F 00 08      [ 1] 4544 	clr acc24 
      001A7A 72 5F 00 09      [ 1] 4545 	clr acc16
      001A7E 72 5F 00 0A      [ 1] 4546 	clr acc8 
      001A82 20 1A            [ 2] 4547 	jra 5$
      001A84                       4548 4$: ; copy farptr to ffree	 
      001A84 CE 00 14         [ 2] 4549 	ldw x,farptr+1 
      001A87 A3 00 00         [ 2] 4550 	cpw x,#fdrive 
      001A8A 27 06            [ 1] 4551 	jreq 41$
                                   4552 	; there is a file, last 0 of that file must be skipped.
      001A8C AE 00 01         [ 2] 4553 	ldw x,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A8F CD 1A 29         [ 4] 4554 	call incr_farptr
      001A92                       4555 41$: 
      001A92 CE 00 13         [ 2] 4556 	ldw x,farptr 
      001A95 C6 00 15         [ 1] 4557 	ld a,farptr+2 
      001A98 CF 00 16         [ 2] 4558 	ldw ffree,x 
      001A9B C7 00 18         [ 1] 4559 	ld ffree+2,a  
      001A9E 81               [ 4] 4560 5$:	ret 
                                   4561 
                                   4562 ;-----------------------
                                   4563 ; compare file name 
                                   4564 ; with name pointed by Y  
                                   4565 ; input:
                                   4566 ;   farptr   file name 
                                   4567 ;   Y        target name 
                                   4568 ; output:
                                   4569 ;   farptr 	 at file_name
                                   4570 ;   X 		 farptr[x] point at size field  
                                   4571 ;   Carry    0|1 no match|match  
                                   4572 ;----------------------
      001A9F                       4573 cmp_name:
      001A9F 5F               [ 1] 4574 	clrw x
      001AA0 92 AF 00 13      [ 5] 4575 1$:	ldf a,([farptr],x)
      001AA4 90 F1            [ 1] 4576 	cp a,(y)
      001AA6 26 08            [ 1] 4577 	jrne 4$
      001AA8 4D               [ 1] 4578 	tnz a 
      001AA9 27 12            [ 1] 4579 	jreq 9$ 
      001AAB 5C               [ 1] 4580     incw x 
      001AAC 90 5C            [ 1] 4581 	incw y 
      001AAE 20 F0            [ 2] 4582 	jra 1$
      001AB0                       4583 4$: ;no match 
      001AB0 4D               [ 1] 4584 	tnz a 
      001AB1 27 07            [ 1] 4585 	jreq 5$
      001AB3 5C               [ 1] 4586 	incw x 
      001AB4 92 AF 00 13      [ 5] 4587 	ldf a,([farptr],x)
      001AB8 20 F6            [ 2] 4588 	jra 4$  
      001ABA 5C               [ 1] 4589 5$:	incw x ; farptr[x] point at 'size' field 
      001ABB 98               [ 1] 4590 	rcf 
      001ABC 81               [ 4] 4591 	ret
      001ABD                       4592 9$: ; match  
      001ABD 5C               [ 1] 4593 	incw x  ; farptr[x] at 'size' field 
      001ABE 99               [ 1] 4594 	scf 
      001ABF 81               [ 4] 4595 	ret 
                                   4596 
                                   4597 ;-----------------------
                                   4598 ; search file in 
                                   4599 ; flash memory 
                                   4600 ; input:
                                   4601 ;   Y       file name  
                                   4602 ; output:
                                   4603 ;   farptr  addr at name|0
                                   4604 ;-----------------------
                           000001  4605 	FSIZE=1
                           000003  4606 	YSAVE=3
                           000004  4607 	VSIZE=4 
      001AC0                       4608 search_file: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001AC0                       4609 	_vars VSIZE
      001AC0 52 04            [ 2]    1     sub sp,#VSIZE 
      001AC2 17 03            [ 2] 4610 	ldw (YSAVE,sp),y  
      001AC4 5F               [ 1] 4611 	clrw x 
      001AC5 CF 00 14         [ 2] 4612 	ldw farptr+1,x 
      001AC8 35 01 00 13      [ 1] 4613 	mov farptr,#1
      001ACC                       4614 1$:	
                                   4615 ; check if farptr is after any file 
                                   4616 ; if  0 then so.
      001ACC 92 BC 00 13      [ 5] 4617 	ldf a,[farptr]
      001AD0 27 24            [ 1] 4618 	jreq 6$
      001AD2 5F               [ 1] 4619 2$: clrw x 	
      001AD3 16 03            [ 2] 4620 	ldw y,(YSAVE,sp) 
      001AD5 CD 1A 9F         [ 4] 4621 	call cmp_name
      001AD8 25 2C            [ 1] 4622 	jrc 9$
      001ADA 92 AF 00 13      [ 5] 4623 	ldf a,([farptr],x)
      001ADE 6B 01            [ 1] 4624 	ld (FSIZE,sp),a 
      001AE0 5C               [ 1] 4625 	incw x 
      001AE1 92 AF 00 13      [ 5] 4626 	ldf a,([farptr],x)
      001AE5 6B 02            [ 1] 4627 	ld (FSIZE+1,sp),a 
      001AE7 5C               [ 1] 4628 	incw x 
      001AE8 72 FB 01         [ 2] 4629 	addw x,(FSIZE,sp) ; count to skip 
      001AEB CD 1A 29         [ 4] 4630 	call incr_farptr ; now at next file 'name_field'
      001AEE AE 02 80         [ 2] 4631 	ldw x,#0x280
      001AF1 C3 00 13         [ 2] 4632 	cpw x,farptr 
      001AF4 2A D6            [ 1] 4633 	jrpl 1$
      001AF6                       4634 6$: ; file not found 
      001AF6 72 5F 00 13      [ 1] 4635 	clr farptr
      001AFA 72 5F 00 14      [ 1] 4636 	clr farptr+1 
      001AFE 72 5F 00 15      [ 1] 4637 	clr farptr+2 
      001B02                       4638 	_drop VSIZE 
      001B02 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B04 98               [ 1] 4639 	rcf
      001B05 81               [ 4] 4640 	ret
      001B06                       4641 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001B06                       4642 	_drop VSIZE 
      001B06 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B08 99               [ 1] 4643 	scf 	
      001B09 81               [ 4] 4644 	ret
                                   4645 
                                   4646 ;--------------------------------
                                   4647 ; BASIC: SAVE "name" 
                                   4648 ; save text program in 
                                   4649 ; flash memory used as 
                                   4650 ;--------------------------------
                           000001  4651 	BSIZE=1
                           000003  4652 	NAMEPTR=3
                           000004  4653 	VSIZE=4
      001B0A                       4654 save:
      001B0A 72 01 00 24 05   [ 2] 4655 	btjf flags,#FRUN,0$ 
      001B0F A6 07            [ 1] 4656 	ld a,#ERR_CMD_ONLY 
      001B11 CC 07 0B         [ 2] 4657 	jp tb_error
      001B14                       4658 0$:	 
      001B14 CE 00 1D         [ 2] 4659 	ldw x,txtend 
      001B17 72 B0 00 1B      [ 2] 4660 	subw x,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B1B 26 01            [ 1] 4661 	jrne 10$
                                   4662 ; nothing to save 
      001B1D 81               [ 4] 4663 	ret 
      001B1E                       4664 10$:	
      001B1E C6 00 16         [ 1] 4665 	ld a,ffree 
      001B21 CA 00 17         [ 1] 4666 	or a,ffree+1
      001B24 CA 00 18         [ 1] 4667 	or a,ffree+2 
      001B27 26 05            [ 1] 4668 	jrne 1$
      001B29 A6 01            [ 1] 4669 	ld a,#ERR_MEM_FULL
      001B2B CC 07 0B         [ 2] 4670 	jp tb_error 
      001B2E                       4671 1$:  
      001B2E CD 07 EF         [ 4] 4672 	call next_token	
      001B31 A1 08            [ 1] 4673 	cp a,#TK_QSTR
      001B33 27 03            [ 1] 4674 	jreq 2$
      001B35 CC 07 09         [ 2] 4675 	jp syntax_error
      001B38                       4676 2$: ; check for existing file of that name 
      001B38                       4677 	_vars VSIZE
      001B38 52 04            [ 2]    1     sub sp,#VSIZE 
      001B3A 90 CE 00 03      [ 2] 4678 	ldw y,basicptr 
      001B3E 72 B9 00 00      [ 2] 4679 	addw y,in.w
      001B42 17 03            [ 2] 4680 	ldw (NAMEPTR,sp),y  
      001B44 55 00 02 00 01   [ 1] 4681 	mov in,count 
      001B49 CD 1A C0         [ 4] 4682 	call search_file 
      001B4C 24 05            [ 1] 4683 	jrnc 3$ 
      001B4E A6 08            [ 1] 4684 	ld a,#ERR_DUPLICATE 
      001B50 CC 07 0B         [ 2] 4685 	jp tb_error 
      001B53                       4686 3$:	;** write file name to flash **
      001B53 CE 00 16         [ 2] 4687 	ldw x,ffree 
      001B56 C6 00 18         [ 1] 4688 	ld a,ffree+2 
      001B59 CF 00 13         [ 2] 4689 	ldw farptr,x 
      001B5C C7 00 15         [ 1] 4690 	ld farptr+2,a 
      001B5F 1E 03            [ 2] 4691 	ldw x,(NAMEPTR,sp)  
      001B61 CD 02 72         [ 4] 4692 	call strlen 
      001B64 5C               [ 1] 4693 	incw  x
      001B65 1F 01            [ 2] 4694 	ldw (BSIZE,sp),x  
      001B67 5F               [ 1] 4695 	clrw x   
      001B68 16 03            [ 2] 4696 	ldw y,(NAMEPTR,sp)
      001B6A CD 01 51         [ 4] 4697 	call write_block  
                                   4698 ;** write file length after name **
      001B6D CE 00 1D         [ 2] 4699 	ldw x,txtend 
      001B70 72 B0 00 1B      [ 2] 4700 	subw x,txtbgn
      001B74 1F 01            [ 2] 4701 	ldw (BSIZE,sp),x 
      001B76 5F               [ 1] 4702 	clrw x 
      001B77 7B 01            [ 1] 4703 	ld a,(1,sp)
      001B79 CD 00 DC         [ 4] 4704 	call write_byte 
      001B7C 5C               [ 1] 4705 	incw x 
      001B7D 7B 02            [ 1] 4706 	ld a,(2,sp)
      001B7F CD 00 DC         [ 4] 4707 	call write_byte
      001B82 5C               [ 1] 4708 	incw x  
      001B83 CD 1A 29         [ 4] 4709 	call incr_farptr ; move farptr after SIZE field 
                                   4710 ;** write BASIC text **
                                   4711 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001B86 1E 01            [ 2] 4712 	ldw x,(BSIZE,sp)
      001B88 89               [ 2] 4713 	pushw x 
      001B89 5F               [ 1] 4714 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B8A 90 CE 00 1B      [ 2] 4715 	ldw y,txtbgn  ; BASIC text to save 
      001B8E CD 01 51         [ 4] 4716 	call write_block 
      001B91                       4717 	_drop 2 ;  drop BSIZE copy 
      001B91 5B 02            [ 2]    1     addw sp,#2 
                                   4718 ; save farptr in ffree
      001B93 CE 00 13         [ 2] 4719 	ldw x,farptr 
      001B96 C6 00 15         [ 1] 4720 	ld a,farptr+2 
      001B99 CF 00 16         [ 2] 4721 	ldw ffree,x 
      001B9C C7 00 18         [ 1] 4722 	ld ffree+2,a
                                   4723 ; write 4 zero bytes as a safe gard 
      001B9F 5F               [ 1] 4724     clrw x 
      001BA0 4B 04            [ 1] 4725 	push #4 
      001BA2 0D 01            [ 1] 4726 4$:	tnz (1,sp)
      001BA4 27 09            [ 1] 4727 	jreq 5$
      001BA6 4F               [ 1] 4728 	clr a 
      001BA7 CD 00 DC         [ 4] 4729 	call write_byte 
      001BAA 5C               [ 1] 4730 	incw x 
      001BAB 0A 01            [ 1] 4731 	dec (1,sp)
      001BAD 20 F3            [ 2] 4732 	jra 4$
      001BAF 84               [ 1] 4733 5$: pop a 
                                   4734 ; display saved size  
      001BB0 1E 01            [ 2] 4735 	ldw x,(BSIZE,sp) 
      001BB2 CD 09 81         [ 4] 4736 	call print_int 
      001BB5                       4737 	_drop VSIZE 
      001BB5 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BB7 81               [ 4] 4738 	ret 
                                   4739 
                                   4740 
                                   4741 ;------------------------
                                   4742 ; BASIC: LOAD "file" 
                                   4743 ; load file to RAM 
                                   4744 ; for execution 
                                   4745 ;------------------------
      001BB8                       4746 load:
      001BB8 72 01 00 24 07   [ 2] 4747 	btjf flags,#FRUN,0$ 
      001BBD 27 05            [ 1] 4748 	jreq 0$ 
      001BBF A6 07            [ 1] 4749 	ld a,#ERR_CMD_ONLY 
      001BC1 CC 07 0B         [ 2] 4750 	jp tb_error 
      001BC4                       4751 0$:	
      001BC4 CD 07 EF         [ 4] 4752 	call next_token 
      001BC7 A1 08            [ 1] 4753 	cp a,#TK_QSTR
      001BC9 27 03            [ 1] 4754 	jreq 1$
      001BCB CC 07 09         [ 2] 4755 	jp syntax_error 
      001BCE                       4756 1$:	
      001BCE 90 CE 00 03      [ 2] 4757 	ldw y,basicptr
      001BD2 72 B9 00 00      [ 2] 4758 	addw y,in.w 
      001BD6 55 00 02 00 01   [ 1] 4759 	mov in,count 
      001BDB CD 1A C0         [ 4] 4760 	call search_file 
      001BDE 25 05            [ 1] 4761 	jrc 2$ 
      001BE0 A6 09            [ 1] 4762 	ld a,#ERR_NOT_FILE
      001BE2 CC 07 0B         [ 2] 4763 	jp tb_error  
      001BE5                       4764 2$:	
      001BE5 CD 1A 29         [ 4] 4765 	call incr_farptr  
      001BE8 CD 05 D7         [ 4] 4766 	call clear_basic  
      001BEB 5F               [ 1] 4767 	clrw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001BEC 92 AF 00 13      [ 5] 4768 	ldf a,([farptr],x)
      001BF0 90 95            [ 1] 4769 	ld yh,a 
      001BF2 5C               [ 1] 4770 	incw x  
      001BF3 92 AF 00 13      [ 5] 4771 	ldf a,([farptr],x)
      001BF7 5C               [ 1] 4772 	incw x 
      001BF8 90 97            [ 1] 4773 	ld yl,a 
      001BFA 72 B9 00 1B      [ 2] 4774 	addw y,txtbgn
      001BFE 90 CF 00 1D      [ 2] 4775 	ldw txtend,y
      001C02 90 CE 00 1B      [ 2] 4776 	ldw y,txtbgn
      001C06                       4777 3$:	; load BASIC text 	
      001C06 92 AF 00 13      [ 5] 4778 	ldf a,([farptr],x)
      001C0A 90 F7            [ 1] 4779 	ld (y),a 
      001C0C 5C               [ 1] 4780 	incw x 
      001C0D 90 5C            [ 1] 4781 	incw y 
      001C0F 90 C3 00 1D      [ 2] 4782 	cpw y,txtend 
      001C13 2B F1            [ 1] 4783 	jrmi 3$
                                   4784 ; return loaded size 	 
      001C15 CE 00 1D         [ 2] 4785 	ldw x,txtend 
      001C18 72 B0 00 1B      [ 2] 4786 	subw x,txtbgn
      001C1C CD 09 81         [ 4] 4787 	call print_int 
      001C1F 81               [ 4] 4788 	ret 
                                   4789 
                                   4790 ;-----------------------------------
                                   4791 ; BASIC: FORGET ["file_name"] 
                                   4792 ; erase file_name and all others 
                                   4793 ; after it. 
                                   4794 ; without argument erase all files 
                                   4795 ;-----------------------------------
      001C20                       4796 forget:
      001C20 CD 07 EF         [ 4] 4797 	call next_token 
      001C23 A1 00            [ 1] 4798 	cp a,#TK_NONE 
      001C25 27 26            [ 1] 4799 	jreq 3$ 
      001C27 A1 08            [ 1] 4800 	cp a,#TK_QSTR
      001C29 27 03            [ 1] 4801 	jreq 1$
      001C2B CC 07 09         [ 2] 4802 	jp syntax_error
      001C2E 90 CE 00 03      [ 2] 4803 1$: ldw y,basicptr
      001C32 72 B9 00 00      [ 2] 4804 	addw y,in.w
      001C36 55 00 02 00 01   [ 1] 4805 	mov in,count 
      001C3B CD 1A C0         [ 4] 4806 	call search_file
      001C3E 25 05            [ 1] 4807 	jrc 2$
      001C40 A6 09            [ 1] 4808 	ld a,#ERR_NOT_FILE 
      001C42 CC 07 0B         [ 2] 4809 	jp tb_error 
      001C45                       4810 2$: 
      001C45 CE 00 13         [ 2] 4811 	ldw x,farptr
      001C48 C6 00 15         [ 1] 4812 	ld a,farptr+2
      001C4B 20 0A            [ 2] 4813 	jra 4$ 
      001C4D                       4814 3$: ; forget all files 
      001C4D AE 00 64         [ 2] 4815 	ldw x,#100
      001C50 4F               [ 1] 4816 	clr a 
      001C51 CF 00 13         [ 2] 4817 	ldw farptr,x 
      001C54 C7 00 15         [ 1] 4818 	ld farptr+2,a 
      001C57                       4819 4$:
      001C57 CF 00 16         [ 2] 4820 	ldw ffree,x 
      001C5A C7 00 18         [ 1] 4821 	ld ffree+2,a 
      001C5D 4B 04            [ 1] 4822 	push #4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C5F 5F               [ 1] 4823 	clrw x 
      001C60 0D 01            [ 1] 4824 5$: tnz (1,sp)
      001C62 27 09            [ 1] 4825 	jreq 6$ 
      001C64 4F               [ 1] 4826 	clr a  
      001C65 CD 00 DC         [ 4] 4827 	call write_byte 
      001C68 5C               [ 1] 4828 	incw x 
      001C69 0A 01            [ 1] 4829 	dec (1,sp)
      001C6B 20 F3            [ 2] 4830 	jra 5$	
      001C6D 84               [ 1] 4831 6$: pop a 
      001C6E 81               [ 4] 4832 	ret 
                                   4833 
                                   4834 ;----------------------
                                   4835 ; BASIC: DIR 
                                   4836 ; list saved files 
                                   4837 ;----------------------
                           000001  4838 	COUNT=1 ; files counter 
                           000002  4839 	VSIZE=2 
      001C6F                       4840 directory:
      001C6F                       4841 	_vars VSIZE 
      001C6F 52 02            [ 2]    1     sub sp,#VSIZE 
      001C71 5F               [ 1] 4842 	clrw x 
      001C72 1F 01            [ 2] 4843 	ldw (COUNT,sp),x 
      001C74 CF 00 14         [ 2] 4844 	ldw farptr+1,x 
      001C77 35 01 00 13      [ 1] 4845 	mov farptr,#1 
      001C7B                       4846 dir_loop:
      001C7B 5F               [ 1] 4847 	clrw x 
      001C7C 92 AF 00 13      [ 5] 4848 	ldf a,([farptr],x)
      001C80 27 38            [ 1] 4849 	jreq 8$ 
      001C82                       4850 1$: ;name loop 	
      001C82 92 AF 00 13      [ 5] 4851 	ldf a,([farptr],x)
      001C86 27 06            [ 1] 4852 	jreq 2$ 
      001C88 CD 01 9E         [ 4] 4853 	call putc 
      001C8B 5C               [ 1] 4854 	incw x 
      001C8C 20 F4            [ 2] 4855 	jra 1$
      001C8E 5C               [ 1] 4856 2$: incw x ; skip ending 0. 
      001C8F A6 20            [ 1] 4857 	ld a,#SPACE 
      001C91 CD 01 9E         [ 4] 4858 	call putc 
                                   4859 ; get file size 	
      001C94 92 AF 00 13      [ 5] 4860 	ldf a,([farptr],x)
      001C98 90 95            [ 1] 4861 	ld yh,a 
      001C9A 5C               [ 1] 4862 	incw x 
      001C9B 92 AF 00 13      [ 5] 4863 	ldf a,([farptr],x)
      001C9F 5C               [ 1] 4864 	incw x 
      001CA0 90 97            [ 1] 4865 	ld yl,a 
      001CA2 90 89            [ 2] 4866 	pushw y 
      001CA4 72 FB 01         [ 2] 4867 	addw x,(1,sp)
                                   4868 ; skip to next file 
      001CA7 CD 1A 29         [ 4] 4869 	call incr_farptr 
                                   4870 ; print file size 
      001CAA 85               [ 2] 4871 	popw x ; file size 
      001CAB CD 09 81         [ 4] 4872 	call print_int 
      001CAE A6 0D            [ 1] 4873 	ld a,#CR 
      001CB0 CD 01 9E         [ 4] 4874 	call putc
      001CB3 1E 01            [ 2] 4875 	ldw x,(COUNT,sp)
      001CB5 5C               [ 1] 4876 	incw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001CB6 1F 01            [ 2] 4877 	ldw (COUNT,sp),x  
      001CB8 20 C1            [ 2] 4878 	jra dir_loop 
      001CBA                       4879 8$: ; print number of files 
      001CBA 1E 01            [ 2] 4880 	ldw x,(COUNT,sp)
      001CBC CD 09 81         [ 4] 4881 	call print_int 
      001CBF AE 1C EF         [ 2] 4882 	ldw x,#file_count 
      001CC2 CD 01 B0         [ 4] 4883 	call puts  
                                   4884 ; print drive free space 	
      001CC5 A6 FF            [ 1] 4885 	ld a,#0xff 
      001CC7 C0 00 18         [ 1] 4886 	sub a,ffree+2 
      001CCA C7 00 0A         [ 1] 4887 	ld acc8,a 
      001CCD A6 7F            [ 1] 4888 	ld a,#0x7f 
      001CCF C2 00 17         [ 1] 4889 	sbc a,ffree+1 
      001CD2 C7 00 09         [ 1] 4890 	ld acc16,a 
      001CD5 A6 02            [ 1] 4891 	ld a,#2 
      001CD7 C2 00 16         [ 1] 4892 	sbc a,ffree 
      001CDA C7 00 08         [ 1] 4893 	ld acc24,a 
      001CDD 5F               [ 1] 4894 	clrw x  
      001CDE A6 06            [ 1] 4895 	ld a,#6 
      001CE0 97               [ 1] 4896 	ld xl,a 
      001CE1 A6 0A            [ 1] 4897 	ld a,#10 
      001CE3 CD 09 39         [ 4] 4898 	call prti24 
      001CE6 AE 1C F7         [ 2] 4899 	ldw x,#drive_free
      001CE9 CD 01 B0         [ 4] 4900 	call puts 
      001CEC                       4901 	_drop VSIZE 
      001CEC 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CEE 81               [ 4] 4902 	ret
      001CEF 20 66 69 6C 65 73 0A  4903 file_count: .asciz " files\n"
             00
      001CF7 20 62 79 74 65 73 20  4904 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4905 
                                   4906 ;---------------------
                                   4907 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4908 ; write 1 or more byte to FLASH or EEPROM
                                   4909 ; starting at address  
                                   4910 ; input:
                                   4911 ;   expr1  	is address 
                                   4912 ;   expr2   is byte to write
                                   4913 ; output:
                                   4914 ;   none 
                                   4915 ;---------------------
                           000001  4916 	ADDR=1
                           000002  4917 	VSIZ=2 
      001D04                       4918 write:
      001D04                       4919 	_vars VSIZE 
      001D04 52 02            [ 2]    1     sub sp,#VSIZE 
      001D06 72 5F 00 13      [ 1] 4920 	clr farptr ; expect 16 bits address 
      001D0A CD 12 C9         [ 4] 4921 	call expression
      001D0D A1 02            [ 1] 4922 	cp a,#TK_INTGR 
      001D0F 27 03            [ 1] 4923 	jreq 0$
      001D11 CC 07 09         [ 2] 4924 	jp syntax_error
      001D14 1F 01            [ 2] 4925 0$: ldw (ADDR,sp),x 
      001D16 CD 07 EF         [ 4] 4926 	call next_token 
      001D19 A1 0B            [ 1] 4927 	cp a,#TK_COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001D1B 27 02            [ 1] 4928 	jreq 1$ 
      001D1D 20 19            [ 2] 4929 	jra 9$ 
      001D1F CD 12 C9         [ 4] 4930 1$:	call expression
      001D22 A1 02            [ 1] 4931 	cp a,#TK_INTGR
      001D24 27 03            [ 1] 4932 	jreq 2$
      001D26 CC 07 09         [ 2] 4933 	jp syntax_error
      001D29 9F               [ 1] 4934 2$:	ld a,xl 
      001D2A 1E 01            [ 2] 4935 	ldw x,(ADDR,sp) 
      001D2C CF 00 14         [ 2] 4936 	ldw farptr+1,x 
      001D2F 5F               [ 1] 4937 	clrw x 
      001D30 CD 00 DC         [ 4] 4938 	call write_byte
      001D33 1E 01            [ 2] 4939 	ldw x,(ADDR,sp)
      001D35 5C               [ 1] 4940 	incw x 
      001D36 20 DC            [ 2] 4941 	jra 0$ 
      001D38                       4942 9$:
      001D38                       4943 	_drop VSIZE
      001D38 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D3A 81               [ 4] 4944 	ret 
                                   4945 
                                   4946 
                                   4947 ;---------------------
                                   4948 ;BASIC: CHAR(expr)
                                   4949 ; évaluate expression 
                                   4950 ; and take the 7 least 
                                   4951 ; bits as ASCII character
                                   4952 ;---------------------
      001D3B                       4953 char:
      001D3B A6 09            [ 1] 4954 	ld a,#TK_LPAREN 
      001D3D CD 11 C2         [ 4] 4955 	call expect 
      001D40 CD 13 0D         [ 4] 4956 	call relation 
      001D43 A1 02            [ 1] 4957 	cp a,#TK_INTGR 
      001D45 27 03            [ 1] 4958 	jreq 1$
      001D47 CC 07 09         [ 2] 4959 	jp syntax_error
      001D4A 89               [ 2] 4960 1$:	pushw x 
      001D4B A6 0A            [ 1] 4961 	ld a,#TK_RPAREN 
      001D4D CD 11 C2         [ 4] 4962 	call expect
      001D50 85               [ 2] 4963 	popw x  
      001D51 9F               [ 1] 4964 	ld a,xl 
      001D52 A4 7F            [ 1] 4965 	and a,#0x7f 
      001D54 97               [ 1] 4966 	ld xl,a
      001D55 A6 05            [ 1] 4967 	ld a,#TK_CHAR
      001D57 81               [ 4] 4968 	ret
                                   4969 
                                   4970 ;---------------------
                                   4971 ; BASIC: ASC(string|char)
                                   4972 ; extract first character 
                                   4973 ; of string argument 
                                   4974 ; return it as TK_INTGR 
                                   4975 ;---------------------
      001D58                       4976 ascii:
      001D58 A6 09            [ 1] 4977 	ld a,#TK_LPAREN
      001D5A CD 11 C2         [ 4] 4978 	call expect 
      001D5D CD 07 EF         [ 4] 4979 	call next_token 
      001D60 A1 08            [ 1] 4980 	cp a,#TK_QSTR 
      001D62 27 07            [ 1] 4981 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D64 A1 05            [ 1] 4982 	cp a,#TK_CHAR 
      001D66 27 06            [ 1] 4983 	jreq 2$ 
      001D68 CC 07 09         [ 2] 4984 	jp syntax_error
      001D6B                       4985 1$: 
      001D6B F6               [ 1] 4986 	ld a,(x)
      001D6C 20 01            [ 2] 4987 	jra 3$
      001D6E                       4988 2$: 
      001D6E 9F               [ 1] 4989 	ld a,xl 
      001D6F 97               [ 1] 4990 3$:	ld xl,a 
      001D70 4F               [ 1] 4991 	clr a  
      001D71 95               [ 1] 4992 	ld xh,a 
      001D72 89               [ 2] 4993 	pushw x  
      001D73 A6 0A            [ 1] 4994 	ld a,#TK_RPAREN 
      001D75 CD 11 C2         [ 4] 4995 	call expect 
      001D78 85               [ 2] 4996 	popw x 
      001D79 A6 02            [ 1] 4997 	ld a,#TK_INTGR 
      001D7B 81               [ 4] 4998 	ret 
                                   4999 
                                   5000 ;---------------------
                                   5001 ;BASIC: KEY
                                   5002 ; wait for a character 
                                   5003 ; received from STDIN 
                                   5004 ; input:
                                   5005 ;	none 
                                   5006 ; output:
                                   5007 ;	X 		ASCII character 
                                   5008 ;---------------------
      001D7C                       5009 key:
      001D7C CD 01 A7         [ 4] 5010 	call getc 
      001D7F 5F               [ 1] 5011 	clrw x 
      001D80 97               [ 1] 5012 	ld xl,a 
      001D81 A6 02            [ 1] 5013 	ld a,#TK_INTGR
      001D83 81               [ 4] 5014 	ret
                                   5015 
                                   5016 ;----------------------
                                   5017 ; BASIC: QKEY
                                   5018 ; Return true if there 
                                   5019 ; is a character in 
                                   5020 ; waiting in STDIN 
                                   5021 ; input:
                                   5022 ;  none 
                                   5023 ; output:
                                   5024 ;   X 		0|1 
                                   5025 ;-----------------------
      001D84                       5026 qkey: 
      001D84 5F               [ 1] 5027 	clrw x 
      001D85 72 0B 52 40 01   [ 2] 5028 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001D8A 5C               [ 1] 5029 	incw x 
      001D8B A6 02            [ 1] 5030 9$: ld a,#TK_INTGR
      001D8D 81               [ 4] 5031 	ret 
                                   5032 
                                   5033 ;---------------------
                                   5034 ; BASIC: GPIO(expr,reg)
                                   5035 ; return gpio address 
                                   5036 ; expr {0..8}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   5037 ; input:
                                   5038 ;   none 
                                   5039 ; output:
                                   5040 ;   X 		gpio register address
                                   5041 ;----------------------------
      001D8E                       5042 gpio:
      001D8E A6 09            [ 1] 5043 	ld a,#TK_LPAREN 
      001D90 CD 11 C2         [ 4] 5044 	call expect 
      001D93 CD 11 CF         [ 4] 5045 	call arg_list
      001D96 A1 02            [ 1] 5046 	cp a,#2
      001D98 27 03            [ 1] 5047 	jreq 1$
      001D9A CC 07 09         [ 2] 5048 	jp syntax_error  
      001D9D                       5049 1$:	
      001D9D A6 0A            [ 1] 5050 	ld a,#TK_RPAREN 
      001D9F CD 11 C2         [ 4] 5051 	call expect 
      001DA2 AE 00 02         [ 2] 5052 	ldw x,#2
      001DA5 72 DE 00 19      [ 5] 5053 	ldw x,([dstkptr],x) ; port 
      001DA9 2B 1B            [ 1] 5054 	jrmi bad_port
      001DAB A3 00 09         [ 2] 5055 	cpw x,#9
      001DAE 2A 16            [ 1] 5056 	jrpl bad_port
      001DB0 A6 05            [ 1] 5057 	ld a,#5
      001DB2 42               [ 4] 5058 	mul x,a
      001DB3 1C 50 00         [ 2] 5059 	addw x,#GPIO_BASE 
      001DB6 89               [ 2] 5060 	pushw x 
      001DB7 CD 0F AC         [ 4] 5061 	call dpop 
      001DBA 72 FB 01         [ 2] 5062 	addw x,(1,sp)
      001DBD 1F 01            [ 2] 5063 	ldw (1,sp),x  
      001DBF CD 0F D3         [ 4] 5064 	call ddrop  
      001DC2 85               [ 2] 5065 	popw x 
      001DC3 A6 02            [ 1] 5066 	ld a,#TK_INTGR
      001DC5 81               [ 4] 5067 	ret
      001DC6                       5068 bad_port:
      001DC6 A6 0A            [ 1] 5069 	ld a,#ERR_BAD_VALUE
      001DC8 CC 07 0B         [ 2] 5070 	jp tb_error
                                   5071 
                                   5072 ;----------------------
                                   5073 ; BASIC: ODR 
                                   5074 ; return offset of gpio
                                   5075 ; ODR register: 0
                                   5076 ; ---------------------
      001DCB                       5077 port_odr:
      001DCB AE 00 00         [ 2] 5078 	ldw x,#GPIO_ODR
      001DCE A6 02            [ 1] 5079 	ld a,#TK_INTGR
      001DD0 81               [ 4] 5080 	ret
                                   5081 
                                   5082 ;----------------------
                                   5083 ; BASIC: IDR 
                                   5084 ; return offset of gpio
                                   5085 ; IDR register: 1
                                   5086 ; ---------------------
      001DD1                       5087 port_idr:
      001DD1 AE 00 01         [ 2] 5088 	ldw x,#GPIO_IDR
      001DD4 A6 02            [ 1] 5089 	ld a,#TK_INTGR
      001DD6 81               [ 4] 5090 	ret
                                   5091 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5092 ;----------------------
                                   5093 ; BASIC: DDR 
                                   5094 ; return offset of gpio
                                   5095 ; DDR register: 2
                                   5096 ; ---------------------
      001DD7                       5097 port_ddr:
      001DD7 AE 00 02         [ 2] 5098 	ldw x,#GPIO_DDR
      001DDA A6 02            [ 1] 5099 	ld a,#TK_INTGR
      001DDC 81               [ 4] 5100 	ret
                                   5101 
                                   5102 ;----------------------
                                   5103 ; BASIC: CRL  
                                   5104 ; return offset of gpio
                                   5105 ; CR1 register: 3
                                   5106 ; ---------------------
      001DDD                       5107 port_cr1:
      001DDD AE 00 03         [ 2] 5108 	ldw x,#GPIO_CR1
      001DE0 A6 02            [ 1] 5109 	ld a,#TK_INTGR
      001DE2 81               [ 4] 5110 	ret
                                   5111 
                                   5112 ;----------------------
                                   5113 ; BASIC: CRH  
                                   5114 ; return offset of gpio
                                   5115 ; CR2 register: 4
                                   5116 ; ---------------------
      001DE3                       5117 port_cr2:
      001DE3 AE 00 04         [ 2] 5118 	ldw x,#GPIO_CR2
      001DE6 A6 02            [ 1] 5119 	ld a,#TK_INTGR
      001DE8 81               [ 4] 5120 	ret
                                   5121 
                                   5122 ;-------------------------
                                   5123 ; BASIC: UFLASH 
                                   5124 ; return user flash address
                                   5125 ; input:
                                   5126 ;  none 
                                   5127 ; output:
                                   5128 ;	A		TK_INTGR
                                   5129 ;   X 		user address 
                                   5130 ;---------------------------
      001DE9                       5131 uflash:
      001DE9 AE 21 80         [ 2] 5132 	ldw x,#user_space 
      001DEC A6 02            [ 1] 5133 	ld a,#TK_INTGR 
      001DEE 81               [ 4] 5134 	ret 
                                   5135 
                                   5136 ;-------------------------
                                   5137 ; BASIC: EEPROM 
                                   5138 ; return eeprom address
                                   5139 ; input:
                                   5140 ;  none 
                                   5141 ; output:
                                   5142 ;	A		TK_INTGR
                                   5143 ;   X 		eeprom address 
                                   5144 ;---------------------------
      001DEF                       5145 eeprom:
      001DEF AE 40 00         [ 2] 5146 	ldw x,#EEPROM_BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001DF2 A6 02            [ 1] 5147 	ld a,#TK_INTGR 
      001DF4 81               [ 4] 5148 	ret 
                                   5149 
                                   5150 ;---------------------
                                   5151 ; BASIC: USR(addr[,arg])
                                   5152 ; execute a function written 
                                   5153 ; in binary code.
                                   5154 ; binary fonction should 
                                   5155 ; return token attribute in A 
                                   5156 ; and value in X. 
                                   5157 ; input:
                                   5158 ;   addr	routine address 
                                   5159 ;   arg 	is an optional argument 
                                   5160 ; output:
                                   5161 ;   A 		token attribute 
                                   5162 ;   X       returned value 
                                   5163 ;---------------------
      001DF5                       5164 usr:
      001DF5 90 89            [ 2] 5165 	pushw y 	
      001DF7 A6 09            [ 1] 5166 	ld a,#TK_LPAREN 
      001DF9 CD 11 C2         [ 4] 5167 	call expect 
      001DFC CD 11 CF         [ 4] 5168 	call arg_list 
      001DFF A1 01            [ 1] 5169 	cp a,#1 
      001E01 2A 03            [ 1] 5170 	jrpl 2$ 
      001E03 CC 07 09         [ 2] 5171 	jp syntax_error 
      001E06 A6 0A            [ 1] 5172 2$: ld a,#TK_RPAREN
      001E08 CD 11 C2         [ 4] 5173 	call expect 
      001E0B CD 0F AC         [ 4] 5174 	call dpop 
      001E0E A1 02            [ 1] 5175 	cp a,#2 
      001E10 2B 05            [ 1] 5176 	jrmi 4$
      001E12 90 93            [ 1] 5177 	ldw y,x ; y=arg 
      001E14 CD 0F AC         [ 4] 5178 	call dpop ;x=addr 
      001E17 51               [ 1] 5179 4$:	exgw y,x ; y=addr,x=arg 
      001E18 90 FD            [ 4] 5180 	call (y)
      001E1A 90 85            [ 2] 5181 	popw y 
      001E1C 81               [ 4] 5182 	ret 
                                   5183 
                                   5184 ;------------------------------
                                   5185 ; BASIC: BYE 
                                   5186 ; halt mcu in its lowest power mode 
                                   5187 ; wait for reset or external interrupt
                                   5188 ; do a cold start on wakeup.
                                   5189 ;------------------------------
      001E1D                       5190 bye:
      001E1D 72 0D 52 40 FB   [ 2] 5191 	btjf UART3_SR,#UART_SR_TC,.
      001E22 8E               [10] 5192 	halt
      001E23 CC 05 4C         [ 2] 5193 	jp cold_start  
                                   5194 
                                   5195 ;----------------------------------
                                   5196 ; BASIC: SLEEP 
                                   5197 ; halt mcu until reset or external
                                   5198 ; interrupt.
                                   5199 ; Resume progam after SLEEP command
                                   5200 ;----------------------------------
      001E26                       5201 sleep:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E26 72 0D 52 40 FB   [ 2] 5202 	btjf UART3_SR,#UART_SR_TC,.
      001E2B 72 16 00 24      [ 1] 5203 	bset flags,#FSLEEP
      001E2F 8E               [10] 5204 	halt 
      001E30 81               [ 4] 5205 	ret 
                                   5206 
                                   5207 ;-------------------------------
                                   5208 ; BASIC: PAUSE expr 
                                   5209 ; suspend execution for n msec.
                                   5210 ; input:
                                   5211 ;	none
                                   5212 ; output:
                                   5213 ;	none 
                                   5214 ;------------------------------
      001E31                       5215 pause:
      001E31 CD 12 C9         [ 4] 5216 	call expression
      001E34 A1 02            [ 1] 5217 	cp a,#TK_INTGR
      001E36 27 03            [ 1] 5218 	jreq pause02 
      001E38 CC 07 09         [ 2] 5219 	jp syntax_error
      001E3B                       5220 pause02: 
      001E3B 5D               [ 2] 5221 1$: tnzw x 
      001E3C 27 04            [ 1] 5222 	jreq 2$
      001E3E 8F               [10] 5223 	wfi 
      001E3F 5A               [ 2] 5224 	decw x 
      001E40 26 F9            [ 1] 5225 	jrne 1$
      001E42 4F               [ 1] 5226 2$:	clr a 
      001E43 81               [ 4] 5227 	ret 
                                   5228 
                                   5229 ;------------------------------
                                   5230 ; BASIC: TICKS
                                   5231 ; return msec ticks counter value 
                                   5232 ; input:
                                   5233 ; 	none 
                                   5234 ; output:
                                   5235 ;	X 		TK_INTGR
                                   5236 ;-------------------------------
      001E44                       5237 get_ticks:
      001E44 CE 00 0B         [ 2] 5238 	ldw x,ticks 
      001E47 A6 02            [ 1] 5239 	ld a,#TK_INTGR
      001E49 81               [ 4] 5240 	ret 
                                   5241 
                                   5242 
                                   5243 
                                   5244 ;------------------------------
                                   5245 ; BASIC: ABS(expr)
                                   5246 ; return absolute value of expr.
                                   5247 ; input:
                                   5248 ;   none
                                   5249 ; output:
                                   5250 ;   X     	positive integer
                                   5251 ;-------------------------------
      001E4A                       5252 abs:
      001E4A A6 09            [ 1] 5253 	ld a,#TK_LPAREN
      001E4C CD 11 C2         [ 4] 5254 	call expect 
      001E4F CD 11 CF         [ 4] 5255 	call arg_list
      001E52 A1 01            [ 1] 5256 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E54 27 03            [ 1] 5257 	jreq 0$ 
      001E56 CC 07 09         [ 2] 5258 	jp syntax_error
      001E59                       5259 0$:  
      001E59 A6 0A            [ 1] 5260 	ld a,#TK_RPAREN 
      001E5B CD 11 C2         [ 4] 5261 	call expect 
      001E5E CD 0F AC         [ 4] 5262     call dpop   
      001E61 9E               [ 1] 5263 	ld a,xh 
      001E62 A5 80            [ 1] 5264 	bcp a,#0x80 
      001E64 27 01            [ 1] 5265 	jreq 2$ 
      001E66 50               [ 2] 5266 	negw x 
      001E67 A6 02            [ 1] 5267 2$: ld a,#TK_INTGR 
      001E69 81               [ 4] 5268 	ret 
                                   5269 
                                   5270 ;------------------------------
                                   5271 ; BASIC: RND(expr)
                                   5272 ; return random number 
                                   5273 ; between 1 and expr inclusive
                                   5274 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5275 ; input:
                                   5276 ; 	none 
                                   5277 ; output:
                                   5278 ;	X 		random positive integer 
                                   5279 ;------------------------------
      001E6A                       5280 random:
      001E6A A6 09            [ 1] 5281 	ld a,#TK_LPAREN 
      001E6C CD 11 C2         [ 4] 5282 	call expect 
      001E6F CD 11 CF         [ 4] 5283 	call arg_list 
      001E72 A1 01            [ 1] 5284 	cp a,#1
      001E74 27 03            [ 1] 5285 	jreq 1$
      001E76 CC 07 09         [ 2] 5286 	jp syntax_error
      001E79 A6 0A            [ 1] 5287 1$: ld a,#TK_RPAREN
      001E7B CD 11 C2         [ 4] 5288 	call expect 
      001E7E CD 0F AC         [ 4] 5289 	call dpop 
      001E81 89               [ 2] 5290 	pushw x 
      001E82 9E               [ 1] 5291 	ld a,xh 
      001E83 A5 80            [ 1] 5292 	bcp a,#0x80 
      001E85 27 05            [ 1] 5293 	jreq 2$
      001E87 A6 0A            [ 1] 5294 	ld a,#ERR_BAD_VALUE
      001E89 CC 07 0B         [ 2] 5295 	jp tb_error
      001E8C                       5296 2$: 
                                   5297 ; acc16=(x<<5)^x 
      001E8C CE 00 0D         [ 2] 5298 	ldw x,seedx 
      001E8F 58               [ 2] 5299 	sllw x 
      001E90 58               [ 2] 5300 	sllw x 
      001E91 58               [ 2] 5301 	sllw x 
      001E92 58               [ 2] 5302 	sllw x 
      001E93 58               [ 2] 5303 	sllw x 
      001E94 9E               [ 1] 5304 	ld a,xh 
      001E95 C8 00 0D         [ 1] 5305 	xor a,seedx 
      001E98 C7 00 09         [ 1] 5306 	ld acc16,a 
      001E9B 9F               [ 1] 5307 	ld a,xl 
      001E9C C8 00 0E         [ 1] 5308 	xor a,seedx+1 
      001E9F C7 00 0A         [ 1] 5309 	ld acc8,a 
                                   5310 ; seedx=seedy 
      001EA2 CE 00 0F         [ 2] 5311 	ldw x,seedy 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001EA5 CF 00 0D         [ 2] 5312 	ldw seedx,x  
                                   5313 ; seedy=seedy^(seedy>>1)
      001EA8 90 54            [ 2] 5314 	srlw y 
      001EAA 90 9E            [ 1] 5315 	ld a,yh 
      001EAC C8 00 0F         [ 1] 5316 	xor a,seedy 
      001EAF C7 00 0F         [ 1] 5317 	ld seedy,a  
      001EB2 90 9F            [ 1] 5318 	ld a,yl 
      001EB4 C8 00 10         [ 1] 5319 	xor a,seedy+1 
      001EB7 C7 00 10         [ 1] 5320 	ld seedy+1,a 
                                   5321 ; acc16>>3 
      001EBA CE 00 09         [ 2] 5322 	ldw x,acc16 
      001EBD 54               [ 2] 5323 	srlw x 
      001EBE 54               [ 2] 5324 	srlw x 
      001EBF 54               [ 2] 5325 	srlw x 
                                   5326 ; x=acc16^x 
      001EC0 9E               [ 1] 5327 	ld a,xh 
      001EC1 C8 00 09         [ 1] 5328 	xor a,acc16 
      001EC4 95               [ 1] 5329 	ld xh,a 
      001EC5 9F               [ 1] 5330 	ld a,xl 
      001EC6 C8 00 0A         [ 1] 5331 	xor a,acc8 
      001EC9 97               [ 1] 5332 	ld xl,a 
                                   5333 ; seedy=x^seedy 
      001ECA C8 00 10         [ 1] 5334 	xor a,seedy+1
      001ECD 97               [ 1] 5335 	ld xl,a 
      001ECE 9E               [ 1] 5336 	ld a,xh 
      001ECF C8 00 0F         [ 1] 5337 	xor a,seedy
      001ED2 95               [ 1] 5338 	ld xh,a 
      001ED3 CF 00 0F         [ 2] 5339 	ldw seedy,x 
                                   5340 ; return seedy modulo expr + 1 
      001ED6 90 85            [ 2] 5341 	popw y 
      001ED8 65               [ 2] 5342 	divw x,y 
      001ED9 93               [ 1] 5343 	ldw x,y 
      001EDA 5C               [ 1] 5344 	incw x 
      001EDB A6 02            [ 1] 5345 	ld a,#TK_INTGR
      001EDD 81               [ 4] 5346 	ret 
                                   5347 
                                   5348 ;---------------------------------
                                   5349 ; BASIC: WORDS 
                                   5350 ; affiche la listes des mots du
                                   5351 ; dictionnaire.
                                   5352 ;---------------------------------
                           000001  5353 	WLEN=1
                           000002  5354 	LLEN=2  
                           000002  5355 	VSIZE=2 
      001EDE                       5356 words:
      001EDE                       5357 	_vars VSIZE
      001EDE 52 02            [ 2]    1     sub sp,#VSIZE 
      001EE0 0F 02            [ 1] 5358 	clr (LLEN,sp)
      001EE2 90 AE 21 0D      [ 2] 5359 	ldw y,#kword_dict+2
      001EE6 93               [ 1] 5360 0$:	ldw x,y
      001EE7 F6               [ 1] 5361 	ld a,(x)
      001EE8 A4 0F            [ 1] 5362 	and a,#15 
      001EEA 6B 01            [ 1] 5363 	ld (WLEN,sp),a 
      001EEC 5C               [ 1] 5364 1$:	incw x 
      001EED F6               [ 1] 5365 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001EEE CD 01 9E         [ 4] 5366 	call putc 
      001EF1 0C 02            [ 1] 5367 	inc (LLEN,sp)
      001EF3 0A 01            [ 1] 5368 	dec (WLEN,sp)
      001EF5 26 F5            [ 1] 5369 	jrne 1$
      001EF7 A6 46            [ 1] 5370 	ld a,#70
      001EF9 11 02            [ 1] 5371 	cp a,(LLEN,sp)
      001EFB 2B 09            [ 1] 5372 	jrmi 2$   
      001EFD A6 20            [ 1] 5373 	ld a,#SPACE 
      001EFF CD 01 9E         [ 4] 5374 	call putc 
      001F02 0C 02            [ 1] 5375 	inc (LLEN,sp) 
      001F04 20 07            [ 2] 5376 	jra 3$
      001F06 A6 0D            [ 1] 5377 2$: ld a,#CR 
      001F08 CD 01 9E         [ 4] 5378 	call putc 
      001F0B 0F 02            [ 1] 5379 	clr (LLEN,sp)
      001F0D 72 A2 00 02      [ 2] 5380 3$:	subw y,#2 
      001F11 90 FE            [ 2] 5381 	ldw y,(y)
      001F13 26 D1            [ 1] 5382 	jrne 0$  
      001F15                       5383 	_drop VSIZE 
      001F15 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F17 81               [ 4] 5384 	ret 
                                   5385 
                                   5386 
                                   5387 ;*********************************
                                   5388 
                                   5389 ;------------------------------
                                   5390 ;      dictionary 
                                   5391 ; format:
                                   5392 ;   link:   2 bytes 
                                   5393 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5394 ;   cmd_name: 16 byte max 
                                   5395 ;   code_address: 2 bytes 
                                   5396 ;------------------------------
                           000080  5397 	FFUNC=128 ; function flag 
                                   5398 	.macro _dict_entry len,name,cmd 
                                   5399 	.word LINK 
                                   5400 	LINK=.
                                   5401 name:
                                   5402 	.byte len 	
                                   5403 	.ascii "name"
                                   5404 	.word cmd 
                                   5405 	.endm 
                                   5406 
                           000000  5407 	LINK=0
      001F18                       5408 kword_end:
      001F18                       5409 	_dict_entry,3,BYE,bye 
      001F18 00 00                    1 	.word LINK 
                           001F1A     2 	LINK=.
      001F1A                          3 BYE:
      001F1A 03                       4 	.byte 3 	
      001F1B 42 59 45                 5 	.ascii "BYE"
      001F1E 1E 1D                    6 	.word bye 
      001F20                       5410 	_dict_entry,5,WORDS,words 
      001F20 1F 1A                    1 	.word LINK 
                           001F22     2 	LINK=.
      001F22                          3 WORDS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F22 05                       4 	.byte 5 	
      001F23 57 4F 52 44 53           5 	.ascii "WORDS"
      001F28 1E DE                    6 	.word words 
      001F2A                       5411 	_dict_entry,5,SLEEP,sleep 
      001F2A 1F 22                    1 	.word LINK 
                           001F2C     2 	LINK=.
      001F2C                          3 SLEEP:
      001F2C 05                       4 	.byte 5 	
      001F2D 53 4C 45 45 50           5 	.ascii "SLEEP"
      001F32 1E 26                    6 	.word sleep 
      001F34                       5412 	_dict_entry,6,FORGET,forget 
      001F34 1F 2C                    1 	.word LINK 
                           001F36     2 	LINK=.
      001F36                          3 FORGET:
      001F36 06                       4 	.byte 6 	
      001F37 46 4F 52 47 45 54        5 	.ascii "FORGET"
      001F3D 1C 20                    6 	.word forget 
      001F3F                       5413 	_dict_entry,3,DIR,directory 
      001F3F 1F 36                    1 	.word LINK 
                           001F41     2 	LINK=.
      001F41                          3 DIR:
      001F41 03                       4 	.byte 3 	
      001F42 44 49 52                 5 	.ascii "DIR"
      001F45 1C 6F                    6 	.word directory 
      001F47                       5414 	_dict_entry,4,LOAD,load 
      001F47 1F 41                    1 	.word LINK 
                           001F49     2 	LINK=.
      001F49                          3 LOAD:
      001F49 04                       4 	.byte 4 	
      001F4A 4C 4F 41 44              5 	.ascii "LOAD"
      001F4E 1B B8                    6 	.word load 
      001F50                       5415 	_dict_entry,4,SAVE,save
      001F50 1F 49                    1 	.word LINK 
                           001F52     2 	LINK=.
      001F52                          3 SAVE:
      001F52 04                       4 	.byte 4 	
      001F53 53 41 56 45              5 	.ascii "SAVE"
      001F57 1B 0A                    6 	.word save 
      001F59                       5416 	_dict_entry,5,WRITE,write  
      001F59 1F 52                    1 	.word LINK 
                           001F5B     2 	LINK=.
      001F5B                          3 WRITE:
      001F5B 05                       4 	.byte 5 	
      001F5C 57 52 49 54 45           5 	.ascii "WRITE"
      001F61 1D 04                    6 	.word write 
      001F63                       5417 	_dict_entry,3,NEW,new
      001F63 1F 5B                    1 	.word LINK 
                           001F65     2 	LINK=.
      001F65                          3 NEW:
      001F65 03                       4 	.byte 3 	
      001F66 4E 45 57                 5 	.ascii "NEW"
      001F69 1A 1E                    6 	.word new 
      001F6B                       5418 	_dict_entry,5,BREAK,break 
      001F6B 1F 65                    1 	.word LINK 
                           001F6D     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F6D                          3 BREAK:
      001F6D 05                       4 	.byte 5 	
      001F6E 42 52 45 41 4B           5 	.ascii "BREAK"
      001F73 19 CF                    6 	.word break 
      001F75                       5419 	_dict_entry,4,BEEP,beep 
      001F75 1F 6D                    1 	.word LINK 
                           001F77     2 	LINK=.
      001F77                          3 BEEP:
      001F77 04                       4 	.byte 4 	
      001F78 42 45 45 50              5 	.ascii "BEEP"
      001F7C 19 39                    6 	.word beep 
      001F7E                       5420 	_dict_entry,4,STOP,stop 
      001F7E 1F 77                    1 	.word LINK 
                           001F80     2 	LINK=.
      001F80                          3 STOP:
      001F80 04                       4 	.byte 4 	
      001F81 53 54 4F 50              5 	.ascii "STOP"
      001F85 19 2A                    6 	.word stop 
      001F87                       5421     _dict_entry,4,SHOW,show 
      001F87 1F 80                    1 	.word LINK 
                           001F89     2 	LINK=.
      001F89                          3 SHOW:
      001F89 04                       4 	.byte 4 	
      001F8A 53 48 4F 57              5 	.ascii "SHOW"
      001F8E 13 64                    6 	.word show 
      001F90                       5422 	_dict_entry 3,RUN,run
      001F90 1F 89                    1 	.word LINK 
                           001F92     2 	LINK=.
      001F92                          3 RUN:
      001F92 03                       4 	.byte 3 	
      001F93 52 55 4E                 5 	.ascii "RUN"
      001F96 18 E3                    6 	.word run 
      001F98                       5423 	_dict_entry 4,LIST,list
      001F98 1F 92                    1 	.word LINK 
                           001F9A     2 	LINK=.
      001F9A                          3 LIST:
      001F9A 04                       4 	.byte 4 	
      001F9B 4C 49 53 54              5 	.ascii "LIST"
      001F9F 13 BE                    6 	.word list 
      001FA1                       5424 	_dict_entry,3+FFUNC,USR,usr
      001FA1 1F 9A                    1 	.word LINK 
                           001FA3     2 	LINK=.
      001FA3                          3 USR:
      001FA3 83                       4 	.byte 3+FFUNC 	
      001FA4 55 53 52                 5 	.ascii "USR"
      001FA7 1D F5                    6 	.word usr 
      001FA9                       5425 	_dict_entry,6+FFUNC,EEPROM,eeprom 
      001FA9 1F A3                    1 	.word LINK 
                           001FAB     2 	LINK=.
      001FAB                          3 EEPROM:
      001FAB 86                       4 	.byte 6+FFUNC 	
      001FAC 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001FB2 1D EF                    6 	.word eeprom 
      001FB4                       5426 	_dict_entry,6+FFUNC,UFLASH,uflash 
      001FB4 1F AB                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                           001FB6     2 	LINK=.
      001FB6                          3 UFLASH:
      001FB6 86                       4 	.byte 6+FFUNC 	
      001FB7 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001FBD 1D E9                    6 	.word uflash 
      001FBF                       5427 	_dict_entry,3+FFUNC,ODR,port_odr
      001FBF 1F B6                    1 	.word LINK 
                           001FC1     2 	LINK=.
      001FC1                          3 ODR:
      001FC1 83                       4 	.byte 3+FFUNC 	
      001FC2 4F 44 52                 5 	.ascii "ODR"
      001FC5 1D CB                    6 	.word port_odr 
      001FC7                       5428 	_dict_entry,3+FFUNC,IDR,port_idr
      001FC7 1F C1                    1 	.word LINK 
                           001FC9     2 	LINK=.
      001FC9                          3 IDR:
      001FC9 83                       4 	.byte 3+FFUNC 	
      001FCA 49 44 52                 5 	.ascii "IDR"
      001FCD 1D D1                    6 	.word port_idr 
      001FCF                       5429 	_dict_entry,3+FFUNC,DDR,port_ddr 
      001FCF 1F C9                    1 	.word LINK 
                           001FD1     2 	LINK=.
      001FD1                          3 DDR:
      001FD1 83                       4 	.byte 3+FFUNC 	
      001FD2 44 44 52                 5 	.ascii "DDR"
      001FD5 1D D7                    6 	.word port_ddr 
      001FD7                       5430 	_dict_entry,3+FFUNC,CRL,port_cr1 
      001FD7 1F D1                    1 	.word LINK 
                           001FD9     2 	LINK=.
      001FD9                          3 CRL:
      001FD9 83                       4 	.byte 3+FFUNC 	
      001FDA 43 52 4C                 5 	.ascii "CRL"
      001FDD 1D DD                    6 	.word port_cr1 
      001FDF                       5431 	_dict_entry,3+FFUNC,CRH,port_cr2
      001FDF 1F D9                    1 	.word LINK 
                           001FE1     2 	LINK=.
      001FE1                          3 CRH:
      001FE1 83                       4 	.byte 3+FFUNC 	
      001FE2 43 52 48                 5 	.ascii "CRH"
      001FE5 1D E3                    6 	.word port_cr2 
      001FE7                       5432 	_dict_entry,4+FFUNC,GPIO,gpio 
      001FE7 1F E1                    1 	.word LINK 
                           001FE9     2 	LINK=.
      001FE9                          3 GPIO:
      001FE9 84                       4 	.byte 4+FFUNC 	
      001FEA 47 50 49 4F              5 	.ascii "GPIO"
      001FEE 1D 8E                    6 	.word gpio 
      001FF0                       5433 	_dict_entry,6,PWRADC,power_adc 
      001FF0 1F E9                    1 	.word LINK 
                           001FF2     2 	LINK=.
      001FF2                          3 PWRADC:
      001FF2 06                       4 	.byte 6 	
      001FF3 50 57 52 41 44 43        5 	.ascii "PWRADC"
      001FF9 19 61                    6 	.word power_adc 
      001FFB                       5434 	_dict_entry,5+FFUNC,RDADC,read_adc
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001FFB 1F F2                    1 	.word LINK 
                           001FFD     2 	LINK=.
      001FFD                          3 RDADC:
      001FFD 85                       4 	.byte 5+FFUNC 	
      001FFE 52 44 41 44 43           5 	.ascii "RDADC"
      002003 19 9C                    6 	.word read_adc 
      002005                       5435 	_dict_entry,3+FFUNC,ASC,ascii  
      002005 1F FD                    1 	.word LINK 
                           002007     2 	LINK=.
      002007                          3 ASC:
      002007 83                       4 	.byte 3+FFUNC 	
      002008 41 53 43                 5 	.ascii "ASC"
      00200B 1D 58                    6 	.word ascii 
      00200D                       5436 	_dict_entry,4+FFUNC,CHAR,char
      00200D 20 07                    1 	.word LINK 
                           00200F     2 	LINK=.
      00200F                          3 CHAR:
      00200F 84                       4 	.byte 4+FFUNC 	
      002010 43 48 41 52              5 	.ascii "CHAR"
      002014 1D 3B                    6 	.word char 
      002016                       5437 	_dict_entry,4+FFUNC,QKEY,qkey  
      002016 20 0F                    1 	.word LINK 
                           002018     2 	LINK=.
      002018                          3 QKEY:
      002018 84                       4 	.byte 4+FFUNC 	
      002019 51 4B 45 59              5 	.ascii "QKEY"
      00201D 1D 84                    6 	.word qkey 
      00201F                       5438 	_dict_entry,3+FFUNC,KEY,key 
      00201F 20 18                    1 	.word LINK 
                           002021     2 	LINK=.
      002021                          3 KEY:
      002021 83                       4 	.byte 3+FFUNC 	
      002022 4B 45 59                 5 	.ascii "KEY"
      002025 1D 7C                    6 	.word key 
      002027                       5439 	_dict_entry,4+FFUNC,SIZE,size
      002027 20 21                    1 	.word LINK 
                           002029     2 	LINK=.
      002029                          3 SIZE:
      002029 84                       4 	.byte 4+FFUNC 	
      00202A 53 49 5A 45              5 	.ascii "SIZE"
      00202E 13 7E                    6 	.word size 
      002030                       5440 	_dict_entry,3,HEX,hex_base
      002030 20 29                    1 	.word LINK 
                           002032     2 	LINK=.
      002032                          3 HEX:
      002032 03                       4 	.byte 3 	
      002033 48 45 58                 5 	.ascii "HEX"
      002036 13 74                    6 	.word hex_base 
      002038                       5441 	_dict_entry,3,DEC,dec_base
      002038 20 32                    1 	.word LINK 
                           00203A     2 	LINK=.
      00203A                          3 DEC:
      00203A 03                       4 	.byte 3 	
      00203B 44 45 43                 5 	.ascii "DEC"
      00203E 13 79                    6 	.word dec_base 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      002040                       5442 	_dict_entry,5+FFUNC,TICKS,get_ticks
      002040 20 3A                    1 	.word LINK 
                           002042     2 	LINK=.
      002042                          3 TICKS:
      002042 85                       4 	.byte 5+FFUNC 	
      002043 54 49 43 4B 53           5 	.ascii "TICKS"
      002048 1E 44                    6 	.word get_ticks 
      00204A                       5443 	_dict_entry,3+FFUNC,ABS,abs
      00204A 20 42                    1 	.word LINK 
                           00204C     2 	LINK=.
      00204C                          3 ABS:
      00204C 83                       4 	.byte 3+FFUNC 	
      00204D 41 42 53                 5 	.ascii "ABS"
      002050 1E 4A                    6 	.word abs 
      002052                       5444 	_dict_entry,3+FFUNC,RND,random 
      002052 20 4C                    1 	.word LINK 
                           002054     2 	LINK=.
      002054                          3 RND:
      002054 83                       4 	.byte 3+FFUNC 	
      002055 52 4E 44                 5 	.ascii "RND"
      002058 1E 6A                    6 	.word random 
      00205A                       5445 	_dict_entry,5,PAUSE,pause 
      00205A 20 54                    1 	.word LINK 
                           00205C     2 	LINK=.
      00205C                          3 PAUSE:
      00205C 05                       4 	.byte 5 	
      00205D 50 41 55 53 45           5 	.ascii "PAUSE"
      002062 1E 31                    6 	.word pause 
      002064                       5446 	_dict_entry,4,BSET,bit_set 
      002064 20 5C                    1 	.word LINK 
                           002066     2 	LINK=.
      002066                          3 BSET:
      002066 04                       4 	.byte 4 	
      002067 42 53 45 54              5 	.ascii "BSET"
      00206B 16 F3                    6 	.word bit_set 
      00206D                       5447 	_dict_entry,4,BRES,bit_reset
      00206D 20 66                    1 	.word LINK 
                           00206F     2 	LINK=.
      00206F                          3 BRES:
      00206F 04                       4 	.byte 4 	
      002070 42 52 45 53              5 	.ascii "BRES"
      002074 17 07                    6 	.word bit_reset 
      002076                       5448 	_dict_entry,5,BTOGL,bit_toggle
      002076 20 6F                    1 	.word LINK 
                           002078     2 	LINK=.
      002078                          3 BTOGL:
      002078 05                       4 	.byte 5 	
      002079 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00207E 17 1C                    6 	.word bit_toggle 
      002080                       5449 	_dict_entry 4,WAIT,wait 
      002080 20 78                    1 	.word LINK 
                           002082     2 	LINK=.
      002082                          3 WAIT:
      002082 04                       4 	.byte 4 	
      002083 57 41 49 54              5 	.ascii "WAIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      002087 16 C8                    6 	.word wait 
      002089                       5450 	_dict_entry 6,REMARK,rem 
      002089 20 82                    1 	.word LINK 
                           00208B     2 	LINK=.
      00208B                          3 REMARK:
      00208B 06                       4 	.byte 6 	
      00208C 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002092 16 C2                    6 	.word rem 
      002094                       5451 	_dict_entry 5,PRINT,print 
      002094 20 8B                    1 	.word LINK 
                           002096     2 	LINK=.
      002096                          3 PRINT:
      002096 05                       4 	.byte 5 	
      002097 50 52 49 4E 54           5 	.ascii "PRINT"
      00209C 15 B4                    6 	.word print 
      00209E                       5452 	_dict_entry,2,IF,if 
      00209E 20 96                    1 	.word LINK 
                           0020A0     2 	LINK=.
      0020A0                          3 IF:
      0020A0 02                       4 	.byte 2 	
      0020A1 49 46                    5 	.ascii "IF"
      0020A3 17 60                    6 	.word if 
      0020A5                       5453 	_dict_entry,5,GOSUB,gosub 
      0020A5 20 A0                    1 	.word LINK 
                           0020A7     2 	LINK=.
      0020A7                          3 GOSUB:
      0020A7 05                       4 	.byte 5 	
      0020A8 47 4F 53 55 42           5 	.ascii "GOSUB"
      0020AD 18 76                    6 	.word gosub 
      0020AF                       5454 	_dict_entry,4,GOTO,goto 
      0020AF 20 A7                    1 	.word LINK 
                           0020B1     2 	LINK=.
      0020B1                          3 GOTO:
      0020B1 04                       4 	.byte 4 	
      0020B2 47 4F 54 4F              5 	.ascii "GOTO"
      0020B6 18 69                    6 	.word goto 
      0020B8                       5455 	_dict_entry,3,FOR,for 
      0020B8 20 B1                    1 	.word LINK 
                           0020BA     2 	LINK=.
      0020BA                          3 FOR:
      0020BA 03                       4 	.byte 3 	
      0020BB 46 4F 52                 5 	.ascii "FOR"
      0020BE 17 74                    6 	.word for 
      0020C0                       5456 	_dict_entry,2,TO,to
      0020C0 20 BA                    1 	.word LINK 
                           0020C2     2 	LINK=.
      0020C2                          3 TO:
      0020C2 02                       4 	.byte 2 	
      0020C3 54 4F                    5 	.ascii "TO"
      0020C5 17 9E                    6 	.word to 
      0020C7                       5457 	_dict_entry,4,STEP,step 
      0020C7 20 C2                    1 	.word LINK 
                           0020C9     2 	LINK=.
      0020C9                          3 STEP:
      0020C9 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0020CA 53 54 45 50              5 	.ascii "STEP"
      0020CE 17 CE                    6 	.word step 
      0020D0                       5458 	_dict_entry,4,NEXT,next 
      0020D0 20 C9                    1 	.word LINK 
                           0020D2     2 	LINK=.
      0020D2                          3 NEXT:
      0020D2 04                       4 	.byte 4 	
      0020D3 4E 45 58 54              5 	.ascii "NEXT"
      0020D7 17 F6                    6 	.word next 
      0020D9                       5459 	_dict_entry,6+FFUNC,UBOUND,ubound 
      0020D9 20 D2                    1 	.word LINK 
                           0020DB     2 	LINK=.
      0020DB                          3 UBOUND:
      0020DB 86                       4 	.byte 6+FFUNC 	
      0020DC 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0020E2 13 88                    6 	.word ubound 
      0020E4                       5460 	_dict_entry,6,RETURN,return 
      0020E4 20 DB                    1 	.word LINK 
                           0020E6     2 	LINK=.
      0020E6                          3 RETURN:
      0020E6 06                       4 	.byte 6 	
      0020E7 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0020ED 18 BF                    6 	.word return 
      0020EF                       5461 	_dict_entry,4+FFUNC,PEEK,peek 
      0020EF 20 E6                    1 	.word LINK 
                           0020F1     2 	LINK=.
      0020F1                          3 PEEK:
      0020F1 84                       4 	.byte 4+FFUNC 	
      0020F2 50 45 45 4B              5 	.ascii "PEEK"
      0020F6 17 43                    6 	.word peek 
      0020F8                       5462 	_dict_entry,4,POKE,poke 
      0020F8 20 F1                    1 	.word LINK 
                           0020FA     2 	LINK=.
      0020FA                          3 POKE:
      0020FA 04                       4 	.byte 4 	
      0020FB 50 4F 4B 45              5 	.ascii "POKE"
      0020FF 17 30                    6 	.word poke 
      002101                       5463 	_dict_entry,5,INPUT,input_var  
      002101 20 FA                    1 	.word LINK 
                           002103     2 	LINK=.
      002103                          3 INPUT:
      002103 05                       4 	.byte 5 	
      002104 49 4E 50 55 54           5 	.ascii "INPUT"
      002109 16 4E                    6 	.word input_var 
      00210B                       5464 kword_dict:
      00210B                       5465 	_dict_entry 3,LET,let 
      00210B 21 03                    1 	.word LINK 
                           00210D     2 	LINK=.
      00210D                          3 LET:
      00210D 03                       4 	.byte 3 	
      00210E 4C 45 54                 5 	.ascii "LET"
      002111 13 96                    6 	.word let 
                                   5466 	
                                   5467 
      002180                       5468 	.bndry 128 ; align on FLASH block.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   5469 ; free space for user application  
      002180                       5470 user_space:
                                   5471 ; USR() function test
      002180 89               [ 2] 5472 	pushw x 
      002181 72 1A 50 0A      [ 1] 5473 	bset PC_ODR,#5 
      002185 85               [ 2] 5474 	popw x 
      002186 CD 1E 3B         [ 4] 5475 	call pause02 
      002189 72 1B 50 0A      [ 1] 5476 	bres PC_ODR,#5 
      00218D 81               [ 4] 5477 	ret
                                   5478 
                                   5479 	.area FLASH_DRIVE (ABS)
      010000                       5480 	.org 0x10000
      010000                       5481 fdrive:
                                   5482 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00204C R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        002007 R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |   5 BEEP       001F77 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_ER=  000000 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  000005     |   5 BREAK      001F6D R   |   5 BRES       00206F R
  5 BSET       002066 R   |     BSIZE   =  000001     |     BSP     =  000008 
  5 BTOGL      002078 R   |     BTW     =  000001     |     BUFIDX  =  000003 
  5 BYE        001F1A R   |     C       =  000001     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       00200F R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000008     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        001FE1 R   |   5 CRL        001FD9 R   |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000006     |     CURR    =  000002 
    CX_BPTR =  000001     |     CX_CNT  =  000005     |     CX_IN   =  000004 
    CX_LNO  =  000003     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |   5 DDR        001FD1 R
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  5 DEC        00203A R   |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        001F41 R   |     DIVIDND =  000007 
    DIVISR  =  000005     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
    DSTACK_S=  000040     |   5 EEPROM     001FAB R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_L=  000005 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |     FF      =  00000C     |     FFOR    =  000002 
    FFUNC   =  000080     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   5 FOR        0020BA R
  5 FORGET     001F36 R   |     FRUN    =  000000     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FTRAP   =  000001     |   5 GOSUB      0020A7 R
    GOS_RET =  000003     |   5 GOTO       0020B1 R   |   5 GPIO       001FE9 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   5 HEX        002032 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        001FC9 R   |   5 IF         0020A0 R   |     IN      =  000007 
    INCR    =  000001     |   5 INPUT      002103 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  000003     |     ITC_SPR1=  007F70 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        002021 R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        00210D R
    LINENO  =  000005     |   5 LINK    =  00210D R   |   5 LIST       001F9A R
    LL      =  000002     |     LLEN    =  000002     |     LL_HB   =  000001 
    LNO     =  000005     |     LN_PTR  =  000005     |   5 LOAD       001F49 R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MINOR   =  000000     |     MULOP   =  000005     |     N1      =  000001 
    N1_HB   =  000006     |     N1_LB   =  000007     |     N2      =  000003 
    N2_HB   =  000008     |     N2_LB   =  000009     |     NAFR    =  004804 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        001F65 R   |   5 NEXT       0020D2 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NL      =  00000A     |     NLEN    =  000001 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R
  5 ODR        001FC1 R   |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    PA      =  000000     |     PAD_SIZE=  000028     |   5 PAUSE      00205C R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   5 PEEK       0020F1 R   |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 POKE       0020FA R   |     PREV    =  000001     |   5 PRINT      002096 R
    PROD    =  000002     |     PSIZE   =  000001     |   5 PWRADC     001FF2 R
  5 QKEY       002018 R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 RDADC      001FFD R   |   5 REG_A      00092B R
  5 REG_CC     00092F R   |   5 REG_EPC    00091E R   |   5 REG_SP     000934 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

  5 REG_X      000927 R   |   5 REG_Y      000923 R   |     RELOP   =  000005 
  5 REMARK     00208B R   |     RETL1   =  000001     |   5 RETURN     0020E6 R
  5 RND        002054 R   |     ROP     =  004800     |     RST_SR  =  0050B3 
  5 RUN        001F92 R   |     RXCHAR  =  000001     |     R_A     =  000007 
    R_CC    =  000008     |     R_X     =  000005     |     R_Y     =  000003 
  5 SAVE       001F52 R   |     SDIVD   =  000002     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   5 SHOW       001F89 R
    SIGN    =  000001     |   5 SIZE       002029 R   |     SKIP    =  000006 
  5 SLEEP      001F2C R   |     SPACE   =  000020     |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SQUOT   =  000001     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  000080     |   5 STATES     0008E1 R
  5 STEP       0020C9 R   |   5 STOP       001F80 R   |     SWIM_CSR=  007F80 
    TAB     =  000009     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      002042 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_ARRAY=  000004     |     TK_CHAR =  000005 
    TK_CMD  =  000006     |     TK_COLON=  000001     |     TK_COMMA=  00000B 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FUNC =  000007 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_INTGR=  000002     |     TK_LE   =  000036 
    TK_LPARE=  000009     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  000008 
    TK_RPARE=  00000A     |     TK_SHARP=  00000C     |     TK_VAR  =  000003 
  5 TO         0020C2 R   |   5 Timer4Up   000019 R   |   5 TrapHand   00000A R
    U8      =  000003     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     0020DB R   |   5 UFLASH     001FB6 R   |   5 USER_ABO   00007E R
  5 USR        001FA3 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   5 UserButt   000025 R   |     VSIZ    =  000002 
    VSIZE   =  000002     |     VT      =  00000B     |   5 WAIT       002082 R
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH   =  000001 
    WIDTH_SA=  000002     |     WLEN    =  000001     |   5 WORDS      001F22 R
  5 WRITE      001F5B R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XADR    =  000001     |     XMASK   =  000001     |     XSAVE   =  000003 
    YSAVE   =  000003     |   5 abs        001E4A R   |   1 acc16      000009 R
  1 acc24      000008 R   |   1 acc8       00000A R   |   5 accept_c   000AD9 R
  5 add        00108D R   |   5 ansi_seq   000A97 R   |   5 arg_list   0011CF R
  1 array_ad   000020 R   |   1 array_si   000022 R   |   5 ascii      001D58 R
  5 at_tst     000DC6 R   |   5 atoi24     000ED9 R   |   5 atoi_exi   000F47 R
  5 bad_port   001DC6 R   |   1 base       000007 R   |   1 basicptr   000003 R
  5 beep       001939 R   |   5 bin_exit   000CCC R   |   5 bit_rese   001707 R
  5 bit_set    0016F3 R   |   5 bit_togg   00171C R   |   5 bkslsh_t   000D71 R
  5 bksp       0001BA R   |   5 break      0019CF R   |   5 break_po   001A00 R
  5 bye        001E1D R   |   5 char       001D3B R   |   5 check_fu   0003F2 R
  5 clear_ba   0005D7 R   |   5 clear_va   0004E7 R   |   5 clock_in   000099 R
  5 cmd_itf    000AFD R   |   5 cmd_name   001138 R   |   5 cmp_name   001A9F R
  5 cold_sta   00054C R   |   5 colon_ts   000D9A R   |   5 comma_ts   000DA5 R
  5 compile    000401 R   |   5 convert_   000C32 R   |   1 count      000002 R
  5 cp_loop    00117B R   |   5 create_g   000343 R   |   5 cstk_pro   001057 R
  5 dash_tst   000DBB R   |   5 ddrop      000FD3 R   |   5 ddrop_n    001010 R
  5 ddup       000FDC R   |   5 dec_base   001379 R   |   5 del_back   000ACA R
  5 del_line   00030B R   |   5 del_ln     000ABB R   |   5 delete     0001CA R
  5 dir_loop   001C7B R   |   5 director   001C6F R   |   5 divide     0010E3 R
  5 divu24_8   000A24 R   |   5 dotr       001060 R   |   5 dotr_loo   001075 R
  5 dots       00102D R   |   5 dpick      000FED R   |   5 dpop       000FAC R
  5 dpush      000F9F R   |   5 drive_fr   001CF7 R   |   3 dstack     001740 R
  3 dstack_u   001780 R   |   5 dstk_pro   001023 R   |   1 dstkptr    000019 R
  5 dswap      000FB9 R   |   5 eeprom     001DEF R   |   5 eql_tst    000E26 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

  5 equal      0015A7 R   |   5 err_bad_   0006B8 R   |   5 err_cmd_   000679 R
  5 err_div0   00063B R   |   5 err_dupl   000694 R   |   5 err_math   000621 R
  5 err_mem_   000604 R   |   5 err_msg    0005EC R   |   5 err_no_a   0006C5 R
  5 err_no_l   00064B R   |   5 err_not_   0006A6 R   |   5 err_run_   000662 R
  5 err_synt   000612 R   |   5 expect     0011C2 R   |   5 expr_exi   00130A R
  5 expressi   0012C9 R   |   5 factor     001226 R   |   1 farptr     000013 R
  7 fdrive     010000 R   |   5 fetch      000FFC R   |   5 fetchc     000BEA R
  1 ffree      000016 R   |   5 file_cou   001CEF R   |   5 final_te   000A91 R
  5 first_li   0013E9 R   |   1 flags      000024 R   |   5 for        001774 R
  5 forget     001C20 R   |   1 free_ram   00005A R   |   5 ge         0015A9 R
  5 get_arra   0011F3 R   |   5 get_tick   001E44 R   |   5 get_toke   000D0E R
  5 getc       0001A7 R   |   5 go_commo   001899 R   |   5 gosub      001876 R
  5 goto       001869 R   |   5 gpio       001D8E R   |   5 gt         0015A5 R
  5 gt_tst     000E31 R   |   5 hex_base   001374 R   |   5 hse_cloc   000187 R
  5 hsi_cloc   000191 R   |   5 if         001760 R   |   1 in         000001 R
  1 in.w       000000 R   |   1 in.w.sav   000011 R   |   5 incr_far   001A29 R
  5 input_ex   0016BF R   |   5 input_lo   00165A R   |   5 input_va   00164E R
  5 insert_l   000374 R   |   5 insert_l   0003EF R   |   5 interp     00077B R
  5 interp_l   0007BF R   |   5 invalid    000B42 R   |   5 invalid_   000BC0 R
  5 is_alpha   0004F5 R   |   5 is_digit   000EC4 R   |   5 itoa       0009DD R
  5 itoa_loo   0009F5 R   |   5 key        001D7C R   |   5 kword_di   00210B R
  5 kword_en   001F18 R   |   5 last_lin   0013F2 R   |   5 le         0015AE R
  5 ledoff     000831 R   |   5 ledon      00082C R   |   5 ledtoggl   000836 R
  5 left_arr   000A97 R   |   5 left_par   00083F R   |   5 let        001396 R
  5 let02      0013A0 R   |   1 lineno     000005 R   |   5 lines_sk   0013F7 R
  5 list       0013BE R   |   5 list_exi   00143E R   |   5 list_sta   00141A R
  5 load       001BB8 R   |   5 loop_bac   00183E R   |   1 loop_dep   00001F R
  5 loop_don   001857 R   |   5 lt         0015AC R   |   5 lt_tst     000E6A R
  5 mem_peek   000B5F R   |   5 modulo     001127 R   |   5 move       00029E R
  5 move_dow   0002BC R   |   5 move_exi   0002DD R   |   5 move_loo   0002C1 R
  5 move_up    0002AE R   |   5 mul_char   001596 R   |   5 multiply   00109B R
  5 mulu24_8   000F4B R   |   5 nbr_tst    000D47 R   |   5 ne         0015B1 R
  5 neg_acc2   000A4C R   |   5 new        001A1E R   |   5 next       0017F6 R
  5 next_tok   0007EF R   |   5 no_match   00118D R   |   5 none       000D0E R
  5 number     000BF0 GR  |   5 other      000EA2 R   |   3 pad        001718 R
  5 parse_bi   000CAC R   |   5 parse_in   000C71 R   |   5 parse_ke   000CD4 R
  5 parse_qu   000BF7 R   |   5 pause      001E31 R   |   5 pause02    001E3B R
  5 peek       001743 R   |   5 peek_byt   000B8A R   |   5 plus_tst   000DFA R
  5 poke       001730 R   |   5 port_cr1   001DDD R   |   5 port_cr2   001DE3 R
  5 port_ddr   001DD7 R   |   5 port_idr   001DD1 R   |   5 port_odr   001DCB R
  5 power_ad   001961 R   |   5 prcnt_ts   000E1B R   |   5 print      0015B4 R
  5 print_ex   001618 R   |   5 print_fa   000BCF R   |   5 print_in   000981 R
  5 print_re   00088E R   |   5 print_st   000B52 R   |   5 prt_basi   001455 R
  5 prt_cmd_   001441 R   |   5 prt_loop   0015B8 R   |   5 prt_peek   00024E R
  5 prt_reg1   00086F R   |   5 prt_reg8   00084A R   |   5 prt_regs   0001E4 R
  5 prti24     000939 R   |   1 ptr16      000014 R   |   1 ptr8       000015 R
  5 putc       00019E R   |   5 puts       0001B0 R   |   5 qkey       001D84 R
  5 qmark_ts   000DD1 R   |   5 random     001E6A R   |   5 read_adc   00199C R
  5 readln     000A6F R   |   5 readln_l   000A75 R   |   5 readln_q   000AEE R
  5 regs_sta   000227 R   |   5 rel_exit   001361 R   |   5 relation   00130D R
  5 relop_st   001599 R   |   5 rem        0016C2 R   |   5 repl       000B0B R
  5 repl_exi   000B33 R   |   5 reprint    000A97 R   |   5 reset_co   0015B6 R
  5 rest_con   001639 R   |   5 return     0018BF R   |   5 right_ar   000A97 R
  5 rparnt_t   000D8F R   |   5 rt_msg     0006F9 R   |   5 run        0018E3 R
  5 save       001B0A R   |   5 save_con   001624 R   |   5 search_d   00116A R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

  5 search_e   0011BE R   |   5 search_f   001AC0 R   |   5 search_l   0002E0 R
  5 search_l   0002EB R   |   5 search_n   00116E R   |   1 seedx      00000D R
  1 seedy      00000F R   |   5 seek_fdr   001A37 R   |   5 sharp_ts   000DB0 R
  5 show       001364 R   |   5 single_c   001592 R   |   5 size       00137E R
  5 skip       000F85 R   |   5 slash_ts   000E10 R   |   5 sleep      001E26 R
  5 software   000506 R   |   5 spaces     0001D8 R   |   3 stack_fu   001780 R
  3 stack_un   001800 R   |   5 star_tst   000E05 R   |   5 step       0017CE R
  5 stop       00192A R   |   5 store      001006 R   |   5 store_lo   0017E0 R
  5 str_matc   00119C R   |   5 str_tst    000D36 R   |   5 strcmp     00027F R
  5 strcpy     000290 R   |   5 strlen     000272 R   |   5 substrac   001095 R
  5 syntax_e   000709 R   |   1 tab_widt   000025 R   |   5 tb_error   00070B R
  5 term       00127C R   |   5 term01     001285 R   |   5 term_exi   0012C6 R
  5 test_p     000B4A R   |   3 tib        0016C8 R   |   5 tick_tst   000DE8 R
  1 ticks      00000B R   |   5 timer4_i   0000AF R   |   5 to         00179E R
  5 to_upper   000ECD GR  |   5 token_ch   000EB1 R   |   5 token_ex   000EC1 R
  1 txtbgn     00001B R   |   1 txtend     00001D R   |   5 uart3_in   000174 R
  5 uart3_se   000180 R   |   5 uart_ena   000199 R   |   5 ubound     001388 R
  5 uflash     001DE9 R   |   5 unget_to   000F98 R   |   5 unlock_e   0000C0 R
  5 unlock_f   0000CE R   |   5 user_spa   002180 R   |   5 usr        001DF5 R
  1 vars       000026 R   |   5 wait       0016C8 R   |   5 warm_sta   00075B R
  5 words      001EDE R   |   5 write      001D04 R   |   5 write_bl   000151 R
  5 write_by   0000DC R   |   5 write_ee   000118 R   |   5 write_ex   00014C R
  5 write_fl   000102 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   218E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

