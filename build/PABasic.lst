ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           000040    44 	DSTACK_SIZE=64 
                           000080    45 	STACK_SIZE=128
                           0017FF    46 	STACK_EMPTY=RAM_SIZE-1  
                           000000    47 	FRUN=0 ; flags run code in variable flags
                           000001    48 	FTRAP=1 ; inside trap handler 
                           000002    49 	FFOR=2 ; FOR loop in preparation 
                           000003    50 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    51 	FBREAK=4 ; break point flag 
                           000005    52 	FCOMP=5  ; compiling flags 
                                     53 
      000000                         54 in.w:  .blkb 1 ; parser position in text line
      000001                         55 in:    .blkb 1 ; low byte of in.w
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000002                         56 count: .blkb 1 ; length of string in text line  
      000003                         57 basicptr:  .blkb 2  ; point to text buffer 
      000005                         58 lineno: .blkb 2  ; BASIC line number 
      000007                         59 base:  .blkb 1 ; nemeric base used to print integer 
      000008                         60 acc24: .blkb 1 ; 24 accumulator
      000009                         61 acc16: .blkb 1
      00000A                         62 acc8:  .blkb 1
      00000B                         63 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000D                         64 seedx: .blkw 1  ; xorshift 16 seed x 
      00000F                         65 seedy: .blkw 1  ; xorshift 16 seed y 
      000011                         66 in.w.saved: .blkw 1 ; set by get_token before parsing next token, used by unget_token
      000013                         67 farptr: .blkb 1 ; far pointer used by file system
      000014                         68 ptr16:  .blkb 1 ; middle byte of farptr
      000015                         69 ptr8:   .blkb 1 ; least byte of farptr 
      000016                         70 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000019                         71 dstkptr: .blkw 1  ; data stack pointer 
      00001B                         72 txtbgn: .ds 2 ; BASIC text beginning address 
      00001D                         73 txtend: .ds 2 ; BASIC text end address 
      00001F                         74 loop_depth: .ds 1 ; FOR loop depth, level of nested loop.  
      000020                         75 array_addr: .ds 2 ; address of @ array 
      000022                         76 array_size: .ds 2 ; array size 
      000024                         77 flags: .ds 1 ; boolean flags
      000025                         78 tab_width: .ds 1 ; print colon width (4)
      000026                         79 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     80 ; keep as last variable 
      00005A                         81 free_ram: ; from here RAM free for BASIC text 
                                     82 
                                     83 ;-----------------------------------
                                     84     .area SSEG (ABS)
                                     85 ;-----------------------------------	
      0016C8                         86     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         87 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         88 pad: .ds PAD_SIZE             ; working buffer
      001740                         89 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         90 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         91 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         92 stack_unf: ; stack underflow ; control_stack bottom 
                                     93 
                                     94 
                                     95 ;--------------------------------------
                                     96     .area HOME 
                                     97 ;--------------------------------------
      000000 82 00 05 1A             98     int cold_start
                           000001    99 .if DEBUG
      000004 82 00 00 0A            100 	int TrapHandler 		;TRAP  software interrupt
                           000000   101 .else
                                    102 	int NonHandledInterrupt ;TRAP  software interrupt
                                    103 .endif
      000008 82 00 00 09            104 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            105 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            106 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            107 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            108 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            109 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            110 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000024 82 00 00 25            111 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            112 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            113 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            114 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            115 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            116 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            117 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            118 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            119 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            120 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            121 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            122 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            123 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            124 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            125 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            126 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            127 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            128 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            129 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            130 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            131 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            132 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            133 	int NonHandledInterrupt ;int29  not used
                                    134 
                                    135 ;---------------------------------------
                                    136     .area CODE
                                    137 ;---------------------------------------
                           000001   138 .if DEBUG
      000000 53 54 4D 38 5F 54 42   139 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    140 .endif 
                                    141 
      000009                        142 NonHandledInterrupt:
      000009 71                     143     .byte 0x71  ; reinitialize MCU
                                    144 
                                    145 
                                    146 ;------------------------------------
                                    147 ; software interrupt handler  
                                    148 ;------------------------------------
                           000001   149 .if DEBUG 
      00000A                        150 TrapHandler:
      00000A 72 12 00 24      [ 1]  151 	bset flags,#FTRAP 
      00000E CD 08 5C         [ 4]  152 	call print_registers
      000011 CD 0A CB         [ 4]  153 	call cmd_itf
      000014 72 13 00 24      [ 1]  154 	bres flags,#FTRAP 	
      000018 80               [11]  155 	iret
                                    156 .endif 
                                    157 
      000019                        158 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  159 	clr TIM4_SR 
      00001D CE 00 0B         [ 2]  160 	ldw x,ticks
      000020 5C               [ 1]  161 	incw x
      000021 CF 00 0B         [ 2]  162 	ldw ticks,x 
      000024 80               [11]  163 	iret 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    165 
                                    166 ;------------------------------------
                                    167 ; Triggered by pressing USER UserButton 
                                    168 ; on NUCLEO card.
                                    169 ;------------------------------------
      000025                        170 UserButtonHandler:
                                    171 ; wait button release
      000025 5F               [ 1]  172 	clrw x
      000026 5A               [ 2]  173 1$: decw x 
      000027 26 FD            [ 1]  174 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  175 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    176 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 24 05   [ 2]  177     btjf flags,#FSLEEP,2$
      000033 72 17 00 24      [ 1]  178 	bres flags,#FSLEEP 
      000037 80               [11]  179 	iret
      000038 72 00 00 24 03   [ 2]  180 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  181 	jp 9$ 
      000040                        182 4$:	; program interrupted by user 
      000040 72 11 00 24      [ 1]  183 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  184 	ldw x,#USER_ABORT
      000047 CD 01 B0         [ 4]  185 	call puts 
      00004A CE 00 03         [ 2]  186 	ldw x,basicptr
      00004D FE               [ 2]  187 	ldw x,(x)
                                    188 ; print line number 
      00004E 35 0A 00 07      [ 1]  189 	mov base,#10 
      000052 35 06 00 25      [ 1]  190 	mov tab_width,#6
      000056 CD 09 4F         [ 4]  191 	call print_int  	
      000059 CE 00 03         [ 2]  192 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  193 	addw x,#3  
      00005F CD 01 B0         [ 4]  194 	call puts 
      000062 A6 0D            [ 1]  195 	ld a,#CR 
      000064 CD 01 9E         [ 4]  196 	call putc
      000067 5F               [ 1]  197 	clrw x  
      000068 C6 00 01         [ 1]  198 	ld a,in 
      00006B AB 03            [ 1]  199 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  200 	ld xl,a 
      00006E CD 01 D8         [ 4]  201 	call spaces 
      000071 A6 5E            [ 1]  202 	ld a,#'^
      000073 CD 01 9E         [ 4]  203 	call putc 
      000076                        204 9$:
      000076 AE 17 FF         [ 2]  205     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  206     ldw sp,x
      00007A 9A               [ 1]  207 	rim 
      00007B CC 07 29         [ 2]  208 	jp warm_start
                                    209 
      00007E 0A 50 72 6F 67 72 61   210 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    211 
                                    212 
                                    213 ;----------------------------------------
                                    214 ; inialize MCU clock 
                                    215 ; input:
                                    216 ;   A 		source  HSI | 1 HSE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    217 ;   XL      CLK_CKDIVR , clock divisor 
                                    218 ; output:
                                    219 ;   none 
                                    220 ;----------------------------------------
      000099                        221 clock_init:	
      000099 C1 50 C3         [ 1]  222 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  223 	jreq 2$ ; no switching required 
                                    224 ; select clock source 
      00009E 72 12 50 C5      [ 1]  225 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  226 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  227 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  228 	jrne 1$
      0000AA                        229 2$: 	
                                    230 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  231 	ld a,xl 
      0000AB C7 50 C6         [ 1]  232 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  233 	ret
                                    234 
                                    235 ;---------------------------------
                                    236 ; TIM4 is configured to generate an 
                                    237 ; interrupt every millisecond 
                                    238 ;----------------------------------
      0000AF                        239 timer4_init:
      0000AF 35 07 53 45      [ 1]  240 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B3 35 7D 53 46      [ 1]  241 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B7 35 05 53 40      [ 1]  242 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BB 72 10 53 41      [ 1]  243 	bset TIM4_IER,#TIM4_IER_UIE 
      0000BF 81               [ 4]  244 	ret
                                    245 
                                    246 ;----------------------------------
                                    247 ; unlock EEPROM for writing/erasing
                                    248 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    249 ; input:
                                    250 ;  none
                                    251 ; output:
                                    252 ;  none 
                                    253 ;----------------------------------
      0000C0                        254 unlock_eeprom:
      0000C0 35 AE 50 64      [ 1]  255 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C4 35 56 50 64      [ 1]  256     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C8 72 07 50 5F FB   [ 2]  257 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000CD 81               [ 4]  258 	ret
                                    259 
                                    260 ;----------------------------------
                                    261 ; unlock FLASH for writing/erasing
                                    262 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    263 ; input:
                                    264 ;  none
                                    265 ; output:
                                    266 ;  none
                                    267 ;----------------------------------
      0000CE                        268 unlock_flash:
      0000CE 35 56 50 62      [ 1]  269 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D2 35 AE 50 62      [ 1]  270 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000D6 72 03 50 5F FB   [ 2]  271 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000DB 81               [ 4]  272 	ret
                                    273 
                           000000   274 	BLOCK_ERASE=0
                                    275 ;----------------------------
                                    276 ; erase block code must be 
                                    277 ;executed from RAM
                                    278 ;-----------------------------
                           000000   279 .if BLOCK_ERASE 
                                    280 ; this code is copied to RAM 
                                    281 erase_start:
                                    282 	clr a 
                                    283     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    284     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    285 	ldf [farptr],a
                                    286     inc farptr+2 
                                    287     ldf [farptr],a
                                    288     inc farptr+2 
                                    289     ldf [farptr],a
                                    290     inc farptr+2 
                                    291     ldf [farptr],a
                                    292 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    293 	ret
                                    294 erase_end:
                                    295 
                                    296 ; copy erase_start in RAM 
                                    297 move_code_in_ram:
                                    298 	ldw x,#erase_end 
                                    299 	subw x,#erase_start
                                    300 	ldw acc16,x 
                                    301 	ldw x,#pad 
                                    302 	ldw y,#erase_start 
                                    303 	call move 
                                    304 	ret 
                                    305 
                                    306 ;-----------------------------------
                                    307 ; erase flash or EEPROM block 
                                    308 ; a block is 128 bytes 
                                    309 ; input:
                                    310 ;   farptr  address block begin
                                    311 ; output:
                                    312 ;   none
                                    313 ;--------------------------------------
                                    314 erase_block:
                                    315 	ldw x,farptr+1 
                                    316 	pushw x 
                                    317 	call move_code_in_ram 
                                    318 	popw x 
                                    319 	ldw farptr+1,x 
                                    320 	tnz farptr
                                    321 	jrne erase_flash 
                                    322 	ldw x,#FLASH_BASE 
                                    323 	cpw x,farptr+1 
                                    324 	jrpl erase_flash 
                                    325 ; erase eeprom block
                                    326 	call unlock_eeprom 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    327 	sim 
                                    328 	call pad   
                                    329 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    330 	rim 
                                    331 	ret 
                                    332 ; erase flash block:
                                    333 erase_flash:
                                    334 	call unlock_flash 
                                    335 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    336 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    337 	clr a 
                                    338 	sim 
                                    339 	call pad 
                                    340     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    341 	rim 
                                    342 	ret 
                                    343 .endif ; BLOCK_ERASE 
                                    344 
                                    345 
                                    346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    347 ; write a byte to FLASH or EEPROM 
                                    348 ; input:
                                    349 ;    a  		byte to write
                                    350 ;    farptr  	address
                                    351 ;    x          farptr[x]
                                    352 ; output:
                                    353 ;    none
                                    354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    355 	; variables locales
                           000001   356 	BTW = 1   ; byte to write offset on stack
                           000002   357 	OPT = 2   ; OPTION flag offset on stack
                           000002   358 	VSIZE = 2
      0000DC                        359 write_byte:
      0000DC 90 89            [ 2]  360 	pushw y
      0000DE                        361 	_vars VSIZE
      0000DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E0 6B 01            [ 1]  362 	ld (BTW,sp),a ; byte to write 
      0000E2 0F 02            [ 1]  363 	clr (OPT,sp)  ; OPTION flag
                                    364 ; put addr[15:0] in Y, for bounds check.
      0000E4 90 CE 00 14      [ 2]  365 	ldw y,farptr+1   ; Y=addr15:0
                                    366 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000E8 72 5D 00 13      [ 1]  367 	tnz farptr 
      0000EC 26 14            [ 1]  368 	jrne write_flash
      0000EE 90 A3 21 00      [ 2]  369     cpw y,#user_space
      0000F2 24 0E            [ 1]  370     jruge write_flash
      0000F4 90 A3 40 00      [ 2]  371 	cpw y,#EEPROM_BASE  
      0000F8 25 52            [ 1]  372     jrult write_exit
      0000FA 90 A3 48 00      [ 2]  373 	cpw y,#OPTION_BASE
      0000FE 25 18            [ 1]  374 	jrult write_eeprom
      000100 20 4A            [ 2]  375     jra write_exit
                                    376 ; write program memory
      000102                        377 write_flash:
      000102 CD 00 CE         [ 4]  378 	call unlock_flash 
      000105 9B               [ 1]  379 1$:	sim 
      000106 7B 01            [ 1]  380 	ld a,(BTW,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000108 92 A7 00 13      [ 4]  381 	ldf ([farptr],x),a ; farptr[x]=A
      00010C 72 05 50 5F FB   [ 2]  382 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000111 9A               [ 1]  383     rim 
      000112 72 13 50 5F      [ 1]  384     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000116 20 34            [ 2]  385     jra write_exit
                                    386 ; write eeprom and option
      000118                        387 write_eeprom:
      000118 CD 00 C0         [ 4]  388 	call unlock_eeprom
                                    389 	; check for data eeprom or option eeprom
      00011B 90 A3 48 00      [ 2]  390 	cpw y,#OPTION_BASE
      00011F 2B 08            [ 1]  391 	jrmi 1$
      000121 90 A3 48 80      [ 2]  392 	cpw y,#OPTION_END+1
      000125 2A 02            [ 1]  393 	jrpl 1$
      000127 03 02            [ 1]  394 	cpl (OPT,sp)
      000129                        395 1$: 
      000129 0D 02            [ 1]  396     tnz (OPT,sp)
      00012B 27 08            [ 1]  397     jreq 2$
                                    398 	; pour modifier une option il faut modifier ces 2 bits
      00012D 72 1E 50 5B      [ 1]  399     bset FLASH_CR2,#FLASH_CR2_OPT
      000131 72 1F 50 5C      [ 1]  400     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000135                        401 2$: 
      000135 7B 01            [ 1]  402     ld a,(BTW,sp)
      000137 92 A7 00 13      [ 4]  403     ldf ([farptr],x),a
      00013B 0D 02            [ 1]  404     tnz (OPT,sp)
      00013D 27 08            [ 1]  405     jreq 3$
      00013F 5C               [ 1]  406     incw x
      000140 7B 01            [ 1]  407     ld a,(BTW,sp)
      000142 43               [ 1]  408     cpl a
      000143 92 A7 00 13      [ 4]  409     ldf ([farptr],x),a
      000147 72 05 50 5F FB   [ 2]  410 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014C                        411 write_exit:
      00014C                        412 	_drop VSIZE 
      00014C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00014E 90 85            [ 2]  413 	popw y
      000150 81               [ 4]  414     ret
                                    415 
                                    416 ;--------------------------------------------
                                    417 ; write a data block to eeprom or flash 
                                    418 ; input:
                                    419 ;   Y        source address   
                                    420 ;   X        array index  destination  farptr[x]
                                    421 ;   BSIZE    block size bytes 
                                    422 ;   farptr   write address , byte* 
                                    423 ; output:
                                    424 ;	X 		after last byte written 
                                    425 ;   Y 		after last byte read 
                                    426 ;  farptr   point after block
                                    427 ;---------------------------------------------
      000151                        428 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000151                        429 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    430 	; local var 
                           000001   431 	XSAVE=1 
                           000002   432 	VSIZE=2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000151                        433 write_block:
      000151                        434 	_vars VSIZE
      000151 52 02            [ 2]    1     sub sp,#VSIZE 
      000153 1F 01            [ 2]  435 	ldw (XSAVE,sp),x 
      000155 1E 05            [ 2]  436 	ldw x,(BSIZE,sp) 
      000157 27 13            [ 1]  437 	jreq 9$
      000159 1E 01            [ 2]  438 1$:	ldw x,(XSAVE,sp)
      00015B 90 F6            [ 1]  439 	ld a,(y)
      00015D CD 00 DC         [ 4]  440 	call write_byte 
      000160 5C               [ 1]  441 	incw x 
      000161 90 5C            [ 1]  442 	incw y 
      000163 1F 01            [ 2]  443 	ldw (XSAVE,sp),x
      000165 1E 05            [ 2]  444 	ldw x,(BSIZE,sp)
      000167 5A               [ 2]  445 	decw x
      000168 1F 05            [ 2]  446 	ldw (BSIZE,sp),x 
      00016A 26 ED            [ 1]  447 	jrne 1$
      00016C                        448 9$:
      00016C 1E 01            [ 2]  449 	ldw x,(XSAVE,sp)
      00016E CD 19 E4         [ 4]  450 	call incr_farptr
      000171                        451 	_drop VSIZE
      000171 5B 02            [ 2]    1     addw sp,#VSIZE 
      000173 81               [ 4]  452 	ret 
                                    453 
                                    454 
                                    455 ;---------------------------------------------
                                    456 ;   UART3 subroutines
                                    457 ;---------------------------------------------
                                    458 
                                    459 ;---------------------------------------------
                                    460 ; initialize UART3, 115200 8N1
                                    461 ; input:
                                    462 ;	none
                                    463 ; output:
                                    464 ;   none
                                    465 ;---------------------------------------------
      000174                        466 uart3_init:
                                    467 	; configure tx pin
      000174 72 1A 50 11      [ 1]  468 	bset PD_DDR,#BIT5 ; tx pin
      000178 72 1A 50 12      [ 1]  469 	bset PD_CR1,#BIT5 ; push-pull output
      00017C 72 1A 50 13      [ 1]  470 	bset PD_CR2,#BIT5 ; fast output
      000180                        471 uart3_set_baud: 
                                    472 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    473 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000180 A6 E1            [ 1]  474 	ld a,#CLK_SWR_HSI
      000182 C1 50 C3         [ 1]  475 	cp a,CLK_CMSR 
      000185 27 0A            [ 1]  476 	jreq hsi_clock 
      000187                        477 hse_clock: ; 8 Mhz 	
      000187 35 05 52 43      [ 1]  478 	mov UART3_BRR2,#0x05 ; must be loaded first
      00018B 35 04 52 42      [ 1]  479 	mov UART3_BRR1,#0x4
      00018F 20 08            [ 2]  480 	jra uart_enable
      000191                        481 hsi_clock: ; 16 Mhz 	
      000191 35 0B 52 43      [ 1]  482 	mov UART3_BRR2,#0x0b ; must be loaded first
      000195 35 08 52 42      [ 1]  483 	mov UART3_BRR1,#0x08
      000199                        484 uart_enable:	
      000199 35 0C 52 45      [ 1]  485 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00019D 81               [ 4]  486 	ret
                                    487 	
                                    488 ;---------------------------------
                                    489 ; send character to UART3 
                                    490 ; input:
                                    491 ;   A 
                                    492 ; output:
                                    493 ;   none 
                                    494 ;--------------------------------	
      00019E                        495 putc:
      00019E 72 0F 52 40 FB   [ 2]  496 	btjf UART3_SR,#UART_SR_TXE,.
      0001A3 C7 52 41         [ 1]  497 	ld UART3_DR,a 
      0001A6 81               [ 4]  498 	ret 
                                    499 
                                    500 ;---------------------------------
                                    501 ; wait character from UART3 
                                    502 ; input:
                                    503 ;   none
                                    504 ; output:
                                    505 ;   A 			char  
                                    506 ;--------------------------------	
      0001A7                        507 getc:
      0001A7 72 0B 52 40 FB   [ 2]  508 	btjf UART3_SR,#UART_SR_RXNE,.
      0001AC C6 52 41         [ 1]  509 	ld a,UART3_DR 
      0001AF 81               [ 4]  510 	ret 
                                    511 
                                    512 ;-----------------------------
                                    513 ; send an ASCIZ string to UART3 
                                    514 ; input: 
                                    515 ;   x 		char * 
                                    516 ; output:
                                    517 ;   none 
                                    518 ;-------------------------------
      0001B0                        519 puts:
      0001B0 F6               [ 1]  520     ld a,(x)
      0001B1 27 06            [ 1]  521 	jreq 1$
      0001B3 CD 01 9E         [ 4]  522 	call putc 
      0001B6 5C               [ 1]  523 	incw x 
      0001B7 20 F7            [ 2]  524 	jra puts 
      0001B9 81               [ 4]  525 1$:	ret 
                                    526 
                                    527 
                                    528 ;---------------------------
                                    529 ; delete character at left 
                                    530 ; of cursor on terminal 
                                    531 ; input:
                                    532 ;   none 
                                    533 ; output:
                                    534 ;	none 
                                    535 ;---------------------------
      0001BA                        536 bksp:
      0001BA A6 08            [ 1]  537 	ld a,#BSP 
      0001BC CD 01 9E         [ 4]  538 	call putc 
      0001BF A6 20            [ 1]  539 	ld a,#SPACE 
      0001C1 CD 01 9E         [ 4]  540 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001C4 A6 08            [ 1]  541 	ld a,#BSP 
      0001C6 CD 01 9E         [ 4]  542 	call putc 
      0001C9 81               [ 4]  543 	ret 
                                    544 ;---------------------------
                                    545 ; delete n character left of cursor 
                                    546 ; at terminal.
                                    547 ; input: 
                                    548 ;   A   	number of characters to delete.
                                    549 ; output:
                                    550 ;    none 
                                    551 ;--------------------------	
      0001CA                        552 delete:
      0001CA 88               [ 1]  553 	push a 
      0001CB 0D 01            [ 1]  554 0$:	tnz (1,sp)
      0001CD 27 07            [ 1]  555 	jreq 1$
      0001CF CD 01 BA         [ 4]  556 	call bksp 
      0001D2 0A 01            [ 1]  557 	dec (1,sp)
      0001D4 20 F5            [ 2]  558 	jra 0$
      0001D6 84               [ 1]  559 1$:	pop a 
      0001D7 81               [ 4]  560 	ret
                                    561 
                                    562 ;--------------------------
                                    563 ; print n spaces on terminal
                                    564 ; input:
                                    565 ;  X 		number of spaces 
                                    566 ; output:
                                    567 ;	none 
                                    568 ;---------------------------
      0001D8                        569 spaces:
      0001D8 A6 20            [ 1]  570 	ld a,#SPACE 
      0001DA 5D               [ 2]  571 1$:	tnzw x
      0001DB 27 06            [ 1]  572 	jreq 9$
      0001DD CD 01 9E         [ 4]  573 	call putc 
      0001E0 5A               [ 2]  574 	decw x
      0001E1 20 F7            [ 2]  575 	jra 1$
      0001E3                        576 9$: 
      0001E3 81               [ 4]  577 	ret 
                                    578 
                           000001   579 .if DEBUG 
                                    580 ;---------------------------------
                                    581 ;; print actual registers states 
                                    582 ;; as pushed on stack 
                                    583 ;; {Y,X,CC,A}
                                    584 ;---------------------------------
      0001E4                        585 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001E4                        586 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001E4                        587 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001E4                        588 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001E4                        589 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001E4                        590 prt_regs:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4 AE 02 27         [ 2]  591 	ldw x,#regs_state 
      0001E7 CD 01 B0         [ 4]  592 	call puts
                                    593 ; register PC
      0001EA 16 01            [ 2]  594 	ldw y,(1,sp)
      0001EC AE 08 EC         [ 2]  595 	ldw x,#REG_EPC 
      0001EF CD 08 3D         [ 4]  596 	call prt_reg16 
                                    597 ; register CC 
      0001F2 7B 08            [ 1]  598 	ld a,(R_CC,sp)
      0001F4 AE 08 FD         [ 2]  599 	ldw x,#REG_CC 
      0001F7 CD 08 18         [ 4]  600 	call prt_reg8 
                                    601 ; register A 
      0001FA 7B 07            [ 1]  602 	ld a,(R_A,sp)
      0001FC AE 08 F9         [ 2]  603 	ldw x,#REG_A 
      0001FF CD 08 18         [ 4]  604 	call prt_reg8 
                                    605 ; register X 
      000202 16 05            [ 2]  606 	ldw y,(R_X,sp)
      000204 AE 08 F5         [ 2]  607 	ldw x,#REG_X 
      000207 CD 08 3D         [ 4]  608 	call prt_reg16 
                                    609 ; register Y 
      00020A 16 03            [ 2]  610 	ldw y,(R_Y,sp)
      00020C AE 08 F1         [ 2]  611 	ldw x,#REG_Y 
      00020F CD 08 3D         [ 4]  612 	call prt_reg16 
                                    613 ; register SP 
      000212 90 96            [ 1]  614 	ldw y,sp
      000214 72 A9 00 08      [ 2]  615 	addw y,#6+ARG_OFS  
      000218 AE 09 02         [ 2]  616 	ldw x,#REG_SP
      00021B CD 08 3D         [ 4]  617 	call prt_reg16
      00021E A6 0D            [ 1]  618 	ld a,#CR 
      000220 CD 01 9E         [ 4]  619 	call putc
      000223 CD 01 9E         [ 4]  620 	call putc   
      000226 81               [ 4]  621 	ret 
                                    622 
      000227 0A 72 65 67 69 73 74   623 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    624 
                                    625 
                                    626 ;--------------------
                                    627 ; print content at address in hex.
                                    628 ; input:
                                    629 ;   X 	address to peek 
                                    630 ; output:
                                    631 ;	none 
                                    632 ;--------------------	
      00024E                        633 prt_peek:
      00024E 89               [ 2]  634 	pushw x 
      00024F CF 00 09         [ 2]  635 	ldw acc16,x 
      000252 72 5F 00 08      [ 1]  636 	clr acc24 
      000256 5F               [ 1]  637 	clrw x 
      000257 A6 10            [ 1]  638 	ld a,#16 
      000259 CD 09 07         [ 4]  639 	call prti24 
      00025C A6 3A            [ 1]  640 	ld a,#': 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025E CD 01 9E         [ 4]  641 	call putc 
      000261 A6 20            [ 1]  642 	ld a,#SPACE 
      000263 CD 01 9E         [ 4]  643 	call putc 
      000266 85               [ 2]  644 	popw x 
      000267 F6               [ 1]  645 	ld a,(x)
      000268 C7 00 0A         [ 1]  646 	ld acc8,a 
      00026B 5F               [ 1]  647 	clrw x 
      00026C A6 10            [ 1]  648 	ld a,#16 
      00026E CD 09 07         [ 4]  649 	call prti24
      000271 81               [ 4]  650 	ret 
                                    651 .endif ; DEBUG  
                                    652 
                                    653 ;-------------------------------------
                                    654 ; retrun string length
                                    655 ; input:
                                    656 ;   X         .asciz  
                                    657 ; output:
                                    658 ;   X         length 
                                    659 ;-------------------------------------
      000272                        660 strlen:
      000272 90 93            [ 1]  661 	ldw y,x 
      000274 5F               [ 1]  662 	clrw x 
      000275 90 7D            [ 1]  663 1$:	tnz (y) 
      000277 27 05            [ 1]  664 	jreq 9$ 
      000279 5C               [ 1]  665 	incw x
      00027A 90 5C            [ 1]  666 	incw y 
      00027C 20 F7            [ 2]  667 	jra 1$ 
      00027E 81               [ 4]  668 9$: ret 
                                    669 
                                    670 ;------------------------------------
                                    671 ; compare 2 strings
                                    672 ; input:
                                    673 ;   X 		char* first string 
                                    674 ;   Y       char* second string 
                                    675 ; output:
                                    676 ;   A 		0|1 
                                    677 ;-------------------------------------
      00027F                        678 strcmp:
      00027F F6               [ 1]  679 	ld a,(x)
      000280 27 0B            [ 1]  680 	jreq 5$ 
      000282 90 F1            [ 1]  681 	cp a,(y) 
      000284 26 05            [ 1]  682 	jrne 4$ 
      000286 5C               [ 1]  683 	incw x 
      000287 90 5C            [ 1]  684 	incw y 
      000289 20 F4            [ 2]  685 	jra strcmp 
      00028B                        686 4$: ; not same  
      00028B 4F               [ 1]  687 	clr a 
      00028C 81               [ 4]  688 	ret 
      00028D                        689 5$: ; same 
      00028D A6 01            [ 1]  690 	ld a,#1 
      00028F 81               [ 4]  691 	ret 
                                    692 
                                    693 
                                    694 ;---------------------------------------
                                    695 ;  copy src to dest 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    696 ; input:
                                    697 ;   X 		dest 
                                    698 ;   Y 		src 
                                    699 ; output: 
                                    700 ;   X 		dest 
                                    701 ;----------------------------------
      000290                        702 strcpy:
      000290 89               [ 2]  703 	pushw x 
      000291 90 F6            [ 1]  704 1$: ld a,(y)
      000293 27 06            [ 1]  705 	jreq 9$ 
      000295 F7               [ 1]  706 	ld (x),a 
      000296 5C               [ 1]  707 	incw x 
      000297 90 5C            [ 1]  708 	incw y 
      000299 20 F6            [ 2]  709 	jra 1$ 
      00029B 7F               [ 1]  710 9$:	clr (x)
      00029C 85               [ 2]  711 	popw x 
      00029D 81               [ 4]  712 	ret 
                                    713 
                                    714 ;---------------------------------------
                                    715 ; move memory block 
                                    716 ; input:
                                    717 ;   X 		destination 
                                    718 ;   Y 	    source 
                                    719 ;   acc16	size 
                                    720 ; output:
                                    721 ;   none 
                                    722 ;--------------------------------------
                           000001   723 	INCR=1 ; increament high byte 
                           000002   724 	LB=2 ; increament low byte 
                           000002   725 	VSIZE=2
      00029E                        726 move:
      00029E                        727 	_vars VSIZE 
      00029E 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A0 0F 01            [ 1]  728 	clr (INCR,sp)
      0002A2 0F 02            [ 1]  729 	clr (LB,sp)
      0002A4 90 89            [ 2]  730 	pushw y 
      0002A6 13 01            [ 2]  731 	cpw x,(1,sp) ; compare DEST to SRC 
      0002A8 90 85            [ 2]  732 	popw y 
      0002AA 27 31            [ 1]  733 	jreq move_exit ; x==y 
      0002AC 2B 0E            [ 1]  734 	jrmi move_down
      0002AE                        735 move_up: ; start from top address with incr=-1
      0002AE 72 BB 00 09      [ 2]  736 	addw x,acc16
      0002B2 72 B9 00 09      [ 2]  737 	addw y,acc16
      0002B6 03 01            [ 1]  738 	cpl (INCR,sp)
      0002B8 03 02            [ 1]  739 	cpl (LB,sp)   ; increment = -1 
      0002BA 20 05            [ 2]  740 	jra move_loop  
      0002BC                        741 move_down: ; start from bottom address with incr=1 
      0002BC 5A               [ 2]  742     decw x 
      0002BD 90 5A            [ 2]  743 	decw y
      0002BF 0C 02            [ 1]  744 	inc (LB,sp) ; incr=1 
      0002C1                        745 move_loop:	
      0002C1 C6 00 09         [ 1]  746     ld a, acc16 
      0002C4 CA 00 0A         [ 1]  747 	or a, acc8
      0002C7 27 14            [ 1]  748 	jreq move_exit 
      0002C9 72 FB 01         [ 2]  749 	addw x,(INCR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002CC 72 F9 01         [ 2]  750 	addw y,(INCR,sp) 
      0002CF 90 F6            [ 1]  751 	ld a,(y)
      0002D1 F7               [ 1]  752 	ld (x),a 
      0002D2 89               [ 2]  753 	pushw x 
      0002D3 CE 00 09         [ 2]  754 	ldw x,acc16 
      0002D6 5A               [ 2]  755 	decw x 
      0002D7 CF 00 09         [ 2]  756 	ldw acc16,x 
      0002DA 85               [ 2]  757 	popw x 
      0002DB 20 E4            [ 2]  758 	jra move_loop
      0002DD                        759 move_exit:
      0002DD                        760 	_drop VSIZE
      0002DD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002DF 81               [ 4]  761 	ret 	
                                    762 
                                    763 ;-------------------------------------
                                    764 ; search text area for a line with 
                                    765 ; same number as lineno  
                                    766 ; input:
                                    767 ;	X 			lineno 
                                    768 ; output:
                                    769 ;   X 			addr of line | 0 
                                    770 ;   Y           lineno|insert address if not found  
                                    771 ;-------------------------------------
                           000001   772 	LL=1 ; line length 
                           000002   773 	LB=2 ; line length low byte 
                           000002   774 	VSIZE=2 
      0002E0                        775 search_lineno:
      0002E0                        776 	_vars VSIZE
      0002E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E2 CF 00 09         [ 2]  777 	ldw acc16,x 
      0002E5 0F 01            [ 1]  778 	clr (LL,sp)
      0002E7 90 CE 00 1B      [ 2]  779 	ldw y,txtbgn
      0002EB                        780 search_ln_loop:
      0002EB 90 C3 00 1D      [ 2]  781 	cpw y,txtend 
      0002EF 2A 13            [ 1]  782 	jrpl 8$
      0002F1 93               [ 1]  783 	ldw x,y 
      0002F2 FE               [ 2]  784 	ldw x,(x) ; x=line number 
      0002F3 C3 00 09         [ 2]  785 	cpw x,acc16 
      0002F6 27 0F            [ 1]  786 	jreq 9$ 
      0002F8 2A 0A            [ 1]  787 	jrpl 8$ ; from here all lines are > lineno 
      0002FA 90 E6 02         [ 1]  788 	ld a,(2,y)
      0002FD 6B 02            [ 1]  789 	ld (LB,sp),a 
      0002FF 72 F9 01         [ 2]  790 	addw y,(LL,sp)
      000302 20 E7            [ 2]  791 	jra search_ln_loop 
      000304 51               [ 1]  792 8$: exgw x,y 
      000305 90 5F            [ 1]  793 	clrw y 	
      000307                        794 9$: _drop VSIZE
      000307 5B 02            [ 2]    1     addw sp,#VSIZE 
      000309 51               [ 1]  795 	exgw x,y   
      00030A 81               [ 4]  796 	ret 
                                    797 
                                    798 ;-------------------------------------
                                    799 ; delete line at addr
                                    800 ; input:
                                    801 ;   X 		addr of line i.e DEST for move 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    802 ;-------------------------------------
                           000001   803 	LLEN=1
                           000003   804 	SRC=3
                           000004   805 	VSIZE=4
      00030B                        806 del_line: 
      00030B                        807 	_vars VSIZE 
      00030B 52 04            [ 2]    1     sub sp,#VSIZE 
      00030D E6 02            [ 1]  808 	ld a,(2,x) ; line length
      00030F 6B 02            [ 1]  809 	ld (LLEN+1,sp),a 
      000311 0F 01            [ 1]  810 	clr (LLEN,sp)
      000313 90 93            [ 1]  811 	ldw y,x  
      000315 72 F9 01         [ 2]  812 	addw y,(LLEN,sp) ;SRC  
      000318 17 03            [ 2]  813 	ldw (SRC,sp),y  ;save source 
      00031A 90 CE 00 1D      [ 2]  814 	ldw y,txtend 
      00031E 72 F2 03         [ 2]  815 	subw y,(SRC,sp) ; y=count 
      000321 90 CF 00 09      [ 2]  816 	ldw acc16,y 
      000325 16 03            [ 2]  817 	ldw y,(SRC,sp)    ; source
      000327 CD 02 9E         [ 4]  818 	call move
      00032A 90 CE 00 1D      [ 2]  819 	ldw y,txtend 
      00032E 72 F2 01         [ 2]  820 	subw y,(LLEN,sp)
      000331 90 CF 00 1D      [ 2]  821 	ldw txtend,y  
      000335                        822 	_drop VSIZE     
      000335 5B 04            [ 2]    1     addw sp,#VSIZE 
      000337 81               [ 4]  823 	ret 
                                    824 
                                    825 
                                    826 ;---------------------------------------------
                                    827 ; create a gap in text area 
                                    828 ; input:
                                    829 ;    X 			addr gap start 
                                    830 ;    Y 			gap length 
                                    831 ; output:
                                    832 ;    X 			addr gap start 
                                    833 ;--------------------------------------------
                           000001   834 	DEST=1
                           000003   835 	SRC=3
                           000005   836 	LEN=5
                           000006   837 	VSIZE=6 
      000338                        838 create_gap:
      000338                        839 	_vars VSIZE
      000338 52 06            [ 2]    1     sub sp,#VSIZE 
      00033A C3 00 1D         [ 2]  840 	cpw x,txtend 
      00033D 2A 27            [ 1]  841 	jrpl 9$ ; no need for a gap since at end of text.
      00033F 1F 03            [ 2]  842 	ldw (SRC,sp),x 
      000341 17 05            [ 2]  843 	ldw (LEN,sp),y 
      000343 90 CF 00 09      [ 2]  844 	ldw acc16,y 
      000347 90 93            [ 1]  845 	ldw y,x ; SRC
      000349 72 BB 00 09      [ 2]  846 	addw x,acc16  
      00034D 1F 01            [ 2]  847 	ldw (DEST,sp),x 
                                    848 ;compute size to move 	
      00034F CE 00 1D         [ 2]  849 	ldw x,txtend 
      000352 72 F0 03         [ 2]  850 	subw x,(SRC,sp)
      000355 CF 00 09         [ 2]  851 	ldw acc16,x
      000358 1E 01            [ 2]  852 	ldw x,(DEST,sp) 
      00035A CD 02 9E         [ 4]  853 	call move
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00035D CE 00 1D         [ 2]  854 	ldw x,txtend
      000360 72 FB 05         [ 2]  855 	addw x,(LEN,sp)
      000363 CF 00 1D         [ 2]  856 	ldw txtend,x
      000366                        857 9$:	_drop VSIZE 
      000366 5B 06            [ 2]    1     addw sp,#VSIZE 
      000368 81               [ 4]  858 	ret 
                                    859 
                                    860 
                                    861 ;--------------------------------------------
                                    862 ; insert line in tib into text area 
                                    863 ; first search for already existing 
                                    864 ; replace existing 
                                    865 ; if strlen(tib)==0 delete existing 
                                    866 ; input:
                                    867 ;   ptr16 				pointer to tokenized line  
                                    868 ; output:
                                    869 ;   none
                                    870 ;---------------------------------------------
                           000001   871 	DEST=1  ; text area insertion address 
                           000003   872 	SRC=3   ; str to insert address 
                           000005   873 	LINENO=5 ; line number 
                           000007   874 	LLEN=7 ; line length 
                           000008   875 	VSIZE=8  
      000369                        876 insert_line:
      000369                        877 	_vars VSIZE 
      000369 52 08            [ 2]    1     sub sp,#VSIZE 
      00036B CE 00 14         [ 2]  878 	ldw x,ptr16  
      00036E C3 00 1B         [ 2]  879 	cpw x,txtbgn 
      000371 26 12            [ 1]  880 	jrne 0$
      000373 AE 00 02         [ 2]  881 	ldw x,#2 
      000376 72 D6 00 14      [ 4]  882 	ld a,([ptr16],x)
      00037A 5F               [ 1]  883 	clrw x 
      00037B 97               [ 1]  884 	ld xl,a 
      00037C 72 BB 00 1D      [ 2]  885 	addw x,txtend 
      000380 CF 00 1D         [ 2]  886 	ldw txtend,x 
      000383 20 64            [ 2]  887 	jra insert_ln_exit 
      000385 72 CE 00 14      [ 5]  888 0$:	ldw x,[ptr16]
      000389 1F 05            [ 2]  889 	ldw (LINENO,sp),x 
      00038B AE 00 02         [ 2]  890 	ldw x,#2 
      00038E 72 D6 00 14      [ 4]  891 	ld a,([ptr16],x); line length 
      000392 97               [ 1]  892 	ld xl,a
      000393 1F 07            [ 2]  893 	ldw (LLEN,sp),x
      000395 1E 05            [ 2]  894 	ldw x,(LINENO,sp)
      000397 CD 02 E0         [ 4]  895 	call search_lineno 
      00039A 5D               [ 2]  896 	tnzw x 
      00039B 26 04            [ 1]  897 	jrne 2$
                                    898 ; line doesn't exit 	
      00039D 17 01            [ 2]  899 	ldw (DEST,sp),y 
      00039F 20 05            [ 2]  900 	jra 3$
                                    901 ; line exit delete it.	
      0003A1 1F 01            [ 2]  902 2$: ldw (DEST,sp),x 
      0003A3 CD 03 0B         [ 4]  903 	call del_line
                                    904 ; leave or insert new line if LLEN>0
      0003A6                        905 3$: 
      0003A6 0D 08            [ 1]  906 	tnz (LLEN+1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003A8 27 3F            [ 1]  907 	jreq insert_ln_exit ; empty line forget it.
      0003AA 1E 01            [ 2]  908 	ldw x,(DEST,sp)
      0003AC C3 00 1D         [ 2]  909 	cpw x,txtend 
      0003AF 2A 12            [ 1]  910 	jrpl 4$ 
                                    911 ; must create a gap 
      0003B1 CE 00 1D         [ 2]  912 	ldw x,txtend 
      0003B4 72 FB 07         [ 2]  913 	addw x,(LLEN,sp)
      0003B7 CF 00 1D         [ 2]  914 	ldw txtend,x 
      0003BA 1E 01            [ 2]  915 	ldw x,(DEST,sp)
      0003BC 16 07            [ 2]  916 	ldw y,(LLEN,sp)
      0003BE CD 03 38         [ 4]  917 	call create_gap 
      0003C1 20 0B            [ 2]  918 	jra 5$ 
      0003C3                        919 4$: ; leave line at end. 
      0003C3 CE 00 1D         [ 2]  920 	ldw x,txtend 
      0003C6 72 FB 07         [ 2]  921 	addw x,(LLEN,sp)
      0003C9 CF 00 1D         [ 2]  922 	ldw txtend,x 
      0003CC 20 1B            [ 2]  923 	jra insert_ln_exit 
      0003CE                        924 5$:	
      0003CE 1E 07            [ 2]  925 	ldw x,(LLEN,sp)
      0003D0 CF 00 09         [ 2]  926 	ldw acc16,x 
      0003D3 90 CE 00 14      [ 2]  927 	ldw y,ptr16 
      0003D7 72 F9 07         [ 2]  928 	addw y,(LLEN,sp)
      0003DA 1E 01            [ 2]  929 	ldw x,(DEST,sp) ; dest address 
      0003DC CD 02 9E         [ 4]  930 	call move 
      0003DF CE 00 1D         [ 2]  931 	ldw x,txtend 
      0003E2 72 F0 07         [ 2]  932 	subw x,(LLEN,sp)
      0003E5 CF 00 1D         [ 2]  933 	ldw txtend,x
      0003E8 7F               [ 1]  934 	clr (x) 
      0003E9                        935 insert_ln_exit:	
      0003E9                        936 	_drop VSIZE
      0003E9 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003EB 81               [ 4]  937 	ret
                                    938 
                                    939 
                                    940 ;-----------------------------
                                    941 ; check if text buffer full
                                    942 ; input:
                                    943 ;   ptr16     addr start tokenize line 
                                    944 ;   X         buffer index 
                                    945 ; output:
                                    946 ;   none 
                                    947 ;-----------------------------------
      0003EC                        948 check_full:
      0003EC 72 BB 00 14      [ 2]  949 	addw x,ptr16 
      0003F0 A3 16 C8         [ 2]  950 	cpw x,#tib 
      0003F3 25 05            [ 1]  951 	jrult 1$
      0003F5 A6 01            [ 1]  952 	ld a,#ERR_MEM_FULL
      0003F7 CC 06 D9         [ 2]  953 	jp tb_error 
      0003FA 81               [ 4]  954 1$: ret 
                                    955 
                                    956 
                                    957 ;-----------------------------------
                                    958 ; create token list form text line 
                                    959 ; save this list in text area
                                    960 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    961 ;   none
                                    962 ; output:
                                    963 ;   basicptr     token list buffer
                                    964 ;   lineno 		 BASIC line number 
                                    965 ;   in.w  		 cleared 
                                    966 ;-----------------------------------
                                    967 	.macro _incr_ptr16 n 
                                    968 	ldw x,#n 
                                    969 	addw x,ptr16 
                                    970 	ldw ptr16,x 
                                    971 	.endm 
                                    972 
                           000001   973 	XSAVE=1
                           000003   974 	BUFIDX=3
                           000004   975 	VSIZE=4
      0003FB                        976 compile:
      0003FB                        977 	_vars VSIZE 
      0003FB 52 04            [ 2]    1     sub sp,#VSIZE 
      0003FD 72 1A 00 24      [ 1]  978 	bset flags,#FCOMP 
      000401 CE 00 1D         [ 2]  979 	ldw x,txtend
      000404 CF 00 14         [ 2]  980 	ldw ptr16,x 
      000407 5F               [ 1]  981 	clrw x 
      000408 AE 00 03         [ 2]  982 	ldw x,#3
      00040B 1F 03            [ 2]  983 	ldw (BUFIDX,sp),X  
      00040D CD 03 EC         [ 4]  984 	call check_full
      000410 5F               [ 1]  985 	clrw x 
      000411 72 CF 00 14      [ 5]  986 	ldw [ptr16],x 
      000415 CD 0C E7         [ 4]  987 	call get_token
      000418 1F 01            [ 2]  988 	ldw (XSAVE,sp),x 
      00041A A1 02            [ 1]  989 	cp a,#TK_INTGR 
      00041C 26 11            [ 1]  990 	jrne 3$
      00041E A3 00 00         [ 2]  991 	cpw x,#0  
      000421 22 03            [ 1]  992 	jrugt 1$
      000423 CC 06 D7         [ 2]  993 	jp syntax_error 
      000426 72 CF 00 14      [ 5]  994 1$:	ldw [ptr16],x; line number
      00042A CD 0C E7         [ 4]  995 2$:	call get_token
      00042D 1F 01            [ 2]  996 	ldw (XSAVE,sp),x 
      00042F A1 00            [ 1]  997 3$:	cp a,#TK_NONE 
      000431 27 4E            [ 1]  998 	jreq 9$ 
      000433 1E 03            [ 2]  999 	ldw x,(BUFIDX,sp)
      000435 CD 03 EC         [ 4] 1000 	call check_full 
      000438 16 03            [ 2] 1001 	ldw y,(BUFIDX,sp) 
      00043A 91 D7 14         [ 4] 1002 	ld ([ptr16],y),a 
      00043D 90 5C            [ 1] 1003 	incw y
      00043F 17 03            [ 2] 1004 	ldw (BUFIDX,sp),y
      000441 A1 08            [ 1] 1005 	cp a,#TK_QSTR 
      000443 26 25            [ 1] 1006 	jrne 4$
      000445 AE 17 18         [ 2] 1007 	ldw x,#pad 
      000448 CD 02 72         [ 4] 1008 	call strlen
      00044B 5C               [ 1] 1009 	incw x  
      00044C CD 03 EC         [ 4] 1010 	call check_full 
      00044F 90 AE 17 18      [ 2] 1011 	ldw y,#pad 
      000453 CE 00 14         [ 2] 1012 	ldw x,ptr16
      000456 72 FB 03         [ 2] 1013 	addw x,(BUFIDX,sp)	
      000459 CD 02 90         [ 4] 1014 	call strcpy 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00045C AE 17 18         [ 2] 1015 	ldw x,#pad 
      00045F CD 02 72         [ 4] 1016 	call strlen 
      000462 5C               [ 1] 1017 	incw x
      000463 72 FB 03         [ 2] 1018 	addw x,(BUFIDX,sp) 
      000466 1F 03            [ 2] 1019 	ldw (BUFIDX,sp),x
      000468 20 C0            [ 2] 1020 	jra 2$  
      00046A A1 02            [ 1] 1021 4$: cp a,#TK_INTGR
      00046C 25 BC            [ 1] 1022 	jrult 2$
      00046E A1 07            [ 1] 1023 	cp a,#TK_FUNC 
      000470 22 B8            [ 1] 1024 	Jrugt 2$
      000472 1E 01            [ 2] 1025 	ldw x,(XSAVE,sp) 
      000474 16 03            [ 2] 1026 	ldw y,(BUFIDX,sp)
      000476 91 DF 14         [ 5] 1027 	ldw ([ptr16],y),x
      000479 72 A9 00 02      [ 2] 1028 	addw y,#2 
      00047D 17 03            [ 2] 1029 	ldw (BUFIDX,sp),y 
      00047F 20 A9            [ 2] 1030 	jra 2$
      000481                       1031 9$: 
      000481 AE 00 02         [ 2] 1032 	ldw x,#2
      000484 16 03            [ 2] 1033 	ldw y,(BUFIDX,sp)
      000486 90 9F            [ 1] 1034 	ld a,yl 
      000488 72 D7 00 14      [ 4] 1035 	ld ([ptr16],x),a  	
      00048C 72 CE 00 14      [ 5] 1036 	ldw x,[ptr16]
      000490 27 09            [ 1] 1037 	jreq 10$
      000492 CD 03 69         [ 4] 1038 	call insert_line
      000495 72 5F 00 02      [ 1] 1039 	clr  count 
      000499 20 13            [ 2] 1040 	jra  11$ 
      00049B                       1041 10$: 
      00049B CE 00 14         [ 2] 1042 	ldw x,ptr16 
      00049E CF 00 03         [ 2] 1043 	ldw basicptr,x 
      0004A1 E6 02            [ 1] 1044 	ld a,(2,x)
      0004A3 C7 00 02         [ 1] 1045 	ld count,a 
      0004A6 FE               [ 2] 1046 	ldw x,(x)
      0004A7 CF 00 05         [ 2] 1047 	ldw lineno,x 
      0004AA 35 03 00 01      [ 1] 1048 	mov in,#3 
      0004AE                       1049 11$:
      0004AE                       1050 	_drop VSIZE 
      0004AE 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004B0 72 1B 00 24      [ 1] 1051 	bres flags,#FCOMP 
      0004B4 81               [ 4] 1052 	ret 
                                   1053 
                                   1054 
                                   1055 ;------------------------------------
                                   1056 ;  set all variables to zero 
                                   1057 ; input:
                                   1058 ;   none 
                                   1059 ; output:
                                   1060 ;	none
                                   1061 ;------------------------------------
      0004B5                       1062 clear_vars:
      0004B5 AE 00 26         [ 2] 1063 	ldw x,#vars 
      0004B8 90 AE 00 34      [ 2] 1064 	ldw y,#2*26 
      0004BC 7F               [ 1] 1065 1$:	clr (x)
      0004BD 5C               [ 1] 1066 	incw x 
      0004BE 90 5A            [ 2] 1067 	decw y 
      0004C0 26 FA            [ 1] 1068 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004C2 81               [ 4] 1069 	ret 
                                   1070 
                                   1071 ;-------------------------------------
                                   1072 ; check if A is a letter
                                   1073 ; input:
                                   1074 ;   A 			character to test 
                                   1075 ; output:
                                   1076 ;   C flag      1 true, 0 false 
                                   1077 ;-------------------------------------
      0004C3                       1078 is_alpha:
      0004C3 A1 41            [ 1] 1079 	cp a,#'A 
      0004C5 8C               [ 1] 1080 	ccf
      0004C6 24 0B            [ 1] 1081 	jrnc 9$ 
      0004C8 A1 5B            [ 1] 1082 	cp a,#'Z+1 
      0004CA 25 07            [ 1] 1083 	jrc 9$ 
      0004CC A1 61            [ 1] 1084 	cp a,#'a 
      0004CE 8C               [ 1] 1085 	ccf 
      0004CF 24 02            [ 1] 1086 	jrnc 9$
      0004D1 A1 7B            [ 1] 1087 	cp a,#'z+1   
      0004D3 81               [ 4] 1088 9$: ret 	
                                   1089 
                                   1090 ;-------------------------------------
                                   1091 ;  program initialization entry point 
                                   1092 ;-------------------------------------
                           000001  1093 	MAJOR=1
                           000000  1094 	MINOR=0
      0004D4 0A 0A 54 69 6E 79 20  1095 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00051A                       1096 cold_start:
                                   1097 ;set stack 
      00051A AE 17 FF         [ 2] 1098 	ldw x,#STACK_EMPTY
      00051D 94               [ 1] 1099 	ldw sp,x   
                                   1100 ; clear all ram 
      00051E 7F               [ 1] 1101 0$: clr (x)
      00051F 5A               [ 2] 1102 	decw x 
      000520 26 FC            [ 1] 1103 	jrne 0$
                                   1104 ; activate pull up on all inputs 
      000522 A6 FF            [ 1] 1105 	ld a,#255 
      000524 C7 50 03         [ 1] 1106 	ld PA_CR1,a 
      000527 C7 50 08         [ 1] 1107 	ld PB_CR1,a 
      00052A C7 50 0D         [ 1] 1108 	ld PC_CR1,a 
      00052D C7 50 12         [ 1] 1109 	ld PD_CR1,a 
      000530 C7 50 17         [ 1] 1110 	ld PE_CR1,a 
      000533 C7 50 1C         [ 1] 1111 	ld PF_CR1,a 
      000536 C7 50 21         [ 1] 1112 	ld PG_CR1,a 
      000539 C7 50 2B         [ 1] 1113 	ld PI_CR1,a 
                                   1114 ; select internal clock no divisor: 16 Mhz 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00053C A6 E1            [ 1] 1115 	ld a,#CLK_SWR_HSI 
      00053E 5F               [ 1] 1116 	clrw x  
      00053F CD 00 99         [ 4] 1117     call clock_init 
      000542 CD 00 AF         [ 4] 1118 	call timer4_init
                                   1119 ; UART3 at 115200 BAUD
      000545 CD 01 74         [ 4] 1120 	call uart3_init
                                   1121 ; activate PE_4 (user button interrupt)
      000548 72 18 50 18      [ 1] 1122     bset PE_CR2,#USR_BTN_BIT 
                                   1123 ; display system information
      00054C AE 04 D4         [ 2] 1124 	ldw x,#software 
      00054F CD 01 B0         [ 4] 1125 	call puts 
      000552 A6 01            [ 1] 1126 	ld a,#MAJOR 
      000554 C7 00 0A         [ 1] 1127 	ld acc8,a 
      000557 5F               [ 1] 1128 	clrw x 
      000558 CF 00 08         [ 2] 1129 	ldw acc24,x 
      00055B A6 0A            [ 1] 1130 	ld a,#10 
      00055D CD 09 07         [ 4] 1131 	call prti24 
      000560 A6 2E            [ 1] 1132 	ld a,#'.
      000562 CD 01 9E         [ 4] 1133 	call putc 
      000565 A6 00            [ 1] 1134 	ld a,#MINOR 
      000567 C7 00 0A         [ 1] 1135 	ld acc8,a 
      00056A 5F               [ 1] 1136 	clrw x 
      00056B CF 00 08         [ 2] 1137 	ldw acc24,x 
      00056E A6 0A            [ 1] 1138 	ld a,#10 
      000570 CD 09 07         [ 4] 1139 	call prti24 
      000573 A6 0D            [ 1] 1140 	ld a,#CR 
      000575 CD 01 9E         [ 4] 1141 	call putc 
      000578 CD 19 F2         [ 4] 1142 	call seek_fdrive 
                                   1143 ; configure LED2 pin 
      00057B 72 1A 50 0D      [ 1] 1144     bset PC_CR1,#LED2_BIT
      00057F 72 1A 50 0E      [ 1] 1145     bset PC_CR2,#LED2_BIT
      000583 72 1A 50 0C      [ 1] 1146     bset PC_DDR,#LED2_BIT
      000587 9A               [ 1] 1147 	rim 
      000588 AE 16 C8         [ 2] 1148 	ldw x,#tib
      00058B CF 00 20         [ 2] 1149 	ldw array_addr,x 
      00058E 72 5C 00 10      [ 1] 1150 	inc seedy+1 
      000592 72 5C 00 0E      [ 1] 1151 	inc seedx+1 
      000596 CD 05 A5         [ 4] 1152 	call clear_basic
      000599 CD 13 63         [ 4] 1153 	call ubound 
      00059C CD 0F 87         [ 4] 1154 	call dpop 
      00059F CF 00 22         [ 2] 1155 	ldw array_size,x 
      0005A2 CC 07 29         [ 2] 1156     jp warm_start 
                                   1157 
                                   1158 ;---------------------------
                                   1159 ; reset BASIC text variables 
                                   1160 ; and clear variables 
                                   1161 ;---------------------------
      0005A5                       1162 clear_basic:
      0005A5 5F               [ 1] 1163 	clrw x 
      0005A6 CF 00 05         [ 2] 1164 	ldw lineno,x
      0005A9 72 5F 00 02      [ 1] 1165 	clr count 
      0005AD AE 00 5A         [ 2] 1166 	ldw x,#free_ram 
      0005B0 CF 00 1B         [ 2] 1167 	ldw txtbgn,x 
      0005B3 CF 00 1D         [ 2] 1168 	ldw txtend,x 
      0005B6 CD 04 B5         [ 4] 1169 	call clear_vars 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0005B9 81               [ 4] 1170 	ret 
                                   1171 
                                   1172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1173 ;;   Tiny BASIC error messages     ;;
                                   1174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005BA                       1175 err_msg:
      0005BA 00 00 05 D2 05 E0 05  1176 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             EF 06 09 06 19
      0005C6 06 30 06 47 06 62 06  1177 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             74 06 86
      0005D0 06 93                 1178 	.word err_no_access 
                                   1179 
      0005D2 0A 4D 65 6D 6F 72 79  1180 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      0005E0 0A 73 79 6E 74 61 78  1181 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      0005EF 0A 6D 61 74 68 20 6F  1182 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      000609 0A 64 69 76 69 73 69  1183 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      000619 0A 69 6E 76 61 6C 69  1184 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      000630 0A 72 75 6E 20 74 69  1185 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000647 0A 63 6F 6D 6D 61 6E  1186 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      000662 0A 64 75 70 6C 69 63  1187 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      000674 0A 46 69 6C 65 20 6E  1188 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      000686 0A 62 61 64 20 76 61  1189 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      000693 0A 46 69 6C 65 20 69  1190 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1191 
      0006C7 6C 61 73 74 20 74 6F  1192 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



             20 00
                                   1193 
      0006D7                       1194 syntax_error:
      0006D7 A6 02            [ 1] 1195 	ld a,#ERR_SYNTAX 
                                   1196 
      0006D9                       1197 tb_error:
      0006D9 AE 05 BA         [ 2] 1198 	ldw x, #err_msg 
      0006DC 72 5F 00 09      [ 1] 1199 	clr acc16 
      0006E0 48               [ 1] 1200 	sll a
      0006E1 72 59 00 09      [ 1] 1201 	rlc acc16  
      0006E5 C7 00 0A         [ 1] 1202 	ld acc8, a 
      0006E8 72 BB 00 09      [ 2] 1203 	addw x,acc16 
      0006EC FE               [ 2] 1204 	ldw x,(x)
      0006ED CD 01 B0         [ 4] 1205 	call puts
      0006F0 72 0B 00 24 18   [ 2] 1206 	btjf flags,#FCOMP, 1$
      0006F5 AE 16 C8         [ 2] 1207 	ldw x,#tib
      0006F8 CD 01 B0         [ 4] 1208 	call puts 
      0006FB A6 0D            [ 1] 1209 	ld a,#CR 
      0006FD CD 01 9E         [ 4] 1210 	call putc
      000700 AE 00 11         [ 2] 1211 	ldw x,#in.w.saved
      000703 CD 01 D8         [ 4] 1212 	call spaces
      000706 A6 5E            [ 1] 1213 	ld a,#'^
      000708 CD 01 9E         [ 4] 1214 	call putc 
      00070B 20 18            [ 2] 1215 	jra 6$
      00070D CE 00 03         [ 2] 1216 1$:	ldw x,basicptr
      000710 CD 14 30         [ 4] 1217 	call prt_basic_line
      000713 AE 06 C7         [ 2] 1218 	ldw x,#rt_msg 
      000716 CD 01 B0         [ 4] 1219 	call puts 
      000719 CE 00 11         [ 2] 1220 	ldw x,in.w.saved 
      00071C 72 D6 00 03      [ 4] 1221 	ld a,([basicptr],x)
      000720 5F               [ 1] 1222 	clrw x 
      000721 97               [ 1] 1223 	ld xl,a 
      000722 CD 09 4F         [ 4] 1224 	call print_int 
      000725 AE 17 FF         [ 2] 1225 6$: ldw x,#STACK_EMPTY 
      000728 94               [ 1] 1226     ldw sp,x
      000729                       1227 warm_start:
      000729 72 5F 00 24      [ 1] 1228 	clr flags 
      00072D 72 5F 00 1F      [ 1] 1229 	clr loop_depth 
      000731 AE 17 80         [ 2] 1230 	ldw x,#dstack_unf 
      000734 CF 00 19         [ 2] 1231 	ldw dstkptr,x 
      000737 35 04 00 25      [ 1] 1232 	mov tab_width,#TAB_WIDTH 
      00073B 35 0A 00 07      [ 1] 1233 	mov base,#10 
      00073F 5F               [ 1] 1234 	clrw x 
      000740 CF 00 05         [ 2] 1235 	ldw lineno,x 
      000743 AE 16 C8         [ 2] 1236 	ldw x,#tib 
      000746 CF 00 03         [ 2] 1237 	ldw basicptr,x 
                                   1238 ;----------------------------
                                   1239 ;   BASIC interpreter
                                   1240 ;----------------------------
      000749                       1241 interp:
      000749 72 5F 00 00      [ 1] 1242 	clr in.w
      00074D 72 01 00 24 27   [ 2] 1243 	btjf flags,#FRUN,4$ 
                                   1244 ; running program
                                   1245 ; goto next basic line 
      000752 CE 00 03         [ 2] 1246 	ldw x,basicptr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000755 E6 02            [ 1] 1247 	ld a,(2,x) ; line length 
      000757 C7 00 0A         [ 1] 1248 	ld acc8,a 
      00075A 72 5F 00 09      [ 1] 1249 	clr acc16 
      00075E 72 BB 00 09      [ 2] 1250 	addw x,acc16
      000762 C3 00 1D         [ 2] 1251 	cpw x,txtend 
      000765 2A C2            [ 1] 1252 	jrpl warm_start
      000767 CF 00 03         [ 2] 1253 	ldw basicptr,x ; start of next line  
      00076A E6 02            [ 1] 1254 	ld a,(2,x)
      00076C C7 00 02         [ 1] 1255 	ld count,a 
      00076F FE               [ 2] 1256 	ldw x,(x) ; line no 
      000770 CF 00 05         [ 2] 1257 	ldw lineno,x 
      000773 35 03 00 01      [ 1] 1258 	mov in,#3 ; skip first 3 bytes of line 
      000777 20 14            [ 2] 1259 	jra interp_loop 
      000779                       1260 4$: ; commande line mode 	
      000779 72 5F 00 01      [ 1] 1261 	clr in
      00077D A6 0D            [ 1] 1262 	ld a,#CR 
      00077F CD 01 9E         [ 4] 1263 	call putc 
      000782 A6 3E            [ 1] 1264 	ld a,#'> 
      000784 CD 01 9E         [ 4] 1265 	call putc 
      000787 CD 0A 3D         [ 4] 1266 	call readln
      00078A CD 03 FB         [ 4] 1267 	call compile
      00078D                       1268 interp_loop:  
      00078D C6 00 01         [ 1] 1269 	ld a,in 
      000790 C1 00 02         [ 1] 1270 	cp a,count  
      000793 2A B4            [ 1] 1271 	jrpl interp
      000795 CD 07 BD         [ 4] 1272 	call next_token
      000798 A1 01            [ 1] 1273 	cp a,#TK_COLON 
      00079A 27 F1            [ 1] 1274 	jreq interp_loop 
      00079C A1 00            [ 1] 1275 	cp a,#TK_NONE 
                                   1276 ;	jreq interp 
      00079E                       1277 1$:
      00079E A1 03            [ 1] 1278 	cp a,#TK_VAR
      0007A0 26 05            [ 1] 1279 	jrne 2$
      0007A2 CD 13 7B         [ 4] 1280 	call let02  
      0007A5 20 E6            [ 2] 1281 	jra interp_loop 
      0007A7                       1282 2$:	
      0007A7 A1 04            [ 1] 1283 	cp a,#TK_ARRAY 
      0007A9 26 08            [ 1] 1284 	jrne 3$
      0007AB CD 11 CE         [ 4] 1285 	call get_array_element
      0007AE CD 13 7B         [ 4] 1286 	call let02 
      0007B1 20 DA            [ 2] 1287 	jra interp_loop 
      0007B3                       1288 3$:
      0007B3 A1 06            [ 1] 1289 	cp a,#TK_CMD
      0007B5 26 03            [ 1] 1290 	jrne 4$
      0007B7 FD               [ 4] 1291 	call (x) 
      0007B8 20 D3            [ 2] 1292 	jra interp_loop 
      0007BA                       1293 4$:	
      0007BA CC 06 D7         [ 2] 1294 	jp syntax_error 
                                   1295 
                                   1296 ;--------------------------
                                   1297 ; extract next token from
                                   1298 ; token list 
                                   1299 ; basicptr -> base address 
                                   1300 ; in  -> offset in list array 
                                   1301 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1302 ;   A 		token attribute
                                   1303 ;   X 		token value if there is one
                                   1304 ;----------------------------------------
      0007BD                       1305 next_token:
      0007BD 4B 00            [ 1] 1306 	push #0
      0007BF C6 00 01         [ 1] 1307 	ld a,in 
      0007C2 C1 00 02         [ 1] 1308 	cp a,count 
      0007C5 84               [ 1] 1309 	pop a 
      0007C6 2A 31            [ 1] 1310 	jrpl 9$ 
      0007C8 CE 00 00         [ 2] 1311 	ldw x,in.w 
      0007CB CF 00 11         [ 2] 1312 	ldw in.w.saved,x 
      0007CE CE 00 03         [ 2] 1313 	ldw x,basicptr 
      0007D1 72 D6 00 00      [ 4] 1314 	ld a,([in.w],x)
      0007D5 72 5C 00 01      [ 1] 1315 	inc in 
      0007D9 A1 02            [ 1] 1316 	cp a,#CMD_END 
      0007DB 25 1C            [ 1] 1317 	jrult 9$
      0007DD A1 08            [ 1] 1318 	cp a,#TK_QSTR 
      0007DF 22 18            [ 1] 1319 	jrugt 9$
      0007E1 25 06            [ 1] 1320 	jrult 2$
      0007E3 72 BB 00 00      [ 2] 1321 	addw x,in.w 
      0007E7 20 10            [ 2] 1322 	jra 9$
      0007E9 72 DE 00 00      [ 5] 1323 2$: ldw x,([in.w],x)
      0007ED 90 CE 00 00      [ 2] 1324 	ldw y,in.w 
      0007F1 72 A9 00 02      [ 2] 1325 	addw y,#2
      0007F5 90 CF 00 00      [ 2] 1326 	ldw in.w,y
      0007F9 81               [ 4] 1327 9$: ret	
                                   1328 
                                   1329 
                                   1330 ;----------------------------------------
                                   1331 ;   DEBUG support functions
                                   1332 ;----------------------------------------
                           000001  1333 .if DEBUG 
                                   1334 ; turn LED on 
      0007FA                       1335 ledon:
      0007FA 72 1A 50 0A      [ 1] 1336     bset PC_ODR,#LED2_BIT
      0007FE 81               [ 4] 1337     ret 
                                   1338 
                                   1339 ; turn LED off 
      0007FF                       1340 ledoff:
      0007FF 72 1B 50 0A      [ 1] 1341     bres PC_ODR,#LED2_BIT 
      000803 81               [ 4] 1342     ret 
                                   1343 
                                   1344 ; invert LED status 
      000804                       1345 ledtoggle:
      000804 A6 20            [ 1] 1346     ld a,#LED2_MASK
      000806 C8 50 0A         [ 1] 1347     xor a,PC_ODR
      000809 C7 50 0A         [ 1] 1348     ld PC_ODR,a
      00080C 81               [ 4] 1349     ret 
                                   1350 
      00080D                       1351 left_paren:
      00080D A6 20            [ 1] 1352 	ld a,#SPACE 
      00080F CD 01 9E         [ 4] 1353 	call putc
      000812 A6 28            [ 1] 1354 	ld a,#'( 
      000814 CD 01 9E         [ 4] 1355 	call putc 	
      000817 81               [ 4] 1356 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1357 
                                   1358 ;------------------------------
                                   1359 ; print 8 bit register 
                                   1360 ; input:
                                   1361 ;   X  point to register name 
                                   1362 ;   A  register value to print 
                                   1363 ; output:
                                   1364 ;   none
                                   1365 ;------------------------------- 
      000818                       1366 prt_reg8:
      000818 88               [ 1] 1367 	push a 
      000819 CD 01 B0         [ 4] 1368 	call puts 
      00081C 7B 01            [ 1] 1369 	ld a,(1,sp) 
      00081E C7 00 0A         [ 1] 1370 	ld acc8,a 
      000821 5F               [ 1] 1371 	clrw x 
      000822 97               [ 1] 1372 	ld xl,a 
      000823 35 10 00 07      [ 1] 1373 	mov base,#16
      000827 CD 09 4F         [ 4] 1374 	call print_int 
      00082A CD 08 0D         [ 4] 1375 	call left_paren 
      00082D 84               [ 1] 1376 	pop a 
      00082E 5F               [ 1] 1377 	clrw x 
      00082F 97               [ 1] 1378 	ld xl,a 
      000830 35 0A 00 07      [ 1] 1379 	mov base,#10 
      000834 CD 09 4F         [ 4] 1380 	call print_int  
      000837 A6 29            [ 1] 1381 	ld a,#') 
      000839 CD 01 9E         [ 4] 1382 	call putc
      00083C 81               [ 4] 1383 	ret
                                   1384 
                                   1385 ;--------------------------------
                                   1386 ; print 16 bits register 
                                   1387 ; input:
                                   1388 ;   X   point register name 
                                   1389 ;   Y   register value to print 
                                   1390 ; output:
                                   1391 ;  none
                                   1392 ;--------------------------------
      00083D                       1393 prt_reg16: 
      00083D 90 89            [ 2] 1394 	pushw y 
      00083F CD 01 B0         [ 4] 1395 	call puts 
      000842 1E 01            [ 2] 1396 	ldw x,(1,sp) 
      000844 35 10 00 07      [ 1] 1397 	mov base,#16 
      000848 CD 09 4F         [ 4] 1398 	call print_int  
      00084B CD 08 0D         [ 4] 1399 	call left_paren 
      00084E 85               [ 2] 1400 	popw x 
      00084F 35 0A 00 07      [ 1] 1401 	mov base,#10 
      000853 CD 09 4F         [ 4] 1402 	call print_int  
      000856 A6 29            [ 1] 1403 	ld a,#') 
      000858 CD 01 9E         [ 4] 1404 	call putc
      00085B 81               [ 4] 1405 	ret 
                                   1406 
                                   1407 ;------------------------------------
                                   1408 ; print registers contents saved on
                                   1409 ; stack by trap interrupt.
                                   1410 ;------------------------------------
      00085C                       1411 print_registers:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00085C AE 08 AF         [ 2] 1412 	ldw x,#STATES
      00085F CD 01 B0         [ 4] 1413 	call puts
                                   1414 ; print EPC 
      000862 AE 08 EC         [ 2] 1415 	ldw x, #REG_EPC
      000865 CD 01 B0         [ 4] 1416 	call puts 
      000868 7B 0B            [ 1] 1417 	ld a, (11,sp)
      00086A C7 00 0A         [ 1] 1418 	ld acc8,a 
      00086D 7B 0A            [ 1] 1419 	ld a, (10,sp) 
      00086F C7 00 09         [ 1] 1420 	ld acc16,a 
      000872 7B 09            [ 1] 1421 	ld a,(9,sp) 
      000874 C7 00 08         [ 1] 1422 	ld acc24,a
      000877 5F               [ 1] 1423 	clrw x  
      000878 A6 10            [ 1] 1424 	ld a,#16
      00087A CD 09 07         [ 4] 1425 	call prti24  
                                   1426 ; print X
      00087D AE 08 F5         [ 2] 1427 	ldw x,#REG_X
      000880 16 05            [ 2] 1428 	ldw y,(5,sp)
      000882 CD 08 3D         [ 4] 1429 	call prt_reg16  
                                   1430 ; print Y 
      000885 AE 08 F1         [ 2] 1431 	ldw x,#REG_Y
      000888 16 07            [ 2] 1432 	ldw y, (7,sp)
      00088A CD 08 3D         [ 4] 1433 	call prt_reg16  
                                   1434 ; print A 
      00088D AE 08 F9         [ 2] 1435 	ldw x,#REG_A
      000890 7B 04            [ 1] 1436 	ld a, (4,sp) 
      000892 CD 08 18         [ 4] 1437 	call prt_reg8
                                   1438 ; print CC 
      000895 AE 08 FD         [ 2] 1439 	ldw x,#REG_CC 
      000898 7B 03            [ 1] 1440 	ld a, (3,sp) 
      00089A CD 08 18         [ 4] 1441 	call prt_reg8 
                                   1442 ; print SP 
      00089D AE 09 02         [ 2] 1443 	ldw x,#REG_SP
      0008A0 90 96            [ 1] 1444 	ldw y,sp 
      0008A2 72 A9 00 0C      [ 2] 1445 	addw y,#12
      0008A6 CD 08 3D         [ 4] 1446 	call prt_reg16  
      0008A9 A6 0A            [ 1] 1447 	ld a,#'\n' 
      0008AB CD 01 9E         [ 4] 1448 	call putc
      0008AE 81               [ 4] 1449 	ret
                                   1450 
      0008AF 0A 52 65 67 69 73 74  1451 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0008EC 45 50 43 3A 00        1452 REG_EPC: .asciz "EPC:"
      0008F1 0A 59 3A 00           1453 REG_Y:   .asciz "\nY:" 
      0008F5 0A 58 3A 00           1454 REG_X:   .asciz "\nX:"
      0008F9 0A 41 3A 00           1455 REG_A:   .asciz "\nA:" 
      0008FD 0A 43 43 3A 00        1456 REG_CC:  .asciz "\nCC:"
      000902 0A 53 50 3A 00        1457 REG_SP:  .asciz "\nSP:"
                                   1458 .endif ; DEBUG 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1459 
                                   1460 ;------------------------------------
                                   1461 ; print integer in acc24 
                                   1462 ; input:
                                   1463 ;	acc24 		integer to print 
                                   1464 ;	A 			numerical base for conversion 
                                   1465 ;               if bit 7 is set add a space at print end.
                                   1466 ;   XL 			field width, 0 -> no fill.
                                   1467 ;  output:
                                   1468 ;    none 
                                   1469 ;------------------------------------
                           000001  1470 	WIDTH = 1
                           000002  1471 	BASE = 2
                           000003  1472 	ADD_SPACE=3 ; add a space after number 
                           000003  1473 	VSIZE = 3
      000907                       1474 prti24:
      000907                       1475 	_vars VSIZE 
      000907 52 03            [ 2]    1     sub sp,#VSIZE 
      000909 0F 03            [ 1] 1476 	clr (ADD_SPACE,sp)
      00090B A5 80            [ 1] 1477 	bcp a,#0x80 
      00090D 27 02            [ 1] 1478 	jreq 0$ 
      00090F 03 03            [ 1] 1479 	cpl (ADD_SPACE,sp)
      000911 A4 1F            [ 1] 1480 0$:	and a,#31 
      000913 6B 02            [ 1] 1481 	ld (BASE,sp),a
      000915 9F               [ 1] 1482 	ld a,xl
      000916 6B 01            [ 1] 1483 	ld (WIDTH,sp),a 
      000918 7B 02            [ 1] 1484 	ld a, (BASE,sp)  
      00091A CD 09 AB         [ 4] 1485     call itoa  ; conversion entier en  .asciz
      00091D 7B 01            [ 1] 1486 1$: ld a,(WIDTH,sp)
      00091F 27 1F            [ 1] 1487 	jreq 4$
      000921 C7 00 0A         [ 1] 1488 	ld acc8,a 
      000924 89               [ 2] 1489 	pushw x 
      000925 CD 02 72         [ 4] 1490 	call strlen 
      000928 9F               [ 1] 1491 	ld a,xl 
      000929 85               [ 2] 1492 	popw x 
      00092A 31 00 0A         [ 3] 1493 	exg a,acc8 
      00092D C0 00 0A         [ 1] 1494 	sub a,acc8 
      000930 2B 0E            [ 1] 1495 	jrmi 4$
      000932 6B 01            [ 1] 1496 	ld (WIDTH,sp),a 
      000934 A6 20            [ 1] 1497 	ld  a,#SPACE
      000936 0D 01            [ 1] 1498 3$: tnz (WIDTH,sp)
      000938 27 06            [ 1] 1499 	jreq 4$
      00093A 5A               [ 2] 1500 	decw x 
      00093B F7               [ 1] 1501 	ld (x),a 
      00093C 0A 01            [ 1] 1502 	dec (WIDTH,sp) 
      00093E 20 F6            [ 2] 1503 	jra 3$
      000940                       1504 4$: 
      000940 CD 01 B0         [ 4] 1505 	call puts 
      000943 0D 03            [ 1] 1506 	tnz (ADD_SPACE,sp)
      000945 27 05            [ 1] 1507 	jreq 5$
      000947 A6 20            [ 1] 1508     ld a,#SPACE 
      000949 CD 01 9E         [ 4] 1509 	call putc 
      00094C                       1510 5$: _drop VSIZE 
      00094C 5B 03            [ 2]    1     addw sp,#VSIZE 
      00094E 81               [ 4] 1511     ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1512 
                                   1513 ;-----------------------------------
                                   1514 ; print a 16 bit integer 
                                   1515 ; using variable 'base' as conversion
                                   1516 ; format.
                                   1517 ; input:
                                   1518 ;   X       integer to print 
                                   1519 ;   base    conversion base 
                                   1520 ; output:
                                   1521 ;   none 
                                   1522 ;-----------------------------------
                           000001  1523 	SIGN=1
                           000001  1524 	VSIZE=1
      00094F                       1525 print_int: 
      00094F                       1526 	_vars VSIZE 
      00094F 52 01            [ 2]    1     sub sp,#VSIZE 
      000951 0F 01            [ 1] 1527 	clr (SIGN,sp)
      000953 90 AE 17 3F      [ 2] 1528 	ldw y,#pad+PAD_SIZE-1 
      000957 90 7F            [ 1] 1529 	clr (y)
      000959 C6 00 07         [ 1] 1530 	ld a,base  
      00095C A1 0A            [ 1] 1531 	cp a,#10 
      00095E 26 06            [ 1] 1532 	jrne 1$ 
      000960 5D               [ 2] 1533 	tnzw x 
      000961 2A 03            [ 1] 1534 	jrpl 1$ 
      000963 03 01            [ 1] 1535 	cpl (SIGN,sp)
      000965 50               [ 2] 1536 	negw x 	 
      000966                       1537 1$:	
      000966 C6 00 07         [ 1] 1538 	ld a,base 
      000969 62               [ 2] 1539 	div x,a 
      00096A AB 30            [ 1] 1540 	add a,#'0 
      00096C A1 3A            [ 1] 1541 	cp a,#'9+1 
      00096E 2B 02            [ 1] 1542 	jrmi 2$ 
      000970 AB 07            [ 1] 1543 	add a,#7 
      000972 90 5A            [ 2] 1544 2$: decw y 
      000974 90 F7            [ 1] 1545 	ld (y),a 
      000976 5D               [ 2] 1546 	tnzw x 
      000977 26 ED            [ 1] 1547 	jrne 1$ 
      000979 A6 10            [ 1] 1548 	ld a,#16 
      00097B C1 00 07         [ 1] 1549 	cp a,base 
      00097E 26 08            [ 1] 1550 	jrne 3$
      000980 A6 24            [ 1] 1551 	ld a,#'$
      000982 90 5A            [ 2] 1552 	decw y  
      000984 90 F7            [ 1] 1553 	ld (y),a
      000986 20 0A            [ 2] 1554 	jra 9$ 
      000988 0D 01            [ 1] 1555 3$: tnz (SIGN,sp)
      00098A 27 06            [ 1] 1556 	jreq 9$ 
      00098C A6 2D            [ 1] 1557 	ld a,#'-
      00098E 90 5A            [ 2] 1558 	decw y  
      000990 90 F7            [ 1] 1559 	ld (y),a
      000992                       1560 9$:	
      000992 93               [ 1] 1561 	ldw x,y 
      000993 1D 17 3F         [ 2] 1562 	subw x,#pad+PAD_SIZE-1 
      000996 50               [ 2] 1563 	negw x  
      000997                       1564 10$:
      000997 90 5A            [ 2] 1565 	decw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000999 A6 20            [ 1] 1566 	ld a,#SPACE 
      00099B 90 F7            [ 1] 1567 	ld (y),a
      00099D 5C               [ 1] 1568 	incw x 
      00099E 9F               [ 1] 1569 	ld a,xl 
      00099F C1 00 25         [ 1] 1570 	cp a,tab_width
      0009A2 2B F3            [ 1] 1571 	jrmi 10$ 
      0009A4                       1572 12$:
      0009A4 93               [ 1] 1573     ldw x,y 
      0009A5 CD 01 B0         [ 4] 1574 	call puts  
      0009A8                       1575 	_drop VSIZE 
      0009A8 5B 01            [ 2]    1     addw sp,#VSIZE 
      0009AA 81               [ 4] 1576 	ret 
                                   1577 
                                   1578 ;------------------------------------
                                   1579 ; convert integer in acc24 to string
                                   1580 ; input:
                                   1581 ;   A	  	base
                                   1582 ;	acc24	integer to convert
                                   1583 ; output:
                                   1584 ;   X  		pointer to string
                                   1585 ;------------------------------------
                           000001  1586 	SIGN=1  ; integer sign 
                           000002  1587 	BASE=2  ; numeric base 
                           000002  1588 	VSIZE=2  ;locals size
      0009AB                       1589 itoa:
      0009AB 52 02            [ 2] 1590 	sub sp,#VSIZE
      0009AD 6B 02            [ 1] 1591 	ld (BASE,sp), a  ; base
      0009AF 0F 01            [ 1] 1592 	clr (SIGN,sp)    ; sign
      0009B1 A1 0A            [ 1] 1593 	cp a,#10
      0009B3 26 0A            [ 1] 1594 	jrne 1$
                                   1595 	; base 10 string display with negative sign if bit 23==1
      0009B5 72 0F 00 08 05   [ 2] 1596 	btjf acc24,#7,1$
      0009BA 03 01            [ 1] 1597 	cpl (SIGN,sp)
      0009BC CD 0A 1A         [ 4] 1598 	call neg_acc24
      0009BF                       1599 1$:
                                   1600 ; initialize string pointer 
      0009BF AE 17 3F         [ 2] 1601 	ldw x,#pad+PAD_SIZE-1
      0009C2 7F               [ 1] 1602 	clr (x)
      0009C3                       1603 itoa_loop:
      0009C3 7B 02            [ 1] 1604     ld a,(BASE,sp)
      0009C5 CD 09 F2         [ 4] 1605     call divu24_8 ; acc24/A 
      0009C8 AB 30            [ 1] 1606     add a,#'0  ; remainder of division
      0009CA A1 3A            [ 1] 1607     cp a,#'9+1
      0009CC 2B 02            [ 1] 1608     jrmi 2$
      0009CE AB 07            [ 1] 1609     add a,#7 
      0009D0 5A               [ 2] 1610 2$: decw x
      0009D1 F7               [ 1] 1611     ld (x),a
                                   1612 	; if acc24==0 conversion done
      0009D2 C6 00 08         [ 1] 1613 	ld a,acc24
      0009D5 CA 00 09         [ 1] 1614 	or a,acc16
      0009D8 CA 00 0A         [ 1] 1615 	or a,acc8
      0009DB 26 E6            [ 1] 1616     jrne itoa_loop
                                   1617 	;conversion done, next add '$' or '-' as required
      0009DD 7B 02            [ 1] 1618 	ld a,(BASE,sp)
      0009DF A1 10            [ 1] 1619 	cp a,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009E1 27 08            [ 1] 1620 	jreq 8$
      0009E3 7B 01            [ 1] 1621 	ld a,(SIGN,sp)
      0009E5 27 08            [ 1] 1622     jreq 10$
      0009E7 A6 2D            [ 1] 1623     ld a,#'-
      0009E9 20 02            [ 2] 1624 	jra 9$ 
      0009EB A6 24            [ 1] 1625 8$: ld a,#'$ 
      0009ED 5A               [ 2] 1626 9$: decw x
      0009EE F7               [ 1] 1627     ld (x),a
      0009EF                       1628 10$:
      0009EF 5B 02            [ 2] 1629 	addw sp,#VSIZE
      0009F1 81               [ 4] 1630 	ret
                                   1631 
                                   1632 ;-------------------------------------
                                   1633 ; divide uint24_t by uint8_t
                                   1634 ; used to convert uint24_t to string
                                   1635 ; input:
                                   1636 ;	acc24	dividend
                                   1637 ;   A 		divisor
                                   1638 ; output:
                                   1639 ;   acc24	quotient
                                   1640 ;   A		remainder
                                   1641 ;------------------------------------- 
                                   1642 ; offset  on sp of arguments and locals
                           000001  1643 	U8   = 1   ; divisor on stack
                           000001  1644 	VSIZE =1
      0009F2                       1645 divu24_8:
      0009F2 89               [ 2] 1646 	pushw x ; save x
      0009F3 88               [ 1] 1647 	push a 
                                   1648 	; ld dividend UU:MM bytes in X
      0009F4 C6 00 08         [ 1] 1649 	ld a, acc24
      0009F7 95               [ 1] 1650 	ld xh,a
      0009F8 C6 00 09         [ 1] 1651 	ld a,acc24+1
      0009FB 97               [ 1] 1652 	ld xl,a
      0009FC 7B 01            [ 1] 1653 	ld a,(U8,SP) ; divisor
      0009FE 62               [ 2] 1654 	div x,a ; UU:MM/U8
      0009FF 88               [ 1] 1655 	push a  ;save remainder
      000A00 9E               [ 1] 1656 	ld a,xh
      000A01 C7 00 08         [ 1] 1657 	ld acc24,a
      000A04 9F               [ 1] 1658 	ld a,xl
      000A05 C7 00 09         [ 1] 1659 	ld acc24+1,a
      000A08 84               [ 1] 1660 	pop a
      000A09 95               [ 1] 1661 	ld xh,a
      000A0A C6 00 0A         [ 1] 1662 	ld a,acc24+2
      000A0D 97               [ 1] 1663 	ld xl,a
      000A0E 7B 01            [ 1] 1664 	ld a,(U8,sp) ; divisor
      000A10 62               [ 2] 1665 	div x,a  ; R:LL/U8
      000A11 6B 01            [ 1] 1666 	ld (U8,sp),a ; save remainder
      000A13 9F               [ 1] 1667 	ld a,xl
      000A14 C7 00 0A         [ 1] 1668 	ld acc24+2,a
      000A17 84               [ 1] 1669 	pop a
      000A18 85               [ 2] 1670 	popw x
      000A19 81               [ 4] 1671 	ret
                                   1672 
                                   1673 ;------------------------------------
                                   1674 ;  two's complement acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1675 ;  input:
                                   1676 ;		acc24 variable
                                   1677 ;  output:
                                   1678 ;		acc24 variable
                                   1679 ;-------------------------------------
      000A1A                       1680 neg_acc24:
      000A1A 72 53 00 0A      [ 1] 1681 	cpl acc24+2
      000A1E 72 53 00 09      [ 1] 1682 	cpl acc24+1
      000A22 72 53 00 08      [ 1] 1683 	cpl acc24
      000A26 A6 01            [ 1] 1684 	ld a,#1
      000A28 CB 00 0A         [ 1] 1685 	add a,acc24+2
      000A2B C7 00 0A         [ 1] 1686 	ld acc24+2,a
      000A2E 4F               [ 1] 1687 	clr a
      000A2F C9 00 09         [ 1] 1688 	adc a,acc24+1
      000A32 C7 00 09         [ 1] 1689 	ld acc24+1,a 
      000A35 4F               [ 1] 1690 	clr a 
      000A36 C9 00 08         [ 1] 1691 	adc a,acc24 
      000A39 C7 00 08         [ 1] 1692 	ld acc24,a 
      000A3C 81               [ 4] 1693 	ret
                                   1694 
                                   1695 
                                   1696 ;------------------------------------
                                   1697 ; read a line of text from terminal
                                   1698 ; input:
                                   1699 ;	none
                                   1700 ; local variable on stack:
                                   1701 ;	LL  line length
                                   1702 ;   RXCHAR last received chaaracte 
                                   1703 ; output:
                                   1704 ;   text in tib  buffer
                                   1705 ;------------------------------------
                                   1706 	; local variables
                           000001  1707 	LL_HB=1
                           000001  1708 	RXCHAR = 1 ; last char received
                           000002  1709 	LL = 2  ; accepted line length
                           000002  1710 	VSIZE=2 
      000A3D                       1711 readln:
      000A3D 5F               [ 1] 1712 	clrw x 
      000A3E 89               [ 2] 1713 	pushw x 
      000A3F 90 AE 16 C8      [ 2] 1714  	ldw y,#tib ; input buffer
      000A43                       1715 readln_loop:
      000A43 CD 01 A7         [ 4] 1716 	call getc
      000A46 6B 01            [ 1] 1717 	ld (RXCHAR,sp),a
      000A48 A1 0D            [ 1] 1718 	cp a,#CR
      000A4A 26 03            [ 1] 1719 	jrne 1$
      000A4C CC 0A BC         [ 2] 1720 	jp readln_quit
      000A4F A1 0A            [ 1] 1721 1$:	cp a,#NL
      000A51 27 69            [ 1] 1722 	jreq readln_quit
      000A53 A1 08            [ 1] 1723 	cp a,#BSP
      000A55 27 41            [ 1] 1724 	jreq del_back
      000A57 A1 04            [ 1] 1725 	cp a,#CTRL_D
      000A59 27 2E            [ 1] 1726 	jreq del_ln
      000A5B A1 12            [ 1] 1727 	cp a,#CTRL_R 
      000A5D 27 06            [ 1] 1728 	jreq reprint 
                                   1729 ;	cp a,#'[
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1730 ;	jreq ansi_seq
      000A5F                       1731 final_test:
      000A5F A1 20            [ 1] 1732 	cp a,#SPACE
      000A61 2A 44            [ 1] 1733 	jrpl accept_char
      000A63 20 DE            [ 2] 1734 	jra readln_loop
      000A65                       1735 ansi_seq:
                                   1736 ;	call getc
                                   1737 ;	cp a,#'C 
                                   1738 ;	jreq rigth_arrow
                                   1739 ;	cp a,#'D 
                                   1740 ;	jreq left_arrow 
                                   1741 ;	jra final_test
      000A65                       1742 right_arrow:
                                   1743 ;	ld a,#BSP 
                                   1744 ;	call putc 
                                   1745 ;	jra realn_loop 
      000A65                       1746 left_arrow:
                                   1747 
                                   1748 ;	jra readln_loop
      000A65                       1749 reprint: 
      000A65 72 5D 00 02      [ 1] 1750 	tnz count 
      000A69 27 D8            [ 1] 1751 	jreq readln_loop
      000A6B 0D 02            [ 1] 1752 	tnz (LL,sp)
      000A6D 26 D4            [ 1] 1753 	jrne readln_loop
      000A6F AE 16 C8         [ 2] 1754 	ldw x,#tib 
      000A72 CD 01 B0         [ 4] 1755 	call puts
      000A75 90 AE 16 C8      [ 2] 1756 	ldw y,#tib 
      000A79 C6 00 02         [ 1] 1757 	ld a,count 
      000A7C 6B 02            [ 1] 1758 	ld (LL,sp),a
      000A7E 72 5F 00 02      [ 1] 1759 	clr count 
      000A82 0F 01            [ 1] 1760 	clr (LL_HB,sp)
      000A84 72 F9 01         [ 2] 1761 	addw y,(LL_HB,sp)
      000A87 20 BA            [ 2] 1762 	jra readln_loop 
      000A89                       1763 del_ln:
      000A89 7B 02            [ 1] 1764 	ld a,(LL,sp)
      000A8B CD 01 CA         [ 4] 1765 	call delete
      000A8E 90 AE 16 C8      [ 2] 1766 	ldw y,#tib
      000A92 90 7F            [ 1] 1767 	clr (y)
      000A94 0F 02            [ 1] 1768 	clr (LL,sp)
      000A96 20 AB            [ 2] 1769 	jra readln_loop
      000A98                       1770 del_back:
      000A98 0D 02            [ 1] 1771     tnz (LL,sp)
      000A9A 27 A7            [ 1] 1772     jreq readln_loop
      000A9C 0A 02            [ 1] 1773     dec (LL,sp)
      000A9E 90 5A            [ 2] 1774     decw y
      000AA0 90 7F            [ 1] 1775     clr  (y)
      000AA2 CD 01 BA         [ 4] 1776     call bksp 
      000AA5 20 9C            [ 2] 1777     jra readln_loop	
      000AA7                       1778 accept_char:
      000AA7 A6 4F            [ 1] 1779 	ld a,#TIB_SIZE-1
      000AA9 11 02            [ 1] 1780 	cp a, (LL,sp)
      000AAB 27 96            [ 1] 1781 	jreq readln_loop
      000AAD 7B 01            [ 1] 1782 	ld a,(RXCHAR,sp)
      000AAF 90 F7            [ 1] 1783 	ld (y),a
      000AB1 0C 02            [ 1] 1784 	inc (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AB3 90 5C            [ 1] 1785 	incw y
      000AB5 90 7F            [ 1] 1786 	clr (y)
      000AB7 CD 01 9E         [ 4] 1787 	call putc 
      000ABA 20 87            [ 2] 1788 	jra readln_loop
      000ABC                       1789 readln_quit:
      000ABC 90 7F            [ 1] 1790 	clr (y)
      000ABE 7B 02            [ 1] 1791 	ld a,(LL,sp)
      000AC0 C7 00 02         [ 1] 1792 	ld count,a 
      000AC3                       1793 	_drop VSIZE 
      000AC3 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AC5 A6 0D            [ 1] 1794 	ld a,#CR
      000AC7 CD 01 9E         [ 4] 1795 	call putc
      000ACA 81               [ 4] 1796 	ret
                                   1797 
                           000001  1798 .if DEBUG 	
                                   1799 ;----------------------------
                                   1800 ; command interface
                                   1801 ; only 3 commands:
                                   1802 ;  'q' to resume application
                                   1803 ;  'p [addr]' to print memory values 
                                   1804 ;  's addr' to print string 
                                   1805 ;----------------------------
                                   1806 ;local variable 
                           000001  1807 	PSIZE=1
                           000001  1808 	VSIZE=1 
      000ACB                       1809 cmd_itf:
      000ACB 52 01            [ 2] 1810 	sub sp,#VSIZE 
      000ACD 72 5F 00 13      [ 1] 1811 	clr farptr 
      000AD1 72 5F 00 14      [ 1] 1812 	clr farptr+1 
      000AD5 72 5F 00 15      [ 1] 1813 	clr farptr+2  
      000AD9                       1814 repl:
      000AD9 A6 0D            [ 1] 1815 	ld a,#CR 
      000ADB CD 01 9E         [ 4] 1816 	call putc 
      000ADE A6 3F            [ 1] 1817 	ld a,#'? 
      000AE0 CD 01 9E         [ 4] 1818 	call putc
      000AE3 72 5F 00 00      [ 1] 1819 	clr in.w 
      000AE7 72 5F 00 01      [ 1] 1820 	clr in 
      000AEB CD 0A 3D         [ 4] 1821 	call readln
      000AEE 90 AE 16 C8      [ 2] 1822 	ldw y,#tib  
      000AF2 90 F6            [ 1] 1823 	ld a,(y)
      000AF4 27 E3            [ 1] 1824 	jreq repl  
      000AF6 72 5C 00 01      [ 1] 1825 	inc in 
      000AFA CD 0E A8         [ 4] 1826 	call to_upper 
      000AFD A1 51            [ 1] 1827 	cp a,#'Q 
      000AFF 26 17            [ 1] 1828 	jrne test_p
      000B01                       1829 repl_exit:
      000B01 72 5F 16 C8      [ 1] 1830 	clr tib 
      000B05 72 5F 00 02      [ 1] 1831 	clr count 
      000B09 72 5F 00 01      [ 1] 1832 	clr in 
      000B0D                       1833 	_drop #VSIZE 	
      000B0D 5B 01            [ 2]    1     addw sp,##VSIZE 
      000B0F 81               [ 4] 1834 	ret  
      000B10                       1835 invalid:
      000B10 AE 0B 8E         [ 2] 1836 	ldw x,#invalid_cmd 
      000B13 CD 01 B0         [ 4] 1837 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000B16 20 C1            [ 2] 1838 	jra repl 
      000B18                       1839 test_p:	
      000B18 A1 50            [ 1] 1840     cp a,#'P 
      000B1A 27 11            [ 1] 1841 	jreq mem_peek
      000B1C A1 53            [ 1] 1842     cp a,#'S 
      000B1E 26 F0            [ 1] 1843 	jrne invalid 
      000B20                       1844 print_string:	
      000B20 CD 0C E7         [ 4] 1845 	call get_token
      000B23 A1 02            [ 1] 1846 	cp a,#TK_INTGR 
      000B25 26 E9            [ 1] 1847 	jrne invalid 
      000B27 CD 01 B0         [ 4] 1848 	call puts
      000B2A CC 0A D9         [ 2] 1849 	jp repl 	
      000B2D                       1850 mem_peek:
      000B2D A6 20            [ 1] 1851 	ld a,#SPACE 
      000B2F CD 0F 60         [ 4] 1852 	call skip  	 
      000B32 72 B9 00 00      [ 2] 1853 	addw y,in.w 
      000B36 AE 17 18         [ 2] 1854 	ldw x,#pad 
      000B39 CD 02 90         [ 4] 1855 	call strcpy
      000B3C CD 0E B4         [ 4] 1856 	call atoi24 	
      000B3F C6 00 08         [ 1] 1857 	ld a, acc24 
      000B42 CA 00 09         [ 1] 1858 	or a,acc16 
      000B45 CA 00 0A         [ 1] 1859 	or a,acc8 
      000B48 26 02            [ 1] 1860 	jrne 1$ 
      000B4A 20 0C            [ 2] 1861 	jra peek_byte  
      000B4C CE 00 08         [ 2] 1862 1$:	ldw x,acc24 
      000B4F CF 00 13         [ 2] 1863 	ldw farptr,x 
      000B52 C6 00 0A         [ 1] 1864 	ld a,acc8 
      000B55 C7 00 15         [ 1] 1865 	ld farptr+2,a 
      000B58                       1866 peek_byte:
      000B58 CD 0B 9D         [ 4] 1867 	call print_farptr 
      000B5B A6 08            [ 1] 1868 	ld a,#8 
      000B5D 6B 01            [ 1] 1869 	ld (PSIZE,sp),a 
      000B5F 5F               [ 1] 1870 	clrw x 
      000B60 CD 0B B8         [ 4] 1871 1$:	call fetchc  
      000B63 89               [ 2] 1872 	pushw x 
      000B64 C7 00 0A         [ 1] 1873 	ld acc8,a 
      000B67 5F               [ 1] 1874 	clrw x 
      000B68 CF 00 08         [ 2] 1875 	ldw acc24,x 
      000B6B A6 90            [ 1] 1876 	ld a,#16+128
      000B6D CD 09 07         [ 4] 1877 	call prti24
      000B70 85               [ 2] 1878 	popw x 
      000B71 0A 01            [ 1] 1879 	dec (PSIZE,sp)
      000B73 26 EB            [ 1] 1880 	jrne 1$ 
      000B75 A6 08            [ 1] 1881 	ld a,#8 
      000B77 CB 00 15         [ 1] 1882 	add a,farptr+2 
      000B7A C7 00 15         [ 1] 1883 	ld farptr+2,a
      000B7D 4F               [ 1] 1884 	clr a 
      000B7E C9 00 14         [ 1] 1885 	adc a,farptr+1 
      000B81 C7 00 14         [ 1] 1886 	ld farptr+1,a 
      000B84 4F               [ 1] 1887 	clr a 
      000B85 C9 00 13         [ 1] 1888 	adc a,farptr 
      000B88 C7 00 13         [ 1] 1889 	ld farptr,a 
      000B8B CC 0A D9         [ 2] 1890 	jp repl  
                                   1891 
      000B8E 6E 6F 74 20 61 20 63  1892 invalid_cmd: .asciz "not a command\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



             6F 6D 6D 61 6E 64 0A
             00
                                   1893 
                                   1894 ;----------------------------
                                   1895 ; display farptr address
                                   1896 ;----------------------------
      000B9D                       1897 print_farptr:
      000B9D C6 00 15         [ 1] 1898 	ld a ,farptr+2 
      000BA0 C7 00 0A         [ 1] 1899 	ld acc8,a 
      000BA3 CE 00 13         [ 2] 1900 	ldw x,farptr 
      000BA6 CF 00 08         [ 2] 1901 	ldw acc24,x 
      000BA9 5F               [ 1] 1902 	clrw x 
      000BAA A6 10            [ 1] 1903 	ld a,#16 
      000BAC CD 09 07         [ 4] 1904 	call prti24
      000BAF A6 20            [ 1] 1905 	ld a,#SPACE 
      000BB1 CD 01 9E         [ 4] 1906 	call putc 
      000BB4 CD 01 9E         [ 4] 1907 	call putc 
      000BB7 81               [ 4] 1908 	ret
                                   1909 
                                   1910 ;------------------------------------
                                   1911 ; get byte at address farptr[X]
                                   1912 ; input:
                                   1913 ;	 farptr   address to peek
                                   1914 ;    X		  farptr index 	
                                   1915 ; output:
                                   1916 ;	 A 		  byte from memory  
                                   1917 ;    x		  incremented by 1
                                   1918 ;------------------------------------
      000BB8                       1919 fetchc: ; @C
      000BB8 92 AF 00 13      [ 5] 1920 	ldf a,([farptr],x)
      000BBC 5C               [ 1] 1921 	incw x
      000BBD 81               [ 4] 1922 	ret
                                   1923 
                                   1924 
                                   1925 ;------------------------------------
                                   1926 ; expect a number from command line 
                                   1927 ; next argument
                                   1928 ;  input:
                                   1929 ;	  none
                                   1930 ;  output:
                                   1931 ;    acc24   int24_t 
                                   1932 ;------------------------------------
      000BBE                       1933 number::
      000BBE CD 0C E7         [ 4] 1934 	call get_token
      000BC1 CD 0E B4         [ 4] 1935 	call atoi24
      000BC4 81               [ 4] 1936 	ret
                                   1937 .endif ; DEBUG 
                                   1938 
                                   1939 ;------------------------------------
                                   1940 ; parse quoted string 
                                   1941 ; input:
                                   1942 ;   Y 	pointer to tib 
                                   1943 ;   X   pointer to pad
                                   1944 ; output:
                                   1945 ;	pad   parsed string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1946 ;   TOS  char* to pad  
                                   1947 ;------------------------------------
                           000001  1948 	PREV = 1
                           000002  1949 	CURR =2 
                           000002  1950 	VSIZE=2 
      000BC5                       1951 parse_quote: ; { -- addr }
      000BC5                       1952 	_vars VSIZE 
      000BC5 52 02            [ 2]    1     sub sp,#VSIZE 
      000BC7 4F               [ 1] 1953 	clr a
      000BC8 6B 01            [ 1] 1954 1$:	ld (PREV,sp),a 
      000BCA 72 5C 00 01      [ 1] 1955 2$:	inc in
      000BCE 91 D6 00         [ 4] 1956 	ld a,([in.w],y)
      000BD1 27 24            [ 1] 1957 	jreq 6$
      000BD3 6B 02            [ 1] 1958 	ld (CURR,sp),a 
      000BD5 A6 5C            [ 1] 1959 	ld a,#'\
      000BD7 11 01            [ 1] 1960 	cp a, (PREV,sp)
      000BD9 26 0A            [ 1] 1961 	jrne 3$
      000BDB 0F 01            [ 1] 1962 	clr (PREV,sp)
      000BDD 7B 02            [ 1] 1963 	ld a,(CURR,sp)
      000BDF AD 1F            [ 4] 1964 	callr convert_escape
      000BE1 F7               [ 1] 1965 	ld (x),a 
      000BE2 5C               [ 1] 1966 	incw x 
      000BE3 20 E5            [ 2] 1967 	jra 2$
      000BE5                       1968 3$:
      000BE5 7B 02            [ 1] 1969 	ld a,(CURR,sp)
      000BE7 A1 5C            [ 1] 1970 	cp a,#'\'
      000BE9 27 DD            [ 1] 1971 	jreq 1$
      000BEB A1 22            [ 1] 1972 	cp a,#'"
      000BED 27 04            [ 1] 1973 	jreq 5$ 
      000BEF F7               [ 1] 1974 	ld (x),a 
      000BF0 5C               [ 1] 1975 	incw x 
      000BF1 20 D7            [ 2] 1976 	jra 2$
      000BF3 72 5C 00 01      [ 1] 1977 5$:	inc in 
      000BF7 7F               [ 1] 1978 6$: clr (x)
      000BF8 AE 17 18         [ 2] 1979 	ldw x,#pad 
      000BFB                       1980 	_drop VSIZE
      000BFB 5B 02            [ 2]    1     addw sp,#VSIZE 
      000BFD A6 08            [ 1] 1981 	ld a,#TK_QSTR  
      000BFF 81               [ 4] 1982 	ret 
                                   1983 
                                   1984 ;---------------------------------------
                                   1985 ; called by parse_quote
                                   1986 ; subtitute escaped character 
                                   1987 ; by their ASCII value .
                                   1988 ; input:
                                   1989 ;   A  character following '\'
                                   1990 ; output:
                                   1991 ;   A  substitued char or same if not valid.
                                   1992 ;---------------------------------------
      000C00                       1993 convert_escape:
      000C00 A1 61            [ 1] 1994 	cp a,#'a'
      000C02 26 03            [ 1] 1995 	jrne 1$
      000C04 A6 07            [ 1] 1996 	ld a,#7
      000C06 81               [ 4] 1997 	ret 
      000C07 A1 62            [ 1] 1998 1$: cp a,#'b'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000C09 26 03            [ 1] 1999 	jrne 2$
      000C0B A6 08            [ 1] 2000 	ld a,#8
      000C0D 81               [ 4] 2001 	ret 
      000C0E A1 65            [ 1] 2002 2$: cp a,#'e' 
      000C10 26 03            [ 1] 2003     jrne 3$
      000C12 A6 5C            [ 1] 2004 	ld a,#'\'
      000C14 81               [ 4] 2005 	ret  
      000C15 A1 5C            [ 1] 2006 3$: cp a,#'\'
      000C17 26 03            [ 1] 2007 	jrne 4$
      000C19 A6 5C            [ 1] 2008 	ld a,#'\'
      000C1B 81               [ 4] 2009 	ret 
      000C1C A1 66            [ 1] 2010 4$: cp a,#'f' 
      000C1E 26 03            [ 1] 2011 	jrne 5$ 
      000C20 A6 0C            [ 1] 2012 	ld a,#FF 
      000C22 81               [ 4] 2013 	ret  
      000C23 A1 6E            [ 1] 2014 5$: cp a,#'n' 
      000C25 26 03            [ 1] 2015     jrne 6$ 
      000C27 A6 0A            [ 1] 2016 	ld a,#0xa 
      000C29 81               [ 4] 2017 	ret  
      000C2A A1 72            [ 1] 2018 6$: cp a,#'r' 
      000C2C 26 03            [ 1] 2019 	jrne 7$
      000C2E A6 0D            [ 1] 2020 	ld a,#0xd 
      000C30 81               [ 4] 2021 	ret  
      000C31 A1 74            [ 1] 2022 7$: cp a,#'t' 
      000C33 26 03            [ 1] 2023 	jrne 8$ 
      000C35 A6 09            [ 1] 2024 	ld a,#9 
      000C37 81               [ 4] 2025 	ret  
      000C38 A1 76            [ 1] 2026 8$: cp a,#'v' 
      000C3A 26 02            [ 1] 2027 	jrne 9$  
      000C3C A6 0B            [ 1] 2028 	ld a,#0xb 
      000C3E 81               [ 4] 2029 9$:	ret 
                                   2030 
                                   2031 ;-------------------------
                                   2032 ; integer parser 
                                   2033 ; input:
                                   2034 ;   X 		point to pad 
                                   2035 ;   Y 		point to tib 
                                   2036 ;   A 	    first digit|'$' 
                                   2037 ; output:  
                                   2038 ;   pad     number string 
                                   2039 ;   X 		integer 
                                   2040 ;   A 		TK_INTGR
                                   2041 ;-------------------------
                           000001  2042 	BASE=1
                           000002  2043 	TCHAR=2 
                           000002  2044 	VSIZE=2 
      000C3F                       2045 parse_integer: ; { -- n }
      000C3F 4B 00            [ 1] 2046 	push #0 ; TCHAR 
      000C41 A1 24            [ 1] 2047 	cp a,#'$
      000C43 27 04            [ 1] 2048 	jreq 1$ 
      000C45 4B 0A            [ 1] 2049 	push #10 ; BASE=10 
      000C47 20 02            [ 2] 2050 	jra 2$ 
      000C49 4B 10            [ 1] 2051 1$: push #16  ; BASE=16
      000C4B F7               [ 1] 2052 2$:	ld (x),a 
      000C4C 5C               [ 1] 2053 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C4D 72 5C 00 01      [ 1] 2054 	inc in 
      000C51 91 D6 00         [ 4] 2055 	ld a,([in.w],y)
      000C54 CD 0E A8         [ 4] 2056 	call to_upper 
      000C57 6B 02            [ 1] 2057 	ld (TCHAR,sp),a 
      000C59 CD 0E 9F         [ 4] 2058 	call is_digit 
      000C5C 25 ED            [ 1] 2059 	jrc 2$
      000C5E A6 10            [ 1] 2060 	ld a,#16 
      000C60 11 01            [ 1] 2061 	cp a,(BASE,sp)
      000C62 26 0A            [ 1] 2062 	jrne 3$ 
      000C64 7B 02            [ 1] 2063 	ld a,(TCHAR,sp)
      000C66 A1 41            [ 1] 2064 	cp a,#'A 
      000C68 2B 04            [ 1] 2065 	jrmi 3$ 
      000C6A A1 47            [ 1] 2066 	cp a,#'G 
      000C6C 2B DD            [ 1] 2067 	jrmi 2$ 
      000C6E 7F               [ 1] 2068 3$:	clr (x)
      000C6F CD 0E B4         [ 4] 2069 	call atoi24
      000C72 CE 00 09         [ 2] 2070 	ldw x,acc16 
      000C75 A6 02            [ 1] 2071 	ld a,#TK_INTGR
      000C77                       2072 	_drop VSIZE  
      000C77 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C79 81               [ 4] 2073 	ret 	
                                   2074 
                                   2075 ;-------------------------
                                   2076 ; binary integer parser 
                                   2077 ; input:
                                   2078 ;   X 		point to pad 
                                   2079 ;   Y 		point to tib 
                                   2080 ;   A 	    '%' 
                                   2081 ; output:  
                                   2082 ;   pad     number string 
                                   2083 ;   X 		integer 
                                   2084 ;   A 		TK_INTGR
                                   2085 ;   TOS     integer 
                                   2086 ;-------------------------
                           000001  2087 	BINARY=1
                           000002  2088 	VSIZE=2
      000C7A                       2089 parse_binary: ; { -- n }
      000C7A 4B 00            [ 1] 2090 	push #0
      000C7C 4B 00            [ 1] 2091 	push #0
      000C7E F7               [ 1] 2092 1$: ld (x),a 
      000C7F 5C               [ 1] 2093 	incw x 
      000C80 72 5C 00 01      [ 1] 2094 	inc in 
      000C84 91 D6 00         [ 4] 2095 	ld a,([in.w],y)
      000C87 A1 30            [ 1] 2096 	cp a,#'0 
      000C89 27 06            [ 1] 2097 	jreq 2$
      000C8B A1 31            [ 1] 2098 	cp a,#'1 
      000C8D 27 02            [ 1] 2099 	jreq 2$ 
      000C8F 20 09            [ 2] 2100 	jra bin_exit 
      000C91 A0 30            [ 1] 2101 2$: sub a,#'0	
      000C93 46               [ 1] 2102 	rrc a 
      000C94 09 02            [ 1] 2103 	rlc (BINARY+1,sp)
      000C96 09 01            [ 1] 2104 	rlc (BINARY,sp)
      000C98 20 E4            [ 2] 2105 	jra 1$  
      000C9A                       2106 bin_exit:
      000C9A 7F               [ 1] 2107 	clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C9B 1E 01            [ 2] 2108 	ldw x,(BINARY,sp)
      000C9D A6 02            [ 1] 2109 	ld a,#TK_INTGR 	
      000C9F                       2110 	_drop VSIZE 
      000C9F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CA1 81               [ 4] 2111 	ret
                                   2112 
                                   2113 ;---------------------------
                                   2114 ;  token begin with a letter,
                                   2115 ;  is keyword or variable. 	
                                   2116 ; input:
                                   2117 ;   X 		point to pad 
                                   2118 ;   Y 		point to text
                                   2119 ;   A 	    first letter  
                                   2120 ; output:
                                   2121 ;   X		exec_addr|var_addr 
                                   2122 ;   A 		TK_CMD 
                                   2123 ;   pad 	keyword|var_name  
                                   2124 ;   TOS     exec_addr|var_addr 
                                   2125 ;--------------------------  
      000CA2                       2126 parse_keyword: ; { -- exec_addr|var_addr}
      000CA2 CD 0E A8         [ 4] 2127 	call to_upper 
      000CA5 F7               [ 1] 2128 	ld (x),a 
      000CA6 5C               [ 1] 2129 	incw x 
      000CA7 72 5C 00 01      [ 1] 2130 	inc in 
      000CAB 91 D6 00         [ 4] 2131 	ld a,([in.w],y)
      000CAE CD 04 C3         [ 4] 2132 	call is_alpha 
      000CB1 25 EF            [ 1] 2133 	jrc parse_keyword 
      000CB3 7F               [ 1] 2134 1$: clr (x)
      000CB4 72 5D 17 19      [ 1] 2135 	tnz pad+1 
      000CB8 26 15            [ 1] 2136 	jrne 2$
                                   2137 ; one letter variable name 
      000CBA C6 17 18         [ 1] 2138 	ld a,pad 
      000CBD A0 41            [ 1] 2139 	sub a,#'A 
      000CBF 48               [ 1] 2140 	sll a 
      000CC0 88               [ 1] 2141 	push a 
      000CC1 4B 00            [ 1] 2142 	push #0
      000CC3 AE 00 26         [ 2] 2143 	ldw x,#vars 
      000CC6 72 FB 01         [ 2] 2144 	addw x,(1,sp) ; X=var address 
      000CC9                       2145 	_drop 2 
      000CC9 5B 02            [ 2]    1     addw sp,#2 
      000CCB A6 03            [ 1] 2146 	ld a,#TK_VAR 
      000CCD 20 17            [ 2] 2147 	jra 4$ 
      000CCF                       2148 2$: ; check for keyword, otherwise syntax error.
      000CCF                       2149 	_ldx_dict kword_dict
      000CCF AE 20 AC         [ 2]    1     ldw x,#kword_dict+2
      000CD2 CD 11 45         [ 4] 2150 	call search_dict
      000CD5 4D               [ 1] 2151 	tnz a
      000CD6 26 03            [ 1] 2152 	jrne 3$ 
      000CD8 CC 06 D7         [ 2] 2153 	jp syntax_error
      000CDB A3 16 7E         [ 2] 2154 3$: cpw x,#rem  
      000CDE 26 06            [ 1] 2155 	jrne 4$
      000CE0 55 00 02 00 01   [ 1] 2156 	mov in,count 
      000CE5 4F               [ 1] 2157 	clr a 
      000CE6 81               [ 4] 2158 4$:	ret  	
                                   2159 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2160 
                                   2161 ;------------------------------------
                                   2162 ; Command line tokenizer
                                   2163 ; scan text for next token
                                   2164 ; move token in 'pad'
                                   2165 ; input: 
      000CE7                       2166 	none: 
                                   2167 ; use:
                                   2168 ;	Y   pointer to text
                                   2169 ;   X	pointer to pad 
                                   2170 ;   in.w   index in text buffer
                                   2171 ; output:
                                   2172 ;   A       token attribute 
                                   2173 ;   pad 	token as .asciz
                                   2174 ;   X 		token value   
                                   2175 ;------------------------------------
                                   2176 	; use to check special character 
                                   2177 	.macro _case c t  
                                   2178 	ld a,#c 
                                   2179 	cp a,(TCHAR,sp) 
                                   2180 	jrne t
                                   2181 	.endm 
                                   2182 
                           000001  2183 	TCHAR=1
                           000002  2184 	ATTRIB=2 
                           000002  2185 	VSIZE=2
      000CE7                       2186 get_token: 
      000CE7 90 AE 16 C8      [ 2] 2187 	ldw y,#tib    	
      000CEB C6 00 01         [ 1] 2188 	ld a,in 
      000CEE C1 00 02         [ 1] 2189 	cp a,count 
      000CF1 2B 03            [ 1] 2190 	jrmi 1$
      000CF3 A6 00            [ 1] 2191 	ld a,#TK_NONE 
      000CF5 81               [ 4] 2192 	ret 
      000CF6                       2193 1$:	
      000CF6                       2194 	_vars VSIZE
      000CF6 52 02            [ 2]    1     sub sp,#VSIZE 
      000CF8 AE 17 18         [ 2] 2195 	ldw x, #pad
      000CFB A6 20            [ 1] 2196 	ld a,#SPACE
      000CFD CD 0F 60         [ 4] 2197 	call skip
      000D00 CF 00 11         [ 2] 2198 	ldw in.w.saved,x 
      000D03 91 D6 00         [ 4] 2199 	ld a,([in.w],y)
      000D06 26 07            [ 1] 2200 	jrne str_tst
      000D08 72 5F 17 18      [ 1] 2201 	clr pad 
      000D0C CC 0E 9C         [ 2] 2202 	jp token_exit ; end of line 
                                   2203 
      000D0F                       2204 str_tst: ; check for quoted string  	
      000D0F CD 0E A8         [ 4] 2205 	call to_upper 
      000D12 6B 01            [ 1] 2206 	ld (TCHAR,sp),a 
      000D14                       2207 	_case '"' nbr_tst
      000D14 A6 22            [ 1]    1 	ld a,#'"' 
      000D16 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D18 26 06            [ 1]    3 	jrne nbr_tst
      000D1A CD 0B C5         [ 4] 2208 	call parse_quote
      000D1D CC 0E 9C         [ 2] 2209 	jp token_exit
      000D20                       2210 nbr_tst: ; check for number 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D20 A6 24            [ 1] 2211 	ld a,#'$'
      000D22 11 01            [ 1] 2212 	cp a,(TCHAR,sp) 
      000D24 27 13            [ 1] 2213 	jreq 1$
      000D26 A6 26            [ 1] 2214 	ld a,#'&
      000D28 11 01            [ 1] 2215 	cp a,(TCHAR,sp)
      000D2A 26 06            [ 1] 2216 	jrne 0$
      000D2C CD 0C 7A         [ 4] 2217 	call parse_binary ; expect binary integer 
      000D2F CC 0E 9C         [ 2] 2218 	jp token_exit 
      000D32 7B 01            [ 1] 2219 0$:	ld a,(TCHAR,sp)
      000D34 CD 0E 9F         [ 4] 2220 	call is_digit
      000D37 24 06            [ 1] 2221 	jrnc 3$
      000D39 CD 0C 3F         [ 4] 2222 1$:	call parse_integer 
      000D3C CC 0E 9C         [ 2] 2223 	jp token_exit 
      000D3F                       2224 3$: 
      000D3F                       2225 	_case '(' bkslsh_tst 
      000D3F A6 28            [ 1]    1 	ld a,#'(' 
      000D41 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D43 26 05            [ 1]    3 	jrne bkslsh_tst
      000D45 A6 09            [ 1] 2226 	ld a,#TK_LPAREN
      000D47 CC 0E 8C         [ 2] 2227 	jp token_char   	
      000D4A                       2228 bkslsh_tst:
      000D4A                       2229 	_case '\',rparnt_tst
      000D4A A6 5C            [ 1]    1 	ld a,#'\' 
      000D4C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D4E 26 18            [ 1]    3 	jrne rparnt_tst
      000D50 7B 01            [ 1] 2230 	ld a,(TCHAR,sp)
      000D52 F7               [ 1] 2231 	ld (x),a 
      000D53 5C               [ 1] 2232 	incw x 
      000D54 72 5C 00 01      [ 1] 2233 	inc in 
      000D58 91 D6 00         [ 4] 2234 	ld a,([in.w],y)
      000D5B F7               [ 1] 2235 	ld (x),a 
      000D5C 5C               [ 1] 2236 	incw x 
      000D5D 72 5C 00 01      [ 1] 2237 	inc in  
      000D61 7F               [ 1] 2238 	clr (x) 
      000D62 97               [ 1] 2239 	ld xl,a 
      000D63 A6 05            [ 1] 2240 	ld a,#TK_CHAR 
      000D65 CC 0E 9C         [ 2] 2241 	jp token_exit 
      000D68                       2242 rparnt_tst:		
      000D68                       2243 	_case ')' colon_tst 
      000D68 A6 29            [ 1]    1 	ld a,#')' 
      000D6A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D6C 26 05            [ 1]    3 	jrne colon_tst
      000D6E A6 0A            [ 1] 2244 	ld a,#TK_RPAREN 
      000D70 CC 0E 8C         [ 2] 2245 	jp token_char 
      000D73                       2246 colon_tst:
      000D73                       2247 	_case ':' comma_tst 
      000D73 A6 3A            [ 1]    1 	ld a,#':' 
      000D75 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D77 26 05            [ 1]    3 	jrne comma_tst
      000D79 A6 01            [ 1] 2248 	ld a,#TK_COLON 
      000D7B CC 0E 8C         [ 2] 2249 	jp token_char 
      000D7E                       2250 comma_tst:
      000D7E                       2251 	_case COMMA sharp_tst 
      000D7E A6 2C            [ 1]    1 	ld a,#COMMA 
      000D80 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D82 26 05            [ 1]    3 	jrne sharp_tst
      000D84 A6 0B            [ 1] 2252 	ld a,#TK_COMMA
      000D86 CC 0E 8C         [ 2] 2253 	jp token_char
      000D89                       2254 sharp_tst:
      000D89                       2255 	_case SHARP dash_tst 
      000D89 A6 23            [ 1]    1 	ld a,#SHARP 
      000D8B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D8D 26 05            [ 1]    3 	jrne dash_tst
      000D8F A6 0C            [ 1] 2256 	ld a,#TK_SHARP
      000D91 CC 0E 8C         [ 2] 2257 	jp token_char  	 	 
      000D94                       2258 dash_tst: 	
      000D94                       2259 	_case '-' at_tst 
      000D94 A6 2D            [ 1]    1 	ld a,#'-' 
      000D96 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D98 26 05            [ 1]    3 	jrne at_tst
      000D9A A6 11            [ 1] 2260 	ld a,#TK_MINUS  
      000D9C CC 0E 8C         [ 2] 2261 	jp token_char 
      000D9F                       2262 at_tst:
      000D9F                       2263 	_case '@' qmark_tst 
      000D9F A6 40            [ 1]    1 	ld a,#'@' 
      000DA1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA3 26 05            [ 1]    3 	jrne qmark_tst
      000DA5 A6 04            [ 1] 2264 	ld a,#TK_ARRAY 
      000DA7 CC 0E 8C         [ 2] 2265 	jp token_char
      000DAA                       2266 qmark_tst:
      000DAA                       2267 	_case '?' tick_tst 
      000DAA A6 3F            [ 1]    1 	ld a,#'?' 
      000DAC 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DAE 26 11            [ 1]    3 	jrne tick_tst
      000DB0 7B 01            [ 1] 2268 	ld a,(TCHAR,sp)
      000DB2 F7               [ 1] 2269 	ld (x),a 
      000DB3 5C               [ 1] 2270 	incw x 
      000DB4 7F               [ 1] 2271 	clr (x)
      000DB5 72 5C 00 01      [ 1] 2272 	inc in 
      000DB9 A6 06            [ 1] 2273 	ld a,#TK_CMD 
      000DBB AE 15 70         [ 2] 2274 	ldw x,#print 
      000DBE CC 0E 9C         [ 2] 2275 	jp token_exit
      000DC1                       2276 tick_tst: ; ignore comment 
      000DC1                       2277 	_case TICK plus_tst 
      000DC1 A6 27            [ 1]    1 	ld a,#TICK 
      000DC3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DC5 26 0E            [ 1]    3 	jrne plus_tst
      000DC7 7B 01            [ 1] 2278 	ld a,(TCHAR,sp)
      000DC9 F7               [ 1] 2279 	ld (x),a 
      000DCA 5C               [ 1] 2280 	incw x 
      000DCB 7F               [ 1] 2281 	clr (x)
      000DCC 55 00 02 00 01   [ 1] 2282 	mov in,count  
      000DD1 4F               [ 1] 2283 	clr a 
      000DD2 CC 0E 9C         [ 2] 2284 	jp token_exit 
      000DD5                       2285 plus_tst:
      000DD5                       2286 	_case '+' star_tst 
      000DD5 A6 2B            [ 1]    1 	ld a,#'+' 
      000DD7 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DD9 26 05            [ 1]    3 	jrne star_tst
      000DDB A6 10            [ 1] 2287 	ld a,#TK_PLUS  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DDD CC 0E 8C         [ 2] 2288 	jp token_char 
      000DE0                       2289 star_tst:
      000DE0                       2290 	_case '*' slash_tst 
      000DE0 A6 2A            [ 1]    1 	ld a,#'*' 
      000DE2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE4 26 05            [ 1]    3 	jrne slash_tst
      000DE6 A6 20            [ 1] 2291 	ld a,#TK_MULT 
      000DE8 CC 0E 8C         [ 2] 2292 	jp token_char 
      000DEB                       2293 slash_tst: 
      000DEB                       2294 	_case '/' prcnt_tst 
      000DEB A6 2F            [ 1]    1 	ld a,#'/' 
      000DED 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DEF 26 05            [ 1]    3 	jrne prcnt_tst
      000DF1 A6 21            [ 1] 2295 	ld a,#TK_DIV 
      000DF3 CC 0E 8C         [ 2] 2296 	jp token_char 
      000DF6                       2297 prcnt_tst:
      000DF6                       2298 	_case '%' eql_tst 
      000DF6 A6 25            [ 1]    1 	ld a,#'%' 
      000DF8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFA 26 05            [ 1]    3 	jrne eql_tst
      000DFC A6 22            [ 1] 2299 	ld a,#TK_MOD
      000DFE CC 0E 8C         [ 2] 2300 	jp token_char  
                                   2301 ; 1 or 2 character tokens 	
      000E01                       2302 eql_tst:
      000E01                       2303 	_case '=' gt_tst 		
      000E01 A6 3D            [ 1]    1 	ld a,#'=' 
      000E03 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E05 26 05            [ 1]    3 	jrne gt_tst
      000E07 A6 32            [ 1] 2304 	ld a,#TK_EQUAL
      000E09 CC 0E 8C         [ 2] 2305 	jp token_char 
      000E0C                       2306 gt_tst:
      000E0C                       2307 	_case '>' lt_tst 
      000E0C A6 3E            [ 1]    1 	ld a,#'>' 
      000E0E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E10 26 33            [ 1]    3 	jrne lt_tst
      000E12 A6 31            [ 1] 2308 	ld a,#TK_GT 
      000E14 6B 02            [ 1] 2309 	ld (ATTRIB,sp),a 
      000E16 72 5C 00 01      [ 1] 2310 	inc in 
      000E1A 91 D6 00         [ 4] 2311 	ld a,([in.w],y)
      000E1D A1 3D            [ 1] 2312 	cp a,#'=
      000E1F 26 0C            [ 1] 2313 	jrne 1$
      000E21 7B 01            [ 1] 2314 	ld a,(TCHAR,sp)
      000E23 F7               [ 1] 2315 	ld (x),a
      000E24 5C               [ 1] 2316 	incw x 
      000E25 A6 3D            [ 1] 2317 	ld a,#'=
      000E27 6B 01            [ 1] 2318 	ld (TCHAR,sp),a 
      000E29 A6 33            [ 1] 2319 	ld a,#TK_GE 
      000E2B 20 5F            [ 2] 2320 	jra token_char  
      000E2D A1 3C            [ 1] 2321 1$: cp a,#'<
      000E2F 26 0C            [ 1] 2322 	jrne 2$
      000E31 7B 01            [ 1] 2323 	ld a,(TCHAR,sp)
      000E33 F7               [ 1] 2324 	ld (x),a
      000E34 5C               [ 1] 2325 	incw x 
      000E35 A6 3C            [ 1] 2326 	ld a,#'<	
      000E37 6B 01            [ 1] 2327 	ld (TCHAR,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E39 A6 35            [ 1] 2328 	ld a,#TK_NE 
      000E3B 20 4F            [ 2] 2329 	jra token_char 
      000E3D 72 5A 00 01      [ 1] 2330 2$: dec in
      000E41 7B 02            [ 1] 2331 	ld a,(ATTRIB,sp)
      000E43 20 47            [ 2] 2332 	jra token_char 
      000E45                       2333 lt_tst:
      000E45                       2334 	_case '<' other
      000E45 A6 3C            [ 1]    1 	ld a,#'<' 
      000E47 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E49 26 32            [ 1]    3 	jrne other
      000E4B A6 34            [ 1] 2335 	ld a,#TK_LT 
      000E4D 6B 02            [ 1] 2336 	ld (ATTRIB,sp),a 
      000E4F 72 5C 00 01      [ 1] 2337 	inc in 
      000E53 91 D6 00         [ 4] 2338 	ld a,([in.w],y)
      000E56 A1 3D            [ 1] 2339 	cp a,#'=
      000E58 26 0B            [ 1] 2340 	jrne 1$
      000E5A 7B 01            [ 1] 2341 	ld a,(TCHAR,sp)
      000E5C F7               [ 1] 2342 	ld (x),a 
      000E5D A6 3D            [ 1] 2343 	ld a,#'=
      000E5F 6B 01            [ 1] 2344 	ld (TCHAR,sp),a 
      000E61 A6 36            [ 1] 2345 	ld a,#TK_LE 
      000E63 20 27            [ 2] 2346 	jra token_char 
      000E65 A1 3E            [ 1] 2347 1$: cp a,#'>
      000E67 26 0C            [ 1] 2348 	jrne 2$
      000E69 7B 01            [ 1] 2349 	ld a,(TCHAR,sp)
      000E6B F7               [ 1] 2350 	ld (x),a 
      000E6C 5C               [ 1] 2351 	incw x 
      000E6D A6 3E            [ 1] 2352 	ld a,#'>
      000E6F 6B 01            [ 1] 2353 	ld (TCHAR,sp),a 
      000E71 A6 35            [ 1] 2354 	ld a,#TK_NE 
      000E73 20 17            [ 2] 2355 	jra token_char 
      000E75 72 5A 00 01      [ 1] 2356 2$: dec in 
      000E79 7B 02            [ 1] 2357 	ld a,(ATTRIB,sp)
      000E7B 20 0F            [ 2] 2358 	jra token_char 	
      000E7D                       2359 other: ; not a special character 	 
      000E7D 7B 01            [ 1] 2360 	ld a,(TCHAR,sp)
      000E7F CD 04 C3         [ 4] 2361 	call is_alpha 
      000E82 25 03            [ 1] 2362 	jrc 30$ 
      000E84 CC 06 D7         [ 2] 2363 	jp syntax_error 
      000E87                       2364 30$: 
      000E87 CD 0C A2         [ 4] 2365 	call parse_keyword
      000E8A 20 10            [ 2] 2366 	jra token_exit 
      000E8C                       2367 token_char:
      000E8C 6B 02            [ 1] 2368 	ld (ATTRIB,sp),a 
      000E8E 7B 01            [ 1] 2369 	ld a,(TCHAR,sp)
      000E90 F7               [ 1] 2370 	ld (x),a 
      000E91 5C               [ 1] 2371 	incw x 
      000E92 7F               [ 1] 2372 	clr(x)
      000E93 72 5C 00 01      [ 1] 2373 	inc in 
      000E97 7B 02            [ 1] 2374 	ld a,(ATTRIB,sp)
      000E99 AE 17 18         [ 2] 2375 	ldw x,#pad 
      000E9C                       2376 token_exit:
      000E9C                       2377 	_drop VSIZE 
      000E9C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E9E 81               [ 4] 2378 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2379 
                                   2380 
                                   2381 
                                   2382 ;------------------------------------
                                   2383 ; check if character in {'0'..'9'}
                                   2384 ; input:
                                   2385 ;    A  character to test
                                   2386 ; output:
                                   2387 ;    Carry  0 not digit | 1 digit
                                   2388 ;------------------------------------
      000E9F                       2389 is_digit:
      000E9F A1 30            [ 1] 2390 	cp a,#'0
      000EA1 25 03            [ 1] 2391 	jrc 1$
      000EA3 A1 3A            [ 1] 2392     cp a,#'9+1
      000EA5 8C               [ 1] 2393 	ccf 
      000EA6 8C               [ 1] 2394 1$:	ccf 
      000EA7 81               [ 4] 2395     ret
                                   2396 
                                   2397 ;------------------------------------
                                   2398 ; convert alpha to uppercase
                                   2399 ; input:
                                   2400 ;    a  character to convert
                                   2401 ; output:
                                   2402 ;    a  uppercase character
                                   2403 ;------------------------------------
      000EA8                       2404 to_upper::
      000EA8 A1 61            [ 1] 2405 	cp a,#'a
      000EAA 2A 01            [ 1] 2406 	jrpl 1$
      000EAC 81               [ 4] 2407 0$:	ret
      000EAD A1 7A            [ 1] 2408 1$: cp a,#'z	
      000EAF 22 FB            [ 1] 2409 	jrugt 0$
      000EB1 A0 20            [ 1] 2410 	sub a,#32
      000EB3 81               [ 4] 2411 	ret
                                   2412 	
                                   2413 ;------------------------------------
                                   2414 ; convert pad content in integer
                                   2415 ; input:
                                   2416 ;    pad		.asciz to convert
                                   2417 ; output:
                                   2418 ;    acc24      int24_t
                                   2419 ;------------------------------------
                                   2420 	; local variables
                           000001  2421 	SIGN=1 ; 1 byte, 
                           000002  2422 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2423 	TEMP=3 ; 1 byte, temporary storage
                           000003  2424 	VSIZE=3 ; 3 bytes reserved for local storage
      000EB4                       2425 atoi24:
      000EB4 89               [ 2] 2426 	pushw x ;save x
      000EB5 52 03            [ 2] 2427 	sub sp,#VSIZE
                                   2428 	; acc24=0 
      000EB7 72 5F 00 08      [ 1] 2429 	clr acc24    
      000EBB 72 5F 00 09      [ 1] 2430 	clr acc16
      000EBF 72 5F 00 0A      [ 1] 2431 	clr acc8 
      000EC3 C6 17 18         [ 1] 2432 	ld a, pad 
      000EC6 27 5A            [ 1] 2433 	jreq atoi_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EC8 0F 01            [ 1] 2434 	clr (SIGN,sp)
      000ECA A6 0A            [ 1] 2435 	ld a,#10
      000ECC 6B 02            [ 1] 2436 	ld (BASE,sp),a ; default base decimal
      000ECE AE 17 18         [ 2] 2437 	ldw x,#pad ; pointer to string to convert
      000ED1 F6               [ 1] 2438 	ld a,(x)
      000ED2 27 47            [ 1] 2439 	jreq 9$  ; completed if 0
      000ED4 A1 2D            [ 1] 2440 	cp a,#'-
      000ED6 26 04            [ 1] 2441 	jrne 1$
      000ED8 03 01            [ 1] 2442 	cpl (SIGN,sp)
      000EDA 20 08            [ 2] 2443 	jra 2$
      000EDC A1 24            [ 1] 2444 1$: cp a,#'$
      000EDE 26 06            [ 1] 2445 	jrne 3$
      000EE0 A6 10            [ 1] 2446 	ld a,#16
      000EE2 6B 02            [ 1] 2447 	ld (BASE,sp),a
      000EE4 5C               [ 1] 2448 2$:	incw x
      000EE5 F6               [ 1] 2449 	ld a,(x)
      000EE6                       2450 3$:	
      000EE6 A1 61            [ 1] 2451 	cp a,#'a
      000EE8 2B 02            [ 1] 2452 	jrmi 4$
      000EEA A0 20            [ 1] 2453 	sub a,#32
      000EEC A1 30            [ 1] 2454 4$:	cp a,#'0
      000EEE 2B 2B            [ 1] 2455 	jrmi 9$
      000EF0 A0 30            [ 1] 2456 	sub a,#'0
      000EF2 A1 0A            [ 1] 2457 	cp a,#10
      000EF4 2B 06            [ 1] 2458 	jrmi 5$
      000EF6 A0 07            [ 1] 2459 	sub a,#7
      000EF8 11 02            [ 1] 2460 	cp a,(BASE,sp)
      000EFA 2A 1F            [ 1] 2461 	jrpl 9$
      000EFC 6B 03            [ 1] 2462 5$:	ld (TEMP,sp),a
      000EFE 7B 02            [ 1] 2463 	ld a,(BASE,sp)
      000F00 CD 0F 26         [ 4] 2464 	call mulu24_8
      000F03 7B 03            [ 1] 2465 	ld a,(TEMP,sp)
      000F05 CB 00 0A         [ 1] 2466 	add a,acc24+2
      000F08 C7 00 0A         [ 1] 2467 	ld acc24+2,a
      000F0B 4F               [ 1] 2468 	clr a
      000F0C C9 00 09         [ 1] 2469 	adc a,acc24+1
      000F0F C7 00 09         [ 1] 2470 	ld acc24+1,a
      000F12 4F               [ 1] 2471 	clr a
      000F13 C9 00 08         [ 1] 2472 	adc a,acc24
      000F16 C7 00 08         [ 1] 2473 	ld acc24,a
      000F19 20 C9            [ 2] 2474 	jra 2$
      000F1B 0D 01            [ 1] 2475 9$:	tnz (SIGN,sp)
      000F1D 27 03            [ 1] 2476     jreq atoi_exit
      000F1F CD 0A 1A         [ 4] 2477     call neg_acc24
      000F22                       2478 atoi_exit: 
      000F22 5B 03            [ 2] 2479 	addw sp,#VSIZE
      000F24 85               [ 2] 2480 	popw x ; restore x
      000F25 81               [ 4] 2481 	ret
                                   2482 
                                   2483 ;--------------------------------------
                                   2484 ; unsigned multiply uint24_t by uint8_t
                                   2485 ; use to convert numerical string to uint24_t
                                   2486 ; input:
                                   2487 ;	acc24	uint24_t 
                                   2488 ;   A		uint8_t
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2489 ; output:
                                   2490 ;   acc24   A*acc24
                                   2491 ;-------------------------------------
                                   2492 ; local variables offset  on sp
                           000003  2493 	U8   = 3   ; A pushed on stack
                           000002  2494 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2495 	OVFH = 1  ; multiplication overflow high byte
                           000003  2496 	VSIZE = 3
      000F26                       2497 mulu24_8:
      000F26 89               [ 2] 2498 	pushw x    ; save X
                                   2499 	; local variables
      000F27 88               [ 1] 2500 	push a     ; U8
      000F28 5F               [ 1] 2501 	clrw x     ; initialize overflow to 0
      000F29 89               [ 2] 2502 	pushw x    ; multiplication overflow
                                   2503 ; multiply low byte.
      000F2A C6 00 0A         [ 1] 2504 	ld a,acc24+2
      000F2D 97               [ 1] 2505 	ld xl,a
      000F2E 7B 03            [ 1] 2506 	ld a,(U8,sp)
      000F30 42               [ 4] 2507 	mul x,a
      000F31 9F               [ 1] 2508 	ld a,xl
      000F32 C7 00 0A         [ 1] 2509 	ld acc24+2,a
      000F35 9E               [ 1] 2510 	ld a, xh
      000F36 6B 02            [ 1] 2511 	ld (OVFL,sp),a
                                   2512 ; multipy middle byte
      000F38 C6 00 09         [ 1] 2513 	ld a,acc24+1
      000F3B 97               [ 1] 2514 	ld xl,a
      000F3C 7B 03            [ 1] 2515 	ld a, (U8,sp)
      000F3E 42               [ 4] 2516 	mul x,a
                                   2517 ; add overflow to this partial product
      000F3F 72 FB 01         [ 2] 2518 	addw x,(OVFH,sp)
      000F42 9F               [ 1] 2519 	ld a,xl
      000F43 C7 00 09         [ 1] 2520 	ld acc24+1,a
      000F46 4F               [ 1] 2521 	clr a
      000F47 A9 00            [ 1] 2522 	adc a,#0
      000F49 6B 01            [ 1] 2523 	ld (OVFH,sp),a
      000F4B 9E               [ 1] 2524 	ld a,xh
      000F4C 6B 02            [ 1] 2525 	ld (OVFL,sp),a
                                   2526 ; multiply most signficant byte	
      000F4E C6 00 08         [ 1] 2527 	ld a, acc24
      000F51 97               [ 1] 2528 	ld xl, a
      000F52 7B 03            [ 1] 2529 	ld a, (U8,sp)
      000F54 42               [ 4] 2530 	mul x,a
      000F55 72 FB 01         [ 2] 2531 	addw x, (OVFH,sp)
      000F58 9F               [ 1] 2532 	ld a, xl
      000F59 C7 00 08         [ 1] 2533 	ld acc24,a
      000F5C 5B 03            [ 2] 2534     addw sp,#VSIZE
      000F5E 85               [ 2] 2535 	popw x
      000F5F 81               [ 4] 2536 	ret
                                   2537 
                                   2538 ;------------------------------------
                                   2539 ; skip character c in text starting from 'in'
                                   2540 ; input:
                                   2541 ;	 y 		point to text buffer
                                   2542 ;    a 		character to skip
                                   2543 ; output:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2544 ;	'in' ajusted to new position
                                   2545 ;------------------------------------
                           000001  2546 	C = 1 ; local var
      000F60                       2547 skip:
      000F60 88               [ 1] 2548 	push a
      000F61 91 D6 00         [ 4] 2549 1$:	ld a,([in.w],y)
      000F64 27 0A            [ 1] 2550 	jreq 2$
      000F66 11 01            [ 1] 2551 	cp a,(C,sp)
      000F68 26 06            [ 1] 2552 	jrne 2$
      000F6A 72 5C 00 01      [ 1] 2553 	inc in
      000F6E 20 F1            [ 2] 2554 	jra 1$
      000F70                       2555 2$: _drop 1 
      000F70 5B 01            [ 2]    1     addw sp,#1 
      000F72 81               [ 4] 2556 	ret
                                   2557 	
                                   2558 ;------------------------------
                                   2559 ; restore 'in.w' variable to 
                                   2560 ; its value before last call
                                   2561 ; to get_token.
                                   2562 ;------------------------------
      000F73                       2563 unget_token:
      000F73 CE 00 11         [ 2] 2564 	ldw x,in.w.saved
      000F76 CF 00 00         [ 2] 2565 	ldw in.w,x 
      000F79 81               [ 4] 2566 	ret 
                                   2567 
                                   2568 
                                   2569 ;******************************
                                   2570 ;  data stack manipulation
                                   2571 ;*****************************
                                   2572 ;----------------------	
                                   2573 ; push X on data stack 
                                   2574 ; input:
                                   2575 ;	X 
                                   2576 ; output:
                                   2577 ;	none 
                                   2578 ;----------------------	
      000F7A                       2579 dpush:
      000F7A                       2580     _dp_down
      000F7A 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000F7E 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000F82 72 CF 00 19      [ 5] 2581     ldw [dstkptr],x  
      000F86 81               [ 4] 2582 	ret 
                                   2583 
                                   2584 
                                   2585 ;----------------------	
                                   2586 ; pop data stack in X 
                                   2587 ; input:
                                   2588 ;	none
                                   2589 ; output:
                                   2590 ;	X   
                                   2591 ;----------------------	
      000F87                       2592 dpop: 
      000F87 72 CE 00 19      [ 5] 2593     ldw x, [dstkptr]
      000F8B                       2594 	_dp_up
      000F8B 72 5C 00 1A      [ 1]    1     inc dstkptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F8F 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000F93 81               [ 4] 2595 	ret 
                                   2596 
                                   2597 ;-----------------------------
                                   2598 ; swap top 2 elements of dstack
                                   2599 ;  {n1 n2 -- n2 n1 }
                                   2600 ;-----------------------------
      000F94                       2601 dswap:
      000F94 72 CE 00 19      [ 5] 2602 	ldw x,[dstkptr]
      000F98 89               [ 2] 2603 	pushw x 
      000F99 AE 00 02         [ 2] 2604 	ldw x,#2 
      000F9C 72 DE 00 19      [ 5] 2605 	ldw x,([dstkptr],x) 
      000FA0 72 CF 00 19      [ 5] 2606 	ldw [dstkptr],x 
      000FA4 AE 00 02         [ 2] 2607 	ldw x,#2
      000FA7 90 85            [ 2] 2608 	popw y 
      000FA9 72 DF 00 19      [ 5] 2609 	ldw ([dstkptr],x),y 
      000FAD 81               [ 4] 2610 	ret
                                   2611 
                                   2612 ;-----------------------------
                                   2613 ; drop TOS 
                                   2614 ;-----------------------------
      000FAE                       2615 ddrop: ; { n -- }
      000FAE                       2616 	_dp_up 
      000FAE 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FB2 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000FB6 81               [ 4] 2617 	ret
                                   2618 	
                                   2619 ;-----------------------------
                                   2620 ; duplicate TOS 
                                   2621 ;  dstack: { ix...n -- ix...n n }
                                   2622 ;-----------------------------
      000FB7                       2623 ddup:
      000FB7 72 CE 00 19      [ 5] 2624 	ldw x,[dstkptr]
      000FBB                       2625 	_dp_down
      000FBB 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000FBF 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000FC3 72 CF 00 19      [ 5] 2626     ldw [dstkptr],x  
      000FC7 81               [ 4] 2627 	ret 
                                   2628 
                                   2629 
                                   2630 ;----------------------------------
                                   2631 ; pick value n from dstack 
                                   2632 ; put it on TOS
                                   2633 ; dstack: {ix,..,p -- ix,...,np }
                                   2634 ;-----------------------------------
      000FC8                       2635 dpick:
      000FC8 72 CE 00 19      [ 5] 2636 	ldw x,[dstkptr]
      000FCC 58               [ 2] 2637 	sllw x 
      000FCD 72 BB 00 19      [ 2] 2638 	addw x,dstkptr 
      000FD1 FE               [ 2] 2639 	ldw x,(x)
      000FD2 72 CF 00 19      [ 5] 2640 	ldw [dstkptr],x 
      000FD6 81               [ 4] 2641 	ret
                                   2642 
                                   2643 ;---------------------------
                                   2644 ;  fetch variable in X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2645 ;  dstack:{ addr -- value }
                                   2646 ;---------------------------
      000FD7                       2647 fetch:
      000FD7 72 CE 00 19      [ 5] 2648 	ldw x,[dstkptr]
      000FDB FE               [ 2] 2649 	ldw x,(x)
      000FDC 72 CF 00 19      [ 5] 2650 	ldw [dstkptr],x
      000FE0 81               [ 4] 2651 	ret 
                                   2652 
                                   2653 ;----------------------------
                                   2654 ; store variable 
                                   2655 ; dstack: {addr value -- }
                                   2656 ;----------------------------
      000FE1                       2657 store:
      000FE1 CD 0F 87         [ 4] 2658 	call dpop 
      000FE4 90 93            [ 1] 2659 	ldw y,x   ; y=value 
      000FE6 CD 0F 87         [ 4] 2660 	call dpop 
      000FE9 FF               [ 2] 2661 	ldw (x),y 
      000FEA 81               [ 4] 2662 	ret 
                                   2663 
                                   2664 ;---------------------------------
                                   2665 ; drop n elements from data stack 
                                   2666 ; input: 
                                   2667 ;   X 		n 
                                   2668 ; output:
                                   2669 ;   none 
                                   2670 ;-------------------------------------
      000FEB                       2671 ddrop_n:
      000FEB 90 89            [ 2] 2672 	pushw y 
      000FED 90 CE 00 19      [ 2] 2673 	ldw y,dstkptr 
      000FF1 58               [ 2] 2674 	sllw x 
      000FF2 89               [ 2] 2675 	pushw x 
      000FF3 72 F9 01         [ 2] 2676 	addw y,(1,sp)
      000FF6 90 CF 00 19      [ 2] 2677 	ldw dstkptr,y 
      000FFA 85               [ 2] 2678 	popw x 
      000FFB 90 85            [ 2] 2679 	popw y
      000FFD 81               [ 4] 2680 	ret 
                                   2681 
      000FFE 0A 64 73 74 61 63 6B  2682 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2683 ;----------------------------
                                   2684 ; print dstack content 
                                   2685 ;---------------------------
                           000001  2686 	XSAVE=1
                           000002  2687 	VSIZE=2
      001008                       2688 dots:
      001008                       2689 	_vars VSIZE 
      001008 52 02            [ 2]    1     sub sp,#VSIZE 
      00100A AE 0F FE         [ 2] 2690 	ldw x,#dstk_prompt 
      00100D CD 01 B0         [ 4] 2691 	call puts
      001010 AE 17 7E         [ 2] 2692 	ldw x,#dstack_unf-CELL_SIZE
      001013 35 0A 00 07      [ 1] 2693 	mov base,#10 
      001017 C3 00 19         [ 2] 2694 1$:	cpw x,dstkptr 
      00101A 25 0D            [ 1] 2695 	jrult 4$ 
      00101C 1F 01            [ 2] 2696 	ldw (XSAVE,sp),x
      00101E FE               [ 2] 2697 	ldw  x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00101F CD 09 4F         [ 4] 2698 	call print_int 
      001022 1E 01            [ 2] 2699 	ldw x,(XSAVE,sp)
      001024 1D 00 02         [ 2] 2700 	subw x,#CELL_SIZE 
      001027 20 EE            [ 2] 2701 	jra 1$ 
      001029 A6 0D            [ 1] 2702 4$: ld a,#CR 
      00102B CD 01 9E         [ 4] 2703 	call putc 
      00102E                       2704 	_drop VSIZE
      00102E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001030 4F               [ 1] 2705 	clr a 
      001031 81               [ 4] 2706 	ret
                                   2707 
      001032 0A 63 74 61 63 6B 3A  2708 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2709 ;--------------------------------
                                   2710 ; print cstack content
                                   2711 ;--------------------------------
                           000001  2712 	XSAVE=1
                           000002  2713 	VSIZE=2 
      00103B                       2714 dotr:
      00103B                       2715 	_vars VSIZE 
      00103B 52 02            [ 2]    1     sub sp,#VSIZE 
      00103D AE 10 32         [ 2] 2716 	ldw x,#cstk_prompt
      001040 CD 01 B0         [ 4] 2717 	call puts 
      001043 96               [ 1] 2718 	ldw x,sp 
      001044 1C 00 07         [ 2] 2719 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      001047 1F 01            [ 2] 2720 	ldw (XSAVE,sp),x  
      001049 AE 17 FE         [ 2] 2721 	ldw x,#RAM_SIZE-2
      00104C 35 10 00 07      [ 1] 2722 	mov base,#16
      001050                       2723 dotr_loop:
      001050 13 01            [ 2] 2724 	cpw x,(XSAVE,sp)
      001052 2B 0B            [ 1] 2725 	jrmi 9$
      001054 89               [ 2] 2726 	pushw x  
      001055 FE               [ 2] 2727 	ldw x,(x)
      001056 CD 09 4F         [ 4] 2728 	call print_int 
      001059 85               [ 2] 2729 	popw x  
      00105A 1D 00 02         [ 2] 2730 	subw x,#CELL_SIZE
      00105D 20 F1            [ 2] 2731 	jra dotr_loop 
      00105F A6 0D            [ 1] 2732 9$:	ld a,#CR 
      001061 CD 01 9E         [ 4] 2733 	call putc 
      001064                       2734 	_drop VSIZE 
      001064 5B 02            [ 2]    1     addw sp,#VSIZE 
      001066 4F               [ 1] 2735 	clr a 
      001067 81               [ 4] 2736 	ret
                                   2737 
                                   2738 
                                   2739 ;--------------------------------
                                   2740 ;  add 2 integers
                                   2741 ;  input:
                                   2742 ;    N1     on cstack 
                                   2743 ;    N2     on cstack 
                                   2744 ;  output:
                                   2745 ;    X 		n2+n1 
                                   2746 ;--------------------------------
                                   2747 	;arugments on cstack 
      001068                       2748 	_argofs 0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                           000002     1     ARG_OFS=2+0 
      001068                       2749 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001068                       2750 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001068                       2751 add:
      001068 1E 05            [ 2] 2752 	ldw x ,(N2,sp)
      00106A 72 FB 03         [ 2] 2753 	addw x,(N1,sp)
      00106D 1F 03            [ 2] 2754 	ldw (N1,sp),x 
      00106F 81               [ 4] 2755 	ret 
                                   2756 
                                   2757 ;--------------------------------
                                   2758 ;  substract 2 ntegers
                                   2759 ;  input:
                                   2760 ;    N1     on cstack 
                                   2761 ;    N2     on cstack 
                                   2762 ;  output:
                                   2763 ;    X 		n2+n1 
                                   2764 ;--------------------------------
      001070                       2765 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001070                       2766 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001070                       2767 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001070                       2768 substract:
      001070 1E 05            [ 2] 2769 	ldw x,(N2,sp)
      001072 72 F0 03         [ 2] 2770 	subw x,(N1,sp)
      001075 81               [ 4] 2771 	ret 
                                   2772 
                                   2773 ;-------------------------------------
                                   2774 ; multiply 2 integers
                                   2775 ; product overflow is ignored unless
                                   2776 ; MATH_OVF assembler flag is set to 1
                                   2777 ; input:
                                   2778 ;  	N1      on cstack
                                   2779 ;   N2 		on cstack 
                                   2780 ; output:
                                   2781 ;	X        N1*N2 
                                   2782 ;-------------------------------------
                                   2783 	;arguments 
      001076                       2784 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      001076                       2785 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      001076                       2786 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      001076                       2787 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      001076                       2788 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2789    ; local variables 
                           000001  2790 	SIGN=1
                           000002  2791 	PROD=2
                           000003  2792 	VSIZE=3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      001076                       2793 multiply:
      001076                       2794 	_vars VSIZE 
      001076 52 03            [ 2]    1     sub sp,#VSIZE 
      001078 0F 01            [ 1] 2795 	clr (SIGN,sp)
      00107A 1E 06            [ 2] 2796 	ldw x,(N1_HB,sp)
      00107C 9E               [ 1] 2797 	ld a,xh  
      00107D A5 80            [ 1] 2798 	bcp a,#0x80 
      00107F 27 05            [ 1] 2799 	jreq 2$
      001081 03 01            [ 1] 2800 	cpl (SIGN,sp)
      001083 50               [ 2] 2801 	negw x 
      001084 1F 06            [ 2] 2802 	ldw (N1_HB,sp),x 
      001086 1E 08            [ 2] 2803 2$: ldw x,(N2_HB,sp)
      001088 9E               [ 1] 2804 	ld a,xh  
      001089 A5 80            [ 1] 2805 	bcp a,#0x80 
      00108B 27 05            [ 1] 2806 	jreq 3$
      00108D 03 01            [ 1] 2807 	cpl (SIGN,sp)
      00108F 50               [ 2] 2808 	negw x 
      001090 1F 08            [ 2] 2809 	ldw (N2_HB,sp),x 
                                   2810 ; N1_LB * N2_LB 	
      001092 7B 07            [ 1] 2811 3$:	ld a,(N1_LB,sp)
      001094 97               [ 1] 2812 	ld xl,a 
      001095 7B 09            [ 1] 2813 	ld a,(N2_LB,sp) 
      001097 42               [ 4] 2814 	mul x,a 
                           000000  2815 .if MATH_OVF 	
                                   2816 	ld a,xh 
                                   2817 	bcp a,#0x80 
                                   2818 	jreq 4$ 
                                   2819 	ld a,#ERR_MATH_OVF 
                                   2820 	jp tb_error
                                   2821 .endif 	 
      001098 1F 02            [ 2] 2822 4$:	ldw (PROD,sp),x
                                   2823 ; N1_LB * N2_HB	 
      00109A 7B 07            [ 1] 2824 	ld a,(N1_LB,sp) 
      00109C 97               [ 1] 2825 	ld xl,a 
      00109D 7B 08            [ 1] 2826 	ld a,(N2_HB,sp)
      00109F 42               [ 4] 2827 	mul x,a
      0010A0 9F               [ 1] 2828 	ld a,xl 
      0010A1 1B 02            [ 1] 2829 	add a,(PROD,sp)
                           000000  2830 .if MATH_OVF 	
                                   2831 	bcp a,#0x80 
                                   2832 	jreq 5$ 
                                   2833 	ld a,#ERR_MATH_OVF 
                                   2834 	jp tb_error
                                   2835 .endif 	 
      0010A3 6B 02            [ 1] 2836 5$:	ld (PROD,sp),a 
                                   2837 ; N1_HB * N2_LB 
      0010A5 7B 06            [ 1] 2838 	ld a,(N1_HB,sp)
      0010A7 97               [ 1] 2839 	ld xl,a 
      0010A8 7B 09            [ 1] 2840 	ld a,(N2_LB,sp)
      0010AA 42               [ 4] 2841 	mul x,a 
      0010AB 9F               [ 1] 2842 	ld a,xl 
      0010AC 1B 02            [ 1] 2843 	add a,(PROD,sp)
                           000000  2844 .if MATH_OVF 	
                                   2845 	bcp a,#0x80 
                                   2846 	jreq 6$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2847 	ld a,#ERR_MATH_OVF 
                                   2848 	jp tb_error
                                   2849 .endif 	 
      0010AE 6B 02            [ 1] 2850 6$:	ld (PROD,sp),a 
                                   2851 ; N1_HB * N2_HB 	
                                   2852 ; it is pointless to multiply N1_HB*N2_HB 
                                   2853 ; as this product is over 65535 or 0 
                                   2854 ;
                                   2855 ; sign adjust product
      0010B0 0D 01            [ 1] 2856 	tnz (SIGN,sp)
      0010B2 27 05            [ 1] 2857 	jreq 7$
      0010B4 1E 02            [ 2] 2858 	ldw x, (PROD,sp)
      0010B6 50               [ 2] 2859 	negw x
      0010B7 1F 02            [ 2] 2860 	ldw (PROD,sp),x  
      0010B9                       2861 7$: 
      0010B9 1E 02            [ 2] 2862 	ldw x,(PROD,sp) 
      0010BB                       2863 	_drop VSIZE 
      0010BB 5B 03            [ 2]    1     addw sp,#VSIZE 
      0010BD 81               [ 4] 2864 	ret
                                   2865 
                                   2866 ;----------------------------------
                                   2867 ;  euclidian divide n2/n1 
                                   2868 ; input:
                                   2869 ;    N2 	on cstack
                                   2870 ;    N1 	on cstack
                                   2871 ; output:
                                   2872 ;    X      n2/n1 
                                   2873 ;    Y      remainder 
                                   2874 ;----------------------------------
      0010BE                       2875 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      0010BE                       2876 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      0010BE                       2877 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2878 	; local variables
                           000001  2879 	SQUOT=1 ; sign quotient
                           000002  2880 	SDIVD=2 ; sign dividend  
                           000002  2881 	VSIZE=2
      0010BE                       2882 divide:
      0010BE                       2883 	_vars VSIZE 
      0010BE 52 02            [ 2]    1     sub sp,#VSIZE 
      0010C0 0F 01            [ 1] 2884 	clr (SQUOT,sp)
      0010C2 0F 02            [ 1] 2885 	clr (SDIVD,sp)
                                   2886 ; check for 0 divisor
      0010C4 1E 05            [ 2] 2887 	ldw x,(DIVISR,sp)
      0010C6 5D               [ 2] 2888 	tnzw x 
      0010C7 26 05            [ 1] 2889     jrne 0$
      0010C9 A6 04            [ 1] 2890 	ld a,#ERR_DIV0 
      0010CB CC 06 D9         [ 2] 2891 	jp tb_error 
                                   2892 ; check divisor sign 	
      0010CE 9E               [ 1] 2893 0$:	ld a,xh 
      0010CF A5 80            [ 1] 2894 	bcp a,#0x80 
      0010D1 27 03            [ 1] 2895 	jreq 1$
      0010D3 03 01            [ 1] 2896 	cpl (SQUOT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010D5 50               [ 2] 2897 	negw x 
      0010D6 1F 05            [ 2] 2898 1$:	ldw (DIVISR,sp),x
                                   2899 ; check dividend sign 	 
      0010D8 1E 07            [ 2] 2900     ldw x,(DIVIDND,sp)
      0010DA 9E               [ 1] 2901 	ld a,xh 
      0010DB A5 80            [ 1] 2902 	bcp a,#0x80 
      0010DD 27 05            [ 1] 2903 	jreq 2$ 
      0010DF 03 01            [ 1] 2904 	cpl (SQUOT,sp)
      0010E1 03 02            [ 1] 2905 	cpl (SDIVD,sp)
      0010E3 50               [ 2] 2906 	negw x 
      0010E4 16 05            [ 2] 2907 2$:	ldw y,(DIVISR,sp)
      0010E6 65               [ 2] 2908 	divw x,y
      0010E7 90 CF 00 09      [ 2] 2909 	ldw acc16,y 
                                   2910 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      0010EB 0D 02            [ 1] 2911 	tnz (SDIVD,sp)
      0010ED 27 0B            [ 1] 2912 	jreq 7$
      0010EF 90 5D            [ 2] 2913 	tnzw y 
      0010F1 27 07            [ 1] 2914 	jreq 7$
      0010F3 5C               [ 1] 2915 	incw x
      0010F4 16 05            [ 2] 2916 	ldw y,(DIVISR,sp)
      0010F6 72 B2 00 09      [ 2] 2917 	subw y,acc16
      0010FA 0D 01            [ 1] 2918 7$: tnz (SQUOT,sp)
      0010FC 27 01            [ 1] 2919 	jreq 9$ 	 
      0010FE 50               [ 2] 2920 8$:	negw x 
      0010FF                       2921 9$: 
      0010FF                       2922 	_drop VSIZE 
      0010FF 5B 02            [ 2]    1     addw sp,#VSIZE 
      001101 81               [ 4] 2923 	ret 
                                   2924 
                                   2925 
                                   2926 ;----------------------------------
                                   2927 ;  remainder resulting from euclidian 
                                   2928 ;  division of n2/n1 
                                   2929 ; input:
                                   2930 ;   N1 		cstack 
                                   2931 ;   N2      cstack
                                   2932 ; output:
                                   2933 ;   X       N2%N1 
                                   2934 ;----------------------------------
                           000003  2935 	N1=3
                           000005  2936 	N2=5
                           000004  2937 	VSIZE=4
      001102                       2938 modulo:
      001102 1E 03            [ 2] 2939 	Ldw x,(N1,sp)
      001104 16 05            [ 2] 2940 	ldw y,(N2,sp)
      001106                       2941 	_vars VSIZE 
      001106 52 04            [ 2]    1     sub sp,#VSIZE 
      001108 1F 01            [ 2] 2942 	ldw (1,sp),x 
      00110A 17 03            [ 2] 2943 	ldw (3,sp),y 
      00110C CD 10 BE         [ 4] 2944 	call divide 
      00110F 93               [ 1] 2945 	ldw x,y
      001110                       2946 	_drop VSIZE 
      001110 5B 04            [ 2]    1     addw sp,#VSIZE 
      001112 81               [ 4] 2947 	ret 
                                   2948 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2949 
                                   2950 ;----------------------------------
                                   2951 ; search in kword_dict command name
                                   2952 ;  from its execution address 
                                   2953 ; input:
                                   2954 ;   X       	execution address 
                                   2955 ; output:
                                   2956 ;   X 			cstr*  | 0 
                                   2957 ;--------------------------------
                           000001  2958 	XADR=1 
                           000003  2959 	LINK=3 
                           000004  2960 	VSIZE=4
      001113                       2961 cmd_name:
      001113                       2962 	_vars VSIZE 
      001113 52 04            [ 2]    1     sub sp,#VSIZE 
      001115 72 5F 00 09      [ 1] 2963 	clr acc16 
      001119 1F 01            [ 2] 2964 	ldw (XADR,sp),x  
      00111B AE 20 AA         [ 2] 2965 	ldw x,#kword_dict	
      00111E 1F 03            [ 2] 2966 1$:	ldw (LINK,sp),x
      001120 E6 02            [ 1] 2967 	ld a,(2,x)
      001122 A4 0F            [ 1] 2968 	and a,#15 
      001124 C7 00 0A         [ 1] 2969 	ld acc8,a 
      001127 1C 00 03         [ 2] 2970 	addw x,#3
      00112A 72 BB 00 09      [ 2] 2971 	addw x,acc16
      00112E FE               [ 2] 2972 	ldw x,(x) ; execution address 
      00112F 13 01            [ 2] 2973 	cpw x,(XADR,sp)
      001131 27 0A            [ 1] 2974 	jreq 2$
      001133 1E 03            [ 2] 2975 	ldw x,(LINK,sp)
      001135 FE               [ 2] 2976 	ldw x,(x) 
      001136 1D 00 02         [ 2] 2977 	subw x,#2  
      001139 26 E3            [ 1] 2978 	jrne 1$
      00113B 20 05            [ 2] 2979 	jra 9$
      00113D 1E 03            [ 2] 2980 2$: ldw x,(LINK,sp)
      00113F 1C 00 02         [ 2] 2981 	addw x,#2 	
      001142                       2982 9$:	_drop VSIZE
      001142 5B 04            [ 2]    1     addw sp,#VSIZE 
      001144 81               [ 4] 2983 	ret
                                   2984 
                                   2985 
                                   2986 ;---------------------------------
                                   2987 ; input:
                                   2988 ;	X 		dictionary entry point 
                                   2989 ;  pad		.asciz name to search 
                                   2990 ; output:
                                   2991 ;  A 		TK_CMD|TK_FUNC|TK_NONE 
                                   2992 ;  X		execution address | 0 
                                   2993 ;---------------------------------
                           000001  2994 	NLEN=1 ; cmd length 
                           000002  2995 	YSAVE=2
                           000003  2996 	VSIZE=3 
      001145                       2997 search_dict:
      001145                       2998 	_vars VSIZE 
      001145 52 03            [ 2]    1     sub sp,#VSIZE 
      001147 90 93            [ 1] 2999 	ldw y,x 
      001149                       3000 search_next:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001149 90 F6            [ 1] 3001 	ld a,(y)
      00114B A4 0F            [ 1] 3002 	and a,#0xf 
      00114D 6B 01            [ 1] 3003 	ld (NLEN,sp),a  
      00114F AE 17 18         [ 2] 3004 	ldw x,#pad 
      001152 17 02            [ 2] 3005 	ldw (YSAVE,sp),y
      001154 90 5C            [ 1] 3006 	incw y  
      001156                       3007 cp_loop:
      001156 F6               [ 1] 3008 	ld a,(x)
      001157 27 1E            [ 1] 3009 	jreq str_match 
      001159 0D 01            [ 1] 3010 	tnz (NLEN,sp)
      00115B 27 0B            [ 1] 3011 	jreq no_match  
      00115D 90 F1            [ 1] 3012 	cp a,(y)
      00115F 26 07            [ 1] 3013 	jrne no_match 
      001161 90 5C            [ 1] 3014 	incw y 
      001163 5C               [ 1] 3015 	incw x
      001164 0A 01            [ 1] 3016 	dec (NLEN,sp)
      001166 20 EE            [ 2] 3017 	jra cp_loop 
      001168                       3018 no_match:
      001168 16 02            [ 2] 3019 	ldw y,(YSAVE,sp) 
      00116A 72 A2 00 02      [ 2] 3020 	subw y,#2 ; move Y to link field
      00116E 4B 00            [ 1] 3021 	push #TK_NONE 
      001170 90 FE            [ 2] 3022 	ldw y,(y) ; next word link 
      001172 84               [ 1] 3023 	pop a ; TK_NONE 
      001173 27 24            [ 1] 3024 	jreq search_exit  ; not found  
                                   3025 ;try next 
      001175 20 D2            [ 2] 3026 	jra search_next
      001177                       3027 str_match:
      001177 16 02            [ 2] 3028 	ldw y,(YSAVE,sp)
      001179 90 F6            [ 1] 3029 	ld a,(y)
      00117B 6B 01            [ 1] 3030 	ld (NLEN,sp),a ; needed to test bit 7 
      00117D A4 7F            [ 1] 3031 	and a,#0x7f 
                                   3032 ; move y to procedure address field 	
      00117F 4C               [ 1] 3033 	inc a 
      001180 C7 00 0A         [ 1] 3034 	ld acc8,a 
      001183 72 5F 00 09      [ 1] 3035 	clr acc16 
      001187 72 B9 00 09      [ 2] 3036 	addw y,acc16 
      00118B 90 FE            [ 2] 3037 	ldw y,(y) ; routine entry point 
      00118D 7B 01            [ 1] 3038 	ld a,(NLEN,sp)
      00118F A5 80            [ 1] 3039 	bcp a,#0x80 
      001191 27 04            [ 1] 3040 	jreq 1$
      001193 A6 07            [ 1] 3041 	ld a,#TK_FUNC 
      001195 20 02            [ 2] 3042 	jra search_exit
      001197 A6 06            [ 1] 3043 1$: ld a,#TK_CMD 
      001199                       3044 search_exit: 
      001199 93               [ 1] 3045 	ldw x,y ; x=routine address 
      00119A                       3046 	_drop VSIZE 	 
      00119A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00119C 81               [ 4] 3047 	ret 
                                   3048 
                                   3049 ;---------------------
                                   3050 ; check if next token
                                   3051 ;  is of expected type 
                                   3052 ; input:
                                   3053 ;   A 		 expected token attribute
                                   3054 ;  ouput:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3055 ;   none     if fail call tb_error 
                                   3056 ;--------------------
      00119D                       3057 expect:
      00119D 88               [ 1] 3058 	push a 
      00119E CD 07 BD         [ 4] 3059 	call next_token 
      0011A1 11 01            [ 1] 3060 	cp a,(1,sp)
      0011A3 27 03            [ 1] 3061 	jreq 1$
      0011A5 CC 06 D7         [ 2] 3062 	jp syntax_error
      0011A8 84               [ 1] 3063 1$: pop a 
      0011A9 81               [ 4] 3064 	ret 
                                   3065 
                                   3066 
                                   3067 ;-------------------------------
                                   3068 ; parse embedded BASIC routines 
                                   3069 ; arguments list.
                                   3070 ; arg_list::=  rel[','rel]*
                                   3071 ; all arguments are of integer type
                                   3072 ; input:
                                   3073 ;   none
                                   3074 ; output:
                                   3075 ;   A 			number of arguments pushed on dstack  
                                   3076 ;--------------------------------
                           000001  3077 	ARG_CNT=1 
      0011AA                       3078 arg_list:
      0011AA 4B 00            [ 1] 3079 	push #0  
      0011AC CD 12 E8         [ 4] 3080 1$: call relation
      0011AF A1 00            [ 1] 3081 	cp a,#TK_NONE 
      0011B1 27 19            [ 1] 3082 	jreq 5$
      0011B3 A1 02            [ 1] 3083 	cp a,#TK_INTGR
      0011B5 26 12            [ 1] 3084 	jrne 4$
      0011B7 CD 0F 7A         [ 4] 3085 3$: call dpush 
      0011BA 0C 01            [ 1] 3086     inc (ARG_CNT,sp)
      0011BC CD 07 BD         [ 4] 3087 	call next_token 
      0011BF A1 00            [ 1] 3088 	cp a,#TK_NONE 
      0011C1 27 09            [ 1] 3089 	jreq 5$ 
      0011C3 A1 0B            [ 1] 3090 	cp a,#TK_COMMA 
      0011C5 26 02            [ 1] 3091 	jrne 4$
      0011C7 20 E3            [ 2] 3092 	jra 1$ 
      0011C9 CD 0F 73         [ 4] 3093 4$:	call unget_token 
      0011CC 84               [ 1] 3094 5$:	pop a 
      0011CD 81               [ 4] 3095 	ret 
                                   3096 
                                   3097 
                                   3098 
                                   3099 ;--------------------------------
                                   3100 ;   BASIC commnands 
                                   3101 ;--------------------------------
                                   3102 
                                   3103 ;--------------------------------
                                   3104 ;  arithmetic and relational 
                                   3105 ;  routines
                                   3106 ;  operators precedence
                                   3107 ;  highest to lowest
                                   3108 ;  operators on same row have 
                                   3109 ;  same precedence and are executed
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3110 ;  from left to right.
                                   3111 ;	'*','/','%'
                                   3112 ;   '-','+'
                                   3113 ;   '=','>','<','>=','<=','<>','><'
                                   3114 ;   '<>' and '><' are equivalent for not equal.
                                   3115 ;--------------------------------
                                   3116 
                                   3117 ;---------------------
                                   3118 ; return array element
                                   3119 ; address from @(expr)
                                   3120 ; input:
                                   3121 ;   A 		TK_ARRAY
                                   3122 ; output:
                                   3123 ;   A 		TK_INTGR
                                   3124 ;	X 		element address 
                                   3125 ;----------------------
      0011CE                       3126 get_array_element:
      0011CE CD 0F AE         [ 4] 3127 	call ddrop 
      0011D1 A6 09            [ 1] 3128 	ld a,#TK_LPAREN 
      0011D3 CD 11 9D         [ 4] 3129 	call expect
      0011D6 CD 12 E8         [ 4] 3130 	call relation 
      0011D9 A1 02            [ 1] 3131 	cp a,#TK_INTGR 
      0011DB 27 03            [ 1] 3132 	jreq 1$
      0011DD CC 06 D7         [ 2] 3133 	jp syntax_error
      0011E0 89               [ 2] 3134 1$: pushw x 
      0011E1 A6 0A            [ 1] 3135 	ld a,#TK_RPAREN 
      0011E3 CD 11 9D         [ 4] 3136 	call expect
                                   3137 	; check for bounds 
      0011E6 85               [ 2] 3138 	popw x   
      0011E7 C3 00 22         [ 2] 3139 	cpw x,array_size 
      0011EA 23 05            [ 2] 3140 	jrule 3$
                                   3141 ; bounds {1..array_size}	
      0011EC A6 0A            [ 1] 3142 2$: ld a,#ERR_BAD_VALUE 
      0011EE CC 06 D9         [ 2] 3143 	jp tb_error 
      0011F1 5D               [ 2] 3144 3$: tnzw  x
      0011F2 27 F8            [ 1] 3145 	jreq 2$ 
      0011F4 58               [ 2] 3146 	sllw x 
      0011F5 89               [ 2] 3147 	pushw x 
      0011F6 CE 00 20         [ 2] 3148 	ldw x,array_addr  
      0011F9 72 F0 01         [ 2] 3149 	subw x,(1,sp)
      0011FC                       3150 	_drop 2   
      0011FC 5B 02            [ 2]    1     addw sp,#2 
      0011FE A6 02            [ 1] 3151 	ld a,#TK_INTGR
      001200 81               [ 4] 3152 	ret 
                                   3153 
                                   3154 ;***********************************
                                   3155 ;   expression parse,execute 
                                   3156 ;***********************************
                                   3157 ;-----------------------------------
                                   3158 ; factor ::= ['+'|'-'|e] var | @ |
                                   3159 ;			 integer | function |
                                   3160 ;			 '('relation')' 
                                   3161 ; output:
                                   3162 ;   A    token attribute 
                                   3163 ;   X 	 integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3164 ; ---------------------------------
                           000001  3165 	NEG=1
                           000001  3166 	VSIZE=1
      001201                       3167 factor:
      001201                       3168 	_vars VSIZE 
      001201 52 01            [ 2]    1     sub sp,#VSIZE 
      001203 CD 07 BD         [ 4] 3169 	call next_token
      001206 A1 02            [ 1] 3170 	cp a,#CMD_END 
      001208 2B 4A            [ 1] 3171 	jrmi 20$
      00120A 6B 01            [ 1] 3172 1$:	ld (NEG,sp),a 
      00120C A4 30            [ 1] 3173 	and a,#TK_GRP_MASK
      00120E A1 10            [ 1] 3174 	cp a,#TK_GRP_ADD 
      001210 27 04            [ 1] 3175 	jreq 2$
      001212 7B 01            [ 1] 3176 	ld a,(NEG,sp)
      001214 20 03            [ 2] 3177 	jra 4$  
      001216                       3178 2$:	
      001216 CD 07 BD         [ 4] 3179 	call next_token 
      001219                       3180 4$:	
      001219 A1 07            [ 1] 3181 	cp a,#TK_FUNC 
      00121B 26 03            [ 1] 3182 	jrne 5$ 
      00121D FD               [ 4] 3183 	call (x) 
      00121E 20 2B            [ 2] 3184 	jra 18$ 
      001220                       3185 5$:
      001220 A1 02            [ 1] 3186 	cp a,#TK_INTGR
      001222 26 02            [ 1] 3187 	jrne 6$
      001224 20 25            [ 2] 3188 	jra 18$
      001226                       3189 6$:
      001226 A1 04            [ 1] 3190 	cp a,#TK_ARRAY
      001228 26 06            [ 1] 3191 	jrne 10$
      00122A CD 11 CE         [ 4] 3192 	call get_array_element
      00122D FE               [ 2] 3193 	ldw x,(x)
      00122E 20 1B            [ 2] 3194 	jra 18$ 
      001230                       3195 10$:
      001230 A1 03            [ 1] 3196 	cp a,#TK_VAR 
      001232 26 03            [ 1] 3197 	jrne 12$
      001234 FE               [ 2] 3198 	ldw x,(x)
      001235 20 14            [ 2] 3199 	jra 18$
      001237                       3200 12$:			
      001237 A1 09            [ 1] 3201 	cp a,#TK_LPAREN
      001239 26 0A            [ 1] 3202 	jrne 16$
      00123B CD 12 E8         [ 4] 3203 	call relation
      00123E A6 0A            [ 1] 3204 	ld a,#TK_RPAREN 
      001240 CD 11 9D         [ 4] 3205 	call expect
      001243 20 06            [ 2] 3206 	jra 18$	
      001245                       3207 16$:
      001245 CD 0F 73         [ 4] 3208 	call unget_token
      001248 4F               [ 1] 3209 	clr a 
      001249 20 09            [ 2] 3210 	jra 20$ 
      00124B                       3211 18$: 
      00124B A6 11            [ 1] 3212 	ld a,#TK_MINUS 
      00124D 11 01            [ 1] 3213 	cp a,(NEG,sp)
      00124F 26 01            [ 1] 3214 	jrne 19$
      001251 50               [ 2] 3215 	negw x
      001252                       3216 19$:
      001252 A6 02            [ 1] 3217 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001254                       3218 20$:
      001254                       3219 	_drop VSIZE
      001254 5B 01            [ 2]    1     addw sp,#VSIZE 
      001256 81               [ 4] 3220 	ret
                                   3221 
                                   3222 ;-----------------------------------
                                   3223 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3224 ; output:
                                   3225 ;   A    	token attribute 
                                   3226 ;	X		integer
                                   3227 ;-----------------------------------
                           000001  3228 	N1=1
                           000003  3229 	N2=3
                           000005  3230 	MULOP=5
                           000005  3231 	VSIZE=5
      001257                       3232 term:
      001257                       3233 	_vars VSIZE
      001257 52 05            [ 2]    1     sub sp,#VSIZE 
      001259 CD 12 01         [ 4] 3234 	call factor
      00125C A1 02            [ 1] 3235 	cp a,#CMD_END
      00125E 2B 41            [ 1] 3236 	jrmi term_exit
      001260                       3237 term01:	 ; check for  operator 
      001260 1F 03            [ 2] 3238 	ldw (N2,sp),x  ; save first factor 
      001262 CD 07 BD         [ 4] 3239 	call next_token
      001265 A1 02            [ 1] 3240 	cp a,#2
      001267 2B 34            [ 1] 3241 	jrmi 9$
      001269 6B 05            [ 1] 3242 0$:	ld (MULOP,sp),a
      00126B A4 30            [ 1] 3243 	and a,#TK_GRP_MASK
      00126D A1 20            [ 1] 3244 	cp a,#TK_GRP_MULT
      00126F 27 07            [ 1] 3245 	jreq 1$
      001271 7B 05            [ 1] 3246 	ld a,(MULOP,sp) 
      001273 CD 0F 73         [ 4] 3247 	call unget_token 
      001276 20 25            [ 2] 3248 	jra 9$
      001278                       3249 1$:	; got *|/|%
      001278 CD 12 01         [ 4] 3250 	call factor
      00127B A1 02            [ 1] 3251 	cp a,#TK_INTGR
      00127D 27 03            [ 1] 3252 	jreq 2$ 
      00127F CC 06 D7         [ 2] 3253 	jp syntax_error
      001282 1F 01            [ 2] 3254 2$:	ldw (N1,sp),x  
      001284 7B 05            [ 1] 3255 	ld a,(MULOP,sp) 
      001286 A1 20            [ 1] 3256 	cp a,#TK_MULT 
      001288 26 05            [ 1] 3257 	jrne 3$
      00128A CD 10 76         [ 4] 3258 	call multiply 
      00128D 20 D1            [ 2] 3259 	jra term01
      00128F A1 21            [ 1] 3260 3$: cp a,#TK_DIV 
      001291 26 05            [ 1] 3261 	jrne 4$ 
      001293 CD 10 BE         [ 4] 3262 	call divide 
      001296 20 C8            [ 2] 3263 	jra term01 
      001298 CD 11 02         [ 4] 3264 4$: call modulo
      00129B 20 C3            [ 2] 3265 	jra term01 
      00129D 1E 03            [ 2] 3266 9$: ldw x,(N2,sp)  
      00129F A6 02            [ 1] 3267 	ld a,#TK_INTGR 	
      0012A1                       3268 term_exit:
      0012A1                       3269 	_drop VSIZE 
      0012A1 5B 05            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0012A3 81               [ 4] 3270 	ret 
                                   3271 
                                   3272 ;-------------------------------
                                   3273 ;  expr ::= term [['+'|'-'] term]*
                                   3274 ;  result range {-32768..32767}
                                   3275 ;  output:
                                   3276 ;   A    token attribute 
                                   3277 ;   X	 integer   
                                   3278 ;-------------------------------
                           000001  3279 	N1=1 
                           000003  3280 	N2=3
                           000005  3281 	OP=5 
                           000005  3282 	VSIZE=5 
      0012A4                       3283 expression:
      0012A4                       3284 	_vars VSIZE 
      0012A4 52 05            [ 2]    1     sub sp,#VSIZE 
      0012A6 CD 12 57         [ 4] 3285 	call term
      0012A9 A1 02            [ 1] 3286 	cp a,#CMD_END 
      0012AB 2B 38            [ 1] 3287 	jrmi expr_exit 
      0012AD 1F 03            [ 2] 3288 0$:	ldw (N2,sp),x 
      0012AF CD 07 BD         [ 4] 3289 	call next_token
      0012B2 A1 02            [ 1] 3290 	cp a,#2
      0012B4 2B 2B            [ 1] 3291 	jrmi 9$ 
      0012B6 6B 05            [ 1] 3292 1$:	ld (OP,sp),a  
      0012B8 A4 30            [ 1] 3293 	and a,#TK_GRP_MASK
      0012BA A1 10            [ 1] 3294 	cp a,#TK_GRP_ADD 
      0012BC 27 07            [ 1] 3295 	jreq 2$ 
      0012BE 7B 05            [ 1] 3296 	ld a,(OP,sp)
      0012C0 CD 0F 73         [ 4] 3297 	call unget_token
      0012C3 20 1C            [ 2] 3298 	jra 9$
      0012C5                       3299 2$: 
      0012C5 CD 12 57         [ 4] 3300 	call term
      0012C8 A1 02            [ 1] 3301 	cp a,#TK_INTGR 
      0012CA 27 03            [ 1] 3302 	jreq 3$
      0012CC CC 06 D7         [ 2] 3303 	jp syntax_error
      0012CF 1F 01            [ 2] 3304 3$:	ldw (N1,sp),x 
      0012D1 7B 05            [ 1] 3305 	ld a,(OP,sp)
      0012D3 A1 10            [ 1] 3306 	cp a,#TK_PLUS 
      0012D5 26 05            [ 1] 3307 	jrne 4$
      0012D7 CD 10 68         [ 4] 3308 	call add 
      0012DA 20 D1            [ 2] 3309 	jra 0$ 
      0012DC CD 10 70         [ 4] 3310 4$:	call substract
      0012DF 20 CC            [ 2] 3311 	jra 0$
      0012E1 1E 03            [ 2] 3312 9$: ldw x,(N2,sp)
      0012E3 A6 02            [ 1] 3313 	ld a,#TK_INTGR	
      0012E5                       3314 expr_exit:
      0012E5                       3315 	_drop VSIZE 
      0012E5 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012E7 81               [ 4] 3316 	ret 
                                   3317 
                                   3318 ;---------------------------------------------
                                   3319 ; rel ::= expr rel_op expr
                                   3320 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3321 ;  relation return 1 | 0  for true | false 
                                   3322 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3323 ;    A 		token attribute  
                                   3324 ;	 X		1|0
                                   3325 ;---------------------------------------------
                           000001  3326 	N1=1
                           000003  3327 	N2=3
                           000005  3328 	RELOP=5
                           000005  3329 	VSIZE=5 
      0012E8                       3330 relation: 
      0012E8                       3331 	_vars VSIZE
      0012E8 52 05            [ 2]    1     sub sp,#VSIZE 
      0012EA CD 12 A4         [ 4] 3332 	call expression
      0012ED A1 02            [ 1] 3333 	cp a,#CMD_END  
      0012EF 2B 4B            [ 1] 3334 	jrmi rel_exit 
                                   3335 	; expect rel_op or leave 
      0012F1 1F 03            [ 2] 3336 	ldw (N2,sp),x 
      0012F3 CD 07 BD         [ 4] 3337 	call next_token 
      0012F6 A1 02            [ 1] 3338 	cp a,#2
      0012F8 2B 3E            [ 1] 3339 	jrmi 9$
      0012FA                       3340 1$:	
      0012FA 6B 05            [ 1] 3341 	ld (RELOP,sp),a 
      0012FC A4 30            [ 1] 3342 	and a,#TK_GRP_MASK
      0012FE A1 30            [ 1] 3343 	cp a,#TK_GRP_RELOP 
      001300 27 07            [ 1] 3344 	jreq 2$
      001302 7B 05            [ 1] 3345 	ld a,(RELOP,sp)
      001304 CD 0F 73         [ 4] 3346 	call unget_token  
      001307 20 2F            [ 2] 3347 	jra 9$
      001309                       3348 2$:	; expect another expression or error 
      001309 CD 12 A4         [ 4] 3349 	call expression
      00130C A1 02            [ 1] 3350 	cp a,#TK_INTGR 
      00130E 27 03            [ 1] 3351 	jreq 3$
      001310 CC 06 D7         [ 2] 3352 	jp syntax_error 
      001313 1F 01            [ 2] 3353 3$:	ldw (N1,sp),x 
      001315 CD 10 70         [ 4] 3354 	call substract
      001318 26 06            [ 1] 3355 	jrne 4$
      00131A 35 02 00 0A      [ 1] 3356 	mov acc8,#2 ; n1==n2
      00131E 20 0C            [ 2] 3357 	jra 6$ 
      001320                       3358 4$: 
      001320 2C 06            [ 1] 3359 	jrsgt 5$  
      001322 35 04 00 0A      [ 1] 3360 	mov acc8,#4 ; n1<2 
      001326 20 04            [ 2] 3361 	jra 6$
      001328                       3362 5$:
      001328 35 01 00 0A      [ 1] 3363 	mov acc8,#1 ; n1>n2 
      00132C                       3364 6$:
      00132C 5F               [ 1] 3365 	clrw x 
      00132D C6 00 0A         [ 1] 3366 	ld a, acc8  
      001330 14 05            [ 1] 3367 	and a,(RELOP,sp)
      001332 4D               [ 1] 3368 	tnz a 
      001333 27 05            [ 1] 3369 	jreq 10$
      001335 5C               [ 1] 3370 	incw x 
      001336                       3371 7$:	 
      001336 20 02            [ 2] 3372 	jra 10$  	
      001338 1E 03            [ 2] 3373 9$: ldw x,(N2,sp)
      00133A                       3374 10$:
      00133A A6 02            [ 1] 3375 	ld a,#TK_INTGR
      00133C                       3376 rel_exit: 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00133C                       3377 	_drop VSIZE
      00133C 5B 05            [ 2]    1     addw sp,#VSIZE 
      00133E 81               [ 4] 3378 	ret 
                                   3379 
                                   3380 ;--------------------------------
                                   3381 ; BASIC: SHOW 
                                   3382 ;  show content of dstack,cstack
                                   3383 ;--------------------------------
      00133F                       3384 show:
      00133F C6 00 07         [ 1] 3385 	ld a,base 
      001342 88               [ 1] 3386 	push a 
      001343 CD 10 08         [ 4] 3387 	call dots
      001346 CD 10 3B         [ 4] 3388 	call dotr 
      001349 84               [ 1] 3389 	pop a 
      00134A C7 00 07         [ 1] 3390 	ld base,a 
      00134D 4F               [ 1] 3391 	clr a 
      00134E 81               [ 4] 3392 	ret
                                   3393 
                                   3394 ;--------------------------------------------
                                   3395 ; BASIC: HEX 
                                   3396 ; select hexadecimal base for integer print
                                   3397 ;---------------------------------------------
      00134F                       3398 hex_base:
      00134F 35 10 00 07      [ 1] 3399 	mov base,#16 
      001353 81               [ 4] 3400 	ret 
                                   3401 
                                   3402 ;--------------------------------------------
                                   3403 ; BASIC: DEC 
                                   3404 ; select decimal base for integer print
                                   3405 ;---------------------------------------------
      001354                       3406 dec_base:
      001354 35 0A 00 07      [ 1] 3407 	mov base,#10
      001358 81               [ 4] 3408 	ret 
                                   3409 
                                   3410 ;------------------------
                                   3411 ; BASIC: SIZE 
                                   3412 ; return free size in text area
                                   3413 ; output:
                                   3414 ;   A 		TK_INTGR
                                   3415 ;   X 	    size integer
                                   3416 ;--------------------------
      001359                       3417 size:
      001359 AE 16 C8         [ 2] 3418 	ldw x,#tib 
      00135C 72 B0 00 1D      [ 2] 3419 	subw x,txtend 
      001360 A6 02            [ 1] 3420 	ld a,#TK_INTGR
      001362 81               [ 4] 3421 	ret 
                                   3422 
                                   3423 
                                   3424 ;------------------------
                                   3425 ; BASIC: UBOUND  
                                   3426 ; return array variable size 
                                   3427 ; output:
                                   3428 ;   A 		TK_INTGR
                                   3429 ;   X 	    array size 
                                   3430 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001363                       3431 ubound:
      001363 AE 16 C8         [ 2] 3432 	ldw x,#tib
      001366 72 B0 00 1D      [ 2] 3433 	subw x,txtend 
      00136A 54               [ 2] 3434 	srlw x 
      00136B CF 00 22         [ 2] 3435 	ldw array_size,x
      00136E A6 02            [ 1] 3436 	ld a,#TK_INTGR
      001370 81               [ 4] 3437 	ret 
                                   3438 
                                   3439 ;-----------------------------
                                   3440 ; BASIC: LET var=expr 
                                   3441 ; variable assignement 
                                   3442 ; output:
                                   3443 ;   A 		TK_NONE 
                                   3444 ;-----------------------------
      001371                       3445 let:
      001371 CD 07 BD         [ 4] 3446 	call next_token 
      001374 A1 03            [ 1] 3447 	cp a,#TK_VAR 
      001376 27 03            [ 1] 3448 	jreq let02
      001378 CC 06 D7         [ 2] 3449 	jp syntax_error
      00137B                       3450 let02:
      00137B CD 0F 7A         [ 4] 3451 	call dpush 
      00137E CD 07 BD         [ 4] 3452 	call next_token 
      001381 A1 32            [ 1] 3453 	cp a,#TK_EQUAL
      001383 27 03            [ 1] 3454 	jreq 1$
      001385 CC 06 D7         [ 2] 3455 	jp syntax_error
      001388                       3456 1$:	
      001388 CD 12 E8         [ 4] 3457 	call relation   
      00138B A1 02            [ 1] 3458 	cp a,#TK_INTGR 
      00138D 27 03            [ 1] 3459 	jreq 2$
      00138F CC 06 D7         [ 2] 3460 	jp syntax_error
      001392                       3461 2$:	
      001392 90 93            [ 1] 3462 	ldw y,x 
      001394 CD 0F 87         [ 4] 3463 	call dpop  
      001397 FF               [ 2] 3464 	ldw (x),y   
      001398 81               [ 4] 3465 	ret 
                                   3466 
                                   3467 ;----------------------------
                                   3468 ; BASIC: LIST [[start][,end]]
                                   3469 ; list program lines 
                                   3470 ; form start to end 
                                   3471 ; if empty argument list then 
                                   3472 ; list all.
                                   3473 ;----------------------------
                           000001  3474 	FIRST=1
                           000003  3475 	LAST=3 
                           000005  3476 	LN_PTR=5
                           000006  3477 	VSIZE=6 
      001399                       3478 list:
      001399                       3479 	_vars VSIZE
      001399 52 06            [ 2]    1     sub sp,#VSIZE 
      00139B CE 00 1B         [ 2] 3480 	ldw x,txtbgn 
      00139E C3 00 1D         [ 2] 3481 	cpw x,txtend 
      0013A1 2B 03            [ 1] 3482 	jrmi 1$
      0013A3 CC 14 19         [ 2] 3483 	jp list_exit ; nothing to list 
      0013A6 1F 05            [ 2] 3484 1$:	ldw (LN_PTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013A8 FE               [ 2] 3485 	ldw x,(x) 
      0013A9 1F 01            [ 2] 3486 	ldw (FIRST,sp),x ; list from first line 
      0013AB AE 7F FF         [ 2] 3487 	ldw x,#0x7fff ; biggest line number 
      0013AE 1F 03            [ 2] 3488 	ldw (LAST,sp),x 
      0013B0 CD 11 AA         [ 4] 3489 	call arg_list
      0013B3 4D               [ 1] 3490 	tnz a
      0013B4 27 3F            [ 1] 3491 	jreq list_start 
      0013B6 A1 02            [ 1] 3492 	cp a,#2 
      0013B8 27 07            [ 1] 3493 	jreq 4$
      0013BA A1 01            [ 1] 3494 	cp a,#1 
      0013BC 27 06            [ 1] 3495 	jreq first_line 
      0013BE CC 06 D7         [ 2] 3496 	jp syntax_error 
      0013C1 CD 0F 94         [ 4] 3497 4$:	call dswap
      0013C4                       3498 first_line:
      0013C4 CD 0F 87         [ 4] 3499 	call dpop 
      0013C7 1F 01            [ 2] 3500 	ldw (FIRST,sp),x 
      0013C9 A1 01            [ 1] 3501 	cp a,#1 
      0013CB 27 05            [ 1] 3502 	jreq lines_skip 	
      0013CD                       3503 last_line:
      0013CD CD 0F 87         [ 4] 3504 	call dpop 
      0013D0 1F 03            [ 2] 3505 	ldw (LAST,sp),x 
      0013D2                       3506 lines_skip:
      0013D2 CE 00 1B         [ 2] 3507 	ldw x,txtbgn
      0013D5 1F 05            [ 2] 3508 2$:	ldw (LN_PTR,sp),x 
      0013D7 C3 00 1D         [ 2] 3509 	cpw x,txtend 
      0013DA 2A 3D            [ 1] 3510 	jrpl list_exit 
      0013DC FE               [ 2] 3511 	ldw x,(x) ;lineno 
      0013DD 13 01            [ 2] 3512 	cpw x,(FIRST,sp)
      0013DF 2A 14            [ 1] 3513 	jrpl list_start 
      0013E1 1E 05            [ 2] 3514 	ldw x,(LN_PTR,sp) 
      0013E3 1C 00 02         [ 2] 3515 	addw x,#2 
      0013E6 F6               [ 1] 3516 	ld a,(x)
      0013E7 5C               [ 1] 3517 	incw x 
      0013E8 C7 00 0A         [ 1] 3518 	ld acc8,a 
      0013EB 72 5F 00 09      [ 1] 3519 	clr acc16 
      0013EF 72 BB 00 09      [ 2] 3520 	addw x,acc16
      0013F3 20 E0            [ 2] 3521 	jra 2$ 
                                   3522 ; print loop
      0013F5                       3523 list_start:
      0013F5 1E 05            [ 2] 3524 	ldw x,(LN_PTR,sp)
      0013F7                       3525 3$:	
      0013F7 CD 14 30         [ 4] 3526 	call prt_basic_line
      0013FA 1E 05            [ 2] 3527 	ldw x,(LN_PTR,sp)
      0013FC E6 02            [ 1] 3528 	ld a,(2,x)
      0013FE C7 00 0A         [ 1] 3529 	ld acc8,a 
      001401 72 5F 00 09      [ 1] 3530 	clr acc16 
      001405 72 BB 00 09      [ 2] 3531 	addw x,acc16
      001409 C3 00 1D         [ 2] 3532 	cpw x,txtend 
      00140C 2A 0B            [ 1] 3533 	jrpl list_exit
      00140E 1F 05            [ 2] 3534 	ldw (LN_PTR,sp),x
      001410 FE               [ 2] 3535 	ldw x,(x)
      001411 13 03            [ 2] 3536 	cpw x,(LAST,sp)  
      001413 2C 04            [ 1] 3537 	jrsgt list_exit 
      001415 1E 05            [ 2] 3538 	ldw x,(LN_PTR,sp)
      001417 20 DE            [ 2] 3539 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001419                       3540 list_exit:
      001419                       3541 	_drop VSIZE 
      001419 5B 06            [ 2]    1     addw sp,#VSIZE 
      00141B 81               [ 4] 3542 	ret
                                   3543 
                                   3544 ;-------------------------
                                   3545 ; print counted string 
                                   3546 ; input:
                                   3547 ;   X 		address of string
                                   3548 ;--------------------------
      00141C                       3549 prt_cmd_name:
      00141C F6               [ 1] 3550 	ld a,(x)
      00141D 5C               [ 1] 3551 	incw x
      00141E A4 0F            [ 1] 3552 	and a,#15  
      001420 88               [ 1] 3553 	push a 
      001421 0D 01            [ 1] 3554 1$: tnz (1,sp) 
      001423 27 09            [ 1] 3555 	jreq 9$
      001425 F6               [ 1] 3556 	ld a,(x)
      001426 CD 01 9E         [ 4] 3557 	call putc 
      001429 5C               [ 1] 3558 	incw x
      00142A 0A 01            [ 1] 3559 	dec (1,sp)	 
      00142C 20 F3            [ 2] 3560 	jra 1$
      00142E 84               [ 1] 3561 9$: pop a 
      00142F 81               [ 4] 3562 	ret	
                                   3563 
                                   3564 ;--------------------------
                                   3565 ; decompile line from token list 
                                   3566 ; input:
                                   3567 ;   X 		pointer at line
                                   3568 ; output:
                                   3569 ;   none 
                                   3570 ;--------------------------	
                           000001  3571 	BASE_SAV=1
                           000002  3572 	WIDTH_SAV=2
                           000003  3573 	XSAVE=3
                           000005  3574 	LLEN=5
                           000005  3575 	VSIZE=5 
      001430                       3576 prt_basic_line:
      001430                       3577 	_vars VSIZE 
      001430 52 05            [ 2]    1     sub sp,#VSIZE 
      001432 C6 00 07         [ 1] 3578 	ld a,base
      001435 6B 01            [ 1] 3579 	ld (BASE_SAV,sp),a  
      001437 C6 00 25         [ 1] 3580 	ld a,tab_width 
      00143A 6B 02            [ 1] 3581 	ld (WIDTH_SAV,sp),a 
      00143C CF 00 14         [ 2] 3582 	ldw ptr16,x
      00143F FE               [ 2] 3583 	ldw x,(x)
      001440 35 0A 00 07      [ 1] 3584 	mov base,#10
      001444 35 05 00 25      [ 1] 3585 	mov tab_width,#5
      001448 CD 09 4F         [ 4] 3586 	call print_int ; print line number 
      00144B A6 20            [ 1] 3587 	ld a,#SPACE 
      00144D CD 01 9E         [ 4] 3588 	call putc 
      001450 72 5F 00 25      [ 1] 3589 	clr tab_width
      001454 AE 00 02         [ 2] 3590 	ldw x,#2
      001457 72 D6 00 14      [ 4] 3591 	ld a,([ptr16],x)
      00145B 6B 05            [ 1] 3592 	ld (LLEN,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00145D 5C               [ 1] 3593 	incw x
      00145E 9F               [ 1] 3594 1$:	ld a,xl 
      00145F 11 05            [ 1] 3595 	cp a,(LLEN,sp)
      001461 2B 03            [ 1] 3596 	jrmi 19$
      001463 CC 15 3C         [ 2] 3597 	jp 90$
      001466                       3598 19$:	 
      001466 72 D6 00 14      [ 4] 3599 	ld a,([ptr16],x)
      00146A 5C               [ 1] 3600 	incw x 
      00146B 1F 03            [ 2] 3601 	ldw (XSAVE,sp),x 
      00146D A1 06            [ 1] 3602 	cp a,#TK_CMD 
      00146F 27 04            [ 1] 3603 	jreq 2$
      001471 A1 07            [ 1] 3604 	cp a,#TK_FUNC 
      001473 26 16            [ 1] 3605 	jrne 4$
      001475                       3606 2$:	
      001475 72 DE 00 14      [ 5] 3607 	ldw x,([ptr16],x)
      001479 CD 11 13         [ 4] 3608 	call cmd_name
      00147C CD 14 1C         [ 4] 3609 	call prt_cmd_name
      00147F A6 20            [ 1] 3610 	ld a,#SPACE 
      001481 CD 01 9E         [ 4] 3611 	call putc 
      001484 1E 03            [ 2] 3612 	ldw x,(XSAVE,sp)
      001486 1C 00 02         [ 2] 3613 	addw x,#2
      001489 20 D3            [ 2] 3614 	jra 1$
      00148B A1 08            [ 1] 3615 4$: cp a,#TK_QSTR 
      00148D 26 18            [ 1] 3616 	jrne 5$
      00148F A6 22            [ 1] 3617 	ld a,#'" 
      001491 CD 01 9E         [ 4] 3618 	call putc 
      001494 72 BB 00 14      [ 2] 3619 	addw x,ptr16
      001498 CD 01 B0         [ 4] 3620 	call puts 
      00149B A6 22            [ 1] 3621 	ld a,#'" 
      00149D CD 01 9E         [ 4] 3622 	call putc 
      0014A0 5C               [ 1] 3623 	incw x
      0014A1 72 B0 00 14      [ 2] 3624 	subw x,ptr16  
      0014A5 20 B7            [ 2] 3625 	jra 1$
      0014A7 A1 03            [ 1] 3626 5$:	cp a,#TK_VAR
      0014A9 26 15            [ 1] 3627 	jrne 6$ 
      0014AB 72 DE 00 14      [ 5] 3628 	ldw x,([ptr16],x)
      0014AF 1D 00 26         [ 2] 3629 	subw x,#vars 
      0014B2 9F               [ 1] 3630 	ld a,xl
      0014B3 44               [ 1] 3631 	srl a 
      0014B4 AB 41            [ 1] 3632 	add a,#'A 
      0014B6 CD 01 9E         [ 4] 3633 	call putc 
      0014B9 1E 03            [ 2] 3634 	ldw x,(XSAVE,sp)
      0014BB 1C 00 02         [ 2] 3635 	addw x,#2 
      0014BE 20 9E            [ 2] 3636 	jra 1$ 
      0014C0 A1 04            [ 1] 3637 6$: cp a,#TK_ARRAY 
      0014C2 26 09            [ 1] 3638 	jrne 7$
      0014C4 A6 40            [ 1] 3639 	ld a,#'@ 
      0014C6 CD 01 9E         [ 4] 3640 	call putc 
      0014C9 1E 03            [ 2] 3641 	ldw x,(XSAVE,sp)
      0014CB 20 91            [ 2] 3642 	jra 1$ 
      0014CD A1 02            [ 1] 3643 7$: cp a,#TK_INTGR 
      0014CF 26 0F            [ 1] 3644 	jrne 8$
      0014D1 72 DE 00 14      [ 5] 3645 	ldw x,([ptr16],x)
      0014D5 CD 09 4F         [ 4] 3646 	call print_int
      0014D8 1E 03            [ 2] 3647 	ldw x,(XSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014DA 1C 00 02         [ 2] 3648 	addw x,#2 
      0014DD CC 14 5E         [ 2] 3649 	jp 1$
      0014E0 A1 31            [ 1] 3650 8$: cp a,#TK_GT 
      0014E2 2B 1A            [ 1] 3651 	jrmi 9$
      0014E4 A1 35            [ 1] 3652 	cp a,#TK_NE 
      0014E6 22 16            [ 1] 3653 	jrugt 9$
      0014E8 A0 31            [ 1] 3654 	sub a,#TK_GT  
      0014EA 48               [ 1] 3655 	sll a 
      0014EB 90 5F            [ 1] 3656 	clrw y 
      0014ED 90 97            [ 1] 3657 	ld yl,a 
      0014EF 72 A9 15 55      [ 2] 3658 	addw y,#relop_str 
      0014F3 90 FE            [ 2] 3659 	ldw y,(y)
      0014F5 93               [ 1] 3660 	ldw x,y 
      0014F6 CD 01 B0         [ 4] 3661 	call puts 
      0014F9 1E 03            [ 2] 3662 	ldw x,(XSAVE,sp)
      0014FB CC 14 5E         [ 2] 3663 	jp 1$
      0014FE A1 10            [ 1] 3664 9$: cp a,#TK_PLUS 
      001500 26 04            [ 1] 3665 	jrne 10$
      001502 A6 2B            [ 1] 3666 	ld a,#'+
      001504 20 2E            [ 2] 3667 	jra 80$ 
      001506 A1 11            [ 1] 3668 10$: cp a,#TK_MINUS
      001508 26 04            [ 1] 3669 	jrne 11$
      00150A A6 2D            [ 1] 3670 	ld a,#'-
      00150C 20 26            [ 2] 3671 	jra 80$
      00150E A1 20            [ 1] 3672 11$: cp a,#TK_MULT 
      001510 2B 0E            [ 1] 3673 	jrmi 12$
      001512 A1 22            [ 1] 3674 	cp a,#TK_MOD 
      001514 22 0A            [ 1] 3675 	jrugt 12$
      001516 A0 20            [ 1] 3676 	sub a,#0x20
      001518 5F               [ 1] 3677 	clrw x 
      001519 97               [ 1] 3678 	ld xl,a 
      00151A 1C 15 52         [ 2] 3679 	addw x,#mul_char 
      00151D F6               [ 1] 3680 	ld a,(x)
      00151E 20 14            [ 2] 3681 	jra 80$ 
      001520 A1 09            [ 1] 3682 12$: cp a,#TK_LPAREN 
      001522 2B 0E            [ 1] 3683 	jrmi 13$
      001524 A1 0C            [ 1] 3684 	cp a,#TK_SHARP 
      001526 22 0A            [ 1] 3685 	jrugt 13$
      001528 A0 09            [ 1] 3686 	sub a,#TK_LPAREN
      00152A 5F               [ 1] 3687 	clrw x 
      00152B 97               [ 1] 3688 	ld xl,a 
      00152C 1C 15 4E         [ 2] 3689 	addw x,#single_char 
      00152F F6               [ 1] 3690 	ld a,(x)
      001530 20 02            [ 2] 3691 	jra 80$
      001532 A6 3A            [ 1] 3692 13$: ld a,#':
      001534 CD 01 9E         [ 4] 3693 80$: call putc 
      001537 1E 03            [ 2] 3694 	ldw x,(XSAVE,sp)
      001539 CC 14 5E         [ 2] 3695 	jp 1$ 
      00153C                       3696 90$: 
      00153C A6 0D            [ 1] 3697 	ld a,#CR 
      00153E CD 01 9E         [ 4] 3698 	call putc
      001541 7B 02            [ 1] 3699 	ld a,(WIDTH_SAV,sp) 
      001543 C7 00 25         [ 1] 3700 	ld tab_width,a 
      001546 7B 01            [ 1] 3701 	ld a,(BASE_SAV,sp) 
      001548 C7 00 07         [ 1] 3702 	ld base,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00154B                       3703 	_drop VSIZE 
      00154B 5B 05            [ 2]    1     addw sp,#VSIZE 
      00154D 81               [ 4] 3704 	ret 	
      00154E 28 29 2C 23           3705 single_char: .byte '(',')',',','#'
      001552 2A 2F 25              3706 mul_char: .byte '*','/','%'
      001555 15 61 15 63 15 65 15  3707 relop_str: .word gt,equal,ge,lt,le,ne 
             68 15 6A 15 6D
      001561 3E 00                 3708 gt: .asciz ">"
      001563 3D 00                 3709 equal: .asciz "="
      001565 3E 3D 00              3710 ge: .asciz ">="
      001568 3C 00                 3711 lt: .asciz "<"
      00156A 3C 3D 00              3712 le: .asciz "<="
      00156D 3C 3E 00              3713 ne:  .asciz "<>"
                                   3714 
                                   3715 
                                   3716 ;---------------------------------
                                   3717 ; BASIC: PRINT|? arg_list 
                                   3718 ; print values from argument list
                                   3719 ;----------------------------------
                           000001  3720 	COMMA=1
                           000001  3721 	VSIZE=1
      001570                       3722 print:
      001570 4B 00            [ 1] 3723 push #0 ; local variable COMMA 
      001572                       3724 reset_comma:
      001572 0F 01            [ 1] 3725 	clr (COMMA,sp)
      001574                       3726 prt_loop:
      001574 CD 12 E8         [ 4] 3727 	call relation 
      001577 A1 01            [ 1] 3728 	cp a,#TK_COLON 
      001579 27 59            [ 1] 3729 	jreq print_exit   
      00157B A1 02            [ 1] 3730 	cp a,#TK_INTGR 
      00157D 26 05            [ 1] 3731 	jrne 0$ 
      00157F CD 09 4F         [ 4] 3732 	call print_int 
      001582 20 EE            [ 2] 3733 	jra reset_comma
      001584                       3734 0$: 	
      001584 CD 07 BD         [ 4] 3735 	call next_token
      001587 A1 00            [ 1] 3736 	cp a,#TK_NONE 
      001589 27 49            [ 1] 3737 	jreq print_exit 
      00158B A1 08            [ 1] 3738 1$:	cp a,#TK_QSTR
      00158D 26 0E            [ 1] 3739 	jrne 2$   
      00158F CD 01 B0         [ 4] 3740 	call puts
      001592 5C               [ 1] 3741 	incw x 
      001593 72 B0 00 03      [ 2] 3742 	subw x,basicptr 
      001597 9F               [ 1] 3743 	ld a,xl 
      001598 C7 00 01         [ 1] 3744 	ld in,a  
      00159B 20 D5            [ 2] 3745 	jra reset_comma
      00159D A1 05            [ 1] 3746 2$: cp a,#TK_CHAR 
      00159F 26 06            [ 1] 3747 	jrne 3$
      0015A1 9F               [ 1] 3748 	ld a,xl 
      0015A2 CD 01 9E         [ 4] 3749 	call putc 
      0015A5 20 CB            [ 2] 3750 	jra reset_comma 
      0015A7                       3751 3$: 	
      0015A7 A1 07            [ 1] 3752 	cp a,#TK_FUNC 
      0015A9 26 06            [ 1] 3753 	jrne 4$ 
      0015AB FD               [ 4] 3754 	call (x)
      0015AC CD 09 4F         [ 4] 3755 	call print_int 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0015AF 20 C1            [ 2] 3756 	jra reset_comma 
      0015B1                       3757 4$: 
      0015B1 A1 0B            [ 1] 3758 	cp a,#TK_COMMA 
      0015B3 26 05            [ 1] 3759 	jrne 5$
      0015B5 03 01            [ 1] 3760 	cpl (COMMA,sp) 
      0015B7 CC 15 74         [ 2] 3761 	jp prt_loop   
      0015BA                       3762 5$: 
      0015BA A1 0C            [ 1] 3763 	cp a,#TK_SHARP
      0015BC 26 13            [ 1] 3764 	jrne 7$
      0015BE CD 07 BD         [ 4] 3765 	call next_token
      0015C1 A1 02            [ 1] 3766 	cp a,#TK_INTGR 
      0015C3 27 03            [ 1] 3767 	jreq 6$
      0015C5 CC 06 D7         [ 2] 3768 	jp syntax_error 
      0015C8                       3769 6$:
      0015C8 9F               [ 1] 3770 	ld a,xl 
      0015C9 A4 0F            [ 1] 3771 	and a,#15 
      0015CB C7 00 25         [ 1] 3772 	ld tab_width,a 
      0015CE CC 15 72         [ 2] 3773 	jp reset_comma 
      0015D1                       3774 7$:	
      0015D1 CD 0F 73         [ 4] 3775 	call unget_token
      0015D4                       3776 print_exit:
      0015D4 0D 01            [ 1] 3777 	tnz (COMMA,sp)
      0015D6 26 05            [ 1] 3778 	jrne 9$
      0015D8 A6 0D            [ 1] 3779 	ld a,#CR 
      0015DA CD 01 9E         [ 4] 3780     call putc 
      0015DD                       3781 9$:	_drop VSIZE 
      0015DD 5B 01            [ 2]    1     addw sp,#VSIZE 
      0015DF 81               [ 4] 3782 	ret 
                                   3783 
                                   3784 ;----------------------
                                   3785 ; 'save_context' and
                                   3786 ; 'rest_context' must be 
                                   3787 ; called at the same 
                                   3788 ; call stack depth 
                                   3789 ; i.e. SP must have the 
                                   3790 ; save value at  
                                   3791 ; entry point of both 
                                   3792 ; routine. 
                                   3793 ;---------------------
                           000006  3794 	CTXT_SIZE=6 ; size of saved data 
                                   3795 ;--------------------
                                   3796 ; save current BASIC
                                   3797 ; interpreter context 
                                   3798 ; on cstack 
                                   3799 ;--------------------
      0015E0                       3800 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      0015E0                       3801 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      0015E0                       3802 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      0015E0                       3803 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      0015E0                       3804 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015E0                       3805 save_context:
      0015E0 CE 00 03         [ 2] 3806 	ldw x,basicptr 
      0015E3 1F 03            [ 2] 3807 	ldw (BPTR,sp),x
      0015E5 CE 00 05         [ 2] 3808 	ldw x,lineno 
      0015E8 1F 05            [ 2] 3809 	ldw (LNO,sp),x 
      0015EA C6 00 01         [ 1] 3810 	ld a,in 
      0015ED 6B 07            [ 1] 3811 	ld (IN,sp),a
      0015EF C6 00 02         [ 1] 3812 	ld a,count 
      0015F2 6B 08            [ 1] 3813 	ld (CNT,sp),a  
      0015F4 81               [ 4] 3814 	ret
                                   3815 
                                   3816 ;-----------------------
                                   3817 ; restore previously saved 
                                   3818 ; BASIC interpreter context 
                                   3819 ; from cstack 
                                   3820 ;-------------------------
      0015F5                       3821 rest_context:
      0015F5 1E 03            [ 2] 3822 	ldw x,(BPTR,sp)
      0015F7 CF 00 03         [ 2] 3823 	ldw basicptr,x 
      0015FA 1E 05            [ 2] 3824 	ldw x,(LNO,sp)
      0015FC CF 00 05         [ 2] 3825 	ldw lineno,x 
      0015FF 7B 07            [ 1] 3826 	ld a,(IN,sp)
      001601 C7 00 01         [ 1] 3827 	ld in,a
      001604 7B 08            [ 1] 3828 	ld a,(CNT,sp)
      001606 C7 00 02         [ 1] 3829 	ld count,a  
      001609 81               [ 4] 3830 	ret
                                   3831 
                                   3832 ;------------------------------------------
                                   3833 ; BASIC: INPUT [string],var[,[string],var]
                                   3834 ; input value in variables 
                                   3835 ; [string] optionally can be used as prompt 
                                   3836 ;-----------------------------------------
                           000001  3837 	CX_BPTR=1
                           000003  3838 	CX_LNO=3
                           000004  3839 	CX_IN=4
                           000005  3840 	CX_CNT=5
                           000006  3841 	SKIP=6
                           000007  3842 	VSIZE=7
      00160A                       3843 input_var:
      00160A 72 00 00 24 05   [ 2] 3844 	btjt flags,#FRUN,1$ 
      00160F A6 06            [ 1] 3845 	ld a,#ERR_RUN_ONLY 
      001611 CC 06 D9         [ 2] 3846 	jp tb_error 
      001614                       3847 1$:	_vars VSIZE 
      001614 52 07            [ 2]    1     sub sp,#VSIZE 
      001616                       3848 input_loop:
      001616 0F 06            [ 1] 3849 	clr (SKIP,sp)
      001618 CD 07 BD         [ 4] 3850 	call next_token 
      00161B A1 00            [ 1] 3851 	cp a,#TK_NONE 
      00161D 27 5C            [ 1] 3852 	jreq input_exit 
      00161F A1 08            [ 1] 3853 	cp a,#TK_QSTR 
      001621 26 08            [ 1] 3854 	jrne 1$ 
      001623 CD 01 B0         [ 4] 3855 	call puts 
      001626 03 06            [ 1] 3856 	cpl (SKIP,sp)
      001628 CD 07 BD         [ 4] 3857 	call next_token 
      00162B A1 03            [ 1] 3858 1$: cp a,#TK_VAR  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00162D 27 03            [ 1] 3859 	jreq 2$ 
      00162F CC 06 D7         [ 2] 3860 	jp syntax_error
      001632 CD 0F 7A         [ 4] 3861 2$:	call dpush 
      001635 0D 06            [ 1] 3862 	tnz (SKIP,sp)
      001637 26 0F            [ 1] 3863 	jrne 21$ 
      001639 A6 3A            [ 1] 3864 	ld a,#':
      00163B C7 17 19         [ 1] 3865 	ld pad+1,a 
      00163E 72 5F 17 1A      [ 1] 3866 	clr pad+2
      001642 AE 17 18         [ 2] 3867 	ldw x,#pad 
      001645 CD 01 B0         [ 4] 3868 	call puts   
      001648                       3869 21$:
      001648 CD 15 E0         [ 4] 3870 	call save_context 
      00164B AE 16 C8         [ 2] 3871 	ldw x,#tib 
      00164E CF 00 03         [ 2] 3872 	ldw basicptr,x  
      001651 72 5F 00 02      [ 1] 3873 	clr count  
      001655 CD 0A 3D         [ 4] 3874 	call readln 
      001658 72 5F 00 01      [ 1] 3875 	clr in 
      00165C CD 12 E8         [ 4] 3876 	call relation 
      00165F A1 02            [ 1] 3877 	cp a,#TK_INTGR
      001661 27 03            [ 1] 3878 	jreq 3$ 
      001663 CC 06 D7         [ 2] 3879 	jp syntax_error
      001666 CD 0F 7A         [ 4] 3880 3$: call dpush 
      001669 CD 0F E1         [ 4] 3881 	call store 
      00166C CD 15 F5         [ 4] 3882 	call rest_context
      00166F CD 07 BD         [ 4] 3883 	call next_token 
      001672 A1 0B            [ 1] 3884 	cp a,#TK_COMMA 
      001674 26 02            [ 1] 3885 	jrne 4$
      001676 20 9E            [ 2] 3886 	jra input_loop 
      001678 CD 0F 73         [ 4] 3887 4$:	call unget_token 
      00167B                       3888 input_exit:
      00167B                       3889 	_drop VSIZE 
      00167B 5B 07            [ 2]    1     addw sp,#VSIZE 
      00167D 81               [ 4] 3890 	ret 
                                   3891 
                                   3892 
                                   3893 ;---------------------
                                   3894 ; BASIC: REMARK | ' 
                                   3895 ; begin a comment 
                                   3896 ; comment are ignored 
                                   3897 ; use ' insted of REM 
                                   3898 ; This is never called
                                   3899 ; because get_token 
                                   3900 ; take care of skipping
                                   3901 ; comment. but required
                                   3902 ; for future use of 
                                   3903 ; keyword reverse search.  
                                   3904 ;---------------------- 
      00167E                       3905 rem: 
      00167E 81               [ 4] 3906 	ret 
                                   3907 
                                   3908 ;---------------------
                                   3909 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3910 ; read in loop 'addr'  
                                   3911 ; apply & 'mask' to value 
                                   3912 ; loop while result==0.  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   3913 ; if 'xor_mask' given 
                                   3914 ; apply ^ in second  
                                   3915 ; loop while result==0 
                                   3916 ;---------------------
                           000001  3917 	XMASK=1 
                           000002  3918 	MASK=2
                           000003  3919 	ADDR=3
                           000004  3920 	VSIZE=4
      00167F                       3921 wait: 
      00167F                       3922 	_vars VSIZE
      00167F 52 04            [ 2]    1     sub sp,#VSIZE 
      001681 0F 01            [ 1] 3923 	clr (XMASK,sp) 
      001683 CD 11 AA         [ 4] 3924 	call arg_list 
      001686 A1 02            [ 1] 3925 	cp a,#2
      001688 24 03            [ 1] 3926 	jruge 0$
      00168A CC 06 D7         [ 2] 3927 	jp syntax_error 
      00168D A1 03            [ 1] 3928 0$:	cp a,#3
      00168F 25 06            [ 1] 3929 	jrult 1$
      001691 CD 0F 87         [ 4] 3930 	call dpop 
      001694 9F               [ 1] 3931 	ld a,xl
      001695 6B 01            [ 1] 3932 	ld (XMASK,sp),a 
      001697 CD 0F 87         [ 4] 3933 1$: call dpop ; mask 
      00169A 9F               [ 1] 3934 	ld a,xl 
      00169B 6B 02            [ 1] 3935 	ld (MASK,sp),a 
      00169D CD 0F 87         [ 4] 3936 	call dpop ; address 
      0016A0 F6               [ 1] 3937 2$:	ld a,(x)
      0016A1 14 02            [ 1] 3938 	and a,(MASK,sp)
      0016A3 18 01            [ 1] 3939 	xor a,(XMASK,sp)
      0016A5 27 F9            [ 1] 3940 	jreq 2$ 
      0016A7                       3941 	_drop VSIZE 
      0016A7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0016A9 81               [ 4] 3942 	ret 
                                   3943 
                                   3944 ;---------------------
                                   3945 ; BASIC: BSET addr,mask
                                   3946 ; set bits at 'addr' corresponding 
                                   3947 ; to those of 'mask' that are at 1.
                                   3948 ; arguments:
                                   3949 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3950 ;   mask        mask|addr
                                   3951 ; output:
                                   3952 ;	none 
                                   3953 ;--------------------------
      0016AA                       3954 bit_set:
      0016AA CD 11 AA         [ 4] 3955 	call arg_list 
      0016AD A1 02            [ 1] 3956 	cp a,#2	 
      0016AF 27 03            [ 1] 3957 	jreq 1$ 
      0016B1 CC 06 D7         [ 2] 3958 	jp syntax_error
      0016B4                       3959 1$: 
      0016B4 CD 0F 87         [ 4] 3960 	call dpop ; mask 
      0016B7 9F               [ 1] 3961 	ld a,xl 
      0016B8 CD 0F 87         [ 4] 3962 	call dpop ; addr  
      0016BB FA               [ 1] 3963 	or a,(x)
      0016BC F7               [ 1] 3964 	ld (x),a
      0016BD 81               [ 4] 3965 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3966 
                                   3967 ;---------------------
                                   3968 ; BASIC: BRES addr,mask
                                   3969 ; reset bits at 'addr' corresponding 
                                   3970 ; to those of 'mask' that are at 1.
                                   3971 ; arguments:
                                   3972 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3973 ;   mask	    ~mask&*addr  
                                   3974 ; output:
                                   3975 ;	none 
                                   3976 ;--------------------------
      0016BE                       3977 bit_reset:
      0016BE CD 11 AA         [ 4] 3978 	call arg_list 
      0016C1 A1 02            [ 1] 3979 	cp a,#2  
      0016C3 27 03            [ 1] 3980 	jreq 1$ 
      0016C5 CC 06 D7         [ 2] 3981 	jp syntax_error
      0016C8                       3982 1$: 
      0016C8 CD 0F 87         [ 4] 3983 	call dpop ; mask 
      0016CB 9F               [ 1] 3984 	ld a,xl 
      0016CC 43               [ 1] 3985 	cpl a 
      0016CD CD 0F 87         [ 4] 3986 	call dpop ; addr  
      0016D0 F4               [ 1] 3987 	and a,(x)
      0016D1 F7               [ 1] 3988 	ld (x),a 
      0016D2 81               [ 4] 3989 	ret 
                                   3990 
                                   3991 ;---------------------
                                   3992 ; BASIC: BRES addr,mask
                                   3993 ; toggle bits at 'addr' corresponding 
                                   3994 ; to those of 'mask' that are at 1.
                                   3995 ; arguments:
                                   3996 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3997 ;   mask	    mask^*addr  
                                   3998 ; output:
                                   3999 ;	none 
                                   4000 ;--------------------------
      0016D3                       4001 bit_toggle:
      0016D3 CD 11 AA         [ 4] 4002 	call arg_list 
      0016D6 A1 02            [ 1] 4003 	cp a,#2 
      0016D8 27 03            [ 1] 4004 	jreq 1$ 
      0016DA CC 06 D7         [ 2] 4005 	jp syntax_error
      0016DD CD 0F 87         [ 4] 4006 1$: call dpop ; mask 
      0016E0 9F               [ 1] 4007 	ld a,xl 
      0016E1 CD 0F 87         [ 4] 4008 	call dpop ; addr  
      0016E4 F8               [ 1] 4009 	xor a,(x)
      0016E5 F7               [ 1] 4010 	ld (x),a 
      0016E6 81               [ 4] 4011 	ret 
                                   4012 
                                   4013 
                                   4014 ;--------------------
                                   4015 ; BASIC: POKE addr,byte
                                   4016 ; put a byte at addr 
                                   4017 ;--------------------
      0016E7                       4018 poke:
      0016E7 CD 11 AA         [ 4] 4019 	call arg_list 
      0016EA A1 02            [ 1] 4020 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016EC 27 03            [ 1] 4021 	jreq 1$
      0016EE CC 06 D7         [ 2] 4022 	jp syntax_error
      0016F1                       4023 1$:	
      0016F1 CD 0F 87         [ 4] 4024 	call dpop 
      0016F4 9F               [ 1] 4025     ld a,xl 
      0016F5 CD 0F 87         [ 4] 4026 	call dpop 
      0016F8 F7               [ 1] 4027 	ld (x),a 
      0016F9 81               [ 4] 4028 	ret 
                                   4029 
                                   4030 ;-----------------------
                                   4031 ; BASIC: PEEK(addr)
                                   4032 ; get the byte at addr 
                                   4033 ; input:
                                   4034 ;	none 
                                   4035 ; output:
                                   4036 ;	X 		value 
                                   4037 ;-----------------------
      0016FA                       4038 peek:
      0016FA A6 09            [ 1] 4039 	ld a,#TK_LPAREN 
      0016FC CD 11 9D         [ 4] 4040 	call expect 
      0016FF CD 11 AA         [ 4] 4041 	call arg_list
      001702 A1 01            [ 1] 4042 	cp a,#1 
      001704 27 03            [ 1] 4043 	jreq 1$
      001706 CC 06 D7         [ 2] 4044 	jp syntax_error
      001709 A6 0A            [ 1] 4045 1$:	ld a,#TK_RPAREN 
      00170B CD 11 9D         [ 4] 4046 	call expect 
      00170E CD 0F 87         [ 4] 4047 	call dpop 
      001711 F6               [ 1] 4048 	ld a,(x)
      001712 5F               [ 1] 4049 	clrw x 
      001713 97               [ 1] 4050 	ld xl,a 
      001714 A6 02            [ 1] 4051 	ld a,#TK_INTGR
      001716 81               [ 4] 4052 	ret 
                                   4053 
      001717                       4054 if: 
      001717 CD 12 E8         [ 4] 4055 	call relation 
      00171A A1 02            [ 1] 4056 	cp a,#TK_INTGR
      00171C 27 03            [ 1] 4057 	jreq 1$ 
      00171E CC 06 D7         [ 2] 4058 	jp syntax_error
      001721 4F               [ 1] 4059 1$:	clr a 
      001722 5D               [ 2] 4060 	tnzw x 
      001723 26 05            [ 1] 4061 	jrne 9$  
                                   4062 ;skip to next line
      001725 55 00 02 00 01   [ 1] 4063 	mov in,count
      00172A 81               [ 4] 4064 9$:	ret 
                                   4065 
                                   4066 ;------------------------
                                   4067 ; BASIC: FOR var=expr 
                                   4068 ; set variable to expression 
                                   4069 ; leave variable address 
                                   4070 ; on dstack and set
                                   4071 ; FFOR bit in 'flags'
                                   4072 ;-----------------
                           000001  4073 	RETL1=1
                           000003  4074 	INW=3
                           000005  4075 	BPTR=5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00172B                       4076 for: ; { -- var_addr }
      00172B A6 03            [ 1] 4077 	ld a,#TK_VAR 
      00172D CD 11 9D         [ 4] 4078 	call expect
      001730 CD 0F 7A         [ 4] 4079 	call dpush 
      001733 CD 13 7B         [ 4] 4080 	call let02 
      001736 72 14 00 24      [ 1] 4081 	bset flags,#FFOR 
                                   4082 ; open space on cstack for BPTR and INW 
      00173A 85               [ 2] 4083 	popw x ; call return address 
      00173B                       4084 	_vars 4
      00173B 52 04            [ 2]    1     sub sp,#4 
      00173D 89               [ 2] 4085 	pushw x  ; RETL1 
      00173E 5F               [ 1] 4086 	clrw x 
      00173F 1F 05            [ 2] 4087 	ldw (BPTR,sp),x 
      001741 1F 03            [ 2] 4088 	ldw (INW,sp),x 
      001743 CD 07 BD         [ 4] 4089 	call next_token 
      001746 A1 06            [ 1] 4090 	cp a,#TK_CMD 
      001748 27 03            [ 1] 4091 	jreq 1$
      00174A CC 06 D7         [ 2] 4092 	jp syntax_error
      00174D                       4093 1$:  
      00174D A3 17 55         [ 2] 4094 	cpw x,#to 
      001750 27 03            [ 1] 4095 	jreq to
      001752 CC 06 D7         [ 2] 4096 	jp syntax_error 
                                   4097 
                                   4098 ;-----------------------------------
                                   4099 ; BASIC: TO expr 
                                   4100 ; second part of FOR loop initilization
                                   4101 ; leave limit on dstack and set 
                                   4102 ; FTO bit in 'flags'
                                   4103 ;-----------------------------------
      001755                       4104 to: ; { var_addr -- var_addr limit step }
      001755 72 04 00 24 03   [ 2] 4105 	btjt flags,#FFOR,1$
      00175A CC 06 D7         [ 2] 4106 	jp syntax_error
      00175D CD 12 E8         [ 4] 4107 1$: call relation  
      001760 A1 02            [ 1] 4108 	cp a,#TK_INTGR 
      001762 27 03            [ 1] 4109 	jreq 2$ 
      001764 CC 06 D7         [ 2] 4110 	jp syntax_error
      001767                       4111 2$: 
      001767 CD 0F 7A         [ 4] 4112     call dpush ; limit
      00176A CE 00 00         [ 2] 4113 	ldw x,in.w 
      00176D CD 07 BD         [ 4] 4114 	call next_token
      001770 A1 00            [ 1] 4115 	cp a,#TK_NONE  
      001772 27 0C            [ 1] 4116 	jreq 4$ 
      001774 A1 06            [ 1] 4117 	cp a,#TK_CMD
      001776 26 05            [ 1] 4118 	jrne 3$
      001778 A3 17 85         [ 2] 4119 	cpw x,#step 
      00177B 27 08            [ 1] 4120 	jreq step
      00177D                       4121 3$:	
      00177D CD 0F 73         [ 4] 4122 	call unget_token   	 
      001780                       4123 4$:	
      001780 AE 00 01         [ 2] 4124 	ldw x,#1   ; default step  
      001783 20 12            [ 2] 4125 	jra store_loop_addr 
                                   4126 
                                   4127 
                                   4128 ;----------------------------------
                                   4129 ; BASIC: STEP expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4130 ; optional third par of FOR loop
                                   4131 ; initialization. 	
                                   4132 ;------------------------------------
      001785                       4133 step: ; {var limit -- var limit step}
      001785 72 04 00 24 03   [ 2] 4134 	btjt flags,#FFOR,1$
      00178A CC 06 D7         [ 2] 4135 	jp syntax_error
      00178D CD 12 E8         [ 4] 4136 1$: call relation
      001790 A1 02            [ 1] 4137 	cp a,#TK_INTGR
      001792 27 03            [ 1] 4138 	jreq store_loop_addr  
      001794 CC 06 D7         [ 2] 4139 	jp syntax_error
                                   4140 ; leave loop back entry point on cstack 
                                   4141 ; cstack is 2 call deep from interp_loop
      001797                       4142 store_loop_addr:
      001797 CD 0F 7A         [ 4] 4143 	call dpush 
      00179A CE 00 03         [ 2] 4144 	ldw x,basicptr  
      00179D 1F 05            [ 2] 4145 	ldw (BPTR,sp),x 
      00179F CE 00 00         [ 2] 4146 	ldw x,in.w 
      0017A2 1F 03            [ 2] 4147 	ldw (INW,sp),x   
      0017A4 72 15 00 24      [ 1] 4148 	bres flags,#FFOR 
      0017A8 72 5C 00 1F      [ 1] 4149 	inc loop_depth  
      0017AC 81               [ 4] 4150 	ret 
                                   4151 
                                   4152 ;--------------------------------
                                   4153 ; BASIC: NEXT var 
                                   4154 ; FOR loop control 
                                   4155 ; increment variable with step 
                                   4156 ; and compare with limit 
                                   4157 ; loop if threshold not crossed.
                                   4158 ; else clean both stacks. 
                                   4159 ; and decrement 'loop_depth' 
                                   4160 ;--------------------------------
      0017AD                       4161 next: ; {var limit step -- [var limit step ] }
      0017AD 72 5D 00 1F      [ 1] 4162 	tnz loop_depth 
      0017B1 26 03            [ 1] 4163 	jrne 1$ 
      0017B3 CC 06 D7         [ 2] 4164 	jp syntax_error 
      0017B6                       4165 1$: 
      0017B6 A6 03            [ 1] 4166 	ld a,#TK_VAR 
      0017B8 CD 11 9D         [ 4] 4167 	call expect
                                   4168 ; check for good variable after NEXT 	 
      0017BB 90 93            [ 1] 4169 	ldw y,x 
      0017BD AE 00 04         [ 2] 4170 	ldw x,#4  
      0017C0 72 D3 00 19      [ 4] 4171 	cpw y,([dstkptr],x) ; compare variables address 
      0017C4 27 03            [ 1] 4172 	jreq 2$  
      0017C6 CC 06 D7         [ 2] 4173 	jp syntax_error ; not the good one 
      0017C9                       4174 2$: ; increment variable 
      0017C9 93               [ 1] 4175 	ldw x,y
      0017CA FE               [ 2] 4176 	ldw x,(x)  ; get var value 
      0017CB CF 00 09         [ 2] 4177 	ldw acc16,x 
      0017CE 72 CE 00 19      [ 5] 4178 	ldw x,[dstkptr] ; step
      0017D2 72 BB 00 09      [ 2] 4179 	addw x,acc16 ; var+step 
      0017D6 90 FF            [ 2] 4180 	ldw (y),x ; save var new value 
                                   4181 ; compare with limit 
      0017D8 90 93            [ 1] 4182 	ldw y,x 
      0017DA 72 CE 00 19      [ 5] 4183 	ldw x,[dstkptr] ; step in x 
      0017DE 5D               [ 2] 4184 	tnzw x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0017DF 2A 0B            [ 1] 4185 	jrpl 4$ ; positive step 
                                   4186 ;negative step 
      0017E1 AE 00 02         [ 2] 4187 	ldw x,#2
      0017E4 72 D3 00 19      [ 4] 4188 	cpw y,([dstkptr],x)
      0017E8 2F 26            [ 1] 4189 	jrslt loop_done
      0017EA 20 09            [ 2] 4190 	jra loop_back 
      0017EC                       4191 4$: ; positive step
      0017EC AE 00 02         [ 2] 4192 	ldw x,#2 
      0017EF 72 D3 00 19      [ 4] 4193 	cpw y,([dstkptr],x)
      0017F3 2C 1B            [ 1] 4194 	jrsgt loop_done
      0017F5                       4195 loop_back:
      0017F5 1E 05            [ 2] 4196 	ldw x,(BPTR,sp)
      0017F7 CF 00 03         [ 2] 4197 	ldw basicptr,x 
      0017FA 72 01 00 24 0B   [ 2] 4198 	btjf flags,#FRUN,1$ 
      0017FF E6 02            [ 1] 4199 	ld a,(2,x)
      001801 AB 02            [ 1] 4200 	add a,#2 
      001803 C7 00 02         [ 1] 4201 	ld count,a
      001806 FE               [ 2] 4202 	ldw x,(x)
      001807 CF 00 05         [ 2] 4203 	ldw lineno,x
      00180A 1E 03            [ 2] 4204 1$:	ldw x,(INW,sp)
      00180C CF 00 00         [ 2] 4205 	ldw in.w,x 
      00180F 81               [ 4] 4206 	ret 
      001810                       4207 loop_done:
                                   4208 	; remove var limit step on dstack 
      001810 CE 00 19         [ 2] 4209 	ldw x,dstkptr 
      001813 1C 00 06         [ 2] 4210 	addw x,#3*CELL_SIZE
      001816 CF 00 19         [ 2] 4211 	ldw dstkptr,x 
                                   4212 	; remove 2 return address on cstack 
      001819 85               [ 2] 4213 	popw x
      00181A                       4214 	_drop 4
      00181A 5B 04            [ 2]    1     addw sp,#4 
      00181C 89               [ 2] 4215 	pushw x 
      00181D 72 5A 00 1F      [ 1] 4216 	dec loop_depth 
      001821 81               [ 4] 4217 	ret 
                                   4218 
                                   4219 
                                   4220 ;------------------------
                                   4221 ; BASIC: GOTO lineno 
                                   4222 ; jump to lineno 
                                   4223 ; here cstack is 2 call deep from interp_loop 
                                   4224 ;------------------------
      001822                       4225 goto:
      001822 72 00 00 24 06   [ 2] 4226 	btjt flags,#FRUN,0$ 
      001827 A6 06            [ 1] 4227 	ld a,#ERR_RUN_ONLY
      001829 CC 06 D9         [ 2] 4228 	jp tb_error 
      00182C 81               [ 4] 4229 	ret 
      00182D 20 23            [ 2] 4230 0$:	jra go_common
                                   4231 
                                   4232 ;--------------------
                                   4233 ; BASIC: GOSUB lineno
                                   4234 ; basic subroutine call
                                   4235 ; actual lineno and basicptr 
                                   4236 ; are saved on cstack
                                   4237 ; here cstack is 2 call deep from interp_loop 
                                   4238 ;--------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                           000003  4239 	GOS_RET=3
      00182F                       4240 gosub:
      00182F 72 00 00 24 06   [ 2] 4241 	btjt flags,#FRUN,0$ 
      001834 A6 06            [ 1] 4242 	ld a,#ERR_RUN_ONLY
      001836 CC 06 D9         [ 2] 4243 	jp tb_error 
      001839 81               [ 4] 4244 	ret 
      00183A 85               [ 2] 4245 0$:	popw x 
      00183B 52 02            [ 2] 4246 	sub sp,#2 
      00183D 89               [ 2] 4247 	pushw x 
      00183E CE 00 03         [ 2] 4248 	ldw x,basicptr
      001841 E6 02            [ 1] 4249 	ld a,(2,x)
      001843 AB 03            [ 1] 4250 	add a,#3 
      001845 C7 00 0A         [ 1] 4251 	ld acc8,a 
      001848 72 5F 00 09      [ 1] 4252 	clr acc16 
      00184C 72 BB 00 09      [ 2] 4253 	addw x,acc16
      001850 1F 03            [ 2] 4254 	ldw (GOS_RET,sp),x 
      001852                       4255 go_common: 
      001852 CD 12 E8         [ 4] 4256 	call relation 
      001855 A1 02            [ 1] 4257 	cp a,#TK_INTGR
      001857 27 03            [ 1] 4258 	jreq 1$ 
      001859 CC 06 D7         [ 2] 4259 	jp syntax_error
      00185C                       4260 1$: 
      00185C CD 02 E0         [ 4] 4261 	call search_lineno  
      00185F 5D               [ 2] 4262 	tnzw x 
      001860 26 05            [ 1] 4263 	jrne 2$ 
      001862 A6 05            [ 1] 4264 	ld a,#ERR_NO_LINE 
      001864 CC 06 D9         [ 2] 4265 	jp tb_error 
      001867                       4266 2$: 
      001867 CF 00 03         [ 2] 4267 	ldw basicptr,x 
      00186A E6 02            [ 1] 4268 	ld a,(2,x)
      00186C AB 03            [ 1] 4269 	add a,#3 
      00186E C7 00 02         [ 1] 4270 	ld count,a 
      001871 FE               [ 2] 4271 	ldw x,(x)
      001872 CF 00 05         [ 2] 4272 	ldw lineno,x 
      001875 35 03 00 01      [ 1] 4273 	mov in,#3 
      001879 81               [ 4] 4274 	ret 
                                   4275 
                                   4276 ;------------------------
                                   4277 ; BASIC: RETURN 
                                   4278 ; exit from a subroutine 
                                   4279 ; cstack is 2 level deep from interp_loop 
                                   4280 ;------------------------
      00187A                       4281 return:
      00187A 72 00 00 24 05   [ 2] 4282 	btjt flags,#FRUN,0$ 
      00187F A6 06            [ 1] 4283 	ld a,#ERR_RUN_ONLY
      001881 CC 06 D9         [ 2] 4284 	jp tb_error 
      001884                       4285 0$:	
      001884 1E 03            [ 2] 4286 	ldw x,(GOS_RET,sp) 
      001886 CF 00 03         [ 2] 4287 	ldw basicptr,x 
      001889 E6 02            [ 1] 4288 	ld a,(2,x)
      00188B AB 03            [ 1] 4289 	add a,#3 
      00188D C7 00 02         [ 1] 4290 	ld count,a 
      001890 35 03 00 01      [ 1] 4291 	mov in,#3
      001894 FE               [ 2] 4292 	ldw x,(x)
      001895 CF 00 05         [ 2] 4293 	ldw lineno,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001898 4F               [ 1] 4294 	clr a 
      001899 85               [ 2] 4295 	popw x 
      00189A                       4296 	_drop 2
      00189A 5B 02            [ 2]    1     addw sp,#2 
      00189C 89               [ 2] 4297 	pushw x
      00189D 81               [ 4] 4298 	ret  
                                   4299 
                                   4300 
                                   4301 ;----------------------------------
                                   4302 ; BASIC: RUN
                                   4303 ; run BASIC program in RAM
                                   4304 ;----------------------------------- 
      00189E                       4305 run: 
      00189E 72 01 00 24 02   [ 2] 4306 	btjf flags,#FRUN,0$  
      0018A3 4F               [ 1] 4307 	clr a 
      0018A4 81               [ 4] 4308 	ret
      0018A5                       4309 0$: 
      0018A5 72 09 00 24 12   [ 2] 4310 	btjf flags,#FBREAK,1$
      0018AA                       4311 	_drop 2 
      0018AA 5B 02            [ 2]    1     addw sp,#2 
      0018AC CD 15 F5         [ 4] 4312 	call rest_context
      0018AF                       4313 	_drop CTXT_SIZE 
      0018AF 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      0018B1 72 19 00 24      [ 1] 4314 	bres flags,#FBREAK 
      0018B5 72 10 00 24      [ 1] 4315 	bset flags,#FRUN 
      0018B9 CC 07 8D         [ 2] 4316 	jp interp_loop 
      0018BC CE 00 1B         [ 2] 4317 1$:	ldw x,txtbgn
      0018BF C3 00 1D         [ 2] 4318 	cpw x,txtend 
      0018C2 2B 02            [ 1] 4319 	jrmi 2$ 
      0018C4 4F               [ 1] 4320 	clr a 
      0018C5 81               [ 4] 4321 	ret 
      0018C6 CD 13 63         [ 4] 4322 2$: call ubound 
      0018C9                       4323 	_drop 2 
      0018C9 5B 02            [ 2]    1     addw sp,#2 
      0018CB CE 00 1B         [ 2] 4324 	ldw x,txtbgn 
      0018CE CF 00 03         [ 2] 4325 	ldw basicptr,x 
      0018D1 E6 02            [ 1] 4326 	ld a,(2,x)
      0018D3 C7 00 02         [ 1] 4327 	ld count,a
      0018D6 FE               [ 2] 4328 	ldw x,(x)
      0018D7 CF 00 05         [ 2] 4329 	ldw lineno,x
      0018DA 35 03 00 01      [ 1] 4330 	mov in,#3	
      0018DE 72 10 00 24      [ 1] 4331 	bset flags,#FRUN 
      0018E2 CC 07 8D         [ 2] 4332 	jp interp_loop 
                                   4333 
                                   4334 
                                   4335 ;----------------------
                                   4336 ; BASIC: STOP 
                                   4337 ; stop running program
                                   4338 ;---------------------- 
      0018E5                       4339 stop: 
                                   4340 ; clean dstack and cstack 
      0018E5 AE 17 FF         [ 2] 4341 	ldw x,#STACK_EMPTY 
      0018E8 94               [ 1] 4342 	ldw sp,x 
      0018E9 72 11 00 24      [ 1] 4343 	bres flags,#FRUN 
      0018ED 72 19 00 24      [ 1] 4344 	bres flags,#FBREAK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018F1 CC 07 29         [ 2] 4345 	jp warm_start
                                   4346 
                                   4347 ;-----------------------
                                   4348 ; BASIC BEEP expr1,expr2
                                   4349 ; used MCU internal beeper 
                                   4350 ; to produce a sound
                                   4351 ; arguments:
                                   4352 ;    expr1   frequency, {1,2,4} mapping to 1K,2K,4K
                                   4353 ;    expr2   duration msec.
                                   4354 ;---------------------------
      0018F4                       4355 beep:
      0018F4 CD 11 AA         [ 4] 4356 	call arg_list 
      0018F7 A1 02            [ 1] 4357 	cp a,#2 
      0018F9 27 03            [ 1] 4358 	jreq 2$
      0018FB CC 06 D7         [ 2] 4359 	jp syntax_error 
      0018FE CE 00 19         [ 2] 4360 2$: ldw x,dstkptr 
      001901 EE 02            [ 2] 4361 	ldw x,(2,x);frequency 
      001903 9F               [ 1] 4362 	ld a,xl
      001904 4A               [ 1] 4363 	dec a 
      001905 4E               [ 1] 4364 	swap a 
      001906 48               [ 1] 4365 	sll a 
      001907 48               [ 1] 4366 	sll a 
      001908 AB 3E            [ 1] 4367 	add a,#0x3e 
      00190A C7 50 F3         [ 1] 4368 	ld BEEP_CSR,a 
      00190D CD 0F 87         [ 4] 4369 	call dpop 
      001910 CD 1D DA         [ 4] 4370 	call pause02 
      001913 CD 0F AE         [ 4] 4371 	call ddrop 
      001916 A6 1F            [ 1] 4372 	ld a,#0x1f
      001918 C7 50 F3         [ 1] 4373 	ld BEEP_CSR,a 
      00191B 81               [ 4] 4374 	ret 
                                   4375 
                                   4376 ;-------------------------------
                                   4377 ; BASIC: PWRADC 0|1,divisor  
                                   4378 ; disable/enanble ADC 
                                   4379 ;-------------------------------
      00191C                       4380 power_adc:
      00191C CD 11 AA         [ 4] 4381 	call arg_list 
      00191F A1 02            [ 1] 4382 	cp a,#2	
      001921 27 03            [ 1] 4383 	jreq 1$
      001923 CC 06 D7         [ 2] 4384 	jp syntax_error 
      001926 AE 00 02         [ 2] 4385 1$: ldw x,#2
      001929 72 DE 00 19      [ 5] 4386 	ldw x,([dstkptr],x) ; on|off
      00192D 5D               [ 2] 4387 	tnzw x 
      00192E 27 1C            [ 1] 4388 	jreq 2$ 
      001930 72 CE 00 19      [ 5] 4389 	ldw x,[dstkptr] ; channel
      001934 9F               [ 1] 4390 	ld a,xl
      001935 A4 07            [ 1] 4391 	and a,#7
      001937 4E               [ 1] 4392 	swap a 
      001938 C7 54 01         [ 1] 4393 	ld ADC_CR1,a
      00193B 72 16 54 02      [ 1] 4394 	bset ADC_CR2,#ADC_CR2_ALIGN ; right 
      00193F 72 10 54 01      [ 1] 4395 	bset ADC_CR1,#ADC_CR1_ADON 
      001943                       4396 	_usec_dly 7 
      001943 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001946 5A               [ 2]    2     decw x
      001947 9D               [ 1]    3     nop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001948 26 FA            [ 1]    4     jrne .-4
      00194A 20 04            [ 2] 4397 	jra 3$
      00194C 72 11 54 01      [ 1] 4398 2$: bres ADC_CR1,#ADC_CR1_ADON 
      001950 AE 00 02         [ 2] 4399 3$:	ldw x,#2
      001953 CD 0F EB         [ 4] 4400 	call ddrop_n 
      001956 81               [ 4] 4401 	ret
                                   4402 
                                   4403 ;-----------------------------
                                   4404 ; BASIC: RDADC(channel)
                                   4405 ; read adc channel 
                                   4406 ; output:
                                   4407 ;   A 		TK_INTGR 
                                   4408 ;   X 		value 
                                   4409 ;-----------------------------
      001957                       4410 read_adc:
      001957 A6 09            [ 1] 4411 	ld a,#TK_LPAREN 
      001959 CD 11 9D         [ 4] 4412 	call expect 
      00195C CD 07 BD         [ 4] 4413 	call next_token 
      00195F A1 02            [ 1] 4414 	cp a,#TK_INTGR 
      001961 27 03            [ 1] 4415 	jreq 1$
      001963 CC 06 D7         [ 2] 4416 	jp syntax_error
      001966 89               [ 2] 4417 1$: pushw x 
      001967 A6 0A            [ 1] 4418 	ld a,#TK_RPAREN 
      001969 CD 11 9D         [ 4] 4419 	call expect 
      00196C 85               [ 2] 4420 	popw x 
      00196D A3 00 10         [ 2] 4421 	cpw x,#16 
      001970 25 05            [ 1] 4422 	jrult 2$
      001972 A6 0A            [ 1] 4423 	ld a,#ERR_BAD_VALUE
      001974 CC 06 D9         [ 2] 4424 	jp tb_error 
      001977 9F               [ 1] 4425 2$: ld a,xl
      001978 C7 54 00         [ 1] 4426 	ld ADC_CSR,a 
      00197B 72 10 54 01      [ 1] 4427 	bset ADC_CR1,#ADC_CR1_ADON
      00197F 72 0F 54 00 FB   [ 2] 4428 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001984 CE 54 04         [ 2] 4429 	ldw x,ADC_DRH 
      001987 A6 02            [ 1] 4430 	ld a,#TK_INTGR
      001989 81               [ 4] 4431 	ret 
                                   4432 
                                   4433 
                                   4434 ;-----------------------
                                   4435 ; BASIC: BREAK 
                                   4436 ; insert a breakpoint 
                                   4437 ; in pogram. 
                                   4438 ; the program is resumed
                                   4439 ; with RUN 
                                   4440 ;-------------------------
      00198A                       4441 break:
      00198A 72 00 00 24 02   [ 2] 4442 	btjt flags,#FRUN,2$
      00198F 4F               [ 1] 4443 	clr a
      001990 81               [ 4] 4444 	ret 
      001991                       4445 2$:	 
                                   4446 ; create space on cstack to save context 
      001991 AE 19 BB         [ 2] 4447 	ldw x,#break_point 
      001994 CD 01 B0         [ 4] 4448 	call puts 
      001997                       4449 	_drop 2 ;drop return address 
      001997 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001999                       4450 	_vars CTXT_SIZE ; context size 
      001999 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      00199B CD 15 E0         [ 4] 4451 	call save_context 
      00199E AE 16 C8         [ 2] 4452 	ldw x,#tib 
      0019A1 CF 00 03         [ 2] 4453 	ldw basicptr,x
      0019A4 7F               [ 1] 4454 	clr (x)
      0019A5 72 5F 00 02      [ 1] 4455 	clr count  
      0019A9 5F               [ 1] 4456 	clrw x 
      0019AA CF 00 05         [ 2] 4457 	ldw lineno,x 
      0019AD CF 00 00         [ 2] 4458 	ldw in.w,x
      0019B0 72 11 00 24      [ 1] 4459 	bres flags,#FRUN 
      0019B4 72 18 00 24      [ 1] 4460 	bset flags,#FBREAK
      0019B8 CC 07 8D         [ 2] 4461 	jp interp_loop 
      0019BB 0A 62 72 65 61 6B 20  4462 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4463 
                                   4464 ;-----------------------
                                   4465 ; BASIC: NEW
                                   4466 ; from command line only 
                                   4467 ; free program memory
                                   4468 ; and clear variables 
                                   4469 ;------------------------
      0019D9                       4470 new: 
      0019D9 72 01 00 24 02   [ 2] 4471 	btjf flags,#FRUN,0$ 
      0019DE 4F               [ 1] 4472 	clr a 
      0019DF 81               [ 4] 4473 	ret 
      0019E0                       4474 0$:	
      0019E0 CD 05 A5         [ 4] 4475 	call clear_basic 
      0019E3 81               [ 4] 4476 	ret 
                                   4477 	 
                                   4478 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4479 ;   file system routines
                                   4480 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4481 
                                   4482 ;--------------------
                                   4483 ; input:
                                   4484 ;   X     increment 
                                   4485 ; output:
                                   4486 ;   farptr  incremented 
                                   4487 ;---------------------
      0019E4                       4488 incr_farptr:
      0019E4 72 BB 00 14      [ 2] 4489 	addw x,farptr+1 
      0019E8 24 04            [ 1] 4490 	jrnc 1$
      0019EA 72 5C 00 13      [ 1] 4491 	inc farptr 
      0019EE CF 00 14         [ 2] 4492 1$:	ldw farptr+1,x  
      0019F1 81               [ 4] 4493 	ret 
                                   4494 
                                   4495 ;------------------------------
                                   4496 ; extended flash memory used as FLASH_DRIVE 
                                   4497 ; seek end of used flash drive   
                                   4498 ; starting at 0x10000 address.
                                   4499 ; 4 consecutives 0 bytes signal free space. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4500 ; input:
                                   4501 ;	none
                                   4502 ; output:
                                   4503 ;   ffree     free_addr| 0 if memory full.
                                   4504 ;------------------------------
      0019F2                       4505 seek_fdrive:
      0019F2 A6 01            [ 1] 4506 	ld a,#1
      0019F4 C7 00 13         [ 1] 4507 	ld farptr,a 
      0019F7 5F               [ 1] 4508 	clrw x 
      0019F8 CF 00 14         [ 2] 4509 	ldw farptr+1,x 
      0019FB                       4510 1$:
      0019FB 5F               [ 1] 4511 	clrw x 
      0019FC 92 AF 00 13      [ 5] 4512 	ldf a,([farptr],x) 
      001A00 26 15            [ 1] 4513 	jrne 2$
      001A02 5C               [ 1] 4514 	incw x 
      001A03 92 AF 00 13      [ 5] 4515 	ldf a,([farptr],x)
      001A07 26 0E            [ 1] 4516 	jrne 2$ 
      001A09 5C               [ 1] 4517 	incw x 
      001A0A 92 AF 00 13      [ 5] 4518 	ldf a,([farptr],x)
      001A0E 26 07            [ 1] 4519 	jrne 2$ 
      001A10 5C               [ 1] 4520 	incw x 
      001A11 92 AF 00 13      [ 5] 4521 	ldf a,([farptr],x)
      001A15 27 28            [ 1] 4522 	jreq 4$ 
      001A17                       4523 2$: 
      001A17 1C 00 01         [ 2] 4524 	addw x,#1
      001A1A CD 19 E4         [ 4] 4525 	call incr_farptr
      001A1D AE 02 7F         [ 2] 4526 	ldw x,#0x27f 
      001A20 C3 00 13         [ 2] 4527 	cpw x,farptr
      001A23 2A D6            [ 1] 4528 	jrpl 1$
      001A25 72 5F 00 16      [ 1] 4529 	clr ffree 
      001A29 72 5F 00 17      [ 1] 4530 	clr ffree+1 
      001A2D 72 5F 00 18      [ 1] 4531 	clr ffree+2 
      001A31 72 5F 00 08      [ 1] 4532 	clr acc24 
      001A35 72 5F 00 09      [ 1] 4533 	clr acc16
      001A39 72 5F 00 0A      [ 1] 4534 	clr acc8 
      001A3D 20 1A            [ 2] 4535 	jra 5$
      001A3F                       4536 4$: ; copy farptr to ffree	 
      001A3F CE 00 14         [ 2] 4537 	ldw x,farptr+1 
      001A42 A3 00 00         [ 2] 4538 	cpw x,#fdrive 
      001A45 27 06            [ 1] 4539 	jreq 41$
                                   4540 	; there is a file, last 0 of that file must be skipped.
      001A47 AE 00 01         [ 2] 4541 	ldw x,#1
      001A4A CD 19 E4         [ 4] 4542 	call incr_farptr
      001A4D                       4543 41$: 
      001A4D CE 00 13         [ 2] 4544 	ldw x,farptr 
      001A50 C6 00 15         [ 1] 4545 	ld a,farptr+2 
      001A53 CF 00 16         [ 2] 4546 	ldw ffree,x 
      001A56 C7 00 18         [ 1] 4547 	ld ffree+2,a  
      001A59 81               [ 4] 4548 5$:	ret 
                                   4549 
                                   4550 ;-----------------------
                                   4551 ; compare file name 
                                   4552 ; with name pointed by Y  
                                   4553 ; input:
                                   4554 ;   farptr   file name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4555 ;   Y        target name 
                                   4556 ; output:
                                   4557 ;   farptr 	 at file_name
                                   4558 ;   X 		 farptr[x] point at size field  
                                   4559 ;   Carry    0|1 no match|match  
                                   4560 ;----------------------
      001A5A                       4561 cmp_name:
      001A5A 5F               [ 1] 4562 	clrw x
      001A5B 92 AF 00 13      [ 5] 4563 1$:	ldf a,([farptr],x)
      001A5F 90 F1            [ 1] 4564 	cp a,(y)
      001A61 26 08            [ 1] 4565 	jrne 4$
      001A63 4D               [ 1] 4566 	tnz a 
      001A64 27 12            [ 1] 4567 	jreq 9$ 
      001A66 5C               [ 1] 4568     incw x 
      001A67 90 5C            [ 1] 4569 	incw y 
      001A69 20 F0            [ 2] 4570 	jra 1$
      001A6B                       4571 4$: ;no match 
      001A6B 4D               [ 1] 4572 	tnz a 
      001A6C 27 07            [ 1] 4573 	jreq 5$
      001A6E 5C               [ 1] 4574 	incw x 
      001A6F 92 AF 00 13      [ 5] 4575 	ldf a,([farptr],x)
      001A73 20 F6            [ 2] 4576 	jra 4$  
      001A75 5C               [ 1] 4577 5$:	incw x ; farptr[x] point at 'size' field 
      001A76 98               [ 1] 4578 	rcf 
      001A77 81               [ 4] 4579 	ret
      001A78                       4580 9$: ; match  
      001A78 5C               [ 1] 4581 	incw x  ; farptr[x] at 'size' field 
      001A79 99               [ 1] 4582 	scf 
      001A7A 81               [ 4] 4583 	ret 
                                   4584 
                                   4585 ;-----------------------
                                   4586 ; search file in 
                                   4587 ; flash memory 
                                   4588 ; input:
                                   4589 ;   Y       file name  
                                   4590 ; output:
                                   4591 ;   farptr  addr at name|0
                                   4592 ;-----------------------
                           000001  4593 	FSIZE=1
                           000003  4594 	YSAVE=3
                           000004  4595 	VSIZE=4 
      001A7B                       4596 search_file: 
      001A7B                       4597 	_vars VSIZE
      001A7B 52 04            [ 2]    1     sub sp,#VSIZE 
      001A7D 17 03            [ 2] 4598 	ldw (YSAVE,sp),y  
      001A7F 5F               [ 1] 4599 	clrw x 
      001A80 CF 00 14         [ 2] 4600 	ldw farptr+1,x 
      001A83 35 01 00 13      [ 1] 4601 	mov farptr,#1
      001A87                       4602 1$:	
                                   4603 ; check if farptr is after any file 
                                   4604 ; if  0 then so.
      001A87 92 BC 00 13      [ 5] 4605 	ldf a,[farptr]
      001A8B 27 24            [ 1] 4606 	jreq 6$
      001A8D 5F               [ 1] 4607 2$: clrw x 	
      001A8E 16 03            [ 2] 4608 	ldw y,(YSAVE,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A90 CD 1A 5A         [ 4] 4609 	call cmp_name
      001A93 25 2C            [ 1] 4610 	jrc 9$
      001A95 92 AF 00 13      [ 5] 4611 	ldf a,([farptr],x)
      001A99 6B 01            [ 1] 4612 	ld (FSIZE,sp),a 
      001A9B 5C               [ 1] 4613 	incw x 
      001A9C 92 AF 00 13      [ 5] 4614 	ldf a,([farptr],x)
      001AA0 6B 02            [ 1] 4615 	ld (FSIZE+1,sp),a 
      001AA2 5C               [ 1] 4616 	incw x 
      001AA3 72 FB 01         [ 2] 4617 	addw x,(FSIZE,sp) ; count to skip 
      001AA6 CD 19 E4         [ 4] 4618 	call incr_farptr ; now at next file 'name_field'
      001AA9 AE 02 80         [ 2] 4619 	ldw x,#0x280
      001AAC C3 00 13         [ 2] 4620 	cpw x,farptr 
      001AAF 2A D6            [ 1] 4621 	jrpl 1$
      001AB1                       4622 6$: ; file not found 
      001AB1 72 5F 00 13      [ 1] 4623 	clr farptr
      001AB5 72 5F 00 14      [ 1] 4624 	clr farptr+1 
      001AB9 72 5F 00 15      [ 1] 4625 	clr farptr+2 
      001ABD                       4626 	_drop VSIZE 
      001ABD 5B 04            [ 2]    1     addw sp,#VSIZE 
      001ABF 98               [ 1] 4627 	rcf
      001AC0 81               [ 4] 4628 	ret
      001AC1                       4629 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001AC1                       4630 	_drop VSIZE 
      001AC1 5B 04            [ 2]    1     addw sp,#VSIZE 
      001AC3 99               [ 1] 4631 	scf 	
      001AC4 81               [ 4] 4632 	ret
                                   4633 
                                   4634 ;--------------------------------
                                   4635 ; BASIC: SAVE "name" 
                                   4636 ; save text program in 
                                   4637 ; flash memory used as 
                                   4638 ;--------------------------------
      001AC5                       4639 save:
      001AC5 72 01 00 24 05   [ 2] 4640 	btjf flags,#FRUN,0$ 
      001ACA A6 07            [ 1] 4641 	ld a,#ERR_CMD_ONLY 
      001ACC CC 06 D9         [ 2] 4642 	jp tb_error
      001ACF                       4643 0$:	 
      001ACF CE 00 1D         [ 2] 4644 	ldw x,txtend 
      001AD2 72 B0 00 1B      [ 2] 4645 	subw x,txtbgn
      001AD6 26 02            [ 1] 4646 	jrne 10$
                                   4647 ; nothing to save 
      001AD8 4F               [ 1] 4648 	clr a 
      001AD9 81               [ 4] 4649 	ret 
      001ADA                       4650 10$:	
      001ADA C6 00 16         [ 1] 4651 	ld a,ffree 
      001ADD CA 00 17         [ 1] 4652 	or a,ffree+1
      001AE0 CA 00 18         [ 1] 4653 	or a,ffree+2 
      001AE3 26 05            [ 1] 4654 	jrne 1$
      001AE5 A6 01            [ 1] 4655 	ld a,#ERR_MEM_FULL
      001AE7 CC 06 D9         [ 2] 4656 	jp tb_error 
      001AEA CD 07 BD         [ 4] 4657 1$: call next_token	
      001AED A1 08            [ 1] 4658 	cp a,#TK_QSTR
      001AEF 27 03            [ 1] 4659 	jreq 2$
      001AF1 CC 06 D7         [ 2] 4660 	jp syntax_error
      001AF4                       4661 2$: ; check for existing file of that name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001AF4 90 93            [ 1] 4662 	ldw y,x ; file name pointer 
      001AF6 CD 1A 7B         [ 4] 4663 	call search_file 
      001AF9 24 05            [ 1] 4664 	jrnc 3$ 
      001AFB A6 08            [ 1] 4665 	ld a,#ERR_DUPLICATE 
      001AFD CC 06 D9         [ 2] 4666 	jp tb_error 
      001B00                       4667 3$:	;** write file name to flash **
      001B00 CE 00 16         [ 2] 4668 	ldw x,ffree 
      001B03 C6 00 18         [ 1] 4669 	ld a,ffree+2 
      001B06 CF 00 13         [ 2] 4670 	ldw farptr,x 
      001B09 C7 00 15         [ 1] 4671 	ld farptr+2,a 
      001B0C AE 17 18         [ 2] 4672 	ldw x,#pad  
      001B0F CD 02 72         [ 4] 4673 	call strlen 
      001B12 5C               [ 1] 4674 	incw  x
      001B13 89               [ 2] 4675 	pushw x 
      001B14 5F               [ 1] 4676 	clrw x   
      001B15 90 AE 17 18      [ 2] 4677 	ldw y,#pad 
      001B19 CD 01 51         [ 4] 4678 	call write_block  
      001B1C                       4679 	_drop 2 ; drop pushed X 
      001B1C 5B 02            [ 2]    1     addw sp,#2 
                                   4680 ;** write file length after name **
      001B1E CE 00 1D         [ 2] 4681 	ldw x,txtend 
      001B21 72 B0 00 1B      [ 2] 4682 	subw x,txtbgn
      001B25 89               [ 2] 4683 	pushw x ; file size 
      001B26 5F               [ 1] 4684 	clrw x 
      001B27 7B 01            [ 1] 4685 	ld a,(1,sp)
      001B29 CD 00 DC         [ 4] 4686 	call write_byte 
      001B2C 5C               [ 1] 4687 	incw x 
      001B2D 7B 02            [ 1] 4688 	ld a,(2,sp)
      001B2F CD 00 DC         [ 4] 4689 	call write_byte
      001B32 5C               [ 1] 4690 	incw x  
      001B33 CD 19 E4         [ 4] 4691 	call incr_farptr ; move farptr after SIZE field 
                                   4692 ;** write BASIC text **
                                   4693 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001B36 1E 01            [ 2] 4694 	ldw x,(1,sp)
      001B38 89               [ 2] 4695 	pushw x 
      001B39 5F               [ 1] 4696 	clrw x 
      001B3A 90 CE 00 1B      [ 2] 4697 	ldw y,txtbgn  ; BASIC text to save 
      001B3E CD 01 51         [ 4] 4698 	call write_block 
      001B41                       4699 	_drop 2 ;  drop BSIZE argument
      001B41 5B 02            [ 2]    1     addw sp,#2 
                                   4700 ; save farptr in ffree
      001B43 CE 00 13         [ 2] 4701 	ldw x,farptr 
      001B46 C6 00 15         [ 1] 4702 	ld a,farptr+2 
      001B49 CF 00 16         [ 2] 4703 	ldw ffree,x 
      001B4C C7 00 18         [ 1] 4704 	ld ffree+2,a
                                   4705 ; write 4 zero bytes as a safe gard 
      001B4F 5F               [ 1] 4706     clrw x 
      001B50 4F               [ 1] 4707 	clr a 
      001B51 CD 00 DC         [ 4] 4708 	call write_byte 
      001B54 5C               [ 1] 4709 	incw x 
      001B55 4F               [ 1] 4710 	clr a 
      001B56 CD 00 DC         [ 4] 4711 	call write_byte
      001B59 5C               [ 1] 4712 	incw x 
      001B5A 4F               [ 1] 4713 	clr a 
      001B5B CD 00 DC         [ 4] 4714 	call write_byte
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4715 ; display saved size  
      001B5E 85               [ 2] 4716 	popw x ; first copy of BSIZE 
      001B5F A6 02            [ 1] 4717 	ld a,#TK_INTGR 
      001B61 81               [ 4] 4718 	ret 
                                   4719 
                                   4720 
                                   4721 ;------------------------
                                   4722 ; BASIC: LOAD "file" 
                                   4723 ; load file to RAM 
                                   4724 ; for execution 
                                   4725 ;------------------------
      001B62                       4726 load:
      001B62 72 01 00 24 07   [ 2] 4727 	btjf flags,#FRUN,0$ 
      001B67 27 05            [ 1] 4728 	jreq 0$ 
      001B69 A6 07            [ 1] 4729 	ld a,#ERR_CMD_ONLY 
      001B6B CC 06 D9         [ 2] 4730 	jp tb_error 
      001B6E                       4731 0$:	
      001B6E CD 07 BD         [ 4] 4732 	call next_token 
      001B71 A1 08            [ 1] 4733 	cp a,#TK_QSTR
      001B73 27 03            [ 1] 4734 	jreq 1$
      001B75 CC 06 D7         [ 2] 4735 	jp syntax_error 
      001B78                       4736 1$:	
      001B78 90 93            [ 1] 4737 	ldw y,x 
      001B7A CD 1A 7B         [ 4] 4738 	call search_file 
      001B7D 25 05            [ 1] 4739 	jrc 2$ 
      001B7F A6 09            [ 1] 4740 	ld a,#ERR_NOT_FILE
      001B81 CC 06 D9         [ 2] 4741 	jp tb_error  
      001B84                       4742 2$:	
      001B84 CD 19 E4         [ 4] 4743 	call incr_farptr  
      001B87 CD 05 A5         [ 4] 4744 	call clear_basic  
      001B8A 5F               [ 1] 4745 	clrw x
      001B8B 92 AF 00 13      [ 5] 4746 	ldf a,([farptr],x)
      001B8F 90 95            [ 1] 4747 	ld yh,a 
      001B91 5C               [ 1] 4748 	incw x  
      001B92 92 AF 00 13      [ 5] 4749 	ldf a,([farptr],x)
      001B96 5C               [ 1] 4750 	incw x 
      001B97 90 97            [ 1] 4751 	ld yl,a 
      001B99 72 B9 00 1B      [ 2] 4752 	addw y,txtbgn
      001B9D 90 CF 00 1D      [ 2] 4753 	ldw txtend,y
      001BA1 90 CE 00 1B      [ 2] 4754 	ldw y,txtbgn
      001BA5                       4755 3$:	; load BASIC text 	
      001BA5 92 AF 00 13      [ 5] 4756 	ldf a,([farptr],x)
      001BA9 90 F7            [ 1] 4757 	ld (y),a 
      001BAB 5C               [ 1] 4758 	incw x 
      001BAC 90 5C            [ 1] 4759 	incw y 
      001BAE 90 C3 00 1D      [ 2] 4760 	cpw y,txtend 
      001BB2 2B F1            [ 1] 4761 	jrmi 3$
                                   4762 ; return loaded size 	 
      001BB4 CE 00 1D         [ 2] 4763 	ldw x,txtend 
      001BB7 72 B0 00 1B      [ 2] 4764 	subw x,txtbgn
      001BBB CD 09 4F         [ 4] 4765 	call print_int 
      001BBE 81               [ 4] 4766 	ret 
                                   4767 
                                   4768 ;-----------------------------------
                                   4769 ; BASIC: FORGET ["file_name"] 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4770 ; erase file_name and all others 
                                   4771 ; after it. 
                                   4772 ; without argument erase all files 
                                   4773 ;-----------------------------------
      001BBF                       4774 forget:
      001BBF CD 07 BD         [ 4] 4775 	call next_token 
      001BC2 A1 00            [ 1] 4776 	cp a,#TK_NONE 
      001BC4 27 1B            [ 1] 4777 	jreq 3$ 
      001BC6 A1 08            [ 1] 4778 	cp a,#TK_QSTR
      001BC8 27 03            [ 1] 4779 	jreq 1$
      001BCA CC 06 D7         [ 2] 4780 	jp syntax_error
      001BCD 90 93            [ 1] 4781 1$: ldw y,x
      001BCF CD 1A 7B         [ 4] 4782 	call search_file
      001BD2 25 05            [ 1] 4783 	jrc 2$
      001BD4 A6 09            [ 1] 4784 	ld a,#ERR_NOT_FILE 
      001BD6 CC 06 D9         [ 2] 4785 	jp tb_error 
      001BD9                       4786 2$: 
      001BD9 CE 00 13         [ 2] 4787 	ldw x,farptr
      001BDC C6 00 15         [ 1] 4788 	ld a,farptr+2
      001BDF 20 0B            [ 2] 4789 	jra 4$ 
      001BE1                       4790 3$: ; forget all files 
      001BE1 AE 00 00         [ 2] 4791 	ldw x,#fdrive
      001BE4 4F               [ 1] 4792 	clr a 
      001BE5 01               [ 1] 4793 	rrwa x 
      001BE6 CF 00 13         [ 2] 4794 	ldw farptr,x 
      001BE9 C7 00 15         [ 1] 4795 	ld farptr+2,a 
      001BEC                       4796 4$:
      001BEC CF 00 16         [ 2] 4797 	ldw ffree,x 
      001BEF C7 00 18         [ 1] 4798 	ld ffree+2,a 
      001BF2 5F               [ 1] 4799 5$:	clrw x 
      001BF3 4F               [ 1] 4800 	clr a  
      001BF4 CD 00 DC         [ 4] 4801 	call write_byte 
      001BF7 AE 00 01         [ 2] 4802 	ldw x,#1 
      001BFA CD 19 E4         [ 4] 4803 	call incr_farptr
      001BFD C6 00 13         [ 1] 4804 	ld a,farptr
      001C00 C1 00 16         [ 1] 4805 	cp a,ffree 
      001C03 2B ED            [ 1] 4806 	jrmi 5$ 
      001C05 CE 00 14         [ 2] 4807 	ldw x,farptr+1 
      001C08 C3 00 17         [ 2] 4808 	cpw x,ffree+1
      001C0B 2B E5            [ 1] 4809 	jrmi 5$
      001C0D 81               [ 4] 4810 	ret 
                                   4811 
                                   4812 ;----------------------
                                   4813 ; BASIC: DIR 
                                   4814 ; list saved files 
                                   4815 ;----------------------
                           000001  4816 	COUNT=1 ; files counter 
                           000002  4817 	VSIZE=2 
      001C0E                       4818 directory:
      001C0E                       4819 	_vars VSIZE 
      001C0E 52 02            [ 2]    1     sub sp,#VSIZE 
      001C10 5F               [ 1] 4820 	clrw x 
      001C11 1F 01            [ 2] 4821 	ldw (COUNT,sp),x 
      001C13 CF 00 14         [ 2] 4822 	ldw farptr+1,x 
      001C16 35 01 00 13      [ 1] 4823 	mov farptr,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C1A                       4824 dir_loop:
      001C1A 5F               [ 1] 4825 	clrw x 
      001C1B 92 AF 00 13      [ 5] 4826 	ldf a,([farptr],x)
      001C1F 27 38            [ 1] 4827 	jreq 8$ 
      001C21                       4828 1$: ;name loop 	
      001C21 92 AF 00 13      [ 5] 4829 	ldf a,([farptr],x)
      001C25 27 06            [ 1] 4830 	jreq 2$ 
      001C27 CD 01 9E         [ 4] 4831 	call putc 
      001C2A 5C               [ 1] 4832 	incw x 
      001C2B 20 F4            [ 2] 4833 	jra 1$
      001C2D 5C               [ 1] 4834 2$: incw x ; skip ending 0. 
      001C2E A6 20            [ 1] 4835 	ld a,#SPACE 
      001C30 CD 01 9E         [ 4] 4836 	call putc 
                                   4837 ; get file size 	
      001C33 92 AF 00 13      [ 5] 4838 	ldf a,([farptr],x)
      001C37 90 95            [ 1] 4839 	ld yh,a 
      001C39 5C               [ 1] 4840 	incw x 
      001C3A 92 AF 00 13      [ 5] 4841 	ldf a,([farptr],x)
      001C3E 5C               [ 1] 4842 	incw x 
      001C3F 90 97            [ 1] 4843 	ld yl,a 
      001C41 90 89            [ 2] 4844 	pushw y 
      001C43 72 FB 01         [ 2] 4845 	addw x,(1,sp)
      001C46 CD 19 E4         [ 4] 4846 	call incr_farptr 
      001C49 85               [ 2] 4847 	popw x ; file size 
      001C4A CD 09 4F         [ 4] 4848 	call print_int 
      001C4D A6 0D            [ 1] 4849 	ld a,#CR 
      001C4F CD 01 9E         [ 4] 4850 	call putc
      001C52 1E 01            [ 2] 4851 	ldw x,(COUNT,sp)
      001C54 5C               [ 1] 4852 	incw x
      001C55 1F 01            [ 2] 4853 	ldw (COUNT,sp),x  
      001C57 20 C1            [ 2] 4854 	jra dir_loop 
      001C59                       4855 8$: ; print number of files 
      001C59 1E 01            [ 2] 4856 	ldw x,(COUNT,sp)
      001C5B CD 09 4F         [ 4] 4857 	call print_int 
      001C5E AE 1C 8E         [ 2] 4858 	ldw x,#file_count 
      001C61 CD 01 B0         [ 4] 4859 	call puts  
                                   4860 ; print drive free space 	
      001C64 A6 FF            [ 1] 4861 	ld a,#0xff 
      001C66 C0 00 18         [ 1] 4862 	sub a,ffree+2 
      001C69 C7 00 0A         [ 1] 4863 	ld acc8,a 
      001C6C A6 7F            [ 1] 4864 	ld a,#0x7f 
      001C6E C2 00 17         [ 1] 4865 	sbc a,ffree+1 
      001C71 C7 00 09         [ 1] 4866 	ld acc16,a 
      001C74 A6 02            [ 1] 4867 	ld a,#2 
      001C76 C2 00 16         [ 1] 4868 	sbc a,ffree 
      001C79 C7 00 08         [ 1] 4869 	ld acc24,a 
      001C7C 5F               [ 1] 4870 	clrw x  
      001C7D A6 06            [ 1] 4871 	ld a,#6 
      001C7F 97               [ 1] 4872 	ld xl,a 
      001C80 A6 0A            [ 1] 4873 	ld a,#10 
      001C82 CD 09 07         [ 4] 4874 	call prti24 
      001C85 AE 1C 96         [ 2] 4875 	ldw x,#drive_free
      001C88 CD 01 B0         [ 4] 4876 	call puts 
      001C8B                       4877 	_drop VSIZE 
      001C8B 5B 02            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C8D 81               [ 4] 4878 	ret
      001C8E 20 66 69 6C 65 73 0A  4879 file_count: .asciz " files\n"
             00
      001C96 20 62 79 74 65 73 20  4880 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4881 
                                   4882 ;---------------------
                                   4883 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4884 ; write 1 or more byte to FLASH or EEPROM
                                   4885 ; starting at address  
                                   4886 ; input:
                                   4887 ;   expr1  	is address 
                                   4888 ;   expr2   is byte to write
                                   4889 ; output:
                                   4890 ;   none 
                                   4891 ;---------------------
                           000001  4892 	ADDR=1
                           000002  4893 	VSIZ=2 
      001CA3                       4894 write:
      001CA3                       4895 	_vars VSIZE 
      001CA3 52 02            [ 2]    1     sub sp,#VSIZE 
      001CA5 72 5F 00 13      [ 1] 4896 	clr farptr ; expect 16 bits address 
      001CA9 CD 12 A4         [ 4] 4897 	call expression
      001CAC A1 02            [ 1] 4898 	cp a,#TK_INTGR 
      001CAE 27 03            [ 1] 4899 	jreq 0$
      001CB0 CC 06 D7         [ 2] 4900 	jp syntax_error
      001CB3 1F 01            [ 2] 4901 0$: ldw (ADDR,sp),x 
      001CB5 CD 07 BD         [ 4] 4902 	call next_token 
      001CB8 A1 0B            [ 1] 4903 	cp a,#TK_COMMA 
      001CBA 27 02            [ 1] 4904 	jreq 1$ 
      001CBC 20 19            [ 2] 4905 	jra 9$ 
      001CBE CD 12 A4         [ 4] 4906 1$:	call expression
      001CC1 A1 02            [ 1] 4907 	cp a,#TK_INTGR
      001CC3 27 03            [ 1] 4908 	jreq 2$
      001CC5 CC 06 D7         [ 2] 4909 	jp syntax_error
      001CC8 9F               [ 1] 4910 2$:	ld a,xl 
      001CC9 1E 01            [ 2] 4911 	ldw x,(ADDR,sp) 
      001CCB CF 00 14         [ 2] 4912 	ldw farptr+1,x 
      001CCE 5F               [ 1] 4913 	clrw x 
      001CCF CD 00 DC         [ 4] 4914 	call write_byte
      001CD2 1E 01            [ 2] 4915 	ldw x,(ADDR,sp)
      001CD4 5C               [ 1] 4916 	incw x 
      001CD5 20 DC            [ 2] 4917 	jra 0$ 
      001CD7                       4918 9$:
      001CD7                       4919 	_drop VSIZE
      001CD7 5B 02            [ 2]    1     addw sp,#VSIZE 
      001CD9 81               [ 4] 4920 	ret 
                                   4921 
                                   4922 
                                   4923 ;---------------------
                                   4924 ;BASIC: CHAR(expr)
                                   4925 ; évaluate expression 
                                   4926 ; and take the 7 least 
                                   4927 ; bits as ASCII character
                                   4928 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001CDA                       4929 char:
      001CDA A6 09            [ 1] 4930 	ld a,#TK_LPAREN 
      001CDC CD 11 9D         [ 4] 4931 	call expect 
      001CDF CD 12 E8         [ 4] 4932 	call relation 
      001CE2 A1 02            [ 1] 4933 	cp a,#TK_INTGR 
      001CE4 27 03            [ 1] 4934 	jreq 1$
      001CE6 CC 06 D7         [ 2] 4935 	jp syntax_error
      001CE9 89               [ 2] 4936 1$:	pushw x 
      001CEA A6 0A            [ 1] 4937 	ld a,#TK_RPAREN 
      001CEC CD 11 9D         [ 4] 4938 	call expect
      001CEF 85               [ 2] 4939 	popw x  
      001CF0 9F               [ 1] 4940 	ld a,xl 
      001CF1 A4 7F            [ 1] 4941 	and a,#0x7f 
      001CF3 97               [ 1] 4942 	ld xl,a
      001CF4 A6 05            [ 1] 4943 	ld a,#TK_CHAR
      001CF6 81               [ 4] 4944 	ret
                                   4945 
                                   4946 ;---------------------
                                   4947 ; BASIC: ASC(string|char)
                                   4948 ; extract first character 
                                   4949 ; of string argument 
                                   4950 ; return it as TK_INTGR 
                                   4951 ;---------------------
      001CF7                       4952 ascii:
      001CF7 A6 09            [ 1] 4953 	ld a,#TK_LPAREN
      001CF9 CD 11 9D         [ 4] 4954 	call expect 
      001CFC CD 07 BD         [ 4] 4955 	call next_token 
      001CFF A1 08            [ 1] 4956 	cp a,#TK_QSTR 
      001D01 27 07            [ 1] 4957 	jreq 1$
      001D03 A1 05            [ 1] 4958 	cp a,#TK_CHAR 
      001D05 27 06            [ 1] 4959 	jreq 2$ 
      001D07 CC 06 D7         [ 2] 4960 	jp syntax_error
      001D0A                       4961 1$: 
      001D0A F6               [ 1] 4962 	ld a,(x)
      001D0B 20 01            [ 2] 4963 	jra 3$
      001D0D                       4964 2$: 
      001D0D 9F               [ 1] 4965 	ld a,xl 
      001D0E 97               [ 1] 4966 3$:	ld xl,a 
      001D0F 4F               [ 1] 4967 	clr a  
      001D10 95               [ 1] 4968 	ld xh,a 
      001D11 89               [ 2] 4969 	pushw x  
      001D12 A6 0A            [ 1] 4970 	ld a,#TK_RPAREN 
      001D14 CD 11 9D         [ 4] 4971 	call expect 
      001D17 85               [ 2] 4972 	popw x 
      001D18 A6 02            [ 1] 4973 	ld a,#TK_INTGR 
      001D1A 81               [ 4] 4974 	ret 
                                   4975 
                                   4976 ;---------------------
                                   4977 ;BASIC: KEY
                                   4978 ; wait for a character 
                                   4979 ; received from STDIN 
                                   4980 ; input:
                                   4981 ;	none 
                                   4982 ; output:
                                   4983 ;	X 		ASCII character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   4984 ;---------------------
      001D1B                       4985 key:
      001D1B CD 01 A7         [ 4] 4986 	call getc 
      001D1E 5F               [ 1] 4987 	clrw x 
      001D1F 97               [ 1] 4988 	ld xl,a 
      001D20 A6 02            [ 1] 4989 	ld a,#TK_INTGR
      001D22 81               [ 4] 4990 	ret
                                   4991 
                                   4992 ;----------------------
                                   4993 ; BASIC: QKEY
                                   4994 ; Return true if there 
                                   4995 ; is a character in 
                                   4996 ; waiting in STDIN 
                                   4997 ; input:
                                   4998 ;  none 
                                   4999 ; output:
                                   5000 ;   X 		0|1 
                                   5001 ;-----------------------
      001D23                       5002 qkey: 
      001D23 5F               [ 1] 5003 	clrw x 
      001D24 72 0B 52 40 01   [ 2] 5004 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001D29 5C               [ 1] 5005 	incw x 
      001D2A A6 02            [ 1] 5006 9$: ld a,#TK_INTGR
      001D2C 81               [ 4] 5007 	ret 
                                   5008 
                                   5009 ;---------------------
                                   5010 ; BASIC: GPIO(expr,reg)
                                   5011 ; return gpio address 
                                   5012 ; expr {0..8}
                                   5013 ; input:
                                   5014 ;   none 
                                   5015 ; output:
                                   5016 ;   X 		gpio register address
                                   5017 ;----------------------------
      001D2D                       5018 gpio:
      001D2D A6 09            [ 1] 5019 	ld a,#TK_LPAREN 
      001D2F CD 11 9D         [ 4] 5020 	call expect 
      001D32 CD 11 AA         [ 4] 5021 	call arg_list
      001D35 A1 02            [ 1] 5022 	cp a,#2
      001D37 27 03            [ 1] 5023 	jreq 1$
      001D39 CC 06 D7         [ 2] 5024 	jp syntax_error  
      001D3C                       5025 1$:	
      001D3C A6 0A            [ 1] 5026 	ld a,#TK_RPAREN 
      001D3E CD 11 9D         [ 4] 5027 	call expect 
      001D41 AE 00 02         [ 2] 5028 	ldw x,#2
      001D44 72 DE 00 19      [ 5] 5029 	ldw x,([dstkptr],x) ; port 
      001D48 2B 1B            [ 1] 5030 	jrmi bad_port
      001D4A A3 00 09         [ 2] 5031 	cpw x,#9
      001D4D 2A 16            [ 1] 5032 	jrpl bad_port
      001D4F A6 05            [ 1] 5033 	ld a,#5
      001D51 42               [ 4] 5034 	mul x,a
      001D52 1C 50 00         [ 2] 5035 	addw x,#GPIO_BASE 
      001D55 89               [ 2] 5036 	pushw x 
      001D56 CD 0F 87         [ 4] 5037 	call dpop 
      001D59 72 FB 01         [ 2] 5038 	addw x,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001D5C 1F 01            [ 2] 5039 	ldw (1,sp),x  
      001D5E CD 0F AE         [ 4] 5040 	call ddrop  
      001D61 85               [ 2] 5041 	popw x 
      001D62 A6 02            [ 1] 5042 	ld a,#TK_INTGR
      001D64 81               [ 4] 5043 	ret
      001D65                       5044 bad_port:
      001D65 A6 0A            [ 1] 5045 	ld a,#ERR_BAD_VALUE
      001D67 CC 06 D9         [ 2] 5046 	jp tb_error
                                   5047 
                                   5048 ;----------------------
                                   5049 ; BASIC: ODR 
                                   5050 ; return offset of gpio
                                   5051 ; ODR register: 0
                                   5052 ; ---------------------
      001D6A                       5053 port_odr:
      001D6A AE 00 00         [ 2] 5054 	ldw x,#GPIO_ODR
      001D6D A6 02            [ 1] 5055 	ld a,#TK_INTGR
      001D6F 81               [ 4] 5056 	ret
                                   5057 
                                   5058 ;----------------------
                                   5059 ; BASIC: IDR 
                                   5060 ; return offset of gpio
                                   5061 ; IDR register: 1
                                   5062 ; ---------------------
      001D70                       5063 port_idr:
      001D70 AE 00 01         [ 2] 5064 	ldw x,#GPIO_IDR
      001D73 A6 02            [ 1] 5065 	ld a,#TK_INTGR
      001D75 81               [ 4] 5066 	ret
                                   5067 
                                   5068 ;----------------------
                                   5069 ; BASIC: DDR 
                                   5070 ; return offset of gpio
                                   5071 ; DDR register: 2
                                   5072 ; ---------------------
      001D76                       5073 port_ddr:
      001D76 AE 00 02         [ 2] 5074 	ldw x,#GPIO_DDR
      001D79 A6 02            [ 1] 5075 	ld a,#TK_INTGR
      001D7B 81               [ 4] 5076 	ret
                                   5077 
                                   5078 ;----------------------
                                   5079 ; BASIC: CRL  
                                   5080 ; return offset of gpio
                                   5081 ; CR1 register: 3
                                   5082 ; ---------------------
      001D7C                       5083 port_cr1:
      001D7C AE 00 03         [ 2] 5084 	ldw x,#GPIO_CR1
      001D7F A6 02            [ 1] 5085 	ld a,#TK_INTGR
      001D81 81               [ 4] 5086 	ret
                                   5087 
                                   5088 ;----------------------
                                   5089 ; BASIC: CRH  
                                   5090 ; return offset of gpio
                                   5091 ; CR2 register: 4
                                   5092 ; ---------------------
      001D82                       5093 port_cr2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001D82 AE 00 04         [ 2] 5094 	ldw x,#GPIO_CR2
      001D85 A6 02            [ 1] 5095 	ld a,#TK_INTGR
      001D87 81               [ 4] 5096 	ret
                                   5097 
                                   5098 ;-------------------------
                                   5099 ; BASIC: UFLASH 
                                   5100 ; return user flash address
                                   5101 ; input:
                                   5102 ;  none 
                                   5103 ; output:
                                   5104 ;	A		TK_INTGR
                                   5105 ;   X 		user address 
                                   5106 ;---------------------------
      001D88                       5107 uflash:
      001D88 AE 21 00         [ 2] 5108 	ldw x,#user_space 
      001D8B A6 02            [ 1] 5109 	ld a,#TK_INTGR 
      001D8D 81               [ 4] 5110 	ret 
                                   5111 
                                   5112 ;-------------------------
                                   5113 ; BASIC: EEPROM 
                                   5114 ; return eeprom address
                                   5115 ; input:
                                   5116 ;  none 
                                   5117 ; output:
                                   5118 ;	A		TK_INTGR
                                   5119 ;   X 		eeprom address 
                                   5120 ;---------------------------
      001D8E                       5121 eeprom:
      001D8E AE 40 00         [ 2] 5122 	ldw x,#EEPROM_BASE 
      001D91 A6 02            [ 1] 5123 	ld a,#TK_INTGR 
      001D93 81               [ 4] 5124 	ret 
                                   5125 
                                   5126 ;---------------------
                                   5127 ; BASIC: USR(addr[,arg])
                                   5128 ; execute a function written 
                                   5129 ; in binary code.
                                   5130 ; binary fonction should 
                                   5131 ; return token attribute in A 
                                   5132 ; and value in X. 
                                   5133 ; input:
                                   5134 ;   addr	routine address 
                                   5135 ;   arg 	is an optional argument 
                                   5136 ; output:
                                   5137 ;   A 		token attribute 
                                   5138 ;   X       returned value 
                                   5139 ;---------------------
      001D94                       5140 usr:
      001D94 90 89            [ 2] 5141 	pushw y 	
      001D96 A6 09            [ 1] 5142 	ld a,#TK_LPAREN 
      001D98 CD 11 9D         [ 4] 5143 	call expect 
      001D9B CD 11 AA         [ 4] 5144 	call arg_list 
      001D9E A1 01            [ 1] 5145 	cp a,#1 
      001DA0 2A 03            [ 1] 5146 	jrpl 2$ 
      001DA2 CC 06 D7         [ 2] 5147 	jp syntax_error 
      001DA5 A6 0A            [ 1] 5148 2$: ld a,#TK_RPAREN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001DA7 CD 11 9D         [ 4] 5149 	call expect 
      001DAA CD 0F 87         [ 4] 5150 	call dpop 
      001DAD A1 02            [ 1] 5151 	cp a,#2 
      001DAF 2B 05            [ 1] 5152 	jrmi 4$
      001DB1 90 93            [ 1] 5153 	ldw y,x ; y=arg 
      001DB3 CD 0F 87         [ 4] 5154 	call dpop ;x=addr 
      001DB6 51               [ 1] 5155 4$:	exgw y,x ; y=addr,x=arg 
      001DB7 90 FD            [ 4] 5156 	call (y)
      001DB9 90 85            [ 2] 5157 	popw y 
      001DBB 81               [ 4] 5158 	ret 
                                   5159 
                                   5160 ;------------------------------
                                   5161 ; BASIC: BYE 
                                   5162 ; halt mcu in its lowest power mode 
                                   5163 ; wait for reset or external interrupt
                                   5164 ; do a cold start on wakeup.
                                   5165 ;------------------------------
      001DBC                       5166 bye:
      001DBC 72 0D 52 40 FB   [ 2] 5167 	btjf UART3_SR,#UART_SR_TC,.
      001DC1 8E               [10] 5168 	halt
      001DC2 CC 05 1A         [ 2] 5169 	jp cold_start  
                                   5170 
                                   5171 ;----------------------------------
                                   5172 ; BASIC: SLEEP 
                                   5173 ; halt mcu until reset or external
                                   5174 ; interrupt.
                                   5175 ; Resume progam after SLEEP command
                                   5176 ;----------------------------------
      001DC5                       5177 sleep:
      001DC5 72 0D 52 40 FB   [ 2] 5178 	btjf UART3_SR,#UART_SR_TC,.
      001DCA 72 16 00 24      [ 1] 5179 	bset flags,#FSLEEP
      001DCE 8E               [10] 5180 	halt 
      001DCF 81               [ 4] 5181 	ret 
                                   5182 
                                   5183 ;-------------------------------
                                   5184 ; BASIC: PAUSE expr 
                                   5185 ; suspend execution for n msec.
                                   5186 ; input:
                                   5187 ;	none
                                   5188 ; output:
                                   5189 ;	none 
                                   5190 ;------------------------------
      001DD0                       5191 pause:
      001DD0 CD 12 A4         [ 4] 5192 	call expression
      001DD3 A1 02            [ 1] 5193 	cp a,#TK_INTGR
      001DD5 27 03            [ 1] 5194 	jreq pause02 
      001DD7 CC 06 D7         [ 2] 5195 	jp syntax_error
      001DDA                       5196 pause02: 
      001DDA 5D               [ 2] 5197 1$: tnzw x 
      001DDB 27 04            [ 1] 5198 	jreq 2$
      001DDD 8F               [10] 5199 	wfi 
      001DDE 5A               [ 2] 5200 	decw x 
      001DDF 26 F9            [ 1] 5201 	jrne 1$
      001DE1 4F               [ 1] 5202 2$:	clr a 
      001DE2 81               [ 4] 5203 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   5204 
                                   5205 ;------------------------------
                                   5206 ; BASIC: TICKS
                                   5207 ; return msec ticks counter value 
                                   5208 ; input:
                                   5209 ; 	none 
                                   5210 ; output:
                                   5211 ;	X 		TK_INTGR
                                   5212 ;-------------------------------
      001DE3                       5213 get_ticks:
      001DE3 CE 00 0B         [ 2] 5214 	ldw x,ticks 
      001DE6 A6 02            [ 1] 5215 	ld a,#TK_INTGR
      001DE8 81               [ 4] 5216 	ret 
                                   5217 
                                   5218 
                                   5219 
                                   5220 ;------------------------------
                                   5221 ; BASIC: ABS(expr)
                                   5222 ; return absolute value of expr.
                                   5223 ; input:
                                   5224 ;   none
                                   5225 ; output:
                                   5226 ;   X     	positive integer
                                   5227 ;-------------------------------
      001DE9                       5228 abs:
      001DE9 A6 09            [ 1] 5229 	ld a,#TK_LPAREN
      001DEB CD 11 9D         [ 4] 5230 	call expect 
      001DEE CD 11 AA         [ 4] 5231 	call arg_list
      001DF1 A1 01            [ 1] 5232 	cp a,#1 
      001DF3 27 03            [ 1] 5233 	jreq 0$ 
      001DF5 CC 06 D7         [ 2] 5234 	jp syntax_error
      001DF8                       5235 0$:  
      001DF8 A6 0A            [ 1] 5236 	ld a,#TK_RPAREN 
      001DFA CD 11 9D         [ 4] 5237 	call expect 
      001DFD CD 0F 87         [ 4] 5238     call dpop   
      001E00 9E               [ 1] 5239 	ld a,xh 
      001E01 A5 80            [ 1] 5240 	bcp a,#0x80 
      001E03 27 01            [ 1] 5241 	jreq 2$ 
      001E05 50               [ 2] 5242 	negw x 
      001E06 A6 02            [ 1] 5243 2$: ld a,#TK_INTGR 
      001E08 81               [ 4] 5244 	ret 
                                   5245 
                                   5246 ;------------------------------
                                   5247 ; BASIC: RND(expr)
                                   5248 ; return random number 
                                   5249 ; between 1 and expr inclusive
                                   5250 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5251 ; input:
                                   5252 ; 	none 
                                   5253 ; output:
                                   5254 ;	X 		random positive integer 
                                   5255 ;------------------------------
      001E09                       5256 random:
      001E09 A6 09            [ 1] 5257 	ld a,#TK_LPAREN 
      001E0B CD 11 9D         [ 4] 5258 	call expect 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E0E CD 11 AA         [ 4] 5259 	call arg_list 
      001E11 A1 01            [ 1] 5260 	cp a,#1
      001E13 27 03            [ 1] 5261 	jreq 1$
      001E15 CC 06 D7         [ 2] 5262 	jp syntax_error
      001E18 A6 0A            [ 1] 5263 1$: ld a,#TK_RPAREN
      001E1A CD 11 9D         [ 4] 5264 	call expect 
      001E1D CD 0F 87         [ 4] 5265 	call dpop 
      001E20 89               [ 2] 5266 	pushw x 
      001E21 9E               [ 1] 5267 	ld a,xh 
      001E22 A5 80            [ 1] 5268 	bcp a,#0x80 
      001E24 27 05            [ 1] 5269 	jreq 2$
      001E26 A6 0A            [ 1] 5270 	ld a,#ERR_BAD_VALUE
      001E28 CC 06 D9         [ 2] 5271 	jp tb_error
      001E2B                       5272 2$: 
                                   5273 ; acc16=(x<<5)^x 
      001E2B CE 00 0D         [ 2] 5274 	ldw x,seedx 
      001E2E 58               [ 2] 5275 	sllw x 
      001E2F 58               [ 2] 5276 	sllw x 
      001E30 58               [ 2] 5277 	sllw x 
      001E31 58               [ 2] 5278 	sllw x 
      001E32 58               [ 2] 5279 	sllw x 
      001E33 9E               [ 1] 5280 	ld a,xh 
      001E34 C8 00 0D         [ 1] 5281 	xor a,seedx 
      001E37 C7 00 09         [ 1] 5282 	ld acc16,a 
      001E3A 9F               [ 1] 5283 	ld a,xl 
      001E3B C8 00 0E         [ 1] 5284 	xor a,seedx+1 
      001E3E C7 00 0A         [ 1] 5285 	ld acc8,a 
                                   5286 ; seedx=seedy 
      001E41 CE 00 0F         [ 2] 5287 	ldw x,seedy 
      001E44 CF 00 0D         [ 2] 5288 	ldw seedx,x  
                                   5289 ; seedy=seedy^(seedy>>1)
      001E47 90 54            [ 2] 5290 	srlw y 
      001E49 90 9E            [ 1] 5291 	ld a,yh 
      001E4B C8 00 0F         [ 1] 5292 	xor a,seedy 
      001E4E C7 00 0F         [ 1] 5293 	ld seedy,a  
      001E51 90 9F            [ 1] 5294 	ld a,yl 
      001E53 C8 00 10         [ 1] 5295 	xor a,seedy+1 
      001E56 C7 00 10         [ 1] 5296 	ld seedy+1,a 
                                   5297 ; acc16>>3 
      001E59 CE 00 09         [ 2] 5298 	ldw x,acc16 
      001E5C 54               [ 2] 5299 	srlw x 
      001E5D 54               [ 2] 5300 	srlw x 
      001E5E 54               [ 2] 5301 	srlw x 
                                   5302 ; x=acc16^x 
      001E5F 9E               [ 1] 5303 	ld a,xh 
      001E60 C8 00 09         [ 1] 5304 	xor a,acc16 
      001E63 95               [ 1] 5305 	ld xh,a 
      001E64 9F               [ 1] 5306 	ld a,xl 
      001E65 C8 00 0A         [ 1] 5307 	xor a,acc8 
      001E68 97               [ 1] 5308 	ld xl,a 
                                   5309 ; seedy=x^seedy 
      001E69 C8 00 10         [ 1] 5310 	xor a,seedy+1
      001E6C 97               [ 1] 5311 	ld xl,a 
      001E6D 9E               [ 1] 5312 	ld a,xh 
      001E6E C8 00 0F         [ 1] 5313 	xor a,seedy
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E71 95               [ 1] 5314 	ld xh,a 
      001E72 CF 00 0F         [ 2] 5315 	ldw seedy,x 
                                   5316 ; return seedy modulo expr + 1 
      001E75 90 85            [ 2] 5317 	popw y 
      001E77 65               [ 2] 5318 	divw x,y 
      001E78 93               [ 1] 5319 	ldw x,y 
      001E79 5C               [ 1] 5320 	incw x 
      001E7A A6 02            [ 1] 5321 	ld a,#TK_INTGR
      001E7C 81               [ 4] 5322 	ret 
                                   5323 
                                   5324 ;---------------------------------
                                   5325 ; BASIC: WORDS 
                                   5326 ; affiche la listes des mots du
                                   5327 ; dictionnaire.
                                   5328 ;---------------------------------
                           000001  5329 	WLEN=1
                           000002  5330 	LLEN=2  
                           000002  5331 	VSIZE=2 
      001E7D                       5332 words:
      001E7D                       5333 	_vars VSIZE
      001E7D 52 02            [ 2]    1     sub sp,#VSIZE 
      001E7F 0F 02            [ 1] 5334 	clr (LLEN,sp)
      001E81 90 AE 20 AC      [ 2] 5335 	ldw y,#kword_dict+2
      001E85 93               [ 1] 5336 0$:	ldw x,y
      001E86 F6               [ 1] 5337 	ld a,(x)
      001E87 A4 0F            [ 1] 5338 	and a,#15 
      001E89 6B 01            [ 1] 5339 	ld (WLEN,sp),a 
      001E8B 5C               [ 1] 5340 1$:	incw x 
      001E8C F6               [ 1] 5341 	ld a,(x)
      001E8D CD 01 9E         [ 4] 5342 	call putc 
      001E90 0C 02            [ 1] 5343 	inc (LLEN,sp)
      001E92 0A 01            [ 1] 5344 	dec (WLEN,sp)
      001E94 26 F5            [ 1] 5345 	jrne 1$
      001E96 A6 46            [ 1] 5346 	ld a,#70
      001E98 11 02            [ 1] 5347 	cp a,(LLEN,sp)
      001E9A 2B 09            [ 1] 5348 	jrmi 2$   
      001E9C A6 20            [ 1] 5349 	ld a,#SPACE 
      001E9E CD 01 9E         [ 4] 5350 	call putc 
      001EA1 0C 02            [ 1] 5351 	inc (LLEN,sp) 
      001EA3 20 07            [ 2] 5352 	jra 3$
      001EA5 A6 0D            [ 1] 5353 2$: ld a,#CR 
      001EA7 CD 01 9E         [ 4] 5354 	call putc 
      001EAA 0F 02            [ 1] 5355 	clr (LLEN,sp)
      001EAC 72 A2 00 02      [ 2] 5356 3$:	subw y,#2 
      001EB0 90 FE            [ 2] 5357 	ldw y,(y)
      001EB2 26 D1            [ 1] 5358 	jrne 0$  
      001EB4                       5359 	_drop VSIZE 
      001EB4 5B 02            [ 2]    1     addw sp,#VSIZE 
      001EB6 81               [ 4] 5360 	ret 
                                   5361 
                                   5362 
                                   5363 ;*********************************
                                   5364 
                                   5365 ;------------------------------
                                   5366 ;      dictionary 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5367 ; format:
                                   5368 ;   link:   2 bytes 
                                   5369 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5370 ;   cmd_name: 16 byte max 
                                   5371 ;   code_address: 2 bytes 
                                   5372 ;------------------------------
                           000080  5373 	FFUNC=128 ; function flag 
                                   5374 	.macro _dict_entry len,name,cmd 
                                   5375 	.word LINK 
                                   5376 	LINK=.
                                   5377 name:
                                   5378 	.byte len 	
                                   5379 	.ascii "name"
                                   5380 	.word cmd 
                                   5381 	.endm 
                                   5382 
                           000000  5383 	LINK=0
      001EB7                       5384 kword_end:
      001EB7                       5385 	_dict_entry,3,BYE,bye 
      001EB7 00 00                    1 	.word LINK 
                           001EB9     2 	LINK=.
      001EB9                          3 BYE:
      001EB9 03                       4 	.byte 3 	
      001EBA 42 59 45                 5 	.ascii "BYE"
      001EBD 1D BC                    6 	.word bye 
      001EBF                       5386 	_dict_entry,5,WORDS,words 
      001EBF 1E B9                    1 	.word LINK 
                           001EC1     2 	LINK=.
      001EC1                          3 WORDS:
      001EC1 05                       4 	.byte 5 	
      001EC2 57 4F 52 44 53           5 	.ascii "WORDS"
      001EC7 1E 7D                    6 	.word words 
      001EC9                       5387 	_dict_entry,5,SLEEP,sleep 
      001EC9 1E C1                    1 	.word LINK 
                           001ECB     2 	LINK=.
      001ECB                          3 SLEEP:
      001ECB 05                       4 	.byte 5 	
      001ECC 53 4C 45 45 50           5 	.ascii "SLEEP"
      001ED1 1D C5                    6 	.word sleep 
      001ED3                       5388 	_dict_entry,6,FORGET,forget 
      001ED3 1E CB                    1 	.word LINK 
                           001ED5     2 	LINK=.
      001ED5                          3 FORGET:
      001ED5 06                       4 	.byte 6 	
      001ED6 46 4F 52 47 45 54        5 	.ascii "FORGET"
      001EDC 1B BF                    6 	.word forget 
      001EDE                       5389 	_dict_entry,3,DIR,directory 
      001EDE 1E D5                    1 	.word LINK 
                           001EE0     2 	LINK=.
      001EE0                          3 DIR:
      001EE0 03                       4 	.byte 3 	
      001EE1 44 49 52                 5 	.ascii "DIR"
      001EE4 1C 0E                    6 	.word directory 
      001EE6                       5390 	_dict_entry,4,LOAD,load 
      001EE6 1E E0                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                           001EE8     2 	LINK=.
      001EE8                          3 LOAD:
      001EE8 04                       4 	.byte 4 	
      001EE9 4C 4F 41 44              5 	.ascii "LOAD"
      001EED 1B 62                    6 	.word load 
      001EEF                       5391 	_dict_entry,4,SAVE,save
      001EEF 1E E8                    1 	.word LINK 
                           001EF1     2 	LINK=.
      001EF1                          3 SAVE:
      001EF1 04                       4 	.byte 4 	
      001EF2 53 41 56 45              5 	.ascii "SAVE"
      001EF6 1A C5                    6 	.word save 
      001EF8                       5392 	_dict_entry,5,WRITE,write  
      001EF8 1E F1                    1 	.word LINK 
                           001EFA     2 	LINK=.
      001EFA                          3 WRITE:
      001EFA 05                       4 	.byte 5 	
      001EFB 57 52 49 54 45           5 	.ascii "WRITE"
      001F00 1C A3                    6 	.word write 
      001F02                       5393 	_dict_entry,3,NEW,new
      001F02 1E FA                    1 	.word LINK 
                           001F04     2 	LINK=.
      001F04                          3 NEW:
      001F04 03                       4 	.byte 3 	
      001F05 4E 45 57                 5 	.ascii "NEW"
      001F08 19 D9                    6 	.word new 
      001F0A                       5394 	_dict_entry,5,BREAK,break 
      001F0A 1F 04                    1 	.word LINK 
                           001F0C     2 	LINK=.
      001F0C                          3 BREAK:
      001F0C 05                       4 	.byte 5 	
      001F0D 42 52 45 41 4B           5 	.ascii "BREAK"
      001F12 19 8A                    6 	.word break 
      001F14                       5395 	_dict_entry,4,BEEP,beep 
      001F14 1F 0C                    1 	.word LINK 
                           001F16     2 	LINK=.
      001F16                          3 BEEP:
      001F16 04                       4 	.byte 4 	
      001F17 42 45 45 50              5 	.ascii "BEEP"
      001F1B 18 F4                    6 	.word beep 
      001F1D                       5396 	_dict_entry,4,STOP,stop 
      001F1D 1F 16                    1 	.word LINK 
                           001F1F     2 	LINK=.
      001F1F                          3 STOP:
      001F1F 04                       4 	.byte 4 	
      001F20 53 54 4F 50              5 	.ascii "STOP"
      001F24 18 E5                    6 	.word stop 
      001F26                       5397     _dict_entry,4,SHOW,show 
      001F26 1F 1F                    1 	.word LINK 
                           001F28     2 	LINK=.
      001F28                          3 SHOW:
      001F28 04                       4 	.byte 4 	
      001F29 53 48 4F 57              5 	.ascii "SHOW"
      001F2D 13 3F                    6 	.word show 
      001F2F                       5398 	_dict_entry 3,RUN,run
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F2F 1F 28                    1 	.word LINK 
                           001F31     2 	LINK=.
      001F31                          3 RUN:
      001F31 03                       4 	.byte 3 	
      001F32 52 55 4E                 5 	.ascii "RUN"
      001F35 18 9E                    6 	.word run 
      001F37                       5399 	_dict_entry 4,LIST,list
      001F37 1F 31                    1 	.word LINK 
                           001F39     2 	LINK=.
      001F39                          3 LIST:
      001F39 04                       4 	.byte 4 	
      001F3A 4C 49 53 54              5 	.ascii "LIST"
      001F3E 13 99                    6 	.word list 
      001F40                       5400 	_dict_entry,3+FFUNC,USR,usr
      001F40 1F 39                    1 	.word LINK 
                           001F42     2 	LINK=.
      001F42                          3 USR:
      001F42 83                       4 	.byte 3+FFUNC 	
      001F43 55 53 52                 5 	.ascii "USR"
      001F46 1D 94                    6 	.word usr 
      001F48                       5401 	_dict_entry,6+FFUNC,EEPROM,eeprom 
      001F48 1F 42                    1 	.word LINK 
                           001F4A     2 	LINK=.
      001F4A                          3 EEPROM:
      001F4A 86                       4 	.byte 6+FFUNC 	
      001F4B 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001F51 1D 8E                    6 	.word eeprom 
      001F53                       5402 	_dict_entry,6+FFUNC,UFLASH,uflash 
      001F53 1F 4A                    1 	.word LINK 
                           001F55     2 	LINK=.
      001F55                          3 UFLASH:
      001F55 86                       4 	.byte 6+FFUNC 	
      001F56 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001F5C 1D 88                    6 	.word uflash 
      001F5E                       5403 	_dict_entry,3+FFUNC,ODR,port_odr
      001F5E 1F 55                    1 	.word LINK 
                           001F60     2 	LINK=.
      001F60                          3 ODR:
      001F60 83                       4 	.byte 3+FFUNC 	
      001F61 4F 44 52                 5 	.ascii "ODR"
      001F64 1D 6A                    6 	.word port_odr 
      001F66                       5404 	_dict_entry,3+FFUNC,IDR,port_idr
      001F66 1F 60                    1 	.word LINK 
                           001F68     2 	LINK=.
      001F68                          3 IDR:
      001F68 83                       4 	.byte 3+FFUNC 	
      001F69 49 44 52                 5 	.ascii "IDR"
      001F6C 1D 70                    6 	.word port_idr 
      001F6E                       5405 	_dict_entry,3+FFUNC,DDR,port_ddr 
      001F6E 1F 68                    1 	.word LINK 
                           001F70     2 	LINK=.
      001F70                          3 DDR:
      001F70 83                       4 	.byte 3+FFUNC 	
      001F71 44 44 52                 5 	.ascii "DDR"
      001F74 1D 76                    6 	.word port_ddr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001F76                       5406 	_dict_entry,3+FFUNC,CRL,port_cr1 
      001F76 1F 70                    1 	.word LINK 
                           001F78     2 	LINK=.
      001F78                          3 CRL:
      001F78 83                       4 	.byte 3+FFUNC 	
      001F79 43 52 4C                 5 	.ascii "CRL"
      001F7C 1D 7C                    6 	.word port_cr1 
      001F7E                       5407 	_dict_entry,3+FFUNC,CRH,port_cr2
      001F7E 1F 78                    1 	.word LINK 
                           001F80     2 	LINK=.
      001F80                          3 CRH:
      001F80 83                       4 	.byte 3+FFUNC 	
      001F81 43 52 48                 5 	.ascii "CRH"
      001F84 1D 82                    6 	.word port_cr2 
      001F86                       5408 	_dict_entry,4+FFUNC,GPIO,gpio 
      001F86 1F 80                    1 	.word LINK 
                           001F88     2 	LINK=.
      001F88                          3 GPIO:
      001F88 84                       4 	.byte 4+FFUNC 	
      001F89 47 50 49 4F              5 	.ascii "GPIO"
      001F8D 1D 2D                    6 	.word gpio 
      001F8F                       5409 	_dict_entry,6,PWRADC,power_adc 
      001F8F 1F 88                    1 	.word LINK 
                           001F91     2 	LINK=.
      001F91                          3 PWRADC:
      001F91 06                       4 	.byte 6 	
      001F92 50 57 52 41 44 43        5 	.ascii "PWRADC"
      001F98 19 1C                    6 	.word power_adc 
      001F9A                       5410 	_dict_entry,5+FFUNC,RDADC,read_adc
      001F9A 1F 91                    1 	.word LINK 
                           001F9C     2 	LINK=.
      001F9C                          3 RDADC:
      001F9C 85                       4 	.byte 5+FFUNC 	
      001F9D 52 44 41 44 43           5 	.ascii "RDADC"
      001FA2 19 57                    6 	.word read_adc 
      001FA4                       5411 	_dict_entry,3+FFUNC,ASC,ascii  
      001FA4 1F 9C                    1 	.word LINK 
                           001FA6     2 	LINK=.
      001FA6                          3 ASC:
      001FA6 83                       4 	.byte 3+FFUNC 	
      001FA7 41 53 43                 5 	.ascii "ASC"
      001FAA 1C F7                    6 	.word ascii 
      001FAC                       5412 	_dict_entry,4+FFUNC,CHAR,char
      001FAC 1F A6                    1 	.word LINK 
                           001FAE     2 	LINK=.
      001FAE                          3 CHAR:
      001FAE 84                       4 	.byte 4+FFUNC 	
      001FAF 43 48 41 52              5 	.ascii "CHAR"
      001FB3 1C DA                    6 	.word char 
      001FB5                       5413 	_dict_entry,4+FFUNC,QKEY,qkey  
      001FB5 1F AE                    1 	.word LINK 
                           001FB7     2 	LINK=.
      001FB7                          3 QKEY:
      001FB7 84                       4 	.byte 4+FFUNC 	
      001FB8 51 4B 45 59              5 	.ascii "QKEY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001FBC 1D 23                    6 	.word qkey 
      001FBE                       5414 	_dict_entry,3+FFUNC,KEY,key 
      001FBE 1F B7                    1 	.word LINK 
                           001FC0     2 	LINK=.
      001FC0                          3 KEY:
      001FC0 83                       4 	.byte 3+FFUNC 	
      001FC1 4B 45 59                 5 	.ascii "KEY"
      001FC4 1D 1B                    6 	.word key 
      001FC6                       5415 	_dict_entry,4+FFUNC,SIZE,size
      001FC6 1F C0                    1 	.word LINK 
                           001FC8     2 	LINK=.
      001FC8                          3 SIZE:
      001FC8 84                       4 	.byte 4+FFUNC 	
      001FC9 53 49 5A 45              5 	.ascii "SIZE"
      001FCD 13 59                    6 	.word size 
      001FCF                       5416 	_dict_entry,3,HEX,hex_base
      001FCF 1F C8                    1 	.word LINK 
                           001FD1     2 	LINK=.
      001FD1                          3 HEX:
      001FD1 03                       4 	.byte 3 	
      001FD2 48 45 58                 5 	.ascii "HEX"
      001FD5 13 4F                    6 	.word hex_base 
      001FD7                       5417 	_dict_entry,3,DEC,dec_base
      001FD7 1F D1                    1 	.word LINK 
                           001FD9     2 	LINK=.
      001FD9                          3 DEC:
      001FD9 03                       4 	.byte 3 	
      001FDA 44 45 43                 5 	.ascii "DEC"
      001FDD 13 54                    6 	.word dec_base 
      001FDF                       5418 	_dict_entry,5+FFUNC,TICKS,get_ticks
      001FDF 1F D9                    1 	.word LINK 
                           001FE1     2 	LINK=.
      001FE1                          3 TICKS:
      001FE1 85                       4 	.byte 5+FFUNC 	
      001FE2 54 49 43 4B 53           5 	.ascii "TICKS"
      001FE7 1D E3                    6 	.word get_ticks 
      001FE9                       5419 	_dict_entry,3+FFUNC,ABS,abs
      001FE9 1F E1                    1 	.word LINK 
                           001FEB     2 	LINK=.
      001FEB                          3 ABS:
      001FEB 83                       4 	.byte 3+FFUNC 	
      001FEC 41 42 53                 5 	.ascii "ABS"
      001FEF 1D E9                    6 	.word abs 
      001FF1                       5420 	_dict_entry,3+FFUNC,RND,random 
      001FF1 1F EB                    1 	.word LINK 
                           001FF3     2 	LINK=.
      001FF3                          3 RND:
      001FF3 83                       4 	.byte 3+FFUNC 	
      001FF4 52 4E 44                 5 	.ascii "RND"
      001FF7 1E 09                    6 	.word random 
      001FF9                       5421 	_dict_entry,5,PAUSE,pause 
      001FF9 1F F3                    1 	.word LINK 
                           001FFB     2 	LINK=.
      001FFB                          3 PAUSE:
      001FFB 05                       4 	.byte 5 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001FFC 50 41 55 53 45           5 	.ascii "PAUSE"
      002001 1D D0                    6 	.word pause 
      002003                       5422 	_dict_entry,4,BSET,bit_set 
      002003 1F FB                    1 	.word LINK 
                           002005     2 	LINK=.
      002005                          3 BSET:
      002005 04                       4 	.byte 4 	
      002006 42 53 45 54              5 	.ascii "BSET"
      00200A 16 AA                    6 	.word bit_set 
      00200C                       5423 	_dict_entry,4,BRES,bit_reset
      00200C 20 05                    1 	.word LINK 
                           00200E     2 	LINK=.
      00200E                          3 BRES:
      00200E 04                       4 	.byte 4 	
      00200F 42 52 45 53              5 	.ascii "BRES"
      002013 16 BE                    6 	.word bit_reset 
      002015                       5424 	_dict_entry,5,BTOGL,bit_toggle
      002015 20 0E                    1 	.word LINK 
                           002017     2 	LINK=.
      002017                          3 BTOGL:
      002017 05                       4 	.byte 5 	
      002018 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00201D 16 D3                    6 	.word bit_toggle 
      00201F                       5425 	_dict_entry 4,WAIT,wait 
      00201F 20 17                    1 	.word LINK 
                           002021     2 	LINK=.
      002021                          3 WAIT:
      002021 04                       4 	.byte 4 	
      002022 57 41 49 54              5 	.ascii "WAIT"
      002026 16 7F                    6 	.word wait 
      002028                       5426 	_dict_entry 6,REMARK,rem 
      002028 20 21                    1 	.word LINK 
                           00202A     2 	LINK=.
      00202A                          3 REMARK:
      00202A 06                       4 	.byte 6 	
      00202B 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002031 16 7E                    6 	.word rem 
      002033                       5427 	_dict_entry 5,PRINT,print 
      002033 20 2A                    1 	.word LINK 
                           002035     2 	LINK=.
      002035                          3 PRINT:
      002035 05                       4 	.byte 5 	
      002036 50 52 49 4E 54           5 	.ascii "PRINT"
      00203B 15 70                    6 	.word print 
      00203D                       5428 	_dict_entry,2,IF,if 
      00203D 20 35                    1 	.word LINK 
                           00203F     2 	LINK=.
      00203F                          3 IF:
      00203F 02                       4 	.byte 2 	
      002040 49 46                    5 	.ascii "IF"
      002042 17 17                    6 	.word if 
      002044                       5429 	_dict_entry,5,GOSUB,gosub 
      002044 20 3F                    1 	.word LINK 
                           002046     2 	LINK=.
      002046                          3 GOSUB:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      002046 05                       4 	.byte 5 	
      002047 47 4F 53 55 42           5 	.ascii "GOSUB"
      00204C 18 2F                    6 	.word gosub 
      00204E                       5430 	_dict_entry,4,GOTO,goto 
      00204E 20 46                    1 	.word LINK 
                           002050     2 	LINK=.
      002050                          3 GOTO:
      002050 04                       4 	.byte 4 	
      002051 47 4F 54 4F              5 	.ascii "GOTO"
      002055 18 22                    6 	.word goto 
      002057                       5431 	_dict_entry,3,FOR,for 
      002057 20 50                    1 	.word LINK 
                           002059     2 	LINK=.
      002059                          3 FOR:
      002059 03                       4 	.byte 3 	
      00205A 46 4F 52                 5 	.ascii "FOR"
      00205D 17 2B                    6 	.word for 
      00205F                       5432 	_dict_entry,2,TO,to
      00205F 20 59                    1 	.word LINK 
                           002061     2 	LINK=.
      002061                          3 TO:
      002061 02                       4 	.byte 2 	
      002062 54 4F                    5 	.ascii "TO"
      002064 17 55                    6 	.word to 
      002066                       5433 	_dict_entry,4,STEP,step 
      002066 20 61                    1 	.word LINK 
                           002068     2 	LINK=.
      002068                          3 STEP:
      002068 04                       4 	.byte 4 	
      002069 53 54 45 50              5 	.ascii "STEP"
      00206D 17 85                    6 	.word step 
      00206F                       5434 	_dict_entry,4,NEXT,next 
      00206F 20 68                    1 	.word LINK 
                           002071     2 	LINK=.
      002071                          3 NEXT:
      002071 04                       4 	.byte 4 	
      002072 4E 45 58 54              5 	.ascii "NEXT"
      002076 17 AD                    6 	.word next 
      002078                       5435 	_dict_entry,6+FFUNC,UBOUND,ubound 
      002078 20 71                    1 	.word LINK 
                           00207A     2 	LINK=.
      00207A                          3 UBOUND:
      00207A 86                       4 	.byte 6+FFUNC 	
      00207B 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      002081 13 63                    6 	.word ubound 
      002083                       5436 	_dict_entry,6,RETURN,return 
      002083 20 7A                    1 	.word LINK 
                           002085     2 	LINK=.
      002085                          3 RETURN:
      002085 06                       4 	.byte 6 	
      002086 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00208C 18 7A                    6 	.word return 
      00208E                       5437 	_dict_entry,4+FFUNC,PEEK,peek 
      00208E 20 85                    1 	.word LINK 
                           002090     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002090                          3 PEEK:
      002090 84                       4 	.byte 4+FFUNC 	
      002091 50 45 45 4B              5 	.ascii "PEEK"
      002095 16 FA                    6 	.word peek 
      002097                       5438 	_dict_entry,4,POKE,poke 
      002097 20 90                    1 	.word LINK 
                           002099     2 	LINK=.
      002099                          3 POKE:
      002099 04                       4 	.byte 4 	
      00209A 50 4F 4B 45              5 	.ascii "POKE"
      00209E 16 E7                    6 	.word poke 
      0020A0                       5439 	_dict_entry,5,INPUT,input_var  
      0020A0 20 99                    1 	.word LINK 
                           0020A2     2 	LINK=.
      0020A2                          3 INPUT:
      0020A2 05                       4 	.byte 5 	
      0020A3 49 4E 50 55 54           5 	.ascii "INPUT"
      0020A8 16 0A                    6 	.word input_var 
      0020AA                       5440 kword_dict:
      0020AA                       5441 	_dict_entry 3,LET,let 
      0020AA 20 A2                    1 	.word LINK 
                           0020AC     2 	LINK=.
      0020AC                          3 LET:
      0020AC 03                       4 	.byte 3 	
      0020AD 4C 45 54                 5 	.ascii "LET"
      0020B0 13 71                    6 	.word let 
                                   5442 	
                                   5443 
      002100                       5444 	.bndry 128 ; align on FLASH block.
                                   5445 ; free space for user application  
      002100                       5446 user_space:
                                   5447 ; USR() function test
      002100 89               [ 2] 5448 	pushw x 
      002101 72 1A 50 0A      [ 1] 5449 	bset PC_ODR,#5 
      002105 85               [ 2] 5450 	popw x 
      002106 CD 1D DA         [ 4] 5451 	call pause02 
      002109 72 1B 50 0A      [ 1] 5452 	bres PC_ODR,#5 
      00210D 81               [ 4] 5453 	ret
                                   5454 
                                   5455 	.area FLASH_DRIVE (ABS)
      010000                       5456 	.org 0x10000
      010000                       5457 fdrive:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        001FEB R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        001FA6 R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |   5 BEEP       001F16 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_ER=  000000 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  000005     |   5 BREAK      001F0C R   |   5 BRES       00200E R
  5 BSET       002005 R   |     BSIZE   =  000005     |     BSP     =  000008 
  5 BTOGL      002017 R   |     BTW     =  000001     |     BUFIDX  =  000003 
  5 BYE        001EB9 R   |     C       =  000001     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       001FAE R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000008     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        001F80 R   |   5 CRL        001F78 R   |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000006     |     CURR    =  000002 
    CX_BPTR =  000001     |     CX_CNT  =  000005     |     CX_IN   =  000004 
    CX_LNO  =  000003     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |   5 DDR        001F70 R
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  5 DEC        001FD9 R   |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        001EE0 R   |     DIVIDND =  000007 
    DIVISR  =  000005     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
    DSTACK_S=  000040     |   5 EEPROM     001F4A R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_L=  000005 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |     FF      =  00000C     |     FFOR    =  000002 
    FFUNC   =  000080     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   5 FOR        002059 R
  5 FORGET     001ED5 R   |     FRUN    =  000000     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FTRAP   =  000001     |   5 GOSUB      002046 R
    GOS_RET =  000003     |   5 GOTO       002050 R   |   5 GPIO       001F88 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   5 HEX        001FD1 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        001F68 R   |   5 IF         00203F R   |     IN      =  000007 
    INCR    =  000001     |   5 INPUT      0020A2 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  000003     |     ITC_SPR1=  007F70 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        001FC0 R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        0020AC R
    LINENO  =  000005     |   5 LINK    =  0020AC R   |   5 LIST       001F39 R
    LL      =  000002     |     LLEN    =  000002     |     LL_HB   =  000001 
    LNO     =  000005     |     LN_PTR  =  000005     |   5 LOAD       001EE8 R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MINOR   =  000000     |     MULOP   =  000005     |     N1      =  000001 
    N1_HB   =  000006     |     N1_LB   =  000007     |     N2      =  000003 
    N2_HB   =  000008     |     N2_LB   =  000009     |     NAFR    =  004804 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        001F04 R
  5 NEXT       002071 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NL      =  00000A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R   |   5 ODR        001F60 R
    OP      =  000005     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000028     |   5 PAUSE      001FFB R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       002090 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 POKE       002099 R
    PREV    =  000001     |   5 PRINT      002035 R   |     PROD    =  000002 
    PSIZE   =  000001     |   5 PWRADC     001F91 R   |   5 QKEY       001FB7 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  5 RDADC      001F9C R   |   5 REG_A      0008F9 R   |   5 REG_CC     0008FD R
  5 REG_EPC    0008EC R   |   5 REG_SP     000902 R   |   5 REG_X      0008F5 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

  5 REG_Y      0008F1 R   |     RELOP   =  000005     |   5 REMARK     00202A R
    RETL1   =  000001     |   5 RETURN     002085 R   |   5 RND        001FF3 R
    ROP     =  004800     |     RST_SR  =  0050B3     |   5 RUN        001F31 R
    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       001EF1 R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       001F28 R   |     SIGN    =  000001 
  5 SIZE       001FC8 R   |     SKIP    =  000006     |   5 SLEEP      001ECB R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     0008AF R   |   5 STEP       002068 R
  5 STOP       001F1F R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      001FE1 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000004     |     TK_CHAR =  000005     |     TK_CMD  =  000006 
    TK_COLON=  000001     |     TK_COMMA=  00000B     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FUNC =  000007     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_INTGR=  000002     |     TK_LE   =  000036     |     TK_LPARE=  000009 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_PLUS =  000010     |     TK_QSTR =  000008     |     TK_RPARE=  00000A 
    TK_SHARP=  00000C     |     TK_VAR  =  000003     |   5 TO         002061 R
  5 Timer4Up   000019 R   |   5 TrapHand   00000A R   |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |   5 UBOUND     00207A R
  5 UFLASH     001F55 R   |   5 USER_ABO   00007E R   |   5 USR        001F42 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  5 UserButt   000025 R   |     VSIZ    =  000002     |     VSIZE   =  000002 
    VT      =  00000B     |   5 WAIT       002021 R   |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH   =  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   5 WORDS      001EC1 R   |   5 WRITE      001EFA R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XADR    =  000001 
    XMASK   =  000001     |     XSAVE   =  000003     |     YSAVE   =  000003 
  5 abs        001DE9 R   |   1 acc16      000009 R   |   1 acc24      000008 R
  1 acc8       00000A R   |   5 accept_c   000AA7 R   |   5 add        001068 R
  5 ansi_seq   000A65 R   |   5 arg_list   0011AA R   |   1 array_ad   000020 R
  1 array_si   000022 R   |   5 ascii      001CF7 R   |   5 at_tst     000D9F R
  5 atoi24     000EB4 R   |   5 atoi_exi   000F22 R   |   5 bad_port   001D65 R
  1 base       000007 R   |   1 basicptr   000003 R   |   5 beep       0018F4 R
  5 bin_exit   000C9A R   |   5 bit_rese   0016BE R   |   5 bit_set    0016AA R
  5 bit_togg   0016D3 R   |   5 bkslsh_t   000D4A R   |   5 bksp       0001BA R
  5 break      00198A R   |   5 break_po   0019BB R   |   5 bye        001DBC R
  5 char       001CDA R   |   5 check_fu   0003EC R   |   5 clear_ba   0005A5 R
  5 clear_va   0004B5 R   |   5 clock_in   000099 R   |   5 cmd_itf    000ACB R
  5 cmd_name   001113 R   |   5 cmp_name   001A5A R   |   5 cold_sta   00051A R
  5 colon_ts   000D73 R   |   5 comma_ts   000D7E R   |   5 compile    0003FB R
  5 convert_   000C00 R   |   1 count      000002 R   |   5 cp_loop    001156 R
  5 create_g   000338 R   |   5 cstk_pro   001032 R   |   5 dash_tst   000D94 R
  5 ddrop      000FAE R   |   5 ddrop_n    000FEB R   |   5 ddup       000FB7 R
  5 dec_base   001354 R   |   5 del_back   000A98 R   |   5 del_line   00030B R
  5 del_ln     000A89 R   |   5 delete     0001CA R   |   5 dir_loop   001C1A R
  5 director   001C0E R   |   5 divide     0010BE R   |   5 divu24_8   0009F2 R
  5 dotr       00103B R   |   5 dotr_loo   001050 R   |   5 dots       001008 R
  5 dpick      000FC8 R   |   5 dpop       000F87 R   |   5 dpush      000F7A R
  5 drive_fr   001C96 R   |   3 dstack     001740 R   |   3 dstack_u   001780 R
  5 dstk_pro   000FFE R   |   1 dstkptr    000019 R   |   5 dswap      000F94 R
  5 eeprom     001D8E R   |   5 eql_tst    000E01 R   |   5 equal      001563 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

  5 err_bad_   000686 R   |   5 err_cmd_   000647 R   |   5 err_div0   000609 R
  5 err_dupl   000662 R   |   5 err_math   0005EF R   |   5 err_mem_   0005D2 R
  5 err_msg    0005BA R   |   5 err_no_a   000693 R   |   5 err_no_l   000619 R
  5 err_not_   000674 R   |   5 err_run_   000630 R   |   5 err_synt   0005E0 R
  5 expect     00119D R   |   5 expr_exi   0012E5 R   |   5 expressi   0012A4 R
  5 factor     001201 R   |   1 farptr     000013 R   |   7 fdrive     010000 R
  5 fetch      000FD7 R   |   5 fetchc     000BB8 R   |   1 ffree      000016 R
  5 file_cou   001C8E R   |   5 final_te   000A5F R   |   5 first_li   0013C4 R
  1 flags      000024 R   |   5 for        00172B R   |   5 forget     001BBF R
  1 free_ram   00005A R   |   5 ge         001565 R   |   5 get_arra   0011CE R
  5 get_tick   001DE3 R   |   5 get_toke   000CE7 R   |   5 getc       0001A7 R
  5 go_commo   001852 R   |   5 gosub      00182F R   |   5 goto       001822 R
  5 gpio       001D2D R   |   5 gt         001561 R   |   5 gt_tst     000E0C R
  5 hex_base   00134F R   |   5 hse_cloc   000187 R   |   5 hsi_cloc   000191 R
  5 if         001717 R   |   1 in         000001 R   |   1 in.w       000000 R
  1 in.w.sav   000011 R   |   5 incr_far   0019E4 R   |   5 input_ex   00167B R
  5 input_lo   001616 R   |   5 input_va   00160A R   |   5 insert_l   000369 R
  5 insert_l   0003E9 R   |   5 interp     000749 R   |   5 interp_l   00078D R
  5 invalid    000B10 R   |   5 invalid_   000B8E R   |   5 is_alpha   0004C3 R
  5 is_digit   000E9F R   |   5 itoa       0009AB R   |   5 itoa_loo   0009C3 R
  5 key        001D1B R   |   5 kword_di   0020AA R   |   5 kword_en   001EB7 R
  5 last_lin   0013CD R   |   5 le         00156A R   |   5 ledoff     0007FF R
  5 ledon      0007FA R   |   5 ledtoggl   000804 R   |   5 left_arr   000A65 R
  5 left_par   00080D R   |   5 let        001371 R   |   5 let02      00137B R
  1 lineno     000005 R   |   5 lines_sk   0013D2 R   |   5 list       001399 R
  5 list_exi   001419 R   |   5 list_sta   0013F5 R   |   5 load       001B62 R
  5 loop_bac   0017F5 R   |   1 loop_dep   00001F R   |   5 loop_don   001810 R
  5 lt         001568 R   |   5 lt_tst     000E45 R   |   5 mem_peek   000B2D R
  5 modulo     001102 R   |   5 move       00029E R   |   5 move_dow   0002BC R
  5 move_exi   0002DD R   |   5 move_loo   0002C1 R   |   5 move_up    0002AE R
  5 mul_char   001552 R   |   5 multiply   001076 R   |   5 mulu24_8   000F26 R
  5 nbr_tst    000D20 R   |   5 ne         00156D R   |   5 neg_acc2   000A1A R
  5 new        0019D9 R   |   5 next       0017AD R   |   5 next_tok   0007BD R
  5 no_match   001168 R   |   5 none       000CE7 R   |   5 number     000BBE GR
  5 other      000E7D R   |   3 pad        001718 R   |   5 parse_bi   000C7A R
  5 parse_in   000C3F R   |   5 parse_ke   000CA2 R   |   5 parse_qu   000BC5 R
  5 pause      001DD0 R   |   5 pause02    001DDA R   |   5 peek       0016FA R
  5 peek_byt   000B58 R   |   5 plus_tst   000DD5 R   |   5 poke       0016E7 R
  5 port_cr1   001D7C R   |   5 port_cr2   001D82 R   |   5 port_ddr   001D76 R
  5 port_idr   001D70 R   |   5 port_odr   001D6A R   |   5 power_ad   00191C R
  5 prcnt_ts   000DF6 R   |   5 print      001570 R   |   5 print_ex   0015D4 R
  5 print_fa   000B9D R   |   5 print_in   00094F R   |   5 print_re   00085C R
  5 print_st   000B20 R   |   5 prt_basi   001430 R   |   5 prt_cmd_   00141C R
  5 prt_loop   001574 R   |   5 prt_peek   00024E R   |   5 prt_reg1   00083D R
  5 prt_reg8   000818 R   |   5 prt_regs   0001E4 R   |   5 prti24     000907 R
  1 ptr16      000014 R   |   1 ptr8       000015 R   |   5 putc       00019E R
  5 puts       0001B0 R   |   5 qkey       001D23 R   |   5 qmark_ts   000DAA R
  5 random     001E09 R   |   5 read_adc   001957 R   |   5 readln     000A3D R
  5 readln_l   000A43 R   |   5 readln_q   000ABC R   |   5 regs_sta   000227 R
  5 rel_exit   00133C R   |   5 relation   0012E8 R   |   5 relop_st   001555 R
  5 rem        00167E R   |   5 repl       000AD9 R   |   5 repl_exi   000B01 R
  5 reprint    000A65 R   |   5 reset_co   001572 R   |   5 rest_con   0015F5 R
  5 return     00187A R   |   5 right_ar   000A65 R   |   5 rparnt_t   000D68 R
  5 rt_msg     0006C7 R   |   5 run        00189E R   |   5 save       001AC5 R
  5 save_con   0015E0 R   |   5 search_d   001145 R   |   5 search_e   001199 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

  5 search_f   001A7B R   |   5 search_l   0002E0 R   |   5 search_l   0002EB R
  5 search_n   001149 R   |   1 seedx      00000D R   |   1 seedy      00000F R
  5 seek_fdr   0019F2 R   |   5 sharp_ts   000D89 R   |   5 show       00133F R
  5 single_c   00154E R   |   5 size       001359 R   |   5 skip       000F60 R
  5 slash_ts   000DEB R   |   5 sleep      001DC5 R   |   5 software   0004D4 R
  5 spaces     0001D8 R   |   3 stack_fu   001780 R   |   3 stack_un   001800 R
  5 star_tst   000DE0 R   |   5 step       001785 R   |   5 stop       0018E5 R
  5 store      000FE1 R   |   5 store_lo   001797 R   |   5 str_matc   001177 R
  5 str_tst    000D0F R   |   5 strcmp     00027F R   |   5 strcpy     000290 R
  5 strlen     000272 R   |   5 substrac   001070 R   |   5 syntax_e   0006D7 R
  1 tab_widt   000025 R   |   5 tb_error   0006D9 R   |   5 term       001257 R
  5 term01     001260 R   |   5 term_exi   0012A1 R   |   5 test_p     000B18 R
  3 tib        0016C8 R   |   5 tick_tst   000DC1 R   |   1 ticks      00000B R
  5 timer4_i   0000AF R   |   5 to         001755 R   |   5 to_upper   000EA8 GR
  5 token_ch   000E8C R   |   5 token_ex   000E9C R   |   1 txtbgn     00001B R
  1 txtend     00001D R   |   5 uart3_in   000174 R   |   5 uart3_se   000180 R
  5 uart_ena   000199 R   |   5 ubound     001363 R   |   5 uflash     001D88 R
  5 unget_to   000F73 R   |   5 unlock_e   0000C0 R   |   5 unlock_f   0000CE R
  5 user_spa   002100 R   |   5 usr        001D94 R   |   1 vars       000026 R
  5 wait       00167F R   |   5 warm_sta   000729 R   |   5 words      001E7D R
  5 write      001CA3 R   |   5 write_bl   000151 R   |   5 write_by   0000DC R
  5 write_ee   000118 R   |   5 write_ex   00014C R   |   5 write_fl   000102 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   210E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

