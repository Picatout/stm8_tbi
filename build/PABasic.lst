ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           000040    44 	DSTACK_SIZE=64 
                           000080    45 	STACK_SIZE=128
                           0017FF    46 	STACK_EMPTY=RAM_SIZE-1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                           000000    47 	FRUN=0 ; flags run code in variable flags
                           000001    48 	FTRAP=1 ; inside trap handler 
                           000002    49 	FFOR=2 ; FOR loop in preparation 
                           000003    50 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    51 	FBREAK=4 ; break point flag 
                           000005    52 	FCOMP=5  ; compiling flags 
                                     53 
      000000                         54 in.w:  .blkb 1 ; parser position in text line
      000001                         55 in:    .blkb 1 ; low byte of in.w
      000002                         56 count: .blkb 1 ; length of string in text line  
      000003                         57 basicptr:  .blkb 2  ; point to text buffer 
      000005                         58 lineno: .blkb 2  ; BASIC line number 
      000007                         59 base:  .blkb 1 ; nemeric base used to print integer 
      000008                         60 acc24: .blkb 1 ; 24 accumulator
      000009                         61 acc16: .blkb 1
      00000A                         62 acc8:  .blkb 1
      00000B                         63 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000D                         64 seedx: .blkw 1  ; xorshift 16 seed x 
      00000F                         65 seedy: .blkw 1  ; xorshift 16 seed y 
      000011                         66 in.w.saved: .blkw 1 ; set by get_token before parsing next token, used by unget_token
      000013                         67 farptr: .blkb 1 ; far pointer used by file system
      000014                         68 ptr16:  .blkb 1 ; middle byte of farptr
      000015                         69 ptr8:   .blkb 1 ; least byte of farptr 
      000016                         70 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000019                         71 dstkptr: .blkw 1  ; data stack pointer 
      00001B                         72 txtbgn: .ds 2 ; BASIC text beginning address 
      00001D                         73 txtend: .ds 2 ; BASIC text end address 
      00001F                         74 loop_depth: .ds 1 ; FOR loop depth, level of nested loop.  
      000020                         75 array_addr: .ds 2 ; address of @ array 
      000022                         76 array_size: .ds 2 ; array size 
      000024                         77 flags: .ds 1 ; boolean flags
      000025                         78 tab_width: .ds 1 ; print colon width (4)
      000026                         79 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     80 ; keep as last variable 
      00005A                         81 free_ram: ; from here RAM free for BASIC text 
                                     82 
                                     83 ;-----------------------------------
                                     84     .area SSEG (ABS)
                                     85 ;-----------------------------------	
      0016C8                         86     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         87 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         88 pad: .ds PAD_SIZE             ; working buffer
      001740                         89 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         90 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         91 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         92 stack_unf: ; stack underflow ; control_stack bottom 
                                     93 
                                     94 
                                     95 ;--------------------------------------
                                     96     .area HOME 
                                     97 ;--------------------------------------
      000000 82 00 05 5B             98     int cold_start
                           000001    99 .if DEBUG
      000004 82 00 00 0A            100 	int TrapHandler 		;TRAP  software interrupt
                           000000   101 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                    102 	int NonHandledInterrupt ;TRAP  software interrupt
                                    103 .endif
      000008 82 00 00 09            104 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            105 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            106 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            107 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            108 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            109 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            110 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 25            111 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            112 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            113 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            114 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            115 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            116 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            117 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            118 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            119 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            120 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            121 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            122 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            123 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            124 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            125 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            126 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            127 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            128 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            129 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            130 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            131 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            132 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            133 	int NonHandledInterrupt ;int29  not used
                                    134 
                                    135 ;---------------------------------------
                                    136     .area CODE
                                    137 ;---------------------------------------
                           000001   138 .if DEBUG
      000000 53 54 4D 38 5F 54 42   139 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    140 .endif 
                                    141 
      000009                        142 NonHandledInterrupt:
      000009 71                     143     .byte 0x71  ; reinitialize MCU
                                    144 
                                    145 
                                    146 ;------------------------------------
                                    147 ; software interrupt handler  
                                    148 ;------------------------------------
                           000001   149 .if DEBUG 
      00000A                        150 TrapHandler:
      00000A 72 12 00 24      [ 1]  151 	bset flags,#FTRAP 
      00000E CD 08 AA         [ 4]  152 	call print_registers
      000011 CD 0B 15         [ 4]  153 	call cmd_itf
      000014 72 13 00 24      [ 1]  154 	bres flags,#FTRAP 	
      000018 80               [11]  155 	iret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    156 .endif 
                                    157 
      000019                        158 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  159 	clr TIM4_SR 
      00001D CE 00 0B         [ 2]  160 	ldw x,ticks
      000020 5C               [ 1]  161 	incw x
      000021 CF 00 0B         [ 2]  162 	ldw ticks,x 
      000024 80               [11]  163 	iret 
                                    164 
                                    165 
                                    166 ;------------------------------------
                                    167 ; Triggered by pressing USER UserButton 
                                    168 ; on NUCLEO card.
                                    169 ;------------------------------------
      000025                        170 UserButtonHandler:
                                    171 ; wait button release
      000025 5F               [ 1]  172 	clrw x
      000026 5A               [ 2]  173 1$: decw x 
      000027 26 FD            [ 1]  174 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  175 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    176 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 24 05   [ 2]  177     btjf flags,#FSLEEP,2$
      000033 72 17 00 24      [ 1]  178 	bres flags,#FSLEEP 
      000037 80               [11]  179 	iret
      000038 72 00 00 24 03   [ 2]  180 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  181 	jp 9$ 
      000040                        182 4$:	; program interrupted by user 
      000040 72 11 00 24      [ 1]  183 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  184 	ldw x,#USER_ABORT
      000047 CD 01 B0         [ 4]  185 	call puts 
      00004A CE 00 03         [ 2]  186 	ldw x,basicptr
      00004D FE               [ 2]  187 	ldw x,(x)
                                    188 ; print line number 
      00004E 35 0A 00 07      [ 1]  189 	mov base,#10 
      000052 35 06 00 25      [ 1]  190 	mov tab_width,#6
      000056 CD 09 9D         [ 4]  191 	call print_int  	
      000059 CE 00 03         [ 2]  192 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  193 	addw x,#3  
      00005F CD 01 B0         [ 4]  194 	call puts 
      000062 A6 0D            [ 1]  195 	ld a,#CR 
      000064 CD 01 9E         [ 4]  196 	call putc
      000067 5F               [ 1]  197 	clrw x  
      000068 C6 00 01         [ 1]  198 	ld a,in 
      00006B AB 03            [ 1]  199 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  200 	ld xl,a 
      00006E CD 01 D8         [ 4]  201 	call spaces 
      000071 A6 5E            [ 1]  202 	ld a,#'^
      000073 CD 01 9E         [ 4]  203 	call putc 
      000076                        204 9$:
      000076 AE 17 FF         [ 2]  205     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  206     ldw sp,x
      00007A 9A               [ 1]  207 	rim 
      00007B CC 07 6A         [ 2]  208 	jp warm_start
                                    209 
      00007E 0A 50 72 6F 67 72 61   210 USER_ABORT: .asciz "\nProgram aborted by user.\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    211 
                                    212 
                                    213 ;----------------------------------------
                                    214 ; inialize MCU clock 
                                    215 ; input:
                                    216 ;   A 		source  HSI | 1 HSE 
                                    217 ;   XL      CLK_CKDIVR , clock divisor 
                                    218 ; output:
                                    219 ;   none 
                                    220 ;----------------------------------------
      000099                        221 clock_init:	
      000099 C1 50 C3         [ 1]  222 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  223 	jreq 2$ ; no switching required 
                                    224 ; select clock source 
      00009E 72 12 50 C5      [ 1]  225 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  226 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  227 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  228 	jrne 1$
      0000AA                        229 2$: 	
                                    230 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  231 	ld a,xl 
      0000AB C7 50 C6         [ 1]  232 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  233 	ret
                                    234 
                                    235 ;---------------------------------
                                    236 ; TIM4 is configured to generate an 
                                    237 ; interrupt every millisecond 
                                    238 ;----------------------------------
      0000AF                        239 timer4_init:
      0000AF 35 07 53 45      [ 1]  240 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B3 35 7D 53 46      [ 1]  241 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B7 35 05 53 40      [ 1]  242 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BB 72 10 53 41      [ 1]  243 	bset TIM4_IER,#TIM4_IER_UIE 
      0000BF 81               [ 4]  244 	ret
                                    245 
                                    246 ;----------------------------------
                                    247 ; unlock EEPROM for writing/erasing
                                    248 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    249 ; input:
                                    250 ;  none
                                    251 ; output:
                                    252 ;  none 
                                    253 ;----------------------------------
      0000C0                        254 unlock_eeprom:
      0000C0 35 AE 50 64      [ 1]  255 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C4 35 56 50 64      [ 1]  256     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C8 72 07 50 5F FB   [ 2]  257 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000CD 81               [ 4]  258 	ret
                                    259 
                                    260 ;----------------------------------
                                    261 ; unlock FLASH for writing/erasing
                                    262 ; wait endlessly for FLASH_IAPSR_PUL bit.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    263 ; input:
                                    264 ;  none
                                    265 ; output:
                                    266 ;  none
                                    267 ;----------------------------------
      0000CE                        268 unlock_flash:
      0000CE 35 56 50 62      [ 1]  269 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D2 35 AE 50 62      [ 1]  270 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000D6 72 03 50 5F FB   [ 2]  271 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000DB 81               [ 4]  272 	ret
                                    273 
                           000000   274 	BLOCK_ERASE=0
                                    275 ;----------------------------
                                    276 ; erase block code must be 
                                    277 ;executed from RAM
                                    278 ;-----------------------------
                           000000   279 .if BLOCK_ERASE 
                                    280 ; this code is copied to RAM 
                                    281 erase_start:
                                    282 	clr a 
                                    283     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    284     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    285 	ldf [farptr],a
                                    286     inc farptr+2 
                                    287     ldf [farptr],a
                                    288     inc farptr+2 
                                    289     ldf [farptr],a
                                    290     inc farptr+2 
                                    291     ldf [farptr],a
                                    292 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    293 	ret
                                    294 erase_end:
                                    295 
                                    296 ; copy erase_start in RAM 
                                    297 move_code_in_ram:
                                    298 	ldw x,#erase_end 
                                    299 	subw x,#erase_start
                                    300 	ldw acc16,x 
                                    301 	ldw x,#pad 
                                    302 	ldw y,#erase_start 
                                    303 	call move 
                                    304 	ret 
                                    305 
                                    306 ;-----------------------------------
                                    307 ; erase flash or EEPROM block 
                                    308 ; a block is 128 bytes 
                                    309 ; input:
                                    310 ;   farptr  address block begin
                                    311 ; output:
                                    312 ;   none
                                    313 ;--------------------------------------
                                    314 erase_block:
                                    315 	ldw x,farptr+1 
                                    316 	pushw x 
                                    317 	call move_code_in_ram 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    318 	popw x 
                                    319 	ldw farptr+1,x 
                                    320 	tnz farptr
                                    321 	jrne erase_flash 
                                    322 	ldw x,#FLASH_BASE 
                                    323 	cpw x,farptr+1 
                                    324 	jrpl erase_flash 
                                    325 ; erase eeprom block
                                    326 	call unlock_eeprom 
                                    327 	sim 
                                    328 	call pad   
                                    329 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    330 	rim 
                                    331 	ret 
                                    332 ; erase flash block:
                                    333 erase_flash:
                                    334 	call unlock_flash 
                                    335 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    336 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    337 	clr a 
                                    338 	sim 
                                    339 	call pad 
                                    340     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    341 	rim 
                                    342 	ret 
                                    343 .endif ; BLOCK_ERASE 
                                    344 
                                    345 
                                    346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    347 ; write a byte to FLASH or EEPROM 
                                    348 ; input:
                                    349 ;    a  		byte to write
                                    350 ;    farptr  	address
                                    351 ;    x          farptr[x]
                                    352 ; output:
                                    353 ;    none
                                    354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    355 	; variables locales
                           000001   356 	BTW = 1   ; byte to write offset on stack
                           000002   357 	OPT = 2   ; OPTION flag offset on stack
                           000002   358 	VSIZE = 2
      0000DC                        359 write_byte:
      0000DC 90 89            [ 2]  360 	pushw y
      0000DE                        361 	_vars VSIZE
      0000DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E0 6B 01            [ 1]  362 	ld (BTW,sp),a ; byte to write 
      0000E2 0F 02            [ 1]  363 	clr (OPT,sp)  ; OPTION flag
                                    364 ; put addr[15:0] in Y, for bounds check.
      0000E4 90 CE 00 14      [ 2]  365 	ldw y,farptr+1   ; Y=addr15:0
                                    366 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000E8 72 5D 00 13      [ 1]  367 	tnz farptr 
      0000EC 26 14            [ 1]  368 	jrne write_flash
      0000EE 90 A3 22 00      [ 2]  369     cpw y,#user_space
      0000F2 24 0E            [ 1]  370     jruge write_flash
      0000F4 90 A3 40 00      [ 2]  371 	cpw y,#EEPROM_BASE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000F8 25 52            [ 1]  372     jrult write_exit
      0000FA 90 A3 48 00      [ 2]  373 	cpw y,#OPTION_BASE
      0000FE 25 18            [ 1]  374 	jrult write_eeprom
      000100 20 4A            [ 2]  375     jra write_exit
                                    376 ; write program memory
      000102                        377 write_flash:
      000102 CD 00 CE         [ 4]  378 	call unlock_flash 
      000105 9B               [ 1]  379 1$:	sim 
      000106 7B 01            [ 1]  380 	ld a,(BTW,sp)
      000108 92 A7 00 13      [ 4]  381 	ldf ([farptr],x),a ; farptr[x]=A
      00010C 72 05 50 5F FB   [ 2]  382 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000111 9A               [ 1]  383     rim 
      000112 72 13 50 5F      [ 1]  384     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000116 20 34            [ 2]  385     jra write_exit
                                    386 ; write eeprom and option
      000118                        387 write_eeprom:
      000118 CD 00 C0         [ 4]  388 	call unlock_eeprom
                                    389 	; check for data eeprom or option eeprom
      00011B 90 A3 48 00      [ 2]  390 	cpw y,#OPTION_BASE
      00011F 2B 08            [ 1]  391 	jrmi 1$
      000121 90 A3 48 80      [ 2]  392 	cpw y,#OPTION_END+1
      000125 2A 02            [ 1]  393 	jrpl 1$
      000127 03 02            [ 1]  394 	cpl (OPT,sp)
      000129                        395 1$: 
      000129 0D 02            [ 1]  396     tnz (OPT,sp)
      00012B 27 08            [ 1]  397     jreq 2$
                                    398 	; pour modifier une option il faut modifier ces 2 bits
      00012D 72 1E 50 5B      [ 1]  399     bset FLASH_CR2,#FLASH_CR2_OPT
      000131 72 1F 50 5C      [ 1]  400     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000135                        401 2$: 
      000135 7B 01            [ 1]  402     ld a,(BTW,sp)
      000137 92 A7 00 13      [ 4]  403     ldf ([farptr],x),a
      00013B 0D 02            [ 1]  404     tnz (OPT,sp)
      00013D 27 08            [ 1]  405     jreq 3$
      00013F 5C               [ 1]  406     incw x
      000140 7B 01            [ 1]  407     ld a,(BTW,sp)
      000142 43               [ 1]  408     cpl a
      000143 92 A7 00 13      [ 4]  409     ldf ([farptr],x),a
      000147 72 05 50 5F FB   [ 2]  410 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014C                        411 write_exit:
      00014C                        412 	_drop VSIZE 
      00014C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00014E 90 85            [ 2]  413 	popw y
      000150 81               [ 4]  414     ret
                                    415 
                                    416 ;--------------------------------------------
                                    417 ; write a data block to eeprom or flash 
                                    418 ; input:
                                    419 ;   Y        source address   
                                    420 ;   X        array index  destination  farptr[x]
                                    421 ;   BSIZE    block size bytes 
                                    422 ;   farptr   write address , byte* 
                                    423 ; output:
                                    424 ;	X 		after last byte written 
                                    425 ;   Y 		after last byte read 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    426 ;  farptr   point after block
                                    427 ;---------------------------------------------
      000151                        428 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000151                        429 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    430 	; local var 
                           000001   431 	XSAVE=1 
                           000002   432 	VSIZE=2 
      000151                        433 write_block:
      000151                        434 	_vars VSIZE
      000151 52 02            [ 2]    1     sub sp,#VSIZE 
      000153 1F 01            [ 2]  435 	ldw (XSAVE,sp),x 
      000155 1E 05            [ 2]  436 	ldw x,(BSIZE,sp) 
      000157 27 13            [ 1]  437 	jreq 9$
      000159 1E 01            [ 2]  438 1$:	ldw x,(XSAVE,sp)
      00015B 90 F6            [ 1]  439 	ld a,(y)
      00015D CD 00 DC         [ 4]  440 	call write_byte 
      000160 5C               [ 1]  441 	incw x 
      000161 90 5C            [ 1]  442 	incw y 
      000163 1F 01            [ 2]  443 	ldw (XSAVE,sp),x
      000165 1E 05            [ 2]  444 	ldw x,(BSIZE,sp)
      000167 5A               [ 2]  445 	decw x
      000168 1F 05            [ 2]  446 	ldw (BSIZE,sp),x 
      00016A 26 ED            [ 1]  447 	jrne 1$
      00016C                        448 9$:
      00016C 1E 01            [ 2]  449 	ldw x,(XSAVE,sp)
      00016E CD 1A A7         [ 4]  450 	call incr_farptr
      000171                        451 	_drop VSIZE
      000171 5B 02            [ 2]    1     addw sp,#VSIZE 
      000173 81               [ 4]  452 	ret 
                                    453 
                                    454 
                                    455 ;---------------------------------------------
                                    456 ;   UART3 subroutines
                                    457 ;---------------------------------------------
                                    458 
                                    459 ;---------------------------------------------
                                    460 ; initialize UART3, 115200 8N1
                                    461 ; input:
                                    462 ;	none
                                    463 ; output:
                                    464 ;   none
                                    465 ;---------------------------------------------
      000174                        466 uart3_init:
                                    467 	; configure tx pin
      000174 72 1A 50 11      [ 1]  468 	bset PD_DDR,#BIT5 ; tx pin
      000178 72 1A 50 12      [ 1]  469 	bset PD_CR1,#BIT5 ; push-pull output
      00017C 72 1A 50 13      [ 1]  470 	bset PD_CR2,#BIT5 ; fast output
      000180                        471 uart3_set_baud: 
                                    472 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    473 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000180 A6 E1            [ 1]  474 	ld a,#CLK_SWR_HSI
      000182 C1 50 C3         [ 1]  475 	cp a,CLK_CMSR 
      000185 27 0A            [ 1]  476 	jreq hsi_clock 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000187                        477 hse_clock: ; 8 Mhz 	
      000187 35 05 52 43      [ 1]  478 	mov UART3_BRR2,#0x05 ; must be loaded first
      00018B 35 04 52 42      [ 1]  479 	mov UART3_BRR1,#0x4
      00018F 20 08            [ 2]  480 	jra uart_enable
      000191                        481 hsi_clock: ; 16 Mhz 	
      000191 35 0B 52 43      [ 1]  482 	mov UART3_BRR2,#0x0b ; must be loaded first
      000195 35 08 52 42      [ 1]  483 	mov UART3_BRR1,#0x08
      000199                        484 uart_enable:	
      000199 35 0C 52 45      [ 1]  485 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      00019D 81               [ 4]  486 	ret
                                    487 	
                                    488 ;---------------------------------
                                    489 ; send character to UART3 
                                    490 ; input:
                                    491 ;   A 
                                    492 ; output:
                                    493 ;   none 
                                    494 ;--------------------------------	
      00019E                        495 putc:
      00019E 72 0F 52 40 FB   [ 2]  496 	btjf UART3_SR,#UART_SR_TXE,.
      0001A3 C7 52 41         [ 1]  497 	ld UART3_DR,a 
      0001A6 81               [ 4]  498 	ret 
                                    499 
                                    500 ;---------------------------------
                                    501 ; wait character from UART3 
                                    502 ; input:
                                    503 ;   none
                                    504 ; output:
                                    505 ;   A 			char  
                                    506 ;--------------------------------	
      0001A7                        507 getc:
      0001A7 72 0B 52 40 FB   [ 2]  508 	btjf UART3_SR,#UART_SR_RXNE,.
      0001AC C6 52 41         [ 1]  509 	ld a,UART3_DR 
      0001AF 81               [ 4]  510 	ret 
                                    511 
                                    512 ;-----------------------------
                                    513 ; send an ASCIZ string to UART3 
                                    514 ; input: 
                                    515 ;   x 		char * 
                                    516 ; output:
                                    517 ;   none 
                                    518 ;-------------------------------
      0001B0                        519 puts:
      0001B0 F6               [ 1]  520     ld a,(x)
      0001B1 27 06            [ 1]  521 	jreq 1$
      0001B3 CD 01 9E         [ 4]  522 	call putc 
      0001B6 5C               [ 1]  523 	incw x 
      0001B7 20 F7            [ 2]  524 	jra puts 
      0001B9 81               [ 4]  525 1$:	ret 
                                    526 
                                    527 
                                    528 ;---------------------------
                                    529 ; delete character at left 
                                    530 ; of cursor on terminal 
                                    531 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    532 ;   none 
                                    533 ; output:
                                    534 ;	none 
                                    535 ;---------------------------
      0001BA                        536 bksp:
      0001BA A6 08            [ 1]  537 	ld a,#BSP 
      0001BC CD 01 9E         [ 4]  538 	call putc 
      0001BF A6 20            [ 1]  539 	ld a,#SPACE 
      0001C1 CD 01 9E         [ 4]  540 	call putc 
      0001C4 A6 08            [ 1]  541 	ld a,#BSP 
      0001C6 CD 01 9E         [ 4]  542 	call putc 
      0001C9 81               [ 4]  543 	ret 
                                    544 ;---------------------------
                                    545 ; delete n character left of cursor 
                                    546 ; at terminal.
                                    547 ; input: 
                                    548 ;   A   	number of characters to delete.
                                    549 ; output:
                                    550 ;    none 
                                    551 ;--------------------------	
      0001CA                        552 delete:
      0001CA 88               [ 1]  553 	push a 
      0001CB 0D 01            [ 1]  554 0$:	tnz (1,sp)
      0001CD 27 07            [ 1]  555 	jreq 1$
      0001CF CD 01 BA         [ 4]  556 	call bksp 
      0001D2 0A 01            [ 1]  557 	dec (1,sp)
      0001D4 20 F5            [ 2]  558 	jra 0$
      0001D6 84               [ 1]  559 1$:	pop a 
      0001D7 81               [ 4]  560 	ret
                                    561 
                                    562 ;--------------------------
                                    563 ; print n spaces on terminal
                                    564 ; input:
                                    565 ;  X 		number of spaces 
                                    566 ; output:
                                    567 ;	none 
                                    568 ;---------------------------
      0001D8                        569 spaces:
      0001D8 A6 20            [ 1]  570 	ld a,#SPACE 
      0001DA 5D               [ 2]  571 1$:	tnzw x
      0001DB 27 06            [ 1]  572 	jreq 9$
      0001DD CD 01 9E         [ 4]  573 	call putc 
      0001E0 5A               [ 2]  574 	decw x
      0001E1 20 F7            [ 2]  575 	jra 1$
      0001E3                        576 9$: 
      0001E3 81               [ 4]  577 	ret 
                                    578 
                           000001   579 .if DEBUG 
                                    580 ;---------------------------------
                                    581 ;; print actual registers states 
                                    582 ;; as pushed on stack 
                                    583 ;; {Y,X,CC,A}
                                    584 ;---------------------------------
      0001E4                        585 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4                        586 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001E4                        587 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001E4                        588 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001E4                        589 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001E4                        590 prt_regs:
      0001E4 AE 02 27         [ 2]  591 	ldw x,#regs_state 
      0001E7 CD 01 B0         [ 4]  592 	call puts
                                    593 ; register PC
      0001EA 16 01            [ 2]  594 	ldw y,(1,sp)
      0001EC AE 09 3A         [ 2]  595 	ldw x,#REG_EPC 
      0001EF CD 08 8B         [ 4]  596 	call prt_reg16 
                                    597 ; register CC 
      0001F2 7B 08            [ 1]  598 	ld a,(R_CC,sp)
      0001F4 AE 09 4B         [ 2]  599 	ldw x,#REG_CC 
      0001F7 CD 08 66         [ 4]  600 	call prt_reg8 
                                    601 ; register A 
      0001FA 7B 07            [ 1]  602 	ld a,(R_A,sp)
      0001FC AE 09 47         [ 2]  603 	ldw x,#REG_A 
      0001FF CD 08 66         [ 4]  604 	call prt_reg8 
                                    605 ; register X 
      000202 16 05            [ 2]  606 	ldw y,(R_X,sp)
      000204 AE 09 43         [ 2]  607 	ldw x,#REG_X 
      000207 CD 08 8B         [ 4]  608 	call prt_reg16 
                                    609 ; register Y 
      00020A 16 03            [ 2]  610 	ldw y,(R_Y,sp)
      00020C AE 09 3F         [ 2]  611 	ldw x,#REG_Y 
      00020F CD 08 8B         [ 4]  612 	call prt_reg16 
                                    613 ; register SP 
      000212 90 96            [ 1]  614 	ldw y,sp
      000214 72 A9 00 08      [ 2]  615 	addw y,#6+ARG_OFS  
      000218 AE 09 50         [ 2]  616 	ldw x,#REG_SP
      00021B CD 08 8B         [ 4]  617 	call prt_reg16
      00021E A6 0D            [ 1]  618 	ld a,#CR 
      000220 CD 01 9E         [ 4]  619 	call putc
      000223 CD 01 9E         [ 4]  620 	call putc   
      000226 81               [ 4]  621 	ret 
                                    622 
      000227 0A 72 65 67 69 73 74   623 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    624 
                                    625 
                                    626 ;--------------------
                                    627 ; print content at address in hex.
                                    628 ; input:
                                    629 ;   X 	address to peek 
                                    630 ; output:
                                    631 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    632 ;--------------------	
      00024E                        633 prt_peek:
      00024E 89               [ 2]  634 	pushw x 
      00024F CF 00 09         [ 2]  635 	ldw acc16,x 
      000252 72 5F 00 08      [ 1]  636 	clr acc24 
      000256 5F               [ 1]  637 	clrw x 
      000257 A6 10            [ 1]  638 	ld a,#16 
      000259 CD 09 55         [ 4]  639 	call prti24 
      00025C A6 3A            [ 1]  640 	ld a,#': 
      00025E CD 01 9E         [ 4]  641 	call putc 
      000261 A6 20            [ 1]  642 	ld a,#SPACE 
      000263 CD 01 9E         [ 4]  643 	call putc 
      000266 85               [ 2]  644 	popw x 
      000267 F6               [ 1]  645 	ld a,(x)
      000268 C7 00 0A         [ 1]  646 	ld acc8,a 
      00026B 5F               [ 1]  647 	clrw x 
      00026C A6 10            [ 1]  648 	ld a,#16 
      00026E CD 09 55         [ 4]  649 	call prti24
      000271 81               [ 4]  650 	ret 
                                    651 .endif ; DEBUG  
                                    652 
                                    653 ;-------------------------------------
                                    654 ; retrun string length
                                    655 ; input:
                                    656 ;   X         .asciz  
                                    657 ; output:
                                    658 ;   X         length 
                                    659 ;-------------------------------------
      000272                        660 strlen:
      000272 90 93            [ 1]  661 	ldw y,x 
      000274 5F               [ 1]  662 	clrw x 
      000275 90 7D            [ 1]  663 1$:	tnz (y) 
      000277 27 05            [ 1]  664 	jreq 9$ 
      000279 5C               [ 1]  665 	incw x
      00027A 90 5C            [ 1]  666 	incw y 
      00027C 20 F7            [ 2]  667 	jra 1$ 
      00027E 81               [ 4]  668 9$: ret 
                                    669 
                                    670 ;------------------------------------
                                    671 ; compare 2 strings
                                    672 ; input:
                                    673 ;   X 		char* first string 
                                    674 ;   Y       char* second string 
                                    675 ; output:
                                    676 ;   A 		0|1 
                                    677 ;-------------------------------------
      00027F                        678 strcmp:
      00027F F6               [ 1]  679 	ld a,(x)
      000280 27 0B            [ 1]  680 	jreq 5$ 
      000282 90 F1            [ 1]  681 	cp a,(y) 
      000284 26 05            [ 1]  682 	jrne 4$ 
      000286 5C               [ 1]  683 	incw x 
      000287 90 5C            [ 1]  684 	incw y 
      000289 20 F4            [ 2]  685 	jra strcmp 
      00028B                        686 4$: ; not same  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00028B 4F               [ 1]  687 	clr a 
      00028C 81               [ 4]  688 	ret 
      00028D                        689 5$: ; same 
      00028D A6 01            [ 1]  690 	ld a,#1 
      00028F 81               [ 4]  691 	ret 
                                    692 
                                    693 
                                    694 ;---------------------------------------
                                    695 ;  copy src to dest 
                                    696 ; input:
                                    697 ;   X 		dest 
                                    698 ;   Y 		src 
                                    699 ; output: 
                                    700 ;   X 		dest 
                                    701 ;----------------------------------
      000290                        702 strcpy:
      000290 89               [ 2]  703 	pushw x 
      000291 90 F6            [ 1]  704 1$: ld a,(y)
      000293 27 06            [ 1]  705 	jreq 9$ 
      000295 F7               [ 1]  706 	ld (x),a 
      000296 5C               [ 1]  707 	incw x 
      000297 90 5C            [ 1]  708 	incw y 
      000299 20 F6            [ 2]  709 	jra 1$ 
      00029B 7F               [ 1]  710 9$:	clr (x)
      00029C 85               [ 2]  711 	popw x 
      00029D 81               [ 4]  712 	ret 
                                    713 
                                    714 ;---------------------------------------
                                    715 ; move memory block 
                                    716 ; input:
                                    717 ;   X 		destination 
                                    718 ;   Y 	    source 
                                    719 ;   acc16	size 
                                    720 ; output:
                                    721 ;   none 
                                    722 ;--------------------------------------
                           000001   723 	INCR=1 ; increament high byte 
                           000002   724 	LB=2 ; increament low byte 
                           000002   725 	VSIZE=2
      00029E                        726 move:
      00029E                        727 	_vars VSIZE 
      00029E 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A0 0F 01            [ 1]  728 	clr (INCR,sp)
      0002A2 0F 02            [ 1]  729 	clr (LB,sp)
      0002A4 90 89            [ 2]  730 	pushw y 
      0002A6 13 01            [ 2]  731 	cpw x,(1,sp) ; compare DEST to SRC 
      0002A8 90 85            [ 2]  732 	popw y 
      0002AA 27 31            [ 1]  733 	jreq move_exit ; x==y 
      0002AC 2B 0E            [ 1]  734 	jrmi move_down
      0002AE                        735 move_up: ; start from top address with incr=-1
      0002AE 72 BB 00 09      [ 2]  736 	addw x,acc16
      0002B2 72 B9 00 09      [ 2]  737 	addw y,acc16
      0002B6 03 01            [ 1]  738 	cpl (INCR,sp)
      0002B8 03 02            [ 1]  739 	cpl (LB,sp)   ; increment = -1 
      0002BA 20 05            [ 2]  740 	jra move_loop  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002BC                        741 move_down: ; start from bottom address with incr=1 
      0002BC 5A               [ 2]  742     decw x 
      0002BD 90 5A            [ 2]  743 	decw y
      0002BF 0C 02            [ 1]  744 	inc (LB,sp) ; incr=1 
      0002C1                        745 move_loop:	
      0002C1 C6 00 09         [ 1]  746     ld a, acc16 
      0002C4 CA 00 0A         [ 1]  747 	or a, acc8
      0002C7 27 14            [ 1]  748 	jreq move_exit 
      0002C9 72 FB 01         [ 2]  749 	addw x,(INCR,sp)
      0002CC 72 F9 01         [ 2]  750 	addw y,(INCR,sp) 
      0002CF 90 F6            [ 1]  751 	ld a,(y)
      0002D1 F7               [ 1]  752 	ld (x),a 
      0002D2 89               [ 2]  753 	pushw x 
      0002D3 CE 00 09         [ 2]  754 	ldw x,acc16 
      0002D6 5A               [ 2]  755 	decw x 
      0002D7 CF 00 09         [ 2]  756 	ldw acc16,x 
      0002DA 85               [ 2]  757 	popw x 
      0002DB 20 E4            [ 2]  758 	jra move_loop
      0002DD                        759 move_exit:
      0002DD                        760 	_drop VSIZE
      0002DD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002DF 81               [ 4]  761 	ret 	
                                    762 
                                    763 ;-------------------------------------
                                    764 ; search text area for a line with 
                                    765 ; same number as lineno  
                                    766 ; input:
                                    767 ;	X 			lineno 
                                    768 ; output:
                                    769 ;   X 			addr of line | 0 
                                    770 ;   Y           lineno|insert address if not found  
                                    771 ;-------------------------------------
                           000001   772 	LL=1 ; line length 
                           000002   773 	LB=2 ; line length low byte 
                           000002   774 	VSIZE=2 
      0002E0                        775 search_lineno:
      0002E0                        776 	_vars VSIZE
      0002E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E2 CF 00 09         [ 2]  777 	ldw acc16,x 
      0002E5 0F 01            [ 1]  778 	clr (LL,sp)
      0002E7 90 CE 00 1B      [ 2]  779 	ldw y,txtbgn
      0002EB                        780 search_ln_loop:
      0002EB 90 C3 00 1D      [ 2]  781 	cpw y,txtend 
      0002EF 2A 13            [ 1]  782 	jrpl 8$
      0002F1 93               [ 1]  783 	ldw x,y 
      0002F2 FE               [ 2]  784 	ldw x,(x) ; x=line number 
      0002F3 C3 00 09         [ 2]  785 	cpw x,acc16 
      0002F6 27 0F            [ 1]  786 	jreq 9$ 
      0002F8 2A 0A            [ 1]  787 	jrpl 8$ ; from here all lines are > lineno 
      0002FA 90 E6 02         [ 1]  788 	ld a,(2,y)
      0002FD 6B 02            [ 1]  789 	ld (LB,sp),a 
      0002FF 72 F9 01         [ 2]  790 	addw y,(LL,sp)
      000302 20 E7            [ 2]  791 	jra search_ln_loop 
      000304 51               [ 1]  792 8$: exgw x,y 
      000305 90 5F            [ 1]  793 	clrw y 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000307                        794 9$: _drop VSIZE
      000307 5B 02            [ 2]    1     addw sp,#VSIZE 
      000309 51               [ 1]  795 	exgw x,y   
      00030A 81               [ 4]  796 	ret 
                                    797 
                                    798 ;-------------------------------------
                                    799 ; delete line at addr
                                    800 ; move new line to insert with end of text 
                                    801 ; otherwise it would be overwritten.
                                    802 ; input:
                                    803 ;   X 		addr of line i.e DEST for move 
                                    804 ;-------------------------------------
                           000001   805 	LLEN=1
                           000003   806 	SRC=3
                           000004   807 	VSIZE=4
      00030B                        808 del_line: 
      00030B                        809 	_vars VSIZE 
      00030B 52 04            [ 2]    1     sub sp,#VSIZE 
      00030D E6 02            [ 1]  810 	ld a,(2,x) ; line length
      00030F 6B 02            [ 1]  811 	ld (LLEN+1,sp),a 
      000311 0F 01            [ 1]  812 	clr (LLEN,sp)
      000313 90 93            [ 1]  813 	ldw y,x  
      000315 72 F9 01         [ 2]  814 	addw y,(LLEN,sp) ;SRC  
      000318 17 03            [ 2]  815 	ldw (SRC,sp),y  ;save source 
      00031A 90 CE 00 1D      [ 2]  816 	ldw y,txtend 
      00031E 90 E6 02         [ 1]  817 	ld a,(2,y)
      000321 90 5F            [ 1]  818 	clrw y 
      000323 90 97            [ 1]  819 	ld yl,a  
      000325 72 B9 00 1D      [ 2]  820 	addw y,txtend
      000329 72 F2 03         [ 2]  821 	subw y,(SRC,sp) ; y=count 
      00032C 90 CF 00 09      [ 2]  822 	ldw acc16,y 
      000330 16 03            [ 2]  823 	ldw y,(SRC,sp)    ; source
      000332 CD 02 9E         [ 4]  824 	call move
      000335 90 CE 00 1D      [ 2]  825 	ldw y,txtend 
      000339 72 F2 01         [ 2]  826 	subw y,(LLEN,sp)
      00033C 90 CF 00 1D      [ 2]  827 	ldw txtend,y  
      000340                        828 	_drop VSIZE     
      000340 5B 04            [ 2]    1     addw sp,#VSIZE 
      000342 81               [ 4]  829 	ret 
                                    830 
                                    831 ;---------------------------------------------
                                    832 ; create a gap in text area 
                                    833 ; move new line to insert in gap with end of text
                                    834 ; otherwise it would be overwritten.
                                    835 ; input:
                                    836 ;    X 			addr gap start 
                                    837 ;    Y 			gap length 
                                    838 ; output:
                                    839 ;    X 			addr gap start 
                                    840 ;--------------------------------------------
                           000001   841 	DEST=1
                           000003   842 	SRC=3
                           000005   843 	LEN=5
                           000006   844 	VSIZE=6 
      000343                        845 create_gap:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000343                        846 	_vars VSIZE
      000343 52 06            [ 2]    1     sub sp,#VSIZE 
      000345 1F 03            [ 2]  847 	ldw (SRC,sp),x 
      000347 17 05            [ 2]  848 	ldw (LEN,sp),y 
      000349 90 CF 00 09      [ 2]  849 	ldw acc16,y 
      00034D 90 93            [ 1]  850 	ldw y,x ; SRC
      00034F 72 BB 00 09      [ 2]  851 	addw x,acc16  
      000353 1F 01            [ 2]  852 	ldw (DEST,sp),x 
                                    853 ;compute size to move 	
      000355 CE 00 1D         [ 2]  854 	ldw x,txtend 
      000358 E6 02            [ 1]  855 	ld a,(2,x) ; pending line length 
      00035A C7 00 0A         [ 1]  856 	ld acc8,a 
      00035D 72 5F 00 09      [ 1]  857 	clr acc16 
      000361 72 BB 00 09      [ 2]  858 	addw x,acc16 
      000365 72 F0 03         [ 2]  859 	subw x,(SRC,sp)
      000368 CF 00 09         [ 2]  860 	ldw acc16,x ; size to move
      00036B 1E 01            [ 2]  861 	ldw x,(DEST,sp) 
      00036D CD 02 9E         [ 4]  862 	call move
      000370 CE 00 1D         [ 2]  863 	ldw x,txtend
      000373 72 FB 05         [ 2]  864 	addw x,(LEN,sp)
      000376 CF 00 1D         [ 2]  865 	ldw txtend,x
      000379                        866 9$:	_drop VSIZE 
      000379 5B 06            [ 2]    1     addw sp,#VSIZE 
      00037B 81               [ 4]  867 	ret 
                                    868 
                                    869 
                                    870 ;--------------------------------------------
                                    871 ; insert line in tib into text area 
                                    872 ; first search for already existing 
                                    873 ; replace existing 
                                    874 ; if strlen(tib)==0 delete existing 
                                    875 ; input:
                                    876 ;   ptr16 				pointer to tokenized line  
                                    877 ; output:
                                    878 ;   none
                                    879 ;---------------------------------------------
                           000001   880 	DEST=1  ; text area insertion address 
                           000003   881 	SRC=3   ; str to insert address 
                           000005   882 	LINENO=5 ; line number 
                           000007   883 	LLEN=7 ; line length 
                           000008   884 	VSIZE=8  
      00037C                        885 insert_line:
      00037C                        886 	_vars VSIZE 
      00037C 52 08            [ 2]    1     sub sp,#VSIZE 
      00037E CE 00 14         [ 2]  887 	ldw x,ptr16  
      000381 C3 00 1B         [ 2]  888 	cpw x,txtbgn 
      000384 26 0D            [ 1]  889 	jrne 0$
                                    890 ;first text line 
      000386 AE 00 02         [ 2]  891 	ldw x,#2 
      000389 72 D6 00 14      [ 4]  892 	ld a,([ptr16],x)
      00038D 5F               [ 1]  893 	clrw x 
      00038E 97               [ 1]  894 	ld xl,a
      00038F 1F 07            [ 2]  895 	ldw (LLEN,sp),x  
      000391 20 45            [ 2]  896 	jra 5$
      000393 72 CE 00 14      [ 5]  897 0$:	ldw x,[ptr16]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    898 ; new line number
      000397 1F 05            [ 2]  899 	ldw (LINENO,sp),x 
      000399 AE 00 02         [ 2]  900 	ldw x,#2 
      00039C 72 D6 00 14      [ 4]  901 	ld a,([ptr16],x)
      0003A0 97               [ 1]  902 	ld xl,a
                                    903 ; new line length
      0003A1 1F 07            [ 2]  904 	ldw (LLEN,sp),x
                                    905 ; check if that line number already exit 	
      0003A3 1E 05            [ 2]  906 	ldw x,(LINENO,sp)
      0003A5 CD 02 E0         [ 4]  907 	call search_lineno 
      0003A8 5D               [ 2]  908 	tnzw x 
      0003A9 26 04            [ 1]  909 	jrne 2$
                                    910 ; line doesn't exit
                                    911 ; it will be inserted at this point.  	
      0003AB 17 01            [ 2]  912 	ldw (DEST,sp),y 
      0003AD 20 05            [ 2]  913 	jra 3$
                                    914 ; line exit delete it.
                                    915 ; it will be replaced by new one 	
      0003AF 1F 01            [ 2]  916 2$: ldw (DEST,sp),x 
      0003B1 CD 03 0B         [ 4]  917 	call del_line
      0003B4                        918 3$: 
                                    919 ; insert new line or leave if LLEN==3
                                    920 ; LLEN==3 means empty line 
      0003B4 A6 03            [ 1]  921 	ld a,#3
      0003B6 11 08            [ 1]  922 	cp a,(LLEN+1,sp)
      0003B8 27 27            [ 1]  923 	jreq insert_ln_exit ; empty line exit.
                                    924 ; if insertion point at txtend 
                                    925 ; no move required 
      0003BA 1E 01            [ 2]  926 	ldw x,(DEST,sp)
      0003BC C3 00 1D         [ 2]  927 	cpw x,txtend 
      0003BF 2A 17            [ 1]  928 	jrpl 5$ 
                                    929 ; must create a gap
                                    930 ; at insertion point  
      0003C1 1E 01            [ 2]  931 	ldw x,(DEST,sp)
      0003C3 16 07            [ 2]  932 	ldw y,(LLEN,sp)
      0003C5 CD 03 43         [ 4]  933 	call create_gap 
                                    934 ; move new line in gap 
      0003C8 1E 07            [ 2]  935 	ldw x,(LLEN,sp)
      0003CA CF 00 09         [ 2]  936 	ldw acc16,x 
      0003CD 90 CE 00 1D      [ 2]  937 	ldw y,txtend ;SRC 
      0003D1 1E 01            [ 2]  938 	ldw x,(DEST,sp) ; dest address 
      0003D3 CD 02 9E         [ 4]  939 	call move 
      0003D6 20 09            [ 2]  940 	jra insert_ln_exit  
      0003D8                        941 5$: ; no move required 
      0003D8 1E 07            [ 2]  942 	ldw x,(LLEN,sp) 
      0003DA 72 BB 00 1D      [ 2]  943 	addw x,txtend 
      0003DE CF 00 1D         [ 2]  944 	ldw txtend,x 
      0003E1                        945 insert_ln_exit:	
      0003E1                        946 	_drop VSIZE
      0003E1 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003E3 81               [ 4]  947 	ret
                                    948 
                                    949 
                                    950 ;-----------------------------
                                    951 ; check if text buffer full
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    952 ; input:
                                    953 ;   ptr16     addr start tokenize line 
                                    954 ;   X         buffer index 
                                    955 ; output:
                                    956 ;   none 
                                    957 ;-----------------------------------
      0003E4                        958 check_full:
      0003E4 72 BB 00 14      [ 2]  959 	addw x,ptr16 
      0003E8 A3 16 C8         [ 2]  960 	cpw x,#tib 
      0003EB 25 05            [ 1]  961 	jrult 1$
      0003ED A6 01            [ 1]  962 	ld a,#ERR_MEM_FULL
      0003EF CC 07 1A         [ 2]  963 	jp tb_error 
      0003F2 81               [ 4]  964 1$: ret 
                                    965 
                                    966 
                                    967 ;-----------------------------------
                                    968 ; create token list form text line 
                                    969 ; save this list in text area
                                    970 ; input:
                                    971 ;   none
                                    972 ; output:
                                    973 ;   basicptr     token list buffer
                                    974 ;   lineno 		 BASIC line number 
                                    975 ;   in.w  		 cleared 
                                    976 ;-----------------------------------
                                    977 	.macro _incr_ptr16 n 
                                    978 	ldw x,#n 
                                    979 	addw x,ptr16 
                                    980 	ldw ptr16,x 
                                    981 	.endm 
                                    982 
                           000001   983 	XSAVE=1
                           000003   984 	BUFIDX=3
                           000004   985 	VSIZE=4
      0003F3                        986 compile:
      0003F3                        987 	_vars VSIZE 
      0003F3 52 04            [ 2]    1     sub sp,#VSIZE 
      0003F5 72 1A 00 24      [ 1]  988 	bset flags,#FCOMP 
      0003F9 CE 00 1D         [ 2]  989 	ldw x,txtend
      0003FC CF 00 14         [ 2]  990 	ldw ptr16,x 
      0003FF 5F               [ 1]  991 	clrw x 
      000400 AE 00 03         [ 2]  992 	ldw x,#3
      000403 1F 03            [ 2]  993 	ldw (BUFIDX,sp),X  
      000405 CD 03 E4         [ 4]  994 	call check_full
      000408 5F               [ 1]  995 	clrw x 
      000409 72 CF 00 14      [ 5]  996 	ldw [ptr16],x 
      00040D CD 0D 04         [ 4]  997 	call get_token
      000410 1F 01            [ 2]  998 	ldw (XSAVE,sp),x 
      000412 A1 04            [ 1]  999 	cp a,#TK_INTGR 
      000414 26 11            [ 1] 1000 	jrne 3$
      000416 A3 00 00         [ 2] 1001 	cpw x,#0  
      000419 22 03            [ 1] 1002 	jrugt 1$
      00041B CC 07 18         [ 2] 1003 	jp syntax_error 
      00041E 72 CF 00 14      [ 5] 1004 1$:	ldw [ptr16],x; line number
      000422 CD 0D 04         [ 4] 1005 2$:	call get_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000425 1F 01            [ 2] 1006 	ldw (XSAVE,sp),x 
      000427 A1 00            [ 1] 1007 3$:	cp a,#TK_NONE 
      000429 26 03            [ 1] 1008 	jrne 30$
      00042B CC 04 C2         [ 2] 1009 	jp 9$
      00042E                       1010 30$: 	 
      00042E 1E 03            [ 2] 1011 	ldw x,(BUFIDX,sp)
      000430 CD 03 E4         [ 4] 1012 	call check_full 
      000433 16 03            [ 2] 1013 	ldw y,(BUFIDX,sp) 
      000435 91 D7 14         [ 4] 1014 	ld ([ptr16],y),a ; token attribute 
      000438 90 5C            [ 1] 1015 	incw y
      00043A 17 03            [ 2] 1016 	ldw (BUFIDX,sp),y
      00043C A1 01            [ 1] 1017 	cp a,#TK_COLON 
      00043E 26 02            [ 1] 1018 	jrne 31$
      000440 20 E0            [ 2] 1019 	jra 2$ 
      000442                       1020 31$:
      000442 A1 03            [ 1] 1021 	cp a,#TK_CHAR
      000444 26 0C            [ 1] 1022 	jrne 32$ 
      000446 1E 01            [ 2] 1023 	ldw x,(XSAVE,sp)
      000448 9F               [ 1] 1024 	ld a,xl 
      000449 91 D7 14         [ 4] 1025 	ld ([ptr16],y),a
      00044C 90 5C            [ 1] 1026 	incw y 
      00044E 17 03            [ 2] 1027 	ldw (BUFIDX,sp),y 
      000450 20 D0            [ 2] 1028 	jra 2$ 
      000452                       1029 32$:
      000452 A1 02            [ 1] 1030 	cp a,#TK_ARRAY 
      000454 27 CC            [ 1] 1031 	jreq 2$ 
      000456 A1 0A            [ 1] 1032 	cp a,#TK_QSTR 
      000458 26 25            [ 1] 1033 	jrne 4$
      00045A AE 17 18         [ 2] 1034 	ldw x,#pad 
      00045D CD 02 72         [ 4] 1035 	call strlen
      000460 5C               [ 1] 1036 	incw x  
      000461 CD 03 E4         [ 4] 1037 	call check_full 
      000464 90 AE 17 18      [ 2] 1038 	ldw y,#pad 
      000468 CE 00 14         [ 2] 1039 	ldw x,ptr16
      00046B 72 FB 03         [ 2] 1040 	addw x,(BUFIDX,sp)	
      00046E CD 02 90         [ 4] 1041 	call strcpy 
      000471 AE 17 18         [ 2] 1042 	ldw x,#pad 
      000474 CD 02 72         [ 4] 1043 	call strlen 
      000477 5C               [ 1] 1044 	incw x
      000478 72 FB 03         [ 2] 1045 	addw x,(BUFIDX,sp) 
      00047B 1F 03            [ 2] 1046 	ldw (BUFIDX,sp),x
      00047D 20 A3            [ 2] 1047 	jra 2$  
      00047F A1 04            [ 1] 1048 4$: cp a,#TK_INTGR
      000481 25 9F            [ 1] 1049 	jrult 2$
      000483 A1 09            [ 1] 1050 	cp a,#TK_SFUNC 
      000485 22 9B            [ 1] 1051 	Jrugt 2$
      000487 1E 01            [ 2] 1052 	ldw x,(XSAVE,sp) 
      000489 16 03            [ 2] 1053 	ldw y,(BUFIDX,sp)
      00048B 91 DF 14         [ 5] 1054 	ldw ([ptr16],y),x
      00048E A3 17 01         [ 2] 1055 	cpw x,#rem 
      000491 26 26            [ 1] 1056 	jrne 5$
      000493 72 A9 00 02      [ 2] 1057 	addw y,#2 
      000497 90 89            [ 2] 1058 	pushw y 
      000499 CE 00 14         [ 2] 1059 	ldw x,ptr16 
      00049C 72 FB 01         [ 2] 1060 	addw x,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00049F                       1061 	_drop 2  
      00049F 5B 02            [ 2]    1     addw sp,#2 
      0004A1 90 CE 00 00      [ 2] 1062 	ldw y,in.w 
      0004A5 72 A9 16 C8      [ 2] 1063 	addw y,#tib 
      0004A9 CD 02 90         [ 4] 1064 	call strcpy 	
      0004AC CD 02 72         [ 4] 1065 	call strlen 
      0004AF 1C 00 03         [ 2] 1066 	addw x,#3 ; rem exec address+string 0. 
      0004B2 72 FB 03         [ 2] 1067 	addw x,(BUFIDX,sp)
      0004B5 1F 03            [ 2] 1068 	ldw (BUFIDX,sp),x 
      0004B7 20 09            [ 2] 1069 	jra 9$
      0004B9 72 A9 00 02      [ 2] 1070 5$:	addw y,#2 
      0004BD 17 03            [ 2] 1071 	ldw (BUFIDX,sp),y 
      0004BF CC 04 22         [ 2] 1072 	jp 2$
      0004C2                       1073 9$: 
      0004C2 AE 00 02         [ 2] 1074 	ldw x,#2
      0004C5 16 03            [ 2] 1075 	ldw y,(BUFIDX,sp)
      0004C7 90 9F            [ 1] 1076 	ld a,yl 
      0004C9 72 D7 00 14      [ 4] 1077 	ld ([ptr16],x),a  	
      0004CD 72 CE 00 14      [ 5] 1078 	ldw x,[ptr16]
      0004D1 27 09            [ 1] 1079 	jreq 10$
      0004D3 CD 03 7C         [ 4] 1080 	call insert_line
      0004D6 72 5F 00 02      [ 1] 1081 	clr  count 
      0004DA 20 13            [ 2] 1082 	jra  11$ 
      0004DC                       1083 10$: 
      0004DC CE 00 14         [ 2] 1084 	ldw x,ptr16 
      0004DF CF 00 03         [ 2] 1085 	ldw basicptr,x 
      0004E2 E6 02            [ 1] 1086 	ld a,(2,x)
      0004E4 C7 00 02         [ 1] 1087 	ld count,a 
      0004E7 FE               [ 2] 1088 	ldw x,(x)
      0004E8 CF 00 05         [ 2] 1089 	ldw lineno,x 
      0004EB 35 03 00 01      [ 1] 1090 	mov in,#3 
      0004EF                       1091 11$:
      0004EF                       1092 	_drop VSIZE 
      0004EF 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004F1 72 1B 00 24      [ 1] 1093 	bres flags,#FCOMP 
      0004F5 81               [ 4] 1094 	ret 
                                   1095 
                                   1096 
                                   1097 ;------------------------------------
                                   1098 ;  set all variables to zero 
                                   1099 ; input:
                                   1100 ;   none 
                                   1101 ; output:
                                   1102 ;	none
                                   1103 ;------------------------------------
      0004F6                       1104 clear_vars:
      0004F6 AE 00 26         [ 2] 1105 	ldw x,#vars 
      0004F9 90 AE 00 34      [ 2] 1106 	ldw y,#2*26 
      0004FD 7F               [ 1] 1107 1$:	clr (x)
      0004FE 5C               [ 1] 1108 	incw x 
      0004FF 90 5A            [ 2] 1109 	decw y 
      000501 26 FA            [ 1] 1110 	jrne 1$
      000503 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1114 ; check if A is a letter
                                   1115 ; input:
                                   1116 ;   A 			character to test 
                                   1117 ; output:
                                   1118 ;   C flag      1 true, 0 false 
                                   1119 ;-------------------------------------
      000504                       1120 is_alpha:
      000504 A1 41            [ 1] 1121 	cp a,#'A 
      000506 8C               [ 1] 1122 	ccf
      000507 24 0B            [ 1] 1123 	jrnc 9$ 
      000509 A1 5B            [ 1] 1124 	cp a,#'Z+1 
      00050B 25 07            [ 1] 1125 	jrc 9$ 
      00050D A1 61            [ 1] 1126 	cp a,#'a 
      00050F 8C               [ 1] 1127 	ccf 
      000510 24 02            [ 1] 1128 	jrnc 9$
      000512 A1 7B            [ 1] 1129 	cp a,#'z+1   
      000514 81               [ 4] 1130 9$: ret 	
                                   1131 
                                   1132 ;-------------------------------------
                                   1133 ;  program initialization entry point 
                                   1134 ;-------------------------------------
                           000001  1135 	MAJOR=1
                           000000  1136 	MINOR=0
      000515 0A 0A 54 69 6E 79 20  1137 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00055B                       1138 cold_start:
                                   1139 ;set stack 
      00055B AE 17 FF         [ 2] 1140 	ldw x,#STACK_EMPTY
      00055E 94               [ 1] 1141 	ldw sp,x   
                                   1142 ; clear all ram 
      00055F 7F               [ 1] 1143 0$: clr (x)
      000560 5A               [ 2] 1144 	decw x 
      000561 26 FC            [ 1] 1145 	jrne 0$
                                   1146 ; activate pull up on all inputs 
      000563 A6 FF            [ 1] 1147 	ld a,#255 
      000565 C7 50 03         [ 1] 1148 	ld PA_CR1,a 
      000568 C7 50 08         [ 1] 1149 	ld PB_CR1,a 
      00056B C7 50 0D         [ 1] 1150 	ld PC_CR1,a 
      00056E C7 50 12         [ 1] 1151 	ld PD_CR1,a 
      000571 C7 50 17         [ 1] 1152 	ld PE_CR1,a 
      000574 C7 50 1C         [ 1] 1153 	ld PF_CR1,a 
      000577 C7 50 21         [ 1] 1154 	ld PG_CR1,a 
      00057A C7 50 2B         [ 1] 1155 	ld PI_CR1,a 
                                   1156 ; select internal clock no divisor: 16 Mhz 	
      00057D A6 E1            [ 1] 1157 	ld a,#CLK_SWR_HSI 
      00057F 5F               [ 1] 1158 	clrw x  
      000580 CD 00 99         [ 4] 1159     call clock_init 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000583 CD 00 AF         [ 4] 1160 	call timer4_init
                                   1161 ; UART3 at 115200 BAUD
      000586 CD 01 74         [ 4] 1162 	call uart3_init
                                   1163 ; activate PE_4 (user button interrupt)
      000589 72 18 50 18      [ 1] 1164     bset PE_CR2,#USR_BTN_BIT 
                                   1165 ; display system information
      00058D AE 05 15         [ 2] 1166 	ldw x,#software 
      000590 CD 01 B0         [ 4] 1167 	call puts 
      000593 A6 01            [ 1] 1168 	ld a,#MAJOR 
      000595 C7 00 0A         [ 1] 1169 	ld acc8,a 
      000598 5F               [ 1] 1170 	clrw x 
      000599 CF 00 08         [ 2] 1171 	ldw acc24,x 
      00059C A6 0A            [ 1] 1172 	ld a,#10 
      00059E CD 09 55         [ 4] 1173 	call prti24 
      0005A1 A6 2E            [ 1] 1174 	ld a,#'.
      0005A3 CD 01 9E         [ 4] 1175 	call putc 
      0005A6 A6 00            [ 1] 1176 	ld a,#MINOR 
      0005A8 C7 00 0A         [ 1] 1177 	ld acc8,a 
      0005AB 5F               [ 1] 1178 	clrw x 
      0005AC CF 00 08         [ 2] 1179 	ldw acc24,x 
      0005AF A6 0A            [ 1] 1180 	ld a,#10 
      0005B1 CD 09 55         [ 4] 1181 	call prti24 
      0005B4 A6 0D            [ 1] 1182 	ld a,#CR 
      0005B6 CD 01 9E         [ 4] 1183 	call putc 
      0005B9 CD 1A B5         [ 4] 1184 	call seek_fdrive 
                                   1185 ; configure LED2 pin 
      0005BC 72 1A 50 0D      [ 1] 1186     bset PC_CR1,#LED2_BIT
      0005C0 72 1A 50 0E      [ 1] 1187     bset PC_CR2,#LED2_BIT
      0005C4 72 1A 50 0C      [ 1] 1188     bset PC_DDR,#LED2_BIT
      0005C8 9A               [ 1] 1189 	rim 
      0005C9 AE 16 C8         [ 2] 1190 	ldw x,#tib
      0005CC CF 00 20         [ 2] 1191 	ldw array_addr,x 
      0005CF 72 5C 00 10      [ 1] 1192 	inc seedy+1 
      0005D3 72 5C 00 0E      [ 1] 1193 	inc seedx+1 
      0005D7 CD 05 E6         [ 4] 1194 	call clear_basic
      0005DA CD 13 78         [ 4] 1195 	call ubound 
      0005DD CD 0F A2         [ 4] 1196 	call dpop 
      0005E0 CF 00 22         [ 2] 1197 	ldw array_size,x 
      0005E3 CC 07 6A         [ 2] 1198     jp warm_start 
                                   1199 
                                   1200 ;---------------------------
                                   1201 ; reset BASIC text variables 
                                   1202 ; and clear variables 
                                   1203 ;---------------------------
      0005E6                       1204 clear_basic:
      0005E6 5F               [ 1] 1205 	clrw x 
      0005E7 CF 00 05         [ 2] 1206 	ldw lineno,x
      0005EA 72 5F 00 02      [ 1] 1207 	clr count 
      0005EE AE 00 5A         [ 2] 1208 	ldw x,#free_ram 
      0005F1 CF 00 1B         [ 2] 1209 	ldw txtbgn,x 
      0005F4 CF 00 1D         [ 2] 1210 	ldw txtend,x 
      0005F7 CD 04 F6         [ 4] 1211 	call clear_vars 
      0005FA 81               [ 4] 1212 	ret 
                                   1213 
                                   1214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1215 ;;   Tiny BASIC error messages     ;;
                                   1216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005FB                       1217 err_msg:
      0005FB 00 00 06 13 06 21 06  1218 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             30 06 4A 06 5A
      000607 06 71 06 88 06 A3 06  1219 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             B5 06 C7
      000611 06 D4                 1220 	.word err_no_access 
                                   1221 
      000613 0A 4D 65 6D 6F 72 79  1222 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      000621 0A 73 79 6E 74 61 78  1223 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      000630 0A 6D 61 74 68 20 6F  1224 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      00064A 0A 64 69 76 69 73 69  1225 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      00065A 0A 69 6E 76 61 6C 69  1226 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      000671 0A 72 75 6E 20 74 69  1227 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000688 0A 63 6F 6D 6D 61 6E  1228 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      0006A3 0A 64 75 70 6C 69 63  1229 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      0006B5 0A 46 69 6C 65 20 6E  1230 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006C7 0A 62 61 64 20 76 61  1231 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006D4 0A 46 69 6C 65 20 69  1232 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1233 
      000708 6C 61 73 74 20 74 6F  1234 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1235 
      000718                       1236 syntax_error:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000718 A6 02            [ 1] 1237 	ld a,#ERR_SYNTAX 
                                   1238 
      00071A                       1239 tb_error:
      00071A AE 05 FB         [ 2] 1240 	ldw x, #err_msg 
      00071D 72 5F 00 09      [ 1] 1241 	clr acc16 
      000721 48               [ 1] 1242 	sll a
      000722 72 59 00 09      [ 1] 1243 	rlc acc16  
      000726 C7 00 0A         [ 1] 1244 	ld acc8, a 
      000729 72 BB 00 09      [ 2] 1245 	addw x,acc16 
      00072D FE               [ 2] 1246 	ldw x,(x)
      00072E CD 01 B0         [ 4] 1247 	call puts
      000731 72 0B 00 24 18   [ 2] 1248 	btjf flags,#FCOMP, 1$
      000736 AE 16 C8         [ 2] 1249 	ldw x,#tib
      000739 CD 01 B0         [ 4] 1250 	call puts 
      00073C A6 0D            [ 1] 1251 	ld a,#CR 
      00073E CD 01 9E         [ 4] 1252 	call putc
      000741 CE 00 00         [ 2] 1253 	ldw x,in.w
      000744 CD 01 D8         [ 4] 1254 	call spaces
      000747 A6 5E            [ 1] 1255 	ld a,#'^
      000749 CD 01 9E         [ 4] 1256 	call putc 
      00074C 20 18            [ 2] 1257 	jra 6$
      00074E CE 00 03         [ 2] 1258 1$:	ldw x,basicptr
      000751 CD 14 81         [ 4] 1259 	call prt_basic_line
      000754 AE 07 08         [ 2] 1260 	ldw x,#rt_msg 
      000757 CD 01 B0         [ 4] 1261 	call puts 
      00075A CE 00 11         [ 2] 1262 	ldw x,in.w.saved 
      00075D 72 D6 00 03      [ 4] 1263 	ld a,([basicptr],x)
      000761 5F               [ 1] 1264 	clrw x 
      000762 97               [ 1] 1265 	ld xl,a 
      000763 CD 09 9D         [ 4] 1266 	call print_int 
      000766 AE 17 FF         [ 2] 1267 6$: ldw x,#STACK_EMPTY 
      000769 94               [ 1] 1268     ldw sp,x
      00076A                       1269 warm_start:
      00076A 72 5F 00 24      [ 1] 1270 	clr flags 
      00076E 72 5F 00 1F      [ 1] 1271 	clr loop_depth 
      000772 AE 17 80         [ 2] 1272 	ldw x,#dstack_unf 
      000775 CF 00 19         [ 2] 1273 	ldw dstkptr,x 
      000778 35 04 00 25      [ 1] 1274 	mov tab_width,#TAB_WIDTH 
      00077C 35 0A 00 07      [ 1] 1275 	mov base,#10 
      000780 5F               [ 1] 1276 	clrw x 
      000781 CF 00 05         [ 2] 1277 	ldw lineno,x 
      000784 AE 16 C8         [ 2] 1278 	ldw x,#tib 
      000787 CF 00 03         [ 2] 1279 	ldw basicptr,x 
                                   1280 ;----------------------------
                                   1281 ;   BASIC interpreter
                                   1282 ;----------------------------
      00078A                       1283 interp:
      00078A 72 5F 00 00      [ 1] 1284 	clr in.w
      00078E 72 01 00 24 27   [ 2] 1285 	btjf flags,#FRUN,4$ 
                                   1286 ; running program
                                   1287 ; goto next basic line 
      000793 CE 00 03         [ 2] 1288 	ldw x,basicptr
      000796 E6 02            [ 1] 1289 	ld a,(2,x) ; line length 
      000798 C7 00 0A         [ 1] 1290 	ld acc8,a 
      00079B 72 5F 00 09      [ 1] 1291 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00079F 72 BB 00 09      [ 2] 1292 	addw x,acc16
      0007A3 C3 00 1D         [ 2] 1293 	cpw x,txtend 
      0007A6 2A C2            [ 1] 1294 	jrpl warm_start
      0007A8 CF 00 03         [ 2] 1295 	ldw basicptr,x ; start of next line  
      0007AB E6 02            [ 1] 1296 	ld a,(2,x)
      0007AD C7 00 02         [ 1] 1297 	ld count,a 
      0007B0 FE               [ 2] 1298 	ldw x,(x) ; line no 
      0007B1 CF 00 05         [ 2] 1299 	ldw lineno,x 
      0007B4 35 03 00 01      [ 1] 1300 	mov in,#3 ; skip first 3 bytes of line 
      0007B8 20 14            [ 2] 1301 	jra interp_loop 
      0007BA                       1302 4$: ; commande line mode 	
      0007BA 72 5F 00 01      [ 1] 1303 	clr in
      0007BE A6 0D            [ 1] 1304 	ld a,#CR 
      0007C0 CD 01 9E         [ 4] 1305 	call putc 
      0007C3 A6 3E            [ 1] 1306 	ld a,#'> 
      0007C5 CD 01 9E         [ 4] 1307 	call putc 
      0007C8 CD 0A 8B         [ 4] 1308 	call readln
      0007CB CD 03 F3         [ 4] 1309 	call compile
      0007CE                       1310 interp_loop:  
      0007CE C6 00 01         [ 1] 1311 	ld a,in 
      0007D1 C1 00 02         [ 1] 1312 	cp a,count  
      0007D4 2A B4            [ 1] 1313 	jrpl interp
      0007D6 CD 07 FE         [ 4] 1314 	call next_token
      0007D9 A1 01            [ 1] 1315 	cp a,#TK_COLON 
      0007DB 27 F1            [ 1] 1316 	jreq interp_loop 
      0007DD A1 00            [ 1] 1317 	cp a,#TK_NONE 
                                   1318 ;	jreq interp 
      0007DF                       1319 1$:
      0007DF A1 05            [ 1] 1320 	cp a,#TK_VAR
      0007E1 26 05            [ 1] 1321 	jrne 2$
      0007E3 CD 13 90         [ 4] 1322 	call let02  
      0007E6 20 E6            [ 2] 1323 	jra interp_loop 
      0007E8                       1324 2$:	
      0007E8 A1 02            [ 1] 1325 	cp a,#TK_ARRAY 
      0007EA 26 08            [ 1] 1326 	jrne 3$
      0007EC CD 11 E6         [ 4] 1327 	call get_array_element
      0007EF CD 13 90         [ 4] 1328 	call let02 
      0007F2 20 DA            [ 2] 1329 	jra interp_loop 
      0007F4                       1330 3$:
      0007F4 A1 06            [ 1] 1331 	cp a,#TK_CMD
      0007F6 26 03            [ 1] 1332 	jrne 4$
      0007F8 FD               [ 4] 1333 	call (x) 
      0007F9 20 D3            [ 2] 1334 	jra interp_loop 
      0007FB                       1335 4$:	
      0007FB CC 07 18         [ 2] 1336 	jp syntax_error 
                                   1337 
                                   1338 ;--------------------------
                                   1339 ; extract next token from
                                   1340 ; token list 
                                   1341 ; basicptr -> base address 
                                   1342 ; in  -> offset in list array 
                                   1343 ; output:
                                   1344 ;   A 		token attribute
                                   1345 ;   X 		token value if there is one
                                   1346 ;----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0007FE                       1347 next_token:
      0007FE 4B 00            [ 1] 1348 	push #0
      000800 C6 00 01         [ 1] 1349 	ld a,in 
      000803 C1 00 02         [ 1] 1350 	cp a,count 
      000806 84               [ 1] 1351 	pop a 
      000807 2A 3E            [ 1] 1352 	jrpl 9$ 
      000809 CE 00 00         [ 2] 1353 	ldw x,in.w 
      00080C CF 00 11         [ 2] 1354 	ldw in.w.saved,x 
      00080F CE 00 03         [ 2] 1355 	ldw x,basicptr 
      000812 72 D6 00 00      [ 4] 1356 	ld a,([in.w],x)
      000816 72 5C 00 01      [ 1] 1357 	inc in 
      00081A A1 02            [ 1] 1358 	cp a,#TK_ARRAY  
      00081C 23 29            [ 2] 1359 	jrule 9$
      00081E A1 03            [ 1] 1360 	cp a,#TK_CHAR
      000820 26 0D            [ 1] 1361 	jrne 1$
      000822 72 D6 00 00      [ 4] 1362 	ld a,([in.w],x)
      000826 72 5C 00 01      [ 1] 1363 	inc in
      00082A 5F               [ 1] 1364 	clrw x 
      00082B 97               [ 1] 1365 	ld xl,a 
      00082C A6 03            [ 1] 1366 	ld a,#TK_CHAR
      00082E 81               [ 4] 1367 	ret 
      00082F A1 0A            [ 1] 1368 1$:	cp a,#TK_QSTR 
      000831 22 14            [ 1] 1369 	jrugt 9$
      000833 25 06            [ 1] 1370 	jrult 2$
      000835 72 BB 00 00      [ 2] 1371 	addw x,in.w 
      000839 20 0C            [ 2] 1372 	jra 9$
      00083B 72 DE 00 00      [ 5] 1373 2$: ldw x,([in.w],x)
      00083F 72 5C 00 01      [ 1] 1374 	inc in 
      000843 72 5C 00 01      [ 1] 1375 	inc in
      000847 81               [ 4] 1376 9$: ret	
                                   1377 
                                   1378 
                                   1379 ;----------------------------------------
                                   1380 ;   DEBUG support functions
                                   1381 ;----------------------------------------
                           000001  1382 .if DEBUG 
                                   1383 ; turn LED on 
      000848                       1384 ledon:
      000848 72 1A 50 0A      [ 1] 1385     bset PC_ODR,#LED2_BIT
      00084C 81               [ 4] 1386     ret 
                                   1387 
                                   1388 ; turn LED off 
      00084D                       1389 ledoff:
      00084D 72 1B 50 0A      [ 1] 1390     bres PC_ODR,#LED2_BIT 
      000851 81               [ 4] 1391     ret 
                                   1392 
                                   1393 ; invert LED status 
      000852                       1394 ledtoggle:
      000852 A6 20            [ 1] 1395     ld a,#LED2_MASK
      000854 C8 50 0A         [ 1] 1396     xor a,PC_ODR
      000857 C7 50 0A         [ 1] 1397     ld PC_ODR,a
      00085A 81               [ 4] 1398     ret 
                                   1399 
      00085B                       1400 left_paren:
      00085B A6 20            [ 1] 1401 	ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00085D CD 01 9E         [ 4] 1402 	call putc
      000860 A6 28            [ 1] 1403 	ld a,#'( 
      000862 CD 01 9E         [ 4] 1404 	call putc 	
      000865 81               [ 4] 1405 	ret 
                                   1406 
                                   1407 ;------------------------------
                                   1408 ; print 8 bit register 
                                   1409 ; input:
                                   1410 ;   X  point to register name 
                                   1411 ;   A  register value to print 
                                   1412 ; output:
                                   1413 ;   none
                                   1414 ;------------------------------- 
      000866                       1415 prt_reg8:
      000866 88               [ 1] 1416 	push a 
      000867 CD 01 B0         [ 4] 1417 	call puts 
      00086A 7B 01            [ 1] 1418 	ld a,(1,sp) 
      00086C C7 00 0A         [ 1] 1419 	ld acc8,a 
      00086F 5F               [ 1] 1420 	clrw x 
      000870 97               [ 1] 1421 	ld xl,a 
      000871 35 10 00 07      [ 1] 1422 	mov base,#16
      000875 CD 09 9D         [ 4] 1423 	call print_int 
      000878 CD 08 5B         [ 4] 1424 	call left_paren 
      00087B 84               [ 1] 1425 	pop a 
      00087C 5F               [ 1] 1426 	clrw x 
      00087D 97               [ 1] 1427 	ld xl,a 
      00087E 35 0A 00 07      [ 1] 1428 	mov base,#10 
      000882 CD 09 9D         [ 4] 1429 	call print_int  
      000885 A6 29            [ 1] 1430 	ld a,#') 
      000887 CD 01 9E         [ 4] 1431 	call putc
      00088A 81               [ 4] 1432 	ret
                                   1433 
                                   1434 ;--------------------------------
                                   1435 ; print 16 bits register 
                                   1436 ; input:
                                   1437 ;   X   point register name 
                                   1438 ;   Y   register value to print 
                                   1439 ; output:
                                   1440 ;  none
                                   1441 ;--------------------------------
      00088B                       1442 prt_reg16: 
      00088B 90 89            [ 2] 1443 	pushw y 
      00088D CD 01 B0         [ 4] 1444 	call puts 
      000890 1E 01            [ 2] 1445 	ldw x,(1,sp) 
      000892 35 10 00 07      [ 1] 1446 	mov base,#16 
      000896 CD 09 9D         [ 4] 1447 	call print_int  
      000899 CD 08 5B         [ 4] 1448 	call left_paren 
      00089C 85               [ 2] 1449 	popw x 
      00089D 35 0A 00 07      [ 1] 1450 	mov base,#10 
      0008A1 CD 09 9D         [ 4] 1451 	call print_int  
      0008A4 A6 29            [ 1] 1452 	ld a,#') 
      0008A6 CD 01 9E         [ 4] 1453 	call putc
      0008A9 81               [ 4] 1454 	ret 
                                   1455 
                                   1456 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1457 ; print registers contents saved on
                                   1458 ; stack by trap interrupt.
                                   1459 ;------------------------------------
      0008AA                       1460 print_registers:
      0008AA AE 08 FD         [ 2] 1461 	ldw x,#STATES
      0008AD CD 01 B0         [ 4] 1462 	call puts
                                   1463 ; print EPC 
      0008B0 AE 09 3A         [ 2] 1464 	ldw x, #REG_EPC
      0008B3 CD 01 B0         [ 4] 1465 	call puts 
      0008B6 7B 0B            [ 1] 1466 	ld a, (11,sp)
      0008B8 C7 00 0A         [ 1] 1467 	ld acc8,a 
      0008BB 7B 0A            [ 1] 1468 	ld a, (10,sp) 
      0008BD C7 00 09         [ 1] 1469 	ld acc16,a 
      0008C0 7B 09            [ 1] 1470 	ld a,(9,sp) 
      0008C2 C7 00 08         [ 1] 1471 	ld acc24,a
      0008C5 5F               [ 1] 1472 	clrw x  
      0008C6 A6 10            [ 1] 1473 	ld a,#16
      0008C8 CD 09 55         [ 4] 1474 	call prti24  
                                   1475 ; print X
      0008CB AE 09 43         [ 2] 1476 	ldw x,#REG_X
      0008CE 16 05            [ 2] 1477 	ldw y,(5,sp)
      0008D0 CD 08 8B         [ 4] 1478 	call prt_reg16  
                                   1479 ; print Y 
      0008D3 AE 09 3F         [ 2] 1480 	ldw x,#REG_Y
      0008D6 16 07            [ 2] 1481 	ldw y, (7,sp)
      0008D8 CD 08 8B         [ 4] 1482 	call prt_reg16  
                                   1483 ; print A 
      0008DB AE 09 47         [ 2] 1484 	ldw x,#REG_A
      0008DE 7B 04            [ 1] 1485 	ld a, (4,sp) 
      0008E0 CD 08 66         [ 4] 1486 	call prt_reg8
                                   1487 ; print CC 
      0008E3 AE 09 4B         [ 2] 1488 	ldw x,#REG_CC 
      0008E6 7B 03            [ 1] 1489 	ld a, (3,sp) 
      0008E8 CD 08 66         [ 4] 1490 	call prt_reg8 
                                   1491 ; print SP 
      0008EB AE 09 50         [ 2] 1492 	ldw x,#REG_SP
      0008EE 90 96            [ 1] 1493 	ldw y,sp 
      0008F0 72 A9 00 0C      [ 2] 1494 	addw y,#12
      0008F4 CD 08 8B         [ 4] 1495 	call prt_reg16  
      0008F7 A6 0A            [ 1] 1496 	ld a,#'\n' 
      0008F9 CD 01 9E         [ 4] 1497 	call putc
      0008FC 81               [ 4] 1498 	ret
                                   1499 
      0008FD 0A 52 65 67 69 73 74  1500 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      00093A 45 50 43 3A 00        1501 REG_EPC: .asciz "EPC:"
      00093F 0A 59 3A 00           1502 REG_Y:   .asciz "\nY:" 
      000943 0A 58 3A 00           1503 REG_X:   .asciz "\nX:"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000947 0A 41 3A 00           1504 REG_A:   .asciz "\nA:" 
      00094B 0A 43 43 3A 00        1505 REG_CC:  .asciz "\nCC:"
      000950 0A 53 50 3A 00        1506 REG_SP:  .asciz "\nSP:"
                                   1507 .endif ; DEBUG 
                                   1508 
                                   1509 ;------------------------------------
                                   1510 ; print integer in acc24 
                                   1511 ; input:
                                   1512 ;	acc24 		integer to print 
                                   1513 ;	A 			numerical base for conversion 
                                   1514 ;               if bit 7 is set add a space at print end.
                                   1515 ;   XL 			field width, 0 -> no fill.
                                   1516 ;  output:
                                   1517 ;    none 
                                   1518 ;------------------------------------
                           000001  1519 	WIDTH = 1
                           000002  1520 	BASE = 2
                           000003  1521 	ADD_SPACE=3 ; add a space after number 
                           000003  1522 	VSIZE = 3
      000955                       1523 prti24:
      000955                       1524 	_vars VSIZE 
      000955 52 03            [ 2]    1     sub sp,#VSIZE 
      000957 0F 03            [ 1] 1525 	clr (ADD_SPACE,sp)
      000959 A5 80            [ 1] 1526 	bcp a,#0x80 
      00095B 27 02            [ 1] 1527 	jreq 0$ 
      00095D 03 03            [ 1] 1528 	cpl (ADD_SPACE,sp)
      00095F A4 1F            [ 1] 1529 0$:	and a,#31 
      000961 6B 02            [ 1] 1530 	ld (BASE,sp),a
      000963 9F               [ 1] 1531 	ld a,xl
      000964 6B 01            [ 1] 1532 	ld (WIDTH,sp),a 
      000966 7B 02            [ 1] 1533 	ld a, (BASE,sp)  
      000968 CD 09 F9         [ 4] 1534     call itoa  ; conversion entier en  .asciz
      00096B 7B 01            [ 1] 1535 1$: ld a,(WIDTH,sp)
      00096D 27 1F            [ 1] 1536 	jreq 4$
      00096F C7 00 0A         [ 1] 1537 	ld acc8,a 
      000972 89               [ 2] 1538 	pushw x 
      000973 CD 02 72         [ 4] 1539 	call strlen 
      000976 9F               [ 1] 1540 	ld a,xl 
      000977 85               [ 2] 1541 	popw x 
      000978 31 00 0A         [ 3] 1542 	exg a,acc8 
      00097B C0 00 0A         [ 1] 1543 	sub a,acc8 
      00097E 2B 0E            [ 1] 1544 	jrmi 4$
      000980 6B 01            [ 1] 1545 	ld (WIDTH,sp),a 
      000982 A6 20            [ 1] 1546 	ld  a,#SPACE
      000984 0D 01            [ 1] 1547 3$: tnz (WIDTH,sp)
      000986 27 06            [ 1] 1548 	jreq 4$
      000988 5A               [ 2] 1549 	decw x 
      000989 F7               [ 1] 1550 	ld (x),a 
      00098A 0A 01            [ 1] 1551 	dec (WIDTH,sp) 
      00098C 20 F6            [ 2] 1552 	jra 3$
      00098E                       1553 4$: 
      00098E CD 01 B0         [ 4] 1554 	call puts 
      000991 0D 03            [ 1] 1555 	tnz (ADD_SPACE,sp)
      000993 27 05            [ 1] 1556 	jreq 5$
      000995 A6 20            [ 1] 1557     ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000997 CD 01 9E         [ 4] 1558 	call putc 
      00099A                       1559 5$: _drop VSIZE 
      00099A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00099C 81               [ 4] 1560     ret	
                                   1561 
                                   1562 ;-----------------------------------
                                   1563 ; print a 16 bit integer 
                                   1564 ; using variable 'base' as conversion
                                   1565 ; format.
                                   1566 ; input:
                                   1567 ;   X       integer to print 
                                   1568 ;   base    conversion base 
                                   1569 ; output:
                                   1570 ;   none 
                                   1571 ;-----------------------------------
                           000001  1572 	SIGN=1
                           000001  1573 	VSIZE=1
      00099D                       1574 print_int: 
      00099D                       1575 	_vars VSIZE 
      00099D 52 01            [ 2]    1     sub sp,#VSIZE 
      00099F 0F 01            [ 1] 1576 	clr (SIGN,sp)
      0009A1 90 AE 17 3F      [ 2] 1577 	ldw y,#pad+PAD_SIZE-1 
      0009A5 90 7F            [ 1] 1578 	clr (y)
      0009A7 C6 00 07         [ 1] 1579 	ld a,base  
      0009AA A1 0A            [ 1] 1580 	cp a,#10 
      0009AC 26 06            [ 1] 1581 	jrne 1$ 
      0009AE 5D               [ 2] 1582 	tnzw x 
      0009AF 2A 03            [ 1] 1583 	jrpl 1$ 
      0009B1 03 01            [ 1] 1584 	cpl (SIGN,sp)
      0009B3 50               [ 2] 1585 	negw x 	 
      0009B4                       1586 1$:	
      0009B4 C6 00 07         [ 1] 1587 	ld a,base 
      0009B7 62               [ 2] 1588 	div x,a 
      0009B8 AB 30            [ 1] 1589 	add a,#'0 
      0009BA A1 3A            [ 1] 1590 	cp a,#'9+1 
      0009BC 2B 02            [ 1] 1591 	jrmi 2$ 
      0009BE AB 07            [ 1] 1592 	add a,#7 
      0009C0 90 5A            [ 2] 1593 2$: decw y 
      0009C2 90 F7            [ 1] 1594 	ld (y),a 
      0009C4 5D               [ 2] 1595 	tnzw x 
      0009C5 26 ED            [ 1] 1596 	jrne 1$ 
      0009C7 A6 10            [ 1] 1597 	ld a,#16 
      0009C9 C1 00 07         [ 1] 1598 	cp a,base 
      0009CC 26 08            [ 1] 1599 	jrne 3$
      0009CE A6 24            [ 1] 1600 	ld a,#'$
      0009D0 90 5A            [ 2] 1601 	decw y  
      0009D2 90 F7            [ 1] 1602 	ld (y),a
      0009D4 20 0A            [ 2] 1603 	jra 9$ 
      0009D6 0D 01            [ 1] 1604 3$: tnz (SIGN,sp)
      0009D8 27 06            [ 1] 1605 	jreq 9$ 
      0009DA A6 2D            [ 1] 1606 	ld a,#'-
      0009DC 90 5A            [ 2] 1607 	decw y  
      0009DE 90 F7            [ 1] 1608 	ld (y),a
      0009E0                       1609 9$:	
      0009E0 93               [ 1] 1610 	ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009E1 1D 17 3F         [ 2] 1611 	subw x,#pad+PAD_SIZE-1 
      0009E4 50               [ 2] 1612 	negw x  
      0009E5                       1613 10$:
      0009E5 90 5A            [ 2] 1614 	decw y 
      0009E7 A6 20            [ 1] 1615 	ld a,#SPACE 
      0009E9 90 F7            [ 1] 1616 	ld (y),a
      0009EB 5C               [ 1] 1617 	incw x 
      0009EC 9F               [ 1] 1618 	ld a,xl 
      0009ED C1 00 25         [ 1] 1619 	cp a,tab_width
      0009F0 2B F3            [ 1] 1620 	jrmi 10$ 
      0009F2                       1621 12$:
      0009F2 93               [ 1] 1622     ldw x,y 
      0009F3 CD 01 B0         [ 4] 1623 	call puts  
      0009F6                       1624 	_drop VSIZE 
      0009F6 5B 01            [ 2]    1     addw sp,#VSIZE 
      0009F8 81               [ 4] 1625 	ret 
                                   1626 
                                   1627 ;------------------------------------
                                   1628 ; convert integer in acc24 to string
                                   1629 ; input:
                                   1630 ;   A	  	base
                                   1631 ;	acc24	integer to convert
                                   1632 ; output:
                                   1633 ;   X  		pointer to string
                                   1634 ;------------------------------------
                           000001  1635 	SIGN=1  ; integer sign 
                           000002  1636 	BASE=2  ; numeric base 
                           000002  1637 	VSIZE=2  ;locals size
      0009F9                       1638 itoa:
      0009F9 52 02            [ 2] 1639 	sub sp,#VSIZE
      0009FB 6B 02            [ 1] 1640 	ld (BASE,sp), a  ; base
      0009FD 0F 01            [ 1] 1641 	clr (SIGN,sp)    ; sign
      0009FF A1 0A            [ 1] 1642 	cp a,#10
      000A01 26 0A            [ 1] 1643 	jrne 1$
                                   1644 	; base 10 string display with negative sign if bit 23==1
      000A03 72 0F 00 08 05   [ 2] 1645 	btjf acc24,#7,1$
      000A08 03 01            [ 1] 1646 	cpl (SIGN,sp)
      000A0A CD 0A 68         [ 4] 1647 	call neg_acc24
      000A0D                       1648 1$:
                                   1649 ; initialize string pointer 
      000A0D AE 17 3F         [ 2] 1650 	ldw x,#pad+PAD_SIZE-1
      000A10 7F               [ 1] 1651 	clr (x)
      000A11                       1652 itoa_loop:
      000A11 7B 02            [ 1] 1653     ld a,(BASE,sp)
      000A13 CD 0A 40         [ 4] 1654     call divu24_8 ; acc24/A 
      000A16 AB 30            [ 1] 1655     add a,#'0  ; remainder of division
      000A18 A1 3A            [ 1] 1656     cp a,#'9+1
      000A1A 2B 02            [ 1] 1657     jrmi 2$
      000A1C AB 07            [ 1] 1658     add a,#7 
      000A1E 5A               [ 2] 1659 2$: decw x
      000A1F F7               [ 1] 1660     ld (x),a
                                   1661 	; if acc24==0 conversion done
      000A20 C6 00 08         [ 1] 1662 	ld a,acc24
      000A23 CA 00 09         [ 1] 1663 	or a,acc16
      000A26 CA 00 0A         [ 1] 1664 	or a,acc8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A29 26 E6            [ 1] 1665     jrne itoa_loop
                                   1666 	;conversion done, next add '$' or '-' as required
      000A2B 7B 02            [ 1] 1667 	ld a,(BASE,sp)
      000A2D A1 10            [ 1] 1668 	cp a,#16
      000A2F 27 08            [ 1] 1669 	jreq 8$
      000A31 7B 01            [ 1] 1670 	ld a,(SIGN,sp)
      000A33 27 08            [ 1] 1671     jreq 10$
      000A35 A6 2D            [ 1] 1672     ld a,#'-
      000A37 20 02            [ 2] 1673 	jra 9$ 
      000A39 A6 24            [ 1] 1674 8$: ld a,#'$ 
      000A3B 5A               [ 2] 1675 9$: decw x
      000A3C F7               [ 1] 1676     ld (x),a
      000A3D                       1677 10$:
      000A3D 5B 02            [ 2] 1678 	addw sp,#VSIZE
      000A3F 81               [ 4] 1679 	ret
                                   1680 
                                   1681 ;-------------------------------------
                                   1682 ; divide uint24_t by uint8_t
                                   1683 ; used to convert uint24_t to string
                                   1684 ; input:
                                   1685 ;	acc24	dividend
                                   1686 ;   A 		divisor
                                   1687 ; output:
                                   1688 ;   acc24	quotient
                                   1689 ;   A		remainder
                                   1690 ;------------------------------------- 
                                   1691 ; offset  on sp of arguments and locals
                           000001  1692 	U8   = 1   ; divisor on stack
                           000001  1693 	VSIZE =1
      000A40                       1694 divu24_8:
      000A40 89               [ 2] 1695 	pushw x ; save x
      000A41 88               [ 1] 1696 	push a 
                                   1697 	; ld dividend UU:MM bytes in X
      000A42 C6 00 08         [ 1] 1698 	ld a, acc24
      000A45 95               [ 1] 1699 	ld xh,a
      000A46 C6 00 09         [ 1] 1700 	ld a,acc24+1
      000A49 97               [ 1] 1701 	ld xl,a
      000A4A 7B 01            [ 1] 1702 	ld a,(U8,SP) ; divisor
      000A4C 62               [ 2] 1703 	div x,a ; UU:MM/U8
      000A4D 88               [ 1] 1704 	push a  ;save remainder
      000A4E 9E               [ 1] 1705 	ld a,xh
      000A4F C7 00 08         [ 1] 1706 	ld acc24,a
      000A52 9F               [ 1] 1707 	ld a,xl
      000A53 C7 00 09         [ 1] 1708 	ld acc24+1,a
      000A56 84               [ 1] 1709 	pop a
      000A57 95               [ 1] 1710 	ld xh,a
      000A58 C6 00 0A         [ 1] 1711 	ld a,acc24+2
      000A5B 97               [ 1] 1712 	ld xl,a
      000A5C 7B 01            [ 1] 1713 	ld a,(U8,sp) ; divisor
      000A5E 62               [ 2] 1714 	div x,a  ; R:LL/U8
      000A5F 6B 01            [ 1] 1715 	ld (U8,sp),a ; save remainder
      000A61 9F               [ 1] 1716 	ld a,xl
      000A62 C7 00 0A         [ 1] 1717 	ld acc24+2,a
      000A65 84               [ 1] 1718 	pop a
      000A66 85               [ 2] 1719 	popw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A67 81               [ 4] 1720 	ret
                                   1721 
                                   1722 ;------------------------------------
                                   1723 ;  two's complement acc24
                                   1724 ;  input:
                                   1725 ;		acc24 variable
                                   1726 ;  output:
                                   1727 ;		acc24 variable
                                   1728 ;-------------------------------------
      000A68                       1729 neg_acc24:
      000A68 72 53 00 0A      [ 1] 1730 	cpl acc24+2
      000A6C 72 53 00 09      [ 1] 1731 	cpl acc24+1
      000A70 72 53 00 08      [ 1] 1732 	cpl acc24
      000A74 A6 01            [ 1] 1733 	ld a,#1
      000A76 CB 00 0A         [ 1] 1734 	add a,acc24+2
      000A79 C7 00 0A         [ 1] 1735 	ld acc24+2,a
      000A7C 4F               [ 1] 1736 	clr a
      000A7D C9 00 09         [ 1] 1737 	adc a,acc24+1
      000A80 C7 00 09         [ 1] 1738 	ld acc24+1,a 
      000A83 4F               [ 1] 1739 	clr a 
      000A84 C9 00 08         [ 1] 1740 	adc a,acc24 
      000A87 C7 00 08         [ 1] 1741 	ld acc24,a 
      000A8A 81               [ 4] 1742 	ret
                                   1743 
                                   1744 
                                   1745 ;------------------------------------
                                   1746 ; read a line of text from terminal
                                   1747 ; input:
                                   1748 ;	none
                                   1749 ; local variable on stack:
                                   1750 ;	LL  line length
                                   1751 ;   RXCHAR last received chaaracte 
                                   1752 ; output:
                                   1753 ;   text in tib  buffer
                                   1754 ;------------------------------------
                                   1755 	; local variables
                           000001  1756 	LL_HB=1
                           000001  1757 	RXCHAR = 1 ; last char received
                           000002  1758 	LL = 2  ; accepted line length
                           000002  1759 	VSIZE=2 
      000A8B                       1760 readln:
      000A8B 5F               [ 1] 1761 	clrw x 
      000A8C 89               [ 2] 1762 	pushw x 
      000A8D 90 AE 16 C8      [ 2] 1763  	ldw y,#tib ; input buffer
      000A91                       1764 readln_loop:
      000A91 CD 01 A7         [ 4] 1765 	call getc
      000A94 6B 01            [ 1] 1766 	ld (RXCHAR,sp),a
      000A96 A1 0D            [ 1] 1767 	cp a,#CR
      000A98 26 03            [ 1] 1768 	jrne 1$
      000A9A CC 0B 06         [ 2] 1769 	jp readln_quit
      000A9D A1 0A            [ 1] 1770 1$:	cp a,#NL
      000A9F 27 65            [ 1] 1771 	jreq readln_quit
      000AA1 A1 08            [ 1] 1772 	cp a,#BSP
      000AA3 27 3D            [ 1] 1773 	jreq del_back
      000AA5 A1 04            [ 1] 1774 	cp a,#CTRL_D
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AA7 27 2A            [ 1] 1775 	jreq del_ln
      000AA9 A1 12            [ 1] 1776 	cp a,#CTRL_R 
      000AAB 27 06            [ 1] 1777 	jreq reprint 
                                   1778 ;	cp a,#'[
                                   1779 ;	jreq ansi_seq
      000AAD                       1780 final_test:
      000AAD A1 20            [ 1] 1781 	cp a,#SPACE
      000AAF 2A 40            [ 1] 1782 	jrpl accept_char
      000AB1 20 DE            [ 2] 1783 	jra readln_loop
      000AB3                       1784 ansi_seq:
                                   1785 ;	call getc
                                   1786 ;	cp a,#'C 
                                   1787 ;	jreq rigth_arrow
                                   1788 ;	cp a,#'D 
                                   1789 ;	jreq left_arrow 
                                   1790 ;	jra final_test
      000AB3                       1791 right_arrow:
                                   1792 ;	ld a,#BSP 
                                   1793 ;	call putc 
                                   1794 ;	jra realn_loop 
      000AB3                       1795 left_arrow:
                                   1796 
                                   1797 ;	jra readln_loop
      000AB3                       1798 reprint: 
      000AB3 0D 02            [ 1] 1799 	tnz (LL,sp)
      000AB5 26 DA            [ 1] 1800 	jrne readln_loop
      000AB7 AE 16 C8         [ 2] 1801 	ldw x,#tib 
      000ABA CD 02 72         [ 4] 1802 	call strlen 
      000ABD 90 AE 16 C8      [ 2] 1803 	ldw y,#tib 
      000AC1 9F               [ 1] 1804 	ld a,xl
      000AC2 27 CD            [ 1] 1805 	jreq readln_loop
      000AC4 6B 02            [ 1] 1806 	ld (LL,sp),a 
      000AC6 AE 16 C8         [ 2] 1807 	ldw x,#tib 
      000AC9 CD 01 B0         [ 4] 1808 	call puts
      000ACC 0F 01            [ 1] 1809 	clr (LL_HB,sp)
      000ACE 72 F9 01         [ 2] 1810 	addw y,(LL_HB,sp)
      000AD1 20 BE            [ 2] 1811 	jra readln_loop 
      000AD3                       1812 del_ln:
      000AD3 7B 02            [ 1] 1813 	ld a,(LL,sp)
      000AD5 CD 01 CA         [ 4] 1814 	call delete
      000AD8 90 AE 16 C8      [ 2] 1815 	ldw y,#tib
      000ADC 90 7F            [ 1] 1816 	clr (y)
      000ADE 0F 02            [ 1] 1817 	clr (LL,sp)
      000AE0 20 AF            [ 2] 1818 	jra readln_loop
      000AE2                       1819 del_back:
      000AE2 0D 02            [ 1] 1820     tnz (LL,sp)
      000AE4 27 AB            [ 1] 1821     jreq readln_loop
      000AE6 0A 02            [ 1] 1822     dec (LL,sp)
      000AE8 90 5A            [ 2] 1823     decw y
      000AEA 90 7F            [ 1] 1824     clr  (y)
      000AEC CD 01 BA         [ 4] 1825     call bksp 
      000AEF 20 A0            [ 2] 1826     jra readln_loop	
      000AF1                       1827 accept_char:
      000AF1 A6 4F            [ 1] 1828 	ld a,#TIB_SIZE-1
      000AF3 11 02            [ 1] 1829 	cp a, (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AF5 27 9A            [ 1] 1830 	jreq readln_loop
      000AF7 7B 01            [ 1] 1831 	ld a,(RXCHAR,sp)
      000AF9 90 F7            [ 1] 1832 	ld (y),a
      000AFB 0C 02            [ 1] 1833 	inc (LL,sp)
      000AFD 90 5C            [ 1] 1834 	incw y
      000AFF 90 7F            [ 1] 1835 	clr (y)
      000B01 CD 01 9E         [ 4] 1836 	call putc 
      000B04 20 8B            [ 2] 1837 	jra readln_loop
      000B06                       1838 readln_quit:
      000B06 90 7F            [ 1] 1839 	clr (y)
      000B08 7B 02            [ 1] 1840 	ld a,(LL,sp)
      000B0A C7 00 02         [ 1] 1841 	ld count,a 
      000B0D                       1842 	_drop VSIZE 
      000B0D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B0F A6 0D            [ 1] 1843 	ld a,#CR
      000B11 CD 01 9E         [ 4] 1844 	call putc
      000B14 81               [ 4] 1845 	ret
                                   1846 
                           000001  1847 .if DEBUG 	
                                   1848 ;----------------------------
                                   1849 ; command interface
                                   1850 ; only 3 commands:
                                   1851 ;  'q' to resume application
                                   1852 ;  'p [addr]' to print memory values 
                                   1853 ;  's addr' to print string 
                                   1854 ;----------------------------
                                   1855 ;local variable 
                           000001  1856 	PSIZE=1
                           000001  1857 	VSIZE=1 
      000B15                       1858 cmd_itf:
      000B15 52 01            [ 2] 1859 	sub sp,#VSIZE 
      000B17 72 5F 00 13      [ 1] 1860 	clr farptr 
      000B1B 72 5F 00 14      [ 1] 1861 	clr farptr+1 
      000B1F 72 5F 00 15      [ 1] 1862 	clr farptr+2  
      000B23                       1863 repl:
      000B23 A6 0D            [ 1] 1864 	ld a,#CR 
      000B25 CD 01 9E         [ 4] 1865 	call putc 
      000B28 A6 3F            [ 1] 1866 	ld a,#'? 
      000B2A CD 01 9E         [ 4] 1867 	call putc
      000B2D 72 5F 00 00      [ 1] 1868 	clr in.w 
      000B31 72 5F 00 01      [ 1] 1869 	clr in 
      000B35 CD 0A 8B         [ 4] 1870 	call readln
      000B38 90 AE 16 C8      [ 2] 1871 	ldw y,#tib  
      000B3C 90 F6            [ 1] 1872 	ld a,(y)
      000B3E 27 E3            [ 1] 1873 	jreq repl  
      000B40 72 5C 00 01      [ 1] 1874 	inc in 
      000B44 CD 0E C3         [ 4] 1875 	call to_upper 
      000B47 A1 51            [ 1] 1876 	cp a,#'Q 
      000B49 26 17            [ 1] 1877 	jrne test_p
      000B4B                       1878 repl_exit:
      000B4B 72 5F 16 C8      [ 1] 1879 	clr tib 
      000B4F 72 5F 00 02      [ 1] 1880 	clr count 
      000B53 72 5F 00 01      [ 1] 1881 	clr in 
      000B57                       1882 	_drop #VSIZE 	
      000B57 5B 01            [ 2]    1     addw sp,##VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B59 81               [ 4] 1883 	ret  
      000B5A                       1884 invalid:
      000B5A AE 0B D8         [ 2] 1885 	ldw x,#invalid_cmd 
      000B5D CD 01 B0         [ 4] 1886 	call puts 
      000B60 20 C1            [ 2] 1887 	jra repl 
      000B62                       1888 test_p:	
      000B62 A1 50            [ 1] 1889     cp a,#'P 
      000B64 27 11            [ 1] 1890 	jreq mem_peek
      000B66 A1 53            [ 1] 1891     cp a,#'S 
      000B68 26 F0            [ 1] 1892 	jrne invalid 
      000B6A                       1893 print_string:	
      000B6A CD 0D 04         [ 4] 1894 	call get_token
      000B6D A1 04            [ 1] 1895 	cp a,#TK_INTGR 
      000B6F 26 E9            [ 1] 1896 	jrne invalid 
      000B71 CD 01 B0         [ 4] 1897 	call puts
      000B74 CC 0B 23         [ 2] 1898 	jp repl 	
      000B77                       1899 mem_peek:
      000B77 A6 20            [ 1] 1900 	ld a,#SPACE 
      000B79 CD 0F 7B         [ 4] 1901 	call skip  	 
      000B7C 72 B9 00 00      [ 2] 1902 	addw y,in.w 
      000B80 AE 17 18         [ 2] 1903 	ldw x,#pad 
      000B83 CD 02 90         [ 4] 1904 	call strcpy
      000B86 CD 0E CF         [ 4] 1905 	call atoi24 	
      000B89 C6 00 08         [ 1] 1906 	ld a, acc24 
      000B8C CA 00 09         [ 1] 1907 	or a,acc16 
      000B8F CA 00 0A         [ 1] 1908 	or a,acc8 
      000B92 26 02            [ 1] 1909 	jrne 1$ 
      000B94 20 0C            [ 2] 1910 	jra peek_byte  
      000B96 CE 00 08         [ 2] 1911 1$:	ldw x,acc24 
      000B99 CF 00 13         [ 2] 1912 	ldw farptr,x 
      000B9C C6 00 0A         [ 1] 1913 	ld a,acc8 
      000B9F C7 00 15         [ 1] 1914 	ld farptr+2,a 
      000BA2                       1915 peek_byte:
      000BA2 CD 0B E7         [ 4] 1916 	call print_farptr 
      000BA5 A6 08            [ 1] 1917 	ld a,#8 
      000BA7 6B 01            [ 1] 1918 	ld (PSIZE,sp),a 
      000BA9 5F               [ 1] 1919 	clrw x 
      000BAA CD 0C 02         [ 4] 1920 1$:	call fetchc  
      000BAD 89               [ 2] 1921 	pushw x 
      000BAE C7 00 0A         [ 1] 1922 	ld acc8,a 
      000BB1 5F               [ 1] 1923 	clrw x 
      000BB2 CF 00 08         [ 2] 1924 	ldw acc24,x 
      000BB5 A6 90            [ 1] 1925 	ld a,#16+128
      000BB7 CD 09 55         [ 4] 1926 	call prti24
      000BBA 85               [ 2] 1927 	popw x 
      000BBB 0A 01            [ 1] 1928 	dec (PSIZE,sp)
      000BBD 26 EB            [ 1] 1929 	jrne 1$ 
      000BBF A6 08            [ 1] 1930 	ld a,#8 
      000BC1 CB 00 15         [ 1] 1931 	add a,farptr+2 
      000BC4 C7 00 15         [ 1] 1932 	ld farptr+2,a
      000BC7 4F               [ 1] 1933 	clr a 
      000BC8 C9 00 14         [ 1] 1934 	adc a,farptr+1 
      000BCB C7 00 14         [ 1] 1935 	ld farptr+1,a 
      000BCE 4F               [ 1] 1936 	clr a 
      000BCF C9 00 13         [ 1] 1937 	adc a,farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BD2 C7 00 13         [ 1] 1938 	ld farptr,a 
      000BD5 CC 0B 23         [ 2] 1939 	jp repl  
                                   1940 
      000BD8 6E 6F 74 20 61 20 63  1941 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1942 
                                   1943 ;----------------------------
                                   1944 ; display farptr address
                                   1945 ;----------------------------
      000BE7                       1946 print_farptr:
      000BE7 C6 00 15         [ 1] 1947 	ld a ,farptr+2 
      000BEA C7 00 0A         [ 1] 1948 	ld acc8,a 
      000BED CE 00 13         [ 2] 1949 	ldw x,farptr 
      000BF0 CF 00 08         [ 2] 1950 	ldw acc24,x 
      000BF3 5F               [ 1] 1951 	clrw x 
      000BF4 A6 10            [ 1] 1952 	ld a,#16 
      000BF6 CD 09 55         [ 4] 1953 	call prti24
      000BF9 A6 20            [ 1] 1954 	ld a,#SPACE 
      000BFB CD 01 9E         [ 4] 1955 	call putc 
      000BFE CD 01 9E         [ 4] 1956 	call putc 
      000C01 81               [ 4] 1957 	ret
                                   1958 
                                   1959 ;------------------------------------
                                   1960 ; get byte at address farptr[X]
                                   1961 ; input:
                                   1962 ;	 farptr   address to peek
                                   1963 ;    X		  farptr index 	
                                   1964 ; output:
                                   1965 ;	 A 		  byte from memory  
                                   1966 ;    x		  incremented by 1
                                   1967 ;------------------------------------
      000C02                       1968 fetchc: ; @C
      000C02 92 AF 00 13      [ 5] 1969 	ldf a,([farptr],x)
      000C06 5C               [ 1] 1970 	incw x
      000C07 81               [ 4] 1971 	ret
                                   1972 
                                   1973 
                                   1974 ;------------------------------------
                                   1975 ; expect a number from command line 
                                   1976 ; next argument
                                   1977 ;  input:
                                   1978 ;	  none
                                   1979 ;  output:
                                   1980 ;    acc24   int24_t 
                                   1981 ;------------------------------------
      000C08                       1982 number::
      000C08 CD 0D 04         [ 4] 1983 	call get_token
      000C0B CD 0E CF         [ 4] 1984 	call atoi24
      000C0E 81               [ 4] 1985 	ret
                                   1986 .endif ; DEBUG 
                                   1987 
                                   1988 ;------------------------------------
                                   1989 ; parse quoted string 
                                   1990 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   1991 ;   Y 	pointer to tib 
                                   1992 ;   X   pointer to pad
                                   1993 ; output:
                                   1994 ;	pad   parsed string
                                   1995 ;   TOS  char* to pad  
                                   1996 ;------------------------------------
                           000001  1997 	PREV = 1
                           000002  1998 	CURR =2 
                           000002  1999 	VSIZE=2 
      000C0F                       2000 parse_quote: ; { -- addr }
      000C0F                       2001 	_vars VSIZE 
      000C0F 52 02            [ 2]    1     sub sp,#VSIZE 
      000C11 4F               [ 1] 2002 	clr a
      000C12 6B 01            [ 1] 2003 1$:	ld (PREV,sp),a 
      000C14 72 5C 00 01      [ 1] 2004 2$:	inc in
      000C18 91 D6 00         [ 4] 2005 	ld a,([in.w],y)
      000C1B 27 24            [ 1] 2006 	jreq 6$
      000C1D 6B 02            [ 1] 2007 	ld (CURR,sp),a 
      000C1F A6 5C            [ 1] 2008 	ld a,#'\
      000C21 11 01            [ 1] 2009 	cp a, (PREV,sp)
      000C23 26 0A            [ 1] 2010 	jrne 3$
      000C25 0F 01            [ 1] 2011 	clr (PREV,sp)
      000C27 7B 02            [ 1] 2012 	ld a,(CURR,sp)
      000C29 AD 1F            [ 4] 2013 	callr convert_escape
      000C2B F7               [ 1] 2014 	ld (x),a 
      000C2C 5C               [ 1] 2015 	incw x 
      000C2D 20 E5            [ 2] 2016 	jra 2$
      000C2F                       2017 3$:
      000C2F 7B 02            [ 1] 2018 	ld a,(CURR,sp)
      000C31 A1 5C            [ 1] 2019 	cp a,#'\'
      000C33 27 DD            [ 1] 2020 	jreq 1$
      000C35 A1 22            [ 1] 2021 	cp a,#'"
      000C37 27 04            [ 1] 2022 	jreq 5$ 
      000C39 F7               [ 1] 2023 	ld (x),a 
      000C3A 5C               [ 1] 2024 	incw x 
      000C3B 20 D7            [ 2] 2025 	jra 2$
      000C3D 72 5C 00 01      [ 1] 2026 5$:	inc in 
      000C41 7F               [ 1] 2027 6$: clr (x)
      000C42 AE 17 18         [ 2] 2028 	ldw x,#pad 
      000C45                       2029 	_drop VSIZE
      000C45 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C47 A6 0A            [ 1] 2030 	ld a,#TK_QSTR  
      000C49 81               [ 4] 2031 	ret 
                                   2032 
                                   2033 ;---------------------------------------
                                   2034 ; called by parse_quote
                                   2035 ; subtitute escaped character 
                                   2036 ; by their ASCII value .
                                   2037 ; input:
                                   2038 ;   A  character following '\'
                                   2039 ; output:
                                   2040 ;   A  substitued char or same if not valid.
                                   2041 ;---------------------------------------
      000C4A                       2042 convert_escape:
      000C4A 89               [ 2] 2043 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C4B AE 0C 5F         [ 2] 2044 	ldw x,#escaped 
      000C4E F1               [ 1] 2045 1$:	cp a,(x)
      000C4F 27 06            [ 1] 2046 	jreq 2$
      000C51 7D               [ 1] 2047 	tnz (x)
      000C52 27 09            [ 1] 2048 	jreq 3$
      000C54 5C               [ 1] 2049 	incw x 
      000C55 20 F7            [ 2] 2050 	jra 1$
      000C57 1D 0C 5F         [ 2] 2051 2$: subw x,#escaped 
      000C5A 9F               [ 1] 2052 	ld a,xl 
      000C5B AB 07            [ 1] 2053 	add a,#7
      000C5D 85               [ 2] 2054 3$:	popw x 
      000C5E 81               [ 4] 2055 	ret 
                                   2056 
      000C5F 61 62 74 6E 76 66 72  2057 escaped: .asciz "abtnvfr"
             00
                                   2058 
                                   2059 ;-------------------------
                                   2060 ; integer parser 
                                   2061 ; input:
                                   2062 ;   X 		point to pad 
                                   2063 ;   Y 		point to tib 
                                   2064 ;   A 	    first digit|'$' 
                                   2065 ; output:  
                                   2066 ;   pad     number string 
                                   2067 ;   X 		integer 
                                   2068 ;   A 		TK_INTGR
                                   2069 ;-------------------------
                           000001  2070 	BASE=1
                           000002  2071 	TCHAR=2 
                           000002  2072 	VSIZE=2 
      000C67                       2073 parse_integer: ; { -- n }
      000C67 4B 00            [ 1] 2074 	push #0 ; TCHAR 
      000C69 A1 24            [ 1] 2075 	cp a,#'$
      000C6B 27 04            [ 1] 2076 	jreq 1$ 
      000C6D 4B 0A            [ 1] 2077 	push #10 ; BASE=10 
      000C6F 20 02            [ 2] 2078 	jra 2$ 
      000C71 4B 10            [ 1] 2079 1$: push #16  ; BASE=16
      000C73 F7               [ 1] 2080 2$:	ld (x),a 
      000C74 5C               [ 1] 2081 	incw x 
      000C75 72 5C 00 01      [ 1] 2082 	inc in 
      000C79 91 D6 00         [ 4] 2083 	ld a,([in.w],y)
      000C7C CD 0E C3         [ 4] 2084 	call to_upper 
      000C7F 6B 02            [ 1] 2085 	ld (TCHAR,sp),a 
      000C81 CD 0E BA         [ 4] 2086 	call is_digit 
      000C84 25 ED            [ 1] 2087 	jrc 2$
      000C86 A6 10            [ 1] 2088 	ld a,#16 
      000C88 11 01            [ 1] 2089 	cp a,(BASE,sp)
      000C8A 26 0A            [ 1] 2090 	jrne 3$ 
      000C8C 7B 02            [ 1] 2091 	ld a,(TCHAR,sp)
      000C8E A1 41            [ 1] 2092 	cp a,#'A 
      000C90 2B 04            [ 1] 2093 	jrmi 3$ 
      000C92 A1 47            [ 1] 2094 	cp a,#'G 
      000C94 2B DD            [ 1] 2095 	jrmi 2$ 
      000C96 7F               [ 1] 2096 3$:	clr (x)
      000C97 CD 0E CF         [ 4] 2097 	call atoi24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C9A CE 00 09         [ 2] 2098 	ldw x,acc16 
      000C9D A6 04            [ 1] 2099 	ld a,#TK_INTGR
      000C9F                       2100 	_drop VSIZE  
      000C9F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CA1 81               [ 4] 2101 	ret 	
                                   2102 
                                   2103 ;-------------------------
                                   2104 ; binary integer parser 
                                   2105 ; input:
                                   2106 ;   X 		point to pad 
                                   2107 ;   Y 		point to tib 
                                   2108 ;   A 	    '%' 
                                   2109 ; output:  
                                   2110 ;   pad     number string 
                                   2111 ;   X 		integer 
                                   2112 ;   A 		TK_INTGR
                                   2113 ;   TOS     integer 
                                   2114 ;-------------------------
                           000001  2115 	BINARY=1
                           000002  2116 	VSIZE=2
      000CA2                       2117 parse_binary: ; { -- n }
      000CA2 4B 00            [ 1] 2118 	push #0
      000CA4 4B 00            [ 1] 2119 	push #0
      000CA6 F7               [ 1] 2120 1$: ld (x),a 
      000CA7 5C               [ 1] 2121 	incw x 
      000CA8 72 5C 00 01      [ 1] 2122 	inc in 
      000CAC 91 D6 00         [ 4] 2123 	ld a,([in.w],y)
      000CAF A1 30            [ 1] 2124 	cp a,#'0 
      000CB1 27 06            [ 1] 2125 	jreq 2$
      000CB3 A1 31            [ 1] 2126 	cp a,#'1 
      000CB5 27 02            [ 1] 2127 	jreq 2$ 
      000CB7 20 09            [ 2] 2128 	jra bin_exit 
      000CB9 A0 30            [ 1] 2129 2$: sub a,#'0	
      000CBB 46               [ 1] 2130 	rrc a 
      000CBC 09 02            [ 1] 2131 	rlc (BINARY+1,sp)
      000CBE 09 01            [ 1] 2132 	rlc (BINARY,sp)
      000CC0 20 E4            [ 2] 2133 	jra 1$  
      000CC2                       2134 bin_exit:
      000CC2 7F               [ 1] 2135 	clr (x)
      000CC3 1E 01            [ 2] 2136 	ldw x,(BINARY,sp)
      000CC5 A6 04            [ 1] 2137 	ld a,#TK_INTGR 	
      000CC7                       2138 	_drop VSIZE 
      000CC7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CC9 81               [ 4] 2139 	ret
                                   2140 
                                   2141 ;---------------------------
                                   2142 ;  token begin with a letter,
                                   2143 ;  is keyword or variable. 	
                                   2144 ; input:
                                   2145 ;   X 		point to pad 
                                   2146 ;   Y 		point to text
                                   2147 ;   A 	    first letter  
                                   2148 ; output:
                                   2149 ;   X		exec_addr|var_addr 
                                   2150 ;   A 		TK_CMD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2151 ;   pad 	keyword|var_name  
                                   2152 ;   TOS     exec_addr|var_addr 
                                   2153 ;--------------------------  
      000CCA                       2154 parse_keyword: ; { -- exec_addr|var_addr}
      000CCA CD 0E C3         [ 4] 2155 	call to_upper 
      000CCD F7               [ 1] 2156 	ld (x),a 
      000CCE 5C               [ 1] 2157 	incw x 
      000CCF 72 5C 00 01      [ 1] 2158 	inc in 
      000CD3 91 D6 00         [ 4] 2159 	ld a,([in.w],y)
      000CD6 CD 05 04         [ 4] 2160 	call is_alpha 
      000CD9 25 EF            [ 1] 2161 	jrc parse_keyword 
      000CDB 7F               [ 1] 2162 1$: clr (x)
      000CDC 72 5D 17 19      [ 1] 2163 	tnz pad+1 
      000CE0 26 15            [ 1] 2164 	jrne 2$
                                   2165 ; one letter variable name 
      000CE2 C6 17 18         [ 1] 2166 	ld a,pad 
      000CE5 A0 41            [ 1] 2167 	sub a,#'A 
      000CE7 48               [ 1] 2168 	sll a 
      000CE8 88               [ 1] 2169 	push a 
      000CE9 4B 00            [ 1] 2170 	push #0
      000CEB AE 00 26         [ 2] 2171 	ldw x,#vars 
      000CEE 72 FB 01         [ 2] 2172 	addw x,(1,sp) ; X=var address 
      000CF1                       2173 	_drop 2 
      000CF1 5B 02            [ 2]    1     addw sp,#2 
      000CF3 A6 05            [ 1] 2174 	ld a,#TK_VAR 
      000CF5 20 0C            [ 2] 2175 	jra 4$ 
      000CF7                       2176 2$: ; check for keyword, otherwise syntax error.
      000CF7                       2177 	_ldx_dict kword_dict
      000CF7 AE 21 7E         [ 2]    1     ldw x,#kword_dict+2
      000CFA CD 11 60         [ 4] 2178 	call search_dict
      000CFD 4D               [ 1] 2179 	tnz a
      000CFE 26 03            [ 1] 2180 	jrne 4$ 
      000D00 CC 07 18         [ 2] 2181 	jp syntax_error
      000D03 81               [ 4] 2182 4$:	ret  	
                                   2183 
                                   2184 
                                   2185 ;------------------------------------
                                   2186 ; Command line tokenizer
                                   2187 ; scan text for next token
                                   2188 ; move token in 'pad'
                                   2189 ; input: 
      000D04                       2190 	none: 
                                   2191 ; use:
                                   2192 ;	Y   pointer to text
                                   2193 ;   X	pointer to pad 
                                   2194 ;   in.w   index in text buffer
                                   2195 ; output:
                                   2196 ;   A       token attribute 
                                   2197 ;   pad 	token as .asciz
                                   2198 ;   X 		token value   
                                   2199 ;------------------------------------
                                   2200 	; use to check special character 
                                   2201 	.macro _case c t  
                                   2202 	ld a,#c 
                                   2203 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2204 	jrne t
                                   2205 	.endm 
                                   2206 
                           000001  2207 	TCHAR=1
                           000002  2208 	ATTRIB=2 
                           000002  2209 	VSIZE=2
      000D04                       2210 get_token: 
      000D04 90 AE 16 C8      [ 2] 2211 	ldw y,#tib    	
      000D08 C6 00 01         [ 1] 2212 	ld a,in 
      000D0B C1 00 02         [ 1] 2213 	cp a,count 
      000D0E 2B 03            [ 1] 2214 	jrmi 1$
      000D10 A6 00            [ 1] 2215 	ld a,#TK_NONE 
      000D12 81               [ 4] 2216 	ret 
      000D13                       2217 1$:	
      000D13                       2218 	_vars VSIZE
      000D13 52 02            [ 2]    1     sub sp,#VSIZE 
      000D15 AE 17 18         [ 2] 2219 	ldw x, #pad
      000D18 A6 20            [ 1] 2220 	ld a,#SPACE
      000D1A CD 0F 7B         [ 4] 2221 	call skip
      000D1D CF 00 11         [ 2] 2222 	ldw in.w.saved,x 
      000D20 91 D6 00         [ 4] 2223 	ld a,([in.w],y)
      000D23 26 07            [ 1] 2224 	jrne str_tst
      000D25 72 5F 17 18      [ 1] 2225 	clr pad 
      000D29 CC 0E B7         [ 2] 2226 	jp token_exit ; end of line 
                                   2227 
      000D2C                       2228 str_tst: ; check for quoted string  	
      000D2C CD 0E C3         [ 4] 2229 	call to_upper 
      000D2F 6B 01            [ 1] 2230 	ld (TCHAR,sp),a 
      000D31                       2231 	_case '"' nbr_tst
      000D31 A6 22            [ 1]    1 	ld a,#'"' 
      000D33 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D35 26 06            [ 1]    3 	jrne nbr_tst
      000D37 CD 0C 0F         [ 4] 2232 	call parse_quote
      000D3A CC 0E B7         [ 2] 2233 	jp token_exit
      000D3D                       2234 nbr_tst: ; check for number 
      000D3D A6 24            [ 1] 2235 	ld a,#'$'
      000D3F 11 01            [ 1] 2236 	cp a,(TCHAR,sp) 
      000D41 27 13            [ 1] 2237 	jreq 1$
      000D43 A6 26            [ 1] 2238 	ld a,#'&
      000D45 11 01            [ 1] 2239 	cp a,(TCHAR,sp)
      000D47 26 06            [ 1] 2240 	jrne 0$
      000D49 CD 0C A2         [ 4] 2241 	call parse_binary ; expect binary integer 
      000D4C CC 0E B7         [ 2] 2242 	jp token_exit 
      000D4F 7B 01            [ 1] 2243 0$:	ld a,(TCHAR,sp)
      000D51 CD 0E BA         [ 4] 2244 	call is_digit
      000D54 24 06            [ 1] 2245 	jrnc 3$
      000D56 CD 0C 67         [ 4] 2246 1$:	call parse_integer 
      000D59 CC 0E B7         [ 2] 2247 	jp token_exit 
      000D5C                       2248 3$: 
      000D5C                       2249 	_case '(' bkslsh_tst 
      000D5C A6 28            [ 1]    1 	ld a,#'(' 
      000D5E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D60 26 05            [ 1]    3 	jrne bkslsh_tst
      000D62 A6 0B            [ 1] 2250 	ld a,#TK_LPAREN
      000D64 CC 0E A7         [ 2] 2251 	jp token_char   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D67                       2252 bkslsh_tst:
      000D67                       2253 	_case '\',rparnt_tst
      000D67 A6 5C            [ 1]    1 	ld a,#'\' 
      000D69 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D6B 26 18            [ 1]    3 	jrne rparnt_tst
      000D6D 7B 01            [ 1] 2254 	ld a,(TCHAR,sp)
      000D6F F7               [ 1] 2255 	ld (x),a 
      000D70 5C               [ 1] 2256 	incw x 
      000D71 72 5C 00 01      [ 1] 2257 	inc in 
      000D75 91 D6 00         [ 4] 2258 	ld a,([in.w],y)
      000D78 F7               [ 1] 2259 	ld (x),a 
      000D79 5C               [ 1] 2260 	incw x 
      000D7A 72 5C 00 01      [ 1] 2261 	inc in  
      000D7E 7F               [ 1] 2262 	clr (x) 
      000D7F 97               [ 1] 2263 	ld xl,a 
      000D80 A6 03            [ 1] 2264 	ld a,#TK_CHAR 
      000D82 CC 0E B7         [ 2] 2265 	jp token_exit 
      000D85                       2266 rparnt_tst:		
      000D85                       2267 	_case ')' colon_tst 
      000D85 A6 29            [ 1]    1 	ld a,#')' 
      000D87 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D89 26 05            [ 1]    3 	jrne colon_tst
      000D8B A6 0C            [ 1] 2268 	ld a,#TK_RPAREN 
      000D8D CC 0E A7         [ 2] 2269 	jp token_char 
      000D90                       2270 colon_tst:
      000D90                       2271 	_case ':' comma_tst 
      000D90 A6 3A            [ 1]    1 	ld a,#':' 
      000D92 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D94 26 05            [ 1]    3 	jrne comma_tst
      000D96 A6 01            [ 1] 2272 	ld a,#TK_COLON 
      000D98 CC 0E A7         [ 2] 2273 	jp token_char 
      000D9B                       2274 comma_tst:
      000D9B                       2275 	_case COMMA sharp_tst 
      000D9B A6 2C            [ 1]    1 	ld a,#COMMA 
      000D9D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9F 26 05            [ 1]    3 	jrne sharp_tst
      000DA1 A6 0D            [ 1] 2276 	ld a,#TK_COMMA
      000DA3 CC 0E A7         [ 2] 2277 	jp token_char
      000DA6                       2278 sharp_tst:
      000DA6                       2279 	_case SHARP dash_tst 
      000DA6 A6 23            [ 1]    1 	ld a,#SHARP 
      000DA8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DAA 26 05            [ 1]    3 	jrne dash_tst
      000DAC A6 0E            [ 1] 2280 	ld a,#TK_SHARP
      000DAE CC 0E A7         [ 2] 2281 	jp token_char  	 	 
      000DB1                       2282 dash_tst: 	
      000DB1                       2283 	_case '-' at_tst 
      000DB1 A6 2D            [ 1]    1 	ld a,#'-' 
      000DB3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DB5 26 05            [ 1]    3 	jrne at_tst
      000DB7 A6 11            [ 1] 2284 	ld a,#TK_MINUS  
      000DB9 CC 0E A7         [ 2] 2285 	jp token_char 
      000DBC                       2286 at_tst:
      000DBC                       2287 	_case '@' qmark_tst 
      000DBC A6 40            [ 1]    1 	ld a,#'@' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DBE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DC0 26 05            [ 1]    3 	jrne qmark_tst
      000DC2 A6 02            [ 1] 2288 	ld a,#TK_ARRAY 
      000DC4 CC 0E A7         [ 2] 2289 	jp token_char
      000DC7                       2290 qmark_tst:
      000DC7                       2291 	_case '?' tick_tst 
      000DC7 A6 3F            [ 1]    1 	ld a,#'?' 
      000DC9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DCB 26 11            [ 1]    3 	jrne tick_tst
      000DCD 7B 01            [ 1] 2292 	ld a,(TCHAR,sp)
      000DCF F7               [ 1] 2293 	ld (x),a 
      000DD0 5C               [ 1] 2294 	incw x 
      000DD1 7F               [ 1] 2295 	clr (x)
      000DD2 72 5C 00 01      [ 1] 2296 	inc in 
      000DD6 A6 06            [ 1] 2297 	ld a,#TK_CMD 
      000DD8 AE 15 F2         [ 2] 2298 	ldw x,#print 
      000DDB CC 0E B7         [ 2] 2299 	jp token_exit
      000DDE                       2300 tick_tst: ; ignore comment 
      000DDE                       2301 	_case TICK plus_tst 
      000DDE A6 27            [ 1]    1 	ld a,#TICK 
      000DE0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE2 26 0C            [ 1]    3 	jrne plus_tst
      000DE4 72 5C 00 01      [ 1] 2302 	inc in 
      000DE8 A6 06            [ 1] 2303 	ld a,#TK_CMD 
      000DEA AE 17 01         [ 2] 2304 	ldw x,#rem 
      000DED CC 0E B7         [ 2] 2305 	jp token_exit 
      000DF0                       2306 plus_tst:
      000DF0                       2307 	_case '+' star_tst 
      000DF0 A6 2B            [ 1]    1 	ld a,#'+' 
      000DF2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF4 26 05            [ 1]    3 	jrne star_tst
      000DF6 A6 10            [ 1] 2308 	ld a,#TK_PLUS  
      000DF8 CC 0E A7         [ 2] 2309 	jp token_char 
      000DFB                       2310 star_tst:
      000DFB                       2311 	_case '*' slash_tst 
      000DFB A6 2A            [ 1]    1 	ld a,#'*' 
      000DFD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFF 26 05            [ 1]    3 	jrne slash_tst
      000E01 A6 20            [ 1] 2312 	ld a,#TK_MULT 
      000E03 CC 0E A7         [ 2] 2313 	jp token_char 
      000E06                       2314 slash_tst: 
      000E06                       2315 	_case '/' prcnt_tst 
      000E06 A6 2F            [ 1]    1 	ld a,#'/' 
      000E08 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E0A 26 05            [ 1]    3 	jrne prcnt_tst
      000E0C A6 21            [ 1] 2316 	ld a,#TK_DIV 
      000E0E CC 0E A7         [ 2] 2317 	jp token_char 
      000E11                       2318 prcnt_tst:
      000E11                       2319 	_case '%' eql_tst 
      000E11 A6 25            [ 1]    1 	ld a,#'%' 
      000E13 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E15 26 05            [ 1]    3 	jrne eql_tst
      000E17 A6 22            [ 1] 2320 	ld a,#TK_MOD
      000E19 CC 0E A7         [ 2] 2321 	jp token_char  
                                   2322 ; 1 or 2 character tokens 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E1C                       2323 eql_tst:
      000E1C                       2324 	_case '=' gt_tst 		
      000E1C A6 3D            [ 1]    1 	ld a,#'=' 
      000E1E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E20 26 05            [ 1]    3 	jrne gt_tst
      000E22 A6 32            [ 1] 2325 	ld a,#TK_EQUAL
      000E24 CC 0E A7         [ 2] 2326 	jp token_char 
      000E27                       2327 gt_tst:
      000E27                       2328 	_case '>' lt_tst 
      000E27 A6 3E            [ 1]    1 	ld a,#'>' 
      000E29 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E2B 26 33            [ 1]    3 	jrne lt_tst
      000E2D A6 31            [ 1] 2329 	ld a,#TK_GT 
      000E2F 6B 02            [ 1] 2330 	ld (ATTRIB,sp),a 
      000E31 72 5C 00 01      [ 1] 2331 	inc in 
      000E35 91 D6 00         [ 4] 2332 	ld a,([in.w],y)
      000E38 A1 3D            [ 1] 2333 	cp a,#'=
      000E3A 26 0C            [ 1] 2334 	jrne 1$
      000E3C 7B 01            [ 1] 2335 	ld a,(TCHAR,sp)
      000E3E F7               [ 1] 2336 	ld (x),a
      000E3F 5C               [ 1] 2337 	incw x 
      000E40 A6 3D            [ 1] 2338 	ld a,#'=
      000E42 6B 01            [ 1] 2339 	ld (TCHAR,sp),a 
      000E44 A6 33            [ 1] 2340 	ld a,#TK_GE 
      000E46 20 5F            [ 2] 2341 	jra token_char  
      000E48 A1 3C            [ 1] 2342 1$: cp a,#'<
      000E4A 26 0C            [ 1] 2343 	jrne 2$
      000E4C 7B 01            [ 1] 2344 	ld a,(TCHAR,sp)
      000E4E F7               [ 1] 2345 	ld (x),a
      000E4F 5C               [ 1] 2346 	incw x 
      000E50 A6 3C            [ 1] 2347 	ld a,#'<	
      000E52 6B 01            [ 1] 2348 	ld (TCHAR,sp),a 
      000E54 A6 35            [ 1] 2349 	ld a,#TK_NE 
      000E56 20 4F            [ 2] 2350 	jra token_char 
      000E58 72 5A 00 01      [ 1] 2351 2$: dec in
      000E5C 7B 02            [ 1] 2352 	ld a,(ATTRIB,sp)
      000E5E 20 47            [ 2] 2353 	jra token_char 
      000E60                       2354 lt_tst:
      000E60                       2355 	_case '<' other
      000E60 A6 3C            [ 1]    1 	ld a,#'<' 
      000E62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E64 26 32            [ 1]    3 	jrne other
      000E66 A6 34            [ 1] 2356 	ld a,#TK_LT 
      000E68 6B 02            [ 1] 2357 	ld (ATTRIB,sp),a 
      000E6A 72 5C 00 01      [ 1] 2358 	inc in 
      000E6E 91 D6 00         [ 4] 2359 	ld a,([in.w],y)
      000E71 A1 3D            [ 1] 2360 	cp a,#'=
      000E73 26 0B            [ 1] 2361 	jrne 1$
      000E75 7B 01            [ 1] 2362 	ld a,(TCHAR,sp)
      000E77 F7               [ 1] 2363 	ld (x),a 
      000E78 A6 3D            [ 1] 2364 	ld a,#'=
      000E7A 6B 01            [ 1] 2365 	ld (TCHAR,sp),a 
      000E7C A6 36            [ 1] 2366 	ld a,#TK_LE 
      000E7E 20 27            [ 2] 2367 	jra token_char 
      000E80 A1 3E            [ 1] 2368 1$: cp a,#'>
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E82 26 0C            [ 1] 2369 	jrne 2$
      000E84 7B 01            [ 1] 2370 	ld a,(TCHAR,sp)
      000E86 F7               [ 1] 2371 	ld (x),a 
      000E87 5C               [ 1] 2372 	incw x 
      000E88 A6 3E            [ 1] 2373 	ld a,#'>
      000E8A 6B 01            [ 1] 2374 	ld (TCHAR,sp),a 
      000E8C A6 35            [ 1] 2375 	ld a,#TK_NE 
      000E8E 20 17            [ 2] 2376 	jra token_char 
      000E90 72 5A 00 01      [ 1] 2377 2$: dec in 
      000E94 7B 02            [ 1] 2378 	ld a,(ATTRIB,sp)
      000E96 20 0F            [ 2] 2379 	jra token_char 	
      000E98                       2380 other: ; not a special character 	 
      000E98 7B 01            [ 1] 2381 	ld a,(TCHAR,sp)
      000E9A CD 05 04         [ 4] 2382 	call is_alpha 
      000E9D 25 03            [ 1] 2383 	jrc 30$ 
      000E9F CC 07 18         [ 2] 2384 	jp syntax_error 
      000EA2                       2385 30$: 
      000EA2 CD 0C CA         [ 4] 2386 	call parse_keyword
      000EA5 20 10            [ 2] 2387 	jra token_exit 
      000EA7                       2388 token_char:
      000EA7 6B 02            [ 1] 2389 	ld (ATTRIB,sp),a 
      000EA9 7B 01            [ 1] 2390 	ld a,(TCHAR,sp)
      000EAB F7               [ 1] 2391 	ld (x),a 
      000EAC 5C               [ 1] 2392 	incw x 
      000EAD 7F               [ 1] 2393 	clr(x)
      000EAE 72 5C 00 01      [ 1] 2394 	inc in 
      000EB2 7B 02            [ 1] 2395 	ld a,(ATTRIB,sp)
      000EB4 AE 17 18         [ 2] 2396 	ldw x,#pad 
      000EB7                       2397 token_exit:
      000EB7                       2398 	_drop VSIZE 
      000EB7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EB9 81               [ 4] 2399 	ret
                                   2400 
                                   2401 
                                   2402 
                                   2403 ;------------------------------------
                                   2404 ; check if character in {'0'..'9'}
                                   2405 ; input:
                                   2406 ;    A  character to test
                                   2407 ; output:
                                   2408 ;    Carry  0 not digit | 1 digit
                                   2409 ;------------------------------------
      000EBA                       2410 is_digit:
      000EBA A1 30            [ 1] 2411 	cp a,#'0
      000EBC 25 03            [ 1] 2412 	jrc 1$
      000EBE A1 3A            [ 1] 2413     cp a,#'9+1
      000EC0 8C               [ 1] 2414 	ccf 
      000EC1 8C               [ 1] 2415 1$:	ccf 
      000EC2 81               [ 4] 2416     ret
                                   2417 
                                   2418 ;------------------------------------
                                   2419 ; convert alpha to uppercase
                                   2420 ; input:
                                   2421 ;    a  character to convert
                                   2422 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2423 ;    a  uppercase character
                                   2424 ;------------------------------------
      000EC3                       2425 to_upper::
      000EC3 A1 61            [ 1] 2426 	cp a,#'a
      000EC5 2A 01            [ 1] 2427 	jrpl 1$
      000EC7 81               [ 4] 2428 0$:	ret
      000EC8 A1 7A            [ 1] 2429 1$: cp a,#'z	
      000ECA 22 FB            [ 1] 2430 	jrugt 0$
      000ECC A0 20            [ 1] 2431 	sub a,#32
      000ECE 81               [ 4] 2432 	ret
                                   2433 	
                                   2434 ;------------------------------------
                                   2435 ; convert pad content in integer
                                   2436 ; input:
                                   2437 ;    pad		.asciz to convert
                                   2438 ; output:
                                   2439 ;    acc24      int24_t
                                   2440 ;------------------------------------
                                   2441 	; local variables
                           000001  2442 	SIGN=1 ; 1 byte, 
                           000002  2443 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2444 	TEMP=3 ; 1 byte, temporary storage
                           000003  2445 	VSIZE=3 ; 3 bytes reserved for local storage
      000ECF                       2446 atoi24:
      000ECF 89               [ 2] 2447 	pushw x ;save x
      000ED0 52 03            [ 2] 2448 	sub sp,#VSIZE
                                   2449 	; acc24=0 
      000ED2 72 5F 00 08      [ 1] 2450 	clr acc24    
      000ED6 72 5F 00 09      [ 1] 2451 	clr acc16
      000EDA 72 5F 00 0A      [ 1] 2452 	clr acc8 
      000EDE C6 17 18         [ 1] 2453 	ld a, pad 
      000EE1 27 5A            [ 1] 2454 	jreq atoi_exit
      000EE3 0F 01            [ 1] 2455 	clr (SIGN,sp)
      000EE5 A6 0A            [ 1] 2456 	ld a,#10
      000EE7 6B 02            [ 1] 2457 	ld (BASE,sp),a ; default base decimal
      000EE9 AE 17 18         [ 2] 2458 	ldw x,#pad ; pointer to string to convert
      000EEC F6               [ 1] 2459 	ld a,(x)
      000EED 27 47            [ 1] 2460 	jreq 9$  ; completed if 0
      000EEF A1 2D            [ 1] 2461 	cp a,#'-
      000EF1 26 04            [ 1] 2462 	jrne 1$
      000EF3 03 01            [ 1] 2463 	cpl (SIGN,sp)
      000EF5 20 08            [ 2] 2464 	jra 2$
      000EF7 A1 24            [ 1] 2465 1$: cp a,#'$
      000EF9 26 06            [ 1] 2466 	jrne 3$
      000EFB A6 10            [ 1] 2467 	ld a,#16
      000EFD 6B 02            [ 1] 2468 	ld (BASE,sp),a
      000EFF 5C               [ 1] 2469 2$:	incw x
      000F00 F6               [ 1] 2470 	ld a,(x)
      000F01                       2471 3$:	
      000F01 A1 61            [ 1] 2472 	cp a,#'a
      000F03 2B 02            [ 1] 2473 	jrmi 4$
      000F05 A0 20            [ 1] 2474 	sub a,#32
      000F07 A1 30            [ 1] 2475 4$:	cp a,#'0
      000F09 2B 2B            [ 1] 2476 	jrmi 9$
      000F0B A0 30            [ 1] 2477 	sub a,#'0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F0D A1 0A            [ 1] 2478 	cp a,#10
      000F0F 2B 06            [ 1] 2479 	jrmi 5$
      000F11 A0 07            [ 1] 2480 	sub a,#7
      000F13 11 02            [ 1] 2481 	cp a,(BASE,sp)
      000F15 2A 1F            [ 1] 2482 	jrpl 9$
      000F17 6B 03            [ 1] 2483 5$:	ld (TEMP,sp),a
      000F19 7B 02            [ 1] 2484 	ld a,(BASE,sp)
      000F1B CD 0F 41         [ 4] 2485 	call mulu24_8
      000F1E 7B 03            [ 1] 2486 	ld a,(TEMP,sp)
      000F20 CB 00 0A         [ 1] 2487 	add a,acc24+2
      000F23 C7 00 0A         [ 1] 2488 	ld acc24+2,a
      000F26 4F               [ 1] 2489 	clr a
      000F27 C9 00 09         [ 1] 2490 	adc a,acc24+1
      000F2A C7 00 09         [ 1] 2491 	ld acc24+1,a
      000F2D 4F               [ 1] 2492 	clr a
      000F2E C9 00 08         [ 1] 2493 	adc a,acc24
      000F31 C7 00 08         [ 1] 2494 	ld acc24,a
      000F34 20 C9            [ 2] 2495 	jra 2$
      000F36 0D 01            [ 1] 2496 9$:	tnz (SIGN,sp)
      000F38 27 03            [ 1] 2497     jreq atoi_exit
      000F3A CD 0A 68         [ 4] 2498     call neg_acc24
      000F3D                       2499 atoi_exit: 
      000F3D 5B 03            [ 2] 2500 	addw sp,#VSIZE
      000F3F 85               [ 2] 2501 	popw x ; restore x
      000F40 81               [ 4] 2502 	ret
                                   2503 
                                   2504 ;--------------------------------------
                                   2505 ; unsigned multiply uint24_t by uint8_t
                                   2506 ; use to convert numerical string to uint24_t
                                   2507 ; input:
                                   2508 ;	acc24	uint24_t 
                                   2509 ;   A		uint8_t
                                   2510 ; output:
                                   2511 ;   acc24   A*acc24
                                   2512 ;-------------------------------------
                                   2513 ; local variables offset  on sp
                           000003  2514 	U8   = 3   ; A pushed on stack
                           000002  2515 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2516 	OVFH = 1  ; multiplication overflow high byte
                           000003  2517 	VSIZE = 3
      000F41                       2518 mulu24_8:
      000F41 89               [ 2] 2519 	pushw x    ; save X
                                   2520 	; local variables
      000F42 88               [ 1] 2521 	push a     ; U8
      000F43 5F               [ 1] 2522 	clrw x     ; initialize overflow to 0
      000F44 89               [ 2] 2523 	pushw x    ; multiplication overflow
                                   2524 ; multiply low byte.
      000F45 C6 00 0A         [ 1] 2525 	ld a,acc24+2
      000F48 97               [ 1] 2526 	ld xl,a
      000F49 7B 03            [ 1] 2527 	ld a,(U8,sp)
      000F4B 42               [ 4] 2528 	mul x,a
      000F4C 9F               [ 1] 2529 	ld a,xl
      000F4D C7 00 0A         [ 1] 2530 	ld acc24+2,a
      000F50 9E               [ 1] 2531 	ld a, xh
      000F51 6B 02            [ 1] 2532 	ld (OVFL,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2533 ; multipy middle byte
      000F53 C6 00 09         [ 1] 2534 	ld a,acc24+1
      000F56 97               [ 1] 2535 	ld xl,a
      000F57 7B 03            [ 1] 2536 	ld a, (U8,sp)
      000F59 42               [ 4] 2537 	mul x,a
                                   2538 ; add overflow to this partial product
      000F5A 72 FB 01         [ 2] 2539 	addw x,(OVFH,sp)
      000F5D 9F               [ 1] 2540 	ld a,xl
      000F5E C7 00 09         [ 1] 2541 	ld acc24+1,a
      000F61 4F               [ 1] 2542 	clr a
      000F62 A9 00            [ 1] 2543 	adc a,#0
      000F64 6B 01            [ 1] 2544 	ld (OVFH,sp),a
      000F66 9E               [ 1] 2545 	ld a,xh
      000F67 6B 02            [ 1] 2546 	ld (OVFL,sp),a
                                   2547 ; multiply most signficant byte	
      000F69 C6 00 08         [ 1] 2548 	ld a, acc24
      000F6C 97               [ 1] 2549 	ld xl, a
      000F6D 7B 03            [ 1] 2550 	ld a, (U8,sp)
      000F6F 42               [ 4] 2551 	mul x,a
      000F70 72 FB 01         [ 2] 2552 	addw x, (OVFH,sp)
      000F73 9F               [ 1] 2553 	ld a, xl
      000F74 C7 00 08         [ 1] 2554 	ld acc24,a
      000F77 5B 03            [ 2] 2555     addw sp,#VSIZE
      000F79 85               [ 2] 2556 	popw x
      000F7A 81               [ 4] 2557 	ret
                                   2558 
                                   2559 ;------------------------------------
                                   2560 ; skip character c in text starting from 'in'
                                   2561 ; input:
                                   2562 ;	 y 		point to text buffer
                                   2563 ;    a 		character to skip
                                   2564 ; output:  
                                   2565 ;	'in' ajusted to new position
                                   2566 ;------------------------------------
                           000001  2567 	C = 1 ; local var
      000F7B                       2568 skip:
      000F7B 88               [ 1] 2569 	push a
      000F7C 91 D6 00         [ 4] 2570 1$:	ld a,([in.w],y)
      000F7F 27 0A            [ 1] 2571 	jreq 2$
      000F81 11 01            [ 1] 2572 	cp a,(C,sp)
      000F83 26 06            [ 1] 2573 	jrne 2$
      000F85 72 5C 00 01      [ 1] 2574 	inc in
      000F89 20 F1            [ 2] 2575 	jra 1$
      000F8B                       2576 2$: _drop 1 
      000F8B 5B 01            [ 2]    1     addw sp,#1 
      000F8D 81               [ 4] 2577 	ret
                                   2578 	
                                   2579 ;------------------------------
                                   2580 ; restore 'in.w' variable to 
                                   2581 ; its value before last call
                                   2582 ; to get_token.
                                   2583 ;------------------------------
      000F8E                       2584 unget_token:
      000F8E CE 00 11         [ 2] 2585 	ldw x,in.w.saved
      000F91 CF 00 00         [ 2] 2586 	ldw in.w,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F94 81               [ 4] 2587 	ret 
                                   2588 
                                   2589 
                                   2590 ;******************************
                                   2591 ;  data stack manipulation
                                   2592 ;*****************************
                                   2593 ;----------------------	
                                   2594 ; push X on data stack 
                                   2595 ; input:
                                   2596 ;	X 
                                   2597 ; output:
                                   2598 ;	none 
                                   2599 ;----------------------	
      000F95                       2600 dpush:
      000F95                       2601     _dp_down
      000F95 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000F99 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000F9D 72 CF 00 19      [ 5] 2602     ldw [dstkptr],x  
      000FA1 81               [ 4] 2603 	ret 
                                   2604 
                                   2605 
                                   2606 ;----------------------	
                                   2607 ; pop data stack in X 
                                   2608 ; input:
                                   2609 ;	none
                                   2610 ; output:
                                   2611 ;	X   
                                   2612 ;----------------------	
      000FA2                       2613 dpop: 
      000FA2 72 CE 00 19      [ 5] 2614     ldw x, [dstkptr]
      000FA6                       2615 	_dp_up
      000FA6 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FAA 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000FAE 81               [ 4] 2616 	ret 
                                   2617 
                                   2618 ;-----------------------------
                                   2619 ; swap top 2 elements of dstack
                                   2620 ;  {n1 n2 -- n2 n1 }
                                   2621 ;-----------------------------
      000FAF                       2622 dswap:
      000FAF 72 CE 00 19      [ 5] 2623 	ldw x,[dstkptr]
      000FB3 89               [ 2] 2624 	pushw x 
      000FB4 AE 00 02         [ 2] 2625 	ldw x,#2 
      000FB7 72 DE 00 19      [ 5] 2626 	ldw x,([dstkptr],x) 
      000FBB 72 CF 00 19      [ 5] 2627 	ldw [dstkptr],x 
      000FBF AE 00 02         [ 2] 2628 	ldw x,#2
      000FC2 90 85            [ 2] 2629 	popw y 
      000FC4 72 DF 00 19      [ 5] 2630 	ldw ([dstkptr],x),y 
      000FC8 81               [ 4] 2631 	ret
                                   2632 
                                   2633 ;-----------------------------
                                   2634 ; drop TOS 
                                   2635 ;-----------------------------
      000FC9                       2636 ddrop: ; { n -- }
      000FC9                       2637 	_dp_up 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FC9 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FCD 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000FD1 81               [ 4] 2638 	ret
                                   2639 	
                                   2640 ;-----------------------------
                                   2641 ; duplicate TOS 
                                   2642 ;  dstack: { ix...n -- ix...n n }
                                   2643 ;-----------------------------
      000FD2                       2644 ddup:
      000FD2 72 CE 00 19      [ 5] 2645 	ldw x,[dstkptr]
      000FD6                       2646 	_dp_down
      000FD6 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000FDA 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000FDE 72 CF 00 19      [ 5] 2647     ldw [dstkptr],x  
      000FE2 81               [ 4] 2648 	ret 
                                   2649 
                                   2650 
                                   2651 ;----------------------------------
                                   2652 ; pick value n from dstack 
                                   2653 ; put it on TOS
                                   2654 ; dstack: {ix,..,p -- ix,...,np }
                                   2655 ;-----------------------------------
      000FE3                       2656 dpick:
      000FE3 72 CE 00 19      [ 5] 2657 	ldw x,[dstkptr]
      000FE7 58               [ 2] 2658 	sllw x 
      000FE8 72 BB 00 19      [ 2] 2659 	addw x,dstkptr 
      000FEC FE               [ 2] 2660 	ldw x,(x)
      000FED 72 CF 00 19      [ 5] 2661 	ldw [dstkptr],x 
      000FF1 81               [ 4] 2662 	ret
                                   2663 
                                   2664 ;---------------------------
                                   2665 ;  fetch variable in X 
                                   2666 ;  dstack:{ addr -- value }
                                   2667 ;---------------------------
      000FF2                       2668 fetch:
      000FF2 72 CE 00 19      [ 5] 2669 	ldw x,[dstkptr]
      000FF6 FE               [ 2] 2670 	ldw x,(x)
      000FF7 72 CF 00 19      [ 5] 2671 	ldw [dstkptr],x
      000FFB 81               [ 4] 2672 	ret 
                                   2673 
                                   2674 ;----------------------------
                                   2675 ; store variable 
                                   2676 ; dstack: {addr value -- }
                                   2677 ;----------------------------
      000FFC                       2678 store:
      000FFC CD 0F A2         [ 4] 2679 	call dpop 
      000FFF 90 93            [ 1] 2680 	ldw y,x   ; y=value 
      001001 CD 0F A2         [ 4] 2681 	call dpop 
      001004 FF               [ 2] 2682 	ldw (x),y 
      001005 81               [ 4] 2683 	ret 
                                   2684 
                                   2685 ;---------------------------------
                                   2686 ; drop n elements from data stack 
                                   2687 ; input: 
                                   2688 ;   X 		n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2689 ; output:
                                   2690 ;   none 
                                   2691 ;-------------------------------------
      001006                       2692 ddrop_n:
      001006 90 89            [ 2] 2693 	pushw y 
      001008 90 CE 00 19      [ 2] 2694 	ldw y,dstkptr 
      00100C 58               [ 2] 2695 	sllw x 
      00100D 89               [ 2] 2696 	pushw x 
      00100E 72 F9 01         [ 2] 2697 	addw y,(1,sp)
      001011 90 CF 00 19      [ 2] 2698 	ldw dstkptr,y 
      001015 85               [ 2] 2699 	popw x 
      001016 90 85            [ 2] 2700 	popw y
      001018 81               [ 4] 2701 	ret 
                                   2702 
      001019 0A 64 73 74 61 63 6B  2703 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2704 ;----------------------------
                                   2705 ; print dstack content 
                                   2706 ;---------------------------
                           000001  2707 	XSAVE=1
                           000002  2708 	VSIZE=2
      001023                       2709 dots:
      001023                       2710 	_vars VSIZE 
      001023 52 02            [ 2]    1     sub sp,#VSIZE 
      001025 AE 10 19         [ 2] 2711 	ldw x,#dstk_prompt 
      001028 CD 01 B0         [ 4] 2712 	call puts
      00102B AE 17 7E         [ 2] 2713 	ldw x,#dstack_unf-CELL_SIZE
      00102E 35 0A 00 07      [ 1] 2714 	mov base,#10 
      001032 C3 00 19         [ 2] 2715 1$:	cpw x,dstkptr 
      001035 25 0D            [ 1] 2716 	jrult 4$ 
      001037 1F 01            [ 2] 2717 	ldw (XSAVE,sp),x
      001039 FE               [ 2] 2718 	ldw  x,(x)
      00103A CD 09 9D         [ 4] 2719 	call print_int 
      00103D 1E 01            [ 2] 2720 	ldw x,(XSAVE,sp)
      00103F 1D 00 02         [ 2] 2721 	subw x,#CELL_SIZE 
      001042 20 EE            [ 2] 2722 	jra 1$ 
      001044 A6 0D            [ 1] 2723 4$: ld a,#CR 
      001046 CD 01 9E         [ 4] 2724 	call putc 
      001049                       2725 	_drop VSIZE
      001049 5B 02            [ 2]    1     addw sp,#VSIZE 
      00104B 4F               [ 1] 2726 	clr a 
      00104C 81               [ 4] 2727 	ret
                                   2728 
      00104D 0A 63 74 61 63 6B 3A  2729 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2730 ;--------------------------------
                                   2731 ; print cstack content
                                   2732 ;--------------------------------
                           000001  2733 	XSAVE=1
                           000002  2734 	VSIZE=2 
      001056                       2735 dotr:
      001056                       2736 	_vars VSIZE 
      001056 52 02            [ 2]    1     sub sp,#VSIZE 
      001058 AE 10 4D         [ 2] 2737 	ldw x,#cstk_prompt
      00105B CD 01 B0         [ 4] 2738 	call puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00105E 96               [ 1] 2739 	ldw x,sp 
      00105F 1C 00 07         [ 2] 2740 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      001062 1F 01            [ 2] 2741 	ldw (XSAVE,sp),x  
      001064 AE 17 FE         [ 2] 2742 	ldw x,#RAM_SIZE-2
      001067 35 10 00 07      [ 1] 2743 	mov base,#16
      00106B                       2744 dotr_loop:
      00106B 13 01            [ 2] 2745 	cpw x,(XSAVE,sp)
      00106D 2B 0B            [ 1] 2746 	jrmi 9$
      00106F 89               [ 2] 2747 	pushw x  
      001070 FE               [ 2] 2748 	ldw x,(x)
      001071 CD 09 9D         [ 4] 2749 	call print_int 
      001074 85               [ 2] 2750 	popw x  
      001075 1D 00 02         [ 2] 2751 	subw x,#CELL_SIZE
      001078 20 F1            [ 2] 2752 	jra dotr_loop 
      00107A A6 0D            [ 1] 2753 9$:	ld a,#CR 
      00107C CD 01 9E         [ 4] 2754 	call putc 
      00107F                       2755 	_drop VSIZE 
      00107F 5B 02            [ 2]    1     addw sp,#VSIZE 
      001081 4F               [ 1] 2756 	clr a 
      001082 81               [ 4] 2757 	ret
                                   2758 
                                   2759 
                                   2760 ;--------------------------------
                                   2761 ;  add 2 integers
                                   2762 ;  input:
                                   2763 ;    N1     on cstack 
                                   2764 ;    N2     on cstack 
                                   2765 ;  output:
                                   2766 ;    X 		n2+n1 
                                   2767 ;--------------------------------
                                   2768 	;arugments on cstack 
      001083                       2769 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001083                       2770 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001083                       2771 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001083                       2772 add:
      001083 1E 05            [ 2] 2773 	ldw x ,(N2,sp)
      001085 72 FB 03         [ 2] 2774 	addw x,(N1,sp)
      001088 1F 03            [ 2] 2775 	ldw (N1,sp),x 
      00108A 81               [ 4] 2776 	ret 
                                   2777 
                                   2778 ;--------------------------------
                                   2779 ;  substract 2 ntegers
                                   2780 ;  input:
                                   2781 ;    N1     on cstack 
                                   2782 ;    N2     on cstack 
                                   2783 ;  output:
                                   2784 ;    X 		n2+n1 
                                   2785 ;--------------------------------
      00108B                       2786 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00108B                       2787 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      00108B                       2788 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00108B                       2789 substract:
      00108B 1E 05            [ 2] 2790 	ldw x,(N2,sp)
      00108D 72 F0 03         [ 2] 2791 	subw x,(N1,sp)
      001090 81               [ 4] 2792 	ret 
                                   2793 
                                   2794 ;-------------------------------------
                                   2795 ; multiply 2 integers
                                   2796 ; product overflow is ignored unless
                                   2797 ; MATH_OVF assembler flag is set to 1
                                   2798 ; input:
                                   2799 ;  	N1      on cstack
                                   2800 ;   N2 		on cstack 
                                   2801 ; output:
                                   2802 ;	X        N1*N2 
                                   2803 ;-------------------------------------
                                   2804 	;arguments 
      001091                       2805 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      001091                       2806 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      001091                       2807 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      001091                       2808 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      001091                       2809 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2810    ; local variables 
                           000001  2811 	SIGN=1
                           000002  2812 	PROD=2
                           000003  2813 	VSIZE=3
      001091                       2814 multiply:
      001091                       2815 	_vars VSIZE 
      001091 52 03            [ 2]    1     sub sp,#VSIZE 
      001093 0F 01            [ 1] 2816 	clr (SIGN,sp)
      001095 1E 06            [ 2] 2817 	ldw x,(N1_HB,sp)
      001097 9E               [ 1] 2818 	ld a,xh  
      001098 A5 80            [ 1] 2819 	bcp a,#0x80 
      00109A 27 05            [ 1] 2820 	jreq 2$
      00109C 03 01            [ 1] 2821 	cpl (SIGN,sp)
      00109E 50               [ 2] 2822 	negw x 
      00109F 1F 06            [ 2] 2823 	ldw (N1_HB,sp),x 
      0010A1 1E 08            [ 2] 2824 2$: ldw x,(N2_HB,sp)
      0010A3 9E               [ 1] 2825 	ld a,xh  
      0010A4 A5 80            [ 1] 2826 	bcp a,#0x80 
      0010A6 27 05            [ 1] 2827 	jreq 3$
      0010A8 03 01            [ 1] 2828 	cpl (SIGN,sp)
      0010AA 50               [ 2] 2829 	negw x 
      0010AB 1F 08            [ 2] 2830 	ldw (N2_HB,sp),x 
                                   2831 ; N1_LB * N2_LB 	
      0010AD 7B 07            [ 1] 2832 3$:	ld a,(N1_LB,sp)
      0010AF 97               [ 1] 2833 	ld xl,a 
      0010B0 7B 09            [ 1] 2834 	ld a,(N2_LB,sp) 
      0010B2 42               [ 4] 2835 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                           000000  2836 .if MATH_OVF 	
                                   2837 	ld a,xh 
                                   2838 	bcp a,#0x80 
                                   2839 	jreq 4$ 
                                   2840 	ld a,#ERR_MATH_OVF 
                                   2841 	jp tb_error
                                   2842 .endif 	 
      0010B3 1F 02            [ 2] 2843 4$:	ldw (PROD,sp),x
                                   2844 ; N1_LB * N2_HB	 
      0010B5 7B 07            [ 1] 2845 	ld a,(N1_LB,sp) 
      0010B7 97               [ 1] 2846 	ld xl,a 
      0010B8 7B 08            [ 1] 2847 	ld a,(N2_HB,sp)
      0010BA 42               [ 4] 2848 	mul x,a
      0010BB 9F               [ 1] 2849 	ld a,xl 
      0010BC 1B 02            [ 1] 2850 	add a,(PROD,sp)
                           000000  2851 .if MATH_OVF 	
                                   2852 	bcp a,#0x80 
                                   2853 	jreq 5$ 
                                   2854 	ld a,#ERR_MATH_OVF 
                                   2855 	jp tb_error
                                   2856 .endif 	 
      0010BE 6B 02            [ 1] 2857 5$:	ld (PROD,sp),a 
                                   2858 ; N1_HB * N2_LB 
      0010C0 7B 06            [ 1] 2859 	ld a,(N1_HB,sp)
      0010C2 97               [ 1] 2860 	ld xl,a 
      0010C3 7B 09            [ 1] 2861 	ld a,(N2_LB,sp)
      0010C5 42               [ 4] 2862 	mul x,a 
      0010C6 9F               [ 1] 2863 	ld a,xl 
      0010C7 1B 02            [ 1] 2864 	add a,(PROD,sp)
                           000000  2865 .if MATH_OVF 	
                                   2866 	bcp a,#0x80 
                                   2867 	jreq 6$ 
                                   2868 	ld a,#ERR_MATH_OVF 
                                   2869 	jp tb_error
                                   2870 .endif 	 
      0010C9 6B 02            [ 1] 2871 6$:	ld (PROD,sp),a 
                                   2872 ; N1_HB * N2_HB 	
                                   2873 ; it is pointless to multiply N1_HB*N2_HB 
                                   2874 ; as this product is over 65535 or 0 
                                   2875 ;
                                   2876 ; sign adjust product
      0010CB 0D 01            [ 1] 2877 	tnz (SIGN,sp)
      0010CD 27 05            [ 1] 2878 	jreq 7$
      0010CF 1E 02            [ 2] 2879 	ldw x, (PROD,sp)
      0010D1 50               [ 2] 2880 	negw x
      0010D2 1F 02            [ 2] 2881 	ldw (PROD,sp),x  
      0010D4                       2882 7$: 
      0010D4 1E 02            [ 2] 2883 	ldw x,(PROD,sp) 
      0010D6                       2884 	_drop VSIZE 
      0010D6 5B 03            [ 2]    1     addw sp,#VSIZE 
      0010D8 81               [ 4] 2885 	ret
                                   2886 
                                   2887 ;----------------------------------
                                   2888 ;  euclidian divide n2/n1 
                                   2889 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2890 ;    N2 	on cstack
                                   2891 ;    N1 	on cstack
                                   2892 ; output:
                                   2893 ;    X      n2/n1 
                                   2894 ;    Y      remainder 
                                   2895 ;----------------------------------
      0010D9                       2896 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      0010D9                       2897 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      0010D9                       2898 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2899 	; local variables
                           000001  2900 	SQUOT=1 ; sign quotient
                           000002  2901 	SDIVD=2 ; sign dividend  
                           000002  2902 	VSIZE=2
      0010D9                       2903 divide:
      0010D9                       2904 	_vars VSIZE 
      0010D9 52 02            [ 2]    1     sub sp,#VSIZE 
      0010DB 0F 01            [ 1] 2905 	clr (SQUOT,sp)
      0010DD 0F 02            [ 1] 2906 	clr (SDIVD,sp)
                                   2907 ; check for 0 divisor
      0010DF 1E 05            [ 2] 2908 	ldw x,(DIVISR,sp)
      0010E1 5D               [ 2] 2909 	tnzw x 
      0010E2 26 05            [ 1] 2910     jrne 0$
      0010E4 A6 04            [ 1] 2911 	ld a,#ERR_DIV0 
      0010E6 CC 07 1A         [ 2] 2912 	jp tb_error 
                                   2913 ; check divisor sign 	
      0010E9 9E               [ 1] 2914 0$:	ld a,xh 
      0010EA A5 80            [ 1] 2915 	bcp a,#0x80 
      0010EC 27 03            [ 1] 2916 	jreq 1$
      0010EE 03 01            [ 1] 2917 	cpl (SQUOT,sp)
      0010F0 50               [ 2] 2918 	negw x 
      0010F1 1F 05            [ 2] 2919 1$:	ldw (DIVISR,sp),x
                                   2920 ; check dividend sign 	 
      0010F3 1E 07            [ 2] 2921     ldw x,(DIVIDND,sp)
      0010F5 9E               [ 1] 2922 	ld a,xh 
      0010F6 A5 80            [ 1] 2923 	bcp a,#0x80 
      0010F8 27 05            [ 1] 2924 	jreq 2$ 
      0010FA 03 01            [ 1] 2925 	cpl (SQUOT,sp)
      0010FC 03 02            [ 1] 2926 	cpl (SDIVD,sp)
      0010FE 50               [ 2] 2927 	negw x 
      0010FF 16 05            [ 2] 2928 2$:	ldw y,(DIVISR,sp)
      001101 65               [ 2] 2929 	divw x,y
      001102 90 CF 00 09      [ 2] 2930 	ldw acc16,y 
                                   2931 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      001106 0D 02            [ 1] 2932 	tnz (SDIVD,sp)
      001108 27 0B            [ 1] 2933 	jreq 7$
      00110A 90 5D            [ 2] 2934 	tnzw y 
      00110C 27 07            [ 1] 2935 	jreq 7$
      00110E 5C               [ 1] 2936 	incw x
      00110F 16 05            [ 2] 2937 	ldw y,(DIVISR,sp)
      001111 72 B2 00 09      [ 2] 2938 	subw y,acc16
      001115 0D 01            [ 1] 2939 7$: tnz (SQUOT,sp)
      001117 27 01            [ 1] 2940 	jreq 9$ 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001119 50               [ 2] 2941 8$:	negw x 
      00111A                       2942 9$: 
      00111A                       2943 	_drop VSIZE 
      00111A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00111C 81               [ 4] 2944 	ret 
                                   2945 
                                   2946 
                                   2947 ;----------------------------------
                                   2948 ;  remainder resulting from euclidian 
                                   2949 ;  division of n2/n1 
                                   2950 ; input:
                                   2951 ;   N1 		cstack 
                                   2952 ;   N2      cstack
                                   2953 ; output:
                                   2954 ;   X       N2%N1 
                                   2955 ;----------------------------------
                           000003  2956 	N1=3
                           000005  2957 	N2=5
                           000004  2958 	VSIZE=4
      00111D                       2959 modulo:
      00111D 1E 03            [ 2] 2960 	Ldw x,(N1,sp)
      00111F 16 05            [ 2] 2961 	ldw y,(N2,sp)
      001121                       2962 	_vars VSIZE 
      001121 52 04            [ 2]    1     sub sp,#VSIZE 
      001123 1F 01            [ 2] 2963 	ldw (1,sp),x 
      001125 17 03            [ 2] 2964 	ldw (3,sp),y 
      001127 CD 10 D9         [ 4] 2965 	call divide 
      00112A 93               [ 1] 2966 	ldw x,y
      00112B                       2967 	_drop VSIZE 
      00112B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00112D 81               [ 4] 2968 	ret 
                                   2969 
                                   2970 
                                   2971 ;----------------------------------
                                   2972 ; search in kword_dict command name
                                   2973 ;  from its execution address 
                                   2974 ; input:
                                   2975 ;   X       	execution address 
                                   2976 ; output:
                                   2977 ;   X 			cstr*  | 0 
                                   2978 ;--------------------------------
                           000001  2979 	XADR=1 
                           000003  2980 	LINK=3 
                           000004  2981 	VSIZE=4
      00112E                       2982 cmd_name:
      00112E                       2983 	_vars VSIZE 
      00112E 52 04            [ 2]    1     sub sp,#VSIZE 
      001130 72 5F 00 09      [ 1] 2984 	clr acc16 
      001134 1F 01            [ 2] 2985 	ldw (XADR,sp),x  
      001136 AE 21 7C         [ 2] 2986 	ldw x,#kword_dict	
      001139 1F 03            [ 2] 2987 1$:	ldw (LINK,sp),x
      00113B E6 02            [ 1] 2988 	ld a,(2,x)
      00113D A4 0F            [ 1] 2989 	and a,#15 
      00113F C7 00 0A         [ 1] 2990 	ld acc8,a 
      001142 1C 00 03         [ 2] 2991 	addw x,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001145 72 BB 00 09      [ 2] 2992 	addw x,acc16
      001149 FE               [ 2] 2993 	ldw x,(x) ; execution address 
      00114A 13 01            [ 2] 2994 	cpw x,(XADR,sp)
      00114C 27 0A            [ 1] 2995 	jreq 2$
      00114E 1E 03            [ 2] 2996 	ldw x,(LINK,sp)
      001150 FE               [ 2] 2997 	ldw x,(x) 
      001151 1D 00 02         [ 2] 2998 	subw x,#2  
      001154 26 E3            [ 1] 2999 	jrne 1$
      001156 20 05            [ 2] 3000 	jra 9$
      001158 1E 03            [ 2] 3001 2$: ldw x,(LINK,sp)
      00115A 1C 00 02         [ 2] 3002 	addw x,#2 	
      00115D                       3003 9$:	_drop VSIZE
      00115D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00115F 81               [ 4] 3004 	ret
                                   3005 
                                   3006 
                                   3007 ;---------------------------------
                                   3008 ; input:
                                   3009 ;	X 		dictionary entry point 
                                   3010 ;  pad		.asciz name to search 
                                   3011 ; output:
                                   3012 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3013 ;  X		execution address | 0 
                                   3014 ;---------------------------------
                           000001  3015 	NLEN=1 ; cmd length 
                           000002  3016 	YSAVE=2
                           000003  3017 	VSIZE=3 
      001160                       3018 search_dict:
      001160                       3019 	_vars VSIZE 
      001160 52 03            [ 2]    1     sub sp,#VSIZE 
      001162 90 93            [ 1] 3020 	ldw y,x 
      001164                       3021 search_next:	
      001164 90 F6            [ 1] 3022 	ld a,(y)
      001166 A4 0F            [ 1] 3023 	and a,#0xf 
      001168 6B 01            [ 1] 3024 	ld (NLEN,sp),a  
      00116A AE 17 18         [ 2] 3025 	ldw x,#pad 
      00116D 17 02            [ 2] 3026 	ldw (YSAVE,sp),y
      00116F 90 5C            [ 1] 3027 	incw y  
      001171                       3028 cp_loop:
      001171 F6               [ 1] 3029 	ld a,(x)
      001172 27 1E            [ 1] 3030 	jreq str_match 
      001174 0D 01            [ 1] 3031 	tnz (NLEN,sp)
      001176 27 0B            [ 1] 3032 	jreq no_match  
      001178 90 F1            [ 1] 3033 	cp a,(y)
      00117A 26 07            [ 1] 3034 	jrne no_match 
      00117C 90 5C            [ 1] 3035 	incw y 
      00117E 5C               [ 1] 3036 	incw x
      00117F 0A 01            [ 1] 3037 	dec (NLEN,sp)
      001181 20 EE            [ 2] 3038 	jra cp_loop 
      001183                       3039 no_match:
      001183 16 02            [ 2] 3040 	ldw y,(YSAVE,sp) 
      001185 72 A2 00 02      [ 2] 3041 	subw y,#2 ; move Y to link field
      001189 4B 00            [ 1] 3042 	push #TK_NONE 
      00118B 90 FE            [ 2] 3043 	ldw y,(y) ; next word link 
      00118D 84               [ 1] 3044 	pop a ; TK_NONE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00118E 27 21            [ 1] 3045 	jreq search_exit  ; not found  
                                   3046 ;try next 
      001190 20 D2            [ 2] 3047 	jra search_next
      001192                       3048 str_match:
      001192 16 02            [ 2] 3049 	ldw y,(YSAVE,sp)
      001194 90 F6            [ 1] 3050 	ld a,(y)
      001196 6B 01            [ 1] 3051 	ld (NLEN,sp),a ; needed to test keyword type  
      001198 A4 0F            [ 1] 3052 	and a,#0xf 
                                   3053 ; move y to procedure address field 	
      00119A 4C               [ 1] 3054 	inc a 
      00119B C7 00 0A         [ 1] 3055 	ld acc8,a 
      00119E 72 5F 00 09      [ 1] 3056 	clr acc16 
      0011A2 72 B9 00 09      [ 2] 3057 	addw y,acc16 
      0011A6 90 FE            [ 2] 3058 	ldw y,(y) ; routine entry point 
                                   3059 ;determine keyword type bits 7:6 
      0011A8 7B 01            [ 1] 3060 	ld a,(NLEN,sp)
      0011AA 4E               [ 1] 3061 	swap a 
      0011AB A4 0C            [ 1] 3062 	and a,#0xc
      0011AD 44               [ 1] 3063 	srl a
      0011AE 44               [ 1] 3064 	srl a 
      0011AF AB 06            [ 1] 3065 	add a,#6
      0011B1                       3066 search_exit: 
      0011B1 93               [ 1] 3067 	ldw x,y ; x=routine address 
      0011B2                       3068 	_drop VSIZE 	 
      0011B2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011B4 81               [ 4] 3069 	ret 
                                   3070 
                                   3071 ;---------------------
                                   3072 ; check if next token
                                   3073 ;  is of expected type 
                                   3074 ; input:
                                   3075 ;   A 		 expected token attribute
                                   3076 ;  ouput:
                                   3077 ;   none     if fail call tb_error 
                                   3078 ;--------------------
      0011B5                       3079 expect:
      0011B5 88               [ 1] 3080 	push a 
      0011B6 CD 07 FE         [ 4] 3081 	call next_token 
      0011B9 11 01            [ 1] 3082 	cp a,(1,sp)
      0011BB 27 03            [ 1] 3083 	jreq 1$
      0011BD CC 07 18         [ 2] 3084 	jp syntax_error
      0011C0 84               [ 1] 3085 1$: pop a 
      0011C1 81               [ 4] 3086 	ret 
                                   3087 
                                   3088 
                                   3089 ;-------------------------------
                                   3090 ; parse embedded BASIC routines 
                                   3091 ; arguments list.
                                   3092 ; arg_list::=  rel[','rel]*
                                   3093 ; all arguments are of integer type
                                   3094 ; input:
                                   3095 ;   none
                                   3096 ; output:
                                   3097 ;   A 			number of arguments pushed on dstack  
                                   3098 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                           000001  3099 	ARG_CNT=1 
      0011C2                       3100 arg_list:
      0011C2 4B 00            [ 1] 3101 	push #0  
      0011C4 CD 12 FD         [ 4] 3102 1$: call relation
      0011C7 A1 00            [ 1] 3103 	cp a,#TK_NONE 
      0011C9 27 19            [ 1] 3104 	jreq 5$
      0011CB A1 04            [ 1] 3105 	cp a,#TK_INTGR
      0011CD 26 12            [ 1] 3106 	jrne 4$
      0011CF CD 0F 95         [ 4] 3107 3$: call dpush 
      0011D2 0C 01            [ 1] 3108     inc (ARG_CNT,sp)
      0011D4 CD 07 FE         [ 4] 3109 	call next_token 
      0011D7 A1 00            [ 1] 3110 	cp a,#TK_NONE 
      0011D9 27 09            [ 1] 3111 	jreq 5$ 
      0011DB A1 0D            [ 1] 3112 	cp a,#TK_COMMA 
      0011DD 26 02            [ 1] 3113 	jrne 4$
      0011DF 20 E3            [ 2] 3114 	jra 1$ 
      0011E1 CD 0F 8E         [ 4] 3115 4$:	call unget_token 
      0011E4 84               [ 1] 3116 5$:	pop a 
      0011E5 81               [ 4] 3117 	ret 
                                   3118 
                                   3119 
                                   3120 
                                   3121 ;--------------------------------
                                   3122 ;   BASIC commnands 
                                   3123 ;--------------------------------
                                   3124 
                                   3125 ;--------------------------------
                                   3126 ;  arithmetic and relational 
                                   3127 ;  routines
                                   3128 ;  operators precedence
                                   3129 ;  highest to lowest
                                   3130 ;  operators on same row have 
                                   3131 ;  same precedence and are executed
                                   3132 ;  from left to right.
                                   3133 ;	'*','/','%'
                                   3134 ;   '-','+'
                                   3135 ;   '=','>','<','>=','<=','<>','><'
                                   3136 ;   '<>' and '><' are equivalent for not equal.
                                   3137 ;--------------------------------
                                   3138 
                                   3139 ;---------------------
                                   3140 ; return array element
                                   3141 ; address from @(expr)
                                   3142 ; input:
                                   3143 ;   A 		TK_ARRAY
                                   3144 ; output:
                                   3145 ;   A 		TK_INTGR
                                   3146 ;	X 		element address 
                                   3147 ;----------------------
      0011E6                       3148 get_array_element:
                                   3149 ;	call ddrop 
      0011E6 A6 0B            [ 1] 3150 	ld a,#TK_LPAREN 
      0011E8 CD 11 B5         [ 4] 3151 	call expect
      0011EB CD 12 FD         [ 4] 3152 	call relation 
      0011EE A1 04            [ 1] 3153 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011F0 27 03            [ 1] 3154 	jreq 1$
      0011F2 CC 07 18         [ 2] 3155 	jp syntax_error
      0011F5 89               [ 2] 3156 1$: pushw x 
      0011F6 A6 0C            [ 1] 3157 	ld a,#TK_RPAREN 
      0011F8 CD 11 B5         [ 4] 3158 	call expect
                                   3159 	; check for bounds 
      0011FB 85               [ 2] 3160 	popw x   
      0011FC C3 00 22         [ 2] 3161 	cpw x,array_size 
      0011FF 23 05            [ 2] 3162 	jrule 3$
                                   3163 ; bounds {1..array_size}	
      001201 A6 0A            [ 1] 3164 2$: ld a,#ERR_BAD_VALUE 
      001203 CC 07 1A         [ 2] 3165 	jp tb_error 
      001206 5D               [ 2] 3166 3$: tnzw  x
      001207 27 F8            [ 1] 3167 	jreq 2$ 
      001209 58               [ 2] 3168 	sllw x 
      00120A 89               [ 2] 3169 	pushw x 
      00120B CE 00 20         [ 2] 3170 	ldw x,array_addr  
      00120E 72 F0 01         [ 2] 3171 	subw x,(1,sp)
      001211                       3172 	_drop 2   
      001211 5B 02            [ 2]    1     addw sp,#2 
      001213 A6 04            [ 1] 3173 	ld a,#TK_INTGR
      001215 81               [ 4] 3174 	ret 
                                   3175 
                                   3176 ;***********************************
                                   3177 ;   expression parse,execute 
                                   3178 ;***********************************
                                   3179 ;-----------------------------------
                                   3180 ; factor ::= ['+'|'-'|e] var | @ |
                                   3181 ;			 integer | function |
                                   3182 ;			 '('relation')' 
                                   3183 ; output:
                                   3184 ;   A    token attribute 
                                   3185 ;   X 	 integer
                                   3186 ; ---------------------------------
                           000001  3187 	NEG=1
                           000001  3188 	VSIZE=1
      001216                       3189 factor:
      001216                       3190 	_vars VSIZE 
      001216 52 01            [ 2]    1     sub sp,#VSIZE 
      001218 CD 07 FE         [ 4] 3191 	call next_token
      00121B A1 02            [ 1] 3192 	cp a,#CMD_END 
      00121D 2B 4A            [ 1] 3193 	jrmi 20$
      00121F 6B 01            [ 1] 3194 1$:	ld (NEG,sp),a 
      001221 A4 30            [ 1] 3195 	and a,#TK_GRP_MASK
      001223 A1 10            [ 1] 3196 	cp a,#TK_GRP_ADD 
      001225 27 04            [ 1] 3197 	jreq 2$
      001227 7B 01            [ 1] 3198 	ld a,(NEG,sp)
      001229 20 03            [ 2] 3199 	jra 4$  
      00122B                       3200 2$:	
      00122B CD 07 FE         [ 4] 3201 	call next_token 
      00122E                       3202 4$:	
      00122E A1 07            [ 1] 3203 	cp a,#TK_IFUNC 
      001230 26 03            [ 1] 3204 	jrne 5$ 
      001232 FD               [ 4] 3205 	call (x) 
      001233 20 2B            [ 2] 3206 	jra 18$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001235                       3207 5$:
      001235 A1 04            [ 1] 3208 	cp a,#TK_INTGR
      001237 26 02            [ 1] 3209 	jrne 6$
      001239 20 25            [ 2] 3210 	jra 18$
      00123B                       3211 6$:
      00123B A1 02            [ 1] 3212 	cp a,#TK_ARRAY
      00123D 26 06            [ 1] 3213 	jrne 10$
      00123F CD 11 E6         [ 4] 3214 	call get_array_element
      001242 FE               [ 2] 3215 	ldw x,(x)
      001243 20 1B            [ 2] 3216 	jra 18$ 
      001245                       3217 10$:
      001245 A1 05            [ 1] 3218 	cp a,#TK_VAR 
      001247 26 03            [ 1] 3219 	jrne 12$
      001249 FE               [ 2] 3220 	ldw x,(x)
      00124A 20 14            [ 2] 3221 	jra 18$
      00124C                       3222 12$:			
      00124C A1 0B            [ 1] 3223 	cp a,#TK_LPAREN
      00124E 26 0A            [ 1] 3224 	jrne 16$
      001250 CD 12 FD         [ 4] 3225 	call relation
      001253 A6 0C            [ 1] 3226 	ld a,#TK_RPAREN 
      001255 CD 11 B5         [ 4] 3227 	call expect
      001258 20 06            [ 2] 3228 	jra 18$	
      00125A                       3229 16$:
      00125A CD 0F 8E         [ 4] 3230 	call unget_token
      00125D 4F               [ 1] 3231 	clr a 
      00125E 20 09            [ 2] 3232 	jra 20$ 
      001260                       3233 18$: 
      001260 A6 11            [ 1] 3234 	ld a,#TK_MINUS 
      001262 11 01            [ 1] 3235 	cp a,(NEG,sp)
      001264 26 01            [ 1] 3236 	jrne 19$
      001266 50               [ 2] 3237 	negw x
      001267                       3238 19$:
      001267 A6 04            [ 1] 3239 	ld a,#TK_INTGR
      001269                       3240 20$:
      001269                       3241 	_drop VSIZE
      001269 5B 01            [ 2]    1     addw sp,#VSIZE 
      00126B 81               [ 4] 3242 	ret
                                   3243 
                                   3244 ;-----------------------------------
                                   3245 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3246 ; output:
                                   3247 ;   A    	token attribute 
                                   3248 ;	X		integer
                                   3249 ;-----------------------------------
                           000001  3250 	N1=1
                           000003  3251 	N2=3
                           000005  3252 	MULOP=5
                           000005  3253 	VSIZE=5
      00126C                       3254 term:
      00126C                       3255 	_vars VSIZE
      00126C 52 05            [ 2]    1     sub sp,#VSIZE 
      00126E CD 12 16         [ 4] 3256 	call factor
      001271 A1 02            [ 1] 3257 	cp a,#CMD_END
      001273 2B 41            [ 1] 3258 	jrmi term_exit
      001275                       3259 term01:	 ; check for  operator 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001275 1F 03            [ 2] 3260 	ldw (N2,sp),x  ; save first factor 
      001277 CD 07 FE         [ 4] 3261 	call next_token
      00127A A1 02            [ 1] 3262 	cp a,#2
      00127C 2B 34            [ 1] 3263 	jrmi 9$
      00127E 6B 05            [ 1] 3264 0$:	ld (MULOP,sp),a
      001280 A4 30            [ 1] 3265 	and a,#TK_GRP_MASK
      001282 A1 20            [ 1] 3266 	cp a,#TK_GRP_MULT
      001284 27 07            [ 1] 3267 	jreq 1$
      001286 7B 05            [ 1] 3268 	ld a,(MULOP,sp) 
      001288 CD 0F 8E         [ 4] 3269 	call unget_token 
      00128B 20 25            [ 2] 3270 	jra 9$
      00128D                       3271 1$:	; got *|/|%
      00128D CD 12 16         [ 4] 3272 	call factor
      001290 A1 04            [ 1] 3273 	cp a,#TK_INTGR
      001292 27 03            [ 1] 3274 	jreq 2$ 
      001294 CC 07 18         [ 2] 3275 	jp syntax_error
      001297 1F 01            [ 2] 3276 2$:	ldw (N1,sp),x  
      001299 7B 05            [ 1] 3277 	ld a,(MULOP,sp) 
      00129B A1 20            [ 1] 3278 	cp a,#TK_MULT 
      00129D 26 05            [ 1] 3279 	jrne 3$
      00129F CD 10 91         [ 4] 3280 	call multiply 
      0012A2 20 D1            [ 2] 3281 	jra term01
      0012A4 A1 21            [ 1] 3282 3$: cp a,#TK_DIV 
      0012A6 26 05            [ 1] 3283 	jrne 4$ 
      0012A8 CD 10 D9         [ 4] 3284 	call divide 
      0012AB 20 C8            [ 2] 3285 	jra term01 
      0012AD CD 11 1D         [ 4] 3286 4$: call modulo
      0012B0 20 C3            [ 2] 3287 	jra term01 
      0012B2 1E 03            [ 2] 3288 9$: ldw x,(N2,sp)  
      0012B4 A6 04            [ 1] 3289 	ld a,#TK_INTGR 	
      0012B6                       3290 term_exit:
      0012B6                       3291 	_drop VSIZE 
      0012B6 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012B8 81               [ 4] 3292 	ret 
                                   3293 
                                   3294 ;-------------------------------
                                   3295 ;  expr ::= term [['+'|'-'] term]*
                                   3296 ;  result range {-32768..32767}
                                   3297 ;  output:
                                   3298 ;   A    token attribute 
                                   3299 ;   X	 integer   
                                   3300 ;-------------------------------
                           000001  3301 	N1=1 
                           000003  3302 	N2=3
                           000005  3303 	OP=5 
                           000005  3304 	VSIZE=5 
      0012B9                       3305 expression:
      0012B9                       3306 	_vars VSIZE 
      0012B9 52 05            [ 2]    1     sub sp,#VSIZE 
      0012BB CD 12 6C         [ 4] 3307 	call term
      0012BE A1 02            [ 1] 3308 	cp a,#CMD_END 
      0012C0 2B 38            [ 1] 3309 	jrmi expr_exit 
      0012C2 1F 03            [ 2] 3310 0$:	ldw (N2,sp),x 
      0012C4 CD 07 FE         [ 4] 3311 	call next_token
      0012C7 A1 02            [ 1] 3312 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012C9 2B 2B            [ 1] 3313 	jrmi 9$ 
      0012CB 6B 05            [ 1] 3314 1$:	ld (OP,sp),a  
      0012CD A4 30            [ 1] 3315 	and a,#TK_GRP_MASK
      0012CF A1 10            [ 1] 3316 	cp a,#TK_GRP_ADD 
      0012D1 27 07            [ 1] 3317 	jreq 2$ 
      0012D3 7B 05            [ 1] 3318 	ld a,(OP,sp)
      0012D5 CD 0F 8E         [ 4] 3319 	call unget_token
      0012D8 20 1C            [ 2] 3320 	jra 9$
      0012DA                       3321 2$: 
      0012DA CD 12 6C         [ 4] 3322 	call term
      0012DD A1 04            [ 1] 3323 	cp a,#TK_INTGR 
      0012DF 27 03            [ 1] 3324 	jreq 3$
      0012E1 CC 07 18         [ 2] 3325 	jp syntax_error
      0012E4 1F 01            [ 2] 3326 3$:	ldw (N1,sp),x 
      0012E6 7B 05            [ 1] 3327 	ld a,(OP,sp)
      0012E8 A1 10            [ 1] 3328 	cp a,#TK_PLUS 
      0012EA 26 05            [ 1] 3329 	jrne 4$
      0012EC CD 10 83         [ 4] 3330 	call add 
      0012EF 20 D1            [ 2] 3331 	jra 0$ 
      0012F1 CD 10 8B         [ 4] 3332 4$:	call substract
      0012F4 20 CC            [ 2] 3333 	jra 0$
      0012F6 1E 03            [ 2] 3334 9$: ldw x,(N2,sp)
      0012F8 A6 04            [ 1] 3335 	ld a,#TK_INTGR	
      0012FA                       3336 expr_exit:
      0012FA                       3337 	_drop VSIZE 
      0012FA 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012FC 81               [ 4] 3338 	ret 
                                   3339 
                                   3340 ;---------------------------------------------
                                   3341 ; rel ::= expr rel_op expr
                                   3342 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3343 ;  relation return 1 | 0  for true | false 
                                   3344 ;  output:
                                   3345 ;    A 		token attribute  
                                   3346 ;	 X		1|0
                                   3347 ;---------------------------------------------
                           000001  3348 	N1=1
                           000003  3349 	N2=3
                           000005  3350 	RELOP=5
                           000005  3351 	VSIZE=5 
      0012FD                       3352 relation: 
      0012FD                       3353 	_vars VSIZE
      0012FD 52 05            [ 2]    1     sub sp,#VSIZE 
      0012FF CD 12 B9         [ 4] 3354 	call expression
      001302 A1 02            [ 1] 3355 	cp a,#CMD_END  
      001304 2B 4B            [ 1] 3356 	jrmi rel_exit 
                                   3357 	; expect rel_op or leave 
      001306 1F 03            [ 2] 3358 	ldw (N2,sp),x 
      001308 CD 07 FE         [ 4] 3359 	call next_token 
      00130B A1 02            [ 1] 3360 	cp a,#2
      00130D 2B 3E            [ 1] 3361 	jrmi 9$
      00130F                       3362 1$:	
      00130F 6B 05            [ 1] 3363 	ld (RELOP,sp),a 
      001311 A4 30            [ 1] 3364 	and a,#TK_GRP_MASK
      001313 A1 30            [ 1] 3365 	cp a,#TK_GRP_RELOP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001315 27 07            [ 1] 3366 	jreq 2$
      001317 7B 05            [ 1] 3367 	ld a,(RELOP,sp)
      001319 CD 0F 8E         [ 4] 3368 	call unget_token  
      00131C 20 2F            [ 2] 3369 	jra 9$
      00131E                       3370 2$:	; expect another expression or error 
      00131E CD 12 B9         [ 4] 3371 	call expression
      001321 A1 04            [ 1] 3372 	cp a,#TK_INTGR 
      001323 27 03            [ 1] 3373 	jreq 3$
      001325 CC 07 18         [ 2] 3374 	jp syntax_error 
      001328 1F 01            [ 2] 3375 3$:	ldw (N1,sp),x 
      00132A CD 10 8B         [ 4] 3376 	call substract
      00132D 26 06            [ 1] 3377 	jrne 4$
      00132F 35 02 00 0A      [ 1] 3378 	mov acc8,#2 ; n1==n2
      001333 20 0C            [ 2] 3379 	jra 6$ 
      001335                       3380 4$: 
      001335 2C 06            [ 1] 3381 	jrsgt 5$  
      001337 35 04 00 0A      [ 1] 3382 	mov acc8,#4 ; n1<2 
      00133B 20 04            [ 2] 3383 	jra 6$
      00133D                       3384 5$:
      00133D 35 01 00 0A      [ 1] 3385 	mov acc8,#1 ; n1>n2 
      001341                       3386 6$:
      001341 5F               [ 1] 3387 	clrw x 
      001342 C6 00 0A         [ 1] 3388 	ld a, acc8  
      001345 14 05            [ 1] 3389 	and a,(RELOP,sp)
      001347 4D               [ 1] 3390 	tnz a 
      001348 27 05            [ 1] 3391 	jreq 10$
      00134A 5C               [ 1] 3392 	incw x 
      00134B                       3393 7$:	 
      00134B 20 02            [ 2] 3394 	jra 10$  	
      00134D 1E 03            [ 2] 3395 9$: ldw x,(N2,sp)
      00134F                       3396 10$:
      00134F A6 04            [ 1] 3397 	ld a,#TK_INTGR
      001351                       3398 rel_exit: 	 
      001351                       3399 	_drop VSIZE
      001351 5B 05            [ 2]    1     addw sp,#VSIZE 
      001353 81               [ 4] 3400 	ret 
                                   3401 
                                   3402 ;--------------------------------
                                   3403 ; BASIC: SHOW 
                                   3404 ;  show content of dstack,cstack
                                   3405 ;--------------------------------
      001354                       3406 show:
      001354 C6 00 07         [ 1] 3407 	ld a,base 
      001357 88               [ 1] 3408 	push a 
      001358 CD 10 23         [ 4] 3409 	call dots
      00135B CD 10 56         [ 4] 3410 	call dotr 
      00135E 84               [ 1] 3411 	pop a 
      00135F C7 00 07         [ 1] 3412 	ld base,a 
      001362 4F               [ 1] 3413 	clr a 
      001363 81               [ 4] 3414 	ret
                                   3415 
                                   3416 ;--------------------------------------------
                                   3417 ; BASIC: HEX 
                                   3418 ; select hexadecimal base for integer print
                                   3419 ;---------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001364                       3420 hex_base:
      001364 35 10 00 07      [ 1] 3421 	mov base,#16 
      001368 81               [ 4] 3422 	ret 
                                   3423 
                                   3424 ;--------------------------------------------
                                   3425 ; BASIC: DEC 
                                   3426 ; select decimal base for integer print
                                   3427 ;---------------------------------------------
      001369                       3428 dec_base:
      001369 35 0A 00 07      [ 1] 3429 	mov base,#10
      00136D 81               [ 4] 3430 	ret 
                                   3431 
                                   3432 ;------------------------
                                   3433 ; BASIC: SIZE 
                                   3434 ; return free size in text area
                                   3435 ; output:
                                   3436 ;   A 		TK_INTGR
                                   3437 ;   X 	    size integer
                                   3438 ;--------------------------
      00136E                       3439 size:
      00136E AE 16 C8         [ 2] 3440 	ldw x,#tib 
      001371 72 B0 00 1D      [ 2] 3441 	subw x,txtend 
      001375 A6 04            [ 1] 3442 	ld a,#TK_INTGR
      001377 81               [ 4] 3443 	ret 
                                   3444 
                                   3445 
                                   3446 ;------------------------
                                   3447 ; BASIC: UBOUND  
                                   3448 ; return array variable size 
                                   3449 ; output:
                                   3450 ;   A 		TK_INTGR
                                   3451 ;   X 	    array size 
                                   3452 ;--------------------------
      001378                       3453 ubound:
      001378 AE 16 C8         [ 2] 3454 	ldw x,#tib
      00137B 72 B0 00 1D      [ 2] 3455 	subw x,txtend 
      00137F 54               [ 2] 3456 	srlw x 
      001380 CF 00 22         [ 2] 3457 	ldw array_size,x
      001383 A6 04            [ 1] 3458 	ld a,#TK_INTGR
      001385 81               [ 4] 3459 	ret 
                                   3460 
                                   3461 ;-----------------------------
                                   3462 ; BASIC: LET var=expr 
                                   3463 ; variable assignement 
                                   3464 ; output:
                                   3465 ;   A 		TK_NONE 
                                   3466 ;-----------------------------
      001386                       3467 let:
      001386 CD 07 FE         [ 4] 3468 	call next_token 
      001389 A1 05            [ 1] 3469 	cp a,#TK_VAR 
      00138B 27 03            [ 1] 3470 	jreq let02
      00138D CC 07 18         [ 2] 3471 	jp syntax_error
      001390                       3472 let02:
      001390 CD 0F 95         [ 4] 3473 	call dpush 
      001393 CD 07 FE         [ 4] 3474 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001396 A1 32            [ 1] 3475 	cp a,#TK_EQUAL
      001398 27 03            [ 1] 3476 	jreq 1$
      00139A CC 07 18         [ 2] 3477 	jp syntax_error
      00139D                       3478 1$:	
      00139D CD 12 FD         [ 4] 3479 	call relation   
      0013A0 A1 04            [ 1] 3480 	cp a,#TK_INTGR 
      0013A2 27 03            [ 1] 3481 	jreq 2$
      0013A4 CC 07 18         [ 2] 3482 	jp syntax_error
      0013A7                       3483 2$:	
      0013A7 90 93            [ 1] 3484 	ldw y,x 
      0013A9 CD 0F A2         [ 4] 3485 	call dpop  
      0013AC FF               [ 2] 3486 	ldw (x),y   
      0013AD 81               [ 4] 3487 	ret 
                                   3488 
                                   3489 ;----------------------------
                                   3490 ; BASIC: LIST [[start][,end]]
                                   3491 ; list program lines 
                                   3492 ; form start to end 
                                   3493 ; if empty argument list then 
                                   3494 ; list all.
                                   3495 ;----------------------------
                           000001  3496 	FIRST=1
                           000003  3497 	LAST=3 
                           000005  3498 	LN_PTR=5
                           000006  3499 	VSIZE=6 
      0013AE                       3500 list:
      0013AE                       3501 	_vars VSIZE
      0013AE 52 06            [ 2]    1     sub sp,#VSIZE 
      0013B0 CE 00 1B         [ 2] 3502 	ldw x,txtbgn 
      0013B3 C3 00 1D         [ 2] 3503 	cpw x,txtend 
      0013B6 2B 03            [ 1] 3504 	jrmi 1$
      0013B8 CC 14 2E         [ 2] 3505 	jp list_exit ; nothing to list 
      0013BB 1F 05            [ 2] 3506 1$:	ldw (LN_PTR,sp),x 
      0013BD FE               [ 2] 3507 	ldw x,(x) 
      0013BE 1F 01            [ 2] 3508 	ldw (FIRST,sp),x ; list from first line 
      0013C0 AE 7F FF         [ 2] 3509 	ldw x,#0x7fff ; biggest line number 
      0013C3 1F 03            [ 2] 3510 	ldw (LAST,sp),x 
      0013C5 CD 11 C2         [ 4] 3511 	call arg_list
      0013C8 4D               [ 1] 3512 	tnz a
      0013C9 27 3F            [ 1] 3513 	jreq list_start 
      0013CB A1 02            [ 1] 3514 	cp a,#2 
      0013CD 27 07            [ 1] 3515 	jreq 4$
      0013CF A1 01            [ 1] 3516 	cp a,#1 
      0013D1 27 06            [ 1] 3517 	jreq first_line 
      0013D3 CC 07 18         [ 2] 3518 	jp syntax_error 
      0013D6 CD 0F AF         [ 4] 3519 4$:	call dswap
      0013D9                       3520 first_line:
      0013D9 CD 0F A2         [ 4] 3521 	call dpop 
      0013DC 1F 01            [ 2] 3522 	ldw (FIRST,sp),x 
      0013DE A1 01            [ 1] 3523 	cp a,#1 
      0013E0 27 05            [ 1] 3524 	jreq lines_skip 	
      0013E2                       3525 last_line:
      0013E2 CD 0F A2         [ 4] 3526 	call dpop 
      0013E5 1F 03            [ 2] 3527 	ldw (LAST,sp),x 
      0013E7                       3528 lines_skip:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013E7 CE 00 1B         [ 2] 3529 	ldw x,txtbgn
      0013EA 1F 05            [ 2] 3530 2$:	ldw (LN_PTR,sp),x 
      0013EC C3 00 1D         [ 2] 3531 	cpw x,txtend 
      0013EF 2A 3D            [ 1] 3532 	jrpl list_exit 
      0013F1 FE               [ 2] 3533 	ldw x,(x) ;lineno 
      0013F2 13 01            [ 2] 3534 	cpw x,(FIRST,sp)
      0013F4 2A 14            [ 1] 3535 	jrpl list_start 
      0013F6 1E 05            [ 2] 3536 	ldw x,(LN_PTR,sp) 
      0013F8 1C 00 02         [ 2] 3537 	addw x,#2 
      0013FB F6               [ 1] 3538 	ld a,(x)
      0013FC 5C               [ 1] 3539 	incw x 
      0013FD C7 00 0A         [ 1] 3540 	ld acc8,a 
      001400 72 5F 00 09      [ 1] 3541 	clr acc16 
      001404 72 BB 00 09      [ 2] 3542 	addw x,acc16
      001408 20 E0            [ 2] 3543 	jra 2$ 
                                   3544 ; print loop
      00140A                       3545 list_start:
      00140A 1E 05            [ 2] 3546 	ldw x,(LN_PTR,sp)
      00140C                       3547 3$:	
      00140C CD 14 81         [ 4] 3548 	call prt_basic_line
      00140F 1E 05            [ 2] 3549 	ldw x,(LN_PTR,sp)
      001411 E6 02            [ 1] 3550 	ld a,(2,x)
      001413 C7 00 0A         [ 1] 3551 	ld acc8,a 
      001416 72 5F 00 09      [ 1] 3552 	clr acc16 
      00141A 72 BB 00 09      [ 2] 3553 	addw x,acc16
      00141E C3 00 1D         [ 2] 3554 	cpw x,txtend 
      001421 2A 0B            [ 1] 3555 	jrpl list_exit
      001423 1F 05            [ 2] 3556 	ldw (LN_PTR,sp),x
      001425 FE               [ 2] 3557 	ldw x,(x)
      001426 13 03            [ 2] 3558 	cpw x,(LAST,sp)  
      001428 2C 04            [ 1] 3559 	jrsgt list_exit 
      00142A 1E 05            [ 2] 3560 	ldw x,(LN_PTR,sp)
      00142C 20 DE            [ 2] 3561 	jra 3$
      00142E                       3562 list_exit:
      00142E                       3563 	_drop VSIZE 
      00142E 5B 06            [ 2]    1     addw sp,#VSIZE 
      001430 81               [ 4] 3564 	ret
                                   3565 
                                   3566 ;-------------------------
                                   3567 ; print counted string 
                                   3568 ; input:
                                   3569 ;   X 		address of string
                                   3570 ;--------------------------
      001431                       3571 prt_cmd_name:
      001431 F6               [ 1] 3572 	ld a,(x)
      001432 5C               [ 1] 3573 	incw x
      001433 A4 0F            [ 1] 3574 	and a,#15  
      001435 88               [ 1] 3575 	push a 
      001436 0D 01            [ 1] 3576 1$: tnz (1,sp) 
      001438 27 09            [ 1] 3577 	jreq 9$
      00143A F6               [ 1] 3578 	ld a,(x)
      00143B CD 01 9E         [ 4] 3579 	call putc 
      00143E 5C               [ 1] 3580 	incw x
      00143F 0A 01            [ 1] 3581 	dec (1,sp)	 
      001441 20 F3            [ 2] 3582 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001443 84               [ 1] 3583 9$: pop a 
      001444 81               [ 4] 3584 	ret	
                                   3585 
                                   3586 ;--------------------------
                                   3587 ; print TK_QSTR
                                   3588 ; converting control character
                                   3589 ; to backslash sequence
                                   3590 ; input:
                                   3591 ;   X        char *
                                   3592 ;-----------------------------
      001445                       3593 prt_quote:
      001445 A6 22            [ 1] 3594 	ld a,#'"
      001447 CD 01 9E         [ 4] 3595 	call putc 
      00144A F6               [ 1] 3596 1$:	ld a,(x)
      00144B 27 2D            [ 1] 3597 	jreq 9$
      00144D 5C               [ 1] 3598 	incw x 
      00144E A1 20            [ 1] 3599 	cp a,#SPACE 
      001450 25 0C            [ 1] 3600 	jrult 3$
      001452 CD 01 9E         [ 4] 3601 	call putc
      001455 A1 5C            [ 1] 3602 	cp a,#'\ 
      001457 26 F1            [ 1] 3603 	jrne 1$ 
      001459                       3604 2$:
      001459 CD 01 9E         [ 4] 3605 	call putc 
      00145C 20 EC            [ 2] 3606 	jra 1$
      00145E 88               [ 1] 3607 3$: push a 
      00145F A6 5C            [ 1] 3608 	ld a,#'\
      001461 CD 01 9E         [ 4] 3609 	call putc 
      001464 84               [ 1] 3610 	pop a 
      001465 A0 07            [ 1] 3611 	sub a,#7
      001467 C7 00 0A         [ 1] 3612 	ld acc8,a 
      00146A 72 5F 00 09      [ 1] 3613 	clr acc16
      00146E 90 AE 0C 5F      [ 2] 3614 	ldw y,#escaped 
      001472 72 B9 00 09      [ 2] 3615 	addw y,acc16 
      001476 90 F6            [ 1] 3616 	ld a,(y)
      001478 20 DF            [ 2] 3617 	jra 2$
      00147A A6 22            [ 1] 3618 9$: ld a,#'"
      00147C CD 01 9E         [ 4] 3619 	call putc 
      00147F 5C               [ 1] 3620 	incw x 
      001480 81               [ 4] 3621 	ret
                                   3622 
                                   3623 
                                   3624 ;--------------------------
                                   3625 ; decompile line from token list 
                                   3626 ; input:
                                   3627 ;   X 		pointer at line
                                   3628 ; output:
                                   3629 ;   none 
                                   3630 ;--------------------------	
                           000001  3631 	BASE_SAV=1
                           000002  3632 	WIDTH_SAV=2
                           000003  3633 	XSAVE=3
                           000005  3634 	LLEN=5
                           000005  3635 	VSIZE=5 
      001481                       3636 prt_basic_line:
      001481                       3637 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001481 52 05            [ 2]    1     sub sp,#VSIZE 
      001483 C6 00 07         [ 1] 3638 	ld a,base
      001486 6B 01            [ 1] 3639 	ld (BASE_SAV,sp),a  
      001488 C6 00 25         [ 1] 3640 	ld a,tab_width 
      00148B 6B 02            [ 1] 3641 	ld (WIDTH_SAV,sp),a 
      00148D CF 00 14         [ 2] 3642 	ldw ptr16,x
      001490 FE               [ 2] 3643 	ldw x,(x)
      001491 35 0A 00 07      [ 1] 3644 	mov base,#10
      001495 35 05 00 25      [ 1] 3645 	mov tab_width,#5
      001499 CD 09 9D         [ 4] 3646 	call print_int ; print line number 
      00149C A6 20            [ 1] 3647 	ld a,#SPACE 
      00149E CD 01 9E         [ 4] 3648 	call putc 
      0014A1 72 5F 00 25      [ 1] 3649 	clr tab_width
      0014A5 AE 00 02         [ 2] 3650 	ldw x,#2
      0014A8 72 D6 00 14      [ 4] 3651 	ld a,([ptr16],x)
      0014AC 6B 05            [ 1] 3652 	ld (LLEN,sp),a 
      0014AE 5C               [ 1] 3653 	incw x
      0014AF 9F               [ 1] 3654 1$:	ld a,xl 
      0014B0 11 05            [ 1] 3655 	cp a,(LLEN,sp)
      0014B2 2B 03            [ 1] 3656 	jrmi 20$
      0014B4 CC 15 BE         [ 2] 3657 	jp 90$
      0014B7                       3658 20$:	 
      0014B7 72 D6 00 14      [ 4] 3659 	ld a,([ptr16],x)
      0014BB 5C               [ 1] 3660 	incw x 
      0014BC 1F 03            [ 2] 3661 	ldw (XSAVE,sp),x 
      0014BE A1 06            [ 1] 3662 	cp a,#TK_CMD 
      0014C0 25 44            [ 1] 3663 	jrult 5$
      0014C2 A1 09            [ 1] 3664 	cp a,#TK_SFUNC 
      0014C4 22 2F            [ 1] 3665 	jrugt 4$
      0014C6                       3666 2$:	
      0014C6 72 DE 00 14      [ 5] 3667 	ldw x,([ptr16],x)
      0014CA A3 17 01         [ 2] 3668 	cpw x,#rem 
      0014CD 26 14            [ 1] 3669 	jrne 3$
      0014CF A6 27            [ 1] 3670 	ld a,#''
      0014D1 CD 01 9E         [ 4] 3671 	call putc 
      0014D4 1E 03            [ 2] 3672 	ldw x,(XSAVE,sp)
      0014D6 1C 00 02         [ 2] 3673 	addw x,#2
      0014D9 72 BB 00 14      [ 2] 3674 	addw x,ptr16  
      0014DD CD 01 B0         [ 4] 3675 	call puts 
      0014E0 CC 15 BE         [ 2] 3676 	jp 90$ 
      0014E3 CD 11 2E         [ 4] 3677 3$:	call cmd_name
      0014E6 CD 14 31         [ 4] 3678 	call prt_cmd_name
      0014E9 A6 20            [ 1] 3679 	ld a,#SPACE 
      0014EB CD 01 9E         [ 4] 3680 	call putc 
      0014EE 1E 03            [ 2] 3681 	ldw x,(XSAVE,sp)
      0014F0 1C 00 02         [ 2] 3682 	addw x,#2
      0014F3 20 BA            [ 2] 3683 	jra 1$
      0014F5 A1 0A            [ 1] 3684 4$: cp a,#TK_QSTR 
      0014F7 26 0D            [ 1] 3685 	jrne 5$
      0014F9 72 BB 00 14      [ 2] 3686 	addw x,ptr16
      0014FD CD 14 45         [ 4] 3687 	call prt_quote 
      001500 72 B0 00 14      [ 2] 3688 	subw x,ptr16  
      001504 20 A9            [ 2] 3689 	jra 1$
      001506 A1 05            [ 1] 3690 5$:	cp a,#TK_VAR
      001508 26 1A            [ 1] 3691 	jrne 6$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00150A 72 DE 00 14      [ 5] 3692 	ldw x,([ptr16],x)
      00150E 1D 00 26         [ 2] 3693 	subw x,#vars 
      001511 9F               [ 1] 3694 	ld a,xl
      001512 44               [ 1] 3695 	srl a 
      001513 AB 41            [ 1] 3696 	add a,#'A 
      001515 CD 01 9E         [ 4] 3697 	call putc 
      001518 A6 20            [ 1] 3698 	ld a,#SPACE 
      00151A CD 01 9E         [ 4] 3699 	call putc 
      00151D 1E 03            [ 2] 3700 	ldw x,(XSAVE,sp)
      00151F 1C 00 02         [ 2] 3701 	addw x,#2 
      001522 20 8B            [ 2] 3702 	jra 1$ 
      001524 A1 02            [ 1] 3703 6$: cp a,#TK_ARRAY 
      001526 26 0A            [ 1] 3704 	jrne 7$
      001528 A6 40            [ 1] 3705 	ld a,#'@ 
      00152A CD 01 9E         [ 4] 3706 	call putc 
      00152D 1E 03            [ 2] 3707 	ldw x,(XSAVE,sp)
      00152F CC 14 AF         [ 2] 3708 	jp 1$ 
      001532 A1 04            [ 1] 3709 7$: cp a,#TK_INTGR 
      001534 26 14            [ 1] 3710 	jrne 8$
      001536 72 DE 00 14      [ 5] 3711 	ldw x,([ptr16],x)
      00153A CD 09 9D         [ 4] 3712 	call print_int
      00153D A6 20            [ 1] 3713 	ld a,#SPACE 
      00153F CD 01 9E         [ 4] 3714 	call putc 
      001542 1E 03            [ 2] 3715 	ldw x,(XSAVE,sp)
      001544 1C 00 02         [ 2] 3716 	addw x,#2 
      001547 CC 14 AF         [ 2] 3717 	jp 1$
      00154A A1 31            [ 1] 3718 8$: cp a,#TK_GT 
      00154C 2B 1A            [ 1] 3719 	jrmi 9$
      00154E A1 35            [ 1] 3720 	cp a,#TK_NE 
      001550 22 16            [ 1] 3721 	jrugt 9$
      001552 A0 31            [ 1] 3722 	sub a,#TK_GT  
      001554 48               [ 1] 3723 	sll a 
      001555 90 5F            [ 1] 3724 	clrw y 
      001557 90 97            [ 1] 3725 	ld yl,a 
      001559 72 A9 15 D7      [ 2] 3726 	addw y,#relop_str 
      00155D 90 FE            [ 2] 3727 	ldw y,(y)
      00155F 93               [ 1] 3728 	ldw x,y 
      001560 CD 01 B0         [ 4] 3729 	call puts 
      001563 1E 03            [ 2] 3730 	ldw x,(XSAVE,sp)
      001565 CC 14 AF         [ 2] 3731 	jp 1$
      001568 A1 10            [ 1] 3732 9$: cp a,#TK_PLUS 
      00156A 26 04            [ 1] 3733 	jrne 10$
      00156C A6 2B            [ 1] 3734 	ld a,#'+
      00156E 20 46            [ 2] 3735 	jra 80$ 
      001570 A1 11            [ 1] 3736 10$: cp a,#TK_MINUS
      001572 26 04            [ 1] 3737 	jrne 11$
      001574 A6 2D            [ 1] 3738 	ld a,#'-
      001576 20 3E            [ 2] 3739 	jra 80$
      001578 A1 20            [ 1] 3740 11$: cp a,#TK_MULT 
      00157A 2B 0E            [ 1] 3741 	jrmi 12$
      00157C A1 22            [ 1] 3742 	cp a,#TK_MOD 
      00157E 22 0A            [ 1] 3743 	jrugt 12$
      001580 A0 20            [ 1] 3744 	sub a,#0x20
      001582 5F               [ 1] 3745 	clrw x 
      001583 97               [ 1] 3746 	ld xl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001584 1C 15 D4         [ 2] 3747 	addw x,#mul_char 
      001587 F6               [ 1] 3748 	ld a,(x)
      001588 20 2C            [ 2] 3749 	jra 80$ 
      00158A A1 0B            [ 1] 3750 12$: cp a,#TK_LPAREN 
      00158C 2B 0E            [ 1] 3751 	jrmi 13$
      00158E A1 0E            [ 1] 3752 	cp a,#TK_SHARP 
      001590 22 0A            [ 1] 3753 	jrugt 13$
      001592 A0 0B            [ 1] 3754 	sub a,#TK_LPAREN
      001594 5F               [ 1] 3755 	clrw x 
      001595 97               [ 1] 3756 	ld xl,a 
      001596 1C 15 D0         [ 2] 3757 	addw x,#single_char 
      001599 F6               [ 1] 3758 	ld a,(x)
      00159A 20 1A            [ 2] 3759 	jra 80$
      00159C A1 03            [ 1] 3760 13$: cp a,#TK_CHAR 
      00159E 26 14            [ 1] 3761 	jrne 14$
      0015A0 A6 5C            [ 1] 3762 	ld a,#'\
      0015A2 CD 01 9E         [ 4] 3763 	call putc 
      0015A5 1E 03            [ 2] 3764 	ldw x,(XSAVE,sp)
      0015A7 72 D6 00 14      [ 4] 3765 	ld a,([ptr16],x)
      0015AB 5C               [ 1] 3766 	incw x 
      0015AC 1F 03            [ 2] 3767 	ldw (XSAVE,sp),x 
      0015AE CD 01 9E         [ 4] 3768 	call putc 
      0015B1 CC 14 AF         [ 2] 3769 	jp 1$ 
      0015B4 A6 3A            [ 1] 3770 14$: ld a,#':
      0015B6 CD 01 9E         [ 4] 3771 80$: call putc 
      0015B9 1E 03            [ 2] 3772 	ldw x,(XSAVE,sp)
      0015BB CC 14 AF         [ 2] 3773 	jp 1$ 
      0015BE                       3774 90$: 
      0015BE A6 0D            [ 1] 3775 	ld a,#CR 
      0015C0 CD 01 9E         [ 4] 3776 	call putc
      0015C3 7B 02            [ 1] 3777 	ld a,(WIDTH_SAV,sp) 
      0015C5 C7 00 25         [ 1] 3778 	ld tab_width,a 
      0015C8 7B 01            [ 1] 3779 	ld a,(BASE_SAV,sp) 
      0015CA C7 00 07         [ 1] 3780 	ld base,a
      0015CD                       3781 	_drop VSIZE 
      0015CD 5B 05            [ 2]    1     addw sp,#VSIZE 
      0015CF 81               [ 4] 3782 	ret 	
      0015D0 28 29 2C 23           3783 single_char: .byte '(',')',',','#'
      0015D4 2A 2F 25              3784 mul_char: .byte '*','/','%'
      0015D7 15 E3 15 E5 15 E7 15  3785 relop_str: .word gt,equal,ge,lt,le,ne 
             EA 15 EC 15 EF
      0015E3 3E 00                 3786 gt: .asciz ">"
      0015E5 3D 00                 3787 equal: .asciz "="
      0015E7 3E 3D 00              3788 ge: .asciz ">="
      0015EA 3C 00                 3789 lt: .asciz "<"
      0015EC 3C 3D 00              3790 le: .asciz "<="
      0015EF 3C 3E 00              3791 ne:  .asciz "<>"
                                   3792 
                                   3793 
                                   3794 ;---------------------------------
                                   3795 ; BASIC: PRINT|? arg_list 
                                   3796 ; print values from argument list
                                   3797 ;----------------------------------
                           000001  3798 	COMMA=1
                           000001  3799 	VSIZE=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015F2                       3800 print:
      0015F2 4B 00            [ 1] 3801 push #0 ; local variable COMMA 
      0015F4                       3802 reset_comma:
      0015F4 0F 01            [ 1] 3803 	clr (COMMA,sp)
      0015F6                       3804 prt_loop:
      0015F6 CD 12 FD         [ 4] 3805 	call relation 
      0015F9 A1 01            [ 1] 3806 	cp a,#TK_COLON 
      0015FB 27 5A            [ 1] 3807 	jreq print_exit   
      0015FD A1 04            [ 1] 3808 	cp a,#TK_INTGR 
      0015FF 26 05            [ 1] 3809 	jrne 0$ 
      001601 CD 09 9D         [ 4] 3810 	call print_int 
      001604 20 EE            [ 2] 3811 	jra reset_comma
      001606                       3812 0$: 	
      001606 CD 07 FE         [ 4] 3813 	call next_token
      001609 A1 00            [ 1] 3814 	cp a,#TK_NONE 
      00160B 27 4A            [ 1] 3815 	jreq print_exit 
      00160D A1 0A            [ 1] 3816 1$:	cp a,#TK_QSTR
      00160F 26 0E            [ 1] 3817 	jrne 2$   
      001611 CD 01 B0         [ 4] 3818 	call puts
      001614 5C               [ 1] 3819 	incw x 
      001615 72 B0 00 03      [ 2] 3820 	subw x,basicptr 
      001619 9F               [ 1] 3821 	ld a,xl 
      00161A C7 00 01         [ 1] 3822 	ld in,a  
      00161D 20 D5            [ 2] 3823 	jra reset_comma
      00161F A1 03            [ 1] 3824 2$: cp a,#TK_CHAR 
      001621 26 06            [ 1] 3825 	jrne 3$
      001623 9F               [ 1] 3826 	ld a,xl 
      001624 CD 01 9E         [ 4] 3827 	call putc 
      001627 20 CB            [ 2] 3828 	jra reset_comma 
      001629                       3829 3$: 	
      001629 A1 08            [ 1] 3830 	cp a,#TK_CFUNC 
      00162B 26 07            [ 1] 3831 	jrne 4$ 
      00162D FD               [ 4] 3832 	call (x)
      00162E 9F               [ 1] 3833 	ld a,xl 
      00162F CD 01 9E         [ 4] 3834 	call putc
      001632 20 C0            [ 2] 3835 	jra reset_comma 
      001634                       3836 4$: 
      001634 A1 0D            [ 1] 3837 	cp a,#TK_COMMA 
      001636 26 05            [ 1] 3838 	jrne 5$
      001638 03 01            [ 1] 3839 	cpl (COMMA,sp) 
      00163A CC 15 F6         [ 2] 3840 	jp prt_loop   
      00163D                       3841 5$: 
      00163D A1 0E            [ 1] 3842 	cp a,#TK_SHARP
      00163F 26 13            [ 1] 3843 	jrne 7$
      001641 CD 07 FE         [ 4] 3844 	call next_token
      001644 A1 04            [ 1] 3845 	cp a,#TK_INTGR 
      001646 27 03            [ 1] 3846 	jreq 6$
      001648 CC 07 18         [ 2] 3847 	jp syntax_error 
      00164B                       3848 6$:
      00164B 9F               [ 1] 3849 	ld a,xl 
      00164C A4 0F            [ 1] 3850 	and a,#15 
      00164E C7 00 25         [ 1] 3851 	ld tab_width,a 
      001651 CC 15 F4         [ 2] 3852 	jp reset_comma 
      001654                       3853 7$:	
      001654 CD 0F 8E         [ 4] 3854 	call unget_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001657                       3855 print_exit:
      001657 0D 01            [ 1] 3856 	tnz (COMMA,sp)
      001659 26 05            [ 1] 3857 	jrne 9$
      00165B A6 0D            [ 1] 3858 	ld a,#CR 
      00165D CD 01 9E         [ 4] 3859     call putc 
      001660                       3860 9$:	_drop VSIZE 
      001660 5B 01            [ 2]    1     addw sp,#VSIZE 
      001662 81               [ 4] 3861 	ret 
                                   3862 
                                   3863 ;----------------------
                                   3864 ; 'save_context' and
                                   3865 ; 'rest_context' must be 
                                   3866 ; called at the same 
                                   3867 ; call stack depth 
                                   3868 ; i.e. SP must have the 
                                   3869 ; save value at  
                                   3870 ; entry point of both 
                                   3871 ; routine. 
                                   3872 ;---------------------
                           000006  3873 	CTXT_SIZE=6 ; size of saved data 
                                   3874 ;--------------------
                                   3875 ; save current BASIC
                                   3876 ; interpreter context 
                                   3877 ; on cstack 
                                   3878 ;--------------------
      001663                       3879 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001663                       3880 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001663                       3881 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001663                       3882 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001663                       3883 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      001663                       3884 save_context:
      001663 CE 00 03         [ 2] 3885 	ldw x,basicptr 
      001666 1F 03            [ 2] 3886 	ldw (BPTR,sp),x
      001668 CE 00 05         [ 2] 3887 	ldw x,lineno 
      00166B 1F 05            [ 2] 3888 	ldw (LNO,sp),x 
      00166D C6 00 01         [ 1] 3889 	ld a,in 
      001670 6B 07            [ 1] 3890 	ld (IN,sp),a
      001672 C6 00 02         [ 1] 3891 	ld a,count 
      001675 6B 08            [ 1] 3892 	ld (CNT,sp),a  
      001677 81               [ 4] 3893 	ret
                                   3894 
                                   3895 ;-----------------------
                                   3896 ; restore previously saved 
                                   3897 ; BASIC interpreter context 
                                   3898 ; from cstack 
                                   3899 ;-------------------------
      001678                       3900 rest_context:
      001678 1E 03            [ 2] 3901 	ldw x,(BPTR,sp)
      00167A CF 00 03         [ 2] 3902 	ldw basicptr,x 
      00167D 1E 05            [ 2] 3903 	ldw x,(LNO,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00167F CF 00 05         [ 2] 3904 	ldw lineno,x 
      001682 7B 07            [ 1] 3905 	ld a,(IN,sp)
      001684 C7 00 01         [ 1] 3906 	ld in,a
      001687 7B 08            [ 1] 3907 	ld a,(CNT,sp)
      001689 C7 00 02         [ 1] 3908 	ld count,a  
      00168C 81               [ 4] 3909 	ret
                                   3910 
                                   3911 ;------------------------------------------
                                   3912 ; BASIC: INPUT [string],var[,[string],var]
                                   3913 ; input value in variables 
                                   3914 ; [string] optionally can be used as prompt 
                                   3915 ;-----------------------------------------
                           000001  3916 	CX_BPTR=1
                           000003  3917 	CX_LNO=3
                           000004  3918 	CX_IN=4
                           000005  3919 	CX_CNT=5
                           000006  3920 	SKIP=6
                           000007  3921 	VSIZE=7
      00168D                       3922 input_var:
      00168D 72 00 00 24 05   [ 2] 3923 	btjt flags,#FRUN,1$ 
      001692 A6 06            [ 1] 3924 	ld a,#ERR_RUN_ONLY 
      001694 CC 07 1A         [ 2] 3925 	jp tb_error 
      001697                       3926 1$:	_vars VSIZE 
      001697 52 07            [ 2]    1     sub sp,#VSIZE 
      001699                       3927 input_loop:
      001699 0F 06            [ 1] 3928 	clr (SKIP,sp)
      00169B CD 07 FE         [ 4] 3929 	call next_token 
      00169E A1 00            [ 1] 3930 	cp a,#TK_NONE 
      0016A0 27 5C            [ 1] 3931 	jreq input_exit 
      0016A2 A1 0A            [ 1] 3932 	cp a,#TK_QSTR 
      0016A4 26 08            [ 1] 3933 	jrne 1$ 
      0016A6 CD 01 B0         [ 4] 3934 	call puts 
      0016A9 03 06            [ 1] 3935 	cpl (SKIP,sp)
      0016AB CD 07 FE         [ 4] 3936 	call next_token 
      0016AE A1 05            [ 1] 3937 1$: cp a,#TK_VAR  
      0016B0 27 03            [ 1] 3938 	jreq 2$ 
      0016B2 CC 07 18         [ 2] 3939 	jp syntax_error
      0016B5 CD 0F 95         [ 4] 3940 2$:	call dpush 
      0016B8 0D 06            [ 1] 3941 	tnz (SKIP,sp)
      0016BA 26 0F            [ 1] 3942 	jrne 21$ 
      0016BC A6 3A            [ 1] 3943 	ld a,#':
      0016BE C7 17 19         [ 1] 3944 	ld pad+1,a 
      0016C1 72 5F 17 1A      [ 1] 3945 	clr pad+2
      0016C5 AE 17 18         [ 2] 3946 	ldw x,#pad 
      0016C8 CD 01 B0         [ 4] 3947 	call puts   
      0016CB                       3948 21$:
      0016CB CD 16 63         [ 4] 3949 	call save_context 
      0016CE AE 16 C8         [ 2] 3950 	ldw x,#tib 
      0016D1 CF 00 03         [ 2] 3951 	ldw basicptr,x  
      0016D4 72 5F 00 02      [ 1] 3952 	clr count  
      0016D8 CD 0A 8B         [ 4] 3953 	call readln 
      0016DB 72 5F 00 01      [ 1] 3954 	clr in 
      0016DF CD 12 FD         [ 4] 3955 	call relation 
      0016E2 A1 04            [ 1] 3956 	cp a,#TK_INTGR
      0016E4 27 03            [ 1] 3957 	jreq 3$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016E6 CC 07 18         [ 2] 3958 	jp syntax_error
      0016E9 CD 0F 95         [ 4] 3959 3$: call dpush 
      0016EC CD 0F FC         [ 4] 3960 	call store 
      0016EF CD 16 78         [ 4] 3961 	call rest_context
      0016F2 CD 07 FE         [ 4] 3962 	call next_token 
      0016F5 A1 0D            [ 1] 3963 	cp a,#TK_COMMA 
      0016F7 26 02            [ 1] 3964 	jrne 4$
      0016F9 20 9E            [ 2] 3965 	jra input_loop 
      0016FB CD 0F 8E         [ 4] 3966 4$:	call unget_token 
      0016FE                       3967 input_exit:
      0016FE                       3968 	_drop VSIZE 
      0016FE 5B 07            [ 2]    1     addw sp,#VSIZE 
      001700 81               [ 4] 3969 	ret 
                                   3970 
                                   3971 
                                   3972 ;---------------------
                                   3973 ; BASIC: REMARK | ' 
                                   3974 ; skip comment to end of line 
                                   3975 ;---------------------- 
      001701                       3976 rem:
      001701 55 00 01 00 02   [ 1] 3977  	mov count,in 
      001706 81               [ 4] 3978 	ret 
                                   3979 
                                   3980 ;---------------------
                                   3981 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3982 ; read in loop 'addr'  
                                   3983 ; apply & 'mask' to value 
                                   3984 ; loop while result==0.  
                                   3985 ; if 'xor_mask' given 
                                   3986 ; apply ^ in second  
                                   3987 ; loop while result==0 
                                   3988 ;---------------------
                           000001  3989 	XMASK=1 
                           000002  3990 	MASK=2
                           000003  3991 	ADDR=3
                           000004  3992 	VSIZE=4
      001707                       3993 wait: 
      001707                       3994 	_vars VSIZE
      001707 52 04            [ 2]    1     sub sp,#VSIZE 
      001709 0F 01            [ 1] 3995 	clr (XMASK,sp) 
      00170B CD 11 C2         [ 4] 3996 	call arg_list 
      00170E A1 02            [ 1] 3997 	cp a,#2
      001710 24 03            [ 1] 3998 	jruge 0$
      001712 CC 07 18         [ 2] 3999 	jp syntax_error 
      001715 A1 03            [ 1] 4000 0$:	cp a,#3
      001717 25 06            [ 1] 4001 	jrult 1$
      001719 CD 0F A2         [ 4] 4002 	call dpop 
      00171C 9F               [ 1] 4003 	ld a,xl
      00171D 6B 01            [ 1] 4004 	ld (XMASK,sp),a 
      00171F CD 0F A2         [ 4] 4005 1$: call dpop ; mask 
      001722 9F               [ 1] 4006 	ld a,xl 
      001723 6B 02            [ 1] 4007 	ld (MASK,sp),a 
      001725 CD 0F A2         [ 4] 4008 	call dpop ; address 
      001728 F6               [ 1] 4009 2$:	ld a,(x)
      001729 14 02            [ 1] 4010 	and a,(MASK,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00172B 18 01            [ 1] 4011 	xor a,(XMASK,sp)
      00172D 27 F9            [ 1] 4012 	jreq 2$ 
      00172F                       4013 	_drop VSIZE 
      00172F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001731 81               [ 4] 4014 	ret 
                                   4015 
                                   4016 ;---------------------
                                   4017 ; BASIC: BSET addr,mask
                                   4018 ; set bits at 'addr' corresponding 
                                   4019 ; to those of 'mask' that are at 1.
                                   4020 ; arguments:
                                   4021 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4022 ;   mask        mask|addr
                                   4023 ; output:
                                   4024 ;	none 
                                   4025 ;--------------------------
      001732                       4026 bit_set:
      001732 CD 11 C2         [ 4] 4027 	call arg_list 
      001735 A1 02            [ 1] 4028 	cp a,#2	 
      001737 27 03            [ 1] 4029 	jreq 1$ 
      001739 CC 07 18         [ 2] 4030 	jp syntax_error
      00173C                       4031 1$: 
      00173C CD 0F A2         [ 4] 4032 	call dpop ; mask 
      00173F 9F               [ 1] 4033 	ld a,xl 
      001740 CD 0F A2         [ 4] 4034 	call dpop ; addr  
      001743 FA               [ 1] 4035 	or a,(x)
      001744 F7               [ 1] 4036 	ld (x),a
      001745 81               [ 4] 4037 	ret 
                                   4038 
                                   4039 ;---------------------
                                   4040 ; BASIC: BRES addr,mask
                                   4041 ; reset bits at 'addr' corresponding 
                                   4042 ; to those of 'mask' that are at 1.
                                   4043 ; arguments:
                                   4044 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4045 ;   mask	    ~mask&*addr  
                                   4046 ; output:
                                   4047 ;	none 
                                   4048 ;--------------------------
      001746                       4049 bit_reset:
      001746 CD 11 C2         [ 4] 4050 	call arg_list 
      001749 A1 02            [ 1] 4051 	cp a,#2  
      00174B 27 03            [ 1] 4052 	jreq 1$ 
      00174D CC 07 18         [ 2] 4053 	jp syntax_error
      001750                       4054 1$: 
      001750 CD 0F A2         [ 4] 4055 	call dpop ; mask 
      001753 9F               [ 1] 4056 	ld a,xl 
      001754 43               [ 1] 4057 	cpl a 
      001755 CD 0F A2         [ 4] 4058 	call dpop ; addr  
      001758 F4               [ 1] 4059 	and a,(x)
      001759 F7               [ 1] 4060 	ld (x),a 
      00175A 81               [ 4] 4061 	ret 
                                   4062 
                                   4063 ;---------------------
                                   4064 ; BASIC: BRES addr,mask
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4065 ; toggle bits at 'addr' corresponding 
                                   4066 ; to those of 'mask' that are at 1.
                                   4067 ; arguments:
                                   4068 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4069 ;   mask	    mask^*addr  
                                   4070 ; output:
                                   4071 ;	none 
                                   4072 ;--------------------------
      00175B                       4073 bit_toggle:
      00175B CD 11 C2         [ 4] 4074 	call arg_list 
      00175E A1 02            [ 1] 4075 	cp a,#2 
      001760 27 03            [ 1] 4076 	jreq 1$ 
      001762 CC 07 18         [ 2] 4077 	jp syntax_error
      001765 CD 0F A2         [ 4] 4078 1$: call dpop ; mask 
      001768 9F               [ 1] 4079 	ld a,xl 
      001769 CD 0F A2         [ 4] 4080 	call dpop ; addr  
      00176C F8               [ 1] 4081 	xor a,(x)
      00176D F7               [ 1] 4082 	ld (x),a 
      00176E 81               [ 4] 4083 	ret 
                                   4084 
                                   4085 
                                   4086 ;---------------------
                                   4087 ; BASIC: BTEST(addr,bit)
                                   4088 ; return bit value at 'addr' 
                                   4089 ; bit is in range {0..7}.
                                   4090 ; arguments:
                                   4091 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4092 ;   bit 	    bit position {0..7}  
                                   4093 ; output:
                                   4094 ;	none 
                                   4095 ;--------------------------
      00176F                       4096 bit_test:
      00176F A6 0B            [ 1] 4097 	ld a,#TK_LPAREN 
      001771 CD 11 B5         [ 4] 4098 	call expect 
      001774 CD 11 C2         [ 4] 4099 	call arg_list 
      001777 A1 02            [ 1] 4100 	cp a,#2
      001779 27 03            [ 1] 4101 	jreq 0$
      00177B CC 07 18         [ 2] 4102 	jp syntax_error
      00177E A6 0C            [ 1] 4103 0$:	ld a,#TK_RPAREN
      001780 CD 11 B5         [ 4] 4104 	call expect 
      001783 CD 0F A2         [ 4] 4105 	call dpop 
      001786 9F               [ 1] 4106 	ld a,xl 
      001787 A4 07            [ 1] 4107 	and a,#7
      001789 88               [ 1] 4108 	push a 
      00178A A6 01            [ 1] 4109 	ld a,#1 
      00178C 0D 01            [ 1] 4110 1$: tnz (1,sp)
      00178E 27 05            [ 1] 4111 	jreq 2$
      001790 48               [ 1] 4112 	sll a 
      001791 0A 01            [ 1] 4113 	dec (1,sp)
      001793 20 F7            [ 2] 4114 	jra 1$
      001795 CD 0F A2         [ 4] 4115 2$: call dpop 
      001798 F4               [ 1] 4116 	and a,(x)
      001799 27 02            [ 1] 4117 	jreq 3$
      00179B A6 01            [ 1] 4118 	ld a,#1 
      00179D 5F               [ 1] 4119 3$:	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00179E 97               [ 1] 4120 	ld xl,a 
      00179F A6 04            [ 1] 4121 	ld a,#TK_INTGR
      0017A1                       4122 	_drop 1 
      0017A1 5B 01            [ 2]    1     addw sp,#1 
      0017A3 81               [ 4] 4123 	ret
                                   4124 
                                   4125 
                                   4126 ;--------------------
                                   4127 ; BASIC: POKE addr,byte
                                   4128 ; put a byte at addr 
                                   4129 ;--------------------
      0017A4                       4130 poke:
      0017A4 CD 11 C2         [ 4] 4131 	call arg_list 
      0017A7 A1 02            [ 1] 4132 	cp a,#2
      0017A9 27 03            [ 1] 4133 	jreq 1$
      0017AB CC 07 18         [ 2] 4134 	jp syntax_error
      0017AE                       4135 1$:	
      0017AE CD 0F A2         [ 4] 4136 	call dpop 
      0017B1 9F               [ 1] 4137     ld a,xl 
      0017B2 CD 0F A2         [ 4] 4138 	call dpop 
      0017B5 F7               [ 1] 4139 	ld (x),a 
      0017B6 81               [ 4] 4140 	ret 
                                   4141 
                                   4142 ;-----------------------
                                   4143 ; BASIC: PEEK(addr)
                                   4144 ; get the byte at addr 
                                   4145 ; input:
                                   4146 ;	none 
                                   4147 ; output:
                                   4148 ;	X 		value 
                                   4149 ;-----------------------
      0017B7                       4150 peek:
      0017B7 A6 0B            [ 1] 4151 	ld a,#TK_LPAREN 
      0017B9 CD 11 B5         [ 4] 4152 	call expect 
      0017BC CD 11 C2         [ 4] 4153 	call arg_list
      0017BF A1 01            [ 1] 4154 	cp a,#1 
      0017C1 27 03            [ 1] 4155 	jreq 1$
      0017C3 CC 07 18         [ 2] 4156 	jp syntax_error
      0017C6 A6 0C            [ 1] 4157 1$:	ld a,#TK_RPAREN 
      0017C8 CD 11 B5         [ 4] 4158 	call expect 
      0017CB CD 0F A2         [ 4] 4159 	call dpop 
      0017CE F6               [ 1] 4160 	ld a,(x)
      0017CF 5F               [ 1] 4161 	clrw x 
      0017D0 97               [ 1] 4162 	ld xl,a 
      0017D1 A6 04            [ 1] 4163 	ld a,#TK_INTGR
      0017D3 81               [ 4] 4164 	ret 
                                   4165 
      0017D4                       4166 if: 
      0017D4 CD 12 FD         [ 4] 4167 	call relation 
      0017D7 A1 04            [ 1] 4168 	cp a,#TK_INTGR
      0017D9 27 03            [ 1] 4169 	jreq 1$ 
      0017DB CC 07 18         [ 2] 4170 	jp syntax_error
      0017DE 4F               [ 1] 4171 1$:	clr a 
      0017DF 5D               [ 2] 4172 	tnzw x 
      0017E0 26 05            [ 1] 4173 	jrne 9$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4174 ;skip to next line
      0017E2 55 00 02 00 01   [ 1] 4175 	mov in,count
      0017E7 81               [ 4] 4176 9$:	ret 
                                   4177 
                                   4178 ;------------------------
                                   4179 ; BASIC: FOR var=expr 
                                   4180 ; set variable to expression 
                                   4181 ; leave variable address 
                                   4182 ; on dstack and set
                                   4183 ; FFOR bit in 'flags'
                                   4184 ;-----------------
                           000001  4185 	RETL1=1
                           000003  4186 	INW=3
                           000005  4187 	BPTR=5
      0017E8                       4188 for: ; { -- var_addr }
      0017E8 A6 05            [ 1] 4189 	ld a,#TK_VAR 
      0017EA CD 11 B5         [ 4] 4190 	call expect
      0017ED CD 0F 95         [ 4] 4191 	call dpush 
      0017F0 CD 13 90         [ 4] 4192 	call let02 
      0017F3 72 14 00 24      [ 1] 4193 	bset flags,#FFOR 
                                   4194 ; open space on cstack for BPTR and INW 
      0017F7 85               [ 2] 4195 	popw x ; call return address 
      0017F8                       4196 	_vars 4
      0017F8 52 04            [ 2]    1     sub sp,#4 
      0017FA 89               [ 2] 4197 	pushw x  ; RETL1 
      0017FB 5F               [ 1] 4198 	clrw x 
      0017FC 1F 05            [ 2] 4199 	ldw (BPTR,sp),x 
      0017FE 1F 03            [ 2] 4200 	ldw (INW,sp),x 
      001800 CD 07 FE         [ 4] 4201 	call next_token 
      001803 A1 06            [ 1] 4202 	cp a,#TK_CMD 
      001805 27 03            [ 1] 4203 	jreq 1$
      001807 CC 07 18         [ 2] 4204 	jp syntax_error
      00180A                       4205 1$:  
      00180A A3 18 12         [ 2] 4206 	cpw x,#to 
      00180D 27 03            [ 1] 4207 	jreq to
      00180F CC 07 18         [ 2] 4208 	jp syntax_error 
                                   4209 
                                   4210 ;-----------------------------------
                                   4211 ; BASIC: TO expr 
                                   4212 ; second part of FOR loop initilization
                                   4213 ; leave limit on dstack and set 
                                   4214 ; FTO bit in 'flags'
                                   4215 ;-----------------------------------
      001812                       4216 to: ; { var_addr -- var_addr limit step }
      001812 72 04 00 24 03   [ 2] 4217 	btjt flags,#FFOR,1$
      001817 CC 07 18         [ 2] 4218 	jp syntax_error
      00181A CD 12 FD         [ 4] 4219 1$: call relation  
      00181D A1 04            [ 1] 4220 	cp a,#TK_INTGR 
      00181F 27 03            [ 1] 4221 	jreq 2$ 
      001821 CC 07 18         [ 2] 4222 	jp syntax_error
      001824                       4223 2$: 
      001824 CD 0F 95         [ 4] 4224     call dpush ; limit
      001827 CE 00 00         [ 2] 4225 	ldw x,in.w 
      00182A CD 07 FE         [ 4] 4226 	call next_token
      00182D A1 00            [ 1] 4227 	cp a,#TK_NONE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00182F 27 0C            [ 1] 4228 	jreq 4$ 
      001831 A1 06            [ 1] 4229 	cp a,#TK_CMD
      001833 26 05            [ 1] 4230 	jrne 3$
      001835 A3 18 42         [ 2] 4231 	cpw x,#step 
      001838 27 08            [ 1] 4232 	jreq step
      00183A                       4233 3$:	
      00183A CD 0F 8E         [ 4] 4234 	call unget_token   	 
      00183D                       4235 4$:	
      00183D AE 00 01         [ 2] 4236 	ldw x,#1   ; default step  
      001840 20 12            [ 2] 4237 	jra store_loop_addr 
                                   4238 
                                   4239 
                                   4240 ;----------------------------------
                                   4241 ; BASIC: STEP expr 
                                   4242 ; optional third par of FOR loop
                                   4243 ; initialization. 	
                                   4244 ;------------------------------------
      001842                       4245 step: ; {var limit -- var limit step}
      001842 72 04 00 24 03   [ 2] 4246 	btjt flags,#FFOR,1$
      001847 CC 07 18         [ 2] 4247 	jp syntax_error
      00184A CD 12 FD         [ 4] 4248 1$: call relation
      00184D A1 04            [ 1] 4249 	cp a,#TK_INTGR
      00184F 27 03            [ 1] 4250 	jreq store_loop_addr  
      001851 CC 07 18         [ 2] 4251 	jp syntax_error
                                   4252 ; leave loop back entry point on cstack 
                                   4253 ; cstack is 2 call deep from interp_loop
      001854                       4254 store_loop_addr:
      001854 CD 0F 95         [ 4] 4255 	call dpush 
      001857 CE 00 03         [ 2] 4256 	ldw x,basicptr  
      00185A 1F 05            [ 2] 4257 	ldw (BPTR,sp),x 
      00185C CE 00 00         [ 2] 4258 	ldw x,in.w 
      00185F 1F 03            [ 2] 4259 	ldw (INW,sp),x   
      001861 72 15 00 24      [ 1] 4260 	bres flags,#FFOR 
      001865 72 5C 00 1F      [ 1] 4261 	inc loop_depth  
      001869 81               [ 4] 4262 	ret 
                                   4263 
                                   4264 ;--------------------------------
                                   4265 ; BASIC: NEXT var 
                                   4266 ; FOR loop control 
                                   4267 ; increment variable with step 
                                   4268 ; and compare with limit 
                                   4269 ; loop if threshold not crossed.
                                   4270 ; else clean both stacks. 
                                   4271 ; and decrement 'loop_depth' 
                                   4272 ;--------------------------------
      00186A                       4273 next: ; {var limit step -- [var limit step ] }
      00186A 72 5D 00 1F      [ 1] 4274 	tnz loop_depth 
      00186E 26 03            [ 1] 4275 	jrne 1$ 
      001870 CC 07 18         [ 2] 4276 	jp syntax_error 
      001873                       4277 1$: 
      001873 A6 05            [ 1] 4278 	ld a,#TK_VAR 
      001875 CD 11 B5         [ 4] 4279 	call expect
                                   4280 ; check for good variable after NEXT 	 
      001878 90 93            [ 1] 4281 	ldw y,x 
      00187A AE 00 04         [ 2] 4282 	ldw x,#4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00187D 72 D3 00 19      [ 4] 4283 	cpw y,([dstkptr],x) ; compare variables address 
      001881 27 03            [ 1] 4284 	jreq 2$  
      001883 CC 07 18         [ 2] 4285 	jp syntax_error ; not the good one 
      001886                       4286 2$: ; increment variable 
      001886 93               [ 1] 4287 	ldw x,y
      001887 FE               [ 2] 4288 	ldw x,(x)  ; get var value 
      001888 CF 00 09         [ 2] 4289 	ldw acc16,x 
      00188B 72 CE 00 19      [ 5] 4290 	ldw x,[dstkptr] ; step
      00188F 72 BB 00 09      [ 2] 4291 	addw x,acc16 ; var+step 
      001893 90 FF            [ 2] 4292 	ldw (y),x ; save var new value 
                                   4293 ; compare with limit 
      001895 90 93            [ 1] 4294 	ldw y,x 
      001897 72 CE 00 19      [ 5] 4295 	ldw x,[dstkptr] ; step in x 
      00189B 5D               [ 2] 4296 	tnzw x  
      00189C 2A 0B            [ 1] 4297 	jrpl 4$ ; positive step 
                                   4298 ;negative step 
      00189E AE 00 02         [ 2] 4299 	ldw x,#2
      0018A1 72 D3 00 19      [ 4] 4300 	cpw y,([dstkptr],x)
      0018A5 2F 24            [ 1] 4301 	jrslt loop_done
      0018A7 20 09            [ 2] 4302 	jra loop_back 
      0018A9                       4303 4$: ; positive step
      0018A9 AE 00 02         [ 2] 4304 	ldw x,#2 
      0018AC 72 D3 00 19      [ 4] 4305 	cpw y,([dstkptr],x)
      0018B0 2C 19            [ 1] 4306 	jrsgt loop_done
      0018B2                       4307 loop_back:
      0018B2 1E 05            [ 2] 4308 	ldw x,(BPTR,sp)
      0018B4 CF 00 03         [ 2] 4309 	ldw basicptr,x 
      0018B7 72 01 00 24 09   [ 2] 4310 	btjf flags,#FRUN,1$ 
      0018BC E6 02            [ 1] 4311 	ld a,(2,x)
      0018BE C7 00 02         [ 1] 4312 	ld count,a
      0018C1 FE               [ 2] 4313 	ldw x,(x)
      0018C2 CF 00 05         [ 2] 4314 	ldw lineno,x
      0018C5 1E 03            [ 2] 4315 1$:	ldw x,(INW,sp)
      0018C7 CF 00 00         [ 2] 4316 	ldw in.w,x 
      0018CA 81               [ 4] 4317 	ret 
      0018CB                       4318 loop_done:
                                   4319 	; remove var limit step on dstack 
      0018CB CE 00 19         [ 2] 4320 	ldw x,dstkptr 
      0018CE 1C 00 06         [ 2] 4321 	addw x,#3*CELL_SIZE
      0018D1 CF 00 19         [ 2] 4322 	ldw dstkptr,x 
                                   4323 	; remove 2 return address on cstack 
      0018D4 85               [ 2] 4324 	popw x
      0018D5                       4325 	_drop 4
      0018D5 5B 04            [ 2]    1     addw sp,#4 
      0018D7 89               [ 2] 4326 	pushw x 
      0018D8 72 5A 00 1F      [ 1] 4327 	dec loop_depth 
      0018DC 81               [ 4] 4328 	ret 
                                   4329 
                                   4330 
                                   4331 ;------------------------
                                   4332 ; BASIC: GOTO lineno 
                                   4333 ; jump to lineno 
                                   4334 ; here cstack is 2 call deep from interp_loop 
                                   4335 ;------------------------
      0018DD                       4336 goto:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018DD 72 00 00 24 06   [ 2] 4337 	btjt flags,#FRUN,0$ 
      0018E2 A6 06            [ 1] 4338 	ld a,#ERR_RUN_ONLY
      0018E4 CC 07 1A         [ 2] 4339 	jp tb_error 
      0018E7 81               [ 4] 4340 	ret 
      0018E8 20 23            [ 2] 4341 0$:	jra go_common
                                   4342 
                                   4343 ;--------------------
                                   4344 ; BASIC: GOSUB lineno
                                   4345 ; basic subroutine call
                                   4346 ; actual lineno and basicptr 
                                   4347 ; are saved on cstack
                                   4348 ; here cstack is 2 call deep from interp_loop 
                                   4349 ;--------------------
                           000003  4350 	GOS_RET=3
      0018EA                       4351 gosub:
      0018EA 72 00 00 24 06   [ 2] 4352 	btjt flags,#FRUN,0$ 
      0018EF A6 06            [ 1] 4353 	ld a,#ERR_RUN_ONLY
      0018F1 CC 07 1A         [ 2] 4354 	jp tb_error 
      0018F4 81               [ 4] 4355 	ret 
      0018F5 85               [ 2] 4356 0$:	popw x 
      0018F6 52 02            [ 2] 4357 	sub sp,#2 
      0018F8 89               [ 2] 4358 	pushw x 
      0018F9 CE 00 03         [ 2] 4359 	ldw x,basicptr
      0018FC E6 02            [ 1] 4360 	ld a,(2,x)
      0018FE AB 03            [ 1] 4361 	add a,#3 
      001900 C7 00 0A         [ 1] 4362 	ld acc8,a 
      001903 72 5F 00 09      [ 1] 4363 	clr acc16 
      001907 72 BB 00 09      [ 2] 4364 	addw x,acc16
      00190B 1F 03            [ 2] 4365 	ldw (GOS_RET,sp),x 
      00190D                       4366 go_common: 
      00190D CD 12 FD         [ 4] 4367 	call relation 
      001910 A1 04            [ 1] 4368 	cp a,#TK_INTGR
      001912 27 03            [ 1] 4369 	jreq 1$ 
      001914 CC 07 18         [ 2] 4370 	jp syntax_error
      001917                       4371 1$: 
      001917 CD 02 E0         [ 4] 4372 	call search_lineno  
      00191A 5D               [ 2] 4373 	tnzw x 
      00191B 26 05            [ 1] 4374 	jrne 2$ 
      00191D A6 05            [ 1] 4375 	ld a,#ERR_NO_LINE 
      00191F CC 07 1A         [ 2] 4376 	jp tb_error 
      001922                       4377 2$: 
      001922 CF 00 03         [ 2] 4378 	ldw basicptr,x 
      001925 E6 02            [ 1] 4379 	ld a,(2,x)
      001927 C7 00 02         [ 1] 4380 	ld count,a 
      00192A FE               [ 2] 4381 	ldw x,(x)
      00192B CF 00 05         [ 2] 4382 	ldw lineno,x 
      00192E 35 03 00 01      [ 1] 4383 	mov in,#3 
      001932 81               [ 4] 4384 	ret 
                                   4385 
                                   4386 ;------------------------
                                   4387 ; BASIC: RETURN 
                                   4388 ; exit from a subroutine 
                                   4389 ; cstack is 2 level deep from interp_loop 
                                   4390 ;------------------------
      001933                       4391 return:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001933 72 00 00 24 05   [ 2] 4392 	btjt flags,#FRUN,0$ 
      001938 A6 06            [ 1] 4393 	ld a,#ERR_RUN_ONLY
      00193A CC 07 1A         [ 2] 4394 	jp tb_error 
      00193D                       4395 0$:	
      00193D 1E 03            [ 2] 4396 	ldw x,(GOS_RET,sp) 
      00193F CF 00 03         [ 2] 4397 	ldw basicptr,x 
      001942 E6 02            [ 1] 4398 	ld a,(2,x)
      001944 AB 03            [ 1] 4399 	add a,#3 
      001946 C7 00 02         [ 1] 4400 	ld count,a 
      001949 35 03 00 01      [ 1] 4401 	mov in,#3
      00194D FE               [ 2] 4402 	ldw x,(x)
      00194E CF 00 05         [ 2] 4403 	ldw lineno,x 
      001951 4F               [ 1] 4404 	clr a 
      001952 85               [ 2] 4405 	popw x 
      001953                       4406 	_drop 2
      001953 5B 02            [ 2]    1     addw sp,#2 
      001955 89               [ 2] 4407 	pushw x
      001956 81               [ 4] 4408 	ret  
                                   4409 
                                   4410 
                                   4411 ;----------------------------------
                                   4412 ; BASIC: RUN
                                   4413 ; run BASIC program in RAM
                                   4414 ;----------------------------------- 
      001957                       4415 run: 
      001957 72 01 00 24 02   [ 2] 4416 	btjf flags,#FRUN,0$  
      00195C 4F               [ 1] 4417 	clr a 
      00195D 81               [ 4] 4418 	ret
      00195E                       4419 0$: 
      00195E 72 09 00 24 12   [ 2] 4420 	btjf flags,#FBREAK,1$
      001963                       4421 	_drop 2 
      001963 5B 02            [ 2]    1     addw sp,#2 
      001965 CD 16 78         [ 4] 4422 	call rest_context
      001968                       4423 	_drop CTXT_SIZE 
      001968 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      00196A 72 19 00 24      [ 1] 4424 	bres flags,#FBREAK 
      00196E 72 10 00 24      [ 1] 4425 	bset flags,#FRUN 
      001972 CC 07 CE         [ 2] 4426 	jp interp_loop 
      001975 CE 00 1B         [ 2] 4427 1$:	ldw x,txtbgn
      001978 C3 00 1D         [ 2] 4428 	cpw x,txtend 
      00197B 2B 02            [ 1] 4429 	jrmi 2$ 
      00197D 4F               [ 1] 4430 	clr a 
      00197E 81               [ 4] 4431 	ret 
      00197F CD 13 78         [ 4] 4432 2$: call ubound 
      001982                       4433 	_drop 2 
      001982 5B 02            [ 2]    1     addw sp,#2 
      001984 CE 00 1B         [ 2] 4434 	ldw x,txtbgn 
      001987 CF 00 03         [ 2] 4435 	ldw basicptr,x 
      00198A E6 02            [ 1] 4436 	ld a,(2,x)
      00198C C7 00 02         [ 1] 4437 	ld count,a
      00198F FE               [ 2] 4438 	ldw x,(x)
      001990 CF 00 05         [ 2] 4439 	ldw lineno,x
      001993 35 03 00 01      [ 1] 4440 	mov in,#3	
      001997 72 10 00 24      [ 1] 4441 	bset flags,#FRUN 
      00199B CC 07 CE         [ 2] 4442 	jp interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4443 
                                   4444 
                                   4445 ;----------------------
                                   4446 ; BASIC: STOP 
                                   4447 ; stop running program
                                   4448 ;---------------------- 
      00199E                       4449 stop: 
                                   4450 ; clean dstack and cstack 
      00199E AE 17 FF         [ 2] 4451 	ldw x,#STACK_EMPTY 
      0019A1 94               [ 1] 4452 	ldw sp,x 
      0019A2 72 11 00 24      [ 1] 4453 	bres flags,#FRUN 
      0019A6 72 19 00 24      [ 1] 4454 	bres flags,#FBREAK
      0019AA CC 07 6A         [ 2] 4455 	jp warm_start
                                   4456 
                                   4457 ;-----------------------
                                   4458 ; BASIC BEEP expr1,expr2
                                   4459 ; used MCU internal beeper 
                                   4460 ; to produce a sound
                                   4461 ; arguments:
                                   4462 ;    expr1   frequency  (expr1%32)
                                   4463 ;    expr2   duration msec.
                                   4464 ;---------------------------
      0019AD                       4465 beep:
      0019AD CD 11 C2         [ 4] 4466 	call arg_list 
      0019B0 A1 02            [ 1] 4467 	cp a,#2 
      0019B2 27 03            [ 1] 4468 	jreq 1$
      0019B4 CC 07 18         [ 2] 4469 	jp syntax_error 
      0019B7                       4470 1$: 
      0019B7 CE 00 19         [ 2] 4471 	ldw x,dstkptr 
      0019BA EE 02            [ 2] 4472 	ldw x,(2,x);frequency 
      0019BC A6 1F            [ 1] 4473 	ld a,#31
      0019BE 62               [ 2] 4474 	div x,a 
      0019BF C7 50 F3         [ 1] 4475 	ld BEEP_CSR,a	
      0019C2 72 1A 50 F3      [ 1] 4476 	bset BEEP_CSR,#5 
      0019C6 CD 0F A2         [ 4] 4477 	call dpop 
      0019C9 CD 1E A2         [ 4] 4478 	call pause02 
      0019CC CD 0F C9         [ 4] 4479 	call ddrop 
      0019CF A6 1F            [ 1] 4480 	ld a,#0x1f
      0019D1 C7 50 F3         [ 1] 4481 	ld BEEP_CSR,a 
      0019D4 81               [ 4] 4482 	ret 
                                   4483 
                                   4484 ;-------------------------------
                                   4485 ; BASIC: PWRADC 0|1 [,divisor]  
                                   4486 ; disable/enanble ADC 
                                   4487 ;-------------------------------
      0019D5                       4488 power_adc:
      0019D5 CD 11 C2         [ 4] 4489 	call arg_list 
      0019D8 A1 02            [ 1] 4490 	cp a,#2	
      0019DA 27 0D            [ 1] 4491 	jreq 1$
      0019DC A1 01            [ 1] 4492 	cp a,#1 
      0019DE 27 03            [ 1] 4493 	jreq 0$ 
      0019E0 CC 07 18         [ 2] 4494 	jp syntax_error 
      0019E3 AE 00 00         [ 2] 4495 0$: ldw x,#0
      0019E6 CD 0F 95         [ 4] 4496 	call dpush 
      0019E9 AE 00 02         [ 2] 4497 1$: ldw x,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0019EC 72 DE 00 19      [ 5] 4498 	ldw x,([dstkptr],x) ; on|off
      0019F0 5D               [ 2] 4499 	tnzw x 
      0019F1 27 1C            [ 1] 4500 	jreq 2$ 
      0019F3 72 CE 00 19      [ 5] 4501 	ldw x,[dstkptr] ; divisor 
      0019F7 9F               [ 1] 4502 	ld a,xl
      0019F8 A4 07            [ 1] 4503 	and a,#7
      0019FA 4E               [ 1] 4504 	swap a 
      0019FB C7 54 01         [ 1] 4505 	ld ADC_CR1,a
      0019FE 72 16 54 02      [ 1] 4506 	bset ADC_CR2,#ADC_CR2_ALIGN ; right 
      001A02 72 10 54 01      [ 1] 4507 	bset ADC_CR1,#ADC_CR1_ADON 
      001A06                       4508 	_usec_dly 7 
      001A06 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      001A09 5A               [ 2]    2     decw x
      001A0A 9D               [ 1]    3     nop 
      001A0B 26 FA            [ 1]    4     jrne .-4
      001A0D 20 04            [ 2] 4509 	jra 3$
      001A0F 72 11 54 01      [ 1] 4510 2$: bres ADC_CR1,#ADC_CR1_ADON 
      001A13 AE 00 02         [ 2] 4511 3$:	ldw x,#2
      001A16 CD 10 06         [ 4] 4512 	call ddrop_n 
      001A19 81               [ 4] 4513 	ret
                                   4514 
                                   4515 ;-----------------------------
                                   4516 ; BASIC: RDADC(channel)
                                   4517 ; read adc channel 
                                   4518 ; output:
                                   4519 ;   A 		TK_INTGR 
                                   4520 ;   X 		value 
                                   4521 ;-----------------------------
      001A1A                       4522 read_adc:
      001A1A A6 0B            [ 1] 4523 	ld a,#TK_LPAREN 
      001A1C CD 11 B5         [ 4] 4524 	call expect 
      001A1F CD 07 FE         [ 4] 4525 	call next_token 
      001A22 A1 04            [ 1] 4526 	cp a,#TK_INTGR 
      001A24 27 03            [ 1] 4527 	jreq 1$
      001A26 CC 07 18         [ 2] 4528 	jp syntax_error
      001A29 89               [ 2] 4529 1$: pushw x 
      001A2A A6 0C            [ 1] 4530 	ld a,#TK_RPAREN 
      001A2C CD 11 B5         [ 4] 4531 	call expect 
      001A2F 85               [ 2] 4532 	popw x 
      001A30 A3 00 10         [ 2] 4533 	cpw x,#16 
      001A33 25 05            [ 1] 4534 	jrult 2$
      001A35 A6 0A            [ 1] 4535 	ld a,#ERR_BAD_VALUE
      001A37 CC 07 1A         [ 2] 4536 	jp tb_error 
      001A3A 9F               [ 1] 4537 2$: ld a,xl
      001A3B C7 54 00         [ 1] 4538 	ld ADC_CSR,a 
      001A3E 72 10 54 01      [ 1] 4539 	bset ADC_CR1,#ADC_CR1_ADON
      001A42 72 0F 54 00 FB   [ 2] 4540 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001A47 CE 54 04         [ 2] 4541 	ldw x,ADC_DRH 
      001A4A A6 04            [ 1] 4542 	ld a,#TK_INTGR
      001A4C 81               [ 4] 4543 	ret 
                                   4544 
                                   4545 
                                   4546 ;-----------------------
                                   4547 ; BASIC: BREAK 
                                   4548 ; insert a breakpoint 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4549 ; in pogram. 
                                   4550 ; the program is resumed
                                   4551 ; with RUN 
                                   4552 ;-------------------------
      001A4D                       4553 break:
      001A4D 72 00 00 24 02   [ 2] 4554 	btjt flags,#FRUN,2$
      001A52 4F               [ 1] 4555 	clr a
      001A53 81               [ 4] 4556 	ret 
      001A54                       4557 2$:	 
                                   4558 ; create space on cstack to save context 
      001A54 AE 1A 7E         [ 2] 4559 	ldw x,#break_point 
      001A57 CD 01 B0         [ 4] 4560 	call puts 
      001A5A                       4561 	_drop 2 ;drop return address 
      001A5A 5B 02            [ 2]    1     addw sp,#2 
      001A5C                       4562 	_vars CTXT_SIZE ; context size 
      001A5C 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001A5E CD 16 63         [ 4] 4563 	call save_context 
      001A61 AE 16 C8         [ 2] 4564 	ldw x,#tib 
      001A64 CF 00 03         [ 2] 4565 	ldw basicptr,x
      001A67 7F               [ 1] 4566 	clr (x)
      001A68 72 5F 00 02      [ 1] 4567 	clr count  
      001A6C 5F               [ 1] 4568 	clrw x 
      001A6D CF 00 05         [ 2] 4569 	ldw lineno,x 
      001A70 CF 00 00         [ 2] 4570 	ldw in.w,x
      001A73 72 11 00 24      [ 1] 4571 	bres flags,#FRUN 
      001A77 72 18 00 24      [ 1] 4572 	bset flags,#FBREAK
      001A7B CC 07 CE         [ 2] 4573 	jp interp_loop 
      001A7E 0A 62 72 65 61 6B 20  4574 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4575 
                                   4576 ;-----------------------
                                   4577 ; BASIC: NEW
                                   4578 ; from command line only 
                                   4579 ; free program memory
                                   4580 ; and clear variables 
                                   4581 ;------------------------
      001A9C                       4582 new: 
      001A9C 72 01 00 24 02   [ 2] 4583 	btjf flags,#FRUN,0$ 
      001AA1 4F               [ 1] 4584 	clr a 
      001AA2 81               [ 4] 4585 	ret 
      001AA3                       4586 0$:	
      001AA3 CD 05 E6         [ 4] 4587 	call clear_basic 
      001AA6 81               [ 4] 4588 	ret 
                                   4589 	 
                                   4590 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4591 ;   file system routines
                                   4592 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4593 
                                   4594 ;--------------------
                                   4595 ; input:
                                   4596 ;   X     increment 
                                   4597 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4598 ;   farptr  incremented 
                                   4599 ;---------------------
      001AA7                       4600 incr_farptr:
      001AA7 72 BB 00 14      [ 2] 4601 	addw x,farptr+1 
      001AAB 24 04            [ 1] 4602 	jrnc 1$
      001AAD 72 5C 00 13      [ 1] 4603 	inc farptr 
      001AB1 CF 00 14         [ 2] 4604 1$:	ldw farptr+1,x  
      001AB4 81               [ 4] 4605 	ret 
                                   4606 
                                   4607 ;------------------------------
                                   4608 ; extended flash memory used as FLASH_DRIVE 
                                   4609 ; seek end of used flash drive   
                                   4610 ; starting at 0x10000 address.
                                   4611 ; 4 consecutives 0 bytes signal free space. 
                                   4612 ; input:
                                   4613 ;	none
                                   4614 ; output:
                                   4615 ;   ffree     free_addr| 0 if memory full.
                                   4616 ;------------------------------
      001AB5                       4617 seek_fdrive:
                                   4618 ; start scan at 0x10000 address 
      001AB5 A6 01            [ 1] 4619 	ld a,#1
      001AB7 C7 00 13         [ 1] 4620 	ld farptr,a 
      001ABA 5F               [ 1] 4621 	clrw x 
      001ABB CF 00 14         [ 2] 4622 	ldw farptr+1,x 
      001ABE                       4623 1$:
      001ABE AE 00 03         [ 2] 4624 	ldw x,#3  
      001AC1 92 AF 00 13      [ 5] 4625 2$:	ldf a,([farptr],x) 
      001AC5 26 05            [ 1] 4626 	jrne 3$
      001AC7 5A               [ 2] 4627 	decw x
      001AC8 2A F7            [ 1] 4628 	jrpl 2$
      001ACA 20 19            [ 2] 4629 	jra 4$ 
      001ACC 5C               [ 1] 4630 3$:	incw x 
      001ACD CD 1A A7         [ 4] 4631 	call incr_farptr
      001AD0 AE 02 7F         [ 2] 4632 	ldw x,#0x27f 
      001AD3 C3 00 13         [ 2] 4633 	cpw x,farptr
      001AD6 2A E6            [ 1] 4634 	jrpl 1$
                                   4635 ; drive full 
      001AD8 72 5F 00 16      [ 1] 4636 	clr ffree 
      001ADC 72 5F 00 17      [ 1] 4637 	clr ffree+1 
      001AE0 72 5F 00 18      [ 1] 4638 	clr ffree+2 
      001AE4 81               [ 4] 4639 	ret
      001AE5                       4640 4$: ; copy farptr to ffree	 
      001AE5 CE 00 13         [ 2] 4641 	ldw x,farptr 
      001AE8 C6 00 15         [ 1] 4642 	ld a,farptr+2 
      001AEB CF 00 16         [ 2] 4643 	ldw ffree,x 
      001AEE C7 00 18         [ 1] 4644 	ld ffree+2,a  
      001AF1 81               [ 4] 4645 	ret 
                                   4646 
                                   4647 ;-----------------------
                                   4648 ; compare file name 
                                   4649 ; with name pointed by Y  
                                   4650 ; input:
                                   4651 ;   farptr   file name 
                                   4652 ;   Y        target name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4653 ; output:
                                   4654 ;   farptr 	 at file_name
                                   4655 ;   X 		 farptr[x] point at size field  
                                   4656 ;   Carry    0|1 no match|match  
                                   4657 ;----------------------
      001AF2                       4658 cmp_name:
      001AF2 5F               [ 1] 4659 	clrw x
      001AF3 92 AF 00 13      [ 5] 4660 1$:	ldf a,([farptr],x)
      001AF7 90 F1            [ 1] 4661 	cp a,(y)
      001AF9 26 08            [ 1] 4662 	jrne 4$
      001AFB 4D               [ 1] 4663 	tnz a 
      001AFC 27 12            [ 1] 4664 	jreq 9$ 
      001AFE 5C               [ 1] 4665     incw x 
      001AFF 90 5C            [ 1] 4666 	incw y 
      001B01 20 F0            [ 2] 4667 	jra 1$
      001B03                       4668 4$: ;no match 
      001B03 4D               [ 1] 4669 	tnz a 
      001B04 27 07            [ 1] 4670 	jreq 5$
      001B06 5C               [ 1] 4671 	incw x 
      001B07 92 AF 00 13      [ 5] 4672 	ldf a,([farptr],x)
      001B0B 20 F6            [ 2] 4673 	jra 4$  
      001B0D 5C               [ 1] 4674 5$:	incw x ; farptr[x] point at 'size' field 
      001B0E 98               [ 1] 4675 	rcf 
      001B0F 81               [ 4] 4676 	ret
      001B10                       4677 9$: ; match  
      001B10 5C               [ 1] 4678 	incw x  ; farptr[x] at 'size' field 
      001B11 99               [ 1] 4679 	scf 
      001B12 81               [ 4] 4680 	ret 
                                   4681 
                                   4682 ;-----------------------
                                   4683 ; search file in 
                                   4684 ; flash memory 
                                   4685 ; input:
                                   4686 ;   Y       file name  
                                   4687 ; output:
                                   4688 ;   farptr  addr at name|0
                                   4689 ;-----------------------
                           000001  4690 	FSIZE=1
                           000003  4691 	YSAVE=3
                           000004  4692 	VSIZE=4 
      001B13                       4693 search_file: 
      001B13                       4694 	_vars VSIZE
      001B13 52 04            [ 2]    1     sub sp,#VSIZE 
      001B15 17 03            [ 2] 4695 	ldw (YSAVE,sp),y  
      001B17 5F               [ 1] 4696 	clrw x 
      001B18 CF 00 14         [ 2] 4697 	ldw farptr+1,x 
      001B1B 35 01 00 13      [ 1] 4698 	mov farptr,#1
      001B1F                       4699 1$:	
                                   4700 ; check if farptr is after any file 
                                   4701 ; if  0 then so.
      001B1F 92 BC 00 13      [ 5] 4702 	ldf a,[farptr]
      001B23 27 25            [ 1] 4703 	jreq 6$
      001B25 5F               [ 1] 4704 2$: clrw x 	
      001B26 16 03            [ 2] 4705 	ldw y,(YSAVE,sp) 
      001B28 CD 1A F2         [ 4] 4706 	call cmp_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B2B 25 2D            [ 1] 4707 	jrc 9$
      001B2D 92 AF 00 13      [ 5] 4708 	ldf a,([farptr],x)
      001B31 6B 01            [ 1] 4709 	ld (FSIZE,sp),a 
      001B33 5C               [ 1] 4710 	incw x 
      001B34 92 AF 00 13      [ 5] 4711 	ldf a,([farptr],x)
      001B38 6B 02            [ 1] 4712 	ld (FSIZE+1,sp),a 
      001B3A 5C               [ 1] 4713 	incw x 
      001B3B 72 FB 01         [ 2] 4714 	addw x,(FSIZE,sp) ; count to skip 
      001B3E 5C               [ 1] 4715 	incw x ; skip over EOF marker 
      001B3F CD 1A A7         [ 4] 4716 	call incr_farptr ; now at next file 'name_field'
      001B42 AE 02 80         [ 2] 4717 	ldw x,#0x280
      001B45 C3 00 13         [ 2] 4718 	cpw x,farptr 
      001B48 2A D5            [ 1] 4719 	jrpl 1$
      001B4A                       4720 6$: ; file not found 
      001B4A 72 5F 00 13      [ 1] 4721 	clr farptr
      001B4E 72 5F 00 14      [ 1] 4722 	clr farptr+1 
      001B52 72 5F 00 15      [ 1] 4723 	clr farptr+2 
      001B56                       4724 	_drop VSIZE 
      001B56 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B58 98               [ 1] 4725 	rcf
      001B59 81               [ 4] 4726 	ret
      001B5A                       4727 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001B5A                       4728 	_drop VSIZE 
      001B5A 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B5C 99               [ 1] 4729 	scf 	
      001B5D 81               [ 4] 4730 	ret
                                   4731 
                                   4732 ;--------------------------------
                                   4733 ; BASIC: SAVE "name" 
                                   4734 ; save text program in 
                                   4735 ; flash memory used as 
                                   4736 ;--------------------------------
                           000001  4737 	BSIZE=1
                           000003  4738 	NAMEPTR=3
                           000004  4739 	VSIZE=4
      001B5E                       4740 save:
      001B5E 72 01 00 24 05   [ 2] 4741 	btjf flags,#FRUN,0$ 
      001B63 A6 07            [ 1] 4742 	ld a,#ERR_CMD_ONLY 
      001B65 CC 07 1A         [ 2] 4743 	jp tb_error
      001B68                       4744 0$:	 
      001B68 CE 00 1D         [ 2] 4745 	ldw x,txtend 
      001B6B 72 B0 00 1B      [ 2] 4746 	subw x,txtbgn
      001B6F 26 01            [ 1] 4747 	jrne 1$
                                   4748 ; nothing to save 
      001B71 81               [ 4] 4749 	ret 
      001B72                       4750 1$:	
      001B72                       4751 	_vars VSIZE 
      001B72 52 04            [ 2]    1     sub sp,#VSIZE 
      001B74 1F 01            [ 2] 4752 	ldw (BSIZE,sp),x 
      001B76 CD 07 FE         [ 4] 4753 	call next_token	
      001B79 A1 0A            [ 1] 4754 	cp a,#TK_QSTR
      001B7B 27 03            [ 1] 4755 	jreq 2$
      001B7D CC 07 18         [ 2] 4756 	jp syntax_error
      001B80                       4757 2$: 
      001B80 90 CE 00 03      [ 2] 4758 	ldw y,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B84 72 B9 00 00      [ 2] 4759 	addw y,in.w
      001B88 17 03            [ 2] 4760 	ldw (NAMEPTR,sp),y  
      001B8A 55 00 02 00 01   [ 1] 4761 	mov in,count 
                                   4762 ; check if enough free space 
      001B8F 93               [ 1] 4763 	ldw x,y 
      001B90 CD 02 72         [ 4] 4764 	call strlen 
      001B93 1C 00 03         [ 2] 4765 	addw x,#3 
      001B96 72 FB 01         [ 2] 4766 	addw x,(BSIZE,sp)
      001B99 72 5D 00 16      [ 1] 4767 	tnz ffree 
      001B9D 26 0B            [ 1] 4768 	jrne 21$
      001B9F 72 B0 00 17      [ 2] 4769 	subw x,ffree+1 
      001BA3 23 05            [ 2] 4770 	jrule 21$
      001BA5 A6 01            [ 1] 4771 	ld a,#ERR_MEM_FULL 
      001BA7 CC 07 1A         [ 2] 4772 	jp tb_error
      001BAA                       4773 21$: 
                                   4774 ; check for existing file of that name 
      001BAA 16 03            [ 2] 4775 	ldw y,(NAMEPTR,sp)	
      001BAC CD 1B 13         [ 4] 4776 	call search_file 
      001BAF 24 05            [ 1] 4777 	jrnc 3$ 
      001BB1 A6 08            [ 1] 4778 	ld a,#ERR_DUPLICATE 
      001BB3 CC 07 1A         [ 2] 4779 	jp tb_error 
      001BB6                       4780 3$:	;** write file name to flash **
      001BB6 CE 00 16         [ 2] 4781 	ldw x,ffree 
      001BB9 C6 00 18         [ 1] 4782 	ld a,ffree+2 
      001BBC CF 00 13         [ 2] 4783 	ldw farptr,x 
      001BBF C7 00 15         [ 1] 4784 	ld farptr+2,a 
      001BC2 1E 03            [ 2] 4785 	ldw x,(NAMEPTR,sp)  
      001BC4 CD 02 72         [ 4] 4786 	call strlen 
      001BC7 5C               [ 1] 4787 	incw  x
      001BC8 1F 01            [ 2] 4788 	ldw (BSIZE,sp),x  
      001BCA 5F               [ 1] 4789 	clrw x   
      001BCB 16 03            [ 2] 4790 	ldw y,(NAMEPTR,sp)
      001BCD CD 01 51         [ 4] 4791 	call write_block  
                                   4792 ;** write file length after name **
      001BD0 CE 00 1D         [ 2] 4793 	ldw x,txtend 
      001BD3 72 B0 00 1B      [ 2] 4794 	subw x,txtbgn
      001BD7 1F 01            [ 2] 4795 	ldw (BSIZE,sp),x 
      001BD9 5F               [ 1] 4796 	clrw x 
      001BDA 7B 01            [ 1] 4797 	ld a,(1,sp)
      001BDC CD 00 DC         [ 4] 4798 	call write_byte 
      001BDF 5C               [ 1] 4799 	incw x 
      001BE0 7B 02            [ 1] 4800 	ld a,(2,sp)
      001BE2 CD 00 DC         [ 4] 4801 	call write_byte
      001BE5 5C               [ 1] 4802 	incw x  
      001BE6 CD 1A A7         [ 4] 4803 	call incr_farptr ; move farptr after SIZE field 
                                   4804 ;** write BASIC text **
                                   4805 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001BE9 1E 01            [ 2] 4806 	ldw x,(BSIZE,sp)
      001BEB 89               [ 2] 4807 	pushw x ; write_block argument 
      001BEC 5F               [ 1] 4808 	clrw x 
      001BED 90 CE 00 1B      [ 2] 4809 	ldw y,txtbgn  ; BASIC text to save 
      001BF1 CD 01 51         [ 4] 4810 	call write_block 
      001BF4                       4811 	_drop 2 ;  drop write_block argument  
      001BF4 5B 02            [ 2]    1     addw sp,#2 
                                   4812 ; write en end of file marker 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001BF6 AE 00 01         [ 2] 4813 	ldw x,#1
      001BF9 A6 FF            [ 1] 4814 	ld a,#EOF  
      001BFB CD 00 DC         [ 4] 4815 	call write_byte 
      001BFE CD 1A A7         [ 4] 4816 	call incr_farptr
                                   4817 ; save farptr in ffree
      001C01 CE 00 13         [ 2] 4818 	ldw x,farptr 
      001C04 C6 00 15         [ 1] 4819 	ld a,farptr+2 
      001C07 CF 00 16         [ 2] 4820 	ldw ffree,x 
      001C0A C7 00 18         [ 1] 4821 	ld ffree+2,a
                                   4822 ;write 4 zero bytes as an end of all files marker 
      001C0D 5F               [ 1] 4823     clrw x 
      001C0E 4B 04            [ 1] 4824 	push #4 
      001C10                       4825 4$:
      001C10 4F               [ 1] 4826 	clr a 
      001C11 CD 00 DC         [ 4] 4827 	call write_byte 
      001C14 5C               [ 1] 4828 	incw x 
      001C15 0A 01            [ 1] 4829 	dec (1,sp)
      001C17 26 F7            [ 1] 4830 	jrne 4$
      001C19 84               [ 1] 4831 5$: pop a 
                                   4832 ; display saved size  
      001C1A 1E 01            [ 2] 4833 	ldw x,(BSIZE,sp) 
      001C1C CD 09 9D         [ 4] 4834 	call print_int 
      001C1F                       4835 	_drop VSIZE 
      001C1F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C21 81               [ 4] 4836 	ret 
                                   4837 
                                   4838 
                                   4839 ;------------------------
                                   4840 ; BASIC: LOAD "file" 
                                   4841 ; load file to RAM 
                                   4842 ; for execution 
                                   4843 ;------------------------
      001C22                       4844 load:
      001C22 72 01 00 24 07   [ 2] 4845 	btjf flags,#FRUN,0$ 
      001C27 27 05            [ 1] 4846 	jreq 0$ 
      001C29 A6 07            [ 1] 4847 	ld a,#ERR_CMD_ONLY 
      001C2B CC 07 1A         [ 2] 4848 	jp tb_error 
      001C2E                       4849 0$:	
      001C2E CD 07 FE         [ 4] 4850 	call next_token 
      001C31 A1 0A            [ 1] 4851 	cp a,#TK_QSTR
      001C33 27 03            [ 1] 4852 	jreq 1$
      001C35 CC 07 18         [ 2] 4853 	jp syntax_error 
      001C38                       4854 1$:	
      001C38 90 CE 00 03      [ 2] 4855 	ldw y,basicptr
      001C3C 72 B9 00 00      [ 2] 4856 	addw y,in.w 
      001C40 55 00 02 00 01   [ 1] 4857 	mov in,count 
      001C45 CD 1B 13         [ 4] 4858 	call search_file 
      001C48 25 05            [ 1] 4859 	jrc 2$ 
      001C4A A6 09            [ 1] 4860 	ld a,#ERR_NOT_FILE
      001C4C CC 07 1A         [ 2] 4861 	jp tb_error  
      001C4F                       4862 2$:	
      001C4F CD 1A A7         [ 4] 4863 	call incr_farptr  
      001C52 CD 05 E6         [ 4] 4864 	call clear_basic  
      001C55 5F               [ 1] 4865 	clrw x
      001C56 92 AF 00 13      [ 5] 4866 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C5A 90 95            [ 1] 4867 	ld yh,a 
      001C5C 5C               [ 1] 4868 	incw x  
      001C5D 92 AF 00 13      [ 5] 4869 	ldf a,([farptr],x)
      001C61 5C               [ 1] 4870 	incw x 
      001C62 90 97            [ 1] 4871 	ld yl,a 
      001C64 72 B9 00 1B      [ 2] 4872 	addw y,txtbgn
      001C68 90 CF 00 1D      [ 2] 4873 	ldw txtend,y
      001C6C 90 CE 00 1B      [ 2] 4874 	ldw y,txtbgn
      001C70                       4875 3$:	; load BASIC text 	
      001C70 92 AF 00 13      [ 5] 4876 	ldf a,([farptr],x)
      001C74 90 F7            [ 1] 4877 	ld (y),a 
      001C76 5C               [ 1] 4878 	incw x 
      001C77 90 5C            [ 1] 4879 	incw y 
      001C79 90 C3 00 1D      [ 2] 4880 	cpw y,txtend 
      001C7D 2B F1            [ 1] 4881 	jrmi 3$
                                   4882 ; print loaded size 	 
      001C7F CE 00 1D         [ 2] 4883 	ldw x,txtend 
      001C82 72 B0 00 1B      [ 2] 4884 	subw x,txtbgn
      001C86 CD 09 9D         [ 4] 4885 	call print_int 
      001C89 81               [ 4] 4886 	ret 
                                   4887 
                                   4888 ;-----------------------------------
                                   4889 ; BASIC: FORGET ["file_name"] 
                                   4890 ; erase file_name and all others 
                                   4891 ; after it. 
                                   4892 ; without argument erase all files 
                                   4893 ;-----------------------------------
      001C8A                       4894 forget:
      001C8A CD 07 FE         [ 4] 4895 	call next_token 
      001C8D A1 00            [ 1] 4896 	cp a,#TK_NONE 
      001C8F 27 26            [ 1] 4897 	jreq 3$ 
      001C91 A1 0A            [ 1] 4898 	cp a,#TK_QSTR
      001C93 27 03            [ 1] 4899 	jreq 1$
      001C95 CC 07 18         [ 2] 4900 	jp syntax_error
      001C98 90 CE 00 03      [ 2] 4901 1$: ldw y,basicptr
      001C9C 72 B9 00 00      [ 2] 4902 	addw y,in.w
      001CA0 55 00 02 00 01   [ 1] 4903 	mov in,count 
      001CA5 CD 1B 13         [ 4] 4904 	call search_file
      001CA8 25 05            [ 1] 4905 	jrc 2$
      001CAA A6 09            [ 1] 4906 	ld a,#ERR_NOT_FILE 
      001CAC CC 07 1A         [ 2] 4907 	jp tb_error 
      001CAF                       4908 2$: 
      001CAF CE 00 13         [ 2] 4909 	ldw x,farptr
      001CB2 C6 00 15         [ 1] 4910 	ld a,farptr+2
      001CB5 20 0A            [ 2] 4911 	jra 4$ 
      001CB7                       4912 3$: ; forget all files 
      001CB7 AE 01 00         [ 2] 4913 	ldw x,#0x100
      001CBA 4F               [ 1] 4914 	clr a 
      001CBB CF 00 13         [ 2] 4915 	ldw farptr,x 
      001CBE C7 00 15         [ 1] 4916 	ld farptr+2,a 
      001CC1                       4917 4$:
      001CC1 CF 00 16         [ 2] 4918 	ldw ffree,x 
      001CC4 C7 00 18         [ 1] 4919 	ld ffree+2,a 
      001CC7 4B 04            [ 1] 4920 	push #4
      001CC9 5F               [ 1] 4921 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001CCA                       4922 5$: 
      001CCA 4F               [ 1] 4923 	clr a  
      001CCB CD 00 DC         [ 4] 4924 	call write_byte 
      001CCE 5C               [ 1] 4925 	incw x 
      001CCF 0A 01            [ 1] 4926 	dec (1,sp)
      001CD1 26 F7            [ 1] 4927 	jrne 5$	
      001CD3 84               [ 1] 4928 6$: pop a 
      001CD4 81               [ 4] 4929 	ret 
                                   4930 
                                   4931 ;----------------------
                                   4932 ; BASIC: DIR 
                                   4933 ; list saved files 
                                   4934 ;----------------------
                           000001  4935 	COUNT=1 ; files counter 
                           000002  4936 	VSIZE=2 
      001CD5                       4937 directory:
      001CD5                       4938 	_vars VSIZE 
      001CD5 52 02            [ 2]    1     sub sp,#VSIZE 
      001CD7 5F               [ 1] 4939 	clrw x 
      001CD8 1F 01            [ 2] 4940 	ldw (COUNT,sp),x 
      001CDA CF 00 14         [ 2] 4941 	ldw farptr+1,x 
      001CDD 35 01 00 13      [ 1] 4942 	mov farptr,#1 
      001CE1                       4943 dir_loop:
      001CE1 5F               [ 1] 4944 	clrw x 
      001CE2 92 AF 00 13      [ 5] 4945 	ldf a,([farptr],x)
      001CE6 27 39            [ 1] 4946 	jreq 8$ 
      001CE8                       4947 1$: ;name loop 	
      001CE8 92 AF 00 13      [ 5] 4948 	ldf a,([farptr],x)
      001CEC 27 06            [ 1] 4949 	jreq 2$ 
      001CEE CD 01 9E         [ 4] 4950 	call putc 
      001CF1 5C               [ 1] 4951 	incw x 
      001CF2 20 F4            [ 2] 4952 	jra 1$
      001CF4 5C               [ 1] 4953 2$: incw x ; skip ending 0. 
      001CF5 A6 20            [ 1] 4954 	ld a,#SPACE 
      001CF7 CD 01 9E         [ 4] 4955 	call putc 
                                   4956 ; get file size 	
      001CFA 92 AF 00 13      [ 5] 4957 	ldf a,([farptr],x)
      001CFE 90 95            [ 1] 4958 	ld yh,a 
      001D00 5C               [ 1] 4959 	incw x 
      001D01 92 AF 00 13      [ 5] 4960 	ldf a,([farptr],x)
      001D05 5C               [ 1] 4961 	incw x 
      001D06 90 97            [ 1] 4962 	ld yl,a 
      001D08 90 89            [ 2] 4963 	pushw y 
      001D0A 72 FB 01         [ 2] 4964 	addw x,(1,sp)
      001D0D 5C               [ 1] 4965 	incw x ; skip EOF marker 
                                   4966 ; skip to next file 
      001D0E CD 1A A7         [ 4] 4967 	call incr_farptr 
                                   4968 ; print file size 
      001D11 85               [ 2] 4969 	popw x ; file size 
      001D12 CD 09 9D         [ 4] 4970 	call print_int 
      001D15 A6 0D            [ 1] 4971 	ld a,#CR 
      001D17 CD 01 9E         [ 4] 4972 	call putc
      001D1A 1E 01            [ 2] 4973 	ldw x,(COUNT,sp)
      001D1C 5C               [ 1] 4974 	incw x
      001D1D 1F 01            [ 2] 4975 	ldw (COUNT,sp),x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D1F 20 C0            [ 2] 4976 	jra dir_loop 
      001D21                       4977 8$: ; print number of files 
      001D21 1E 01            [ 2] 4978 	ldw x,(COUNT,sp)
      001D23 CD 09 9D         [ 4] 4979 	call print_int 
      001D26 AE 1D 56         [ 2] 4980 	ldw x,#file_count 
      001D29 CD 01 B0         [ 4] 4981 	call puts  
                                   4982 ; print drive free space 	
      001D2C A6 FF            [ 1] 4983 	ld a,#0xff 
      001D2E C0 00 18         [ 1] 4984 	sub a,ffree+2 
      001D31 C7 00 0A         [ 1] 4985 	ld acc8,a 
      001D34 A6 7F            [ 1] 4986 	ld a,#0x7f 
      001D36 C2 00 17         [ 1] 4987 	sbc a,ffree+1 
      001D39 C7 00 09         [ 1] 4988 	ld acc16,a 
      001D3C A6 02            [ 1] 4989 	ld a,#2 
      001D3E C2 00 16         [ 1] 4990 	sbc a,ffree 
      001D41 C7 00 08         [ 1] 4991 	ld acc24,a 
      001D44 5F               [ 1] 4992 	clrw x  
      001D45 A6 06            [ 1] 4993 	ld a,#6 
      001D47 97               [ 1] 4994 	ld xl,a 
      001D48 A6 0A            [ 1] 4995 	ld a,#10 
      001D4A CD 09 55         [ 4] 4996 	call prti24 
      001D4D AE 1D 5E         [ 2] 4997 	ldw x,#drive_free
      001D50 CD 01 B0         [ 4] 4998 	call puts 
      001D53                       4999 	_drop VSIZE 
      001D53 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D55 81               [ 4] 5000 	ret
      001D56 20 66 69 6C 65 73 0A  5001 file_count: .asciz " files\n"
             00
      001D5E 20 62 79 74 65 73 20  5002 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   5003 
                                   5004 ;---------------------
                                   5005 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5006 ; write 1 or more byte to FLASH or EEPROM
                                   5007 ; starting at address  
                                   5008 ; input:
                                   5009 ;   expr1  	is address 
                                   5010 ;   expr2   is byte to write
                                   5011 ; output:
                                   5012 ;   none 
                                   5013 ;---------------------
                           000001  5014 	ADDR=1
                           000002  5015 	VSIZ=2 
      001D6B                       5016 write:
      001D6B                       5017 	_vars VSIZE 
      001D6B 52 02            [ 2]    1     sub sp,#VSIZE 
      001D6D 72 5F 00 13      [ 1] 5018 	clr farptr ; expect 16 bits address 
      001D71 CD 12 B9         [ 4] 5019 	call expression
      001D74 A1 04            [ 1] 5020 	cp a,#TK_INTGR 
      001D76 27 03            [ 1] 5021 	jreq 0$
      001D78 CC 07 18         [ 2] 5022 	jp syntax_error
      001D7B 1F 01            [ 2] 5023 0$: ldw (ADDR,sp),x 
      001D7D CD 07 FE         [ 4] 5024 	call next_token 
      001D80 A1 0D            [ 1] 5025 	cp a,#TK_COMMA 
      001D82 27 02            [ 1] 5026 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001D84 20 19            [ 2] 5027 	jra 9$ 
      001D86 CD 12 B9         [ 4] 5028 1$:	call expression
      001D89 A1 04            [ 1] 5029 	cp a,#TK_INTGR
      001D8B 27 03            [ 1] 5030 	jreq 2$
      001D8D CC 07 18         [ 2] 5031 	jp syntax_error
      001D90 9F               [ 1] 5032 2$:	ld a,xl 
      001D91 1E 01            [ 2] 5033 	ldw x,(ADDR,sp) 
      001D93 CF 00 14         [ 2] 5034 	ldw farptr+1,x 
      001D96 5F               [ 1] 5035 	clrw x 
      001D97 CD 00 DC         [ 4] 5036 	call write_byte
      001D9A 1E 01            [ 2] 5037 	ldw x,(ADDR,sp)
      001D9C 5C               [ 1] 5038 	incw x 
      001D9D 20 DC            [ 2] 5039 	jra 0$ 
      001D9F                       5040 9$:
      001D9F                       5041 	_drop VSIZE
      001D9F 5B 02            [ 2]    1     addw sp,#VSIZE 
      001DA1 81               [ 4] 5042 	ret 
                                   5043 
                                   5044 
                                   5045 ;---------------------
                                   5046 ;BASIC: CHAR(expr)
                                   5047 ; évaluate expression 
                                   5048 ; and take the 7 least 
                                   5049 ; bits as ASCII character
                                   5050 ;---------------------
      001DA2                       5051 char:
      001DA2 A6 0B            [ 1] 5052 	ld a,#TK_LPAREN 
      001DA4 CD 11 B5         [ 4] 5053 	call expect 
      001DA7 CD 12 FD         [ 4] 5054 	call relation 
      001DAA A1 04            [ 1] 5055 	cp a,#TK_INTGR 
      001DAC 27 03            [ 1] 5056 	jreq 1$
      001DAE CC 07 18         [ 2] 5057 	jp syntax_error
      001DB1 89               [ 2] 5058 1$:	pushw x 
      001DB2 A6 0C            [ 1] 5059 	ld a,#TK_RPAREN 
      001DB4 CD 11 B5         [ 4] 5060 	call expect
      001DB7 85               [ 2] 5061 	popw x  
      001DB8 9F               [ 1] 5062 	ld a,xl 
      001DB9 A4 7F            [ 1] 5063 	and a,#0x7f 
      001DBB 97               [ 1] 5064 	ld xl,a
      001DBC A6 03            [ 1] 5065 	ld a,#TK_CHAR
      001DBE 81               [ 4] 5066 	ret
                                   5067 
                                   5068 ;---------------------
                                   5069 ; BASIC: ASC(string|char)
                                   5070 ; extract first character 
                                   5071 ; of string argument 
                                   5072 ; return it as TK_INTGR 
                                   5073 ;---------------------
      001DBF                       5074 ascii:
      001DBF A6 0B            [ 1] 5075 	ld a,#TK_LPAREN
      001DC1 CD 11 B5         [ 4] 5076 	call expect 
      001DC4 CD 07 FE         [ 4] 5077 	call next_token 
      001DC7 A1 0A            [ 1] 5078 	cp a,#TK_QSTR 
      001DC9 27 07            [ 1] 5079 	jreq 1$
      001DCB A1 03            [ 1] 5080 	cp a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001DCD 27 06            [ 1] 5081 	jreq 2$ 
      001DCF CC 07 18         [ 2] 5082 	jp syntax_error
      001DD2                       5083 1$: 
      001DD2 F6               [ 1] 5084 	ld a,(x)
      001DD3 20 01            [ 2] 5085 	jra 3$
      001DD5                       5086 2$: 
      001DD5 9F               [ 1] 5087 	ld a,xl 
      001DD6 97               [ 1] 5088 3$:	ld xl,a 
      001DD7 4F               [ 1] 5089 	clr a  
      001DD8 95               [ 1] 5090 	ld xh,a 
      001DD9 89               [ 2] 5091 	pushw x  
      001DDA A6 0C            [ 1] 5092 	ld a,#TK_RPAREN 
      001DDC CD 11 B5         [ 4] 5093 	call expect 
      001DDF 85               [ 2] 5094 	popw x 
      001DE0 A6 04            [ 1] 5095 	ld a,#TK_INTGR 
      001DE2 81               [ 4] 5096 	ret 
                                   5097 
                                   5098 ;---------------------
                                   5099 ;BASIC: KEY
                                   5100 ; wait for a character 
                                   5101 ; received from STDIN 
                                   5102 ; input:
                                   5103 ;	none 
                                   5104 ; output:
                                   5105 ;	X 		ASCII character 
                                   5106 ;---------------------
      001DE3                       5107 key:
      001DE3 CD 01 A7         [ 4] 5108 	call getc 
      001DE6 5F               [ 1] 5109 	clrw x 
      001DE7 97               [ 1] 5110 	ld xl,a 
      001DE8 A6 04            [ 1] 5111 	ld a,#TK_INTGR
      001DEA 81               [ 4] 5112 	ret
                                   5113 
                                   5114 ;----------------------
                                   5115 ; BASIC: QKEY
                                   5116 ; Return true if there 
                                   5117 ; is a character in 
                                   5118 ; waiting in STDIN 
                                   5119 ; input:
                                   5120 ;  none 
                                   5121 ; output:
                                   5122 ;   X 		0|1 
                                   5123 ;-----------------------
      001DEB                       5124 qkey: 
      001DEB 5F               [ 1] 5125 	clrw x 
      001DEC 72 0B 52 40 01   [ 2] 5126 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001DF1 5C               [ 1] 5127 	incw x 
      001DF2 A6 04            [ 1] 5128 9$: ld a,#TK_INTGR
      001DF4 81               [ 4] 5129 	ret 
                                   5130 
                                   5131 ;---------------------
                                   5132 ; BASIC: GPIO(expr,reg)
                                   5133 ; return gpio address 
                                   5134 ; expr {0..8}
                                   5135 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5136 ;   none 
                                   5137 ; output:
                                   5138 ;   X 		gpio register address
                                   5139 ;----------------------------
      001DF5                       5140 gpio:
      001DF5 A6 0B            [ 1] 5141 	ld a,#TK_LPAREN 
      001DF7 CD 11 B5         [ 4] 5142 	call expect 
      001DFA CD 11 C2         [ 4] 5143 	call arg_list
      001DFD A1 02            [ 1] 5144 	cp a,#2
      001DFF 27 03            [ 1] 5145 	jreq 1$
      001E01 CC 07 18         [ 2] 5146 	jp syntax_error  
      001E04                       5147 1$:	
      001E04 A6 0C            [ 1] 5148 	ld a,#TK_RPAREN 
      001E06 CD 11 B5         [ 4] 5149 	call expect 
      001E09 AE 00 02         [ 2] 5150 	ldw x,#2
      001E0C 72 DE 00 19      [ 5] 5151 	ldw x,([dstkptr],x) ; port 
      001E10 2B 1B            [ 1] 5152 	jrmi bad_port
      001E12 A3 00 09         [ 2] 5153 	cpw x,#9
      001E15 2A 16            [ 1] 5154 	jrpl bad_port
      001E17 A6 05            [ 1] 5155 	ld a,#5
      001E19 42               [ 4] 5156 	mul x,a
      001E1A 1C 50 00         [ 2] 5157 	addw x,#GPIO_BASE 
      001E1D 89               [ 2] 5158 	pushw x 
      001E1E CD 0F A2         [ 4] 5159 	call dpop 
      001E21 72 FB 01         [ 2] 5160 	addw x,(1,sp)
      001E24 1F 01            [ 2] 5161 	ldw (1,sp),x  
      001E26 CD 0F C9         [ 4] 5162 	call ddrop  
      001E29 85               [ 2] 5163 	popw x 
      001E2A A6 04            [ 1] 5164 	ld a,#TK_INTGR
      001E2C 81               [ 4] 5165 	ret
      001E2D                       5166 bad_port:
      001E2D A6 0A            [ 1] 5167 	ld a,#ERR_BAD_VALUE
      001E2F CC 07 1A         [ 2] 5168 	jp tb_error
                                   5169 
                                   5170 ;----------------------
                                   5171 ; BASIC: ODR 
                                   5172 ; return offset of gpio
                                   5173 ; ODR register: 0
                                   5174 ; ---------------------
      001E32                       5175 port_odr:
      001E32 AE 00 00         [ 2] 5176 	ldw x,#GPIO_ODR
      001E35 A6 04            [ 1] 5177 	ld a,#TK_INTGR
      001E37 81               [ 4] 5178 	ret
                                   5179 
                                   5180 ;----------------------
                                   5181 ; BASIC: IDR 
                                   5182 ; return offset of gpio
                                   5183 ; IDR register: 1
                                   5184 ; ---------------------
      001E38                       5185 port_idr:
      001E38 AE 00 01         [ 2] 5186 	ldw x,#GPIO_IDR
      001E3B A6 04            [ 1] 5187 	ld a,#TK_INTGR
      001E3D 81               [ 4] 5188 	ret
                                   5189 
                                   5190 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   5191 ; BASIC: DDR 
                                   5192 ; return offset of gpio
                                   5193 ; DDR register: 2
                                   5194 ; ---------------------
      001E3E                       5195 port_ddr:
      001E3E AE 00 02         [ 2] 5196 	ldw x,#GPIO_DDR
      001E41 A6 04            [ 1] 5197 	ld a,#TK_INTGR
      001E43 81               [ 4] 5198 	ret
                                   5199 
                                   5200 ;----------------------
                                   5201 ; BASIC: CRL  
                                   5202 ; return offset of gpio
                                   5203 ; CR1 register: 3
                                   5204 ; ---------------------
      001E44                       5205 port_cr1:
      001E44 AE 00 03         [ 2] 5206 	ldw x,#GPIO_CR1
      001E47 A6 04            [ 1] 5207 	ld a,#TK_INTGR
      001E49 81               [ 4] 5208 	ret
                                   5209 
                                   5210 ;----------------------
                                   5211 ; BASIC: CRH  
                                   5212 ; return offset of gpio
                                   5213 ; CR2 register: 4
                                   5214 ; ---------------------
      001E4A                       5215 port_cr2:
      001E4A AE 00 04         [ 2] 5216 	ldw x,#GPIO_CR2
      001E4D A6 04            [ 1] 5217 	ld a,#TK_INTGR
      001E4F 81               [ 4] 5218 	ret
                                   5219 
                                   5220 ;-------------------------
                                   5221 ; BASIC: UFLASH 
                                   5222 ; return user flash address
                                   5223 ; input:
                                   5224 ;  none 
                                   5225 ; output:
                                   5226 ;	A		TK_INTGR
                                   5227 ;   X 		user address 
                                   5228 ;---------------------------
      001E50                       5229 uflash:
      001E50 AE 22 00         [ 2] 5230 	ldw x,#user_space 
      001E53 A6 04            [ 1] 5231 	ld a,#TK_INTGR 
      001E55 81               [ 4] 5232 	ret 
                                   5233 
                                   5234 ;-------------------------
                                   5235 ; BASIC: EEPROM 
                                   5236 ; return eeprom address
                                   5237 ; input:
                                   5238 ;  none 
                                   5239 ; output:
                                   5240 ;	A		TK_INTGR
                                   5241 ;   X 		eeprom address 
                                   5242 ;---------------------------
      001E56                       5243 eeprom:
      001E56 AE 40 00         [ 2] 5244 	ldw x,#EEPROM_BASE 
      001E59 A6 04            [ 1] 5245 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E5B 81               [ 4] 5246 	ret 
                                   5247 
                                   5248 ;---------------------
                                   5249 ; BASIC: USR(addr[,arg])
                                   5250 ; execute a function written 
                                   5251 ; in binary code.
                                   5252 ; binary fonction should 
                                   5253 ; return token attribute in A 
                                   5254 ; and value in X. 
                                   5255 ; input:
                                   5256 ;   addr	routine address 
                                   5257 ;   arg 	is an optional argument 
                                   5258 ; output:
                                   5259 ;   A 		token attribute 
                                   5260 ;   X       returned value 
                                   5261 ;---------------------
      001E5C                       5262 usr:
      001E5C 90 89            [ 2] 5263 	pushw y 	
      001E5E A6 0B            [ 1] 5264 	ld a,#TK_LPAREN 
      001E60 CD 11 B5         [ 4] 5265 	call expect 
      001E63 CD 11 C2         [ 4] 5266 	call arg_list 
      001E66 A1 01            [ 1] 5267 	cp a,#1 
      001E68 2A 03            [ 1] 5268 	jrpl 2$ 
      001E6A CC 07 18         [ 2] 5269 	jp syntax_error 
      001E6D A6 0C            [ 1] 5270 2$: ld a,#TK_RPAREN
      001E6F CD 11 B5         [ 4] 5271 	call expect 
      001E72 CD 0F A2         [ 4] 5272 	call dpop 
      001E75 A1 02            [ 1] 5273 	cp a,#2 
      001E77 2B 05            [ 1] 5274 	jrmi 4$
      001E79 90 93            [ 1] 5275 	ldw y,x ; y=arg 
      001E7B CD 0F A2         [ 4] 5276 	call dpop ;x=addr 
      001E7E 51               [ 1] 5277 4$:	exgw y,x ; y=addr,x=arg 
      001E7F 90 FD            [ 4] 5278 	call (y)
      001E81 90 85            [ 2] 5279 	popw y 
      001E83 81               [ 4] 5280 	ret 
                                   5281 
                                   5282 ;------------------------------
                                   5283 ; BASIC: BYE 
                                   5284 ; halt mcu in its lowest power mode 
                                   5285 ; wait for reset or external interrupt
                                   5286 ; do a cold start on wakeup.
                                   5287 ;------------------------------
      001E84                       5288 bye:
      001E84 72 0D 52 40 FB   [ 2] 5289 	btjf UART3_SR,#UART_SR_TC,.
      001E89 8E               [10] 5290 	halt
      001E8A CC 05 5B         [ 2] 5291 	jp cold_start  
                                   5292 
                                   5293 ;----------------------------------
                                   5294 ; BASIC: SLEEP 
                                   5295 ; halt mcu until reset or external
                                   5296 ; interrupt.
                                   5297 ; Resume progam after SLEEP command
                                   5298 ;----------------------------------
      001E8D                       5299 sleep:
      001E8D 72 0D 52 40 FB   [ 2] 5300 	btjf UART3_SR,#UART_SR_TC,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E92 72 16 00 24      [ 1] 5301 	bset flags,#FSLEEP
      001E96 8E               [10] 5302 	halt 
      001E97 81               [ 4] 5303 	ret 
                                   5304 
                                   5305 ;-------------------------------
                                   5306 ; BASIC: PAUSE expr 
                                   5307 ; suspend execution for n msec.
                                   5308 ; input:
                                   5309 ;	none
                                   5310 ; output:
                                   5311 ;	none 
                                   5312 ;------------------------------
      001E98                       5313 pause:
      001E98 CD 12 B9         [ 4] 5314 	call expression
      001E9B A1 04            [ 1] 5315 	cp a,#TK_INTGR
      001E9D 27 03            [ 1] 5316 	jreq pause02 
      001E9F CC 07 18         [ 2] 5317 	jp syntax_error
      001EA2                       5318 pause02: 
      001EA2 5D               [ 2] 5319 1$: tnzw x 
      001EA3 27 04            [ 1] 5320 	jreq 2$
      001EA5 8F               [10] 5321 	wfi 
      001EA6 5A               [ 2] 5322 	decw x 
      001EA7 26 F9            [ 1] 5323 	jrne 1$
      001EA9 4F               [ 1] 5324 2$:	clr a 
      001EAA 81               [ 4] 5325 	ret 
                                   5326 
                                   5327 ;------------------------------
                                   5328 ; BASIC: TICKS
                                   5329 ; return msec ticks counter value 
                                   5330 ; input:
                                   5331 ; 	none 
                                   5332 ; output:
                                   5333 ;	X 		TK_INTGR
                                   5334 ;-------------------------------
      001EAB                       5335 get_ticks:
      001EAB CE 00 0B         [ 2] 5336 	ldw x,ticks 
      001EAE A6 04            [ 1] 5337 	ld a,#TK_INTGR
      001EB0 81               [ 4] 5338 	ret 
                                   5339 
                                   5340 
                                   5341 
                                   5342 ;------------------------------
                                   5343 ; BASIC: ABS(expr)
                                   5344 ; return absolute value of expr.
                                   5345 ; input:
                                   5346 ;   none
                                   5347 ; output:
                                   5348 ;   X     	positive integer
                                   5349 ;-------------------------------
      001EB1                       5350 abs:
      001EB1 A6 0B            [ 1] 5351 	ld a,#TK_LPAREN
      001EB3 CD 11 B5         [ 4] 5352 	call expect 
      001EB6 CD 11 C2         [ 4] 5353 	call arg_list
      001EB9 A1 01            [ 1] 5354 	cp a,#1 
      001EBB 27 03            [ 1] 5355 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001EBD CC 07 18         [ 2] 5356 	jp syntax_error
      001EC0                       5357 0$:  
      001EC0 A6 0C            [ 1] 5358 	ld a,#TK_RPAREN 
      001EC2 CD 11 B5         [ 4] 5359 	call expect 
      001EC5 CD 0F A2         [ 4] 5360     call dpop   
      001EC8 9E               [ 1] 5361 	ld a,xh 
      001EC9 A5 80            [ 1] 5362 	bcp a,#0x80 
      001ECB 27 01            [ 1] 5363 	jreq 2$ 
      001ECD 50               [ 2] 5364 	negw x 
      001ECE A6 04            [ 1] 5365 2$: ld a,#TK_INTGR 
      001ED0 81               [ 4] 5366 	ret 
                                   5367 
                                   5368 ;------------------------------
                                   5369 ; BASIC: RND(expr)
                                   5370 ; return random number 
                                   5371 ; between 1 and expr inclusive
                                   5372 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5373 ; input:
                                   5374 ; 	none 
                                   5375 ; output:
                                   5376 ;	X 		random positive integer 
                                   5377 ;------------------------------
      001ED1                       5378 random:
      001ED1 A6 0B            [ 1] 5379 	ld a,#TK_LPAREN 
      001ED3 CD 11 B5         [ 4] 5380 	call expect 
      001ED6 CD 11 C2         [ 4] 5381 	call arg_list 
      001ED9 A1 01            [ 1] 5382 	cp a,#1
      001EDB 27 03            [ 1] 5383 	jreq 1$
      001EDD CC 07 18         [ 2] 5384 	jp syntax_error
      001EE0 A6 0C            [ 1] 5385 1$: ld a,#TK_RPAREN
      001EE2 CD 11 B5         [ 4] 5386 	call expect 
      001EE5 CD 0F A2         [ 4] 5387 	call dpop 
      001EE8 89               [ 2] 5388 	pushw x 
      001EE9 9E               [ 1] 5389 	ld a,xh 
      001EEA A5 80            [ 1] 5390 	bcp a,#0x80 
      001EEC 27 05            [ 1] 5391 	jreq 2$
      001EEE A6 0A            [ 1] 5392 	ld a,#ERR_BAD_VALUE
      001EF0 CC 07 1A         [ 2] 5393 	jp tb_error
      001EF3                       5394 2$: 
                                   5395 ; acc16=(x<<5)^x 
      001EF3 CE 00 0D         [ 2] 5396 	ldw x,seedx 
      001EF6 58               [ 2] 5397 	sllw x 
      001EF7 58               [ 2] 5398 	sllw x 
      001EF8 58               [ 2] 5399 	sllw x 
      001EF9 58               [ 2] 5400 	sllw x 
      001EFA 58               [ 2] 5401 	sllw x 
      001EFB 9E               [ 1] 5402 	ld a,xh 
      001EFC C8 00 0D         [ 1] 5403 	xor a,seedx 
      001EFF C7 00 09         [ 1] 5404 	ld acc16,a 
      001F02 9F               [ 1] 5405 	ld a,xl 
      001F03 C8 00 0E         [ 1] 5406 	xor a,seedx+1 
      001F06 C7 00 0A         [ 1] 5407 	ld acc8,a 
                                   5408 ; seedx=seedy 
      001F09 CE 00 0F         [ 2] 5409 	ldw x,seedy 
      001F0C CF 00 0D         [ 2] 5410 	ldw seedx,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5411 ; seedy=seedy^(seedy>>1)
      001F0F 90 54            [ 2] 5412 	srlw y 
      001F11 90 9E            [ 1] 5413 	ld a,yh 
      001F13 C8 00 0F         [ 1] 5414 	xor a,seedy 
      001F16 C7 00 0F         [ 1] 5415 	ld seedy,a  
      001F19 90 9F            [ 1] 5416 	ld a,yl 
      001F1B C8 00 10         [ 1] 5417 	xor a,seedy+1 
      001F1E C7 00 10         [ 1] 5418 	ld seedy+1,a 
                                   5419 ; acc16>>3 
      001F21 CE 00 09         [ 2] 5420 	ldw x,acc16 
      001F24 54               [ 2] 5421 	srlw x 
      001F25 54               [ 2] 5422 	srlw x 
      001F26 54               [ 2] 5423 	srlw x 
                                   5424 ; x=acc16^x 
      001F27 9E               [ 1] 5425 	ld a,xh 
      001F28 C8 00 09         [ 1] 5426 	xor a,acc16 
      001F2B 95               [ 1] 5427 	ld xh,a 
      001F2C 9F               [ 1] 5428 	ld a,xl 
      001F2D C8 00 0A         [ 1] 5429 	xor a,acc8 
      001F30 97               [ 1] 5430 	ld xl,a 
                                   5431 ; seedy=x^seedy 
      001F31 C8 00 10         [ 1] 5432 	xor a,seedy+1
      001F34 97               [ 1] 5433 	ld xl,a 
      001F35 9E               [ 1] 5434 	ld a,xh 
      001F36 C8 00 0F         [ 1] 5435 	xor a,seedy
      001F39 95               [ 1] 5436 	ld xh,a 
      001F3A CF 00 0F         [ 2] 5437 	ldw seedy,x 
                                   5438 ; return seedy modulo expr + 1 
      001F3D 90 85            [ 2] 5439 	popw y 
      001F3F 65               [ 2] 5440 	divw x,y 
      001F40 93               [ 1] 5441 	ldw x,y 
      001F41 5C               [ 1] 5442 	incw x 
      001F42 A6 04            [ 1] 5443 	ld a,#TK_INTGR
      001F44 81               [ 4] 5444 	ret 
                                   5445 
                                   5446 ;---------------------------------
                                   5447 ; BASIC: WORDS 
                                   5448 ; affiche la listes des mots du
                                   5449 ; dictionnaire.
                                   5450 ;---------------------------------
                           000001  5451 	WLEN=1
                           000002  5452 	LLEN=2  
                           000002  5453 	VSIZE=2 
      001F45                       5454 words:
      001F45                       5455 	_vars VSIZE
      001F45 52 02            [ 2]    1     sub sp,#VSIZE 
      001F47 0F 02            [ 1] 5456 	clr (LLEN,sp)
      001F49 90 AE 21 7E      [ 2] 5457 	ldw y,#kword_dict+2
      001F4D 93               [ 1] 5458 0$:	ldw x,y
      001F4E F6               [ 1] 5459 	ld a,(x)
      001F4F A4 0F            [ 1] 5460 	and a,#15 
      001F51 6B 01            [ 1] 5461 	ld (WLEN,sp),a 
      001F53 5C               [ 1] 5462 1$:	incw x 
      001F54 F6               [ 1] 5463 	ld a,(x)
      001F55 CD 01 9E         [ 4] 5464 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F58 0C 02            [ 1] 5465 	inc (LLEN,sp)
      001F5A 0A 01            [ 1] 5466 	dec (WLEN,sp)
      001F5C 26 F5            [ 1] 5467 	jrne 1$
      001F5E A6 46            [ 1] 5468 	ld a,#70
      001F60 11 02            [ 1] 5469 	cp a,(LLEN,sp)
      001F62 2B 09            [ 1] 5470 	jrmi 2$   
      001F64 A6 20            [ 1] 5471 	ld a,#SPACE 
      001F66 CD 01 9E         [ 4] 5472 	call putc 
      001F69 0C 02            [ 1] 5473 	inc (LLEN,sp) 
      001F6B 20 07            [ 2] 5474 	jra 3$
      001F6D A6 0D            [ 1] 5475 2$: ld a,#CR 
      001F6F CD 01 9E         [ 4] 5476 	call putc 
      001F72 0F 02            [ 1] 5477 	clr (LLEN,sp)
      001F74 72 A2 00 02      [ 2] 5478 3$:	subw y,#2 
      001F78 90 FE            [ 2] 5479 	ldw y,(y)
      001F7A 26 D1            [ 1] 5480 	jrne 0$  
      001F7C                       5481 	_drop VSIZE 
      001F7C 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F7E 81               [ 4] 5482 	ret 
                                   5483 
                                   5484 
                                   5485 ;*********************************
                                   5486 
                                   5487 ;------------------------------
                                   5488 ;      dictionary 
                                   5489 ; format:
                                   5490 ;   link:   2 bytes 
                                   5491 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5492 ;   cmd_name: 16 byte max 
                                   5493 ;   code_address: 2 bytes 
                                   5494 ;------------------------------
                                   5495 	.macro _dict_entry len,name,cmd 
                                   5496 	.word LINK 
                                   5497 	LINK=.
                                   5498 name:
                                   5499 	.byte len 	
                                   5500 	.ascii "name"
                                   5501 	.word cmd 
                                   5502 	.endm 
                                   5503 
                           000000  5504 	LINK=0
      001F7F                       5505 kword_end:
      001F7F                       5506 	_dict_entry,5,WRITE,write  
      001F7F 00 00                    1 	.word LINK 
                           001F81     2 	LINK=.
      001F81                          3 WRITE:
      001F81 05                       4 	.byte 5 	
      001F82 57 52 49 54 45           5 	.ascii "WRITE"
      001F87 1D 6B                    6 	.word write 
      001F89                       5507 	_dict_entry,5,WORDS,words 
      001F89 1F 81                    1 	.word LINK 
                           001F8B     2 	LINK=.
      001F8B                          3 WORDS:
      001F8B 05                       4 	.byte 5 	
      001F8C 57 4F 52 44 53           5 	.ascii "WORDS"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001F91 1F 45                    6 	.word words 
      001F93                       5508 	_dict_entry 4,WAIT,wait 
      001F93 1F 8B                    1 	.word LINK 
                           001F95     2 	LINK=.
      001F95                          3 WAIT:
      001F95 04                       4 	.byte 4 	
      001F96 57 41 49 54              5 	.ascii "WAIT"
      001F9A 17 07                    6 	.word wait 
      001F9C                       5509 	_dict_entry,3+F_IFUNC,USR,usr
      001F9C 1F 95                    1 	.word LINK 
                           001F9E     2 	LINK=.
      001F9E                          3 USR:
      001F9E 43                       4 	.byte 3+F_IFUNC 	
      001F9F 55 53 52                 5 	.ascii "USR"
      001FA2 1E 5C                    6 	.word usr 
      001FA4                       5510 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      001FA4 1F 9E                    1 	.word LINK 
                           001FA6     2 	LINK=.
      001FA6                          3 UFLASH:
      001FA6 46                       4 	.byte 6+F_IFUNC 	
      001FA7 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001FAD 1E 50                    6 	.word uflash 
      001FAF                       5511 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      001FAF 1F A6                    1 	.word LINK 
                           001FB1     2 	LINK=.
      001FB1                          3 UBOUND:
      001FB1 46                       4 	.byte 6+F_IFUNC 	
      001FB2 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001FB8 13 78                    6 	.word ubound 
      001FBA                       5512 	_dict_entry,2,TO,to
      001FBA 1F B1                    1 	.word LINK 
                           001FBC     2 	LINK=.
      001FBC                          3 TO:
      001FBC 02                       4 	.byte 2 	
      001FBD 54 4F                    5 	.ascii "TO"
      001FBF 18 12                    6 	.word to 
      001FC1                       5513 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      001FC1 1F BC                    1 	.word LINK 
                           001FC3     2 	LINK=.
      001FC3                          3 TICKS:
      001FC3 45                       4 	.byte 5+F_IFUNC 	
      001FC4 54 49 43 4B 53           5 	.ascii "TICKS"
      001FC9 1E AB                    6 	.word get_ticks 
      001FCB                       5514 	_dict_entry,4,STOP,stop 
      001FCB 1F C3                    1 	.word LINK 
                           001FCD     2 	LINK=.
      001FCD                          3 STOP:
      001FCD 04                       4 	.byte 4 	
      001FCE 53 54 4F 50              5 	.ascii "STOP"
      001FD2 19 9E                    6 	.word stop 
      001FD4                       5515 	_dict_entry,4,STEP,step 
      001FD4 1F CD                    1 	.word LINK 
                           001FD6     2 	LINK=.
      001FD6                          3 STEP:
      001FD6 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001FD7 53 54 45 50              5 	.ascii "STEP"
      001FDB 18 42                    6 	.word step 
      001FDD                       5516 	_dict_entry,5,SLEEP,sleep 
      001FDD 1F D6                    1 	.word LINK 
                           001FDF     2 	LINK=.
      001FDF                          3 SLEEP:
      001FDF 05                       4 	.byte 5 	
      001FE0 53 4C 45 45 50           5 	.ascii "SLEEP"
      001FE5 1E 8D                    6 	.word sleep 
      001FE7                       5517 	_dict_entry,4+F_IFUNC,SIZE,size
      001FE7 1F DF                    1 	.word LINK 
                           001FE9     2 	LINK=.
      001FE9                          3 SIZE:
      001FE9 44                       4 	.byte 4+F_IFUNC 	
      001FEA 53 49 5A 45              5 	.ascii "SIZE"
      001FEE 13 6E                    6 	.word size 
      001FF0                       5518     _dict_entry,4,SHOW,show 
      001FF0 1F E9                    1 	.word LINK 
                           001FF2     2 	LINK=.
      001FF2                          3 SHOW:
      001FF2 04                       4 	.byte 4 	
      001FF3 53 48 4F 57              5 	.ascii "SHOW"
      001FF7 13 54                    6 	.word show 
      001FF9                       5519 	_dict_entry,4,SAVE,save
      001FF9 1F F2                    1 	.word LINK 
                           001FFB     2 	LINK=.
      001FFB                          3 SAVE:
      001FFB 04                       4 	.byte 4 	
      001FFC 53 41 56 45              5 	.ascii "SAVE"
      002000 1B 5E                    6 	.word save 
      002002                       5520 	_dict_entry 3,RUN,run
      002002 1F FB                    1 	.word LINK 
                           002004     2 	LINK=.
      002004                          3 RUN:
      002004 03                       4 	.byte 3 	
      002005 52 55 4E                 5 	.ascii "RUN"
      002008 19 57                    6 	.word run 
      00200A                       5521 	_dict_entry,3+F_IFUNC,RND,random 
      00200A 20 04                    1 	.word LINK 
                           00200C     2 	LINK=.
      00200C                          3 RND:
      00200C 43                       4 	.byte 3+F_IFUNC 	
      00200D 52 4E 44                 5 	.ascii "RND"
      002010 1E D1                    6 	.word random 
      002012                       5522 	_dict_entry,6,RETURN,return 
      002012 20 0C                    1 	.word LINK 
                           002014     2 	LINK=.
      002014                          3 RETURN:
      002014 06                       4 	.byte 6 	
      002015 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00201B 19 33                    6 	.word return 
      00201D                       5523 	_dict_entry 6,REMARK,rem 
      00201D 20 14                    1 	.word LINK 
                           00201F     2 	LINK=.
      00201F                          3 REMARK:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      00201F 06                       4 	.byte 6 	
      002020 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002026 17 01                    6 	.word rem 
      002028                       5524 	_dict_entry,5+F_IFUNC,RDADC,read_adc
      002028 20 1F                    1 	.word LINK 
                           00202A     2 	LINK=.
      00202A                          3 RDADC:
      00202A 45                       4 	.byte 5+F_IFUNC 	
      00202B 52 44 41 44 43           5 	.ascii "RDADC"
      002030 1A 1A                    6 	.word read_adc 
      002032                       5525 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002032 20 2A                    1 	.word LINK 
                           002034     2 	LINK=.
      002034                          3 QKEY:
      002034 44                       4 	.byte 4+F_IFUNC 	
      002035 51 4B 45 59              5 	.ascii "QKEY"
      002039 1D EB                    6 	.word qkey 
      00203B                       5526 	_dict_entry,6,PWRADC,power_adc 
      00203B 20 34                    1 	.word LINK 
                           00203D     2 	LINK=.
      00203D                          3 PWRADC:
      00203D 06                       4 	.byte 6 	
      00203E 50 57 52 41 44 43        5 	.ascii "PWRADC"
      002044 19 D5                    6 	.word power_adc 
      002046                       5527 	_dict_entry 5,PRINT,print 
      002046 20 3D                    1 	.word LINK 
                           002048     2 	LINK=.
      002048                          3 PRINT:
      002048 05                       4 	.byte 5 	
      002049 50 52 49 4E 54           5 	.ascii "PRINT"
      00204E 15 F2                    6 	.word print 
      002050                       5528 	_dict_entry,4,POKE,poke 
      002050 20 48                    1 	.word LINK 
                           002052     2 	LINK=.
      002052                          3 POKE:
      002052 04                       4 	.byte 4 	
      002053 50 4F 4B 45              5 	.ascii "POKE"
      002057 17 A4                    6 	.word poke 
      002059                       5529 	_dict_entry,4+F_IFUNC,PEEK,peek 
      002059 20 52                    1 	.word LINK 
                           00205B     2 	LINK=.
      00205B                          3 PEEK:
      00205B 44                       4 	.byte 4+F_IFUNC 	
      00205C 50 45 45 4B              5 	.ascii "PEEK"
      002060 17 B7                    6 	.word peek 
      002062                       5530 	_dict_entry,5,PAUSE,pause 
      002062 20 5B                    1 	.word LINK 
                           002064     2 	LINK=.
      002064                          3 PAUSE:
      002064 05                       4 	.byte 5 	
      002065 50 41 55 53 45           5 	.ascii "PAUSE"
      00206A 1E 98                    6 	.word pause 
      00206C                       5531 	_dict_entry,3+F_IFUNC,ODR,port_odr
      00206C 20 64                    1 	.word LINK 
                           00206E     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00206E                          3 ODR:
      00206E 43                       4 	.byte 3+F_IFUNC 	
      00206F 4F 44 52                 5 	.ascii "ODR"
      002072 1E 32                    6 	.word port_odr 
      002074                       5532 	_dict_entry,3,NEW,new
      002074 20 6E                    1 	.word LINK 
                           002076     2 	LINK=.
      002076                          3 NEW:
      002076 03                       4 	.byte 3 	
      002077 4E 45 57                 5 	.ascii "NEW"
      00207A 1A 9C                    6 	.word new 
      00207C                       5533 	_dict_entry,4,NEXT,next 
      00207C 20 76                    1 	.word LINK 
                           00207E     2 	LINK=.
      00207E                          3 NEXT:
      00207E 04                       4 	.byte 4 	
      00207F 4E 45 58 54              5 	.ascii "NEXT"
      002083 18 6A                    6 	.word next 
      002085                       5534 	_dict_entry,4,LOAD,load 
      002085 20 7E                    1 	.word LINK 
                           002087     2 	LINK=.
      002087                          3 LOAD:
      002087 04                       4 	.byte 4 	
      002088 4C 4F 41 44              5 	.ascii "LOAD"
      00208C 1C 22                    6 	.word load 
      00208E                       5535 	_dict_entry 4,LIST,list
      00208E 20 87                    1 	.word LINK 
                           002090     2 	LINK=.
      002090                          3 LIST:
      002090 04                       4 	.byte 4 	
      002091 4C 49 53 54              5 	.ascii "LIST"
      002095 13 AE                    6 	.word list 
      002097                       5536 	_dict_entry 3,LET,let 
      002097 20 90                    1 	.word LINK 
                           002099     2 	LINK=.
      002099                          3 LET:
      002099 03                       4 	.byte 3 	
      00209A 4C 45 54                 5 	.ascii "LET"
      00209D 13 86                    6 	.word let 
      00209F                       5537 	_dict_entry,3+F_IFUNC,KEY,key 
      00209F 20 99                    1 	.word LINK 
                           0020A1     2 	LINK=.
      0020A1                          3 KEY:
      0020A1 43                       4 	.byte 3+F_IFUNC 	
      0020A2 4B 45 59                 5 	.ascii "KEY"
      0020A5 1D E3                    6 	.word key 
      0020A7                       5538 	_dict_entry,5,INPUT,input_var  
      0020A7 20 A1                    1 	.word LINK 
                           0020A9     2 	LINK=.
      0020A9                          3 INPUT:
      0020A9 05                       4 	.byte 5 	
      0020AA 49 4E 50 55 54           5 	.ascii "INPUT"
      0020AF 16 8D                    6 	.word input_var 
      0020B1                       5539 	_dict_entry,2,IF,if 
      0020B1 20 A9                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                           0020B3     2 	LINK=.
      0020B3                          3 IF:
      0020B3 02                       4 	.byte 2 	
      0020B4 49 46                    5 	.ascii "IF"
      0020B6 17 D4                    6 	.word if 
      0020B8                       5540 	_dict_entry,3+F_IFUNC,IDR,port_idr
      0020B8 20 B3                    1 	.word LINK 
                           0020BA     2 	LINK=.
      0020BA                          3 IDR:
      0020BA 43                       4 	.byte 3+F_IFUNC 	
      0020BB 49 44 52                 5 	.ascii "IDR"
      0020BE 1E 38                    6 	.word port_idr 
      0020C0                       5541 	_dict_entry,3,HEX,hex_base
      0020C0 20 BA                    1 	.word LINK 
                           0020C2     2 	LINK=.
      0020C2                          3 HEX:
      0020C2 03                       4 	.byte 3 	
      0020C3 48 45 58                 5 	.ascii "HEX"
      0020C6 13 64                    6 	.word hex_base 
      0020C8                       5542 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      0020C8 20 C2                    1 	.word LINK 
                           0020CA     2 	LINK=.
      0020CA                          3 GPIO:
      0020CA 44                       4 	.byte 4+F_IFUNC 	
      0020CB 47 50 49 4F              5 	.ascii "GPIO"
      0020CF 1D F5                    6 	.word gpio 
      0020D1                       5543 	_dict_entry,4,GOTO,goto 
      0020D1 20 CA                    1 	.word LINK 
                           0020D3     2 	LINK=.
      0020D3                          3 GOTO:
      0020D3 04                       4 	.byte 4 	
      0020D4 47 4F 54 4F              5 	.ascii "GOTO"
      0020D8 18 DD                    6 	.word goto 
      0020DA                       5544 	_dict_entry,5,GOSUB,gosub 
      0020DA 20 D3                    1 	.word LINK 
                           0020DC     2 	LINK=.
      0020DC                          3 GOSUB:
      0020DC 05                       4 	.byte 5 	
      0020DD 47 4F 53 55 42           5 	.ascii "GOSUB"
      0020E2 18 EA                    6 	.word gosub 
      0020E4                       5545 	_dict_entry,6,FORGET,forget 
      0020E4 20 DC                    1 	.word LINK 
                           0020E6     2 	LINK=.
      0020E6                          3 FORGET:
      0020E6 06                       4 	.byte 6 	
      0020E7 46 4F 52 47 45 54        5 	.ascii "FORGET"
      0020ED 1C 8A                    6 	.word forget 
      0020EF                       5546 	_dict_entry,3,FOR,for 
      0020EF 20 E6                    1 	.word LINK 
                           0020F1     2 	LINK=.
      0020F1                          3 FOR:
      0020F1 03                       4 	.byte 3 	
      0020F2 46 4F 52                 5 	.ascii "FOR"
      0020F5 17 E8                    6 	.word for 
      0020F7                       5547 	_dict_entry,6+F_IFUNC,EEPROM,eeprom 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0020F7 20 F1                    1 	.word LINK 
                           0020F9     2 	LINK=.
      0020F9                          3 EEPROM:
      0020F9 46                       4 	.byte 6+F_IFUNC 	
      0020FA 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      002100 1E 56                    6 	.word eeprom 
      002102                       5548 	_dict_entry,3,DIR,directory 
      002102 20 F9                    1 	.word LINK 
                           002104     2 	LINK=.
      002104                          3 DIR:
      002104 03                       4 	.byte 3 	
      002105 44 49 52                 5 	.ascii "DIR"
      002108 1C D5                    6 	.word directory 
      00210A                       5549 	_dict_entry,3,DEC,dec_base
      00210A 21 04                    1 	.word LINK 
                           00210C     2 	LINK=.
      00210C                          3 DEC:
      00210C 03                       4 	.byte 3 	
      00210D 44 45 43                 5 	.ascii "DEC"
      002110 13 69                    6 	.word dec_base 
      002112                       5550 	_dict_entry,3+F_IFUNC,DDR,port_ddr 
      002112 21 0C                    1 	.word LINK 
                           002114     2 	LINK=.
      002114                          3 DDR:
      002114 43                       4 	.byte 3+F_IFUNC 	
      002115 44 44 52                 5 	.ascii "DDR"
      002118 1E 3E                    6 	.word port_ddr 
      00211A                       5551 	_dict_entry,3+F_IFUNC,CRL,port_cr1 
      00211A 21 14                    1 	.word LINK 
                           00211C     2 	LINK=.
      00211C                          3 CRL:
      00211C 43                       4 	.byte 3+F_IFUNC 	
      00211D 43 52 4C                 5 	.ascii "CRL"
      002120 1E 44                    6 	.word port_cr1 
      002122                       5552 	_dict_entry,3+F_IFUNC,CRH,port_cr2
      002122 21 1C                    1 	.word LINK 
                           002124     2 	LINK=.
      002124                          3 CRH:
      002124 43                       4 	.byte 3+F_IFUNC 	
      002125 43 52 48                 5 	.ascii "CRH"
      002128 1E 4A                    6 	.word port_cr2 
      00212A                       5553 	_dict_entry,4+F_CFUNC,CHAR,char
      00212A 21 24                    1 	.word LINK 
                           00212C     2 	LINK=.
      00212C                          3 CHAR:
      00212C 84                       4 	.byte 4+F_CFUNC 	
      00212D 43 48 41 52              5 	.ascii "CHAR"
      002131 1D A2                    6 	.word char 
      002133                       5554 	_dict_entry,3,BYE,bye 
      002133 21 2C                    1 	.word LINK 
                           002135     2 	LINK=.
      002135                          3 BYE:
      002135 03                       4 	.byte 3 	
      002136 42 59 45                 5 	.ascii "BYE"
      002139 1E 84                    6 	.word bye 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00213B                       5555 	_dict_entry,5,BTOGL,bit_toggle
      00213B 21 35                    1 	.word LINK 
                           00213D     2 	LINK=.
      00213D                          3 BTOGL:
      00213D 05                       4 	.byte 5 	
      00213E 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002143 17 5B                    6 	.word bit_toggle 
      002145                       5556 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      002145 21 3D                    1 	.word LINK 
                           002147     2 	LINK=.
      002147                          3 BTEST:
      002147 45                       4 	.byte 5+F_IFUNC 	
      002148 42 54 45 53 54           5 	.ascii "BTEST"
      00214D 17 6F                    6 	.word bit_test 
      00214F                       5557 	_dict_entry,4,BSET,bit_set 
      00214F 21 47                    1 	.word LINK 
                           002151     2 	LINK=.
      002151                          3 BSET:
      002151 04                       4 	.byte 4 	
      002152 42 53 45 54              5 	.ascii "BSET"
      002156 17 32                    6 	.word bit_set 
      002158                       5558 	_dict_entry,4,BRES,bit_reset
      002158 21 51                    1 	.word LINK 
                           00215A     2 	LINK=.
      00215A                          3 BRES:
      00215A 04                       4 	.byte 4 	
      00215B 42 52 45 53              5 	.ascii "BRES"
      00215F 17 46                    6 	.word bit_reset 
      002161                       5559 	_dict_entry,5,BREAK,break 
      002161 21 5A                    1 	.word LINK 
                           002163     2 	LINK=.
      002163                          3 BREAK:
      002163 05                       4 	.byte 5 	
      002164 42 52 45 41 4B           5 	.ascii "BREAK"
      002169 1A 4D                    6 	.word break 
      00216B                       5560 	_dict_entry,4,BEEP,beep 
      00216B 21 63                    1 	.word LINK 
                           00216D     2 	LINK=.
      00216D                          3 BEEP:
      00216D 04                       4 	.byte 4 	
      00216E 42 45 45 50              5 	.ascii "BEEP"
      002172 19 AD                    6 	.word beep 
      002174                       5561 	_dict_entry,3+F_IFUNC,ASC,ascii  
      002174 21 6D                    1 	.word LINK 
                           002176     2 	LINK=.
      002176                          3 ASC:
      002176 43                       4 	.byte 3+F_IFUNC 	
      002177 41 53 43                 5 	.ascii "ASC"
      00217A 1D BF                    6 	.word ascii 
      00217C                       5562 kword_dict:
      00217C                       5563 	_dict_entry,3+F_IFUNC,ABS,abs
      00217C 21 76                    1 	.word LINK 
                           00217E     2 	LINK=.
      00217E                          3 ABS:
      00217E 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00217F 41 42 53                 5 	.ascii "ABS"
      002182 1E B1                    6 	.word abs 
                                   5564 	
                                   5565 
      002200                       5566 	.bndry 128 ; align on FLASH block.
                                   5567 ; free space for user application  
      002200                       5568 user_space:
                                   5569 ; USR() function test
      002200 89               [ 2] 5570 	pushw x 
      002201 72 1A 50 0A      [ 1] 5571 	bset PC_ODR,#5 
      002205 85               [ 2] 5572 	popw x 
      002206 CD 1E A2         [ 4] 5573 	call pause02 
      002209 72 1B 50 0A      [ 1] 5574 	bres PC_ODR,#5 
      00220D 81               [ 4] 5575 	ret
                                   5576 
                                   5577 	.area FLASH_DRIVE (ABS)
      010000                       5578 	.org 0x10000
      010000                       5579 fdrive:
                                   5580 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00217E R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        002176 R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |   5 BEEP       00216D R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_ER=  000000 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  000005     |   5 BREAK      002163 R   |   5 BRES       00215A R
  5 BSET       002151 R   |     BSIZE   =  000001     |     BSP     =  000008 
  5 BTEST      002147 R   |   5 BTOGL      00213D R   |     BTW     =  000001 
    BUFIDX  =  000003     |   5 BYE        002135 R   |     C       =  000001 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000002     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   5 CHAR       00212C R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
    CMD_END =  000002     |     CNT     =  000008     |     COMMA   =  000001 
    COUNT   =  000001     |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
    CR      =  00000D     |   5 CRH        002124 R   |   5 CRL        00211C R
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000006 
    CURR    =  000002     |     CX_BPTR =  000001     |     CX_CNT  =  000005 
    CX_IN   =  000004     |     CX_LNO  =  000003     |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
  5 DDR        002114 R   |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   5 DEC        00210C R   |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   5 DIR        002104 R
    DIVIDND =  000007     |     DIVISR  =  000005     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |     DSTACK_S=  000040     |   5 EEPROM     0020F9 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
    EOF     =  0000FF     |     ERR_BAD_=  00000A     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_L=  000005     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
    FF      =  00000C     |     FFOR    =  000002     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  5 FOR        0020F1 R   |   5 FORGET     0020E6 R   |     FRUN    =  000000 
    FSIZE   =  000001     |     FSLEEP  =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_IFUNC =  000040 
    F_SFUNC =  0000C0     |   5 GOSUB      0020DC R   |     GOS_RET =  000003 
  5 GOTO       0020D3 R   |   5 GPIO       0020CA R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  5 HEX        0020C2 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        0020BA R
  5 IF         0020B3 R   |     IN      =  000007     |     INCR    =  000001 
  5 INPUT      0020A9 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  000003     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        0020A1 R   |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000005     |   5 LET        002099 R   |     LINENO  =  000005 
  5 LINK    =  00217E R   |   5 LIST       002090 R   |     LL      =  000002 
    LLEN    =  000002     |     LL_HB   =  000001     |     LNO     =  000005 
    LN_PTR  =  000005     |   5 LOAD       002087 R   |     MAJOR   =  000001 
    MASK    =  000002     |     MATH_OVF=  000000     |     MINOR   =  000000 
    MULOP   =  000005     |     N1      =  000001     |     N1_HB   =  000006 
    N1_LB   =  000007     |     N2      =  000003     |     N2_HB   =  000008 
    N2_LB   =  000009     |     NAFR    =  004804     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        002076 R
  5 NEXT       00207E R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NL      =  00000A     |     NLEN    =  000001     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R   |   5 ODR        00206E R
    OP      =  000005     |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000028     |   5 PAUSE      002064 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       00205B R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 POKE       002052 R
    PREV    =  000001     |   5 PRINT      002048 R   |     PROD    =  000002 
    PSIZE   =  000001     |   5 PWRADC     00203D R   |   5 QKEY       002034 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

  5 RDADC      00202A R   |   5 REG_A      000947 R   |   5 REG_CC     00094B R
  5 REG_EPC    00093A R   |   5 REG_SP     000950 R   |   5 REG_X      000943 R
  5 REG_Y      00093F R   |     RELOP   =  000005     |   5 REMARK     00201F R
    RETL1   =  000001     |   5 RETURN     002014 R   |   5 RND        00200C R
    ROP     =  004800     |     RST_SR  =  0050B3     |   5 RUN        002004 R
    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       001FFB R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       001FF2 R   |     SIGN    =  000001 
  5 SIZE       001FE9 R   |     SKIP    =  000006     |   5 SLEEP      001FDF R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     0008FD R   |   5 STEP       001FD6 R
  5 STOP       001FCD R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      001FC3 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000002     |     TK_CFUNC=  000008     |     TK_CHAR =  000003 
    TK_CMD  =  000006     |     TK_COLON=  000001     |     TK_COMMA=  00000D 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000007     |     TK_INTGR=  000004     |     TK_LE   =  000036 
    TK_LPARE=  00000B     |     TK_LT   =  000034     |     TK_MINUS=  000011 
    TK_MOD  =  000022     |     TK_MULT =  000020     |     TK_NE   =  000035 
    TK_NONE =  000000     |     TK_PLUS =  000010     |     TK_QSTR =  00000A 
    TK_RPARE=  00000C     |     TK_SFUNC=  000009     |     TK_SHARP=  00000E 
    TK_VAR  =  000005     |   5 TO         001FBC R   |   5 Timer4Up   000019 R
  5 TrapHand   00000A R   |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     001FB1 R   |   5 UFLASH     001FA6 R
  5 USER_ABO   00007E R   |   5 USR        001F9E R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   5 UserButt   000025 R
    VSIZ    =  000002     |     VSIZE   =  000002     |     VT      =  00000B 
  5 WAIT       001F95 R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      001F8B R   |   5 WRITE      001F81 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XADR    =  000001     |     XMASK   =  000001 
    XSAVE   =  000003     |     YSAVE   =  000003     |   5 abs        001EB1 R
  1 acc16      000009 R   |   1 acc24      000008 R   |   1 acc8       00000A R
  5 accept_c   000AF1 R   |   5 add        001083 R   |   5 ansi_seq   000AB3 R
  5 arg_list   0011C2 R   |   1 array_ad   000020 R   |   1 array_si   000022 R
  5 ascii      001DBF R   |   5 at_tst     000DBC R   |   5 atoi24     000ECF R
  5 atoi_exi   000F3D R   |   5 bad_port   001E2D R   |   1 base       000007 R
  1 basicptr   000003 R   |   5 beep       0019AD R   |   5 bin_exit   000CC2 R
  5 bit_rese   001746 R   |   5 bit_set    001732 R   |   5 bit_test   00176F R
  5 bit_togg   00175B R   |   5 bkslsh_t   000D67 R   |   5 bksp       0001BA R
  5 break      001A4D R   |   5 break_po   001A7E R   |   5 bye        001E84 R
  5 char       001DA2 R   |   5 check_fu   0003E4 R   |   5 clear_ba   0005E6 R
  5 clear_va   0004F6 R   |   5 clock_in   000099 R   |   5 cmd_itf    000B15 R
  5 cmd_name   00112E R   |   5 cmp_name   001AF2 R   |   5 cold_sta   00055B R
  5 colon_ts   000D90 R   |   5 comma_ts   000D9B R   |   5 compile    0003F3 R
  5 convert_   000C4A R   |   1 count      000002 R   |   5 cp_loop    001171 R
  5 create_g   000343 R   |   5 cstk_pro   00104D R   |   5 dash_tst   000DB1 R
  5 ddrop      000FC9 R   |   5 ddrop_n    001006 R   |   5 ddup       000FD2 R
  5 dec_base   001369 R   |   5 del_back   000AE2 R   |   5 del_line   00030B R
  5 del_ln     000AD3 R   |   5 delete     0001CA R   |   5 dir_loop   001CE1 R
  5 director   001CD5 R   |   5 divide     0010D9 R   |   5 divu24_8   000A40 R
  5 dotr       001056 R   |   5 dotr_loo   00106B R   |   5 dots       001023 R
  5 dpick      000FE3 R   |   5 dpop       000FA2 R   |   5 dpush      000F95 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

  5 drive_fr   001D5E R   |   3 dstack     001740 R   |   3 dstack_u   001780 R
  5 dstk_pro   001019 R   |   1 dstkptr    000019 R   |   5 dswap      000FAF R
  5 eeprom     001E56 R   |   5 eql_tst    000E1C R   |   5 equal      0015E5 R
  5 err_bad_   0006C7 R   |   5 err_cmd_   000688 R   |   5 err_div0   00064A R
  5 err_dupl   0006A3 R   |   5 err_math   000630 R   |   5 err_mem_   000613 R
  5 err_msg    0005FB R   |   5 err_no_a   0006D4 R   |   5 err_no_l   00065A R
  5 err_not_   0006B5 R   |   5 err_run_   000671 R   |   5 err_synt   000621 R
  5 escaped    000C5F R   |   5 expect     0011B5 R   |   5 expr_exi   0012FA R
  5 expressi   0012B9 R   |   5 factor     001216 R   |   1 farptr     000013 R
  7 fdrive     010000 R   |   5 fetch      000FF2 R   |   5 fetchc     000C02 R
  1 ffree      000016 R   |   5 file_cou   001D56 R   |   5 final_te   000AAD R
  5 first_li   0013D9 R   |   1 flags      000024 R   |   5 for        0017E8 R
  5 forget     001C8A R   |   1 free_ram   00005A R   |   5 ge         0015E7 R
  5 get_arra   0011E6 R   |   5 get_tick   001EAB R   |   5 get_toke   000D04 R
  5 getc       0001A7 R   |   5 go_commo   00190D R   |   5 gosub      0018EA R
  5 goto       0018DD R   |   5 gpio       001DF5 R   |   5 gt         0015E3 R
  5 gt_tst     000E27 R   |   5 hex_base   001364 R   |   5 hse_cloc   000187 R
  5 hsi_cloc   000191 R   |   5 if         0017D4 R   |   1 in         000001 R
  1 in.w       000000 R   |   1 in.w.sav   000011 R   |   5 incr_far   001AA7 R
  5 input_ex   0016FE R   |   5 input_lo   001699 R   |   5 input_va   00168D R
  5 insert_l   00037C R   |   5 insert_l   0003E1 R   |   5 interp     00078A R
  5 interp_l   0007CE R   |   5 invalid    000B5A R   |   5 invalid_   000BD8 R
  5 is_alpha   000504 R   |   5 is_digit   000EBA R   |   5 itoa       0009F9 R
  5 itoa_loo   000A11 R   |   5 key        001DE3 R   |   5 kword_di   00217C R
  5 kword_en   001F7F R   |   5 last_lin   0013E2 R   |   5 le         0015EC R
  5 ledoff     00084D R   |   5 ledon      000848 R   |   5 ledtoggl   000852 R
  5 left_arr   000AB3 R   |   5 left_par   00085B R   |   5 let        001386 R
  5 let02      001390 R   |   1 lineno     000005 R   |   5 lines_sk   0013E7 R
  5 list       0013AE R   |   5 list_exi   00142E R   |   5 list_sta   00140A R
  5 load       001C22 R   |   5 loop_bac   0018B2 R   |   1 loop_dep   00001F R
  5 loop_don   0018CB R   |   5 lt         0015EA R   |   5 lt_tst     000E60 R
  5 mem_peek   000B77 R   |   5 modulo     00111D R   |   5 move       00029E R
  5 move_dow   0002BC R   |   5 move_exi   0002DD R   |   5 move_loo   0002C1 R
  5 move_up    0002AE R   |   5 mul_char   0015D4 R   |   5 multiply   001091 R
  5 mulu24_8   000F41 R   |   5 nbr_tst    000D3D R   |   5 ne         0015EF R
  5 neg_acc2   000A68 R   |   5 new        001A9C R   |   5 next       00186A R
  5 next_tok   0007FE R   |   5 no_match   001183 R   |   5 none       000D04 R
  5 number     000C08 GR  |   5 other      000E98 R   |   3 pad        001718 R
  5 parse_bi   000CA2 R   |   5 parse_in   000C67 R   |   5 parse_ke   000CCA R
  5 parse_qu   000C0F R   |   5 pause      001E98 R   |   5 pause02    001EA2 R
  5 peek       0017B7 R   |   5 peek_byt   000BA2 R   |   5 plus_tst   000DF0 R
  5 poke       0017A4 R   |   5 port_cr1   001E44 R   |   5 port_cr2   001E4A R
  5 port_ddr   001E3E R   |   5 port_idr   001E38 R   |   5 port_odr   001E32 R
  5 power_ad   0019D5 R   |   5 prcnt_ts   000E11 R   |   5 print      0015F2 R
  5 print_ex   001657 R   |   5 print_fa   000BE7 R   |   5 print_in   00099D R
  5 print_re   0008AA R   |   5 print_st   000B6A R   |   5 prt_basi   001481 R
  5 prt_cmd_   001431 R   |   5 prt_loop   0015F6 R   |   5 prt_peek   00024E R
  5 prt_quot   001445 R   |   5 prt_reg1   00088B R   |   5 prt_reg8   000866 R
  5 prt_regs   0001E4 R   |   5 prti24     000955 R   |   1 ptr16      000014 R
  1 ptr8       000015 R   |   5 putc       00019E R   |   5 puts       0001B0 R
  5 qkey       001DEB R   |   5 qmark_ts   000DC7 R   |   5 random     001ED1 R
  5 read_adc   001A1A R   |   5 readln     000A8B R   |   5 readln_l   000A91 R
  5 readln_q   000B06 R   |   5 regs_sta   000227 R   |   5 rel_exit   001351 R
  5 relation   0012FD R   |   5 relop_st   0015D7 R   |   5 rem        001701 R
  5 repl       000B23 R   |   5 repl_exi   000B4B R   |   5 reprint    000AB3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

  5 reset_co   0015F4 R   |   5 rest_con   001678 R   |   5 return     001933 R
  5 right_ar   000AB3 R   |   5 rparnt_t   000D85 R   |   5 rt_msg     000708 R
  5 run        001957 R   |   5 save       001B5E R   |   5 save_con   001663 R
  5 search_d   001160 R   |   5 search_e   0011B1 R   |   5 search_f   001B13 R
  5 search_l   0002E0 R   |   5 search_l   0002EB R   |   5 search_n   001164 R
  1 seedx      00000D R   |   1 seedy      00000F R   |   5 seek_fdr   001AB5 R
  5 sharp_ts   000DA6 R   |   5 show       001354 R   |   5 single_c   0015D0 R
  5 size       00136E R   |   5 skip       000F7B R   |   5 slash_ts   000E06 R
  5 sleep      001E8D R   |   5 software   000515 R   |   5 spaces     0001D8 R
  3 stack_fu   001780 R   |   3 stack_un   001800 R   |   5 star_tst   000DFB R
  5 step       001842 R   |   5 stop       00199E R   |   5 store      000FFC R
  5 store_lo   001854 R   |   5 str_matc   001192 R   |   5 str_tst    000D2C R
  5 strcmp     00027F R   |   5 strcpy     000290 R   |   5 strlen     000272 R
  5 substrac   00108B R   |   5 syntax_e   000718 R   |   1 tab_widt   000025 R
  5 tb_error   00071A R   |   5 term       00126C R   |   5 term01     001275 R
  5 term_exi   0012B6 R   |   5 test_p     000B62 R   |   3 tib        0016C8 R
  5 tick_tst   000DDE R   |   1 ticks      00000B R   |   5 timer4_i   0000AF R
  5 to         001812 R   |   5 to_upper   000EC3 GR  |   5 token_ch   000EA7 R
  5 token_ex   000EB7 R   |   1 txtbgn     00001B R   |   1 txtend     00001D R
  5 uart3_in   000174 R   |   5 uart3_se   000180 R   |   5 uart_ena   000199 R
  5 ubound     001378 R   |   5 uflash     001E50 R   |   5 unget_to   000F8E R
  5 unlock_e   0000C0 R   |   5 unlock_f   0000CE R   |   5 user_spa   002200 R
  5 usr        001E5C R   |   1 vars       000026 R   |   5 wait       001707 R
  5 warm_sta   00076A R   |   5 words      001F45 R   |   5 write      001D6B R
  5 write_bl   000151 R   |   5 write_by   0000DC R   |   5 write_ee   000118 R
  5 write_ex   00014C R   |   5 write_fl   000102 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   220E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

