ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module TBI_STM8
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                     34     .list 
                                     35 
      000000                         36 _dbg 
                           000001     1     DEBUG=1
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000028    43     PAD_SIZE=40
                           000040    44 	DSTACK_SIZE=64 
                           000080    45 	STACK_SIZE=128
                           0017FF    46 	STACK_EMPTY=RAM_SIZE-1  
                           000000    47 	FRUN=0 ; flags run code in variable flags
                           000001    48 	FTRAP=1 ; inside trap handler 
                           000002    49 	FFOR=2 ; FOR loop in preparation 
                           000003    50 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    51 	FBREAK=4 ; break point flag 
                           000005    52 	FCOMP=5  ; compiling flags 
                                     53 
      000000                         54 in.w:  .blkb 1 ; parser position in text line
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000001                         55 in:    .blkb 1 ; low byte of in.w
      000002                         56 count: .blkb 1 ; length of string in text line  
      000003                         57 basicptr:  .blkb 2  ; point to text buffer 
      000005                         58 lineno: .blkb 2  ; BASIC line number 
      000007                         59 base:  .blkb 1 ; nemeric base used to print integer 
      000008                         60 acc24: .blkb 1 ; 24 accumulator
      000009                         61 acc16: .blkb 1
      00000A                         62 acc8:  .blkb 1
      00000B                         63 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000D                         64 seedx: .blkw 1  ; xorshift 16 seed x 
      00000F                         65 seedy: .blkw 1  ; xorshift 16 seed y 
      000011                         66 in.w.saved: .blkw 1 ; set by get_token before parsing next token, used by unget_token
      000013                         67 farptr: .blkb 1 ; far pointer used by file system
      000014                         68 ptr16:  .blkb 1 ; middle byte of farptr
      000015                         69 ptr8:   .blkb 1 ; least byte of farptr 
      000016                         70 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000019                         71 dstkptr: .blkw 1  ; data stack pointer 
      00001B                         72 txtbgn: .ds 2 ; BASIC text beginning address 
      00001D                         73 txtend: .ds 2 ; BASIC text end address 
      00001F                         74 loop_depth: .ds 1 ; FOR loop depth, level of nested loop.  
      000020                         75 array_addr: .ds 2 ; address of @ array 
      000022                         76 array_size: .ds 2 ; array size 
      000024                         77 flags: .ds 1 ; boolean flags
      000025                         78 tab_width: .ds 1 ; print colon width (4)
      000026                         79 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     80 ; keep as last variable 
      00005A                         81 free_ram: ; from here RAM free for BASIC text 
                                     82 
                                     83 ;-----------------------------------
                                     84     .area SSEG (ABS)
                                     85 ;-----------------------------------	
      0016C8                         86     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         87 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         88 pad: .ds PAD_SIZE             ; working buffer
      001740                         89 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         90 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         91 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         92 stack_unf: ; stack underflow ; control_stack bottom 
                                     93 
                                     94 
                                     95 ;--------------------------------------
                                     96     .area HOME 
                                     97 ;--------------------------------------
      000000 82 00 05 57             98     int cold_start
                           000001    99 .if DEBUG
      000004 82 00 00 0A            100 	int TrapHandler 		;TRAP  software interrupt
                           000000   101 .else
                                    102 	int NonHandledInterrupt ;TRAP  software interrupt
                                    103 .endif
      000008 82 00 00 09            104 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            105 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            106 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            107 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            108 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            109 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000020 82 00 00 09            110 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 25            111 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            112 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            113 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            114 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            115 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            116 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            117 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            118 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            119 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            120 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            121 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            122 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            123 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            124 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            125 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            126 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            127 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            128 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            129 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            130 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            131 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            132 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            133 	int NonHandledInterrupt ;int29  not used
                                    134 
                                    135 ;---------------------------------------
                                    136     .area CODE
                                    137 ;---------------------------------------
                           000001   138 .if DEBUG
      000000 53 54 4D 38 5F 54 42   139 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    140 .endif 
                                    141 
      000009                        142 NonHandledInterrupt:
      000009 71                     143     .byte 0x71  ; reinitialize MCU
                                    144 
                                    145 
                                    146 ;------------------------------------
                                    147 ; software interrupt handler  
                                    148 ;------------------------------------
                           000001   149 .if DEBUG 
      00000A                        150 TrapHandler:
      00000A 72 12 00 24      [ 1]  151 	bset flags,#FTRAP 
      00000E CD 08 A6         [ 4]  152 	call print_registers
      000011 CD 0B 15         [ 4]  153 	call cmd_itf
      000014 72 13 00 24      [ 1]  154 	bres flags,#FTRAP 	
      000018 80               [11]  155 	iret
                                    156 .endif 
                                    157 
      000019                        158 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  159 	clr TIM4_SR 
      00001D CE 00 0B         [ 2]  160 	ldw x,ticks
      000020 5C               [ 1]  161 	incw x
      000021 CF 00 0B         [ 2]  162 	ldw ticks,x 
      000024 80               [11]  163 	iret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    164 
                                    165 
                                    166 ;------------------------------------
                                    167 ; Triggered by pressing USER UserButton 
                                    168 ; on NUCLEO card.
                                    169 ;------------------------------------
      000025                        170 UserButtonHandler:
                                    171 ; wait button release
      000025 5F               [ 1]  172 	clrw x
      000026 5A               [ 2]  173 1$: decw x 
      000027 26 FD            [ 1]  174 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  175 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    176 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 24 05   [ 2]  177     btjf flags,#FSLEEP,2$
      000033 72 17 00 24      [ 1]  178 	bres flags,#FSLEEP 
      000037 80               [11]  179 	iret
      000038 72 00 00 24 03   [ 2]  180 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  181 	jp 9$ 
      000040                        182 4$:	; program interrupted by user 
      000040 72 11 00 24      [ 1]  183 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  184 	ldw x,#USER_ABORT
      000047 CD 01 B0         [ 4]  185 	call puts 
      00004A CE 00 03         [ 2]  186 	ldw x,basicptr
      00004D FE               [ 2]  187 	ldw x,(x)
                                    188 ; print line number 
      00004E 35 0A 00 07      [ 1]  189 	mov base,#10 
      000052 35 06 00 25      [ 1]  190 	mov tab_width,#6
      000056 CD 09 99         [ 4]  191 	call print_int  	
      000059 CE 00 03         [ 2]  192 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  193 	addw x,#3  
      00005F CD 01 B0         [ 4]  194 	call puts 
      000062 A6 0D            [ 1]  195 	ld a,#CR 
      000064 CD 01 9E         [ 4]  196 	call putc
      000067 5F               [ 1]  197 	clrw x  
      000068 C6 00 01         [ 1]  198 	ld a,in 
      00006B AB 03            [ 1]  199 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  200 	ld xl,a 
      00006E CD 01 D8         [ 4]  201 	call spaces 
      000071 A6 5E            [ 1]  202 	ld a,#'^
      000073 CD 01 9E         [ 4]  203 	call putc 
      000076                        204 9$:
      000076 AE 17 FF         [ 2]  205     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  206     ldw sp,x
      00007A 9A               [ 1]  207 	rim 
      00007B CC 07 66         [ 2]  208 	jp warm_start
                                    209 
      00007E 0A 50 72 6F 67 72 61   210 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    211 
                                    212 
                                    213 ;----------------------------------------
                                    214 ; inialize MCU clock 
                                    215 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    216 ;   A 		source  HSI | 1 HSE 
                                    217 ;   XL      CLK_CKDIVR , clock divisor 
                                    218 ; output:
                                    219 ;   none 
                                    220 ;----------------------------------------
      000099                        221 clock_init:	
      000099 C1 50 C3         [ 1]  222 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  223 	jreq 2$ ; no switching required 
                                    224 ; select clock source 
      00009E 72 12 50 C5      [ 1]  225 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  226 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  227 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  228 	jrne 1$
      0000AA                        229 2$: 	
                                    230 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  231 	ld a,xl 
      0000AB C7 50 C6         [ 1]  232 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  233 	ret
                                    234 
                                    235 ;---------------------------------
                                    236 ; TIM4 is configured to generate an 
                                    237 ; interrupt every millisecond 
                                    238 ;----------------------------------
      0000AF                        239 timer4_init:
      0000AF 35 07 53 45      [ 1]  240 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B3 35 7D 53 46      [ 1]  241 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B7 35 05 53 40      [ 1]  242 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BB 72 10 53 41      [ 1]  243 	bset TIM4_IER,#TIM4_IER_UIE 
      0000BF 81               [ 4]  244 	ret
                                    245 
                                    246 ;----------------------------------
                                    247 ; unlock EEPROM for writing/erasing
                                    248 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    249 ; input:
                                    250 ;  none
                                    251 ; output:
                                    252 ;  none 
                                    253 ;----------------------------------
      0000C0                        254 unlock_eeprom:
      0000C0 35 AE 50 64      [ 1]  255 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C4 35 56 50 64      [ 1]  256     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C8 72 07 50 5F FB   [ 2]  257 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000CD 81               [ 4]  258 	ret
                                    259 
                                    260 ;----------------------------------
                                    261 ; unlock FLASH for writing/erasing
                                    262 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    263 ; input:
                                    264 ;  none
                                    265 ; output:
                                    266 ;  none
                                    267 ;----------------------------------
      0000CE                        268 unlock_flash:
      0000CE 35 56 50 62      [ 1]  269 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D2 35 AE 50 62      [ 1]  270 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      0000D6 72 03 50 5F FB   [ 2]  271 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000DB 81               [ 4]  272 	ret
                                    273 
                           000000   274 	BLOCK_ERASE=0
                                    275 ;----------------------------
                                    276 ; erase block code must be 
                                    277 ;executed from RAM
                                    278 ;-----------------------------
                           000000   279 .if BLOCK_ERASE 
                                    280 ; this code is copied to RAM 
                                    281 erase_start:
                                    282 	clr a 
                                    283     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    284     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    285 	ldf [farptr],a
                                    286     inc farptr+2 
                                    287     ldf [farptr],a
                                    288     inc farptr+2 
                                    289     ldf [farptr],a
                                    290     inc farptr+2 
                                    291     ldf [farptr],a
                                    292 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    293 	ret
                                    294 erase_end:
                                    295 
                                    296 ; copy erase_start in RAM 
                                    297 move_code_in_ram:
                                    298 	ldw x,#erase_end 
                                    299 	subw x,#erase_start
                                    300 	ldw acc16,x 
                                    301 	ldw x,#pad 
                                    302 	ldw y,#erase_start 
                                    303 	call move 
                                    304 	ret 
                                    305 
                                    306 ;-----------------------------------
                                    307 ; erase flash or EEPROM block 
                                    308 ; a block is 128 bytes 
                                    309 ; input:
                                    310 ;   farptr  address block begin
                                    311 ; output:
                                    312 ;   none
                                    313 ;--------------------------------------
                                    314 erase_block:
                                    315 	ldw x,farptr+1 
                                    316 	pushw x 
                                    317 	call move_code_in_ram 
                                    318 	popw x 
                                    319 	ldw farptr+1,x 
                                    320 	tnz farptr
                                    321 	jrne erase_flash 
                                    322 	ldw x,#FLASH_BASE 
                                    323 	cpw x,farptr+1 
                                    324 	jrpl erase_flash 
                                    325 ; erase eeprom block
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    326 	call unlock_eeprom 
                                    327 	sim 
                                    328 	call pad   
                                    329 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    330 	rim 
                                    331 	ret 
                                    332 ; erase flash block:
                                    333 erase_flash:
                                    334 	call unlock_flash 
                                    335 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    336 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    337 	clr a 
                                    338 	sim 
                                    339 	call pad 
                                    340     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    341 	rim 
                                    342 	ret 
                                    343 .endif ; BLOCK_ERASE 
                                    344 
                                    345 
                                    346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    347 ; write a byte to FLASH or EEPROM 
                                    348 ; input:
                                    349 ;    a  		byte to write
                                    350 ;    farptr  	address
                                    351 ;    x          farptr[x]
                                    352 ; output:
                                    353 ;    none
                                    354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    355 	; variables locales
                           000001   356 	BTW = 1   ; byte to write offset on stack
                           000002   357 	OPT = 2   ; OPTION flag offset on stack
                           000002   358 	VSIZE = 2
      0000DC                        359 write_byte:
      0000DC 90 89            [ 2]  360 	pushw y
      0000DE                        361 	_vars VSIZE
      0000DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E0 6B 01            [ 1]  362 	ld (BTW,sp),a ; byte to write 
      0000E2 0F 02            [ 1]  363 	clr (OPT,sp)  ; OPTION flag
                                    364 ; put addr[15:0] in Y, for bounds check.
      0000E4 90 CE 00 14      [ 2]  365 	ldw y,farptr+1   ; Y=addr15:0
                                    366 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000E8 72 5D 00 13      [ 1]  367 	tnz farptr 
      0000EC 26 14            [ 1]  368 	jrne write_flash
      0000EE 90 A3 21 80      [ 2]  369     cpw y,#user_space
      0000F2 24 0E            [ 1]  370     jruge write_flash
      0000F4 90 A3 40 00      [ 2]  371 	cpw y,#EEPROM_BASE  
      0000F8 25 52            [ 1]  372     jrult write_exit
      0000FA 90 A3 48 00      [ 2]  373 	cpw y,#OPTION_BASE
      0000FE 25 18            [ 1]  374 	jrult write_eeprom
      000100 20 4A            [ 2]  375     jra write_exit
                                    376 ; write program memory
      000102                        377 write_flash:
      000102 CD 00 CE         [ 4]  378 	call unlock_flash 
      000105 9B               [ 1]  379 1$:	sim 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000106 7B 01            [ 1]  380 	ld a,(BTW,sp)
      000108 92 A7 00 13      [ 4]  381 	ldf ([farptr],x),a ; farptr[x]=A
      00010C 72 05 50 5F FB   [ 2]  382 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000111 9A               [ 1]  383     rim 
      000112 72 13 50 5F      [ 1]  384     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000116 20 34            [ 2]  385     jra write_exit
                                    386 ; write eeprom and option
      000118                        387 write_eeprom:
      000118 CD 00 C0         [ 4]  388 	call unlock_eeprom
                                    389 	; check for data eeprom or option eeprom
      00011B 90 A3 48 00      [ 2]  390 	cpw y,#OPTION_BASE
      00011F 2B 08            [ 1]  391 	jrmi 1$
      000121 90 A3 48 80      [ 2]  392 	cpw y,#OPTION_END+1
      000125 2A 02            [ 1]  393 	jrpl 1$
      000127 03 02            [ 1]  394 	cpl (OPT,sp)
      000129                        395 1$: 
      000129 0D 02            [ 1]  396     tnz (OPT,sp)
      00012B 27 08            [ 1]  397     jreq 2$
                                    398 	; pour modifier une option il faut modifier ces 2 bits
      00012D 72 1E 50 5B      [ 1]  399     bset FLASH_CR2,#FLASH_CR2_OPT
      000131 72 1F 50 5C      [ 1]  400     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000135                        401 2$: 
      000135 7B 01            [ 1]  402     ld a,(BTW,sp)
      000137 92 A7 00 13      [ 4]  403     ldf ([farptr],x),a
      00013B 0D 02            [ 1]  404     tnz (OPT,sp)
      00013D 27 08            [ 1]  405     jreq 3$
      00013F 5C               [ 1]  406     incw x
      000140 7B 01            [ 1]  407     ld a,(BTW,sp)
      000142 43               [ 1]  408     cpl a
      000143 92 A7 00 13      [ 4]  409     ldf ([farptr],x),a
      000147 72 05 50 5F FB   [ 2]  410 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014C                        411 write_exit:
      00014C                        412 	_drop VSIZE 
      00014C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00014E 90 85            [ 2]  413 	popw y
      000150 81               [ 4]  414     ret
                                    415 
                                    416 ;--------------------------------------------
                                    417 ; write a data block to eeprom or flash 
                                    418 ; input:
                                    419 ;   Y        source address   
                                    420 ;   X        array index  destination  farptr[x]
                                    421 ;   BSIZE    block size bytes 
                                    422 ;   farptr   write address , byte* 
                                    423 ; output:
                                    424 ;	X 		after last byte written 
                                    425 ;   Y 		after last byte read 
                                    426 ;  farptr   point after block
                                    427 ;---------------------------------------------
      000151                        428 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000151                        429 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    430 	; local var 
                           000001   431 	XSAVE=1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                           000002   432 	VSIZE=2 
      000151                        433 write_block:
      000151                        434 	_vars VSIZE
      000151 52 02            [ 2]    1     sub sp,#VSIZE 
      000153 1F 01            [ 2]  435 	ldw (XSAVE,sp),x 
      000155 1E 05            [ 2]  436 	ldw x,(BSIZE,sp) 
      000157 27 13            [ 1]  437 	jreq 9$
      000159 1E 01            [ 2]  438 1$:	ldw x,(XSAVE,sp)
      00015B 90 F6            [ 1]  439 	ld a,(y)
      00015D CD 00 DC         [ 4]  440 	call write_byte 
      000160 5C               [ 1]  441 	incw x 
      000161 90 5C            [ 1]  442 	incw y 
      000163 1F 01            [ 2]  443 	ldw (XSAVE,sp),x
      000165 1E 05            [ 2]  444 	ldw x,(BSIZE,sp)
      000167 5A               [ 2]  445 	decw x
      000168 1F 05            [ 2]  446 	ldw (BSIZE,sp),x 
      00016A 26 ED            [ 1]  447 	jrne 1$
      00016C                        448 9$:
      00016C 1E 01            [ 2]  449 	ldw x,(XSAVE,sp)
      00016E CD 1A 6D         [ 4]  450 	call incr_farptr
      000171                        451 	_drop VSIZE
      000171 5B 02            [ 2]    1     addw sp,#VSIZE 
      000173 81               [ 4]  452 	ret 
                                    453 
                                    454 
                                    455 ;---------------------------------------------
                                    456 ;   UART3 subroutines
                                    457 ;---------------------------------------------
                                    458 
                                    459 ;---------------------------------------------
                                    460 ; initialize UART3, 115200 8N1
                                    461 ; input:
                                    462 ;	none
                                    463 ; output:
                                    464 ;   none
                                    465 ;---------------------------------------------
      000174                        466 uart3_init:
                                    467 	; configure tx pin
      000174 72 1A 50 11      [ 1]  468 	bset PD_DDR,#BIT5 ; tx pin
      000178 72 1A 50 12      [ 1]  469 	bset PD_CR1,#BIT5 ; push-pull output
      00017C 72 1A 50 13      [ 1]  470 	bset PD_CR2,#BIT5 ; fast output
      000180                        471 uart3_set_baud: 
                                    472 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    473 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000180 A6 E1            [ 1]  474 	ld a,#CLK_SWR_HSI
      000182 C1 50 C3         [ 1]  475 	cp a,CLK_CMSR 
      000185 27 0A            [ 1]  476 	jreq hsi_clock 
      000187                        477 hse_clock: ; 8 Mhz 	
      000187 35 05 52 43      [ 1]  478 	mov UART3_BRR2,#0x05 ; must be loaded first
      00018B 35 04 52 42      [ 1]  479 	mov UART3_BRR1,#0x4
      00018F 20 08            [ 2]  480 	jra uart_enable
      000191                        481 hsi_clock: ; 16 Mhz 	
      000191 35 0B 52 43      [ 1]  482 	mov UART3_BRR2,#0x0b ; must be loaded first
      000195 35 08 52 42      [ 1]  483 	mov UART3_BRR1,#0x08
      000199                        484 uart_enable:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000199 35 0C 52 45      [ 1]  485 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      00019D 81               [ 4]  486 	ret
                                    487 	
                                    488 ;---------------------------------
                                    489 ; send character to UART3 
                                    490 ; input:
                                    491 ;   A 
                                    492 ; output:
                                    493 ;   none 
                                    494 ;--------------------------------	
      00019E                        495 putc:
      00019E 72 0F 52 40 FB   [ 2]  496 	btjf UART3_SR,#UART_SR_TXE,.
      0001A3 C7 52 41         [ 1]  497 	ld UART3_DR,a 
      0001A6 81               [ 4]  498 	ret 
                                    499 
                                    500 ;---------------------------------
                                    501 ; wait character from UART3 
                                    502 ; input:
                                    503 ;   none
                                    504 ; output:
                                    505 ;   A 			char  
                                    506 ;--------------------------------	
      0001A7                        507 getc:
      0001A7 72 0B 52 40 FB   [ 2]  508 	btjf UART3_SR,#UART_SR_RXNE,.
      0001AC C6 52 41         [ 1]  509 	ld a,UART3_DR 
      0001AF 81               [ 4]  510 	ret 
                                    511 
                                    512 ;-----------------------------
                                    513 ; send an ASCIZ string to UART3 
                                    514 ; input: 
                                    515 ;   x 		char * 
                                    516 ; output:
                                    517 ;   none 
                                    518 ;-------------------------------
      0001B0                        519 puts:
      0001B0 F6               [ 1]  520     ld a,(x)
      0001B1 27 06            [ 1]  521 	jreq 1$
      0001B3 CD 01 9E         [ 4]  522 	call putc 
      0001B6 5C               [ 1]  523 	incw x 
      0001B7 20 F7            [ 2]  524 	jra puts 
      0001B9 81               [ 4]  525 1$:	ret 
                                    526 
                                    527 
                                    528 ;---------------------------
                                    529 ; delete character at left 
                                    530 ; of cursor on terminal 
                                    531 ; input:
                                    532 ;   none 
                                    533 ; output:
                                    534 ;	none 
                                    535 ;---------------------------
      0001BA                        536 bksp:
      0001BA A6 08            [ 1]  537 	ld a,#BSP 
      0001BC CD 01 9E         [ 4]  538 	call putc 
      0001BF A6 20            [ 1]  539 	ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001C1 CD 01 9E         [ 4]  540 	call putc 
      0001C4 A6 08            [ 1]  541 	ld a,#BSP 
      0001C6 CD 01 9E         [ 4]  542 	call putc 
      0001C9 81               [ 4]  543 	ret 
                                    544 ;---------------------------
                                    545 ; delete n character left of cursor 
                                    546 ; at terminal.
                                    547 ; input: 
                                    548 ;   A   	number of characters to delete.
                                    549 ; output:
                                    550 ;    none 
                                    551 ;--------------------------	
      0001CA                        552 delete:
      0001CA 88               [ 1]  553 	push a 
      0001CB 0D 01            [ 1]  554 0$:	tnz (1,sp)
      0001CD 27 07            [ 1]  555 	jreq 1$
      0001CF CD 01 BA         [ 4]  556 	call bksp 
      0001D2 0A 01            [ 1]  557 	dec (1,sp)
      0001D4 20 F5            [ 2]  558 	jra 0$
      0001D6 84               [ 1]  559 1$:	pop a 
      0001D7 81               [ 4]  560 	ret
                                    561 
                                    562 ;--------------------------
                                    563 ; print n spaces on terminal
                                    564 ; input:
                                    565 ;  X 		number of spaces 
                                    566 ; output:
                                    567 ;	none 
                                    568 ;---------------------------
      0001D8                        569 spaces:
      0001D8 A6 20            [ 1]  570 	ld a,#SPACE 
      0001DA 5D               [ 2]  571 1$:	tnzw x
      0001DB 27 06            [ 1]  572 	jreq 9$
      0001DD CD 01 9E         [ 4]  573 	call putc 
      0001E0 5A               [ 2]  574 	decw x
      0001E1 20 F7            [ 2]  575 	jra 1$
      0001E3                        576 9$: 
      0001E3 81               [ 4]  577 	ret 
                                    578 
                           000001   579 .if DEBUG 
                                    580 ;---------------------------------
                                    581 ;; print actual registers states 
                                    582 ;; as pushed on stack 
                                    583 ;; {Y,X,CC,A}
                                    584 ;---------------------------------
      0001E4                        585 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001E4                        586 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001E4                        587 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001E4                        588 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001E4                        589 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4                        590 prt_regs:
      0001E4 AE 02 27         [ 2]  591 	ldw x,#regs_state 
      0001E7 CD 01 B0         [ 4]  592 	call puts
                                    593 ; register PC
      0001EA 16 01            [ 2]  594 	ldw y,(1,sp)
      0001EC AE 09 36         [ 2]  595 	ldw x,#REG_EPC 
      0001EF CD 08 87         [ 4]  596 	call prt_reg16 
                                    597 ; register CC 
      0001F2 7B 08            [ 1]  598 	ld a,(R_CC,sp)
      0001F4 AE 09 47         [ 2]  599 	ldw x,#REG_CC 
      0001F7 CD 08 62         [ 4]  600 	call prt_reg8 
                                    601 ; register A 
      0001FA 7B 07            [ 1]  602 	ld a,(R_A,sp)
      0001FC AE 09 43         [ 2]  603 	ldw x,#REG_A 
      0001FF CD 08 62         [ 4]  604 	call prt_reg8 
                                    605 ; register X 
      000202 16 05            [ 2]  606 	ldw y,(R_X,sp)
      000204 AE 09 3F         [ 2]  607 	ldw x,#REG_X 
      000207 CD 08 87         [ 4]  608 	call prt_reg16 
                                    609 ; register Y 
      00020A 16 03            [ 2]  610 	ldw y,(R_Y,sp)
      00020C AE 09 3B         [ 2]  611 	ldw x,#REG_Y 
      00020F CD 08 87         [ 4]  612 	call prt_reg16 
                                    613 ; register SP 
      000212 90 96            [ 1]  614 	ldw y,sp
      000214 72 A9 00 08      [ 2]  615 	addw y,#6+ARG_OFS  
      000218 AE 09 4C         [ 2]  616 	ldw x,#REG_SP
      00021B CD 08 87         [ 4]  617 	call prt_reg16
      00021E A6 0D            [ 1]  618 	ld a,#CR 
      000220 CD 01 9E         [ 4]  619 	call putc
      000223 CD 01 9E         [ 4]  620 	call putc   
      000226 81               [ 4]  621 	ret 
                                    622 
      000227 0A 72 65 67 69 73 74   623 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    624 
                                    625 
                                    626 ;--------------------
                                    627 ; print content at address in hex.
                                    628 ; input:
                                    629 ;   X 	address to peek 
                                    630 ; output:
                                    631 ;	none 
                                    632 ;--------------------	
      00024E                        633 prt_peek:
      00024E 89               [ 2]  634 	pushw x 
      00024F CF 00 09         [ 2]  635 	ldw acc16,x 
      000252 72 5F 00 08      [ 1]  636 	clr acc24 
      000256 5F               [ 1]  637 	clrw x 
      000257 A6 10            [ 1]  638 	ld a,#16 
      000259 CD 09 51         [ 4]  639 	call prti24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025C A6 3A            [ 1]  640 	ld a,#': 
      00025E CD 01 9E         [ 4]  641 	call putc 
      000261 A6 20            [ 1]  642 	ld a,#SPACE 
      000263 CD 01 9E         [ 4]  643 	call putc 
      000266 85               [ 2]  644 	popw x 
      000267 F6               [ 1]  645 	ld a,(x)
      000268 C7 00 0A         [ 1]  646 	ld acc8,a 
      00026B 5F               [ 1]  647 	clrw x 
      00026C A6 10            [ 1]  648 	ld a,#16 
      00026E CD 09 51         [ 4]  649 	call prti24
      000271 81               [ 4]  650 	ret 
                                    651 .endif ; DEBUG  
                                    652 
                                    653 ;-------------------------------------
                                    654 ; retrun string length
                                    655 ; input:
                                    656 ;   X         .asciz  
                                    657 ; output:
                                    658 ;   X         length 
                                    659 ;-------------------------------------
      000272                        660 strlen:
      000272 90 93            [ 1]  661 	ldw y,x 
      000274 5F               [ 1]  662 	clrw x 
      000275 90 7D            [ 1]  663 1$:	tnz (y) 
      000277 27 05            [ 1]  664 	jreq 9$ 
      000279 5C               [ 1]  665 	incw x
      00027A 90 5C            [ 1]  666 	incw y 
      00027C 20 F7            [ 2]  667 	jra 1$ 
      00027E 81               [ 4]  668 9$: ret 
                                    669 
                                    670 ;------------------------------------
                                    671 ; compare 2 strings
                                    672 ; input:
                                    673 ;   X 		char* first string 
                                    674 ;   Y       char* second string 
                                    675 ; output:
                                    676 ;   A 		0|1 
                                    677 ;-------------------------------------
      00027F                        678 strcmp:
      00027F F6               [ 1]  679 	ld a,(x)
      000280 27 0B            [ 1]  680 	jreq 5$ 
      000282 90 F1            [ 1]  681 	cp a,(y) 
      000284 26 05            [ 1]  682 	jrne 4$ 
      000286 5C               [ 1]  683 	incw x 
      000287 90 5C            [ 1]  684 	incw y 
      000289 20 F4            [ 2]  685 	jra strcmp 
      00028B                        686 4$: ; not same  
      00028B 4F               [ 1]  687 	clr a 
      00028C 81               [ 4]  688 	ret 
      00028D                        689 5$: ; same 
      00028D A6 01            [ 1]  690 	ld a,#1 
      00028F 81               [ 4]  691 	ret 
                                    692 
                                    693 
                                    694 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    695 ;  copy src to dest 
                                    696 ; input:
                                    697 ;   X 		dest 
                                    698 ;   Y 		src 
                                    699 ; output: 
                                    700 ;   X 		dest 
                                    701 ;----------------------------------
      000290                        702 strcpy:
      000290 89               [ 2]  703 	pushw x 
      000291 90 F6            [ 1]  704 1$: ld a,(y)
      000293 27 06            [ 1]  705 	jreq 9$ 
      000295 F7               [ 1]  706 	ld (x),a 
      000296 5C               [ 1]  707 	incw x 
      000297 90 5C            [ 1]  708 	incw y 
      000299 20 F6            [ 2]  709 	jra 1$ 
      00029B 7F               [ 1]  710 9$:	clr (x)
      00029C 85               [ 2]  711 	popw x 
      00029D 81               [ 4]  712 	ret 
                                    713 
                                    714 ;---------------------------------------
                                    715 ; move memory block 
                                    716 ; input:
                                    717 ;   X 		destination 
                                    718 ;   Y 	    source 
                                    719 ;   acc16	size 
                                    720 ; output:
                                    721 ;   none 
                                    722 ;--------------------------------------
                           000001   723 	INCR=1 ; increament high byte 
                           000002   724 	LB=2 ; increament low byte 
                           000002   725 	VSIZE=2
      00029E                        726 move:
      00029E                        727 	_vars VSIZE 
      00029E 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A0 0F 01            [ 1]  728 	clr (INCR,sp)
      0002A2 0F 02            [ 1]  729 	clr (LB,sp)
      0002A4 90 89            [ 2]  730 	pushw y 
      0002A6 13 01            [ 2]  731 	cpw x,(1,sp) ; compare DEST to SRC 
      0002A8 90 85            [ 2]  732 	popw y 
      0002AA 27 31            [ 1]  733 	jreq move_exit ; x==y 
      0002AC 2B 0E            [ 1]  734 	jrmi move_down
      0002AE                        735 move_up: ; start from top address with incr=-1
      0002AE 72 BB 00 09      [ 2]  736 	addw x,acc16
      0002B2 72 B9 00 09      [ 2]  737 	addw y,acc16
      0002B6 03 01            [ 1]  738 	cpl (INCR,sp)
      0002B8 03 02            [ 1]  739 	cpl (LB,sp)   ; increment = -1 
      0002BA 20 05            [ 2]  740 	jra move_loop  
      0002BC                        741 move_down: ; start from bottom address with incr=1 
      0002BC 5A               [ 2]  742     decw x 
      0002BD 90 5A            [ 2]  743 	decw y
      0002BF 0C 02            [ 1]  744 	inc (LB,sp) ; incr=1 
      0002C1                        745 move_loop:	
      0002C1 C6 00 09         [ 1]  746     ld a, acc16 
      0002C4 CA 00 0A         [ 1]  747 	or a, acc8
      0002C7 27 14            [ 1]  748 	jreq move_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002C9 72 FB 01         [ 2]  749 	addw x,(INCR,sp)
      0002CC 72 F9 01         [ 2]  750 	addw y,(INCR,sp) 
      0002CF 90 F6            [ 1]  751 	ld a,(y)
      0002D1 F7               [ 1]  752 	ld (x),a 
      0002D2 89               [ 2]  753 	pushw x 
      0002D3 CE 00 09         [ 2]  754 	ldw x,acc16 
      0002D6 5A               [ 2]  755 	decw x 
      0002D7 CF 00 09         [ 2]  756 	ldw acc16,x 
      0002DA 85               [ 2]  757 	popw x 
      0002DB 20 E4            [ 2]  758 	jra move_loop
      0002DD                        759 move_exit:
      0002DD                        760 	_drop VSIZE
      0002DD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002DF 81               [ 4]  761 	ret 	
                                    762 
                                    763 ;-------------------------------------
                                    764 ; search text area for a line with 
                                    765 ; same number as lineno  
                                    766 ; input:
                                    767 ;	X 			lineno 
                                    768 ; output:
                                    769 ;   X 			addr of line | 0 
                                    770 ;   Y           lineno|insert address if not found  
                                    771 ;-------------------------------------
                           000001   772 	LL=1 ; line length 
                           000002   773 	LB=2 ; line length low byte 
                           000002   774 	VSIZE=2 
      0002E0                        775 search_lineno:
      0002E0                        776 	_vars VSIZE
      0002E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E2 CF 00 09         [ 2]  777 	ldw acc16,x 
      0002E5 0F 01            [ 1]  778 	clr (LL,sp)
      0002E7 90 CE 00 1B      [ 2]  779 	ldw y,txtbgn
      0002EB                        780 search_ln_loop:
      0002EB 90 C3 00 1D      [ 2]  781 	cpw y,txtend 
      0002EF 2A 13            [ 1]  782 	jrpl 8$
      0002F1 93               [ 1]  783 	ldw x,y 
      0002F2 FE               [ 2]  784 	ldw x,(x) ; x=line number 
      0002F3 C3 00 09         [ 2]  785 	cpw x,acc16 
      0002F6 27 0F            [ 1]  786 	jreq 9$ 
      0002F8 2A 0A            [ 1]  787 	jrpl 8$ ; from here all lines are > lineno 
      0002FA 90 E6 02         [ 1]  788 	ld a,(2,y)
      0002FD 6B 02            [ 1]  789 	ld (LB,sp),a 
      0002FF 72 F9 01         [ 2]  790 	addw y,(LL,sp)
      000302 20 E7            [ 2]  791 	jra search_ln_loop 
      000304 51               [ 1]  792 8$: exgw x,y 
      000305 90 5F            [ 1]  793 	clrw y 	
      000307                        794 9$: _drop VSIZE
      000307 5B 02            [ 2]    1     addw sp,#VSIZE 
      000309 51               [ 1]  795 	exgw x,y   
      00030A 81               [ 4]  796 	ret 
                                    797 
                                    798 ;-------------------------------------
                                    799 ; delete line at addr
                                    800 ; move new line to insert with end of text 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    801 ; otherwise it would be overwritten.
                                    802 ; input:
                                    803 ;   X 		addr of line i.e DEST for move 
                                    804 ;-------------------------------------
                           000001   805 	LLEN=1
                           000003   806 	SRC=3
                           000004   807 	VSIZE=4
      00030B                        808 del_line: 
      00030B                        809 	_vars VSIZE 
      00030B 52 04            [ 2]    1     sub sp,#VSIZE 
      00030D E6 02            [ 1]  810 	ld a,(2,x) ; line length
      00030F 6B 02            [ 1]  811 	ld (LLEN+1,sp),a 
      000311 0F 01            [ 1]  812 	clr (LLEN,sp)
      000313 90 93            [ 1]  813 	ldw y,x  
      000315 72 F9 01         [ 2]  814 	addw y,(LLEN,sp) ;SRC  
      000318 17 03            [ 2]  815 	ldw (SRC,sp),y  ;save source 
      00031A 90 CE 00 1D      [ 2]  816 	ldw y,txtend 
      00031E 90 E6 02         [ 1]  817 	ld a,(2,y)
      000321 90 5F            [ 1]  818 	clrw y 
      000323 90 97            [ 1]  819 	ld yl,a  
      000325 72 B9 00 1D      [ 2]  820 	addw y,txtend
      000329 72 F2 03         [ 2]  821 	subw y,(SRC,sp) ; y=count 
      00032C 90 CF 00 09      [ 2]  822 	ldw acc16,y 
      000330 16 03            [ 2]  823 	ldw y,(SRC,sp)    ; source
      000332 CD 02 9E         [ 4]  824 	call move
      000335 90 CE 00 1D      [ 2]  825 	ldw y,txtend 
      000339 72 F2 01         [ 2]  826 	subw y,(LLEN,sp)
      00033C 90 CF 00 1D      [ 2]  827 	ldw txtend,y  
      000340                        828 	_drop VSIZE     
      000340 5B 04            [ 2]    1     addw sp,#VSIZE 
      000342 81               [ 4]  829 	ret 
                                    830 
                                    831 ;---------------------------------------------
                                    832 ; create a gap in text area 
                                    833 ; move new line to insert in gap with end of text
                                    834 ; otherwise it would be overwritten.
                                    835 ; input:
                                    836 ;    X 			addr gap start 
                                    837 ;    Y 			gap length 
                                    838 ; output:
                                    839 ;    X 			addr gap start 
                                    840 ;--------------------------------------------
                           000001   841 	DEST=1
                           000003   842 	SRC=3
                           000005   843 	LEN=5
                           000006   844 	VSIZE=6 
      000343                        845 create_gap:
      000343                        846 	_vars VSIZE
      000343 52 06            [ 2]    1     sub sp,#VSIZE 
      000345 1F 03            [ 2]  847 	ldw (SRC,sp),x 
      000347 17 05            [ 2]  848 	ldw (LEN,sp),y 
      000349 90 CF 00 09      [ 2]  849 	ldw acc16,y 
      00034D 90 93            [ 1]  850 	ldw y,x ; SRC
      00034F 72 BB 00 09      [ 2]  851 	addw x,acc16  
      000353 1F 01            [ 2]  852 	ldw (DEST,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    853 ;compute size to move 	
      000355 CE 00 1D         [ 2]  854 	ldw x,txtend 
      000358 E6 02            [ 1]  855 	ld a,(2,x) ; pending line length 
      00035A C7 00 0A         [ 1]  856 	ld acc8,a 
      00035D 72 5F 00 09      [ 1]  857 	clr acc16 
      000361 72 BB 00 09      [ 2]  858 	addw x,acc16 
      000365 72 F0 03         [ 2]  859 	subw x,(SRC,sp)
      000368 CF 00 09         [ 2]  860 	ldw acc16,x ; size to move
      00036B 1E 01            [ 2]  861 	ldw x,(DEST,sp) 
      00036D CD 02 9E         [ 4]  862 	call move
      000370 CE 00 1D         [ 2]  863 	ldw x,txtend
      000373 72 FB 05         [ 2]  864 	addw x,(LEN,sp)
      000376 CF 00 1D         [ 2]  865 	ldw txtend,x
      000379                        866 9$:	_drop VSIZE 
      000379 5B 06            [ 2]    1     addw sp,#VSIZE 
      00037B 81               [ 4]  867 	ret 
                                    868 
                                    869 
                                    870 ;--------------------------------------------
                                    871 ; insert line in tib into text area 
                                    872 ; first search for already existing 
                                    873 ; replace existing 
                                    874 ; if strlen(tib)==0 delete existing 
                                    875 ; input:
                                    876 ;   ptr16 				pointer to tokenized line  
                                    877 ; output:
                                    878 ;   none
                                    879 ;---------------------------------------------
                           000001   880 	DEST=1  ; text area insertion address 
                           000003   881 	SRC=3   ; str to insert address 
                           000005   882 	LINENO=5 ; line number 
                           000007   883 	LLEN=7 ; line length 
                           000008   884 	VSIZE=8  
      00037C                        885 insert_line:
      00037C                        886 	_vars VSIZE 
      00037C 52 08            [ 2]    1     sub sp,#VSIZE 
      00037E CE 00 14         [ 2]  887 	ldw x,ptr16  
      000381 C3 00 1B         [ 2]  888 	cpw x,txtbgn 
      000384 26 0D            [ 1]  889 	jrne 0$
                                    890 ;first text line 
      000386 AE 00 02         [ 2]  891 	ldw x,#2 
      000389 72 D6 00 14      [ 4]  892 	ld a,([ptr16],x)
      00038D 5F               [ 1]  893 	clrw x 
      00038E 97               [ 1]  894 	ld xl,a
      00038F 1F 07            [ 2]  895 	ldw (LLEN,sp),x  
      000391 20 45            [ 2]  896 	jra 5$
      000393 72 CE 00 14      [ 5]  897 0$:	ldw x,[ptr16]
                                    898 ; new line number
      000397 1F 05            [ 2]  899 	ldw (LINENO,sp),x 
      000399 AE 00 02         [ 2]  900 	ldw x,#2 
      00039C 72 D6 00 14      [ 4]  901 	ld a,([ptr16],x)
      0003A0 97               [ 1]  902 	ld xl,a
                                    903 ; new line length
      0003A1 1F 07            [ 2]  904 	ldw (LLEN,sp),x
                                    905 ; check if that line number already exit 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003A3 1E 05            [ 2]  906 	ldw x,(LINENO,sp)
      0003A5 CD 02 E0         [ 4]  907 	call search_lineno 
      0003A8 5D               [ 2]  908 	tnzw x 
      0003A9 26 04            [ 1]  909 	jrne 2$
                                    910 ; line doesn't exit
                                    911 ; it will be inserted at this point.  	
      0003AB 17 01            [ 2]  912 	ldw (DEST,sp),y 
      0003AD 20 05            [ 2]  913 	jra 3$
                                    914 ; line exit delete it.
                                    915 ; it will be replaced by new one 	
      0003AF 1F 01            [ 2]  916 2$: ldw (DEST,sp),x 
      0003B1 CD 03 0B         [ 4]  917 	call del_line
      0003B4                        918 3$: 
                                    919 ; insert new line or leave if LLEN==3
                                    920 ; LLEN==3 means empty line 
      0003B4 A6 03            [ 1]  921 	ld a,#3
      0003B6 11 08            [ 1]  922 	cp a,(LLEN+1,sp)
      0003B8 27 27            [ 1]  923 	jreq insert_ln_exit ; empty line exit.
                                    924 ; if insertion point at txtend 
                                    925 ; no move required 
      0003BA 1E 01            [ 2]  926 	ldw x,(DEST,sp)
      0003BC C3 00 1D         [ 2]  927 	cpw x,txtend 
      0003BF 2A 17            [ 1]  928 	jrpl 5$ 
                                    929 ; must create a gap
                                    930 ; at insertion point  
      0003C1 1E 01            [ 2]  931 	ldw x,(DEST,sp)
      0003C3 16 07            [ 2]  932 	ldw y,(LLEN,sp)
      0003C5 CD 03 43         [ 4]  933 	call create_gap 
                                    934 ; move new line in gap 
      0003C8 1E 07            [ 2]  935 	ldw x,(LLEN,sp)
      0003CA CF 00 09         [ 2]  936 	ldw acc16,x 
      0003CD 90 CE 00 1D      [ 2]  937 	ldw y,txtend ;SRC 
      0003D1 1E 01            [ 2]  938 	ldw x,(DEST,sp) ; dest address 
      0003D3 CD 02 9E         [ 4]  939 	call move 
      0003D6 20 09            [ 2]  940 	jra insert_ln_exit  
      0003D8                        941 5$: ; no move required 
      0003D8 1E 07            [ 2]  942 	ldw x,(LLEN,sp) 
      0003DA 72 BB 00 1D      [ 2]  943 	addw x,txtend 
      0003DE CF 00 1D         [ 2]  944 	ldw txtend,x 
      0003E1                        945 insert_ln_exit:	
      0003E1                        946 	_drop VSIZE
      0003E1 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003E3 81               [ 4]  947 	ret
                                    948 
                                    949 
                                    950 ;-----------------------------
                                    951 ; check if text buffer full
                                    952 ; input:
                                    953 ;   ptr16     addr start tokenize line 
                                    954 ;   X         buffer index 
                                    955 ; output:
                                    956 ;   none 
                                    957 ;-----------------------------------
      0003E4                        958 check_full:
      0003E4 72 BB 00 14      [ 2]  959 	addw x,ptr16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003E8 A3 16 C8         [ 2]  960 	cpw x,#tib 
      0003EB 25 05            [ 1]  961 	jrult 1$
      0003ED A6 01            [ 1]  962 	ld a,#ERR_MEM_FULL
      0003EF CC 07 16         [ 2]  963 	jp tb_error 
      0003F2 81               [ 4]  964 1$: ret 
                                    965 
                                    966 
                                    967 ;-----------------------------------
                                    968 ; create token list form text line 
                                    969 ; save this list in text area
                                    970 ; input:
                                    971 ;   none
                                    972 ; output:
                                    973 ;   basicptr     token list buffer
                                    974 ;   lineno 		 BASIC line number 
                                    975 ;   in.w  		 cleared 
                                    976 ;-----------------------------------
                                    977 	.macro _incr_ptr16 n 
                                    978 	ldw x,#n 
                                    979 	addw x,ptr16 
                                    980 	ldw ptr16,x 
                                    981 	.endm 
                                    982 
                           000001   983 	XSAVE=1
                           000003   984 	BUFIDX=3
                           000004   985 	VSIZE=4
      0003F3                        986 compile:
      0003F3                        987 	_vars VSIZE 
      0003F3 52 04            [ 2]    1     sub sp,#VSIZE 
      0003F5 72 1A 00 24      [ 1]  988 	bset flags,#FCOMP 
      0003F9 CE 00 1D         [ 2]  989 	ldw x,txtend
      0003FC CF 00 14         [ 2]  990 	ldw ptr16,x 
      0003FF 5F               [ 1]  991 	clrw x 
      000400 AE 00 03         [ 2]  992 	ldw x,#3
      000403 1F 03            [ 2]  993 	ldw (BUFIDX,sp),X  
      000405 CD 03 E4         [ 4]  994 	call check_full
      000408 5F               [ 1]  995 	clrw x 
      000409 72 CF 00 14      [ 5]  996 	ldw [ptr16],x 
      00040D CD 0D 04         [ 4]  997 	call get_token
      000410 1F 01            [ 2]  998 	ldw (XSAVE,sp),x 
      000412 A1 03            [ 1]  999 	cp a,#TK_INTGR 
      000414 26 11            [ 1] 1000 	jrne 3$
      000416 A3 00 00         [ 2] 1001 	cpw x,#0  
      000419 22 03            [ 1] 1002 	jrugt 1$
      00041B CC 07 14         [ 2] 1003 	jp syntax_error 
      00041E 72 CF 00 14      [ 5] 1004 1$:	ldw [ptr16],x; line number
      000422 CD 0D 04         [ 4] 1005 2$:	call get_token
      000425 1F 01            [ 2] 1006 	ldw (XSAVE,sp),x 
      000427 A1 00            [ 1] 1007 3$:	cp a,#TK_NONE 
      000429 26 03            [ 1] 1008 	jrne 30$
      00042B CC 04 BE         [ 2] 1009 	jp 9$
      00042E                       1010 30$: 	 
      00042E 1E 03            [ 2] 1011 	ldw x,(BUFIDX,sp)
      000430 CD 03 E4         [ 4] 1012 	call check_full 
      000433 16 03            [ 2] 1013 	ldw y,(BUFIDX,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000435 91 D7 14         [ 4] 1014 	ld ([ptr16],y),a 
      000438 90 5C            [ 1] 1015 	incw y
      00043A 17 03            [ 2] 1016 	ldw (BUFIDX,sp),y
      00043C A1 01            [ 1] 1017 	cp a,#TK_COLON 
      00043E 26 02            [ 1] 1018 	jrne 31$
      000440 20 E0            [ 2] 1019 	jra 2$ 
      000442                       1020 31$:
      000442 A1 02            [ 1] 1021 	cp a,#TK_CHAR
      000444 26 0C            [ 1] 1022 	jrne 32$ 
      000446 1E 01            [ 2] 1023 	ldw x,(XSAVE,sp)
      000448 9F               [ 1] 1024 	ld a,xl 
      000449 91 D7 14         [ 4] 1025 	ld ([ptr16],y),a
      00044C 90 5C            [ 1] 1026 	incw y 
      00044E 17 03            [ 2] 1027 	ldw (BUFIDX,sp),y 
      000450 20 D0            [ 2] 1028 	jra 2$ 
      000452                       1029 32$:
      000452 A1 08            [ 1] 1030 	cp a,#TK_QSTR 
      000454 26 25            [ 1] 1031 	jrne 4$
      000456 AE 17 18         [ 2] 1032 	ldw x,#pad 
      000459 CD 02 72         [ 4] 1033 	call strlen
      00045C 5C               [ 1] 1034 	incw x  
      00045D CD 03 E4         [ 4] 1035 	call check_full 
      000460 90 AE 17 18      [ 2] 1036 	ldw y,#pad 
      000464 CE 00 14         [ 2] 1037 	ldw x,ptr16
      000467 72 FB 03         [ 2] 1038 	addw x,(BUFIDX,sp)	
      00046A CD 02 90         [ 4] 1039 	call strcpy 
      00046D AE 17 18         [ 2] 1040 	ldw x,#pad 
      000470 CD 02 72         [ 4] 1041 	call strlen 
      000473 5C               [ 1] 1042 	incw x
      000474 72 FB 03         [ 2] 1043 	addw x,(BUFIDX,sp) 
      000477 1F 03            [ 2] 1044 	ldw (BUFIDX,sp),x
      000479 20 A7            [ 2] 1045 	jra 2$  
      00047B A1 03            [ 1] 1046 4$: cp a,#TK_INTGR
      00047D 25 A3            [ 1] 1047 	jrult 2$
      00047F A1 07            [ 1] 1048 	cp a,#TK_FUNC 
      000481 22 9F            [ 1] 1049 	Jrugt 2$
      000483 1E 01            [ 2] 1050 	ldw x,(XSAVE,sp) 
      000485 16 03            [ 2] 1051 	ldw y,(BUFIDX,sp)
      000487 91 DF 14         [ 5] 1052 	ldw ([ptr16],y),x
      00048A A3 17 06         [ 2] 1053 	cpw x,#rem 
      00048D 26 26            [ 1] 1054 	jrne 5$
      00048F 72 A9 00 02      [ 2] 1055 	addw y,#2 
      000493 90 89            [ 2] 1056 	pushw y 
      000495 CE 00 14         [ 2] 1057 	ldw x,ptr16 
      000498 72 FB 01         [ 2] 1058 	addw x,(1,sp)
      00049B                       1059 	_drop 2  
      00049B 5B 02            [ 2]    1     addw sp,#2 
      00049D 90 CE 00 00      [ 2] 1060 	ldw y,in.w 
      0004A1 72 A9 16 C8      [ 2] 1061 	addw y,#tib 
      0004A5 CD 02 90         [ 4] 1062 	call strcpy 	
      0004A8 CD 02 72         [ 4] 1063 	call strlen 
      0004AB 1C 00 03         [ 2] 1064 	addw x,#3 ; rem exec address+string 0. 
      0004AE 72 FB 03         [ 2] 1065 	addw x,(BUFIDX,sp)
      0004B1 1F 03            [ 2] 1066 	ldw (BUFIDX,sp),x 
      0004B3 20 09            [ 2] 1067 	jra 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004B5 72 A9 00 02      [ 2] 1068 5$:	addw y,#2 
      0004B9 17 03            [ 2] 1069 	ldw (BUFIDX,sp),y 
      0004BB CC 04 22         [ 2] 1070 	jp 2$
      0004BE                       1071 9$: 
      0004BE AE 00 02         [ 2] 1072 	ldw x,#2
      0004C1 16 03            [ 2] 1073 	ldw y,(BUFIDX,sp)
      0004C3 90 9F            [ 1] 1074 	ld a,yl 
      0004C5 72 D7 00 14      [ 4] 1075 	ld ([ptr16],x),a  	
      0004C9 72 CE 00 14      [ 5] 1076 	ldw x,[ptr16]
      0004CD 27 09            [ 1] 1077 	jreq 10$
      0004CF CD 03 7C         [ 4] 1078 	call insert_line
      0004D2 72 5F 00 02      [ 1] 1079 	clr  count 
      0004D6 20 13            [ 2] 1080 	jra  11$ 
      0004D8                       1081 10$: 
      0004D8 CE 00 14         [ 2] 1082 	ldw x,ptr16 
      0004DB CF 00 03         [ 2] 1083 	ldw basicptr,x 
      0004DE E6 02            [ 1] 1084 	ld a,(2,x)
      0004E0 C7 00 02         [ 1] 1085 	ld count,a 
      0004E3 FE               [ 2] 1086 	ldw x,(x)
      0004E4 CF 00 05         [ 2] 1087 	ldw lineno,x 
      0004E7 35 03 00 01      [ 1] 1088 	mov in,#3 
      0004EB                       1089 11$:
      0004EB                       1090 	_drop VSIZE 
      0004EB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004ED 72 1B 00 24      [ 1] 1091 	bres flags,#FCOMP 
      0004F1 81               [ 4] 1092 	ret 
                                   1093 
                                   1094 
                                   1095 ;------------------------------------
                                   1096 ;  set all variables to zero 
                                   1097 ; input:
                                   1098 ;   none 
                                   1099 ; output:
                                   1100 ;	none
                                   1101 ;------------------------------------
      0004F2                       1102 clear_vars:
      0004F2 AE 00 26         [ 2] 1103 	ldw x,#vars 
      0004F5 90 AE 00 34      [ 2] 1104 	ldw y,#2*26 
      0004F9 7F               [ 1] 1105 1$:	clr (x)
      0004FA 5C               [ 1] 1106 	incw x 
      0004FB 90 5A            [ 2] 1107 	decw y 
      0004FD 26 FA            [ 1] 1108 	jrne 1$
      0004FF 81               [ 4] 1109 	ret 
                                   1110 
                                   1111 ;-------------------------------------
                                   1112 ; check if A is a letter
                                   1113 ; input:
                                   1114 ;   A 			character to test 
                                   1115 ; output:
                                   1116 ;   C flag      1 true, 0 false 
                                   1117 ;-------------------------------------
      000500                       1118 is_alpha:
      000500 A1 41            [ 1] 1119 	cp a,#'A 
      000502 8C               [ 1] 1120 	ccf
      000503 24 0B            [ 1] 1121 	jrnc 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000505 A1 5B            [ 1] 1122 	cp a,#'Z+1 
      000507 25 07            [ 1] 1123 	jrc 9$ 
      000509 A1 61            [ 1] 1124 	cp a,#'a 
      00050B 8C               [ 1] 1125 	ccf 
      00050C 24 02            [ 1] 1126 	jrnc 9$
      00050E A1 7B            [ 1] 1127 	cp a,#'z+1   
      000510 81               [ 4] 1128 9$: ret 	
                                   1129 
                                   1130 ;-------------------------------------
                                   1131 ;  program initialization entry point 
                                   1132 ;-------------------------------------
                           000001  1133 	MAJOR=1
                           000000  1134 	MINOR=0
      000511 0A 0A 54 69 6E 79 20  1135 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      000557                       1136 cold_start:
                                   1137 ;set stack 
      000557 AE 17 FF         [ 2] 1138 	ldw x,#STACK_EMPTY
      00055A 94               [ 1] 1139 	ldw sp,x   
                                   1140 ; clear all ram 
      00055B 7F               [ 1] 1141 0$: clr (x)
      00055C 5A               [ 2] 1142 	decw x 
      00055D 26 FC            [ 1] 1143 	jrne 0$
                                   1144 ; activate pull up on all inputs 
      00055F A6 FF            [ 1] 1145 	ld a,#255 
      000561 C7 50 03         [ 1] 1146 	ld PA_CR1,a 
      000564 C7 50 08         [ 1] 1147 	ld PB_CR1,a 
      000567 C7 50 0D         [ 1] 1148 	ld PC_CR1,a 
      00056A C7 50 12         [ 1] 1149 	ld PD_CR1,a 
      00056D C7 50 17         [ 1] 1150 	ld PE_CR1,a 
      000570 C7 50 1C         [ 1] 1151 	ld PF_CR1,a 
      000573 C7 50 21         [ 1] 1152 	ld PG_CR1,a 
      000576 C7 50 2B         [ 1] 1153 	ld PI_CR1,a 
                                   1154 ; select internal clock no divisor: 16 Mhz 	
      000579 A6 E1            [ 1] 1155 	ld a,#CLK_SWR_HSI 
      00057B 5F               [ 1] 1156 	clrw x  
      00057C CD 00 99         [ 4] 1157     call clock_init 
      00057F CD 00 AF         [ 4] 1158 	call timer4_init
                                   1159 ; UART3 at 115200 BAUD
      000582 CD 01 74         [ 4] 1160 	call uart3_init
                                   1161 ; activate PE_4 (user button interrupt)
      000585 72 18 50 18      [ 1] 1162     bset PE_CR2,#USR_BTN_BIT 
                                   1163 ; display system information
      000589 AE 05 11         [ 2] 1164 	ldw x,#software 
      00058C CD 01 B0         [ 4] 1165 	call puts 
      00058F A6 01            [ 1] 1166 	ld a,#MAJOR 
      000591 C7 00 0A         [ 1] 1167 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000594 5F               [ 1] 1168 	clrw x 
      000595 CF 00 08         [ 2] 1169 	ldw acc24,x 
      000598 A6 0A            [ 1] 1170 	ld a,#10 
      00059A CD 09 51         [ 4] 1171 	call prti24 
      00059D A6 2E            [ 1] 1172 	ld a,#'.
      00059F CD 01 9E         [ 4] 1173 	call putc 
      0005A2 A6 00            [ 1] 1174 	ld a,#MINOR 
      0005A4 C7 00 0A         [ 1] 1175 	ld acc8,a 
      0005A7 5F               [ 1] 1176 	clrw x 
      0005A8 CF 00 08         [ 2] 1177 	ldw acc24,x 
      0005AB A6 0A            [ 1] 1178 	ld a,#10 
      0005AD CD 09 51         [ 4] 1179 	call prti24 
      0005B0 A6 0D            [ 1] 1180 	ld a,#CR 
      0005B2 CD 01 9E         [ 4] 1181 	call putc 
      0005B5 CD 1A 7B         [ 4] 1182 	call seek_fdrive 
                                   1183 ; configure LED2 pin 
      0005B8 72 1A 50 0D      [ 1] 1184     bset PC_CR1,#LED2_BIT
      0005BC 72 1A 50 0E      [ 1] 1185     bset PC_CR2,#LED2_BIT
      0005C0 72 1A 50 0C      [ 1] 1186     bset PC_DDR,#LED2_BIT
      0005C4 9A               [ 1] 1187 	rim 
      0005C5 AE 16 C8         [ 2] 1188 	ldw x,#tib
      0005C8 CF 00 20         [ 2] 1189 	ldw array_addr,x 
      0005CB 72 5C 00 10      [ 1] 1190 	inc seedy+1 
      0005CF 72 5C 00 0E      [ 1] 1191 	inc seedx+1 
      0005D3 CD 05 E2         [ 4] 1192 	call clear_basic
      0005D6 CD 13 7E         [ 4] 1193 	call ubound 
      0005D9 CD 0F A2         [ 4] 1194 	call dpop 
      0005DC CF 00 22         [ 2] 1195 	ldw array_size,x 
      0005DF CC 07 66         [ 2] 1196     jp warm_start 
                                   1197 
                                   1198 ;---------------------------
                                   1199 ; reset BASIC text variables 
                                   1200 ; and clear variables 
                                   1201 ;---------------------------
      0005E2                       1202 clear_basic:
      0005E2 5F               [ 1] 1203 	clrw x 
      0005E3 CF 00 05         [ 2] 1204 	ldw lineno,x
      0005E6 72 5F 00 02      [ 1] 1205 	clr count 
      0005EA AE 00 5A         [ 2] 1206 	ldw x,#free_ram 
      0005ED CF 00 1B         [ 2] 1207 	ldw txtbgn,x 
      0005F0 CF 00 1D         [ 2] 1208 	ldw txtend,x 
      0005F3 CD 04 F2         [ 4] 1209 	call clear_vars 
      0005F6 81               [ 4] 1210 	ret 
                                   1211 
                                   1212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1213 ;;   Tiny BASIC error messages     ;;
                                   1214 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F7                       1215 err_msg:
      0005F7 00 00 06 0F 06 1D 06  1216 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             2C 06 46 06 56
      000603 06 6D 06 84 06 9F 06  1217 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             B1 06 C3
      00060D 06 D0                 1218 	.word err_no_access 
                                   1219 
      00060F 0A 4D 65 6D 6F 72 79  1220 err_mem_full: .asciz "\nMemory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



             20 66 75 6C 6C 0A 00
      00061D 0A 73 79 6E 74 61 78  1221 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      00062C 0A 6D 61 74 68 20 6F  1222 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      000646 0A 64 69 76 69 73 69  1223 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      000656 0A 69 6E 76 61 6C 69  1224 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      00066D 0A 72 75 6E 20 74 69  1225 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000684 0A 63 6F 6D 6D 61 6E  1226 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      00069F 0A 64 75 70 6C 69 63  1227 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      0006B1 0A 46 69 6C 65 20 6E  1228 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006C3 0A 62 61 64 20 76 61  1229 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006D0 0A 46 69 6C 65 20 69  1230 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1231 
      000704 6C 61 73 74 20 74 6F  1232 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1233 
      000714                       1234 syntax_error:
      000714 A6 02            [ 1] 1235 	ld a,#ERR_SYNTAX 
                                   1236 
      000716                       1237 tb_error:
      000716 AE 05 F7         [ 2] 1238 	ldw x, #err_msg 
      000719 72 5F 00 09      [ 1] 1239 	clr acc16 
      00071D 48               [ 1] 1240 	sll a
      00071E 72 59 00 09      [ 1] 1241 	rlc acc16  
      000722 C7 00 0A         [ 1] 1242 	ld acc8, a 
      000725 72 BB 00 09      [ 2] 1243 	addw x,acc16 
      000729 FE               [ 2] 1244 	ldw x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00072A CD 01 B0         [ 4] 1245 	call puts
      00072D 72 0B 00 24 18   [ 2] 1246 	btjf flags,#FCOMP, 1$
      000732 AE 16 C8         [ 2] 1247 	ldw x,#tib
      000735 CD 01 B0         [ 4] 1248 	call puts 
      000738 A6 0D            [ 1] 1249 	ld a,#CR 
      00073A CD 01 9E         [ 4] 1250 	call putc
      00073D AE 00 11         [ 2] 1251 	ldw x,#in.w.saved
      000740 CD 01 D8         [ 4] 1252 	call spaces
      000743 A6 5E            [ 1] 1253 	ld a,#'^
      000745 CD 01 9E         [ 4] 1254 	call putc 
      000748 20 18            [ 2] 1255 	jra 6$
      00074A CE 00 03         [ 2] 1256 1$:	ldw x,basicptr
      00074D CD 14 87         [ 4] 1257 	call prt_basic_line
      000750 AE 07 04         [ 2] 1258 	ldw x,#rt_msg 
      000753 CD 01 B0         [ 4] 1259 	call puts 
      000756 CE 00 11         [ 2] 1260 	ldw x,in.w.saved 
      000759 72 D6 00 03      [ 4] 1261 	ld a,([basicptr],x)
      00075D 5F               [ 1] 1262 	clrw x 
      00075E 97               [ 1] 1263 	ld xl,a 
      00075F CD 09 99         [ 4] 1264 	call print_int 
      000762 AE 17 FF         [ 2] 1265 6$: ldw x,#STACK_EMPTY 
      000765 94               [ 1] 1266     ldw sp,x
      000766                       1267 warm_start:
      000766 72 5F 00 24      [ 1] 1268 	clr flags 
      00076A 72 5F 00 1F      [ 1] 1269 	clr loop_depth 
      00076E AE 17 80         [ 2] 1270 	ldw x,#dstack_unf 
      000771 CF 00 19         [ 2] 1271 	ldw dstkptr,x 
      000774 35 04 00 25      [ 1] 1272 	mov tab_width,#TAB_WIDTH 
      000778 35 0A 00 07      [ 1] 1273 	mov base,#10 
      00077C 5F               [ 1] 1274 	clrw x 
      00077D CF 00 05         [ 2] 1275 	ldw lineno,x 
      000780 AE 16 C8         [ 2] 1276 	ldw x,#tib 
      000783 CF 00 03         [ 2] 1277 	ldw basicptr,x 
                                   1278 ;----------------------------
                                   1279 ;   BASIC interpreter
                                   1280 ;----------------------------
      000786                       1281 interp:
      000786 72 5F 00 00      [ 1] 1282 	clr in.w
      00078A 72 01 00 24 27   [ 2] 1283 	btjf flags,#FRUN,4$ 
                                   1284 ; running program
                                   1285 ; goto next basic line 
      00078F CE 00 03         [ 2] 1286 	ldw x,basicptr
      000792 E6 02            [ 1] 1287 	ld a,(2,x) ; line length 
      000794 C7 00 0A         [ 1] 1288 	ld acc8,a 
      000797 72 5F 00 09      [ 1] 1289 	clr acc16 
      00079B 72 BB 00 09      [ 2] 1290 	addw x,acc16
      00079F C3 00 1D         [ 2] 1291 	cpw x,txtend 
      0007A2 2A C2            [ 1] 1292 	jrpl warm_start
      0007A4 CF 00 03         [ 2] 1293 	ldw basicptr,x ; start of next line  
      0007A7 E6 02            [ 1] 1294 	ld a,(2,x)
      0007A9 C7 00 02         [ 1] 1295 	ld count,a 
      0007AC FE               [ 2] 1296 	ldw x,(x) ; line no 
      0007AD CF 00 05         [ 2] 1297 	ldw lineno,x 
      0007B0 35 03 00 01      [ 1] 1298 	mov in,#3 ; skip first 3 bytes of line 
      0007B4 20 14            [ 2] 1299 	jra interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0007B6                       1300 4$: ; commande line mode 	
      0007B6 72 5F 00 01      [ 1] 1301 	clr in
      0007BA A6 0D            [ 1] 1302 	ld a,#CR 
      0007BC CD 01 9E         [ 4] 1303 	call putc 
      0007BF A6 3E            [ 1] 1304 	ld a,#'> 
      0007C1 CD 01 9E         [ 4] 1305 	call putc 
      0007C4 CD 0A 87         [ 4] 1306 	call readln
      0007C7 CD 03 F3         [ 4] 1307 	call compile
      0007CA                       1308 interp_loop:  
      0007CA C6 00 01         [ 1] 1309 	ld a,in 
      0007CD C1 00 02         [ 1] 1310 	cp a,count  
      0007D0 2A B4            [ 1] 1311 	jrpl interp
      0007D2 CD 07 FA         [ 4] 1312 	call next_token
      0007D5 A1 01            [ 1] 1313 	cp a,#TK_COLON 
      0007D7 27 F1            [ 1] 1314 	jreq interp_loop 
      0007D9 A1 00            [ 1] 1315 	cp a,#TK_NONE 
                                   1316 ;	jreq interp 
      0007DB                       1317 1$:
      0007DB A1 04            [ 1] 1318 	cp a,#TK_VAR
      0007DD 26 05            [ 1] 1319 	jrne 2$
      0007DF CD 13 96         [ 4] 1320 	call let02  
      0007E2 20 E6            [ 2] 1321 	jra interp_loop 
      0007E4                       1322 2$:	
      0007E4 A1 05            [ 1] 1323 	cp a,#TK_ARRAY 
      0007E6 26 08            [ 1] 1324 	jrne 3$
      0007E8 CD 11 E9         [ 4] 1325 	call get_array_element
      0007EB CD 13 96         [ 4] 1326 	call let02 
      0007EE 20 DA            [ 2] 1327 	jra interp_loop 
      0007F0                       1328 3$:
      0007F0 A1 06            [ 1] 1329 	cp a,#TK_CMD
      0007F2 26 03            [ 1] 1330 	jrne 4$
      0007F4 FD               [ 4] 1331 	call (x) 
      0007F5 20 D3            [ 2] 1332 	jra interp_loop 
      0007F7                       1333 4$:	
      0007F7 CC 07 14         [ 2] 1334 	jp syntax_error 
                                   1335 
                                   1336 ;--------------------------
                                   1337 ; extract next token from
                                   1338 ; token list 
                                   1339 ; basicptr -> base address 
                                   1340 ; in  -> offset in list array 
                                   1341 ; output:
                                   1342 ;   A 		token attribute
                                   1343 ;   X 		token value if there is one
                                   1344 ;----------------------------------------
      0007FA                       1345 next_token:
      0007FA 4B 00            [ 1] 1346 	push #0
      0007FC C6 00 01         [ 1] 1347 	ld a,in 
      0007FF C1 00 02         [ 1] 1348 	cp a,count 
      000802 84               [ 1] 1349 	pop a 
      000803 2A 3E            [ 1] 1350 	jrpl 9$ 
      000805 CE 00 00         [ 2] 1351 	ldw x,in.w 
      000808 CF 00 11         [ 2] 1352 	ldw in.w.saved,x 
      00080B CE 00 03         [ 2] 1353 	ldw x,basicptr 
      00080E 72 D6 00 00      [ 4] 1354 	ld a,([in.w],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000812 72 5C 00 01      [ 1] 1355 	inc in 
      000816 A1 02            [ 1] 1356 	cp a,#CMD_END 
      000818 25 29            [ 1] 1357 	jrult 9$
      00081A A1 02            [ 1] 1358 	cp a,#TK_CHAR
      00081C 26 0D            [ 1] 1359 	jrne 1$
      00081E 72 D6 00 00      [ 4] 1360 	ld a,([in.w],x)
      000822 72 5C 00 01      [ 1] 1361 	inc in
      000826 5F               [ 1] 1362 	clrw x 
      000827 97               [ 1] 1363 	ld xl,a 
      000828 A6 02            [ 1] 1364 	ld a,#TK_CHAR
      00082A 81               [ 4] 1365 	ret 
      00082B A1 08            [ 1] 1366 1$:	cp a,#TK_QSTR 
      00082D 22 14            [ 1] 1367 	jrugt 9$
      00082F 25 06            [ 1] 1368 	jrult 2$
      000831 72 BB 00 00      [ 2] 1369 	addw x,in.w 
      000835 20 0C            [ 2] 1370 	jra 9$
      000837 72 DE 00 00      [ 5] 1371 2$: ldw x,([in.w],x)
      00083B 72 5C 00 01      [ 1] 1372 	inc in 
      00083F 72 5C 00 01      [ 1] 1373 	inc in
      000843 81               [ 4] 1374 9$: ret	
                                   1375 
                                   1376 
                                   1377 ;----------------------------------------
                                   1378 ;   DEBUG support functions
                                   1379 ;----------------------------------------
                           000001  1380 .if DEBUG 
                                   1381 ; turn LED on 
      000844                       1382 ledon:
      000844 72 1A 50 0A      [ 1] 1383     bset PC_ODR,#LED2_BIT
      000848 81               [ 4] 1384     ret 
                                   1385 
                                   1386 ; turn LED off 
      000849                       1387 ledoff:
      000849 72 1B 50 0A      [ 1] 1388     bres PC_ODR,#LED2_BIT 
      00084D 81               [ 4] 1389     ret 
                                   1390 
                                   1391 ; invert LED status 
      00084E                       1392 ledtoggle:
      00084E A6 20            [ 1] 1393     ld a,#LED2_MASK
      000850 C8 50 0A         [ 1] 1394     xor a,PC_ODR
      000853 C7 50 0A         [ 1] 1395     ld PC_ODR,a
      000856 81               [ 4] 1396     ret 
                                   1397 
      000857                       1398 left_paren:
      000857 A6 20            [ 1] 1399 	ld a,#SPACE 
      000859 CD 01 9E         [ 4] 1400 	call putc
      00085C A6 28            [ 1] 1401 	ld a,#'( 
      00085E CD 01 9E         [ 4] 1402 	call putc 	
      000861 81               [ 4] 1403 	ret 
                                   1404 
                                   1405 ;------------------------------
                                   1406 ; print 8 bit register 
                                   1407 ; input:
                                   1408 ;   X  point to register name 
                                   1409 ;   A  register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1410 ; output:
                                   1411 ;   none
                                   1412 ;------------------------------- 
      000862                       1413 prt_reg8:
      000862 88               [ 1] 1414 	push a 
      000863 CD 01 B0         [ 4] 1415 	call puts 
      000866 7B 01            [ 1] 1416 	ld a,(1,sp) 
      000868 C7 00 0A         [ 1] 1417 	ld acc8,a 
      00086B 5F               [ 1] 1418 	clrw x 
      00086C 97               [ 1] 1419 	ld xl,a 
      00086D 35 10 00 07      [ 1] 1420 	mov base,#16
      000871 CD 09 99         [ 4] 1421 	call print_int 
      000874 CD 08 57         [ 4] 1422 	call left_paren 
      000877 84               [ 1] 1423 	pop a 
      000878 5F               [ 1] 1424 	clrw x 
      000879 97               [ 1] 1425 	ld xl,a 
      00087A 35 0A 00 07      [ 1] 1426 	mov base,#10 
      00087E CD 09 99         [ 4] 1427 	call print_int  
      000881 A6 29            [ 1] 1428 	ld a,#') 
      000883 CD 01 9E         [ 4] 1429 	call putc
      000886 81               [ 4] 1430 	ret
                                   1431 
                                   1432 ;--------------------------------
                                   1433 ; print 16 bits register 
                                   1434 ; input:
                                   1435 ;   X   point register name 
                                   1436 ;   Y   register value to print 
                                   1437 ; output:
                                   1438 ;  none
                                   1439 ;--------------------------------
      000887                       1440 prt_reg16: 
      000887 90 89            [ 2] 1441 	pushw y 
      000889 CD 01 B0         [ 4] 1442 	call puts 
      00088C 1E 01            [ 2] 1443 	ldw x,(1,sp) 
      00088E 35 10 00 07      [ 1] 1444 	mov base,#16 
      000892 CD 09 99         [ 4] 1445 	call print_int  
      000895 CD 08 57         [ 4] 1446 	call left_paren 
      000898 85               [ 2] 1447 	popw x 
      000899 35 0A 00 07      [ 1] 1448 	mov base,#10 
      00089D CD 09 99         [ 4] 1449 	call print_int  
      0008A0 A6 29            [ 1] 1450 	ld a,#') 
      0008A2 CD 01 9E         [ 4] 1451 	call putc
      0008A5 81               [ 4] 1452 	ret 
                                   1453 
                                   1454 ;------------------------------------
                                   1455 ; print registers contents saved on
                                   1456 ; stack by trap interrupt.
                                   1457 ;------------------------------------
      0008A6                       1458 print_registers:
      0008A6 AE 08 F9         [ 2] 1459 	ldw x,#STATES
      0008A9 CD 01 B0         [ 4] 1460 	call puts
                                   1461 ; print EPC 
      0008AC AE 09 36         [ 2] 1462 	ldw x, #REG_EPC
      0008AF CD 01 B0         [ 4] 1463 	call puts 
      0008B2 7B 0B            [ 1] 1464 	ld a, (11,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0008B4 C7 00 0A         [ 1] 1465 	ld acc8,a 
      0008B7 7B 0A            [ 1] 1466 	ld a, (10,sp) 
      0008B9 C7 00 09         [ 1] 1467 	ld acc16,a 
      0008BC 7B 09            [ 1] 1468 	ld a,(9,sp) 
      0008BE C7 00 08         [ 1] 1469 	ld acc24,a
      0008C1 5F               [ 1] 1470 	clrw x  
      0008C2 A6 10            [ 1] 1471 	ld a,#16
      0008C4 CD 09 51         [ 4] 1472 	call prti24  
                                   1473 ; print X
      0008C7 AE 09 3F         [ 2] 1474 	ldw x,#REG_X
      0008CA 16 05            [ 2] 1475 	ldw y,(5,sp)
      0008CC CD 08 87         [ 4] 1476 	call prt_reg16  
                                   1477 ; print Y 
      0008CF AE 09 3B         [ 2] 1478 	ldw x,#REG_Y
      0008D2 16 07            [ 2] 1479 	ldw y, (7,sp)
      0008D4 CD 08 87         [ 4] 1480 	call prt_reg16  
                                   1481 ; print A 
      0008D7 AE 09 43         [ 2] 1482 	ldw x,#REG_A
      0008DA 7B 04            [ 1] 1483 	ld a, (4,sp) 
      0008DC CD 08 62         [ 4] 1484 	call prt_reg8
                                   1485 ; print CC 
      0008DF AE 09 47         [ 2] 1486 	ldw x,#REG_CC 
      0008E2 7B 03            [ 1] 1487 	ld a, (3,sp) 
      0008E4 CD 08 62         [ 4] 1488 	call prt_reg8 
                                   1489 ; print SP 
      0008E7 AE 09 4C         [ 2] 1490 	ldw x,#REG_SP
      0008EA 90 96            [ 1] 1491 	ldw y,sp 
      0008EC 72 A9 00 0C      [ 2] 1492 	addw y,#12
      0008F0 CD 08 87         [ 4] 1493 	call prt_reg16  
      0008F3 A6 0A            [ 1] 1494 	ld a,#'\n' 
      0008F5 CD 01 9E         [ 4] 1495 	call putc
      0008F8 81               [ 4] 1496 	ret
                                   1497 
      0008F9 0A 52 65 67 69 73 74  1498 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000936 45 50 43 3A 00        1499 REG_EPC: .asciz "EPC:"
      00093B 0A 59 3A 00           1500 REG_Y:   .asciz "\nY:" 
      00093F 0A 58 3A 00           1501 REG_X:   .asciz "\nX:"
      000943 0A 41 3A 00           1502 REG_A:   .asciz "\nA:" 
      000947 0A 43 43 3A 00        1503 REG_CC:  .asciz "\nCC:"
      00094C 0A 53 50 3A 00        1504 REG_SP:  .asciz "\nSP:"
                                   1505 .endif ; DEBUG 
                                   1506 
                                   1507 ;------------------------------------
                                   1508 ; print integer in acc24 
                                   1509 ; input:
                                   1510 ;	acc24 		integer to print 
                                   1511 ;	A 			numerical base for conversion 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1512 ;               if bit 7 is set add a space at print end.
                                   1513 ;   XL 			field width, 0 -> no fill.
                                   1514 ;  output:
                                   1515 ;    none 
                                   1516 ;------------------------------------
                           000001  1517 	WIDTH = 1
                           000002  1518 	BASE = 2
                           000003  1519 	ADD_SPACE=3 ; add a space after number 
                           000003  1520 	VSIZE = 3
      000951                       1521 prti24:
      000951                       1522 	_vars VSIZE 
      000951 52 03            [ 2]    1     sub sp,#VSIZE 
      000953 0F 03            [ 1] 1523 	clr (ADD_SPACE,sp)
      000955 A5 80            [ 1] 1524 	bcp a,#0x80 
      000957 27 02            [ 1] 1525 	jreq 0$ 
      000959 03 03            [ 1] 1526 	cpl (ADD_SPACE,sp)
      00095B A4 1F            [ 1] 1527 0$:	and a,#31 
      00095D 6B 02            [ 1] 1528 	ld (BASE,sp),a
      00095F 9F               [ 1] 1529 	ld a,xl
      000960 6B 01            [ 1] 1530 	ld (WIDTH,sp),a 
      000962 7B 02            [ 1] 1531 	ld a, (BASE,sp)  
      000964 CD 09 F5         [ 4] 1532     call itoa  ; conversion entier en  .asciz
      000967 7B 01            [ 1] 1533 1$: ld a,(WIDTH,sp)
      000969 27 1F            [ 1] 1534 	jreq 4$
      00096B C7 00 0A         [ 1] 1535 	ld acc8,a 
      00096E 89               [ 2] 1536 	pushw x 
      00096F CD 02 72         [ 4] 1537 	call strlen 
      000972 9F               [ 1] 1538 	ld a,xl 
      000973 85               [ 2] 1539 	popw x 
      000974 31 00 0A         [ 3] 1540 	exg a,acc8 
      000977 C0 00 0A         [ 1] 1541 	sub a,acc8 
      00097A 2B 0E            [ 1] 1542 	jrmi 4$
      00097C 6B 01            [ 1] 1543 	ld (WIDTH,sp),a 
      00097E A6 20            [ 1] 1544 	ld  a,#SPACE
      000980 0D 01            [ 1] 1545 3$: tnz (WIDTH,sp)
      000982 27 06            [ 1] 1546 	jreq 4$
      000984 5A               [ 2] 1547 	decw x 
      000985 F7               [ 1] 1548 	ld (x),a 
      000986 0A 01            [ 1] 1549 	dec (WIDTH,sp) 
      000988 20 F6            [ 2] 1550 	jra 3$
      00098A                       1551 4$: 
      00098A CD 01 B0         [ 4] 1552 	call puts 
      00098D 0D 03            [ 1] 1553 	tnz (ADD_SPACE,sp)
      00098F 27 05            [ 1] 1554 	jreq 5$
      000991 A6 20            [ 1] 1555     ld a,#SPACE 
      000993 CD 01 9E         [ 4] 1556 	call putc 
      000996                       1557 5$: _drop VSIZE 
      000996 5B 03            [ 2]    1     addw sp,#VSIZE 
      000998 81               [ 4] 1558     ret	
                                   1559 
                                   1560 ;-----------------------------------
                                   1561 ; print a 16 bit integer 
                                   1562 ; using variable 'base' as conversion
                                   1563 ; format.
                                   1564 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1565 ;   X       integer to print 
                                   1566 ;   base    conversion base 
                                   1567 ; output:
                                   1568 ;   none 
                                   1569 ;-----------------------------------
                           000001  1570 	SIGN=1
                           000001  1571 	VSIZE=1
      000999                       1572 print_int: 
      000999                       1573 	_vars VSIZE 
      000999 52 01            [ 2]    1     sub sp,#VSIZE 
      00099B 0F 01            [ 1] 1574 	clr (SIGN,sp)
      00099D 90 AE 17 3F      [ 2] 1575 	ldw y,#pad+PAD_SIZE-1 
      0009A1 90 7F            [ 1] 1576 	clr (y)
      0009A3 C6 00 07         [ 1] 1577 	ld a,base  
      0009A6 A1 0A            [ 1] 1578 	cp a,#10 
      0009A8 26 06            [ 1] 1579 	jrne 1$ 
      0009AA 5D               [ 2] 1580 	tnzw x 
      0009AB 2A 03            [ 1] 1581 	jrpl 1$ 
      0009AD 03 01            [ 1] 1582 	cpl (SIGN,sp)
      0009AF 50               [ 2] 1583 	negw x 	 
      0009B0                       1584 1$:	
      0009B0 C6 00 07         [ 1] 1585 	ld a,base 
      0009B3 62               [ 2] 1586 	div x,a 
      0009B4 AB 30            [ 1] 1587 	add a,#'0 
      0009B6 A1 3A            [ 1] 1588 	cp a,#'9+1 
      0009B8 2B 02            [ 1] 1589 	jrmi 2$ 
      0009BA AB 07            [ 1] 1590 	add a,#7 
      0009BC 90 5A            [ 2] 1591 2$: decw y 
      0009BE 90 F7            [ 1] 1592 	ld (y),a 
      0009C0 5D               [ 2] 1593 	tnzw x 
      0009C1 26 ED            [ 1] 1594 	jrne 1$ 
      0009C3 A6 10            [ 1] 1595 	ld a,#16 
      0009C5 C1 00 07         [ 1] 1596 	cp a,base 
      0009C8 26 08            [ 1] 1597 	jrne 3$
      0009CA A6 24            [ 1] 1598 	ld a,#'$
      0009CC 90 5A            [ 2] 1599 	decw y  
      0009CE 90 F7            [ 1] 1600 	ld (y),a
      0009D0 20 0A            [ 2] 1601 	jra 9$ 
      0009D2 0D 01            [ 1] 1602 3$: tnz (SIGN,sp)
      0009D4 27 06            [ 1] 1603 	jreq 9$ 
      0009D6 A6 2D            [ 1] 1604 	ld a,#'-
      0009D8 90 5A            [ 2] 1605 	decw y  
      0009DA 90 F7            [ 1] 1606 	ld (y),a
      0009DC                       1607 9$:	
      0009DC 93               [ 1] 1608 	ldw x,y 
      0009DD 1D 17 3F         [ 2] 1609 	subw x,#pad+PAD_SIZE-1 
      0009E0 50               [ 2] 1610 	negw x  
      0009E1                       1611 10$:
      0009E1 90 5A            [ 2] 1612 	decw y 
      0009E3 A6 20            [ 1] 1613 	ld a,#SPACE 
      0009E5 90 F7            [ 1] 1614 	ld (y),a
      0009E7 5C               [ 1] 1615 	incw x 
      0009E8 9F               [ 1] 1616 	ld a,xl 
      0009E9 C1 00 25         [ 1] 1617 	cp a,tab_width
      0009EC 2B F3            [ 1] 1618 	jrmi 10$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009EE                       1619 12$:
      0009EE 93               [ 1] 1620     ldw x,y 
      0009EF CD 01 B0         [ 4] 1621 	call puts  
      0009F2                       1622 	_drop VSIZE 
      0009F2 5B 01            [ 2]    1     addw sp,#VSIZE 
      0009F4 81               [ 4] 1623 	ret 
                                   1624 
                                   1625 ;------------------------------------
                                   1626 ; convert integer in acc24 to string
                                   1627 ; input:
                                   1628 ;   A	  	base
                                   1629 ;	acc24	integer to convert
                                   1630 ; output:
                                   1631 ;   X  		pointer to string
                                   1632 ;------------------------------------
                           000001  1633 	SIGN=1  ; integer sign 
                           000002  1634 	BASE=2  ; numeric base 
                           000002  1635 	VSIZE=2  ;locals size
      0009F5                       1636 itoa:
      0009F5 52 02            [ 2] 1637 	sub sp,#VSIZE
      0009F7 6B 02            [ 1] 1638 	ld (BASE,sp), a  ; base
      0009F9 0F 01            [ 1] 1639 	clr (SIGN,sp)    ; sign
      0009FB A1 0A            [ 1] 1640 	cp a,#10
      0009FD 26 0A            [ 1] 1641 	jrne 1$
                                   1642 	; base 10 string display with negative sign if bit 23==1
      0009FF 72 0F 00 08 05   [ 2] 1643 	btjf acc24,#7,1$
      000A04 03 01            [ 1] 1644 	cpl (SIGN,sp)
      000A06 CD 0A 64         [ 4] 1645 	call neg_acc24
      000A09                       1646 1$:
                                   1647 ; initialize string pointer 
      000A09 AE 17 3F         [ 2] 1648 	ldw x,#pad+PAD_SIZE-1
      000A0C 7F               [ 1] 1649 	clr (x)
      000A0D                       1650 itoa_loop:
      000A0D 7B 02            [ 1] 1651     ld a,(BASE,sp)
      000A0F CD 0A 3C         [ 4] 1652     call divu24_8 ; acc24/A 
      000A12 AB 30            [ 1] 1653     add a,#'0  ; remainder of division
      000A14 A1 3A            [ 1] 1654     cp a,#'9+1
      000A16 2B 02            [ 1] 1655     jrmi 2$
      000A18 AB 07            [ 1] 1656     add a,#7 
      000A1A 5A               [ 2] 1657 2$: decw x
      000A1B F7               [ 1] 1658     ld (x),a
                                   1659 	; if acc24==0 conversion done
      000A1C C6 00 08         [ 1] 1660 	ld a,acc24
      000A1F CA 00 09         [ 1] 1661 	or a,acc16
      000A22 CA 00 0A         [ 1] 1662 	or a,acc8
      000A25 26 E6            [ 1] 1663     jrne itoa_loop
                                   1664 	;conversion done, next add '$' or '-' as required
      000A27 7B 02            [ 1] 1665 	ld a,(BASE,sp)
      000A29 A1 10            [ 1] 1666 	cp a,#16
      000A2B 27 08            [ 1] 1667 	jreq 8$
      000A2D 7B 01            [ 1] 1668 	ld a,(SIGN,sp)
      000A2F 27 08            [ 1] 1669     jreq 10$
      000A31 A6 2D            [ 1] 1670     ld a,#'-
      000A33 20 02            [ 2] 1671 	jra 9$ 
      000A35 A6 24            [ 1] 1672 8$: ld a,#'$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A37 5A               [ 2] 1673 9$: decw x
      000A38 F7               [ 1] 1674     ld (x),a
      000A39                       1675 10$:
      000A39 5B 02            [ 2] 1676 	addw sp,#VSIZE
      000A3B 81               [ 4] 1677 	ret
                                   1678 
                                   1679 ;-------------------------------------
                                   1680 ; divide uint24_t by uint8_t
                                   1681 ; used to convert uint24_t to string
                                   1682 ; input:
                                   1683 ;	acc24	dividend
                                   1684 ;   A 		divisor
                                   1685 ; output:
                                   1686 ;   acc24	quotient
                                   1687 ;   A		remainder
                                   1688 ;------------------------------------- 
                                   1689 ; offset  on sp of arguments and locals
                           000001  1690 	U8   = 1   ; divisor on stack
                           000001  1691 	VSIZE =1
      000A3C                       1692 divu24_8:
      000A3C 89               [ 2] 1693 	pushw x ; save x
      000A3D 88               [ 1] 1694 	push a 
                                   1695 	; ld dividend UU:MM bytes in X
      000A3E C6 00 08         [ 1] 1696 	ld a, acc24
      000A41 95               [ 1] 1697 	ld xh,a
      000A42 C6 00 09         [ 1] 1698 	ld a,acc24+1
      000A45 97               [ 1] 1699 	ld xl,a
      000A46 7B 01            [ 1] 1700 	ld a,(U8,SP) ; divisor
      000A48 62               [ 2] 1701 	div x,a ; UU:MM/U8
      000A49 88               [ 1] 1702 	push a  ;save remainder
      000A4A 9E               [ 1] 1703 	ld a,xh
      000A4B C7 00 08         [ 1] 1704 	ld acc24,a
      000A4E 9F               [ 1] 1705 	ld a,xl
      000A4F C7 00 09         [ 1] 1706 	ld acc24+1,a
      000A52 84               [ 1] 1707 	pop a
      000A53 95               [ 1] 1708 	ld xh,a
      000A54 C6 00 0A         [ 1] 1709 	ld a,acc24+2
      000A57 97               [ 1] 1710 	ld xl,a
      000A58 7B 01            [ 1] 1711 	ld a,(U8,sp) ; divisor
      000A5A 62               [ 2] 1712 	div x,a  ; R:LL/U8
      000A5B 6B 01            [ 1] 1713 	ld (U8,sp),a ; save remainder
      000A5D 9F               [ 1] 1714 	ld a,xl
      000A5E C7 00 0A         [ 1] 1715 	ld acc24+2,a
      000A61 84               [ 1] 1716 	pop a
      000A62 85               [ 2] 1717 	popw x
      000A63 81               [ 4] 1718 	ret
                                   1719 
                                   1720 ;------------------------------------
                                   1721 ;  two's complement acc24
                                   1722 ;  input:
                                   1723 ;		acc24 variable
                                   1724 ;  output:
                                   1725 ;		acc24 variable
                                   1726 ;-------------------------------------
      000A64                       1727 neg_acc24:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A64 72 53 00 0A      [ 1] 1728 	cpl acc24+2
      000A68 72 53 00 09      [ 1] 1729 	cpl acc24+1
      000A6C 72 53 00 08      [ 1] 1730 	cpl acc24
      000A70 A6 01            [ 1] 1731 	ld a,#1
      000A72 CB 00 0A         [ 1] 1732 	add a,acc24+2
      000A75 C7 00 0A         [ 1] 1733 	ld acc24+2,a
      000A78 4F               [ 1] 1734 	clr a
      000A79 C9 00 09         [ 1] 1735 	adc a,acc24+1
      000A7C C7 00 09         [ 1] 1736 	ld acc24+1,a 
      000A7F 4F               [ 1] 1737 	clr a 
      000A80 C9 00 08         [ 1] 1738 	adc a,acc24 
      000A83 C7 00 08         [ 1] 1739 	ld acc24,a 
      000A86 81               [ 4] 1740 	ret
                                   1741 
                                   1742 
                                   1743 ;------------------------------------
                                   1744 ; read a line of text from terminal
                                   1745 ; input:
                                   1746 ;	none
                                   1747 ; local variable on stack:
                                   1748 ;	LL  line length
                                   1749 ;   RXCHAR last received chaaracte 
                                   1750 ; output:
                                   1751 ;   text in tib  buffer
                                   1752 ;------------------------------------
                                   1753 	; local variables
                           000001  1754 	LL_HB=1
                           000001  1755 	RXCHAR = 1 ; last char received
                           000002  1756 	LL = 2  ; accepted line length
                           000002  1757 	VSIZE=2 
      000A87                       1758 readln:
      000A87 5F               [ 1] 1759 	clrw x 
      000A88 89               [ 2] 1760 	pushw x 
      000A89 90 AE 16 C8      [ 2] 1761  	ldw y,#tib ; input buffer
      000A8D                       1762 readln_loop:
      000A8D CD 01 A7         [ 4] 1763 	call getc
      000A90 6B 01            [ 1] 1764 	ld (RXCHAR,sp),a
      000A92 A1 0D            [ 1] 1765 	cp a,#CR
      000A94 26 03            [ 1] 1766 	jrne 1$
      000A96 CC 0B 06         [ 2] 1767 	jp readln_quit
      000A99 A1 0A            [ 1] 1768 1$:	cp a,#NL
      000A9B 27 69            [ 1] 1769 	jreq readln_quit
      000A9D A1 08            [ 1] 1770 	cp a,#BSP
      000A9F 27 41            [ 1] 1771 	jreq del_back
      000AA1 A1 04            [ 1] 1772 	cp a,#CTRL_D
      000AA3 27 2E            [ 1] 1773 	jreq del_ln
      000AA5 A1 12            [ 1] 1774 	cp a,#CTRL_R 
      000AA7 27 06            [ 1] 1775 	jreq reprint 
                                   1776 ;	cp a,#'[
                                   1777 ;	jreq ansi_seq
      000AA9                       1778 final_test:
      000AA9 A1 20            [ 1] 1779 	cp a,#SPACE
      000AAB 2A 44            [ 1] 1780 	jrpl accept_char
      000AAD 20 DE            [ 2] 1781 	jra readln_loop
      000AAF                       1782 ansi_seq:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1783 ;	call getc
                                   1784 ;	cp a,#'C 
                                   1785 ;	jreq rigth_arrow
                                   1786 ;	cp a,#'D 
                                   1787 ;	jreq left_arrow 
                                   1788 ;	jra final_test
      000AAF                       1789 right_arrow:
                                   1790 ;	ld a,#BSP 
                                   1791 ;	call putc 
                                   1792 ;	jra realn_loop 
      000AAF                       1793 left_arrow:
                                   1794 
                                   1795 ;	jra readln_loop
      000AAF                       1796 reprint: 
      000AAF 72 5D 00 02      [ 1] 1797 	tnz count 
      000AB3 27 D8            [ 1] 1798 	jreq readln_loop
      000AB5 0D 02            [ 1] 1799 	tnz (LL,sp)
      000AB7 26 D4            [ 1] 1800 	jrne readln_loop
      000AB9 AE 16 C8         [ 2] 1801 	ldw x,#tib 
      000ABC CD 01 B0         [ 4] 1802 	call puts
      000ABF 90 AE 16 C8      [ 2] 1803 	ldw y,#tib 
      000AC3 C6 00 02         [ 1] 1804 	ld a,count 
      000AC6 6B 02            [ 1] 1805 	ld (LL,sp),a
      000AC8 72 5F 00 02      [ 1] 1806 	clr count 
      000ACC 0F 01            [ 1] 1807 	clr (LL_HB,sp)
      000ACE 72 F9 01         [ 2] 1808 	addw y,(LL_HB,sp)
      000AD1 20 BA            [ 2] 1809 	jra readln_loop 
      000AD3                       1810 del_ln:
      000AD3 7B 02            [ 1] 1811 	ld a,(LL,sp)
      000AD5 CD 01 CA         [ 4] 1812 	call delete
      000AD8 90 AE 16 C8      [ 2] 1813 	ldw y,#tib
      000ADC 90 7F            [ 1] 1814 	clr (y)
      000ADE 0F 02            [ 1] 1815 	clr (LL,sp)
      000AE0 20 AB            [ 2] 1816 	jra readln_loop
      000AE2                       1817 del_back:
      000AE2 0D 02            [ 1] 1818     tnz (LL,sp)
      000AE4 27 A7            [ 1] 1819     jreq readln_loop
      000AE6 0A 02            [ 1] 1820     dec (LL,sp)
      000AE8 90 5A            [ 2] 1821     decw y
      000AEA 90 7F            [ 1] 1822     clr  (y)
      000AEC CD 01 BA         [ 4] 1823     call bksp 
      000AEF 20 9C            [ 2] 1824     jra readln_loop	
      000AF1                       1825 accept_char:
      000AF1 A6 4F            [ 1] 1826 	ld a,#TIB_SIZE-1
      000AF3 11 02            [ 1] 1827 	cp a, (LL,sp)
      000AF5 27 96            [ 1] 1828 	jreq readln_loop
      000AF7 7B 01            [ 1] 1829 	ld a,(RXCHAR,sp)
      000AF9 90 F7            [ 1] 1830 	ld (y),a
      000AFB 0C 02            [ 1] 1831 	inc (LL,sp)
      000AFD 90 5C            [ 1] 1832 	incw y
      000AFF 90 7F            [ 1] 1833 	clr (y)
      000B01 CD 01 9E         [ 4] 1834 	call putc 
      000B04 20 87            [ 2] 1835 	jra readln_loop
      000B06                       1836 readln_quit:
      000B06 90 7F            [ 1] 1837 	clr (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000B08 7B 02            [ 1] 1838 	ld a,(LL,sp)
      000B0A C7 00 02         [ 1] 1839 	ld count,a 
      000B0D                       1840 	_drop VSIZE 
      000B0D 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B0F A6 0D            [ 1] 1841 	ld a,#CR
      000B11 CD 01 9E         [ 4] 1842 	call putc
      000B14 81               [ 4] 1843 	ret
                                   1844 
                           000001  1845 .if DEBUG 	
                                   1846 ;----------------------------
                                   1847 ; command interface
                                   1848 ; only 3 commands:
                                   1849 ;  'q' to resume application
                                   1850 ;  'p [addr]' to print memory values 
                                   1851 ;  's addr' to print string 
                                   1852 ;----------------------------
                                   1853 ;local variable 
                           000001  1854 	PSIZE=1
                           000001  1855 	VSIZE=1 
      000B15                       1856 cmd_itf:
      000B15 52 01            [ 2] 1857 	sub sp,#VSIZE 
      000B17 72 5F 00 13      [ 1] 1858 	clr farptr 
      000B1B 72 5F 00 14      [ 1] 1859 	clr farptr+1 
      000B1F 72 5F 00 15      [ 1] 1860 	clr farptr+2  
      000B23                       1861 repl:
      000B23 A6 0D            [ 1] 1862 	ld a,#CR 
      000B25 CD 01 9E         [ 4] 1863 	call putc 
      000B28 A6 3F            [ 1] 1864 	ld a,#'? 
      000B2A CD 01 9E         [ 4] 1865 	call putc
      000B2D 72 5F 00 00      [ 1] 1866 	clr in.w 
      000B31 72 5F 00 01      [ 1] 1867 	clr in 
      000B35 CD 0A 87         [ 4] 1868 	call readln
      000B38 90 AE 16 C8      [ 2] 1869 	ldw y,#tib  
      000B3C 90 F6            [ 1] 1870 	ld a,(y)
      000B3E 27 E3            [ 1] 1871 	jreq repl  
      000B40 72 5C 00 01      [ 1] 1872 	inc in 
      000B44 CD 0E C3         [ 4] 1873 	call to_upper 
      000B47 A1 51            [ 1] 1874 	cp a,#'Q 
      000B49 26 17            [ 1] 1875 	jrne test_p
      000B4B                       1876 repl_exit:
      000B4B 72 5F 16 C8      [ 1] 1877 	clr tib 
      000B4F 72 5F 00 02      [ 1] 1878 	clr count 
      000B53 72 5F 00 01      [ 1] 1879 	clr in 
      000B57                       1880 	_drop #VSIZE 	
      000B57 5B 01            [ 2]    1     addw sp,##VSIZE 
      000B59 81               [ 4] 1881 	ret  
      000B5A                       1882 invalid:
      000B5A AE 0B D8         [ 2] 1883 	ldw x,#invalid_cmd 
      000B5D CD 01 B0         [ 4] 1884 	call puts 
      000B60 20 C1            [ 2] 1885 	jra repl 
      000B62                       1886 test_p:	
      000B62 A1 50            [ 1] 1887     cp a,#'P 
      000B64 27 11            [ 1] 1888 	jreq mem_peek
      000B66 A1 53            [ 1] 1889     cp a,#'S 
      000B68 26 F0            [ 1] 1890 	jrne invalid 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B6A                       1891 print_string:	
      000B6A CD 0D 04         [ 4] 1892 	call get_token
      000B6D A1 03            [ 1] 1893 	cp a,#TK_INTGR 
      000B6F 26 E9            [ 1] 1894 	jrne invalid 
      000B71 CD 01 B0         [ 4] 1895 	call puts
      000B74 CC 0B 23         [ 2] 1896 	jp repl 	
      000B77                       1897 mem_peek:
      000B77 A6 20            [ 1] 1898 	ld a,#SPACE 
      000B79 CD 0F 7B         [ 4] 1899 	call skip  	 
      000B7C 72 B9 00 00      [ 2] 1900 	addw y,in.w 
      000B80 AE 17 18         [ 2] 1901 	ldw x,#pad 
      000B83 CD 02 90         [ 4] 1902 	call strcpy
      000B86 CD 0E CF         [ 4] 1903 	call atoi24 	
      000B89 C6 00 08         [ 1] 1904 	ld a, acc24 
      000B8C CA 00 09         [ 1] 1905 	or a,acc16 
      000B8F CA 00 0A         [ 1] 1906 	or a,acc8 
      000B92 26 02            [ 1] 1907 	jrne 1$ 
      000B94 20 0C            [ 2] 1908 	jra peek_byte  
      000B96 CE 00 08         [ 2] 1909 1$:	ldw x,acc24 
      000B99 CF 00 13         [ 2] 1910 	ldw farptr,x 
      000B9C C6 00 0A         [ 1] 1911 	ld a,acc8 
      000B9F C7 00 15         [ 1] 1912 	ld farptr+2,a 
      000BA2                       1913 peek_byte:
      000BA2 CD 0B E7         [ 4] 1914 	call print_farptr 
      000BA5 A6 08            [ 1] 1915 	ld a,#8 
      000BA7 6B 01            [ 1] 1916 	ld (PSIZE,sp),a 
      000BA9 5F               [ 1] 1917 	clrw x 
      000BAA CD 0C 02         [ 4] 1918 1$:	call fetchc  
      000BAD 89               [ 2] 1919 	pushw x 
      000BAE C7 00 0A         [ 1] 1920 	ld acc8,a 
      000BB1 5F               [ 1] 1921 	clrw x 
      000BB2 CF 00 08         [ 2] 1922 	ldw acc24,x 
      000BB5 A6 90            [ 1] 1923 	ld a,#16+128
      000BB7 CD 09 51         [ 4] 1924 	call prti24
      000BBA 85               [ 2] 1925 	popw x 
      000BBB 0A 01            [ 1] 1926 	dec (PSIZE,sp)
      000BBD 26 EB            [ 1] 1927 	jrne 1$ 
      000BBF A6 08            [ 1] 1928 	ld a,#8 
      000BC1 CB 00 15         [ 1] 1929 	add a,farptr+2 
      000BC4 C7 00 15         [ 1] 1930 	ld farptr+2,a
      000BC7 4F               [ 1] 1931 	clr a 
      000BC8 C9 00 14         [ 1] 1932 	adc a,farptr+1 
      000BCB C7 00 14         [ 1] 1933 	ld farptr+1,a 
      000BCE 4F               [ 1] 1934 	clr a 
      000BCF C9 00 13         [ 1] 1935 	adc a,farptr 
      000BD2 C7 00 13         [ 1] 1936 	ld farptr,a 
      000BD5 CC 0B 23         [ 2] 1937 	jp repl  
                                   1938 
      000BD8 6E 6F 74 20 61 20 63  1939 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1940 
                                   1941 ;----------------------------
                                   1942 ; display farptr address
                                   1943 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BE7                       1944 print_farptr:
      000BE7 C6 00 15         [ 1] 1945 	ld a ,farptr+2 
      000BEA C7 00 0A         [ 1] 1946 	ld acc8,a 
      000BED CE 00 13         [ 2] 1947 	ldw x,farptr 
      000BF0 CF 00 08         [ 2] 1948 	ldw acc24,x 
      000BF3 5F               [ 1] 1949 	clrw x 
      000BF4 A6 10            [ 1] 1950 	ld a,#16 
      000BF6 CD 09 51         [ 4] 1951 	call prti24
      000BF9 A6 20            [ 1] 1952 	ld a,#SPACE 
      000BFB CD 01 9E         [ 4] 1953 	call putc 
      000BFE CD 01 9E         [ 4] 1954 	call putc 
      000C01 81               [ 4] 1955 	ret
                                   1956 
                                   1957 ;------------------------------------
                                   1958 ; get byte at address farptr[X]
                                   1959 ; input:
                                   1960 ;	 farptr   address to peek
                                   1961 ;    X		  farptr index 	
                                   1962 ; output:
                                   1963 ;	 A 		  byte from memory  
                                   1964 ;    x		  incremented by 1
                                   1965 ;------------------------------------
      000C02                       1966 fetchc: ; @C
      000C02 92 AF 00 13      [ 5] 1967 	ldf a,([farptr],x)
      000C06 5C               [ 1] 1968 	incw x
      000C07 81               [ 4] 1969 	ret
                                   1970 
                                   1971 
                                   1972 ;------------------------------------
                                   1973 ; expect a number from command line 
                                   1974 ; next argument
                                   1975 ;  input:
                                   1976 ;	  none
                                   1977 ;  output:
                                   1978 ;    acc24   int24_t 
                                   1979 ;------------------------------------
      000C08                       1980 number::
      000C08 CD 0D 04         [ 4] 1981 	call get_token
      000C0B CD 0E CF         [ 4] 1982 	call atoi24
      000C0E 81               [ 4] 1983 	ret
                                   1984 .endif ; DEBUG 
                                   1985 
                                   1986 ;------------------------------------
                                   1987 ; parse quoted string 
                                   1988 ; input:
                                   1989 ;   Y 	pointer to tib 
                                   1990 ;   X   pointer to pad
                                   1991 ; output:
                                   1992 ;	pad   parsed string
                                   1993 ;   TOS  char* to pad  
                                   1994 ;------------------------------------
                           000001  1995 	PREV = 1
                           000002  1996 	CURR =2 
                           000002  1997 	VSIZE=2 
      000C0F                       1998 parse_quote: ; { -- addr }
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000C0F                       1999 	_vars VSIZE 
      000C0F 52 02            [ 2]    1     sub sp,#VSIZE 
      000C11 4F               [ 1] 2000 	clr a
      000C12 6B 01            [ 1] 2001 1$:	ld (PREV,sp),a 
      000C14 72 5C 00 01      [ 1] 2002 2$:	inc in
      000C18 91 D6 00         [ 4] 2003 	ld a,([in.w],y)
      000C1B 27 24            [ 1] 2004 	jreq 6$
      000C1D 6B 02            [ 1] 2005 	ld (CURR,sp),a 
      000C1F A6 5C            [ 1] 2006 	ld a,#'\
      000C21 11 01            [ 1] 2007 	cp a, (PREV,sp)
      000C23 26 0A            [ 1] 2008 	jrne 3$
      000C25 0F 01            [ 1] 2009 	clr (PREV,sp)
      000C27 7B 02            [ 1] 2010 	ld a,(CURR,sp)
      000C29 AD 1F            [ 4] 2011 	callr convert_escape
      000C2B F7               [ 1] 2012 	ld (x),a 
      000C2C 5C               [ 1] 2013 	incw x 
      000C2D 20 E5            [ 2] 2014 	jra 2$
      000C2F                       2015 3$:
      000C2F 7B 02            [ 1] 2016 	ld a,(CURR,sp)
      000C31 A1 5C            [ 1] 2017 	cp a,#'\'
      000C33 27 DD            [ 1] 2018 	jreq 1$
      000C35 A1 22            [ 1] 2019 	cp a,#'"
      000C37 27 04            [ 1] 2020 	jreq 5$ 
      000C39 F7               [ 1] 2021 	ld (x),a 
      000C3A 5C               [ 1] 2022 	incw x 
      000C3B 20 D7            [ 2] 2023 	jra 2$
      000C3D 72 5C 00 01      [ 1] 2024 5$:	inc in 
      000C41 7F               [ 1] 2025 6$: clr (x)
      000C42 AE 17 18         [ 2] 2026 	ldw x,#pad 
      000C45                       2027 	_drop VSIZE
      000C45 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C47 A6 08            [ 1] 2028 	ld a,#TK_QSTR  
      000C49 81               [ 4] 2029 	ret 
                                   2030 
                                   2031 ;---------------------------------------
                                   2032 ; called by parse_quote
                                   2033 ; subtitute escaped character 
                                   2034 ; by their ASCII value .
                                   2035 ; input:
                                   2036 ;   A  character following '\'
                                   2037 ; output:
                                   2038 ;   A  substitued char or same if not valid.
                                   2039 ;---------------------------------------
      000C4A                       2040 convert_escape:
      000C4A 89               [ 2] 2041 	pushw x 
      000C4B AE 0C 5F         [ 2] 2042 	ldw x,#escaped 
      000C4E F1               [ 1] 2043 1$:	cp a,(x)
      000C4F 27 06            [ 1] 2044 	jreq 2$
      000C51 7D               [ 1] 2045 	tnz (x)
      000C52 27 09            [ 1] 2046 	jreq 3$
      000C54 5C               [ 1] 2047 	incw x 
      000C55 20 F7            [ 2] 2048 	jra 1$
      000C57 1D 0C 5F         [ 2] 2049 2$: subw x,#escaped 
      000C5A 9F               [ 1] 2050 	ld a,xl 
      000C5B AB 07            [ 1] 2051 	add a,#7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C5D 85               [ 2] 2052 3$:	popw x 
      000C5E 81               [ 4] 2053 	ret 
                                   2054 
      000C5F 61 62 74 6E 76 66 72  2055 escaped: .asciz "abtnvfr"
             00
                                   2056 
                                   2057 ;-------------------------
                                   2058 ; integer parser 
                                   2059 ; input:
                                   2060 ;   X 		point to pad 
                                   2061 ;   Y 		point to tib 
                                   2062 ;   A 	    first digit|'$' 
                                   2063 ; output:  
                                   2064 ;   pad     number string 
                                   2065 ;   X 		integer 
                                   2066 ;   A 		TK_INTGR
                                   2067 ;-------------------------
                           000001  2068 	BASE=1
                           000002  2069 	TCHAR=2 
                           000002  2070 	VSIZE=2 
      000C67                       2071 parse_integer: ; { -- n }
      000C67 4B 00            [ 1] 2072 	push #0 ; TCHAR 
      000C69 A1 24            [ 1] 2073 	cp a,#'$
      000C6B 27 04            [ 1] 2074 	jreq 1$ 
      000C6D 4B 0A            [ 1] 2075 	push #10 ; BASE=10 
      000C6F 20 02            [ 2] 2076 	jra 2$ 
      000C71 4B 10            [ 1] 2077 1$: push #16  ; BASE=16
      000C73 F7               [ 1] 2078 2$:	ld (x),a 
      000C74 5C               [ 1] 2079 	incw x 
      000C75 72 5C 00 01      [ 1] 2080 	inc in 
      000C79 91 D6 00         [ 4] 2081 	ld a,([in.w],y)
      000C7C CD 0E C3         [ 4] 2082 	call to_upper 
      000C7F 6B 02            [ 1] 2083 	ld (TCHAR,sp),a 
      000C81 CD 0E BA         [ 4] 2084 	call is_digit 
      000C84 25 ED            [ 1] 2085 	jrc 2$
      000C86 A6 10            [ 1] 2086 	ld a,#16 
      000C88 11 01            [ 1] 2087 	cp a,(BASE,sp)
      000C8A 26 0A            [ 1] 2088 	jrne 3$ 
      000C8C 7B 02            [ 1] 2089 	ld a,(TCHAR,sp)
      000C8E A1 41            [ 1] 2090 	cp a,#'A 
      000C90 2B 04            [ 1] 2091 	jrmi 3$ 
      000C92 A1 47            [ 1] 2092 	cp a,#'G 
      000C94 2B DD            [ 1] 2093 	jrmi 2$ 
      000C96 7F               [ 1] 2094 3$:	clr (x)
      000C97 CD 0E CF         [ 4] 2095 	call atoi24
      000C9A CE 00 09         [ 2] 2096 	ldw x,acc16 
      000C9D A6 03            [ 1] 2097 	ld a,#TK_INTGR
      000C9F                       2098 	_drop VSIZE  
      000C9F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CA1 81               [ 4] 2099 	ret 	
                                   2100 
                                   2101 ;-------------------------
                                   2102 ; binary integer parser 
                                   2103 ; input:
                                   2104 ;   X 		point to pad 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2105 ;   Y 		point to tib 
                                   2106 ;   A 	    '%' 
                                   2107 ; output:  
                                   2108 ;   pad     number string 
                                   2109 ;   X 		integer 
                                   2110 ;   A 		TK_INTGR
                                   2111 ;   TOS     integer 
                                   2112 ;-------------------------
                           000001  2113 	BINARY=1
                           000002  2114 	VSIZE=2
      000CA2                       2115 parse_binary: ; { -- n }
      000CA2 4B 00            [ 1] 2116 	push #0
      000CA4 4B 00            [ 1] 2117 	push #0
      000CA6 F7               [ 1] 2118 1$: ld (x),a 
      000CA7 5C               [ 1] 2119 	incw x 
      000CA8 72 5C 00 01      [ 1] 2120 	inc in 
      000CAC 91 D6 00         [ 4] 2121 	ld a,([in.w],y)
      000CAF A1 30            [ 1] 2122 	cp a,#'0 
      000CB1 27 06            [ 1] 2123 	jreq 2$
      000CB3 A1 31            [ 1] 2124 	cp a,#'1 
      000CB5 27 02            [ 1] 2125 	jreq 2$ 
      000CB7 20 09            [ 2] 2126 	jra bin_exit 
      000CB9 A0 30            [ 1] 2127 2$: sub a,#'0	
      000CBB 46               [ 1] 2128 	rrc a 
      000CBC 09 02            [ 1] 2129 	rlc (BINARY+1,sp)
      000CBE 09 01            [ 1] 2130 	rlc (BINARY,sp)
      000CC0 20 E4            [ 2] 2131 	jra 1$  
      000CC2                       2132 bin_exit:
      000CC2 7F               [ 1] 2133 	clr (x)
      000CC3 1E 01            [ 2] 2134 	ldw x,(BINARY,sp)
      000CC5 A6 03            [ 1] 2135 	ld a,#TK_INTGR 	
      000CC7                       2136 	_drop VSIZE 
      000CC7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CC9 81               [ 4] 2137 	ret
                                   2138 
                                   2139 ;---------------------------
                                   2140 ;  token begin with a letter,
                                   2141 ;  is keyword or variable. 	
                                   2142 ; input:
                                   2143 ;   X 		point to pad 
                                   2144 ;   Y 		point to text
                                   2145 ;   A 	    first letter  
                                   2146 ; output:
                                   2147 ;   X		exec_addr|var_addr 
                                   2148 ;   A 		TK_CMD 
                                   2149 ;   pad 	keyword|var_name  
                                   2150 ;   TOS     exec_addr|var_addr 
                                   2151 ;--------------------------  
      000CCA                       2152 parse_keyword: ; { -- exec_addr|var_addr}
      000CCA CD 0E C3         [ 4] 2153 	call to_upper 
      000CCD F7               [ 1] 2154 	ld (x),a 
      000CCE 5C               [ 1] 2155 	incw x 
      000CCF 72 5C 00 01      [ 1] 2156 	inc in 
      000CD3 91 D6 00         [ 4] 2157 	ld a,([in.w],y)
      000CD6 CD 05 00         [ 4] 2158 	call is_alpha 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CD9 25 EF            [ 1] 2159 	jrc parse_keyword 
      000CDB 7F               [ 1] 2160 1$: clr (x)
      000CDC 72 5D 17 19      [ 1] 2161 	tnz pad+1 
      000CE0 26 15            [ 1] 2162 	jrne 2$
                                   2163 ; one letter variable name 
      000CE2 C6 17 18         [ 1] 2164 	ld a,pad 
      000CE5 A0 41            [ 1] 2165 	sub a,#'A 
      000CE7 48               [ 1] 2166 	sll a 
      000CE8 88               [ 1] 2167 	push a 
      000CE9 4B 00            [ 1] 2168 	push #0
      000CEB AE 00 26         [ 2] 2169 	ldw x,#vars 
      000CEE 72 FB 01         [ 2] 2170 	addw x,(1,sp) ; X=var address 
      000CF1                       2171 	_drop 2 
      000CF1 5B 02            [ 2]    1     addw sp,#2 
      000CF3 A6 04            [ 1] 2172 	ld a,#TK_VAR 
      000CF5 20 0C            [ 2] 2173 	jra 4$ 
      000CF7                       2174 2$: ; check for keyword, otherwise syntax error.
      000CF7                       2175 	_ldx_dict kword_dict
      000CF7 AE 21 3A         [ 2]    1     ldw x,#kword_dict+2
      000CFA CD 11 60         [ 4] 2176 	call search_dict
      000CFD 4D               [ 1] 2177 	tnz a
      000CFE 26 03            [ 1] 2178 	jrne 4$ 
      000D00 CC 07 14         [ 2] 2179 	jp syntax_error
      000D03 81               [ 4] 2180 4$:	ret  	
                                   2181 
                                   2182 
                                   2183 ;------------------------------------
                                   2184 ; Command line tokenizer
                                   2185 ; scan text for next token
                                   2186 ; move token in 'pad'
                                   2187 ; input: 
      000D04                       2188 	none: 
                                   2189 ; use:
                                   2190 ;	Y   pointer to text
                                   2191 ;   X	pointer to pad 
                                   2192 ;   in.w   index in text buffer
                                   2193 ; output:
                                   2194 ;   A       token attribute 
                                   2195 ;   pad 	token as .asciz
                                   2196 ;   X 		token value   
                                   2197 ;------------------------------------
                                   2198 	; use to check special character 
                                   2199 	.macro _case c t  
                                   2200 	ld a,#c 
                                   2201 	cp a,(TCHAR,sp) 
                                   2202 	jrne t
                                   2203 	.endm 
                                   2204 
                           000001  2205 	TCHAR=1
                           000002  2206 	ATTRIB=2 
                           000002  2207 	VSIZE=2
      000D04                       2208 get_token: 
      000D04 90 AE 16 C8      [ 2] 2209 	ldw y,#tib    	
      000D08 C6 00 01         [ 1] 2210 	ld a,in 
      000D0B C1 00 02         [ 1] 2211 	cp a,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000D0E 2B 03            [ 1] 2212 	jrmi 1$
      000D10 A6 00            [ 1] 2213 	ld a,#TK_NONE 
      000D12 81               [ 4] 2214 	ret 
      000D13                       2215 1$:	
      000D13                       2216 	_vars VSIZE
      000D13 52 02            [ 2]    1     sub sp,#VSIZE 
      000D15 AE 17 18         [ 2] 2217 	ldw x, #pad
      000D18 A6 20            [ 1] 2218 	ld a,#SPACE
      000D1A CD 0F 7B         [ 4] 2219 	call skip
      000D1D CF 00 11         [ 2] 2220 	ldw in.w.saved,x 
      000D20 91 D6 00         [ 4] 2221 	ld a,([in.w],y)
      000D23 26 07            [ 1] 2222 	jrne str_tst
      000D25 72 5F 17 18      [ 1] 2223 	clr pad 
      000D29 CC 0E B7         [ 2] 2224 	jp token_exit ; end of line 
                                   2225 
      000D2C                       2226 str_tst: ; check for quoted string  	
      000D2C CD 0E C3         [ 4] 2227 	call to_upper 
      000D2F 6B 01            [ 1] 2228 	ld (TCHAR,sp),a 
      000D31                       2229 	_case '"' nbr_tst
      000D31 A6 22            [ 1]    1 	ld a,#'"' 
      000D33 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D35 26 06            [ 1]    3 	jrne nbr_tst
      000D37 CD 0C 0F         [ 4] 2230 	call parse_quote
      000D3A CC 0E B7         [ 2] 2231 	jp token_exit
      000D3D                       2232 nbr_tst: ; check for number 
      000D3D A6 24            [ 1] 2233 	ld a,#'$'
      000D3F 11 01            [ 1] 2234 	cp a,(TCHAR,sp) 
      000D41 27 13            [ 1] 2235 	jreq 1$
      000D43 A6 26            [ 1] 2236 	ld a,#'&
      000D45 11 01            [ 1] 2237 	cp a,(TCHAR,sp)
      000D47 26 06            [ 1] 2238 	jrne 0$
      000D49 CD 0C A2         [ 4] 2239 	call parse_binary ; expect binary integer 
      000D4C CC 0E B7         [ 2] 2240 	jp token_exit 
      000D4F 7B 01            [ 1] 2241 0$:	ld a,(TCHAR,sp)
      000D51 CD 0E BA         [ 4] 2242 	call is_digit
      000D54 24 06            [ 1] 2243 	jrnc 3$
      000D56 CD 0C 67         [ 4] 2244 1$:	call parse_integer 
      000D59 CC 0E B7         [ 2] 2245 	jp token_exit 
      000D5C                       2246 3$: 
      000D5C                       2247 	_case '(' bkslsh_tst 
      000D5C A6 28            [ 1]    1 	ld a,#'(' 
      000D5E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D60 26 05            [ 1]    3 	jrne bkslsh_tst
      000D62 A6 09            [ 1] 2248 	ld a,#TK_LPAREN
      000D64 CC 0E A7         [ 2] 2249 	jp token_char   	
      000D67                       2250 bkslsh_tst:
      000D67                       2251 	_case '\',rparnt_tst
      000D67 A6 5C            [ 1]    1 	ld a,#'\' 
      000D69 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D6B 26 18            [ 1]    3 	jrne rparnt_tst
      000D6D 7B 01            [ 1] 2252 	ld a,(TCHAR,sp)
      000D6F F7               [ 1] 2253 	ld (x),a 
      000D70 5C               [ 1] 2254 	incw x 
      000D71 72 5C 00 01      [ 1] 2255 	inc in 
      000D75 91 D6 00         [ 4] 2256 	ld a,([in.w],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D78 F7               [ 1] 2257 	ld (x),a 
      000D79 5C               [ 1] 2258 	incw x 
      000D7A 72 5C 00 01      [ 1] 2259 	inc in  
      000D7E 7F               [ 1] 2260 	clr (x) 
      000D7F 97               [ 1] 2261 	ld xl,a 
      000D80 A6 02            [ 1] 2262 	ld a,#TK_CHAR 
      000D82 CC 0E B7         [ 2] 2263 	jp token_exit 
      000D85                       2264 rparnt_tst:		
      000D85                       2265 	_case ')' colon_tst 
      000D85 A6 29            [ 1]    1 	ld a,#')' 
      000D87 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D89 26 05            [ 1]    3 	jrne colon_tst
      000D8B A6 0A            [ 1] 2266 	ld a,#TK_RPAREN 
      000D8D CC 0E A7         [ 2] 2267 	jp token_char 
      000D90                       2268 colon_tst:
      000D90                       2269 	_case ':' comma_tst 
      000D90 A6 3A            [ 1]    1 	ld a,#':' 
      000D92 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D94 26 05            [ 1]    3 	jrne comma_tst
      000D96 A6 01            [ 1] 2270 	ld a,#TK_COLON 
      000D98 CC 0E A7         [ 2] 2271 	jp token_char 
      000D9B                       2272 comma_tst:
      000D9B                       2273 	_case COMMA sharp_tst 
      000D9B A6 2C            [ 1]    1 	ld a,#COMMA 
      000D9D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9F 26 05            [ 1]    3 	jrne sharp_tst
      000DA1 A6 0B            [ 1] 2274 	ld a,#TK_COMMA
      000DA3 CC 0E A7         [ 2] 2275 	jp token_char
      000DA6                       2276 sharp_tst:
      000DA6                       2277 	_case SHARP dash_tst 
      000DA6 A6 23            [ 1]    1 	ld a,#SHARP 
      000DA8 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DAA 26 05            [ 1]    3 	jrne dash_tst
      000DAC A6 0C            [ 1] 2278 	ld a,#TK_SHARP
      000DAE CC 0E A7         [ 2] 2279 	jp token_char  	 	 
      000DB1                       2280 dash_tst: 	
      000DB1                       2281 	_case '-' at_tst 
      000DB1 A6 2D            [ 1]    1 	ld a,#'-' 
      000DB3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DB5 26 05            [ 1]    3 	jrne at_tst
      000DB7 A6 11            [ 1] 2282 	ld a,#TK_MINUS  
      000DB9 CC 0E A7         [ 2] 2283 	jp token_char 
      000DBC                       2284 at_tst:
      000DBC                       2285 	_case '@' qmark_tst 
      000DBC A6 40            [ 1]    1 	ld a,#'@' 
      000DBE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DC0 26 05            [ 1]    3 	jrne qmark_tst
      000DC2 A6 05            [ 1] 2286 	ld a,#TK_ARRAY 
      000DC4 CC 0E A7         [ 2] 2287 	jp token_char
      000DC7                       2288 qmark_tst:
      000DC7                       2289 	_case '?' tick_tst 
      000DC7 A6 3F            [ 1]    1 	ld a,#'?' 
      000DC9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DCB 26 11            [ 1]    3 	jrne tick_tst
      000DCD 7B 01            [ 1] 2290 	ld a,(TCHAR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DCF F7               [ 1] 2291 	ld (x),a 
      000DD0 5C               [ 1] 2292 	incw x 
      000DD1 7F               [ 1] 2293 	clr (x)
      000DD2 72 5C 00 01      [ 1] 2294 	inc in 
      000DD6 A6 06            [ 1] 2295 	ld a,#TK_CMD 
      000DD8 AE 15 F8         [ 2] 2296 	ldw x,#print 
      000DDB CC 0E B7         [ 2] 2297 	jp token_exit
      000DDE                       2298 tick_tst: ; ignore comment 
      000DDE                       2299 	_case TICK plus_tst 
      000DDE A6 27            [ 1]    1 	ld a,#TICK 
      000DE0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE2 26 0C            [ 1]    3 	jrne plus_tst
      000DE4 72 5C 00 01      [ 1] 2300 	inc in 
      000DE8 A6 06            [ 1] 2301 	ld a,#TK_CMD 
      000DEA AE 17 06         [ 2] 2302 	ldw x,#rem 
      000DED CC 0E B7         [ 2] 2303 	jp token_exit 
      000DF0                       2304 plus_tst:
      000DF0                       2305 	_case '+' star_tst 
      000DF0 A6 2B            [ 1]    1 	ld a,#'+' 
      000DF2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF4 26 05            [ 1]    3 	jrne star_tst
      000DF6 A6 10            [ 1] 2306 	ld a,#TK_PLUS  
      000DF8 CC 0E A7         [ 2] 2307 	jp token_char 
      000DFB                       2308 star_tst:
      000DFB                       2309 	_case '*' slash_tst 
      000DFB A6 2A            [ 1]    1 	ld a,#'*' 
      000DFD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFF 26 05            [ 1]    3 	jrne slash_tst
      000E01 A6 20            [ 1] 2310 	ld a,#TK_MULT 
      000E03 CC 0E A7         [ 2] 2311 	jp token_char 
      000E06                       2312 slash_tst: 
      000E06                       2313 	_case '/' prcnt_tst 
      000E06 A6 2F            [ 1]    1 	ld a,#'/' 
      000E08 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E0A 26 05            [ 1]    3 	jrne prcnt_tst
      000E0C A6 21            [ 1] 2314 	ld a,#TK_DIV 
      000E0E CC 0E A7         [ 2] 2315 	jp token_char 
      000E11                       2316 prcnt_tst:
      000E11                       2317 	_case '%' eql_tst 
      000E11 A6 25            [ 1]    1 	ld a,#'%' 
      000E13 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E15 26 05            [ 1]    3 	jrne eql_tst
      000E17 A6 22            [ 1] 2318 	ld a,#TK_MOD
      000E19 CC 0E A7         [ 2] 2319 	jp token_char  
                                   2320 ; 1 or 2 character tokens 	
      000E1C                       2321 eql_tst:
      000E1C                       2322 	_case '=' gt_tst 		
      000E1C A6 3D            [ 1]    1 	ld a,#'=' 
      000E1E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E20 26 05            [ 1]    3 	jrne gt_tst
      000E22 A6 32            [ 1] 2323 	ld a,#TK_EQUAL
      000E24 CC 0E A7         [ 2] 2324 	jp token_char 
      000E27                       2325 gt_tst:
      000E27                       2326 	_case '>' lt_tst 
      000E27 A6 3E            [ 1]    1 	ld a,#'>' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E29 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E2B 26 33            [ 1]    3 	jrne lt_tst
      000E2D A6 31            [ 1] 2327 	ld a,#TK_GT 
      000E2F 6B 02            [ 1] 2328 	ld (ATTRIB,sp),a 
      000E31 72 5C 00 01      [ 1] 2329 	inc in 
      000E35 91 D6 00         [ 4] 2330 	ld a,([in.w],y)
      000E38 A1 3D            [ 1] 2331 	cp a,#'=
      000E3A 26 0C            [ 1] 2332 	jrne 1$
      000E3C 7B 01            [ 1] 2333 	ld a,(TCHAR,sp)
      000E3E F7               [ 1] 2334 	ld (x),a
      000E3F 5C               [ 1] 2335 	incw x 
      000E40 A6 3D            [ 1] 2336 	ld a,#'=
      000E42 6B 01            [ 1] 2337 	ld (TCHAR,sp),a 
      000E44 A6 33            [ 1] 2338 	ld a,#TK_GE 
      000E46 20 5F            [ 2] 2339 	jra token_char  
      000E48 A1 3C            [ 1] 2340 1$: cp a,#'<
      000E4A 26 0C            [ 1] 2341 	jrne 2$
      000E4C 7B 01            [ 1] 2342 	ld a,(TCHAR,sp)
      000E4E F7               [ 1] 2343 	ld (x),a
      000E4F 5C               [ 1] 2344 	incw x 
      000E50 A6 3C            [ 1] 2345 	ld a,#'<	
      000E52 6B 01            [ 1] 2346 	ld (TCHAR,sp),a 
      000E54 A6 35            [ 1] 2347 	ld a,#TK_NE 
      000E56 20 4F            [ 2] 2348 	jra token_char 
      000E58 72 5A 00 01      [ 1] 2349 2$: dec in
      000E5C 7B 02            [ 1] 2350 	ld a,(ATTRIB,sp)
      000E5E 20 47            [ 2] 2351 	jra token_char 
      000E60                       2352 lt_tst:
      000E60                       2353 	_case '<' other
      000E60 A6 3C            [ 1]    1 	ld a,#'<' 
      000E62 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E64 26 32            [ 1]    3 	jrne other
      000E66 A6 34            [ 1] 2354 	ld a,#TK_LT 
      000E68 6B 02            [ 1] 2355 	ld (ATTRIB,sp),a 
      000E6A 72 5C 00 01      [ 1] 2356 	inc in 
      000E6E 91 D6 00         [ 4] 2357 	ld a,([in.w],y)
      000E71 A1 3D            [ 1] 2358 	cp a,#'=
      000E73 26 0B            [ 1] 2359 	jrne 1$
      000E75 7B 01            [ 1] 2360 	ld a,(TCHAR,sp)
      000E77 F7               [ 1] 2361 	ld (x),a 
      000E78 A6 3D            [ 1] 2362 	ld a,#'=
      000E7A 6B 01            [ 1] 2363 	ld (TCHAR,sp),a 
      000E7C A6 36            [ 1] 2364 	ld a,#TK_LE 
      000E7E 20 27            [ 2] 2365 	jra token_char 
      000E80 A1 3E            [ 1] 2366 1$: cp a,#'>
      000E82 26 0C            [ 1] 2367 	jrne 2$
      000E84 7B 01            [ 1] 2368 	ld a,(TCHAR,sp)
      000E86 F7               [ 1] 2369 	ld (x),a 
      000E87 5C               [ 1] 2370 	incw x 
      000E88 A6 3E            [ 1] 2371 	ld a,#'>
      000E8A 6B 01            [ 1] 2372 	ld (TCHAR,sp),a 
      000E8C A6 35            [ 1] 2373 	ld a,#TK_NE 
      000E8E 20 17            [ 2] 2374 	jra token_char 
      000E90 72 5A 00 01      [ 1] 2375 2$: dec in 
      000E94 7B 02            [ 1] 2376 	ld a,(ATTRIB,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E96 20 0F            [ 2] 2377 	jra token_char 	
      000E98                       2378 other: ; not a special character 	 
      000E98 7B 01            [ 1] 2379 	ld a,(TCHAR,sp)
      000E9A CD 05 00         [ 4] 2380 	call is_alpha 
      000E9D 25 03            [ 1] 2381 	jrc 30$ 
      000E9F CC 07 14         [ 2] 2382 	jp syntax_error 
      000EA2                       2383 30$: 
      000EA2 CD 0C CA         [ 4] 2384 	call parse_keyword
      000EA5 20 10            [ 2] 2385 	jra token_exit 
      000EA7                       2386 token_char:
      000EA7 6B 02            [ 1] 2387 	ld (ATTRIB,sp),a 
      000EA9 7B 01            [ 1] 2388 	ld a,(TCHAR,sp)
      000EAB F7               [ 1] 2389 	ld (x),a 
      000EAC 5C               [ 1] 2390 	incw x 
      000EAD 7F               [ 1] 2391 	clr(x)
      000EAE 72 5C 00 01      [ 1] 2392 	inc in 
      000EB2 7B 02            [ 1] 2393 	ld a,(ATTRIB,sp)
      000EB4 AE 17 18         [ 2] 2394 	ldw x,#pad 
      000EB7                       2395 token_exit:
      000EB7                       2396 	_drop VSIZE 
      000EB7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EB9 81               [ 4] 2397 	ret
                                   2398 
                                   2399 
                                   2400 
                                   2401 ;------------------------------------
                                   2402 ; check if character in {'0'..'9'}
                                   2403 ; input:
                                   2404 ;    A  character to test
                                   2405 ; output:
                                   2406 ;    Carry  0 not digit | 1 digit
                                   2407 ;------------------------------------
      000EBA                       2408 is_digit:
      000EBA A1 30            [ 1] 2409 	cp a,#'0
      000EBC 25 03            [ 1] 2410 	jrc 1$
      000EBE A1 3A            [ 1] 2411     cp a,#'9+1
      000EC0 8C               [ 1] 2412 	ccf 
      000EC1 8C               [ 1] 2413 1$:	ccf 
      000EC2 81               [ 4] 2414     ret
                                   2415 
                                   2416 ;------------------------------------
                                   2417 ; convert alpha to uppercase
                                   2418 ; input:
                                   2419 ;    a  character to convert
                                   2420 ; output:
                                   2421 ;    a  uppercase character
                                   2422 ;------------------------------------
      000EC3                       2423 to_upper::
      000EC3 A1 61            [ 1] 2424 	cp a,#'a
      000EC5 2A 01            [ 1] 2425 	jrpl 1$
      000EC7 81               [ 4] 2426 0$:	ret
      000EC8 A1 7A            [ 1] 2427 1$: cp a,#'z	
      000ECA 22 FB            [ 1] 2428 	jrugt 0$
      000ECC A0 20            [ 1] 2429 	sub a,#32
      000ECE 81               [ 4] 2430 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2431 	
                                   2432 ;------------------------------------
                                   2433 ; convert pad content in integer
                                   2434 ; input:
                                   2435 ;    pad		.asciz to convert
                                   2436 ; output:
                                   2437 ;    acc24      int24_t
                                   2438 ;------------------------------------
                                   2439 	; local variables
                           000001  2440 	SIGN=1 ; 1 byte, 
                           000002  2441 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2442 	TEMP=3 ; 1 byte, temporary storage
                           000003  2443 	VSIZE=3 ; 3 bytes reserved for local storage
      000ECF                       2444 atoi24:
      000ECF 89               [ 2] 2445 	pushw x ;save x
      000ED0 52 03            [ 2] 2446 	sub sp,#VSIZE
                                   2447 	; acc24=0 
      000ED2 72 5F 00 08      [ 1] 2448 	clr acc24    
      000ED6 72 5F 00 09      [ 1] 2449 	clr acc16
      000EDA 72 5F 00 0A      [ 1] 2450 	clr acc8 
      000EDE C6 17 18         [ 1] 2451 	ld a, pad 
      000EE1 27 5A            [ 1] 2452 	jreq atoi_exit
      000EE3 0F 01            [ 1] 2453 	clr (SIGN,sp)
      000EE5 A6 0A            [ 1] 2454 	ld a,#10
      000EE7 6B 02            [ 1] 2455 	ld (BASE,sp),a ; default base decimal
      000EE9 AE 17 18         [ 2] 2456 	ldw x,#pad ; pointer to string to convert
      000EEC F6               [ 1] 2457 	ld a,(x)
      000EED 27 47            [ 1] 2458 	jreq 9$  ; completed if 0
      000EEF A1 2D            [ 1] 2459 	cp a,#'-
      000EF1 26 04            [ 1] 2460 	jrne 1$
      000EF3 03 01            [ 1] 2461 	cpl (SIGN,sp)
      000EF5 20 08            [ 2] 2462 	jra 2$
      000EF7 A1 24            [ 1] 2463 1$: cp a,#'$
      000EF9 26 06            [ 1] 2464 	jrne 3$
      000EFB A6 10            [ 1] 2465 	ld a,#16
      000EFD 6B 02            [ 1] 2466 	ld (BASE,sp),a
      000EFF 5C               [ 1] 2467 2$:	incw x
      000F00 F6               [ 1] 2468 	ld a,(x)
      000F01                       2469 3$:	
      000F01 A1 61            [ 1] 2470 	cp a,#'a
      000F03 2B 02            [ 1] 2471 	jrmi 4$
      000F05 A0 20            [ 1] 2472 	sub a,#32
      000F07 A1 30            [ 1] 2473 4$:	cp a,#'0
      000F09 2B 2B            [ 1] 2474 	jrmi 9$
      000F0B A0 30            [ 1] 2475 	sub a,#'0
      000F0D A1 0A            [ 1] 2476 	cp a,#10
      000F0F 2B 06            [ 1] 2477 	jrmi 5$
      000F11 A0 07            [ 1] 2478 	sub a,#7
      000F13 11 02            [ 1] 2479 	cp a,(BASE,sp)
      000F15 2A 1F            [ 1] 2480 	jrpl 9$
      000F17 6B 03            [ 1] 2481 5$:	ld (TEMP,sp),a
      000F19 7B 02            [ 1] 2482 	ld a,(BASE,sp)
      000F1B CD 0F 41         [ 4] 2483 	call mulu24_8
      000F1E 7B 03            [ 1] 2484 	ld a,(TEMP,sp)
      000F20 CB 00 0A         [ 1] 2485 	add a,acc24+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F23 C7 00 0A         [ 1] 2486 	ld acc24+2,a
      000F26 4F               [ 1] 2487 	clr a
      000F27 C9 00 09         [ 1] 2488 	adc a,acc24+1
      000F2A C7 00 09         [ 1] 2489 	ld acc24+1,a
      000F2D 4F               [ 1] 2490 	clr a
      000F2E C9 00 08         [ 1] 2491 	adc a,acc24
      000F31 C7 00 08         [ 1] 2492 	ld acc24,a
      000F34 20 C9            [ 2] 2493 	jra 2$
      000F36 0D 01            [ 1] 2494 9$:	tnz (SIGN,sp)
      000F38 27 03            [ 1] 2495     jreq atoi_exit
      000F3A CD 0A 64         [ 4] 2496     call neg_acc24
      000F3D                       2497 atoi_exit: 
      000F3D 5B 03            [ 2] 2498 	addw sp,#VSIZE
      000F3F 85               [ 2] 2499 	popw x ; restore x
      000F40 81               [ 4] 2500 	ret
                                   2501 
                                   2502 ;--------------------------------------
                                   2503 ; unsigned multiply uint24_t by uint8_t
                                   2504 ; use to convert numerical string to uint24_t
                                   2505 ; input:
                                   2506 ;	acc24	uint24_t 
                                   2507 ;   A		uint8_t
                                   2508 ; output:
                                   2509 ;   acc24   A*acc24
                                   2510 ;-------------------------------------
                                   2511 ; local variables offset  on sp
                           000003  2512 	U8   = 3   ; A pushed on stack
                           000002  2513 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2514 	OVFH = 1  ; multiplication overflow high byte
                           000003  2515 	VSIZE = 3
      000F41                       2516 mulu24_8:
      000F41 89               [ 2] 2517 	pushw x    ; save X
                                   2518 	; local variables
      000F42 88               [ 1] 2519 	push a     ; U8
      000F43 5F               [ 1] 2520 	clrw x     ; initialize overflow to 0
      000F44 89               [ 2] 2521 	pushw x    ; multiplication overflow
                                   2522 ; multiply low byte.
      000F45 C6 00 0A         [ 1] 2523 	ld a,acc24+2
      000F48 97               [ 1] 2524 	ld xl,a
      000F49 7B 03            [ 1] 2525 	ld a,(U8,sp)
      000F4B 42               [ 4] 2526 	mul x,a
      000F4C 9F               [ 1] 2527 	ld a,xl
      000F4D C7 00 0A         [ 1] 2528 	ld acc24+2,a
      000F50 9E               [ 1] 2529 	ld a, xh
      000F51 6B 02            [ 1] 2530 	ld (OVFL,sp),a
                                   2531 ; multipy middle byte
      000F53 C6 00 09         [ 1] 2532 	ld a,acc24+1
      000F56 97               [ 1] 2533 	ld xl,a
      000F57 7B 03            [ 1] 2534 	ld a, (U8,sp)
      000F59 42               [ 4] 2535 	mul x,a
                                   2536 ; add overflow to this partial product
      000F5A 72 FB 01         [ 2] 2537 	addw x,(OVFH,sp)
      000F5D 9F               [ 1] 2538 	ld a,xl
      000F5E C7 00 09         [ 1] 2539 	ld acc24+1,a
      000F61 4F               [ 1] 2540 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000F62 A9 00            [ 1] 2541 	adc a,#0
      000F64 6B 01            [ 1] 2542 	ld (OVFH,sp),a
      000F66 9E               [ 1] 2543 	ld a,xh
      000F67 6B 02            [ 1] 2544 	ld (OVFL,sp),a
                                   2545 ; multiply most signficant byte	
      000F69 C6 00 08         [ 1] 2546 	ld a, acc24
      000F6C 97               [ 1] 2547 	ld xl, a
      000F6D 7B 03            [ 1] 2548 	ld a, (U8,sp)
      000F6F 42               [ 4] 2549 	mul x,a
      000F70 72 FB 01         [ 2] 2550 	addw x, (OVFH,sp)
      000F73 9F               [ 1] 2551 	ld a, xl
      000F74 C7 00 08         [ 1] 2552 	ld acc24,a
      000F77 5B 03            [ 2] 2553     addw sp,#VSIZE
      000F79 85               [ 2] 2554 	popw x
      000F7A 81               [ 4] 2555 	ret
                                   2556 
                                   2557 ;------------------------------------
                                   2558 ; skip character c in text starting from 'in'
                                   2559 ; input:
                                   2560 ;	 y 		point to text buffer
                                   2561 ;    a 		character to skip
                                   2562 ; output:  
                                   2563 ;	'in' ajusted to new position
                                   2564 ;------------------------------------
                           000001  2565 	C = 1 ; local var
      000F7B                       2566 skip:
      000F7B 88               [ 1] 2567 	push a
      000F7C 91 D6 00         [ 4] 2568 1$:	ld a,([in.w],y)
      000F7F 27 0A            [ 1] 2569 	jreq 2$
      000F81 11 01            [ 1] 2570 	cp a,(C,sp)
      000F83 26 06            [ 1] 2571 	jrne 2$
      000F85 72 5C 00 01      [ 1] 2572 	inc in
      000F89 20 F1            [ 2] 2573 	jra 1$
      000F8B                       2574 2$: _drop 1 
      000F8B 5B 01            [ 2]    1     addw sp,#1 
      000F8D 81               [ 4] 2575 	ret
                                   2576 	
                                   2577 ;------------------------------
                                   2578 ; restore 'in.w' variable to 
                                   2579 ; its value before last call
                                   2580 ; to get_token.
                                   2581 ;------------------------------
      000F8E                       2582 unget_token:
      000F8E CE 00 11         [ 2] 2583 	ldw x,in.w.saved
      000F91 CF 00 00         [ 2] 2584 	ldw in.w,x 
      000F94 81               [ 4] 2585 	ret 
                                   2586 
                                   2587 
                                   2588 ;******************************
                                   2589 ;  data stack manipulation
                                   2590 ;*****************************
                                   2591 ;----------------------	
                                   2592 ; push X on data stack 
                                   2593 ; input:
                                   2594 ;	X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2595 ; output:
                                   2596 ;	none 
                                   2597 ;----------------------	
      000F95                       2598 dpush:
      000F95                       2599     _dp_down
      000F95 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000F99 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000F9D 72 CF 00 19      [ 5] 2600     ldw [dstkptr],x  
      000FA1 81               [ 4] 2601 	ret 
                                   2602 
                                   2603 
                                   2604 ;----------------------	
                                   2605 ; pop data stack in X 
                                   2606 ; input:
                                   2607 ;	none
                                   2608 ; output:
                                   2609 ;	X   
                                   2610 ;----------------------	
      000FA2                       2611 dpop: 
      000FA2 72 CE 00 19      [ 5] 2612     ldw x, [dstkptr]
      000FA6                       2613 	_dp_up
      000FA6 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FAA 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000FAE 81               [ 4] 2614 	ret 
                                   2615 
                                   2616 ;-----------------------------
                                   2617 ; swap top 2 elements of dstack
                                   2618 ;  {n1 n2 -- n2 n1 }
                                   2619 ;-----------------------------
      000FAF                       2620 dswap:
      000FAF 72 CE 00 19      [ 5] 2621 	ldw x,[dstkptr]
      000FB3 89               [ 2] 2622 	pushw x 
      000FB4 AE 00 02         [ 2] 2623 	ldw x,#2 
      000FB7 72 DE 00 19      [ 5] 2624 	ldw x,([dstkptr],x) 
      000FBB 72 CF 00 19      [ 5] 2625 	ldw [dstkptr],x 
      000FBF AE 00 02         [ 2] 2626 	ldw x,#2
      000FC2 90 85            [ 2] 2627 	popw y 
      000FC4 72 DF 00 19      [ 5] 2628 	ldw ([dstkptr],x),y 
      000FC8 81               [ 4] 2629 	ret
                                   2630 
                                   2631 ;-----------------------------
                                   2632 ; drop TOS 
                                   2633 ;-----------------------------
      000FC9                       2634 ddrop: ; { n -- }
      000FC9                       2635 	_dp_up 
      000FC9 72 5C 00 1A      [ 1]    1     inc dstkptr+1
      000FCD 72 5C 00 1A      [ 1]    2     inc dstkptr+1
      000FD1 81               [ 4] 2636 	ret
                                   2637 	
                                   2638 ;-----------------------------
                                   2639 ; duplicate TOS 
                                   2640 ;  dstack: { ix...n -- ix...n n }
                                   2641 ;-----------------------------
      000FD2                       2642 ddup:
      000FD2 72 CE 00 19      [ 5] 2643 	ldw x,[dstkptr]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FD6                       2644 	_dp_down
      000FD6 72 5A 00 1A      [ 1]    1     dec dstkptr+1 
      000FDA 72 5A 00 1A      [ 1]    2     dec dstkptr+1
      000FDE 72 CF 00 19      [ 5] 2645     ldw [dstkptr],x  
      000FE2 81               [ 4] 2646 	ret 
                                   2647 
                                   2648 
                                   2649 ;----------------------------------
                                   2650 ; pick value n from dstack 
                                   2651 ; put it on TOS
                                   2652 ; dstack: {ix,..,p -- ix,...,np }
                                   2653 ;-----------------------------------
      000FE3                       2654 dpick:
      000FE3 72 CE 00 19      [ 5] 2655 	ldw x,[dstkptr]
      000FE7 58               [ 2] 2656 	sllw x 
      000FE8 72 BB 00 19      [ 2] 2657 	addw x,dstkptr 
      000FEC FE               [ 2] 2658 	ldw x,(x)
      000FED 72 CF 00 19      [ 5] 2659 	ldw [dstkptr],x 
      000FF1 81               [ 4] 2660 	ret
                                   2661 
                                   2662 ;---------------------------
                                   2663 ;  fetch variable in X 
                                   2664 ;  dstack:{ addr -- value }
                                   2665 ;---------------------------
      000FF2                       2666 fetch:
      000FF2 72 CE 00 19      [ 5] 2667 	ldw x,[dstkptr]
      000FF6 FE               [ 2] 2668 	ldw x,(x)
      000FF7 72 CF 00 19      [ 5] 2669 	ldw [dstkptr],x
      000FFB 81               [ 4] 2670 	ret 
                                   2671 
                                   2672 ;----------------------------
                                   2673 ; store variable 
                                   2674 ; dstack: {addr value -- }
                                   2675 ;----------------------------
      000FFC                       2676 store:
      000FFC CD 0F A2         [ 4] 2677 	call dpop 
      000FFF 90 93            [ 1] 2678 	ldw y,x   ; y=value 
      001001 CD 0F A2         [ 4] 2679 	call dpop 
      001004 FF               [ 2] 2680 	ldw (x),y 
      001005 81               [ 4] 2681 	ret 
                                   2682 
                                   2683 ;---------------------------------
                                   2684 ; drop n elements from data stack 
                                   2685 ; input: 
                                   2686 ;   X 		n 
                                   2687 ; output:
                                   2688 ;   none 
                                   2689 ;-------------------------------------
      001006                       2690 ddrop_n:
      001006 90 89            [ 2] 2691 	pushw y 
      001008 90 CE 00 19      [ 2] 2692 	ldw y,dstkptr 
      00100C 58               [ 2] 2693 	sllw x 
      00100D 89               [ 2] 2694 	pushw x 
      00100E 72 F9 01         [ 2] 2695 	addw y,(1,sp)
      001011 90 CF 00 19      [ 2] 2696 	ldw dstkptr,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      001015 85               [ 2] 2697 	popw x 
      001016 90 85            [ 2] 2698 	popw y
      001018 81               [ 4] 2699 	ret 
                                   2700 
      001019 0A 64 73 74 61 63 6B  2701 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2702 ;----------------------------
                                   2703 ; print dstack content 
                                   2704 ;---------------------------
                           000001  2705 	XSAVE=1
                           000002  2706 	VSIZE=2
      001023                       2707 dots:
      001023                       2708 	_vars VSIZE 
      001023 52 02            [ 2]    1     sub sp,#VSIZE 
      001025 AE 10 19         [ 2] 2709 	ldw x,#dstk_prompt 
      001028 CD 01 B0         [ 4] 2710 	call puts
      00102B AE 17 7E         [ 2] 2711 	ldw x,#dstack_unf-CELL_SIZE
      00102E 35 0A 00 07      [ 1] 2712 	mov base,#10 
      001032 C3 00 19         [ 2] 2713 1$:	cpw x,dstkptr 
      001035 25 0D            [ 1] 2714 	jrult 4$ 
      001037 1F 01            [ 2] 2715 	ldw (XSAVE,sp),x
      001039 FE               [ 2] 2716 	ldw  x,(x)
      00103A CD 09 99         [ 4] 2717 	call print_int 
      00103D 1E 01            [ 2] 2718 	ldw x,(XSAVE,sp)
      00103F 1D 00 02         [ 2] 2719 	subw x,#CELL_SIZE 
      001042 20 EE            [ 2] 2720 	jra 1$ 
      001044 A6 0D            [ 1] 2721 4$: ld a,#CR 
      001046 CD 01 9E         [ 4] 2722 	call putc 
      001049                       2723 	_drop VSIZE
      001049 5B 02            [ 2]    1     addw sp,#VSIZE 
      00104B 4F               [ 1] 2724 	clr a 
      00104C 81               [ 4] 2725 	ret
                                   2726 
      00104D 0A 63 74 61 63 6B 3A  2727 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2728 ;--------------------------------
                                   2729 ; print cstack content
                                   2730 ;--------------------------------
                           000001  2731 	XSAVE=1
                           000002  2732 	VSIZE=2 
      001056                       2733 dotr:
      001056                       2734 	_vars VSIZE 
      001056 52 02            [ 2]    1     sub sp,#VSIZE 
      001058 AE 10 4D         [ 2] 2735 	ldw x,#cstk_prompt
      00105B CD 01 B0         [ 4] 2736 	call puts 
      00105E 96               [ 1] 2737 	ldw x,sp 
      00105F 1C 00 07         [ 2] 2738 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      001062 1F 01            [ 2] 2739 	ldw (XSAVE,sp),x  
      001064 AE 17 FE         [ 2] 2740 	ldw x,#RAM_SIZE-2
      001067 35 10 00 07      [ 1] 2741 	mov base,#16
      00106B                       2742 dotr_loop:
      00106B 13 01            [ 2] 2743 	cpw x,(XSAVE,sp)
      00106D 2B 0B            [ 1] 2744 	jrmi 9$
      00106F 89               [ 2] 2745 	pushw x  
      001070 FE               [ 2] 2746 	ldw x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001071 CD 09 99         [ 4] 2747 	call print_int 
      001074 85               [ 2] 2748 	popw x  
      001075 1D 00 02         [ 2] 2749 	subw x,#CELL_SIZE
      001078 20 F1            [ 2] 2750 	jra dotr_loop 
      00107A A6 0D            [ 1] 2751 9$:	ld a,#CR 
      00107C CD 01 9E         [ 4] 2752 	call putc 
      00107F                       2753 	_drop VSIZE 
      00107F 5B 02            [ 2]    1     addw sp,#VSIZE 
      001081 4F               [ 1] 2754 	clr a 
      001082 81               [ 4] 2755 	ret
                                   2756 
                                   2757 
                                   2758 ;--------------------------------
                                   2759 ;  add 2 integers
                                   2760 ;  input:
                                   2761 ;    N1     on cstack 
                                   2762 ;    N2     on cstack 
                                   2763 ;  output:
                                   2764 ;    X 		n2+n1 
                                   2765 ;--------------------------------
                                   2766 	;arugments on cstack 
      001083                       2767 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001083                       2768 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001083                       2769 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001083                       2770 add:
      001083 1E 05            [ 2] 2771 	ldw x ,(N2,sp)
      001085 72 FB 03         [ 2] 2772 	addw x,(N1,sp)
      001088 1F 03            [ 2] 2773 	ldw (N1,sp),x 
      00108A 81               [ 4] 2774 	ret 
                                   2775 
                                   2776 ;--------------------------------
                                   2777 ;  substract 2 ntegers
                                   2778 ;  input:
                                   2779 ;    N1     on cstack 
                                   2780 ;    N2     on cstack 
                                   2781 ;  output:
                                   2782 ;    X 		n2+n1 
                                   2783 ;--------------------------------
      00108B                       2784 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00108B                       2785 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      00108B                       2786 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00108B                       2787 substract:
      00108B 1E 05            [ 2] 2788 	ldw x,(N2,sp)
      00108D 72 F0 03         [ 2] 2789 	subw x,(N1,sp)
      001090 81               [ 4] 2790 	ret 
                                   2791 
                                   2792 ;-------------------------------------
                                   2793 ; multiply 2 integers
                                   2794 ; product overflow is ignored unless
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2795 ; MATH_OVF assembler flag is set to 1
                                   2796 ; input:
                                   2797 ;  	N1      on cstack
                                   2798 ;   N2 		on cstack 
                                   2799 ; output:
                                   2800 ;	X        N1*N2 
                                   2801 ;-------------------------------------
                                   2802 	;arguments 
      001091                       2803 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      001091                       2804 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      001091                       2805 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      001091                       2806 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      001091                       2807 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2808    ; local variables 
                           000001  2809 	SIGN=1
                           000002  2810 	PROD=2
                           000003  2811 	VSIZE=3
      001091                       2812 multiply:
      001091                       2813 	_vars VSIZE 
      001091 52 03            [ 2]    1     sub sp,#VSIZE 
      001093 0F 01            [ 1] 2814 	clr (SIGN,sp)
      001095 1E 06            [ 2] 2815 	ldw x,(N1_HB,sp)
      001097 9E               [ 1] 2816 	ld a,xh  
      001098 A5 80            [ 1] 2817 	bcp a,#0x80 
      00109A 27 05            [ 1] 2818 	jreq 2$
      00109C 03 01            [ 1] 2819 	cpl (SIGN,sp)
      00109E 50               [ 2] 2820 	negw x 
      00109F 1F 06            [ 2] 2821 	ldw (N1_HB,sp),x 
      0010A1 1E 08            [ 2] 2822 2$: ldw x,(N2_HB,sp)
      0010A3 9E               [ 1] 2823 	ld a,xh  
      0010A4 A5 80            [ 1] 2824 	bcp a,#0x80 
      0010A6 27 05            [ 1] 2825 	jreq 3$
      0010A8 03 01            [ 1] 2826 	cpl (SIGN,sp)
      0010AA 50               [ 2] 2827 	negw x 
      0010AB 1F 08            [ 2] 2828 	ldw (N2_HB,sp),x 
                                   2829 ; N1_LB * N2_LB 	
      0010AD 7B 07            [ 1] 2830 3$:	ld a,(N1_LB,sp)
      0010AF 97               [ 1] 2831 	ld xl,a 
      0010B0 7B 09            [ 1] 2832 	ld a,(N2_LB,sp) 
      0010B2 42               [ 4] 2833 	mul x,a 
                           000000  2834 .if MATH_OVF 	
                                   2835 	ld a,xh 
                                   2836 	bcp a,#0x80 
                                   2837 	jreq 4$ 
                                   2838 	ld a,#ERR_MATH_OVF 
                                   2839 	jp tb_error
                                   2840 .endif 	 
      0010B3 1F 02            [ 2] 2841 4$:	ldw (PROD,sp),x
                                   2842 ; N1_LB * N2_HB	 
      0010B5 7B 07            [ 1] 2843 	ld a,(N1_LB,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010B7 97               [ 1] 2844 	ld xl,a 
      0010B8 7B 08            [ 1] 2845 	ld a,(N2_HB,sp)
      0010BA 42               [ 4] 2846 	mul x,a
      0010BB 9F               [ 1] 2847 	ld a,xl 
      0010BC 1B 02            [ 1] 2848 	add a,(PROD,sp)
                           000000  2849 .if MATH_OVF 	
                                   2850 	bcp a,#0x80 
                                   2851 	jreq 5$ 
                                   2852 	ld a,#ERR_MATH_OVF 
                                   2853 	jp tb_error
                                   2854 .endif 	 
      0010BE 6B 02            [ 1] 2855 5$:	ld (PROD,sp),a 
                                   2856 ; N1_HB * N2_LB 
      0010C0 7B 06            [ 1] 2857 	ld a,(N1_HB,sp)
      0010C2 97               [ 1] 2858 	ld xl,a 
      0010C3 7B 09            [ 1] 2859 	ld a,(N2_LB,sp)
      0010C5 42               [ 4] 2860 	mul x,a 
      0010C6 9F               [ 1] 2861 	ld a,xl 
      0010C7 1B 02            [ 1] 2862 	add a,(PROD,sp)
                           000000  2863 .if MATH_OVF 	
                                   2864 	bcp a,#0x80 
                                   2865 	jreq 6$ 
                                   2866 	ld a,#ERR_MATH_OVF 
                                   2867 	jp tb_error
                                   2868 .endif 	 
      0010C9 6B 02            [ 1] 2869 6$:	ld (PROD,sp),a 
                                   2870 ; N1_HB * N2_HB 	
                                   2871 ; it is pointless to multiply N1_HB*N2_HB 
                                   2872 ; as this product is over 65535 or 0 
                                   2873 ;
                                   2874 ; sign adjust product
      0010CB 0D 01            [ 1] 2875 	tnz (SIGN,sp)
      0010CD 27 05            [ 1] 2876 	jreq 7$
      0010CF 1E 02            [ 2] 2877 	ldw x, (PROD,sp)
      0010D1 50               [ 2] 2878 	negw x
      0010D2 1F 02            [ 2] 2879 	ldw (PROD,sp),x  
      0010D4                       2880 7$: 
      0010D4 1E 02            [ 2] 2881 	ldw x,(PROD,sp) 
      0010D6                       2882 	_drop VSIZE 
      0010D6 5B 03            [ 2]    1     addw sp,#VSIZE 
      0010D8 81               [ 4] 2883 	ret
                                   2884 
                                   2885 ;----------------------------------
                                   2886 ;  euclidian divide n2/n1 
                                   2887 ; input:
                                   2888 ;    N2 	on cstack
                                   2889 ;    N1 	on cstack
                                   2890 ; output:
                                   2891 ;    X      n2/n1 
                                   2892 ;    Y      remainder 
                                   2893 ;----------------------------------
      0010D9                       2894 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      0010D9                       2895 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010D9                       2896 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2897 	; local variables
                           000001  2898 	SQUOT=1 ; sign quotient
                           000002  2899 	SDIVD=2 ; sign dividend  
                           000002  2900 	VSIZE=2
      0010D9                       2901 divide:
      0010D9                       2902 	_vars VSIZE 
      0010D9 52 02            [ 2]    1     sub sp,#VSIZE 
      0010DB 0F 01            [ 1] 2903 	clr (SQUOT,sp)
      0010DD 0F 02            [ 1] 2904 	clr (SDIVD,sp)
                                   2905 ; check for 0 divisor
      0010DF 1E 05            [ 2] 2906 	ldw x,(DIVISR,sp)
      0010E1 5D               [ 2] 2907 	tnzw x 
      0010E2 26 05            [ 1] 2908     jrne 0$
      0010E4 A6 04            [ 1] 2909 	ld a,#ERR_DIV0 
      0010E6 CC 07 16         [ 2] 2910 	jp tb_error 
                                   2911 ; check divisor sign 	
      0010E9 9E               [ 1] 2912 0$:	ld a,xh 
      0010EA A5 80            [ 1] 2913 	bcp a,#0x80 
      0010EC 27 03            [ 1] 2914 	jreq 1$
      0010EE 03 01            [ 1] 2915 	cpl (SQUOT,sp)
      0010F0 50               [ 2] 2916 	negw x 
      0010F1 1F 05            [ 2] 2917 1$:	ldw (DIVISR,sp),x
                                   2918 ; check dividend sign 	 
      0010F3 1E 07            [ 2] 2919     ldw x,(DIVIDND,sp)
      0010F5 9E               [ 1] 2920 	ld a,xh 
      0010F6 A5 80            [ 1] 2921 	bcp a,#0x80 
      0010F8 27 05            [ 1] 2922 	jreq 2$ 
      0010FA 03 01            [ 1] 2923 	cpl (SQUOT,sp)
      0010FC 03 02            [ 1] 2924 	cpl (SDIVD,sp)
      0010FE 50               [ 2] 2925 	negw x 
      0010FF 16 05            [ 2] 2926 2$:	ldw y,(DIVISR,sp)
      001101 65               [ 2] 2927 	divw x,y
      001102 90 CF 00 09      [ 2] 2928 	ldw acc16,y 
                                   2929 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      001106 0D 02            [ 1] 2930 	tnz (SDIVD,sp)
      001108 27 0B            [ 1] 2931 	jreq 7$
      00110A 90 5D            [ 2] 2932 	tnzw y 
      00110C 27 07            [ 1] 2933 	jreq 7$
      00110E 5C               [ 1] 2934 	incw x
      00110F 16 05            [ 2] 2935 	ldw y,(DIVISR,sp)
      001111 72 B2 00 09      [ 2] 2936 	subw y,acc16
      001115 0D 01            [ 1] 2937 7$: tnz (SQUOT,sp)
      001117 27 01            [ 1] 2938 	jreq 9$ 	 
      001119 50               [ 2] 2939 8$:	negw x 
      00111A                       2940 9$: 
      00111A                       2941 	_drop VSIZE 
      00111A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00111C 81               [ 4] 2942 	ret 
                                   2943 
                                   2944 
                                   2945 ;----------------------------------
                                   2946 ;  remainder resulting from euclidian 
                                   2947 ;  division of n2/n1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2948 ; input:
                                   2949 ;   N1 		cstack 
                                   2950 ;   N2      cstack
                                   2951 ; output:
                                   2952 ;   X       N2%N1 
                                   2953 ;----------------------------------
                           000003  2954 	N1=3
                           000005  2955 	N2=5
                           000004  2956 	VSIZE=4
      00111D                       2957 modulo:
      00111D 1E 03            [ 2] 2958 	Ldw x,(N1,sp)
      00111F 16 05            [ 2] 2959 	ldw y,(N2,sp)
      001121                       2960 	_vars VSIZE 
      001121 52 04            [ 2]    1     sub sp,#VSIZE 
      001123 1F 01            [ 2] 2961 	ldw (1,sp),x 
      001125 17 03            [ 2] 2962 	ldw (3,sp),y 
      001127 CD 10 D9         [ 4] 2963 	call divide 
      00112A 93               [ 1] 2964 	ldw x,y
      00112B                       2965 	_drop VSIZE 
      00112B 5B 04            [ 2]    1     addw sp,#VSIZE 
      00112D 81               [ 4] 2966 	ret 
                                   2967 
                                   2968 
                                   2969 ;----------------------------------
                                   2970 ; search in kword_dict command name
                                   2971 ;  from its execution address 
                                   2972 ; input:
                                   2973 ;   X       	execution address 
                                   2974 ; output:
                                   2975 ;   X 			cstr*  | 0 
                                   2976 ;--------------------------------
                           000001  2977 	XADR=1 
                           000003  2978 	LINK=3 
                           000004  2979 	VSIZE=4
      00112E                       2980 cmd_name:
      00112E                       2981 	_vars VSIZE 
      00112E 52 04            [ 2]    1     sub sp,#VSIZE 
      001130 72 5F 00 09      [ 1] 2982 	clr acc16 
      001134 1F 01            [ 2] 2983 	ldw (XADR,sp),x  
      001136 AE 21 38         [ 2] 2984 	ldw x,#kword_dict	
      001139 1F 03            [ 2] 2985 1$:	ldw (LINK,sp),x
      00113B E6 02            [ 1] 2986 	ld a,(2,x)
      00113D A4 0F            [ 1] 2987 	and a,#15 
      00113F C7 00 0A         [ 1] 2988 	ld acc8,a 
      001142 1C 00 03         [ 2] 2989 	addw x,#3
      001145 72 BB 00 09      [ 2] 2990 	addw x,acc16
      001149 FE               [ 2] 2991 	ldw x,(x) ; execution address 
      00114A 13 01            [ 2] 2992 	cpw x,(XADR,sp)
      00114C 27 0A            [ 1] 2993 	jreq 2$
      00114E 1E 03            [ 2] 2994 	ldw x,(LINK,sp)
      001150 FE               [ 2] 2995 	ldw x,(x) 
      001151 1D 00 02         [ 2] 2996 	subw x,#2  
      001154 26 E3            [ 1] 2997 	jrne 1$
      001156 20 05            [ 2] 2998 	jra 9$
      001158 1E 03            [ 2] 2999 2$: ldw x,(LINK,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00115A 1C 00 02         [ 2] 3000 	addw x,#2 	
      00115D                       3001 9$:	_drop VSIZE
      00115D 5B 04            [ 2]    1     addw sp,#VSIZE 
      00115F 81               [ 4] 3002 	ret
                                   3003 
                                   3004 
                                   3005 ;---------------------------------
                                   3006 ; input:
                                   3007 ;	X 		dictionary entry point 
                                   3008 ;  pad		.asciz name to search 
                                   3009 ; output:
                                   3010 ;  A 		TK_CMD|TK_FUNC|TK_NONE 
                                   3011 ;  X		execution address | 0 
                                   3012 ;---------------------------------
                           000001  3013 	NLEN=1 ; cmd length 
                           000002  3014 	YSAVE=2
                           000003  3015 	VSIZE=3 
      001160                       3016 search_dict:
      001160                       3017 	_vars VSIZE 
      001160 52 03            [ 2]    1     sub sp,#VSIZE 
      001162 90 93            [ 1] 3018 	ldw y,x 
      001164                       3019 search_next:	
      001164 90 F6            [ 1] 3020 	ld a,(y)
      001166 A4 0F            [ 1] 3021 	and a,#0xf 
      001168 6B 01            [ 1] 3022 	ld (NLEN,sp),a  
      00116A AE 17 18         [ 2] 3023 	ldw x,#pad 
      00116D 17 02            [ 2] 3024 	ldw (YSAVE,sp),y
      00116F 90 5C            [ 1] 3025 	incw y  
      001171                       3026 cp_loop:
      001171 F6               [ 1] 3027 	ld a,(x)
      001172 27 1E            [ 1] 3028 	jreq str_match 
      001174 0D 01            [ 1] 3029 	tnz (NLEN,sp)
      001176 27 0B            [ 1] 3030 	jreq no_match  
      001178 90 F1            [ 1] 3031 	cp a,(y)
      00117A 26 07            [ 1] 3032 	jrne no_match 
      00117C 90 5C            [ 1] 3033 	incw y 
      00117E 5C               [ 1] 3034 	incw x
      00117F 0A 01            [ 1] 3035 	dec (NLEN,sp)
      001181 20 EE            [ 2] 3036 	jra cp_loop 
      001183                       3037 no_match:
      001183 16 02            [ 2] 3038 	ldw y,(YSAVE,sp) 
      001185 72 A2 00 02      [ 2] 3039 	subw y,#2 ; move Y to link field
      001189 4B 00            [ 1] 3040 	push #TK_NONE 
      00118B 90 FE            [ 2] 3041 	ldw y,(y) ; next word link 
      00118D 84               [ 1] 3042 	pop a ; TK_NONE 
      00118E 27 24            [ 1] 3043 	jreq search_exit  ; not found  
                                   3044 ;try next 
      001190 20 D2            [ 2] 3045 	jra search_next
      001192                       3046 str_match:
      001192 16 02            [ 2] 3047 	ldw y,(YSAVE,sp)
      001194 90 F6            [ 1] 3048 	ld a,(y)
      001196 6B 01            [ 1] 3049 	ld (NLEN,sp),a ; needed to test bit 7 
      001198 A4 7F            [ 1] 3050 	and a,#0x7f 
                                   3051 ; move y to procedure address field 	
      00119A 4C               [ 1] 3052 	inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00119B C7 00 0A         [ 1] 3053 	ld acc8,a 
      00119E 72 5F 00 09      [ 1] 3054 	clr acc16 
      0011A2 72 B9 00 09      [ 2] 3055 	addw y,acc16 
      0011A6 90 FE            [ 2] 3056 	ldw y,(y) ; routine entry point 
      0011A8 7B 01            [ 1] 3057 	ld a,(NLEN,sp)
      0011AA A5 80            [ 1] 3058 	bcp a,#0x80 
      0011AC 27 04            [ 1] 3059 	jreq 1$
      0011AE A6 07            [ 1] 3060 	ld a,#TK_FUNC 
      0011B0 20 02            [ 2] 3061 	jra search_exit
      0011B2 A6 06            [ 1] 3062 1$: ld a,#TK_CMD 
      0011B4                       3063 search_exit: 
      0011B4 93               [ 1] 3064 	ldw x,y ; x=routine address 
      0011B5                       3065 	_drop VSIZE 	 
      0011B5 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011B7 81               [ 4] 3066 	ret 
                                   3067 
                                   3068 ;---------------------
                                   3069 ; check if next token
                                   3070 ;  is of expected type 
                                   3071 ; input:
                                   3072 ;   A 		 expected token attribute
                                   3073 ;  ouput:
                                   3074 ;   none     if fail call tb_error 
                                   3075 ;--------------------
      0011B8                       3076 expect:
      0011B8 88               [ 1] 3077 	push a 
      0011B9 CD 07 FA         [ 4] 3078 	call next_token 
      0011BC 11 01            [ 1] 3079 	cp a,(1,sp)
      0011BE 27 03            [ 1] 3080 	jreq 1$
      0011C0 CC 07 14         [ 2] 3081 	jp syntax_error
      0011C3 84               [ 1] 3082 1$: pop a 
      0011C4 81               [ 4] 3083 	ret 
                                   3084 
                                   3085 
                                   3086 ;-------------------------------
                                   3087 ; parse embedded BASIC routines 
                                   3088 ; arguments list.
                                   3089 ; arg_list::=  rel[','rel]*
                                   3090 ; all arguments are of integer type
                                   3091 ; input:
                                   3092 ;   none
                                   3093 ; output:
                                   3094 ;   A 			number of arguments pushed on dstack  
                                   3095 ;--------------------------------
                           000001  3096 	ARG_CNT=1 
      0011C5                       3097 arg_list:
      0011C5 4B 00            [ 1] 3098 	push #0  
      0011C7 CD 13 03         [ 4] 3099 1$: call relation
      0011CA A1 00            [ 1] 3100 	cp a,#TK_NONE 
      0011CC 27 19            [ 1] 3101 	jreq 5$
      0011CE A1 03            [ 1] 3102 	cp a,#TK_INTGR
      0011D0 26 12            [ 1] 3103 	jrne 4$
      0011D2 CD 0F 95         [ 4] 3104 3$: call dpush 
      0011D5 0C 01            [ 1] 3105     inc (ARG_CNT,sp)
      0011D7 CD 07 FA         [ 4] 3106 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011DA A1 00            [ 1] 3107 	cp a,#TK_NONE 
      0011DC 27 09            [ 1] 3108 	jreq 5$ 
      0011DE A1 0B            [ 1] 3109 	cp a,#TK_COMMA 
      0011E0 26 02            [ 1] 3110 	jrne 4$
      0011E2 20 E3            [ 2] 3111 	jra 1$ 
      0011E4 CD 0F 8E         [ 4] 3112 4$:	call unget_token 
      0011E7 84               [ 1] 3113 5$:	pop a 
      0011E8 81               [ 4] 3114 	ret 
                                   3115 
                                   3116 
                                   3117 
                                   3118 ;--------------------------------
                                   3119 ;   BASIC commnands 
                                   3120 ;--------------------------------
                                   3121 
                                   3122 ;--------------------------------
                                   3123 ;  arithmetic and relational 
                                   3124 ;  routines
                                   3125 ;  operators precedence
                                   3126 ;  highest to lowest
                                   3127 ;  operators on same row have 
                                   3128 ;  same precedence and are executed
                                   3129 ;  from left to right.
                                   3130 ;	'*','/','%'
                                   3131 ;   '-','+'
                                   3132 ;   '=','>','<','>=','<=','<>','><'
                                   3133 ;   '<>' and '><' are equivalent for not equal.
                                   3134 ;--------------------------------
                                   3135 
                                   3136 ;---------------------
                                   3137 ; return array element
                                   3138 ; address from @(expr)
                                   3139 ; input:
                                   3140 ;   A 		TK_ARRAY
                                   3141 ; output:
                                   3142 ;   A 		TK_INTGR
                                   3143 ;	X 		element address 
                                   3144 ;----------------------
      0011E9                       3145 get_array_element:
      0011E9 CD 0F C9         [ 4] 3146 	call ddrop 
      0011EC A6 09            [ 1] 3147 	ld a,#TK_LPAREN 
      0011EE CD 11 B8         [ 4] 3148 	call expect
      0011F1 CD 13 03         [ 4] 3149 	call relation 
      0011F4 A1 03            [ 1] 3150 	cp a,#TK_INTGR 
      0011F6 27 03            [ 1] 3151 	jreq 1$
      0011F8 CC 07 14         [ 2] 3152 	jp syntax_error
      0011FB 89               [ 2] 3153 1$: pushw x 
      0011FC A6 0A            [ 1] 3154 	ld a,#TK_RPAREN 
      0011FE CD 11 B8         [ 4] 3155 	call expect
                                   3156 	; check for bounds 
      001201 85               [ 2] 3157 	popw x   
      001202 C3 00 22         [ 2] 3158 	cpw x,array_size 
      001205 23 05            [ 2] 3159 	jrule 3$
                                   3160 ; bounds {1..array_size}	
      001207 A6 0A            [ 1] 3161 2$: ld a,#ERR_BAD_VALUE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001209 CC 07 16         [ 2] 3162 	jp tb_error 
      00120C 5D               [ 2] 3163 3$: tnzw  x
      00120D 27 F8            [ 1] 3164 	jreq 2$ 
      00120F 58               [ 2] 3165 	sllw x 
      001210 89               [ 2] 3166 	pushw x 
      001211 CE 00 20         [ 2] 3167 	ldw x,array_addr  
      001214 72 F0 01         [ 2] 3168 	subw x,(1,sp)
      001217                       3169 	_drop 2   
      001217 5B 02            [ 2]    1     addw sp,#2 
      001219 A6 03            [ 1] 3170 	ld a,#TK_INTGR
      00121B 81               [ 4] 3171 	ret 
                                   3172 
                                   3173 ;***********************************
                                   3174 ;   expression parse,execute 
                                   3175 ;***********************************
                                   3176 ;-----------------------------------
                                   3177 ; factor ::= ['+'|'-'|e] var | @ |
                                   3178 ;			 integer | function |
                                   3179 ;			 '('relation')' 
                                   3180 ; output:
                                   3181 ;   A    token attribute 
                                   3182 ;   X 	 integer
                                   3183 ; ---------------------------------
                           000001  3184 	NEG=1
                           000001  3185 	VSIZE=1
      00121C                       3186 factor:
      00121C                       3187 	_vars VSIZE 
      00121C 52 01            [ 2]    1     sub sp,#VSIZE 
      00121E CD 07 FA         [ 4] 3188 	call next_token
      001221 A1 02            [ 1] 3189 	cp a,#CMD_END 
      001223 2B 4A            [ 1] 3190 	jrmi 20$
      001225 6B 01            [ 1] 3191 1$:	ld (NEG,sp),a 
      001227 A4 30            [ 1] 3192 	and a,#TK_GRP_MASK
      001229 A1 10            [ 1] 3193 	cp a,#TK_GRP_ADD 
      00122B 27 04            [ 1] 3194 	jreq 2$
      00122D 7B 01            [ 1] 3195 	ld a,(NEG,sp)
      00122F 20 03            [ 2] 3196 	jra 4$  
      001231                       3197 2$:	
      001231 CD 07 FA         [ 4] 3198 	call next_token 
      001234                       3199 4$:	
      001234 A1 07            [ 1] 3200 	cp a,#TK_FUNC 
      001236 26 03            [ 1] 3201 	jrne 5$ 
      001238 FD               [ 4] 3202 	call (x) 
      001239 20 2B            [ 2] 3203 	jra 18$ 
      00123B                       3204 5$:
      00123B A1 03            [ 1] 3205 	cp a,#TK_INTGR
      00123D 26 02            [ 1] 3206 	jrne 6$
      00123F 20 25            [ 2] 3207 	jra 18$
      001241                       3208 6$:
      001241 A1 05            [ 1] 3209 	cp a,#TK_ARRAY
      001243 26 06            [ 1] 3210 	jrne 10$
      001245 CD 11 E9         [ 4] 3211 	call get_array_element
      001248 FE               [ 2] 3212 	ldw x,(x)
      001249 20 1B            [ 2] 3213 	jra 18$ 
      00124B                       3214 10$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00124B A1 04            [ 1] 3215 	cp a,#TK_VAR 
      00124D 26 03            [ 1] 3216 	jrne 12$
      00124F FE               [ 2] 3217 	ldw x,(x)
      001250 20 14            [ 2] 3218 	jra 18$
      001252                       3219 12$:			
      001252 A1 09            [ 1] 3220 	cp a,#TK_LPAREN
      001254 26 0A            [ 1] 3221 	jrne 16$
      001256 CD 13 03         [ 4] 3222 	call relation
      001259 A6 0A            [ 1] 3223 	ld a,#TK_RPAREN 
      00125B CD 11 B8         [ 4] 3224 	call expect
      00125E 20 06            [ 2] 3225 	jra 18$	
      001260                       3226 16$:
      001260 CD 0F 8E         [ 4] 3227 	call unget_token
      001263 4F               [ 1] 3228 	clr a 
      001264 20 09            [ 2] 3229 	jra 20$ 
      001266                       3230 18$: 
      001266 A6 11            [ 1] 3231 	ld a,#TK_MINUS 
      001268 11 01            [ 1] 3232 	cp a,(NEG,sp)
      00126A 26 01            [ 1] 3233 	jrne 19$
      00126C 50               [ 2] 3234 	negw x
      00126D                       3235 19$:
      00126D A6 03            [ 1] 3236 	ld a,#TK_INTGR
      00126F                       3237 20$:
      00126F                       3238 	_drop VSIZE
      00126F 5B 01            [ 2]    1     addw sp,#VSIZE 
      001271 81               [ 4] 3239 	ret
                                   3240 
                                   3241 ;-----------------------------------
                                   3242 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3243 ; output:
                                   3244 ;   A    	token attribute 
                                   3245 ;	X		integer
                                   3246 ;-----------------------------------
                           000001  3247 	N1=1
                           000003  3248 	N2=3
                           000005  3249 	MULOP=5
                           000005  3250 	VSIZE=5
      001272                       3251 term:
      001272                       3252 	_vars VSIZE
      001272 52 05            [ 2]    1     sub sp,#VSIZE 
      001274 CD 12 1C         [ 4] 3253 	call factor
      001277 A1 02            [ 1] 3254 	cp a,#CMD_END
      001279 2B 41            [ 1] 3255 	jrmi term_exit
      00127B                       3256 term01:	 ; check for  operator 
      00127B 1F 03            [ 2] 3257 	ldw (N2,sp),x  ; save first factor 
      00127D CD 07 FA         [ 4] 3258 	call next_token
      001280 A1 02            [ 1] 3259 	cp a,#2
      001282 2B 34            [ 1] 3260 	jrmi 9$
      001284 6B 05            [ 1] 3261 0$:	ld (MULOP,sp),a
      001286 A4 30            [ 1] 3262 	and a,#TK_GRP_MASK
      001288 A1 20            [ 1] 3263 	cp a,#TK_GRP_MULT
      00128A 27 07            [ 1] 3264 	jreq 1$
      00128C 7B 05            [ 1] 3265 	ld a,(MULOP,sp) 
      00128E CD 0F 8E         [ 4] 3266 	call unget_token 
      001291 20 25            [ 2] 3267 	jra 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001293                       3268 1$:	; got *|/|%
      001293 CD 12 1C         [ 4] 3269 	call factor
      001296 A1 03            [ 1] 3270 	cp a,#TK_INTGR
      001298 27 03            [ 1] 3271 	jreq 2$ 
      00129A CC 07 14         [ 2] 3272 	jp syntax_error
      00129D 1F 01            [ 2] 3273 2$:	ldw (N1,sp),x  
      00129F 7B 05            [ 1] 3274 	ld a,(MULOP,sp) 
      0012A1 A1 20            [ 1] 3275 	cp a,#TK_MULT 
      0012A3 26 05            [ 1] 3276 	jrne 3$
      0012A5 CD 10 91         [ 4] 3277 	call multiply 
      0012A8 20 D1            [ 2] 3278 	jra term01
      0012AA A1 21            [ 1] 3279 3$: cp a,#TK_DIV 
      0012AC 26 05            [ 1] 3280 	jrne 4$ 
      0012AE CD 10 D9         [ 4] 3281 	call divide 
      0012B1 20 C8            [ 2] 3282 	jra term01 
      0012B3 CD 11 1D         [ 4] 3283 4$: call modulo
      0012B6 20 C3            [ 2] 3284 	jra term01 
      0012B8 1E 03            [ 2] 3285 9$: ldw x,(N2,sp)  
      0012BA A6 03            [ 1] 3286 	ld a,#TK_INTGR 	
      0012BC                       3287 term_exit:
      0012BC                       3288 	_drop VSIZE 
      0012BC 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012BE 81               [ 4] 3289 	ret 
                                   3290 
                                   3291 ;-------------------------------
                                   3292 ;  expr ::= term [['+'|'-'] term]*
                                   3293 ;  result range {-32768..32767}
                                   3294 ;  output:
                                   3295 ;   A    token attribute 
                                   3296 ;   X	 integer   
                                   3297 ;-------------------------------
                           000001  3298 	N1=1 
                           000003  3299 	N2=3
                           000005  3300 	OP=5 
                           000005  3301 	VSIZE=5 
      0012BF                       3302 expression:
      0012BF                       3303 	_vars VSIZE 
      0012BF 52 05            [ 2]    1     sub sp,#VSIZE 
      0012C1 CD 12 72         [ 4] 3304 	call term
      0012C4 A1 02            [ 1] 3305 	cp a,#CMD_END 
      0012C6 2B 38            [ 1] 3306 	jrmi expr_exit 
      0012C8 1F 03            [ 2] 3307 0$:	ldw (N2,sp),x 
      0012CA CD 07 FA         [ 4] 3308 	call next_token
      0012CD A1 02            [ 1] 3309 	cp a,#2
      0012CF 2B 2B            [ 1] 3310 	jrmi 9$ 
      0012D1 6B 05            [ 1] 3311 1$:	ld (OP,sp),a  
      0012D3 A4 30            [ 1] 3312 	and a,#TK_GRP_MASK
      0012D5 A1 10            [ 1] 3313 	cp a,#TK_GRP_ADD 
      0012D7 27 07            [ 1] 3314 	jreq 2$ 
      0012D9 7B 05            [ 1] 3315 	ld a,(OP,sp)
      0012DB CD 0F 8E         [ 4] 3316 	call unget_token
      0012DE 20 1C            [ 2] 3317 	jra 9$
      0012E0                       3318 2$: 
      0012E0 CD 12 72         [ 4] 3319 	call term
      0012E3 A1 03            [ 1] 3320 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012E5 27 03            [ 1] 3321 	jreq 3$
      0012E7 CC 07 14         [ 2] 3322 	jp syntax_error
      0012EA 1F 01            [ 2] 3323 3$:	ldw (N1,sp),x 
      0012EC 7B 05            [ 1] 3324 	ld a,(OP,sp)
      0012EE A1 10            [ 1] 3325 	cp a,#TK_PLUS 
      0012F0 26 05            [ 1] 3326 	jrne 4$
      0012F2 CD 10 83         [ 4] 3327 	call add 
      0012F5 20 D1            [ 2] 3328 	jra 0$ 
      0012F7 CD 10 8B         [ 4] 3329 4$:	call substract
      0012FA 20 CC            [ 2] 3330 	jra 0$
      0012FC 1E 03            [ 2] 3331 9$: ldw x,(N2,sp)
      0012FE A6 03            [ 1] 3332 	ld a,#TK_INTGR	
      001300                       3333 expr_exit:
      001300                       3334 	_drop VSIZE 
      001300 5B 05            [ 2]    1     addw sp,#VSIZE 
      001302 81               [ 4] 3335 	ret 
                                   3336 
                                   3337 ;---------------------------------------------
                                   3338 ; rel ::= expr rel_op expr
                                   3339 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3340 ;  relation return 1 | 0  for true | false 
                                   3341 ;  output:
                                   3342 ;    A 		token attribute  
                                   3343 ;	 X		1|0
                                   3344 ;---------------------------------------------
                           000001  3345 	N1=1
                           000003  3346 	N2=3
                           000005  3347 	RELOP=5
                           000005  3348 	VSIZE=5 
      001303                       3349 relation: 
      001303                       3350 	_vars VSIZE
      001303 52 05            [ 2]    1     sub sp,#VSIZE 
      001305 CD 12 BF         [ 4] 3351 	call expression
      001308 A1 02            [ 1] 3352 	cp a,#CMD_END  
      00130A 2B 4B            [ 1] 3353 	jrmi rel_exit 
                                   3354 	; expect rel_op or leave 
      00130C 1F 03            [ 2] 3355 	ldw (N2,sp),x 
      00130E CD 07 FA         [ 4] 3356 	call next_token 
      001311 A1 02            [ 1] 3357 	cp a,#2
      001313 2B 3E            [ 1] 3358 	jrmi 9$
      001315                       3359 1$:	
      001315 6B 05            [ 1] 3360 	ld (RELOP,sp),a 
      001317 A4 30            [ 1] 3361 	and a,#TK_GRP_MASK
      001319 A1 30            [ 1] 3362 	cp a,#TK_GRP_RELOP 
      00131B 27 07            [ 1] 3363 	jreq 2$
      00131D 7B 05            [ 1] 3364 	ld a,(RELOP,sp)
      00131F CD 0F 8E         [ 4] 3365 	call unget_token  
      001322 20 2F            [ 2] 3366 	jra 9$
      001324                       3367 2$:	; expect another expression or error 
      001324 CD 12 BF         [ 4] 3368 	call expression
      001327 A1 03            [ 1] 3369 	cp a,#TK_INTGR 
      001329 27 03            [ 1] 3370 	jreq 3$
      00132B CC 07 14         [ 2] 3371 	jp syntax_error 
      00132E 1F 01            [ 2] 3372 3$:	ldw (N1,sp),x 
      001330 CD 10 8B         [ 4] 3373 	call substract
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001333 26 06            [ 1] 3374 	jrne 4$
      001335 35 02 00 0A      [ 1] 3375 	mov acc8,#2 ; n1==n2
      001339 20 0C            [ 2] 3376 	jra 6$ 
      00133B                       3377 4$: 
      00133B 2C 06            [ 1] 3378 	jrsgt 5$  
      00133D 35 04 00 0A      [ 1] 3379 	mov acc8,#4 ; n1<2 
      001341 20 04            [ 2] 3380 	jra 6$
      001343                       3381 5$:
      001343 35 01 00 0A      [ 1] 3382 	mov acc8,#1 ; n1>n2 
      001347                       3383 6$:
      001347 5F               [ 1] 3384 	clrw x 
      001348 C6 00 0A         [ 1] 3385 	ld a, acc8  
      00134B 14 05            [ 1] 3386 	and a,(RELOP,sp)
      00134D 4D               [ 1] 3387 	tnz a 
      00134E 27 05            [ 1] 3388 	jreq 10$
      001350 5C               [ 1] 3389 	incw x 
      001351                       3390 7$:	 
      001351 20 02            [ 2] 3391 	jra 10$  	
      001353 1E 03            [ 2] 3392 9$: ldw x,(N2,sp)
      001355                       3393 10$:
      001355 A6 03            [ 1] 3394 	ld a,#TK_INTGR
      001357                       3395 rel_exit: 	 
      001357                       3396 	_drop VSIZE
      001357 5B 05            [ 2]    1     addw sp,#VSIZE 
      001359 81               [ 4] 3397 	ret 
                                   3398 
                                   3399 ;--------------------------------
                                   3400 ; BASIC: SHOW 
                                   3401 ;  show content of dstack,cstack
                                   3402 ;--------------------------------
      00135A                       3403 show:
      00135A C6 00 07         [ 1] 3404 	ld a,base 
      00135D 88               [ 1] 3405 	push a 
      00135E CD 10 23         [ 4] 3406 	call dots
      001361 CD 10 56         [ 4] 3407 	call dotr 
      001364 84               [ 1] 3408 	pop a 
      001365 C7 00 07         [ 1] 3409 	ld base,a 
      001368 4F               [ 1] 3410 	clr a 
      001369 81               [ 4] 3411 	ret
                                   3412 
                                   3413 ;--------------------------------------------
                                   3414 ; BASIC: HEX 
                                   3415 ; select hexadecimal base for integer print
                                   3416 ;---------------------------------------------
      00136A                       3417 hex_base:
      00136A 35 10 00 07      [ 1] 3418 	mov base,#16 
      00136E 81               [ 4] 3419 	ret 
                                   3420 
                                   3421 ;--------------------------------------------
                                   3422 ; BASIC: DEC 
                                   3423 ; select decimal base for integer print
                                   3424 ;---------------------------------------------
      00136F                       3425 dec_base:
      00136F 35 0A 00 07      [ 1] 3426 	mov base,#10
      001373 81               [ 4] 3427 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3428 
                                   3429 ;------------------------
                                   3430 ; BASIC: SIZE 
                                   3431 ; return free size in text area
                                   3432 ; output:
                                   3433 ;   A 		TK_INTGR
                                   3434 ;   X 	    size integer
                                   3435 ;--------------------------
      001374                       3436 size:
      001374 AE 16 C8         [ 2] 3437 	ldw x,#tib 
      001377 72 B0 00 1D      [ 2] 3438 	subw x,txtend 
      00137B A6 03            [ 1] 3439 	ld a,#TK_INTGR
      00137D 81               [ 4] 3440 	ret 
                                   3441 
                                   3442 
                                   3443 ;------------------------
                                   3444 ; BASIC: UBOUND  
                                   3445 ; return array variable size 
                                   3446 ; output:
                                   3447 ;   A 		TK_INTGR
                                   3448 ;   X 	    array size 
                                   3449 ;--------------------------
      00137E                       3450 ubound:
      00137E AE 16 C8         [ 2] 3451 	ldw x,#tib
      001381 72 B0 00 1D      [ 2] 3452 	subw x,txtend 
      001385 54               [ 2] 3453 	srlw x 
      001386 CF 00 22         [ 2] 3454 	ldw array_size,x
      001389 A6 03            [ 1] 3455 	ld a,#TK_INTGR
      00138B 81               [ 4] 3456 	ret 
                                   3457 
                                   3458 ;-----------------------------
                                   3459 ; BASIC: LET var=expr 
                                   3460 ; variable assignement 
                                   3461 ; output:
                                   3462 ;   A 		TK_NONE 
                                   3463 ;-----------------------------
      00138C                       3464 let:
      00138C CD 07 FA         [ 4] 3465 	call next_token 
      00138F A1 04            [ 1] 3466 	cp a,#TK_VAR 
      001391 27 03            [ 1] 3467 	jreq let02
      001393 CC 07 14         [ 2] 3468 	jp syntax_error
      001396                       3469 let02:
      001396 CD 0F 95         [ 4] 3470 	call dpush 
      001399 CD 07 FA         [ 4] 3471 	call next_token 
      00139C A1 32            [ 1] 3472 	cp a,#TK_EQUAL
      00139E 27 03            [ 1] 3473 	jreq 1$
      0013A0 CC 07 14         [ 2] 3474 	jp syntax_error
      0013A3                       3475 1$:	
      0013A3 CD 13 03         [ 4] 3476 	call relation   
      0013A6 A1 03            [ 1] 3477 	cp a,#TK_INTGR 
      0013A8 27 03            [ 1] 3478 	jreq 2$
      0013AA CC 07 14         [ 2] 3479 	jp syntax_error
      0013AD                       3480 2$:	
      0013AD 90 93            [ 1] 3481 	ldw y,x 
      0013AF CD 0F A2         [ 4] 3482 	call dpop  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013B2 FF               [ 2] 3483 	ldw (x),y   
      0013B3 81               [ 4] 3484 	ret 
                                   3485 
                                   3486 ;----------------------------
                                   3487 ; BASIC: LIST [[start][,end]]
                                   3488 ; list program lines 
                                   3489 ; form start to end 
                                   3490 ; if empty argument list then 
                                   3491 ; list all.
                                   3492 ;----------------------------
                           000001  3493 	FIRST=1
                           000003  3494 	LAST=3 
                           000005  3495 	LN_PTR=5
                           000006  3496 	VSIZE=6 
      0013B4                       3497 list:
      0013B4                       3498 	_vars VSIZE
      0013B4 52 06            [ 2]    1     sub sp,#VSIZE 
      0013B6 CE 00 1B         [ 2] 3499 	ldw x,txtbgn 
      0013B9 C3 00 1D         [ 2] 3500 	cpw x,txtend 
      0013BC 2B 03            [ 1] 3501 	jrmi 1$
      0013BE CC 14 34         [ 2] 3502 	jp list_exit ; nothing to list 
      0013C1 1F 05            [ 2] 3503 1$:	ldw (LN_PTR,sp),x 
      0013C3 FE               [ 2] 3504 	ldw x,(x) 
      0013C4 1F 01            [ 2] 3505 	ldw (FIRST,sp),x ; list from first line 
      0013C6 AE 7F FF         [ 2] 3506 	ldw x,#0x7fff ; biggest line number 
      0013C9 1F 03            [ 2] 3507 	ldw (LAST,sp),x 
      0013CB CD 11 C5         [ 4] 3508 	call arg_list
      0013CE 4D               [ 1] 3509 	tnz a
      0013CF 27 3F            [ 1] 3510 	jreq list_start 
      0013D1 A1 02            [ 1] 3511 	cp a,#2 
      0013D3 27 07            [ 1] 3512 	jreq 4$
      0013D5 A1 01            [ 1] 3513 	cp a,#1 
      0013D7 27 06            [ 1] 3514 	jreq first_line 
      0013D9 CC 07 14         [ 2] 3515 	jp syntax_error 
      0013DC CD 0F AF         [ 4] 3516 4$:	call dswap
      0013DF                       3517 first_line:
      0013DF CD 0F A2         [ 4] 3518 	call dpop 
      0013E2 1F 01            [ 2] 3519 	ldw (FIRST,sp),x 
      0013E4 A1 01            [ 1] 3520 	cp a,#1 
      0013E6 27 05            [ 1] 3521 	jreq lines_skip 	
      0013E8                       3522 last_line:
      0013E8 CD 0F A2         [ 4] 3523 	call dpop 
      0013EB 1F 03            [ 2] 3524 	ldw (LAST,sp),x 
      0013ED                       3525 lines_skip:
      0013ED CE 00 1B         [ 2] 3526 	ldw x,txtbgn
      0013F0 1F 05            [ 2] 3527 2$:	ldw (LN_PTR,sp),x 
      0013F2 C3 00 1D         [ 2] 3528 	cpw x,txtend 
      0013F5 2A 3D            [ 1] 3529 	jrpl list_exit 
      0013F7 FE               [ 2] 3530 	ldw x,(x) ;lineno 
      0013F8 13 01            [ 2] 3531 	cpw x,(FIRST,sp)
      0013FA 2A 14            [ 1] 3532 	jrpl list_start 
      0013FC 1E 05            [ 2] 3533 	ldw x,(LN_PTR,sp) 
      0013FE 1C 00 02         [ 2] 3534 	addw x,#2 
      001401 F6               [ 1] 3535 	ld a,(x)
      001402 5C               [ 1] 3536 	incw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001403 C7 00 0A         [ 1] 3537 	ld acc8,a 
      001406 72 5F 00 09      [ 1] 3538 	clr acc16 
      00140A 72 BB 00 09      [ 2] 3539 	addw x,acc16
      00140E 20 E0            [ 2] 3540 	jra 2$ 
                                   3541 ; print loop
      001410                       3542 list_start:
      001410 1E 05            [ 2] 3543 	ldw x,(LN_PTR,sp)
      001412                       3544 3$:	
      001412 CD 14 87         [ 4] 3545 	call prt_basic_line
      001415 1E 05            [ 2] 3546 	ldw x,(LN_PTR,sp)
      001417 E6 02            [ 1] 3547 	ld a,(2,x)
      001419 C7 00 0A         [ 1] 3548 	ld acc8,a 
      00141C 72 5F 00 09      [ 1] 3549 	clr acc16 
      001420 72 BB 00 09      [ 2] 3550 	addw x,acc16
      001424 C3 00 1D         [ 2] 3551 	cpw x,txtend 
      001427 2A 0B            [ 1] 3552 	jrpl list_exit
      001429 1F 05            [ 2] 3553 	ldw (LN_PTR,sp),x
      00142B FE               [ 2] 3554 	ldw x,(x)
      00142C 13 03            [ 2] 3555 	cpw x,(LAST,sp)  
      00142E 2C 04            [ 1] 3556 	jrsgt list_exit 
      001430 1E 05            [ 2] 3557 	ldw x,(LN_PTR,sp)
      001432 20 DE            [ 2] 3558 	jra 3$
      001434                       3559 list_exit:
      001434                       3560 	_drop VSIZE 
      001434 5B 06            [ 2]    1     addw sp,#VSIZE 
      001436 81               [ 4] 3561 	ret
                                   3562 
                                   3563 ;-------------------------
                                   3564 ; print counted string 
                                   3565 ; input:
                                   3566 ;   X 		address of string
                                   3567 ;--------------------------
      001437                       3568 prt_cmd_name:
      001437 F6               [ 1] 3569 	ld a,(x)
      001438 5C               [ 1] 3570 	incw x
      001439 A4 0F            [ 1] 3571 	and a,#15  
      00143B 88               [ 1] 3572 	push a 
      00143C 0D 01            [ 1] 3573 1$: tnz (1,sp) 
      00143E 27 09            [ 1] 3574 	jreq 9$
      001440 F6               [ 1] 3575 	ld a,(x)
      001441 CD 01 9E         [ 4] 3576 	call putc 
      001444 5C               [ 1] 3577 	incw x
      001445 0A 01            [ 1] 3578 	dec (1,sp)	 
      001447 20 F3            [ 2] 3579 	jra 1$
      001449 84               [ 1] 3580 9$: pop a 
      00144A 81               [ 4] 3581 	ret	
                                   3582 
                                   3583 ;--------------------------
                                   3584 ; print TK_QSTR
                                   3585 ; converting control character
                                   3586 ; to backslash sequence
                                   3587 ; input:
                                   3588 ;   X        char *
                                   3589 ;-----------------------------
      00144B                       3590 prt_quote:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00144B A6 22            [ 1] 3591 	ld a,#'"
      00144D CD 01 9E         [ 4] 3592 	call putc 
      001450 F6               [ 1] 3593 1$:	ld a,(x)
      001451 27 2D            [ 1] 3594 	jreq 9$
      001453 5C               [ 1] 3595 	incw x 
      001454 A1 20            [ 1] 3596 	cp a,#SPACE 
      001456 25 0C            [ 1] 3597 	jrult 3$
      001458 CD 01 9E         [ 4] 3598 	call putc
      00145B A1 5C            [ 1] 3599 	cp a,#'\ 
      00145D 26 F1            [ 1] 3600 	jrne 1$ 
      00145F                       3601 2$:
      00145F CD 01 9E         [ 4] 3602 	call putc 
      001462 20 EC            [ 2] 3603 	jra 1$
      001464 88               [ 1] 3604 3$: push a 
      001465 A6 5C            [ 1] 3605 	ld a,#'\
      001467 CD 01 9E         [ 4] 3606 	call putc 
      00146A 84               [ 1] 3607 	pop a 
      00146B A0 07            [ 1] 3608 	sub a,#7
      00146D C7 00 0A         [ 1] 3609 	ld acc8,a 
      001470 72 5F 00 09      [ 1] 3610 	clr acc16
      001474 90 AE 0C 5F      [ 2] 3611 	ldw y,#escaped 
      001478 72 B9 00 09      [ 2] 3612 	addw y,acc16 
      00147C 90 F6            [ 1] 3613 	ld a,(y)
      00147E 20 DF            [ 2] 3614 	jra 2$
      001480 A6 22            [ 1] 3615 9$: ld a,#'"
      001482 CD 01 9E         [ 4] 3616 	call putc 
      001485 5C               [ 1] 3617 	incw x 
      001486 81               [ 4] 3618 	ret
                                   3619 
                                   3620 
                                   3621 ;--------------------------
                                   3622 ; decompile line from token list 
                                   3623 ; input:
                                   3624 ;   X 		pointer at line
                                   3625 ; output:
                                   3626 ;   none 
                                   3627 ;--------------------------	
                           000001  3628 	BASE_SAV=1
                           000002  3629 	WIDTH_SAV=2
                           000003  3630 	XSAVE=3
                           000005  3631 	LLEN=5
                           000005  3632 	VSIZE=5 
      001487                       3633 prt_basic_line:
      001487                       3634 	_vars VSIZE 
      001487 52 05            [ 2]    1     sub sp,#VSIZE 
      001489 C6 00 07         [ 1] 3635 	ld a,base
      00148C 6B 01            [ 1] 3636 	ld (BASE_SAV,sp),a  
      00148E C6 00 25         [ 1] 3637 	ld a,tab_width 
      001491 6B 02            [ 1] 3638 	ld (WIDTH_SAV,sp),a 
      001493 CF 00 14         [ 2] 3639 	ldw ptr16,x
      001496 FE               [ 2] 3640 	ldw x,(x)
      001497 35 0A 00 07      [ 1] 3641 	mov base,#10
      00149B 35 05 00 25      [ 1] 3642 	mov tab_width,#5
      00149F CD 09 99         [ 4] 3643 	call print_int ; print line number 
      0014A2 A6 20            [ 1] 3644 	ld a,#SPACE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014A4 CD 01 9E         [ 4] 3645 	call putc 
      0014A7 72 5F 00 25      [ 1] 3646 	clr tab_width
      0014AB AE 00 02         [ 2] 3647 	ldw x,#2
      0014AE 72 D6 00 14      [ 4] 3648 	ld a,([ptr16],x)
      0014B2 6B 05            [ 1] 3649 	ld (LLEN,sp),a 
      0014B4 5C               [ 1] 3650 	incw x
      0014B5 9F               [ 1] 3651 1$:	ld a,xl 
      0014B6 11 05            [ 1] 3652 	cp a,(LLEN,sp)
      0014B8 2B 03            [ 1] 3653 	jrmi 19$
      0014BA CC 15 C4         [ 2] 3654 	jp 90$
      0014BD                       3655 19$:	 
      0014BD 72 D6 00 14      [ 4] 3656 	ld a,([ptr16],x)
      0014C1 5C               [ 1] 3657 	incw x 
      0014C2 1F 03            [ 2] 3658 	ldw (XSAVE,sp),x 
      0014C4 A1 06            [ 1] 3659 	cp a,#TK_CMD 
      0014C6 27 04            [ 1] 3660 	jreq 2$
      0014C8 A1 07            [ 1] 3661 	cp a,#TK_FUNC 
      0014CA 26 2F            [ 1] 3662 	jrne 4$
      0014CC                       3663 2$:	
      0014CC 72 DE 00 14      [ 5] 3664 	ldw x,([ptr16],x)
      0014D0 A3 17 06         [ 2] 3665 	cpw x,#rem 
      0014D3 26 14            [ 1] 3666 	jrne 3$
      0014D5 A6 27            [ 1] 3667 	ld a,#''
      0014D7 CD 01 9E         [ 4] 3668 	call putc 
      0014DA 1E 03            [ 2] 3669 	ldw x,(XSAVE,sp)
      0014DC 1C 00 02         [ 2] 3670 	addw x,#2
      0014DF 72 BB 00 14      [ 2] 3671 	addw x,ptr16  
      0014E3 CD 01 B0         [ 4] 3672 	call puts 
      0014E6 CC 15 C4         [ 2] 3673 	jp 90$ 
      0014E9 CD 11 2E         [ 4] 3674 3$:	call cmd_name
      0014EC CD 14 37         [ 4] 3675 	call prt_cmd_name
      0014EF A6 20            [ 1] 3676 	ld a,#SPACE 
      0014F1 CD 01 9E         [ 4] 3677 	call putc 
      0014F4 1E 03            [ 2] 3678 	ldw x,(XSAVE,sp)
      0014F6 1C 00 02         [ 2] 3679 	addw x,#2
      0014F9 20 BA            [ 2] 3680 	jra 1$
      0014FB A1 08            [ 1] 3681 4$: cp a,#TK_QSTR 
      0014FD 26 0D            [ 1] 3682 	jrne 5$
      0014FF 72 BB 00 14      [ 2] 3683 	addw x,ptr16
      001503 CD 14 4B         [ 4] 3684 	call prt_quote 
      001506 72 B0 00 14      [ 2] 3685 	subw x,ptr16  
      00150A 20 A9            [ 2] 3686 	jra 1$
      00150C A1 04            [ 1] 3687 5$:	cp a,#TK_VAR
      00150E 26 1A            [ 1] 3688 	jrne 6$ 
      001510 72 DE 00 14      [ 5] 3689 	ldw x,([ptr16],x)
      001514 1D 00 26         [ 2] 3690 	subw x,#vars 
      001517 9F               [ 1] 3691 	ld a,xl
      001518 44               [ 1] 3692 	srl a 
      001519 AB 41            [ 1] 3693 	add a,#'A 
      00151B CD 01 9E         [ 4] 3694 	call putc 
      00151E A6 20            [ 1] 3695 	ld a,#SPACE 
      001520 CD 01 9E         [ 4] 3696 	call putc 
      001523 1E 03            [ 2] 3697 	ldw x,(XSAVE,sp)
      001525 1C 00 02         [ 2] 3698 	addw x,#2 
      001528 20 8B            [ 2] 3699 	jra 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00152A A1 05            [ 1] 3700 6$: cp a,#TK_ARRAY 
      00152C 26 0A            [ 1] 3701 	jrne 7$
      00152E A6 40            [ 1] 3702 	ld a,#'@ 
      001530 CD 01 9E         [ 4] 3703 	call putc 
      001533 1E 03            [ 2] 3704 	ldw x,(XSAVE,sp)
      001535 CC 14 B5         [ 2] 3705 	jp 1$ 
      001538 A1 03            [ 1] 3706 7$: cp a,#TK_INTGR 
      00153A 26 14            [ 1] 3707 	jrne 8$
      00153C 72 DE 00 14      [ 5] 3708 	ldw x,([ptr16],x)
      001540 CD 09 99         [ 4] 3709 	call print_int
      001543 A6 20            [ 1] 3710 	ld a,#SPACE 
      001545 CD 01 9E         [ 4] 3711 	call putc 
      001548 1E 03            [ 2] 3712 	ldw x,(XSAVE,sp)
      00154A 1C 00 02         [ 2] 3713 	addw x,#2 
      00154D CC 14 B5         [ 2] 3714 	jp 1$
      001550 A1 31            [ 1] 3715 8$: cp a,#TK_GT 
      001552 2B 1A            [ 1] 3716 	jrmi 9$
      001554 A1 35            [ 1] 3717 	cp a,#TK_NE 
      001556 22 16            [ 1] 3718 	jrugt 9$
      001558 A0 31            [ 1] 3719 	sub a,#TK_GT  
      00155A 48               [ 1] 3720 	sll a 
      00155B 90 5F            [ 1] 3721 	clrw y 
      00155D 90 97            [ 1] 3722 	ld yl,a 
      00155F 72 A9 15 DD      [ 2] 3723 	addw y,#relop_str 
      001563 90 FE            [ 2] 3724 	ldw y,(y)
      001565 93               [ 1] 3725 	ldw x,y 
      001566 CD 01 B0         [ 4] 3726 	call puts 
      001569 1E 03            [ 2] 3727 	ldw x,(XSAVE,sp)
      00156B CC 14 B5         [ 2] 3728 	jp 1$
      00156E A1 10            [ 1] 3729 9$: cp a,#TK_PLUS 
      001570 26 04            [ 1] 3730 	jrne 10$
      001572 A6 2B            [ 1] 3731 	ld a,#'+
      001574 20 46            [ 2] 3732 	jra 80$ 
      001576 A1 11            [ 1] 3733 10$: cp a,#TK_MINUS
      001578 26 04            [ 1] 3734 	jrne 11$
      00157A A6 2D            [ 1] 3735 	ld a,#'-
      00157C 20 3E            [ 2] 3736 	jra 80$
      00157E A1 20            [ 1] 3737 11$: cp a,#TK_MULT 
      001580 2B 0E            [ 1] 3738 	jrmi 12$
      001582 A1 22            [ 1] 3739 	cp a,#TK_MOD 
      001584 22 0A            [ 1] 3740 	jrugt 12$
      001586 A0 20            [ 1] 3741 	sub a,#0x20
      001588 5F               [ 1] 3742 	clrw x 
      001589 97               [ 1] 3743 	ld xl,a 
      00158A 1C 15 DA         [ 2] 3744 	addw x,#mul_char 
      00158D F6               [ 1] 3745 	ld a,(x)
      00158E 20 2C            [ 2] 3746 	jra 80$ 
      001590 A1 09            [ 1] 3747 12$: cp a,#TK_LPAREN 
      001592 2B 0E            [ 1] 3748 	jrmi 13$
      001594 A1 0C            [ 1] 3749 	cp a,#TK_SHARP 
      001596 22 0A            [ 1] 3750 	jrugt 13$
      001598 A0 09            [ 1] 3751 	sub a,#TK_LPAREN
      00159A 5F               [ 1] 3752 	clrw x 
      00159B 97               [ 1] 3753 	ld xl,a 
      00159C 1C 15 D6         [ 2] 3754 	addw x,#single_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00159F F6               [ 1] 3755 	ld a,(x)
      0015A0 20 1A            [ 2] 3756 	jra 80$
      0015A2 A1 02            [ 1] 3757 13$: cp a,#TK_CHAR 
      0015A4 26 14            [ 1] 3758 	jrne 14$
      0015A6 A6 5C            [ 1] 3759 	ld a,#'\
      0015A8 CD 01 9E         [ 4] 3760 	call putc 
      0015AB 1E 03            [ 2] 3761 	ldw x,(XSAVE,sp)
      0015AD 72 D6 00 14      [ 4] 3762 	ld a,([ptr16],x)
      0015B1 5C               [ 1] 3763 	incw x 
      0015B2 1F 03            [ 2] 3764 	ldw (XSAVE,sp),x 
      0015B4 CD 01 9E         [ 4] 3765 	call putc 
      0015B7 CC 14 B5         [ 2] 3766 	jp 1$ 
      0015BA A6 3A            [ 1] 3767 14$: ld a,#':
      0015BC CD 01 9E         [ 4] 3768 80$: call putc 
      0015BF 1E 03            [ 2] 3769 	ldw x,(XSAVE,sp)
      0015C1 CC 14 B5         [ 2] 3770 	jp 1$ 
      0015C4                       3771 90$: 
      0015C4 A6 0D            [ 1] 3772 	ld a,#CR 
      0015C6 CD 01 9E         [ 4] 3773 	call putc
      0015C9 7B 02            [ 1] 3774 	ld a,(WIDTH_SAV,sp) 
      0015CB C7 00 25         [ 1] 3775 	ld tab_width,a 
      0015CE 7B 01            [ 1] 3776 	ld a,(BASE_SAV,sp) 
      0015D0 C7 00 07         [ 1] 3777 	ld base,a
      0015D3                       3778 	_drop VSIZE 
      0015D3 5B 05            [ 2]    1     addw sp,#VSIZE 
      0015D5 81               [ 4] 3779 	ret 	
      0015D6 28 29 2C 23           3780 single_char: .byte '(',')',',','#'
      0015DA 2A 2F 25              3781 mul_char: .byte '*','/','%'
      0015DD 15 E9 15 EB 15 ED 15  3782 relop_str: .word gt,equal,ge,lt,le,ne 
             F0 15 F2 15 F5
      0015E9 3E 00                 3783 gt: .asciz ">"
      0015EB 3D 00                 3784 equal: .asciz "="
      0015ED 3E 3D 00              3785 ge: .asciz ">="
      0015F0 3C 00                 3786 lt: .asciz "<"
      0015F2 3C 3D 00              3787 le: .asciz "<="
      0015F5 3C 3E 00              3788 ne:  .asciz "<>"
                                   3789 
                                   3790 
                                   3791 ;---------------------------------
                                   3792 ; BASIC: PRINT|? arg_list 
                                   3793 ; print values from argument list
                                   3794 ;----------------------------------
                           000001  3795 	COMMA=1
                           000001  3796 	VSIZE=1
      0015F8                       3797 print:
      0015F8 4B 00            [ 1] 3798 push #0 ; local variable COMMA 
      0015FA                       3799 reset_comma:
      0015FA 0F 01            [ 1] 3800 	clr (COMMA,sp)
      0015FC                       3801 prt_loop:
      0015FC CD 13 03         [ 4] 3802 	call relation 
      0015FF A1 01            [ 1] 3803 	cp a,#TK_COLON 
      001601 27 59            [ 1] 3804 	jreq print_exit   
      001603 A1 03            [ 1] 3805 	cp a,#TK_INTGR 
      001605 26 05            [ 1] 3806 	jrne 0$ 
      001607 CD 09 99         [ 4] 3807 	call print_int 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00160A 20 EE            [ 2] 3808 	jra reset_comma
      00160C                       3809 0$: 	
      00160C CD 07 FA         [ 4] 3810 	call next_token
      00160F A1 00            [ 1] 3811 	cp a,#TK_NONE 
      001611 27 49            [ 1] 3812 	jreq print_exit 
      001613 A1 08            [ 1] 3813 1$:	cp a,#TK_QSTR
      001615 26 0E            [ 1] 3814 	jrne 2$   
      001617 CD 01 B0         [ 4] 3815 	call puts
      00161A 5C               [ 1] 3816 	incw x 
      00161B 72 B0 00 03      [ 2] 3817 	subw x,basicptr 
      00161F 9F               [ 1] 3818 	ld a,xl 
      001620 C7 00 01         [ 1] 3819 	ld in,a  
      001623 20 D5            [ 2] 3820 	jra reset_comma
      001625 A1 02            [ 1] 3821 2$: cp a,#TK_CHAR 
      001627 26 06            [ 1] 3822 	jrne 3$
      001629 9F               [ 1] 3823 	ld a,xl 
      00162A CD 01 9E         [ 4] 3824 	call putc 
      00162D 20 CB            [ 2] 3825 	jra reset_comma 
      00162F                       3826 3$: 	
      00162F A1 07            [ 1] 3827 	cp a,#TK_FUNC 
      001631 26 06            [ 1] 3828 	jrne 4$ 
      001633 FD               [ 4] 3829 	call (x)
      001634 CD 09 99         [ 4] 3830 	call print_int 
      001637 20 C1            [ 2] 3831 	jra reset_comma 
      001639                       3832 4$: 
      001639 A1 0B            [ 1] 3833 	cp a,#TK_COMMA 
      00163B 26 05            [ 1] 3834 	jrne 5$
      00163D 03 01            [ 1] 3835 	cpl (COMMA,sp) 
      00163F CC 15 FC         [ 2] 3836 	jp prt_loop   
      001642                       3837 5$: 
      001642 A1 0C            [ 1] 3838 	cp a,#TK_SHARP
      001644 26 13            [ 1] 3839 	jrne 7$
      001646 CD 07 FA         [ 4] 3840 	call next_token
      001649 A1 03            [ 1] 3841 	cp a,#TK_INTGR 
      00164B 27 03            [ 1] 3842 	jreq 6$
      00164D CC 07 14         [ 2] 3843 	jp syntax_error 
      001650                       3844 6$:
      001650 9F               [ 1] 3845 	ld a,xl 
      001651 A4 0F            [ 1] 3846 	and a,#15 
      001653 C7 00 25         [ 1] 3847 	ld tab_width,a 
      001656 CC 15 FA         [ 2] 3848 	jp reset_comma 
      001659                       3849 7$:	
      001659 CD 0F 8E         [ 4] 3850 	call unget_token
      00165C                       3851 print_exit:
      00165C 0D 01            [ 1] 3852 	tnz (COMMA,sp)
      00165E 26 05            [ 1] 3853 	jrne 9$
      001660 A6 0D            [ 1] 3854 	ld a,#CR 
      001662 CD 01 9E         [ 4] 3855     call putc 
      001665                       3856 9$:	_drop VSIZE 
      001665 5B 01            [ 2]    1     addw sp,#VSIZE 
      001667 81               [ 4] 3857 	ret 
                                   3858 
                                   3859 ;----------------------
                                   3860 ; 'save_context' and
                                   3861 ; 'rest_context' must be 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3862 ; called at the same 
                                   3863 ; call stack depth 
                                   3864 ; i.e. SP must have the 
                                   3865 ; save value at  
                                   3866 ; entry point of both 
                                   3867 ; routine. 
                                   3868 ;---------------------
                           000006  3869 	CTXT_SIZE=6 ; size of saved data 
                                   3870 ;--------------------
                                   3871 ; save current BASIC
                                   3872 ; interpreter context 
                                   3873 ; on cstack 
                                   3874 ;--------------------
      001668                       3875 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001668                       3876 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001668                       3877 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001668                       3878 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001668                       3879 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      001668                       3880 save_context:
      001668 CE 00 03         [ 2] 3881 	ldw x,basicptr 
      00166B 1F 03            [ 2] 3882 	ldw (BPTR,sp),x
      00166D CE 00 05         [ 2] 3883 	ldw x,lineno 
      001670 1F 05            [ 2] 3884 	ldw (LNO,sp),x 
      001672 C6 00 01         [ 1] 3885 	ld a,in 
      001675 6B 07            [ 1] 3886 	ld (IN,sp),a
      001677 C6 00 02         [ 1] 3887 	ld a,count 
      00167A 6B 08            [ 1] 3888 	ld (CNT,sp),a  
      00167C 81               [ 4] 3889 	ret
                                   3890 
                                   3891 ;-----------------------
                                   3892 ; restore previously saved 
                                   3893 ; BASIC interpreter context 
                                   3894 ; from cstack 
                                   3895 ;-------------------------
      00167D                       3896 rest_context:
      00167D 1E 03            [ 2] 3897 	ldw x,(BPTR,sp)
      00167F CF 00 03         [ 2] 3898 	ldw basicptr,x 
      001682 1E 05            [ 2] 3899 	ldw x,(LNO,sp)
      001684 CF 00 05         [ 2] 3900 	ldw lineno,x 
      001687 7B 07            [ 1] 3901 	ld a,(IN,sp)
      001689 C7 00 01         [ 1] 3902 	ld in,a
      00168C 7B 08            [ 1] 3903 	ld a,(CNT,sp)
      00168E C7 00 02         [ 1] 3904 	ld count,a  
      001691 81               [ 4] 3905 	ret
                                   3906 
                                   3907 ;------------------------------------------
                                   3908 ; BASIC: INPUT [string],var[,[string],var]
                                   3909 ; input value in variables 
                                   3910 ; [string] optionally can be used as prompt 
                                   3911 ;-----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                           000001  3912 	CX_BPTR=1
                           000003  3913 	CX_LNO=3
                           000004  3914 	CX_IN=4
                           000005  3915 	CX_CNT=5
                           000006  3916 	SKIP=6
                           000007  3917 	VSIZE=7
      001692                       3918 input_var:
      001692 72 00 00 24 05   [ 2] 3919 	btjt flags,#FRUN,1$ 
      001697 A6 06            [ 1] 3920 	ld a,#ERR_RUN_ONLY 
      001699 CC 07 16         [ 2] 3921 	jp tb_error 
      00169C                       3922 1$:	_vars VSIZE 
      00169C 52 07            [ 2]    1     sub sp,#VSIZE 
      00169E                       3923 input_loop:
      00169E 0F 06            [ 1] 3924 	clr (SKIP,sp)
      0016A0 CD 07 FA         [ 4] 3925 	call next_token 
      0016A3 A1 00            [ 1] 3926 	cp a,#TK_NONE 
      0016A5 27 5C            [ 1] 3927 	jreq input_exit 
      0016A7 A1 08            [ 1] 3928 	cp a,#TK_QSTR 
      0016A9 26 08            [ 1] 3929 	jrne 1$ 
      0016AB CD 01 B0         [ 4] 3930 	call puts 
      0016AE 03 06            [ 1] 3931 	cpl (SKIP,sp)
      0016B0 CD 07 FA         [ 4] 3932 	call next_token 
      0016B3 A1 04            [ 1] 3933 1$: cp a,#TK_VAR  
      0016B5 27 03            [ 1] 3934 	jreq 2$ 
      0016B7 CC 07 14         [ 2] 3935 	jp syntax_error
      0016BA CD 0F 95         [ 4] 3936 2$:	call dpush 
      0016BD 0D 06            [ 1] 3937 	tnz (SKIP,sp)
      0016BF 26 0F            [ 1] 3938 	jrne 21$ 
      0016C1 A6 3A            [ 1] 3939 	ld a,#':
      0016C3 C7 17 19         [ 1] 3940 	ld pad+1,a 
      0016C6 72 5F 17 1A      [ 1] 3941 	clr pad+2
      0016CA AE 17 18         [ 2] 3942 	ldw x,#pad 
      0016CD CD 01 B0         [ 4] 3943 	call puts   
      0016D0                       3944 21$:
      0016D0 CD 16 68         [ 4] 3945 	call save_context 
      0016D3 AE 16 C8         [ 2] 3946 	ldw x,#tib 
      0016D6 CF 00 03         [ 2] 3947 	ldw basicptr,x  
      0016D9 72 5F 00 02      [ 1] 3948 	clr count  
      0016DD CD 0A 87         [ 4] 3949 	call readln 
      0016E0 72 5F 00 01      [ 1] 3950 	clr in 
      0016E4 CD 13 03         [ 4] 3951 	call relation 
      0016E7 A1 03            [ 1] 3952 	cp a,#TK_INTGR
      0016E9 27 03            [ 1] 3953 	jreq 3$ 
      0016EB CC 07 14         [ 2] 3954 	jp syntax_error
      0016EE CD 0F 95         [ 4] 3955 3$: call dpush 
      0016F1 CD 0F FC         [ 4] 3956 	call store 
      0016F4 CD 16 7D         [ 4] 3957 	call rest_context
      0016F7 CD 07 FA         [ 4] 3958 	call next_token 
      0016FA A1 0B            [ 1] 3959 	cp a,#TK_COMMA 
      0016FC 26 02            [ 1] 3960 	jrne 4$
      0016FE 20 9E            [ 2] 3961 	jra input_loop 
      001700 CD 0F 8E         [ 4] 3962 4$:	call unget_token 
      001703                       3963 input_exit:
      001703                       3964 	_drop VSIZE 
      001703 5B 07            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001705 81               [ 4] 3965 	ret 
                                   3966 
                                   3967 
                                   3968 ;---------------------
                                   3969 ; BASIC: REMARK | ' 
                                   3970 ; skip comment to end of line 
                                   3971 ;---------------------- 
      001706                       3972 rem:
      001706 55 00 01 00 02   [ 1] 3973  	mov count,in 
      00170B 81               [ 4] 3974 	ret 
                                   3975 
                                   3976 ;---------------------
                                   3977 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3978 ; read in loop 'addr'  
                                   3979 ; apply & 'mask' to value 
                                   3980 ; loop while result==0.  
                                   3981 ; if 'xor_mask' given 
                                   3982 ; apply ^ in second  
                                   3983 ; loop while result==0 
                                   3984 ;---------------------
                           000001  3985 	XMASK=1 
                           000002  3986 	MASK=2
                           000003  3987 	ADDR=3
                           000004  3988 	VSIZE=4
      00170C                       3989 wait: 
      00170C                       3990 	_vars VSIZE
      00170C 52 04            [ 2]    1     sub sp,#VSIZE 
      00170E 0F 01            [ 1] 3991 	clr (XMASK,sp) 
      001710 CD 11 C5         [ 4] 3992 	call arg_list 
      001713 A1 02            [ 1] 3993 	cp a,#2
      001715 24 03            [ 1] 3994 	jruge 0$
      001717 CC 07 14         [ 2] 3995 	jp syntax_error 
      00171A A1 03            [ 1] 3996 0$:	cp a,#3
      00171C 25 06            [ 1] 3997 	jrult 1$
      00171E CD 0F A2         [ 4] 3998 	call dpop 
      001721 9F               [ 1] 3999 	ld a,xl
      001722 6B 01            [ 1] 4000 	ld (XMASK,sp),a 
      001724 CD 0F A2         [ 4] 4001 1$: call dpop ; mask 
      001727 9F               [ 1] 4002 	ld a,xl 
      001728 6B 02            [ 1] 4003 	ld (MASK,sp),a 
      00172A CD 0F A2         [ 4] 4004 	call dpop ; address 
      00172D F6               [ 1] 4005 2$:	ld a,(x)
      00172E 14 02            [ 1] 4006 	and a,(MASK,sp)
      001730 18 01            [ 1] 4007 	xor a,(XMASK,sp)
      001732 27 F9            [ 1] 4008 	jreq 2$ 
      001734                       4009 	_drop VSIZE 
      001734 5B 04            [ 2]    1     addw sp,#VSIZE 
      001736 81               [ 4] 4010 	ret 
                                   4011 
                                   4012 ;---------------------
                                   4013 ; BASIC: BSET addr,mask
                                   4014 ; set bits at 'addr' corresponding 
                                   4015 ; to those of 'mask' that are at 1.
                                   4016 ; arguments:
                                   4017 ; 	addr 		memory address RAM|PERIPHERAL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4018 ;   mask        mask|addr
                                   4019 ; output:
                                   4020 ;	none 
                                   4021 ;--------------------------
      001737                       4022 bit_set:
      001737 CD 11 C5         [ 4] 4023 	call arg_list 
      00173A A1 02            [ 1] 4024 	cp a,#2	 
      00173C 27 03            [ 1] 4025 	jreq 1$ 
      00173E CC 07 14         [ 2] 4026 	jp syntax_error
      001741                       4027 1$: 
      001741 CD 0F A2         [ 4] 4028 	call dpop ; mask 
      001744 9F               [ 1] 4029 	ld a,xl 
      001745 CD 0F A2         [ 4] 4030 	call dpop ; addr  
      001748 FA               [ 1] 4031 	or a,(x)
      001749 F7               [ 1] 4032 	ld (x),a
      00174A 81               [ 4] 4033 	ret 
                                   4034 
                                   4035 ;---------------------
                                   4036 ; BASIC: BRES addr,mask
                                   4037 ; reset bits at 'addr' corresponding 
                                   4038 ; to those of 'mask' that are at 1.
                                   4039 ; arguments:
                                   4040 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4041 ;   mask	    ~mask&*addr  
                                   4042 ; output:
                                   4043 ;	none 
                                   4044 ;--------------------------
      00174B                       4045 bit_reset:
      00174B CD 11 C5         [ 4] 4046 	call arg_list 
      00174E A1 02            [ 1] 4047 	cp a,#2  
      001750 27 03            [ 1] 4048 	jreq 1$ 
      001752 CC 07 14         [ 2] 4049 	jp syntax_error
      001755                       4050 1$: 
      001755 CD 0F A2         [ 4] 4051 	call dpop ; mask 
      001758 9F               [ 1] 4052 	ld a,xl 
      001759 43               [ 1] 4053 	cpl a 
      00175A CD 0F A2         [ 4] 4054 	call dpop ; addr  
      00175D F4               [ 1] 4055 	and a,(x)
      00175E F7               [ 1] 4056 	ld (x),a 
      00175F 81               [ 4] 4057 	ret 
                                   4058 
                                   4059 ;---------------------
                                   4060 ; BASIC: BRES addr,mask
                                   4061 ; toggle bits at 'addr' corresponding 
                                   4062 ; to those of 'mask' that are at 1.
                                   4063 ; arguments:
                                   4064 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4065 ;   mask	    mask^*addr  
                                   4066 ; output:
                                   4067 ;	none 
                                   4068 ;--------------------------
      001760                       4069 bit_toggle:
      001760 CD 11 C5         [ 4] 4070 	call arg_list 
      001763 A1 02            [ 1] 4071 	cp a,#2 
      001765 27 03            [ 1] 4072 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001767 CC 07 14         [ 2] 4073 	jp syntax_error
      00176A CD 0F A2         [ 4] 4074 1$: call dpop ; mask 
      00176D 9F               [ 1] 4075 	ld a,xl 
      00176E CD 0F A2         [ 4] 4076 	call dpop ; addr  
      001771 F8               [ 1] 4077 	xor a,(x)
      001772 F7               [ 1] 4078 	ld (x),a 
      001773 81               [ 4] 4079 	ret 
                                   4080 
                                   4081 
                                   4082 ;--------------------
                                   4083 ; BASIC: POKE addr,byte
                                   4084 ; put a byte at addr 
                                   4085 ;--------------------
      001774                       4086 poke:
      001774 CD 11 C5         [ 4] 4087 	call arg_list 
      001777 A1 02            [ 1] 4088 	cp a,#2
      001779 27 03            [ 1] 4089 	jreq 1$
      00177B CC 07 14         [ 2] 4090 	jp syntax_error
      00177E                       4091 1$:	
      00177E CD 0F A2         [ 4] 4092 	call dpop 
      001781 9F               [ 1] 4093     ld a,xl 
      001782 CD 0F A2         [ 4] 4094 	call dpop 
      001785 F7               [ 1] 4095 	ld (x),a 
      001786 81               [ 4] 4096 	ret 
                                   4097 
                                   4098 ;-----------------------
                                   4099 ; BASIC: PEEK(addr)
                                   4100 ; get the byte at addr 
                                   4101 ; input:
                                   4102 ;	none 
                                   4103 ; output:
                                   4104 ;	X 		value 
                                   4105 ;-----------------------
      001787                       4106 peek:
      001787 A6 09            [ 1] 4107 	ld a,#TK_LPAREN 
      001789 CD 11 B8         [ 4] 4108 	call expect 
      00178C CD 11 C5         [ 4] 4109 	call arg_list
      00178F A1 01            [ 1] 4110 	cp a,#1 
      001791 27 03            [ 1] 4111 	jreq 1$
      001793 CC 07 14         [ 2] 4112 	jp syntax_error
      001796 A6 0A            [ 1] 4113 1$:	ld a,#TK_RPAREN 
      001798 CD 11 B8         [ 4] 4114 	call expect 
      00179B CD 0F A2         [ 4] 4115 	call dpop 
      00179E F6               [ 1] 4116 	ld a,(x)
      00179F 5F               [ 1] 4117 	clrw x 
      0017A0 97               [ 1] 4118 	ld xl,a 
      0017A1 A6 03            [ 1] 4119 	ld a,#TK_INTGR
      0017A3 81               [ 4] 4120 	ret 
                                   4121 
      0017A4                       4122 if: 
      0017A4 CD 13 03         [ 4] 4123 	call relation 
      0017A7 A1 03            [ 1] 4124 	cp a,#TK_INTGR
      0017A9 27 03            [ 1] 4125 	jreq 1$ 
      0017AB CC 07 14         [ 2] 4126 	jp syntax_error
      0017AE 4F               [ 1] 4127 1$:	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0017AF 5D               [ 2] 4128 	tnzw x 
      0017B0 26 05            [ 1] 4129 	jrne 9$  
                                   4130 ;skip to next line
      0017B2 55 00 02 00 01   [ 1] 4131 	mov in,count
      0017B7 81               [ 4] 4132 9$:	ret 
                                   4133 
                                   4134 ;------------------------
                                   4135 ; BASIC: FOR var=expr 
                                   4136 ; set variable to expression 
                                   4137 ; leave variable address 
                                   4138 ; on dstack and set
                                   4139 ; FFOR bit in 'flags'
                                   4140 ;-----------------
                           000001  4141 	RETL1=1
                           000003  4142 	INW=3
                           000005  4143 	BPTR=5
      0017B8                       4144 for: ; { -- var_addr }
      0017B8 A6 04            [ 1] 4145 	ld a,#TK_VAR 
      0017BA CD 11 B8         [ 4] 4146 	call expect
      0017BD CD 0F 95         [ 4] 4147 	call dpush 
      0017C0 CD 13 96         [ 4] 4148 	call let02 
      0017C3 72 14 00 24      [ 1] 4149 	bset flags,#FFOR 
                                   4150 ; open space on cstack for BPTR and INW 
      0017C7 85               [ 2] 4151 	popw x ; call return address 
      0017C8                       4152 	_vars 4
      0017C8 52 04            [ 2]    1     sub sp,#4 
      0017CA 89               [ 2] 4153 	pushw x  ; RETL1 
      0017CB 5F               [ 1] 4154 	clrw x 
      0017CC 1F 05            [ 2] 4155 	ldw (BPTR,sp),x 
      0017CE 1F 03            [ 2] 4156 	ldw (INW,sp),x 
      0017D0 CD 07 FA         [ 4] 4157 	call next_token 
      0017D3 A1 06            [ 1] 4158 	cp a,#TK_CMD 
      0017D5 27 03            [ 1] 4159 	jreq 1$
      0017D7 CC 07 14         [ 2] 4160 	jp syntax_error
      0017DA                       4161 1$:  
      0017DA A3 17 E2         [ 2] 4162 	cpw x,#to 
      0017DD 27 03            [ 1] 4163 	jreq to
      0017DF CC 07 14         [ 2] 4164 	jp syntax_error 
                                   4165 
                                   4166 ;-----------------------------------
                                   4167 ; BASIC: TO expr 
                                   4168 ; second part of FOR loop initilization
                                   4169 ; leave limit on dstack and set 
                                   4170 ; FTO bit in 'flags'
                                   4171 ;-----------------------------------
      0017E2                       4172 to: ; { var_addr -- var_addr limit step }
      0017E2 72 04 00 24 03   [ 2] 4173 	btjt flags,#FFOR,1$
      0017E7 CC 07 14         [ 2] 4174 	jp syntax_error
      0017EA CD 13 03         [ 4] 4175 1$: call relation  
      0017ED A1 03            [ 1] 4176 	cp a,#TK_INTGR 
      0017EF 27 03            [ 1] 4177 	jreq 2$ 
      0017F1 CC 07 14         [ 2] 4178 	jp syntax_error
      0017F4                       4179 2$: 
      0017F4 CD 0F 95         [ 4] 4180     call dpush ; limit
      0017F7 CE 00 00         [ 2] 4181 	ldw x,in.w 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0017FA CD 07 FA         [ 4] 4182 	call next_token
      0017FD A1 00            [ 1] 4183 	cp a,#TK_NONE  
      0017FF 27 0C            [ 1] 4184 	jreq 4$ 
      001801 A1 06            [ 1] 4185 	cp a,#TK_CMD
      001803 26 05            [ 1] 4186 	jrne 3$
      001805 A3 18 12         [ 2] 4187 	cpw x,#step 
      001808 27 08            [ 1] 4188 	jreq step
      00180A                       4189 3$:	
      00180A CD 0F 8E         [ 4] 4190 	call unget_token   	 
      00180D                       4191 4$:	
      00180D AE 00 01         [ 2] 4192 	ldw x,#1   ; default step  
      001810 20 12            [ 2] 4193 	jra store_loop_addr 
                                   4194 
                                   4195 
                                   4196 ;----------------------------------
                                   4197 ; BASIC: STEP expr 
                                   4198 ; optional third par of FOR loop
                                   4199 ; initialization. 	
                                   4200 ;------------------------------------
      001812                       4201 step: ; {var limit -- var limit step}
      001812 72 04 00 24 03   [ 2] 4202 	btjt flags,#FFOR,1$
      001817 CC 07 14         [ 2] 4203 	jp syntax_error
      00181A CD 13 03         [ 4] 4204 1$: call relation
      00181D A1 03            [ 1] 4205 	cp a,#TK_INTGR
      00181F 27 03            [ 1] 4206 	jreq store_loop_addr  
      001821 CC 07 14         [ 2] 4207 	jp syntax_error
                                   4208 ; leave loop back entry point on cstack 
                                   4209 ; cstack is 2 call deep from interp_loop
      001824                       4210 store_loop_addr:
      001824 CD 0F 95         [ 4] 4211 	call dpush 
      001827 CE 00 03         [ 2] 4212 	ldw x,basicptr  
      00182A 1F 05            [ 2] 4213 	ldw (BPTR,sp),x 
      00182C CE 00 00         [ 2] 4214 	ldw x,in.w 
      00182F 1F 03            [ 2] 4215 	ldw (INW,sp),x   
      001831 72 15 00 24      [ 1] 4216 	bres flags,#FFOR 
      001835 72 5C 00 1F      [ 1] 4217 	inc loop_depth  
      001839 81               [ 4] 4218 	ret 
                                   4219 
                                   4220 ;--------------------------------
                                   4221 ; BASIC: NEXT var 
                                   4222 ; FOR loop control 
                                   4223 ; increment variable with step 
                                   4224 ; and compare with limit 
                                   4225 ; loop if threshold not crossed.
                                   4226 ; else clean both stacks. 
                                   4227 ; and decrement 'loop_depth' 
                                   4228 ;--------------------------------
      00183A                       4229 next: ; {var limit step -- [var limit step ] }
      00183A 72 5D 00 1F      [ 1] 4230 	tnz loop_depth 
      00183E 26 03            [ 1] 4231 	jrne 1$ 
      001840 CC 07 14         [ 2] 4232 	jp syntax_error 
      001843                       4233 1$: 
      001843 A6 04            [ 1] 4234 	ld a,#TK_VAR 
      001845 CD 11 B8         [ 4] 4235 	call expect
                                   4236 ; check for good variable after NEXT 	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001848 90 93            [ 1] 4237 	ldw y,x 
      00184A AE 00 04         [ 2] 4238 	ldw x,#4  
      00184D 72 D3 00 19      [ 4] 4239 	cpw y,([dstkptr],x) ; compare variables address 
      001851 27 03            [ 1] 4240 	jreq 2$  
      001853 CC 07 14         [ 2] 4241 	jp syntax_error ; not the good one 
      001856                       4242 2$: ; increment variable 
      001856 93               [ 1] 4243 	ldw x,y
      001857 FE               [ 2] 4244 	ldw x,(x)  ; get var value 
      001858 CF 00 09         [ 2] 4245 	ldw acc16,x 
      00185B 72 CE 00 19      [ 5] 4246 	ldw x,[dstkptr] ; step
      00185F 72 BB 00 09      [ 2] 4247 	addw x,acc16 ; var+step 
      001863 90 FF            [ 2] 4248 	ldw (y),x ; save var new value 
                                   4249 ; compare with limit 
      001865 90 93            [ 1] 4250 	ldw y,x 
      001867 72 CE 00 19      [ 5] 4251 	ldw x,[dstkptr] ; step in x 
      00186B 5D               [ 2] 4252 	tnzw x  
      00186C 2A 0B            [ 1] 4253 	jrpl 4$ ; positive step 
                                   4254 ;negative step 
      00186E AE 00 02         [ 2] 4255 	ldw x,#2
      001871 72 D3 00 19      [ 4] 4256 	cpw y,([dstkptr],x)
      001875 2F 24            [ 1] 4257 	jrslt loop_done
      001877 20 09            [ 2] 4258 	jra loop_back 
      001879                       4259 4$: ; positive step
      001879 AE 00 02         [ 2] 4260 	ldw x,#2 
      00187C 72 D3 00 19      [ 4] 4261 	cpw y,([dstkptr],x)
      001880 2C 19            [ 1] 4262 	jrsgt loop_done
      001882                       4263 loop_back:
      001882 1E 05            [ 2] 4264 	ldw x,(BPTR,sp)
      001884 CF 00 03         [ 2] 4265 	ldw basicptr,x 
      001887 72 01 00 24 09   [ 2] 4266 	btjf flags,#FRUN,1$ 
      00188C E6 02            [ 1] 4267 	ld a,(2,x)
      00188E C7 00 02         [ 1] 4268 	ld count,a
      001891 FE               [ 2] 4269 	ldw x,(x)
      001892 CF 00 05         [ 2] 4270 	ldw lineno,x
      001895 1E 03            [ 2] 4271 1$:	ldw x,(INW,sp)
      001897 CF 00 00         [ 2] 4272 	ldw in.w,x 
      00189A 81               [ 4] 4273 	ret 
      00189B                       4274 loop_done:
                                   4275 	; remove var limit step on dstack 
      00189B CE 00 19         [ 2] 4276 	ldw x,dstkptr 
      00189E 1C 00 06         [ 2] 4277 	addw x,#3*CELL_SIZE
      0018A1 CF 00 19         [ 2] 4278 	ldw dstkptr,x 
                                   4279 	; remove 2 return address on cstack 
      0018A4 85               [ 2] 4280 	popw x
      0018A5                       4281 	_drop 4
      0018A5 5B 04            [ 2]    1     addw sp,#4 
      0018A7 89               [ 2] 4282 	pushw x 
      0018A8 72 5A 00 1F      [ 1] 4283 	dec loop_depth 
      0018AC 81               [ 4] 4284 	ret 
                                   4285 
                                   4286 
                                   4287 ;------------------------
                                   4288 ; BASIC: GOTO lineno 
                                   4289 ; jump to lineno 
                                   4290 ; here cstack is 2 call deep from interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4291 ;------------------------
      0018AD                       4292 goto:
      0018AD 72 00 00 24 06   [ 2] 4293 	btjt flags,#FRUN,0$ 
      0018B2 A6 06            [ 1] 4294 	ld a,#ERR_RUN_ONLY
      0018B4 CC 07 16         [ 2] 4295 	jp tb_error 
      0018B7 81               [ 4] 4296 	ret 
      0018B8 20 23            [ 2] 4297 0$:	jra go_common
                                   4298 
                                   4299 ;--------------------
                                   4300 ; BASIC: GOSUB lineno
                                   4301 ; basic subroutine call
                                   4302 ; actual lineno and basicptr 
                                   4303 ; are saved on cstack
                                   4304 ; here cstack is 2 call deep from interp_loop 
                                   4305 ;--------------------
                           000003  4306 	GOS_RET=3
      0018BA                       4307 gosub:
      0018BA 72 00 00 24 06   [ 2] 4308 	btjt flags,#FRUN,0$ 
      0018BF A6 06            [ 1] 4309 	ld a,#ERR_RUN_ONLY
      0018C1 CC 07 16         [ 2] 4310 	jp tb_error 
      0018C4 81               [ 4] 4311 	ret 
      0018C5 85               [ 2] 4312 0$:	popw x 
      0018C6 52 02            [ 2] 4313 	sub sp,#2 
      0018C8 89               [ 2] 4314 	pushw x 
      0018C9 CE 00 03         [ 2] 4315 	ldw x,basicptr
      0018CC E6 02            [ 1] 4316 	ld a,(2,x)
      0018CE AB 03            [ 1] 4317 	add a,#3 
      0018D0 C7 00 0A         [ 1] 4318 	ld acc8,a 
      0018D3 72 5F 00 09      [ 1] 4319 	clr acc16 
      0018D7 72 BB 00 09      [ 2] 4320 	addw x,acc16
      0018DB 1F 03            [ 2] 4321 	ldw (GOS_RET,sp),x 
      0018DD                       4322 go_common: 
      0018DD CD 13 03         [ 4] 4323 	call relation 
      0018E0 A1 03            [ 1] 4324 	cp a,#TK_INTGR
      0018E2 27 03            [ 1] 4325 	jreq 1$ 
      0018E4 CC 07 14         [ 2] 4326 	jp syntax_error
      0018E7                       4327 1$: 
      0018E7 CD 02 E0         [ 4] 4328 	call search_lineno  
      0018EA 5D               [ 2] 4329 	tnzw x 
      0018EB 26 05            [ 1] 4330 	jrne 2$ 
      0018ED A6 05            [ 1] 4331 	ld a,#ERR_NO_LINE 
      0018EF CC 07 16         [ 2] 4332 	jp tb_error 
      0018F2                       4333 2$: 
      0018F2 CF 00 03         [ 2] 4334 	ldw basicptr,x 
      0018F5 E6 02            [ 1] 4335 	ld a,(2,x)
      0018F7 C7 00 02         [ 1] 4336 	ld count,a 
      0018FA FE               [ 2] 4337 	ldw x,(x)
      0018FB CF 00 05         [ 2] 4338 	ldw lineno,x 
      0018FE 35 03 00 01      [ 1] 4339 	mov in,#3 
      001902 81               [ 4] 4340 	ret 
                                   4341 
                                   4342 ;------------------------
                                   4343 ; BASIC: RETURN 
                                   4344 ; exit from a subroutine 
                                   4345 ; cstack is 2 level deep from interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4346 ;------------------------
      001903                       4347 return:
      001903 72 00 00 24 05   [ 2] 4348 	btjt flags,#FRUN,0$ 
      001908 A6 06            [ 1] 4349 	ld a,#ERR_RUN_ONLY
      00190A CC 07 16         [ 2] 4350 	jp tb_error 
      00190D                       4351 0$:	
      00190D 1E 03            [ 2] 4352 	ldw x,(GOS_RET,sp) 
      00190F CF 00 03         [ 2] 4353 	ldw basicptr,x 
      001912 E6 02            [ 1] 4354 	ld a,(2,x)
      001914 AB 03            [ 1] 4355 	add a,#3 
      001916 C7 00 02         [ 1] 4356 	ld count,a 
      001919 35 03 00 01      [ 1] 4357 	mov in,#3
      00191D FE               [ 2] 4358 	ldw x,(x)
      00191E CF 00 05         [ 2] 4359 	ldw lineno,x 
      001921 4F               [ 1] 4360 	clr a 
      001922 85               [ 2] 4361 	popw x 
      001923                       4362 	_drop 2
      001923 5B 02            [ 2]    1     addw sp,#2 
      001925 89               [ 2] 4363 	pushw x
      001926 81               [ 4] 4364 	ret  
                                   4365 
                                   4366 
                                   4367 ;----------------------------------
                                   4368 ; BASIC: RUN
                                   4369 ; run BASIC program in RAM
                                   4370 ;----------------------------------- 
      001927                       4371 run: 
      001927 72 01 00 24 02   [ 2] 4372 	btjf flags,#FRUN,0$  
      00192C 4F               [ 1] 4373 	clr a 
      00192D 81               [ 4] 4374 	ret
      00192E                       4375 0$: 
      00192E 72 09 00 24 12   [ 2] 4376 	btjf flags,#FBREAK,1$
      001933                       4377 	_drop 2 
      001933 5B 02            [ 2]    1     addw sp,#2 
      001935 CD 16 7D         [ 4] 4378 	call rest_context
      001938                       4379 	_drop CTXT_SIZE 
      001938 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      00193A 72 19 00 24      [ 1] 4380 	bres flags,#FBREAK 
      00193E 72 10 00 24      [ 1] 4381 	bset flags,#FRUN 
      001942 CC 07 CA         [ 2] 4382 	jp interp_loop 
      001945 CE 00 1B         [ 2] 4383 1$:	ldw x,txtbgn
      001948 C3 00 1D         [ 2] 4384 	cpw x,txtend 
      00194B 2B 02            [ 1] 4385 	jrmi 2$ 
      00194D 4F               [ 1] 4386 	clr a 
      00194E 81               [ 4] 4387 	ret 
      00194F CD 13 7E         [ 4] 4388 2$: call ubound 
      001952                       4389 	_drop 2 
      001952 5B 02            [ 2]    1     addw sp,#2 
      001954 CE 00 1B         [ 2] 4390 	ldw x,txtbgn 
      001957 CF 00 03         [ 2] 4391 	ldw basicptr,x 
      00195A E6 02            [ 1] 4392 	ld a,(2,x)
      00195C C7 00 02         [ 1] 4393 	ld count,a
      00195F FE               [ 2] 4394 	ldw x,(x)
      001960 CF 00 05         [ 2] 4395 	ldw lineno,x
      001963 35 03 00 01      [ 1] 4396 	mov in,#3	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001967 72 10 00 24      [ 1] 4397 	bset flags,#FRUN 
      00196B CC 07 CA         [ 2] 4398 	jp interp_loop 
                                   4399 
                                   4400 
                                   4401 ;----------------------
                                   4402 ; BASIC: STOP 
                                   4403 ; stop running program
                                   4404 ;---------------------- 
      00196E                       4405 stop: 
                                   4406 ; clean dstack and cstack 
      00196E AE 17 FF         [ 2] 4407 	ldw x,#STACK_EMPTY 
      001971 94               [ 1] 4408 	ldw sp,x 
      001972 72 11 00 24      [ 1] 4409 	bres flags,#FRUN 
      001976 72 19 00 24      [ 1] 4410 	bres flags,#FBREAK
      00197A CC 07 66         [ 2] 4411 	jp warm_start
                                   4412 
                                   4413 ;-----------------------
                                   4414 ; BASIC BEEP expr1,expr2
                                   4415 ; used MCU internal beeper 
                                   4416 ; to produce a sound
                                   4417 ; arguments:
                                   4418 ;    expr1   frequency, {1,2,4} mapping to 1K,2K,4K
                                   4419 ;    expr2   duration msec.
                                   4420 ;---------------------------
      00197D                       4421 beep:
      00197D CD 11 C5         [ 4] 4422 	call arg_list 
      001980 A1 02            [ 1] 4423 	cp a,#2 
      001982 27 03            [ 1] 4424 	jreq 2$
      001984 CC 07 14         [ 2] 4425 	jp syntax_error 
      001987 CE 00 19         [ 2] 4426 2$: ldw x,dstkptr 
      00198A EE 02            [ 2] 4427 	ldw x,(2,x);frequency 
      00198C 9F               [ 1] 4428 	ld a,xl
      00198D 4A               [ 1] 4429 	dec a 
      00198E 4E               [ 1] 4430 	swap a 
      00198F 48               [ 1] 4431 	sll a 
      001990 48               [ 1] 4432 	sll a 
      001991 AB 3E            [ 1] 4433 	add a,#0x3e 
      001993 C7 50 F3         [ 1] 4434 	ld BEEP_CSR,a 
      001996 CD 0F A2         [ 4] 4435 	call dpop 
      001999 CD 1E 68         [ 4] 4436 	call pause02 
      00199C CD 0F C9         [ 4] 4437 	call ddrop 
      00199F A6 1F            [ 1] 4438 	ld a,#0x1f
      0019A1 C7 50 F3         [ 1] 4439 	ld BEEP_CSR,a 
      0019A4 81               [ 4] 4440 	ret 
                                   4441 
                                   4442 ;-------------------------------
                                   4443 ; BASIC: PWRADC 0|1,divisor  
                                   4444 ; disable/enanble ADC 
                                   4445 ;-------------------------------
      0019A5                       4446 power_adc:
      0019A5 CD 11 C5         [ 4] 4447 	call arg_list 
      0019A8 A1 02            [ 1] 4448 	cp a,#2	
      0019AA 27 03            [ 1] 4449 	jreq 1$
      0019AC CC 07 14         [ 2] 4450 	jp syntax_error 
      0019AF AE 00 02         [ 2] 4451 1$: ldw x,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0019B2 72 DE 00 19      [ 5] 4452 	ldw x,([dstkptr],x) ; on|off
      0019B6 5D               [ 2] 4453 	tnzw x 
      0019B7 27 1C            [ 1] 4454 	jreq 2$ 
      0019B9 72 CE 00 19      [ 5] 4455 	ldw x,[dstkptr] ; channel
      0019BD 9F               [ 1] 4456 	ld a,xl
      0019BE A4 07            [ 1] 4457 	and a,#7
      0019C0 4E               [ 1] 4458 	swap a 
      0019C1 C7 54 01         [ 1] 4459 	ld ADC_CR1,a
      0019C4 72 16 54 02      [ 1] 4460 	bset ADC_CR2,#ADC_CR2_ALIGN ; right 
      0019C8 72 10 54 01      [ 1] 4461 	bset ADC_CR1,#ADC_CR1_ADON 
      0019CC                       4462 	_usec_dly 7 
      0019CC AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0019CF 5A               [ 2]    2     decw x
      0019D0 9D               [ 1]    3     nop 
      0019D1 26 FA            [ 1]    4     jrne .-4
      0019D3 20 04            [ 2] 4463 	jra 3$
      0019D5 72 11 54 01      [ 1] 4464 2$: bres ADC_CR1,#ADC_CR1_ADON 
      0019D9 AE 00 02         [ 2] 4465 3$:	ldw x,#2
      0019DC CD 10 06         [ 4] 4466 	call ddrop_n 
      0019DF 81               [ 4] 4467 	ret
                                   4468 
                                   4469 ;-----------------------------
                                   4470 ; BASIC: RDADC(channel)
                                   4471 ; read adc channel 
                                   4472 ; output:
                                   4473 ;   A 		TK_INTGR 
                                   4474 ;   X 		value 
                                   4475 ;-----------------------------
      0019E0                       4476 read_adc:
      0019E0 A6 09            [ 1] 4477 	ld a,#TK_LPAREN 
      0019E2 CD 11 B8         [ 4] 4478 	call expect 
      0019E5 CD 07 FA         [ 4] 4479 	call next_token 
      0019E8 A1 03            [ 1] 4480 	cp a,#TK_INTGR 
      0019EA 27 03            [ 1] 4481 	jreq 1$
      0019EC CC 07 14         [ 2] 4482 	jp syntax_error
      0019EF 89               [ 2] 4483 1$: pushw x 
      0019F0 A6 0A            [ 1] 4484 	ld a,#TK_RPAREN 
      0019F2 CD 11 B8         [ 4] 4485 	call expect 
      0019F5 85               [ 2] 4486 	popw x 
      0019F6 A3 00 10         [ 2] 4487 	cpw x,#16 
      0019F9 25 05            [ 1] 4488 	jrult 2$
      0019FB A6 0A            [ 1] 4489 	ld a,#ERR_BAD_VALUE
      0019FD CC 07 16         [ 2] 4490 	jp tb_error 
      001A00 9F               [ 1] 4491 2$: ld a,xl
      001A01 C7 54 00         [ 1] 4492 	ld ADC_CSR,a 
      001A04 72 10 54 01      [ 1] 4493 	bset ADC_CR1,#ADC_CR1_ADON
      001A08 72 0F 54 00 FB   [ 2] 4494 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001A0D CE 54 04         [ 2] 4495 	ldw x,ADC_DRH 
      001A10 A6 03            [ 1] 4496 	ld a,#TK_INTGR
      001A12 81               [ 4] 4497 	ret 
                                   4498 
                                   4499 
                                   4500 ;-----------------------
                                   4501 ; BASIC: BREAK 
                                   4502 ; insert a breakpoint 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4503 ; in pogram. 
                                   4504 ; the program is resumed
                                   4505 ; with RUN 
                                   4506 ;-------------------------
      001A13                       4507 break:
      001A13 72 00 00 24 02   [ 2] 4508 	btjt flags,#FRUN,2$
      001A18 4F               [ 1] 4509 	clr a
      001A19 81               [ 4] 4510 	ret 
      001A1A                       4511 2$:	 
                                   4512 ; create space on cstack to save context 
      001A1A AE 1A 44         [ 2] 4513 	ldw x,#break_point 
      001A1D CD 01 B0         [ 4] 4514 	call puts 
      001A20                       4515 	_drop 2 ;drop return address 
      001A20 5B 02            [ 2]    1     addw sp,#2 
      001A22                       4516 	_vars CTXT_SIZE ; context size 
      001A22 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001A24 CD 16 68         [ 4] 4517 	call save_context 
      001A27 AE 16 C8         [ 2] 4518 	ldw x,#tib 
      001A2A CF 00 03         [ 2] 4519 	ldw basicptr,x
      001A2D 7F               [ 1] 4520 	clr (x)
      001A2E 72 5F 00 02      [ 1] 4521 	clr count  
      001A32 5F               [ 1] 4522 	clrw x 
      001A33 CF 00 05         [ 2] 4523 	ldw lineno,x 
      001A36 CF 00 00         [ 2] 4524 	ldw in.w,x
      001A39 72 11 00 24      [ 1] 4525 	bres flags,#FRUN 
      001A3D 72 18 00 24      [ 1] 4526 	bset flags,#FBREAK
      001A41 CC 07 CA         [ 2] 4527 	jp interp_loop 
      001A44 0A 62 72 65 61 6B 20  4528 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4529 
                                   4530 ;-----------------------
                                   4531 ; BASIC: NEW
                                   4532 ; from command line only 
                                   4533 ; free program memory
                                   4534 ; and clear variables 
                                   4535 ;------------------------
      001A62                       4536 new: 
      001A62 72 01 00 24 02   [ 2] 4537 	btjf flags,#FRUN,0$ 
      001A67 4F               [ 1] 4538 	clr a 
      001A68 81               [ 4] 4539 	ret 
      001A69                       4540 0$:	
      001A69 CD 05 E2         [ 4] 4541 	call clear_basic 
      001A6C 81               [ 4] 4542 	ret 
                                   4543 	 
                                   4544 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4545 ;   file system routines
                                   4546 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4547 
                                   4548 ;--------------------
                                   4549 ; input:
                                   4550 ;   X     increment 
                                   4551 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4552 ;   farptr  incremented 
                                   4553 ;---------------------
      001A6D                       4554 incr_farptr:
      001A6D 72 BB 00 14      [ 2] 4555 	addw x,farptr+1 
      001A71 24 04            [ 1] 4556 	jrnc 1$
      001A73 72 5C 00 13      [ 1] 4557 	inc farptr 
      001A77 CF 00 14         [ 2] 4558 1$:	ldw farptr+1,x  
      001A7A 81               [ 4] 4559 	ret 
                                   4560 
                                   4561 ;------------------------------
                                   4562 ; extended flash memory used as FLASH_DRIVE 
                                   4563 ; seek end of used flash drive   
                                   4564 ; starting at 0x10000 address.
                                   4565 ; 4 consecutives 0 bytes signal free space. 
                                   4566 ; input:
                                   4567 ;	none
                                   4568 ; output:
                                   4569 ;   ffree     free_addr| 0 if memory full.
                                   4570 ;------------------------------
      001A7B                       4571 seek_fdrive:
                                   4572 ; start scan at 0x10000 address 
      001A7B A6 01            [ 1] 4573 	ld a,#1
      001A7D C7 00 13         [ 1] 4574 	ld farptr,a 
      001A80 5F               [ 1] 4575 	clrw x 
      001A81 CF 00 14         [ 2] 4576 	ldw farptr+1,x 
      001A84                       4577 1$:
      001A84 AE 00 03         [ 2] 4578 	ldw x,#3  
      001A87 92 AF 00 13      [ 5] 4579 2$:	ldf a,([farptr],x) 
      001A8B 26 05            [ 1] 4580 	jrne 3$
      001A8D 5A               [ 2] 4581 	decw x
      001A8E 2A F7            [ 1] 4582 	jrpl 2$
      001A90 20 19            [ 2] 4583 	jra 4$ 
      001A92 5C               [ 1] 4584 3$:	incw x 
      001A93 CD 1A 6D         [ 4] 4585 	call incr_farptr
      001A96 AE 02 7F         [ 2] 4586 	ldw x,#0x27f 
      001A99 C3 00 13         [ 2] 4587 	cpw x,farptr
      001A9C 2A E6            [ 1] 4588 	jrpl 1$
                                   4589 ; drive full 
      001A9E 72 5F 00 16      [ 1] 4590 	clr ffree 
      001AA2 72 5F 00 17      [ 1] 4591 	clr ffree+1 
      001AA6 72 5F 00 18      [ 1] 4592 	clr ffree+2 
      001AAA 81               [ 4] 4593 	ret
      001AAB                       4594 4$: ; copy farptr to ffree	 
      001AAB CE 00 13         [ 2] 4595 	ldw x,farptr 
      001AAE C6 00 15         [ 1] 4596 	ld a,farptr+2 
      001AB1 CF 00 16         [ 2] 4597 	ldw ffree,x 
      001AB4 C7 00 18         [ 1] 4598 	ld ffree+2,a  
      001AB7 81               [ 4] 4599 	ret 
                                   4600 
                                   4601 ;-----------------------
                                   4602 ; compare file name 
                                   4603 ; with name pointed by Y  
                                   4604 ; input:
                                   4605 ;   farptr   file name 
                                   4606 ;   Y        target name 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4607 ; output:
                                   4608 ;   farptr 	 at file_name
                                   4609 ;   X 		 farptr[x] point at size field  
                                   4610 ;   Carry    0|1 no match|match  
                                   4611 ;----------------------
      001AB8                       4612 cmp_name:
      001AB8 5F               [ 1] 4613 	clrw x
      001AB9 92 AF 00 13      [ 5] 4614 1$:	ldf a,([farptr],x)
      001ABD 90 F1            [ 1] 4615 	cp a,(y)
      001ABF 26 08            [ 1] 4616 	jrne 4$
      001AC1 4D               [ 1] 4617 	tnz a 
      001AC2 27 12            [ 1] 4618 	jreq 9$ 
      001AC4 5C               [ 1] 4619     incw x 
      001AC5 90 5C            [ 1] 4620 	incw y 
      001AC7 20 F0            [ 2] 4621 	jra 1$
      001AC9                       4622 4$: ;no match 
      001AC9 4D               [ 1] 4623 	tnz a 
      001ACA 27 07            [ 1] 4624 	jreq 5$
      001ACC 5C               [ 1] 4625 	incw x 
      001ACD 92 AF 00 13      [ 5] 4626 	ldf a,([farptr],x)
      001AD1 20 F6            [ 2] 4627 	jra 4$  
      001AD3 5C               [ 1] 4628 5$:	incw x ; farptr[x] point at 'size' field 
      001AD4 98               [ 1] 4629 	rcf 
      001AD5 81               [ 4] 4630 	ret
      001AD6                       4631 9$: ; match  
      001AD6 5C               [ 1] 4632 	incw x  ; farptr[x] at 'size' field 
      001AD7 99               [ 1] 4633 	scf 
      001AD8 81               [ 4] 4634 	ret 
                                   4635 
                                   4636 ;-----------------------
                                   4637 ; search file in 
                                   4638 ; flash memory 
                                   4639 ; input:
                                   4640 ;   Y       file name  
                                   4641 ; output:
                                   4642 ;   farptr  addr at name|0
                                   4643 ;-----------------------
                           000001  4644 	FSIZE=1
                           000003  4645 	YSAVE=3
                           000004  4646 	VSIZE=4 
      001AD9                       4647 search_file: 
      001AD9                       4648 	_vars VSIZE
      001AD9 52 04            [ 2]    1     sub sp,#VSIZE 
      001ADB 17 03            [ 2] 4649 	ldw (YSAVE,sp),y  
      001ADD 5F               [ 1] 4650 	clrw x 
      001ADE CF 00 14         [ 2] 4651 	ldw farptr+1,x 
      001AE1 35 01 00 13      [ 1] 4652 	mov farptr,#1
      001AE5                       4653 1$:	
                                   4654 ; check if farptr is after any file 
                                   4655 ; if  0 then so.
      001AE5 92 BC 00 13      [ 5] 4656 	ldf a,[farptr]
      001AE9 27 25            [ 1] 4657 	jreq 6$
      001AEB 5F               [ 1] 4658 2$: clrw x 	
      001AEC 16 03            [ 2] 4659 	ldw y,(YSAVE,sp) 
      001AEE CD 1A B8         [ 4] 4660 	call cmp_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001AF1 25 2D            [ 1] 4661 	jrc 9$
      001AF3 92 AF 00 13      [ 5] 4662 	ldf a,([farptr],x)
      001AF7 6B 01            [ 1] 4663 	ld (FSIZE,sp),a 
      001AF9 5C               [ 1] 4664 	incw x 
      001AFA 92 AF 00 13      [ 5] 4665 	ldf a,([farptr],x)
      001AFE 6B 02            [ 1] 4666 	ld (FSIZE+1,sp),a 
      001B00 5C               [ 1] 4667 	incw x 
      001B01 72 FB 01         [ 2] 4668 	addw x,(FSIZE,sp) ; count to skip 
      001B04 5C               [ 1] 4669 	incw x ; skip over EOF marker 
      001B05 CD 1A 6D         [ 4] 4670 	call incr_farptr ; now at next file 'name_field'
      001B08 AE 02 80         [ 2] 4671 	ldw x,#0x280
      001B0B C3 00 13         [ 2] 4672 	cpw x,farptr 
      001B0E 2A D5            [ 1] 4673 	jrpl 1$
      001B10                       4674 6$: ; file not found 
      001B10 72 5F 00 13      [ 1] 4675 	clr farptr
      001B14 72 5F 00 14      [ 1] 4676 	clr farptr+1 
      001B18 72 5F 00 15      [ 1] 4677 	clr farptr+2 
      001B1C                       4678 	_drop VSIZE 
      001B1C 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B1E 98               [ 1] 4679 	rcf
      001B1F 81               [ 4] 4680 	ret
      001B20                       4681 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001B20                       4682 	_drop VSIZE 
      001B20 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B22 99               [ 1] 4683 	scf 	
      001B23 81               [ 4] 4684 	ret
                                   4685 
                                   4686 ;--------------------------------
                                   4687 ; BASIC: SAVE "name" 
                                   4688 ; save text program in 
                                   4689 ; flash memory used as 
                                   4690 ;--------------------------------
                           000001  4691 	BSIZE=1
                           000003  4692 	NAMEPTR=3
                           000004  4693 	VSIZE=4
      001B24                       4694 save:
      001B24 72 01 00 24 05   [ 2] 4695 	btjf flags,#FRUN,0$ 
      001B29 A6 07            [ 1] 4696 	ld a,#ERR_CMD_ONLY 
      001B2B CC 07 16         [ 2] 4697 	jp tb_error
      001B2E                       4698 0$:	 
      001B2E CE 00 1D         [ 2] 4699 	ldw x,txtend 
      001B31 72 B0 00 1B      [ 2] 4700 	subw x,txtbgn
      001B35 26 01            [ 1] 4701 	jrne 1$
                                   4702 ; nothing to save 
      001B37 81               [ 4] 4703 	ret 
      001B38                       4704 1$:	
      001B38                       4705 	_vars VSIZE 
      001B38 52 04            [ 2]    1     sub sp,#VSIZE 
      001B3A 1F 01            [ 2] 4706 	ldw (BSIZE,sp),x 
      001B3C CD 07 FA         [ 4] 4707 	call next_token	
      001B3F A1 08            [ 1] 4708 	cp a,#TK_QSTR
      001B41 27 03            [ 1] 4709 	jreq 2$
      001B43 CC 07 14         [ 2] 4710 	jp syntax_error
      001B46                       4711 2$: 
      001B46 90 CE 00 03      [ 2] 4712 	ldw y,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B4A 72 B9 00 00      [ 2] 4713 	addw y,in.w
      001B4E 17 03            [ 2] 4714 	ldw (NAMEPTR,sp),y  
      001B50 55 00 02 00 01   [ 1] 4715 	mov in,count 
                                   4716 ; check if enough free space 
      001B55 93               [ 1] 4717 	ldw x,y 
      001B56 CD 02 72         [ 4] 4718 	call strlen 
      001B59 1C 00 03         [ 2] 4719 	addw x,#3 
      001B5C 72 FB 01         [ 2] 4720 	addw x,(BSIZE,sp)
      001B5F 72 5D 00 16      [ 1] 4721 	tnz ffree 
      001B63 26 0B            [ 1] 4722 	jrne 21$
      001B65 72 B0 00 17      [ 2] 4723 	subw x,ffree+1 
      001B69 23 05            [ 2] 4724 	jrule 21$
      001B6B A6 01            [ 1] 4725 	ld a,#ERR_MEM_FULL 
      001B6D CC 07 16         [ 2] 4726 	jp tb_error
      001B70                       4727 21$: 
                                   4728 ; check for existing file of that name 
      001B70 16 03            [ 2] 4729 	ldw y,(NAMEPTR,sp)	
      001B72 CD 1A D9         [ 4] 4730 	call search_file 
      001B75 24 05            [ 1] 4731 	jrnc 3$ 
      001B77 A6 08            [ 1] 4732 	ld a,#ERR_DUPLICATE 
      001B79 CC 07 16         [ 2] 4733 	jp tb_error 
      001B7C                       4734 3$:	;** write file name to flash **
      001B7C CE 00 16         [ 2] 4735 	ldw x,ffree 
      001B7F C6 00 18         [ 1] 4736 	ld a,ffree+2 
      001B82 CF 00 13         [ 2] 4737 	ldw farptr,x 
      001B85 C7 00 15         [ 1] 4738 	ld farptr+2,a 
      001B88 1E 03            [ 2] 4739 	ldw x,(NAMEPTR,sp)  
      001B8A CD 02 72         [ 4] 4740 	call strlen 
      001B8D 5C               [ 1] 4741 	incw  x
      001B8E 1F 01            [ 2] 4742 	ldw (BSIZE,sp),x  
      001B90 5F               [ 1] 4743 	clrw x   
      001B91 16 03            [ 2] 4744 	ldw y,(NAMEPTR,sp)
      001B93 CD 01 51         [ 4] 4745 	call write_block  
                                   4746 ;** write file length after name **
      001B96 CE 00 1D         [ 2] 4747 	ldw x,txtend 
      001B99 72 B0 00 1B      [ 2] 4748 	subw x,txtbgn
      001B9D 1F 01            [ 2] 4749 	ldw (BSIZE,sp),x 
      001B9F 5F               [ 1] 4750 	clrw x 
      001BA0 7B 01            [ 1] 4751 	ld a,(1,sp)
      001BA2 CD 00 DC         [ 4] 4752 	call write_byte 
      001BA5 5C               [ 1] 4753 	incw x 
      001BA6 7B 02            [ 1] 4754 	ld a,(2,sp)
      001BA8 CD 00 DC         [ 4] 4755 	call write_byte
      001BAB 5C               [ 1] 4756 	incw x  
      001BAC CD 1A 6D         [ 4] 4757 	call incr_farptr ; move farptr after SIZE field 
                                   4758 ;** write BASIC text **
                                   4759 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001BAF 1E 01            [ 2] 4760 	ldw x,(BSIZE,sp)
      001BB1 89               [ 2] 4761 	pushw x ; write_block argument 
      001BB2 5F               [ 1] 4762 	clrw x 
      001BB3 90 CE 00 1B      [ 2] 4763 	ldw y,txtbgn  ; BASIC text to save 
      001BB7 CD 01 51         [ 4] 4764 	call write_block 
      001BBA                       4765 	_drop 2 ;  drop write_block argument  
      001BBA 5B 02            [ 2]    1     addw sp,#2 
                                   4766 ; write en end of file marker 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001BBC AE 00 01         [ 2] 4767 	ldw x,#1
      001BBF A6 FF            [ 1] 4768 	ld a,#EOF  
      001BC1 CD 00 DC         [ 4] 4769 	call write_byte 
      001BC4 CD 1A 6D         [ 4] 4770 	call incr_farptr
                                   4771 ; save farptr in ffree
      001BC7 CE 00 13         [ 2] 4772 	ldw x,farptr 
      001BCA C6 00 15         [ 1] 4773 	ld a,farptr+2 
      001BCD CF 00 16         [ 2] 4774 	ldw ffree,x 
      001BD0 C7 00 18         [ 1] 4775 	ld ffree+2,a
                                   4776 ;write 4 zero bytes as an end of all files marker 
      001BD3 5F               [ 1] 4777     clrw x 
      001BD4 4B 04            [ 1] 4778 	push #4 
      001BD6                       4779 4$:
      001BD6 4F               [ 1] 4780 	clr a 
      001BD7 CD 00 DC         [ 4] 4781 	call write_byte 
      001BDA 5C               [ 1] 4782 	incw x 
      001BDB 0A 01            [ 1] 4783 	dec (1,sp)
      001BDD 26 F7            [ 1] 4784 	jrne 4$
      001BDF 84               [ 1] 4785 5$: pop a 
                                   4786 ; display saved size  
      001BE0 1E 01            [ 2] 4787 	ldw x,(BSIZE,sp) 
      001BE2 CD 09 99         [ 4] 4788 	call print_int 
      001BE5                       4789 	_drop VSIZE 
      001BE5 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BE7 81               [ 4] 4790 	ret 
                                   4791 
                                   4792 
                                   4793 ;------------------------
                                   4794 ; BASIC: LOAD "file" 
                                   4795 ; load file to RAM 
                                   4796 ; for execution 
                                   4797 ;------------------------
      001BE8                       4798 load:
      001BE8 72 01 00 24 07   [ 2] 4799 	btjf flags,#FRUN,0$ 
      001BED 27 05            [ 1] 4800 	jreq 0$ 
      001BEF A6 07            [ 1] 4801 	ld a,#ERR_CMD_ONLY 
      001BF1 CC 07 16         [ 2] 4802 	jp tb_error 
      001BF4                       4803 0$:	
      001BF4 CD 07 FA         [ 4] 4804 	call next_token 
      001BF7 A1 08            [ 1] 4805 	cp a,#TK_QSTR
      001BF9 27 03            [ 1] 4806 	jreq 1$
      001BFB CC 07 14         [ 2] 4807 	jp syntax_error 
      001BFE                       4808 1$:	
      001BFE 90 CE 00 03      [ 2] 4809 	ldw y,basicptr
      001C02 72 B9 00 00      [ 2] 4810 	addw y,in.w 
      001C06 55 00 02 00 01   [ 1] 4811 	mov in,count 
      001C0B CD 1A D9         [ 4] 4812 	call search_file 
      001C0E 25 05            [ 1] 4813 	jrc 2$ 
      001C10 A6 09            [ 1] 4814 	ld a,#ERR_NOT_FILE
      001C12 CC 07 16         [ 2] 4815 	jp tb_error  
      001C15                       4816 2$:	
      001C15 CD 1A 6D         [ 4] 4817 	call incr_farptr  
      001C18 CD 05 E2         [ 4] 4818 	call clear_basic  
      001C1B 5F               [ 1] 4819 	clrw x
      001C1C 92 AF 00 13      [ 5] 4820 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C20 90 95            [ 1] 4821 	ld yh,a 
      001C22 5C               [ 1] 4822 	incw x  
      001C23 92 AF 00 13      [ 5] 4823 	ldf a,([farptr],x)
      001C27 5C               [ 1] 4824 	incw x 
      001C28 90 97            [ 1] 4825 	ld yl,a 
      001C2A 72 B9 00 1B      [ 2] 4826 	addw y,txtbgn
      001C2E 90 CF 00 1D      [ 2] 4827 	ldw txtend,y
      001C32 90 CE 00 1B      [ 2] 4828 	ldw y,txtbgn
      001C36                       4829 3$:	; load BASIC text 	
      001C36 92 AF 00 13      [ 5] 4830 	ldf a,([farptr],x)
      001C3A 90 F7            [ 1] 4831 	ld (y),a 
      001C3C 5C               [ 1] 4832 	incw x 
      001C3D 90 5C            [ 1] 4833 	incw y 
      001C3F 90 C3 00 1D      [ 2] 4834 	cpw y,txtend 
      001C43 2B F1            [ 1] 4835 	jrmi 3$
                                   4836 ; print loaded size 	 
      001C45 CE 00 1D         [ 2] 4837 	ldw x,txtend 
      001C48 72 B0 00 1B      [ 2] 4838 	subw x,txtbgn
      001C4C CD 09 99         [ 4] 4839 	call print_int 
      001C4F 81               [ 4] 4840 	ret 
                                   4841 
                                   4842 ;-----------------------------------
                                   4843 ; BASIC: FORGET ["file_name"] 
                                   4844 ; erase file_name and all others 
                                   4845 ; after it. 
                                   4846 ; without argument erase all files 
                                   4847 ;-----------------------------------
      001C50                       4848 forget:
      001C50 CD 07 FA         [ 4] 4849 	call next_token 
      001C53 A1 00            [ 1] 4850 	cp a,#TK_NONE 
      001C55 27 26            [ 1] 4851 	jreq 3$ 
      001C57 A1 08            [ 1] 4852 	cp a,#TK_QSTR
      001C59 27 03            [ 1] 4853 	jreq 1$
      001C5B CC 07 14         [ 2] 4854 	jp syntax_error
      001C5E 90 CE 00 03      [ 2] 4855 1$: ldw y,basicptr
      001C62 72 B9 00 00      [ 2] 4856 	addw y,in.w
      001C66 55 00 02 00 01   [ 1] 4857 	mov in,count 
      001C6B CD 1A D9         [ 4] 4858 	call search_file
      001C6E 25 05            [ 1] 4859 	jrc 2$
      001C70 A6 09            [ 1] 4860 	ld a,#ERR_NOT_FILE 
      001C72 CC 07 16         [ 2] 4861 	jp tb_error 
      001C75                       4862 2$: 
      001C75 CE 00 13         [ 2] 4863 	ldw x,farptr
      001C78 C6 00 15         [ 1] 4864 	ld a,farptr+2
      001C7B 20 0A            [ 2] 4865 	jra 4$ 
      001C7D                       4866 3$: ; forget all files 
      001C7D AE 00 64         [ 2] 4867 	ldw x,#100
      001C80 4F               [ 1] 4868 	clr a 
      001C81 CF 00 13         [ 2] 4869 	ldw farptr,x 
      001C84 C7 00 15         [ 1] 4870 	ld farptr+2,a 
      001C87                       4871 4$:
      001C87 CF 00 16         [ 2] 4872 	ldw ffree,x 
      001C8A C7 00 18         [ 1] 4873 	ld ffree+2,a 
      001C8D 4B 04            [ 1] 4874 	push #4
      001C8F 5F               [ 1] 4875 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C90                       4876 5$: 
      001C90 4F               [ 1] 4877 	clr a  
      001C91 CD 00 DC         [ 4] 4878 	call write_byte 
      001C94 5C               [ 1] 4879 	incw x 
      001C95 0A 01            [ 1] 4880 	dec (1,sp)
      001C97 26 F7            [ 1] 4881 	jrne 5$	
      001C99 84               [ 1] 4882 6$: pop a 
      001C9A 81               [ 4] 4883 	ret 
                                   4884 
                                   4885 ;----------------------
                                   4886 ; BASIC: DIR 
                                   4887 ; list saved files 
                                   4888 ;----------------------
                           000001  4889 	COUNT=1 ; files counter 
                           000002  4890 	VSIZE=2 
      001C9B                       4891 directory:
      001C9B                       4892 	_vars VSIZE 
      001C9B 52 02            [ 2]    1     sub sp,#VSIZE 
      001C9D 5F               [ 1] 4893 	clrw x 
      001C9E 1F 01            [ 2] 4894 	ldw (COUNT,sp),x 
      001CA0 CF 00 14         [ 2] 4895 	ldw farptr+1,x 
      001CA3 35 01 00 13      [ 1] 4896 	mov farptr,#1 
      001CA7                       4897 dir_loop:
      001CA7 5F               [ 1] 4898 	clrw x 
      001CA8 92 AF 00 13      [ 5] 4899 	ldf a,([farptr],x)
      001CAC 27 39            [ 1] 4900 	jreq 8$ 
      001CAE                       4901 1$: ;name loop 	
      001CAE 92 AF 00 13      [ 5] 4902 	ldf a,([farptr],x)
      001CB2 27 06            [ 1] 4903 	jreq 2$ 
      001CB4 CD 01 9E         [ 4] 4904 	call putc 
      001CB7 5C               [ 1] 4905 	incw x 
      001CB8 20 F4            [ 2] 4906 	jra 1$
      001CBA 5C               [ 1] 4907 2$: incw x ; skip ending 0. 
      001CBB A6 20            [ 1] 4908 	ld a,#SPACE 
      001CBD CD 01 9E         [ 4] 4909 	call putc 
                                   4910 ; get file size 	
      001CC0 92 AF 00 13      [ 5] 4911 	ldf a,([farptr],x)
      001CC4 90 95            [ 1] 4912 	ld yh,a 
      001CC6 5C               [ 1] 4913 	incw x 
      001CC7 92 AF 00 13      [ 5] 4914 	ldf a,([farptr],x)
      001CCB 5C               [ 1] 4915 	incw x 
      001CCC 90 97            [ 1] 4916 	ld yl,a 
      001CCE 90 89            [ 2] 4917 	pushw y 
      001CD0 72 FB 01         [ 2] 4918 	addw x,(1,sp)
      001CD3 5C               [ 1] 4919 	incw x ; skip EOF marker 
                                   4920 ; skip to next file 
      001CD4 CD 1A 6D         [ 4] 4921 	call incr_farptr 
                                   4922 ; print file size 
      001CD7 85               [ 2] 4923 	popw x ; file size 
      001CD8 CD 09 99         [ 4] 4924 	call print_int 
      001CDB A6 0D            [ 1] 4925 	ld a,#CR 
      001CDD CD 01 9E         [ 4] 4926 	call putc
      001CE0 1E 01            [ 2] 4927 	ldw x,(COUNT,sp)
      001CE2 5C               [ 1] 4928 	incw x
      001CE3 1F 01            [ 2] 4929 	ldw (COUNT,sp),x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001CE5 20 C0            [ 2] 4930 	jra dir_loop 
      001CE7                       4931 8$: ; print number of files 
      001CE7 1E 01            [ 2] 4932 	ldw x,(COUNT,sp)
      001CE9 CD 09 99         [ 4] 4933 	call print_int 
      001CEC AE 1D 1C         [ 2] 4934 	ldw x,#file_count 
      001CEF CD 01 B0         [ 4] 4935 	call puts  
                                   4936 ; print drive free space 	
      001CF2 A6 FF            [ 1] 4937 	ld a,#0xff 
      001CF4 C0 00 18         [ 1] 4938 	sub a,ffree+2 
      001CF7 C7 00 0A         [ 1] 4939 	ld acc8,a 
      001CFA A6 7F            [ 1] 4940 	ld a,#0x7f 
      001CFC C2 00 17         [ 1] 4941 	sbc a,ffree+1 
      001CFF C7 00 09         [ 1] 4942 	ld acc16,a 
      001D02 A6 02            [ 1] 4943 	ld a,#2 
      001D04 C2 00 16         [ 1] 4944 	sbc a,ffree 
      001D07 C7 00 08         [ 1] 4945 	ld acc24,a 
      001D0A 5F               [ 1] 4946 	clrw x  
      001D0B A6 06            [ 1] 4947 	ld a,#6 
      001D0D 97               [ 1] 4948 	ld xl,a 
      001D0E A6 0A            [ 1] 4949 	ld a,#10 
      001D10 CD 09 51         [ 4] 4950 	call prti24 
      001D13 AE 1D 24         [ 2] 4951 	ldw x,#drive_free
      001D16 CD 01 B0         [ 4] 4952 	call puts 
      001D19                       4953 	_drop VSIZE 
      001D19 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D1B 81               [ 4] 4954 	ret
      001D1C 20 66 69 6C 65 73 0A  4955 file_count: .asciz " files\n"
             00
      001D24 20 62 79 74 65 73 20  4956 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4957 
                                   4958 ;---------------------
                                   4959 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4960 ; write 1 or more byte to FLASH or EEPROM
                                   4961 ; starting at address  
                                   4962 ; input:
                                   4963 ;   expr1  	is address 
                                   4964 ;   expr2   is byte to write
                                   4965 ; output:
                                   4966 ;   none 
                                   4967 ;---------------------
                           000001  4968 	ADDR=1
                           000002  4969 	VSIZ=2 
      001D31                       4970 write:
      001D31                       4971 	_vars VSIZE 
      001D31 52 02            [ 2]    1     sub sp,#VSIZE 
      001D33 72 5F 00 13      [ 1] 4972 	clr farptr ; expect 16 bits address 
      001D37 CD 12 BF         [ 4] 4973 	call expression
      001D3A A1 03            [ 1] 4974 	cp a,#TK_INTGR 
      001D3C 27 03            [ 1] 4975 	jreq 0$
      001D3E CC 07 14         [ 2] 4976 	jp syntax_error
      001D41 1F 01            [ 2] 4977 0$: ldw (ADDR,sp),x 
      001D43 CD 07 FA         [ 4] 4978 	call next_token 
      001D46 A1 0B            [ 1] 4979 	cp a,#TK_COMMA 
      001D48 27 02            [ 1] 4980 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D4A 20 19            [ 2] 4981 	jra 9$ 
      001D4C CD 12 BF         [ 4] 4982 1$:	call expression
      001D4F A1 03            [ 1] 4983 	cp a,#TK_INTGR
      001D51 27 03            [ 1] 4984 	jreq 2$
      001D53 CC 07 14         [ 2] 4985 	jp syntax_error
      001D56 9F               [ 1] 4986 2$:	ld a,xl 
      001D57 1E 01            [ 2] 4987 	ldw x,(ADDR,sp) 
      001D59 CF 00 14         [ 2] 4988 	ldw farptr+1,x 
      001D5C 5F               [ 1] 4989 	clrw x 
      001D5D CD 00 DC         [ 4] 4990 	call write_byte
      001D60 1E 01            [ 2] 4991 	ldw x,(ADDR,sp)
      001D62 5C               [ 1] 4992 	incw x 
      001D63 20 DC            [ 2] 4993 	jra 0$ 
      001D65                       4994 9$:
      001D65                       4995 	_drop VSIZE
      001D65 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D67 81               [ 4] 4996 	ret 
                                   4997 
                                   4998 
                                   4999 ;---------------------
                                   5000 ;BASIC: CHAR(expr)
                                   5001 ; évaluate expression 
                                   5002 ; and take the 7 least 
                                   5003 ; bits as ASCII character
                                   5004 ;---------------------
      001D68                       5005 char:
      001D68 A6 09            [ 1] 5006 	ld a,#TK_LPAREN 
      001D6A CD 11 B8         [ 4] 5007 	call expect 
      001D6D CD 13 03         [ 4] 5008 	call relation 
      001D70 A1 03            [ 1] 5009 	cp a,#TK_INTGR 
      001D72 27 03            [ 1] 5010 	jreq 1$
      001D74 CC 07 14         [ 2] 5011 	jp syntax_error
      001D77 89               [ 2] 5012 1$:	pushw x 
      001D78 A6 0A            [ 1] 5013 	ld a,#TK_RPAREN 
      001D7A CD 11 B8         [ 4] 5014 	call expect
      001D7D 85               [ 2] 5015 	popw x  
      001D7E 9F               [ 1] 5016 	ld a,xl 
      001D7F A4 7F            [ 1] 5017 	and a,#0x7f 
      001D81 97               [ 1] 5018 	ld xl,a
      001D82 A6 02            [ 1] 5019 	ld a,#TK_CHAR
      001D84 81               [ 4] 5020 	ret
                                   5021 
                                   5022 ;---------------------
                                   5023 ; BASIC: ASC(string|char)
                                   5024 ; extract first character 
                                   5025 ; of string argument 
                                   5026 ; return it as TK_INTGR 
                                   5027 ;---------------------
      001D85                       5028 ascii:
      001D85 A6 09            [ 1] 5029 	ld a,#TK_LPAREN
      001D87 CD 11 B8         [ 4] 5030 	call expect 
      001D8A CD 07 FA         [ 4] 5031 	call next_token 
      001D8D A1 08            [ 1] 5032 	cp a,#TK_QSTR 
      001D8F 27 07            [ 1] 5033 	jreq 1$
      001D91 A1 02            [ 1] 5034 	cp a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001D93 27 06            [ 1] 5035 	jreq 2$ 
      001D95 CC 07 14         [ 2] 5036 	jp syntax_error
      001D98                       5037 1$: 
      001D98 F6               [ 1] 5038 	ld a,(x)
      001D99 20 01            [ 2] 5039 	jra 3$
      001D9B                       5040 2$: 
      001D9B 9F               [ 1] 5041 	ld a,xl 
      001D9C 97               [ 1] 5042 3$:	ld xl,a 
      001D9D 4F               [ 1] 5043 	clr a  
      001D9E 95               [ 1] 5044 	ld xh,a 
      001D9F 89               [ 2] 5045 	pushw x  
      001DA0 A6 0A            [ 1] 5046 	ld a,#TK_RPAREN 
      001DA2 CD 11 B8         [ 4] 5047 	call expect 
      001DA5 85               [ 2] 5048 	popw x 
      001DA6 A6 03            [ 1] 5049 	ld a,#TK_INTGR 
      001DA8 81               [ 4] 5050 	ret 
                                   5051 
                                   5052 ;---------------------
                                   5053 ;BASIC: KEY
                                   5054 ; wait for a character 
                                   5055 ; received from STDIN 
                                   5056 ; input:
                                   5057 ;	none 
                                   5058 ; output:
                                   5059 ;	X 		ASCII character 
                                   5060 ;---------------------
      001DA9                       5061 key:
      001DA9 CD 01 A7         [ 4] 5062 	call getc 
      001DAC 5F               [ 1] 5063 	clrw x 
      001DAD 97               [ 1] 5064 	ld xl,a 
      001DAE A6 03            [ 1] 5065 	ld a,#TK_INTGR
      001DB0 81               [ 4] 5066 	ret
                                   5067 
                                   5068 ;----------------------
                                   5069 ; BASIC: QKEY
                                   5070 ; Return true if there 
                                   5071 ; is a character in 
                                   5072 ; waiting in STDIN 
                                   5073 ; input:
                                   5074 ;  none 
                                   5075 ; output:
                                   5076 ;   X 		0|1 
                                   5077 ;-----------------------
      001DB1                       5078 qkey: 
      001DB1 5F               [ 1] 5079 	clrw x 
      001DB2 72 0B 52 40 01   [ 2] 5080 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001DB7 5C               [ 1] 5081 	incw x 
      001DB8 A6 03            [ 1] 5082 9$: ld a,#TK_INTGR
      001DBA 81               [ 4] 5083 	ret 
                                   5084 
                                   5085 ;---------------------
                                   5086 ; BASIC: GPIO(expr,reg)
                                   5087 ; return gpio address 
                                   5088 ; expr {0..8}
                                   5089 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5090 ;   none 
                                   5091 ; output:
                                   5092 ;   X 		gpio register address
                                   5093 ;----------------------------
      001DBB                       5094 gpio:
      001DBB A6 09            [ 1] 5095 	ld a,#TK_LPAREN 
      001DBD CD 11 B8         [ 4] 5096 	call expect 
      001DC0 CD 11 C5         [ 4] 5097 	call arg_list
      001DC3 A1 02            [ 1] 5098 	cp a,#2
      001DC5 27 03            [ 1] 5099 	jreq 1$
      001DC7 CC 07 14         [ 2] 5100 	jp syntax_error  
      001DCA                       5101 1$:	
      001DCA A6 0A            [ 1] 5102 	ld a,#TK_RPAREN 
      001DCC CD 11 B8         [ 4] 5103 	call expect 
      001DCF AE 00 02         [ 2] 5104 	ldw x,#2
      001DD2 72 DE 00 19      [ 5] 5105 	ldw x,([dstkptr],x) ; port 
      001DD6 2B 1B            [ 1] 5106 	jrmi bad_port
      001DD8 A3 00 09         [ 2] 5107 	cpw x,#9
      001DDB 2A 16            [ 1] 5108 	jrpl bad_port
      001DDD A6 05            [ 1] 5109 	ld a,#5
      001DDF 42               [ 4] 5110 	mul x,a
      001DE0 1C 50 00         [ 2] 5111 	addw x,#GPIO_BASE 
      001DE3 89               [ 2] 5112 	pushw x 
      001DE4 CD 0F A2         [ 4] 5113 	call dpop 
      001DE7 72 FB 01         [ 2] 5114 	addw x,(1,sp)
      001DEA 1F 01            [ 2] 5115 	ldw (1,sp),x  
      001DEC CD 0F C9         [ 4] 5116 	call ddrop  
      001DEF 85               [ 2] 5117 	popw x 
      001DF0 A6 03            [ 1] 5118 	ld a,#TK_INTGR
      001DF2 81               [ 4] 5119 	ret
      001DF3                       5120 bad_port:
      001DF3 A6 0A            [ 1] 5121 	ld a,#ERR_BAD_VALUE
      001DF5 CC 07 16         [ 2] 5122 	jp tb_error
                                   5123 
                                   5124 ;----------------------
                                   5125 ; BASIC: ODR 
                                   5126 ; return offset of gpio
                                   5127 ; ODR register: 0
                                   5128 ; ---------------------
      001DF8                       5129 port_odr:
      001DF8 AE 00 00         [ 2] 5130 	ldw x,#GPIO_ODR
      001DFB A6 03            [ 1] 5131 	ld a,#TK_INTGR
      001DFD 81               [ 4] 5132 	ret
                                   5133 
                                   5134 ;----------------------
                                   5135 ; BASIC: IDR 
                                   5136 ; return offset of gpio
                                   5137 ; IDR register: 1
                                   5138 ; ---------------------
      001DFE                       5139 port_idr:
      001DFE AE 00 01         [ 2] 5140 	ldw x,#GPIO_IDR
      001E01 A6 03            [ 1] 5141 	ld a,#TK_INTGR
      001E03 81               [ 4] 5142 	ret
                                   5143 
                                   5144 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5145 ; BASIC: DDR 
                                   5146 ; return offset of gpio
                                   5147 ; DDR register: 2
                                   5148 ; ---------------------
      001E04                       5149 port_ddr:
      001E04 AE 00 02         [ 2] 5150 	ldw x,#GPIO_DDR
      001E07 A6 03            [ 1] 5151 	ld a,#TK_INTGR
      001E09 81               [ 4] 5152 	ret
                                   5153 
                                   5154 ;----------------------
                                   5155 ; BASIC: CRL  
                                   5156 ; return offset of gpio
                                   5157 ; CR1 register: 3
                                   5158 ; ---------------------
      001E0A                       5159 port_cr1:
      001E0A AE 00 03         [ 2] 5160 	ldw x,#GPIO_CR1
      001E0D A6 03            [ 1] 5161 	ld a,#TK_INTGR
      001E0F 81               [ 4] 5162 	ret
                                   5163 
                                   5164 ;----------------------
                                   5165 ; BASIC: CRH  
                                   5166 ; return offset of gpio
                                   5167 ; CR2 register: 4
                                   5168 ; ---------------------
      001E10                       5169 port_cr2:
      001E10 AE 00 04         [ 2] 5170 	ldw x,#GPIO_CR2
      001E13 A6 03            [ 1] 5171 	ld a,#TK_INTGR
      001E15 81               [ 4] 5172 	ret
                                   5173 
                                   5174 ;-------------------------
                                   5175 ; BASIC: UFLASH 
                                   5176 ; return user flash address
                                   5177 ; input:
                                   5178 ;  none 
                                   5179 ; output:
                                   5180 ;	A		TK_INTGR
                                   5181 ;   X 		user address 
                                   5182 ;---------------------------
      001E16                       5183 uflash:
      001E16 AE 21 80         [ 2] 5184 	ldw x,#user_space 
      001E19 A6 03            [ 1] 5185 	ld a,#TK_INTGR 
      001E1B 81               [ 4] 5186 	ret 
                                   5187 
                                   5188 ;-------------------------
                                   5189 ; BASIC: EEPROM 
                                   5190 ; return eeprom address
                                   5191 ; input:
                                   5192 ;  none 
                                   5193 ; output:
                                   5194 ;	A		TK_INTGR
                                   5195 ;   X 		eeprom address 
                                   5196 ;---------------------------
      001E1C                       5197 eeprom:
      001E1C AE 40 00         [ 2] 5198 	ldw x,#EEPROM_BASE 
      001E1F A6 03            [ 1] 5199 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E21 81               [ 4] 5200 	ret 
                                   5201 
                                   5202 ;---------------------
                                   5203 ; BASIC: USR(addr[,arg])
                                   5204 ; execute a function written 
                                   5205 ; in binary code.
                                   5206 ; binary fonction should 
                                   5207 ; return token attribute in A 
                                   5208 ; and value in X. 
                                   5209 ; input:
                                   5210 ;   addr	routine address 
                                   5211 ;   arg 	is an optional argument 
                                   5212 ; output:
                                   5213 ;   A 		token attribute 
                                   5214 ;   X       returned value 
                                   5215 ;---------------------
      001E22                       5216 usr:
      001E22 90 89            [ 2] 5217 	pushw y 	
      001E24 A6 09            [ 1] 5218 	ld a,#TK_LPAREN 
      001E26 CD 11 B8         [ 4] 5219 	call expect 
      001E29 CD 11 C5         [ 4] 5220 	call arg_list 
      001E2C A1 01            [ 1] 5221 	cp a,#1 
      001E2E 2A 03            [ 1] 5222 	jrpl 2$ 
      001E30 CC 07 14         [ 2] 5223 	jp syntax_error 
      001E33 A6 0A            [ 1] 5224 2$: ld a,#TK_RPAREN
      001E35 CD 11 B8         [ 4] 5225 	call expect 
      001E38 CD 0F A2         [ 4] 5226 	call dpop 
      001E3B A1 02            [ 1] 5227 	cp a,#2 
      001E3D 2B 05            [ 1] 5228 	jrmi 4$
      001E3F 90 93            [ 1] 5229 	ldw y,x ; y=arg 
      001E41 CD 0F A2         [ 4] 5230 	call dpop ;x=addr 
      001E44 51               [ 1] 5231 4$:	exgw y,x ; y=addr,x=arg 
      001E45 90 FD            [ 4] 5232 	call (y)
      001E47 90 85            [ 2] 5233 	popw y 
      001E49 81               [ 4] 5234 	ret 
                                   5235 
                                   5236 ;------------------------------
                                   5237 ; BASIC: BYE 
                                   5238 ; halt mcu in its lowest power mode 
                                   5239 ; wait for reset or external interrupt
                                   5240 ; do a cold start on wakeup.
                                   5241 ;------------------------------
      001E4A                       5242 bye:
      001E4A 72 0D 52 40 FB   [ 2] 5243 	btjf UART3_SR,#UART_SR_TC,.
      001E4F 8E               [10] 5244 	halt
      001E50 CC 05 57         [ 2] 5245 	jp cold_start  
                                   5246 
                                   5247 ;----------------------------------
                                   5248 ; BASIC: SLEEP 
                                   5249 ; halt mcu until reset or external
                                   5250 ; interrupt.
                                   5251 ; Resume progam after SLEEP command
                                   5252 ;----------------------------------
      001E53                       5253 sleep:
      001E53 72 0D 52 40 FB   [ 2] 5254 	btjf UART3_SR,#UART_SR_TC,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001E58 72 16 00 24      [ 1] 5255 	bset flags,#FSLEEP
      001E5C 8E               [10] 5256 	halt 
      001E5D 81               [ 4] 5257 	ret 
                                   5258 
                                   5259 ;-------------------------------
                                   5260 ; BASIC: PAUSE expr 
                                   5261 ; suspend execution for n msec.
                                   5262 ; input:
                                   5263 ;	none
                                   5264 ; output:
                                   5265 ;	none 
                                   5266 ;------------------------------
      001E5E                       5267 pause:
      001E5E CD 12 BF         [ 4] 5268 	call expression
      001E61 A1 03            [ 1] 5269 	cp a,#TK_INTGR
      001E63 27 03            [ 1] 5270 	jreq pause02 
      001E65 CC 07 14         [ 2] 5271 	jp syntax_error
      001E68                       5272 pause02: 
      001E68 5D               [ 2] 5273 1$: tnzw x 
      001E69 27 04            [ 1] 5274 	jreq 2$
      001E6B 8F               [10] 5275 	wfi 
      001E6C 5A               [ 2] 5276 	decw x 
      001E6D 26 F9            [ 1] 5277 	jrne 1$
      001E6F 4F               [ 1] 5278 2$:	clr a 
      001E70 81               [ 4] 5279 	ret 
                                   5280 
                                   5281 ;------------------------------
                                   5282 ; BASIC: TICKS
                                   5283 ; return msec ticks counter value 
                                   5284 ; input:
                                   5285 ; 	none 
                                   5286 ; output:
                                   5287 ;	X 		TK_INTGR
                                   5288 ;-------------------------------
      001E71                       5289 get_ticks:
      001E71 CE 00 0B         [ 2] 5290 	ldw x,ticks 
      001E74 A6 03            [ 1] 5291 	ld a,#TK_INTGR
      001E76 81               [ 4] 5292 	ret 
                                   5293 
                                   5294 
                                   5295 
                                   5296 ;------------------------------
                                   5297 ; BASIC: ABS(expr)
                                   5298 ; return absolute value of expr.
                                   5299 ; input:
                                   5300 ;   none
                                   5301 ; output:
                                   5302 ;   X     	positive integer
                                   5303 ;-------------------------------
      001E77                       5304 abs:
      001E77 A6 09            [ 1] 5305 	ld a,#TK_LPAREN
      001E79 CD 11 B8         [ 4] 5306 	call expect 
      001E7C CD 11 C5         [ 4] 5307 	call arg_list
      001E7F A1 01            [ 1] 5308 	cp a,#1 
      001E81 27 03            [ 1] 5309 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E83 CC 07 14         [ 2] 5310 	jp syntax_error
      001E86                       5311 0$:  
      001E86 A6 0A            [ 1] 5312 	ld a,#TK_RPAREN 
      001E88 CD 11 B8         [ 4] 5313 	call expect 
      001E8B CD 0F A2         [ 4] 5314     call dpop   
      001E8E 9E               [ 1] 5315 	ld a,xh 
      001E8F A5 80            [ 1] 5316 	bcp a,#0x80 
      001E91 27 01            [ 1] 5317 	jreq 2$ 
      001E93 50               [ 2] 5318 	negw x 
      001E94 A6 03            [ 1] 5319 2$: ld a,#TK_INTGR 
      001E96 81               [ 4] 5320 	ret 
                                   5321 
                                   5322 ;------------------------------
                                   5323 ; BASIC: RND(expr)
                                   5324 ; return random number 
                                   5325 ; between 1 and expr inclusive
                                   5326 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5327 ; input:
                                   5328 ; 	none 
                                   5329 ; output:
                                   5330 ;	X 		random positive integer 
                                   5331 ;------------------------------
      001E97                       5332 random:
      001E97 A6 09            [ 1] 5333 	ld a,#TK_LPAREN 
      001E99 CD 11 B8         [ 4] 5334 	call expect 
      001E9C CD 11 C5         [ 4] 5335 	call arg_list 
      001E9F A1 01            [ 1] 5336 	cp a,#1
      001EA1 27 03            [ 1] 5337 	jreq 1$
      001EA3 CC 07 14         [ 2] 5338 	jp syntax_error
      001EA6 A6 0A            [ 1] 5339 1$: ld a,#TK_RPAREN
      001EA8 CD 11 B8         [ 4] 5340 	call expect 
      001EAB CD 0F A2         [ 4] 5341 	call dpop 
      001EAE 89               [ 2] 5342 	pushw x 
      001EAF 9E               [ 1] 5343 	ld a,xh 
      001EB0 A5 80            [ 1] 5344 	bcp a,#0x80 
      001EB2 27 05            [ 1] 5345 	jreq 2$
      001EB4 A6 0A            [ 1] 5346 	ld a,#ERR_BAD_VALUE
      001EB6 CC 07 16         [ 2] 5347 	jp tb_error
      001EB9                       5348 2$: 
                                   5349 ; acc16=(x<<5)^x 
      001EB9 CE 00 0D         [ 2] 5350 	ldw x,seedx 
      001EBC 58               [ 2] 5351 	sllw x 
      001EBD 58               [ 2] 5352 	sllw x 
      001EBE 58               [ 2] 5353 	sllw x 
      001EBF 58               [ 2] 5354 	sllw x 
      001EC0 58               [ 2] 5355 	sllw x 
      001EC1 9E               [ 1] 5356 	ld a,xh 
      001EC2 C8 00 0D         [ 1] 5357 	xor a,seedx 
      001EC5 C7 00 09         [ 1] 5358 	ld acc16,a 
      001EC8 9F               [ 1] 5359 	ld a,xl 
      001EC9 C8 00 0E         [ 1] 5360 	xor a,seedx+1 
      001ECC C7 00 0A         [ 1] 5361 	ld acc8,a 
                                   5362 ; seedx=seedy 
      001ECF CE 00 0F         [ 2] 5363 	ldw x,seedy 
      001ED2 CF 00 0D         [ 2] 5364 	ldw seedx,x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   5365 ; seedy=seedy^(seedy>>1)
      001ED5 90 54            [ 2] 5366 	srlw y 
      001ED7 90 9E            [ 1] 5367 	ld a,yh 
      001ED9 C8 00 0F         [ 1] 5368 	xor a,seedy 
      001EDC C7 00 0F         [ 1] 5369 	ld seedy,a  
      001EDF 90 9F            [ 1] 5370 	ld a,yl 
      001EE1 C8 00 10         [ 1] 5371 	xor a,seedy+1 
      001EE4 C7 00 10         [ 1] 5372 	ld seedy+1,a 
                                   5373 ; acc16>>3 
      001EE7 CE 00 09         [ 2] 5374 	ldw x,acc16 
      001EEA 54               [ 2] 5375 	srlw x 
      001EEB 54               [ 2] 5376 	srlw x 
      001EEC 54               [ 2] 5377 	srlw x 
                                   5378 ; x=acc16^x 
      001EED 9E               [ 1] 5379 	ld a,xh 
      001EEE C8 00 09         [ 1] 5380 	xor a,acc16 
      001EF1 95               [ 1] 5381 	ld xh,a 
      001EF2 9F               [ 1] 5382 	ld a,xl 
      001EF3 C8 00 0A         [ 1] 5383 	xor a,acc8 
      001EF6 97               [ 1] 5384 	ld xl,a 
                                   5385 ; seedy=x^seedy 
      001EF7 C8 00 10         [ 1] 5386 	xor a,seedy+1
      001EFA 97               [ 1] 5387 	ld xl,a 
      001EFB 9E               [ 1] 5388 	ld a,xh 
      001EFC C8 00 0F         [ 1] 5389 	xor a,seedy
      001EFF 95               [ 1] 5390 	ld xh,a 
      001F00 CF 00 0F         [ 2] 5391 	ldw seedy,x 
                                   5392 ; return seedy modulo expr + 1 
      001F03 90 85            [ 2] 5393 	popw y 
      001F05 65               [ 2] 5394 	divw x,y 
      001F06 93               [ 1] 5395 	ldw x,y 
      001F07 5C               [ 1] 5396 	incw x 
      001F08 A6 03            [ 1] 5397 	ld a,#TK_INTGR
      001F0A 81               [ 4] 5398 	ret 
                                   5399 
                                   5400 ;---------------------------------
                                   5401 ; BASIC: WORDS 
                                   5402 ; affiche la listes des mots du
                                   5403 ; dictionnaire.
                                   5404 ;---------------------------------
                           000001  5405 	WLEN=1
                           000002  5406 	LLEN=2  
                           000002  5407 	VSIZE=2 
      001F0B                       5408 words:
      001F0B                       5409 	_vars VSIZE
      001F0B 52 02            [ 2]    1     sub sp,#VSIZE 
      001F0D 0F 02            [ 1] 5410 	clr (LLEN,sp)
      001F0F 90 AE 21 3A      [ 2] 5411 	ldw y,#kword_dict+2
      001F13 93               [ 1] 5412 0$:	ldw x,y
      001F14 F6               [ 1] 5413 	ld a,(x)
      001F15 A4 0F            [ 1] 5414 	and a,#15 
      001F17 6B 01            [ 1] 5415 	ld (WLEN,sp),a 
      001F19 5C               [ 1] 5416 1$:	incw x 
      001F1A F6               [ 1] 5417 	ld a,(x)
      001F1B CD 01 9E         [ 4] 5418 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F1E 0C 02            [ 1] 5419 	inc (LLEN,sp)
      001F20 0A 01            [ 1] 5420 	dec (WLEN,sp)
      001F22 26 F5            [ 1] 5421 	jrne 1$
      001F24 A6 46            [ 1] 5422 	ld a,#70
      001F26 11 02            [ 1] 5423 	cp a,(LLEN,sp)
      001F28 2B 09            [ 1] 5424 	jrmi 2$   
      001F2A A6 20            [ 1] 5425 	ld a,#SPACE 
      001F2C CD 01 9E         [ 4] 5426 	call putc 
      001F2F 0C 02            [ 1] 5427 	inc (LLEN,sp) 
      001F31 20 07            [ 2] 5428 	jra 3$
      001F33 A6 0D            [ 1] 5429 2$: ld a,#CR 
      001F35 CD 01 9E         [ 4] 5430 	call putc 
      001F38 0F 02            [ 1] 5431 	clr (LLEN,sp)
      001F3A 72 A2 00 02      [ 2] 5432 3$:	subw y,#2 
      001F3E 90 FE            [ 2] 5433 	ldw y,(y)
      001F40 26 D1            [ 1] 5434 	jrne 0$  
      001F42                       5435 	_drop VSIZE 
      001F42 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F44 81               [ 4] 5436 	ret 
                                   5437 
                                   5438 
                                   5439 ;*********************************
                                   5440 
                                   5441 ;------------------------------
                                   5442 ;      dictionary 
                                   5443 ; format:
                                   5444 ;   link:   2 bytes 
                                   5445 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5446 ;   cmd_name: 16 byte max 
                                   5447 ;   code_address: 2 bytes 
                                   5448 ;------------------------------
                           000080  5449 	FFUNC=128 ; function flag 
                                   5450 	.macro _dict_entry len,name,cmd 
                                   5451 	.word LINK 
                                   5452 	LINK=.
                                   5453 name:
                                   5454 	.byte len 	
                                   5455 	.ascii "name"
                                   5456 	.word cmd 
                                   5457 	.endm 
                                   5458 
                           000000  5459 	LINK=0
      001F45                       5460 kword_end:
      001F45                       5461 	_dict_entry,3,BYE,bye 
      001F45 00 00                    1 	.word LINK 
                           001F47     2 	LINK=.
      001F47                          3 BYE:
      001F47 03                       4 	.byte 3 	
      001F48 42 59 45                 5 	.ascii "BYE"
      001F4B 1E 4A                    6 	.word bye 
      001F4D                       5462 	_dict_entry,5,WORDS,words 
      001F4D 1F 47                    1 	.word LINK 
                           001F4F     2 	LINK=.
      001F4F                          3 WORDS:
      001F4F 05                       4 	.byte 5 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F50 57 4F 52 44 53           5 	.ascii "WORDS"
      001F55 1F 0B                    6 	.word words 
      001F57                       5463 	_dict_entry,5,SLEEP,sleep 
      001F57 1F 4F                    1 	.word LINK 
                           001F59     2 	LINK=.
      001F59                          3 SLEEP:
      001F59 05                       4 	.byte 5 	
      001F5A 53 4C 45 45 50           5 	.ascii "SLEEP"
      001F5F 1E 53                    6 	.word sleep 
      001F61                       5464 	_dict_entry,6,FORGET,forget 
      001F61 1F 59                    1 	.word LINK 
                           001F63     2 	LINK=.
      001F63                          3 FORGET:
      001F63 06                       4 	.byte 6 	
      001F64 46 4F 52 47 45 54        5 	.ascii "FORGET"
      001F6A 1C 50                    6 	.word forget 
      001F6C                       5465 	_dict_entry,3,DIR,directory 
      001F6C 1F 63                    1 	.word LINK 
                           001F6E     2 	LINK=.
      001F6E                          3 DIR:
      001F6E 03                       4 	.byte 3 	
      001F6F 44 49 52                 5 	.ascii "DIR"
      001F72 1C 9B                    6 	.word directory 
      001F74                       5466 	_dict_entry,4,LOAD,load 
      001F74 1F 6E                    1 	.word LINK 
                           001F76     2 	LINK=.
      001F76                          3 LOAD:
      001F76 04                       4 	.byte 4 	
      001F77 4C 4F 41 44              5 	.ascii "LOAD"
      001F7B 1B E8                    6 	.word load 
      001F7D                       5467 	_dict_entry,4,SAVE,save
      001F7D 1F 76                    1 	.word LINK 
                           001F7F     2 	LINK=.
      001F7F                          3 SAVE:
      001F7F 04                       4 	.byte 4 	
      001F80 53 41 56 45              5 	.ascii "SAVE"
      001F84 1B 24                    6 	.word save 
      001F86                       5468 	_dict_entry,5,WRITE,write  
      001F86 1F 7F                    1 	.word LINK 
                           001F88     2 	LINK=.
      001F88                          3 WRITE:
      001F88 05                       4 	.byte 5 	
      001F89 57 52 49 54 45           5 	.ascii "WRITE"
      001F8E 1D 31                    6 	.word write 
      001F90                       5469 	_dict_entry,3,NEW,new
      001F90 1F 88                    1 	.word LINK 
                           001F92     2 	LINK=.
      001F92                          3 NEW:
      001F92 03                       4 	.byte 3 	
      001F93 4E 45 57                 5 	.ascii "NEW"
      001F96 1A 62                    6 	.word new 
      001F98                       5470 	_dict_entry,5,BREAK,break 
      001F98 1F 92                    1 	.word LINK 
                           001F9A     2 	LINK=.
      001F9A                          3 BREAK:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001F9A 05                       4 	.byte 5 	
      001F9B 42 52 45 41 4B           5 	.ascii "BREAK"
      001FA0 1A 13                    6 	.word break 
      001FA2                       5471 	_dict_entry,4,BEEP,beep 
      001FA2 1F 9A                    1 	.word LINK 
                           001FA4     2 	LINK=.
      001FA4                          3 BEEP:
      001FA4 04                       4 	.byte 4 	
      001FA5 42 45 45 50              5 	.ascii "BEEP"
      001FA9 19 7D                    6 	.word beep 
      001FAB                       5472 	_dict_entry,4,STOP,stop 
      001FAB 1F A4                    1 	.word LINK 
                           001FAD     2 	LINK=.
      001FAD                          3 STOP:
      001FAD 04                       4 	.byte 4 	
      001FAE 53 54 4F 50              5 	.ascii "STOP"
      001FB2 19 6E                    6 	.word stop 
      001FB4                       5473     _dict_entry,4,SHOW,show 
      001FB4 1F AD                    1 	.word LINK 
                           001FB6     2 	LINK=.
      001FB6                          3 SHOW:
      001FB6 04                       4 	.byte 4 	
      001FB7 53 48 4F 57              5 	.ascii "SHOW"
      001FBB 13 5A                    6 	.word show 
      001FBD                       5474 	_dict_entry 3,RUN,run
      001FBD 1F B6                    1 	.word LINK 
                           001FBF     2 	LINK=.
      001FBF                          3 RUN:
      001FBF 03                       4 	.byte 3 	
      001FC0 52 55 4E                 5 	.ascii "RUN"
      001FC3 19 27                    6 	.word run 
      001FC5                       5475 	_dict_entry 4,LIST,list
      001FC5 1F BF                    1 	.word LINK 
                           001FC7     2 	LINK=.
      001FC7                          3 LIST:
      001FC7 04                       4 	.byte 4 	
      001FC8 4C 49 53 54              5 	.ascii "LIST"
      001FCC 13 B4                    6 	.word list 
      001FCE                       5476 	_dict_entry,3+FFUNC,USR,usr
      001FCE 1F C7                    1 	.word LINK 
                           001FD0     2 	LINK=.
      001FD0                          3 USR:
      001FD0 83                       4 	.byte 3+FFUNC 	
      001FD1 55 53 52                 5 	.ascii "USR"
      001FD4 1E 22                    6 	.word usr 
      001FD6                       5477 	_dict_entry,6+FFUNC,EEPROM,eeprom 
      001FD6 1F D0                    1 	.word LINK 
                           001FD8     2 	LINK=.
      001FD8                          3 EEPROM:
      001FD8 86                       4 	.byte 6+FFUNC 	
      001FD9 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001FDF 1E 1C                    6 	.word eeprom 
      001FE1                       5478 	_dict_entry,6+FFUNC,UFLASH,uflash 
      001FE1 1F D8                    1 	.word LINK 
                           001FE3     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001FE3                          3 UFLASH:
      001FE3 86                       4 	.byte 6+FFUNC 	
      001FE4 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001FEA 1E 16                    6 	.word uflash 
      001FEC                       5479 	_dict_entry,3+FFUNC,ODR,port_odr
      001FEC 1F E3                    1 	.word LINK 
                           001FEE     2 	LINK=.
      001FEE                          3 ODR:
      001FEE 83                       4 	.byte 3+FFUNC 	
      001FEF 4F 44 52                 5 	.ascii "ODR"
      001FF2 1D F8                    6 	.word port_odr 
      001FF4                       5480 	_dict_entry,3+FFUNC,IDR,port_idr
      001FF4 1F EE                    1 	.word LINK 
                           001FF6     2 	LINK=.
      001FF6                          3 IDR:
      001FF6 83                       4 	.byte 3+FFUNC 	
      001FF7 49 44 52                 5 	.ascii "IDR"
      001FFA 1D FE                    6 	.word port_idr 
      001FFC                       5481 	_dict_entry,3+FFUNC,DDR,port_ddr 
      001FFC 1F F6                    1 	.word LINK 
                           001FFE     2 	LINK=.
      001FFE                          3 DDR:
      001FFE 83                       4 	.byte 3+FFUNC 	
      001FFF 44 44 52                 5 	.ascii "DDR"
      002002 1E 04                    6 	.word port_ddr 
      002004                       5482 	_dict_entry,3+FFUNC,CRL,port_cr1 
      002004 1F FE                    1 	.word LINK 
                           002006     2 	LINK=.
      002006                          3 CRL:
      002006 83                       4 	.byte 3+FFUNC 	
      002007 43 52 4C                 5 	.ascii "CRL"
      00200A 1E 0A                    6 	.word port_cr1 
      00200C                       5483 	_dict_entry,3+FFUNC,CRH,port_cr2
      00200C 20 06                    1 	.word LINK 
                           00200E     2 	LINK=.
      00200E                          3 CRH:
      00200E 83                       4 	.byte 3+FFUNC 	
      00200F 43 52 48                 5 	.ascii "CRH"
      002012 1E 10                    6 	.word port_cr2 
      002014                       5484 	_dict_entry,4+FFUNC,GPIO,gpio 
      002014 20 0E                    1 	.word LINK 
                           002016     2 	LINK=.
      002016                          3 GPIO:
      002016 84                       4 	.byte 4+FFUNC 	
      002017 47 50 49 4F              5 	.ascii "GPIO"
      00201B 1D BB                    6 	.word gpio 
      00201D                       5485 	_dict_entry,6,PWRADC,power_adc 
      00201D 20 16                    1 	.word LINK 
                           00201F     2 	LINK=.
      00201F                          3 PWRADC:
      00201F 06                       4 	.byte 6 	
      002020 50 57 52 41 44 43        5 	.ascii "PWRADC"
      002026 19 A5                    6 	.word power_adc 
      002028                       5486 	_dict_entry,5+FFUNC,RDADC,read_adc
      002028 20 1F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                           00202A     2 	LINK=.
      00202A                          3 RDADC:
      00202A 85                       4 	.byte 5+FFUNC 	
      00202B 52 44 41 44 43           5 	.ascii "RDADC"
      002030 19 E0                    6 	.word read_adc 
      002032                       5487 	_dict_entry,3+FFUNC,ASC,ascii  
      002032 20 2A                    1 	.word LINK 
                           002034     2 	LINK=.
      002034                          3 ASC:
      002034 83                       4 	.byte 3+FFUNC 	
      002035 41 53 43                 5 	.ascii "ASC"
      002038 1D 85                    6 	.word ascii 
      00203A                       5488 	_dict_entry,4+FFUNC,CHAR,char
      00203A 20 34                    1 	.word LINK 
                           00203C     2 	LINK=.
      00203C                          3 CHAR:
      00203C 84                       4 	.byte 4+FFUNC 	
      00203D 43 48 41 52              5 	.ascii "CHAR"
      002041 1D 68                    6 	.word char 
      002043                       5489 	_dict_entry,4+FFUNC,QKEY,qkey  
      002043 20 3C                    1 	.word LINK 
                           002045     2 	LINK=.
      002045                          3 QKEY:
      002045 84                       4 	.byte 4+FFUNC 	
      002046 51 4B 45 59              5 	.ascii "QKEY"
      00204A 1D B1                    6 	.word qkey 
      00204C                       5490 	_dict_entry,3+FFUNC,KEY,key 
      00204C 20 45                    1 	.word LINK 
                           00204E     2 	LINK=.
      00204E                          3 KEY:
      00204E 83                       4 	.byte 3+FFUNC 	
      00204F 4B 45 59                 5 	.ascii "KEY"
      002052 1D A9                    6 	.word key 
      002054                       5491 	_dict_entry,4+FFUNC,SIZE,size
      002054 20 4E                    1 	.word LINK 
                           002056     2 	LINK=.
      002056                          3 SIZE:
      002056 84                       4 	.byte 4+FFUNC 	
      002057 53 49 5A 45              5 	.ascii "SIZE"
      00205B 13 74                    6 	.word size 
      00205D                       5492 	_dict_entry,3,HEX,hex_base
      00205D 20 56                    1 	.word LINK 
                           00205F     2 	LINK=.
      00205F                          3 HEX:
      00205F 03                       4 	.byte 3 	
      002060 48 45 58                 5 	.ascii "HEX"
      002063 13 6A                    6 	.word hex_base 
      002065                       5493 	_dict_entry,3,DEC,dec_base
      002065 20 5F                    1 	.word LINK 
                           002067     2 	LINK=.
      002067                          3 DEC:
      002067 03                       4 	.byte 3 	
      002068 44 45 43                 5 	.ascii "DEC"
      00206B 13 6F                    6 	.word dec_base 
      00206D                       5494 	_dict_entry,5+FFUNC,TICKS,get_ticks
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00206D 20 67                    1 	.word LINK 
                           00206F     2 	LINK=.
      00206F                          3 TICKS:
      00206F 85                       4 	.byte 5+FFUNC 	
      002070 54 49 43 4B 53           5 	.ascii "TICKS"
      002075 1E 71                    6 	.word get_ticks 
      002077                       5495 	_dict_entry,3+FFUNC,ABS,abs
      002077 20 6F                    1 	.word LINK 
                           002079     2 	LINK=.
      002079                          3 ABS:
      002079 83                       4 	.byte 3+FFUNC 	
      00207A 41 42 53                 5 	.ascii "ABS"
      00207D 1E 77                    6 	.word abs 
      00207F                       5496 	_dict_entry,3+FFUNC,RND,random 
      00207F 20 79                    1 	.word LINK 
                           002081     2 	LINK=.
      002081                          3 RND:
      002081 83                       4 	.byte 3+FFUNC 	
      002082 52 4E 44                 5 	.ascii "RND"
      002085 1E 97                    6 	.word random 
      002087                       5497 	_dict_entry,5,PAUSE,pause 
      002087 20 81                    1 	.word LINK 
                           002089     2 	LINK=.
      002089                          3 PAUSE:
      002089 05                       4 	.byte 5 	
      00208A 50 41 55 53 45           5 	.ascii "PAUSE"
      00208F 1E 5E                    6 	.word pause 
      002091                       5498 	_dict_entry,4,BSET,bit_set 
      002091 20 89                    1 	.word LINK 
                           002093     2 	LINK=.
      002093                          3 BSET:
      002093 04                       4 	.byte 4 	
      002094 42 53 45 54              5 	.ascii "BSET"
      002098 17 37                    6 	.word bit_set 
      00209A                       5499 	_dict_entry,4,BRES,bit_reset
      00209A 20 93                    1 	.word LINK 
                           00209C     2 	LINK=.
      00209C                          3 BRES:
      00209C 04                       4 	.byte 4 	
      00209D 42 52 45 53              5 	.ascii "BRES"
      0020A1 17 4B                    6 	.word bit_reset 
      0020A3                       5500 	_dict_entry,5,BTOGL,bit_toggle
      0020A3 20 9C                    1 	.word LINK 
                           0020A5     2 	LINK=.
      0020A5                          3 BTOGL:
      0020A5 05                       4 	.byte 5 	
      0020A6 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0020AB 17 60                    6 	.word bit_toggle 
      0020AD                       5501 	_dict_entry 4,WAIT,wait 
      0020AD 20 A5                    1 	.word LINK 
                           0020AF     2 	LINK=.
      0020AF                          3 WAIT:
      0020AF 04                       4 	.byte 4 	
      0020B0 57 41 49 54              5 	.ascii "WAIT"
      0020B4 17 0C                    6 	.word wait 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0020B6                       5502 	_dict_entry 6,REMARK,rem 
      0020B6 20 AF                    1 	.word LINK 
                           0020B8     2 	LINK=.
      0020B8                          3 REMARK:
      0020B8 06                       4 	.byte 6 	
      0020B9 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0020BF 17 06                    6 	.word rem 
      0020C1                       5503 	_dict_entry 5,PRINT,print 
      0020C1 20 B8                    1 	.word LINK 
                           0020C3     2 	LINK=.
      0020C3                          3 PRINT:
      0020C3 05                       4 	.byte 5 	
      0020C4 50 52 49 4E 54           5 	.ascii "PRINT"
      0020C9 15 F8                    6 	.word print 
      0020CB                       5504 	_dict_entry,2,IF,if 
      0020CB 20 C3                    1 	.word LINK 
                           0020CD     2 	LINK=.
      0020CD                          3 IF:
      0020CD 02                       4 	.byte 2 	
      0020CE 49 46                    5 	.ascii "IF"
      0020D0 17 A4                    6 	.word if 
      0020D2                       5505 	_dict_entry,5,GOSUB,gosub 
      0020D2 20 CD                    1 	.word LINK 
                           0020D4     2 	LINK=.
      0020D4                          3 GOSUB:
      0020D4 05                       4 	.byte 5 	
      0020D5 47 4F 53 55 42           5 	.ascii "GOSUB"
      0020DA 18 BA                    6 	.word gosub 
      0020DC                       5506 	_dict_entry,4,GOTO,goto 
      0020DC 20 D4                    1 	.word LINK 
                           0020DE     2 	LINK=.
      0020DE                          3 GOTO:
      0020DE 04                       4 	.byte 4 	
      0020DF 47 4F 54 4F              5 	.ascii "GOTO"
      0020E3 18 AD                    6 	.word goto 
      0020E5                       5507 	_dict_entry,3,FOR,for 
      0020E5 20 DE                    1 	.word LINK 
                           0020E7     2 	LINK=.
      0020E7                          3 FOR:
      0020E7 03                       4 	.byte 3 	
      0020E8 46 4F 52                 5 	.ascii "FOR"
      0020EB 17 B8                    6 	.word for 
      0020ED                       5508 	_dict_entry,2,TO,to
      0020ED 20 E7                    1 	.word LINK 
                           0020EF     2 	LINK=.
      0020EF                          3 TO:
      0020EF 02                       4 	.byte 2 	
      0020F0 54 4F                    5 	.ascii "TO"
      0020F2 17 E2                    6 	.word to 
      0020F4                       5509 	_dict_entry,4,STEP,step 
      0020F4 20 EF                    1 	.word LINK 
                           0020F6     2 	LINK=.
      0020F6                          3 STEP:
      0020F6 04                       4 	.byte 4 	
      0020F7 53 54 45 50              5 	.ascii "STEP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0020FB 18 12                    6 	.word step 
      0020FD                       5510 	_dict_entry,4,NEXT,next 
      0020FD 20 F6                    1 	.word LINK 
                           0020FF     2 	LINK=.
      0020FF                          3 NEXT:
      0020FF 04                       4 	.byte 4 	
      002100 4E 45 58 54              5 	.ascii "NEXT"
      002104 18 3A                    6 	.word next 
      002106                       5511 	_dict_entry,6+FFUNC,UBOUND,ubound 
      002106 20 FF                    1 	.word LINK 
                           002108     2 	LINK=.
      002108                          3 UBOUND:
      002108 86                       4 	.byte 6+FFUNC 	
      002109 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00210F 13 7E                    6 	.word ubound 
      002111                       5512 	_dict_entry,6,RETURN,return 
      002111 21 08                    1 	.word LINK 
                           002113     2 	LINK=.
      002113                          3 RETURN:
      002113 06                       4 	.byte 6 	
      002114 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00211A 19 03                    6 	.word return 
      00211C                       5513 	_dict_entry,4+FFUNC,PEEK,peek 
      00211C 21 13                    1 	.word LINK 
                           00211E     2 	LINK=.
      00211E                          3 PEEK:
      00211E 84                       4 	.byte 4+FFUNC 	
      00211F 50 45 45 4B              5 	.ascii "PEEK"
      002123 17 87                    6 	.word peek 
      002125                       5514 	_dict_entry,4,POKE,poke 
      002125 21 1E                    1 	.word LINK 
                           002127     2 	LINK=.
      002127                          3 POKE:
      002127 04                       4 	.byte 4 	
      002128 50 4F 4B 45              5 	.ascii "POKE"
      00212C 17 74                    6 	.word poke 
      00212E                       5515 	_dict_entry,5,INPUT,input_var  
      00212E 21 27                    1 	.word LINK 
                           002130     2 	LINK=.
      002130                          3 INPUT:
      002130 05                       4 	.byte 5 	
      002131 49 4E 50 55 54           5 	.ascii "INPUT"
      002136 16 92                    6 	.word input_var 
      002138                       5516 kword_dict:
      002138                       5517 	_dict_entry 3,LET,let 
      002138 21 30                    1 	.word LINK 
                           00213A     2 	LINK=.
      00213A                          3 LET:
      00213A 03                       4 	.byte 3 	
      00213B 4C 45 54                 5 	.ascii "LET"
      00213E 13 8C                    6 	.word let 
                                   5518 	
                                   5519 
      002180                       5520 	.bndry 128 ; align on FLASH block.
                                   5521 ; free space for user application  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002180                       5522 user_space:
                                   5523 ; USR() function test
      002180 89               [ 2] 5524 	pushw x 
      002181 72 1A 50 0A      [ 1] 5525 	bset PC_ODR,#5 
      002185 85               [ 2] 5526 	popw x 
      002186 CD 1E 68         [ 4] 5527 	call pause02 
      002189 72 1B 50 0A      [ 1] 5528 	bres PC_ODR,#5 
      00218D 81               [ 4] 5529 	ret
                                   5530 
                                   5531 	.area FLASH_DRIVE (ABS)
      010000                       5532 	.org 0x10000
      010000                       5533 fdrive:
                                   5534 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002079 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |     ARG_CNT =  000001 
    ARG_OFS =  000002     |   5 ASC        002034 R   |     ATTRIB  =  000002 
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
    BASE    =  000002     |     BASE_SAV=  000001     |   5 BEEP       001FA4 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |     BELL    =  000007     |     BINARY  =  000001 
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BLOCK_ER=  000000 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  000005     |   5 BREAK      001F9A R   |   5 BRES       00209C R
  5 BSET       002093 R   |     BSIZE   =  000001     |     BSP     =  000008 
  5 BTOGL      0020A5 R   |     BTW     =  000001     |     BUFIDX  =  000003 
  5 BYE        001F47 R   |     C       =  000001     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       00203C R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000008     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        00200E R   |   5 CRL        002006 R   |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000006     |     CURR    =  000002 
    CX_BPTR =  000001     |     CX_CNT  =  000005     |     CX_IN   =  000004 
    CX_LNO  =  000003     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |   5 DDR        001FFE R
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  5 DEC        002067 R   |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        001F6E R   |     DIVIDND =  000007 
    DIVISR  =  000005     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
    DSTACK_S=  000040     |   5 EEPROM     001FD8 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |     EOF     =  0000FF 
    ERR_BAD_=  00000A     |     ERR_CMD_=  000007     |     ERR_DIV0=  000004 
    ERR_DUPL=  000008     |     ERR_MATH=  000003     |     ERR_MEM_=  000001 
    ERR_NONE=  000000     |     ERR_NOT_=  000009     |     ERR_NO_A=  00000B 
    ERR_NO_L=  000005     |     ERR_RUN_=  000006     |     ERR_SYNT=  000002 
    ESC     =  00001B     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
    FBREAK  =  000004     |     FCOMP   =  000005     |     FF      =  00000C 
    FFOR    =  000002     |     FFUNC   =  000080     |     FHSE    =  7A1200 
    FHSI    =  F42400     |     FIRST   =  000001     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  5 FOR        0020E7 R   |   5 FORGET     001F63 R   |     FRUN    =  000000 
    FSIZE   =  000001     |     FSLEEP  =  000003     |     FTRAP   =  000001 
  5 GOSUB      0020D4 R   |     GOS_RET =  000003     |   5 GOTO       0020DE R
  5 GPIO       002016 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   5 HEX        00205F R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   5 IDR        001FF6 R   |   5 IF         0020CD R
    IN      =  000007     |     INCR    =  000001     |   5 INPUT      002130 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |     INW     =  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   5 KEY        00204E R
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000005 
  5 LET        00213A R   |     LINENO  =  000005     |   5 LINK    =  00213A R
  5 LIST       001FC7 R   |     LL      =  000002     |     LLEN    =  000002 
    LL_HB   =  000001     |     LNO     =  000005     |     LN_PTR  =  000005 
  5 LOAD       001F76 R   |     MAJOR   =  000001     |     MASK    =  000002 
    MATH_OVF=  000000     |     MINOR   =  000000     |     MULOP   =  000005 
    N1      =  000001     |     N1_HB   =  000006     |     N1_LB   =  000007 
    N2      =  000003     |     N2_HB   =  000008     |     N2_LB   =  000009 
    NAFR    =  004804     |     NAMEPTR =  000003     |     NCLKOPT =  004808 
    NEG     =  000001     |   5 NEW        001F92 R   |   5 NEXT       0020FF R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NL      =  00000A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000009 R   |   5 ODR        001FEE R   |     OP      =  000005 
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     PA      =  000000     |     PAD_SIZE=  000028 
  5 PAUSE      002089 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   5 PEEK       00211E R
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   5 POKE       002127 R   |     PREV    =  000001 
  5 PRINT      0020C3 R   |     PROD    =  000002     |     PSIZE   =  000001 
  5 PWRADC     00201F R   |   5 QKEY       002045 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 RDADC      00202A R
  5 REG_A      000943 R   |   5 REG_CC     000947 R   |   5 REG_EPC    000936 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

  5 REG_SP     00094C R   |   5 REG_X      00093F R   |   5 REG_Y      00093B R
    RELOP   =  000005     |   5 REMARK     0020B8 R   |     RETL1   =  000001 
  5 RETURN     002113 R   |   5 RND        002081 R   |     ROP     =  004800 
    RST_SR  =  0050B3     |   5 RUN        001FBF R   |     RXCHAR  =  000001 
    R_A     =  000007     |     R_CC    =  000008     |     R_X     =  000005 
    R_Y     =  000003     |   5 SAVE       001F7F R   |     SDIVD   =  000002 
    SFR_BASE=  005000     |     SFR_END =  0057FF     |     SHARP   =  000023 
  5 SHOW       001FB6 R   |     SIGN    =  000001     |   5 SIZE       002056 R
    SKIP    =  000006     |   5 SLEEP      001F59 R   |     SPACE   =  000020 
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SQUOT   =  000001 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  000080 
  5 STATES     0008F9 R   |   5 STEP       0020F6 R   |   5 STOP       001FAD R
    SWIM_CSR=  007F80     |     TAB     =  000009     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      00206F R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |     TK_ARRAY=  000005 
    TK_CHAR =  000002     |     TK_CMD  =  000006     |     TK_COLON=  000001 
    TK_COMMA=  00000B     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_FUNC =  000007     |     TK_GE   =  000033     |     TK_GRP_A=  000010 
    TK_GRP_M=  000030     |     TK_GRP_M=  000000     |     TK_GRP_M=  000020 
    TK_GRP_R=  000030     |     TK_GT   =  000031     |     TK_INTGR=  000003 
    TK_LE   =  000036     |     TK_LPARE=  000009     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000008     |     TK_RPARE=  00000A     |     TK_SHARP=  00000C 
    TK_VAR  =  000004     |   5 TO         0020EF R   |   5 Timer4Up   000019 R
  5 TrapHand   00000A R   |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     002108 R   |   5 UFLASH     001FE3 R
  5 USER_ABO   00007E R   |   5 USR        001FD0 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   5 UserButt   000025 R
    VSIZ    =  000002     |     VSIZE   =  000002     |     VT      =  00000B 
  5 WAIT       0020AF R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      001F4F R   |   5 WRITE      001F88 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XADR    =  000001     |     XMASK   =  000001 
    XSAVE   =  000003     |     YSAVE   =  000003     |   5 abs        001E77 R
  1 acc16      000009 R   |   1 acc24      000008 R   |   1 acc8       00000A R
  5 accept_c   000AF1 R   |   5 add        001083 R   |   5 ansi_seq   000AAF R
  5 arg_list   0011C5 R   |   1 array_ad   000020 R   |   1 array_si   000022 R
  5 ascii      001D85 R   |   5 at_tst     000DBC R   |   5 atoi24     000ECF R
  5 atoi_exi   000F3D R   |   5 bad_port   001DF3 R   |   1 base       000007 R
  1 basicptr   000003 R   |   5 beep       00197D R   |   5 bin_exit   000CC2 R
  5 bit_rese   00174B R   |   5 bit_set    001737 R   |   5 bit_togg   001760 R
  5 bkslsh_t   000D67 R   |   5 bksp       0001BA R   |   5 break      001A13 R
  5 break_po   001A44 R   |   5 bye        001E4A R   |   5 char       001D68 R
  5 check_fu   0003E4 R   |   5 clear_ba   0005E2 R   |   5 clear_va   0004F2 R
  5 clock_in   000099 R   |   5 cmd_itf    000B15 R   |   5 cmd_name   00112E R
  5 cmp_name   001AB8 R   |   5 cold_sta   000557 R   |   5 colon_ts   000D90 R
  5 comma_ts   000D9B R   |   5 compile    0003F3 R   |   5 convert_   000C4A R
  1 count      000002 R   |   5 cp_loop    001171 R   |   5 create_g   000343 R
  5 cstk_pro   00104D R   |   5 dash_tst   000DB1 R   |   5 ddrop      000FC9 R
  5 ddrop_n    001006 R   |   5 ddup       000FD2 R   |   5 dec_base   00136F R
  5 del_back   000AE2 R   |   5 del_line   00030B R   |   5 del_ln     000AD3 R
  5 delete     0001CA R   |   5 dir_loop   001CA7 R   |   5 director   001C9B R
  5 divide     0010D9 R   |   5 divu24_8   000A3C R   |   5 dotr       001056 R
  5 dotr_loo   00106B R   |   5 dots       001023 R   |   5 dpick      000FE3 R
  5 dpop       000FA2 R   |   5 dpush      000F95 R   |   5 drive_fr   001D24 R
  3 dstack     001740 R   |   3 dstack_u   001780 R   |   5 dstk_pro   001019 R
  1 dstkptr    000019 R   |   5 dswap      000FAF R   |   5 eeprom     001E1C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

  5 eql_tst    000E1C R   |   5 equal      0015EB R   |   5 err_bad_   0006C3 R
  5 err_cmd_   000684 R   |   5 err_div0   000646 R   |   5 err_dupl   00069F R
  5 err_math   00062C R   |   5 err_mem_   00060F R   |   5 err_msg    0005F7 R
  5 err_no_a   0006D0 R   |   5 err_no_l   000656 R   |   5 err_not_   0006B1 R
  5 err_run_   00066D R   |   5 err_synt   00061D R   |   5 escaped    000C5F R
  5 expect     0011B8 R   |   5 expr_exi   001300 R   |   5 expressi   0012BF R
  5 factor     00121C R   |   1 farptr     000013 R   |   7 fdrive     010000 R
  5 fetch      000FF2 R   |   5 fetchc     000C02 R   |   1 ffree      000016 R
  5 file_cou   001D1C R   |   5 final_te   000AA9 R   |   5 first_li   0013DF R
  1 flags      000024 R   |   5 for        0017B8 R   |   5 forget     001C50 R
  1 free_ram   00005A R   |   5 ge         0015ED R   |   5 get_arra   0011E9 R
  5 get_tick   001E71 R   |   5 get_toke   000D04 R   |   5 getc       0001A7 R
  5 go_commo   0018DD R   |   5 gosub      0018BA R   |   5 goto       0018AD R
  5 gpio       001DBB R   |   5 gt         0015E9 R   |   5 gt_tst     000E27 R
  5 hex_base   00136A R   |   5 hse_cloc   000187 R   |   5 hsi_cloc   000191 R
  5 if         0017A4 R   |   1 in         000001 R   |   1 in.w       000000 R
  1 in.w.sav   000011 R   |   5 incr_far   001A6D R   |   5 input_ex   001703 R
  5 input_lo   00169E R   |   5 input_va   001692 R   |   5 insert_l   00037C R
  5 insert_l   0003E1 R   |   5 interp     000786 R   |   5 interp_l   0007CA R
  5 invalid    000B5A R   |   5 invalid_   000BD8 R   |   5 is_alpha   000500 R
  5 is_digit   000EBA R   |   5 itoa       0009F5 R   |   5 itoa_loo   000A0D R
  5 key        001DA9 R   |   5 kword_di   002138 R   |   5 kword_en   001F45 R
  5 last_lin   0013E8 R   |   5 le         0015F2 R   |   5 ledoff     000849 R
  5 ledon      000844 R   |   5 ledtoggl   00084E R   |   5 left_arr   000AAF R
  5 left_par   000857 R   |   5 let        00138C R   |   5 let02      001396 R
  1 lineno     000005 R   |   5 lines_sk   0013ED R   |   5 list       0013B4 R
  5 list_exi   001434 R   |   5 list_sta   001410 R   |   5 load       001BE8 R
  5 loop_bac   001882 R   |   1 loop_dep   00001F R   |   5 loop_don   00189B R
  5 lt         0015F0 R   |   5 lt_tst     000E60 R   |   5 mem_peek   000B77 R
  5 modulo     00111D R   |   5 move       00029E R   |   5 move_dow   0002BC R
  5 move_exi   0002DD R   |   5 move_loo   0002C1 R   |   5 move_up    0002AE R
  5 mul_char   0015DA R   |   5 multiply   001091 R   |   5 mulu24_8   000F41 R
  5 nbr_tst    000D3D R   |   5 ne         0015F5 R   |   5 neg_acc2   000A64 R
  5 new        001A62 R   |   5 next       00183A R   |   5 next_tok   0007FA R
  5 no_match   001183 R   |   5 none       000D04 R   |   5 number     000C08 GR
  5 other      000E98 R   |   3 pad        001718 R   |   5 parse_bi   000CA2 R
  5 parse_in   000C67 R   |   5 parse_ke   000CCA R   |   5 parse_qu   000C0F R
  5 pause      001E5E R   |   5 pause02    001E68 R   |   5 peek       001787 R
  5 peek_byt   000BA2 R   |   5 plus_tst   000DF0 R   |   5 poke       001774 R
  5 port_cr1   001E0A R   |   5 port_cr2   001E10 R   |   5 port_ddr   001E04 R
  5 port_idr   001DFE R   |   5 port_odr   001DF8 R   |   5 power_ad   0019A5 R
  5 prcnt_ts   000E11 R   |   5 print      0015F8 R   |   5 print_ex   00165C R
  5 print_fa   000BE7 R   |   5 print_in   000999 R   |   5 print_re   0008A6 R
  5 print_st   000B6A R   |   5 prt_basi   001487 R   |   5 prt_cmd_   001437 R
  5 prt_loop   0015FC R   |   5 prt_peek   00024E R   |   5 prt_quot   00144B R
  5 prt_reg1   000887 R   |   5 prt_reg8   000862 R   |   5 prt_regs   0001E4 R
  5 prti24     000951 R   |   1 ptr16      000014 R   |   1 ptr8       000015 R
  5 putc       00019E R   |   5 puts       0001B0 R   |   5 qkey       001DB1 R
  5 qmark_ts   000DC7 R   |   5 random     001E97 R   |   5 read_adc   0019E0 R
  5 readln     000A87 R   |   5 readln_l   000A8D R   |   5 readln_q   000B06 R
  5 regs_sta   000227 R   |   5 rel_exit   001357 R   |   5 relation   001303 R
  5 relop_st   0015DD R   |   5 rem        001706 R   |   5 repl       000B23 R
  5 repl_exi   000B4B R   |   5 reprint    000AAF R   |   5 reset_co   0015FA R
  5 rest_con   00167D R   |   5 return     001903 R   |   5 right_ar   000AAF R
  5 rparnt_t   000D85 R   |   5 rt_msg     000704 R   |   5 run        001927 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

  5 save       001B24 R   |   5 save_con   001668 R   |   5 search_d   001160 R
  5 search_e   0011B4 R   |   5 search_f   001AD9 R   |   5 search_l   0002E0 R
  5 search_l   0002EB R   |   5 search_n   001164 R   |   1 seedx      00000D R
  1 seedy      00000F R   |   5 seek_fdr   001A7B R   |   5 sharp_ts   000DA6 R
  5 show       00135A R   |   5 single_c   0015D6 R   |   5 size       001374 R
  5 skip       000F7B R   |   5 slash_ts   000E06 R   |   5 sleep      001E53 R
  5 software   000511 R   |   5 spaces     0001D8 R   |   3 stack_fu   001780 R
  3 stack_un   001800 R   |   5 star_tst   000DFB R   |   5 step       001812 R
  5 stop       00196E R   |   5 store      000FFC R   |   5 store_lo   001824 R
  5 str_matc   001192 R   |   5 str_tst    000D2C R   |   5 strcmp     00027F R
  5 strcpy     000290 R   |   5 strlen     000272 R   |   5 substrac   00108B R
  5 syntax_e   000714 R   |   1 tab_widt   000025 R   |   5 tb_error   000716 R
  5 term       001272 R   |   5 term01     00127B R   |   5 term_exi   0012BC R
  5 test_p     000B62 R   |   3 tib        0016C8 R   |   5 tick_tst   000DDE R
  1 ticks      00000B R   |   5 timer4_i   0000AF R   |   5 to         0017E2 R
  5 to_upper   000EC3 GR  |   5 token_ch   000EA7 R   |   5 token_ex   000EB7 R
  1 txtbgn     00001B R   |   1 txtend     00001D R   |   5 uart3_in   000174 R
  5 uart3_se   000180 R   |   5 uart_ena   000199 R   |   5 ubound     00137E R
  5 uflash     001E16 R   |   5 unget_to   000F8E R   |   5 unlock_e   0000C0 R
  5 unlock_f   0000CE R   |   5 user_spa   002180 R   |   5 usr        001E22 R
  1 vars       000026 R   |   5 wait       00170C R   |   5 warm_sta   000766 R
  5 words      001F0B R   |   5 write      001D31 R   |   5 write_bl   000151 R
  5 write_by   0000DC R   |   5 write_ee   000118 R   |   5 write_ex   00014C R
  5 write_fl   000102 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   218E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

