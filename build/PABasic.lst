ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26 
                                     27 
                                     28 
                                     29     .module TBI_STM8
                                     30 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                     37     .list 
                                     38 
      000000                         39 _dbg 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                           000001     1     DEBUG=1
                                     40 
                                     41 ;--------------------------------------
                                     42     .area DATA 
                                     43 ;--------------------------------------	
                                     44 
                           000050    45 	TIB_SIZE=80
                           000028    46     PAD_SIZE=40
                           000040    47 	DSTACK_SIZE=64 
                           000080    48 	STACK_SIZE=128
                           0017FF    49 	STACK_EMPTY=RAM_SIZE-1  
                           000000    50 	FRUN=0 ; flags run code in variable flags
                           000001    51 	FTRAP=1 ; inside trap handler 
                           000002    52 	FFOR=2 ; FOR loop in preparation 
                           000003    53 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    54 	FBREAK=4 ; break point flag 
                           000005    55 	FCOMP=5  ; compiling flags 
                                     56 
      000000                         57 in.w:  .blkb 1 ; parser position in text line
      000001                         58 in:    .blkb 1 ; low byte of in.w
      000002                         59 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         60 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         61 basicptr:  .blkb 2  ; point to current BASIC line 
      000006                         62 base:  .blkb 1 ; nemeric base used to print integer 
      000007                         63 acc24: .blkb 1 ; 24 bit accumulator
      000008                         64 acc16: .blkb 1 ; 16 bit accumulator, middle byte of acc24
      000009                         65 acc8:  .blkb 1 ;  8 bit accumulator, least byte of acc24 
      00000A                         66 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000C                         67 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      00000E                         68 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000010                         69 farptr: .blkb 1 ; 24 bits pointer used by file system
      000011                         70 ptr16:  .blkb 1 ; 16 bits pointer ,  middle byte of farptr
      000012                         71 ptr8:   .blkb 1 ; 8 bits pointer, least byte of farptr 
      000013                         72 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000016                         73 dstkptr: .blkw 1  ; data stack pointer 
      000018                         74 txtbgn: .ds 2 ; tokenized BASIC text beginning address 
      00001A                         75 txtend: .ds 2 ; tokenized BASIC text end address 
      00001C                         76 loop_depth: .ds 1 ; FOR loop depth, level of nested loop. Conformity check   
      00001D                         77 array_size: .ds 2 ; array size 
      00001F                         78 flags: .ds 1 ; various boolean flags
      000020                         79 tab_width: .ds 1 ; print colon width (4)
      000021                         80 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     81 ; keep as last variable 
      000055                         82 free_ram: ; from here RAM free for BASIC text 
                                     83 
                                     84 ;-----------------------------------
                                     85     .area SSEG (ABS)
                                     86 ;-----------------------------------	
      0016C8                         87     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         88 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         89 pad: .ds PAD_SIZE             ; working buffer
      001740                         90 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         91 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         92 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         93 stack_unf: ; stack underflow ; control_stack bottom 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     94 
                                     95 
                                     96 ;--------------------------------------
                                     97     .area HOME 
                                     98 ;--------------------------------------
      000000 82 00 05 54             99     int cold_start
                           000001   100 .if DEBUG
      000004 82 00 00 0A            101 	int TrapHandler 		;TRAP  software interrupt
                           000000   102 .else
                                    103 	int NonHandledInterrupt ;TRAP  software interrupt
                                    104 .endif
      000008 82 00 00 09            105 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            106 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            107 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            108 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            109 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            110 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            111 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 25            112 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            113 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            114 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            115 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            116 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            117 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            118 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            119 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            120 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            121 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            122 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            123 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            124 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            125 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            126 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            127 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            128 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            129 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            130 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            131 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            132 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            133 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            134 	int NonHandledInterrupt ;int29  not used
                                    135 
                                    136 ;---------------------------------------
                                    137     .area CODE
                                    138 ;---------------------------------------
                           000001   139 .if DEBUG
      000000 53 54 4D 38 5F 54 42   140 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    141 .endif 
                                    142 
      000009                        143 NonHandledInterrupt:
      000009 71                     144     .byte 0x71  ; reinitialize MCU
                                    145 
                                    146 
                                    147 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    148 ; software interrupt handler  
                                    149 ;------------------------------------
                           000001   150 .if DEBUG 
      00000A                        151 TrapHandler:
      00000A 72 12 00 1F      [ 1]  152 	bset flags,#FTRAP 
      00000E CD 08 9A         [ 4]  153 	call print_registers
      000011 CD 0B 05         [ 4]  154 	call cmd_itf
      000014 72 13 00 1F      [ 1]  155 	bres flags,#FTRAP 	
      000018 80               [11]  156 	iret
                                    157 .endif 
                                    158 
      000019                        159 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  160 	clr TIM4_SR 
      00001D CE 00 0A         [ 2]  161 	ldw x,ticks
      000020 5C               [ 1]  162 	incw x
      000021 CF 00 0A         [ 2]  163 	ldw ticks,x 
      000024 80               [11]  164 	iret 
                                    165 
                                    166 
                                    167 ;------------------------------------
                                    168 ; Triggered by pressing USER UserButton 
                                    169 ; on NUCLEO card.
                                    170 ;------------------------------------
      000025                        171 UserButtonHandler:
                                    172 ; wait button release
      000025 5F               [ 1]  173 	clrw x
      000026 5A               [ 2]  174 1$: decw x 
      000027 26 FD            [ 1]  175 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  176 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    177 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 1F 05   [ 2]  178     btjf flags,#FSLEEP,2$
      000033 72 17 00 1F      [ 1]  179 	bres flags,#FSLEEP 
      000037 80               [11]  180 	iret
      000038 72 00 00 1F 03   [ 2]  181 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  182 	jp 9$ 
      000040                        183 4$:	; program interrupted by user 
      000040 72 11 00 1F      [ 1]  184 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  185 	ldw x,#USER_ABORT
      000047 CD 01 B8         [ 4]  186 	call puts 
      00004A CE 00 04         [ 2]  187 	ldw x,basicptr
      00004D FE               [ 2]  188 	ldw x,(x)
                                    189 ; print line number 
      00004E 35 0A 00 06      [ 1]  190 	mov base,#10 
      000052 35 06 00 20      [ 1]  191 	mov tab_width,#6
      000056 CD 09 8D         [ 4]  192 	call print_int  	
      000059 CE 00 04         [ 2]  193 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  194 	addw x,#3  
      00005F CD 01 B8         [ 4]  195 	call puts 
      000062 A6 0D            [ 1]  196 	ld a,#CR 
      000064 CD 01 A6         [ 4]  197 	call putc
      000067 5F               [ 1]  198 	clrw x  
      000068 C6 00 01         [ 1]  199 	ld a,in 
      00006B AB 03            [ 1]  200 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  201 	ld xl,a 
      00006E CD 01 E0         [ 4]  202 	call spaces 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000071 A6 5E            [ 1]  203 	ld a,#'^
      000073 CD 01 A6         [ 4]  204 	call putc 
      000076                        205 9$:
      000076 AE 17 FF         [ 2]  206     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  207     ldw sp,x
      00007A 9A               [ 1]  208 	rim 
      00007B CC 07 68         [ 2]  209 	jp warm_start
                                    210 
      00007E 0A 50 72 6F 67 72 61   211 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    212 
                                    213 ;----------------------------------------
                                    214 ; inialize MCU clock 
                                    215 ; input:
                                    216 ;   A 		source  HSI | 1 HSE 
                                    217 ;   XL      CLK_CKDIVR , clock divisor 
                                    218 ; output:
                                    219 ;   none 
                                    220 ;----------------------------------------
      000099                        221 clock_init:	
      000099 C1 50 C3         [ 1]  222 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  223 	jreq 2$ ; no switching required 
                                    224 ; select clock source 
      00009E 72 12 50 C5      [ 1]  225 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  226 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  227 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  228 	jrne 1$
      0000AA                        229 2$: 	
                                    230 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  231 	ld a,xl 
      0000AB C7 50 C6         [ 1]  232 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  233 	ret
                                    234 
                                    235 ;---------------------------------
                                    236 ; TIM4 is configured to generate an 
                                    237 ; interrupt every millisecond 
                                    238 ;----------------------------------
      0000AF                        239 timer4_init:
      0000AF 72 18 50 C7      [ 1]  240 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B3 35 07 53 45      [ 1]  241 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B7 35 7D 53 46      [ 1]  242 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BB 35 05 53 40      [ 1]  243 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BF 72 10 53 41      [ 1]  244 	bset TIM4_IER,#TIM4_IER_UIE 
      0000C3 81               [ 4]  245 	ret
                                    246 
                                    247 
                                    248 ;----------------------------------
                                    249 ; unlock EEPROM for writing/erasing
                                    250 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    251 ; input:
                                    252 ;  none
                                    253 ; output:
                                    254 ;  none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    255 ;----------------------------------
      0000C4                        256 unlock_eeprom:
      0000C4 35 AE 50 64      [ 1]  257 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C8 35 56 50 64      [ 1]  258     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000CC 72 07 50 5F FB   [ 2]  259 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000D1 81               [ 4]  260 	ret
                                    261 
                                    262 ;----------------------------------
                                    263 ; unlock FLASH for writing/erasing
                                    264 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    265 ; input:
                                    266 ;  none
                                    267 ; output:
                                    268 ;  none
                                    269 ;----------------------------------
      0000D2                        270 unlock_flash:
      0000D2 35 56 50 62      [ 1]  271 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D6 35 AE 50 62      [ 1]  272 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000DA 72 03 50 5F FB   [ 2]  273 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000DF 81               [ 4]  274 	ret
                                    275 
                           000000   276 	BLOCK_ERASE=0
                                    277 ;----------------------------
                                    278 ; erase block code must be 
                                    279 ;executed from RAM
                                    280 ;-----------------------------
                           000000   281 .if BLOCK_ERASE 
                                    282 ; this code is copied to RAM 
                                    283 erase_start:
                                    284 	clr a 
                                    285     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    286     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    287 	ldf [farptr],a
                                    288     inc farptr+2 
                                    289     ldf [farptr],a
                                    290     inc farptr+2 
                                    291     ldf [farptr],a
                                    292     inc farptr+2 
                                    293     ldf [farptr],a
                                    294 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    295 	ret
                                    296 erase_end:
                                    297 
                                    298 ; copy erase_start in RAM 
                                    299 move_code_in_ram:
                                    300 	ldw x,#erase_end 
                                    301 	subw x,#erase_start
                                    302 	ldw acc16,x 
                                    303 	ldw x,#pad 
                                    304 	ldw y,#erase_start 
                                    305 	call move 
                                    306 	ret 
                                    307 
                                    308 ;-----------------------------------
                                    309 ; erase flash or EEPROM block 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    310 ; a block is 128 bytes 
                                    311 ; input:
                                    312 ;   farptr  address block begin
                                    313 ; output:
                                    314 ;   none
                                    315 ;--------------------------------------
                                    316 erase_block:
                                    317 	ldw x,farptr+1 
                                    318 	pushw x 
                                    319 	call move_code_in_ram 
                                    320 	popw x 
                                    321 	ldw farptr+1,x 
                                    322 	tnz farptr
                                    323 	jrne erase_flash 
                                    324 	ldw x,#FLASH_BASE 
                                    325 	cpw x,farptr+1 
                                    326 	jrpl erase_flash 
                                    327 ; erase eeprom block
                                    328 	call unlock_eeprom 
                                    329 	sim 
                                    330 	call pad   
                                    331 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    332 	rim 
                                    333 	ret 
                                    334 ; erase flash block:
                                    335 erase_flash:
                                    336 	call unlock_flash 
                                    337 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    338 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    339 	clr a 
                                    340 	sim 
                                    341 	call pad 
                                    342     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    343 	rim 
                                    344 	ret 
                                    345 .endif ; BLOCK_ERASE 
                                    346 
                                    347 
                                    348 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    349 ; write a byte to FLASH or EEPROM 
                                    350 ; input:
                                    351 ;    a  		byte to write
                                    352 ;    farptr  	address
                                    353 ;    x          farptr[x]
                                    354 ; output:
                                    355 ;    none
                                    356 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    357 	; variables locales
                           000001   358 	BTW = 1   ; byte to write offset on stack
                           000002   359 	OPT = 2   ; OPTION flag offset on stack
                           000002   360 	VSIZE = 2
      0000E0                        361 write_byte:
      0000E0 90 89            [ 2]  362 	pushw y
      0000E2                        363 	_vars VSIZE
      0000E2 52 02            [ 2]    1     sub sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000E4 6B 01            [ 1]  364 	ld (BTW,sp),a ; byte to write 
      0000E6 0F 02            [ 1]  365 	clr (OPT,sp)  ; OPTION flag
                                    366 ; put addr[15:0] in Y, for bounds check.
      0000E8 90 CE 00 11      [ 2]  367 	ldw y,farptr+1   ; Y=addr15:0
                                    368 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000EC 72 5D 00 10      [ 1]  369 	tnz farptr 
      0000F0 26 14            [ 1]  370 	jrne write_flash
      0000F2 90 A3 23 80      [ 2]  371     cpw y,#user_space
      0000F6 24 0E            [ 1]  372     jruge write_flash
      0000F8 90 A3 40 00      [ 2]  373 	cpw y,#EEPROM_BASE  
      0000FC 25 52            [ 1]  374     jrult write_exit
      0000FE 90 A3 48 00      [ 2]  375 	cpw y,#OPTION_BASE
      000102 25 18            [ 1]  376 	jrult write_eeprom
      000104 20 4A            [ 2]  377     jra write_exit
                                    378 ; write program memory
      000106                        379 write_flash:
      000106 CD 00 D2         [ 4]  380 	call unlock_flash 
      000109 9B               [ 1]  381 1$:	sim 
      00010A 7B 01            [ 1]  382 	ld a,(BTW,sp)
      00010C 92 A7 00 10      [ 4]  383 	ldf ([farptr],x),a ; farptr[x]=A
      000110 72 05 50 5F FB   [ 2]  384 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000115 9A               [ 1]  385     rim 
      000116 72 13 50 5F      [ 1]  386     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00011A 20 34            [ 2]  387     jra write_exit
                                    388 ; write eeprom and option
      00011C                        389 write_eeprom:
      00011C CD 00 C4         [ 4]  390 	call unlock_eeprom
                                    391 	; check for data eeprom or option eeprom
      00011F 90 A3 48 00      [ 2]  392 	cpw y,#OPTION_BASE
      000123 2B 08            [ 1]  393 	jrmi 1$
      000125 90 A3 48 80      [ 2]  394 	cpw y,#OPTION_END+1
      000129 2A 02            [ 1]  395 	jrpl 1$
      00012B 03 02            [ 1]  396 	cpl (OPT,sp)
      00012D                        397 1$: 
      00012D 0D 02            [ 1]  398     tnz (OPT,sp)
      00012F 27 08            [ 1]  399     jreq 2$
                                    400 	; pour modifier une option il faut modifier ces 2 bits
      000131 72 1E 50 5B      [ 1]  401     bset FLASH_CR2,#FLASH_CR2_OPT
      000135 72 1F 50 5C      [ 1]  402     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000139                        403 2$: 
      000139 7B 01            [ 1]  404     ld a,(BTW,sp)
      00013B 92 A7 00 10      [ 4]  405     ldf ([farptr],x),a
      00013F 0D 02            [ 1]  406     tnz (OPT,sp)
      000141 27 08            [ 1]  407     jreq 3$
      000143 5C               [ 1]  408     incw x
      000144 7B 01            [ 1]  409     ld a,(BTW,sp)
      000146 43               [ 1]  410     cpl a
      000147 92 A7 00 10      [ 4]  411     ldf ([farptr],x),a
      00014B 72 05 50 5F FB   [ 2]  412 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000150                        413 write_exit:
      000150                        414 	_drop VSIZE 
      000150 5B 02            [ 2]    1     addw sp,#VSIZE 
      000152 90 85            [ 2]  415 	popw y
      000154 81               [ 4]  416     ret
                                    417 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    418 ;--------------------------------------------
                                    419 ; write a data block to eeprom or flash 
                                    420 ; input:
                                    421 ;   Y        source address   
                                    422 ;   X        array index  destination  farptr[x]
                                    423 ;   BSIZE    block size bytes 
                                    424 ;   farptr   write address , byte* 
                                    425 ; output:
                                    426 ;	X 		after last byte written 
                                    427 ;   Y 		after last byte read 
                                    428 ;  farptr   point after block
                                    429 ;---------------------------------------------
      000155                        430 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000155                        431 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    432 	; local var 
                           000001   433 	XSAVE=1 
                           000002   434 	VSIZE=2 
      000155                        435 write_block:
      000155                        436 	_vars VSIZE
      000155 52 02            [ 2]    1     sub sp,#VSIZE 
      000157 1F 01            [ 2]  437 	ldw (XSAVE,sp),x 
      000159 1E 05            [ 2]  438 	ldw x,(BSIZE,sp) 
      00015B 27 13            [ 1]  439 	jreq 9$
      00015D 1E 01            [ 2]  440 1$:	ldw x,(XSAVE,sp)
      00015F 90 F6            [ 1]  441 	ld a,(y)
      000161 CD 00 E0         [ 4]  442 	call write_byte 
      000164 5C               [ 1]  443 	incw x 
      000165 90 5C            [ 1]  444 	incw y 
      000167 1F 01            [ 2]  445 	ldw (XSAVE,sp),x
      000169 1E 05            [ 2]  446 	ldw x,(BSIZE,sp)
      00016B 5A               [ 2]  447 	decw x
      00016C 1F 05            [ 2]  448 	ldw (BSIZE,sp),x 
      00016E 26 ED            [ 1]  449 	jrne 1$
      000170                        450 9$:
      000170 1E 01            [ 2]  451 	ldw x,(XSAVE,sp)
      000172 CD 1B 00         [ 4]  452 	call incr_farptr
      000175                        453 	_drop VSIZE
      000175 5B 02            [ 2]    1     addw sp,#VSIZE 
      000177 81               [ 4]  454 	ret 
                                    455 
                                    456 
                                    457 ;---------------------------------------------
                                    458 ;   UART3 subroutines
                                    459 ;---------------------------------------------
                                    460 
                                    461 ;---------------------------------------------
                                    462 ; initialize UART3, 115200 8N1
                                    463 ; input:
                                    464 ;	none
                                    465 ; output:
                                    466 ;   none
                                    467 ;---------------------------------------------
      000178                        468 uart3_init:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000178 72 16 50 C7      [ 1]  469 	bset CLK_PCKENR1,#CLK_PCKENR1_UART3 
                                    470 	; configure tx pin
      00017C 72 1A 50 11      [ 1]  471 	bset PD_DDR,#BIT5 ; tx pin
      000180 72 1A 50 12      [ 1]  472 	bset PD_CR1,#BIT5 ; push-pull output
      000184 72 1A 50 13      [ 1]  473 	bset PD_CR2,#BIT5 ; fast output
      000188                        474 uart3_set_baud: 
                                    475 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    476 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000188 A6 E1            [ 1]  477 	ld a,#CLK_SWR_HSI
      00018A C1 50 C3         [ 1]  478 	cp a,CLK_CMSR 
      00018D 27 0A            [ 1]  479 	jreq hsi_clock 
      00018F                        480 hse_clock: ; 8 Mhz 	
      00018F 35 05 52 43      [ 1]  481 	mov UART3_BRR2,#0x05 ; must be loaded first
      000193 35 04 52 42      [ 1]  482 	mov UART3_BRR1,#0x4
      000197 20 08            [ 2]  483 	jra uart_enable
      000199                        484 hsi_clock: ; 16 Mhz 	
      000199 35 0B 52 43      [ 1]  485 	mov UART3_BRR2,#0x0b ; must be loaded first
      00019D 35 08 52 42      [ 1]  486 	mov UART3_BRR1,#0x08
      0001A1                        487 uart_enable:	
      0001A1 35 0C 52 45      [ 1]  488 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      0001A5 81               [ 4]  489 	ret
                                    490 	
                                    491 ;---------------------------------
                                    492 ; send character to UART3 
                                    493 ; input:
                                    494 ;   A 
                                    495 ; output:
                                    496 ;   none 
                                    497 ;--------------------------------	
      0001A6                        498 putc:
      0001A6 72 0F 52 40 FB   [ 2]  499 	btjf UART3_SR,#UART_SR_TXE,.
      0001AB C7 52 41         [ 1]  500 	ld UART3_DR,a 
      0001AE 81               [ 4]  501 	ret 
                                    502 
                                    503 ;---------------------------------
                                    504 ; wait character from UART3 
                                    505 ; input:
                                    506 ;   none
                                    507 ; output:
                                    508 ;   A 			char  
                                    509 ;--------------------------------	
      0001AF                        510 getc:
      0001AF 72 0B 52 40 FB   [ 2]  511 	btjf UART3_SR,#UART_SR_RXNE,.
      0001B4 C6 52 41         [ 1]  512 	ld a,UART3_DR 
      0001B7 81               [ 4]  513 	ret 
                                    514 
                                    515 ;-----------------------------
                                    516 ; send an ASCIZ string to UART3 
                                    517 ; input: 
                                    518 ;   x 		char * 
                                    519 ; output:
                                    520 ;   none 
                                    521 ;-------------------------------
      0001B8                        522 puts:
      0001B8 F6               [ 1]  523     ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001B9 27 06            [ 1]  524 	jreq 1$
      0001BB CD 01 A6         [ 4]  525 	call putc 
      0001BE 5C               [ 1]  526 	incw x 
      0001BF 20 F7            [ 2]  527 	jra puts 
      0001C1 81               [ 4]  528 1$:	ret 
                                    529 
                                    530 
                                    531 ;---------------------------
                                    532 ; delete character at left 
                                    533 ; of cursor on terminal 
                                    534 ; input:
                                    535 ;   none 
                                    536 ; output:
                                    537 ;	none 
                                    538 ;---------------------------
      0001C2                        539 bksp:
      0001C2 A6 08            [ 1]  540 	ld a,#BSP 
      0001C4 CD 01 A6         [ 4]  541 	call putc 
      0001C7 A6 20            [ 1]  542 	ld a,#SPACE 
      0001C9 CD 01 A6         [ 4]  543 	call putc 
      0001CC A6 08            [ 1]  544 	ld a,#BSP 
      0001CE CD 01 A6         [ 4]  545 	call putc 
      0001D1 81               [ 4]  546 	ret 
                                    547 ;---------------------------
                                    548 ; delete n character left of cursor 
                                    549 ; at terminal.
                                    550 ; input: 
                                    551 ;   A   	number of characters to delete.
                                    552 ; output:
                                    553 ;    none 
                                    554 ;--------------------------	
      0001D2                        555 delete:
      0001D2 88               [ 1]  556 	push a 
      0001D3 0D 01            [ 1]  557 0$:	tnz (1,sp)
      0001D5 27 07            [ 1]  558 	jreq 1$
      0001D7 CD 01 C2         [ 4]  559 	call bksp 
      0001DA 0A 01            [ 1]  560 	dec (1,sp)
      0001DC 20 F5            [ 2]  561 	jra 0$
      0001DE 84               [ 1]  562 1$:	pop a 
      0001DF 81               [ 4]  563 	ret
                                    564 
                                    565 ;--------------------------
                                    566 ; print n spaces on terminal
                                    567 ; input:
                                    568 ;  X 		number of spaces 
                                    569 ; output:
                                    570 ;	none 
                                    571 ;---------------------------
      0001E0                        572 spaces:
      0001E0 A6 20            [ 1]  573 	ld a,#SPACE 
      0001E2 5D               [ 2]  574 1$:	tnzw x
      0001E3 27 06            [ 1]  575 	jreq 9$
      0001E5 CD 01 A6         [ 4]  576 	call putc 
      0001E8 5A               [ 2]  577 	decw x
      0001E9 20 F7            [ 2]  578 	jra 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001EB                        579 9$: 
      0001EB 81               [ 4]  580 	ret 
                                    581 
                           000001   582 .if DEBUG 
                                    583 ;---------------------------------
                                    584 ;; print actual registers states 
                                    585 ;; as pushed on stack 
                                    586 ;; {Y,X,CC,A}
                                    587 ;---------------------------------
      0001EC                        588 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001EC                        589 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001EC                        590 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001EC                        591 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001EC                        592 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001EC                        593 prt_regs:
      0001EC AE 02 2F         [ 2]  594 	ldw x,#regs_state 
      0001EF CD 01 B8         [ 4]  595 	call puts
                                    596 ; register PC
      0001F2 16 01            [ 2]  597 	ldw y,(1,sp)
      0001F4 AE 09 2A         [ 2]  598 	ldw x,#REG_EPC 
      0001F7 CD 08 7B         [ 4]  599 	call prt_reg16 
                                    600 ; register CC 
      0001FA 7B 08            [ 1]  601 	ld a,(R_CC,sp)
      0001FC AE 09 3B         [ 2]  602 	ldw x,#REG_CC 
      0001FF CD 08 56         [ 4]  603 	call prt_reg8 
                                    604 ; register A 
      000202 7B 07            [ 1]  605 	ld a,(R_A,sp)
      000204 AE 09 37         [ 2]  606 	ldw x,#REG_A 
      000207 CD 08 56         [ 4]  607 	call prt_reg8 
                                    608 ; register X 
      00020A 16 05            [ 2]  609 	ldw y,(R_X,sp)
      00020C AE 09 33         [ 2]  610 	ldw x,#REG_X 
      00020F CD 08 7B         [ 4]  611 	call prt_reg16 
                                    612 ; register Y 
      000212 16 03            [ 2]  613 	ldw y,(R_Y,sp)
      000214 AE 09 2F         [ 2]  614 	ldw x,#REG_Y 
      000217 CD 08 7B         [ 4]  615 	call prt_reg16 
                                    616 ; register SP 
      00021A 90 96            [ 1]  617 	ldw y,sp
      00021C 72 A9 00 08      [ 2]  618 	addw y,#6+ARG_OFS  
      000220 AE 09 40         [ 2]  619 	ldw x,#REG_SP
      000223 CD 08 7B         [ 4]  620 	call prt_reg16
      000226 A6 0D            [ 1]  621 	ld a,#CR 
      000228 CD 01 A6         [ 4]  622 	call putc
      00022B CD 01 A6         [ 4]  623 	call putc   
      00022E 81               [ 4]  624 	ret 
                                    625 
      00022F 0A 72 65 67 69 73 74   626 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    627 
                                    628 
                                    629 ;--------------------
                                    630 ; print content at address in hex.
                                    631 ; input:
                                    632 ;   X 	address to peek 
                                    633 ; output:
                                    634 ;	none 
                                    635 ;--------------------	
      000256                        636 prt_peek:
      000256 89               [ 2]  637 	pushw x 
      000257 CF 00 08         [ 2]  638 	ldw acc16,x 
      00025A 72 5F 00 07      [ 1]  639 	clr acc24 
      00025E 5F               [ 1]  640 	clrw x 
      00025F A6 10            [ 1]  641 	ld a,#16 
      000261 CD 09 45         [ 4]  642 	call prti24 
      000264 A6 3A            [ 1]  643 	ld a,#': 
      000266 CD 01 A6         [ 4]  644 	call putc 
      000269 A6 20            [ 1]  645 	ld a,#SPACE 
      00026B CD 01 A6         [ 4]  646 	call putc 
      00026E 85               [ 2]  647 	popw x 
      00026F F6               [ 1]  648 	ld a,(x)
      000270 C7 00 09         [ 1]  649 	ld acc8,a 
      000273 5F               [ 1]  650 	clrw x 
      000274 A6 10            [ 1]  651 	ld a,#16 
      000276 CD 09 45         [ 4]  652 	call prti24
      000279 81               [ 4]  653 	ret 
                                    654 .endif ; DEBUG  
                                    655 
                                    656 ;-------------------------------------
                                    657 ; retrun string length
                                    658 ; input:
                                    659 ;   X         .asciz  
                                    660 ; output:
                                    661 ;   X         length 
                                    662 ;-------------------------------------
      00027A                        663 strlen:
      00027A 90 93            [ 1]  664 	ldw y,x 
      00027C 5F               [ 1]  665 	clrw x 
      00027D 90 7D            [ 1]  666 1$:	tnz (y) 
      00027F 27 05            [ 1]  667 	jreq 9$ 
      000281 5C               [ 1]  668 	incw x
      000282 90 5C            [ 1]  669 	incw y 
      000284 20 F7            [ 2]  670 	jra 1$ 
      000286 81               [ 4]  671 9$: ret 
                                    672 
                                    673 ;------------------------------------
                                    674 ; compare 2 strings
                                    675 ; input:
                                    676 ;   X 		char* first string 
                                    677 ;   Y       char* second string 
                                    678 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    679 ;   A 		0|1 
                                    680 ;-------------------------------------
      000287                        681 strcmp:
      000287 F6               [ 1]  682 	ld a,(x)
      000288 27 0B            [ 1]  683 	jreq 5$ 
      00028A 90 F1            [ 1]  684 	cp a,(y) 
      00028C 26 05            [ 1]  685 	jrne 4$ 
      00028E 5C               [ 1]  686 	incw x 
      00028F 90 5C            [ 1]  687 	incw y 
      000291 20 F4            [ 2]  688 	jra strcmp 
      000293                        689 4$: ; not same  
      000293 4F               [ 1]  690 	clr a 
      000294 81               [ 4]  691 	ret 
      000295                        692 5$: ; same 
      000295 A6 01            [ 1]  693 	ld a,#1 
      000297 81               [ 4]  694 	ret 
                                    695 
                                    696 
                                    697 ;---------------------------------------
                                    698 ;  copy src to dest 
                                    699 ; input:
                                    700 ;   X 		dest 
                                    701 ;   Y 		src 
                                    702 ; output: 
                                    703 ;   X 		dest 
                                    704 ;----------------------------------
      000298                        705 strcpy:
      000298 89               [ 2]  706 	pushw x 
      000299 90 F6            [ 1]  707 1$: ld a,(y)
      00029B 27 06            [ 1]  708 	jreq 9$ 
      00029D F7               [ 1]  709 	ld (x),a 
      00029E 5C               [ 1]  710 	incw x 
      00029F 90 5C            [ 1]  711 	incw y 
      0002A1 20 F6            [ 2]  712 	jra 1$ 
      0002A3 7F               [ 1]  713 9$:	clr (x)
      0002A4 85               [ 2]  714 	popw x 
      0002A5 81               [ 4]  715 	ret 
                                    716 
                                    717 ;---------------------------------------
                                    718 ; move memory block 
                                    719 ; input:
                                    720 ;   X 		destination 
                                    721 ;   Y 	    source 
                                    722 ;   acc16	size 
                                    723 ; output:
                                    724 ;   none 
                                    725 ;--------------------------------------
                           000001   726 	INCR=1 ; increament high byte 
                           000002   727 	LB=2 ; increament low byte 
                           000002   728 	VSIZE=2
      0002A6                        729 move:
      0002A6                        730 	_vars VSIZE 
      0002A6 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A8 0F 01            [ 1]  731 	clr (INCR,sp)
      0002AA 0F 02            [ 1]  732 	clr (LB,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002AC 90 89            [ 2]  733 	pushw y 
      0002AE 13 01            [ 2]  734 	cpw x,(1,sp) ; compare DEST to SRC 
      0002B0 90 85            [ 2]  735 	popw y 
      0002B2 27 31            [ 1]  736 	jreq move_exit ; x==y 
      0002B4 2B 0E            [ 1]  737 	jrmi move_down
      0002B6                        738 move_up: ; start from top address with incr=-1
      0002B6 72 BB 00 08      [ 2]  739 	addw x,acc16
      0002BA 72 B9 00 08      [ 2]  740 	addw y,acc16
      0002BE 03 01            [ 1]  741 	cpl (INCR,sp)
      0002C0 03 02            [ 1]  742 	cpl (LB,sp)   ; increment = -1 
      0002C2 20 05            [ 2]  743 	jra move_loop  
      0002C4                        744 move_down: ; start from bottom address with incr=1 
      0002C4 5A               [ 2]  745     decw x 
      0002C5 90 5A            [ 2]  746 	decw y
      0002C7 0C 02            [ 1]  747 	inc (LB,sp) ; incr=1 
      0002C9                        748 move_loop:	
      0002C9 C6 00 08         [ 1]  749     ld a, acc16 
      0002CC CA 00 09         [ 1]  750 	or a, acc8
      0002CF 27 14            [ 1]  751 	jreq move_exit 
      0002D1 72 FB 01         [ 2]  752 	addw x,(INCR,sp)
      0002D4 72 F9 01         [ 2]  753 	addw y,(INCR,sp) 
      0002D7 90 F6            [ 1]  754 	ld a,(y)
      0002D9 F7               [ 1]  755 	ld (x),a 
      0002DA 89               [ 2]  756 	pushw x 
      0002DB CE 00 08         [ 2]  757 	ldw x,acc16 
      0002DE 5A               [ 2]  758 	decw x 
      0002DF CF 00 08         [ 2]  759 	ldw acc16,x 
      0002E2 85               [ 2]  760 	popw x 
      0002E3 20 E4            [ 2]  761 	jra move_loop
      0002E5                        762 move_exit:
      0002E5                        763 	_drop VSIZE
      0002E5 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002E7 81               [ 4]  764 	ret 	
                                    765 
                                    766 ;-------------------------------------
                                    767 ; search text area for a line with 
                                    768 ; same number as line#  
                                    769 ; input:
                                    770 ;	X 			line# 
                                    771 ; output:
                                    772 ;   X 			addr of line | 0 
                                    773 ;   Y           line#|insert address if not found  
                                    774 ;-------------------------------------
                           000001   775 	LL=1 ; line length 
                           000002   776 	LB=2 ; line length low byte 
                           000002   777 	VSIZE=2 
      0002E8                        778 search_lineno:
      0002E8                        779 	_vars VSIZE
      0002E8 52 02            [ 2]    1     sub sp,#VSIZE 
      0002EA 0F 01            [ 1]  780 	clr (LL,sp)
      0002EC 90 CE 00 18      [ 2]  781 	ldw y,txtbgn
      0002F0                        782 search_ln_loop:
      0002F0 90 C3 00 1A      [ 2]  783 	cpw y,txtend 
      0002F4 2A 10            [ 1]  784 	jrpl 8$
      0002F6 90 F3            [ 1]  785 	cpw x,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0002F8 27 0E            [ 1]  786 	jreq 9$
      0002FA 2B 0A            [ 1]  787 	jrmi 8$ 
      0002FC 90 E6 02         [ 1]  788 	ld a,(2,y)
      0002FF 6B 02            [ 1]  789 	ld (LB,sp),a 
      000301 72 F9 01         [ 2]  790 	addw y,(LL,sp)
      000304 20 EA            [ 2]  791 	jra search_ln_loop 
      000306                        792 8$: 
      000306 5F               [ 1]  793 	clrw x 	
      000307 51               [ 1]  794 	exgw x,y 
      000308                        795 9$: _drop VSIZE
      000308 5B 02            [ 2]    1     addw sp,#VSIZE 
      00030A 51               [ 1]  796 	exgw x,y   
      00030B 81               [ 4]  797 	ret 
                                    798 
                                    799 ;-------------------------------------
                                    800 ; delete line at addr
                                    801 ; move new line to insert with end of text 
                                    802 ; otherwise it would be overwritten.
                                    803 ; input:
                                    804 ;   X 		addr of line i.e DEST for move 
                                    805 ;-------------------------------------
                           000001   806 	LLEN=1
                           000003   807 	SRC=3
                           000004   808 	VSIZE=4
      00030C                        809 del_line: 
      00030C                        810 	_vars VSIZE 
      00030C 52 04            [ 2]    1     sub sp,#VSIZE 
      00030E E6 02            [ 1]  811 	ld a,(2,x) ; line length
      000310 6B 02            [ 1]  812 	ld (LLEN+1,sp),a 
      000312 0F 01            [ 1]  813 	clr (LLEN,sp)
      000314 90 93            [ 1]  814 	ldw y,x  
      000316 72 F9 01         [ 2]  815 	addw y,(LLEN,sp) ;SRC  
      000319 17 03            [ 2]  816 	ldw (SRC,sp),y  ;save source 
      00031B 90 CE 00 1A      [ 2]  817 	ldw y,txtend 
      00031F 90 E6 02         [ 1]  818 	ld a,(2,y)
      000322 90 5F            [ 1]  819 	clrw y 
      000324 90 97            [ 1]  820 	ld yl,a  
      000326 72 B9 00 1A      [ 2]  821 	addw y,txtend
      00032A 72 F2 03         [ 2]  822 	subw y,(SRC,sp) ; y=count 
      00032D 90 CF 00 08      [ 2]  823 	ldw acc16,y 
      000331 16 03            [ 2]  824 	ldw y,(SRC,sp)    ; source
      000333 CD 02 A6         [ 4]  825 	call move
      000336 90 CE 00 1A      [ 2]  826 	ldw y,txtend 
      00033A 72 F2 01         [ 2]  827 	subw y,(LLEN,sp)
      00033D 90 CF 00 1A      [ 2]  828 	ldw txtend,y  
      000341                        829 	_drop VSIZE     
      000341 5B 04            [ 2]    1     addw sp,#VSIZE 
      000343 81               [ 4]  830 	ret 
                                    831 
                                    832 ;---------------------------------------------
                                    833 ; create a gap in text area 
                                    834 ; move new line to insert in gap with end of text
                                    835 ; otherwise it would be overwritten.
                                    836 ; input:
                                    837 ;    X 			addr gap start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    838 ;    Y 			gap length 
                                    839 ; output:
                                    840 ;    X 			addr gap start 
                                    841 ;--------------------------------------------
                           000001   842 	DEST=1
                           000003   843 	SRC=3
                           000005   844 	LEN=5
                           000006   845 	VSIZE=6 
      000344                        846 create_gap:
      000344                        847 	_vars VSIZE
      000344 52 06            [ 2]    1     sub sp,#VSIZE 
      000346 1F 03            [ 2]  848 	ldw (SRC,sp),x 
      000348 17 05            [ 2]  849 	ldw (LEN,sp),y 
      00034A 90 CF 00 08      [ 2]  850 	ldw acc16,y 
      00034E 90 93            [ 1]  851 	ldw y,x ; SRC
      000350 72 BB 00 08      [ 2]  852 	addw x,acc16  
      000354 1F 01            [ 2]  853 	ldw (DEST,sp),x 
                                    854 ;compute size to move 	
      000356 CE 00 1A         [ 2]  855 	ldw x,txtend 
      000359 E6 02            [ 1]  856 	ld a,(2,x) ; pending line length 
      00035B C7 00 09         [ 1]  857 	ld acc8,a 
      00035E 72 5F 00 08      [ 1]  858 	clr acc16 
      000362 72 BB 00 08      [ 2]  859 	addw x,acc16 
      000366 72 F0 03         [ 2]  860 	subw x,(SRC,sp)
      000369 CF 00 08         [ 2]  861 	ldw acc16,x ; size to move
      00036C 1E 01            [ 2]  862 	ldw x,(DEST,sp) 
      00036E CD 02 A6         [ 4]  863 	call move
      000371 CE 00 1A         [ 2]  864 	ldw x,txtend
      000374 72 FB 05         [ 2]  865 	addw x,(LEN,sp)
      000377 CF 00 1A         [ 2]  866 	ldw txtend,x
      00037A                        867 9$:	_drop VSIZE 
      00037A 5B 06            [ 2]    1     addw sp,#VSIZE 
      00037C 81               [ 4]  868 	ret 
                                    869 
                                    870 
                                    871 ;--------------------------------------------
                                    872 ; insert line in tib into text area 
                                    873 ; first search for already existing 
                                    874 ; replace existing 
                                    875 ; if strlen(tib)==0 delete existing 
                                    876 ; input:
                                    877 ;   ptr16 				pointer to tokenized line  
                                    878 ; output:
                                    879 ;   none
                                    880 ;---------------------------------------------
                           000001   881 	DEST=1  ; text area insertion address 
                           000003   882 	SRC=3   ; str to insert address 
                           000005   883 	LINENO=5 ; line number 
                           000007   884 	LLEN=7 ; line length 
                           000008   885 	VSIZE=8  
      00037D                        886 insert_line:
      00037D                        887 	_vars VSIZE 
      00037D 52 08            [ 2]    1     sub sp,#VSIZE 
      00037F CE 00 11         [ 2]  888 	ldw x,ptr16  
      000382 C3 00 18         [ 2]  889 	cpw x,txtbgn 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000385 26 0D            [ 1]  890 	jrne 0$
                                    891 ;first text line 
      000387 AE 00 02         [ 2]  892 	ldw x,#2 
      00038A 72 D6 00 11      [ 4]  893 	ld a,([ptr16],x)
      00038E 5F               [ 1]  894 	clrw x 
      00038F 97               [ 1]  895 	ld xl,a
      000390 1F 07            [ 2]  896 	ldw (LLEN,sp),x  
      000392 20 45            [ 2]  897 	jra 5$
      000394 72 CE 00 11      [ 5]  898 0$:	ldw x,[ptr16]
                                    899 ; new line number
      000398 1F 05            [ 2]  900 	ldw (LINENO,sp),x 
      00039A AE 00 02         [ 2]  901 	ldw x,#2 
      00039D 72 D6 00 11      [ 4]  902 	ld a,([ptr16],x)
      0003A1 97               [ 1]  903 	ld xl,a
                                    904 ; new line length
      0003A2 1F 07            [ 2]  905 	ldw (LLEN,sp),x
                                    906 ; check if that line number already exit 	
      0003A4 1E 05            [ 2]  907 	ldw x,(LINENO,sp)
      0003A6 CD 02 E8         [ 4]  908 	call search_lineno 
      0003A9 5D               [ 2]  909 	tnzw x 
      0003AA 26 04            [ 1]  910 	jrne 2$
                                    911 ; line doesn't exit
                                    912 ; it will be inserted at this point.  	
      0003AC 17 01            [ 2]  913 	ldw (DEST,sp),y 
      0003AE 20 05            [ 2]  914 	jra 3$
                                    915 ; line exit delete it.
                                    916 ; it will be replaced by new one 	
      0003B0 1F 01            [ 2]  917 2$: ldw (DEST,sp),x 
      0003B2 CD 03 0C         [ 4]  918 	call del_line
      0003B5                        919 3$: 
                                    920 ; insert new line or leave if LLEN==3
                                    921 ; LLEN==3 means empty line 
      0003B5 A6 03            [ 1]  922 	ld a,#3
      0003B7 11 08            [ 1]  923 	cp a,(LLEN+1,sp)
      0003B9 27 27            [ 1]  924 	jreq insert_ln_exit ; empty line exit.
                                    925 ; if insertion point at txtend 
                                    926 ; no move required 
      0003BB 1E 01            [ 2]  927 	ldw x,(DEST,sp)
      0003BD C3 00 1A         [ 2]  928 	cpw x,txtend 
      0003C0 2A 17            [ 1]  929 	jrpl 5$ 
                                    930 ; must create a gap
                                    931 ; at insertion point  
      0003C2 1E 01            [ 2]  932 	ldw x,(DEST,sp)
      0003C4 16 07            [ 2]  933 	ldw y,(LLEN,sp)
      0003C6 CD 03 44         [ 4]  934 	call create_gap 
                                    935 ; move new line in gap 
      0003C9 1E 07            [ 2]  936 	ldw x,(LLEN,sp)
      0003CB CF 00 08         [ 2]  937 	ldw acc16,x 
      0003CE 90 CE 00 1A      [ 2]  938 	ldw y,txtend ;SRC 
      0003D2 1E 01            [ 2]  939 	ldw x,(DEST,sp) ; dest address 
      0003D4 CD 02 A6         [ 4]  940 	call move 
      0003D7 20 09            [ 2]  941 	jra insert_ln_exit  
      0003D9                        942 5$: ; no move required 
      0003D9 1E 07            [ 2]  943 	ldw x,(LLEN,sp) 
      0003DB 72 BB 00 1A      [ 2]  944 	addw x,txtend 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003DF CF 00 1A         [ 2]  945 	ldw txtend,x 
      0003E2                        946 insert_ln_exit:	
      0003E2                        947 	_drop VSIZE
      0003E2 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003E4 81               [ 4]  948 	ret
                                    949 
                                    950 
                                    951 ;-----------------------------
                                    952 ; check if text buffer full
                                    953 ; input:
                                    954 ;   ptr16     addr start tokenize line 
                                    955 ;   X         buffer index 
                                    956 ; output:
                                    957 ;   none 
                                    958 ;-----------------------------------
      0003E5                        959 check_full:
      0003E5 72 BB 00 11      [ 2]  960 	addw x,ptr16 
      0003E9 A3 16 C8         [ 2]  961 	cpw x,#tib 
      0003EC 25 05            [ 1]  962 	jrult 1$
      0003EE A6 01            [ 1]  963 	ld a,#ERR_MEM_FULL
      0003F0 CC 07 16         [ 2]  964 	jp tb_error 
      0003F3 81               [ 4]  965 1$: ret 
                                    966 
                                    967 
                                    968 ;-----------------------------------
                                    969 ; create token list form text line 
                                    970 ; save this list in text area
                                    971 ; input:
                                    972 ;   none
                                    973 ; output:
                                    974 ;   basicptr     token list buffer
                                    975 ;   line# 		 BASIC line number 
                                    976 ;   in.w  		 cleared 
                                    977 ;-----------------------------------
                                    978 	.macro _incr_ptr16 n 
                                    979 	ldw x,#n 
                                    980 	addw x,ptr16 
                                    981 	ldw ptr16,x 
                                    982 	.endm 
                                    983 
                           000001   984 	XSAVE=1
                           000003   985 	BUFIDX=3
                           000004   986 	VSIZE=4
      0003F4                        987 compile:
      0003F4                        988 	_vars VSIZE 
      0003F4 52 04            [ 2]    1     sub sp,#VSIZE 
      0003F6 72 1A 00 1F      [ 1]  989 	bset flags,#FCOMP 
      0003FA CE 00 1A         [ 2]  990 	ldw x,txtend
      0003FD CF 00 11         [ 2]  991 	ldw ptr16,x 
      000400 5F               [ 1]  992 	clrw x 
      000401 AE 00 03         [ 2]  993 	ldw x,#3
      000404 1F 03            [ 2]  994 	ldw (BUFIDX,sp),X  
      000406 CD 03 E5         [ 4]  995 	call check_full
      000409 5F               [ 1]  996 	clrw x 
      00040A 72 CF 00 11      [ 5]  997 	ldw [ptr16],x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00040E CD 0C F4         [ 4]  998 	call get_token
      000411 1F 01            [ 2]  999 	ldw (XSAVE,sp),x 
      000413 A1 04            [ 1] 1000 	cp a,#TK_INTGR 
      000415 26 11            [ 1] 1001 	jrne 3$
      000417 A3 00 00         [ 2] 1002 	cpw x,#0  
      00041A 22 03            [ 1] 1003 	jrugt 1$
      00041C CC 07 14         [ 2] 1004 	jp syntax_error 
      00041F 72 CF 00 11      [ 5] 1005 1$:	ldw [ptr16],x; line number
      000423 CD 0C F4         [ 4] 1006 2$:	call get_token
      000426 1F 01            [ 2] 1007 	ldw (XSAVE,sp),x 
      000428 A1 00            [ 1] 1008 3$:	cp a,#TK_NONE 
      00042A 26 03            [ 1] 1009 	jrne 30$
      00042C CC 04 BF         [ 2] 1010 	jp 9$
      00042F                       1011 30$: 	 
      00042F 1E 03            [ 2] 1012 	ldw x,(BUFIDX,sp)
      000431 CD 03 E5         [ 4] 1013 	call check_full 
      000434 16 03            [ 2] 1014 	ldw y,(BUFIDX,sp) 
      000436 91 D7 11         [ 4] 1015 	ld ([ptr16],y),a ; token attribute 
      000439 90 5C            [ 1] 1016 	incw y
      00043B 17 03            [ 2] 1017 	ldw (BUFIDX,sp),y
      00043D A1 01            [ 1] 1018 	cp a,#TK_COLON 
      00043F 26 02            [ 1] 1019 	jrne 31$
      000441 20 E0            [ 2] 1020 	jra 2$ 
      000443                       1021 31$:
      000443 A1 03            [ 1] 1022 	cp a,#TK_CHAR
      000445 26 0C            [ 1] 1023 	jrne 32$ 
      000447 1E 01            [ 2] 1024 	ldw x,(XSAVE,sp)
      000449 9F               [ 1] 1025 	ld a,xl 
      00044A 91 D7 11         [ 4] 1026 	ld ([ptr16],y),a
      00044D 90 5C            [ 1] 1027 	incw y 
      00044F 17 03            [ 2] 1028 	ldw (BUFIDX,sp),y 
      000451 20 D0            [ 2] 1029 	jra 2$ 
      000453                       1030 32$:
      000453 A1 02            [ 1] 1031 	cp a,#TK_ARRAY 
      000455 27 CC            [ 1] 1032 	jreq 2$ 
      000457 A1 0A            [ 1] 1033 	cp a,#TK_QSTR 
      000459 26 25            [ 1] 1034 	jrne 4$
      00045B AE 17 18         [ 2] 1035 	ldw x,#pad 
      00045E CD 02 7A         [ 4] 1036 	call strlen
      000461 5C               [ 1] 1037 	incw x  
      000462 CD 03 E5         [ 4] 1038 	call check_full 
      000465 90 AE 17 18      [ 2] 1039 	ldw y,#pad 
      000469 CE 00 11         [ 2] 1040 	ldw x,ptr16
      00046C 72 FB 03         [ 2] 1041 	addw x,(BUFIDX,sp)	
      00046F CD 02 98         [ 4] 1042 	call strcpy 
      000472 AE 17 18         [ 2] 1043 	ldw x,#pad 
      000475 CD 02 7A         [ 4] 1044 	call strlen 
      000478 5C               [ 1] 1045 	incw x
      000479 72 FB 03         [ 2] 1046 	addw x,(BUFIDX,sp) 
      00047C 1F 03            [ 2] 1047 	ldw (BUFIDX,sp),x
      00047E 20 A3            [ 2] 1048 	jra 2$  
      000480 A1 04            [ 1] 1049 4$: cp a,#TK_INTGR
      000482 25 9F            [ 1] 1050 	jrult 2$
      000484 A1 09            [ 1] 1051 	cp a,#TK_CONST 
      000486 22 9B            [ 1] 1052 	Jrugt 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000488 1E 01            [ 2] 1053 	ldw x,(XSAVE,sp) 
      00048A 16 03            [ 2] 1054 	ldw y,(BUFIDX,sp)
      00048C 91 DF 11         [ 5] 1055 	ldw ([ptr16],y),x
      00048F A3 17 09         [ 2] 1056 	cpw x,#rem 
      000492 26 22            [ 1] 1057 	jrne 5$	
                                   1058 ; comment advance in.w to eol 
      000494 72 A9 00 02      [ 2] 1059 	addw y,#2 ; skip exec address 
      000498 17 03            [ 2] 1060 	ldw (BUFIDX,sp),y 
      00049A CE 00 11         [ 2] 1061 	ldw x,ptr16 
      00049D 72 FB 03         [ 2] 1062 	addw x,(BUFIDX,sp)
      0004A0 90 CE 00 00      [ 2] 1063 	ldw y,in.w 
      0004A4 72 A9 16 C8      [ 2] 1064 	addw y,#tib 
      0004A8 CD 02 98         [ 4] 1065 	call strcpy 	
      0004AB CD 02 7A         [ 4] 1066 	call strlen 
      0004AE 5C               [ 1] 1067 	incw x ; skip string 0. 
      0004AF 72 FB 03         [ 2] 1068 	addw x,(BUFIDX,sp)
      0004B2 1F 03            [ 2] 1069 	ldw (BUFIDX,sp),x 
      0004B4 20 09            [ 2] 1070 	jra 9$
      0004B6 72 A9 00 02      [ 2] 1071 5$:	addw y,#2 
      0004BA 17 03            [ 2] 1072 	ldw (BUFIDX,sp),y 
      0004BC CC 04 23         [ 2] 1073 	jp 2$
      0004BF                       1074 9$: 
      0004BF AE 00 02         [ 2] 1075 	ldw x,#2
      0004C2 16 03            [ 2] 1076 	ldw y,(BUFIDX,sp)
      0004C4 90 9F            [ 1] 1077 	ld a,yl 
      0004C6 72 D7 00 11      [ 4] 1078 	ld ([ptr16],x),a  	
      0004CA 72 CE 00 11      [ 5] 1079 	ldw x,[ptr16]
      0004CE 27 09            [ 1] 1080 	jreq 10$
      0004D0 CD 03 7D         [ 4] 1081 	call insert_line
      0004D3 72 5F 00 03      [ 1] 1082 	clr  count 
      0004D7 20 0F            [ 2] 1083 	jra  11$ 
      0004D9                       1084 10$: 
      0004D9 CE 00 11         [ 2] 1085 	ldw x,ptr16 
      0004DC CF 00 04         [ 2] 1086 	ldw basicptr,x 
      0004DF E6 02            [ 1] 1087 	ld a,(2,x)
      0004E1 C7 00 03         [ 1] 1088 	ld count,a 
      0004E4 35 03 00 01      [ 1] 1089 	mov in,#3 
      0004E8                       1090 11$:
      0004E8                       1091 	_drop VSIZE 
      0004E8 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004EA 72 1B 00 1F      [ 1] 1092 	bres flags,#FCOMP 
      0004EE 81               [ 4] 1093 	ret 
                                   1094 
                                   1095 
                                   1096 ;------------------------------------
                                   1097 ;  set all variables to zero 
                                   1098 ; input:
                                   1099 ;   none 
                                   1100 ; output:
                                   1101 ;	none
                                   1102 ;------------------------------------
      0004EF                       1103 clear_vars:
      0004EF AE 00 21         [ 2] 1104 	ldw x,#vars 
      0004F2 90 AE 00 34      [ 2] 1105 	ldw y,#2*26 
      0004F6 7F               [ 1] 1106 1$:	clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      0004F7 5C               [ 1] 1107 	incw x 
      0004F8 90 5A            [ 2] 1108 	decw y 
      0004FA 26 FA            [ 1] 1109 	jrne 1$
      0004FC 81               [ 4] 1110 	ret 
                                   1111 
                                   1112 ;-------------------------------------
                                   1113 ; check if A is a letter
                                   1114 ; input:
                                   1115 ;   A 			character to test 
                                   1116 ; output:
                                   1117 ;   C flag      1 true, 0 false 
                                   1118 ;-------------------------------------
      0004FD                       1119 is_alpha:
      0004FD A1 41            [ 1] 1120 	cp a,#'A 
      0004FF 8C               [ 1] 1121 	ccf
      000500 24 0B            [ 1] 1122 	jrnc 9$ 
      000502 A1 5B            [ 1] 1123 	cp a,#'Z+1 
      000504 25 07            [ 1] 1124 	jrc 9$ 
      000506 A1 61            [ 1] 1125 	cp a,#'a 
      000508 8C               [ 1] 1126 	ccf 
      000509 24 02            [ 1] 1127 	jrnc 9$
      00050B A1 7B            [ 1] 1128 	cp a,#'z+1   
      00050D 81               [ 4] 1129 9$: ret 	
                                   1130 
                                   1131 ;-------------------------------------
                                   1132 ;  program initialization entry point 
                                   1133 ;-------------------------------------
                           000001  1134 	MAJOR=1
                           000000  1135 	MINOR=0
      00050E 0A 0A 54 69 6E 79 20  1136 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      000554                       1137 cold_start:
                                   1138 ;set stack 
      000554 AE 17 FF         [ 2] 1139 	ldw x,#STACK_EMPTY
      000557 94               [ 1] 1140 	ldw sp,x   
                                   1141 ; clear all ram 
      000558 7F               [ 1] 1142 0$: clr (x)
      000559 5A               [ 2] 1143 	decw x 
      00055A 26 FC            [ 1] 1144 	jrne 0$
                                   1145 ; activate pull up on all inputs 
      00055C A6 FF            [ 1] 1146 	ld a,#255 
      00055E C7 50 03         [ 1] 1147 	ld PA_CR1,a 
      000561 C7 50 08         [ 1] 1148 	ld PB_CR1,a 
      000564 C7 50 0D         [ 1] 1149 	ld PC_CR1,a 
      000567 C7 50 12         [ 1] 1150 	ld PD_CR1,a 
      00056A C7 50 17         [ 1] 1151 	ld PE_CR1,a 
      00056D C7 50 1C         [ 1] 1152 	ld PF_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000570 C7 50 21         [ 1] 1153 	ld PG_CR1,a 
      000573 C7 50 2B         [ 1] 1154 	ld PI_CR1,a 
                                   1155 ; disable schmitt triggers on Arduino CN4 analog inputs
      000576 55 00 3F 54 07   [ 1] 1156 	mov ADC_TDRL,0x3f
                                   1157 ; disable peripherals clocks
      00057B 72 5F 50 C7      [ 1] 1158 	clr CLK_PCKENR1 
      00057F 72 5F 50 CA      [ 1] 1159 	clr CLK_PCKENR2 
                                   1160 			
                                   1161 ; select internal clock no divisor: 16 Mhz 	
      000583 A6 E1            [ 1] 1162 	ld a,#CLK_SWR_HSI 
      000585 5F               [ 1] 1163 	clrw x  
      000586 CD 00 99         [ 4] 1164     call clock_init 
      000589 CD 00 AF         [ 4] 1165 	call timer4_init
                                   1166 ; UART3 at 115200 BAUD
      00058C CD 01 78         [ 4] 1167 	call uart3_init
                                   1168 ; activate PE_4 (user button interrupt)
      00058F 72 18 50 18      [ 1] 1169     bset PE_CR2,#USR_BTN_BIT 
                                   1170 ; display system information
      000593 AE 05 0E         [ 2] 1171 	ldw x,#software 
      000596 CD 01 B8         [ 4] 1172 	call puts 
      000599 A6 01            [ 1] 1173 	ld a,#MAJOR 
      00059B C7 00 09         [ 1] 1174 	ld acc8,a 
      00059E 5F               [ 1] 1175 	clrw x 
      00059F CF 00 07         [ 2] 1176 	ldw acc24,x 
      0005A2 A6 0A            [ 1] 1177 	ld a,#10 
      0005A4 CD 09 45         [ 4] 1178 	call prti24 
      0005A7 A6 2E            [ 1] 1179 	ld a,#'.
      0005A9 CD 01 A6         [ 4] 1180 	call putc 
      0005AC A6 00            [ 1] 1181 	ld a,#MINOR 
      0005AE C7 00 09         [ 1] 1182 	ld acc8,a 
      0005B1 5F               [ 1] 1183 	clrw x 
      0005B2 CF 00 07         [ 2] 1184 	ldw acc24,x 
      0005B5 A6 0A            [ 1] 1185 	ld a,#10 
      0005B7 CD 09 45         [ 4] 1186 	call prti24 
      0005BA A6 0D            [ 1] 1187 	ld a,#CR 
      0005BC CD 01 A6         [ 4] 1188 	call putc 
      0005BF CD 1B 0E         [ 4] 1189 	call seek_fdrive 
                                   1190 ; configure LD2 pin 
      0005C2 72 1A 50 0D      [ 1] 1191     bset PC_CR1,#LED2_BIT
      0005C6 72 1A 50 0E      [ 1] 1192     bset PC_CR2,#LED2_BIT
      0005CA 72 1A 50 0C      [ 1] 1193     bset PC_DDR,#LED2_BIT
      0005CE 9A               [ 1] 1194 	rim 
      0005CF 72 5C 00 0F      [ 1] 1195 	inc seedy+1 
      0005D3 72 5C 00 0D      [ 1] 1196 	inc seedx+1 
      0005D7 CD 05 E6         [ 4] 1197 	call clear_basic
      0005DA CD 13 76         [ 4] 1198 	call ubound 
      0005DD CD 0F 93         [ 4] 1199 	call dpop 
      0005E0 CF 00 1D         [ 2] 1200 	ldw array_size,x 
      0005E3 CC 07 68         [ 2] 1201     jp warm_start 
                                   1202 
                                   1203 ;---------------------------
                                   1204 ; reset BASIC text variables 
                                   1205 ; and clear variables 
                                   1206 ;---------------------------
      0005E6                       1207 clear_basic:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005E6 72 5F 00 03      [ 1] 1208 	clr count 
      0005EA AE 00 55         [ 2] 1209 	ldw x,#free_ram 
      0005ED CF 00 18         [ 2] 1210 	ldw txtbgn,x 
      0005F0 CF 00 1A         [ 2] 1211 	ldw txtend,x 
      0005F3 CD 04 EF         [ 4] 1212 	call clear_vars 
      0005F6 81               [ 4] 1213 	ret 
                                   1214 
                                   1215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1216 ;;   Tiny BASIC error messages     ;;
                                   1217 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005F7                       1218 err_msg:
      0005F7 00 00 06 0F 06 1D 06  1219 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             2C 06 46 06 56
      000603 06 6D 06 84 06 9F 06  1220 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             B1 06 C3
      00060D 06 D0                 1221 	.word err_no_access 
                                   1222 
      00060F 0A 4D 65 6D 6F 72 79  1223 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      00061D 0A 73 79 6E 74 61 78  1224 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      00062C 0A 6D 61 74 68 20 6F  1225 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      000646 0A 64 69 76 69 73 69  1226 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      000656 0A 69 6E 76 61 6C 69  1227 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      00066D 0A 72 75 6E 20 74 69  1228 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      000684 0A 63 6F 6D 6D 61 6E  1229 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      00069F 0A 64 75 70 6C 69 63  1230 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      0006B1 0A 46 69 6C 65 20 6E  1231 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006C3 0A 62 61 64 20 76 61  1232 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006D0 0A 46 69 6C 65 20 69  1233 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



             6D 20 74 68 65 72 65
             2E 0A 00
                                   1234 
      000704 6C 61 73 74 20 74 6F  1235 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1236 
      000714                       1237 syntax_error:
      000714 A6 02            [ 1] 1238 	ld a,#ERR_SYNTAX 
                                   1239 
      000716                       1240 tb_error:
      000716 AE 05 F7         [ 2] 1241 	ldw x, #err_msg 
      000719 72 5F 00 08      [ 1] 1242 	clr acc16 
      00071D 48               [ 1] 1243 	sll a
      00071E 72 59 00 08      [ 1] 1244 	rlc acc16  
      000722 C7 00 09         [ 1] 1245 	ld acc8, a 
      000725 72 BB 00 08      [ 2] 1246 	addw x,acc16 
      000729 FE               [ 2] 1247 	ldw x,(x)
      00072A CD 01 B8         [ 4] 1248 	call puts
      00072D 72 0B 00 1F 18   [ 2] 1249 	btjf flags,#FCOMP, 1$
      000732 AE 16 C8         [ 2] 1250 	ldw x,#tib
      000735 CD 01 B8         [ 4] 1251 	call puts 
      000738 A6 0D            [ 1] 1252 	ld a,#CR 
      00073A CD 01 A6         [ 4] 1253 	call putc
      00073D CE 00 00         [ 2] 1254 	ldw x,in.w
      000740 CD 01 E0         [ 4] 1255 	call spaces
      000743 A6 5E            [ 1] 1256 	ld a,#'^
      000745 CD 01 A6         [ 4] 1257 	call putc 
      000748 20 1A            [ 2] 1258 	jra 6$
      00074A CE 00 04         [ 2] 1259 1$:	ldw x,basicptr
      00074D CD 14 93         [ 4] 1260 	call prt_basic_line
      000750 AE 07 04         [ 2] 1261 	ldw x,#rt_msg 
      000753 CD 01 B8         [ 4] 1262 	call puts 
      000756 5F               [ 1] 1263 	clrw x 
      000757 C6 00 02         [ 1] 1264 	ld a,in.saved 
      00075A 97               [ 1] 1265 	ld xl,a 
      00075B 72 D6 00 04      [ 4] 1266 	ld a,([basicptr],x)
      00075F 5F               [ 1] 1267 	clrw x 
      000760 97               [ 1] 1268 	ld xl,a 
      000761 CD 09 8D         [ 4] 1269 	call print_int 
      000764 AE 17 FF         [ 2] 1270 6$: ldw x,#STACK_EMPTY 
      000767 94               [ 1] 1271     ldw sp,x
      000768                       1272 warm_start:
      000768 72 5F 00 1F      [ 1] 1273 	clr flags 
      00076C 72 5F 00 1C      [ 1] 1274 	clr loop_depth 
      000770 AE 17 80         [ 2] 1275 	ldw x,#dstack_unf 
      000773 CF 00 16         [ 2] 1276 	ldw dstkptr,x 
      000776 35 04 00 20      [ 1] 1277 	mov tab_width,#TAB_WIDTH 
      00077A 35 0A 00 06      [ 1] 1278 	mov base,#10 
      00077E AE 16 C8         [ 2] 1279 	ldw x,#tib 
      000781 CF 00 04         [ 2] 1280 	ldw basicptr,x 
                                   1281 ;----------------------------
                                   1282 ;   BASIC interpreter
                                   1283 ;----------------------------
      000784                       1284 interp:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000784 72 5F 00 00      [ 1] 1285 	clr in.w
      000788 72 01 00 1F 23   [ 2] 1286 	btjf flags,#FRUN,4$ 
                                   1287 ; running program
                                   1288 ; goto next basic line 
      00078D CE 00 04         [ 2] 1289 	ldw x,basicptr
      000790 E6 02            [ 1] 1290 	ld a,(2,x) ; line length 
      000792 C7 00 09         [ 1] 1291 	ld acc8,a 
      000795 72 5F 00 08      [ 1] 1292 	clr acc16 
      000799 72 BB 00 08      [ 2] 1293 	addw x,acc16
      00079D C3 00 1A         [ 2] 1294 	cpw x,txtend 
      0007A0 2A C6            [ 1] 1295 	jrpl warm_start
      0007A2 CF 00 04         [ 2] 1296 	ldw basicptr,x ; start of next line  
      0007A5 E6 02            [ 1] 1297 	ld a,(2,x)
      0007A7 C7 00 03         [ 1] 1298 	ld count,a 
      0007AA 35 03 00 01      [ 1] 1299 	mov in,#3 ; skip first 3 bytes of line 
      0007AE 20 14            [ 2] 1300 	jra interp_loop 
      0007B0                       1301 4$: ; commande line mode 	
      0007B0 72 5F 00 01      [ 1] 1302 	clr in
      0007B4 A6 0D            [ 1] 1303 	ld a,#CR 
      0007B6 CD 01 A6         [ 4] 1304 	call putc 
      0007B9 A6 3E            [ 1] 1305 	ld a,#'> 
      0007BB CD 01 A6         [ 4] 1306 	call putc 
      0007BE CD 0A 7B         [ 4] 1307 	call readln
      0007C1 CD 03 F4         [ 4] 1308 	call compile
      0007C4                       1309 interp_loop:  
      0007C4 C6 00 01         [ 1] 1310 	ld a,in 
      0007C7 C1 00 03         [ 1] 1311 	cp a,count  
      0007CA 2A B8            [ 1] 1312 	jrpl interp
      0007CC CD 07 F4         [ 4] 1313 	call next_token
      0007CF A1 01            [ 1] 1314 	cp a,#TK_COLON 
      0007D1 27 F1            [ 1] 1315 	jreq interp_loop 
      0007D3 A1 00            [ 1] 1316 	cp a,#TK_NONE 
                                   1317 ;	jreq interp 
      0007D5                       1318 1$:
      0007D5 A1 05            [ 1] 1319 	cp a,#TK_VAR
      0007D7 26 05            [ 1] 1320 	jrne 2$
      0007D9 CD 13 A2         [ 4] 1321 	call let02  
      0007DC 20 E6            [ 2] 1322 	jra interp_loop 
      0007DE                       1323 2$:	
      0007DE A1 02            [ 1] 1324 	cp a,#TK_ARRAY 
      0007E0 26 08            [ 1] 1325 	jrne 3$
      0007E2 CD 11 E7         [ 4] 1326 	call get_array_element
      0007E5 CD 13 A2         [ 4] 1327 	call let02 
      0007E8 20 DA            [ 2] 1328 	jra interp_loop 
      0007EA                       1329 3$:
      0007EA A1 06            [ 1] 1330 	cp a,#TK_CMD
      0007EC 26 03            [ 1] 1331 	jrne 4$
      0007EE FD               [ 4] 1332 	call (x) 
      0007EF 20 D3            [ 2] 1333 	jra interp_loop 
      0007F1                       1334 4$:	
      0007F1 CC 07 14         [ 2] 1335 	jp syntax_error 
                                   1336 
                                   1337 ;--------------------------
                                   1338 ; extract next token from
                                   1339 ; token list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1340 ; basicptr -> base address 
                                   1341 ; in  -> offset in list array 
                                   1342 ; output:
                                   1343 ;   A 		token attribute
                                   1344 ;   X 		token value if there is one
                                   1345 ;----------------------------------------
      0007F4                       1346 next_token:
      0007F4 C6 00 01         [ 1] 1347 	ld a,in 
      0007F7 C0 00 03         [ 1] 1348 	sub a,count 
      0007FA 27 3B            [ 1] 1349 	jreq 9$
      0007FC 55 00 01 00 02   [ 1] 1350 	mov in.saved,in
      000801 CE 00 04         [ 2] 1351 	ldw x,basicptr 
      000804 72 D6 00 00      [ 4] 1352 	ld a,([in.w],x)
      000808 72 5C 00 01      [ 1] 1353 	inc in 
      00080C A1 02            [ 1] 1354 	cp a,#TK_ARRAY  
      00080E 23 27            [ 2] 1355 	jrule 9$
      000810 A1 03            [ 1] 1356 	cp a,#TK_CHAR
      000812 26 0D            [ 1] 1357 	jrne 1$
      000814 72 D6 00 00      [ 4] 1358 	ld a,([in.w],x)
      000818 72 5C 00 01      [ 1] 1359 	inc in
      00081C 5F               [ 1] 1360 	clrw x 
      00081D 97               [ 1] 1361 	ld xl,a 
      00081E A6 03            [ 1] 1362 	ld a,#TK_CHAR
      000820 81               [ 4] 1363 	ret 
      000821 A1 0A            [ 1] 1364 1$:	cp a,#TK_QSTR 
      000823 25 06            [ 1] 1365 	jrult 2$
      000825 72 BB 00 00      [ 2] 1366 	addw x,in.w 
      000829 20 0C            [ 2] 1367 	jra 9$
      00082B 72 DE 00 00      [ 5] 1368 2$: ldw x,([in.w],x)
      00082F 72 5C 00 01      [ 1] 1369 	inc in 
      000833 72 5C 00 01      [ 1] 1370 	inc in
      000837 81               [ 4] 1371 9$: ret	
                                   1372 
                                   1373 
                                   1374 ;----------------------------------------
                                   1375 ;   DEBUG support functions
                                   1376 ;----------------------------------------
                           000001  1377 .if DEBUG 
                                   1378 ; turn LED on 
      000838                       1379 ledon:
      000838 72 1A 50 0A      [ 1] 1380     bset PC_ODR,#LED2_BIT
      00083C 81               [ 4] 1381     ret 
                                   1382 
                                   1383 ; turn LED off 
      00083D                       1384 ledoff:
      00083D 72 1B 50 0A      [ 1] 1385     bres PC_ODR,#LED2_BIT 
      000841 81               [ 4] 1386     ret 
                                   1387 
                                   1388 ; invert LED status 
      000842                       1389 ledtoggle:
      000842 A6 20            [ 1] 1390     ld a,#LED2_MASK
      000844 C8 50 0A         [ 1] 1391     xor a,PC_ODR
      000847 C7 50 0A         [ 1] 1392     ld PC_ODR,a
      00084A 81               [ 4] 1393     ret 
                                   1394 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00084B                       1395 left_paren:
      00084B A6 20            [ 1] 1396 	ld a,#SPACE 
      00084D CD 01 A6         [ 4] 1397 	call putc
      000850 A6 28            [ 1] 1398 	ld a,#'( 
      000852 CD 01 A6         [ 4] 1399 	call putc 	
      000855 81               [ 4] 1400 	ret 
                                   1401 
                                   1402 ;------------------------------
                                   1403 ; print 8 bit register 
                                   1404 ; input:
                                   1405 ;   X  point to register name 
                                   1406 ;   A  register value to print 
                                   1407 ; output:
                                   1408 ;   none
                                   1409 ;------------------------------- 
      000856                       1410 prt_reg8:
      000856 88               [ 1] 1411 	push a 
      000857 CD 01 B8         [ 4] 1412 	call puts 
      00085A 7B 01            [ 1] 1413 	ld a,(1,sp) 
      00085C C7 00 09         [ 1] 1414 	ld acc8,a 
      00085F 5F               [ 1] 1415 	clrw x 
      000860 97               [ 1] 1416 	ld xl,a 
      000861 35 10 00 06      [ 1] 1417 	mov base,#16
      000865 CD 09 8D         [ 4] 1418 	call print_int 
      000868 CD 08 4B         [ 4] 1419 	call left_paren 
      00086B 84               [ 1] 1420 	pop a 
      00086C 5F               [ 1] 1421 	clrw x 
      00086D 97               [ 1] 1422 	ld xl,a 
      00086E 35 0A 00 06      [ 1] 1423 	mov base,#10 
      000872 CD 09 8D         [ 4] 1424 	call print_int  
      000875 A6 29            [ 1] 1425 	ld a,#') 
      000877 CD 01 A6         [ 4] 1426 	call putc
      00087A 81               [ 4] 1427 	ret
                                   1428 
                                   1429 ;--------------------------------
                                   1430 ; print 16 bits register 
                                   1431 ; input:
                                   1432 ;   X   point register name 
                                   1433 ;   Y   register value to print 
                                   1434 ; output:
                                   1435 ;  none
                                   1436 ;--------------------------------
      00087B                       1437 prt_reg16: 
      00087B 90 89            [ 2] 1438 	pushw y 
      00087D CD 01 B8         [ 4] 1439 	call puts 
      000880 1E 01            [ 2] 1440 	ldw x,(1,sp) 
      000882 35 10 00 06      [ 1] 1441 	mov base,#16 
      000886 CD 09 8D         [ 4] 1442 	call print_int  
      000889 CD 08 4B         [ 4] 1443 	call left_paren 
      00088C 85               [ 2] 1444 	popw x 
      00088D 35 0A 00 06      [ 1] 1445 	mov base,#10 
      000891 CD 09 8D         [ 4] 1446 	call print_int  
      000894 A6 29            [ 1] 1447 	ld a,#') 
      000896 CD 01 A6         [ 4] 1448 	call putc
      000899 81               [ 4] 1449 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1450 
                                   1451 ;------------------------------------
                                   1452 ; print registers contents saved on
                                   1453 ; stack by trap interrupt.
                                   1454 ;------------------------------------
      00089A                       1455 print_registers:
      00089A AE 08 ED         [ 2] 1456 	ldw x,#STATES
      00089D CD 01 B8         [ 4] 1457 	call puts
                                   1458 ; print EPC 
      0008A0 AE 09 2A         [ 2] 1459 	ldw x, #REG_EPC
      0008A3 CD 01 B8         [ 4] 1460 	call puts 
      0008A6 7B 0B            [ 1] 1461 	ld a, (11,sp)
      0008A8 C7 00 09         [ 1] 1462 	ld acc8,a 
      0008AB 7B 0A            [ 1] 1463 	ld a, (10,sp) 
      0008AD C7 00 08         [ 1] 1464 	ld acc16,a 
      0008B0 7B 09            [ 1] 1465 	ld a,(9,sp) 
      0008B2 C7 00 07         [ 1] 1466 	ld acc24,a
      0008B5 5F               [ 1] 1467 	clrw x  
      0008B6 A6 10            [ 1] 1468 	ld a,#16
      0008B8 CD 09 45         [ 4] 1469 	call prti24  
                                   1470 ; print X
      0008BB AE 09 33         [ 2] 1471 	ldw x,#REG_X
      0008BE 16 05            [ 2] 1472 	ldw y,(5,sp)
      0008C0 CD 08 7B         [ 4] 1473 	call prt_reg16  
                                   1474 ; print Y 
      0008C3 AE 09 2F         [ 2] 1475 	ldw x,#REG_Y
      0008C6 16 07            [ 2] 1476 	ldw y, (7,sp)
      0008C8 CD 08 7B         [ 4] 1477 	call prt_reg16  
                                   1478 ; print A 
      0008CB AE 09 37         [ 2] 1479 	ldw x,#REG_A
      0008CE 7B 04            [ 1] 1480 	ld a, (4,sp) 
      0008D0 CD 08 56         [ 4] 1481 	call prt_reg8
                                   1482 ; print CC 
      0008D3 AE 09 3B         [ 2] 1483 	ldw x,#REG_CC 
      0008D6 7B 03            [ 1] 1484 	ld a, (3,sp) 
      0008D8 CD 08 56         [ 4] 1485 	call prt_reg8 
                                   1486 ; print SP 
      0008DB AE 09 40         [ 2] 1487 	ldw x,#REG_SP
      0008DE 90 96            [ 1] 1488 	ldw y,sp 
      0008E0 72 A9 00 0C      [ 2] 1489 	addw y,#12
      0008E4 CD 08 7B         [ 4] 1490 	call prt_reg16  
      0008E7 A6 0A            [ 1] 1491 	ld a,#'\n' 
      0008E9 CD 01 A6         [ 4] 1492 	call putc
      0008EC 81               [ 4] 1493 	ret
                                   1494 
      0008ED 0A 52 65 67 69 73 74  1495 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      00092A 45 50 43 3A 00        1496 REG_EPC: .asciz "EPC:"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00092F 0A 59 3A 00           1497 REG_Y:   .asciz "\nY:" 
      000933 0A 58 3A 00           1498 REG_X:   .asciz "\nX:"
      000937 0A 41 3A 00           1499 REG_A:   .asciz "\nA:" 
      00093B 0A 43 43 3A 00        1500 REG_CC:  .asciz "\nCC:"
      000940 0A 53 50 3A 00        1501 REG_SP:  .asciz "\nSP:"
                                   1502 .endif ; DEBUG 
                                   1503 
                                   1504 ;------------------------------------
                                   1505 ; print integer in acc24 
                                   1506 ; input:
                                   1507 ;	acc24 		integer to print 
                                   1508 ;	A 			numerical base for conversion 
                                   1509 ;               if bit 7 is set add a space at print end.
                                   1510 ;   XL 			field width, 0 -> no fill.
                                   1511 ;  output:
                                   1512 ;    none 
                                   1513 ;------------------------------------
                           000001  1514 	WIDTH = 1
                           000002  1515 	BASE = 2
                           000003  1516 	ADD_SPACE=3 ; add a space after number 
                           000003  1517 	VSIZE = 3
      000945                       1518 prti24:
      000945                       1519 	_vars VSIZE 
      000945 52 03            [ 2]    1     sub sp,#VSIZE 
      000947 0F 03            [ 1] 1520 	clr (ADD_SPACE,sp)
      000949 A5 80            [ 1] 1521 	bcp a,#0x80 
      00094B 27 02            [ 1] 1522 	jreq 0$ 
      00094D 03 03            [ 1] 1523 	cpl (ADD_SPACE,sp)
      00094F A4 1F            [ 1] 1524 0$:	and a,#31 
      000951 6B 02            [ 1] 1525 	ld (BASE,sp),a
      000953 9F               [ 1] 1526 	ld a,xl
      000954 6B 01            [ 1] 1527 	ld (WIDTH,sp),a 
      000956 7B 02            [ 1] 1528 	ld a, (BASE,sp)  
      000958 CD 09 E9         [ 4] 1529     call itoa  ; conversion entier en  .asciz
      00095B 7B 01            [ 1] 1530 1$: ld a,(WIDTH,sp)
      00095D 27 1F            [ 1] 1531 	jreq 4$
      00095F C7 00 09         [ 1] 1532 	ld acc8,a 
      000962 89               [ 2] 1533 	pushw x 
      000963 CD 02 7A         [ 4] 1534 	call strlen 
      000966 9F               [ 1] 1535 	ld a,xl 
      000967 85               [ 2] 1536 	popw x 
      000968 31 00 09         [ 3] 1537 	exg a,acc8 
      00096B C0 00 09         [ 1] 1538 	sub a,acc8 
      00096E 2B 0E            [ 1] 1539 	jrmi 4$
      000970 6B 01            [ 1] 1540 	ld (WIDTH,sp),a 
      000972 A6 20            [ 1] 1541 	ld  a,#SPACE
      000974 0D 01            [ 1] 1542 3$: tnz (WIDTH,sp)
      000976 27 06            [ 1] 1543 	jreq 4$
      000978 5A               [ 2] 1544 	decw x 
      000979 F7               [ 1] 1545 	ld (x),a 
      00097A 0A 01            [ 1] 1546 	dec (WIDTH,sp) 
      00097C 20 F6            [ 2] 1547 	jra 3$
      00097E                       1548 4$: 
      00097E CD 01 B8         [ 4] 1549 	call puts 
      000981 0D 03            [ 1] 1550 	tnz (ADD_SPACE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000983 27 05            [ 1] 1551 	jreq 5$
      000985 A6 20            [ 1] 1552     ld a,#SPACE 
      000987 CD 01 A6         [ 4] 1553 	call putc 
      00098A                       1554 5$: _drop VSIZE 
      00098A 5B 03            [ 2]    1     addw sp,#VSIZE 
      00098C 81               [ 4] 1555     ret	
                                   1556 
                                   1557 ;-----------------------------------
                                   1558 ; print a 16 bit integer 
                                   1559 ; using variable 'base' as conversion
                                   1560 ; format.
                                   1561 ; input:
                                   1562 ;   X       integer to print 
                                   1563 ;   base    conversion base 
                                   1564 ; output:
                                   1565 ;   none 
                                   1566 ;-----------------------------------
                           000001  1567 	SIGN=1
                           000001  1568 	VSIZE=1
      00098D                       1569 print_int: 
      00098D                       1570 	_vars VSIZE 
      00098D 52 01            [ 2]    1     sub sp,#VSIZE 
      00098F 0F 01            [ 1] 1571 	clr (SIGN,sp)
      000991 90 AE 17 3F      [ 2] 1572 	ldw y,#pad+PAD_SIZE-1 
      000995 90 7F            [ 1] 1573 	clr (y)
      000997 C6 00 06         [ 1] 1574 	ld a,base  
      00099A A1 0A            [ 1] 1575 	cp a,#10 
      00099C 26 06            [ 1] 1576 	jrne 1$ 
      00099E 5D               [ 2] 1577 	tnzw x 
      00099F 2A 03            [ 1] 1578 	jrpl 1$ 
      0009A1 03 01            [ 1] 1579 	cpl (SIGN,sp)
      0009A3 50               [ 2] 1580 	negw x 	 
      0009A4                       1581 1$:	
      0009A4 C6 00 06         [ 1] 1582 	ld a,base 
      0009A7 62               [ 2] 1583 	div x,a 
      0009A8 AB 30            [ 1] 1584 	add a,#'0 
      0009AA A1 3A            [ 1] 1585 	cp a,#'9+1 
      0009AC 2B 02            [ 1] 1586 	jrmi 2$ 
      0009AE AB 07            [ 1] 1587 	add a,#7 
      0009B0 90 5A            [ 2] 1588 2$: decw y 
      0009B2 90 F7            [ 1] 1589 	ld (y),a 
      0009B4 5D               [ 2] 1590 	tnzw x 
      0009B5 26 ED            [ 1] 1591 	jrne 1$ 
      0009B7 A6 10            [ 1] 1592 	ld a,#16 
      0009B9 C1 00 06         [ 1] 1593 	cp a,base 
      0009BC 26 08            [ 1] 1594 	jrne 3$
      0009BE A6 24            [ 1] 1595 	ld a,#'$
      0009C0 90 5A            [ 2] 1596 	decw y  
      0009C2 90 F7            [ 1] 1597 	ld (y),a
      0009C4 20 0A            [ 2] 1598 	jra 9$ 
      0009C6 0D 01            [ 1] 1599 3$: tnz (SIGN,sp)
      0009C8 27 06            [ 1] 1600 	jreq 9$ 
      0009CA A6 2D            [ 1] 1601 	ld a,#'-
      0009CC 90 5A            [ 2] 1602 	decw y  
      0009CE 90 F7            [ 1] 1603 	ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009D0                       1604 9$:	
      0009D0 93               [ 1] 1605 	ldw x,y 
      0009D1 1D 17 3F         [ 2] 1606 	subw x,#pad+PAD_SIZE-1 
      0009D4 50               [ 2] 1607 	negw x  
      0009D5                       1608 10$:
      0009D5 90 5A            [ 2] 1609 	decw y 
      0009D7 A6 20            [ 1] 1610 	ld a,#SPACE 
      0009D9 90 F7            [ 1] 1611 	ld (y),a
      0009DB 5C               [ 1] 1612 	incw x 
      0009DC 9F               [ 1] 1613 	ld a,xl 
      0009DD C1 00 20         [ 1] 1614 	cp a,tab_width
      0009E0 2B F3            [ 1] 1615 	jrmi 10$ 
      0009E2                       1616 12$:
      0009E2 93               [ 1] 1617     ldw x,y 
      0009E3 CD 01 B8         [ 4] 1618 	call puts  
      0009E6                       1619 	_drop VSIZE 
      0009E6 5B 01            [ 2]    1     addw sp,#VSIZE 
      0009E8 81               [ 4] 1620 	ret 
                                   1621 
                                   1622 ;------------------------------------
                                   1623 ; convert integer in acc24 to string
                                   1624 ; input:
                                   1625 ;   A	  	base
                                   1626 ;	acc24	integer to convert
                                   1627 ; output:
                                   1628 ;   X  		pointer to string
                                   1629 ;------------------------------------
                           000001  1630 	SIGN=1  ; integer sign 
                           000002  1631 	BASE=2  ; numeric base 
                           000002  1632 	VSIZE=2  ;locals size
      0009E9                       1633 itoa:
      0009E9 52 02            [ 2] 1634 	sub sp,#VSIZE
      0009EB 6B 02            [ 1] 1635 	ld (BASE,sp), a  ; base
      0009ED 0F 01            [ 1] 1636 	clr (SIGN,sp)    ; sign
      0009EF A1 0A            [ 1] 1637 	cp a,#10
      0009F1 26 0A            [ 1] 1638 	jrne 1$
                                   1639 	; base 10 string display with negative sign if bit 23==1
      0009F3 72 0F 00 07 05   [ 2] 1640 	btjf acc24,#7,1$
      0009F8 03 01            [ 1] 1641 	cpl (SIGN,sp)
      0009FA CD 0A 58         [ 4] 1642 	call neg_acc24
      0009FD                       1643 1$:
                                   1644 ; initialize string pointer 
      0009FD AE 17 3F         [ 2] 1645 	ldw x,#pad+PAD_SIZE-1
      000A00 7F               [ 1] 1646 	clr (x)
      000A01                       1647 itoa_loop:
      000A01 7B 02            [ 1] 1648     ld a,(BASE,sp)
      000A03 CD 0A 30         [ 4] 1649     call divu24_8 ; acc24/A 
      000A06 AB 30            [ 1] 1650     add a,#'0  ; remainder of division
      000A08 A1 3A            [ 1] 1651     cp a,#'9+1
      000A0A 2B 02            [ 1] 1652     jrmi 2$
      000A0C AB 07            [ 1] 1653     add a,#7 
      000A0E 5A               [ 2] 1654 2$: decw x
      000A0F F7               [ 1] 1655     ld (x),a
                                   1656 	; if acc24==0 conversion done
      000A10 C6 00 07         [ 1] 1657 	ld a,acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A13 CA 00 08         [ 1] 1658 	or a,acc16
      000A16 CA 00 09         [ 1] 1659 	or a,acc8
      000A19 26 E6            [ 1] 1660     jrne itoa_loop
                                   1661 	;conversion done, next add '$' or '-' as required
      000A1B 7B 02            [ 1] 1662 	ld a,(BASE,sp)
      000A1D A1 10            [ 1] 1663 	cp a,#16
      000A1F 27 08            [ 1] 1664 	jreq 8$
      000A21 7B 01            [ 1] 1665 	ld a,(SIGN,sp)
      000A23 27 08            [ 1] 1666     jreq 10$
      000A25 A6 2D            [ 1] 1667     ld a,#'-
      000A27 20 02            [ 2] 1668 	jra 9$ 
      000A29 A6 24            [ 1] 1669 8$: ld a,#'$ 
      000A2B 5A               [ 2] 1670 9$: decw x
      000A2C F7               [ 1] 1671     ld (x),a
      000A2D                       1672 10$:
      000A2D 5B 02            [ 2] 1673 	addw sp,#VSIZE
      000A2F 81               [ 4] 1674 	ret
                                   1675 
                                   1676 ;-------------------------------------
                                   1677 ; divide uint24_t by uint8_t
                                   1678 ; used to convert uint24_t to string
                                   1679 ; input:
                                   1680 ;	acc24	dividend
                                   1681 ;   A 		divisor
                                   1682 ; output:
                                   1683 ;   acc24	quotient
                                   1684 ;   A		remainder
                                   1685 ;------------------------------------- 
                                   1686 ; offset  on sp of arguments and locals
                           000001  1687 	U8   = 1   ; divisor on stack
                           000001  1688 	VSIZE =1
      000A30                       1689 divu24_8:
      000A30 89               [ 2] 1690 	pushw x ; save x
      000A31 88               [ 1] 1691 	push a 
                                   1692 	; ld dividend UU:MM bytes in X
      000A32 C6 00 07         [ 1] 1693 	ld a, acc24
      000A35 95               [ 1] 1694 	ld xh,a
      000A36 C6 00 08         [ 1] 1695 	ld a,acc24+1
      000A39 97               [ 1] 1696 	ld xl,a
      000A3A 7B 01            [ 1] 1697 	ld a,(U8,SP) ; divisor
      000A3C 62               [ 2] 1698 	div x,a ; UU:MM/U8
      000A3D 88               [ 1] 1699 	push a  ;save remainder
      000A3E 9E               [ 1] 1700 	ld a,xh
      000A3F C7 00 07         [ 1] 1701 	ld acc24,a
      000A42 9F               [ 1] 1702 	ld a,xl
      000A43 C7 00 08         [ 1] 1703 	ld acc24+1,a
      000A46 84               [ 1] 1704 	pop a
      000A47 95               [ 1] 1705 	ld xh,a
      000A48 C6 00 09         [ 1] 1706 	ld a,acc24+2
      000A4B 97               [ 1] 1707 	ld xl,a
      000A4C 7B 01            [ 1] 1708 	ld a,(U8,sp) ; divisor
      000A4E 62               [ 2] 1709 	div x,a  ; R:LL/U8
      000A4F 6B 01            [ 1] 1710 	ld (U8,sp),a ; save remainder
      000A51 9F               [ 1] 1711 	ld a,xl
      000A52 C7 00 09         [ 1] 1712 	ld acc24+2,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A55 84               [ 1] 1713 	pop a
      000A56 85               [ 2] 1714 	popw x
      000A57 81               [ 4] 1715 	ret
                                   1716 
                                   1717 ;------------------------------------
                                   1718 ;  two's complement acc24
                                   1719 ;  input:
                                   1720 ;		acc24 variable
                                   1721 ;  output:
                                   1722 ;		acc24 variable
                                   1723 ;-------------------------------------
      000A58                       1724 neg_acc24:
      000A58 72 53 00 09      [ 1] 1725 	cpl acc24+2
      000A5C 72 53 00 08      [ 1] 1726 	cpl acc24+1
      000A60 72 53 00 07      [ 1] 1727 	cpl acc24
      000A64 A6 01            [ 1] 1728 	ld a,#1
      000A66 CB 00 09         [ 1] 1729 	add a,acc24+2
      000A69 C7 00 09         [ 1] 1730 	ld acc24+2,a
      000A6C 4F               [ 1] 1731 	clr a
      000A6D C9 00 08         [ 1] 1732 	adc a,acc24+1
      000A70 C7 00 08         [ 1] 1733 	ld acc24+1,a 
      000A73 4F               [ 1] 1734 	clr a 
      000A74 C9 00 07         [ 1] 1735 	adc a,acc24 
      000A77 C7 00 07         [ 1] 1736 	ld acc24,a 
      000A7A 81               [ 4] 1737 	ret
                                   1738 
                                   1739 
                                   1740 ;------------------------------------
                                   1741 ; read a line of text from terminal
                                   1742 ; input:
                                   1743 ;	none
                                   1744 ; local variable on stack:
                                   1745 ;	LL  line length
                                   1746 ;   RXCHAR last received chaaracte 
                                   1747 ; output:
                                   1748 ;   text in tib  buffer
                                   1749 ;------------------------------------
                                   1750 	; local variables
                           000001  1751 	LL_HB=1
                           000001  1752 	RXCHAR = 1 ; last char received
                           000002  1753 	LL = 2  ; accepted line length
                           000002  1754 	VSIZE=2 
      000A7B                       1755 readln:
      000A7B 5F               [ 1] 1756 	clrw x 
      000A7C 89               [ 2] 1757 	pushw x 
      000A7D 90 AE 16 C8      [ 2] 1758  	ldw y,#tib ; input buffer
      000A81                       1759 readln_loop:
      000A81 CD 01 AF         [ 4] 1760 	call getc
      000A84 6B 01            [ 1] 1761 	ld (RXCHAR,sp),a
      000A86 A1 0D            [ 1] 1762 	cp a,#CR
      000A88 26 03            [ 1] 1763 	jrne 1$
      000A8A CC 0A F6         [ 2] 1764 	jp readln_quit
      000A8D A1 0A            [ 1] 1765 1$:	cp a,#NL
      000A8F 27 65            [ 1] 1766 	jreq readln_quit
      000A91 A1 08            [ 1] 1767 	cp a,#BSP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000A93 27 3D            [ 1] 1768 	jreq del_back
      000A95 A1 04            [ 1] 1769 	cp a,#CTRL_D
      000A97 27 2A            [ 1] 1770 	jreq del_ln
      000A99 A1 12            [ 1] 1771 	cp a,#CTRL_R 
      000A9B 27 06            [ 1] 1772 	jreq reprint 
                                   1773 ;	cp a,#'[
                                   1774 ;	jreq ansi_seq
      000A9D                       1775 final_test:
      000A9D A1 20            [ 1] 1776 	cp a,#SPACE
      000A9F 2A 40            [ 1] 1777 	jrpl accept_char
      000AA1 20 DE            [ 2] 1778 	jra readln_loop
      000AA3                       1779 ansi_seq:
                                   1780 ;	call getc
                                   1781 ;	cp a,#'C 
                                   1782 ;	jreq rigth_arrow
                                   1783 ;	cp a,#'D 
                                   1784 ;	jreq left_arrow 
                                   1785 ;	jra final_test
      000AA3                       1786 right_arrow:
                                   1787 ;	ld a,#BSP 
                                   1788 ;	call putc 
                                   1789 ;	jra realn_loop 
      000AA3                       1790 left_arrow:
                                   1791 
                                   1792 ;	jra readln_loop
      000AA3                       1793 reprint: 
      000AA3 0D 02            [ 1] 1794 	tnz (LL,sp)
      000AA5 26 DA            [ 1] 1795 	jrne readln_loop
      000AA7 AE 16 C8         [ 2] 1796 	ldw x,#tib 
      000AAA CD 02 7A         [ 4] 1797 	call strlen 
      000AAD 90 AE 16 C8      [ 2] 1798 	ldw y,#tib 
      000AB1 9F               [ 1] 1799 	ld a,xl
      000AB2 27 CD            [ 1] 1800 	jreq readln_loop
      000AB4 6B 02            [ 1] 1801 	ld (LL,sp),a 
      000AB6 AE 16 C8         [ 2] 1802 	ldw x,#tib 
      000AB9 CD 01 B8         [ 4] 1803 	call puts
      000ABC 0F 01            [ 1] 1804 	clr (LL_HB,sp)
      000ABE 72 F9 01         [ 2] 1805 	addw y,(LL_HB,sp)
      000AC1 20 BE            [ 2] 1806 	jra readln_loop 
      000AC3                       1807 del_ln:
      000AC3 7B 02            [ 1] 1808 	ld a,(LL,sp)
      000AC5 CD 01 D2         [ 4] 1809 	call delete
      000AC8 90 AE 16 C8      [ 2] 1810 	ldw y,#tib
      000ACC 90 7F            [ 1] 1811 	clr (y)
      000ACE 0F 02            [ 1] 1812 	clr (LL,sp)
      000AD0 20 AF            [ 2] 1813 	jra readln_loop
      000AD2                       1814 del_back:
      000AD2 0D 02            [ 1] 1815     tnz (LL,sp)
      000AD4 27 AB            [ 1] 1816     jreq readln_loop
      000AD6 0A 02            [ 1] 1817     dec (LL,sp)
      000AD8 90 5A            [ 2] 1818     decw y
      000ADA 90 7F            [ 1] 1819     clr  (y)
      000ADC CD 01 C2         [ 4] 1820     call bksp 
      000ADF 20 A0            [ 2] 1821     jra readln_loop	
      000AE1                       1822 accept_char:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AE1 A6 4F            [ 1] 1823 	ld a,#TIB_SIZE-1
      000AE3 11 02            [ 1] 1824 	cp a, (LL,sp)
      000AE5 27 9A            [ 1] 1825 	jreq readln_loop
      000AE7 7B 01            [ 1] 1826 	ld a,(RXCHAR,sp)
      000AE9 90 F7            [ 1] 1827 	ld (y),a
      000AEB 0C 02            [ 1] 1828 	inc (LL,sp)
      000AED 90 5C            [ 1] 1829 	incw y
      000AEF 90 7F            [ 1] 1830 	clr (y)
      000AF1 CD 01 A6         [ 4] 1831 	call putc 
      000AF4 20 8B            [ 2] 1832 	jra readln_loop
      000AF6                       1833 readln_quit:
      000AF6 90 7F            [ 1] 1834 	clr (y)
      000AF8 7B 02            [ 1] 1835 	ld a,(LL,sp)
      000AFA C7 00 03         [ 1] 1836 	ld count,a 
      000AFD                       1837 	_drop VSIZE 
      000AFD 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AFF A6 0D            [ 1] 1838 	ld a,#CR
      000B01 CD 01 A6         [ 4] 1839 	call putc
      000B04 81               [ 4] 1840 	ret
                                   1841 
                           000001  1842 .if DEBUG 	
                                   1843 ;----------------------------
                                   1844 ; command interface
                                   1845 ; only 3 commands:
                                   1846 ;  'q' to resume application
                                   1847 ;  'p [addr]' to print memory values 
                                   1848 ;  's addr' to print string 
                                   1849 ;----------------------------
                                   1850 ;local variable 
                           000001  1851 	PSIZE=1
                           000001  1852 	VSIZE=1 
      000B05                       1853 cmd_itf:
      000B05 52 01            [ 2] 1854 	sub sp,#VSIZE 
      000B07 72 5F 00 10      [ 1] 1855 	clr farptr 
      000B0B 72 5F 00 11      [ 1] 1856 	clr farptr+1 
      000B0F 72 5F 00 12      [ 1] 1857 	clr farptr+2  
      000B13                       1858 repl:
      000B13 A6 0D            [ 1] 1859 	ld a,#CR 
      000B15 CD 01 A6         [ 4] 1860 	call putc 
      000B18 A6 3F            [ 1] 1861 	ld a,#'? 
      000B1A CD 01 A6         [ 4] 1862 	call putc
      000B1D 72 5F 00 00      [ 1] 1863 	clr in.w 
      000B21 72 5F 00 01      [ 1] 1864 	clr in 
      000B25 CD 0A 7B         [ 4] 1865 	call readln
      000B28 90 AE 16 C8      [ 2] 1866 	ldw y,#tib  
      000B2C 90 F6            [ 1] 1867 	ld a,(y)
      000B2E 27 E3            [ 1] 1868 	jreq repl  
      000B30 72 5C 00 01      [ 1] 1869 	inc in 
      000B34 CD 0E B5         [ 4] 1870 	call to_upper 
      000B37 A1 51            [ 1] 1871 	cp a,#'Q 
      000B39 26 17            [ 1] 1872 	jrne test_p
      000B3B                       1873 repl_exit:
      000B3B 72 5F 16 C8      [ 1] 1874 	clr tib 
      000B3F 72 5F 00 03      [ 1] 1875 	clr count 
      000B43 72 5F 00 01      [ 1] 1876 	clr in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B47                       1877 	_drop #VSIZE 	
      000B47 5B 01            [ 2]    1     addw sp,##VSIZE 
      000B49 81               [ 4] 1878 	ret  
      000B4A                       1879 invalid:
      000B4A AE 0B C8         [ 2] 1880 	ldw x,#invalid_cmd 
      000B4D CD 01 B8         [ 4] 1881 	call puts 
      000B50 20 C1            [ 2] 1882 	jra repl 
      000B52                       1883 test_p:	
      000B52 A1 50            [ 1] 1884     cp a,#'P 
      000B54 27 11            [ 1] 1885 	jreq mem_peek
      000B56 A1 53            [ 1] 1886     cp a,#'S 
      000B58 26 F0            [ 1] 1887 	jrne invalid 
      000B5A                       1888 print_string:	
      000B5A CD 0C F4         [ 4] 1889 	call get_token
      000B5D A1 04            [ 1] 1890 	cp a,#TK_INTGR 
      000B5F 26 E9            [ 1] 1891 	jrne invalid 
      000B61 CD 01 B8         [ 4] 1892 	call puts
      000B64 CC 0B 13         [ 2] 1893 	jp repl 	
      000B67                       1894 mem_peek:
      000B67 A6 20            [ 1] 1895 	ld a,#SPACE 
      000B69 CD 0F 6D         [ 4] 1896 	call skip  	 
      000B6C 72 B9 00 00      [ 2] 1897 	addw y,in.w 
      000B70 AE 17 18         [ 2] 1898 	ldw x,#pad 
      000B73 CD 02 98         [ 4] 1899 	call strcpy
      000B76 CD 0E C1         [ 4] 1900 	call atoi24 	
      000B79 C6 00 07         [ 1] 1901 	ld a, acc24 
      000B7C CA 00 08         [ 1] 1902 	or a,acc16 
      000B7F CA 00 09         [ 1] 1903 	or a,acc8 
      000B82 26 02            [ 1] 1904 	jrne 1$ 
      000B84 20 0C            [ 2] 1905 	jra peek_byte  
      000B86 CE 00 07         [ 2] 1906 1$:	ldw x,acc24 
      000B89 CF 00 10         [ 2] 1907 	ldw farptr,x 
      000B8C C6 00 09         [ 1] 1908 	ld a,acc8 
      000B8F C7 00 12         [ 1] 1909 	ld farptr+2,a 
      000B92                       1910 peek_byte:
      000B92 CD 0B D7         [ 4] 1911 	call print_farptr 
      000B95 A6 08            [ 1] 1912 	ld a,#8 
      000B97 6B 01            [ 1] 1913 	ld (PSIZE,sp),a 
      000B99 5F               [ 1] 1914 	clrw x 
      000B9A CD 0B F2         [ 4] 1915 1$:	call fetchc  
      000B9D 89               [ 2] 1916 	pushw x 
      000B9E C7 00 09         [ 1] 1917 	ld acc8,a 
      000BA1 5F               [ 1] 1918 	clrw x 
      000BA2 CF 00 07         [ 2] 1919 	ldw acc24,x 
      000BA5 A6 90            [ 1] 1920 	ld a,#16+128
      000BA7 CD 09 45         [ 4] 1921 	call prti24
      000BAA 85               [ 2] 1922 	popw x 
      000BAB 0A 01            [ 1] 1923 	dec (PSIZE,sp)
      000BAD 26 EB            [ 1] 1924 	jrne 1$ 
      000BAF A6 08            [ 1] 1925 	ld a,#8 
      000BB1 CB 00 12         [ 1] 1926 	add a,farptr+2 
      000BB4 C7 00 12         [ 1] 1927 	ld farptr+2,a
      000BB7 4F               [ 1] 1928 	clr a 
      000BB8 C9 00 11         [ 1] 1929 	adc a,farptr+1 
      000BBB C7 00 11         [ 1] 1930 	ld farptr+1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BBE 4F               [ 1] 1931 	clr a 
      000BBF C9 00 10         [ 1] 1932 	adc a,farptr 
      000BC2 C7 00 10         [ 1] 1933 	ld farptr,a 
      000BC5 CC 0B 13         [ 2] 1934 	jp repl  
                                   1935 
      000BC8 6E 6F 74 20 61 20 63  1936 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1937 
                                   1938 ;----------------------------
                                   1939 ; display farptr address
                                   1940 ;----------------------------
      000BD7                       1941 print_farptr:
      000BD7 C6 00 12         [ 1] 1942 	ld a ,farptr+2 
      000BDA C7 00 09         [ 1] 1943 	ld acc8,a 
      000BDD CE 00 10         [ 2] 1944 	ldw x,farptr 
      000BE0 CF 00 07         [ 2] 1945 	ldw acc24,x 
      000BE3 5F               [ 1] 1946 	clrw x 
      000BE4 A6 10            [ 1] 1947 	ld a,#16 
      000BE6 CD 09 45         [ 4] 1948 	call prti24
      000BE9 A6 20            [ 1] 1949 	ld a,#SPACE 
      000BEB CD 01 A6         [ 4] 1950 	call putc 
      000BEE CD 01 A6         [ 4] 1951 	call putc 
      000BF1 81               [ 4] 1952 	ret
                                   1953 
                                   1954 ;------------------------------------
                                   1955 ; get byte at address farptr[X]
                                   1956 ; input:
                                   1957 ;	 farptr   address to peek
                                   1958 ;    X		  farptr index 	
                                   1959 ; output:
                                   1960 ;	 A 		  byte from memory  
                                   1961 ;    x		  incremented by 1
                                   1962 ;------------------------------------
      000BF2                       1963 fetchc: ; @C
      000BF2 92 AF 00 10      [ 5] 1964 	ldf a,([farptr],x)
      000BF6 5C               [ 1] 1965 	incw x
      000BF7 81               [ 4] 1966 	ret
                                   1967 
                                   1968 
                                   1969 ;------------------------------------
                                   1970 ; expect a number from command line 
                                   1971 ; next argument
                                   1972 ;  input:
                                   1973 ;	  none
                                   1974 ;  output:
                                   1975 ;    acc24   int24_t 
                                   1976 ;------------------------------------
      000BF8                       1977 number::
      000BF8 CD 0C F4         [ 4] 1978 	call get_token
      000BFB CD 0E C1         [ 4] 1979 	call atoi24
      000BFE 81               [ 4] 1980 	ret
                                   1981 .endif ; DEBUG 
                                   1982 
                                   1983 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   1984 ; parse quoted string 
                                   1985 ; input:
                                   1986 ;   Y 	pointer to tib 
                                   1987 ;   X   pointer to pad
                                   1988 ; output:
                                   1989 ;	pad   parsed string
                                   1990 ;   TOS  char* to pad  
                                   1991 ;------------------------------------
                           000001  1992 	PREV = 1
                           000002  1993 	CURR =2 
                           000002  1994 	VSIZE=2 
      000BFF                       1995 parse_quote: ; { -- addr }
      000BFF                       1996 	_vars VSIZE 
      000BFF 52 02            [ 2]    1     sub sp,#VSIZE 
      000C01 4F               [ 1] 1997 	clr a
      000C02 6B 01            [ 1] 1998 1$:	ld (PREV,sp),a 
      000C04 72 5C 00 01      [ 1] 1999 2$:	inc in
      000C08 91 D6 00         [ 4] 2000 	ld a,([in.w],y)
      000C0B 27 24            [ 1] 2001 	jreq 6$
      000C0D 6B 02            [ 1] 2002 	ld (CURR,sp),a 
      000C0F A6 5C            [ 1] 2003 	ld a,#'\
      000C11 11 01            [ 1] 2004 	cp a, (PREV,sp)
      000C13 26 0A            [ 1] 2005 	jrne 3$
      000C15 0F 01            [ 1] 2006 	clr (PREV,sp)
      000C17 7B 02            [ 1] 2007 	ld a,(CURR,sp)
      000C19 AD 1F            [ 4] 2008 	callr convert_escape
      000C1B F7               [ 1] 2009 	ld (x),a 
      000C1C 5C               [ 1] 2010 	incw x 
      000C1D 20 E5            [ 2] 2011 	jra 2$
      000C1F                       2012 3$:
      000C1F 7B 02            [ 1] 2013 	ld a,(CURR,sp)
      000C21 A1 5C            [ 1] 2014 	cp a,#'\'
      000C23 27 DD            [ 1] 2015 	jreq 1$
      000C25 A1 22            [ 1] 2016 	cp a,#'"
      000C27 27 04            [ 1] 2017 	jreq 5$ 
      000C29 F7               [ 1] 2018 	ld (x),a 
      000C2A 5C               [ 1] 2019 	incw x 
      000C2B 20 D7            [ 2] 2020 	jra 2$
      000C2D 72 5C 00 01      [ 1] 2021 5$:	inc in 
      000C31 7F               [ 1] 2022 6$: clr (x)
      000C32 AE 17 18         [ 2] 2023 	ldw x,#pad 
      000C35                       2024 	_drop VSIZE
      000C35 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C37 A6 0A            [ 1] 2025 	ld a,#TK_QSTR  
      000C39 81               [ 4] 2026 	ret 
                                   2027 
                                   2028 ;---------------------------------------
                                   2029 ; called by parse_quote
                                   2030 ; subtitute escaped character 
                                   2031 ; by their ASCII value .
                                   2032 ; input:
                                   2033 ;   A  character following '\'
                                   2034 ; output:
                                   2035 ;   A  substitued char or same if not valid.
                                   2036 ;---------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C3A                       2037 convert_escape:
      000C3A 89               [ 2] 2038 	pushw x 
      000C3B AE 0C 4F         [ 2] 2039 	ldw x,#escaped 
      000C3E F1               [ 1] 2040 1$:	cp a,(x)
      000C3F 27 06            [ 1] 2041 	jreq 2$
      000C41 7D               [ 1] 2042 	tnz (x)
      000C42 27 09            [ 1] 2043 	jreq 3$
      000C44 5C               [ 1] 2044 	incw x 
      000C45 20 F7            [ 2] 2045 	jra 1$
      000C47 1D 0C 4F         [ 2] 2046 2$: subw x,#escaped 
      000C4A 9F               [ 1] 2047 	ld a,xl 
      000C4B AB 07            [ 1] 2048 	add a,#7
      000C4D 85               [ 2] 2049 3$:	popw x 
      000C4E 81               [ 4] 2050 	ret 
                                   2051 
      000C4F 61 62 74 6E 76 66 72  2052 escaped: .asciz "abtnvfr"
             00
                                   2053 
                                   2054 ;-------------------------
                                   2055 ; integer parser 
                                   2056 ; input:
                                   2057 ;   X 		point to pad 
                                   2058 ;   Y 		point to tib 
                                   2059 ;   A 	    first digit|'$' 
                                   2060 ; output:  
                                   2061 ;   pad     number string 
                                   2062 ;   X 		integer 
                                   2063 ;   A 		TK_INTGR
                                   2064 ;-------------------------
                           000001  2065 	BASE=1
                           000002  2066 	TCHAR=2 
                           000002  2067 	VSIZE=2 
      000C57                       2068 parse_integer: ; { -- n }
      000C57 4B 00            [ 1] 2069 	push #0 ; TCHAR 
      000C59 A1 24            [ 1] 2070 	cp a,#'$
      000C5B 27 04            [ 1] 2071 	jreq 1$ 
      000C5D 4B 0A            [ 1] 2072 	push #10 ; BASE=10 
      000C5F 20 02            [ 2] 2073 	jra 2$ 
      000C61 4B 10            [ 1] 2074 1$: push #16  ; BASE=16
      000C63 F7               [ 1] 2075 2$:	ld (x),a 
      000C64 5C               [ 1] 2076 	incw x 
      000C65 72 5C 00 01      [ 1] 2077 	inc in 
      000C69 91 D6 00         [ 4] 2078 	ld a,([in.w],y)
      000C6C CD 0E B5         [ 4] 2079 	call to_upper 
      000C6F 6B 02            [ 1] 2080 	ld (TCHAR,sp),a 
      000C71 CD 0E AC         [ 4] 2081 	call is_digit 
      000C74 25 ED            [ 1] 2082 	jrc 2$
      000C76 A6 10            [ 1] 2083 	ld a,#16 
      000C78 11 01            [ 1] 2084 	cp a,(BASE,sp)
      000C7A 26 0A            [ 1] 2085 	jrne 3$ 
      000C7C 7B 02            [ 1] 2086 	ld a,(TCHAR,sp)
      000C7E A1 41            [ 1] 2087 	cp a,#'A 
      000C80 2B 04            [ 1] 2088 	jrmi 3$ 
      000C82 A1 47            [ 1] 2089 	cp a,#'G 
      000C84 2B DD            [ 1] 2090 	jrmi 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000C86 7F               [ 1] 2091 3$:	clr (x)
      000C87 CD 0E C1         [ 4] 2092 	call atoi24
      000C8A CE 00 08         [ 2] 2093 	ldw x,acc16 
      000C8D A6 04            [ 1] 2094 	ld a,#TK_INTGR
      000C8F                       2095 	_drop VSIZE  
      000C8F 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C91 81               [ 4] 2096 	ret 	
                                   2097 
                                   2098 ;-------------------------
                                   2099 ; binary integer parser 
                                   2100 ; input:
                                   2101 ;   X 		point to pad 
                                   2102 ;   Y 		point to tib 
                                   2103 ;   A 	    '%' 
                                   2104 ; output:  
                                   2105 ;   pad     number string 
                                   2106 ;   X 		integer 
                                   2107 ;   A 		TK_INTGR
                                   2108 ;   TOS     integer 
                                   2109 ;-------------------------
                           000001  2110 	BINARY=1
                           000002  2111 	VSIZE=2
      000C92                       2112 parse_binary: ; { -- n }
      000C92 4B 00            [ 1] 2113 	push #0
      000C94 4B 00            [ 1] 2114 	push #0
      000C96 F7               [ 1] 2115 1$: ld (x),a 
      000C97 5C               [ 1] 2116 	incw x 
      000C98 72 5C 00 01      [ 1] 2117 	inc in 
      000C9C 91 D6 00         [ 4] 2118 	ld a,([in.w],y)
      000C9F A1 30            [ 1] 2119 	cp a,#'0 
      000CA1 27 06            [ 1] 2120 	jreq 2$
      000CA3 A1 31            [ 1] 2121 	cp a,#'1 
      000CA5 27 02            [ 1] 2122 	jreq 2$ 
      000CA7 20 09            [ 2] 2123 	jra bin_exit 
      000CA9 A0 30            [ 1] 2124 2$: sub a,#'0	
      000CAB 46               [ 1] 2125 	rrc a 
      000CAC 09 02            [ 1] 2126 	rlc (BINARY+1,sp)
      000CAE 09 01            [ 1] 2127 	rlc (BINARY,sp)
      000CB0 20 E4            [ 2] 2128 	jra 1$  
      000CB2                       2129 bin_exit:
      000CB2 7F               [ 1] 2130 	clr (x)
      000CB3 1E 01            [ 2] 2131 	ldw x,(BINARY,sp)
      000CB5 A6 04            [ 1] 2132 	ld a,#TK_INTGR 	
      000CB7                       2133 	_drop VSIZE 
      000CB7 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CB9 81               [ 4] 2134 	ret
                                   2135 
                                   2136 ;---------------------------
                                   2137 ;  token begin with a letter,
                                   2138 ;  is keyword or variable. 	
                                   2139 ; input:
                                   2140 ;   X 		point to pad 
                                   2141 ;   Y 		point to text
                                   2142 ;   A 	    first letter  
                                   2143 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2144 ;   X		exec_addr|var_addr 
                                   2145 ;   A 		TK_CMD 
                                   2146 ;   pad 	keyword|var_name  
                                   2147 ;   TOS     exec_addr|var_addr 
                                   2148 ;--------------------------  
      000CBA                       2149 parse_keyword: ; { -- exec_addr|var_addr}
      000CBA CD 0E B5         [ 4] 2150 	call to_upper 
      000CBD F7               [ 1] 2151 	ld (x),a 
      000CBE 5C               [ 1] 2152 	incw x 
      000CBF 72 5C 00 01      [ 1] 2153 	inc in 
      000CC3 91 D6 00         [ 4] 2154 	ld a,([in.w],y)
      000CC6 CD 04 FD         [ 4] 2155 	call is_alpha 
      000CC9 25 EF            [ 1] 2156 	jrc parse_keyword 
      000CCB 7F               [ 1] 2157 1$: clr (x)
      000CCC 72 5D 17 19      [ 1] 2158 	tnz pad+1 
      000CD0 26 15            [ 1] 2159 	jrne 2$
                                   2160 ; one letter variable name 
      000CD2 C6 17 18         [ 1] 2161 	ld a,pad 
      000CD5 A0 41            [ 1] 2162 	sub a,#'A 
      000CD7 48               [ 1] 2163 	sll a 
      000CD8 88               [ 1] 2164 	push a 
      000CD9 4B 00            [ 1] 2165 	push #0
      000CDB AE 00 21         [ 2] 2166 	ldw x,#vars 
      000CDE 72 FB 01         [ 2] 2167 	addw x,(1,sp) ; X=var address 
      000CE1                       2168 	_drop 2 
      000CE1 5B 02            [ 2]    1     addw sp,#2 
      000CE3 A6 05            [ 1] 2169 	ld a,#TK_VAR 
      000CE5 20 0C            [ 2] 2170 	jra 4$ 
      000CE7                       2171 2$: ; check for keyword, otherwise syntax error.
      000CE7                       2172 	_ldx_dict kword_dict
      000CE7 AE 23 01         [ 2]    1     ldw x,#kword_dict+2
      000CEA CD 11 51         [ 4] 2173 	call search_dict
      000CED 4D               [ 1] 2174 	tnz a
      000CEE 26 03            [ 1] 2175 	jrne 4$ 
      000CF0 CC 07 14         [ 2] 2176 	jp syntax_error
      000CF3 81               [ 4] 2177 4$:	ret  	
                                   2178 
                                   2179 
                                   2180 ;------------------------------------
                                   2181 ; Command line tokenizer
                                   2182 ; scan text for next token
                                   2183 ; move token in 'pad'
                                   2184 ; input: 
      000CF4                       2185 	none: 
                                   2186 ; use:
                                   2187 ;	Y   pointer to text
                                   2188 ;   X	pointer to pad 
                                   2189 ;   in.w   index in text buffer
                                   2190 ; output:
                                   2191 ;   A       token attribute 
                                   2192 ;   pad 	token as .asciz
                                   2193 ;   X 		token value   
                                   2194 ;------------------------------------
                                   2195 	; use to check special character 
                                   2196 	.macro _case c t  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2197 	ld a,#c 
                                   2198 	cp a,(TCHAR,sp) 
                                   2199 	jrne t
                                   2200 	.endm 
                                   2201 
                           000001  2202 	TCHAR=1
                           000002  2203 	ATTRIB=2 
                           000002  2204 	VSIZE=2
      000CF4                       2205 get_token: 
      000CF4 90 AE 16 C8      [ 2] 2206 	ldw y,#tib    	
      000CF8 C6 00 01         [ 1] 2207 	ld a,in 
      000CFB C1 00 03         [ 1] 2208 	cp a,count 
      000CFE 2B 03            [ 1] 2209 	jrmi 1$
      000D00 A6 00            [ 1] 2210 	ld a,#TK_NONE 
      000D02 81               [ 4] 2211 	ret 
      000D03                       2212 1$:	
      000D03                       2213 	_vars VSIZE
      000D03 52 02            [ 2]    1     sub sp,#VSIZE 
      000D05 AE 17 18         [ 2] 2214 	ldw x, #pad
      000D08 A6 20            [ 1] 2215 	ld a,#SPACE
      000D0A CD 0F 6D         [ 4] 2216 	call skip
      000D0D 55 00 01 00 02   [ 1] 2217 	mov in.saved,in 
      000D12 91 D6 00         [ 4] 2218 	ld a,([in.w],y)
      000D15 26 07            [ 1] 2219 	jrne str_tst
      000D17 72 5F 17 18      [ 1] 2220 	clr pad 
      000D1B CC 0E A9         [ 2] 2221 	jp token_exit ; end of line 
                                   2222 
      000D1E                       2223 str_tst: ; check for quoted string  	
      000D1E CD 0E B5         [ 4] 2224 	call to_upper 
      000D21 6B 01            [ 1] 2225 	ld (TCHAR,sp),a 
      000D23                       2226 	_case '"' nbr_tst
      000D23 A6 22            [ 1]    1 	ld a,#'"' 
      000D25 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D27 26 06            [ 1]    3 	jrne nbr_tst
      000D29 CD 0B FF         [ 4] 2227 	call parse_quote
      000D2C CC 0E A9         [ 2] 2228 	jp token_exit
      000D2F                       2229 nbr_tst: ; check for number 
      000D2F A6 24            [ 1] 2230 	ld a,#'$'
      000D31 11 01            [ 1] 2231 	cp a,(TCHAR,sp) 
      000D33 27 13            [ 1] 2232 	jreq 1$
      000D35 A6 26            [ 1] 2233 	ld a,#'&
      000D37 11 01            [ 1] 2234 	cp a,(TCHAR,sp)
      000D39 26 06            [ 1] 2235 	jrne 0$
      000D3B CD 0C 92         [ 4] 2236 	call parse_binary ; expect binary integer 
      000D3E CC 0E A9         [ 2] 2237 	jp token_exit 
      000D41 7B 01            [ 1] 2238 0$:	ld a,(TCHAR,sp)
      000D43 CD 0E AC         [ 4] 2239 	call is_digit
      000D46 24 06            [ 1] 2240 	jrnc 3$
      000D48 CD 0C 57         [ 4] 2241 1$:	call parse_integer 
      000D4B CC 0E A9         [ 2] 2242 	jp token_exit 
      000D4E                       2243 3$: 
      000D4E                       2244 	_case '(' bkslsh_tst 
      000D4E A6 28            [ 1]    1 	ld a,#'(' 
      000D50 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D52 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D54 A6 0B            [ 1] 2245 	ld a,#TK_LPAREN
      000D56 CC 0E 99         [ 2] 2246 	jp token_char   	
      000D59                       2247 bkslsh_tst:
      000D59                       2248 	_case '\',rparnt_tst
      000D59 A6 5C            [ 1]    1 	ld a,#'\' 
      000D5B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D5D 26 18            [ 1]    3 	jrne rparnt_tst
      000D5F 7B 01            [ 1] 2249 	ld a,(TCHAR,sp)
      000D61 F7               [ 1] 2250 	ld (x),a 
      000D62 5C               [ 1] 2251 	incw x 
      000D63 72 5C 00 01      [ 1] 2252 	inc in 
      000D67 91 D6 00         [ 4] 2253 	ld a,([in.w],y)
      000D6A F7               [ 1] 2254 	ld (x),a 
      000D6B 5C               [ 1] 2255 	incw x 
      000D6C 72 5C 00 01      [ 1] 2256 	inc in  
      000D70 7F               [ 1] 2257 	clr (x) 
      000D71 97               [ 1] 2258 	ld xl,a 
      000D72 A6 03            [ 1] 2259 	ld a,#TK_CHAR 
      000D74 CC 0E A9         [ 2] 2260 	jp token_exit 
      000D77                       2261 rparnt_tst:		
      000D77                       2262 	_case ')' colon_tst 
      000D77 A6 29            [ 1]    1 	ld a,#')' 
      000D79 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D7B 26 05            [ 1]    3 	jrne colon_tst
      000D7D A6 0C            [ 1] 2263 	ld a,#TK_RPAREN 
      000D7F CC 0E 99         [ 2] 2264 	jp token_char 
      000D82                       2265 colon_tst:
      000D82                       2266 	_case ':' comma_tst 
      000D82 A6 3A            [ 1]    1 	ld a,#':' 
      000D84 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D86 26 05            [ 1]    3 	jrne comma_tst
      000D88 A6 01            [ 1] 2267 	ld a,#TK_COLON 
      000D8A CC 0E 99         [ 2] 2268 	jp token_char 
      000D8D                       2269 comma_tst:
      000D8D                       2270 	_case COMMA sharp_tst 
      000D8D A6 2C            [ 1]    1 	ld a,#COMMA 
      000D8F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D91 26 05            [ 1]    3 	jrne sharp_tst
      000D93 A6 0D            [ 1] 2271 	ld a,#TK_COMMA
      000D95 CC 0E 99         [ 2] 2272 	jp token_char
      000D98                       2273 sharp_tst:
      000D98                       2274 	_case SHARP dash_tst 
      000D98 A6 23            [ 1]    1 	ld a,#SHARP 
      000D9A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9C 26 05            [ 1]    3 	jrne dash_tst
      000D9E A6 0E            [ 1] 2275 	ld a,#TK_SHARP
      000DA0 CC 0E 99         [ 2] 2276 	jp token_char  	 	 
      000DA3                       2277 dash_tst: 	
      000DA3                       2278 	_case '-' at_tst 
      000DA3 A6 2D            [ 1]    1 	ld a,#'-' 
      000DA5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA7 26 05            [ 1]    3 	jrne at_tst
      000DA9 A6 11            [ 1] 2279 	ld a,#TK_MINUS  
      000DAB CC 0E 99         [ 2] 2280 	jp token_char 
      000DAE                       2281 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DAE                       2282 	_case '@' qmark_tst 
      000DAE A6 40            [ 1]    1 	ld a,#'@' 
      000DB0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DB2 26 05            [ 1]    3 	jrne qmark_tst
      000DB4 A6 02            [ 1] 2283 	ld a,#TK_ARRAY 
      000DB6 CC 0E 99         [ 2] 2284 	jp token_char
      000DB9                       2285 qmark_tst:
      000DB9                       2286 	_case '?' tick_tst 
      000DB9 A6 3F            [ 1]    1 	ld a,#'?' 
      000DBB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DBD 26 11            [ 1]    3 	jrne tick_tst
      000DBF 7B 01            [ 1] 2287 	ld a,(TCHAR,sp)
      000DC1 F7               [ 1] 2288 	ld (x),a 
      000DC2 5C               [ 1] 2289 	incw x 
      000DC3 7F               [ 1] 2290 	clr (x)
      000DC4 72 5C 00 01      [ 1] 2291 	inc in 
      000DC8 A6 06            [ 1] 2292 	ld a,#TK_CMD 
      000DCA AE 16 04         [ 2] 2293 	ldw x,#print 
      000DCD CC 0E A9         [ 2] 2294 	jp token_exit
      000DD0                       2295 tick_tst: ; ignore comment 
      000DD0                       2296 	_case TICK plus_tst 
      000DD0 A6 27            [ 1]    1 	ld a,#TICK 
      000DD2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DD4 26 0C            [ 1]    3 	jrne plus_tst
      000DD6 72 5C 00 01      [ 1] 2297 	inc in 
      000DDA A6 06            [ 1] 2298 	ld a,#TK_CMD 
      000DDC AE 17 09         [ 2] 2299 	ldw x,#rem 
      000DDF CC 0E A9         [ 2] 2300 	jp token_exit 
      000DE2                       2301 plus_tst:
      000DE2                       2302 	_case '+' star_tst 
      000DE2 A6 2B            [ 1]    1 	ld a,#'+' 
      000DE4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE6 26 05            [ 1]    3 	jrne star_tst
      000DE8 A6 10            [ 1] 2303 	ld a,#TK_PLUS  
      000DEA CC 0E 99         [ 2] 2304 	jp token_char 
      000DED                       2305 star_tst:
      000DED                       2306 	_case '*' slash_tst 
      000DED A6 2A            [ 1]    1 	ld a,#'*' 
      000DEF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF1 26 05            [ 1]    3 	jrne slash_tst
      000DF3 A6 20            [ 1] 2307 	ld a,#TK_MULT 
      000DF5 CC 0E 99         [ 2] 2308 	jp token_char 
      000DF8                       2309 slash_tst: 
      000DF8                       2310 	_case '/' prcnt_tst 
      000DF8 A6 2F            [ 1]    1 	ld a,#'/' 
      000DFA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFC 26 05            [ 1]    3 	jrne prcnt_tst
      000DFE A6 21            [ 1] 2311 	ld a,#TK_DIV 
      000E00 CC 0E 99         [ 2] 2312 	jp token_char 
      000E03                       2313 prcnt_tst:
      000E03                       2314 	_case '%' eql_tst 
      000E03 A6 25            [ 1]    1 	ld a,#'%' 
      000E05 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E07 26 05            [ 1]    3 	jrne eql_tst
      000E09 A6 22            [ 1] 2315 	ld a,#TK_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E0B CC 0E 99         [ 2] 2316 	jp token_char  
                                   2317 ; 1 or 2 character tokens 	
      000E0E                       2318 eql_tst:
      000E0E                       2319 	_case '=' gt_tst 		
      000E0E A6 3D            [ 1]    1 	ld a,#'=' 
      000E10 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E12 26 05            [ 1]    3 	jrne gt_tst
      000E14 A6 32            [ 1] 2320 	ld a,#TK_EQUAL
      000E16 CC 0E 99         [ 2] 2321 	jp token_char 
      000E19                       2322 gt_tst:
      000E19                       2323 	_case '>' lt_tst 
      000E19 A6 3E            [ 1]    1 	ld a,#'>' 
      000E1B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E1D 26 33            [ 1]    3 	jrne lt_tst
      000E1F A6 31            [ 1] 2324 	ld a,#TK_GT 
      000E21 6B 02            [ 1] 2325 	ld (ATTRIB,sp),a 
      000E23 72 5C 00 01      [ 1] 2326 	inc in 
      000E27 91 D6 00         [ 4] 2327 	ld a,([in.w],y)
      000E2A A1 3D            [ 1] 2328 	cp a,#'=
      000E2C 26 0C            [ 1] 2329 	jrne 1$
      000E2E 7B 01            [ 1] 2330 	ld a,(TCHAR,sp)
      000E30 F7               [ 1] 2331 	ld (x),a
      000E31 5C               [ 1] 2332 	incw x 
      000E32 A6 3D            [ 1] 2333 	ld a,#'=
      000E34 6B 01            [ 1] 2334 	ld (TCHAR,sp),a 
      000E36 A6 33            [ 1] 2335 	ld a,#TK_GE 
      000E38 20 5F            [ 2] 2336 	jra token_char  
      000E3A A1 3C            [ 1] 2337 1$: cp a,#'<
      000E3C 26 0C            [ 1] 2338 	jrne 2$
      000E3E 7B 01            [ 1] 2339 	ld a,(TCHAR,sp)
      000E40 F7               [ 1] 2340 	ld (x),a
      000E41 5C               [ 1] 2341 	incw x 
      000E42 A6 3C            [ 1] 2342 	ld a,#'<	
      000E44 6B 01            [ 1] 2343 	ld (TCHAR,sp),a 
      000E46 A6 35            [ 1] 2344 	ld a,#TK_NE 
      000E48 20 4F            [ 2] 2345 	jra token_char 
      000E4A 72 5A 00 01      [ 1] 2346 2$: dec in
      000E4E 7B 02            [ 1] 2347 	ld a,(ATTRIB,sp)
      000E50 20 47            [ 2] 2348 	jra token_char 
      000E52                       2349 lt_tst:
      000E52                       2350 	_case '<' other
      000E52 A6 3C            [ 1]    1 	ld a,#'<' 
      000E54 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E56 26 32            [ 1]    3 	jrne other
      000E58 A6 34            [ 1] 2351 	ld a,#TK_LT 
      000E5A 6B 02            [ 1] 2352 	ld (ATTRIB,sp),a 
      000E5C 72 5C 00 01      [ 1] 2353 	inc in 
      000E60 91 D6 00         [ 4] 2354 	ld a,([in.w],y)
      000E63 A1 3D            [ 1] 2355 	cp a,#'=
      000E65 26 0B            [ 1] 2356 	jrne 1$
      000E67 7B 01            [ 1] 2357 	ld a,(TCHAR,sp)
      000E69 F7               [ 1] 2358 	ld (x),a 
      000E6A A6 3D            [ 1] 2359 	ld a,#'=
      000E6C 6B 01            [ 1] 2360 	ld (TCHAR,sp),a 
      000E6E A6 36            [ 1] 2361 	ld a,#TK_LE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E70 20 27            [ 2] 2362 	jra token_char 
      000E72 A1 3E            [ 1] 2363 1$: cp a,#'>
      000E74 26 0C            [ 1] 2364 	jrne 2$
      000E76 7B 01            [ 1] 2365 	ld a,(TCHAR,sp)
      000E78 F7               [ 1] 2366 	ld (x),a 
      000E79 5C               [ 1] 2367 	incw x 
      000E7A A6 3E            [ 1] 2368 	ld a,#'>
      000E7C 6B 01            [ 1] 2369 	ld (TCHAR,sp),a 
      000E7E A6 35            [ 1] 2370 	ld a,#TK_NE 
      000E80 20 17            [ 2] 2371 	jra token_char 
      000E82 72 5A 00 01      [ 1] 2372 2$: dec in 
      000E86 7B 02            [ 1] 2373 	ld a,(ATTRIB,sp)
      000E88 20 0F            [ 2] 2374 	jra token_char 	
      000E8A                       2375 other: ; not a special character 	 
      000E8A 7B 01            [ 1] 2376 	ld a,(TCHAR,sp)
      000E8C CD 04 FD         [ 4] 2377 	call is_alpha 
      000E8F 25 03            [ 1] 2378 	jrc 30$ 
      000E91 CC 07 14         [ 2] 2379 	jp syntax_error 
      000E94                       2380 30$: 
      000E94 CD 0C BA         [ 4] 2381 	call parse_keyword
      000E97 20 10            [ 2] 2382 	jra token_exit 
      000E99                       2383 token_char:
      000E99 6B 02            [ 1] 2384 	ld (ATTRIB,sp),a 
      000E9B 7B 01            [ 1] 2385 	ld a,(TCHAR,sp)
      000E9D F7               [ 1] 2386 	ld (x),a 
      000E9E 5C               [ 1] 2387 	incw x 
      000E9F 7F               [ 1] 2388 	clr(x)
      000EA0 72 5C 00 01      [ 1] 2389 	inc in 
      000EA4 7B 02            [ 1] 2390 	ld a,(ATTRIB,sp)
      000EA6 AE 17 18         [ 2] 2391 	ldw x,#pad 
      000EA9                       2392 token_exit:
      000EA9                       2393 	_drop VSIZE 
      000EA9 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EAB 81               [ 4] 2394 	ret
                                   2395 
                                   2396 
                                   2397 
                                   2398 ;------------------------------------
                                   2399 ; check if character in {'0'..'9'}
                                   2400 ; input:
                                   2401 ;    A  character to test
                                   2402 ; output:
                                   2403 ;    Carry  0 not digit | 1 digit
                                   2404 ;------------------------------------
      000EAC                       2405 is_digit:
      000EAC A1 30            [ 1] 2406 	cp a,#'0
      000EAE 25 03            [ 1] 2407 	jrc 1$
      000EB0 A1 3A            [ 1] 2408     cp a,#'9+1
      000EB2 8C               [ 1] 2409 	ccf 
      000EB3 8C               [ 1] 2410 1$:	ccf 
      000EB4 81               [ 4] 2411     ret
                                   2412 
                                   2413 ;------------------------------------
                                   2414 ; convert alpha to uppercase
                                   2415 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2416 ;    a  character to convert
                                   2417 ; output:
                                   2418 ;    a  uppercase character
                                   2419 ;------------------------------------
      000EB5                       2420 to_upper::
      000EB5 A1 61            [ 1] 2421 	cp a,#'a
      000EB7 2A 01            [ 1] 2422 	jrpl 1$
      000EB9 81               [ 4] 2423 0$:	ret
      000EBA A1 7A            [ 1] 2424 1$: cp a,#'z	
      000EBC 22 FB            [ 1] 2425 	jrugt 0$
      000EBE A0 20            [ 1] 2426 	sub a,#32
      000EC0 81               [ 4] 2427 	ret
                                   2428 	
                                   2429 ;------------------------------------
                                   2430 ; convert pad content in integer
                                   2431 ; input:
                                   2432 ;    pad		.asciz to convert
                                   2433 ; output:
                                   2434 ;    acc24      int24_t
                                   2435 ;------------------------------------
                                   2436 	; local variables
                           000001  2437 	SIGN=1 ; 1 byte, 
                           000002  2438 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2439 	TEMP=3 ; 1 byte, temporary storage
                           000003  2440 	VSIZE=3 ; 3 bytes reserved for local storage
      000EC1                       2441 atoi24:
      000EC1 89               [ 2] 2442 	pushw x ;save x
      000EC2 52 03            [ 2] 2443 	sub sp,#VSIZE
                                   2444 	; acc24=0 
      000EC4 72 5F 00 07      [ 1] 2445 	clr acc24    
      000EC8 72 5F 00 08      [ 1] 2446 	clr acc16
      000ECC 72 5F 00 09      [ 1] 2447 	clr acc8 
      000ED0 C6 17 18         [ 1] 2448 	ld a, pad 
      000ED3 27 5A            [ 1] 2449 	jreq atoi_exit
      000ED5 0F 01            [ 1] 2450 	clr (SIGN,sp)
      000ED7 A6 0A            [ 1] 2451 	ld a,#10
      000ED9 6B 02            [ 1] 2452 	ld (BASE,sp),a ; default base decimal
      000EDB AE 17 18         [ 2] 2453 	ldw x,#pad ; pointer to string to convert
      000EDE F6               [ 1] 2454 	ld a,(x)
      000EDF 27 47            [ 1] 2455 	jreq 9$  ; completed if 0
      000EE1 A1 2D            [ 1] 2456 	cp a,#'-
      000EE3 26 04            [ 1] 2457 	jrne 1$
      000EE5 03 01            [ 1] 2458 	cpl (SIGN,sp)
      000EE7 20 08            [ 2] 2459 	jra 2$
      000EE9 A1 24            [ 1] 2460 1$: cp a,#'$
      000EEB 26 06            [ 1] 2461 	jrne 3$
      000EED A6 10            [ 1] 2462 	ld a,#16
      000EEF 6B 02            [ 1] 2463 	ld (BASE,sp),a
      000EF1 5C               [ 1] 2464 2$:	incw x
      000EF2 F6               [ 1] 2465 	ld a,(x)
      000EF3                       2466 3$:	
      000EF3 A1 61            [ 1] 2467 	cp a,#'a
      000EF5 2B 02            [ 1] 2468 	jrmi 4$
      000EF7 A0 20            [ 1] 2469 	sub a,#32
      000EF9 A1 30            [ 1] 2470 4$:	cp a,#'0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000EFB 2B 2B            [ 1] 2471 	jrmi 9$
      000EFD A0 30            [ 1] 2472 	sub a,#'0
      000EFF A1 0A            [ 1] 2473 	cp a,#10
      000F01 2B 06            [ 1] 2474 	jrmi 5$
      000F03 A0 07            [ 1] 2475 	sub a,#7
      000F05 11 02            [ 1] 2476 	cp a,(BASE,sp)
      000F07 2A 1F            [ 1] 2477 	jrpl 9$
      000F09 6B 03            [ 1] 2478 5$:	ld (TEMP,sp),a
      000F0B 7B 02            [ 1] 2479 	ld a,(BASE,sp)
      000F0D CD 0F 33         [ 4] 2480 	call mulu24_8
      000F10 7B 03            [ 1] 2481 	ld a,(TEMP,sp)
      000F12 CB 00 09         [ 1] 2482 	add a,acc24+2
      000F15 C7 00 09         [ 1] 2483 	ld acc24+2,a
      000F18 4F               [ 1] 2484 	clr a
      000F19 C9 00 08         [ 1] 2485 	adc a,acc24+1
      000F1C C7 00 08         [ 1] 2486 	ld acc24+1,a
      000F1F 4F               [ 1] 2487 	clr a
      000F20 C9 00 07         [ 1] 2488 	adc a,acc24
      000F23 C7 00 07         [ 1] 2489 	ld acc24,a
      000F26 20 C9            [ 2] 2490 	jra 2$
      000F28 0D 01            [ 1] 2491 9$:	tnz (SIGN,sp)
      000F2A 27 03            [ 1] 2492     jreq atoi_exit
      000F2C CD 0A 58         [ 4] 2493     call neg_acc24
      000F2F                       2494 atoi_exit: 
      000F2F 5B 03            [ 2] 2495 	addw sp,#VSIZE
      000F31 85               [ 2] 2496 	popw x ; restore x
      000F32 81               [ 4] 2497 	ret
                                   2498 
                                   2499 ;--------------------------------------
                                   2500 ; unsigned multiply uint24_t by uint8_t
                                   2501 ; use to convert numerical string to uint24_t
                                   2502 ; input:
                                   2503 ;	acc24	uint24_t 
                                   2504 ;   A		uint8_t
                                   2505 ; output:
                                   2506 ;   acc24   A*acc24
                                   2507 ;-------------------------------------
                                   2508 ; local variables offset  on sp
                           000003  2509 	U8   = 3   ; A pushed on stack
                           000002  2510 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2511 	OVFH = 1  ; multiplication overflow high byte
                           000003  2512 	VSIZE = 3
      000F33                       2513 mulu24_8:
      000F33 89               [ 2] 2514 	pushw x    ; save X
                                   2515 	; local variables
      000F34 88               [ 1] 2516 	push a     ; U8
      000F35 5F               [ 1] 2517 	clrw x     ; initialize overflow to 0
      000F36 89               [ 2] 2518 	pushw x    ; multiplication overflow
                                   2519 ; multiply low byte.
      000F37 C6 00 09         [ 1] 2520 	ld a,acc24+2
      000F3A 97               [ 1] 2521 	ld xl,a
      000F3B 7B 03            [ 1] 2522 	ld a,(U8,sp)
      000F3D 42               [ 4] 2523 	mul x,a
      000F3E 9F               [ 1] 2524 	ld a,xl
      000F3F C7 00 09         [ 1] 2525 	ld acc24+2,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000F42 9E               [ 1] 2526 	ld a, xh
      000F43 6B 02            [ 1] 2527 	ld (OVFL,sp),a
                                   2528 ; multipy middle byte
      000F45 C6 00 08         [ 1] 2529 	ld a,acc24+1
      000F48 97               [ 1] 2530 	ld xl,a
      000F49 7B 03            [ 1] 2531 	ld a, (U8,sp)
      000F4B 42               [ 4] 2532 	mul x,a
                                   2533 ; add overflow to this partial product
      000F4C 72 FB 01         [ 2] 2534 	addw x,(OVFH,sp)
      000F4F 9F               [ 1] 2535 	ld a,xl
      000F50 C7 00 08         [ 1] 2536 	ld acc24+1,a
      000F53 4F               [ 1] 2537 	clr a
      000F54 A9 00            [ 1] 2538 	adc a,#0
      000F56 6B 01            [ 1] 2539 	ld (OVFH,sp),a
      000F58 9E               [ 1] 2540 	ld a,xh
      000F59 6B 02            [ 1] 2541 	ld (OVFL,sp),a
                                   2542 ; multiply most signficant byte	
      000F5B C6 00 07         [ 1] 2543 	ld a, acc24
      000F5E 97               [ 1] 2544 	ld xl, a
      000F5F 7B 03            [ 1] 2545 	ld a, (U8,sp)
      000F61 42               [ 4] 2546 	mul x,a
      000F62 72 FB 01         [ 2] 2547 	addw x, (OVFH,sp)
      000F65 9F               [ 1] 2548 	ld a, xl
      000F66 C7 00 07         [ 1] 2549 	ld acc24,a
      000F69 5B 03            [ 2] 2550     addw sp,#VSIZE
      000F6B 85               [ 2] 2551 	popw x
      000F6C 81               [ 4] 2552 	ret
                                   2553 
                                   2554 ;------------------------------------
                                   2555 ; skip character c in text starting from 'in'
                                   2556 ; input:
                                   2557 ;	 y 		point to text buffer
                                   2558 ;    a 		character to skip
                                   2559 ; output:  
                                   2560 ;	'in' ajusted to new position
                                   2561 ;------------------------------------
                           000001  2562 	C = 1 ; local var
      000F6D                       2563 skip:
      000F6D 88               [ 1] 2564 	push a
      000F6E 91 D6 00         [ 4] 2565 1$:	ld a,([in.w],y)
      000F71 27 0A            [ 1] 2566 	jreq 2$
      000F73 11 01            [ 1] 2567 	cp a,(C,sp)
      000F75 26 06            [ 1] 2568 	jrne 2$
      000F77 72 5C 00 01      [ 1] 2569 	inc in
      000F7B 20 F1            [ 2] 2570 	jra 1$
      000F7D                       2571 2$: _drop 1 
      000F7D 5B 01            [ 2]    1     addw sp,#1 
      000F7F 81               [ 4] 2572 	ret
                                   2573 	
                                   2574 ;------------------------------
                                   2575 ; restore 'in.w' variable to 
                                   2576 ; its value before last call
                                   2577 ; to get_token.
                                   2578 ;------------------------------
      000F80                       2579 unget_token:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F80 55 00 02 00 01   [ 1] 2580 	mov in,in.saved
      000F85 81               [ 4] 2581 	ret 
                                   2582 
                                   2583 
                                   2584 ;******************************
                                   2585 ;  data stack manipulation
                                   2586 ;*****************************
                                   2587 ;----------------------	
                                   2588 ; push X on data stack 
                                   2589 ; input:
                                   2590 ;	X 
                                   2591 ; output:
                                   2592 ;	none 
                                   2593 ;----------------------	
      000F86                       2594 dpush:
      000F86                       2595     _dp_down
      000F86 72 5A 00 17      [ 1]    1     dec dstkptr+1 
      000F8A 72 5A 00 17      [ 1]    2     dec dstkptr+1
      000F8E 72 CF 00 16      [ 5] 2596     ldw [dstkptr],x  
      000F92 81               [ 4] 2597 	ret 
                                   2598 
                                   2599 
                                   2600 ;----------------------	
                                   2601 ; pop data stack in X 
                                   2602 ; input:
                                   2603 ;	none
                                   2604 ; output:
                                   2605 ;	X   
                                   2606 ;----------------------	
      000F93                       2607 dpop: 
      000F93 72 CE 00 16      [ 5] 2608     ldw x, [dstkptr]
      000F97                       2609 	_dp_up
      000F97 72 5C 00 17      [ 1]    1     inc dstkptr+1
      000F9B 72 5C 00 17      [ 1]    2     inc dstkptr+1
      000F9F 81               [ 4] 2610 	ret 
                                   2611 
                                   2612 ;-----------------------------
                                   2613 ; swap top 2 elements of dstack
                                   2614 ;  {n1 n2 -- n2 n1 }
                                   2615 ;-----------------------------
      000FA0                       2616 dswap:
      000FA0 72 CE 00 16      [ 5] 2617 	ldw x,[dstkptr]
      000FA4 89               [ 2] 2618 	pushw x 
      000FA5 AE 00 02         [ 2] 2619 	ldw x,#2 
      000FA8 72 DE 00 16      [ 5] 2620 	ldw x,([dstkptr],x) 
      000FAC 72 CF 00 16      [ 5] 2621 	ldw [dstkptr],x 
      000FB0 AE 00 02         [ 2] 2622 	ldw x,#2
      000FB3 90 85            [ 2] 2623 	popw y 
      000FB5 72 DF 00 16      [ 5] 2624 	ldw ([dstkptr],x),y 
      000FB9 81               [ 4] 2625 	ret
                                   2626 
                                   2627 ;-----------------------------
                                   2628 ; drop TOS 
                                   2629 ;-----------------------------
      000FBA                       2630 ddrop: ; { n -- }
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FBA                       2631 	_dp_up 
      000FBA 72 5C 00 17      [ 1]    1     inc dstkptr+1
      000FBE 72 5C 00 17      [ 1]    2     inc dstkptr+1
      000FC2 81               [ 4] 2632 	ret
                                   2633 	
                                   2634 ;-----------------------------
                                   2635 ; duplicate TOS 
                                   2636 ;  dstack: { ix...n -- ix...n n }
                                   2637 ;-----------------------------
      000FC3                       2638 ddup:
      000FC3 72 CE 00 16      [ 5] 2639 	ldw x,[dstkptr]
      000FC7                       2640 	_dp_down
      000FC7 72 5A 00 17      [ 1]    1     dec dstkptr+1 
      000FCB 72 5A 00 17      [ 1]    2     dec dstkptr+1
      000FCF 72 CF 00 16      [ 5] 2641     ldw [dstkptr],x  
      000FD3 81               [ 4] 2642 	ret 
                                   2643 
                                   2644 
                                   2645 ;----------------------------------
                                   2646 ; pick value n from dstack 
                                   2647 ; put it on TOS
                                   2648 ; dstack: {ix,..,p -- ix,...,np }
                                   2649 ;-----------------------------------
      000FD4                       2650 dpick:
      000FD4 72 CE 00 16      [ 5] 2651 	ldw x,[dstkptr]
      000FD8 58               [ 2] 2652 	sllw x 
      000FD9 72 BB 00 16      [ 2] 2653 	addw x,dstkptr 
      000FDD FE               [ 2] 2654 	ldw x,(x)
      000FDE 72 CF 00 16      [ 5] 2655 	ldw [dstkptr],x 
      000FE2 81               [ 4] 2656 	ret
                                   2657 
                                   2658 ;---------------------------
                                   2659 ;  fetch variable in X 
                                   2660 ;  dstack:{ addr -- value }
                                   2661 ;---------------------------
      000FE3                       2662 fetch:
      000FE3 72 CE 00 16      [ 5] 2663 	ldw x,[dstkptr]
      000FE7 FE               [ 2] 2664 	ldw x,(x)
      000FE8 72 CF 00 16      [ 5] 2665 	ldw [dstkptr],x
      000FEC 81               [ 4] 2666 	ret 
                                   2667 
                                   2668 ;----------------------------
                                   2669 ; store variable 
                                   2670 ; dstack: {addr value -- }
                                   2671 ;----------------------------
      000FED                       2672 store:
      000FED CD 0F 93         [ 4] 2673 	call dpop 
      000FF0 90 93            [ 1] 2674 	ldw y,x   ; y=value 
      000FF2 CD 0F 93         [ 4] 2675 	call dpop 
      000FF5 FF               [ 2] 2676 	ldw (x),y 
      000FF6 81               [ 4] 2677 	ret 
                                   2678 
                                   2679 ;---------------------------------
                                   2680 ; drop n elements from data stack 
                                   2681 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2682 ;   X 		n 
                                   2683 ; output:
                                   2684 ;   none 
                                   2685 ;-------------------------------------
      000FF7                       2686 ddrop_n:
      000FF7 90 89            [ 2] 2687 	pushw y 
      000FF9 90 CE 00 16      [ 2] 2688 	ldw y,dstkptr 
      000FFD 58               [ 2] 2689 	sllw x 
      000FFE 89               [ 2] 2690 	pushw x 
      000FFF 72 F9 01         [ 2] 2691 	addw y,(1,sp)
      001002 90 CF 00 16      [ 2] 2692 	ldw dstkptr,y 
      001006 85               [ 2] 2693 	popw x 
      001007 90 85            [ 2] 2694 	popw y
      001009 81               [ 4] 2695 	ret 
                                   2696 
      00100A 0A 64 73 74 61 63 6B  2697 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2698 ;----------------------------
                                   2699 ; print dstack content 
                                   2700 ;---------------------------
                           000001  2701 	XSAVE=1
                           000002  2702 	VSIZE=2
      001014                       2703 dots:
      001014                       2704 	_vars VSIZE 
      001014 52 02            [ 2]    1     sub sp,#VSIZE 
      001016 AE 10 0A         [ 2] 2705 	ldw x,#dstk_prompt 
      001019 CD 01 B8         [ 4] 2706 	call puts
      00101C AE 17 7E         [ 2] 2707 	ldw x,#dstack_unf-CELL_SIZE
      00101F 35 0A 00 06      [ 1] 2708 	mov base,#10 
      001023 C3 00 16         [ 2] 2709 1$:	cpw x,dstkptr 
      001026 25 0D            [ 1] 2710 	jrult 4$ 
      001028 1F 01            [ 2] 2711 	ldw (XSAVE,sp),x
      00102A FE               [ 2] 2712 	ldw  x,(x)
      00102B CD 09 8D         [ 4] 2713 	call print_int 
      00102E 1E 01            [ 2] 2714 	ldw x,(XSAVE,sp)
      001030 1D 00 02         [ 2] 2715 	subw x,#CELL_SIZE 
      001033 20 EE            [ 2] 2716 	jra 1$ 
      001035 A6 0D            [ 1] 2717 4$: ld a,#CR 
      001037 CD 01 A6         [ 4] 2718 	call putc 
      00103A                       2719 	_drop VSIZE
      00103A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00103C 4F               [ 1] 2720 	clr a 
      00103D 81               [ 4] 2721 	ret
                                   2722 
      00103E 0A 63 74 61 63 6B 3A  2723 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2724 ;--------------------------------
                                   2725 ; print cstack content
                                   2726 ;--------------------------------
                           000001  2727 	XSAVE=1
                           000002  2728 	VSIZE=2 
      001047                       2729 dotr:
      001047                       2730 	_vars VSIZE 
      001047 52 02            [ 2]    1     sub sp,#VSIZE 
      001049 AE 10 3E         [ 2] 2731 	ldw x,#cstk_prompt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00104C CD 01 B8         [ 4] 2732 	call puts 
      00104F 96               [ 1] 2733 	ldw x,sp 
      001050 1C 00 07         [ 2] 2734 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      001053 1F 01            [ 2] 2735 	ldw (XSAVE,sp),x  
      001055 AE 17 FE         [ 2] 2736 	ldw x,#RAM_SIZE-2
      001058 35 10 00 06      [ 1] 2737 	mov base,#16
      00105C                       2738 dotr_loop:
      00105C 13 01            [ 2] 2739 	cpw x,(XSAVE,sp)
      00105E 2B 0B            [ 1] 2740 	jrmi 9$
      001060 89               [ 2] 2741 	pushw x  
      001061 FE               [ 2] 2742 	ldw x,(x)
      001062 CD 09 8D         [ 4] 2743 	call print_int 
      001065 85               [ 2] 2744 	popw x  
      001066 1D 00 02         [ 2] 2745 	subw x,#CELL_SIZE
      001069 20 F1            [ 2] 2746 	jra dotr_loop 
      00106B A6 0D            [ 1] 2747 9$:	ld a,#CR 
      00106D CD 01 A6         [ 4] 2748 	call putc 
      001070                       2749 	_drop VSIZE 
      001070 5B 02            [ 2]    1     addw sp,#VSIZE 
      001072 4F               [ 1] 2750 	clr a 
      001073 81               [ 4] 2751 	ret
                                   2752 
                                   2753 
                                   2754 ;--------------------------------
                                   2755 ;  add 2 integers
                                   2756 ;  input:
                                   2757 ;    N1     on cstack 
                                   2758 ;    N2     on cstack 
                                   2759 ;  output:
                                   2760 ;    X 		n2+n1 
                                   2761 ;--------------------------------
                                   2762 	;arugments on cstack 
      001074                       2763 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001074                       2764 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001074                       2765 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001074                       2766 add:
      001074 1E 05            [ 2] 2767 	ldw x ,(N2,sp)
      001076 72 FB 03         [ 2] 2768 	addw x,(N1,sp)
      001079 1F 03            [ 2] 2769 	ldw (N1,sp),x 
      00107B 81               [ 4] 2770 	ret 
                                   2771 
                                   2772 ;--------------------------------
                                   2773 ;  substract 2 ntegers
                                   2774 ;  input:
                                   2775 ;    N1     on cstack 
                                   2776 ;    N2     on cstack 
                                   2777 ;  output:
                                   2778 ;    X 		n2+n1 
                                   2779 ;--------------------------------
      00107C                       2780 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00107C                       2781 	_arg N1 1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                           000003     1     N1=ARG_OFS+1 
      00107C                       2782 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00107C                       2783 substract:
      00107C 1E 05            [ 2] 2784 	ldw x,(N2,sp)
      00107E 72 F0 03         [ 2] 2785 	subw x,(N1,sp)
      001081 81               [ 4] 2786 	ret 
                                   2787 
                                   2788 ;-------------------------------------
                                   2789 ; multiply 2 integers
                                   2790 ; product overflow is ignored unless
                                   2791 ; MATH_OVF assembler flag is set to 1
                                   2792 ; input:
                                   2793 ;  	N1      on cstack
                                   2794 ;   N2 		on cstack 
                                   2795 ; output:
                                   2796 ;	X        N1*N2 
                                   2797 ;-------------------------------------
                                   2798 	;arguments 
      001082                       2799 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      001082                       2800 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      001082                       2801 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      001082                       2802 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      001082                       2803 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2804    ; local variables 
                           000001  2805 	SIGN=1
                           000002  2806 	PROD=2
                           000003  2807 	VSIZE=3
      001082                       2808 multiply:
      001082                       2809 	_vars VSIZE 
      001082 52 03            [ 2]    1     sub sp,#VSIZE 
      001084 0F 01            [ 1] 2810 	clr (SIGN,sp)
      001086 1E 06            [ 2] 2811 	ldw x,(N1_HB,sp)
      001088 9E               [ 1] 2812 	ld a,xh  
      001089 A5 80            [ 1] 2813 	bcp a,#0x80 
      00108B 27 05            [ 1] 2814 	jreq 2$
      00108D 03 01            [ 1] 2815 	cpl (SIGN,sp)
      00108F 50               [ 2] 2816 	negw x 
      001090 1F 06            [ 2] 2817 	ldw (N1_HB,sp),x 
      001092 1E 08            [ 2] 2818 2$: ldw x,(N2_HB,sp)
      001094 9E               [ 1] 2819 	ld a,xh  
      001095 A5 80            [ 1] 2820 	bcp a,#0x80 
      001097 27 05            [ 1] 2821 	jreq 3$
      001099 03 01            [ 1] 2822 	cpl (SIGN,sp)
      00109B 50               [ 2] 2823 	negw x 
      00109C 1F 08            [ 2] 2824 	ldw (N2_HB,sp),x 
                                   2825 ; N1_LB * N2_LB 	
      00109E 7B 07            [ 1] 2826 3$:	ld a,(N1_LB,sp)
      0010A0 97               [ 1] 2827 	ld xl,a 
      0010A1 7B 09            [ 1] 2828 	ld a,(N2_LB,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010A3 42               [ 4] 2829 	mul x,a 
                           000000  2830 .if MATH_OVF 	
                                   2831 	ld a,xh 
                                   2832 	bcp a,#0x80 
                                   2833 	jreq 4$ 
                                   2834 	ld a,#ERR_MATH_OVF 
                                   2835 	jp tb_error
                                   2836 .endif 	 
      0010A4 1F 02            [ 2] 2837 4$:	ldw (PROD,sp),x
                                   2838 ; N1_LB * N2_HB	 
      0010A6 7B 07            [ 1] 2839 	ld a,(N1_LB,sp) 
      0010A8 97               [ 1] 2840 	ld xl,a 
      0010A9 7B 08            [ 1] 2841 	ld a,(N2_HB,sp)
      0010AB 42               [ 4] 2842 	mul x,a
      0010AC 9F               [ 1] 2843 	ld a,xl 
      0010AD 1B 02            [ 1] 2844 	add a,(PROD,sp)
                           000000  2845 .if MATH_OVF 	
                                   2846 	bcp a,#0x80 
                                   2847 	jreq 5$ 
                                   2848 	ld a,#ERR_MATH_OVF 
                                   2849 	jp tb_error
                                   2850 .endif 	 
      0010AF 6B 02            [ 1] 2851 5$:	ld (PROD,sp),a 
                                   2852 ; N1_HB * N2_LB 
      0010B1 7B 06            [ 1] 2853 	ld a,(N1_HB,sp)
      0010B3 97               [ 1] 2854 	ld xl,a 
      0010B4 7B 09            [ 1] 2855 	ld a,(N2_LB,sp)
      0010B6 42               [ 4] 2856 	mul x,a 
      0010B7 9F               [ 1] 2857 	ld a,xl 
      0010B8 1B 02            [ 1] 2858 	add a,(PROD,sp)
                           000000  2859 .if MATH_OVF 	
                                   2860 	bcp a,#0x80 
                                   2861 	jreq 6$ 
                                   2862 	ld a,#ERR_MATH_OVF 
                                   2863 	jp tb_error
                                   2864 .endif 	 
      0010BA 6B 02            [ 1] 2865 6$:	ld (PROD,sp),a 
                                   2866 ; N1_HB * N2_HB 	
                                   2867 ; it is pointless to multiply N1_HB*N2_HB 
                                   2868 ; as this product is over 65535 or 0 
                                   2869 ;
                                   2870 ; sign adjust product
      0010BC 0D 01            [ 1] 2871 	tnz (SIGN,sp)
      0010BE 27 05            [ 1] 2872 	jreq 7$
      0010C0 1E 02            [ 2] 2873 	ldw x, (PROD,sp)
      0010C2 50               [ 2] 2874 	negw x
      0010C3 1F 02            [ 2] 2875 	ldw (PROD,sp),x  
      0010C5                       2876 7$: 
      0010C5 1E 02            [ 2] 2877 	ldw x,(PROD,sp) 
      0010C7                       2878 	_drop VSIZE 
      0010C7 5B 03            [ 2]    1     addw sp,#VSIZE 
      0010C9 81               [ 4] 2879 	ret
                                   2880 
                                   2881 ;----------------------------------
                                   2882 ;  euclidian divide n2/n1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2883 ; input:
                                   2884 ;    N2 	on cstack
                                   2885 ;    N1 	on cstack
                                   2886 ; output:
                                   2887 ;    X      n2/n1 
                                   2888 ;    Y      remainder 
                                   2889 ;----------------------------------
      0010CA                       2890 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      0010CA                       2891 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      0010CA                       2892 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2893 	; local variables
                           000001  2894 	SQUOT=1 ; sign quotient
                           000002  2895 	SDIVD=2 ; sign dividend  
                           000002  2896 	VSIZE=2
      0010CA                       2897 divide:
      0010CA                       2898 	_vars VSIZE 
      0010CA 52 02            [ 2]    1     sub sp,#VSIZE 
      0010CC 0F 01            [ 1] 2899 	clr (SQUOT,sp)
      0010CE 0F 02            [ 1] 2900 	clr (SDIVD,sp)
                                   2901 ; check for 0 divisor
      0010D0 1E 05            [ 2] 2902 	ldw x,(DIVISR,sp)
      0010D2 5D               [ 2] 2903 	tnzw x 
      0010D3 26 05            [ 1] 2904     jrne 0$
      0010D5 A6 04            [ 1] 2905 	ld a,#ERR_DIV0 
      0010D7 CC 07 16         [ 2] 2906 	jp tb_error 
                                   2907 ; check divisor sign 	
      0010DA 9E               [ 1] 2908 0$:	ld a,xh 
      0010DB A5 80            [ 1] 2909 	bcp a,#0x80 
      0010DD 27 03            [ 1] 2910 	jreq 1$
      0010DF 03 01            [ 1] 2911 	cpl (SQUOT,sp)
      0010E1 50               [ 2] 2912 	negw x 
      0010E2 1F 05            [ 2] 2913 1$:	ldw (DIVISR,sp),x
                                   2914 ; check dividend sign 	 
      0010E4 1E 07            [ 2] 2915     ldw x,(DIVIDND,sp)
      0010E6 9E               [ 1] 2916 	ld a,xh 
      0010E7 A5 80            [ 1] 2917 	bcp a,#0x80 
      0010E9 27 05            [ 1] 2918 	jreq 2$ 
      0010EB 03 01            [ 1] 2919 	cpl (SQUOT,sp)
      0010ED 03 02            [ 1] 2920 	cpl (SDIVD,sp)
      0010EF 50               [ 2] 2921 	negw x 
      0010F0 16 05            [ 2] 2922 2$:	ldw y,(DIVISR,sp)
      0010F2 65               [ 2] 2923 	divw x,y
      0010F3 90 CF 00 08      [ 2] 2924 	ldw acc16,y 
                                   2925 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      0010F7 0D 02            [ 1] 2926 	tnz (SDIVD,sp)
      0010F9 27 0B            [ 1] 2927 	jreq 7$
      0010FB 90 5D            [ 2] 2928 	tnzw y 
      0010FD 27 07            [ 1] 2929 	jreq 7$
      0010FF 5C               [ 1] 2930 	incw x
      001100 16 05            [ 2] 2931 	ldw y,(DIVISR,sp)
      001102 72 B2 00 08      [ 2] 2932 	subw y,acc16
      001106 0D 01            [ 1] 2933 7$: tnz (SQUOT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001108 27 01            [ 1] 2934 	jreq 9$ 	 
      00110A 50               [ 2] 2935 8$:	negw x 
      00110B                       2936 9$: 
      00110B                       2937 	_drop VSIZE 
      00110B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00110D 81               [ 4] 2938 	ret 
                                   2939 
                                   2940 
                                   2941 ;----------------------------------
                                   2942 ;  remainder resulting from euclidian 
                                   2943 ;  division of n2/n1 
                                   2944 ; input:
                                   2945 ;   N1 		cstack 
                                   2946 ;   N2      cstack
                                   2947 ; output:
                                   2948 ;   X       N2%N1 
                                   2949 ;----------------------------------
                           000003  2950 	N1=3
                           000005  2951 	N2=5
                           000004  2952 	VSIZE=4
      00110E                       2953 modulo:
      00110E 1E 03            [ 2] 2954 	Ldw x,(N1,sp)
      001110 16 05            [ 2] 2955 	ldw y,(N2,sp)
      001112                       2956 	_vars VSIZE 
      001112 52 04            [ 2]    1     sub sp,#VSIZE 
      001114 1F 01            [ 2] 2957 	ldw (1,sp),x 
      001116 17 03            [ 2] 2958 	ldw (3,sp),y 
      001118 CD 10 CA         [ 4] 2959 	call divide 
      00111B 93               [ 1] 2960 	ldw x,y
      00111C                       2961 	_drop VSIZE 
      00111C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00111E 81               [ 4] 2962 	ret 
                                   2963 
                                   2964 
                                   2965 ;----------------------------------
                                   2966 ; search in kword_dict command name
                                   2967 ;  from its execution address 
                                   2968 ; input:
                                   2969 ;   X       	execution address 
                                   2970 ; output:
                                   2971 ;   X 			cstr*  | 0 
                                   2972 ;--------------------------------
                           000001  2973 	XADR=1 
                           000003  2974 	LINK=3 
                           000004  2975 	VSIZE=4
      00111F                       2976 cmd_name:
      00111F                       2977 	_vars VSIZE 
      00111F 52 04            [ 2]    1     sub sp,#VSIZE 
      001121 72 5F 00 08      [ 1] 2978 	clr acc16 
      001125 1F 01            [ 2] 2979 	ldw (XADR,sp),x  
      001127 AE 22 FF         [ 2] 2980 	ldw x,#kword_dict	
      00112A 1F 03            [ 2] 2981 1$:	ldw (LINK,sp),x
      00112C E6 02            [ 1] 2982 	ld a,(2,x)
      00112E A4 0F            [ 1] 2983 	and a,#15 
      001130 C7 00 09         [ 1] 2984 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001133 1C 00 03         [ 2] 2985 	addw x,#3
      001136 72 BB 00 08      [ 2] 2986 	addw x,acc16
      00113A FE               [ 2] 2987 	ldw x,(x) ; execution address 
      00113B 13 01            [ 2] 2988 	cpw x,(XADR,sp)
      00113D 27 0A            [ 1] 2989 	jreq 2$
      00113F 1E 03            [ 2] 2990 	ldw x,(LINK,sp)
      001141 FE               [ 2] 2991 	ldw x,(x) 
      001142 1D 00 02         [ 2] 2992 	subw x,#2  
      001145 26 E3            [ 1] 2993 	jrne 1$
      001147 20 05            [ 2] 2994 	jra 9$
      001149 1E 03            [ 2] 2995 2$: ldw x,(LINK,sp)
      00114B 1C 00 02         [ 2] 2996 	addw x,#2 	
      00114E                       2997 9$:	_drop VSIZE
      00114E 5B 04            [ 2]    1     addw sp,#VSIZE 
      001150 81               [ 4] 2998 	ret
                                   2999 
                                   3000 
                                   3001 ;---------------------------------
                                   3002 ; input:
                                   3003 ;	X 		dictionary entry point 
                                   3004 ;  pad		.asciz name to search 
                                   3005 ; output:
                                   3006 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   3007 ;  X		execution address | 0 
                                   3008 ;---------------------------------
                           000001  3009 	NLEN=1 ; cmd length 
                           000002  3010 	YSAVE=2
                           000003  3011 	VSIZE=3 
      001151                       3012 search_dict:
      001151                       3013 	_vars VSIZE 
      001151 52 03            [ 2]    1     sub sp,#VSIZE 
      001153 90 93            [ 1] 3014 	ldw y,x 
      001155                       3015 search_next:	
      001155 90 F6            [ 1] 3016 	ld a,(y)
      001157 A4 0F            [ 1] 3017 	and a,#0xf 
      001159 6B 01            [ 1] 3018 	ld (NLEN,sp),a  
      00115B AE 17 18         [ 2] 3019 	ldw x,#pad 
      00115E 17 02            [ 2] 3020 	ldw (YSAVE,sp),y
      001160 90 5C            [ 1] 3021 	incw y  
      001162                       3022 cp_loop:
      001162 F6               [ 1] 3023 	ld a,(x)
      001163 27 1E            [ 1] 3024 	jreq str_match 
      001165 0D 01            [ 1] 3025 	tnz (NLEN,sp)
      001167 27 0B            [ 1] 3026 	jreq no_match  
      001169 90 F1            [ 1] 3027 	cp a,(y)
      00116B 26 07            [ 1] 3028 	jrne no_match 
      00116D 90 5C            [ 1] 3029 	incw y 
      00116F 5C               [ 1] 3030 	incw x
      001170 0A 01            [ 1] 3031 	dec (NLEN,sp)
      001172 20 EE            [ 2] 3032 	jra cp_loop 
      001174                       3033 no_match:
      001174 16 02            [ 2] 3034 	ldw y,(YSAVE,sp) 
      001176 72 A2 00 02      [ 2] 3035 	subw y,#2 ; move Y to link field
      00117A 4B 00            [ 1] 3036 	push #TK_NONE 
      00117C 90 FE            [ 2] 3037 	ldw y,(y) ; next word link 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00117E 84               [ 1] 3038 	pop a ; TK_NONE 
      00117F 27 21            [ 1] 3039 	jreq search_exit  ; not found  
                                   3040 ;try next 
      001181 20 D2            [ 2] 3041 	jra search_next
      001183                       3042 str_match:
      001183 16 02            [ 2] 3043 	ldw y,(YSAVE,sp)
      001185 90 F6            [ 1] 3044 	ld a,(y)
      001187 6B 01            [ 1] 3045 	ld (NLEN,sp),a ; needed to test keyword type  
      001189 A4 0F            [ 1] 3046 	and a,#0xf 
                                   3047 ; move y to procedure address field 	
      00118B 4C               [ 1] 3048 	inc a 
      00118C C7 00 09         [ 1] 3049 	ld acc8,a 
      00118F 72 5F 00 08      [ 1] 3050 	clr acc16 
      001193 72 B9 00 08      [ 2] 3051 	addw y,acc16 
      001197 90 FE            [ 2] 3052 	ldw y,(y) ; routine entry point 
                                   3053 ;determine keyword type bits 7:6 
      001199 7B 01            [ 1] 3054 	ld a,(NLEN,sp)
      00119B 4E               [ 1] 3055 	swap a 
      00119C A4 0C            [ 1] 3056 	and a,#0xc
      00119E 44               [ 1] 3057 	srl a
      00119F 44               [ 1] 3058 	srl a 
      0011A0 AB 06            [ 1] 3059 	add a,#6
      0011A2                       3060 search_exit: 
      0011A2 93               [ 1] 3061 	ldw x,y ; x=routine address 
      0011A3                       3062 	_drop VSIZE 	 
      0011A3 5B 03            [ 2]    1     addw sp,#VSIZE 
      0011A5 81               [ 4] 3063 	ret 
                                   3064 
                                   3065 ;---------------------
                                   3066 ; check if next token
                                   3067 ;  is of expected type 
                                   3068 ; input:
                                   3069 ;   A 		 expected token attribute
                                   3070 ;  ouput:
                                   3071 ;   none     if fail call tb_error 
                                   3072 ;--------------------
      0011A6                       3073 expect:
      0011A6 88               [ 1] 3074 	push a 
      0011A7 CD 07 F4         [ 4] 3075 	call next_token 
      0011AA 11 01            [ 1] 3076 	cp a,(1,sp)
      0011AC 27 03            [ 1] 3077 	jreq 1$
      0011AE CC 07 14         [ 2] 3078 	jp syntax_error
      0011B1 84               [ 1] 3079 1$: pop a 
      0011B2 81               [ 4] 3080 	ret 
                                   3081 
                                   3082 
                                   3083 ;-------------------------------
                                   3084 ; parse embedded BASIC routines 
                                   3085 ; arguments list.
                                   3086 ; arg_list::=  rel[','rel]*
                                   3087 ; all arguments are of integer type
                                   3088 ; input:
                                   3089 ;   none
                                   3090 ; output:
                                   3091 ;   A 			number of arguments pushed on dstack  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3092 ;--------------------------------
                           000001  3093 	ARG_CNT=1 
      0011B3                       3094 arg_list:
      0011B3 4B 00            [ 1] 3095 	push #0  
      0011B5 CD 12 FB         [ 4] 3096 1$: call relation
      0011B8 A1 00            [ 1] 3097 	cp a,#TK_NONE 
      0011BA 27 19            [ 1] 3098 	jreq 5$
      0011BC A1 04            [ 1] 3099 	cp a,#TK_INTGR
      0011BE 26 12            [ 1] 3100 	jrne 4$
      0011C0 CD 0F 86         [ 4] 3101 3$: call dpush 
      0011C3 0C 01            [ 1] 3102     inc (ARG_CNT,sp)
      0011C5 CD 07 F4         [ 4] 3103 	call next_token 
      0011C8 A1 00            [ 1] 3104 	cp a,#TK_NONE 
      0011CA 27 09            [ 1] 3105 	jreq 5$ 
      0011CC A1 0D            [ 1] 3106 	cp a,#TK_COMMA 
      0011CE 26 02            [ 1] 3107 	jrne 4$
      0011D0 20 E3            [ 2] 3108 	jra 1$ 
      0011D2 CD 0F 80         [ 4] 3109 4$:	call unget_token 
      0011D5 84               [ 1] 3110 5$:	pop a 
      0011D6 81               [ 4] 3111 	ret 
                                   3112 
                                   3113 
      0011D7                       3114 func_args:
      0011D7 A6 0B            [ 1] 3115 	ld a,#TK_LPAREN 
      0011D9 CD 11 A6         [ 4] 3116 	call expect 
      0011DC CD 11 B3         [ 4] 3117 	call arg_list 
      0011DF 88               [ 1] 3118 	push a 
      0011E0 A6 0C            [ 1] 3119 	ld a,#TK_RPAREN 
      0011E2 CD 11 A6         [ 4] 3120 	call expect 
      0011E5 84               [ 1] 3121 	pop a 
      0011E6 81               [ 4] 3122 	ret 
                                   3123 
                                   3124 
                                   3125 ;--------------------------------
                                   3126 ;   BASIC commnands 
                                   3127 ;--------------------------------
                                   3128 
                                   3129 ;--------------------------------
                                   3130 ;  arithmetic and relational 
                                   3131 ;  routines
                                   3132 ;  operators precedence
                                   3133 ;  highest to lowest
                                   3134 ;  operators on same row have 
                                   3135 ;  same precedence and are executed
                                   3136 ;  from left to right.
                                   3137 ;	'*','/','%'
                                   3138 ;   '-','+'
                                   3139 ;   '=','>','<','>=','<=','<>','><'
                                   3140 ;   '<>' and '><' are equivalent for not equal.
                                   3141 ;--------------------------------
                                   3142 
                                   3143 ;---------------------
                                   3144 ; return array element
                                   3145 ; address from @(expr)
                                   3146 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3147 ;   A 		TK_ARRAY
                                   3148 ; output:
                                   3149 ;   A 		TK_INTGR
                                   3150 ;	X 		element address 
                                   3151 ;----------------------
      0011E7                       3152 get_array_element:
      0011E7 CD 11 D7         [ 4] 3153 	call func_args 
      0011EA A1 01            [ 1] 3154 	cp a,#1
      0011EC 27 03            [ 1] 3155 	jreq 1$
      0011EE CC 07 14         [ 2] 3156 	jp syntax_error
      0011F1 CD 0F 93         [ 4] 3157 1$: call dpop  
                                   3158 	; check for bounds 
      0011F4 C3 00 1D         [ 2] 3159 	cpw x,array_size 
      0011F7 23 05            [ 2] 3160 	jrule 3$
                                   3161 ; bounds {1..array_size}	
      0011F9 A6 0A            [ 1] 3162 2$: ld a,#ERR_BAD_VALUE 
      0011FB CC 07 16         [ 2] 3163 	jp tb_error 
      0011FE 5D               [ 2] 3164 3$: tnzw  x
      0011FF 27 F8            [ 1] 3165 	jreq 2$ 
      001201 58               [ 2] 3166 	sllw x 
      001202 89               [ 2] 3167 	pushw x 
      001203 AE 16 C8         [ 2] 3168 	ldw x,#tib
      001206 72 F0 01         [ 2] 3169 	subw x,(1,sp)
      001209                       3170 	_drop 2   
      001209 5B 02            [ 2]    1     addw sp,#2 
      00120B A6 04            [ 1] 3171 	ld a,#TK_INTGR
      00120D 81               [ 4] 3172 	ret 
                                   3173 
                                   3174 ;***********************************
                                   3175 ;   expression parse,execute 
                                   3176 ;***********************************
                                   3177 ;-----------------------------------
                                   3178 ; factor ::= ['+'|'-'|e] var | @ |
                                   3179 ;			 integer | function |
                                   3180 ;			 '('relation')' 
                                   3181 ; output:
                                   3182 ;   A    token attribute 
                                   3183 ;   X 	 integer
                                   3184 ; ---------------------------------
                           000001  3185 	NEG=1
                           000001  3186 	VSIZE=1
      00120E                       3187 factor:
      00120E                       3188 	_vars VSIZE 
      00120E 52 01            [ 2]    1     sub sp,#VSIZE 
      001210 CD 07 F4         [ 4] 3189 	call next_token
      001213 A1 02            [ 1] 3190 	cp a,#CMD_END 
      001215 2B 50            [ 1] 3191 	jrmi 20$
      001217 6B 01            [ 1] 3192 1$:	ld (NEG,sp),a 
      001219 A4 30            [ 1] 3193 	and a,#TK_GRP_MASK
      00121B A1 10            [ 1] 3194 	cp a,#TK_GRP_ADD 
      00121D 27 04            [ 1] 3195 	jreq 2$
      00121F 7B 01            [ 1] 3196 	ld a,(NEG,sp)
      001221 20 03            [ 2] 3197 	jra 4$  
      001223                       3198 2$:	
      001223 CD 07 F4         [ 4] 3199 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001226                       3200 4$:	
      001226 A1 07            [ 1] 3201 	cp a,#TK_IFUNC 
      001228 26 03            [ 1] 3202 	jrne 5$ 
      00122A FD               [ 4] 3203 	call (x) 
      00122B 20 31            [ 2] 3204 	jra 18$ 
      00122D                       3205 5$:
      00122D A1 04            [ 1] 3206 	cp a,#TK_INTGR
      00122F 26 02            [ 1] 3207 	jrne 6$
      001231 20 2B            [ 2] 3208 	jra 18$
      001233                       3209 6$:
      001233 A1 02            [ 1] 3210 	cp a,#TK_ARRAY
      001235 26 06            [ 1] 3211 	jrne 10$
      001237 CD 11 E7         [ 4] 3212 	call get_array_element
      00123A FE               [ 2] 3213 	ldw x,(x)
      00123B 20 21            [ 2] 3214 	jra 18$ 
      00123D                       3215 10$:
      00123D A1 05            [ 1] 3216 	cp a,#TK_VAR 
      00123F 26 03            [ 1] 3217 	jrne 11$
      001241 FE               [ 2] 3218 	ldw x,(x)
      001242 20 1A            [ 2] 3219 	jra 18$
      001244                       3220 11$: 
      001244 A1 09            [ 1] 3221 	cp a,#TK_CONST 
      001246 27 16            [ 1] 3222 	jreq 18$
      001248                       3223 12$:			
      001248 A1 0B            [ 1] 3224 	cp a,#TK_LPAREN
      00124A 26 0C            [ 1] 3225 	jrne 16$
      00124C CD 12 FB         [ 4] 3226 	call relation
      00124F 89               [ 2] 3227 	pushw x 
      001250 A6 0C            [ 1] 3228 	ld a,#TK_RPAREN 
      001252 CD 11 A6         [ 4] 3229 	call expect
      001255 85               [ 2] 3230 	popw x 
      001256 20 06            [ 2] 3231 	jra 18$	
      001258                       3232 16$:
      001258 CD 0F 80         [ 4] 3233 	call unget_token
      00125B 4F               [ 1] 3234 	clr a 
      00125C 20 09            [ 2] 3235 	jra 20$ 
      00125E                       3236 18$: 
      00125E A6 11            [ 1] 3237 	ld a,#TK_MINUS 
      001260 11 01            [ 1] 3238 	cp a,(NEG,sp)
      001262 26 01            [ 1] 3239 	jrne 19$
      001264 50               [ 2] 3240 	negw x
      001265                       3241 19$:
      001265 A6 04            [ 1] 3242 	ld a,#TK_INTGR
      001267                       3243 20$:
      001267                       3244 	_drop VSIZE
      001267 5B 01            [ 2]    1     addw sp,#VSIZE 
      001269 81               [ 4] 3245 	ret
                                   3246 
                                   3247 ;-----------------------------------
                                   3248 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3249 ; output:
                                   3250 ;   A    	token attribute 
                                   3251 ;	X		integer
                                   3252 ;-----------------------------------
                           000001  3253 	N1=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                           000003  3254 	N2=3
                           000005  3255 	MULOP=5
                           000005  3256 	VSIZE=5
      00126A                       3257 term:
      00126A                       3258 	_vars VSIZE
      00126A 52 05            [ 2]    1     sub sp,#VSIZE 
      00126C CD 12 0E         [ 4] 3259 	call factor
      00126F A1 02            [ 1] 3260 	cp a,#CMD_END
      001271 2B 41            [ 1] 3261 	jrmi term_exit
      001273                       3262 term01:	 ; check for  operator 
      001273 1F 03            [ 2] 3263 	ldw (N2,sp),x  ; save first factor 
      001275 CD 07 F4         [ 4] 3264 	call next_token
      001278 A1 02            [ 1] 3265 	cp a,#2
      00127A 2B 34            [ 1] 3266 	jrmi 9$
      00127C 6B 05            [ 1] 3267 0$:	ld (MULOP,sp),a
      00127E A4 30            [ 1] 3268 	and a,#TK_GRP_MASK
      001280 A1 20            [ 1] 3269 	cp a,#TK_GRP_MULT
      001282 27 07            [ 1] 3270 	jreq 1$
      001284 7B 05            [ 1] 3271 	ld a,(MULOP,sp) 
      001286 CD 0F 80         [ 4] 3272 	call unget_token 
      001289 20 25            [ 2] 3273 	jra 9$
      00128B                       3274 1$:	; got *|/|%
      00128B CD 12 0E         [ 4] 3275 	call factor
      00128E A1 04            [ 1] 3276 	cp a,#TK_INTGR
      001290 27 03            [ 1] 3277 	jreq 2$ 
      001292 CC 07 14         [ 2] 3278 	jp syntax_error
      001295 1F 01            [ 2] 3279 2$:	ldw (N1,sp),x  
      001297 7B 05            [ 1] 3280 	ld a,(MULOP,sp) 
      001299 A1 20            [ 1] 3281 	cp a,#TK_MULT 
      00129B 26 05            [ 1] 3282 	jrne 3$
      00129D CD 10 82         [ 4] 3283 	call multiply 
      0012A0 20 D1            [ 2] 3284 	jra term01
      0012A2 A1 21            [ 1] 3285 3$: cp a,#TK_DIV 
      0012A4 26 05            [ 1] 3286 	jrne 4$ 
      0012A6 CD 10 CA         [ 4] 3287 	call divide 
      0012A9 20 C8            [ 2] 3288 	jra term01 
      0012AB CD 11 0E         [ 4] 3289 4$: call modulo
      0012AE 20 C3            [ 2] 3290 	jra term01 
      0012B0 1E 03            [ 2] 3291 9$: ldw x,(N2,sp)  
      0012B2 A6 04            [ 1] 3292 	ld a,#TK_INTGR 	
      0012B4                       3293 term_exit:
      0012B4                       3294 	_drop VSIZE 
      0012B4 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012B6 81               [ 4] 3295 	ret 
                                   3296 
                                   3297 ;-------------------------------
                                   3298 ;  expr ::= term [['+'|'-'] term]*
                                   3299 ;  result range {-32768..32767}
                                   3300 ;  output:
                                   3301 ;   A    token attribute 
                                   3302 ;   X	 integer   
                                   3303 ;-------------------------------
                           000001  3304 	N1=1 
                           000003  3305 	N2=3
                           000005  3306 	OP=5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                           000005  3307 	VSIZE=5 
      0012B7                       3308 expression:
      0012B7                       3309 	_vars VSIZE 
      0012B7 52 05            [ 2]    1     sub sp,#VSIZE 
      0012B9 CD 12 6A         [ 4] 3310 	call term
      0012BC A1 02            [ 1] 3311 	cp a,#CMD_END 
      0012BE 2B 38            [ 1] 3312 	jrmi expr_exit 
      0012C0 1F 03            [ 2] 3313 0$:	ldw (N2,sp),x 
      0012C2 CD 07 F4         [ 4] 3314 	call next_token
      0012C5 A1 02            [ 1] 3315 	cp a,#2
      0012C7 2B 2B            [ 1] 3316 	jrmi 9$ 
      0012C9 6B 05            [ 1] 3317 1$:	ld (OP,sp),a  
      0012CB A4 30            [ 1] 3318 	and a,#TK_GRP_MASK
      0012CD A1 10            [ 1] 3319 	cp a,#TK_GRP_ADD 
      0012CF 27 07            [ 1] 3320 	jreq 2$ 
      0012D1 7B 05            [ 1] 3321 	ld a,(OP,sp)
      0012D3 CD 0F 80         [ 4] 3322 	call unget_token
      0012D6 20 1C            [ 2] 3323 	jra 9$
      0012D8                       3324 2$: 
      0012D8 CD 12 6A         [ 4] 3325 	call term
      0012DB A1 04            [ 1] 3326 	cp a,#TK_INTGR 
      0012DD 27 03            [ 1] 3327 	jreq 3$
      0012DF CC 07 14         [ 2] 3328 	jp syntax_error
      0012E2 1F 01            [ 2] 3329 3$:	ldw (N1,sp),x 
      0012E4 7B 05            [ 1] 3330 	ld a,(OP,sp)
      0012E6 A1 10            [ 1] 3331 	cp a,#TK_PLUS 
      0012E8 26 05            [ 1] 3332 	jrne 4$
      0012EA CD 10 74         [ 4] 3333 	call add 
      0012ED 20 D1            [ 2] 3334 	jra 0$ 
      0012EF CD 10 7C         [ 4] 3335 4$:	call substract
      0012F2 20 CC            [ 2] 3336 	jra 0$
      0012F4 1E 03            [ 2] 3337 9$: ldw x,(N2,sp)
      0012F6 A6 04            [ 1] 3338 	ld a,#TK_INTGR	
      0012F8                       3339 expr_exit:
      0012F8                       3340 	_drop VSIZE 
      0012F8 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012FA 81               [ 4] 3341 	ret 
                                   3342 
                                   3343 ;---------------------------------------------
                                   3344 ; rel ::= expr rel_op expr
                                   3345 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3346 ;  relation return 1 | 0  for true | false 
                                   3347 ;  output:
                                   3348 ;    A 		token attribute  
                                   3349 ;	 X		1|0
                                   3350 ;---------------------------------------------
                           000001  3351 	N1=1
                           000003  3352 	N2=3
                           000005  3353 	RELOP=5
                           000005  3354 	VSIZE=5 
      0012FB                       3355 relation: 
      0012FB                       3356 	_vars VSIZE
      0012FB 52 05            [ 2]    1     sub sp,#VSIZE 
      0012FD CD 12 B7         [ 4] 3357 	call expression
      001300 A1 02            [ 1] 3358 	cp a,#CMD_END  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001302 2B 4B            [ 1] 3359 	jrmi rel_exit 
                                   3360 	; expect rel_op or leave 
      001304 1F 03            [ 2] 3361 	ldw (N2,sp),x 
      001306 CD 07 F4         [ 4] 3362 	call next_token 
      001309 A1 02            [ 1] 3363 	cp a,#2
      00130B 2B 3E            [ 1] 3364 	jrmi 9$
      00130D                       3365 1$:	
      00130D 6B 05            [ 1] 3366 	ld (RELOP,sp),a 
      00130F A4 30            [ 1] 3367 	and a,#TK_GRP_MASK
      001311 A1 30            [ 1] 3368 	cp a,#TK_GRP_RELOP 
      001313 27 07            [ 1] 3369 	jreq 2$
      001315 7B 05            [ 1] 3370 	ld a,(RELOP,sp)
      001317 CD 0F 80         [ 4] 3371 	call unget_token  
      00131A 20 2F            [ 2] 3372 	jra 9$
      00131C                       3373 2$:	; expect another expression or error 
      00131C CD 12 B7         [ 4] 3374 	call expression
      00131F A1 04            [ 1] 3375 	cp a,#TK_INTGR 
      001321 27 03            [ 1] 3376 	jreq 3$
      001323 CC 07 14         [ 2] 3377 	jp syntax_error 
      001326 1F 01            [ 2] 3378 3$:	ldw (N1,sp),x 
      001328 CD 10 7C         [ 4] 3379 	call substract
      00132B 26 06            [ 1] 3380 	jrne 4$
      00132D 35 02 00 09      [ 1] 3381 	mov acc8,#2 ; n1==n2
      001331 20 0C            [ 2] 3382 	jra 6$ 
      001333                       3383 4$: 
      001333 2C 06            [ 1] 3384 	jrsgt 5$  
      001335 35 04 00 09      [ 1] 3385 	mov acc8,#4 ; n1<2 
      001339 20 04            [ 2] 3386 	jra 6$
      00133B                       3387 5$:
      00133B 35 01 00 09      [ 1] 3388 	mov acc8,#1 ; n1>n2 
      00133F                       3389 6$:
      00133F 5F               [ 1] 3390 	clrw x 
      001340 C6 00 09         [ 1] 3391 	ld a, acc8  
      001343 14 05            [ 1] 3392 	and a,(RELOP,sp)
      001345 4D               [ 1] 3393 	tnz a 
      001346 27 05            [ 1] 3394 	jreq 10$
      001348 5C               [ 1] 3395 	incw x 
      001349                       3396 7$:	 
      001349 20 02            [ 2] 3397 	jra 10$  	
      00134B 1E 03            [ 2] 3398 9$: ldw x,(N2,sp)
      00134D                       3399 10$:
      00134D A6 04            [ 1] 3400 	ld a,#TK_INTGR
      00134F                       3401 rel_exit: 	 
      00134F                       3402 	_drop VSIZE
      00134F 5B 05            [ 2]    1     addw sp,#VSIZE 
      001351 81               [ 4] 3403 	ret 
                                   3404 
                                   3405 ;--------------------------------
                                   3406 ; BASIC: SHOW 
                                   3407 ;  show content of dstack,cstack
                                   3408 ;--------------------------------
      001352                       3409 show:
      001352 C6 00 06         [ 1] 3410 	ld a,base 
      001355 88               [ 1] 3411 	push a 
      001356 CD 10 14         [ 4] 3412 	call dots
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001359 CD 10 47         [ 4] 3413 	call dotr 
      00135C 84               [ 1] 3414 	pop a 
      00135D C7 00 06         [ 1] 3415 	ld base,a 
      001360 4F               [ 1] 3416 	clr a 
      001361 81               [ 4] 3417 	ret
                                   3418 
                                   3419 ;--------------------------------------------
                                   3420 ; BASIC: HEX 
                                   3421 ; select hexadecimal base for integer print
                                   3422 ;---------------------------------------------
      001362                       3423 hex_base:
      001362 35 10 00 06      [ 1] 3424 	mov base,#16 
      001366 81               [ 4] 3425 	ret 
                                   3426 
                                   3427 ;--------------------------------------------
                                   3428 ; BASIC: DEC 
                                   3429 ; select decimal base for integer print
                                   3430 ;---------------------------------------------
      001367                       3431 dec_base:
      001367 35 0A 00 06      [ 1] 3432 	mov base,#10
      00136B 81               [ 4] 3433 	ret 
                                   3434 
                                   3435 ;------------------------
                                   3436 ; BASIC: SIZE 
                                   3437 ; return free size in text area
                                   3438 ; output:
                                   3439 ;   A 		TK_INTGR
                                   3440 ;   X 	    size integer
                                   3441 ;--------------------------
      00136C                       3442 size:
      00136C AE 16 C8         [ 2] 3443 	ldw x,#tib 
      00136F 72 B0 00 1A      [ 2] 3444 	subw x,txtend 
      001373 A6 04            [ 1] 3445 	ld a,#TK_INTGR
      001375 81               [ 4] 3446 	ret 
                                   3447 
                                   3448 
                                   3449 ;------------------------
                                   3450 ; BASIC: UBOUND  
                                   3451 ; return array variable size 
                                   3452 ; output:
                                   3453 ;   A 		TK_INTGR
                                   3454 ;   X 	    array size 
                                   3455 ;--------------------------
      001376                       3456 ubound:
      001376 AE 16 C8         [ 2] 3457 	ldw x,#tib
      001379 72 B0 00 1A      [ 2] 3458 	subw x,txtend 
      00137D 90 CE 00 04      [ 2] 3459 	ldw y,basicptr 
      001381 90 C3 00 1A      [ 2] 3460 	cpw y,txtend 
      001385 25 0A            [ 1] 3461 	jrult 1$
      001387 3B 00 03         [ 1] 3462 	push count 
      00138A 4B 00            [ 1] 3463 	push #0 
      00138C 72 F0 01         [ 2] 3464 	subw x,(1,sp)
      00138F                       3465 	_drop 2 
      00138F 5B 02            [ 2]    1     addw sp,#2 
      001391 54               [ 2] 3466 1$:	srlw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001392 CF 00 1D         [ 2] 3467 	ldw array_size,x
      001395 A6 04            [ 1] 3468 	ld a,#TK_INTGR
      001397 81               [ 4] 3469 	ret 
                                   3470 
                                   3471 ;-----------------------------
                                   3472 ; BASIC: LET var=expr 
                                   3473 ; variable assignement 
                                   3474 ; output:
                                   3475 ;   A 		TK_NONE 
                                   3476 ;-----------------------------
      001398                       3477 let:
      001398 CD 07 F4         [ 4] 3478 	call next_token 
      00139B A1 05            [ 1] 3479 	cp a,#TK_VAR 
      00139D 27 03            [ 1] 3480 	jreq let02
      00139F CC 07 14         [ 2] 3481 	jp syntax_error
      0013A2                       3482 let02:
      0013A2 CD 0F 86         [ 4] 3483 	call dpush 
      0013A5 CD 07 F4         [ 4] 3484 	call next_token 
      0013A8 A1 32            [ 1] 3485 	cp a,#TK_EQUAL
      0013AA 27 03            [ 1] 3486 	jreq 1$
      0013AC CC 07 14         [ 2] 3487 	jp syntax_error
      0013AF                       3488 1$:	
      0013AF CD 12 FB         [ 4] 3489 	call relation   
      0013B2 A1 04            [ 1] 3490 	cp a,#TK_INTGR 
      0013B4 27 03            [ 1] 3491 	jreq 2$
      0013B6 CC 07 14         [ 2] 3492 	jp syntax_error
      0013B9                       3493 2$:	
      0013B9 90 93            [ 1] 3494 	ldw y,x 
      0013BB CD 0F 93         [ 4] 3495 	call dpop  
      0013BE FF               [ 2] 3496 	ldw (x),y   
      0013BF 81               [ 4] 3497 	ret 
                                   3498 
                                   3499 ;----------------------------
                                   3500 ; BASIC: LIST [[start][,end]]
                                   3501 ; list program lines 
                                   3502 ; form start to end 
                                   3503 ; if empty argument list then 
                                   3504 ; list all.
                                   3505 ;----------------------------
                           000001  3506 	FIRST=1
                           000003  3507 	LAST=3 
                           000005  3508 	LN_PTR=5
                           000006  3509 	VSIZE=6 
      0013C0                       3510 list:
      0013C0                       3511 	_vars VSIZE
      0013C0 52 06            [ 2]    1     sub sp,#VSIZE 
      0013C2 CE 00 18         [ 2] 3512 	ldw x,txtbgn 
      0013C5 C3 00 1A         [ 2] 3513 	cpw x,txtend 
      0013C8 2B 03            [ 1] 3514 	jrmi 1$
      0013CA CC 14 40         [ 2] 3515 	jp list_exit ; nothing to list 
      0013CD 1F 05            [ 2] 3516 1$:	ldw (LN_PTR,sp),x 
      0013CF FE               [ 2] 3517 	ldw x,(x) 
      0013D0 1F 01            [ 2] 3518 	ldw (FIRST,sp),x ; list from first line 
      0013D2 AE 7F FF         [ 2] 3519 	ldw x,#0x7fff ; biggest line number 
      0013D5 1F 03            [ 2] 3520 	ldw (LAST,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013D7 CD 11 B3         [ 4] 3521 	call arg_list
      0013DA 4D               [ 1] 3522 	tnz a
      0013DB 27 3F            [ 1] 3523 	jreq list_start 
      0013DD A1 02            [ 1] 3524 	cp a,#2 
      0013DF 27 07            [ 1] 3525 	jreq 4$
      0013E1 A1 01            [ 1] 3526 	cp a,#1 
      0013E3 27 06            [ 1] 3527 	jreq first_line 
      0013E5 CC 07 14         [ 2] 3528 	jp syntax_error 
      0013E8 CD 0F A0         [ 4] 3529 4$:	call dswap
      0013EB                       3530 first_line:
      0013EB CD 0F 93         [ 4] 3531 	call dpop 
      0013EE 1F 01            [ 2] 3532 	ldw (FIRST,sp),x 
      0013F0 A1 01            [ 1] 3533 	cp a,#1 
      0013F2 27 05            [ 1] 3534 	jreq lines_skip 	
      0013F4                       3535 last_line:
      0013F4 CD 0F 93         [ 4] 3536 	call dpop 
      0013F7 1F 03            [ 2] 3537 	ldw (LAST,sp),x 
      0013F9                       3538 lines_skip:
      0013F9 CE 00 18         [ 2] 3539 	ldw x,txtbgn
      0013FC 1F 05            [ 2] 3540 2$:	ldw (LN_PTR,sp),x 
      0013FE C3 00 1A         [ 2] 3541 	cpw x,txtend 
      001401 2A 3D            [ 1] 3542 	jrpl list_exit 
      001403 FE               [ 2] 3543 	ldw x,(x) ;line# 
      001404 13 01            [ 2] 3544 	cpw x,(FIRST,sp)
      001406 2A 14            [ 1] 3545 	jrpl list_start 
      001408 1E 05            [ 2] 3546 	ldw x,(LN_PTR,sp) 
      00140A 1C 00 02         [ 2] 3547 	addw x,#2 
      00140D F6               [ 1] 3548 	ld a,(x)
      00140E 5C               [ 1] 3549 	incw x 
      00140F C7 00 09         [ 1] 3550 	ld acc8,a 
      001412 72 5F 00 08      [ 1] 3551 	clr acc16 
      001416 72 BB 00 08      [ 2] 3552 	addw x,acc16
      00141A 20 E0            [ 2] 3553 	jra 2$ 
                                   3554 ; print loop
      00141C                       3555 list_start:
      00141C 1E 05            [ 2] 3556 	ldw x,(LN_PTR,sp)
      00141E                       3557 3$:	
      00141E CD 14 93         [ 4] 3558 	call prt_basic_line
      001421 1E 05            [ 2] 3559 	ldw x,(LN_PTR,sp)
      001423 E6 02            [ 1] 3560 	ld a,(2,x)
      001425 C7 00 09         [ 1] 3561 	ld acc8,a 
      001428 72 5F 00 08      [ 1] 3562 	clr acc16 
      00142C 72 BB 00 08      [ 2] 3563 	addw x,acc16
      001430 C3 00 1A         [ 2] 3564 	cpw x,txtend 
      001433 2A 0B            [ 1] 3565 	jrpl list_exit
      001435 1F 05            [ 2] 3566 	ldw (LN_PTR,sp),x
      001437 FE               [ 2] 3567 	ldw x,(x)
      001438 13 03            [ 2] 3568 	cpw x,(LAST,sp)  
      00143A 2C 04            [ 1] 3569 	jrsgt list_exit 
      00143C 1E 05            [ 2] 3570 	ldw x,(LN_PTR,sp)
      00143E 20 DE            [ 2] 3571 	jra 3$
      001440                       3572 list_exit:
      001440                       3573 	_drop VSIZE 
      001440 5B 06            [ 2]    1     addw sp,#VSIZE 
      001442 81               [ 4] 3574 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3575 
                                   3576 ;-------------------------
                                   3577 ; print counted string 
                                   3578 ; input:
                                   3579 ;   X 		address of string
                                   3580 ;--------------------------
      001443                       3581 prt_cmd_name:
      001443 F6               [ 1] 3582 	ld a,(x)
      001444 5C               [ 1] 3583 	incw x
      001445 A4 0F            [ 1] 3584 	and a,#15  
      001447 88               [ 1] 3585 	push a 
      001448 0D 01            [ 1] 3586 1$: tnz (1,sp) 
      00144A 27 09            [ 1] 3587 	jreq 9$
      00144C F6               [ 1] 3588 	ld a,(x)
      00144D CD 01 A6         [ 4] 3589 	call putc 
      001450 5C               [ 1] 3590 	incw x
      001451 0A 01            [ 1] 3591 	dec (1,sp)	 
      001453 20 F3            [ 2] 3592 	jra 1$
      001455 84               [ 1] 3593 9$: pop a 
      001456 81               [ 4] 3594 	ret	
                                   3595 
                                   3596 ;--------------------------
                                   3597 ; print TK_QSTR
                                   3598 ; converting control character
                                   3599 ; to backslash sequence
                                   3600 ; input:
                                   3601 ;   X        char *
                                   3602 ;-----------------------------
      001457                       3603 prt_quote:
      001457 A6 22            [ 1] 3604 	ld a,#'"
      001459 CD 01 A6         [ 4] 3605 	call putc 
      00145C F6               [ 1] 3606 1$:	ld a,(x)
      00145D 27 2D            [ 1] 3607 	jreq 9$
      00145F 5C               [ 1] 3608 	incw x 
      001460 A1 20            [ 1] 3609 	cp a,#SPACE 
      001462 25 0C            [ 1] 3610 	jrult 3$
      001464 CD 01 A6         [ 4] 3611 	call putc
      001467 A1 5C            [ 1] 3612 	cp a,#'\ 
      001469 26 F1            [ 1] 3613 	jrne 1$ 
      00146B                       3614 2$:
      00146B CD 01 A6         [ 4] 3615 	call putc 
      00146E 20 EC            [ 2] 3616 	jra 1$
      001470 88               [ 1] 3617 3$: push a 
      001471 A6 5C            [ 1] 3618 	ld a,#'\
      001473 CD 01 A6         [ 4] 3619 	call putc 
      001476 84               [ 1] 3620 	pop a 
      001477 A0 07            [ 1] 3621 	sub a,#7
      001479 C7 00 09         [ 1] 3622 	ld acc8,a 
      00147C 72 5F 00 08      [ 1] 3623 	clr acc16
      001480 90 AE 0C 4F      [ 2] 3624 	ldw y,#escaped 
      001484 72 B9 00 08      [ 2] 3625 	addw y,acc16 
      001488 90 F6            [ 1] 3626 	ld a,(y)
      00148A 20 DF            [ 2] 3627 	jra 2$
      00148C A6 22            [ 1] 3628 9$: ld a,#'"
      00148E CD 01 A6         [ 4] 3629 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001491 5C               [ 1] 3630 	incw x 
      001492 81               [ 4] 3631 	ret
                                   3632 
                                   3633 
                                   3634 ;--------------------------
                                   3635 ; decompile line from token list 
                                   3636 ; input:
                                   3637 ;   X 		pointer at line
                                   3638 ; output:
                                   3639 ;   none 
                                   3640 ;--------------------------	
                           000001  3641 	BASE_SAV=1
                           000002  3642 	WIDTH_SAV=2
                           000003  3643 	XSAVE=3
                           000005  3644 	LLEN=5
                           000005  3645 	VSIZE=5 
      001493                       3646 prt_basic_line:
      001493                       3647 	_vars VSIZE 
      001493 52 05            [ 2]    1     sub sp,#VSIZE 
      001495 C6 00 06         [ 1] 3648 	ld a,base
      001498 6B 01            [ 1] 3649 	ld (BASE_SAV,sp),a  
      00149A C6 00 20         [ 1] 3650 	ld a,tab_width 
      00149D 6B 02            [ 1] 3651 	ld (WIDTH_SAV,sp),a 
      00149F CF 00 11         [ 2] 3652 	ldw ptr16,x
      0014A2 FE               [ 2] 3653 	ldw x,(x)
      0014A3 35 0A 00 06      [ 1] 3654 	mov base,#10
      0014A7 35 05 00 20      [ 1] 3655 	mov tab_width,#5
      0014AB CD 09 8D         [ 4] 3656 	call print_int ; print line number 
      0014AE A6 20            [ 1] 3657 	ld a,#SPACE 
      0014B0 CD 01 A6         [ 4] 3658 	call putc 
      0014B3 72 5F 00 20      [ 1] 3659 	clr tab_width
      0014B7 AE 00 02         [ 2] 3660 	ldw x,#2
      0014BA 72 D6 00 11      [ 4] 3661 	ld a,([ptr16],x)
      0014BE 6B 05            [ 1] 3662 	ld (LLEN,sp),a 
      0014C0 5C               [ 1] 3663 	incw x
      0014C1 9F               [ 1] 3664 1$:	ld a,xl 
      0014C2 11 05            [ 1] 3665 	cp a,(LLEN,sp)
      0014C4 2B 03            [ 1] 3666 	jrmi 20$
      0014C6 CC 15 D0         [ 2] 3667 	jp 90$
      0014C9                       3668 20$:	 
      0014C9 72 D6 00 11      [ 4] 3669 	ld a,([ptr16],x)
      0014CD 5C               [ 1] 3670 	incw x 
      0014CE 1F 03            [ 2] 3671 	ldw (XSAVE,sp),x 
      0014D0 A1 06            [ 1] 3672 	cp a,#TK_CMD 
      0014D2 25 44            [ 1] 3673 	jrult 5$
      0014D4 A1 09            [ 1] 3674 	cp a,#TK_CONST 
      0014D6 22 2F            [ 1] 3675 	jrugt 4$
      0014D8                       3676 2$:	
      0014D8 72 DE 00 11      [ 5] 3677 	ldw x,([ptr16],x)
      0014DC A3 17 09         [ 2] 3678 	cpw x,#rem 
      0014DF 26 14            [ 1] 3679 	jrne 3$
      0014E1 A6 27            [ 1] 3680 	ld a,#''
      0014E3 CD 01 A6         [ 4] 3681 	call putc 
      0014E6 1E 03            [ 2] 3682 	ldw x,(XSAVE,sp)
      0014E8 1C 00 02         [ 2] 3683 	addw x,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0014EB 72 BB 00 11      [ 2] 3684 	addw x,ptr16  
      0014EF CD 01 B8         [ 4] 3685 	call puts 
      0014F2 CC 15 D0         [ 2] 3686 	jp 90$ 
      0014F5 CD 11 1F         [ 4] 3687 3$:	call cmd_name
      0014F8 CD 14 43         [ 4] 3688 	call prt_cmd_name
      0014FB A6 20            [ 1] 3689 	ld a,#SPACE 
      0014FD CD 01 A6         [ 4] 3690 	call putc 
      001500 1E 03            [ 2] 3691 	ldw x,(XSAVE,sp)
      001502 1C 00 02         [ 2] 3692 	addw x,#2
      001505 20 BA            [ 2] 3693 	jra 1$
      001507 A1 0A            [ 1] 3694 4$: cp a,#TK_QSTR 
      001509 26 0D            [ 1] 3695 	jrne 5$
      00150B 72 BB 00 11      [ 2] 3696 	addw x,ptr16
      00150F CD 14 57         [ 4] 3697 	call prt_quote 
      001512 72 B0 00 11      [ 2] 3698 	subw x,ptr16  
      001516 20 A9            [ 2] 3699 	jra 1$
      001518 A1 05            [ 1] 3700 5$:	cp a,#TK_VAR
      00151A 26 1A            [ 1] 3701 	jrne 6$ 
      00151C 72 DE 00 11      [ 5] 3702 	ldw x,([ptr16],x)
      001520 1D 00 21         [ 2] 3703 	subw x,#vars 
      001523 9F               [ 1] 3704 	ld a,xl
      001524 44               [ 1] 3705 	srl a 
      001525 AB 41            [ 1] 3706 	add a,#'A 
      001527 CD 01 A6         [ 4] 3707 	call putc 
      00152A A6 20            [ 1] 3708 	ld a,#SPACE 
      00152C CD 01 A6         [ 4] 3709 	call putc 
      00152F 1E 03            [ 2] 3710 	ldw x,(XSAVE,sp)
      001531 1C 00 02         [ 2] 3711 	addw x,#2 
      001534 20 8B            [ 2] 3712 	jra 1$ 
      001536 A1 02            [ 1] 3713 6$: cp a,#TK_ARRAY 
      001538 26 0A            [ 1] 3714 	jrne 7$
      00153A A6 40            [ 1] 3715 	ld a,#'@ 
      00153C CD 01 A6         [ 4] 3716 	call putc 
      00153F 1E 03            [ 2] 3717 	ldw x,(XSAVE,sp)
      001541 CC 14 C1         [ 2] 3718 	jp 1$ 
      001544 A1 04            [ 1] 3719 7$: cp a,#TK_INTGR 
      001546 26 14            [ 1] 3720 	jrne 8$
      001548 72 DE 00 11      [ 5] 3721 	ldw x,([ptr16],x)
      00154C CD 09 8D         [ 4] 3722 	call print_int
      00154F A6 20            [ 1] 3723 	ld a,#SPACE 
      001551 CD 01 A6         [ 4] 3724 	call putc 
      001554 1E 03            [ 2] 3725 	ldw x,(XSAVE,sp)
      001556 1C 00 02         [ 2] 3726 	addw x,#2 
      001559 CC 14 C1         [ 2] 3727 	jp 1$
      00155C A1 31            [ 1] 3728 8$: cp a,#TK_GT 
      00155E 2B 1A            [ 1] 3729 	jrmi 9$
      001560 A1 35            [ 1] 3730 	cp a,#TK_NE 
      001562 22 16            [ 1] 3731 	jrugt 9$
      001564 A0 31            [ 1] 3732 	sub a,#TK_GT  
      001566 48               [ 1] 3733 	sll a 
      001567 90 5F            [ 1] 3734 	clrw y 
      001569 90 97            [ 1] 3735 	ld yl,a 
      00156B 72 A9 15 E9      [ 2] 3736 	addw y,#relop_str 
      00156F 90 FE            [ 2] 3737 	ldw y,(y)
      001571 93               [ 1] 3738 	ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001572 CD 01 B8         [ 4] 3739 	call puts 
      001575 1E 03            [ 2] 3740 	ldw x,(XSAVE,sp)
      001577 CC 14 C1         [ 2] 3741 	jp 1$
      00157A A1 10            [ 1] 3742 9$: cp a,#TK_PLUS 
      00157C 26 04            [ 1] 3743 	jrne 10$
      00157E A6 2B            [ 1] 3744 	ld a,#'+
      001580 20 46            [ 2] 3745 	jra 80$ 
      001582 A1 11            [ 1] 3746 10$: cp a,#TK_MINUS
      001584 26 04            [ 1] 3747 	jrne 11$
      001586 A6 2D            [ 1] 3748 	ld a,#'-
      001588 20 3E            [ 2] 3749 	jra 80$
      00158A A1 20            [ 1] 3750 11$: cp a,#TK_MULT 
      00158C 2B 0E            [ 1] 3751 	jrmi 12$
      00158E A1 22            [ 1] 3752 	cp a,#TK_MOD 
      001590 22 0A            [ 1] 3753 	jrugt 12$
      001592 A0 20            [ 1] 3754 	sub a,#0x20
      001594 5F               [ 1] 3755 	clrw x 
      001595 97               [ 1] 3756 	ld xl,a 
      001596 1C 15 E6         [ 2] 3757 	addw x,#mul_char 
      001599 F6               [ 1] 3758 	ld a,(x)
      00159A 20 2C            [ 2] 3759 	jra 80$ 
      00159C A1 0B            [ 1] 3760 12$: cp a,#TK_LPAREN 
      00159E 2B 0E            [ 1] 3761 	jrmi 13$
      0015A0 A1 0E            [ 1] 3762 	cp a,#TK_SHARP 
      0015A2 22 0A            [ 1] 3763 	jrugt 13$
      0015A4 A0 0B            [ 1] 3764 	sub a,#TK_LPAREN
      0015A6 5F               [ 1] 3765 	clrw x 
      0015A7 97               [ 1] 3766 	ld xl,a 
      0015A8 1C 15 E2         [ 2] 3767 	addw x,#single_char 
      0015AB F6               [ 1] 3768 	ld a,(x)
      0015AC 20 1A            [ 2] 3769 	jra 80$
      0015AE A1 03            [ 1] 3770 13$: cp a,#TK_CHAR 
      0015B0 26 14            [ 1] 3771 	jrne 14$
      0015B2 A6 5C            [ 1] 3772 	ld a,#'\
      0015B4 CD 01 A6         [ 4] 3773 	call putc 
      0015B7 1E 03            [ 2] 3774 	ldw x,(XSAVE,sp)
      0015B9 72 D6 00 11      [ 4] 3775 	ld a,([ptr16],x)
      0015BD 5C               [ 1] 3776 	incw x 
      0015BE 1F 03            [ 2] 3777 	ldw (XSAVE,sp),x 
      0015C0 CD 01 A6         [ 4] 3778 	call putc 
      0015C3 CC 14 C1         [ 2] 3779 	jp 1$ 
      0015C6 A6 3A            [ 1] 3780 14$: ld a,#':
      0015C8 CD 01 A6         [ 4] 3781 80$: call putc 
      0015CB 1E 03            [ 2] 3782 	ldw x,(XSAVE,sp)
      0015CD CC 14 C1         [ 2] 3783 	jp 1$ 
      0015D0                       3784 90$: 
      0015D0 A6 0D            [ 1] 3785 	ld a,#CR 
      0015D2 CD 01 A6         [ 4] 3786 	call putc
      0015D5 7B 02            [ 1] 3787 	ld a,(WIDTH_SAV,sp) 
      0015D7 C7 00 20         [ 1] 3788 	ld tab_width,a 
      0015DA 7B 01            [ 1] 3789 	ld a,(BASE_SAV,sp) 
      0015DC C7 00 06         [ 1] 3790 	ld base,a
      0015DF                       3791 	_drop VSIZE 
      0015DF 5B 05            [ 2]    1     addw sp,#VSIZE 
      0015E1 81               [ 4] 3792 	ret 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015E2 28 29 2C 23           3793 single_char: .byte '(',')',',','#'
      0015E6 2A 2F 25              3794 mul_char: .byte '*','/','%'
      0015E9 15 F5 15 F7 15 F9 15  3795 relop_str: .word gt,equal,ge,lt,le,ne 
             FC 15 FE 16 01
      0015F5 3E 00                 3796 gt: .asciz ">"
      0015F7 3D 00                 3797 equal: .asciz "="
      0015F9 3E 3D 00              3798 ge: .asciz ">="
      0015FC 3C 00                 3799 lt: .asciz "<"
      0015FE 3C 3D 00              3800 le: .asciz "<="
      001601 3C 3E 00              3801 ne:  .asciz "<>"
                                   3802 
                                   3803 
                                   3804 ;---------------------------------
                                   3805 ; BASIC: PRINT|? arg_list 
                                   3806 ; print values from argument list
                                   3807 ;----------------------------------
                           000001  3808 	COMMA=1
                           000001  3809 	VSIZE=1
      001604                       3810 print:
      001604 4B 00            [ 1] 3811 push #0 ; local variable COMMA 
      001606                       3812 reset_comma:
      001606 0F 01            [ 1] 3813 	clr (COMMA,sp)
      001608                       3814 prt_loop:
      001608 CD 12 FB         [ 4] 3815 	call relation 
      00160B A1 01            [ 1] 3816 	cp a,#TK_COLON 
      00160D 27 5A            [ 1] 3817 	jreq print_exit   
      00160F A1 04            [ 1] 3818 	cp a,#TK_INTGR 
      001611 26 05            [ 1] 3819 	jrne 0$ 
      001613 CD 09 8D         [ 4] 3820 	call print_int 
      001616 20 EE            [ 2] 3821 	jra reset_comma
      001618                       3822 0$: 	
      001618 CD 07 F4         [ 4] 3823 	call next_token
      00161B A1 00            [ 1] 3824 	cp a,#TK_NONE 
      00161D 27 4A            [ 1] 3825 	jreq print_exit 
      00161F A1 0A            [ 1] 3826 1$:	cp a,#TK_QSTR
      001621 26 0E            [ 1] 3827 	jrne 2$   
      001623 CD 01 B8         [ 4] 3828 	call puts
      001626 5C               [ 1] 3829 	incw x 
      001627 72 B0 00 04      [ 2] 3830 	subw x,basicptr 
      00162B 9F               [ 1] 3831 	ld a,xl 
      00162C C7 00 01         [ 1] 3832 	ld in,a  
      00162F 20 D5            [ 2] 3833 	jra reset_comma
      001631 A1 03            [ 1] 3834 2$: cp a,#TK_CHAR 
      001633 26 06            [ 1] 3835 	jrne 3$
      001635 9F               [ 1] 3836 	ld a,xl 
      001636 CD 01 A6         [ 4] 3837 	call putc 
      001639 20 CB            [ 2] 3838 	jra reset_comma 
      00163B                       3839 3$: 	
      00163B A1 08            [ 1] 3840 	cp a,#TK_CFUNC 
      00163D 26 07            [ 1] 3841 	jrne 4$ 
      00163F FD               [ 4] 3842 	call (x)
      001640 9F               [ 1] 3843 	ld a,xl 
      001641 CD 01 A6         [ 4] 3844 	call putc
      001644 20 C0            [ 2] 3845 	jra reset_comma 
      001646                       3846 4$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001646 A1 0D            [ 1] 3847 	cp a,#TK_COMMA 
      001648 26 05            [ 1] 3848 	jrne 5$
      00164A 03 01            [ 1] 3849 	cpl (COMMA,sp) 
      00164C CC 16 08         [ 2] 3850 	jp prt_loop   
      00164F                       3851 5$: 
      00164F A1 0E            [ 1] 3852 	cp a,#TK_SHARP
      001651 26 13            [ 1] 3853 	jrne 7$
      001653 CD 07 F4         [ 4] 3854 	call next_token
      001656 A1 04            [ 1] 3855 	cp a,#TK_INTGR 
      001658 27 03            [ 1] 3856 	jreq 6$
      00165A CC 07 14         [ 2] 3857 	jp syntax_error 
      00165D                       3858 6$:
      00165D 9F               [ 1] 3859 	ld a,xl 
      00165E A4 0F            [ 1] 3860 	and a,#15 
      001660 C7 00 20         [ 1] 3861 	ld tab_width,a 
      001663 CC 16 06         [ 2] 3862 	jp reset_comma 
      001666                       3863 7$:	
      001666 CD 0F 80         [ 4] 3864 	call unget_token
      001669                       3865 print_exit:
      001669 0D 01            [ 1] 3866 	tnz (COMMA,sp)
      00166B 26 05            [ 1] 3867 	jrne 9$
      00166D A6 0D            [ 1] 3868 	ld a,#CR 
      00166F CD 01 A6         [ 4] 3869     call putc 
      001672                       3870 9$:	_drop VSIZE 
      001672 5B 01            [ 2]    1     addw sp,#VSIZE 
      001674 81               [ 4] 3871 	ret 
                                   3872 
                                   3873 ;----------------------
                                   3874 ; 'save_context' and
                                   3875 ; 'rest_context' must be 
                                   3876 ; called at the same 
                                   3877 ; call stack depth 
                                   3878 ; i.e. SP must have the 
                                   3879 ; save value at  
                                   3880 ; entry point of both 
                                   3881 ; routine. 
                                   3882 ;---------------------
                           000006  3883 	CTXT_SIZE=6 ; size of saved data 
                                   3884 ;--------------------
                                   3885 ; save current BASIC
                                   3886 ; interpreter context 
                                   3887 ; on cstack 
                                   3888 ;--------------------
      001675                       3889 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001675                       3890 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001675                       3891 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      001675                       3892 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      001675                       3893 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      001675                       3894 save_context:
      001675 CE 00 04         [ 2] 3895 	ldw x,basicptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001678 1F 03            [ 2] 3896 	ldw (BPTR,sp),x
      00167A C6 00 01         [ 1] 3897 	ld a,in 
      00167D 6B 07            [ 1] 3898 	ld (IN,sp),a
      00167F C6 00 03         [ 1] 3899 	ld a,count 
      001682 6B 08            [ 1] 3900 	ld (CNT,sp),a  
      001684 81               [ 4] 3901 	ret
                                   3902 
                                   3903 ;-----------------------
                                   3904 ; restore previously saved 
                                   3905 ; BASIC interpreter context 
                                   3906 ; from cstack 
                                   3907 ;-------------------------
      001685                       3908 rest_context:
      001685 1E 03            [ 2] 3909 	ldw x,(BPTR,sp)
      001687 CF 00 04         [ 2] 3910 	ldw basicptr,x 
      00168A 7B 07            [ 1] 3911 	ld a,(IN,sp)
      00168C C7 00 01         [ 1] 3912 	ld in,a
      00168F 7B 08            [ 1] 3913 	ld a,(CNT,sp)
      001691 C7 00 03         [ 1] 3914 	ld count,a  
      001694 81               [ 4] 3915 	ret
                                   3916 
                                   3917 ;------------------------------------------
                                   3918 ; BASIC: INPUT [string],var[,[string],var]
                                   3919 ; input value in variables 
                                   3920 ; [string] optionally can be used as prompt 
                                   3921 ;-----------------------------------------
                           000001  3922 	CX_BPTR=1
                           000003  3923 	CX_LNO=3
                           000004  3924 	CX_IN=4
                           000005  3925 	CX_CNT=5
                           000006  3926 	SKIP=6
                           000007  3927 	VSIZE=7
      001695                       3928 input_var:
      001695 72 00 00 1F 05   [ 2] 3929 	btjt flags,#FRUN,1$ 
      00169A A6 06            [ 1] 3930 	ld a,#ERR_RUN_ONLY 
      00169C CC 07 16         [ 2] 3931 	jp tb_error 
      00169F                       3932 1$:	_vars VSIZE 
      00169F 52 07            [ 2]    1     sub sp,#VSIZE 
      0016A1                       3933 input_loop:
      0016A1 0F 06            [ 1] 3934 	clr (SKIP,sp)
      0016A3 CD 07 F4         [ 4] 3935 	call next_token 
      0016A6 A1 00            [ 1] 3936 	cp a,#TK_NONE 
      0016A8 27 5C            [ 1] 3937 	jreq input_exit 
      0016AA A1 0A            [ 1] 3938 	cp a,#TK_QSTR 
      0016AC 26 08            [ 1] 3939 	jrne 1$ 
      0016AE CD 01 B8         [ 4] 3940 	call puts 
      0016B1 03 06            [ 1] 3941 	cpl (SKIP,sp)
      0016B3 CD 07 F4         [ 4] 3942 	call next_token 
      0016B6 A1 05            [ 1] 3943 1$: cp a,#TK_VAR  
      0016B8 27 03            [ 1] 3944 	jreq 2$ 
      0016BA CC 07 14         [ 2] 3945 	jp syntax_error
      0016BD CD 0F 86         [ 4] 3946 2$:	call dpush 
      0016C0 0D 06            [ 1] 3947 	tnz (SKIP,sp)
      0016C2 26 0F            [ 1] 3948 	jrne 21$ 
      0016C4 A6 3A            [ 1] 3949 	ld a,#':
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016C6 C7 17 19         [ 1] 3950 	ld pad+1,a 
      0016C9 72 5F 17 1A      [ 1] 3951 	clr pad+2
      0016CD AE 17 18         [ 2] 3952 	ldw x,#pad 
      0016D0 CD 01 B8         [ 4] 3953 	call puts   
      0016D3                       3954 21$:
      0016D3 CD 16 75         [ 4] 3955 	call save_context 
      0016D6 AE 16 C8         [ 2] 3956 	ldw x,#tib 
      0016D9 CF 00 04         [ 2] 3957 	ldw basicptr,x  
      0016DC 72 5F 00 03      [ 1] 3958 	clr count  
      0016E0 CD 0A 7B         [ 4] 3959 	call readln 
      0016E3 72 5F 00 01      [ 1] 3960 	clr in 
      0016E7 CD 12 FB         [ 4] 3961 	call relation 
      0016EA A1 04            [ 1] 3962 	cp a,#TK_INTGR
      0016EC 27 03            [ 1] 3963 	jreq 3$ 
      0016EE CC 07 14         [ 2] 3964 	jp syntax_error
      0016F1 CD 0F 86         [ 4] 3965 3$: call dpush 
      0016F4 CD 0F ED         [ 4] 3966 	call store 
      0016F7 CD 16 85         [ 4] 3967 	call rest_context
      0016FA CD 07 F4         [ 4] 3968 	call next_token 
      0016FD A1 0D            [ 1] 3969 	cp a,#TK_COMMA 
      0016FF 26 02            [ 1] 3970 	jrne 4$
      001701 20 9E            [ 2] 3971 	jra input_loop 
      001703 CD 0F 80         [ 4] 3972 4$:	call unget_token 
      001706                       3973 input_exit:
      001706                       3974 	_drop VSIZE 
      001706 5B 07            [ 2]    1     addw sp,#VSIZE 
      001708 81               [ 4] 3975 	ret 
                                   3976 
                                   3977 
                                   3978 ;---------------------
                                   3979 ; BASIC: REMARK | ' 
                                   3980 ; skip comment to end of line 
                                   3981 ;---------------------- 
      001709                       3982 rem:
      001709 55 00 01 00 03   [ 1] 3983  	mov count,in 
      00170E 81               [ 4] 3984 	ret 
                                   3985 
                                   3986 ;---------------------
                                   3987 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3988 ; read in loop 'addr'  
                                   3989 ; apply & 'mask' to value 
                                   3990 ; loop while result==0.  
                                   3991 ; if 'xor_mask' given 
                                   3992 ; apply ^ in second  
                                   3993 ; loop while result==0 
                                   3994 ;---------------------
                           000001  3995 	XMASK=1 
                           000002  3996 	MASK=2
                           000003  3997 	ADDR=3
                           000004  3998 	VSIZE=4
      00170F                       3999 wait: 
      00170F                       4000 	_vars VSIZE
      00170F 52 04            [ 2]    1     sub sp,#VSIZE 
      001711 0F 01            [ 1] 4001 	clr (XMASK,sp) 
      001713 CD 11 B3         [ 4] 4002 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001716 A1 02            [ 1] 4003 	cp a,#2
      001718 24 03            [ 1] 4004 	jruge 0$
      00171A CC 07 14         [ 2] 4005 	jp syntax_error 
      00171D A1 03            [ 1] 4006 0$:	cp a,#3
      00171F 25 06            [ 1] 4007 	jrult 1$
      001721 CD 0F 93         [ 4] 4008 	call dpop 
      001724 9F               [ 1] 4009 	ld a,xl
      001725 6B 01            [ 1] 4010 	ld (XMASK,sp),a 
      001727 CD 0F 93         [ 4] 4011 1$: call dpop ; mask 
      00172A 9F               [ 1] 4012 	ld a,xl 
      00172B 6B 02            [ 1] 4013 	ld (MASK,sp),a 
      00172D CD 0F 93         [ 4] 4014 	call dpop ; address 
      001730 F6               [ 1] 4015 2$:	ld a,(x)
      001731 14 02            [ 1] 4016 	and a,(MASK,sp)
      001733 18 01            [ 1] 4017 	xor a,(XMASK,sp)
      001735 27 F9            [ 1] 4018 	jreq 2$ 
      001737                       4019 	_drop VSIZE 
      001737 5B 04            [ 2]    1     addw sp,#VSIZE 
      001739 81               [ 4] 4020 	ret 
                                   4021 
                                   4022 ;---------------------
                                   4023 ; BASIC: BSET addr,mask
                                   4024 ; set bits at 'addr' corresponding 
                                   4025 ; to those of 'mask' that are at 1.
                                   4026 ; arguments:
                                   4027 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4028 ;   mask        mask|addr
                                   4029 ; output:
                                   4030 ;	none 
                                   4031 ;--------------------------
      00173A                       4032 bit_set:
      00173A CD 11 B3         [ 4] 4033 	call arg_list 
      00173D A1 02            [ 1] 4034 	cp a,#2	 
      00173F 27 03            [ 1] 4035 	jreq 1$ 
      001741 CC 07 14         [ 2] 4036 	jp syntax_error
      001744                       4037 1$: 
      001744 CD 0F 93         [ 4] 4038 	call dpop ; mask 
      001747 9F               [ 1] 4039 	ld a,xl 
      001748 CD 0F 93         [ 4] 4040 	call dpop ; addr  
      00174B FA               [ 1] 4041 	or a,(x)
      00174C F7               [ 1] 4042 	ld (x),a
      00174D 81               [ 4] 4043 	ret 
                                   4044 
                                   4045 ;---------------------
                                   4046 ; BASIC: BRES addr,mask
                                   4047 ; reset bits at 'addr' corresponding 
                                   4048 ; to those of 'mask' that are at 1.
                                   4049 ; arguments:
                                   4050 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4051 ;   mask	    ~mask&*addr  
                                   4052 ; output:
                                   4053 ;	none 
                                   4054 ;--------------------------
      00174E                       4055 bit_reset:
      00174E CD 11 B3         [ 4] 4056 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001751 A1 02            [ 1] 4057 	cp a,#2  
      001753 27 03            [ 1] 4058 	jreq 1$ 
      001755 CC 07 14         [ 2] 4059 	jp syntax_error
      001758                       4060 1$: 
      001758 CD 0F 93         [ 4] 4061 	call dpop ; mask 
      00175B 9F               [ 1] 4062 	ld a,xl 
      00175C 43               [ 1] 4063 	cpl a 
      00175D CD 0F 93         [ 4] 4064 	call dpop ; addr  
      001760 F4               [ 1] 4065 	and a,(x)
      001761 F7               [ 1] 4066 	ld (x),a 
      001762 81               [ 4] 4067 	ret 
                                   4068 
                                   4069 ;---------------------
                                   4070 ; BASIC: BRES addr,mask
                                   4071 ; toggle bits at 'addr' corresponding 
                                   4072 ; to those of 'mask' that are at 1.
                                   4073 ; arguments:
                                   4074 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4075 ;   mask	    mask^*addr  
                                   4076 ; output:
                                   4077 ;	none 
                                   4078 ;--------------------------
      001763                       4079 bit_toggle:
      001763 CD 11 B3         [ 4] 4080 	call arg_list 
      001766 A1 02            [ 1] 4081 	cp a,#2 
      001768 27 03            [ 1] 4082 	jreq 1$ 
      00176A CC 07 14         [ 2] 4083 	jp syntax_error
      00176D CD 0F 93         [ 4] 4084 1$: call dpop ; mask 
      001770 9F               [ 1] 4085 	ld a,xl 
      001771 CD 0F 93         [ 4] 4086 	call dpop ; addr  
      001774 F8               [ 1] 4087 	xor a,(x)
      001775 F7               [ 1] 4088 	ld (x),a 
      001776 81               [ 4] 4089 	ret 
                                   4090 
                                   4091 
                                   4092 ;---------------------
                                   4093 ; BASIC: BTEST(addr,bit)
                                   4094 ; return bit value at 'addr' 
                                   4095 ; bit is in range {0..7}.
                                   4096 ; arguments:
                                   4097 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4098 ;   bit 	    bit position {0..7}  
                                   4099 ; output:
                                   4100 ;	none 
                                   4101 ;--------------------------
      001777                       4102 bit_test:
      001777 CD 11 D7         [ 4] 4103 	call func_args 
      00177A A1 02            [ 1] 4104 	cp a,#2
      00177C 27 03            [ 1] 4105 	jreq 0$
      00177E CC 07 14         [ 2] 4106 	jp syntax_error
      001781                       4107 0$:	
      001781 CD 0F 93         [ 4] 4108 	call dpop 
      001784 9F               [ 1] 4109 	ld a,xl 
      001785 A4 07            [ 1] 4110 	and a,#7
      001787 88               [ 1] 4111 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001788 A6 01            [ 1] 4112 	ld a,#1 
      00178A 0D 01            [ 1] 4113 1$: tnz (1,sp)
      00178C 27 05            [ 1] 4114 	jreq 2$
      00178E 48               [ 1] 4115 	sll a 
      00178F 0A 01            [ 1] 4116 	dec (1,sp)
      001791 20 F7            [ 2] 4117 	jra 1$
      001793 CD 0F 93         [ 4] 4118 2$: call dpop 
      001796 F4               [ 1] 4119 	and a,(x)
      001797 27 02            [ 1] 4120 	jreq 3$
      001799 A6 01            [ 1] 4121 	ld a,#1 
      00179B 5F               [ 1] 4122 3$:	clrw x 
      00179C 97               [ 1] 4123 	ld xl,a 
      00179D A6 04            [ 1] 4124 	ld a,#TK_INTGR
      00179F                       4125 	_drop 1 
      00179F 5B 01            [ 2]    1     addw sp,#1 
      0017A1 81               [ 4] 4126 	ret
                                   4127 
                                   4128 
                                   4129 ;--------------------
                                   4130 ; BASIC: POKE addr,byte
                                   4131 ; put a byte at addr 
                                   4132 ;--------------------
      0017A2                       4133 poke:
      0017A2 CD 11 B3         [ 4] 4134 	call arg_list 
      0017A5 A1 02            [ 1] 4135 	cp a,#2
      0017A7 27 03            [ 1] 4136 	jreq 1$
      0017A9 CC 07 14         [ 2] 4137 	jp syntax_error
      0017AC                       4138 1$:	
      0017AC CD 0F 93         [ 4] 4139 	call dpop 
      0017AF 9F               [ 1] 4140     ld a,xl 
      0017B0 CD 0F 93         [ 4] 4141 	call dpop 
      0017B3 F7               [ 1] 4142 	ld (x),a 
      0017B4 81               [ 4] 4143 	ret 
                                   4144 
                                   4145 ;-----------------------
                                   4146 ; BASIC: PEEK(addr)
                                   4147 ; get the byte at addr 
                                   4148 ; input:
                                   4149 ;	none 
                                   4150 ; output:
                                   4151 ;	X 		value 
                                   4152 ;-----------------------
      0017B5                       4153 peek:
      0017B5 CD 11 D7         [ 4] 4154 	call func_args
      0017B8 A1 01            [ 1] 4155 	cp a,#1
      0017BA 27 03            [ 1] 4156 	jreq 1$
      0017BC CC 07 14         [ 2] 4157 	jp syntax_error
      0017BF CD 0F 93         [ 4] 4158 1$:	call dpop 
      0017C2 F6               [ 1] 4159 	ld a,(x)
      0017C3 5F               [ 1] 4160 	clrw x 
      0017C4 97               [ 1] 4161 	ld xl,a 
      0017C5 A6 04            [ 1] 4162 	ld a,#TK_INTGR
      0017C7 81               [ 4] 4163 	ret 
                                   4164 
      0017C8                       4165 if: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0017C8 CD 12 FB         [ 4] 4166 	call relation 
      0017CB A1 04            [ 1] 4167 	cp a,#TK_INTGR
      0017CD 27 03            [ 1] 4168 	jreq 1$ 
      0017CF CC 07 14         [ 2] 4169 	jp syntax_error
      0017D2 4F               [ 1] 4170 1$:	clr a 
      0017D3 5D               [ 2] 4171 	tnzw x 
      0017D4 26 05            [ 1] 4172 	jrne 9$  
                                   4173 ;skip to next line
      0017D6 55 00 03 00 01   [ 1] 4174 	mov in,count
      0017DB 81               [ 4] 4175 9$:	ret 
                                   4176 
                                   4177 ;------------------------
                                   4178 ; BASIC: FOR var=expr 
                                   4179 ; set variable to expression 
                                   4180 ; leave variable address 
                                   4181 ; on dstack and set
                                   4182 ; FFOR bit in 'flags'
                                   4183 ;-----------------
                           000001  4184 	RETL1=1
                           000003  4185 	INW=3
                           000005  4186 	BPTR=5
      0017DC                       4187 for: ; { -- var_addr }
      0017DC A6 05            [ 1] 4188 	ld a,#TK_VAR 
      0017DE CD 11 A6         [ 4] 4189 	call expect
      0017E1 CD 0F 86         [ 4] 4190 	call dpush 
      0017E4 CD 13 A2         [ 4] 4191 	call let02 
      0017E7 72 14 00 1F      [ 1] 4192 	bset flags,#FFOR 
                                   4193 ; open space on cstack for BPTR and INW 
      0017EB 85               [ 2] 4194 	popw x ; call return address 
      0017EC                       4195 	_vars 4
      0017EC 52 04            [ 2]    1     sub sp,#4 
      0017EE 89               [ 2] 4196 	pushw x  ; RETL1 
      0017EF 5F               [ 1] 4197 	clrw x 
      0017F0 1F 05            [ 2] 4198 	ldw (BPTR,sp),x 
      0017F2 1F 03            [ 2] 4199 	ldw (INW,sp),x 
      0017F4 CD 07 F4         [ 4] 4200 	call next_token 
      0017F7 A1 06            [ 1] 4201 	cp a,#TK_CMD 
      0017F9 27 03            [ 1] 4202 	jreq 1$
      0017FB CC 07 14         [ 2] 4203 	jp syntax_error
      0017FE                       4204 1$:  
      0017FE A3 18 06         [ 2] 4205 	cpw x,#to 
      001801 27 03            [ 1] 4206 	jreq to
      001803 CC 07 14         [ 2] 4207 	jp syntax_error 
                                   4208 
                                   4209 ;-----------------------------------
                                   4210 ; BASIC: TO expr 
                                   4211 ; second part of FOR loop initilization
                                   4212 ; leave limit on dstack and set 
                                   4213 ; FTO bit in 'flags'
                                   4214 ;-----------------------------------
      001806                       4215 to: ; { var_addr -- var_addr limit step }
      001806 72 04 00 1F 03   [ 2] 4216 	btjt flags,#FFOR,1$
      00180B CC 07 14         [ 2] 4217 	jp syntax_error
      00180E CD 12 FB         [ 4] 4218 1$: call relation  
      001811 A1 04            [ 1] 4219 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001813 27 03            [ 1] 4220 	jreq 2$ 
      001815 CC 07 14         [ 2] 4221 	jp syntax_error
      001818                       4222 2$: 
      001818 CD 0F 86         [ 4] 4223     call dpush ; limit
      00181B CE 00 00         [ 2] 4224 	ldw x,in.w 
      00181E CD 07 F4         [ 4] 4225 	call next_token
      001821 A1 00            [ 1] 4226 	cp a,#TK_NONE  
      001823 27 0C            [ 1] 4227 	jreq 4$ 
      001825 A1 06            [ 1] 4228 	cp a,#TK_CMD
      001827 26 05            [ 1] 4229 	jrne 3$
      001829 A3 18 36         [ 2] 4230 	cpw x,#step 
      00182C 27 08            [ 1] 4231 	jreq step
      00182E                       4232 3$:	
      00182E CD 0F 80         [ 4] 4233 	call unget_token   	 
      001831                       4234 4$:	
      001831 AE 00 01         [ 2] 4235 	ldw x,#1   ; default step  
      001834 20 12            [ 2] 4236 	jra store_loop_addr 
                                   4237 
                                   4238 
                                   4239 ;----------------------------------
                                   4240 ; BASIC: STEP expr 
                                   4241 ; optional third par of FOR loop
                                   4242 ; initialization. 	
                                   4243 ;------------------------------------
      001836                       4244 step: ; {var limit -- var limit step}
      001836 72 04 00 1F 03   [ 2] 4245 	btjt flags,#FFOR,1$
      00183B CC 07 14         [ 2] 4246 	jp syntax_error
      00183E CD 12 FB         [ 4] 4247 1$: call relation
      001841 A1 04            [ 1] 4248 	cp a,#TK_INTGR
      001843 27 03            [ 1] 4249 	jreq store_loop_addr  
      001845 CC 07 14         [ 2] 4250 	jp syntax_error
                                   4251 ; leave loop back entry point on cstack 
                                   4252 ; cstack is 2 call deep from interp_loop
      001848                       4253 store_loop_addr:
      001848 CD 0F 86         [ 4] 4254 	call dpush 
      00184B CE 00 04         [ 2] 4255 	ldw x,basicptr  
      00184E 1F 05            [ 2] 4256 	ldw (BPTR,sp),x 
      001850 CE 00 00         [ 2] 4257 	ldw x,in.w 
      001853 1F 03            [ 2] 4258 	ldw (INW,sp),x   
      001855 72 15 00 1F      [ 1] 4259 	bres flags,#FFOR 
      001859 72 5C 00 1C      [ 1] 4260 	inc loop_depth  
      00185D 81               [ 4] 4261 	ret 
                                   4262 
                                   4263 ;--------------------------------
                                   4264 ; BASIC: NEXT var 
                                   4265 ; FOR loop control 
                                   4266 ; increment variable with step 
                                   4267 ; and compare with limit 
                                   4268 ; loop if threshold not crossed.
                                   4269 ; else clean both stacks. 
                                   4270 ; and decrement 'loop_depth' 
                                   4271 ;--------------------------------
      00185E                       4272 next: ; {var limit step -- [var limit step ] }
      00185E 72 5D 00 1C      [ 1] 4273 	tnz loop_depth 
      001862 26 03            [ 1] 4274 	jrne 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001864 CC 07 14         [ 2] 4275 	jp syntax_error 
      001867                       4276 1$: 
      001867 A6 05            [ 1] 4277 	ld a,#TK_VAR 
      001869 CD 11 A6         [ 4] 4278 	call expect
                                   4279 ; check for good variable after NEXT 	 
      00186C 90 93            [ 1] 4280 	ldw y,x 
      00186E AE 00 04         [ 2] 4281 	ldw x,#4  
      001871 72 D3 00 16      [ 4] 4282 	cpw y,([dstkptr],x) ; compare variables address 
      001875 27 03            [ 1] 4283 	jreq 2$  
      001877 CC 07 14         [ 2] 4284 	jp syntax_error ; not the good one 
      00187A                       4285 2$: ; increment variable 
      00187A 93               [ 1] 4286 	ldw x,y
      00187B FE               [ 2] 4287 	ldw x,(x)  ; get var value 
      00187C CF 00 08         [ 2] 4288 	ldw acc16,x 
      00187F 72 CE 00 16      [ 5] 4289 	ldw x,[dstkptr] ; step
      001883 72 BB 00 08      [ 2] 4290 	addw x,acc16 ; var+step 
      001887 90 FF            [ 2] 4291 	ldw (y),x ; save var new value 
                                   4292 ; compare with limit 
      001889 90 93            [ 1] 4293 	ldw y,x 
      00188B 72 CE 00 16      [ 5] 4294 	ldw x,[dstkptr] ; step in x 
      00188F 5D               [ 2] 4295 	tnzw x  
      001890 2A 0B            [ 1] 4296 	jrpl 4$ ; positive step 
                                   4297 ;negative step 
      001892 AE 00 02         [ 2] 4298 	ldw x,#2
      001895 72 D3 00 16      [ 4] 4299 	cpw y,([dstkptr],x)
      001899 2F 20            [ 1] 4300 	jrslt loop_done
      00189B 20 09            [ 2] 4301 	jra loop_back 
      00189D                       4302 4$: ; positive step
      00189D AE 00 02         [ 2] 4303 	ldw x,#2 
      0018A0 72 D3 00 16      [ 4] 4304 	cpw y,([dstkptr],x)
      0018A4 2C 15            [ 1] 4305 	jrsgt loop_done
      0018A6                       4306 loop_back:
      0018A6 1E 05            [ 2] 4307 	ldw x,(BPTR,sp)
      0018A8 CF 00 04         [ 2] 4308 	ldw basicptr,x 
      0018AB 72 01 00 1F 05   [ 2] 4309 	btjf flags,#FRUN,1$ 
      0018B0 E6 02            [ 1] 4310 	ld a,(2,x)
      0018B2 C7 00 03         [ 1] 4311 	ld count,a
      0018B5 1E 03            [ 2] 4312 1$:	ldw x,(INW,sp)
      0018B7 CF 00 00         [ 2] 4313 	ldw in.w,x 
      0018BA 81               [ 4] 4314 	ret 
      0018BB                       4315 loop_done:
                                   4316 	; remove var limit step on dstack 
      0018BB CE 00 16         [ 2] 4317 	ldw x,dstkptr 
      0018BE 1C 00 06         [ 2] 4318 	addw x,#3*CELL_SIZE
      0018C1 CF 00 16         [ 2] 4319 	ldw dstkptr,x 
                                   4320 	; remove 2 return address on cstack 
      0018C4 85               [ 2] 4321 	popw x
      0018C5                       4322 	_drop 4
      0018C5 5B 04            [ 2]    1     addw sp,#4 
      0018C7 89               [ 2] 4323 	pushw x 
      0018C8 72 5A 00 1C      [ 1] 4324 	dec loop_depth 
      0018CC 81               [ 4] 4325 	ret 
                                   4326 
                                   4327 
                                   4328 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4329 ; BASIC: GOTO line# 
                                   4330 ; jump to line# 
                                   4331 ; here cstack is 2 call deep from interp_loop 
                                   4332 ;------------------------
      0018CD                       4333 goto:
      0018CD 72 00 00 1F 06   [ 2] 4334 	btjt flags,#FRUN,0$ 
      0018D2 A6 06            [ 1] 4335 	ld a,#ERR_RUN_ONLY
      0018D4 CC 07 16         [ 2] 4336 	jp tb_error 
      0018D7 81               [ 4] 4337 	ret 
      0018D8 20 23            [ 2] 4338 0$:	jra go_common
                                   4339 
                                   4340 ;--------------------
                                   4341 ; BASIC: GOSUB line#
                                   4342 ; basic subroutine call
                                   4343 ; actual line# and basicptr 
                                   4344 ; are saved on cstack
                                   4345 ; here cstack is 2 call deep from interp_loop 
                                   4346 ;--------------------
                           000003  4347 	GOS_RET=3
      0018DA                       4348 gosub:
      0018DA 72 00 00 1F 06   [ 2] 4349 	btjt flags,#FRUN,0$ 
      0018DF A6 06            [ 1] 4350 	ld a,#ERR_RUN_ONLY
      0018E1 CC 07 16         [ 2] 4351 	jp tb_error 
      0018E4 81               [ 4] 4352 	ret 
      0018E5 85               [ 2] 4353 0$:	popw x 
      0018E6 52 02            [ 2] 4354 	sub sp,#2 
      0018E8 89               [ 2] 4355 	pushw x 
      0018E9 CE 00 04         [ 2] 4356 	ldw x,basicptr
      0018EC E6 02            [ 1] 4357 	ld a,(2,x)
      0018EE AB 03            [ 1] 4358 	add a,#3 
      0018F0 C7 00 09         [ 1] 4359 	ld acc8,a 
      0018F3 72 5F 00 08      [ 1] 4360 	clr acc16 
      0018F7 72 BB 00 08      [ 2] 4361 	addw x,acc16
      0018FB 1F 03            [ 2] 4362 	ldw (GOS_RET,sp),x 
      0018FD                       4363 go_common: 
      0018FD CD 12 FB         [ 4] 4364 	call relation 
      001900 A1 04            [ 1] 4365 	cp a,#TK_INTGR
      001902 27 03            [ 1] 4366 	jreq 1$ 
      001904 CC 07 14         [ 2] 4367 	jp syntax_error
      001907                       4368 1$: 
      001907 CD 02 E8         [ 4] 4369 	call search_lineno  
      00190A 5D               [ 2] 4370 	tnzw x 
      00190B 26 05            [ 1] 4371 	jrne 2$ 
      00190D A6 05            [ 1] 4372 	ld a,#ERR_NO_LINE 
      00190F CC 07 16         [ 2] 4373 	jp tb_error 
      001912                       4374 2$: 
      001912 CF 00 04         [ 2] 4375 	ldw basicptr,x 
      001915 E6 02            [ 1] 4376 	ld a,(2,x)
      001917 C7 00 03         [ 1] 4377 	ld count,a 
      00191A 35 03 00 01      [ 1] 4378 	mov in,#3 
      00191E 81               [ 4] 4379 	ret 
                                   4380 
                                   4381 ;------------------------
                                   4382 ; BASIC: RETURN 
                                   4383 ; exit from a subroutine 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4384 ; cstack is 2 level deep from interp_loop 
                                   4385 ;------------------------
      00191F                       4386 return:
      00191F 72 00 00 1F 05   [ 2] 4387 	btjt flags,#FRUN,0$ 
      001924 A6 06            [ 1] 4388 	ld a,#ERR_RUN_ONLY
      001926 CC 07 16         [ 2] 4389 	jp tb_error 
      001929                       4390 0$:	
      001929 1E 03            [ 2] 4391 	ldw x,(GOS_RET,sp) 
      00192B CF 00 04         [ 2] 4392 	ldw basicptr,x 
      00192E E6 02            [ 1] 4393 	ld a,(2,x)
      001930 AB 03            [ 1] 4394 	add a,#3 
      001932 C7 00 03         [ 1] 4395 	ld count,a 
      001935 35 03 00 01      [ 1] 4396 	mov in,#3
      001939 4F               [ 1] 4397 	clr a 
      00193A 85               [ 2] 4398 	popw x 
      00193B                       4399 	_drop 2
      00193B 5B 02            [ 2]    1     addw sp,#2 
      00193D 89               [ 2] 4400 	pushw x
      00193E 81               [ 4] 4401 	ret  
                                   4402 
                                   4403 
                                   4404 ;----------------------------------
                                   4405 ; BASIC: RUN
                                   4406 ; run BASIC program in RAM
                                   4407 ;----------------------------------- 
      00193F                       4408 run: 
      00193F 72 01 00 1F 02   [ 2] 4409 	btjf flags,#FRUN,0$  
      001944 4F               [ 1] 4410 	clr a 
      001945 81               [ 4] 4411 	ret
      001946                       4412 0$: 
      001946 72 09 00 1F 12   [ 2] 4413 	btjf flags,#FBREAK,1$
      00194B                       4414 	_drop 2 
      00194B 5B 02            [ 2]    1     addw sp,#2 
      00194D CD 16 85         [ 4] 4415 	call rest_context
      001950                       4416 	_drop CTXT_SIZE 
      001950 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      001952 72 19 00 1F      [ 1] 4417 	bres flags,#FBREAK 
      001956 72 10 00 1F      [ 1] 4418 	bset flags,#FRUN 
      00195A CC 07 C4         [ 2] 4419 	jp interp_loop 
      00195D CE 00 18         [ 2] 4420 1$:	ldw x,txtbgn
      001960 C3 00 1A         [ 2] 4421 	cpw x,txtend 
      001963 2B 02            [ 1] 4422 	jrmi 2$ 
      001965 4F               [ 1] 4423 	clr a 
      001966 81               [ 4] 4424 	ret 
      001967 CD 13 76         [ 4] 4425 2$: call ubound 
      00196A                       4426 	_drop 2 
      00196A 5B 02            [ 2]    1     addw sp,#2 
      00196C CE 00 18         [ 2] 4427 	ldw x,txtbgn 
      00196F CF 00 04         [ 2] 4428 	ldw basicptr,x 
      001972 E6 02            [ 1] 4429 	ld a,(2,x)
      001974 C7 00 03         [ 1] 4430 	ld count,a
      001977 35 03 00 01      [ 1] 4431 	mov in,#3	
      00197B 72 10 00 1F      [ 1] 4432 	bset flags,#FRUN 
      00197F CC 07 C4         [ 2] 4433 	jp interp_loop 
                                   4434 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4435 
                                   4436 ;----------------------
                                   4437 ; BASIC: STOP 
                                   4438 ; stop running program
                                   4439 ;---------------------- 
      001982                       4440 stop: 
                                   4441 ; clean dstack and cstack 
      001982 AE 17 FF         [ 2] 4442 	ldw x,#STACK_EMPTY 
      001985 94               [ 1] 4443 	ldw sp,x 
      001986 72 11 00 1F      [ 1] 4444 	bres flags,#FRUN 
      00198A 72 19 00 1F      [ 1] 4445 	bres flags,#FBREAK
      00198E CC 07 68         [ 2] 4446 	jp warm_start
                                   4447 
                                   4448 ;-----------------------
                                   4449 ; BASIC BEEP expr1,expr2
                                   4450 ; used MCU internal beeper 
                                   4451 ; to produce a sound
                                   4452 ; arguments:
                                   4453 ;    expr1   frequency  (expr1%32)
                                   4454 ;    expr2   duration msec.
                                   4455 ;---------------------------
      001991                       4456 beep:
      001991 CD 11 B3         [ 4] 4457 	call arg_list 
      001994 A1 02            [ 1] 4458 	cp a,#2 
      001996 27 03            [ 1] 4459 	jreq 1$
      001998 CC 07 14         [ 2] 4460 	jp syntax_error 
      00199B                       4461 1$: 
      00199B CE 00 16         [ 2] 4462 	ldw x,dstkptr 
      00199E EE 02            [ 2] 4463 	ldw x,(2,x);frequency 
      0019A0 A6 1F            [ 1] 4464 	ld a,#31
      0019A2 62               [ 2] 4465 	div x,a 
      0019A3 C7 50 F3         [ 1] 4466 	ld BEEP_CSR,a	
      0019A6 72 1A 50 F3      [ 1] 4467 	bset BEEP_CSR,#5 
      0019AA CD 0F 93         [ 4] 4468 	call dpop 
      0019AD CD 1E B1         [ 4] 4469 	call pause02 
      0019B0 CD 0F BA         [ 4] 4470 	call ddrop 
      0019B3 A6 1F            [ 1] 4471 	ld a,#0x1f
      0019B5 C7 50 F3         [ 1] 4472 	ld BEEP_CSR,a 
      0019B8 81               [ 4] 4473 	ret 
                                   4474 
                                   4475 ;-------------------------------
                                   4476 ; BASIC: PWRADC 0|1 [,divisor]  
                                   4477 ; disable/enanble ADC 
                                   4478 ;-------------------------------
      0019B9                       4479 power_adc:
      0019B9 CD 11 B3         [ 4] 4480 	call arg_list 
      0019BC A1 02            [ 1] 4481 	cp a,#2	
      0019BE 27 0D            [ 1] 4482 	jreq 1$
      0019C0 A1 01            [ 1] 4483 	cp a,#1 
      0019C2 27 03            [ 1] 4484 	jreq 0$ 
      0019C4 CC 07 14         [ 2] 4485 	jp syntax_error 
      0019C7 AE 00 00         [ 2] 4486 0$: ldw x,#0
      0019CA CD 0F 86         [ 4] 4487 	call dpush 
      0019CD AE 00 02         [ 2] 4488 1$: ldw x,#2
      0019D0 72 DE 00 16      [ 5] 4489 	ldw x,([dstkptr],x) ; on|off
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0019D4 5D               [ 2] 4490 	tnzw x 
      0019D5 27 1C            [ 1] 4491 	jreq 2$ 
      0019D7 72 CE 00 16      [ 5] 4492 	ldw x,[dstkptr] ; divisor 
      0019DB 9F               [ 1] 4493 	ld a,xl
      0019DC A4 07            [ 1] 4494 	and a,#7
      0019DE 4E               [ 1] 4495 	swap a 
      0019DF C7 54 01         [ 1] 4496 	ld ADC_CR1,a
      0019E2 72 16 50 CA      [ 1] 4497 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0019E6 72 10 54 01      [ 1] 4498 	bset ADC_CR1,#ADC_CR1_ADON 
      0019EA                       4499 	_usec_dly 7 
      0019EA AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0019ED 5A               [ 2]    2     decw x
      0019EE 9D               [ 1]    3     nop 
      0019EF 26 FA            [ 1]    4     jrne .-4
      0019F1 20 08            [ 2] 4500 	jra 3$
      0019F3 72 11 54 01      [ 1] 4501 2$: bres ADC_CR1,#ADC_CR1_ADON
      0019F7 72 17 50 CA      [ 1] 4502 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0019FB AE 00 02         [ 2] 4503 3$:	ldw x,#2
      0019FE CD 0F F7         [ 4] 4504 	call ddrop_n 
      001A01 81               [ 4] 4505 	ret
                                   4506 
                                   4507 ;-----------------------------
                                   4508 ; BASIC: RDADC(channel)
                                   4509 ; read adc channel {0..5}
                                   4510 ; output:
                                   4511 ;   A 		TK_INTGR 
                                   4512 ;   X 		value 
                                   4513 ;-----------------------------
      001A02                       4514 analog_read:
      001A02 CD 11 D7         [ 4] 4515 	call func_args 
      001A05 A1 01            [ 1] 4516 	cp a,#1 
      001A07 27 03            [ 1] 4517 	jreq 1$
      001A09 CC 07 14         [ 2] 4518 	jp syntax_error
      001A0C CD 0F 93         [ 4] 4519 1$: call dpop 
      001A0F A3 00 05         [ 2] 4520 	cpw x,#5 
      001A12 23 05            [ 2] 4521 	jrule 2$
      001A14 A6 0A            [ 1] 4522 	ld a,#ERR_BAD_VALUE
      001A16 CC 07 16         [ 2] 4523 	jp tb_error 
      001A19 9F               [ 1] 4524 2$: ld a,xl
      001A1A C7 00 09         [ 1] 4525 	ld acc8,a 
      001A1D A6 05            [ 1] 4526 	ld a,#5
      001A1F C0 00 09         [ 1] 4527 	sub a,acc8 
      001A22 C7 54 00         [ 1] 4528 	ld ADC_CSR,a
      001A25 72 16 54 02      [ 1] 4529 	bset ADC_CR2,#ADC_CR2_ALIGN
      001A29 72 10 54 01      [ 1] 4530 	bset ADC_CR1,#ADC_CR1_ADON
      001A2D 72 0F 54 00 FB   [ 2] 4531 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001A32 CE 54 04         [ 2] 4532 	ldw x,ADC_DRH
      001A35 A6 04            [ 1] 4533 	ld a,#TK_INTGR
      001A37 81               [ 4] 4534 	ret 
                                   4535 
                                   4536 ;-----------------------
                                   4537 ; BASIC: DREAD(pin)
                                   4538 ; read state of a digital pin 
                                   4539 ; pin# {0..15}
                                   4540 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4541 ;    A 		TK_INTGR
                                   4542 ;    X      0|1 
                                   4543 ;-------------------------
                           000001  4544 	PINNO=1
                           000001  4545 	VSIZE=1
      001A38                       4546 digital_read:
      001A38                       4547 	_vars VSIZE 
      001A38 52 01            [ 2]    1     sub sp,#VSIZE 
      001A3A CD 11 D7         [ 4] 4548 	call func_args
      001A3D A1 01            [ 1] 4549 	cp a,#1
      001A3F 27 03            [ 1] 4550 	jreq 1$
      001A41 CC 07 14         [ 2] 4551 	jp syntax_error
      001A44 CD 0F 93         [ 4] 4552 1$: call dpop 
      001A47 A3 00 0F         [ 2] 4553 	cpw x,#15 
      001A4A 23 05            [ 2] 4554 	jrule 2$
      001A4C A6 0A            [ 1] 4555 	ld a,#ERR_BAD_VALUE
      001A4E CC 07 16         [ 2] 4556 	jp tb_error 
      001A51 CD 1F BB         [ 4] 4557 2$:	call select_pin 
      001A54 6B 01            [ 1] 4558 	ld (PINNO,sp),a
      001A56 E6 01            [ 1] 4559 	ld a,(GPIO_IDR,x)
      001A58 0D 01            [ 1] 4560 	tnz (PINNO,sp)
      001A5A 27 05            [ 1] 4561 	jreq 8$
      001A5C 44               [ 1] 4562 3$: srl a 
      001A5D 0A 01            [ 1] 4563 	dec (PINNO,sp)
      001A5F 26 FB            [ 1] 4564 	jrne 3$ 
      001A61 A4 01            [ 1] 4565 8$: and a,#1 
      001A63 5F               [ 1] 4566 	clrw x 
      001A64 97               [ 1] 4567 	ld xl,a 
      001A65 A6 04            [ 1] 4568 	ld a,#TK_INTGR
      001A67                       4569 	_drop VSIZE
      001A67 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A69 81               [ 4] 4570 	ret
                                   4571 
                                   4572 ;-----------------------
                                   4573 ; BASIC: DWRITE pin,0|1
                                   4574 ; write to a digital pin 
                                   4575 ; pin# {0..15}
                                   4576 ; output:
                                   4577 ;    A 		TK_INTGR
                                   4578 ;    X      0|1 
                                   4579 ;-------------------------
                           000001  4580 	PINNO=1
                           000002  4581 	PINVAL=2
                           000002  4582 	VSIZE=2
      001A6A                       4583 digital_write:
      001A6A                       4584 	_vars VSIZE 
      001A6A 52 02            [ 2]    1     sub sp,#VSIZE 
      001A6C CD 11 B3         [ 4] 4585 	call arg_list  
      001A6F A1 02            [ 1] 4586 	cp a,#2 
      001A71 27 03            [ 1] 4587 	jreq 1$
      001A73 CC 07 14         [ 2] 4588 	jp syntax_error
      001A76 CD 0F 93         [ 4] 4589 1$: call dpop 
      001A79 9F               [ 1] 4590 	ld a,xl 
      001A7A 6B 02            [ 1] 4591 	ld (PINVAL,sp),a
      001A7C CD 0F 93         [ 4] 4592 	call dpop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A7F A3 00 0F         [ 2] 4593 	cpw x,#15 
      001A82 23 05            [ 2] 4594 	jrule 2$
      001A84 A6 0A            [ 1] 4595 	ld a,#ERR_BAD_VALUE
      001A86 CC 07 16         [ 2] 4596 	jp tb_error 
      001A89 CD 1F BB         [ 4] 4597 2$:	call select_pin 
      001A8C 6B 01            [ 1] 4598 	ld (PINNO,sp),a 
      001A8E A6 01            [ 1] 4599 	ld a,#1
      001A90 0D 01            [ 1] 4600 	tnz (PINNO,sp)
      001A92 27 05            [ 1] 4601 	jreq 4$
      001A94 48               [ 1] 4602 3$: sll a
      001A95 0A 01            [ 1] 4603 	dec (PINNO,sp)
      001A97 26 FB            [ 1] 4604 	jrne 3$
      001A99 0D 02            [ 1] 4605 4$: tnz (PINVAL,sp)
      001A9B 26 05            [ 1] 4606 	jrne 5$
      001A9D 43               [ 1] 4607 	cpl a 
      001A9E E4 00            [ 1] 4608 	and a,(GPIO_ODR,x)
      001AA0 20 02            [ 2] 4609 	jra 8$
      001AA2 EA 00            [ 1] 4610 5$: or a,(GPIO_ODR,x)
      001AA4 E7 00            [ 1] 4611 8$: ld (GPIO_ODR,x),a 
      001AA6                       4612 	_drop VSIZE 
      001AA6 5B 02            [ 2]    1     addw sp,#VSIZE 
      001AA8 81               [ 4] 4613 	ret
                                   4614 
                                   4615 
                                   4616 ;-----------------------
                                   4617 ; BASIC: BREAK 
                                   4618 ; insert a breakpoint 
                                   4619 ; in pogram. 
                                   4620 ; the program is resumed
                                   4621 ; with RUN 
                                   4622 ;-------------------------
      001AA9                       4623 break:
      001AA9 72 00 00 1F 02   [ 2] 4624 	btjt flags,#FRUN,2$
      001AAE 4F               [ 1] 4625 	clr a
      001AAF 81               [ 4] 4626 	ret 
      001AB0                       4627 2$:	 
                                   4628 ; create space on cstack to save context 
      001AB0 AE 1A D7         [ 2] 4629 	ldw x,#break_point 
      001AB3 CD 01 B8         [ 4] 4630 	call puts 
      001AB6                       4631 	_drop 2 ;drop return address 
      001AB6 5B 02            [ 2]    1     addw sp,#2 
      001AB8                       4632 	_vars CTXT_SIZE ; context size 
      001AB8 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001ABA CD 16 75         [ 4] 4633 	call save_context 
      001ABD AE 16 C8         [ 2] 4634 	ldw x,#tib 
      001AC0 CF 00 04         [ 2] 4635 	ldw basicptr,x
      001AC3 7F               [ 1] 4636 	clr (x)
      001AC4 72 5F 00 03      [ 1] 4637 	clr count  
      001AC8 5F               [ 1] 4638 	clrw x 
      001AC9 CF 00 00         [ 2] 4639 	ldw in.w,x
      001ACC 72 11 00 1F      [ 1] 4640 	bres flags,#FRUN 
      001AD0 72 18 00 1F      [ 1] 4641 	bset flags,#FBREAK
      001AD4 CC 07 C4         [ 2] 4642 	jp interp_loop 
      001AD7 0A 62 72 65 61 6B 20  4643 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4644 
                                   4645 ;-----------------------
                                   4646 ; BASIC: NEW
                                   4647 ; from command line only 
                                   4648 ; free program memory
                                   4649 ; and clear variables 
                                   4650 ;------------------------
      001AF5                       4651 new: 
      001AF5 72 01 00 1F 02   [ 2] 4652 	btjf flags,#FRUN,0$ 
      001AFA 4F               [ 1] 4653 	clr a 
      001AFB 81               [ 4] 4654 	ret 
      001AFC                       4655 0$:	
      001AFC CD 05 E6         [ 4] 4656 	call clear_basic 
      001AFF 81               [ 4] 4657 	ret 
                                   4658 	 
                                   4659 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4660 ;   file system routines
                                   4661 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4662 
                                   4663 ;--------------------
                                   4664 ; input:
                                   4665 ;   X     increment 
                                   4666 ; output:
                                   4667 ;   farptr  incremented 
                                   4668 ;---------------------
      001B00                       4669 incr_farptr:
      001B00 72 BB 00 11      [ 2] 4670 	addw x,farptr+1 
      001B04 24 04            [ 1] 4671 	jrnc 1$
      001B06 72 5C 00 10      [ 1] 4672 	inc farptr 
      001B0A CF 00 11         [ 2] 4673 1$:	ldw farptr+1,x  
      001B0D 81               [ 4] 4674 	ret 
                                   4675 
                                   4676 ;------------------------------
                                   4677 ; extended flash memory used as FLASH_DRIVE 
                                   4678 ; seek end of used flash drive   
                                   4679 ; starting at 0x10000 address.
                                   4680 ; 4 consecutives 0 bytes signal free space. 
                                   4681 ; input:
                                   4682 ;	none
                                   4683 ; output:
                                   4684 ;   ffree     free_addr| 0 if memory full.
                                   4685 ;------------------------------
      001B0E                       4686 seek_fdrive:
                                   4687 ; start scan at 0x10000 address 
      001B0E A6 01            [ 1] 4688 	ld a,#1
      001B10 C7 00 10         [ 1] 4689 	ld farptr,a 
      001B13 5F               [ 1] 4690 	clrw x 
      001B14 CF 00 11         [ 2] 4691 	ldw farptr+1,x 
      001B17                       4692 1$:
      001B17 AE 00 03         [ 2] 4693 	ldw x,#3  
      001B1A 92 AF 00 10      [ 5] 4694 2$:	ldf a,([farptr],x) 
      001B1E 26 05            [ 1] 4695 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B20 5A               [ 2] 4696 	decw x
      001B21 2A F7            [ 1] 4697 	jrpl 2$
      001B23 20 19            [ 2] 4698 	jra 4$ 
      001B25 5C               [ 1] 4699 3$:	incw x 
      001B26 CD 1B 00         [ 4] 4700 	call incr_farptr
      001B29 AE 02 7F         [ 2] 4701 	ldw x,#0x27f 
      001B2C C3 00 10         [ 2] 4702 	cpw x,farptr
      001B2F 2A E6            [ 1] 4703 	jrpl 1$
                                   4704 ; drive full 
      001B31 72 5F 00 13      [ 1] 4705 	clr ffree 
      001B35 72 5F 00 14      [ 1] 4706 	clr ffree+1 
      001B39 72 5F 00 15      [ 1] 4707 	clr ffree+2 
      001B3D 81               [ 4] 4708 	ret
      001B3E                       4709 4$: ; copy farptr to ffree	 
      001B3E CE 00 10         [ 2] 4710 	ldw x,farptr 
      001B41 C6 00 12         [ 1] 4711 	ld a,farptr+2 
      001B44 CF 00 13         [ 2] 4712 	ldw ffree,x 
      001B47 C7 00 15         [ 1] 4713 	ld ffree+2,a  
      001B4A 81               [ 4] 4714 	ret 
                                   4715 
                                   4716 ;-----------------------
                                   4717 ; compare file name 
                                   4718 ; with name pointed by Y  
                                   4719 ; input:
                                   4720 ;   farptr   file name 
                                   4721 ;   Y        target name 
                                   4722 ; output:
                                   4723 ;   farptr 	 at file_name
                                   4724 ;   X 		 farptr[x] point at size field  
                                   4725 ;   Carry    0|1 no match|match  
                                   4726 ;----------------------
      001B4B                       4727 cmp_name:
      001B4B 5F               [ 1] 4728 	clrw x
      001B4C 92 AF 00 10      [ 5] 4729 1$:	ldf a,([farptr],x)
      001B50 90 F1            [ 1] 4730 	cp a,(y)
      001B52 26 08            [ 1] 4731 	jrne 4$
      001B54 4D               [ 1] 4732 	tnz a 
      001B55 27 12            [ 1] 4733 	jreq 9$ 
      001B57 5C               [ 1] 4734     incw x 
      001B58 90 5C            [ 1] 4735 	incw y 
      001B5A 20 F0            [ 2] 4736 	jra 1$
      001B5C                       4737 4$: ;no match 
      001B5C 4D               [ 1] 4738 	tnz a 
      001B5D 27 07            [ 1] 4739 	jreq 5$
      001B5F 5C               [ 1] 4740 	incw x 
      001B60 92 AF 00 10      [ 5] 4741 	ldf a,([farptr],x)
      001B64 20 F6            [ 2] 4742 	jra 4$  
      001B66 5C               [ 1] 4743 5$:	incw x ; farptr[x] point at 'size' field 
      001B67 98               [ 1] 4744 	rcf 
      001B68 81               [ 4] 4745 	ret
      001B69                       4746 9$: ; match  
      001B69 5C               [ 1] 4747 	incw x  ; farptr[x] at 'size' field 
      001B6A 99               [ 1] 4748 	scf 
      001B6B 81               [ 4] 4749 	ret 
                                   4750 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4751 ;-----------------------
                                   4752 ; search file in 
                                   4753 ; flash memory 
                                   4754 ; input:
                                   4755 ;   Y       file name  
                                   4756 ; output:
                                   4757 ;   farptr  addr at name|0
                                   4758 ;-----------------------
                           000001  4759 	FSIZE=1
                           000003  4760 	YSAVE=3
                           000004  4761 	VSIZE=4 
      001B6C                       4762 search_file: 
      001B6C                       4763 	_vars VSIZE
      001B6C 52 04            [ 2]    1     sub sp,#VSIZE 
      001B6E 17 03            [ 2] 4764 	ldw (YSAVE,sp),y  
      001B70 5F               [ 1] 4765 	clrw x 
      001B71 CF 00 11         [ 2] 4766 	ldw farptr+1,x 
      001B74 35 01 00 10      [ 1] 4767 	mov farptr,#1
      001B78                       4768 1$:	
                                   4769 ; check if farptr is after any file 
                                   4770 ; if  0 then so.
      001B78 92 BC 00 10      [ 5] 4771 	ldf a,[farptr]
      001B7C 27 25            [ 1] 4772 	jreq 6$
      001B7E 5F               [ 1] 4773 2$: clrw x 	
      001B7F 16 03            [ 2] 4774 	ldw y,(YSAVE,sp) 
      001B81 CD 1B 4B         [ 4] 4775 	call cmp_name
      001B84 25 2D            [ 1] 4776 	jrc 9$
      001B86 92 AF 00 10      [ 5] 4777 	ldf a,([farptr],x)
      001B8A 6B 01            [ 1] 4778 	ld (FSIZE,sp),a 
      001B8C 5C               [ 1] 4779 	incw x 
      001B8D 92 AF 00 10      [ 5] 4780 	ldf a,([farptr],x)
      001B91 6B 02            [ 1] 4781 	ld (FSIZE+1,sp),a 
      001B93 5C               [ 1] 4782 	incw x 
      001B94 72 FB 01         [ 2] 4783 	addw x,(FSIZE,sp) ; count to skip 
      001B97 5C               [ 1] 4784 	incw x ; skip over EOF marker 
      001B98 CD 1B 00         [ 4] 4785 	call incr_farptr ; now at next file 'name_field'
      001B9B AE 02 80         [ 2] 4786 	ldw x,#0x280
      001B9E C3 00 10         [ 2] 4787 	cpw x,farptr 
      001BA1 2A D5            [ 1] 4788 	jrpl 1$
      001BA3                       4789 6$: ; file not found 
      001BA3 72 5F 00 10      [ 1] 4790 	clr farptr
      001BA7 72 5F 00 11      [ 1] 4791 	clr farptr+1 
      001BAB 72 5F 00 12      [ 1] 4792 	clr farptr+2 
      001BAF                       4793 	_drop VSIZE 
      001BAF 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BB1 98               [ 1] 4794 	rcf
      001BB2 81               [ 4] 4795 	ret
      001BB3                       4796 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001BB3                       4797 	_drop VSIZE 
      001BB3 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BB5 99               [ 1] 4798 	scf 	
      001BB6 81               [ 4] 4799 	ret
                                   4800 
                                   4801 ;--------------------------------
                                   4802 ; BASIC: SAVE "name" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                   4803 ; save text program in 
                                   4804 ; flash memory used as 
                                   4805 ;--------------------------------
                           000001  4806 	BSIZE=1
                           000003  4807 	NAMEPTR=3
                           000004  4808 	VSIZE=4
      001BB7                       4809 save:
      001BB7 72 01 00 1F 05   [ 2] 4810 	btjf flags,#FRUN,0$ 
      001BBC A6 07            [ 1] 4811 	ld a,#ERR_CMD_ONLY 
      001BBE CC 07 16         [ 2] 4812 	jp tb_error
      001BC1                       4813 0$:	 
      001BC1 CE 00 1A         [ 2] 4814 	ldw x,txtend 
      001BC4 72 B0 00 18      [ 2] 4815 	subw x,txtbgn
      001BC8 26 01            [ 1] 4816 	jrne 1$
                                   4817 ; nothing to save 
      001BCA 81               [ 4] 4818 	ret 
      001BCB                       4819 1$:	
      001BCB                       4820 	_vars VSIZE 
      001BCB 52 04            [ 2]    1     sub sp,#VSIZE 
      001BCD 1F 01            [ 2] 4821 	ldw (BSIZE,sp),x 
      001BCF CD 07 F4         [ 4] 4822 	call next_token	
      001BD2 A1 0A            [ 1] 4823 	cp a,#TK_QSTR
      001BD4 27 03            [ 1] 4824 	jreq 2$
      001BD6 CC 07 14         [ 2] 4825 	jp syntax_error
      001BD9                       4826 2$: 
      001BD9 90 CE 00 04      [ 2] 4827 	ldw y,basicptr 
      001BDD 72 B9 00 00      [ 2] 4828 	addw y,in.w
      001BE1 17 03            [ 2] 4829 	ldw (NAMEPTR,sp),y  
      001BE3 55 00 03 00 01   [ 1] 4830 	mov in,count 
                                   4831 ; check if enough free space 
      001BE8 93               [ 1] 4832 	ldw x,y 
      001BE9 CD 02 7A         [ 4] 4833 	call strlen 
      001BEC 1C 00 03         [ 2] 4834 	addw x,#3 
      001BEF 72 FB 01         [ 2] 4835 	addw x,(BSIZE,sp)
      001BF2 72 5D 00 13      [ 1] 4836 	tnz ffree 
      001BF6 26 0B            [ 1] 4837 	jrne 21$
      001BF8 72 B0 00 14      [ 2] 4838 	subw x,ffree+1 
      001BFC 23 05            [ 2] 4839 	jrule 21$
      001BFE A6 01            [ 1] 4840 	ld a,#ERR_MEM_FULL 
      001C00 CC 07 16         [ 2] 4841 	jp tb_error
      001C03                       4842 21$: 
                                   4843 ; check for existing file of that name 
      001C03 16 03            [ 2] 4844 	ldw y,(NAMEPTR,sp)	
      001C05 CD 1B 6C         [ 4] 4845 	call search_file 
      001C08 24 05            [ 1] 4846 	jrnc 3$ 
      001C0A A6 08            [ 1] 4847 	ld a,#ERR_DUPLICATE 
      001C0C CC 07 16         [ 2] 4848 	jp tb_error 
      001C0F                       4849 3$:	;** write file name to flash **
      001C0F CE 00 13         [ 2] 4850 	ldw x,ffree 
      001C12 C6 00 15         [ 1] 4851 	ld a,ffree+2 
      001C15 CF 00 10         [ 2] 4852 	ldw farptr,x 
      001C18 C7 00 12         [ 1] 4853 	ld farptr+2,a 
      001C1B 1E 03            [ 2] 4854 	ldw x,(NAMEPTR,sp)  
      001C1D CD 02 7A         [ 4] 4855 	call strlen 
      001C20 5C               [ 1] 4856 	incw  x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C21 1F 01            [ 2] 4857 	ldw (BSIZE,sp),x  
      001C23 5F               [ 1] 4858 	clrw x   
      001C24 16 03            [ 2] 4859 	ldw y,(NAMEPTR,sp)
      001C26 CD 01 55         [ 4] 4860 	call write_block  
                                   4861 ;** write file length after name **
      001C29 CE 00 1A         [ 2] 4862 	ldw x,txtend 
      001C2C 72 B0 00 18      [ 2] 4863 	subw x,txtbgn
      001C30 1F 01            [ 2] 4864 	ldw (BSIZE,sp),x 
      001C32 5F               [ 1] 4865 	clrw x 
      001C33 7B 01            [ 1] 4866 	ld a,(1,sp)
      001C35 CD 00 E0         [ 4] 4867 	call write_byte 
      001C38 5C               [ 1] 4868 	incw x 
      001C39 7B 02            [ 1] 4869 	ld a,(2,sp)
      001C3B CD 00 E0         [ 4] 4870 	call write_byte
      001C3E 5C               [ 1] 4871 	incw x  
      001C3F CD 1B 00         [ 4] 4872 	call incr_farptr ; move farptr after SIZE field 
                                   4873 ;** write BASIC text **
                                   4874 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001C42 1E 01            [ 2] 4875 	ldw x,(BSIZE,sp)
      001C44 89               [ 2] 4876 	pushw x ; write_block argument 
      001C45 5F               [ 1] 4877 	clrw x 
      001C46 90 CE 00 18      [ 2] 4878 	ldw y,txtbgn  ; BASIC text to save 
      001C4A CD 01 55         [ 4] 4879 	call write_block 
      001C4D                       4880 	_drop 2 ;  drop write_block argument  
      001C4D 5B 02            [ 2]    1     addw sp,#2 
                                   4881 ; write en end of file marker 
      001C4F AE 00 01         [ 2] 4882 	ldw x,#1
      001C52 A6 FF            [ 1] 4883 	ld a,#EOF  
      001C54 CD 00 E0         [ 4] 4884 	call write_byte 
      001C57 CD 1B 00         [ 4] 4885 	call incr_farptr
                                   4886 ; save farptr in ffree
      001C5A CE 00 10         [ 2] 4887 	ldw x,farptr 
      001C5D C6 00 12         [ 1] 4888 	ld a,farptr+2 
      001C60 CF 00 13         [ 2] 4889 	ldw ffree,x 
      001C63 C7 00 15         [ 1] 4890 	ld ffree+2,a
                                   4891 ;write 4 zero bytes as an end of all files marker 
      001C66 5F               [ 1] 4892     clrw x 
      001C67 4B 04            [ 1] 4893 	push #4 
      001C69                       4894 4$:
      001C69 4F               [ 1] 4895 	clr a 
      001C6A CD 00 E0         [ 4] 4896 	call write_byte 
      001C6D 5C               [ 1] 4897 	incw x 
      001C6E 0A 01            [ 1] 4898 	dec (1,sp)
      001C70 26 F7            [ 1] 4899 	jrne 4$
      001C72 84               [ 1] 4900 5$: pop a 
                                   4901 ; display saved size  
      001C73 1E 01            [ 2] 4902 	ldw x,(BSIZE,sp) 
      001C75 CD 09 8D         [ 4] 4903 	call print_int 
      001C78                       4904 	_drop VSIZE 
      001C78 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C7A 81               [ 4] 4905 	ret 
                                   4906 
                                   4907 
                                   4908 ;------------------------
                                   4909 ; BASIC: LOAD "file" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                   4910 ; load file to RAM 
                                   4911 ; for execution 
                                   4912 ;------------------------
      001C7B                       4913 load:
      001C7B 72 01 00 1F 07   [ 2] 4914 	btjf flags,#FRUN,0$ 
      001C80 27 05            [ 1] 4915 	jreq 0$ 
      001C82 A6 07            [ 1] 4916 	ld a,#ERR_CMD_ONLY 
      001C84 CC 07 16         [ 2] 4917 	jp tb_error 
      001C87                       4918 0$:	
      001C87 CD 07 F4         [ 4] 4919 	call next_token 
      001C8A A1 0A            [ 1] 4920 	cp a,#TK_QSTR
      001C8C 27 03            [ 1] 4921 	jreq 1$
      001C8E CC 07 14         [ 2] 4922 	jp syntax_error 
      001C91                       4923 1$:	
      001C91 90 CE 00 04      [ 2] 4924 	ldw y,basicptr
      001C95 72 B9 00 00      [ 2] 4925 	addw y,in.w 
      001C99 55 00 03 00 01   [ 1] 4926 	mov in,count 
      001C9E CD 1B 6C         [ 4] 4927 	call search_file 
      001CA1 25 05            [ 1] 4928 	jrc 2$ 
      001CA3 A6 09            [ 1] 4929 	ld a,#ERR_NOT_FILE
      001CA5 CC 07 16         [ 2] 4930 	jp tb_error  
      001CA8                       4931 2$:	
      001CA8 CD 1B 00         [ 4] 4932 	call incr_farptr  
      001CAB CD 05 E6         [ 4] 4933 	call clear_basic  
      001CAE 5F               [ 1] 4934 	clrw x
      001CAF 92 AF 00 10      [ 5] 4935 	ldf a,([farptr],x)
      001CB3 90 95            [ 1] 4936 	ld yh,a 
      001CB5 5C               [ 1] 4937 	incw x  
      001CB6 92 AF 00 10      [ 5] 4938 	ldf a,([farptr],x)
      001CBA 5C               [ 1] 4939 	incw x 
      001CBB 90 97            [ 1] 4940 	ld yl,a 
      001CBD 72 B9 00 18      [ 2] 4941 	addw y,txtbgn
      001CC1 90 CF 00 1A      [ 2] 4942 	ldw txtend,y
      001CC5 90 CE 00 18      [ 2] 4943 	ldw y,txtbgn
      001CC9                       4944 3$:	; load BASIC text 	
      001CC9 92 AF 00 10      [ 5] 4945 	ldf a,([farptr],x)
      001CCD 90 F7            [ 1] 4946 	ld (y),a 
      001CCF 5C               [ 1] 4947 	incw x 
      001CD0 90 5C            [ 1] 4948 	incw y 
      001CD2 90 C3 00 1A      [ 2] 4949 	cpw y,txtend 
      001CD6 2B F1            [ 1] 4950 	jrmi 3$
                                   4951 ; print loaded size 	 
      001CD8 CE 00 1A         [ 2] 4952 	ldw x,txtend 
      001CDB 72 B0 00 18      [ 2] 4953 	subw x,txtbgn
      001CDF CD 09 8D         [ 4] 4954 	call print_int 
      001CE2 81               [ 4] 4955 	ret 
                                   4956 
                                   4957 ;-----------------------------------
                                   4958 ; BASIC: FORGET ["file_name"] 
                                   4959 ; erase file_name and all others 
                                   4960 ; after it. 
                                   4961 ; without argument erase all files 
                                   4962 ;-----------------------------------
      001CE3                       4963 forget:
      001CE3 CD 07 F4         [ 4] 4964 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001CE6 A1 00            [ 1] 4965 	cp a,#TK_NONE 
      001CE8 27 26            [ 1] 4966 	jreq 3$ 
      001CEA A1 0A            [ 1] 4967 	cp a,#TK_QSTR
      001CEC 27 03            [ 1] 4968 	jreq 1$
      001CEE CC 07 14         [ 2] 4969 	jp syntax_error
      001CF1 90 CE 00 04      [ 2] 4970 1$: ldw y,basicptr
      001CF5 72 B9 00 00      [ 2] 4971 	addw y,in.w
      001CF9 55 00 03 00 01   [ 1] 4972 	mov in,count 
      001CFE CD 1B 6C         [ 4] 4973 	call search_file
      001D01 25 05            [ 1] 4974 	jrc 2$
      001D03 A6 09            [ 1] 4975 	ld a,#ERR_NOT_FILE 
      001D05 CC 07 16         [ 2] 4976 	jp tb_error 
      001D08                       4977 2$: 
      001D08 CE 00 10         [ 2] 4978 	ldw x,farptr
      001D0B C6 00 12         [ 1] 4979 	ld a,farptr+2
      001D0E 20 0A            [ 2] 4980 	jra 4$ 
      001D10                       4981 3$: ; forget all files 
      001D10 AE 01 00         [ 2] 4982 	ldw x,#0x100
      001D13 4F               [ 1] 4983 	clr a 
      001D14 CF 00 10         [ 2] 4984 	ldw farptr,x 
      001D17 C7 00 12         [ 1] 4985 	ld farptr+2,a 
      001D1A                       4986 4$:
      001D1A CF 00 13         [ 2] 4987 	ldw ffree,x 
      001D1D C7 00 15         [ 1] 4988 	ld ffree+2,a 
      001D20 4B 04            [ 1] 4989 	push #4
      001D22 5F               [ 1] 4990 	clrw x 
      001D23                       4991 5$: 
      001D23 4F               [ 1] 4992 	clr a  
      001D24 CD 00 E0         [ 4] 4993 	call write_byte 
      001D27 5C               [ 1] 4994 	incw x 
      001D28 0A 01            [ 1] 4995 	dec (1,sp)
      001D2A 26 F7            [ 1] 4996 	jrne 5$	
      001D2C 84               [ 1] 4997 6$: pop a 
      001D2D 81               [ 4] 4998 	ret 
                                   4999 
                                   5000 ;----------------------
                                   5001 ; BASIC: DIR 
                                   5002 ; list saved files 
                                   5003 ;----------------------
                           000001  5004 	COUNT=1 ; files counter 
                           000002  5005 	VSIZE=2 
      001D2E                       5006 directory:
      001D2E                       5007 	_vars VSIZE 
      001D2E 52 02            [ 2]    1     sub sp,#VSIZE 
      001D30 5F               [ 1] 5008 	clrw x 
      001D31 1F 01            [ 2] 5009 	ldw (COUNT,sp),x 
      001D33 CF 00 11         [ 2] 5010 	ldw farptr+1,x 
      001D36 35 01 00 10      [ 1] 5011 	mov farptr,#1 
      001D3A                       5012 dir_loop:
      001D3A 5F               [ 1] 5013 	clrw x 
      001D3B 92 AF 00 10      [ 5] 5014 	ldf a,([farptr],x)
      001D3F 27 39            [ 1] 5015 	jreq 8$ 
      001D41                       5016 1$: ;name loop 	
      001D41 92 AF 00 10      [ 5] 5017 	ldf a,([farptr],x)
      001D45 27 06            [ 1] 5018 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001D47 CD 01 A6         [ 4] 5019 	call putc 
      001D4A 5C               [ 1] 5020 	incw x 
      001D4B 20 F4            [ 2] 5021 	jra 1$
      001D4D 5C               [ 1] 5022 2$: incw x ; skip ending 0. 
      001D4E A6 20            [ 1] 5023 	ld a,#SPACE 
      001D50 CD 01 A6         [ 4] 5024 	call putc 
                                   5025 ; get file size 	
      001D53 92 AF 00 10      [ 5] 5026 	ldf a,([farptr],x)
      001D57 90 95            [ 1] 5027 	ld yh,a 
      001D59 5C               [ 1] 5028 	incw x 
      001D5A 92 AF 00 10      [ 5] 5029 	ldf a,([farptr],x)
      001D5E 5C               [ 1] 5030 	incw x 
      001D5F 90 97            [ 1] 5031 	ld yl,a 
      001D61 90 89            [ 2] 5032 	pushw y 
      001D63 72 FB 01         [ 2] 5033 	addw x,(1,sp)
      001D66 5C               [ 1] 5034 	incw x ; skip EOF marker 
                                   5035 ; skip to next file 
      001D67 CD 1B 00         [ 4] 5036 	call incr_farptr 
                                   5037 ; print file size 
      001D6A 85               [ 2] 5038 	popw x ; file size 
      001D6B CD 09 8D         [ 4] 5039 	call print_int 
      001D6E A6 0D            [ 1] 5040 	ld a,#CR 
      001D70 CD 01 A6         [ 4] 5041 	call putc
      001D73 1E 01            [ 2] 5042 	ldw x,(COUNT,sp)
      001D75 5C               [ 1] 5043 	incw x
      001D76 1F 01            [ 2] 5044 	ldw (COUNT,sp),x  
      001D78 20 C0            [ 2] 5045 	jra dir_loop 
      001D7A                       5046 8$: ; print number of files 
      001D7A 1E 01            [ 2] 5047 	ldw x,(COUNT,sp)
      001D7C CD 09 8D         [ 4] 5048 	call print_int 
      001D7F AE 1D AF         [ 2] 5049 	ldw x,#file_count 
      001D82 CD 01 B8         [ 4] 5050 	call puts  
                                   5051 ; print drive free space 	
      001D85 A6 FF            [ 1] 5052 	ld a,#0xff 
      001D87 C0 00 15         [ 1] 5053 	sub a,ffree+2 
      001D8A C7 00 09         [ 1] 5054 	ld acc8,a 
      001D8D A6 7F            [ 1] 5055 	ld a,#0x7f 
      001D8F C2 00 14         [ 1] 5056 	sbc a,ffree+1 
      001D92 C7 00 08         [ 1] 5057 	ld acc16,a 
      001D95 A6 02            [ 1] 5058 	ld a,#2 
      001D97 C2 00 13         [ 1] 5059 	sbc a,ffree 
      001D9A C7 00 07         [ 1] 5060 	ld acc24,a 
      001D9D 5F               [ 1] 5061 	clrw x  
      001D9E A6 06            [ 1] 5062 	ld a,#6 
      001DA0 97               [ 1] 5063 	ld xl,a 
      001DA1 A6 0A            [ 1] 5064 	ld a,#10 
      001DA3 CD 09 45         [ 4] 5065 	call prti24 
      001DA6 AE 1D B7         [ 2] 5066 	ldw x,#drive_free
      001DA9 CD 01 B8         [ 4] 5067 	call puts 
      001DAC                       5068 	_drop VSIZE 
      001DAC 5B 02            [ 2]    1     addw sp,#VSIZE 
      001DAE 81               [ 4] 5069 	ret
      001DAF 20 66 69 6C 65 73 0A  5070 file_count: .asciz " files\n"
             00
      001DB7 20 62 79 74 65 73 20  5071 drive_free: .asciz " bytes free\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



             66 72 65 65 0A 00
                                   5072 
                                   5073 ;---------------------
                                   5074 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   5075 ; write 1 or more byte to FLASH or EEPROM
                                   5076 ; starting at address  
                                   5077 ; input:
                                   5078 ;   expr1  	is address 
                                   5079 ;   expr2   is byte to write
                                   5080 ; output:
                                   5081 ;   none 
                                   5082 ;---------------------
                           000001  5083 	ADDR=1
                           000002  5084 	VSIZ=2 
      001DC4                       5085 write:
      001DC4                       5086 	_vars VSIZE 
      001DC4 52 02            [ 2]    1     sub sp,#VSIZE 
      001DC6 72 5F 00 10      [ 1] 5087 	clr farptr ; expect 16 bits address 
      001DCA CD 12 B7         [ 4] 5088 	call expression
      001DCD A1 04            [ 1] 5089 	cp a,#TK_INTGR 
      001DCF 27 03            [ 1] 5090 	jreq 0$
      001DD1 CC 07 14         [ 2] 5091 	jp syntax_error
      001DD4 1F 01            [ 2] 5092 0$: ldw (ADDR,sp),x 
      001DD6 CD 07 F4         [ 4] 5093 	call next_token 
      001DD9 A1 0D            [ 1] 5094 	cp a,#TK_COMMA 
      001DDB 27 02            [ 1] 5095 	jreq 1$ 
      001DDD 20 19            [ 2] 5096 	jra 9$ 
      001DDF CD 12 B7         [ 4] 5097 1$:	call expression
      001DE2 A1 04            [ 1] 5098 	cp a,#TK_INTGR
      001DE4 27 03            [ 1] 5099 	jreq 2$
      001DE6 CC 07 14         [ 2] 5100 	jp syntax_error
      001DE9 9F               [ 1] 5101 2$:	ld a,xl 
      001DEA 1E 01            [ 2] 5102 	ldw x,(ADDR,sp) 
      001DEC CF 00 11         [ 2] 5103 	ldw farptr+1,x 
      001DEF 5F               [ 1] 5104 	clrw x 
      001DF0 CD 00 E0         [ 4] 5105 	call write_byte
      001DF3 1E 01            [ 2] 5106 	ldw x,(ADDR,sp)
      001DF5 5C               [ 1] 5107 	incw x 
      001DF6 20 DC            [ 2] 5108 	jra 0$ 
      001DF8                       5109 9$:
      001DF8                       5110 	_drop VSIZE
      001DF8 5B 02            [ 2]    1     addw sp,#VSIZE 
      001DFA 81               [ 4] 5111 	ret 
                                   5112 
                                   5113 
                                   5114 ;---------------------
                                   5115 ;BASIC: CHAR(expr)
                                   5116 ; évaluate expression 
                                   5117 ; and take the 7 least 
                                   5118 ; bits as ASCII character
                                   5119 ;---------------------
      001DFB                       5120 char:
      001DFB CD 11 D7         [ 4] 5121 	call func_args 
      001DFE A1 01            [ 1] 5122 	cp a,#1
      001E00 27 03            [ 1] 5123 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E02 CC 07 14         [ 2] 5124 	jp syntax_error
      001E05 CD 0F 93         [ 4] 5125 1$:	call dpop 
      001E08 9F               [ 1] 5126 	ld a,xl 
      001E09 A4 7F            [ 1] 5127 	and a,#0x7f 
      001E0B 97               [ 1] 5128 	ld xl,a
      001E0C A6 03            [ 1] 5129 	ld a,#TK_CHAR
      001E0E 81               [ 4] 5130 	ret
                                   5131 
                                   5132 ;---------------------
                                   5133 ; BASIC: ASC(string|char)
                                   5134 ; extract first character 
                                   5135 ; of string argument 
                                   5136 ; return it as TK_INTGR 
                                   5137 ;---------------------
      001E0F                       5138 ascii:
      001E0F CD 11 D7         [ 4] 5139 	call func_args 
      001E12 CD 07 F4         [ 4] 5140 	call next_token 
      001E15 A1 0A            [ 1] 5141 	cp a,#TK_QSTR 
      001E17 27 07            [ 1] 5142 	jreq 1$
      001E19 A1 03            [ 1] 5143 	cp a,#TK_CHAR 
      001E1B 27 06            [ 1] 5144 	jreq 2$ 
      001E1D CC 07 14         [ 2] 5145 	jp syntax_error
      001E20                       5146 1$: 
      001E20 F6               [ 1] 5147 	ld a,(x)
      001E21 20 01            [ 2] 5148 	jra 3$
      001E23                       5149 2$: 
      001E23 9F               [ 1] 5150 	ld a,xl 
      001E24 97               [ 1] 5151 3$:	ld xl,a 
      001E25 4F               [ 1] 5152 	clr a  
      001E26 95               [ 1] 5153 	ld xh,a 
      001E27 A6 04            [ 1] 5154 	ld a,#TK_INTGR 
      001E29 81               [ 4] 5155 	ret 
                                   5156 
                                   5157 ;---------------------
                                   5158 ;BASIC: KEY
                                   5159 ; wait for a character 
                                   5160 ; received from STDIN 
                                   5161 ; input:
                                   5162 ;	none 
                                   5163 ; output:
                                   5164 ;	X 		ASCII character 
                                   5165 ;---------------------
      001E2A                       5166 key:
      001E2A CD 01 AF         [ 4] 5167 	call getc 
      001E2D 5F               [ 1] 5168 	clrw x 
      001E2E 97               [ 1] 5169 	ld xl,a 
      001E2F A6 04            [ 1] 5170 	ld a,#TK_INTGR
      001E31 81               [ 4] 5171 	ret
                                   5172 
                                   5173 ;----------------------
                                   5174 ; BASIC: QKEY
                                   5175 ; Return true if there 
                                   5176 ; is a character in 
                                   5177 ; waiting in STDIN 
                                   5178 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   5179 ;  none 
                                   5180 ; output:
                                   5181 ;   X 		0|1 
                                   5182 ;-----------------------
      001E32                       5183 qkey: 
      001E32 5F               [ 1] 5184 	clrw x 
      001E33 72 0B 52 40 01   [ 2] 5185 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001E38 5C               [ 1] 5186 	incw x 
      001E39 A6 04            [ 1] 5187 9$: ld a,#TK_INTGR
      001E3B 81               [ 4] 5188 	ret 
                                   5189 
                                   5190 ;---------------------
                                   5191 ; BASIC: GPIO(expr,reg)
                                   5192 ; return gpio address 
                                   5193 ; expr {0..8}
                                   5194 ; input:
                                   5195 ;   none 
                                   5196 ; output:
                                   5197 ;   X 		gpio register address
                                   5198 ;----------------------------
      001E3C                       5199 gpio:
      001E3C CD 11 D7         [ 4] 5200 	call func_args 
      001E3F A1 02            [ 1] 5201 	cp a,#2
      001E41 27 03            [ 1] 5202 	jreq 1$
      001E43 CC 07 14         [ 2] 5203 	jp syntax_error  
      001E46                       5204 1$:	
      001E46 AE 00 02         [ 2] 5205 	ldw x,#2
      001E49 72 DE 00 16      [ 5] 5206 	ldw x,([dstkptr],x) ; port 
      001E4D 2B 1B            [ 1] 5207 	jrmi bad_port
      001E4F A3 00 09         [ 2] 5208 	cpw x,#9
      001E52 2A 16            [ 1] 5209 	jrpl bad_port
      001E54 A6 05            [ 1] 5210 	ld a,#5
      001E56 42               [ 4] 5211 	mul x,a
      001E57 1C 50 00         [ 2] 5212 	addw x,#GPIO_BASE 
      001E5A 89               [ 2] 5213 	pushw x 
      001E5B CD 0F 93         [ 4] 5214 	call dpop 
      001E5E 72 FB 01         [ 2] 5215 	addw x,(1,sp)
      001E61 1F 01            [ 2] 5216 	ldw (1,sp),x  
      001E63 CD 0F BA         [ 4] 5217 	call ddrop  
      001E66 85               [ 2] 5218 	popw x 
      001E67 A6 04            [ 1] 5219 	ld a,#TK_INTGR
      001E69 81               [ 4] 5220 	ret
      001E6A                       5221 bad_port:
      001E6A A6 0A            [ 1] 5222 	ld a,#ERR_BAD_VALUE
      001E6C CC 07 16         [ 2] 5223 	jp tb_error
                                   5224 
                                   5225 
                                   5226 ;-------------------------
                                   5227 ; BASIC: UFLASH 
                                   5228 ; return user flash address
                                   5229 ; input:
                                   5230 ;  none 
                                   5231 ; output:
                                   5232 ;	A		TK_INTGR
                                   5233 ;   X 		user address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   5234 ;---------------------------
      001E6F                       5235 uflash:
      001E6F AE 23 80         [ 2] 5236 	ldw x,#user_space 
      001E72 A6 04            [ 1] 5237 	ld a,#TK_INTGR 
      001E74 81               [ 4] 5238 	ret 
                                   5239 
                                   5240 
                                   5241 ;---------------------
                                   5242 ; BASIC: USR(addr[,arg])
                                   5243 ; execute a function written 
                                   5244 ; in binary code.
                                   5245 ; binary fonction should 
                                   5246 ; return token attribute in A 
                                   5247 ; and value in X. 
                                   5248 ; input:
                                   5249 ;   addr	routine address 
                                   5250 ;   arg 	is an optional argument 
                                   5251 ; output:
                                   5252 ;   A 		token attribute 
                                   5253 ;   X       returned value 
                                   5254 ;---------------------
      001E75                       5255 usr:
      001E75 90 89            [ 2] 5256 	pushw y 	
      001E77 CD 11 D7         [ 4] 5257 	call func_args 
      001E7A A1 01            [ 1] 5258 	cp a,#1 
      001E7C 2A 03            [ 1] 5259 	jrpl 2$ 
      001E7E CC 07 14         [ 2] 5260 	jp syntax_error 
      001E81                       5261 2$: 
      001E81 CD 0F 93         [ 4] 5262 	call dpop 
      001E84 A1 02            [ 1] 5263 	cp a,#2 
      001E86 2B 05            [ 1] 5264 	jrmi 4$
      001E88 90 93            [ 1] 5265 	ldw y,x ; y=arg 
      001E8A CD 0F 93         [ 4] 5266 	call dpop ;x=addr 
      001E8D 51               [ 1] 5267 4$:	exgw y,x ; y=addr,x=arg 
      001E8E 90 FD            [ 4] 5268 	call (y)
      001E90 90 85            [ 2] 5269 	popw y 
      001E92 81               [ 4] 5270 	ret 
                                   5271 
                                   5272 ;------------------------------
                                   5273 ; BASIC: BYE 
                                   5274 ; halt mcu in its lowest power mode 
                                   5275 ; wait for reset or external interrupt
                                   5276 ; do a cold start on wakeup.
                                   5277 ;------------------------------
      001E93                       5278 bye:
      001E93 72 0D 52 40 FB   [ 2] 5279 	btjf UART3_SR,#UART_SR_TC,.
      001E98 8E               [10] 5280 	halt
      001E99 CC 05 54         [ 2] 5281 	jp cold_start  
                                   5282 
                                   5283 ;----------------------------------
                                   5284 ; BASIC: SLEEP 
                                   5285 ; halt mcu until reset or external
                                   5286 ; interrupt.
                                   5287 ; Resume progam after SLEEP command
                                   5288 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E9C                       5289 sleep:
      001E9C 72 0D 52 40 FB   [ 2] 5290 	btjf UART3_SR,#UART_SR_TC,.
      001EA1 72 16 00 1F      [ 1] 5291 	bset flags,#FSLEEP
      001EA5 8E               [10] 5292 	halt 
      001EA6 81               [ 4] 5293 	ret 
                                   5294 
                                   5295 ;-------------------------------
                                   5296 ; BASIC: PAUSE expr 
                                   5297 ; suspend execution for n msec.
                                   5298 ; input:
                                   5299 ;	none
                                   5300 ; output:
                                   5301 ;	none 
                                   5302 ;------------------------------
      001EA7                       5303 pause:
      001EA7 CD 12 B7         [ 4] 5304 	call expression
      001EAA A1 04            [ 1] 5305 	cp a,#TK_INTGR
      001EAC 27 03            [ 1] 5306 	jreq pause02 
      001EAE CC 07 14         [ 2] 5307 	jp syntax_error
      001EB1                       5308 pause02: 
      001EB1 5D               [ 2] 5309 1$: tnzw x 
      001EB2 27 04            [ 1] 5310 	jreq 2$
      001EB4 8F               [10] 5311 	wfi 
      001EB5 5A               [ 2] 5312 	decw x 
      001EB6 26 F9            [ 1] 5313 	jrne 1$
      001EB8 4F               [ 1] 5314 2$:	clr a 
      001EB9 81               [ 4] 5315 	ret 
                                   5316 
                                   5317 ;------------------------------
                                   5318 ; BASIC: TICKS
                                   5319 ; return msec ticks counter value 
                                   5320 ; input:
                                   5321 ; 	none 
                                   5322 ; output:
                                   5323 ;	X 		TK_INTGR
                                   5324 ;-------------------------------
      001EBA                       5325 get_ticks:
      001EBA CE 00 0A         [ 2] 5326 	ldw x,ticks 
      001EBD A6 04            [ 1] 5327 	ld a,#TK_INTGR
      001EBF 81               [ 4] 5328 	ret 
                                   5329 
                                   5330 
                                   5331 
                                   5332 ;------------------------------
                                   5333 ; BASIC: ABS(expr)
                                   5334 ; return absolute value of expr.
                                   5335 ; input:
                                   5336 ;   none
                                   5337 ; output:
                                   5338 ;   X     	positive integer
                                   5339 ;-------------------------------
      001EC0                       5340 abs:
      001EC0 CD 11 D7         [ 4] 5341 	call func_args 
      001EC3 A1 01            [ 1] 5342 	cp a,#1 
      001EC5 27 03            [ 1] 5343 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001EC7 CC 07 14         [ 2] 5344 	jp syntax_error
      001ECA                       5345 0$:  
      001ECA CD 0F 93         [ 4] 5346     call dpop   
      001ECD 9E               [ 1] 5347 	ld a,xh 
      001ECE A5 80            [ 1] 5348 	bcp a,#0x80 
      001ED0 27 01            [ 1] 5349 	jreq 2$ 
      001ED2 50               [ 2] 5350 	negw x 
      001ED3 A6 04            [ 1] 5351 2$: ld a,#TK_INTGR 
      001ED5 81               [ 4] 5352 	ret 
                                   5353 
                                   5354 ;------------------------------
                                   5355 ; BASIC: AND(expr1,expr2)
                                   5356 ; Apply bit AND relation between
                                   5357 ; the 2 arguments, i.e expr1 & expr2 
                                   5358 ; output:
                                   5359 ; 	A 		TK_INTGR
                                   5360 ;   X 		result 
                                   5361 ;------------------------------
      001ED6                       5362 bit_and:
      001ED6 CD 11 D7         [ 4] 5363 	call func_args 
      001ED9 A1 02            [ 1] 5364 	cp a,#2
      001EDB 27 03            [ 1] 5365 	jreq 1$
      001EDD CC 07 14         [ 2] 5366 	jp syntax_error 
      001EE0 CD 0F 93         [ 4] 5367 1$:	call dpop 
      001EE3 89               [ 2] 5368 	pushw x 
      001EE4 CD 0F 93         [ 4] 5369 	call dpop 
      001EE7 9E               [ 1] 5370 	ld a,xh 
      001EE8 14 01            [ 1] 5371 	and a,(1,sp)
      001EEA 95               [ 1] 5372 	ld xh,a 
      001EEB 9F               [ 1] 5373 	ld a,xl
      001EEC 14 02            [ 1] 5374 	and a,(2,sp)
      001EEE 97               [ 1] 5375 	ld xl,a 
      001EEF                       5376 	_drop 2 
      001EEF 5B 02            [ 2]    1     addw sp,#2 
      001EF1 A6 04            [ 1] 5377 	ld a,#TK_INTGR
      001EF3 81               [ 4] 5378 	ret
                                   5379 
                                   5380 ;------------------------------
                                   5381 ; BASIC: OR(expr1,expr2)
                                   5382 ; Apply bit OR relation between
                                   5383 ; the 2 arguments, i.e expr1 | expr2 
                                   5384 ; output:
                                   5385 ; 	A 		TK_INTGR
                                   5386 ;   X 		result 
                                   5387 ;------------------------------
      001EF4                       5388 bit_or:
      001EF4 CD 11 D7         [ 4] 5389 	call func_args 
      001EF7 A1 02            [ 1] 5390 	cp a,#2
      001EF9 27 03            [ 1] 5391 	jreq 1$
      001EFB CC 07 14         [ 2] 5392 	jp syntax_error 
      001EFE                       5393 1$: 
      001EFE CD 0F 93         [ 4] 5394 	call dpop 
      001F01 89               [ 2] 5395 	pushw x 
      001F02 CD 0F 93         [ 4] 5396 	call dpop 
      001F05 9E               [ 1] 5397 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F06 1A 01            [ 1] 5398 	or a,(1,sp)
      001F08 95               [ 1] 5399 	ld xh,a 
      001F09 9F               [ 1] 5400 	ld a,xl 
      001F0A 1A 02            [ 1] 5401 	or a,(2,sp)
      001F0C 97               [ 1] 5402 	ld xl,a 
      001F0D                       5403 	_drop 2 
      001F0D 5B 02            [ 2]    1     addw sp,#2 
      001F0F A6 04            [ 1] 5404 	ld a,#TK_INTGR 
      001F11 81               [ 4] 5405 	ret
                                   5406 
                                   5407 ;------------------------------
                                   5408 ; BASIC: XOR(expr1,expr2)
                                   5409 ; Apply bit XOR relation between
                                   5410 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5411 ; output:
                                   5412 ; 	A 		TK_INTGR
                                   5413 ;   X 		result 
                                   5414 ;------------------------------
      001F12                       5415 bit_xor:
      001F12 CD 11 D7         [ 4] 5416 	call func_args 
      001F15 A1 02            [ 1] 5417 	cp a,#2
      001F17 27 03            [ 1] 5418 	jreq 1$
      001F19 CC 07 14         [ 2] 5419 	jp syntax_error 
      001F1C                       5420 1$: 
      001F1C CD 0F 93         [ 4] 5421 	call dpop 
      001F1F 89               [ 2] 5422 	pushw x 
      001F20 CD 0F 93         [ 4] 5423 	call dpop 
      001F23 9E               [ 1] 5424 	ld a,xh 
      001F24 18 01            [ 1] 5425 	xor a,(1,sp)
      001F26 95               [ 1] 5426 	ld xh,a 
      001F27 9F               [ 1] 5427 	ld a,xl 
      001F28 18 02            [ 1] 5428 	xor a,(2,sp)
      001F2A 97               [ 1] 5429 	ld xl,a 
      001F2B                       5430 	_drop 2 
      001F2B 5B 02            [ 2]    1     addw sp,#2 
      001F2D A6 04            [ 1] 5431 	ld a,#TK_INTGR 
      001F2F 81               [ 4] 5432 	ret 
                                   5433 
                                   5434 ;------------------------------
                                   5435 ; BASIC: LSHIFT(expr1,expr2)
                                   5436 ; logical shift left expr1 by 
                                   5437 ; expr2 bits 
                                   5438 ; output:
                                   5439 ; 	A 		TK_INTGR
                                   5440 ;   X 		result 
                                   5441 ;------------------------------
      001F30                       5442 lshift:
      001F30 CD 11 D7         [ 4] 5443 	call func_args
      001F33 A1 02            [ 1] 5444 	cp a,#2 
      001F35 27 03            [ 1] 5445 	jreq 1$
      001F37 CC 07 14         [ 2] 5446 	jp syntax_error
      001F3A CD 0F 93         [ 4] 5447 1$: call dpop  
      001F3D 51               [ 1] 5448 	exgw x,y 
      001F3E CD 0F 93         [ 4] 5449 	call dpop
      001F41 90 5D            [ 2] 5450 	tnzw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001F43 27 05            [ 1] 5451 	jreq 4$
      001F45 58               [ 2] 5452 2$:	sllw x 
      001F46 90 5A            [ 2] 5453 	decw y 
      001F48 26 FB            [ 1] 5454 	jrne 2$
      001F4A                       5455 4$:  
      001F4A A6 04            [ 1] 5456 	ld a,#TK_INTGR
      001F4C 81               [ 4] 5457 	ret
                                   5458 
                                   5459 ;------------------------------
                                   5460 ; BASIC: RSHIFT(expr1,expr2)
                                   5461 ; logical shift right expr1 by 
                                   5462 ; expr2 bits.
                                   5463 ; output:
                                   5464 ; 	A 		TK_INTGR
                                   5465 ;   X 		result 
                                   5466 ;------------------------------
      001F4D                       5467 rshift:
      001F4D CD 11 D7         [ 4] 5468 	call func_args
      001F50 A1 02            [ 1] 5469 	cp a,#2 
      001F52 27 03            [ 1] 5470 	jreq 1$
      001F54 CC 07 14         [ 2] 5471 	jp syntax_error
      001F57 CD 0F 93         [ 4] 5472 1$: call dpop  
      001F5A 51               [ 1] 5473 	exgw x,y 
      001F5B CD 0F 93         [ 4] 5474 	call dpop
      001F5E 90 5D            [ 2] 5475 	tnzw y 
      001F60 27 05            [ 1] 5476 	jreq 4$
      001F62 54               [ 2] 5477 2$:	srlw x 
      001F63 90 5A            [ 2] 5478 	decw y 
      001F65 26 FB            [ 1] 5479 	jrne 2$
      001F67                       5480 4$:  
      001F67 A6 04            [ 1] 5481 	ld a,#TK_INTGR
      001F69 81               [ 4] 5482 	ret
                                   5483 
                                   5484 ;--------------------------
                                   5485 ; BASIC: FCPU integer
                                   5486 ; set CPU frequency 
                                   5487 ;-------------------------- 
                                   5488 
      001F6A                       5489 fcpu:
      001F6A A6 04            [ 1] 5490 	ld a,#TK_INTGR
      001F6C CD 11 A6         [ 4] 5491 	call expect 
      001F6F 9F               [ 1] 5492 	ld a,xl 
      001F70 A4 07            [ 1] 5493 	and a,#7 
      001F72 C7 50 C6         [ 1] 5494 	ld CLK_CKDIVR,a 
      001F75 81               [ 4] 5495 	ret 
                                   5496 
                                   5497 ;------------------------------
                                   5498 ; BASIC: PMODE pin#, mode 
                                   5499 ; define pin as input or output
                                   5500 ; pin#: {0..15}
                                   5501 ; mode: INPUT|OUTPUT  
                                   5502 ;------------------------------
                           000001  5503 	PINNO=1
                           000001  5504 	VSIZE=1
      001F76                       5505 pin_mode:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001F76                       5506 	_vars VSIZE 
      001F76 52 01            [ 2]    1     sub sp,#VSIZE 
      001F78 CD 11 B3         [ 4] 5507 	call arg_list 
      001F7B A1 02            [ 1] 5508 	cp a,#2 
      001F7D 27 03            [ 1] 5509 	jreq 1$
      001F7F CC 07 14         [ 2] 5510 	jp syntax_error 
      001F82 CD 0F 93         [ 4] 5511 1$: call dpop ; mode 
      001F85 51               [ 1] 5512 	exgw x,y 
      001F86 CD 0F 93         [ 4] 5513 	call dpop ; Dx pin 
      001F89 CD 1F BB         [ 4] 5514 	call select_pin 
      001F8C 6B 01            [ 1] 5515 	ld (PINNO,sp),a  
      001F8E A6 01            [ 1] 5516 	ld a,#1 
      001F90 0D 01            [ 1] 5517 	tnz (PINNO,sp)
      001F92 27 0B            [ 1] 5518 	jreq 4$
      001F94 48               [ 1] 5519 2$:	sll a 
      001F95 0A 01            [ 1] 5520 	dec (PINNO,sp)
      001F97 26 FB            [ 1] 5521 	jrne 2$ 
      001F99 6B 01            [ 1] 5522 	ld (PINNO,sp),a
      001F9B EA 03            [ 1] 5523 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001F9D E7 03            [ 1] 5524 	ld (GPIO_CR1,x),a 
      001F9F 90 A3 00 01      [ 2] 5525 4$:	cpw y,#OUTP 
      001FA3 27 07            [ 1] 5526 	jreq 6$
                                   5527 ; input mode
      001FA5 7B 01            [ 1] 5528 	ld a,(PINNO,sp)
      001FA7 43               [ 1] 5529 	cpl a 
      001FA8 E4 02            [ 1] 5530 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001FAA 20 0A            [ 2] 5531 	jra 9$
      001FAC                       5532 6$: ;output mode  
      001FAC 7B 01            [ 1] 5533 	ld a,(PINNO,sp)
      001FAE EA 04            [ 1] 5534 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001FB0 E7 04            [ 1] 5535 	ld (GPIO_CR2,x),a 
      001FB2 7B 01            [ 1] 5536 	ld a,(PINNO,sp)
      001FB4 EA 02            [ 1] 5537 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001FB6 E7 02            [ 1] 5538 9$:	ld (GPIO_DDR,x),a 
      001FB8                       5539 	_drop VSIZE 
      001FB8 5B 01            [ 2]    1     addw sp,#VSIZE 
      001FBA 81               [ 4] 5540 	ret
                                   5541 
                                   5542 ;------------------------
                                   5543 ; select pin 
                                   5544 ; input:
                                   5545 ;   X 	 {0..15} Arduino Dx 
                                   5546 ; output:
                                   5547 ;   A     stm8s208 pin 
                                   5548 ;   X     base address s208 GPIO port 
                                   5549 ;---------------------------
      001FBB                       5550 select_pin:
      001FBB 58               [ 2] 5551 	sllw x 
      001FBC 1C 1F CB         [ 2] 5552 	addw x,#arduino_to_8s208 
      001FBF FE               [ 2] 5553 	ldw x,(x)
      001FC0 9F               [ 1] 5554 	ld a,xl 
      001FC1 88               [ 1] 5555 	push a 
      001FC2 5E               [ 1] 5556 	swapw x 
      001FC3 A6 05            [ 1] 5557 	ld a,#5 
      001FC5 42               [ 4] 5558 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001FC6 1C 50 00         [ 2] 5559 	addw x,#GPIO_BASE 
      001FC9 84               [ 1] 5560 	pop a 
      001FCA 81               [ 4] 5561 	ret 
                                   5562 ; translation from Arduino D0..D15 to stm8s208rb 
      001FCB                       5563 arduino_to_8s208:
      001FCB 03 06                 5564 .byte 3,6 ; D0 
      001FCD 03 05                 5565 .byte 3,5 ; D1 
      001FCF 04 00                 5566 .byte 4,0 ; D2 
      001FD1 02 01                 5567 .byte 2,1 ; D3
      001FD3 06 00                 5568 .byte 6,0 ; D4
      001FD5 02 02                 5569 .byte 2,2 ; D5
      001FD7 02 03                 5570 .byte 2,3 ; D6
      001FD9 03 01                 5571 .byte 3,1 ; D7
      001FDB 03 03                 5572 .byte 3,3 ; D8
      001FDD 02 04                 5573 .byte 2,4 ; D9
      001FDF 04 05                 5574 .byte 4,5 ; D10
      001FE1 02 06                 5575 .byte 2,6 ; D11
      001FE3 02 07                 5576 .byte 2,7 ; D12
      001FE5 02 05                 5577 .byte 2,5 ; D13
      001FE7 04 02                 5578 .byte 4,2 ; D14
      001FE9 04 01                 5579 .byte 4,1 ; D15
                                   5580 
                                   5581 
                                   5582 ;------------------------------
                                   5583 ; BASIC: RND(expr)
                                   5584 ; return random number 
                                   5585 ; between 1 and expr inclusive
                                   5586 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5587 ; input:
                                   5588 ; 	none 
                                   5589 ; output:
                                   5590 ;	X 		random positive integer 
                                   5591 ;------------------------------
      001FEB                       5592 random:
      001FEB CD 11 D7         [ 4] 5593 	call func_args 
      001FEE A1 01            [ 1] 5594 	cp a,#1
      001FF0 27 03            [ 1] 5595 	jreq 1$
      001FF2 CC 07 14         [ 2] 5596 	jp syntax_error
      001FF5                       5597 1$: 
      001FF5 CD 0F 93         [ 4] 5598 	call dpop 
      001FF8 89               [ 2] 5599 	pushw x 
      001FF9 9E               [ 1] 5600 	ld a,xh 
      001FFA A5 80            [ 1] 5601 	bcp a,#0x80 
      001FFC 27 05            [ 1] 5602 	jreq 2$
      001FFE A6 0A            [ 1] 5603 	ld a,#ERR_BAD_VALUE
      002000 CC 07 16         [ 2] 5604 	jp tb_error
      002003                       5605 2$: 
                                   5606 ; acc16=(x<<5)^x 
      002003 CE 00 0C         [ 2] 5607 	ldw x,seedx 
      002006 58               [ 2] 5608 	sllw x 
      002007 58               [ 2] 5609 	sllw x 
      002008 58               [ 2] 5610 	sllw x 
      002009 58               [ 2] 5611 	sllw x 
      00200A 58               [ 2] 5612 	sllw x 
      00200B 9E               [ 1] 5613 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      00200C C8 00 0C         [ 1] 5614 	xor a,seedx 
      00200F C7 00 08         [ 1] 5615 	ld acc16,a 
      002012 9F               [ 1] 5616 	ld a,xl 
      002013 C8 00 0D         [ 1] 5617 	xor a,seedx+1 
      002016 C7 00 09         [ 1] 5618 	ld acc8,a 
                                   5619 ; seedx=seedy 
      002019 CE 00 0E         [ 2] 5620 	ldw x,seedy 
      00201C CF 00 0C         [ 2] 5621 	ldw seedx,x  
                                   5622 ; seedy=seedy^(seedy>>1)
      00201F 90 54            [ 2] 5623 	srlw y 
      002021 90 9E            [ 1] 5624 	ld a,yh 
      002023 C8 00 0E         [ 1] 5625 	xor a,seedy 
      002026 C7 00 0E         [ 1] 5626 	ld seedy,a  
      002029 90 9F            [ 1] 5627 	ld a,yl 
      00202B C8 00 0F         [ 1] 5628 	xor a,seedy+1 
      00202E C7 00 0F         [ 1] 5629 	ld seedy+1,a 
                                   5630 ; acc16>>3 
      002031 CE 00 08         [ 2] 5631 	ldw x,acc16 
      002034 54               [ 2] 5632 	srlw x 
      002035 54               [ 2] 5633 	srlw x 
      002036 54               [ 2] 5634 	srlw x 
                                   5635 ; x=acc16^x 
      002037 9E               [ 1] 5636 	ld a,xh 
      002038 C8 00 08         [ 1] 5637 	xor a,acc16 
      00203B 95               [ 1] 5638 	ld xh,a 
      00203C 9F               [ 1] 5639 	ld a,xl 
      00203D C8 00 09         [ 1] 5640 	xor a,acc8 
      002040 97               [ 1] 5641 	ld xl,a 
                                   5642 ; seedy=x^seedy 
      002041 C8 00 0F         [ 1] 5643 	xor a,seedy+1
      002044 97               [ 1] 5644 	ld xl,a 
      002045 9E               [ 1] 5645 	ld a,xh 
      002046 C8 00 0E         [ 1] 5646 	xor a,seedy
      002049 95               [ 1] 5647 	ld xh,a 
      00204A CF 00 0E         [ 2] 5648 	ldw seedy,x 
                                   5649 ; return seedy modulo expr + 1 
      00204D 90 85            [ 2] 5650 	popw y 
      00204F 65               [ 2] 5651 	divw x,y 
      002050 93               [ 1] 5652 	ldw x,y 
      002051 5C               [ 1] 5653 	incw x 
      002052 A6 04            [ 1] 5654 	ld a,#TK_INTGR
      002054 81               [ 4] 5655 	ret 
                                   5656 
                                   5657 ;---------------------------------
                                   5658 ; BASIC: WORDS 
                                   5659 ; affiche la listes des mots du
                                   5660 ; dictionnaire.
                                   5661 ;---------------------------------
                           000001  5662 	WLEN=1
                           000002  5663 	LLEN=2  
                           000002  5664 	VSIZE=2 
      002055                       5665 words:
      002055                       5666 	_vars VSIZE
      002055 52 02            [ 2]    1     sub sp,#VSIZE 
      002057 0F 02            [ 1] 5667 	clr (LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      002059 90 AE 23 01      [ 2] 5668 	ldw y,#kword_dict+2
      00205D 93               [ 1] 5669 0$:	ldw x,y
      00205E F6               [ 1] 5670 	ld a,(x)
      00205F A4 0F            [ 1] 5671 	and a,#15 
      002061 6B 01            [ 1] 5672 	ld (WLEN,sp),a 
      002063 5C               [ 1] 5673 1$:	incw x 
      002064 F6               [ 1] 5674 	ld a,(x)
      002065 CD 01 A6         [ 4] 5675 	call putc 
      002068 0C 02            [ 1] 5676 	inc (LLEN,sp)
      00206A 0A 01            [ 1] 5677 	dec (WLEN,sp)
      00206C 26 F5            [ 1] 5678 	jrne 1$
      00206E A6 46            [ 1] 5679 	ld a,#70
      002070 11 02            [ 1] 5680 	cp a,(LLEN,sp)
      002072 2B 09            [ 1] 5681 	jrmi 2$   
      002074 A6 20            [ 1] 5682 	ld a,#SPACE 
      002076 CD 01 A6         [ 4] 5683 	call putc 
      002079 0C 02            [ 1] 5684 	inc (LLEN,sp) 
      00207B 20 07            [ 2] 5685 	jra 3$
      00207D A6 0D            [ 1] 5686 2$: ld a,#CR 
      00207F CD 01 A6         [ 4] 5687 	call putc 
      002082 0F 02            [ 1] 5688 	clr (LLEN,sp)
      002084 72 A2 00 02      [ 2] 5689 3$:	subw y,#2 
      002088 90 FE            [ 2] 5690 	ldw y,(y)
      00208A 26 D1            [ 1] 5691 	jrne 0$  
      00208C                       5692 	_drop VSIZE 
      00208C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00208E 81               [ 4] 5693 	ret 
                                   5694 
                                   5695 
                                   5696 ;*********************************
                                   5697 
                                   5698 ;------------------------------
                                   5699 ;      dictionary 
                                   5700 ; format:
                                   5701 ;   link:   2 bytes 
                                   5702 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5703 ;   cmd_name: 16 byte max 
                                   5704 ;   code_address: 2 bytes 
                                   5705 ;------------------------------
                                   5706 	.macro _dict_entry len,name,cmd 
                                   5707 	.word LINK 
                                   5708 	LINK=.
                                   5709 name:
                                   5710 	.byte len 	
                                   5711 	.ascii "name"
                                   5712 	.word cmd 
                                   5713 	.endm 
                                   5714 
                           000000  5715 	LINK=0
      00208F                       5716 kword_end:
      00208F                       5717 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      00208F 00 00                    1 	.word LINK 
                           002091     2 	LINK=.
      002091                          3 XOR:
      002091 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      002092 58 4F 52                 5 	.ascii "XOR"
      002095 1F 12                    6 	.word bit_xor 
      002097                       5718 	_dict_entry,5,WRITE,write  
      002097 20 91                    1 	.word LINK 
                           002099     2 	LINK=.
      002099                          3 WRITE:
      002099 05                       4 	.byte 5 	
      00209A 57 52 49 54 45           5 	.ascii "WRITE"
      00209F 1D C4                    6 	.word write 
      0020A1                       5719 	_dict_entry,5,WORDS,words 
      0020A1 20 99                    1 	.word LINK 
                           0020A3     2 	LINK=.
      0020A3                          3 WORDS:
      0020A3 05                       4 	.byte 5 	
      0020A4 57 4F 52 44 53           5 	.ascii "WORDS"
      0020A9 20 55                    6 	.word words 
      0020AB                       5720 	_dict_entry 4,WAIT,wait 
      0020AB 20 A3                    1 	.word LINK 
                           0020AD     2 	LINK=.
      0020AD                          3 WAIT:
      0020AD 04                       4 	.byte 4 	
      0020AE 57 41 49 54              5 	.ascii "WAIT"
      0020B2 17 0F                    6 	.word wait 
      0020B4                       5721 	_dict_entry,3+F_IFUNC,USR,usr
      0020B4 20 AD                    1 	.word LINK 
                           0020B6     2 	LINK=.
      0020B6                          3 USR:
      0020B6 43                       4 	.byte 3+F_IFUNC 	
      0020B7 55 53 52                 5 	.ascii "USR"
      0020BA 1E 75                    6 	.word usr 
      0020BC                       5722 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      0020BC 20 B6                    1 	.word LINK 
                           0020BE     2 	LINK=.
      0020BE                          3 UFLASH:
      0020BE 46                       4 	.byte 6+F_IFUNC 	
      0020BF 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0020C5 1E 6F                    6 	.word uflash 
      0020C7                       5723 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      0020C7 20 BE                    1 	.word LINK 
                           0020C9     2 	LINK=.
      0020C9                          3 UBOUND:
      0020C9 46                       4 	.byte 6+F_IFUNC 	
      0020CA 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0020D0 13 76                    6 	.word ubound 
      0020D2                       5724 	_dict_entry,2,TO,to
      0020D2 20 C9                    1 	.word LINK 
                           0020D4     2 	LINK=.
      0020D4                          3 TO:
      0020D4 02                       4 	.byte 2 	
      0020D5 54 4F                    5 	.ascii "TO"
      0020D7 18 06                    6 	.word to 
      0020D9                       5725 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      0020D9 20 D4                    1 	.word LINK 
                           0020DB     2 	LINK=.
      0020DB                          3 TICKS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0020DB 45                       4 	.byte 5+F_IFUNC 	
      0020DC 54 49 43 4B 53           5 	.ascii "TICKS"
      0020E1 1E BA                    6 	.word get_ticks 
      0020E3                       5726 	_dict_entry,4,STOP,stop 
      0020E3 20 DB                    1 	.word LINK 
                           0020E5     2 	LINK=.
      0020E5                          3 STOP:
      0020E5 04                       4 	.byte 4 	
      0020E6 53 54 4F 50              5 	.ascii "STOP"
      0020EA 19 82                    6 	.word stop 
      0020EC                       5727 	_dict_entry,4,STEP,step 
      0020EC 20 E5                    1 	.word LINK 
                           0020EE     2 	LINK=.
      0020EE                          3 STEP:
      0020EE 04                       4 	.byte 4 	
      0020EF 53 54 45 50              5 	.ascii "STEP"
      0020F3 18 36                    6 	.word step 
      0020F5                       5728 	_dict_entry,5,SLEEP,sleep 
      0020F5 20 EE                    1 	.word LINK 
                           0020F7     2 	LINK=.
      0020F7                          3 SLEEP:
      0020F7 05                       4 	.byte 5 	
      0020F8 53 4C 45 45 50           5 	.ascii "SLEEP"
      0020FD 1E 9C                    6 	.word sleep 
      0020FF                       5729 	_dict_entry,4+F_IFUNC,SIZE,size
      0020FF 20 F7                    1 	.word LINK 
                           002101     2 	LINK=.
      002101                          3 SIZE:
      002101 44                       4 	.byte 4+F_IFUNC 	
      002102 53 49 5A 45              5 	.ascii "SIZE"
      002106 13 6C                    6 	.word size 
      002108                       5730     _dict_entry,4,SHOW,show 
      002108 21 01                    1 	.word LINK 
                           00210A     2 	LINK=.
      00210A                          3 SHOW:
      00210A 04                       4 	.byte 4 	
      00210B 53 48 4F 57              5 	.ascii "SHOW"
      00210F 13 52                    6 	.word show 
      002111                       5731 	_dict_entry,4,SAVE,save
      002111 21 0A                    1 	.word LINK 
                           002113     2 	LINK=.
      002113                          3 SAVE:
      002113 04                       4 	.byte 4 	
      002114 53 41 56 45              5 	.ascii "SAVE"
      002118 1B B7                    6 	.word save 
      00211A                       5732 	_dict_entry 3,RUN,run
      00211A 21 13                    1 	.word LINK 
                           00211C     2 	LINK=.
      00211C                          3 RUN:
      00211C 03                       4 	.byte 3 	
      00211D 52 55 4E                 5 	.ascii "RUN"
      002120 19 3F                    6 	.word run 
      002122                       5733 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      002122 21 1C                    1 	.word LINK 
                           002124     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002124                          3 RSHIFT:
      002124 46                       4 	.byte 6+F_IFUNC 	
      002125 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00212B 1F 4D                    6 	.word rshift 
      00212D                       5734 	_dict_entry,3+F_IFUNC,RND,random 
      00212D 21 24                    1 	.word LINK 
                           00212F     2 	LINK=.
      00212F                          3 RND:
      00212F 43                       4 	.byte 3+F_IFUNC 	
      002130 52 4E 44                 5 	.ascii "RND"
      002133 1F EB                    6 	.word random 
      002135                       5735 	_dict_entry,6,RETURN,return 
      002135 21 2F                    1 	.word LINK 
                           002137     2 	LINK=.
      002137                          3 RETURN:
      002137 06                       4 	.byte 6 	
      002138 52 45 54 55 52 4E        5 	.ascii "RETURN"
      00213E 19 1F                    6 	.word return 
      002140                       5736 	_dict_entry 6,REMARK,rem 
      002140 21 37                    1 	.word LINK 
                           002142     2 	LINK=.
      002142                          3 REMARK:
      002142 06                       4 	.byte 6 	
      002143 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      002149 17 09                    6 	.word rem 
      00214B                       5737 	_dict_entry,6,REBOOT,cold_start 
      00214B 21 42                    1 	.word LINK 
                           00214D     2 	LINK=.
      00214D                          3 REBOOT:
      00214D 06                       4 	.byte 6 	
      00214E 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002154 05 54                    6 	.word cold_start 
      002156                       5738 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002156 21 4D                    1 	.word LINK 
                           002158     2 	LINK=.
      002158                          3 QKEY:
      002158 44                       4 	.byte 4+F_IFUNC 	
      002159 51 4B 45 59              5 	.ascii "QKEY"
      00215D 1E 32                    6 	.word qkey 
      00215F                       5739 	_dict_entry,6,PWRADC,power_adc 
      00215F 21 58                    1 	.word LINK 
                           002161     2 	LINK=.
      002161                          3 PWRADC:
      002161 06                       4 	.byte 6 	
      002162 50 57 52 41 44 43        5 	.ascii "PWRADC"
      002168 19 B9                    6 	.word power_adc 
      00216A                       5740 	_dict_entry 5,PRINT,print 
      00216A 21 61                    1 	.word LINK 
                           00216C     2 	LINK=.
      00216C                          3 PRINT:
      00216C 05                       4 	.byte 5 	
      00216D 50 52 49 4E 54           5 	.ascii "PRINT"
      002172 16 04                    6 	.word print 
      002174                       5741 	_dict_entry,4+F_CONST,POUT,OUTP 
      002174 21 6C                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                           002176     2 	LINK=.
      002176                          3 POUT:
      002176 C4                       4 	.byte 4+F_CONST 	
      002177 50 4F 55 54              5 	.ascii "POUT"
      00217B 00 01                    6 	.word OUTP 
      00217D                       5742 	_dict_entry,4,POKE,poke 
      00217D 21 76                    1 	.word LINK 
                           00217F     2 	LINK=.
      00217F                          3 POKE:
      00217F 04                       4 	.byte 4 	
      002180 50 4F 4B 45              5 	.ascii "POKE"
      002184 17 A2                    6 	.word poke 
      002186                       5743 	_dict_entry,4+F_CONST,PINP,INP 
      002186 21 7F                    1 	.word LINK 
                           002188     2 	LINK=.
      002188                          3 PINP:
      002188 C4                       4 	.byte 4+F_CONST 	
      002189 50 49 4E 50              5 	.ascii "PINP"
      00218D 00 00                    6 	.word INP 
      00218F                       5744 	_dict_entry,4+F_IFUNC,PEEK,peek 
      00218F 21 88                    1 	.word LINK 
                           002191     2 	LINK=.
      002191                          3 PEEK:
      002191 44                       4 	.byte 4+F_IFUNC 	
      002192 50 45 45 4B              5 	.ascii "PEEK"
      002196 17 B5                    6 	.word peek 
      002198                       5745 	_dict_entry,5,PMODE,pin_mode 
      002198 21 91                    1 	.word LINK 
                           00219A     2 	LINK=.
      00219A                          3 PMODE:
      00219A 05                       4 	.byte 5 	
      00219B 50 4D 4F 44 45           5 	.ascii "PMODE"
      0021A0 1F 76                    6 	.word pin_mode 
      0021A2                       5746 	_dict_entry,5,PAUSE,pause 
      0021A2 21 9A                    1 	.word LINK 
                           0021A4     2 	LINK=.
      0021A4                          3 PAUSE:
      0021A4 05                       4 	.byte 5 	
      0021A5 50 41 55 53 45           5 	.ascii "PAUSE"
      0021AA 1E A7                    6 	.word pause 
      0021AC                       5747 	_dict_entry,2+F_IFUNC,OR,bit_or
      0021AC 21 A4                    1 	.word LINK 
                           0021AE     2 	LINK=.
      0021AE                          3 OR:
      0021AE 42                       4 	.byte 2+F_IFUNC 	
      0021AF 4F 52                    5 	.ascii "OR"
      0021B1 1E F4                    6 	.word bit_or 
      0021B3                       5748 	_dict_entry,3+F_CONST,ODR,GPIO_ODR
      0021B3 21 AE                    1 	.word LINK 
                           0021B5     2 	LINK=.
      0021B5                          3 ODR:
      0021B5 C3                       4 	.byte 3+F_CONST 	
      0021B6 4F 44 52                 5 	.ascii "ODR"
      0021B9 00 00                    6 	.word GPIO_ODR 
      0021BB                       5749 	_dict_entry,3,NEW,new
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      0021BB 21 B5                    1 	.word LINK 
                           0021BD     2 	LINK=.
      0021BD                          3 NEW:
      0021BD 03                       4 	.byte 3 	
      0021BE 4E 45 57                 5 	.ascii "NEW"
      0021C1 1A F5                    6 	.word new 
      0021C3                       5750 	_dict_entry,4,NEXT,next 
      0021C3 21 BD                    1 	.word LINK 
                           0021C5     2 	LINK=.
      0021C5                          3 NEXT:
      0021C5 04                       4 	.byte 4 	
      0021C6 4E 45 58 54              5 	.ascii "NEXT"
      0021CA 18 5E                    6 	.word next 
      0021CC                       5751 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0021CC 21 C5                    1 	.word LINK 
                           0021CE     2 	LINK=.
      0021CE                          3 LSHIFT:
      0021CE 46                       4 	.byte 6+F_IFUNC 	
      0021CF 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0021D5 1F 30                    6 	.word lshift 
      0021D7                       5752 	_dict_entry,4,LOAD,load 
      0021D7 21 CE                    1 	.word LINK 
                           0021D9     2 	LINK=.
      0021D9                          3 LOAD:
      0021D9 04                       4 	.byte 4 	
      0021DA 4C 4F 41 44              5 	.ascii "LOAD"
      0021DE 1C 7B                    6 	.word load 
      0021E0                       5753 	_dict_entry 4,LIST,list
      0021E0 21 D9                    1 	.word LINK 
                           0021E2     2 	LINK=.
      0021E2                          3 LIST:
      0021E2 04                       4 	.byte 4 	
      0021E3 4C 49 53 54              5 	.ascii "LIST"
      0021E7 13 C0                    6 	.word list 
      0021E9                       5754 	_dict_entry 3,LET,let 
      0021E9 21 E2                    1 	.word LINK 
                           0021EB     2 	LINK=.
      0021EB                          3 LET:
      0021EB 03                       4 	.byte 3 	
      0021EC 4C 45 54                 5 	.ascii "LET"
      0021EF 13 98                    6 	.word let 
      0021F1                       5755 	_dict_entry,3+F_IFUNC,KEY,key 
      0021F1 21 EB                    1 	.word LINK 
                           0021F3     2 	LINK=.
      0021F3                          3 KEY:
      0021F3 43                       4 	.byte 3+F_IFUNC 	
      0021F4 4B 45 59                 5 	.ascii "KEY"
      0021F7 1E 2A                    6 	.word key 
      0021F9                       5756 	_dict_entry,5,INPUT,input_var  
      0021F9 21 F3                    1 	.word LINK 
                           0021FB     2 	LINK=.
      0021FB                          3 INPUT:
      0021FB 05                       4 	.byte 5 	
      0021FC 49 4E 50 55 54           5 	.ascii "INPUT"
      002201 16 95                    6 	.word input_var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      002203                       5757 	_dict_entry,2,IF,if 
      002203 21 FB                    1 	.word LINK 
                           002205     2 	LINK=.
      002205                          3 IF:
      002205 02                       4 	.byte 2 	
      002206 49 46                    5 	.ascii "IF"
      002208 17 C8                    6 	.word if 
      00220A                       5758 	_dict_entry,3+F_CONST,IDR,GPIO_IDR
      00220A 22 05                    1 	.word LINK 
                           00220C     2 	LINK=.
      00220C                          3 IDR:
      00220C C3                       4 	.byte 3+F_CONST 	
      00220D 49 44 52                 5 	.ascii "IDR"
      002210 00 01                    6 	.word GPIO_IDR 
      002212                       5759 	_dict_entry,3,HEX,hex_base
      002212 22 0C                    1 	.word LINK 
                           002214     2 	LINK=.
      002214                          3 HEX:
      002214 03                       4 	.byte 3 	
      002215 48 45 58                 5 	.ascii "HEX"
      002218 13 62                    6 	.word hex_base 
      00221A                       5760 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      00221A 22 14                    1 	.word LINK 
                           00221C     2 	LINK=.
      00221C                          3 GPIO:
      00221C 44                       4 	.byte 4+F_IFUNC 	
      00221D 47 50 49 4F              5 	.ascii "GPIO"
      002221 1E 3C                    6 	.word gpio 
      002223                       5761 	_dict_entry,4,GOTO,goto 
      002223 22 1C                    1 	.word LINK 
                           002225     2 	LINK=.
      002225                          3 GOTO:
      002225 04                       4 	.byte 4 	
      002226 47 4F 54 4F              5 	.ascii "GOTO"
      00222A 18 CD                    6 	.word goto 
      00222C                       5762 	_dict_entry,5,GOSUB,gosub 
      00222C 22 25                    1 	.word LINK 
                           00222E     2 	LINK=.
      00222E                          3 GOSUB:
      00222E 05                       4 	.byte 5 	
      00222F 47 4F 53 55 42           5 	.ascii "GOSUB"
      002234 18 DA                    6 	.word gosub 
      002236                       5763 	_dict_entry,6,FORGET,forget 
      002236 22 2E                    1 	.word LINK 
                           002238     2 	LINK=.
      002238                          3 FORGET:
      002238 06                       4 	.byte 6 	
      002239 46 4F 52 47 45 54        5 	.ascii "FORGET"
      00223F 1C E3                    6 	.word forget 
      002241                       5764 	_dict_entry,3,FOR,for 
      002241 22 38                    1 	.word LINK 
                           002243     2 	LINK=.
      002243                          3 FOR:
      002243 03                       4 	.byte 3 	
      002244 46 4F 52                 5 	.ascii "FOR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      002247 17 DC                    6 	.word for 
      002249                       5765 	_dict_entry,4,FCPU,fcpu 
      002249 22 43                    1 	.word LINK 
                           00224B     2 	LINK=.
      00224B                          3 FCPU:
      00224B 04                       4 	.byte 4 	
      00224C 46 43 50 55              5 	.ascii "FCPU"
      002250 1F 6A                    6 	.word fcpu 
      002252                       5766 	_dict_entry,6+F_CONST,EEPROM,EEPROM_BASE  
      002252 22 4B                    1 	.word LINK 
                           002254     2 	LINK=.
      002254                          3 EEPROM:
      002254 C6                       4 	.byte 6+F_CONST 	
      002255 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00225B 40 00                    6 	.word EEPROM_BASE 
      00225D                       5767 	_dict_entry,6+F_CMD,DWRITE,digital_write
      00225D 22 54                    1 	.word LINK 
                           00225F     2 	LINK=.
      00225F                          3 DWRITE:
      00225F 06                       4 	.byte 6+F_CMD 	
      002260 44 57 52 49 54 45        5 	.ascii "DWRITE"
      002266 1A 6A                    6 	.word digital_write 
      002268                       5768 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      002268 22 5F                    1 	.word LINK 
                           00226A     2 	LINK=.
      00226A                          3 DREAD:
      00226A 45                       4 	.byte 5+F_IFUNC 	
      00226B 44 52 45 41 44           5 	.ascii "DREAD"
      002270 1A 38                    6 	.word digital_read 
      002272                       5769 	_dict_entry,3,DIR,directory 
      002272 22 6A                    1 	.word LINK 
                           002274     2 	LINK=.
      002274                          3 DIR:
      002274 03                       4 	.byte 3 	
      002275 44 49 52                 5 	.ascii "DIR"
      002278 1D 2E                    6 	.word directory 
      00227A                       5770 	_dict_entry,3,DEC,dec_base
      00227A 22 74                    1 	.word LINK 
                           00227C     2 	LINK=.
      00227C                          3 DEC:
      00227C 03                       4 	.byte 3 	
      00227D 44 45 43                 5 	.ascii "DEC"
      002280 13 67                    6 	.word dec_base 
      002282                       5771 	_dict_entry,3+F_CONST,DDR,GPIO_DDR
      002282 22 7C                    1 	.word LINK 
                           002284     2 	LINK=.
      002284                          3 DDR:
      002284 C3                       4 	.byte 3+F_CONST 	
      002285 44 44 52                 5 	.ascii "DDR"
      002288 00 02                    6 	.word GPIO_DDR 
      00228A                       5772 	_dict_entry,3+F_CONST,CRL,GPIO_CR1
      00228A 22 84                    1 	.word LINK 
                           00228C     2 	LINK=.
      00228C                          3 CRL:
      00228C C3                       4 	.byte 3+F_CONST 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      00228D 43 52 4C                 5 	.ascii "CRL"
      002290 00 03                    6 	.word GPIO_CR1 
      002292                       5773 	_dict_entry,3+F_CONST,CRH,GPIO_CR2
      002292 22 8C                    1 	.word LINK 
                           002294     2 	LINK=.
      002294                          3 CRH:
      002294 C3                       4 	.byte 3+F_CONST 	
      002295 43 52 48                 5 	.ascii "CRH"
      002298 00 04                    6 	.word GPIO_CR2 
      00229A                       5774 	_dict_entry,4+F_CFUNC,CHAR,char
      00229A 22 94                    1 	.word LINK 
                           00229C     2 	LINK=.
      00229C                          3 CHAR:
      00229C 84                       4 	.byte 4+F_CFUNC 	
      00229D 43 48 41 52              5 	.ascii "CHAR"
      0022A1 1D FB                    6 	.word char 
      0022A3                       5775 	_dict_entry,3,BYE,bye 
      0022A3 22 9C                    1 	.word LINK 
                           0022A5     2 	LINK=.
      0022A5                          3 BYE:
      0022A5 03                       4 	.byte 3 	
      0022A6 42 59 45                 5 	.ascii "BYE"
      0022A9 1E 93                    6 	.word bye 
      0022AB                       5776 	_dict_entry,5,BTOGL,bit_toggle
      0022AB 22 A5                    1 	.word LINK 
                           0022AD     2 	LINK=.
      0022AD                          3 BTOGL:
      0022AD 05                       4 	.byte 5 	
      0022AE 42 54 4F 47 4C           5 	.ascii "BTOGL"
      0022B3 17 63                    6 	.word bit_toggle 
      0022B5                       5777 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      0022B5 22 AD                    1 	.word LINK 
                           0022B7     2 	LINK=.
      0022B7                          3 BTEST:
      0022B7 45                       4 	.byte 5+F_IFUNC 	
      0022B8 42 54 45 53 54           5 	.ascii "BTEST"
      0022BD 17 77                    6 	.word bit_test 
      0022BF                       5778 	_dict_entry,4,BSET,bit_set 
      0022BF 22 B7                    1 	.word LINK 
                           0022C1     2 	LINK=.
      0022C1                          3 BSET:
      0022C1 04                       4 	.byte 4 	
      0022C2 42 53 45 54              5 	.ascii "BSET"
      0022C6 17 3A                    6 	.word bit_set 
      0022C8                       5779 	_dict_entry,4,BRES,bit_reset
      0022C8 22 C1                    1 	.word LINK 
                           0022CA     2 	LINK=.
      0022CA                          3 BRES:
      0022CA 04                       4 	.byte 4 	
      0022CB 42 52 45 53              5 	.ascii "BRES"
      0022CF 17 4E                    6 	.word bit_reset 
      0022D1                       5780 	_dict_entry,5,BREAK,break 
      0022D1 22 CA                    1 	.word LINK 
                           0022D3     2 	LINK=.
      0022D3                          3 BREAK:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      0022D3 05                       4 	.byte 5 	
      0022D4 42 52 45 41 4B           5 	.ascii "BREAK"
      0022D9 1A A9                    6 	.word break 
      0022DB                       5781 	_dict_entry,4,BEEP,beep 
      0022DB 22 D3                    1 	.word LINK 
                           0022DD     2 	LINK=.
      0022DD                          3 BEEP:
      0022DD 04                       4 	.byte 4 	
      0022DE 42 45 45 50              5 	.ascii "BEEP"
      0022E2 19 91                    6 	.word beep 
      0022E4                       5782 	_dict_entry,3+F_IFUNC,ASC,ascii
      0022E4 22 DD                    1 	.word LINK 
                           0022E6     2 	LINK=.
      0022E6                          3 ASC:
      0022E6 43                       4 	.byte 3+F_IFUNC 	
      0022E7 41 53 43                 5 	.ascii "ASC"
      0022EA 1E 0F                    6 	.word ascii 
      0022EC                       5783 	_dict_entry,6+F_IFUNC,ANREAD,analog_read
      0022EC 22 E6                    1 	.word LINK 
                           0022EE     2 	LINK=.
      0022EE                          3 ANREAD:
      0022EE 46                       4 	.byte 6+F_IFUNC 	
      0022EF 41 4E 52 45 41 44        5 	.ascii "ANREAD"
      0022F5 1A 02                    6 	.word analog_read 
      0022F7                       5784 	_dict_entry,3+F_IFUNC,AND,bit_and
      0022F7 22 EE                    1 	.word LINK 
                           0022F9     2 	LINK=.
      0022F9                          3 AND:
      0022F9 43                       4 	.byte 3+F_IFUNC 	
      0022FA 41 4E 44                 5 	.ascii "AND"
      0022FD 1E D6                    6 	.word bit_and 
      0022FF                       5785 kword_dict:
      0022FF                       5786 	_dict_entry,3+F_IFUNC,ABS,abs
      0022FF 22 F9                    1 	.word LINK 
                           002301     2 	LINK=.
      002301                          3 ABS:
      002301 43                       4 	.byte 3+F_IFUNC 	
      002302 41 42 53                 5 	.ascii "ABS"
      002305 1E C0                    6 	.word abs 
                                   5787 	
                                   5788 
      002380                       5789 	.bndry 128 ; align on FLASH block.
                                   5790 ; free space for user application  
      002380                       5791 user_space:
                                   5792 ; USR() function test
      002380 89               [ 2] 5793 	pushw x 
      002381 72 1A 50 0A      [ 1] 5794 	bset PC_ODR,#5 
      002385 85               [ 2] 5795 	popw x 
      002386 CD 1E B1         [ 4] 5796 	call pause02 
      002389 72 1B 50 0A      [ 1] 5797 	bres PC_ODR,#5 
      00238D 81               [ 4] 5798 	ret
                                   5799 
                                   5800 	.area FLASH_DRIVE (ABS)
      010000                       5801 	.org 0x10000
      010000                       5802 fdrive:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                   5803 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002301 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   5 AND        0022F9 R
  5 ANREAD     0022EE R   |     ARG_CNT =  000001     |     ARG_OFS =  000002 
  5 ASC        0022E6 R   |     ATTRIB  =  000002     |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |   5 BEEP       0022DD R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BLOCK_ER=  000000     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  000005 
  5 BREAK      0022D3 R   |   5 BRES       0022CA R   |   5 BSET       0022C1 R
    BSIZE   =  000001     |     BSP     =  000008     |   5 BTEST      0022B7 R
  5 BTOGL      0022AD R   |     BTW     =  000001     |     BUFIDX  =  000003 
  5 BYE        0022A5 R   |     C       =  000001     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELL_SIZ=  000002     |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   5 CHAR       00229C R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMD_END =  000002 
    CNT     =  000008     |     COMMA   =  000001     |     COUNT   =  000001 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  5 CRH        002294 R   |   5 CRL        00228C R   |     CTRL_A  =  000001 
    CTRL_B  =  000002     |     CTRL_C  =  000003     |     CTRL_D  =  000004 
    CTRL_E  =  000005     |     CTRL_F  =  000006     |     CTRL_G  =  000007 
    CTRL_H  =  000008     |     CTRL_I  =  000009     |     CTRL_J  =  00000A 
    CTRL_K  =  00000B     |     CTRL_L  =  00000C     |     CTRL_M  =  00000D 
    CTRL_N  =  00000E     |     CTRL_O  =  00000F     |     CTRL_P  =  000010 
    CTRL_Q  =  000011     |     CTRL_R  =  000012     |     CTRL_S  =  000013 
    CTRL_T  =  000014     |     CTRL_U  =  000015     |     CTRL_V  =  000016 
    CTRL_W  =  000017     |     CTRL_X  =  000018     |     CTRL_Y  =  000019 
    CTRL_Z  =  00001A     |     CTXT_SIZ=  000006     |     CURR    =  000002 
    CX_BPTR =  000001     |     CX_CNT  =  000005     |     CX_IN   =  000004 
    CX_LNO  =  000003     |     DBG_A   =  000005     |     DBG_CC  =  000006 
    DBG_X   =  000003     |     DBG_Y   =  000001     |   5 DDR        002284 R
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  5 DEC        00227C R   |     DEST    =  000001     |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   5 DIR        002274 R   |     DIVIDND =  000007 
    DIVISR  =  000005     |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  5 DREAD      00226A R   |     DSTACK_S=  000040     |   5 DWRITE     00225F R
  5 EEPROM     002254 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |     EOF     =  0000FF     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_L=  000005 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |   5 FCPU       00224B R   |     FF      =  00000C 
    FFOR    =  000002     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   5 FOR        002243 R
  5 FORGET     002238 R   |     FRUN    =  000000     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FTRAP   =  000001     |     F_CFUNC =  000080 
    F_CMD   =  000000     |     F_CONST =  0000C0     |     F_IFUNC =  000040 
  5 GOSUB      00222E R   |     GOS_RET =  000003     |   5 GOTO       002225 R
  5 GPIO       00221C R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   5 HEX        002214 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   5 IDR        00220C R   |   5 IF         002205 R
    IN      =  000007     |     INCR    =  000001     |     INP     =  000000 
  5 INPUT      0021FB R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  000003     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  5 KEY        0021F3 R   |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000005     |   5 LET        0021EB R   |     LINENO  =  000005 
  5 LINK    =  002301 R   |   5 LIST       0021E2 R   |     LL      =  000002 
    LLEN    =  000002     |     LL_HB   =  000001     |     LNO     =  000005 
    LN_PTR  =  000005     |   5 LOAD       0021D9 R   |   5 LSHIFT     0021CE R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MINOR   =  000000     |     MULOP   =  000005     |     N1      =  000001 
    N1_HB   =  000006     |     N1_LB   =  000007     |     N2      =  000003 
    N2_HB   =  000008     |     N2_LB   =  000009     |     NAFR    =  004804 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        0021BD R   |   5 NEXT       0021C5 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NL      =  00000A     |     NLEN    =  000001 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R
  5 ODR        0021B5 R   |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         0021AE R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000028     |   5 PAUSE      0021A4 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       002191 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       002188 R   |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      00219A R
  5 POKE       00217F R   |   5 POUT       002176 R   |     PREV    =  000001 
  5 PRINT      00216C R   |     PROD    =  000002     |     PSIZE   =  000001 
  5 PWRADC     002161 R   |   5 QKEY       002158 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 REBOOT     00214D R
  5 REG_A      000937 R   |   5 REG_CC     00093B R   |   5 REG_EPC    00092A R
  5 REG_SP     000940 R   |   5 REG_X      000933 R   |   5 REG_Y      00092F R
    RELOP   =  000005     |   5 REMARK     002142 R   |     RETL1   =  000001 
  5 RETURN     002137 R   |   5 RND        00212F R   |     ROP     =  004800 
  5 RSHIFT     002124 R   |     RST_SR  =  0050B3     |   5 RUN        00211C R
    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       002113 R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       00210A R   |     SIGN    =  000001 
  5 SIZE       002101 R   |     SKIP    =  000006     |   5 SLEEP      0020F7 R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     0008ED R   |   5 STEP       0020EE R
  5 STOP       0020E5 R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      0020DB R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000002     |     TK_CFUNC=  000008     |     TK_CHAR =  000003 
    TK_CMD  =  000006     |     TK_COLON=  000001     |     TK_COMMA=  00000D 
    TK_CONST=  000009     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000007     |     TK_INTGR=  000004 
    TK_LE   =  000036     |     TK_LPARE=  00000B     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  00000A     |     TK_RPARE=  00000C     |     TK_SHARP=  00000E 
    TK_VAR  =  000005     |   5 TO         0020D4 R   |   5 Timer4Up   000019 R
  5 TrapHand   00000A R   |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]

Symbol Table

    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     0020C9 R   |   5 UFLASH     0020BE R
  5 USER_ABO   00007E R   |   5 USR        0020B6 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   5 UserButt   000025 R
    VSIZ    =  000002     |     VSIZE   =  000002     |     VT      =  00000B 
  5 WAIT       0020AD R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      0020A3 R   |   5 WRITE      002099 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XADR    =  000001     |     XMASK   =  000001 
  5 XOR        002091 R   |     XSAVE   =  000003     |     YSAVE   =  000003 
  5 abs        001EC0 R   |   1 acc16      000008 R   |   1 acc24      000007 R
  1 acc8       000009 R   |   5 accept_c   000AE1 R   |   5 add        001074 R
  5 analog_r   001A02 R   |   5 ansi_seq   000AA3 R   |   5 arduino_   001FCB R
  5 arg_list   0011B3 R   |   1 array_si   00001D R   |   5 ascii      001E0F R
  5 at_tst     000DAE R   |   5 atoi24     000EC1 R   |   5 atoi_exi   000F2F R
  5 bad_port   001E6A R   |   1 base       000006 R   |   1 basicptr   000004 R
  5 beep       001991 R   |   5 bin_exit   000CB2 R   |   5 bit_and    001ED6 R
  5 bit_or     001EF4 R   |   5 bit_rese   00174E R   |   5 bit_set    00173A R
  5 bit_test   001777 R   |   5 bit_togg   001763 R   |   5 bit_xor    001F12 R
  5 bkslsh_t   000D59 R   |   5 bksp       0001C2 R   |   5 break      001AA9 R
  5 break_po   001AD7 R   |   5 bye        001E93 R   |   5 char       001DFB R
  5 check_fu   0003E5 R   |   5 clear_ba   0005E6 R   |   5 clear_va   0004EF R
  5 clock_in   000099 R   |   5 cmd_itf    000B05 R   |   5 cmd_name   00111F R
  5 cmp_name   001B4B R   |   5 cold_sta   000554 R   |   5 colon_ts   000D82 R
  5 comma_ts   000D8D R   |   5 compile    0003F4 R   |   5 convert_   000C3A R
  1 count      000003 R   |   5 cp_loop    001162 R   |   5 create_g   000344 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]

Symbol Table

  5 cstk_pro   00103E R   |   5 dash_tst   000DA3 R   |   5 ddrop      000FBA R
  5 ddrop_n    000FF7 R   |   5 ddup       000FC3 R   |   5 dec_base   001367 R
  5 del_back   000AD2 R   |   5 del_line   00030C R   |   5 del_ln     000AC3 R
  5 delete     0001D2 R   |   5 digital_   001A38 R   |   5 digital_   001A6A R
  5 dir_loop   001D3A R   |   5 director   001D2E R   |   5 divide     0010CA R
  5 divu24_8   000A30 R   |   5 dotr       001047 R   |   5 dotr_loo   00105C R
  5 dots       001014 R   |   5 dpick      000FD4 R   |   5 dpop       000F93 R
  5 dpush      000F86 R   |   5 drive_fr   001DB7 R   |   3 dstack     001740 R
  3 dstack_u   001780 R   |   5 dstk_pro   00100A R   |   1 dstkptr    000016 R
  5 dswap      000FA0 R   |   5 eql_tst    000E0E R   |   5 equal      0015F7 R
  5 err_bad_   0006C3 R   |   5 err_cmd_   000684 R   |   5 err_div0   000646 R
  5 err_dupl   00069F R   |   5 err_math   00062C R   |   5 err_mem_   00060F R
  5 err_msg    0005F7 R   |   5 err_no_a   0006D0 R   |   5 err_no_l   000656 R
  5 err_not_   0006B1 R   |   5 err_run_   00066D R   |   5 err_synt   00061D R
  5 escaped    000C4F R   |   5 expect     0011A6 R   |   5 expr_exi   0012F8 R
  5 expressi   0012B7 R   |   5 factor     00120E R   |   1 farptr     000010 R
  5 fcpu       001F6A R   |   7 fdrive     010000 R   |   5 fetch      000FE3 R
  5 fetchc     000BF2 R   |   1 ffree      000013 R   |   5 file_cou   001DAF R
  5 final_te   000A9D R   |   5 first_li   0013EB R   |   1 flags      00001F R
  5 for        0017DC R   |   5 forget     001CE3 R   |   1 free_ram   000055 R
  5 func_arg   0011D7 R   |   5 ge         0015F9 R   |   5 get_arra   0011E7 R
  5 get_tick   001EBA R   |   5 get_toke   000CF4 R   |   5 getc       0001AF R
  5 go_commo   0018FD R   |   5 gosub      0018DA R   |   5 goto       0018CD R
  5 gpio       001E3C R   |   5 gt         0015F5 R   |   5 gt_tst     000E19 R
  5 hex_base   001362 R   |   5 hse_cloc   00018F R   |   5 hsi_cloc   000199 R
  5 if         0017C8 R   |   1 in         000001 R   |   1 in.saved   000002 R
  1 in.w       000000 R   |   5 incr_far   001B00 R   |   5 input_ex   001706 R
  5 input_lo   0016A1 R   |   5 input_va   001695 R   |   5 insert_l   00037D R
  5 insert_l   0003E2 R   |   5 interp     000784 R   |   5 interp_l   0007C4 R
  5 invalid    000B4A R   |   5 invalid_   000BC8 R   |   5 is_alpha   0004FD R
  5 is_digit   000EAC R   |   5 itoa       0009E9 R   |   5 itoa_loo   000A01 R
  5 key        001E2A R   |   5 kword_di   0022FF R   |   5 kword_en   00208F R
  5 last_lin   0013F4 R   |   5 le         0015FE R   |   5 ledoff     00083D R
  5 ledon      000838 R   |   5 ledtoggl   000842 R   |   5 left_arr   000AA3 R
  5 left_par   00084B R   |   5 let        001398 R   |   5 let02      0013A2 R
  5 lines_sk   0013F9 R   |   5 list       0013C0 R   |   5 list_exi   001440 R
  5 list_sta   00141C R   |   5 load       001C7B R   |   5 loop_bac   0018A6 R
  1 loop_dep   00001C R   |   5 loop_don   0018BB R   |   5 lshift     001F30 R
  5 lt         0015FC R   |   5 lt_tst     000E52 R   |   5 mem_peek   000B67 R
  5 modulo     00110E R   |   5 move       0002A6 R   |   5 move_dow   0002C4 R
  5 move_exi   0002E5 R   |   5 move_loo   0002C9 R   |   5 move_up    0002B6 R
  5 mul_char   0015E6 R   |   5 multiply   001082 R   |   5 mulu24_8   000F33 R
  5 nbr_tst    000D2F R   |   5 ne         001601 R   |   5 neg_acc2   000A58 R
  5 new        001AF5 R   |   5 next       00185E R   |   5 next_tok   0007F4 R
  5 no_match   001174 R   |   5 none       000CF4 R   |   5 number     000BF8 GR
  5 other      000E8A R   |   3 pad        001718 R   |   5 parse_bi   000C92 R
  5 parse_in   000C57 R   |   5 parse_ke   000CBA R   |   5 parse_qu   000BFF R
  5 pause      001EA7 R   |   5 pause02    001EB1 R   |   5 peek       0017B5 R
  5 peek_byt   000B92 R   |   5 pin_mode   001F76 R   |   5 plus_tst   000DE2 R
  5 poke       0017A2 R   |   5 power_ad   0019B9 R   |   5 prcnt_ts   000E03 R
  5 print      001604 R   |   5 print_ex   001669 R   |   5 print_fa   000BD7 R
  5 print_in   00098D R   |   5 print_re   00089A R   |   5 print_st   000B5A R
  5 prt_basi   001493 R   |   5 prt_cmd_   001443 R   |   5 prt_loop   001608 R
  5 prt_peek   000256 R   |   5 prt_quot   001457 R   |   5 prt_reg1   00087B R
  5 prt_reg8   000856 R   |   5 prt_regs   0001EC R   |   5 prti24     000945 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]

Symbol Table

  1 ptr16      000011 R   |   1 ptr8       000012 R   |   5 putc       0001A6 R
  5 puts       0001B8 R   |   5 qkey       001E32 R   |   5 qmark_ts   000DB9 R
  5 random     001FEB R   |   5 readln     000A7B R   |   5 readln_l   000A81 R
  5 readln_q   000AF6 R   |   5 regs_sta   00022F R   |   5 rel_exit   00134F R
  5 relation   0012FB R   |   5 relop_st   0015E9 R   |   5 rem        001709 R
  5 repl       000B13 R   |   5 repl_exi   000B3B R   |   5 reprint    000AA3 R
  5 reset_co   001606 R   |   5 rest_con   001685 R   |   5 return     00191F R
  5 right_ar   000AA3 R   |   5 rparnt_t   000D77 R   |   5 rshift     001F4D R
  5 rt_msg     000704 R   |   5 run        00193F R   |   5 save       001BB7 R
  5 save_con   001675 R   |   5 search_d   001151 R   |   5 search_e   0011A2 R
  5 search_f   001B6C R   |   5 search_l   0002E8 R   |   5 search_l   0002F0 R
  5 search_n   001155 R   |   1 seedx      00000C R   |   1 seedy      00000E R
  5 seek_fdr   001B0E R   |   5 select_p   001FBB R   |   5 sharp_ts   000D98 R
  5 show       001352 R   |   5 single_c   0015E2 R   |   5 size       00136C R
  5 skip       000F6D R   |   5 slash_ts   000DF8 R   |   5 sleep      001E9C R
  5 software   00050E R   |   5 spaces     0001E0 R   |   3 stack_fu   001780 R
  3 stack_un   001800 R   |   5 star_tst   000DED R   |   5 step       001836 R
  5 stop       001982 R   |   5 store      000FED R   |   5 store_lo   001848 R
  5 str_matc   001183 R   |   5 str_tst    000D1E R   |   5 strcmp     000287 R
  5 strcpy     000298 R   |   5 strlen     00027A R   |   5 substrac   00107C R
  5 syntax_e   000714 R   |   1 tab_widt   000020 R   |   5 tb_error   000716 R
  5 term       00126A R   |   5 term01     001273 R   |   5 term_exi   0012B4 R
  5 test_p     000B52 R   |   3 tib        0016C8 R   |   5 tick_tst   000DD0 R
  1 ticks      00000A R   |   5 timer4_i   0000AF R   |   5 to         001806 R
  5 to_upper   000EB5 GR  |   5 token_ch   000E99 R   |   5 token_ex   000EA9 R
  1 txtbgn     000018 R   |   1 txtend     00001A R   |   5 uart3_in   000178 R
  5 uart3_se   000188 R   |   5 uart_ena   0001A1 R   |   5 ubound     001376 R
  5 uflash     001E6F R   |   5 unget_to   000F80 R   |   5 unlock_e   0000C4 R
  5 unlock_f   0000D2 R   |   5 user_spa   002380 R   |   5 usr        001E75 R
  1 vars       000021 R   |   5 wait       00170F R   |   5 warm_sta   000768 R
  5 words      002055 R   |   5 write      001DC4 R   |   5 write_bl   000155 R
  5 write_by   0000E0 R   |   5 write_ee   00011C R   |   5 write_ex   000150 R
  5 write_fl   000106 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     55   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   238E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

