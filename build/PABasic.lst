ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26 
                                     27 
                                     28 
                                     29     .module TBI_STM8
                                     30 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "pab_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bits 7:6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                            
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                        
                                            .macro _usec_dly n 
                                            
                                        ;---------------------------------------
                                        ;  data stack macros 
                                        ;---------------------------------------
                                 
                                        
                                            ; move dp up 1 element 
                                            .macro _dp_up 
                                        
                                            ;move dp down 1 element
                                            .macro _dp_down 
                                        
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                     37     .list 
                                     38 
      000000                         39 _dbg 
                           000001     1     DEBUG=1
                                     40 
                                     41 ;--------------------------------------
                                     42     .area DATA 
                                     43 ;--------------------------------------	
                                     44 
                           000050    45 	TIB_SIZE=80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                           000028    46     PAD_SIZE=40
                           000040    47 	DSTACK_SIZE=64 
                           000080    48 	STACK_SIZE=128
                           0017FF    49 	STACK_EMPTY=RAM_SIZE-1  
                           000000    50 	FRUN=0 ; flags run code in variable flags
                           000001    51 	FTRAP=1 ; inside trap handler 
                           000002    52 	FFOR=2 ; FOR loop in preparation 
                           000003    53 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    54 	FBREAK=4 ; break point flag 
                           000005    55 	FCOMP=5  ; compiling flags 
                                     56 
      000000                         57 in.w:  .blkb 1 ; parser position in text line
      000001                         58 in:    .blkb 1 ; low byte of in.w
      000002                         59 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         60 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         61 basicptr:  .blkb 2  ; point to current BASIC line 
      000006                         62 base:  .blkb 1 ; nemeric base used to print integer 
      000007                         63 acc24: .blkb 1 ; 24 bit accumulator
      000008                         64 acc16: .blkb 1 ; 16 bit accumulator, middle byte of acc24
      000009                         65 acc8:  .blkb 1 ;  8 bit accumulator, least byte of acc24 
      00000A                         66 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      00000C                         67 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      00000E                         68 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000010                         69 farptr: .blkb 1 ; 24 bits pointer used by file system
      000011                         70 ptr16:  .blkb 1 ; 16 bits pointer ,  middle byte of farptr
      000012                         71 ptr8:   .blkb 1 ; 8 bits pointer, least byte of farptr 
      000013                         72 ffree: .blkb 3 ; flash free address ; file system free space pointer
      000016                         73 dstkptr: .blkw 1  ; data stack pointer 
      000018                         74 txtbgn: .ds 2 ; tokenized BASIC text beginning address 
      00001A                         75 txtend: .ds 2 ; tokenized BASIC text end address 
      00001C                         76 loop_depth: .ds 1 ; FOR loop depth, level of nested loop. Conformity check   
      00001D                         77 array_size: .ds 2 ; array size 
      00001F                         78 flags: .ds 1 ; various boolean flags
      000020                         79 tab_width: .ds 1 ; print colon width (4)
      000021                         80 vars: .ds 2*26 ; BASIC variables A-Z, keep it as but last .
                                     81 ; keep as last variable 
      000055                         82 free_ram: ; from here RAM free for BASIC text 
                                     83 
                                     84 ;-----------------------------------
                                     85     .area SSEG (ABS)
                                     86 ;-----------------------------------	
      0016C8                         87     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE-DSTACK_SIZE 
      0016C8                         88 tib: .ds TIB_SIZE             ; transaction input buffer
      001718                         89 pad: .ds PAD_SIZE             ; working buffer
      001740                         90 dstack: .ds DSTACK_SIZE 	  ; data stack used by FOR...NEXT 
      001780                         91 dstack_unf: ; dstack underflow ; data stack bottom 
      001780                         92 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         93 stack_unf: ; stack underflow ; control_stack bottom 
                                     94 
                                     95 
                                     96 ;--------------------------------------
                                     97     .area HOME 
                                     98 ;--------------------------------------
      000000 82 00 05 4C             99     int cold_start
                           000001   100 .if DEBUG
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000004 82 00 00 0A            101 	int TrapHandler 		;TRAP  software interrupt
                           000000   102 .else
                                    103 	int NonHandledInterrupt ;TRAP  software interrupt
                                    104 .endif
      000008 82 00 00 09            105 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 09            106 	int NonHandledInterrupt ;int1 AWU   auto wake up from halt
      000010 82 00 00 09            107 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 09            108 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 09            109 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 09            110 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 09            111 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 25            112 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 09            113 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 09            114 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 09            115 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 09            116 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 09            117 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 09            118 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 09            119 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 09            120 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 09            121 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 09            122 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 09            123 	int NonHandledInterrupt ;int18 UART1 RX full
      000054 82 00 00 09            124 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 09            125 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 09            126 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 09            127 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 19            128 	int Timer4UpdateHandler	;int23 TIM4 update/overflow used as msec ticks counter
      000068 82 00 00 09            129 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 09            130 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 09            131 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 09            132 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 09            133 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 09            134 	int NonHandledInterrupt ;int29  not used
                                    135 
                                    136 ;---------------------------------------
                                    137     .area CODE
                                    138 ;---------------------------------------
                           000001   139 .if DEBUG
      000000 53 54 4D 38 5F 54 42   140 .asciz "STM8_TBI" ; I like to put module name here.
             49 00
                                    141 .endif 
                                    142 
      000009                        143 NonHandledInterrupt:
      000009 71                     144     .byte 0x71  ; reinitialize MCU
                                    145 
                                    146 
                                    147 ;------------------------------------
                                    148 ; software interrupt handler  
                                    149 ;------------------------------------
                           000001   150 .if DEBUG 
      00000A                        151 TrapHandler:
      00000A 72 12 00 1F      [ 1]  152 	bset flags,#FTRAP 
      00000E CD 08 85         [ 4]  153 	call print_registers
      000011 CD 0A F0         [ 4]  154 	call cmd_itf
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000014 72 13 00 1F      [ 1]  155 	bres flags,#FTRAP 	
      000018 80               [11]  156 	iret
                                    157 .endif 
                                    158 
      000019                        159 Timer4UpdateHandler:
      000019 72 5F 53 42      [ 1]  160 	clr TIM4_SR 
      00001D CE 00 0A         [ 2]  161 	ldw x,ticks
      000020 5C               [ 1]  162 	incw x
      000021 CF 00 0A         [ 2]  163 	ldw ticks,x 
      000024 80               [11]  164 	iret 
                                    165 
                                    166 
                                    167 ;------------------------------------
                                    168 ; Triggered by pressing USER UserButton 
                                    169 ; on NUCLEO card.
                                    170 ;------------------------------------
      000025                        171 UserButtonHandler:
                                    172 ; wait button release
      000025 5F               [ 1]  173 	clrw x
      000026 5A               [ 2]  174 1$: decw x 
      000027 26 FD            [ 1]  175 	jrne 1$
      000029 72 09 50 15 F8   [ 2]  176 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    177 ; if MCU suspended by SLEEP resume program
      00002E 72 07 00 1F 05   [ 2]  178     btjf flags,#FSLEEP,2$
      000033 72 17 00 1F      [ 1]  179 	bres flags,#FSLEEP 
      000037 80               [11]  180 	iret
      000038 72 00 00 1F 03   [ 2]  181 2$:	btjt flags,#FRUN,4$
      00003D CC 00 76         [ 2]  182 	jp 9$ 
      000040                        183 4$:	; program interrupted by user 
      000040 72 11 00 1F      [ 1]  184 	bres flags,#FRUN 
      000044 AE 00 7E         [ 2]  185 	ldw x,#USER_ABORT
      000047 CD 01 B0         [ 4]  186 	call puts 
      00004A CE 00 04         [ 2]  187 	ldw x,basicptr
      00004D FE               [ 2]  188 	ldw x,(x)
                                    189 ; print line number 
      00004E 35 0A 00 06      [ 1]  190 	mov base,#10 
      000052 35 06 00 20      [ 1]  191 	mov tab_width,#6
      000056 CD 09 78         [ 4]  192 	call print_int  	
      000059 CE 00 04         [ 2]  193 	ldw x,basicptr 
      00005C 1C 00 03         [ 2]  194 	addw x,#3  
      00005F CD 01 B0         [ 4]  195 	call puts 
      000062 A6 0D            [ 1]  196 	ld a,#CR 
      000064 CD 01 9E         [ 4]  197 	call putc
      000067 5F               [ 1]  198 	clrw x  
      000068 C6 00 01         [ 1]  199 	ld a,in 
      00006B AB 03            [ 1]  200 	add a,#3 ; adjustment for line number display 
      00006D 97               [ 1]  201 	ld xl,a 
      00006E CD 01 D8         [ 4]  202 	call spaces 
      000071 A6 5E            [ 1]  203 	ld a,#'^
      000073 CD 01 9E         [ 4]  204 	call putc 
      000076                        205 9$:
      000076 AE 17 FF         [ 2]  206     ldw x,#STACK_EMPTY 
      000079 94               [ 1]  207     ldw sp,x
      00007A 9A               [ 1]  208 	rim 
      00007B CC 07 53         [ 2]  209 	jp warm_start
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    210 
      00007E 0A 50 72 6F 67 72 61   211 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    212 
                                    213 
                                    214 ;----------------------------------------
                                    215 ; inialize MCU clock 
                                    216 ; input:
                                    217 ;   A 		source  HSI | 1 HSE 
                                    218 ;   XL      CLK_CKDIVR , clock divisor 
                                    219 ; output:
                                    220 ;   none 
                                    221 ;----------------------------------------
      000099                        222 clock_init:	
      000099 C1 50 C3         [ 1]  223 	cp a,CLK_CMSR 
      00009C 27 0C            [ 1]  224 	jreq 2$ ; no switching required 
                                    225 ; select clock source 
      00009E 72 12 50 C5      [ 1]  226 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A2 C7 50 C4         [ 1]  227 	ld CLK_SWR,a
      0000A5 C1 50 C3         [ 1]  228 1$:	cp a,CLK_CMSR
      0000A8 26 FB            [ 1]  229 	jrne 1$
      0000AA                        230 2$: 	
                                    231 ; HSI and cpu clock divisor 
      0000AA 9F               [ 1]  232 	ld a,xl 
      0000AB C7 50 C6         [ 1]  233 	ld CLK_CKDIVR,a  
      0000AE 81               [ 4]  234 	ret
                                    235 
                                    236 ;---------------------------------
                                    237 ; TIM4 is configured to generate an 
                                    238 ; interrupt every millisecond 
                                    239 ;----------------------------------
      0000AF                        240 timer4_init:
      0000AF 35 07 53 45      [ 1]  241 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B3 35 7D 53 46      [ 1]  242 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B7 35 05 53 40      [ 1]  243 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BB 72 10 53 41      [ 1]  244 	bset TIM4_IER,#TIM4_IER_UIE 
      0000BF 81               [ 4]  245 	ret
                                    246 
                                    247 ;----------------------------------
                                    248 ; unlock EEPROM for writing/erasing
                                    249 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    250 ; input:
                                    251 ;  none
                                    252 ; output:
                                    253 ;  none 
                                    254 ;----------------------------------
      0000C0                        255 unlock_eeprom:
      0000C0 35 AE 50 64      [ 1]  256 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000C4 35 56 50 64      [ 1]  257     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000C8 72 07 50 5F FB   [ 2]  258 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000CD 81               [ 4]  259 	ret
                                    260 
                                    261 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    262 ; unlock FLASH for writing/erasing
                                    263 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    264 ; input:
                                    265 ;  none
                                    266 ; output:
                                    267 ;  none
                                    268 ;----------------------------------
      0000CE                        269 unlock_flash:
      0000CE 35 56 50 62      [ 1]  270 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000D2 35 AE 50 62      [ 1]  271 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000D6 72 03 50 5F FB   [ 2]  272 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000DB 81               [ 4]  273 	ret
                                    274 
                           000000   275 	BLOCK_ERASE=0
                                    276 ;----------------------------
                                    277 ; erase block code must be 
                                    278 ;executed from RAM
                                    279 ;-----------------------------
                           000000   280 .if BLOCK_ERASE 
                                    281 ; this code is copied to RAM 
                                    282 erase_start:
                                    283 	clr a 
                                    284     bset FLASH_CR2,#FLASH_CR2_ERASE
                                    285     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    286 	ldf [farptr],a
                                    287     inc farptr+2 
                                    288     ldf [farptr],a
                                    289     inc farptr+2 
                                    290     ldf [farptr],a
                                    291     inc farptr+2 
                                    292     ldf [farptr],a
                                    293 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    294 	ret
                                    295 erase_end:
                                    296 
                                    297 ; copy erase_start in RAM 
                                    298 move_code_in_ram:
                                    299 	ldw x,#erase_end 
                                    300 	subw x,#erase_start
                                    301 	ldw acc16,x 
                                    302 	ldw x,#pad 
                                    303 	ldw y,#erase_start 
                                    304 	call move 
                                    305 	ret 
                                    306 
                                    307 ;-----------------------------------
                                    308 ; erase flash or EEPROM block 
                                    309 ; a block is 128 bytes 
                                    310 ; input:
                                    311 ;   farptr  address block begin
                                    312 ; output:
                                    313 ;   none
                                    314 ;--------------------------------------
                                    315 erase_block:
                                    316 	ldw x,farptr+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    317 	pushw x 
                                    318 	call move_code_in_ram 
                                    319 	popw x 
                                    320 	ldw farptr+1,x 
                                    321 	tnz farptr
                                    322 	jrne erase_flash 
                                    323 	ldw x,#FLASH_BASE 
                                    324 	cpw x,farptr+1 
                                    325 	jrpl erase_flash 
                                    326 ; erase eeprom block
                                    327 	call unlock_eeprom 
                                    328 	sim 
                                    329 	call pad   
                                    330 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    331 	rim 
                                    332 	ret 
                                    333 ; erase flash block:
                                    334 erase_flash:
                                    335 	call unlock_flash 
                                    336 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    337 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    338 	clr a 
                                    339 	sim 
                                    340 	call pad 
                                    341     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    342 	rim 
                                    343 	ret 
                                    344 .endif ; BLOCK_ERASE 
                                    345 
                                    346 
                                    347 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    348 ; write a byte to FLASH or EEPROM 
                                    349 ; input:
                                    350 ;    a  		byte to write
                                    351 ;    farptr  	address
                                    352 ;    x          farptr[x]
                                    353 ; output:
                                    354 ;    none
                                    355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    356 	; variables locales
                           000001   357 	BTW = 1   ; byte to write offset on stack
                           000002   358 	OPT = 2   ; OPTION flag offset on stack
                           000002   359 	VSIZE = 2
      0000DC                        360 write_byte:
      0000DC 90 89            [ 2]  361 	pushw y
      0000DE                        362 	_vars VSIZE
      0000DE 52 02            [ 2]    1     sub sp,#VSIZE 
      0000E0 6B 01            [ 1]  363 	ld (BTW,sp),a ; byte to write 
      0000E2 0F 02            [ 1]  364 	clr (OPT,sp)  ; OPTION flag
                                    365 ; put addr[15:0] in Y, for bounds check.
      0000E4 90 CE 00 11      [ 2]  366 	ldw y,farptr+1   ; Y=addr15:0
                                    367 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000E8 72 5D 00 10      [ 1]  368 	tnz farptr 
      0000EC 26 14            [ 1]  369 	jrne write_flash
      0000EE 90 A3 21 80      [ 2]  370     cpw y,#user_space
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000F2 24 0E            [ 1]  371     jruge write_flash
      0000F4 90 A3 40 00      [ 2]  372 	cpw y,#EEPROM_BASE  
      0000F8 25 52            [ 1]  373     jrult write_exit
      0000FA 90 A3 48 00      [ 2]  374 	cpw y,#OPTION_BASE
      0000FE 25 18            [ 1]  375 	jrult write_eeprom
      000100 20 4A            [ 2]  376     jra write_exit
                                    377 ; write program memory
      000102                        378 write_flash:
      000102 CD 00 CE         [ 4]  379 	call unlock_flash 
      000105 9B               [ 1]  380 1$:	sim 
      000106 7B 01            [ 1]  381 	ld a,(BTW,sp)
      000108 92 A7 00 10      [ 4]  382 	ldf ([farptr],x),a ; farptr[x]=A
      00010C 72 05 50 5F FB   [ 2]  383 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000111 9A               [ 1]  384     rim 
      000112 72 13 50 5F      [ 1]  385     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000116 20 34            [ 2]  386     jra write_exit
                                    387 ; write eeprom and option
      000118                        388 write_eeprom:
      000118 CD 00 C0         [ 4]  389 	call unlock_eeprom
                                    390 	; check for data eeprom or option eeprom
      00011B 90 A3 48 00      [ 2]  391 	cpw y,#OPTION_BASE
      00011F 2B 08            [ 1]  392 	jrmi 1$
      000121 90 A3 48 80      [ 2]  393 	cpw y,#OPTION_END+1
      000125 2A 02            [ 1]  394 	jrpl 1$
      000127 03 02            [ 1]  395 	cpl (OPT,sp)
      000129                        396 1$: 
      000129 0D 02            [ 1]  397     tnz (OPT,sp)
      00012B 27 08            [ 1]  398     jreq 2$
                                    399 	; pour modifier une option il faut modifier ces 2 bits
      00012D 72 1E 50 5B      [ 1]  400     bset FLASH_CR2,#FLASH_CR2_OPT
      000131 72 1F 50 5C      [ 1]  401     bres FLASH_NCR2,#FLASH_CR2_OPT 
      000135                        402 2$: 
      000135 7B 01            [ 1]  403     ld a,(BTW,sp)
      000137 92 A7 00 10      [ 4]  404     ldf ([farptr],x),a
      00013B 0D 02            [ 1]  405     tnz (OPT,sp)
      00013D 27 08            [ 1]  406     jreq 3$
      00013F 5C               [ 1]  407     incw x
      000140 7B 01            [ 1]  408     ld a,(BTW,sp)
      000142 43               [ 1]  409     cpl a
      000143 92 A7 00 10      [ 4]  410     ldf ([farptr],x),a
      000147 72 05 50 5F FB   [ 2]  411 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00014C                        412 write_exit:
      00014C                        413 	_drop VSIZE 
      00014C 5B 02            [ 2]    1     addw sp,#VSIZE 
      00014E 90 85            [ 2]  414 	popw y
      000150 81               [ 4]  415     ret
                                    416 
                                    417 ;--------------------------------------------
                                    418 ; write a data block to eeprom or flash 
                                    419 ; input:
                                    420 ;   Y        source address   
                                    421 ;   X        array index  destination  farptr[x]
                                    422 ;   BSIZE    block size bytes 
                                    423 ;   farptr   write address , byte* 
                                    424 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    425 ;	X 		after last byte written 
                                    426 ;   Y 		after last byte read 
                                    427 ;  farptr   point after block
                                    428 ;---------------------------------------------
      000151                        429 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000151                        430 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    431 	; local var 
                           000001   432 	XSAVE=1 
                           000002   433 	VSIZE=2 
      000151                        434 write_block:
      000151                        435 	_vars VSIZE
      000151 52 02            [ 2]    1     sub sp,#VSIZE 
      000153 1F 01            [ 2]  436 	ldw (XSAVE,sp),x 
      000155 1E 05            [ 2]  437 	ldw x,(BSIZE,sp) 
      000157 27 13            [ 1]  438 	jreq 9$
      000159 1E 01            [ 2]  439 1$:	ldw x,(XSAVE,sp)
      00015B 90 F6            [ 1]  440 	ld a,(y)
      00015D CD 00 DC         [ 4]  441 	call write_byte 
      000160 5C               [ 1]  442 	incw x 
      000161 90 5C            [ 1]  443 	incw y 
      000163 1F 01            [ 2]  444 	ldw (XSAVE,sp),x
      000165 1E 05            [ 2]  445 	ldw x,(BSIZE,sp)
      000167 5A               [ 2]  446 	decw x
      000168 1F 05            [ 2]  447 	ldw (BSIZE,sp),x 
      00016A 26 ED            [ 1]  448 	jrne 1$
      00016C                        449 9$:
      00016C 1E 01            [ 2]  450 	ldw x,(XSAVE,sp)
      00016E CD 1A 68         [ 4]  451 	call incr_farptr
      000171                        452 	_drop VSIZE
      000171 5B 02            [ 2]    1     addw sp,#VSIZE 
      000173 81               [ 4]  453 	ret 
                                    454 
                                    455 
                                    456 ;---------------------------------------------
                                    457 ;   UART3 subroutines
                                    458 ;---------------------------------------------
                                    459 
                                    460 ;---------------------------------------------
                                    461 ; initialize UART3, 115200 8N1
                                    462 ; input:
                                    463 ;	none
                                    464 ; output:
                                    465 ;   none
                                    466 ;---------------------------------------------
      000174                        467 uart3_init:
                                    468 	; configure tx pin
      000174 72 1A 50 11      [ 1]  469 	bset PD_DDR,#BIT5 ; tx pin
      000178 72 1A 50 12      [ 1]  470 	bset PD_CR1,#BIT5 ; push-pull output
      00017C 72 1A 50 13      [ 1]  471 	bset PD_CR2,#BIT5 ; fast output
      000180                        472 uart3_set_baud: 
                                    473 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    474 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000180 A6 E1            [ 1]  475 	ld a,#CLK_SWR_HSI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000182 C1 50 C3         [ 1]  476 	cp a,CLK_CMSR 
      000185 27 0A            [ 1]  477 	jreq hsi_clock 
      000187                        478 hse_clock: ; 8 Mhz 	
      000187 35 05 52 43      [ 1]  479 	mov UART3_BRR2,#0x05 ; must be loaded first
      00018B 35 04 52 42      [ 1]  480 	mov UART3_BRR1,#0x4
      00018F 20 08            [ 2]  481 	jra uart_enable
      000191                        482 hsi_clock: ; 16 Mhz 	
      000191 35 0B 52 43      [ 1]  483 	mov UART3_BRR2,#0x0b ; must be loaded first
      000195 35 08 52 42      [ 1]  484 	mov UART3_BRR1,#0x08
      000199                        485 uart_enable:	
      000199 35 0C 52 45      [ 1]  486 	mov UART3_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));
      00019D 81               [ 4]  487 	ret
                                    488 	
                                    489 ;---------------------------------
                                    490 ; send character to UART3 
                                    491 ; input:
                                    492 ;   A 
                                    493 ; output:
                                    494 ;   none 
                                    495 ;--------------------------------	
      00019E                        496 putc:
      00019E 72 0F 52 40 FB   [ 2]  497 	btjf UART3_SR,#UART_SR_TXE,.
      0001A3 C7 52 41         [ 1]  498 	ld UART3_DR,a 
      0001A6 81               [ 4]  499 	ret 
                                    500 
                                    501 ;---------------------------------
                                    502 ; wait character from UART3 
                                    503 ; input:
                                    504 ;   none
                                    505 ; output:
                                    506 ;   A 			char  
                                    507 ;--------------------------------	
      0001A7                        508 getc:
      0001A7 72 0B 52 40 FB   [ 2]  509 	btjf UART3_SR,#UART_SR_RXNE,.
      0001AC C6 52 41         [ 1]  510 	ld a,UART3_DR 
      0001AF 81               [ 4]  511 	ret 
                                    512 
                                    513 ;-----------------------------
                                    514 ; send an ASCIZ string to UART3 
                                    515 ; input: 
                                    516 ;   x 		char * 
                                    517 ; output:
                                    518 ;   none 
                                    519 ;-------------------------------
      0001B0                        520 puts:
      0001B0 F6               [ 1]  521     ld a,(x)
      0001B1 27 06            [ 1]  522 	jreq 1$
      0001B3 CD 01 9E         [ 4]  523 	call putc 
      0001B6 5C               [ 1]  524 	incw x 
      0001B7 20 F7            [ 2]  525 	jra puts 
      0001B9 81               [ 4]  526 1$:	ret 
                                    527 
                                    528 
                                    529 ;---------------------------
                                    530 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    531 ; of cursor on terminal 
                                    532 ; input:
                                    533 ;   none 
                                    534 ; output:
                                    535 ;	none 
                                    536 ;---------------------------
      0001BA                        537 bksp:
      0001BA A6 08            [ 1]  538 	ld a,#BSP 
      0001BC CD 01 9E         [ 4]  539 	call putc 
      0001BF A6 20            [ 1]  540 	ld a,#SPACE 
      0001C1 CD 01 9E         [ 4]  541 	call putc 
      0001C4 A6 08            [ 1]  542 	ld a,#BSP 
      0001C6 CD 01 9E         [ 4]  543 	call putc 
      0001C9 81               [ 4]  544 	ret 
                                    545 ;---------------------------
                                    546 ; delete n character left of cursor 
                                    547 ; at terminal.
                                    548 ; input: 
                                    549 ;   A   	number of characters to delete.
                                    550 ; output:
                                    551 ;    none 
                                    552 ;--------------------------	
      0001CA                        553 delete:
      0001CA 88               [ 1]  554 	push a 
      0001CB 0D 01            [ 1]  555 0$:	tnz (1,sp)
      0001CD 27 07            [ 1]  556 	jreq 1$
      0001CF CD 01 BA         [ 4]  557 	call bksp 
      0001D2 0A 01            [ 1]  558 	dec (1,sp)
      0001D4 20 F5            [ 2]  559 	jra 0$
      0001D6 84               [ 1]  560 1$:	pop a 
      0001D7 81               [ 4]  561 	ret
                                    562 
                                    563 ;--------------------------
                                    564 ; print n spaces on terminal
                                    565 ; input:
                                    566 ;  X 		number of spaces 
                                    567 ; output:
                                    568 ;	none 
                                    569 ;---------------------------
      0001D8                        570 spaces:
      0001D8 A6 20            [ 1]  571 	ld a,#SPACE 
      0001DA 5D               [ 2]  572 1$:	tnzw x
      0001DB 27 06            [ 1]  573 	jreq 9$
      0001DD CD 01 9E         [ 4]  574 	call putc 
      0001E0 5A               [ 2]  575 	decw x
      0001E1 20 F7            [ 2]  576 	jra 1$
      0001E3                        577 9$: 
      0001E3 81               [ 4]  578 	ret 
                                    579 
                           000001   580 .if DEBUG 
                                    581 ;---------------------------------
                                    582 ;; print actual registers states 
                                    583 ;; as pushed on stack 
                                    584 ;; {Y,X,CC,A}
                                    585 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E4                        586 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0001E4                        587 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0001E4                        588 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0001E4                        589 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0001E4                        590 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0001E4                        591 prt_regs:
      0001E4 AE 02 27         [ 2]  592 	ldw x,#regs_state 
      0001E7 CD 01 B0         [ 4]  593 	call puts
                                    594 ; register PC
      0001EA 16 01            [ 2]  595 	ldw y,(1,sp)
      0001EC AE 09 15         [ 2]  596 	ldw x,#REG_EPC 
      0001EF CD 08 66         [ 4]  597 	call prt_reg16 
                                    598 ; register CC 
      0001F2 7B 08            [ 1]  599 	ld a,(R_CC,sp)
      0001F4 AE 09 26         [ 2]  600 	ldw x,#REG_CC 
      0001F7 CD 08 41         [ 4]  601 	call prt_reg8 
                                    602 ; register A 
      0001FA 7B 07            [ 1]  603 	ld a,(R_A,sp)
      0001FC AE 09 22         [ 2]  604 	ldw x,#REG_A 
      0001FF CD 08 41         [ 4]  605 	call prt_reg8 
                                    606 ; register X 
      000202 16 05            [ 2]  607 	ldw y,(R_X,sp)
      000204 AE 09 1E         [ 2]  608 	ldw x,#REG_X 
      000207 CD 08 66         [ 4]  609 	call prt_reg16 
                                    610 ; register Y 
      00020A 16 03            [ 2]  611 	ldw y,(R_Y,sp)
      00020C AE 09 1A         [ 2]  612 	ldw x,#REG_Y 
      00020F CD 08 66         [ 4]  613 	call prt_reg16 
                                    614 ; register SP 
      000212 90 96            [ 1]  615 	ldw y,sp
      000214 72 A9 00 08      [ 2]  616 	addw y,#6+ARG_OFS  
      000218 AE 09 2B         [ 2]  617 	ldw x,#REG_SP
      00021B CD 08 66         [ 4]  618 	call prt_reg16
      00021E A6 0D            [ 1]  619 	ld a,#CR 
      000220 CD 01 9E         [ 4]  620 	call putc
      000223 CD 01 9E         [ 4]  621 	call putc   
      000226 81               [ 4]  622 	ret 
                                    623 
      000227 0A 72 65 67 69 73 74   624 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                    625 
                                    626 
                                    627 ;--------------------
                                    628 ; print content at address in hex.
                                    629 ; input:
                                    630 ;   X 	address to peek 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    631 ; output:
                                    632 ;	none 
                                    633 ;--------------------	
      00024E                        634 prt_peek:
      00024E 89               [ 2]  635 	pushw x 
      00024F CF 00 08         [ 2]  636 	ldw acc16,x 
      000252 72 5F 00 07      [ 1]  637 	clr acc24 
      000256 5F               [ 1]  638 	clrw x 
      000257 A6 10            [ 1]  639 	ld a,#16 
      000259 CD 09 30         [ 4]  640 	call prti24 
      00025C A6 3A            [ 1]  641 	ld a,#': 
      00025E CD 01 9E         [ 4]  642 	call putc 
      000261 A6 20            [ 1]  643 	ld a,#SPACE 
      000263 CD 01 9E         [ 4]  644 	call putc 
      000266 85               [ 2]  645 	popw x 
      000267 F6               [ 1]  646 	ld a,(x)
      000268 C7 00 09         [ 1]  647 	ld acc8,a 
      00026B 5F               [ 1]  648 	clrw x 
      00026C A6 10            [ 1]  649 	ld a,#16 
      00026E CD 09 30         [ 4]  650 	call prti24
      000271 81               [ 4]  651 	ret 
                                    652 .endif ; DEBUG  
                                    653 
                                    654 ;-------------------------------------
                                    655 ; retrun string length
                                    656 ; input:
                                    657 ;   X         .asciz  
                                    658 ; output:
                                    659 ;   X         length 
                                    660 ;-------------------------------------
      000272                        661 strlen:
      000272 90 93            [ 1]  662 	ldw y,x 
      000274 5F               [ 1]  663 	clrw x 
      000275 90 7D            [ 1]  664 1$:	tnz (y) 
      000277 27 05            [ 1]  665 	jreq 9$ 
      000279 5C               [ 1]  666 	incw x
      00027A 90 5C            [ 1]  667 	incw y 
      00027C 20 F7            [ 2]  668 	jra 1$ 
      00027E 81               [ 4]  669 9$: ret 
                                    670 
                                    671 ;------------------------------------
                                    672 ; compare 2 strings
                                    673 ; input:
                                    674 ;   X 		char* first string 
                                    675 ;   Y       char* second string 
                                    676 ; output:
                                    677 ;   A 		0|1 
                                    678 ;-------------------------------------
      00027F                        679 strcmp:
      00027F F6               [ 1]  680 	ld a,(x)
      000280 27 0B            [ 1]  681 	jreq 5$ 
      000282 90 F1            [ 1]  682 	cp a,(y) 
      000284 26 05            [ 1]  683 	jrne 4$ 
      000286 5C               [ 1]  684 	incw x 
      000287 90 5C            [ 1]  685 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      000289 20 F4            [ 2]  686 	jra strcmp 
      00028B                        687 4$: ; not same  
      00028B 4F               [ 1]  688 	clr a 
      00028C 81               [ 4]  689 	ret 
      00028D                        690 5$: ; same 
      00028D A6 01            [ 1]  691 	ld a,#1 
      00028F 81               [ 4]  692 	ret 
                                    693 
                                    694 
                                    695 ;---------------------------------------
                                    696 ;  copy src to dest 
                                    697 ; input:
                                    698 ;   X 		dest 
                                    699 ;   Y 		src 
                                    700 ; output: 
                                    701 ;   X 		dest 
                                    702 ;----------------------------------
      000290                        703 strcpy:
      000290 89               [ 2]  704 	pushw x 
      000291 90 F6            [ 1]  705 1$: ld a,(y)
      000293 27 06            [ 1]  706 	jreq 9$ 
      000295 F7               [ 1]  707 	ld (x),a 
      000296 5C               [ 1]  708 	incw x 
      000297 90 5C            [ 1]  709 	incw y 
      000299 20 F6            [ 2]  710 	jra 1$ 
      00029B 7F               [ 1]  711 9$:	clr (x)
      00029C 85               [ 2]  712 	popw x 
      00029D 81               [ 4]  713 	ret 
                                    714 
                                    715 ;---------------------------------------
                                    716 ; move memory block 
                                    717 ; input:
                                    718 ;   X 		destination 
                                    719 ;   Y 	    source 
                                    720 ;   acc16	size 
                                    721 ; output:
                                    722 ;   none 
                                    723 ;--------------------------------------
                           000001   724 	INCR=1 ; increament high byte 
                           000002   725 	LB=2 ; increament low byte 
                           000002   726 	VSIZE=2
      00029E                        727 move:
      00029E                        728 	_vars VSIZE 
      00029E 52 02            [ 2]    1     sub sp,#VSIZE 
      0002A0 0F 01            [ 1]  729 	clr (INCR,sp)
      0002A2 0F 02            [ 1]  730 	clr (LB,sp)
      0002A4 90 89            [ 2]  731 	pushw y 
      0002A6 13 01            [ 2]  732 	cpw x,(1,sp) ; compare DEST to SRC 
      0002A8 90 85            [ 2]  733 	popw y 
      0002AA 27 31            [ 1]  734 	jreq move_exit ; x==y 
      0002AC 2B 0E            [ 1]  735 	jrmi move_down
      0002AE                        736 move_up: ; start from top address with incr=-1
      0002AE 72 BB 00 08      [ 2]  737 	addw x,acc16
      0002B2 72 B9 00 08      [ 2]  738 	addw y,acc16
      0002B6 03 01            [ 1]  739 	cpl (INCR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002B8 03 02            [ 1]  740 	cpl (LB,sp)   ; increment = -1 
      0002BA 20 05            [ 2]  741 	jra move_loop  
      0002BC                        742 move_down: ; start from bottom address with incr=1 
      0002BC 5A               [ 2]  743     decw x 
      0002BD 90 5A            [ 2]  744 	decw y
      0002BF 0C 02            [ 1]  745 	inc (LB,sp) ; incr=1 
      0002C1                        746 move_loop:	
      0002C1 C6 00 08         [ 1]  747     ld a, acc16 
      0002C4 CA 00 09         [ 1]  748 	or a, acc8
      0002C7 27 14            [ 1]  749 	jreq move_exit 
      0002C9 72 FB 01         [ 2]  750 	addw x,(INCR,sp)
      0002CC 72 F9 01         [ 2]  751 	addw y,(INCR,sp) 
      0002CF 90 F6            [ 1]  752 	ld a,(y)
      0002D1 F7               [ 1]  753 	ld (x),a 
      0002D2 89               [ 2]  754 	pushw x 
      0002D3 CE 00 08         [ 2]  755 	ldw x,acc16 
      0002D6 5A               [ 2]  756 	decw x 
      0002D7 CF 00 08         [ 2]  757 	ldw acc16,x 
      0002DA 85               [ 2]  758 	popw x 
      0002DB 20 E4            [ 2]  759 	jra move_loop
      0002DD                        760 move_exit:
      0002DD                        761 	_drop VSIZE
      0002DD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0002DF 81               [ 4]  762 	ret 	
                                    763 
                                    764 ;-------------------------------------
                                    765 ; search text area for a line with 
                                    766 ; same number as line#  
                                    767 ; input:
                                    768 ;	X 			line# 
                                    769 ; output:
                                    770 ;   X 			addr of line | 0 
                                    771 ;   Y           line#|insert address if not found  
                                    772 ;-------------------------------------
                           000001   773 	LL=1 ; line length 
                           000002   774 	LB=2 ; line length low byte 
                           000002   775 	VSIZE=2 
      0002E0                        776 search_lineno:
      0002E0                        777 	_vars VSIZE
      0002E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E2 0F 01            [ 1]  778 	clr (LL,sp)
      0002E4 90 CE 00 18      [ 2]  779 	ldw y,txtbgn
      0002E8                        780 search_ln_loop:
      0002E8 90 C3 00 1A      [ 2]  781 	cpw y,txtend 
      0002EC 2A 10            [ 1]  782 	jrpl 8$
      0002EE 90 F3            [ 1]  783 	cpw x,(y)
      0002F0 27 0E            [ 1]  784 	jreq 9$
      0002F2 2B 0A            [ 1]  785 	jrmi 8$ 
      0002F4 90 E6 02         [ 1]  786 	ld a,(2,y)
      0002F7 6B 02            [ 1]  787 	ld (LB,sp),a 
      0002F9 72 F9 01         [ 2]  788 	addw y,(LL,sp)
      0002FC 20 EA            [ 2]  789 	jra search_ln_loop 
      0002FE                        790 8$: 
      0002FE 5F               [ 1]  791 	clrw x 	
      0002FF 51               [ 1]  792 	exgw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000300                        793 9$: _drop VSIZE
      000300 5B 02            [ 2]    1     addw sp,#VSIZE 
      000302 51               [ 1]  794 	exgw x,y   
      000303 81               [ 4]  795 	ret 
                                    796 
                                    797 ;-------------------------------------
                                    798 ; delete line at addr
                                    799 ; move new line to insert with end of text 
                                    800 ; otherwise it would be overwritten.
                                    801 ; input:
                                    802 ;   X 		addr of line i.e DEST for move 
                                    803 ;-------------------------------------
                           000001   804 	LLEN=1
                           000003   805 	SRC=3
                           000004   806 	VSIZE=4
      000304                        807 del_line: 
      000304                        808 	_vars VSIZE 
      000304 52 04            [ 2]    1     sub sp,#VSIZE 
      000306 E6 02            [ 1]  809 	ld a,(2,x) ; line length
      000308 6B 02            [ 1]  810 	ld (LLEN+1,sp),a 
      00030A 0F 01            [ 1]  811 	clr (LLEN,sp)
      00030C 90 93            [ 1]  812 	ldw y,x  
      00030E 72 F9 01         [ 2]  813 	addw y,(LLEN,sp) ;SRC  
      000311 17 03            [ 2]  814 	ldw (SRC,sp),y  ;save source 
      000313 90 CE 00 1A      [ 2]  815 	ldw y,txtend 
      000317 90 E6 02         [ 1]  816 	ld a,(2,y)
      00031A 90 5F            [ 1]  817 	clrw y 
      00031C 90 97            [ 1]  818 	ld yl,a  
      00031E 72 B9 00 1A      [ 2]  819 	addw y,txtend
      000322 72 F2 03         [ 2]  820 	subw y,(SRC,sp) ; y=count 
      000325 90 CF 00 08      [ 2]  821 	ldw acc16,y 
      000329 16 03            [ 2]  822 	ldw y,(SRC,sp)    ; source
      00032B CD 02 9E         [ 4]  823 	call move
      00032E 90 CE 00 1A      [ 2]  824 	ldw y,txtend 
      000332 72 F2 01         [ 2]  825 	subw y,(LLEN,sp)
      000335 90 CF 00 1A      [ 2]  826 	ldw txtend,y  
      000339                        827 	_drop VSIZE     
      000339 5B 04            [ 2]    1     addw sp,#VSIZE 
      00033B 81               [ 4]  828 	ret 
                                    829 
                                    830 ;---------------------------------------------
                                    831 ; create a gap in text area 
                                    832 ; move new line to insert in gap with end of text
                                    833 ; otherwise it would be overwritten.
                                    834 ; input:
                                    835 ;    X 			addr gap start 
                                    836 ;    Y 			gap length 
                                    837 ; output:
                                    838 ;    X 			addr gap start 
                                    839 ;--------------------------------------------
                           000001   840 	DEST=1
                           000003   841 	SRC=3
                           000005   842 	LEN=5
                           000006   843 	VSIZE=6 
      00033C                        844 create_gap:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00033C                        845 	_vars VSIZE
      00033C 52 06            [ 2]    1     sub sp,#VSIZE 
      00033E 1F 03            [ 2]  846 	ldw (SRC,sp),x 
      000340 17 05            [ 2]  847 	ldw (LEN,sp),y 
      000342 90 CF 00 08      [ 2]  848 	ldw acc16,y 
      000346 90 93            [ 1]  849 	ldw y,x ; SRC
      000348 72 BB 00 08      [ 2]  850 	addw x,acc16  
      00034C 1F 01            [ 2]  851 	ldw (DEST,sp),x 
                                    852 ;compute size to move 	
      00034E CE 00 1A         [ 2]  853 	ldw x,txtend 
      000351 E6 02            [ 1]  854 	ld a,(2,x) ; pending line length 
      000353 C7 00 09         [ 1]  855 	ld acc8,a 
      000356 72 5F 00 08      [ 1]  856 	clr acc16 
      00035A 72 BB 00 08      [ 2]  857 	addw x,acc16 
      00035E 72 F0 03         [ 2]  858 	subw x,(SRC,sp)
      000361 CF 00 08         [ 2]  859 	ldw acc16,x ; size to move
      000364 1E 01            [ 2]  860 	ldw x,(DEST,sp) 
      000366 CD 02 9E         [ 4]  861 	call move
      000369 CE 00 1A         [ 2]  862 	ldw x,txtend
      00036C 72 FB 05         [ 2]  863 	addw x,(LEN,sp)
      00036F CF 00 1A         [ 2]  864 	ldw txtend,x
      000372                        865 9$:	_drop VSIZE 
      000372 5B 06            [ 2]    1     addw sp,#VSIZE 
      000374 81               [ 4]  866 	ret 
                                    867 
                                    868 
                                    869 ;--------------------------------------------
                                    870 ; insert line in tib into text area 
                                    871 ; first search for already existing 
                                    872 ; replace existing 
                                    873 ; if strlen(tib)==0 delete existing 
                                    874 ; input:
                                    875 ;   ptr16 				pointer to tokenized line  
                                    876 ; output:
                                    877 ;   none
                                    878 ;---------------------------------------------
                           000001   879 	DEST=1  ; text area insertion address 
                           000003   880 	SRC=3   ; str to insert address 
                           000005   881 	LINENO=5 ; line number 
                           000007   882 	LLEN=7 ; line length 
                           000008   883 	VSIZE=8  
      000375                        884 insert_line:
      000375                        885 	_vars VSIZE 
      000375 52 08            [ 2]    1     sub sp,#VSIZE 
      000377 CE 00 11         [ 2]  886 	ldw x,ptr16  
      00037A C3 00 18         [ 2]  887 	cpw x,txtbgn 
      00037D 26 0D            [ 1]  888 	jrne 0$
                                    889 ;first text line 
      00037F AE 00 02         [ 2]  890 	ldw x,#2 
      000382 72 D6 00 11      [ 4]  891 	ld a,([ptr16],x)
      000386 5F               [ 1]  892 	clrw x 
      000387 97               [ 1]  893 	ld xl,a
      000388 1F 07            [ 2]  894 	ldw (LLEN,sp),x  
      00038A 20 45            [ 2]  895 	jra 5$
      00038C 72 CE 00 11      [ 5]  896 0$:	ldw x,[ptr16]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    897 ; new line number
      000390 1F 05            [ 2]  898 	ldw (LINENO,sp),x 
      000392 AE 00 02         [ 2]  899 	ldw x,#2 
      000395 72 D6 00 11      [ 4]  900 	ld a,([ptr16],x)
      000399 97               [ 1]  901 	ld xl,a
                                    902 ; new line length
      00039A 1F 07            [ 2]  903 	ldw (LLEN,sp),x
                                    904 ; check if that line number already exit 	
      00039C 1E 05            [ 2]  905 	ldw x,(LINENO,sp)
      00039E CD 02 E0         [ 4]  906 	call search_lineno 
      0003A1 5D               [ 2]  907 	tnzw x 
      0003A2 26 04            [ 1]  908 	jrne 2$
                                    909 ; line doesn't exit
                                    910 ; it will be inserted at this point.  	
      0003A4 17 01            [ 2]  911 	ldw (DEST,sp),y 
      0003A6 20 05            [ 2]  912 	jra 3$
                                    913 ; line exit delete it.
                                    914 ; it will be replaced by new one 	
      0003A8 1F 01            [ 2]  915 2$: ldw (DEST,sp),x 
      0003AA CD 03 04         [ 4]  916 	call del_line
      0003AD                        917 3$: 
                                    918 ; insert new line or leave if LLEN==3
                                    919 ; LLEN==3 means empty line 
      0003AD A6 03            [ 1]  920 	ld a,#3
      0003AF 11 08            [ 1]  921 	cp a,(LLEN+1,sp)
      0003B1 27 27            [ 1]  922 	jreq insert_ln_exit ; empty line exit.
                                    923 ; if insertion point at txtend 
                                    924 ; no move required 
      0003B3 1E 01            [ 2]  925 	ldw x,(DEST,sp)
      0003B5 C3 00 1A         [ 2]  926 	cpw x,txtend 
      0003B8 2A 17            [ 1]  927 	jrpl 5$ 
                                    928 ; must create a gap
                                    929 ; at insertion point  
      0003BA 1E 01            [ 2]  930 	ldw x,(DEST,sp)
      0003BC 16 07            [ 2]  931 	ldw y,(LLEN,sp)
      0003BE CD 03 3C         [ 4]  932 	call create_gap 
                                    933 ; move new line in gap 
      0003C1 1E 07            [ 2]  934 	ldw x,(LLEN,sp)
      0003C3 CF 00 08         [ 2]  935 	ldw acc16,x 
      0003C6 90 CE 00 1A      [ 2]  936 	ldw y,txtend ;SRC 
      0003CA 1E 01            [ 2]  937 	ldw x,(DEST,sp) ; dest address 
      0003CC CD 02 9E         [ 4]  938 	call move 
      0003CF 20 09            [ 2]  939 	jra insert_ln_exit  
      0003D1                        940 5$: ; no move required 
      0003D1 1E 07            [ 2]  941 	ldw x,(LLEN,sp) 
      0003D3 72 BB 00 1A      [ 2]  942 	addw x,txtend 
      0003D7 CF 00 1A         [ 2]  943 	ldw txtend,x 
      0003DA                        944 insert_ln_exit:	
      0003DA                        945 	_drop VSIZE
      0003DA 5B 08            [ 2]    1     addw sp,#VSIZE 
      0003DC 81               [ 4]  946 	ret
                                    947 
                                    948 
                                    949 ;-----------------------------
                                    950 ; check if text buffer full
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    951 ; input:
                                    952 ;   ptr16     addr start tokenize line 
                                    953 ;   X         buffer index 
                                    954 ; output:
                                    955 ;   none 
                                    956 ;-----------------------------------
      0003DD                        957 check_full:
      0003DD 72 BB 00 11      [ 2]  958 	addw x,ptr16 
      0003E1 A3 16 C8         [ 2]  959 	cpw x,#tib 
      0003E4 25 05            [ 1]  960 	jrult 1$
      0003E6 A6 01            [ 1]  961 	ld a,#ERR_MEM_FULL
      0003E8 CC 07 01         [ 2]  962 	jp tb_error 
      0003EB 81               [ 4]  963 1$: ret 
                                    964 
                                    965 
                                    966 ;-----------------------------------
                                    967 ; create token list form text line 
                                    968 ; save this list in text area
                                    969 ; input:
                                    970 ;   none
                                    971 ; output:
                                    972 ;   basicptr     token list buffer
                                    973 ;   line# 		 BASIC line number 
                                    974 ;   in.w  		 cleared 
                                    975 ;-----------------------------------
                                    976 	.macro _incr_ptr16 n 
                                    977 	ldw x,#n 
                                    978 	addw x,ptr16 
                                    979 	ldw ptr16,x 
                                    980 	.endm 
                                    981 
                           000001   982 	XSAVE=1
                           000003   983 	BUFIDX=3
                           000004   984 	VSIZE=4
      0003EC                        985 compile:
      0003EC                        986 	_vars VSIZE 
      0003EC 52 04            [ 2]    1     sub sp,#VSIZE 
      0003EE 72 1A 00 1F      [ 1]  987 	bset flags,#FCOMP 
      0003F2 CE 00 1A         [ 2]  988 	ldw x,txtend
      0003F5 CF 00 11         [ 2]  989 	ldw ptr16,x 
      0003F8 5F               [ 1]  990 	clrw x 
      0003F9 AE 00 03         [ 2]  991 	ldw x,#3
      0003FC 1F 03            [ 2]  992 	ldw (BUFIDX,sp),X  
      0003FE CD 03 DD         [ 4]  993 	call check_full
      000401 5F               [ 1]  994 	clrw x 
      000402 72 CF 00 11      [ 5]  995 	ldw [ptr16],x 
      000406 CD 0C DF         [ 4]  996 	call get_token
      000409 1F 01            [ 2]  997 	ldw (XSAVE,sp),x 
      00040B A1 04            [ 1]  998 	cp a,#TK_INTGR 
      00040D 26 11            [ 1]  999 	jrne 3$
      00040F A3 00 00         [ 2] 1000 	cpw x,#0  
      000412 22 03            [ 1] 1001 	jrugt 1$
      000414 CC 06 FF         [ 2] 1002 	jp syntax_error 
      000417 72 CF 00 11      [ 5] 1003 1$:	ldw [ptr16],x; line number
      00041B CD 0C DF         [ 4] 1004 2$:	call get_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00041E 1F 01            [ 2] 1005 	ldw (XSAVE,sp),x 
      000420 A1 00            [ 1] 1006 3$:	cp a,#TK_NONE 
      000422 26 03            [ 1] 1007 	jrne 30$
      000424 CC 04 B7         [ 2] 1008 	jp 9$
      000427                       1009 30$: 	 
      000427 1E 03            [ 2] 1010 	ldw x,(BUFIDX,sp)
      000429 CD 03 DD         [ 4] 1011 	call check_full 
      00042C 16 03            [ 2] 1012 	ldw y,(BUFIDX,sp) 
      00042E 91 D7 11         [ 4] 1013 	ld ([ptr16],y),a ; token attribute 
      000431 90 5C            [ 1] 1014 	incw y
      000433 17 03            [ 2] 1015 	ldw (BUFIDX,sp),y
      000435 A1 01            [ 1] 1016 	cp a,#TK_COLON 
      000437 26 02            [ 1] 1017 	jrne 31$
      000439 20 E0            [ 2] 1018 	jra 2$ 
      00043B                       1019 31$:
      00043B A1 03            [ 1] 1020 	cp a,#TK_CHAR
      00043D 26 0C            [ 1] 1021 	jrne 32$ 
      00043F 1E 01            [ 2] 1022 	ldw x,(XSAVE,sp)
      000441 9F               [ 1] 1023 	ld a,xl 
      000442 91 D7 11         [ 4] 1024 	ld ([ptr16],y),a
      000445 90 5C            [ 1] 1025 	incw y 
      000447 17 03            [ 2] 1026 	ldw (BUFIDX,sp),y 
      000449 20 D0            [ 2] 1027 	jra 2$ 
      00044B                       1028 32$:
      00044B A1 02            [ 1] 1029 	cp a,#TK_ARRAY 
      00044D 27 CC            [ 1] 1030 	jreq 2$ 
      00044F A1 0A            [ 1] 1031 	cp a,#TK_QSTR 
      000451 26 25            [ 1] 1032 	jrne 4$
      000453 AE 17 18         [ 2] 1033 	ldw x,#pad 
      000456 CD 02 72         [ 4] 1034 	call strlen
      000459 5C               [ 1] 1035 	incw x  
      00045A CD 03 DD         [ 4] 1036 	call check_full 
      00045D 90 AE 17 18      [ 2] 1037 	ldw y,#pad 
      000461 CE 00 11         [ 2] 1038 	ldw x,ptr16
      000464 72 FB 03         [ 2] 1039 	addw x,(BUFIDX,sp)	
      000467 CD 02 90         [ 4] 1040 	call strcpy 
      00046A AE 17 18         [ 2] 1041 	ldw x,#pad 
      00046D CD 02 72         [ 4] 1042 	call strlen 
      000470 5C               [ 1] 1043 	incw x
      000471 72 FB 03         [ 2] 1044 	addw x,(BUFIDX,sp) 
      000474 1F 03            [ 2] 1045 	ldw (BUFIDX,sp),x
      000476 20 A3            [ 2] 1046 	jra 2$  
      000478 A1 04            [ 1] 1047 4$: cp a,#TK_INTGR
      00047A 25 9F            [ 1] 1048 	jrult 2$
      00047C A1 09            [ 1] 1049 	cp a,#TK_CONST 
      00047E 22 9B            [ 1] 1050 	Jrugt 2$
      000480 1E 01            [ 2] 1051 	ldw x,(XSAVE,sp) 
      000482 16 03            [ 2] 1052 	ldw y,(BUFIDX,sp)
      000484 91 DF 11         [ 5] 1053 	ldw ([ptr16],y),x
      000487 A3 16 F2         [ 2] 1054 	cpw x,#rem 
      00048A 26 22            [ 1] 1055 	jrne 5$	
                                   1056 ; comment advance in.w to eol 
      00048C 72 A9 00 02      [ 2] 1057 	addw y,#2 ; skip exec address 
      000490 17 03            [ 2] 1058 	ldw (BUFIDX,sp),y 
      000492 CE 00 11         [ 2] 1059 	ldw x,ptr16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000495 72 FB 03         [ 2] 1060 	addw x,(BUFIDX,sp)
      000498 90 CE 00 00      [ 2] 1061 	ldw y,in.w 
      00049C 72 A9 16 C8      [ 2] 1062 	addw y,#tib 
      0004A0 CD 02 90         [ 4] 1063 	call strcpy 	
      0004A3 CD 02 72         [ 4] 1064 	call strlen 
      0004A6 5C               [ 1] 1065 	incw x ; skip string 0. 
      0004A7 72 FB 03         [ 2] 1066 	addw x,(BUFIDX,sp)
      0004AA 1F 03            [ 2] 1067 	ldw (BUFIDX,sp),x 
      0004AC 20 09            [ 2] 1068 	jra 9$
      0004AE 72 A9 00 02      [ 2] 1069 5$:	addw y,#2 
      0004B2 17 03            [ 2] 1070 	ldw (BUFIDX,sp),y 
      0004B4 CC 04 1B         [ 2] 1071 	jp 2$
      0004B7                       1072 9$: 
      0004B7 AE 00 02         [ 2] 1073 	ldw x,#2
      0004BA 16 03            [ 2] 1074 	ldw y,(BUFIDX,sp)
      0004BC 90 9F            [ 1] 1075 	ld a,yl 
      0004BE 72 D7 00 11      [ 4] 1076 	ld ([ptr16],x),a  	
      0004C2 72 CE 00 11      [ 5] 1077 	ldw x,[ptr16]
      0004C6 27 09            [ 1] 1078 	jreq 10$
      0004C8 CD 03 75         [ 4] 1079 	call insert_line
      0004CB 72 5F 00 03      [ 1] 1080 	clr  count 
      0004CF 20 0F            [ 2] 1081 	jra  11$ 
      0004D1                       1082 10$: 
      0004D1 CE 00 11         [ 2] 1083 	ldw x,ptr16 
      0004D4 CF 00 04         [ 2] 1084 	ldw basicptr,x 
      0004D7 E6 02            [ 1] 1085 	ld a,(2,x)
      0004D9 C7 00 03         [ 1] 1086 	ld count,a 
      0004DC 35 03 00 01      [ 1] 1087 	mov in,#3 
      0004E0                       1088 11$:
      0004E0                       1089 	_drop VSIZE 
      0004E0 5B 04            [ 2]    1     addw sp,#VSIZE 
      0004E2 72 1B 00 1F      [ 1] 1090 	bres flags,#FCOMP 
      0004E6 81               [ 4] 1091 	ret 
                                   1092 
                                   1093 
                                   1094 ;------------------------------------
                                   1095 ;  set all variables to zero 
                                   1096 ; input:
                                   1097 ;   none 
                                   1098 ; output:
                                   1099 ;	none
                                   1100 ;------------------------------------
      0004E7                       1101 clear_vars:
      0004E7 AE 00 21         [ 2] 1102 	ldw x,#vars 
      0004EA 90 AE 00 34      [ 2] 1103 	ldw y,#2*26 
      0004EE 7F               [ 1] 1104 1$:	clr (x)
      0004EF 5C               [ 1] 1105 	incw x 
      0004F0 90 5A            [ 2] 1106 	decw y 
      0004F2 26 FA            [ 1] 1107 	jrne 1$
      0004F4 81               [ 4] 1108 	ret 
                                   1109 
                                   1110 ;-------------------------------------
                                   1111 ; check if A is a letter
                                   1112 ; input:
                                   1113 ;   A 			character to test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1114 ; output:
                                   1115 ;   C flag      1 true, 0 false 
                                   1116 ;-------------------------------------
      0004F5                       1117 is_alpha:
      0004F5 A1 41            [ 1] 1118 	cp a,#'A 
      0004F7 8C               [ 1] 1119 	ccf
      0004F8 24 0B            [ 1] 1120 	jrnc 9$ 
      0004FA A1 5B            [ 1] 1121 	cp a,#'Z+1 
      0004FC 25 07            [ 1] 1122 	jrc 9$ 
      0004FE A1 61            [ 1] 1123 	cp a,#'a 
      000500 8C               [ 1] 1124 	ccf 
      000501 24 02            [ 1] 1125 	jrnc 9$
      000503 A1 7B            [ 1] 1126 	cp a,#'z+1   
      000505 81               [ 4] 1127 9$: ret 	
                                   1128 
                                   1129 ;-------------------------------------
                                   1130 ;  program initialization entry point 
                                   1131 ;-------------------------------------
                           000001  1132 	MAJOR=1
                           000000  1133 	MINOR=0
      000506 0A 0A 54 69 6E 79 20  1134 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      00054C                       1135 cold_start:
                                   1136 ;set stack 
      00054C AE 17 FF         [ 2] 1137 	ldw x,#STACK_EMPTY
      00054F 94               [ 1] 1138 	ldw sp,x   
                                   1139 ; clear all ram 
      000550 7F               [ 1] 1140 0$: clr (x)
      000551 5A               [ 2] 1141 	decw x 
      000552 26 FC            [ 1] 1142 	jrne 0$
                                   1143 ; activate pull up on all inputs 
      000554 A6 FF            [ 1] 1144 	ld a,#255 
      000556 C7 50 03         [ 1] 1145 	ld PA_CR1,a 
      000559 C7 50 08         [ 1] 1146 	ld PB_CR1,a 
      00055C C7 50 0D         [ 1] 1147 	ld PC_CR1,a 
      00055F C7 50 12         [ 1] 1148 	ld PD_CR1,a 
      000562 C7 50 17         [ 1] 1149 	ld PE_CR1,a 
      000565 C7 50 1C         [ 1] 1150 	ld PF_CR1,a 
      000568 C7 50 21         [ 1] 1151 	ld PG_CR1,a 
      00056B C7 50 2B         [ 1] 1152 	ld PI_CR1,a 
                                   1153 ; select internal clock no divisor: 16 Mhz 	
      00056E A6 E1            [ 1] 1154 	ld a,#CLK_SWR_HSI 
      000570 5F               [ 1] 1155 	clrw x  
      000571 CD 00 99         [ 4] 1156     call clock_init 
      000574 CD 00 AF         [ 4] 1157 	call timer4_init
                                   1158 ; UART3 at 115200 BAUD
      000577 CD 01 74         [ 4] 1159 	call uart3_init
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1160 ; activate PE_4 (user button interrupt)
      00057A 72 18 50 18      [ 1] 1161     bset PE_CR2,#USR_BTN_BIT 
                                   1162 ; display system information
      00057E AE 05 06         [ 2] 1163 	ldw x,#software 
      000581 CD 01 B0         [ 4] 1164 	call puts 
      000584 A6 01            [ 1] 1165 	ld a,#MAJOR 
      000586 C7 00 09         [ 1] 1166 	ld acc8,a 
      000589 5F               [ 1] 1167 	clrw x 
      00058A CF 00 07         [ 2] 1168 	ldw acc24,x 
      00058D A6 0A            [ 1] 1169 	ld a,#10 
      00058F CD 09 30         [ 4] 1170 	call prti24 
      000592 A6 2E            [ 1] 1171 	ld a,#'.
      000594 CD 01 9E         [ 4] 1172 	call putc 
      000597 A6 00            [ 1] 1173 	ld a,#MINOR 
      000599 C7 00 09         [ 1] 1174 	ld acc8,a 
      00059C 5F               [ 1] 1175 	clrw x 
      00059D CF 00 07         [ 2] 1176 	ldw acc24,x 
      0005A0 A6 0A            [ 1] 1177 	ld a,#10 
      0005A2 CD 09 30         [ 4] 1178 	call prti24 
      0005A5 A6 0D            [ 1] 1179 	ld a,#CR 
      0005A7 CD 01 9E         [ 4] 1180 	call putc 
      0005AA CD 1A 76         [ 4] 1181 	call seek_fdrive 
                                   1182 ; configure LD2 pin 
      0005AD 72 1A 50 0D      [ 1] 1183     bset PC_CR1,#LED2_BIT
      0005B1 72 1A 50 0E      [ 1] 1184     bset PC_CR2,#LED2_BIT
      0005B5 72 1A 50 0C      [ 1] 1185     bset PC_DDR,#LED2_BIT
      0005B9 9A               [ 1] 1186 	rim 
      0005BA 72 5C 00 0F      [ 1] 1187 	inc seedy+1 
      0005BE 72 5C 00 0D      [ 1] 1188 	inc seedx+1 
      0005C2 CD 05 D1         [ 4] 1189 	call clear_basic
      0005C5 CD 13 5F         [ 4] 1190 	call ubound 
      0005C8 CD 0F 7E         [ 4] 1191 	call dpop 
      0005CB CF 00 1D         [ 2] 1192 	ldw array_size,x 
      0005CE CC 07 53         [ 2] 1193     jp warm_start 
                                   1194 
                                   1195 ;---------------------------
                                   1196 ; reset BASIC text variables 
                                   1197 ; and clear variables 
                                   1198 ;---------------------------
      0005D1                       1199 clear_basic:
      0005D1 72 5F 00 03      [ 1] 1200 	clr count 
      0005D5 AE 00 55         [ 2] 1201 	ldw x,#free_ram 
      0005D8 CF 00 18         [ 2] 1202 	ldw txtbgn,x 
      0005DB CF 00 1A         [ 2] 1203 	ldw txtend,x 
      0005DE CD 04 E7         [ 4] 1204 	call clear_vars 
      0005E1 81               [ 4] 1205 	ret 
                                   1206 
                                   1207 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1208 ;;   Tiny BASIC error messages     ;;
                                   1209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005E2                       1210 err_msg:
      0005E2 00 00 05 FA 06 08 06  1211 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             17 06 31 06 41
      0005EE 06 58 06 6F 06 8A 06  1212 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             9C 06 AE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005F8 06 BB                 1213 	.word err_no_access 
                                   1214 
      0005FA 0A 4D 65 6D 6F 72 79  1215 err_mem_full: .asciz "\nMemory full\n" 
             20 66 75 6C 6C 0A 00
      000608 0A 73 79 6E 74 61 78  1216 err_syntax: .asciz "\nsyntax error\n" 
             20 65 72 72 6F 72 0A
             00
      000617 0A 6D 61 74 68 20 6F  1217 err_math_ovf: .asciz "\nmath operation overflow\n"
             70 65 72 61 74 69 6F
             6E 20 6F 76 65 72 66
             6C 6F 77 0A 00
      000631 0A 64 69 76 69 73 69  1218 err_div0: .asciz "\ndivision by 0\n" 
             6F 6E 20 62 79 20 30
             0A 00
      000641 0A 69 6E 76 61 6C 69  1219 err_no_line: .asciz "\ninvalid line number.\n"
             64 20 6C 69 6E 65 20
             6E 75 6D 62 65 72 2E
             0A 00
      000658 0A 72 75 6E 20 74 69  1220 err_run_only: .asciz "\nrun time only usage.\n" 
             6D 65 20 6F 6E 6C 79
             20 75 73 61 67 65 2E
             0A 00
      00066F 0A 63 6F 6D 6D 61 6E  1221 err_cmd_only: .asciz "\ncommand line only usage.\n"
             64 20 6C 69 6E 65 20
             6F 6E 6C 79 20 75 73
             61 67 65 2E 0A 00
      00068A 0A 64 75 70 6C 69 63  1222 err_duplicate: .asciz "\nduplicate name.\n"
             61 74 65 20 6E 61 6D
             65 2E 0A 00
      00069C 0A 46 69 6C 65 20 6E  1223 err_not_file: .asciz "\nFile not found.\n"
             6F 74 20 66 6F 75 6E
             64 2E 0A 00
      0006AE 0A 62 61 64 20 76 61  1224 err_bad_value: .asciz "\nbad value.\n"
             6C 75 65 2E 0A 00
      0006BB 0A 46 69 6C 65 20 69  1225 err_no_access: .asciz "\nFile in extended memory, can't be run from there.\n" 
             6E 20 65 78 74 65 6E
             64 65 64 20 6D 65 6D
             6F 72 79 2C 20 63 61
             6E 27 74 20 62 65 20
             72 75 6E 20 66 72 6F
             6D 20 74 68 65 72 65
             2E 0A 00
                                   1226 
      0006EF 6C 61 73 74 20 74 6F  1227 rt_msg: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1228 
      0006FF                       1229 syntax_error:
      0006FF A6 02            [ 1] 1230 	ld a,#ERR_SYNTAX 
                                   1231 
      000701                       1232 tb_error:
      000701 AE 05 E2         [ 2] 1233 	ldw x, #err_msg 
      000704 72 5F 00 08      [ 1] 1234 	clr acc16 
      000708 48               [ 1] 1235 	sll a
      000709 72 59 00 08      [ 1] 1236 	rlc acc16  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00070D C7 00 09         [ 1] 1237 	ld acc8, a 
      000710 72 BB 00 08      [ 2] 1238 	addw x,acc16 
      000714 FE               [ 2] 1239 	ldw x,(x)
      000715 CD 01 B0         [ 4] 1240 	call puts
      000718 72 0B 00 1F 18   [ 2] 1241 	btjf flags,#FCOMP, 1$
      00071D AE 16 C8         [ 2] 1242 	ldw x,#tib
      000720 CD 01 B0         [ 4] 1243 	call puts 
      000723 A6 0D            [ 1] 1244 	ld a,#CR 
      000725 CD 01 9E         [ 4] 1245 	call putc
      000728 CE 00 00         [ 2] 1246 	ldw x,in.w
      00072B CD 01 D8         [ 4] 1247 	call spaces
      00072E A6 5E            [ 1] 1248 	ld a,#'^
      000730 CD 01 9E         [ 4] 1249 	call putc 
      000733 20 1A            [ 2] 1250 	jra 6$
      000735 CE 00 04         [ 2] 1251 1$:	ldw x,basicptr
      000738 CD 14 7C         [ 4] 1252 	call prt_basic_line
      00073B AE 06 EF         [ 2] 1253 	ldw x,#rt_msg 
      00073E CD 01 B0         [ 4] 1254 	call puts 
      000741 5F               [ 1] 1255 	clrw x 
      000742 C6 00 02         [ 1] 1256 	ld a,in.saved 
      000745 97               [ 1] 1257 	ld xl,a 
      000746 72 D6 00 04      [ 4] 1258 	ld a,([basicptr],x)
      00074A 5F               [ 1] 1259 	clrw x 
      00074B 97               [ 1] 1260 	ld xl,a 
      00074C CD 09 78         [ 4] 1261 	call print_int 
      00074F AE 17 FF         [ 2] 1262 6$: ldw x,#STACK_EMPTY 
      000752 94               [ 1] 1263     ldw sp,x
      000753                       1264 warm_start:
      000753 72 5F 00 1F      [ 1] 1265 	clr flags 
      000757 72 5F 00 1C      [ 1] 1266 	clr loop_depth 
      00075B AE 17 80         [ 2] 1267 	ldw x,#dstack_unf 
      00075E CF 00 16         [ 2] 1268 	ldw dstkptr,x 
      000761 35 04 00 20      [ 1] 1269 	mov tab_width,#TAB_WIDTH 
      000765 35 0A 00 06      [ 1] 1270 	mov base,#10 
      000769 AE 16 C8         [ 2] 1271 	ldw x,#tib 
      00076C CF 00 04         [ 2] 1272 	ldw basicptr,x 
                                   1273 ;----------------------------
                                   1274 ;   BASIC interpreter
                                   1275 ;----------------------------
      00076F                       1276 interp:
      00076F 72 5F 00 00      [ 1] 1277 	clr in.w
      000773 72 01 00 1F 23   [ 2] 1278 	btjf flags,#FRUN,4$ 
                                   1279 ; running program
                                   1280 ; goto next basic line 
      000778 CE 00 04         [ 2] 1281 	ldw x,basicptr
      00077B E6 02            [ 1] 1282 	ld a,(2,x) ; line length 
      00077D C7 00 09         [ 1] 1283 	ld acc8,a 
      000780 72 5F 00 08      [ 1] 1284 	clr acc16 
      000784 72 BB 00 08      [ 2] 1285 	addw x,acc16
      000788 C3 00 1A         [ 2] 1286 	cpw x,txtend 
      00078B 2A C6            [ 1] 1287 	jrpl warm_start
      00078D CF 00 04         [ 2] 1288 	ldw basicptr,x ; start of next line  
      000790 E6 02            [ 1] 1289 	ld a,(2,x)
      000792 C7 00 03         [ 1] 1290 	ld count,a 
      000795 35 03 00 01      [ 1] 1291 	mov in,#3 ; skip first 3 bytes of line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000799 20 14            [ 2] 1292 	jra interp_loop 
      00079B                       1293 4$: ; commande line mode 	
      00079B 72 5F 00 01      [ 1] 1294 	clr in
      00079F A6 0D            [ 1] 1295 	ld a,#CR 
      0007A1 CD 01 9E         [ 4] 1296 	call putc 
      0007A4 A6 3E            [ 1] 1297 	ld a,#'> 
      0007A6 CD 01 9E         [ 4] 1298 	call putc 
      0007A9 CD 0A 66         [ 4] 1299 	call readln
      0007AC CD 03 EC         [ 4] 1300 	call compile
      0007AF                       1301 interp_loop:  
      0007AF C6 00 01         [ 1] 1302 	ld a,in 
      0007B2 C1 00 03         [ 1] 1303 	cp a,count  
      0007B5 2A B8            [ 1] 1304 	jrpl interp
      0007B7 CD 07 DF         [ 4] 1305 	call next_token
      0007BA A1 01            [ 1] 1306 	cp a,#TK_COLON 
      0007BC 27 F1            [ 1] 1307 	jreq interp_loop 
      0007BE A1 00            [ 1] 1308 	cp a,#TK_NONE 
                                   1309 ;	jreq interp 
      0007C0                       1310 1$:
      0007C0 A1 05            [ 1] 1311 	cp a,#TK_VAR
      0007C2 26 05            [ 1] 1312 	jrne 2$
      0007C4 CD 13 8B         [ 4] 1313 	call let02  
      0007C7 20 E6            [ 2] 1314 	jra interp_loop 
      0007C9                       1315 2$:	
      0007C9 A1 02            [ 1] 1316 	cp a,#TK_ARRAY 
      0007CB 26 08            [ 1] 1317 	jrne 3$
      0007CD CD 11 D2         [ 4] 1318 	call get_array_element
      0007D0 CD 13 8B         [ 4] 1319 	call let02 
      0007D3 20 DA            [ 2] 1320 	jra interp_loop 
      0007D5                       1321 3$:
      0007D5 A1 06            [ 1] 1322 	cp a,#TK_CMD
      0007D7 26 03            [ 1] 1323 	jrne 4$
      0007D9 FD               [ 4] 1324 	call (x) 
      0007DA 20 D3            [ 2] 1325 	jra interp_loop 
      0007DC                       1326 4$:	
      0007DC CC 06 FF         [ 2] 1327 	jp syntax_error 
                                   1328 
                                   1329 ;--------------------------
                                   1330 ; extract next token from
                                   1331 ; token list 
                                   1332 ; basicptr -> base address 
                                   1333 ; in  -> offset in list array 
                                   1334 ; output:
                                   1335 ;   A 		token attribute
                                   1336 ;   X 		token value if there is one
                                   1337 ;----------------------------------------
      0007DF                       1338 next_token:
      0007DF C6 00 01         [ 1] 1339 	ld a,in 
      0007E2 C0 00 03         [ 1] 1340 	sub a,count 
      0007E5 27 3B            [ 1] 1341 	jreq 9$
      0007E7 55 00 01 00 02   [ 1] 1342 	mov in.saved,in
      0007EC CE 00 04         [ 2] 1343 	ldw x,basicptr 
      0007EF 72 D6 00 00      [ 4] 1344 	ld a,([in.w],x)
      0007F3 72 5C 00 01      [ 1] 1345 	inc in 
      0007F7 A1 02            [ 1] 1346 	cp a,#TK_ARRAY  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0007F9 23 27            [ 2] 1347 	jrule 9$
      0007FB A1 03            [ 1] 1348 	cp a,#TK_CHAR
      0007FD 26 0D            [ 1] 1349 	jrne 1$
      0007FF 72 D6 00 00      [ 4] 1350 	ld a,([in.w],x)
      000803 72 5C 00 01      [ 1] 1351 	inc in
      000807 5F               [ 1] 1352 	clrw x 
      000808 97               [ 1] 1353 	ld xl,a 
      000809 A6 03            [ 1] 1354 	ld a,#TK_CHAR
      00080B 81               [ 4] 1355 	ret 
      00080C A1 0A            [ 1] 1356 1$:	cp a,#TK_QSTR 
      00080E 25 06            [ 1] 1357 	jrult 2$
      000810 72 BB 00 00      [ 2] 1358 	addw x,in.w 
      000814 20 0C            [ 2] 1359 	jra 9$
      000816 72 DE 00 00      [ 5] 1360 2$: ldw x,([in.w],x)
      00081A 72 5C 00 01      [ 1] 1361 	inc in 
      00081E 72 5C 00 01      [ 1] 1362 	inc in
      000822 81               [ 4] 1363 9$: ret	
                                   1364 
                                   1365 
                                   1366 ;----------------------------------------
                                   1367 ;   DEBUG support functions
                                   1368 ;----------------------------------------
                           000001  1369 .if DEBUG 
                                   1370 ; turn LED on 
      000823                       1371 ledon:
      000823 72 1A 50 0A      [ 1] 1372     bset PC_ODR,#LED2_BIT
      000827 81               [ 4] 1373     ret 
                                   1374 
                                   1375 ; turn LED off 
      000828                       1376 ledoff:
      000828 72 1B 50 0A      [ 1] 1377     bres PC_ODR,#LED2_BIT 
      00082C 81               [ 4] 1378     ret 
                                   1379 
                                   1380 ; invert LED status 
      00082D                       1381 ledtoggle:
      00082D A6 20            [ 1] 1382     ld a,#LED2_MASK
      00082F C8 50 0A         [ 1] 1383     xor a,PC_ODR
      000832 C7 50 0A         [ 1] 1384     ld PC_ODR,a
      000835 81               [ 4] 1385     ret 
                                   1386 
      000836                       1387 left_paren:
      000836 A6 20            [ 1] 1388 	ld a,#SPACE 
      000838 CD 01 9E         [ 4] 1389 	call putc
      00083B A6 28            [ 1] 1390 	ld a,#'( 
      00083D CD 01 9E         [ 4] 1391 	call putc 	
      000840 81               [ 4] 1392 	ret 
                                   1393 
                                   1394 ;------------------------------
                                   1395 ; print 8 bit register 
                                   1396 ; input:
                                   1397 ;   X  point to register name 
                                   1398 ;   A  register value to print 
                                   1399 ; output:
                                   1400 ;   none
                                   1401 ;------------------------------- 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000841                       1402 prt_reg8:
      000841 88               [ 1] 1403 	push a 
      000842 CD 01 B0         [ 4] 1404 	call puts 
      000845 7B 01            [ 1] 1405 	ld a,(1,sp) 
      000847 C7 00 09         [ 1] 1406 	ld acc8,a 
      00084A 5F               [ 1] 1407 	clrw x 
      00084B 97               [ 1] 1408 	ld xl,a 
      00084C 35 10 00 06      [ 1] 1409 	mov base,#16
      000850 CD 09 78         [ 4] 1410 	call print_int 
      000853 CD 08 36         [ 4] 1411 	call left_paren 
      000856 84               [ 1] 1412 	pop a 
      000857 5F               [ 1] 1413 	clrw x 
      000858 97               [ 1] 1414 	ld xl,a 
      000859 35 0A 00 06      [ 1] 1415 	mov base,#10 
      00085D CD 09 78         [ 4] 1416 	call print_int  
      000860 A6 29            [ 1] 1417 	ld a,#') 
      000862 CD 01 9E         [ 4] 1418 	call putc
      000865 81               [ 4] 1419 	ret
                                   1420 
                                   1421 ;--------------------------------
                                   1422 ; print 16 bits register 
                                   1423 ; input:
                                   1424 ;   X   point register name 
                                   1425 ;   Y   register value to print 
                                   1426 ; output:
                                   1427 ;  none
                                   1428 ;--------------------------------
      000866                       1429 prt_reg16: 
      000866 90 89            [ 2] 1430 	pushw y 
      000868 CD 01 B0         [ 4] 1431 	call puts 
      00086B 1E 01            [ 2] 1432 	ldw x,(1,sp) 
      00086D 35 10 00 06      [ 1] 1433 	mov base,#16 
      000871 CD 09 78         [ 4] 1434 	call print_int  
      000874 CD 08 36         [ 4] 1435 	call left_paren 
      000877 85               [ 2] 1436 	popw x 
      000878 35 0A 00 06      [ 1] 1437 	mov base,#10 
      00087C CD 09 78         [ 4] 1438 	call print_int  
      00087F A6 29            [ 1] 1439 	ld a,#') 
      000881 CD 01 9E         [ 4] 1440 	call putc
      000884 81               [ 4] 1441 	ret 
                                   1442 
                                   1443 ;------------------------------------
                                   1444 ; print registers contents saved on
                                   1445 ; stack by trap interrupt.
                                   1446 ;------------------------------------
      000885                       1447 print_registers:
      000885 AE 08 D8         [ 2] 1448 	ldw x,#STATES
      000888 CD 01 B0         [ 4] 1449 	call puts
                                   1450 ; print EPC 
      00088B AE 09 15         [ 2] 1451 	ldw x, #REG_EPC
      00088E CD 01 B0         [ 4] 1452 	call puts 
      000891 7B 0B            [ 1] 1453 	ld a, (11,sp)
      000893 C7 00 09         [ 1] 1454 	ld acc8,a 
      000896 7B 0A            [ 1] 1455 	ld a, (10,sp) 
      000898 C7 00 08         [ 1] 1456 	ld acc16,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00089B 7B 09            [ 1] 1457 	ld a,(9,sp) 
      00089D C7 00 07         [ 1] 1458 	ld acc24,a
      0008A0 5F               [ 1] 1459 	clrw x  
      0008A1 A6 10            [ 1] 1460 	ld a,#16
      0008A3 CD 09 30         [ 4] 1461 	call prti24  
                                   1462 ; print X
      0008A6 AE 09 1E         [ 2] 1463 	ldw x,#REG_X
      0008A9 16 05            [ 2] 1464 	ldw y,(5,sp)
      0008AB CD 08 66         [ 4] 1465 	call prt_reg16  
                                   1466 ; print Y 
      0008AE AE 09 1A         [ 2] 1467 	ldw x,#REG_Y
      0008B1 16 07            [ 2] 1468 	ldw y, (7,sp)
      0008B3 CD 08 66         [ 4] 1469 	call prt_reg16  
                                   1470 ; print A 
      0008B6 AE 09 22         [ 2] 1471 	ldw x,#REG_A
      0008B9 7B 04            [ 1] 1472 	ld a, (4,sp) 
      0008BB CD 08 41         [ 4] 1473 	call prt_reg8
                                   1474 ; print CC 
      0008BE AE 09 26         [ 2] 1475 	ldw x,#REG_CC 
      0008C1 7B 03            [ 1] 1476 	ld a, (3,sp) 
      0008C3 CD 08 41         [ 4] 1477 	call prt_reg8 
                                   1478 ; print SP 
      0008C6 AE 09 2B         [ 2] 1479 	ldw x,#REG_SP
      0008C9 90 96            [ 1] 1480 	ldw y,sp 
      0008CB 72 A9 00 0C      [ 2] 1481 	addw y,#12
      0008CF CD 08 66         [ 4] 1482 	call prt_reg16  
      0008D2 A6 0A            [ 1] 1483 	ld a,#'\n' 
      0008D4 CD 01 9E         [ 4] 1484 	call putc
      0008D7 81               [ 4] 1485 	ret
                                   1486 
      0008D8 0A 52 65 67 69 73 74  1487 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000915 45 50 43 3A 00        1488 REG_EPC: .asciz "EPC:"
      00091A 0A 59 3A 00           1489 REG_Y:   .asciz "\nY:" 
      00091E 0A 58 3A 00           1490 REG_X:   .asciz "\nX:"
      000922 0A 41 3A 00           1491 REG_A:   .asciz "\nA:" 
      000926 0A 43 43 3A 00        1492 REG_CC:  .asciz "\nCC:"
      00092B 0A 53 50 3A 00        1493 REG_SP:  .asciz "\nSP:"
                                   1494 .endif ; DEBUG 
                                   1495 
                                   1496 ;------------------------------------
                                   1497 ; print integer in acc24 
                                   1498 ; input:
                                   1499 ;	acc24 		integer to print 
                                   1500 ;	A 			numerical base for conversion 
                                   1501 ;               if bit 7 is set add a space at print end.
                                   1502 ;   XL 			field width, 0 -> no fill.
                                   1503 ;  output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1504 ;    none 
                                   1505 ;------------------------------------
                           000001  1506 	WIDTH = 1
                           000002  1507 	BASE = 2
                           000003  1508 	ADD_SPACE=3 ; add a space after number 
                           000003  1509 	VSIZE = 3
      000930                       1510 prti24:
      000930                       1511 	_vars VSIZE 
      000930 52 03            [ 2]    1     sub sp,#VSIZE 
      000932 0F 03            [ 1] 1512 	clr (ADD_SPACE,sp)
      000934 A5 80            [ 1] 1513 	bcp a,#0x80 
      000936 27 02            [ 1] 1514 	jreq 0$ 
      000938 03 03            [ 1] 1515 	cpl (ADD_SPACE,sp)
      00093A A4 1F            [ 1] 1516 0$:	and a,#31 
      00093C 6B 02            [ 1] 1517 	ld (BASE,sp),a
      00093E 9F               [ 1] 1518 	ld a,xl
      00093F 6B 01            [ 1] 1519 	ld (WIDTH,sp),a 
      000941 7B 02            [ 1] 1520 	ld a, (BASE,sp)  
      000943 CD 09 D4         [ 4] 1521     call itoa  ; conversion entier en  .asciz
      000946 7B 01            [ 1] 1522 1$: ld a,(WIDTH,sp)
      000948 27 1F            [ 1] 1523 	jreq 4$
      00094A C7 00 09         [ 1] 1524 	ld acc8,a 
      00094D 89               [ 2] 1525 	pushw x 
      00094E CD 02 72         [ 4] 1526 	call strlen 
      000951 9F               [ 1] 1527 	ld a,xl 
      000952 85               [ 2] 1528 	popw x 
      000953 31 00 09         [ 3] 1529 	exg a,acc8 
      000956 C0 00 09         [ 1] 1530 	sub a,acc8 
      000959 2B 0E            [ 1] 1531 	jrmi 4$
      00095B 6B 01            [ 1] 1532 	ld (WIDTH,sp),a 
      00095D A6 20            [ 1] 1533 	ld  a,#SPACE
      00095F 0D 01            [ 1] 1534 3$: tnz (WIDTH,sp)
      000961 27 06            [ 1] 1535 	jreq 4$
      000963 5A               [ 2] 1536 	decw x 
      000964 F7               [ 1] 1537 	ld (x),a 
      000965 0A 01            [ 1] 1538 	dec (WIDTH,sp) 
      000967 20 F6            [ 2] 1539 	jra 3$
      000969                       1540 4$: 
      000969 CD 01 B0         [ 4] 1541 	call puts 
      00096C 0D 03            [ 1] 1542 	tnz (ADD_SPACE,sp)
      00096E 27 05            [ 1] 1543 	jreq 5$
      000970 A6 20            [ 1] 1544     ld a,#SPACE 
      000972 CD 01 9E         [ 4] 1545 	call putc 
      000975                       1546 5$: _drop VSIZE 
      000975 5B 03            [ 2]    1     addw sp,#VSIZE 
      000977 81               [ 4] 1547     ret	
                                   1548 
                                   1549 ;-----------------------------------
                                   1550 ; print a 16 bit integer 
                                   1551 ; using variable 'base' as conversion
                                   1552 ; format.
                                   1553 ; input:
                                   1554 ;   X       integer to print 
                                   1555 ;   base    conversion base 
                                   1556 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1557 ;   none 
                                   1558 ;-----------------------------------
                           000001  1559 	SIGN=1
                           000001  1560 	VSIZE=1
      000978                       1561 print_int: 
      000978                       1562 	_vars VSIZE 
      000978 52 01            [ 2]    1     sub sp,#VSIZE 
      00097A 0F 01            [ 1] 1563 	clr (SIGN,sp)
      00097C 90 AE 17 3F      [ 2] 1564 	ldw y,#pad+PAD_SIZE-1 
      000980 90 7F            [ 1] 1565 	clr (y)
      000982 C6 00 06         [ 1] 1566 	ld a,base  
      000985 A1 0A            [ 1] 1567 	cp a,#10 
      000987 26 06            [ 1] 1568 	jrne 1$ 
      000989 5D               [ 2] 1569 	tnzw x 
      00098A 2A 03            [ 1] 1570 	jrpl 1$ 
      00098C 03 01            [ 1] 1571 	cpl (SIGN,sp)
      00098E 50               [ 2] 1572 	negw x 	 
      00098F                       1573 1$:	
      00098F C6 00 06         [ 1] 1574 	ld a,base 
      000992 62               [ 2] 1575 	div x,a 
      000993 AB 30            [ 1] 1576 	add a,#'0 
      000995 A1 3A            [ 1] 1577 	cp a,#'9+1 
      000997 2B 02            [ 1] 1578 	jrmi 2$ 
      000999 AB 07            [ 1] 1579 	add a,#7 
      00099B 90 5A            [ 2] 1580 2$: decw y 
      00099D 90 F7            [ 1] 1581 	ld (y),a 
      00099F 5D               [ 2] 1582 	tnzw x 
      0009A0 26 ED            [ 1] 1583 	jrne 1$ 
      0009A2 A6 10            [ 1] 1584 	ld a,#16 
      0009A4 C1 00 06         [ 1] 1585 	cp a,base 
      0009A7 26 08            [ 1] 1586 	jrne 3$
      0009A9 A6 24            [ 1] 1587 	ld a,#'$
      0009AB 90 5A            [ 2] 1588 	decw y  
      0009AD 90 F7            [ 1] 1589 	ld (y),a
      0009AF 20 0A            [ 2] 1590 	jra 9$ 
      0009B1 0D 01            [ 1] 1591 3$: tnz (SIGN,sp)
      0009B3 27 06            [ 1] 1592 	jreq 9$ 
      0009B5 A6 2D            [ 1] 1593 	ld a,#'-
      0009B7 90 5A            [ 2] 1594 	decw y  
      0009B9 90 F7            [ 1] 1595 	ld (y),a
      0009BB                       1596 9$:	
      0009BB 93               [ 1] 1597 	ldw x,y 
      0009BC 1D 17 3F         [ 2] 1598 	subw x,#pad+PAD_SIZE-1 
      0009BF 50               [ 2] 1599 	negw x  
      0009C0                       1600 10$:
      0009C0 90 5A            [ 2] 1601 	decw y 
      0009C2 A6 20            [ 1] 1602 	ld a,#SPACE 
      0009C4 90 F7            [ 1] 1603 	ld (y),a
      0009C6 5C               [ 1] 1604 	incw x 
      0009C7 9F               [ 1] 1605 	ld a,xl 
      0009C8 C1 00 20         [ 1] 1606 	cp a,tab_width
      0009CB 2B F3            [ 1] 1607 	jrmi 10$ 
      0009CD                       1608 12$:
      0009CD 93               [ 1] 1609     ldw x,y 
      0009CE CD 01 B0         [ 4] 1610 	call puts  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009D1                       1611 	_drop VSIZE 
      0009D1 5B 01            [ 2]    1     addw sp,#VSIZE 
      0009D3 81               [ 4] 1612 	ret 
                                   1613 
                                   1614 ;------------------------------------
                                   1615 ; convert integer in acc24 to string
                                   1616 ; input:
                                   1617 ;   A	  	base
                                   1618 ;	acc24	integer to convert
                                   1619 ; output:
                                   1620 ;   X  		pointer to string
                                   1621 ;------------------------------------
                           000001  1622 	SIGN=1  ; integer sign 
                           000002  1623 	BASE=2  ; numeric base 
                           000002  1624 	VSIZE=2  ;locals size
      0009D4                       1625 itoa:
      0009D4 52 02            [ 2] 1626 	sub sp,#VSIZE
      0009D6 6B 02            [ 1] 1627 	ld (BASE,sp), a  ; base
      0009D8 0F 01            [ 1] 1628 	clr (SIGN,sp)    ; sign
      0009DA A1 0A            [ 1] 1629 	cp a,#10
      0009DC 26 0A            [ 1] 1630 	jrne 1$
                                   1631 	; base 10 string display with negative sign if bit 23==1
      0009DE 72 0F 00 07 05   [ 2] 1632 	btjf acc24,#7,1$
      0009E3 03 01            [ 1] 1633 	cpl (SIGN,sp)
      0009E5 CD 0A 43         [ 4] 1634 	call neg_acc24
      0009E8                       1635 1$:
                                   1636 ; initialize string pointer 
      0009E8 AE 17 3F         [ 2] 1637 	ldw x,#pad+PAD_SIZE-1
      0009EB 7F               [ 1] 1638 	clr (x)
      0009EC                       1639 itoa_loop:
      0009EC 7B 02            [ 1] 1640     ld a,(BASE,sp)
      0009EE CD 0A 1B         [ 4] 1641     call divu24_8 ; acc24/A 
      0009F1 AB 30            [ 1] 1642     add a,#'0  ; remainder of division
      0009F3 A1 3A            [ 1] 1643     cp a,#'9+1
      0009F5 2B 02            [ 1] 1644     jrmi 2$
      0009F7 AB 07            [ 1] 1645     add a,#7 
      0009F9 5A               [ 2] 1646 2$: decw x
      0009FA F7               [ 1] 1647     ld (x),a
                                   1648 	; if acc24==0 conversion done
      0009FB C6 00 07         [ 1] 1649 	ld a,acc24
      0009FE CA 00 08         [ 1] 1650 	or a,acc16
      000A01 CA 00 09         [ 1] 1651 	or a,acc8
      000A04 26 E6            [ 1] 1652     jrne itoa_loop
                                   1653 	;conversion done, next add '$' or '-' as required
      000A06 7B 02            [ 1] 1654 	ld a,(BASE,sp)
      000A08 A1 10            [ 1] 1655 	cp a,#16
      000A0A 27 08            [ 1] 1656 	jreq 8$
      000A0C 7B 01            [ 1] 1657 	ld a,(SIGN,sp)
      000A0E 27 08            [ 1] 1658     jreq 10$
      000A10 A6 2D            [ 1] 1659     ld a,#'-
      000A12 20 02            [ 2] 1660 	jra 9$ 
      000A14 A6 24            [ 1] 1661 8$: ld a,#'$ 
      000A16 5A               [ 2] 1662 9$: decw x
      000A17 F7               [ 1] 1663     ld (x),a
      000A18                       1664 10$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A18 5B 02            [ 2] 1665 	addw sp,#VSIZE
      000A1A 81               [ 4] 1666 	ret
                                   1667 
                                   1668 ;-------------------------------------
                                   1669 ; divide uint24_t by uint8_t
                                   1670 ; used to convert uint24_t to string
                                   1671 ; input:
                                   1672 ;	acc24	dividend
                                   1673 ;   A 		divisor
                                   1674 ; output:
                                   1675 ;   acc24	quotient
                                   1676 ;   A		remainder
                                   1677 ;------------------------------------- 
                                   1678 ; offset  on sp of arguments and locals
                           000001  1679 	U8   = 1   ; divisor on stack
                           000001  1680 	VSIZE =1
      000A1B                       1681 divu24_8:
      000A1B 89               [ 2] 1682 	pushw x ; save x
      000A1C 88               [ 1] 1683 	push a 
                                   1684 	; ld dividend UU:MM bytes in X
      000A1D C6 00 07         [ 1] 1685 	ld a, acc24
      000A20 95               [ 1] 1686 	ld xh,a
      000A21 C6 00 08         [ 1] 1687 	ld a,acc24+1
      000A24 97               [ 1] 1688 	ld xl,a
      000A25 7B 01            [ 1] 1689 	ld a,(U8,SP) ; divisor
      000A27 62               [ 2] 1690 	div x,a ; UU:MM/U8
      000A28 88               [ 1] 1691 	push a  ;save remainder
      000A29 9E               [ 1] 1692 	ld a,xh
      000A2A C7 00 07         [ 1] 1693 	ld acc24,a
      000A2D 9F               [ 1] 1694 	ld a,xl
      000A2E C7 00 08         [ 1] 1695 	ld acc24+1,a
      000A31 84               [ 1] 1696 	pop a
      000A32 95               [ 1] 1697 	ld xh,a
      000A33 C6 00 09         [ 1] 1698 	ld a,acc24+2
      000A36 97               [ 1] 1699 	ld xl,a
      000A37 7B 01            [ 1] 1700 	ld a,(U8,sp) ; divisor
      000A39 62               [ 2] 1701 	div x,a  ; R:LL/U8
      000A3A 6B 01            [ 1] 1702 	ld (U8,sp),a ; save remainder
      000A3C 9F               [ 1] 1703 	ld a,xl
      000A3D C7 00 09         [ 1] 1704 	ld acc24+2,a
      000A40 84               [ 1] 1705 	pop a
      000A41 85               [ 2] 1706 	popw x
      000A42 81               [ 4] 1707 	ret
                                   1708 
                                   1709 ;------------------------------------
                                   1710 ;  two's complement acc24
                                   1711 ;  input:
                                   1712 ;		acc24 variable
                                   1713 ;  output:
                                   1714 ;		acc24 variable
                                   1715 ;-------------------------------------
      000A43                       1716 neg_acc24:
      000A43 72 53 00 09      [ 1] 1717 	cpl acc24+2
      000A47 72 53 00 08      [ 1] 1718 	cpl acc24+1
      000A4B 72 53 00 07      [ 1] 1719 	cpl acc24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A4F A6 01            [ 1] 1720 	ld a,#1
      000A51 CB 00 09         [ 1] 1721 	add a,acc24+2
      000A54 C7 00 09         [ 1] 1722 	ld acc24+2,a
      000A57 4F               [ 1] 1723 	clr a
      000A58 C9 00 08         [ 1] 1724 	adc a,acc24+1
      000A5B C7 00 08         [ 1] 1725 	ld acc24+1,a 
      000A5E 4F               [ 1] 1726 	clr a 
      000A5F C9 00 07         [ 1] 1727 	adc a,acc24 
      000A62 C7 00 07         [ 1] 1728 	ld acc24,a 
      000A65 81               [ 4] 1729 	ret
                                   1730 
                                   1731 
                                   1732 ;------------------------------------
                                   1733 ; read a line of text from terminal
                                   1734 ; input:
                                   1735 ;	none
                                   1736 ; local variable on stack:
                                   1737 ;	LL  line length
                                   1738 ;   RXCHAR last received chaaracte 
                                   1739 ; output:
                                   1740 ;   text in tib  buffer
                                   1741 ;------------------------------------
                                   1742 	; local variables
                           000001  1743 	LL_HB=1
                           000001  1744 	RXCHAR = 1 ; last char received
                           000002  1745 	LL = 2  ; accepted line length
                           000002  1746 	VSIZE=2 
      000A66                       1747 readln:
      000A66 5F               [ 1] 1748 	clrw x 
      000A67 89               [ 2] 1749 	pushw x 
      000A68 90 AE 16 C8      [ 2] 1750  	ldw y,#tib ; input buffer
      000A6C                       1751 readln_loop:
      000A6C CD 01 A7         [ 4] 1752 	call getc
      000A6F 6B 01            [ 1] 1753 	ld (RXCHAR,sp),a
      000A71 A1 0D            [ 1] 1754 	cp a,#CR
      000A73 26 03            [ 1] 1755 	jrne 1$
      000A75 CC 0A E1         [ 2] 1756 	jp readln_quit
      000A78 A1 0A            [ 1] 1757 1$:	cp a,#NL
      000A7A 27 65            [ 1] 1758 	jreq readln_quit
      000A7C A1 08            [ 1] 1759 	cp a,#BSP
      000A7E 27 3D            [ 1] 1760 	jreq del_back
      000A80 A1 04            [ 1] 1761 	cp a,#CTRL_D
      000A82 27 2A            [ 1] 1762 	jreq del_ln
      000A84 A1 12            [ 1] 1763 	cp a,#CTRL_R 
      000A86 27 06            [ 1] 1764 	jreq reprint 
                                   1765 ;	cp a,#'[
                                   1766 ;	jreq ansi_seq
      000A88                       1767 final_test:
      000A88 A1 20            [ 1] 1768 	cp a,#SPACE
      000A8A 2A 40            [ 1] 1769 	jrpl accept_char
      000A8C 20 DE            [ 2] 1770 	jra readln_loop
      000A8E                       1771 ansi_seq:
                                   1772 ;	call getc
                                   1773 ;	cp a,#'C 
                                   1774 ;	jreq rigth_arrow
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1775 ;	cp a,#'D 
                                   1776 ;	jreq left_arrow 
                                   1777 ;	jra final_test
      000A8E                       1778 right_arrow:
                                   1779 ;	ld a,#BSP 
                                   1780 ;	call putc 
                                   1781 ;	jra realn_loop 
      000A8E                       1782 left_arrow:
                                   1783 
                                   1784 ;	jra readln_loop
      000A8E                       1785 reprint: 
      000A8E 0D 02            [ 1] 1786 	tnz (LL,sp)
      000A90 26 DA            [ 1] 1787 	jrne readln_loop
      000A92 AE 16 C8         [ 2] 1788 	ldw x,#tib 
      000A95 CD 02 72         [ 4] 1789 	call strlen 
      000A98 90 AE 16 C8      [ 2] 1790 	ldw y,#tib 
      000A9C 9F               [ 1] 1791 	ld a,xl
      000A9D 27 CD            [ 1] 1792 	jreq readln_loop
      000A9F 6B 02            [ 1] 1793 	ld (LL,sp),a 
      000AA1 AE 16 C8         [ 2] 1794 	ldw x,#tib 
      000AA4 CD 01 B0         [ 4] 1795 	call puts
      000AA7 0F 01            [ 1] 1796 	clr (LL_HB,sp)
      000AA9 72 F9 01         [ 2] 1797 	addw y,(LL_HB,sp)
      000AAC 20 BE            [ 2] 1798 	jra readln_loop 
      000AAE                       1799 del_ln:
      000AAE 7B 02            [ 1] 1800 	ld a,(LL,sp)
      000AB0 CD 01 CA         [ 4] 1801 	call delete
      000AB3 90 AE 16 C8      [ 2] 1802 	ldw y,#tib
      000AB7 90 7F            [ 1] 1803 	clr (y)
      000AB9 0F 02            [ 1] 1804 	clr (LL,sp)
      000ABB 20 AF            [ 2] 1805 	jra readln_loop
      000ABD                       1806 del_back:
      000ABD 0D 02            [ 1] 1807     tnz (LL,sp)
      000ABF 27 AB            [ 1] 1808     jreq readln_loop
      000AC1 0A 02            [ 1] 1809     dec (LL,sp)
      000AC3 90 5A            [ 2] 1810     decw y
      000AC5 90 7F            [ 1] 1811     clr  (y)
      000AC7 CD 01 BA         [ 4] 1812     call bksp 
      000ACA 20 A0            [ 2] 1813     jra readln_loop	
      000ACC                       1814 accept_char:
      000ACC A6 4F            [ 1] 1815 	ld a,#TIB_SIZE-1
      000ACE 11 02            [ 1] 1816 	cp a, (LL,sp)
      000AD0 27 9A            [ 1] 1817 	jreq readln_loop
      000AD2 7B 01            [ 1] 1818 	ld a,(RXCHAR,sp)
      000AD4 90 F7            [ 1] 1819 	ld (y),a
      000AD6 0C 02            [ 1] 1820 	inc (LL,sp)
      000AD8 90 5C            [ 1] 1821 	incw y
      000ADA 90 7F            [ 1] 1822 	clr (y)
      000ADC CD 01 9E         [ 4] 1823 	call putc 
      000ADF 20 8B            [ 2] 1824 	jra readln_loop
      000AE1                       1825 readln_quit:
      000AE1 90 7F            [ 1] 1826 	clr (y)
      000AE3 7B 02            [ 1] 1827 	ld a,(LL,sp)
      000AE5 C7 00 03         [ 1] 1828 	ld count,a 
      000AE8                       1829 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000AE8 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AEA A6 0D            [ 1] 1830 	ld a,#CR
      000AEC CD 01 9E         [ 4] 1831 	call putc
      000AEF 81               [ 4] 1832 	ret
                                   1833 
                           000001  1834 .if DEBUG 	
                                   1835 ;----------------------------
                                   1836 ; command interface
                                   1837 ; only 3 commands:
                                   1838 ;  'q' to resume application
                                   1839 ;  'p [addr]' to print memory values 
                                   1840 ;  's addr' to print string 
                                   1841 ;----------------------------
                                   1842 ;local variable 
                           000001  1843 	PSIZE=1
                           000001  1844 	VSIZE=1 
      000AF0                       1845 cmd_itf:
      000AF0 52 01            [ 2] 1846 	sub sp,#VSIZE 
      000AF2 72 5F 00 10      [ 1] 1847 	clr farptr 
      000AF6 72 5F 00 11      [ 1] 1848 	clr farptr+1 
      000AFA 72 5F 00 12      [ 1] 1849 	clr farptr+2  
      000AFE                       1850 repl:
      000AFE A6 0D            [ 1] 1851 	ld a,#CR 
      000B00 CD 01 9E         [ 4] 1852 	call putc 
      000B03 A6 3F            [ 1] 1853 	ld a,#'? 
      000B05 CD 01 9E         [ 4] 1854 	call putc
      000B08 72 5F 00 00      [ 1] 1855 	clr in.w 
      000B0C 72 5F 00 01      [ 1] 1856 	clr in 
      000B10 CD 0A 66         [ 4] 1857 	call readln
      000B13 90 AE 16 C8      [ 2] 1858 	ldw y,#tib  
      000B17 90 F6            [ 1] 1859 	ld a,(y)
      000B19 27 E3            [ 1] 1860 	jreq repl  
      000B1B 72 5C 00 01      [ 1] 1861 	inc in 
      000B1F CD 0E A0         [ 4] 1862 	call to_upper 
      000B22 A1 51            [ 1] 1863 	cp a,#'Q 
      000B24 26 17            [ 1] 1864 	jrne test_p
      000B26                       1865 repl_exit:
      000B26 72 5F 16 C8      [ 1] 1866 	clr tib 
      000B2A 72 5F 00 03      [ 1] 1867 	clr count 
      000B2E 72 5F 00 01      [ 1] 1868 	clr in 
      000B32                       1869 	_drop #VSIZE 	
      000B32 5B 01            [ 2]    1     addw sp,##VSIZE 
      000B34 81               [ 4] 1870 	ret  
      000B35                       1871 invalid:
      000B35 AE 0B B3         [ 2] 1872 	ldw x,#invalid_cmd 
      000B38 CD 01 B0         [ 4] 1873 	call puts 
      000B3B 20 C1            [ 2] 1874 	jra repl 
      000B3D                       1875 test_p:	
      000B3D A1 50            [ 1] 1876     cp a,#'P 
      000B3F 27 11            [ 1] 1877 	jreq mem_peek
      000B41 A1 53            [ 1] 1878     cp a,#'S 
      000B43 26 F0            [ 1] 1879 	jrne invalid 
      000B45                       1880 print_string:	
      000B45 CD 0C DF         [ 4] 1881 	call get_token
      000B48 A1 04            [ 1] 1882 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000B4A 26 E9            [ 1] 1883 	jrne invalid 
      000B4C CD 01 B0         [ 4] 1884 	call puts
      000B4F CC 0A FE         [ 2] 1885 	jp repl 	
      000B52                       1886 mem_peek:
      000B52 A6 20            [ 1] 1887 	ld a,#SPACE 
      000B54 CD 0F 58         [ 4] 1888 	call skip  	 
      000B57 72 B9 00 00      [ 2] 1889 	addw y,in.w 
      000B5B AE 17 18         [ 2] 1890 	ldw x,#pad 
      000B5E CD 02 90         [ 4] 1891 	call strcpy
      000B61 CD 0E AC         [ 4] 1892 	call atoi24 	
      000B64 C6 00 07         [ 1] 1893 	ld a, acc24 
      000B67 CA 00 08         [ 1] 1894 	or a,acc16 
      000B6A CA 00 09         [ 1] 1895 	or a,acc8 
      000B6D 26 02            [ 1] 1896 	jrne 1$ 
      000B6F 20 0C            [ 2] 1897 	jra peek_byte  
      000B71 CE 00 07         [ 2] 1898 1$:	ldw x,acc24 
      000B74 CF 00 10         [ 2] 1899 	ldw farptr,x 
      000B77 C6 00 09         [ 1] 1900 	ld a,acc8 
      000B7A C7 00 12         [ 1] 1901 	ld farptr+2,a 
      000B7D                       1902 peek_byte:
      000B7D CD 0B C2         [ 4] 1903 	call print_farptr 
      000B80 A6 08            [ 1] 1904 	ld a,#8 
      000B82 6B 01            [ 1] 1905 	ld (PSIZE,sp),a 
      000B84 5F               [ 1] 1906 	clrw x 
      000B85 CD 0B DD         [ 4] 1907 1$:	call fetchc  
      000B88 89               [ 2] 1908 	pushw x 
      000B89 C7 00 09         [ 1] 1909 	ld acc8,a 
      000B8C 5F               [ 1] 1910 	clrw x 
      000B8D CF 00 07         [ 2] 1911 	ldw acc24,x 
      000B90 A6 90            [ 1] 1912 	ld a,#16+128
      000B92 CD 09 30         [ 4] 1913 	call prti24
      000B95 85               [ 2] 1914 	popw x 
      000B96 0A 01            [ 1] 1915 	dec (PSIZE,sp)
      000B98 26 EB            [ 1] 1916 	jrne 1$ 
      000B9A A6 08            [ 1] 1917 	ld a,#8 
      000B9C CB 00 12         [ 1] 1918 	add a,farptr+2 
      000B9F C7 00 12         [ 1] 1919 	ld farptr+2,a
      000BA2 4F               [ 1] 1920 	clr a 
      000BA3 C9 00 11         [ 1] 1921 	adc a,farptr+1 
      000BA6 C7 00 11         [ 1] 1922 	ld farptr+1,a 
      000BA9 4F               [ 1] 1923 	clr a 
      000BAA C9 00 10         [ 1] 1924 	adc a,farptr 
      000BAD C7 00 10         [ 1] 1925 	ld farptr,a 
      000BB0 CC 0A FE         [ 2] 1926 	jp repl  
                                   1927 
      000BB3 6E 6F 74 20 61 20 63  1928 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                   1929 
                                   1930 ;----------------------------
                                   1931 ; display farptr address
                                   1932 ;----------------------------
      000BC2                       1933 print_farptr:
      000BC2 C6 00 12         [ 1] 1934 	ld a ,farptr+2 
      000BC5 C7 00 09         [ 1] 1935 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000BC8 CE 00 10         [ 2] 1936 	ldw x,farptr 
      000BCB CF 00 07         [ 2] 1937 	ldw acc24,x 
      000BCE 5F               [ 1] 1938 	clrw x 
      000BCF A6 10            [ 1] 1939 	ld a,#16 
      000BD1 CD 09 30         [ 4] 1940 	call prti24
      000BD4 A6 20            [ 1] 1941 	ld a,#SPACE 
      000BD6 CD 01 9E         [ 4] 1942 	call putc 
      000BD9 CD 01 9E         [ 4] 1943 	call putc 
      000BDC 81               [ 4] 1944 	ret
                                   1945 
                                   1946 ;------------------------------------
                                   1947 ; get byte at address farptr[X]
                                   1948 ; input:
                                   1949 ;	 farptr   address to peek
                                   1950 ;    X		  farptr index 	
                                   1951 ; output:
                                   1952 ;	 A 		  byte from memory  
                                   1953 ;    x		  incremented by 1
                                   1954 ;------------------------------------
      000BDD                       1955 fetchc: ; @C
      000BDD 92 AF 00 10      [ 5] 1956 	ldf a,([farptr],x)
      000BE1 5C               [ 1] 1957 	incw x
      000BE2 81               [ 4] 1958 	ret
                                   1959 
                                   1960 
                                   1961 ;------------------------------------
                                   1962 ; expect a number from command line 
                                   1963 ; next argument
                                   1964 ;  input:
                                   1965 ;	  none
                                   1966 ;  output:
                                   1967 ;    acc24   int24_t 
                                   1968 ;------------------------------------
      000BE3                       1969 number::
      000BE3 CD 0C DF         [ 4] 1970 	call get_token
      000BE6 CD 0E AC         [ 4] 1971 	call atoi24
      000BE9 81               [ 4] 1972 	ret
                                   1973 .endif ; DEBUG 
                                   1974 
                                   1975 ;------------------------------------
                                   1976 ; parse quoted string 
                                   1977 ; input:
                                   1978 ;   Y 	pointer to tib 
                                   1979 ;   X   pointer to pad
                                   1980 ; output:
                                   1981 ;	pad   parsed string
                                   1982 ;   TOS  char* to pad  
                                   1983 ;------------------------------------
                           000001  1984 	PREV = 1
                           000002  1985 	CURR =2 
                           000002  1986 	VSIZE=2 
      000BEA                       1987 parse_quote: ; { -- addr }
      000BEA                       1988 	_vars VSIZE 
      000BEA 52 02            [ 2]    1     sub sp,#VSIZE 
      000BEC 4F               [ 1] 1989 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000BED 6B 01            [ 1] 1990 1$:	ld (PREV,sp),a 
      000BEF 72 5C 00 01      [ 1] 1991 2$:	inc in
      000BF3 91 D6 00         [ 4] 1992 	ld a,([in.w],y)
      000BF6 27 24            [ 1] 1993 	jreq 6$
      000BF8 6B 02            [ 1] 1994 	ld (CURR,sp),a 
      000BFA A6 5C            [ 1] 1995 	ld a,#'\
      000BFC 11 01            [ 1] 1996 	cp a, (PREV,sp)
      000BFE 26 0A            [ 1] 1997 	jrne 3$
      000C00 0F 01            [ 1] 1998 	clr (PREV,sp)
      000C02 7B 02            [ 1] 1999 	ld a,(CURR,sp)
      000C04 AD 1F            [ 4] 2000 	callr convert_escape
      000C06 F7               [ 1] 2001 	ld (x),a 
      000C07 5C               [ 1] 2002 	incw x 
      000C08 20 E5            [ 2] 2003 	jra 2$
      000C0A                       2004 3$:
      000C0A 7B 02            [ 1] 2005 	ld a,(CURR,sp)
      000C0C A1 5C            [ 1] 2006 	cp a,#'\'
      000C0E 27 DD            [ 1] 2007 	jreq 1$
      000C10 A1 22            [ 1] 2008 	cp a,#'"
      000C12 27 04            [ 1] 2009 	jreq 5$ 
      000C14 F7               [ 1] 2010 	ld (x),a 
      000C15 5C               [ 1] 2011 	incw x 
      000C16 20 D7            [ 2] 2012 	jra 2$
      000C18 72 5C 00 01      [ 1] 2013 5$:	inc in 
      000C1C 7F               [ 1] 2014 6$: clr (x)
      000C1D AE 17 18         [ 2] 2015 	ldw x,#pad 
      000C20                       2016 	_drop VSIZE
      000C20 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C22 A6 0A            [ 1] 2017 	ld a,#TK_QSTR  
      000C24 81               [ 4] 2018 	ret 
                                   2019 
                                   2020 ;---------------------------------------
                                   2021 ; called by parse_quote
                                   2022 ; subtitute escaped character 
                                   2023 ; by their ASCII value .
                                   2024 ; input:
                                   2025 ;   A  character following '\'
                                   2026 ; output:
                                   2027 ;   A  substitued char or same if not valid.
                                   2028 ;---------------------------------------
      000C25                       2029 convert_escape:
      000C25 89               [ 2] 2030 	pushw x 
      000C26 AE 0C 3A         [ 2] 2031 	ldw x,#escaped 
      000C29 F1               [ 1] 2032 1$:	cp a,(x)
      000C2A 27 06            [ 1] 2033 	jreq 2$
      000C2C 7D               [ 1] 2034 	tnz (x)
      000C2D 27 09            [ 1] 2035 	jreq 3$
      000C2F 5C               [ 1] 2036 	incw x 
      000C30 20 F7            [ 2] 2037 	jra 1$
      000C32 1D 0C 3A         [ 2] 2038 2$: subw x,#escaped 
      000C35 9F               [ 1] 2039 	ld a,xl 
      000C36 AB 07            [ 1] 2040 	add a,#7
      000C38 85               [ 2] 2041 3$:	popw x 
      000C39 81               [ 4] 2042 	ret 
                                   2043 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000C3A 61 62 74 6E 76 66 72  2044 escaped: .asciz "abtnvfr"
             00
                                   2045 
                                   2046 ;-------------------------
                                   2047 ; integer parser 
                                   2048 ; input:
                                   2049 ;   X 		point to pad 
                                   2050 ;   Y 		point to tib 
                                   2051 ;   A 	    first digit|'$' 
                                   2052 ; output:  
                                   2053 ;   pad     number string 
                                   2054 ;   X 		integer 
                                   2055 ;   A 		TK_INTGR
                                   2056 ;-------------------------
                           000001  2057 	BASE=1
                           000002  2058 	TCHAR=2 
                           000002  2059 	VSIZE=2 
      000C42                       2060 parse_integer: ; { -- n }
      000C42 4B 00            [ 1] 2061 	push #0 ; TCHAR 
      000C44 A1 24            [ 1] 2062 	cp a,#'$
      000C46 27 04            [ 1] 2063 	jreq 1$ 
      000C48 4B 0A            [ 1] 2064 	push #10 ; BASE=10 
      000C4A 20 02            [ 2] 2065 	jra 2$ 
      000C4C 4B 10            [ 1] 2066 1$: push #16  ; BASE=16
      000C4E F7               [ 1] 2067 2$:	ld (x),a 
      000C4F 5C               [ 1] 2068 	incw x 
      000C50 72 5C 00 01      [ 1] 2069 	inc in 
      000C54 91 D6 00         [ 4] 2070 	ld a,([in.w],y)
      000C57 CD 0E A0         [ 4] 2071 	call to_upper 
      000C5A 6B 02            [ 1] 2072 	ld (TCHAR,sp),a 
      000C5C CD 0E 97         [ 4] 2073 	call is_digit 
      000C5F 25 ED            [ 1] 2074 	jrc 2$
      000C61 A6 10            [ 1] 2075 	ld a,#16 
      000C63 11 01            [ 1] 2076 	cp a,(BASE,sp)
      000C65 26 0A            [ 1] 2077 	jrne 3$ 
      000C67 7B 02            [ 1] 2078 	ld a,(TCHAR,sp)
      000C69 A1 41            [ 1] 2079 	cp a,#'A 
      000C6B 2B 04            [ 1] 2080 	jrmi 3$ 
      000C6D A1 47            [ 1] 2081 	cp a,#'G 
      000C6F 2B DD            [ 1] 2082 	jrmi 2$ 
      000C71 7F               [ 1] 2083 3$:	clr (x)
      000C72 CD 0E AC         [ 4] 2084 	call atoi24
      000C75 CE 00 08         [ 2] 2085 	ldw x,acc16 
      000C78 A6 04            [ 1] 2086 	ld a,#TK_INTGR
      000C7A                       2087 	_drop VSIZE  
      000C7A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C7C 81               [ 4] 2088 	ret 	
                                   2089 
                                   2090 ;-------------------------
                                   2091 ; binary integer parser 
                                   2092 ; input:
                                   2093 ;   X 		point to pad 
                                   2094 ;   Y 		point to tib 
                                   2095 ;   A 	    '%' 
                                   2096 ; output:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2097 ;   pad     number string 
                                   2098 ;   X 		integer 
                                   2099 ;   A 		TK_INTGR
                                   2100 ;   TOS     integer 
                                   2101 ;-------------------------
                           000001  2102 	BINARY=1
                           000002  2103 	VSIZE=2
      000C7D                       2104 parse_binary: ; { -- n }
      000C7D 4B 00            [ 1] 2105 	push #0
      000C7F 4B 00            [ 1] 2106 	push #0
      000C81 F7               [ 1] 2107 1$: ld (x),a 
      000C82 5C               [ 1] 2108 	incw x 
      000C83 72 5C 00 01      [ 1] 2109 	inc in 
      000C87 91 D6 00         [ 4] 2110 	ld a,([in.w],y)
      000C8A A1 30            [ 1] 2111 	cp a,#'0 
      000C8C 27 06            [ 1] 2112 	jreq 2$
      000C8E A1 31            [ 1] 2113 	cp a,#'1 
      000C90 27 02            [ 1] 2114 	jreq 2$ 
      000C92 20 09            [ 2] 2115 	jra bin_exit 
      000C94 A0 30            [ 1] 2116 2$: sub a,#'0	
      000C96 46               [ 1] 2117 	rrc a 
      000C97 09 02            [ 1] 2118 	rlc (BINARY+1,sp)
      000C99 09 01            [ 1] 2119 	rlc (BINARY,sp)
      000C9B 20 E4            [ 2] 2120 	jra 1$  
      000C9D                       2121 bin_exit:
      000C9D 7F               [ 1] 2122 	clr (x)
      000C9E 1E 01            [ 2] 2123 	ldw x,(BINARY,sp)
      000CA0 A6 04            [ 1] 2124 	ld a,#TK_INTGR 	
      000CA2                       2125 	_drop VSIZE 
      000CA2 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CA4 81               [ 4] 2126 	ret
                                   2127 
                                   2128 ;---------------------------
                                   2129 ;  token begin with a letter,
                                   2130 ;  is keyword or variable. 	
                                   2131 ; input:
                                   2132 ;   X 		point to pad 
                                   2133 ;   Y 		point to text
                                   2134 ;   A 	    first letter  
                                   2135 ; output:
                                   2136 ;   X		exec_addr|var_addr 
                                   2137 ;   A 		TK_CMD 
                                   2138 ;   pad 	keyword|var_name  
                                   2139 ;   TOS     exec_addr|var_addr 
                                   2140 ;--------------------------  
      000CA5                       2141 parse_keyword: ; { -- exec_addr|var_addr}
      000CA5 CD 0E A0         [ 4] 2142 	call to_upper 
      000CA8 F7               [ 1] 2143 	ld (x),a 
      000CA9 5C               [ 1] 2144 	incw x 
      000CAA 72 5C 00 01      [ 1] 2145 	inc in 
      000CAE 91 D6 00         [ 4] 2146 	ld a,([in.w],y)
      000CB1 CD 04 F5         [ 4] 2147 	call is_alpha 
      000CB4 25 EF            [ 1] 2148 	jrc parse_keyword 
      000CB6 7F               [ 1] 2149 1$: clr (x)
      000CB7 72 5D 17 19      [ 1] 2150 	tnz pad+1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000CBB 26 15            [ 1] 2151 	jrne 2$
                                   2152 ; one letter variable name 
      000CBD C6 17 18         [ 1] 2153 	ld a,pad 
      000CC0 A0 41            [ 1] 2154 	sub a,#'A 
      000CC2 48               [ 1] 2155 	sll a 
      000CC3 88               [ 1] 2156 	push a 
      000CC4 4B 00            [ 1] 2157 	push #0
      000CC6 AE 00 21         [ 2] 2158 	ldw x,#vars 
      000CC9 72 FB 01         [ 2] 2159 	addw x,(1,sp) ; X=var address 
      000CCC                       2160 	_drop 2 
      000CCC 5B 02            [ 2]    1     addw sp,#2 
      000CCE A6 05            [ 1] 2161 	ld a,#TK_VAR 
      000CD0 20 0C            [ 2] 2162 	jra 4$ 
      000CD2                       2163 2$: ; check for keyword, otherwise syntax error.
      000CD2                       2164 	_ldx_dict kword_dict
      000CD2 AE 21 5D         [ 2]    1     ldw x,#kword_dict+2
      000CD5 CD 11 3C         [ 4] 2165 	call search_dict
      000CD8 4D               [ 1] 2166 	tnz a
      000CD9 26 03            [ 1] 2167 	jrne 4$ 
      000CDB CC 06 FF         [ 2] 2168 	jp syntax_error
      000CDE 81               [ 4] 2169 4$:	ret  	
                                   2170 
                                   2171 
                                   2172 ;------------------------------------
                                   2173 ; Command line tokenizer
                                   2174 ; scan text for next token
                                   2175 ; move token in 'pad'
                                   2176 ; input: 
      000CDF                       2177 	none: 
                                   2178 ; use:
                                   2179 ;	Y   pointer to text
                                   2180 ;   X	pointer to pad 
                                   2181 ;   in.w   index in text buffer
                                   2182 ; output:
                                   2183 ;   A       token attribute 
                                   2184 ;   pad 	token as .asciz
                                   2185 ;   X 		token value   
                                   2186 ;------------------------------------
                                   2187 	; use to check special character 
                                   2188 	.macro _case c t  
                                   2189 	ld a,#c 
                                   2190 	cp a,(TCHAR,sp) 
                                   2191 	jrne t
                                   2192 	.endm 
                                   2193 
                           000001  2194 	TCHAR=1
                           000002  2195 	ATTRIB=2 
                           000002  2196 	VSIZE=2
      000CDF                       2197 get_token: 
      000CDF 90 AE 16 C8      [ 2] 2198 	ldw y,#tib    	
      000CE3 C6 00 01         [ 1] 2199 	ld a,in 
      000CE6 C1 00 03         [ 1] 2200 	cp a,count 
      000CE9 2B 03            [ 1] 2201 	jrmi 1$
      000CEB A6 00            [ 1] 2202 	ld a,#TK_NONE 
      000CED 81               [ 4] 2203 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000CEE                       2204 1$:	
      000CEE                       2205 	_vars VSIZE
      000CEE 52 02            [ 2]    1     sub sp,#VSIZE 
      000CF0 AE 17 18         [ 2] 2206 	ldw x, #pad
      000CF3 A6 20            [ 1] 2207 	ld a,#SPACE
      000CF5 CD 0F 58         [ 4] 2208 	call skip
      000CF8 55 00 01 00 02   [ 1] 2209 	mov in.saved,in 
      000CFD 91 D6 00         [ 4] 2210 	ld a,([in.w],y)
      000D00 26 07            [ 1] 2211 	jrne str_tst
      000D02 72 5F 17 18      [ 1] 2212 	clr pad 
      000D06 CC 0E 94         [ 2] 2213 	jp token_exit ; end of line 
                                   2214 
      000D09                       2215 str_tst: ; check for quoted string  	
      000D09 CD 0E A0         [ 4] 2216 	call to_upper 
      000D0C 6B 01            [ 1] 2217 	ld (TCHAR,sp),a 
      000D0E                       2218 	_case '"' nbr_tst
      000D0E A6 22            [ 1]    1 	ld a,#'"' 
      000D10 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D12 26 06            [ 1]    3 	jrne nbr_tst
      000D14 CD 0B EA         [ 4] 2219 	call parse_quote
      000D17 CC 0E 94         [ 2] 2220 	jp token_exit
      000D1A                       2221 nbr_tst: ; check for number 
      000D1A A6 24            [ 1] 2222 	ld a,#'$'
      000D1C 11 01            [ 1] 2223 	cp a,(TCHAR,sp) 
      000D1E 27 13            [ 1] 2224 	jreq 1$
      000D20 A6 26            [ 1] 2225 	ld a,#'&
      000D22 11 01            [ 1] 2226 	cp a,(TCHAR,sp)
      000D24 26 06            [ 1] 2227 	jrne 0$
      000D26 CD 0C 7D         [ 4] 2228 	call parse_binary ; expect binary integer 
      000D29 CC 0E 94         [ 2] 2229 	jp token_exit 
      000D2C 7B 01            [ 1] 2230 0$:	ld a,(TCHAR,sp)
      000D2E CD 0E 97         [ 4] 2231 	call is_digit
      000D31 24 06            [ 1] 2232 	jrnc 3$
      000D33 CD 0C 42         [ 4] 2233 1$:	call parse_integer 
      000D36 CC 0E 94         [ 2] 2234 	jp token_exit 
      000D39                       2235 3$: 
      000D39                       2236 	_case '(' bkslsh_tst 
      000D39 A6 28            [ 1]    1 	ld a,#'(' 
      000D3B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3D 26 05            [ 1]    3 	jrne bkslsh_tst
      000D3F A6 0B            [ 1] 2237 	ld a,#TK_LPAREN
      000D41 CC 0E 84         [ 2] 2238 	jp token_char   	
      000D44                       2239 bkslsh_tst:
      000D44                       2240 	_case '\',rparnt_tst
      000D44 A6 5C            [ 1]    1 	ld a,#'\' 
      000D46 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D48 26 18            [ 1]    3 	jrne rparnt_tst
      000D4A 7B 01            [ 1] 2241 	ld a,(TCHAR,sp)
      000D4C F7               [ 1] 2242 	ld (x),a 
      000D4D 5C               [ 1] 2243 	incw x 
      000D4E 72 5C 00 01      [ 1] 2244 	inc in 
      000D52 91 D6 00         [ 4] 2245 	ld a,([in.w],y)
      000D55 F7               [ 1] 2246 	ld (x),a 
      000D56 5C               [ 1] 2247 	incw x 
      000D57 72 5C 00 01      [ 1] 2248 	inc in  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000D5B 7F               [ 1] 2249 	clr (x) 
      000D5C 97               [ 1] 2250 	ld xl,a 
      000D5D A6 03            [ 1] 2251 	ld a,#TK_CHAR 
      000D5F CC 0E 94         [ 2] 2252 	jp token_exit 
      000D62                       2253 rparnt_tst:		
      000D62                       2254 	_case ')' colon_tst 
      000D62 A6 29            [ 1]    1 	ld a,#')' 
      000D64 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D66 26 05            [ 1]    3 	jrne colon_tst
      000D68 A6 0C            [ 1] 2255 	ld a,#TK_RPAREN 
      000D6A CC 0E 84         [ 2] 2256 	jp token_char 
      000D6D                       2257 colon_tst:
      000D6D                       2258 	_case ':' comma_tst 
      000D6D A6 3A            [ 1]    1 	ld a,#':' 
      000D6F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D71 26 05            [ 1]    3 	jrne comma_tst
      000D73 A6 01            [ 1] 2259 	ld a,#TK_COLON 
      000D75 CC 0E 84         [ 2] 2260 	jp token_char 
      000D78                       2261 comma_tst:
      000D78                       2262 	_case COMMA sharp_tst 
      000D78 A6 2C            [ 1]    1 	ld a,#COMMA 
      000D7A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D7C 26 05            [ 1]    3 	jrne sharp_tst
      000D7E A6 0D            [ 1] 2263 	ld a,#TK_COMMA
      000D80 CC 0E 84         [ 2] 2264 	jp token_char
      000D83                       2265 sharp_tst:
      000D83                       2266 	_case SHARP dash_tst 
      000D83 A6 23            [ 1]    1 	ld a,#SHARP 
      000D85 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D87 26 05            [ 1]    3 	jrne dash_tst
      000D89 A6 0E            [ 1] 2267 	ld a,#TK_SHARP
      000D8B CC 0E 84         [ 2] 2268 	jp token_char  	 	 
      000D8E                       2269 dash_tst: 	
      000D8E                       2270 	_case '-' at_tst 
      000D8E A6 2D            [ 1]    1 	ld a,#'-' 
      000D90 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D92 26 05            [ 1]    3 	jrne at_tst
      000D94 A6 11            [ 1] 2271 	ld a,#TK_MINUS  
      000D96 CC 0E 84         [ 2] 2272 	jp token_char 
      000D99                       2273 at_tst:
      000D99                       2274 	_case '@' qmark_tst 
      000D99 A6 40            [ 1]    1 	ld a,#'@' 
      000D9B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D9D 26 05            [ 1]    3 	jrne qmark_tst
      000D9F A6 02            [ 1] 2275 	ld a,#TK_ARRAY 
      000DA1 CC 0E 84         [ 2] 2276 	jp token_char
      000DA4                       2277 qmark_tst:
      000DA4                       2278 	_case '?' tick_tst 
      000DA4 A6 3F            [ 1]    1 	ld a,#'?' 
      000DA6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DA8 26 11            [ 1]    3 	jrne tick_tst
      000DAA 7B 01            [ 1] 2279 	ld a,(TCHAR,sp)
      000DAC F7               [ 1] 2280 	ld (x),a 
      000DAD 5C               [ 1] 2281 	incw x 
      000DAE 7F               [ 1] 2282 	clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DAF 72 5C 00 01      [ 1] 2283 	inc in 
      000DB3 A6 06            [ 1] 2284 	ld a,#TK_CMD 
      000DB5 AE 15 ED         [ 2] 2285 	ldw x,#print 
      000DB8 CC 0E 94         [ 2] 2286 	jp token_exit
      000DBB                       2287 tick_tst: ; ignore comment 
      000DBB                       2288 	_case TICK plus_tst 
      000DBB A6 27            [ 1]    1 	ld a,#TICK 
      000DBD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DBF 26 0C            [ 1]    3 	jrne plus_tst
      000DC1 72 5C 00 01      [ 1] 2289 	inc in 
      000DC5 A6 06            [ 1] 2290 	ld a,#TK_CMD 
      000DC7 AE 16 F2         [ 2] 2291 	ldw x,#rem 
      000DCA CC 0E 94         [ 2] 2292 	jp token_exit 
      000DCD                       2293 plus_tst:
      000DCD                       2294 	_case '+' star_tst 
      000DCD A6 2B            [ 1]    1 	ld a,#'+' 
      000DCF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DD1 26 05            [ 1]    3 	jrne star_tst
      000DD3 A6 10            [ 1] 2295 	ld a,#TK_PLUS  
      000DD5 CC 0E 84         [ 2] 2296 	jp token_char 
      000DD8                       2297 star_tst:
      000DD8                       2298 	_case '*' slash_tst 
      000DD8 A6 2A            [ 1]    1 	ld a,#'*' 
      000DDA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DDC 26 05            [ 1]    3 	jrne slash_tst
      000DDE A6 20            [ 1] 2299 	ld a,#TK_MULT 
      000DE0 CC 0E 84         [ 2] 2300 	jp token_char 
      000DE3                       2301 slash_tst: 
      000DE3                       2302 	_case '/' prcnt_tst 
      000DE3 A6 2F            [ 1]    1 	ld a,#'/' 
      000DE5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DE7 26 05            [ 1]    3 	jrne prcnt_tst
      000DE9 A6 21            [ 1] 2303 	ld a,#TK_DIV 
      000DEB CC 0E 84         [ 2] 2304 	jp token_char 
      000DEE                       2305 prcnt_tst:
      000DEE                       2306 	_case '%' eql_tst 
      000DEE A6 25            [ 1]    1 	ld a,#'%' 
      000DF0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DF2 26 05            [ 1]    3 	jrne eql_tst
      000DF4 A6 22            [ 1] 2307 	ld a,#TK_MOD
      000DF6 CC 0E 84         [ 2] 2308 	jp token_char  
                                   2309 ; 1 or 2 character tokens 	
      000DF9                       2310 eql_tst:
      000DF9                       2311 	_case '=' gt_tst 		
      000DF9 A6 3D            [ 1]    1 	ld a,#'=' 
      000DFB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000DFD 26 05            [ 1]    3 	jrne gt_tst
      000DFF A6 32            [ 1] 2312 	ld a,#TK_EQUAL
      000E01 CC 0E 84         [ 2] 2313 	jp token_char 
      000E04                       2314 gt_tst:
      000E04                       2315 	_case '>' lt_tst 
      000E04 A6 3E            [ 1]    1 	ld a,#'>' 
      000E06 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E08 26 33            [ 1]    3 	jrne lt_tst
      000E0A A6 31            [ 1] 2316 	ld a,#TK_GT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E0C 6B 02            [ 1] 2317 	ld (ATTRIB,sp),a 
      000E0E 72 5C 00 01      [ 1] 2318 	inc in 
      000E12 91 D6 00         [ 4] 2319 	ld a,([in.w],y)
      000E15 A1 3D            [ 1] 2320 	cp a,#'=
      000E17 26 0C            [ 1] 2321 	jrne 1$
      000E19 7B 01            [ 1] 2322 	ld a,(TCHAR,sp)
      000E1B F7               [ 1] 2323 	ld (x),a
      000E1C 5C               [ 1] 2324 	incw x 
      000E1D A6 3D            [ 1] 2325 	ld a,#'=
      000E1F 6B 01            [ 1] 2326 	ld (TCHAR,sp),a 
      000E21 A6 33            [ 1] 2327 	ld a,#TK_GE 
      000E23 20 5F            [ 2] 2328 	jra token_char  
      000E25 A1 3C            [ 1] 2329 1$: cp a,#'<
      000E27 26 0C            [ 1] 2330 	jrne 2$
      000E29 7B 01            [ 1] 2331 	ld a,(TCHAR,sp)
      000E2B F7               [ 1] 2332 	ld (x),a
      000E2C 5C               [ 1] 2333 	incw x 
      000E2D A6 3C            [ 1] 2334 	ld a,#'<	
      000E2F 6B 01            [ 1] 2335 	ld (TCHAR,sp),a 
      000E31 A6 35            [ 1] 2336 	ld a,#TK_NE 
      000E33 20 4F            [ 2] 2337 	jra token_char 
      000E35 72 5A 00 01      [ 1] 2338 2$: dec in
      000E39 7B 02            [ 1] 2339 	ld a,(ATTRIB,sp)
      000E3B 20 47            [ 2] 2340 	jra token_char 
      000E3D                       2341 lt_tst:
      000E3D                       2342 	_case '<' other
      000E3D A6 3C            [ 1]    1 	ld a,#'<' 
      000E3F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000E41 26 32            [ 1]    3 	jrne other
      000E43 A6 34            [ 1] 2343 	ld a,#TK_LT 
      000E45 6B 02            [ 1] 2344 	ld (ATTRIB,sp),a 
      000E47 72 5C 00 01      [ 1] 2345 	inc in 
      000E4B 91 D6 00         [ 4] 2346 	ld a,([in.w],y)
      000E4E A1 3D            [ 1] 2347 	cp a,#'=
      000E50 26 0B            [ 1] 2348 	jrne 1$
      000E52 7B 01            [ 1] 2349 	ld a,(TCHAR,sp)
      000E54 F7               [ 1] 2350 	ld (x),a 
      000E55 A6 3D            [ 1] 2351 	ld a,#'=
      000E57 6B 01            [ 1] 2352 	ld (TCHAR,sp),a 
      000E59 A6 36            [ 1] 2353 	ld a,#TK_LE 
      000E5B 20 27            [ 2] 2354 	jra token_char 
      000E5D A1 3E            [ 1] 2355 1$: cp a,#'>
      000E5F 26 0C            [ 1] 2356 	jrne 2$
      000E61 7B 01            [ 1] 2357 	ld a,(TCHAR,sp)
      000E63 F7               [ 1] 2358 	ld (x),a 
      000E64 5C               [ 1] 2359 	incw x 
      000E65 A6 3E            [ 1] 2360 	ld a,#'>
      000E67 6B 01            [ 1] 2361 	ld (TCHAR,sp),a 
      000E69 A6 35            [ 1] 2362 	ld a,#TK_NE 
      000E6B 20 17            [ 2] 2363 	jra token_char 
      000E6D 72 5A 00 01      [ 1] 2364 2$: dec in 
      000E71 7B 02            [ 1] 2365 	ld a,(ATTRIB,sp)
      000E73 20 0F            [ 2] 2366 	jra token_char 	
      000E75                       2367 other: ; not a special character 	 
      000E75 7B 01            [ 1] 2368 	ld a,(TCHAR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000E77 CD 04 F5         [ 4] 2369 	call is_alpha 
      000E7A 25 03            [ 1] 2370 	jrc 30$ 
      000E7C CC 06 FF         [ 2] 2371 	jp syntax_error 
      000E7F                       2372 30$: 
      000E7F CD 0C A5         [ 4] 2373 	call parse_keyword
      000E82 20 10            [ 2] 2374 	jra token_exit 
      000E84                       2375 token_char:
      000E84 6B 02            [ 1] 2376 	ld (ATTRIB,sp),a 
      000E86 7B 01            [ 1] 2377 	ld a,(TCHAR,sp)
      000E88 F7               [ 1] 2378 	ld (x),a 
      000E89 5C               [ 1] 2379 	incw x 
      000E8A 7F               [ 1] 2380 	clr(x)
      000E8B 72 5C 00 01      [ 1] 2381 	inc in 
      000E8F 7B 02            [ 1] 2382 	ld a,(ATTRIB,sp)
      000E91 AE 17 18         [ 2] 2383 	ldw x,#pad 
      000E94                       2384 token_exit:
      000E94                       2385 	_drop VSIZE 
      000E94 5B 02            [ 2]    1     addw sp,#VSIZE 
      000E96 81               [ 4] 2386 	ret
                                   2387 
                                   2388 
                                   2389 
                                   2390 ;------------------------------------
                                   2391 ; check if character in {'0'..'9'}
                                   2392 ; input:
                                   2393 ;    A  character to test
                                   2394 ; output:
                                   2395 ;    Carry  0 not digit | 1 digit
                                   2396 ;------------------------------------
      000E97                       2397 is_digit:
      000E97 A1 30            [ 1] 2398 	cp a,#'0
      000E99 25 03            [ 1] 2399 	jrc 1$
      000E9B A1 3A            [ 1] 2400     cp a,#'9+1
      000E9D 8C               [ 1] 2401 	ccf 
      000E9E 8C               [ 1] 2402 1$:	ccf 
      000E9F 81               [ 4] 2403     ret
                                   2404 
                                   2405 ;------------------------------------
                                   2406 ; convert alpha to uppercase
                                   2407 ; input:
                                   2408 ;    a  character to convert
                                   2409 ; output:
                                   2410 ;    a  uppercase character
                                   2411 ;------------------------------------
      000EA0                       2412 to_upper::
      000EA0 A1 61            [ 1] 2413 	cp a,#'a
      000EA2 2A 01            [ 1] 2414 	jrpl 1$
      000EA4 81               [ 4] 2415 0$:	ret
      000EA5 A1 7A            [ 1] 2416 1$: cp a,#'z	
      000EA7 22 FB            [ 1] 2417 	jrugt 0$
      000EA9 A0 20            [ 1] 2418 	sub a,#32
      000EAB 81               [ 4] 2419 	ret
                                   2420 	
                                   2421 ;------------------------------------
                                   2422 ; convert pad content in integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2423 ; input:
                                   2424 ;    pad		.asciz to convert
                                   2425 ; output:
                                   2426 ;    acc24      int24_t
                                   2427 ;------------------------------------
                                   2428 	; local variables
                           000001  2429 	SIGN=1 ; 1 byte, 
                           000002  2430 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2431 	TEMP=3 ; 1 byte, temporary storage
                           000003  2432 	VSIZE=3 ; 3 bytes reserved for local storage
      000EAC                       2433 atoi24:
      000EAC 89               [ 2] 2434 	pushw x ;save x
      000EAD 52 03            [ 2] 2435 	sub sp,#VSIZE
                                   2436 	; acc24=0 
      000EAF 72 5F 00 07      [ 1] 2437 	clr acc24    
      000EB3 72 5F 00 08      [ 1] 2438 	clr acc16
      000EB7 72 5F 00 09      [ 1] 2439 	clr acc8 
      000EBB C6 17 18         [ 1] 2440 	ld a, pad 
      000EBE 27 5A            [ 1] 2441 	jreq atoi_exit
      000EC0 0F 01            [ 1] 2442 	clr (SIGN,sp)
      000EC2 A6 0A            [ 1] 2443 	ld a,#10
      000EC4 6B 02            [ 1] 2444 	ld (BASE,sp),a ; default base decimal
      000EC6 AE 17 18         [ 2] 2445 	ldw x,#pad ; pointer to string to convert
      000EC9 F6               [ 1] 2446 	ld a,(x)
      000ECA 27 47            [ 1] 2447 	jreq 9$  ; completed if 0
      000ECC A1 2D            [ 1] 2448 	cp a,#'-
      000ECE 26 04            [ 1] 2449 	jrne 1$
      000ED0 03 01            [ 1] 2450 	cpl (SIGN,sp)
      000ED2 20 08            [ 2] 2451 	jra 2$
      000ED4 A1 24            [ 1] 2452 1$: cp a,#'$
      000ED6 26 06            [ 1] 2453 	jrne 3$
      000ED8 A6 10            [ 1] 2454 	ld a,#16
      000EDA 6B 02            [ 1] 2455 	ld (BASE,sp),a
      000EDC 5C               [ 1] 2456 2$:	incw x
      000EDD F6               [ 1] 2457 	ld a,(x)
      000EDE                       2458 3$:	
      000EDE A1 61            [ 1] 2459 	cp a,#'a
      000EE0 2B 02            [ 1] 2460 	jrmi 4$
      000EE2 A0 20            [ 1] 2461 	sub a,#32
      000EE4 A1 30            [ 1] 2462 4$:	cp a,#'0
      000EE6 2B 2B            [ 1] 2463 	jrmi 9$
      000EE8 A0 30            [ 1] 2464 	sub a,#'0
      000EEA A1 0A            [ 1] 2465 	cp a,#10
      000EEC 2B 06            [ 1] 2466 	jrmi 5$
      000EEE A0 07            [ 1] 2467 	sub a,#7
      000EF0 11 02            [ 1] 2468 	cp a,(BASE,sp)
      000EF2 2A 1F            [ 1] 2469 	jrpl 9$
      000EF4 6B 03            [ 1] 2470 5$:	ld (TEMP,sp),a
      000EF6 7B 02            [ 1] 2471 	ld a,(BASE,sp)
      000EF8 CD 0F 1E         [ 4] 2472 	call mulu24_8
      000EFB 7B 03            [ 1] 2473 	ld a,(TEMP,sp)
      000EFD CB 00 09         [ 1] 2474 	add a,acc24+2
      000F00 C7 00 09         [ 1] 2475 	ld acc24+2,a
      000F03 4F               [ 1] 2476 	clr a
      000F04 C9 00 08         [ 1] 2477 	adc a,acc24+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F07 C7 00 08         [ 1] 2478 	ld acc24+1,a
      000F0A 4F               [ 1] 2479 	clr a
      000F0B C9 00 07         [ 1] 2480 	adc a,acc24
      000F0E C7 00 07         [ 1] 2481 	ld acc24,a
      000F11 20 C9            [ 2] 2482 	jra 2$
      000F13 0D 01            [ 1] 2483 9$:	tnz (SIGN,sp)
      000F15 27 03            [ 1] 2484     jreq atoi_exit
      000F17 CD 0A 43         [ 4] 2485     call neg_acc24
      000F1A                       2486 atoi_exit: 
      000F1A 5B 03            [ 2] 2487 	addw sp,#VSIZE
      000F1C 85               [ 2] 2488 	popw x ; restore x
      000F1D 81               [ 4] 2489 	ret
                                   2490 
                                   2491 ;--------------------------------------
                                   2492 ; unsigned multiply uint24_t by uint8_t
                                   2493 ; use to convert numerical string to uint24_t
                                   2494 ; input:
                                   2495 ;	acc24	uint24_t 
                                   2496 ;   A		uint8_t
                                   2497 ; output:
                                   2498 ;   acc24   A*acc24
                                   2499 ;-------------------------------------
                                   2500 ; local variables offset  on sp
                           000003  2501 	U8   = 3   ; A pushed on stack
                           000002  2502 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  2503 	OVFH = 1  ; multiplication overflow high byte
                           000003  2504 	VSIZE = 3
      000F1E                       2505 mulu24_8:
      000F1E 89               [ 2] 2506 	pushw x    ; save X
                                   2507 	; local variables
      000F1F 88               [ 1] 2508 	push a     ; U8
      000F20 5F               [ 1] 2509 	clrw x     ; initialize overflow to 0
      000F21 89               [ 2] 2510 	pushw x    ; multiplication overflow
                                   2511 ; multiply low byte.
      000F22 C6 00 09         [ 1] 2512 	ld a,acc24+2
      000F25 97               [ 1] 2513 	ld xl,a
      000F26 7B 03            [ 1] 2514 	ld a,(U8,sp)
      000F28 42               [ 4] 2515 	mul x,a
      000F29 9F               [ 1] 2516 	ld a,xl
      000F2A C7 00 09         [ 1] 2517 	ld acc24+2,a
      000F2D 9E               [ 1] 2518 	ld a, xh
      000F2E 6B 02            [ 1] 2519 	ld (OVFL,sp),a
                                   2520 ; multipy middle byte
      000F30 C6 00 08         [ 1] 2521 	ld a,acc24+1
      000F33 97               [ 1] 2522 	ld xl,a
      000F34 7B 03            [ 1] 2523 	ld a, (U8,sp)
      000F36 42               [ 4] 2524 	mul x,a
                                   2525 ; add overflow to this partial product
      000F37 72 FB 01         [ 2] 2526 	addw x,(OVFH,sp)
      000F3A 9F               [ 1] 2527 	ld a,xl
      000F3B C7 00 08         [ 1] 2528 	ld acc24+1,a
      000F3E 4F               [ 1] 2529 	clr a
      000F3F A9 00            [ 1] 2530 	adc a,#0
      000F41 6B 01            [ 1] 2531 	ld (OVFH,sp),a
      000F43 9E               [ 1] 2532 	ld a,xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000F44 6B 02            [ 1] 2533 	ld (OVFL,sp),a
                                   2534 ; multiply most signficant byte	
      000F46 C6 00 07         [ 1] 2535 	ld a, acc24
      000F49 97               [ 1] 2536 	ld xl, a
      000F4A 7B 03            [ 1] 2537 	ld a, (U8,sp)
      000F4C 42               [ 4] 2538 	mul x,a
      000F4D 72 FB 01         [ 2] 2539 	addw x, (OVFH,sp)
      000F50 9F               [ 1] 2540 	ld a, xl
      000F51 C7 00 07         [ 1] 2541 	ld acc24,a
      000F54 5B 03            [ 2] 2542     addw sp,#VSIZE
      000F56 85               [ 2] 2543 	popw x
      000F57 81               [ 4] 2544 	ret
                                   2545 
                                   2546 ;------------------------------------
                                   2547 ; skip character c in text starting from 'in'
                                   2548 ; input:
                                   2549 ;	 y 		point to text buffer
                                   2550 ;    a 		character to skip
                                   2551 ; output:  
                                   2552 ;	'in' ajusted to new position
                                   2553 ;------------------------------------
                           000001  2554 	C = 1 ; local var
      000F58                       2555 skip:
      000F58 88               [ 1] 2556 	push a
      000F59 91 D6 00         [ 4] 2557 1$:	ld a,([in.w],y)
      000F5C 27 0A            [ 1] 2558 	jreq 2$
      000F5E 11 01            [ 1] 2559 	cp a,(C,sp)
      000F60 26 06            [ 1] 2560 	jrne 2$
      000F62 72 5C 00 01      [ 1] 2561 	inc in
      000F66 20 F1            [ 2] 2562 	jra 1$
      000F68                       2563 2$: _drop 1 
      000F68 5B 01            [ 2]    1     addw sp,#1 
      000F6A 81               [ 4] 2564 	ret
                                   2565 	
                                   2566 ;------------------------------
                                   2567 ; restore 'in.w' variable to 
                                   2568 ; its value before last call
                                   2569 ; to get_token.
                                   2570 ;------------------------------
      000F6B                       2571 unget_token:
      000F6B 55 00 02 00 01   [ 1] 2572 	mov in,in.saved
      000F70 81               [ 4] 2573 	ret 
                                   2574 
                                   2575 
                                   2576 ;******************************
                                   2577 ;  data stack manipulation
                                   2578 ;*****************************
                                   2579 ;----------------------	
                                   2580 ; push X on data stack 
                                   2581 ; input:
                                   2582 ;	X 
                                   2583 ; output:
                                   2584 ;	none 
                                   2585 ;----------------------	
      000F71                       2586 dpush:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000F71                       2587     _dp_down
      000F71 72 5A 00 17      [ 1]    1     dec dstkptr+1 
      000F75 72 5A 00 17      [ 1]    2     dec dstkptr+1
      000F79 72 CF 00 16      [ 5] 2588     ldw [dstkptr],x  
      000F7D 81               [ 4] 2589 	ret 
                                   2590 
                                   2591 
                                   2592 ;----------------------	
                                   2593 ; pop data stack in X 
                                   2594 ; input:
                                   2595 ;	none
                                   2596 ; output:
                                   2597 ;	X   
                                   2598 ;----------------------	
      000F7E                       2599 dpop: 
      000F7E 72 CE 00 16      [ 5] 2600     ldw x, [dstkptr]
      000F82                       2601 	_dp_up
      000F82 72 5C 00 17      [ 1]    1     inc dstkptr+1
      000F86 72 5C 00 17      [ 1]    2     inc dstkptr+1
      000F8A 81               [ 4] 2602 	ret 
                                   2603 
                                   2604 ;-----------------------------
                                   2605 ; swap top 2 elements of dstack
                                   2606 ;  {n1 n2 -- n2 n1 }
                                   2607 ;-----------------------------
      000F8B                       2608 dswap:
      000F8B 72 CE 00 16      [ 5] 2609 	ldw x,[dstkptr]
      000F8F 89               [ 2] 2610 	pushw x 
      000F90 AE 00 02         [ 2] 2611 	ldw x,#2 
      000F93 72 DE 00 16      [ 5] 2612 	ldw x,([dstkptr],x) 
      000F97 72 CF 00 16      [ 5] 2613 	ldw [dstkptr],x 
      000F9B AE 00 02         [ 2] 2614 	ldw x,#2
      000F9E 90 85            [ 2] 2615 	popw y 
      000FA0 72 DF 00 16      [ 5] 2616 	ldw ([dstkptr],x),y 
      000FA4 81               [ 4] 2617 	ret
                                   2618 
                                   2619 ;-----------------------------
                                   2620 ; drop TOS 
                                   2621 ;-----------------------------
      000FA5                       2622 ddrop: ; { n -- }
      000FA5                       2623 	_dp_up 
      000FA5 72 5C 00 17      [ 1]    1     inc dstkptr+1
      000FA9 72 5C 00 17      [ 1]    2     inc dstkptr+1
      000FAD 81               [ 4] 2624 	ret
                                   2625 	
                                   2626 ;-----------------------------
                                   2627 ; duplicate TOS 
                                   2628 ;  dstack: { ix...n -- ix...n n }
                                   2629 ;-----------------------------
      000FAE                       2630 ddup:
      000FAE 72 CE 00 16      [ 5] 2631 	ldw x,[dstkptr]
      000FB2                       2632 	_dp_down
      000FB2 72 5A 00 17      [ 1]    1     dec dstkptr+1 
      000FB6 72 5A 00 17      [ 1]    2     dec dstkptr+1
      000FBA 72 CF 00 16      [ 5] 2633     ldw [dstkptr],x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000FBE 81               [ 4] 2634 	ret 
                                   2635 
                                   2636 
                                   2637 ;----------------------------------
                                   2638 ; pick value n from dstack 
                                   2639 ; put it on TOS
                                   2640 ; dstack: {ix,..,p -- ix,...,np }
                                   2641 ;-----------------------------------
      000FBF                       2642 dpick:
      000FBF 72 CE 00 16      [ 5] 2643 	ldw x,[dstkptr]
      000FC3 58               [ 2] 2644 	sllw x 
      000FC4 72 BB 00 16      [ 2] 2645 	addw x,dstkptr 
      000FC8 FE               [ 2] 2646 	ldw x,(x)
      000FC9 72 CF 00 16      [ 5] 2647 	ldw [dstkptr],x 
      000FCD 81               [ 4] 2648 	ret
                                   2649 
                                   2650 ;---------------------------
                                   2651 ;  fetch variable in X 
                                   2652 ;  dstack:{ addr -- value }
                                   2653 ;---------------------------
      000FCE                       2654 fetch:
      000FCE 72 CE 00 16      [ 5] 2655 	ldw x,[dstkptr]
      000FD2 FE               [ 2] 2656 	ldw x,(x)
      000FD3 72 CF 00 16      [ 5] 2657 	ldw [dstkptr],x
      000FD7 81               [ 4] 2658 	ret 
                                   2659 
                                   2660 ;----------------------------
                                   2661 ; store variable 
                                   2662 ; dstack: {addr value -- }
                                   2663 ;----------------------------
      000FD8                       2664 store:
      000FD8 CD 0F 7E         [ 4] 2665 	call dpop 
      000FDB 90 93            [ 1] 2666 	ldw y,x   ; y=value 
      000FDD CD 0F 7E         [ 4] 2667 	call dpop 
      000FE0 FF               [ 2] 2668 	ldw (x),y 
      000FE1 81               [ 4] 2669 	ret 
                                   2670 
                                   2671 ;---------------------------------
                                   2672 ; drop n elements from data stack 
                                   2673 ; input: 
                                   2674 ;   X 		n 
                                   2675 ; output:
                                   2676 ;   none 
                                   2677 ;-------------------------------------
      000FE2                       2678 ddrop_n:
      000FE2 90 89            [ 2] 2679 	pushw y 
      000FE4 90 CE 00 16      [ 2] 2680 	ldw y,dstkptr 
      000FE8 58               [ 2] 2681 	sllw x 
      000FE9 89               [ 2] 2682 	pushw x 
      000FEA 72 F9 01         [ 2] 2683 	addw y,(1,sp)
      000FED 90 CF 00 16      [ 2] 2684 	ldw dstkptr,y 
      000FF1 85               [ 2] 2685 	popw x 
      000FF2 90 85            [ 2] 2686 	popw y
      000FF4 81               [ 4] 2687 	ret 
                                   2688 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000FF5 0A 64 73 74 61 63 6B  2689 dstk_prompt: .asciz "\ndstack: " 
             3A 20 00
                                   2690 ;----------------------------
                                   2691 ; print dstack content 
                                   2692 ;---------------------------
                           000001  2693 	XSAVE=1
                           000002  2694 	VSIZE=2
      000FFF                       2695 dots:
      000FFF                       2696 	_vars VSIZE 
      000FFF 52 02            [ 2]    1     sub sp,#VSIZE 
      001001 AE 0F F5         [ 2] 2697 	ldw x,#dstk_prompt 
      001004 CD 01 B0         [ 4] 2698 	call puts
      001007 AE 17 7E         [ 2] 2699 	ldw x,#dstack_unf-CELL_SIZE
      00100A 35 0A 00 06      [ 1] 2700 	mov base,#10 
      00100E C3 00 16         [ 2] 2701 1$:	cpw x,dstkptr 
      001011 25 0D            [ 1] 2702 	jrult 4$ 
      001013 1F 01            [ 2] 2703 	ldw (XSAVE,sp),x
      001015 FE               [ 2] 2704 	ldw  x,(x)
      001016 CD 09 78         [ 4] 2705 	call print_int 
      001019 1E 01            [ 2] 2706 	ldw x,(XSAVE,sp)
      00101B 1D 00 02         [ 2] 2707 	subw x,#CELL_SIZE 
      00101E 20 EE            [ 2] 2708 	jra 1$ 
      001020 A6 0D            [ 1] 2709 4$: ld a,#CR 
      001022 CD 01 9E         [ 4] 2710 	call putc 
      001025                       2711 	_drop VSIZE
      001025 5B 02            [ 2]    1     addw sp,#VSIZE 
      001027 4F               [ 1] 2712 	clr a 
      001028 81               [ 4] 2713 	ret
                                   2714 
      001029 0A 63 74 61 63 6B 3A  2715 cstk_prompt: .asciz "\nctack: "
             20 00
                                   2716 ;--------------------------------
                                   2717 ; print cstack content
                                   2718 ;--------------------------------
                           000001  2719 	XSAVE=1
                           000002  2720 	VSIZE=2 
      001032                       2721 dotr:
      001032                       2722 	_vars VSIZE 
      001032 52 02            [ 2]    1     sub sp,#VSIZE 
      001034 AE 10 29         [ 2] 2723 	ldw x,#cstk_prompt
      001037 CD 01 B0         [ 4] 2724 	call puts 
      00103A 96               [ 1] 2725 	ldw x,sp 
      00103B 1C 00 07         [ 2] 2726 	addw x,#7 ; ignore XSAVE and 2 levels of return address.
      00103E 1F 01            [ 2] 2727 	ldw (XSAVE,sp),x  
      001040 AE 17 FE         [ 2] 2728 	ldw x,#RAM_SIZE-2
      001043 35 10 00 06      [ 1] 2729 	mov base,#16
      001047                       2730 dotr_loop:
      001047 13 01            [ 2] 2731 	cpw x,(XSAVE,sp)
      001049 2B 0B            [ 1] 2732 	jrmi 9$
      00104B 89               [ 2] 2733 	pushw x  
      00104C FE               [ 2] 2734 	ldw x,(x)
      00104D CD 09 78         [ 4] 2735 	call print_int 
      001050 85               [ 2] 2736 	popw x  
      001051 1D 00 02         [ 2] 2737 	subw x,#CELL_SIZE
      001054 20 F1            [ 2] 2738 	jra dotr_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001056 A6 0D            [ 1] 2739 9$:	ld a,#CR 
      001058 CD 01 9E         [ 4] 2740 	call putc 
      00105B                       2741 	_drop VSIZE 
      00105B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00105D 4F               [ 1] 2742 	clr a 
      00105E 81               [ 4] 2743 	ret
                                   2744 
                                   2745 
                                   2746 ;--------------------------------
                                   2747 ;  add 2 integers
                                   2748 ;  input:
                                   2749 ;    N1     on cstack 
                                   2750 ;    N2     on cstack 
                                   2751 ;  output:
                                   2752 ;    X 		n2+n1 
                                   2753 ;--------------------------------
                                   2754 	;arugments on cstack 
      00105F                       2755 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00105F                       2756 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      00105F                       2757 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      00105F                       2758 add:
      00105F 1E 05            [ 2] 2759 	ldw x ,(N2,sp)
      001061 72 FB 03         [ 2] 2760 	addw x,(N1,sp)
      001064 1F 03            [ 2] 2761 	ldw (N1,sp),x 
      001066 81               [ 4] 2762 	ret 
                                   2763 
                                   2764 ;--------------------------------
                                   2765 ;  substract 2 ntegers
                                   2766 ;  input:
                                   2767 ;    N1     on cstack 
                                   2768 ;    N2     on cstack 
                                   2769 ;  output:
                                   2770 ;    X 		n2+n1 
                                   2771 ;--------------------------------
      001067                       2772 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001067                       2773 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      001067                       2774 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      001067                       2775 substract:
      001067 1E 05            [ 2] 2776 	ldw x,(N2,sp)
      001069 72 F0 03         [ 2] 2777 	subw x,(N1,sp)
      00106C 81               [ 4] 2778 	ret 
                                   2779 
                                   2780 ;-------------------------------------
                                   2781 ; multiply 2 integers
                                   2782 ; product overflow is ignored unless
                                   2783 ; MATH_OVF assembler flag is set to 1
                                   2784 ; input:
                                   2785 ;  	N1      on cstack
                                   2786 ;   N2 		on cstack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2787 ; output:
                                   2788 ;	X        N1*N2 
                                   2789 ;-------------------------------------
                                   2790 	;arguments 
      00106D                       2791 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      00106D                       2792 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      00106D                       2793 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      00106D                       2794 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      00106D                       2795 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2796    ; local variables 
                           000001  2797 	SIGN=1
                           000002  2798 	PROD=2
                           000003  2799 	VSIZE=3
      00106D                       2800 multiply:
      00106D                       2801 	_vars VSIZE 
      00106D 52 03            [ 2]    1     sub sp,#VSIZE 
      00106F 0F 01            [ 1] 2802 	clr (SIGN,sp)
      001071 1E 06            [ 2] 2803 	ldw x,(N1_HB,sp)
      001073 9E               [ 1] 2804 	ld a,xh  
      001074 A5 80            [ 1] 2805 	bcp a,#0x80 
      001076 27 05            [ 1] 2806 	jreq 2$
      001078 03 01            [ 1] 2807 	cpl (SIGN,sp)
      00107A 50               [ 2] 2808 	negw x 
      00107B 1F 06            [ 2] 2809 	ldw (N1_HB,sp),x 
      00107D 1E 08            [ 2] 2810 2$: ldw x,(N2_HB,sp)
      00107F 9E               [ 1] 2811 	ld a,xh  
      001080 A5 80            [ 1] 2812 	bcp a,#0x80 
      001082 27 05            [ 1] 2813 	jreq 3$
      001084 03 01            [ 1] 2814 	cpl (SIGN,sp)
      001086 50               [ 2] 2815 	negw x 
      001087 1F 08            [ 2] 2816 	ldw (N2_HB,sp),x 
                                   2817 ; N1_LB * N2_LB 	
      001089 7B 07            [ 1] 2818 3$:	ld a,(N1_LB,sp)
      00108B 97               [ 1] 2819 	ld xl,a 
      00108C 7B 09            [ 1] 2820 	ld a,(N2_LB,sp) 
      00108E 42               [ 4] 2821 	mul x,a 
                           000000  2822 .if MATH_OVF 	
                                   2823 	ld a,xh 
                                   2824 	bcp a,#0x80 
                                   2825 	jreq 4$ 
                                   2826 	ld a,#ERR_MATH_OVF 
                                   2827 	jp tb_error
                                   2828 .endif 	 
      00108F 1F 02            [ 2] 2829 4$:	ldw (PROD,sp),x
                                   2830 ; N1_LB * N2_HB	 
      001091 7B 07            [ 1] 2831 	ld a,(N1_LB,sp) 
      001093 97               [ 1] 2832 	ld xl,a 
      001094 7B 08            [ 1] 2833 	ld a,(N2_HB,sp)
      001096 42               [ 4] 2834 	mul x,a
      001097 9F               [ 1] 2835 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001098 1B 02            [ 1] 2836 	add a,(PROD,sp)
                           000000  2837 .if MATH_OVF 	
                                   2838 	bcp a,#0x80 
                                   2839 	jreq 5$ 
                                   2840 	ld a,#ERR_MATH_OVF 
                                   2841 	jp tb_error
                                   2842 .endif 	 
      00109A 6B 02            [ 1] 2843 5$:	ld (PROD,sp),a 
                                   2844 ; N1_HB * N2_LB 
      00109C 7B 06            [ 1] 2845 	ld a,(N1_HB,sp)
      00109E 97               [ 1] 2846 	ld xl,a 
      00109F 7B 09            [ 1] 2847 	ld a,(N2_LB,sp)
      0010A1 42               [ 4] 2848 	mul x,a 
      0010A2 9F               [ 1] 2849 	ld a,xl 
      0010A3 1B 02            [ 1] 2850 	add a,(PROD,sp)
                           000000  2851 .if MATH_OVF 	
                                   2852 	bcp a,#0x80 
                                   2853 	jreq 6$ 
                                   2854 	ld a,#ERR_MATH_OVF 
                                   2855 	jp tb_error
                                   2856 .endif 	 
      0010A5 6B 02            [ 1] 2857 6$:	ld (PROD,sp),a 
                                   2858 ; N1_HB * N2_HB 	
                                   2859 ; it is pointless to multiply N1_HB*N2_HB 
                                   2860 ; as this product is over 65535 or 0 
                                   2861 ;
                                   2862 ; sign adjust product
      0010A7 0D 01            [ 1] 2863 	tnz (SIGN,sp)
      0010A9 27 05            [ 1] 2864 	jreq 7$
      0010AB 1E 02            [ 2] 2865 	ldw x, (PROD,sp)
      0010AD 50               [ 2] 2866 	negw x
      0010AE 1F 02            [ 2] 2867 	ldw (PROD,sp),x  
      0010B0                       2868 7$: 
      0010B0 1E 02            [ 2] 2869 	ldw x,(PROD,sp) 
      0010B2                       2870 	_drop VSIZE 
      0010B2 5B 03            [ 2]    1     addw sp,#VSIZE 
      0010B4 81               [ 4] 2871 	ret
                                   2872 
                                   2873 ;----------------------------------
                                   2874 ;  euclidian divide n2/n1 
                                   2875 ; input:
                                   2876 ;    N2 	on cstack
                                   2877 ;    N1 	on cstack
                                   2878 ; output:
                                   2879 ;    X      n2/n1 
                                   2880 ;    Y      remainder 
                                   2881 ;----------------------------------
      0010B5                       2882 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      0010B5                       2883 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      0010B5                       2884 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2885 	; local variables
                           000001  2886 	SQUOT=1 ; sign quotient
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                           000002  2887 	SDIVD=2 ; sign dividend  
                           000002  2888 	VSIZE=2
      0010B5                       2889 divide:
      0010B5                       2890 	_vars VSIZE 
      0010B5 52 02            [ 2]    1     sub sp,#VSIZE 
      0010B7 0F 01            [ 1] 2891 	clr (SQUOT,sp)
      0010B9 0F 02            [ 1] 2892 	clr (SDIVD,sp)
                                   2893 ; check for 0 divisor
      0010BB 1E 05            [ 2] 2894 	ldw x,(DIVISR,sp)
      0010BD 5D               [ 2] 2895 	tnzw x 
      0010BE 26 05            [ 1] 2896     jrne 0$
      0010C0 A6 04            [ 1] 2897 	ld a,#ERR_DIV0 
      0010C2 CC 07 01         [ 2] 2898 	jp tb_error 
                                   2899 ; check divisor sign 	
      0010C5 9E               [ 1] 2900 0$:	ld a,xh 
      0010C6 A5 80            [ 1] 2901 	bcp a,#0x80 
      0010C8 27 03            [ 1] 2902 	jreq 1$
      0010CA 03 01            [ 1] 2903 	cpl (SQUOT,sp)
      0010CC 50               [ 2] 2904 	negw x 
      0010CD 1F 05            [ 2] 2905 1$:	ldw (DIVISR,sp),x
                                   2906 ; check dividend sign 	 
      0010CF 1E 07            [ 2] 2907     ldw x,(DIVIDND,sp)
      0010D1 9E               [ 1] 2908 	ld a,xh 
      0010D2 A5 80            [ 1] 2909 	bcp a,#0x80 
      0010D4 27 05            [ 1] 2910 	jreq 2$ 
      0010D6 03 01            [ 1] 2911 	cpl (SQUOT,sp)
      0010D8 03 02            [ 1] 2912 	cpl (SDIVD,sp)
      0010DA 50               [ 2] 2913 	negw x 
      0010DB 16 05            [ 2] 2914 2$:	ldw y,(DIVISR,sp)
      0010DD 65               [ 2] 2915 	divw x,y
      0010DE 90 CF 00 08      [ 2] 2916 	ldw acc16,y 
                                   2917 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      0010E2 0D 02            [ 1] 2918 	tnz (SDIVD,sp)
      0010E4 27 0B            [ 1] 2919 	jreq 7$
      0010E6 90 5D            [ 2] 2920 	tnzw y 
      0010E8 27 07            [ 1] 2921 	jreq 7$
      0010EA 5C               [ 1] 2922 	incw x
      0010EB 16 05            [ 2] 2923 	ldw y,(DIVISR,sp)
      0010ED 72 B2 00 08      [ 2] 2924 	subw y,acc16
      0010F1 0D 01            [ 1] 2925 7$: tnz (SQUOT,sp)
      0010F3 27 01            [ 1] 2926 	jreq 9$ 	 
      0010F5 50               [ 2] 2927 8$:	negw x 
      0010F6                       2928 9$: 
      0010F6                       2929 	_drop VSIZE 
      0010F6 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010F8 81               [ 4] 2930 	ret 
                                   2931 
                                   2932 
                                   2933 ;----------------------------------
                                   2934 ;  remainder resulting from euclidian 
                                   2935 ;  division of n2/n1 
                                   2936 ; input:
                                   2937 ;   N1 		cstack 
                                   2938 ;   N2      cstack
                                   2939 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   2940 ;   X       N2%N1 
                                   2941 ;----------------------------------
                           000003  2942 	N1=3
                           000005  2943 	N2=5
                           000004  2944 	VSIZE=4
      0010F9                       2945 modulo:
      0010F9 1E 03            [ 2] 2946 	Ldw x,(N1,sp)
      0010FB 16 05            [ 2] 2947 	ldw y,(N2,sp)
      0010FD                       2948 	_vars VSIZE 
      0010FD 52 04            [ 2]    1     sub sp,#VSIZE 
      0010FF 1F 01            [ 2] 2949 	ldw (1,sp),x 
      001101 17 03            [ 2] 2950 	ldw (3,sp),y 
      001103 CD 10 B5         [ 4] 2951 	call divide 
      001106 93               [ 1] 2952 	ldw x,y
      001107                       2953 	_drop VSIZE 
      001107 5B 04            [ 2]    1     addw sp,#VSIZE 
      001109 81               [ 4] 2954 	ret 
                                   2955 
                                   2956 
                                   2957 ;----------------------------------
                                   2958 ; search in kword_dict command name
                                   2959 ;  from its execution address 
                                   2960 ; input:
                                   2961 ;   X       	execution address 
                                   2962 ; output:
                                   2963 ;   X 			cstr*  | 0 
                                   2964 ;--------------------------------
                           000001  2965 	XADR=1 
                           000003  2966 	LINK=3 
                           000004  2967 	VSIZE=4
      00110A                       2968 cmd_name:
      00110A                       2969 	_vars VSIZE 
      00110A 52 04            [ 2]    1     sub sp,#VSIZE 
      00110C 72 5F 00 08      [ 1] 2970 	clr acc16 
      001110 1F 01            [ 2] 2971 	ldw (XADR,sp),x  
      001112 AE 21 5B         [ 2] 2972 	ldw x,#kword_dict	
      001115 1F 03            [ 2] 2973 1$:	ldw (LINK,sp),x
      001117 E6 02            [ 1] 2974 	ld a,(2,x)
      001119 A4 0F            [ 1] 2975 	and a,#15 
      00111B C7 00 09         [ 1] 2976 	ld acc8,a 
      00111E 1C 00 03         [ 2] 2977 	addw x,#3
      001121 72 BB 00 08      [ 2] 2978 	addw x,acc16
      001125 FE               [ 2] 2979 	ldw x,(x) ; execution address 
      001126 13 01            [ 2] 2980 	cpw x,(XADR,sp)
      001128 27 0A            [ 1] 2981 	jreq 2$
      00112A 1E 03            [ 2] 2982 	ldw x,(LINK,sp)
      00112C FE               [ 2] 2983 	ldw x,(x) 
      00112D 1D 00 02         [ 2] 2984 	subw x,#2  
      001130 26 E3            [ 1] 2985 	jrne 1$
      001132 20 05            [ 2] 2986 	jra 9$
      001134 1E 03            [ 2] 2987 2$: ldw x,(LINK,sp)
      001136 1C 00 02         [ 2] 2988 	addw x,#2 	
      001139                       2989 9$:	_drop VSIZE
      001139 5B 04            [ 2]    1     addw sp,#VSIZE 
      00113B 81               [ 4] 2990 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   2991 
                                   2992 
                                   2993 ;---------------------------------
                                   2994 ; input:
                                   2995 ;	X 		dictionary entry point 
                                   2996 ;  pad		.asciz name to search 
                                   2997 ; output:
                                   2998 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2999 ;  X		execution address | 0 
                                   3000 ;---------------------------------
                           000001  3001 	NLEN=1 ; cmd length 
                           000002  3002 	YSAVE=2
                           000003  3003 	VSIZE=3 
      00113C                       3004 search_dict:
      00113C                       3005 	_vars VSIZE 
      00113C 52 03            [ 2]    1     sub sp,#VSIZE 
      00113E 90 93            [ 1] 3006 	ldw y,x 
      001140                       3007 search_next:	
      001140 90 F6            [ 1] 3008 	ld a,(y)
      001142 A4 0F            [ 1] 3009 	and a,#0xf 
      001144 6B 01            [ 1] 3010 	ld (NLEN,sp),a  
      001146 AE 17 18         [ 2] 3011 	ldw x,#pad 
      001149 17 02            [ 2] 3012 	ldw (YSAVE,sp),y
      00114B 90 5C            [ 1] 3013 	incw y  
      00114D                       3014 cp_loop:
      00114D F6               [ 1] 3015 	ld a,(x)
      00114E 27 1E            [ 1] 3016 	jreq str_match 
      001150 0D 01            [ 1] 3017 	tnz (NLEN,sp)
      001152 27 0B            [ 1] 3018 	jreq no_match  
      001154 90 F1            [ 1] 3019 	cp a,(y)
      001156 26 07            [ 1] 3020 	jrne no_match 
      001158 90 5C            [ 1] 3021 	incw y 
      00115A 5C               [ 1] 3022 	incw x
      00115B 0A 01            [ 1] 3023 	dec (NLEN,sp)
      00115D 20 EE            [ 2] 3024 	jra cp_loop 
      00115F                       3025 no_match:
      00115F 16 02            [ 2] 3026 	ldw y,(YSAVE,sp) 
      001161 72 A2 00 02      [ 2] 3027 	subw y,#2 ; move Y to link field
      001165 4B 00            [ 1] 3028 	push #TK_NONE 
      001167 90 FE            [ 2] 3029 	ldw y,(y) ; next word link 
      001169 84               [ 1] 3030 	pop a ; TK_NONE 
      00116A 27 21            [ 1] 3031 	jreq search_exit  ; not found  
                                   3032 ;try next 
      00116C 20 D2            [ 2] 3033 	jra search_next
      00116E                       3034 str_match:
      00116E 16 02            [ 2] 3035 	ldw y,(YSAVE,sp)
      001170 90 F6            [ 1] 3036 	ld a,(y)
      001172 6B 01            [ 1] 3037 	ld (NLEN,sp),a ; needed to test keyword type  
      001174 A4 0F            [ 1] 3038 	and a,#0xf 
                                   3039 ; move y to procedure address field 	
      001176 4C               [ 1] 3040 	inc a 
      001177 C7 00 09         [ 1] 3041 	ld acc8,a 
      00117A 72 5F 00 08      [ 1] 3042 	clr acc16 
      00117E 72 B9 00 08      [ 2] 3043 	addw y,acc16 
      001182 90 FE            [ 2] 3044 	ldw y,(y) ; routine entry point 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3045 ;determine keyword type bits 7:6 
      001184 7B 01            [ 1] 3046 	ld a,(NLEN,sp)
      001186 4E               [ 1] 3047 	swap a 
      001187 A4 0C            [ 1] 3048 	and a,#0xc
      001189 44               [ 1] 3049 	srl a
      00118A 44               [ 1] 3050 	srl a 
      00118B AB 06            [ 1] 3051 	add a,#6
      00118D                       3052 search_exit: 
      00118D 93               [ 1] 3053 	ldw x,y ; x=routine address 
      00118E                       3054 	_drop VSIZE 	 
      00118E 5B 03            [ 2]    1     addw sp,#VSIZE 
      001190 81               [ 4] 3055 	ret 
                                   3056 
                                   3057 ;---------------------
                                   3058 ; check if next token
                                   3059 ;  is of expected type 
                                   3060 ; input:
                                   3061 ;   A 		 expected token attribute
                                   3062 ;  ouput:
                                   3063 ;   none     if fail call tb_error 
                                   3064 ;--------------------
      001191                       3065 expect:
      001191 88               [ 1] 3066 	push a 
      001192 CD 07 DF         [ 4] 3067 	call next_token 
      001195 11 01            [ 1] 3068 	cp a,(1,sp)
      001197 27 03            [ 1] 3069 	jreq 1$
      001199 CC 06 FF         [ 2] 3070 	jp syntax_error
      00119C 84               [ 1] 3071 1$: pop a 
      00119D 81               [ 4] 3072 	ret 
                                   3073 
                                   3074 
                                   3075 ;-------------------------------
                                   3076 ; parse embedded BASIC routines 
                                   3077 ; arguments list.
                                   3078 ; arg_list::=  rel[','rel]*
                                   3079 ; all arguments are of integer type
                                   3080 ; input:
                                   3081 ;   none
                                   3082 ; output:
                                   3083 ;   A 			number of arguments pushed on dstack  
                                   3084 ;--------------------------------
                           000001  3085 	ARG_CNT=1 
      00119E                       3086 arg_list:
      00119E 4B 00            [ 1] 3087 	push #0  
      0011A0 CD 12 E4         [ 4] 3088 1$: call relation
      0011A3 A1 00            [ 1] 3089 	cp a,#TK_NONE 
      0011A5 27 19            [ 1] 3090 	jreq 5$
      0011A7 A1 04            [ 1] 3091 	cp a,#TK_INTGR
      0011A9 26 12            [ 1] 3092 	jrne 4$
      0011AB CD 0F 71         [ 4] 3093 3$: call dpush 
      0011AE 0C 01            [ 1] 3094     inc (ARG_CNT,sp)
      0011B0 CD 07 DF         [ 4] 3095 	call next_token 
      0011B3 A1 00            [ 1] 3096 	cp a,#TK_NONE 
      0011B5 27 09            [ 1] 3097 	jreq 5$ 
      0011B7 A1 0D            [ 1] 3098 	cp a,#TK_COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011B9 26 02            [ 1] 3099 	jrne 4$
      0011BB 20 E3            [ 2] 3100 	jra 1$ 
      0011BD CD 0F 6B         [ 4] 3101 4$:	call unget_token 
      0011C0 84               [ 1] 3102 5$:	pop a 
      0011C1 81               [ 4] 3103 	ret 
                                   3104 
                                   3105 
      0011C2                       3106 func_args:
      0011C2 A6 0B            [ 1] 3107 	ld a,#TK_LPAREN 
      0011C4 CD 11 91         [ 4] 3108 	call expect 
      0011C7 CD 11 9E         [ 4] 3109 	call arg_list 
      0011CA 88               [ 1] 3110 	push a 
      0011CB A6 0C            [ 1] 3111 	ld a,#TK_RPAREN 
      0011CD CD 11 91         [ 4] 3112 	call expect 
      0011D0 84               [ 1] 3113 	pop a 
      0011D1 81               [ 4] 3114 	ret 
                                   3115 
                                   3116 
                                   3117 ;--------------------------------
                                   3118 ;   BASIC commnands 
                                   3119 ;--------------------------------
                                   3120 
                                   3121 ;--------------------------------
                                   3122 ;  arithmetic and relational 
                                   3123 ;  routines
                                   3124 ;  operators precedence
                                   3125 ;  highest to lowest
                                   3126 ;  operators on same row have 
                                   3127 ;  same precedence and are executed
                                   3128 ;  from left to right.
                                   3129 ;	'*','/','%'
                                   3130 ;   '-','+'
                                   3131 ;   '=','>','<','>=','<=','<>','><'
                                   3132 ;   '<>' and '><' are equivalent for not equal.
                                   3133 ;--------------------------------
                                   3134 
                                   3135 ;---------------------
                                   3136 ; return array element
                                   3137 ; address from @(expr)
                                   3138 ; input:
                                   3139 ;   A 		TK_ARRAY
                                   3140 ; output:
                                   3141 ;   A 		TK_INTGR
                                   3142 ;	X 		element address 
                                   3143 ;----------------------
      0011D2                       3144 get_array_element:
      0011D2 CD 11 C2         [ 4] 3145 	call func_args 
      0011D5 A1 01            [ 1] 3146 	cp a,#1
      0011D7 27 03            [ 1] 3147 	jreq 1$
      0011D9 CC 06 FF         [ 2] 3148 	jp syntax_error
      0011DC CD 0F 7E         [ 4] 3149 1$: call dpop  
                                   3150 	; check for bounds 
      0011DF C3 00 1D         [ 2] 3151 	cpw x,array_size 
      0011E2 23 05            [ 2] 3152 	jrule 3$
                                   3153 ; bounds {1..array_size}	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011E4 A6 0A            [ 1] 3154 2$: ld a,#ERR_BAD_VALUE 
      0011E6 CC 07 01         [ 2] 3155 	jp tb_error 
      0011E9 5D               [ 2] 3156 3$: tnzw  x
      0011EA 27 F8            [ 1] 3157 	jreq 2$ 
      0011EC 58               [ 2] 3158 	sllw x 
      0011ED 89               [ 2] 3159 	pushw x 
      0011EE AE 16 C8         [ 2] 3160 	ldw x,#tib
      0011F1 72 F0 01         [ 2] 3161 	subw x,(1,sp)
      0011F4                       3162 	_drop 2   
      0011F4 5B 02            [ 2]    1     addw sp,#2 
      0011F6 A6 04            [ 1] 3163 	ld a,#TK_INTGR
      0011F8 81               [ 4] 3164 	ret 
                                   3165 
                                   3166 ;***********************************
                                   3167 ;   expression parse,execute 
                                   3168 ;***********************************
                                   3169 ;-----------------------------------
                                   3170 ; factor ::= ['+'|'-'|e] var | @ |
                                   3171 ;			 integer | function |
                                   3172 ;			 '('relation')' 
                                   3173 ; output:
                                   3174 ;   A    token attribute 
                                   3175 ;   X 	 integer
                                   3176 ; ---------------------------------
                           000001  3177 	NEG=1
                           000001  3178 	VSIZE=1
      0011F9                       3179 factor:
      0011F9                       3180 	_vars VSIZE 
      0011F9 52 01            [ 2]    1     sub sp,#VSIZE 
      0011FB CD 07 DF         [ 4] 3181 	call next_token
      0011FE A1 02            [ 1] 3182 	cp a,#CMD_END 
      001200 2B 4E            [ 1] 3183 	jrmi 20$
      001202 6B 01            [ 1] 3184 1$:	ld (NEG,sp),a 
      001204 A4 30            [ 1] 3185 	and a,#TK_GRP_MASK
      001206 A1 10            [ 1] 3186 	cp a,#TK_GRP_ADD 
      001208 27 04            [ 1] 3187 	jreq 2$
      00120A 7B 01            [ 1] 3188 	ld a,(NEG,sp)
      00120C 20 03            [ 2] 3189 	jra 4$  
      00120E                       3190 2$:	
      00120E CD 07 DF         [ 4] 3191 	call next_token 
      001211                       3192 4$:	
      001211 A1 07            [ 1] 3193 	cp a,#TK_IFUNC 
      001213 26 03            [ 1] 3194 	jrne 5$ 
      001215 FD               [ 4] 3195 	call (x) 
      001216 20 2F            [ 2] 3196 	jra 18$ 
      001218                       3197 5$:
      001218 A1 04            [ 1] 3198 	cp a,#TK_INTGR
      00121A 26 02            [ 1] 3199 	jrne 6$
      00121C 20 29            [ 2] 3200 	jra 18$
      00121E                       3201 6$:
      00121E A1 02            [ 1] 3202 	cp a,#TK_ARRAY
      001220 26 06            [ 1] 3203 	jrne 10$
      001222 CD 11 D2         [ 4] 3204 	call get_array_element
      001225 FE               [ 2] 3205 	ldw x,(x)
      001226 20 1F            [ 2] 3206 	jra 18$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001228                       3207 10$:
      001228 A1 05            [ 1] 3208 	cp a,#TK_VAR 
      00122A 26 03            [ 1] 3209 	jrne 11$
      00122C FE               [ 2] 3210 	ldw x,(x)
      00122D 20 18            [ 2] 3211 	jra 18$
      00122F                       3212 11$: 
      00122F A1 09            [ 1] 3213 	cp a,#TK_CONST 
      001231 27 14            [ 1] 3214 	jreq 18$
      001233                       3215 12$:			
      001233 A1 0B            [ 1] 3216 	cp a,#TK_LPAREN
      001235 26 0A            [ 1] 3217 	jrne 16$
      001237 CD 12 E4         [ 4] 3218 	call relation
      00123A A6 0C            [ 1] 3219 	ld a,#TK_RPAREN 
      00123C CD 11 91         [ 4] 3220 	call expect
      00123F 20 06            [ 2] 3221 	jra 18$	
      001241                       3222 16$:
      001241 CD 0F 6B         [ 4] 3223 	call unget_token
      001244 4F               [ 1] 3224 	clr a 
      001245 20 09            [ 2] 3225 	jra 20$ 
      001247                       3226 18$: 
      001247 A6 11            [ 1] 3227 	ld a,#TK_MINUS 
      001249 11 01            [ 1] 3228 	cp a,(NEG,sp)
      00124B 26 01            [ 1] 3229 	jrne 19$
      00124D 50               [ 2] 3230 	negw x
      00124E                       3231 19$:
      00124E A6 04            [ 1] 3232 	ld a,#TK_INTGR
      001250                       3233 20$:
      001250                       3234 	_drop VSIZE
      001250 5B 01            [ 2]    1     addw sp,#VSIZE 
      001252 81               [ 4] 3235 	ret
                                   3236 
                                   3237 ;-----------------------------------
                                   3238 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   3239 ; output:
                                   3240 ;   A    	token attribute 
                                   3241 ;	X		integer
                                   3242 ;-----------------------------------
                           000001  3243 	N1=1
                           000003  3244 	N2=3
                           000005  3245 	MULOP=5
                           000005  3246 	VSIZE=5
      001253                       3247 term:
      001253                       3248 	_vars VSIZE
      001253 52 05            [ 2]    1     sub sp,#VSIZE 
      001255 CD 11 F9         [ 4] 3249 	call factor
      001258 A1 02            [ 1] 3250 	cp a,#CMD_END
      00125A 2B 41            [ 1] 3251 	jrmi term_exit
      00125C                       3252 term01:	 ; check for  operator 
      00125C 1F 03            [ 2] 3253 	ldw (N2,sp),x  ; save first factor 
      00125E CD 07 DF         [ 4] 3254 	call next_token
      001261 A1 02            [ 1] 3255 	cp a,#2
      001263 2B 34            [ 1] 3256 	jrmi 9$
      001265 6B 05            [ 1] 3257 0$:	ld (MULOP,sp),a
      001267 A4 30            [ 1] 3258 	and a,#TK_GRP_MASK
      001269 A1 20            [ 1] 3259 	cp a,#TK_GRP_MULT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00126B 27 07            [ 1] 3260 	jreq 1$
      00126D 7B 05            [ 1] 3261 	ld a,(MULOP,sp) 
      00126F CD 0F 6B         [ 4] 3262 	call unget_token 
      001272 20 25            [ 2] 3263 	jra 9$
      001274                       3264 1$:	; got *|/|%
      001274 CD 11 F9         [ 4] 3265 	call factor
      001277 A1 04            [ 1] 3266 	cp a,#TK_INTGR
      001279 27 03            [ 1] 3267 	jreq 2$ 
      00127B CC 06 FF         [ 2] 3268 	jp syntax_error
      00127E 1F 01            [ 2] 3269 2$:	ldw (N1,sp),x  
      001280 7B 05            [ 1] 3270 	ld a,(MULOP,sp) 
      001282 A1 20            [ 1] 3271 	cp a,#TK_MULT 
      001284 26 05            [ 1] 3272 	jrne 3$
      001286 CD 10 6D         [ 4] 3273 	call multiply 
      001289 20 D1            [ 2] 3274 	jra term01
      00128B A1 21            [ 1] 3275 3$: cp a,#TK_DIV 
      00128D 26 05            [ 1] 3276 	jrne 4$ 
      00128F CD 10 B5         [ 4] 3277 	call divide 
      001292 20 C8            [ 2] 3278 	jra term01 
      001294 CD 10 F9         [ 4] 3279 4$: call modulo
      001297 20 C3            [ 2] 3280 	jra term01 
      001299 1E 03            [ 2] 3281 9$: ldw x,(N2,sp)  
      00129B A6 04            [ 1] 3282 	ld a,#TK_INTGR 	
      00129D                       3283 term_exit:
      00129D                       3284 	_drop VSIZE 
      00129D 5B 05            [ 2]    1     addw sp,#VSIZE 
      00129F 81               [ 4] 3285 	ret 
                                   3286 
                                   3287 ;-------------------------------
                                   3288 ;  expr ::= term [['+'|'-'] term]*
                                   3289 ;  result range {-32768..32767}
                                   3290 ;  output:
                                   3291 ;   A    token attribute 
                                   3292 ;   X	 integer   
                                   3293 ;-------------------------------
                           000001  3294 	N1=1 
                           000003  3295 	N2=3
                           000005  3296 	OP=5 
                           000005  3297 	VSIZE=5 
      0012A0                       3298 expression:
      0012A0                       3299 	_vars VSIZE 
      0012A0 52 05            [ 2]    1     sub sp,#VSIZE 
      0012A2 CD 12 53         [ 4] 3300 	call term
      0012A5 A1 02            [ 1] 3301 	cp a,#CMD_END 
      0012A7 2B 38            [ 1] 3302 	jrmi expr_exit 
      0012A9 1F 03            [ 2] 3303 0$:	ldw (N2,sp),x 
      0012AB CD 07 DF         [ 4] 3304 	call next_token
      0012AE A1 02            [ 1] 3305 	cp a,#2
      0012B0 2B 2B            [ 1] 3306 	jrmi 9$ 
      0012B2 6B 05            [ 1] 3307 1$:	ld (OP,sp),a  
      0012B4 A4 30            [ 1] 3308 	and a,#TK_GRP_MASK
      0012B6 A1 10            [ 1] 3309 	cp a,#TK_GRP_ADD 
      0012B8 27 07            [ 1] 3310 	jreq 2$ 
      0012BA 7B 05            [ 1] 3311 	ld a,(OP,sp)
      0012BC CD 0F 6B         [ 4] 3312 	call unget_token
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012BF 20 1C            [ 2] 3313 	jra 9$
      0012C1                       3314 2$: 
      0012C1 CD 12 53         [ 4] 3315 	call term
      0012C4 A1 04            [ 1] 3316 	cp a,#TK_INTGR 
      0012C6 27 03            [ 1] 3317 	jreq 3$
      0012C8 CC 06 FF         [ 2] 3318 	jp syntax_error
      0012CB 1F 01            [ 2] 3319 3$:	ldw (N1,sp),x 
      0012CD 7B 05            [ 1] 3320 	ld a,(OP,sp)
      0012CF A1 10            [ 1] 3321 	cp a,#TK_PLUS 
      0012D1 26 05            [ 1] 3322 	jrne 4$
      0012D3 CD 10 5F         [ 4] 3323 	call add 
      0012D6 20 D1            [ 2] 3324 	jra 0$ 
      0012D8 CD 10 67         [ 4] 3325 4$:	call substract
      0012DB 20 CC            [ 2] 3326 	jra 0$
      0012DD 1E 03            [ 2] 3327 9$: ldw x,(N2,sp)
      0012DF A6 04            [ 1] 3328 	ld a,#TK_INTGR	
      0012E1                       3329 expr_exit:
      0012E1                       3330 	_drop VSIZE 
      0012E1 5B 05            [ 2]    1     addw sp,#VSIZE 
      0012E3 81               [ 4] 3331 	ret 
                                   3332 
                                   3333 ;---------------------------------------------
                                   3334 ; rel ::= expr rel_op expr
                                   3335 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3336 ;  relation return 1 | 0  for true | false 
                                   3337 ;  output:
                                   3338 ;    A 		token attribute  
                                   3339 ;	 X		1|0
                                   3340 ;---------------------------------------------
                           000001  3341 	N1=1
                           000003  3342 	N2=3
                           000005  3343 	RELOP=5
                           000005  3344 	VSIZE=5 
      0012E4                       3345 relation: 
      0012E4                       3346 	_vars VSIZE
      0012E4 52 05            [ 2]    1     sub sp,#VSIZE 
      0012E6 CD 12 A0         [ 4] 3347 	call expression
      0012E9 A1 02            [ 1] 3348 	cp a,#CMD_END  
      0012EB 2B 4B            [ 1] 3349 	jrmi rel_exit 
                                   3350 	; expect rel_op or leave 
      0012ED 1F 03            [ 2] 3351 	ldw (N2,sp),x 
      0012EF CD 07 DF         [ 4] 3352 	call next_token 
      0012F2 A1 02            [ 1] 3353 	cp a,#2
      0012F4 2B 3E            [ 1] 3354 	jrmi 9$
      0012F6                       3355 1$:	
      0012F6 6B 05            [ 1] 3356 	ld (RELOP,sp),a 
      0012F8 A4 30            [ 1] 3357 	and a,#TK_GRP_MASK
      0012FA A1 30            [ 1] 3358 	cp a,#TK_GRP_RELOP 
      0012FC 27 07            [ 1] 3359 	jreq 2$
      0012FE 7B 05            [ 1] 3360 	ld a,(RELOP,sp)
      001300 CD 0F 6B         [ 4] 3361 	call unget_token  
      001303 20 2F            [ 2] 3362 	jra 9$
      001305                       3363 2$:	; expect another expression or error 
      001305 CD 12 A0         [ 4] 3364 	call expression
      001308 A1 04            [ 1] 3365 	cp a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00130A 27 03            [ 1] 3366 	jreq 3$
      00130C CC 06 FF         [ 2] 3367 	jp syntax_error 
      00130F 1F 01            [ 2] 3368 3$:	ldw (N1,sp),x 
      001311 CD 10 67         [ 4] 3369 	call substract
      001314 26 06            [ 1] 3370 	jrne 4$
      001316 35 02 00 09      [ 1] 3371 	mov acc8,#2 ; n1==n2
      00131A 20 0C            [ 2] 3372 	jra 6$ 
      00131C                       3373 4$: 
      00131C 2C 06            [ 1] 3374 	jrsgt 5$  
      00131E 35 04 00 09      [ 1] 3375 	mov acc8,#4 ; n1<2 
      001322 20 04            [ 2] 3376 	jra 6$
      001324                       3377 5$:
      001324 35 01 00 09      [ 1] 3378 	mov acc8,#1 ; n1>n2 
      001328                       3379 6$:
      001328 5F               [ 1] 3380 	clrw x 
      001329 C6 00 09         [ 1] 3381 	ld a, acc8  
      00132C 14 05            [ 1] 3382 	and a,(RELOP,sp)
      00132E 4D               [ 1] 3383 	tnz a 
      00132F 27 05            [ 1] 3384 	jreq 10$
      001331 5C               [ 1] 3385 	incw x 
      001332                       3386 7$:	 
      001332 20 02            [ 2] 3387 	jra 10$  	
      001334 1E 03            [ 2] 3388 9$: ldw x,(N2,sp)
      001336                       3389 10$:
      001336 A6 04            [ 1] 3390 	ld a,#TK_INTGR
      001338                       3391 rel_exit: 	 
      001338                       3392 	_drop VSIZE
      001338 5B 05            [ 2]    1     addw sp,#VSIZE 
      00133A 81               [ 4] 3393 	ret 
                                   3394 
                                   3395 ;--------------------------------
                                   3396 ; BASIC: SHOW 
                                   3397 ;  show content of dstack,cstack
                                   3398 ;--------------------------------
      00133B                       3399 show:
      00133B C6 00 06         [ 1] 3400 	ld a,base 
      00133E 88               [ 1] 3401 	push a 
      00133F CD 0F FF         [ 4] 3402 	call dots
      001342 CD 10 32         [ 4] 3403 	call dotr 
      001345 84               [ 1] 3404 	pop a 
      001346 C7 00 06         [ 1] 3405 	ld base,a 
      001349 4F               [ 1] 3406 	clr a 
      00134A 81               [ 4] 3407 	ret
                                   3408 
                                   3409 ;--------------------------------------------
                                   3410 ; BASIC: HEX 
                                   3411 ; select hexadecimal base for integer print
                                   3412 ;---------------------------------------------
      00134B                       3413 hex_base:
      00134B 35 10 00 06      [ 1] 3414 	mov base,#16 
      00134F 81               [ 4] 3415 	ret 
                                   3416 
                                   3417 ;--------------------------------------------
                                   3418 ; BASIC: DEC 
                                   3419 ; select decimal base for integer print
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3420 ;---------------------------------------------
      001350                       3421 dec_base:
      001350 35 0A 00 06      [ 1] 3422 	mov base,#10
      001354 81               [ 4] 3423 	ret 
                                   3424 
                                   3425 ;------------------------
                                   3426 ; BASIC: SIZE 
                                   3427 ; return free size in text area
                                   3428 ; output:
                                   3429 ;   A 		TK_INTGR
                                   3430 ;   X 	    size integer
                                   3431 ;--------------------------
      001355                       3432 size:
      001355 AE 16 C8         [ 2] 3433 	ldw x,#tib 
      001358 72 B0 00 1A      [ 2] 3434 	subw x,txtend 
      00135C A6 04            [ 1] 3435 	ld a,#TK_INTGR
      00135E 81               [ 4] 3436 	ret 
                                   3437 
                                   3438 
                                   3439 ;------------------------
                                   3440 ; BASIC: UBOUND  
                                   3441 ; return array variable size 
                                   3442 ; output:
                                   3443 ;   A 		TK_INTGR
                                   3444 ;   X 	    array size 
                                   3445 ;--------------------------
      00135F                       3446 ubound:
      00135F AE 16 C8         [ 2] 3447 	ldw x,#tib
      001362 72 B0 00 1A      [ 2] 3448 	subw x,txtend 
      001366 90 CE 00 04      [ 2] 3449 	ldw y,basicptr 
      00136A 90 C3 00 1A      [ 2] 3450 	cpw y,txtend 
      00136E 25 0A            [ 1] 3451 	jrult 1$
      001370 3B 00 03         [ 1] 3452 	push count 
      001373 4B 00            [ 1] 3453 	push #0 
      001375 72 F0 01         [ 2] 3454 	subw x,(1,sp)
      001378                       3455 	_drop 2 
      001378 5B 02            [ 2]    1     addw sp,#2 
      00137A 54               [ 2] 3456 1$:	srlw x 
      00137B CF 00 1D         [ 2] 3457 	ldw array_size,x
      00137E A6 04            [ 1] 3458 	ld a,#TK_INTGR
      001380 81               [ 4] 3459 	ret 
                                   3460 
                                   3461 ;-----------------------------
                                   3462 ; BASIC: LET var=expr 
                                   3463 ; variable assignement 
                                   3464 ; output:
                                   3465 ;   A 		TK_NONE 
                                   3466 ;-----------------------------
      001381                       3467 let:
      001381 CD 07 DF         [ 4] 3468 	call next_token 
      001384 A1 05            [ 1] 3469 	cp a,#TK_VAR 
      001386 27 03            [ 1] 3470 	jreq let02
      001388 CC 06 FF         [ 2] 3471 	jp syntax_error
      00138B                       3472 let02:
      00138B CD 0F 71         [ 4] 3473 	call dpush 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00138E CD 07 DF         [ 4] 3474 	call next_token 
      001391 A1 32            [ 1] 3475 	cp a,#TK_EQUAL
      001393 27 03            [ 1] 3476 	jreq 1$
      001395 CC 06 FF         [ 2] 3477 	jp syntax_error
      001398                       3478 1$:	
      001398 CD 12 E4         [ 4] 3479 	call relation   
      00139B A1 04            [ 1] 3480 	cp a,#TK_INTGR 
      00139D 27 03            [ 1] 3481 	jreq 2$
      00139F CC 06 FF         [ 2] 3482 	jp syntax_error
      0013A2                       3483 2$:	
      0013A2 90 93            [ 1] 3484 	ldw y,x 
      0013A4 CD 0F 7E         [ 4] 3485 	call dpop  
      0013A7 FF               [ 2] 3486 	ldw (x),y   
      0013A8 81               [ 4] 3487 	ret 
                                   3488 
                                   3489 ;----------------------------
                                   3490 ; BASIC: LIST [[start][,end]]
                                   3491 ; list program lines 
                                   3492 ; form start to end 
                                   3493 ; if empty argument list then 
                                   3494 ; list all.
                                   3495 ;----------------------------
                           000001  3496 	FIRST=1
                           000003  3497 	LAST=3 
                           000005  3498 	LN_PTR=5
                           000006  3499 	VSIZE=6 
      0013A9                       3500 list:
      0013A9                       3501 	_vars VSIZE
      0013A9 52 06            [ 2]    1     sub sp,#VSIZE 
      0013AB CE 00 18         [ 2] 3502 	ldw x,txtbgn 
      0013AE C3 00 1A         [ 2] 3503 	cpw x,txtend 
      0013B1 2B 03            [ 1] 3504 	jrmi 1$
      0013B3 CC 14 29         [ 2] 3505 	jp list_exit ; nothing to list 
      0013B6 1F 05            [ 2] 3506 1$:	ldw (LN_PTR,sp),x 
      0013B8 FE               [ 2] 3507 	ldw x,(x) 
      0013B9 1F 01            [ 2] 3508 	ldw (FIRST,sp),x ; list from first line 
      0013BB AE 7F FF         [ 2] 3509 	ldw x,#0x7fff ; biggest line number 
      0013BE 1F 03            [ 2] 3510 	ldw (LAST,sp),x 
      0013C0 CD 11 9E         [ 4] 3511 	call arg_list
      0013C3 4D               [ 1] 3512 	tnz a
      0013C4 27 3F            [ 1] 3513 	jreq list_start 
      0013C6 A1 02            [ 1] 3514 	cp a,#2 
      0013C8 27 07            [ 1] 3515 	jreq 4$
      0013CA A1 01            [ 1] 3516 	cp a,#1 
      0013CC 27 06            [ 1] 3517 	jreq first_line 
      0013CE CC 06 FF         [ 2] 3518 	jp syntax_error 
      0013D1 CD 0F 8B         [ 4] 3519 4$:	call dswap
      0013D4                       3520 first_line:
      0013D4 CD 0F 7E         [ 4] 3521 	call dpop 
      0013D7 1F 01            [ 2] 3522 	ldw (FIRST,sp),x 
      0013D9 A1 01            [ 1] 3523 	cp a,#1 
      0013DB 27 05            [ 1] 3524 	jreq lines_skip 	
      0013DD                       3525 last_line:
      0013DD CD 0F 7E         [ 4] 3526 	call dpop 
      0013E0 1F 03            [ 2] 3527 	ldw (LAST,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013E2                       3528 lines_skip:
      0013E2 CE 00 18         [ 2] 3529 	ldw x,txtbgn
      0013E5 1F 05            [ 2] 3530 2$:	ldw (LN_PTR,sp),x 
      0013E7 C3 00 1A         [ 2] 3531 	cpw x,txtend 
      0013EA 2A 3D            [ 1] 3532 	jrpl list_exit 
      0013EC FE               [ 2] 3533 	ldw x,(x) ;line# 
      0013ED 13 01            [ 2] 3534 	cpw x,(FIRST,sp)
      0013EF 2A 14            [ 1] 3535 	jrpl list_start 
      0013F1 1E 05            [ 2] 3536 	ldw x,(LN_PTR,sp) 
      0013F3 1C 00 02         [ 2] 3537 	addw x,#2 
      0013F6 F6               [ 1] 3538 	ld a,(x)
      0013F7 5C               [ 1] 3539 	incw x 
      0013F8 C7 00 09         [ 1] 3540 	ld acc8,a 
      0013FB 72 5F 00 08      [ 1] 3541 	clr acc16 
      0013FF 72 BB 00 08      [ 2] 3542 	addw x,acc16
      001403 20 E0            [ 2] 3543 	jra 2$ 
                                   3544 ; print loop
      001405                       3545 list_start:
      001405 1E 05            [ 2] 3546 	ldw x,(LN_PTR,sp)
      001407                       3547 3$:	
      001407 CD 14 7C         [ 4] 3548 	call prt_basic_line
      00140A 1E 05            [ 2] 3549 	ldw x,(LN_PTR,sp)
      00140C E6 02            [ 1] 3550 	ld a,(2,x)
      00140E C7 00 09         [ 1] 3551 	ld acc8,a 
      001411 72 5F 00 08      [ 1] 3552 	clr acc16 
      001415 72 BB 00 08      [ 2] 3553 	addw x,acc16
      001419 C3 00 1A         [ 2] 3554 	cpw x,txtend 
      00141C 2A 0B            [ 1] 3555 	jrpl list_exit
      00141E 1F 05            [ 2] 3556 	ldw (LN_PTR,sp),x
      001420 FE               [ 2] 3557 	ldw x,(x)
      001421 13 03            [ 2] 3558 	cpw x,(LAST,sp)  
      001423 2C 04            [ 1] 3559 	jrsgt list_exit 
      001425 1E 05            [ 2] 3560 	ldw x,(LN_PTR,sp)
      001427 20 DE            [ 2] 3561 	jra 3$
      001429                       3562 list_exit:
      001429                       3563 	_drop VSIZE 
      001429 5B 06            [ 2]    1     addw sp,#VSIZE 
      00142B 81               [ 4] 3564 	ret
                                   3565 
                                   3566 ;-------------------------
                                   3567 ; print counted string 
                                   3568 ; input:
                                   3569 ;   X 		address of string
                                   3570 ;--------------------------
      00142C                       3571 prt_cmd_name:
      00142C F6               [ 1] 3572 	ld a,(x)
      00142D 5C               [ 1] 3573 	incw x
      00142E A4 0F            [ 1] 3574 	and a,#15  
      001430 88               [ 1] 3575 	push a 
      001431 0D 01            [ 1] 3576 1$: tnz (1,sp) 
      001433 27 09            [ 1] 3577 	jreq 9$
      001435 F6               [ 1] 3578 	ld a,(x)
      001436 CD 01 9E         [ 4] 3579 	call putc 
      001439 5C               [ 1] 3580 	incw x
      00143A 0A 01            [ 1] 3581 	dec (1,sp)	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00143C 20 F3            [ 2] 3582 	jra 1$
      00143E 84               [ 1] 3583 9$: pop a 
      00143F 81               [ 4] 3584 	ret	
                                   3585 
                                   3586 ;--------------------------
                                   3587 ; print TK_QSTR
                                   3588 ; converting control character
                                   3589 ; to backslash sequence
                                   3590 ; input:
                                   3591 ;   X        char *
                                   3592 ;-----------------------------
      001440                       3593 prt_quote:
      001440 A6 22            [ 1] 3594 	ld a,#'"
      001442 CD 01 9E         [ 4] 3595 	call putc 
      001445 F6               [ 1] 3596 1$:	ld a,(x)
      001446 27 2D            [ 1] 3597 	jreq 9$
      001448 5C               [ 1] 3598 	incw x 
      001449 A1 20            [ 1] 3599 	cp a,#SPACE 
      00144B 25 0C            [ 1] 3600 	jrult 3$
      00144D CD 01 9E         [ 4] 3601 	call putc
      001450 A1 5C            [ 1] 3602 	cp a,#'\ 
      001452 26 F1            [ 1] 3603 	jrne 1$ 
      001454                       3604 2$:
      001454 CD 01 9E         [ 4] 3605 	call putc 
      001457 20 EC            [ 2] 3606 	jra 1$
      001459 88               [ 1] 3607 3$: push a 
      00145A A6 5C            [ 1] 3608 	ld a,#'\
      00145C CD 01 9E         [ 4] 3609 	call putc 
      00145F 84               [ 1] 3610 	pop a 
      001460 A0 07            [ 1] 3611 	sub a,#7
      001462 C7 00 09         [ 1] 3612 	ld acc8,a 
      001465 72 5F 00 08      [ 1] 3613 	clr acc16
      001469 90 AE 0C 3A      [ 2] 3614 	ldw y,#escaped 
      00146D 72 B9 00 08      [ 2] 3615 	addw y,acc16 
      001471 90 F6            [ 1] 3616 	ld a,(y)
      001473 20 DF            [ 2] 3617 	jra 2$
      001475 A6 22            [ 1] 3618 9$: ld a,#'"
      001477 CD 01 9E         [ 4] 3619 	call putc 
      00147A 5C               [ 1] 3620 	incw x 
      00147B 81               [ 4] 3621 	ret
                                   3622 
                                   3623 
                                   3624 ;--------------------------
                                   3625 ; decompile line from token list 
                                   3626 ; input:
                                   3627 ;   X 		pointer at line
                                   3628 ; output:
                                   3629 ;   none 
                                   3630 ;--------------------------	
                           000001  3631 	BASE_SAV=1
                           000002  3632 	WIDTH_SAV=2
                           000003  3633 	XSAVE=3
                           000005  3634 	LLEN=5
                           000005  3635 	VSIZE=5 
      00147C                       3636 prt_basic_line:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00147C                       3637 	_vars VSIZE 
      00147C 52 05            [ 2]    1     sub sp,#VSIZE 
      00147E C6 00 06         [ 1] 3638 	ld a,base
      001481 6B 01            [ 1] 3639 	ld (BASE_SAV,sp),a  
      001483 C6 00 20         [ 1] 3640 	ld a,tab_width 
      001486 6B 02            [ 1] 3641 	ld (WIDTH_SAV,sp),a 
      001488 CF 00 11         [ 2] 3642 	ldw ptr16,x
      00148B FE               [ 2] 3643 	ldw x,(x)
      00148C 35 0A 00 06      [ 1] 3644 	mov base,#10
      001490 35 05 00 20      [ 1] 3645 	mov tab_width,#5
      001494 CD 09 78         [ 4] 3646 	call print_int ; print line number 
      001497 A6 20            [ 1] 3647 	ld a,#SPACE 
      001499 CD 01 9E         [ 4] 3648 	call putc 
      00149C 72 5F 00 20      [ 1] 3649 	clr tab_width
      0014A0 AE 00 02         [ 2] 3650 	ldw x,#2
      0014A3 72 D6 00 11      [ 4] 3651 	ld a,([ptr16],x)
      0014A7 6B 05            [ 1] 3652 	ld (LLEN,sp),a 
      0014A9 5C               [ 1] 3653 	incw x
      0014AA 9F               [ 1] 3654 1$:	ld a,xl 
      0014AB 11 05            [ 1] 3655 	cp a,(LLEN,sp)
      0014AD 2B 03            [ 1] 3656 	jrmi 20$
      0014AF CC 15 B9         [ 2] 3657 	jp 90$
      0014B2                       3658 20$:	 
      0014B2 72 D6 00 11      [ 4] 3659 	ld a,([ptr16],x)
      0014B6 5C               [ 1] 3660 	incw x 
      0014B7 1F 03            [ 2] 3661 	ldw (XSAVE,sp),x 
      0014B9 A1 06            [ 1] 3662 	cp a,#TK_CMD 
      0014BB 25 44            [ 1] 3663 	jrult 5$
      0014BD A1 09            [ 1] 3664 	cp a,#TK_CONST 
      0014BF 22 2F            [ 1] 3665 	jrugt 4$
      0014C1                       3666 2$:	
      0014C1 72 DE 00 11      [ 5] 3667 	ldw x,([ptr16],x)
      0014C5 A3 16 F2         [ 2] 3668 	cpw x,#rem 
      0014C8 26 14            [ 1] 3669 	jrne 3$
      0014CA A6 27            [ 1] 3670 	ld a,#''
      0014CC CD 01 9E         [ 4] 3671 	call putc 
      0014CF 1E 03            [ 2] 3672 	ldw x,(XSAVE,sp)
      0014D1 1C 00 02         [ 2] 3673 	addw x,#2
      0014D4 72 BB 00 11      [ 2] 3674 	addw x,ptr16  
      0014D8 CD 01 B0         [ 4] 3675 	call puts 
      0014DB CC 15 B9         [ 2] 3676 	jp 90$ 
      0014DE CD 11 0A         [ 4] 3677 3$:	call cmd_name
      0014E1 CD 14 2C         [ 4] 3678 	call prt_cmd_name
      0014E4 A6 20            [ 1] 3679 	ld a,#SPACE 
      0014E6 CD 01 9E         [ 4] 3680 	call putc 
      0014E9 1E 03            [ 2] 3681 	ldw x,(XSAVE,sp)
      0014EB 1C 00 02         [ 2] 3682 	addw x,#2
      0014EE 20 BA            [ 2] 3683 	jra 1$
      0014F0 A1 0A            [ 1] 3684 4$: cp a,#TK_QSTR 
      0014F2 26 0D            [ 1] 3685 	jrne 5$
      0014F4 72 BB 00 11      [ 2] 3686 	addw x,ptr16
      0014F8 CD 14 40         [ 4] 3687 	call prt_quote 
      0014FB 72 B0 00 11      [ 2] 3688 	subw x,ptr16  
      0014FF 20 A9            [ 2] 3689 	jra 1$
      001501 A1 05            [ 1] 3690 5$:	cp a,#TK_VAR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001503 26 1A            [ 1] 3691 	jrne 6$ 
      001505 72 DE 00 11      [ 5] 3692 	ldw x,([ptr16],x)
      001509 1D 00 21         [ 2] 3693 	subw x,#vars 
      00150C 9F               [ 1] 3694 	ld a,xl
      00150D 44               [ 1] 3695 	srl a 
      00150E AB 41            [ 1] 3696 	add a,#'A 
      001510 CD 01 9E         [ 4] 3697 	call putc 
      001513 A6 20            [ 1] 3698 	ld a,#SPACE 
      001515 CD 01 9E         [ 4] 3699 	call putc 
      001518 1E 03            [ 2] 3700 	ldw x,(XSAVE,sp)
      00151A 1C 00 02         [ 2] 3701 	addw x,#2 
      00151D 20 8B            [ 2] 3702 	jra 1$ 
      00151F A1 02            [ 1] 3703 6$: cp a,#TK_ARRAY 
      001521 26 0A            [ 1] 3704 	jrne 7$
      001523 A6 40            [ 1] 3705 	ld a,#'@ 
      001525 CD 01 9E         [ 4] 3706 	call putc 
      001528 1E 03            [ 2] 3707 	ldw x,(XSAVE,sp)
      00152A CC 14 AA         [ 2] 3708 	jp 1$ 
      00152D A1 04            [ 1] 3709 7$: cp a,#TK_INTGR 
      00152F 26 14            [ 1] 3710 	jrne 8$
      001531 72 DE 00 11      [ 5] 3711 	ldw x,([ptr16],x)
      001535 CD 09 78         [ 4] 3712 	call print_int
      001538 A6 20            [ 1] 3713 	ld a,#SPACE 
      00153A CD 01 9E         [ 4] 3714 	call putc 
      00153D 1E 03            [ 2] 3715 	ldw x,(XSAVE,sp)
      00153F 1C 00 02         [ 2] 3716 	addw x,#2 
      001542 CC 14 AA         [ 2] 3717 	jp 1$
      001545 A1 31            [ 1] 3718 8$: cp a,#TK_GT 
      001547 2B 1A            [ 1] 3719 	jrmi 9$
      001549 A1 35            [ 1] 3720 	cp a,#TK_NE 
      00154B 22 16            [ 1] 3721 	jrugt 9$
      00154D A0 31            [ 1] 3722 	sub a,#TK_GT  
      00154F 48               [ 1] 3723 	sll a 
      001550 90 5F            [ 1] 3724 	clrw y 
      001552 90 97            [ 1] 3725 	ld yl,a 
      001554 72 A9 15 D2      [ 2] 3726 	addw y,#relop_str 
      001558 90 FE            [ 2] 3727 	ldw y,(y)
      00155A 93               [ 1] 3728 	ldw x,y 
      00155B CD 01 B0         [ 4] 3729 	call puts 
      00155E 1E 03            [ 2] 3730 	ldw x,(XSAVE,sp)
      001560 CC 14 AA         [ 2] 3731 	jp 1$
      001563 A1 10            [ 1] 3732 9$: cp a,#TK_PLUS 
      001565 26 04            [ 1] 3733 	jrne 10$
      001567 A6 2B            [ 1] 3734 	ld a,#'+
      001569 20 46            [ 2] 3735 	jra 80$ 
      00156B A1 11            [ 1] 3736 10$: cp a,#TK_MINUS
      00156D 26 04            [ 1] 3737 	jrne 11$
      00156F A6 2D            [ 1] 3738 	ld a,#'-
      001571 20 3E            [ 2] 3739 	jra 80$
      001573 A1 20            [ 1] 3740 11$: cp a,#TK_MULT 
      001575 2B 0E            [ 1] 3741 	jrmi 12$
      001577 A1 22            [ 1] 3742 	cp a,#TK_MOD 
      001579 22 0A            [ 1] 3743 	jrugt 12$
      00157B A0 20            [ 1] 3744 	sub a,#0x20
      00157D 5F               [ 1] 3745 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00157E 97               [ 1] 3746 	ld xl,a 
      00157F 1C 15 CF         [ 2] 3747 	addw x,#mul_char 
      001582 F6               [ 1] 3748 	ld a,(x)
      001583 20 2C            [ 2] 3749 	jra 80$ 
      001585 A1 0B            [ 1] 3750 12$: cp a,#TK_LPAREN 
      001587 2B 0E            [ 1] 3751 	jrmi 13$
      001589 A1 0E            [ 1] 3752 	cp a,#TK_SHARP 
      00158B 22 0A            [ 1] 3753 	jrugt 13$
      00158D A0 0B            [ 1] 3754 	sub a,#TK_LPAREN
      00158F 5F               [ 1] 3755 	clrw x 
      001590 97               [ 1] 3756 	ld xl,a 
      001591 1C 15 CB         [ 2] 3757 	addw x,#single_char 
      001594 F6               [ 1] 3758 	ld a,(x)
      001595 20 1A            [ 2] 3759 	jra 80$
      001597 A1 03            [ 1] 3760 13$: cp a,#TK_CHAR 
      001599 26 14            [ 1] 3761 	jrne 14$
      00159B A6 5C            [ 1] 3762 	ld a,#'\
      00159D CD 01 9E         [ 4] 3763 	call putc 
      0015A0 1E 03            [ 2] 3764 	ldw x,(XSAVE,sp)
      0015A2 72 D6 00 11      [ 4] 3765 	ld a,([ptr16],x)
      0015A6 5C               [ 1] 3766 	incw x 
      0015A7 1F 03            [ 2] 3767 	ldw (XSAVE,sp),x 
      0015A9 CD 01 9E         [ 4] 3768 	call putc 
      0015AC CC 14 AA         [ 2] 3769 	jp 1$ 
      0015AF A6 3A            [ 1] 3770 14$: ld a,#':
      0015B1 CD 01 9E         [ 4] 3771 80$: call putc 
      0015B4 1E 03            [ 2] 3772 	ldw x,(XSAVE,sp)
      0015B6 CC 14 AA         [ 2] 3773 	jp 1$ 
      0015B9                       3774 90$: 
      0015B9 A6 0D            [ 1] 3775 	ld a,#CR 
      0015BB CD 01 9E         [ 4] 3776 	call putc
      0015BE 7B 02            [ 1] 3777 	ld a,(WIDTH_SAV,sp) 
      0015C0 C7 00 20         [ 1] 3778 	ld tab_width,a 
      0015C3 7B 01            [ 1] 3779 	ld a,(BASE_SAV,sp) 
      0015C5 C7 00 06         [ 1] 3780 	ld base,a
      0015C8                       3781 	_drop VSIZE 
      0015C8 5B 05            [ 2]    1     addw sp,#VSIZE 
      0015CA 81               [ 4] 3782 	ret 	
      0015CB 28 29 2C 23           3783 single_char: .byte '(',')',',','#'
      0015CF 2A 2F 25              3784 mul_char: .byte '*','/','%'
      0015D2 15 DE 15 E0 15 E2 15  3785 relop_str: .word gt,equal,ge,lt,le,ne 
             E5 15 E7 15 EA
      0015DE 3E 00                 3786 gt: .asciz ">"
      0015E0 3D 00                 3787 equal: .asciz "="
      0015E2 3E 3D 00              3788 ge: .asciz ">="
      0015E5 3C 00                 3789 lt: .asciz "<"
      0015E7 3C 3D 00              3790 le: .asciz "<="
      0015EA 3C 3E 00              3791 ne:  .asciz "<>"
                                   3792 
                                   3793 
                                   3794 ;---------------------------------
                                   3795 ; BASIC: PRINT|? arg_list 
                                   3796 ; print values from argument list
                                   3797 ;----------------------------------
                           000001  3798 	COMMA=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                           000001  3799 	VSIZE=1
      0015ED                       3800 print:
      0015ED 4B 00            [ 1] 3801 push #0 ; local variable COMMA 
      0015EF                       3802 reset_comma:
      0015EF 0F 01            [ 1] 3803 	clr (COMMA,sp)
      0015F1                       3804 prt_loop:
      0015F1 CD 12 E4         [ 4] 3805 	call relation 
      0015F4 A1 01            [ 1] 3806 	cp a,#TK_COLON 
      0015F6 27 5A            [ 1] 3807 	jreq print_exit   
      0015F8 A1 04            [ 1] 3808 	cp a,#TK_INTGR 
      0015FA 26 05            [ 1] 3809 	jrne 0$ 
      0015FC CD 09 78         [ 4] 3810 	call print_int 
      0015FF 20 EE            [ 2] 3811 	jra reset_comma
      001601                       3812 0$: 	
      001601 CD 07 DF         [ 4] 3813 	call next_token
      001604 A1 00            [ 1] 3814 	cp a,#TK_NONE 
      001606 27 4A            [ 1] 3815 	jreq print_exit 
      001608 A1 0A            [ 1] 3816 1$:	cp a,#TK_QSTR
      00160A 26 0E            [ 1] 3817 	jrne 2$   
      00160C CD 01 B0         [ 4] 3818 	call puts
      00160F 5C               [ 1] 3819 	incw x 
      001610 72 B0 00 04      [ 2] 3820 	subw x,basicptr 
      001614 9F               [ 1] 3821 	ld a,xl 
      001615 C7 00 01         [ 1] 3822 	ld in,a  
      001618 20 D5            [ 2] 3823 	jra reset_comma
      00161A A1 03            [ 1] 3824 2$: cp a,#TK_CHAR 
      00161C 26 06            [ 1] 3825 	jrne 3$
      00161E 9F               [ 1] 3826 	ld a,xl 
      00161F CD 01 9E         [ 4] 3827 	call putc 
      001622 20 CB            [ 2] 3828 	jra reset_comma 
      001624                       3829 3$: 	
      001624 A1 08            [ 1] 3830 	cp a,#TK_CFUNC 
      001626 26 07            [ 1] 3831 	jrne 4$ 
      001628 FD               [ 4] 3832 	call (x)
      001629 9F               [ 1] 3833 	ld a,xl 
      00162A CD 01 9E         [ 4] 3834 	call putc
      00162D 20 C0            [ 2] 3835 	jra reset_comma 
      00162F                       3836 4$: 
      00162F A1 0D            [ 1] 3837 	cp a,#TK_COMMA 
      001631 26 05            [ 1] 3838 	jrne 5$
      001633 03 01            [ 1] 3839 	cpl (COMMA,sp) 
      001635 CC 15 F1         [ 2] 3840 	jp prt_loop   
      001638                       3841 5$: 
      001638 A1 0E            [ 1] 3842 	cp a,#TK_SHARP
      00163A 26 13            [ 1] 3843 	jrne 7$
      00163C CD 07 DF         [ 4] 3844 	call next_token
      00163F A1 04            [ 1] 3845 	cp a,#TK_INTGR 
      001641 27 03            [ 1] 3846 	jreq 6$
      001643 CC 06 FF         [ 2] 3847 	jp syntax_error 
      001646                       3848 6$:
      001646 9F               [ 1] 3849 	ld a,xl 
      001647 A4 0F            [ 1] 3850 	and a,#15 
      001649 C7 00 20         [ 1] 3851 	ld tab_width,a 
      00164C CC 15 EF         [ 2] 3852 	jp reset_comma 
      00164F                       3853 7$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00164F CD 0F 6B         [ 4] 3854 	call unget_token
      001652                       3855 print_exit:
      001652 0D 01            [ 1] 3856 	tnz (COMMA,sp)
      001654 26 05            [ 1] 3857 	jrne 9$
      001656 A6 0D            [ 1] 3858 	ld a,#CR 
      001658 CD 01 9E         [ 4] 3859     call putc 
      00165B                       3860 9$:	_drop VSIZE 
      00165B 5B 01            [ 2]    1     addw sp,#VSIZE 
      00165D 81               [ 4] 3861 	ret 
                                   3862 
                                   3863 ;----------------------
                                   3864 ; 'save_context' and
                                   3865 ; 'rest_context' must be 
                                   3866 ; called at the same 
                                   3867 ; call stack depth 
                                   3868 ; i.e. SP must have the 
                                   3869 ; save value at  
                                   3870 ; entry point of both 
                                   3871 ; routine. 
                                   3872 ;---------------------
                           000006  3873 	CTXT_SIZE=6 ; size of saved data 
                                   3874 ;--------------------
                                   3875 ; save current BASIC
                                   3876 ; interpreter context 
                                   3877 ; on cstack 
                                   3878 ;--------------------
      00165E                       3879 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      00165E                       3880 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      00165E                       3881 	_arg LNO 3 
                           000005     1     LNO=ARG_OFS+3 
      00165E                       3882 	_arg IN 5
                           000007     1     IN=ARG_OFS+5 
      00165E                       3883 	_arg CNT 6
                           000008     1     CNT=ARG_OFS+6 
      00165E                       3884 save_context:
      00165E CE 00 04         [ 2] 3885 	ldw x,basicptr 
      001661 1F 03            [ 2] 3886 	ldw (BPTR,sp),x
      001663 C6 00 01         [ 1] 3887 	ld a,in 
      001666 6B 07            [ 1] 3888 	ld (IN,sp),a
      001668 C6 00 03         [ 1] 3889 	ld a,count 
      00166B 6B 08            [ 1] 3890 	ld (CNT,sp),a  
      00166D 81               [ 4] 3891 	ret
                                   3892 
                                   3893 ;-----------------------
                                   3894 ; restore previously saved 
                                   3895 ; BASIC interpreter context 
                                   3896 ; from cstack 
                                   3897 ;-------------------------
      00166E                       3898 rest_context:
      00166E 1E 03            [ 2] 3899 	ldw x,(BPTR,sp)
      001670 CF 00 04         [ 2] 3900 	ldw basicptr,x 
      001673 7B 07            [ 1] 3901 	ld a,(IN,sp)
      001675 C7 00 01         [ 1] 3902 	ld in,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001678 7B 08            [ 1] 3903 	ld a,(CNT,sp)
      00167A C7 00 03         [ 1] 3904 	ld count,a  
      00167D 81               [ 4] 3905 	ret
                                   3906 
                                   3907 ;------------------------------------------
                                   3908 ; BASIC: INPUT [string],var[,[string],var]
                                   3909 ; input value in variables 
                                   3910 ; [string] optionally can be used as prompt 
                                   3911 ;-----------------------------------------
                           000001  3912 	CX_BPTR=1
                           000003  3913 	CX_LNO=3
                           000004  3914 	CX_IN=4
                           000005  3915 	CX_CNT=5
                           000006  3916 	SKIP=6
                           000007  3917 	VSIZE=7
      00167E                       3918 input_var:
      00167E 72 00 00 1F 05   [ 2] 3919 	btjt flags,#FRUN,1$ 
      001683 A6 06            [ 1] 3920 	ld a,#ERR_RUN_ONLY 
      001685 CC 07 01         [ 2] 3921 	jp tb_error 
      001688                       3922 1$:	_vars VSIZE 
      001688 52 07            [ 2]    1     sub sp,#VSIZE 
      00168A                       3923 input_loop:
      00168A 0F 06            [ 1] 3924 	clr (SKIP,sp)
      00168C CD 07 DF         [ 4] 3925 	call next_token 
      00168F A1 00            [ 1] 3926 	cp a,#TK_NONE 
      001691 27 5C            [ 1] 3927 	jreq input_exit 
      001693 A1 0A            [ 1] 3928 	cp a,#TK_QSTR 
      001695 26 08            [ 1] 3929 	jrne 1$ 
      001697 CD 01 B0         [ 4] 3930 	call puts 
      00169A 03 06            [ 1] 3931 	cpl (SKIP,sp)
      00169C CD 07 DF         [ 4] 3932 	call next_token 
      00169F A1 05            [ 1] 3933 1$: cp a,#TK_VAR  
      0016A1 27 03            [ 1] 3934 	jreq 2$ 
      0016A3 CC 06 FF         [ 2] 3935 	jp syntax_error
      0016A6 CD 0F 71         [ 4] 3936 2$:	call dpush 
      0016A9 0D 06            [ 1] 3937 	tnz (SKIP,sp)
      0016AB 26 0F            [ 1] 3938 	jrne 21$ 
      0016AD A6 3A            [ 1] 3939 	ld a,#':
      0016AF C7 17 19         [ 1] 3940 	ld pad+1,a 
      0016B2 72 5F 17 1A      [ 1] 3941 	clr pad+2
      0016B6 AE 17 18         [ 2] 3942 	ldw x,#pad 
      0016B9 CD 01 B0         [ 4] 3943 	call puts   
      0016BC                       3944 21$:
      0016BC CD 16 5E         [ 4] 3945 	call save_context 
      0016BF AE 16 C8         [ 2] 3946 	ldw x,#tib 
      0016C2 CF 00 04         [ 2] 3947 	ldw basicptr,x  
      0016C5 72 5F 00 03      [ 1] 3948 	clr count  
      0016C9 CD 0A 66         [ 4] 3949 	call readln 
      0016CC 72 5F 00 01      [ 1] 3950 	clr in 
      0016D0 CD 12 E4         [ 4] 3951 	call relation 
      0016D3 A1 04            [ 1] 3952 	cp a,#TK_INTGR
      0016D5 27 03            [ 1] 3953 	jreq 3$ 
      0016D7 CC 06 FF         [ 2] 3954 	jp syntax_error
      0016DA CD 0F 71         [ 4] 3955 3$: call dpush 
      0016DD CD 0F D8         [ 4] 3956 	call store 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016E0 CD 16 6E         [ 4] 3957 	call rest_context
      0016E3 CD 07 DF         [ 4] 3958 	call next_token 
      0016E6 A1 0D            [ 1] 3959 	cp a,#TK_COMMA 
      0016E8 26 02            [ 1] 3960 	jrne 4$
      0016EA 20 9E            [ 2] 3961 	jra input_loop 
      0016EC CD 0F 6B         [ 4] 3962 4$:	call unget_token 
      0016EF                       3963 input_exit:
      0016EF                       3964 	_drop VSIZE 
      0016EF 5B 07            [ 2]    1     addw sp,#VSIZE 
      0016F1 81               [ 4] 3965 	ret 
                                   3966 
                                   3967 
                                   3968 ;---------------------
                                   3969 ; BASIC: REMARK | ' 
                                   3970 ; skip comment to end of line 
                                   3971 ;---------------------- 
      0016F2                       3972 rem:
      0016F2 55 00 01 00 03   [ 1] 3973  	mov count,in 
      0016F7 81               [ 4] 3974 	ret 
                                   3975 
                                   3976 ;---------------------
                                   3977 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3978 ; read in loop 'addr'  
                                   3979 ; apply & 'mask' to value 
                                   3980 ; loop while result==0.  
                                   3981 ; if 'xor_mask' given 
                                   3982 ; apply ^ in second  
                                   3983 ; loop while result==0 
                                   3984 ;---------------------
                           000001  3985 	XMASK=1 
                           000002  3986 	MASK=2
                           000003  3987 	ADDR=3
                           000004  3988 	VSIZE=4
      0016F8                       3989 wait: 
      0016F8                       3990 	_vars VSIZE
      0016F8 52 04            [ 2]    1     sub sp,#VSIZE 
      0016FA 0F 01            [ 1] 3991 	clr (XMASK,sp) 
      0016FC CD 11 9E         [ 4] 3992 	call arg_list 
      0016FF A1 02            [ 1] 3993 	cp a,#2
      001701 24 03            [ 1] 3994 	jruge 0$
      001703 CC 06 FF         [ 2] 3995 	jp syntax_error 
      001706 A1 03            [ 1] 3996 0$:	cp a,#3
      001708 25 06            [ 1] 3997 	jrult 1$
      00170A CD 0F 7E         [ 4] 3998 	call dpop 
      00170D 9F               [ 1] 3999 	ld a,xl
      00170E 6B 01            [ 1] 4000 	ld (XMASK,sp),a 
      001710 CD 0F 7E         [ 4] 4001 1$: call dpop ; mask 
      001713 9F               [ 1] 4002 	ld a,xl 
      001714 6B 02            [ 1] 4003 	ld (MASK,sp),a 
      001716 CD 0F 7E         [ 4] 4004 	call dpop ; address 
      001719 F6               [ 1] 4005 2$:	ld a,(x)
      00171A 14 02            [ 1] 4006 	and a,(MASK,sp)
      00171C 18 01            [ 1] 4007 	xor a,(XMASK,sp)
      00171E 27 F9            [ 1] 4008 	jreq 2$ 
      001720                       4009 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001720 5B 04            [ 2]    1     addw sp,#VSIZE 
      001722 81               [ 4] 4010 	ret 
                                   4011 
                                   4012 ;---------------------
                                   4013 ; BASIC: BSET addr,mask
                                   4014 ; set bits at 'addr' corresponding 
                                   4015 ; to those of 'mask' that are at 1.
                                   4016 ; arguments:
                                   4017 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4018 ;   mask        mask|addr
                                   4019 ; output:
                                   4020 ;	none 
                                   4021 ;--------------------------
      001723                       4022 bit_set:
      001723 CD 11 9E         [ 4] 4023 	call arg_list 
      001726 A1 02            [ 1] 4024 	cp a,#2	 
      001728 27 03            [ 1] 4025 	jreq 1$ 
      00172A CC 06 FF         [ 2] 4026 	jp syntax_error
      00172D                       4027 1$: 
      00172D CD 0F 7E         [ 4] 4028 	call dpop ; mask 
      001730 9F               [ 1] 4029 	ld a,xl 
      001731 CD 0F 7E         [ 4] 4030 	call dpop ; addr  
      001734 FA               [ 1] 4031 	or a,(x)
      001735 F7               [ 1] 4032 	ld (x),a
      001736 81               [ 4] 4033 	ret 
                                   4034 
                                   4035 ;---------------------
                                   4036 ; BASIC: BRES addr,mask
                                   4037 ; reset bits at 'addr' corresponding 
                                   4038 ; to those of 'mask' that are at 1.
                                   4039 ; arguments:
                                   4040 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4041 ;   mask	    ~mask&*addr  
                                   4042 ; output:
                                   4043 ;	none 
                                   4044 ;--------------------------
      001737                       4045 bit_reset:
      001737 CD 11 9E         [ 4] 4046 	call arg_list 
      00173A A1 02            [ 1] 4047 	cp a,#2  
      00173C 27 03            [ 1] 4048 	jreq 1$ 
      00173E CC 06 FF         [ 2] 4049 	jp syntax_error
      001741                       4050 1$: 
      001741 CD 0F 7E         [ 4] 4051 	call dpop ; mask 
      001744 9F               [ 1] 4052 	ld a,xl 
      001745 43               [ 1] 4053 	cpl a 
      001746 CD 0F 7E         [ 4] 4054 	call dpop ; addr  
      001749 F4               [ 1] 4055 	and a,(x)
      00174A F7               [ 1] 4056 	ld (x),a 
      00174B 81               [ 4] 4057 	ret 
                                   4058 
                                   4059 ;---------------------
                                   4060 ; BASIC: BRES addr,mask
                                   4061 ; toggle bits at 'addr' corresponding 
                                   4062 ; to those of 'mask' that are at 1.
                                   4063 ; arguments:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4064 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4065 ;   mask	    mask^*addr  
                                   4066 ; output:
                                   4067 ;	none 
                                   4068 ;--------------------------
      00174C                       4069 bit_toggle:
      00174C CD 11 9E         [ 4] 4070 	call arg_list 
      00174F A1 02            [ 1] 4071 	cp a,#2 
      001751 27 03            [ 1] 4072 	jreq 1$ 
      001753 CC 06 FF         [ 2] 4073 	jp syntax_error
      001756 CD 0F 7E         [ 4] 4074 1$: call dpop ; mask 
      001759 9F               [ 1] 4075 	ld a,xl 
      00175A CD 0F 7E         [ 4] 4076 	call dpop ; addr  
      00175D F8               [ 1] 4077 	xor a,(x)
      00175E F7               [ 1] 4078 	ld (x),a 
      00175F 81               [ 4] 4079 	ret 
                                   4080 
                                   4081 
                                   4082 ;---------------------
                                   4083 ; BASIC: BTEST(addr,bit)
                                   4084 ; return bit value at 'addr' 
                                   4085 ; bit is in range {0..7}.
                                   4086 ; arguments:
                                   4087 ; 	addr 		memory address RAM|PERIPHERAL 
                                   4088 ;   bit 	    bit position {0..7}  
                                   4089 ; output:
                                   4090 ;	none 
                                   4091 ;--------------------------
      001760                       4092 bit_test:
      001760 CD 11 C2         [ 4] 4093 	call func_args 
      001763 A1 02            [ 1] 4094 	cp a,#2
      001765 27 03            [ 1] 4095 	jreq 0$
      001767 CC 06 FF         [ 2] 4096 	jp syntax_error
      00176A                       4097 0$:	
      00176A CD 0F 7E         [ 4] 4098 	call dpop 
      00176D 9F               [ 1] 4099 	ld a,xl 
      00176E A4 07            [ 1] 4100 	and a,#7
      001770 88               [ 1] 4101 	push a 
      001771 A6 01            [ 1] 4102 	ld a,#1 
      001773 0D 01            [ 1] 4103 1$: tnz (1,sp)
      001775 27 05            [ 1] 4104 	jreq 2$
      001777 48               [ 1] 4105 	sll a 
      001778 0A 01            [ 1] 4106 	dec (1,sp)
      00177A 20 F7            [ 2] 4107 	jra 1$
      00177C CD 0F 7E         [ 4] 4108 2$: call dpop 
      00177F F4               [ 1] 4109 	and a,(x)
      001780 27 02            [ 1] 4110 	jreq 3$
      001782 A6 01            [ 1] 4111 	ld a,#1 
      001784 5F               [ 1] 4112 3$:	clrw x 
      001785 97               [ 1] 4113 	ld xl,a 
      001786 A6 04            [ 1] 4114 	ld a,#TK_INTGR
      001788                       4115 	_drop 1 
      001788 5B 01            [ 2]    1     addw sp,#1 
      00178A 81               [ 4] 4116 	ret
                                   4117 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4118 
                                   4119 ;--------------------
                                   4120 ; BASIC: POKE addr,byte
                                   4121 ; put a byte at addr 
                                   4122 ;--------------------
      00178B                       4123 poke:
      00178B CD 11 9E         [ 4] 4124 	call arg_list 
      00178E A1 02            [ 1] 4125 	cp a,#2
      001790 27 03            [ 1] 4126 	jreq 1$
      001792 CC 06 FF         [ 2] 4127 	jp syntax_error
      001795                       4128 1$:	
      001795 CD 0F 7E         [ 4] 4129 	call dpop 
      001798 9F               [ 1] 4130     ld a,xl 
      001799 CD 0F 7E         [ 4] 4131 	call dpop 
      00179C F7               [ 1] 4132 	ld (x),a 
      00179D 81               [ 4] 4133 	ret 
                                   4134 
                                   4135 ;-----------------------
                                   4136 ; BASIC: PEEK(addr)
                                   4137 ; get the byte at addr 
                                   4138 ; input:
                                   4139 ;	none 
                                   4140 ; output:
                                   4141 ;	X 		value 
                                   4142 ;-----------------------
      00179E                       4143 peek:
      00179E CD 11 C2         [ 4] 4144 	call func_args
      0017A1 A1 01            [ 1] 4145 	cp a,#1
      0017A3 27 03            [ 1] 4146 	jreq 1$
      0017A5 CC 06 FF         [ 2] 4147 	jp syntax_error
      0017A8 CD 0F 7E         [ 4] 4148 1$:	call dpop 
      0017AB F6               [ 1] 4149 	ld a,(x)
      0017AC 5F               [ 1] 4150 	clrw x 
      0017AD 97               [ 1] 4151 	ld xl,a 
      0017AE A6 04            [ 1] 4152 	ld a,#TK_INTGR
      0017B0 81               [ 4] 4153 	ret 
                                   4154 
      0017B1                       4155 if: 
      0017B1 CD 12 E4         [ 4] 4156 	call relation 
      0017B4 A1 04            [ 1] 4157 	cp a,#TK_INTGR
      0017B6 27 03            [ 1] 4158 	jreq 1$ 
      0017B8 CC 06 FF         [ 2] 4159 	jp syntax_error
      0017BB 4F               [ 1] 4160 1$:	clr a 
      0017BC 5D               [ 2] 4161 	tnzw x 
      0017BD 26 05            [ 1] 4162 	jrne 9$  
                                   4163 ;skip to next line
      0017BF 55 00 03 00 01   [ 1] 4164 	mov in,count
      0017C4 81               [ 4] 4165 9$:	ret 
                                   4166 
                                   4167 ;------------------------
                                   4168 ; BASIC: FOR var=expr 
                                   4169 ; set variable to expression 
                                   4170 ; leave variable address 
                                   4171 ; on dstack and set
                                   4172 ; FFOR bit in 'flags'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4173 ;-----------------
                           000001  4174 	RETL1=1
                           000003  4175 	INW=3
                           000005  4176 	BPTR=5
      0017C5                       4177 for: ; { -- var_addr }
      0017C5 A6 05            [ 1] 4178 	ld a,#TK_VAR 
      0017C7 CD 11 91         [ 4] 4179 	call expect
      0017CA CD 0F 71         [ 4] 4180 	call dpush 
      0017CD CD 13 8B         [ 4] 4181 	call let02 
      0017D0 72 14 00 1F      [ 1] 4182 	bset flags,#FFOR 
                                   4183 ; open space on cstack for BPTR and INW 
      0017D4 85               [ 2] 4184 	popw x ; call return address 
      0017D5                       4185 	_vars 4
      0017D5 52 04            [ 2]    1     sub sp,#4 
      0017D7 89               [ 2] 4186 	pushw x  ; RETL1 
      0017D8 5F               [ 1] 4187 	clrw x 
      0017D9 1F 05            [ 2] 4188 	ldw (BPTR,sp),x 
      0017DB 1F 03            [ 2] 4189 	ldw (INW,sp),x 
      0017DD CD 07 DF         [ 4] 4190 	call next_token 
      0017E0 A1 06            [ 1] 4191 	cp a,#TK_CMD 
      0017E2 27 03            [ 1] 4192 	jreq 1$
      0017E4 CC 06 FF         [ 2] 4193 	jp syntax_error
      0017E7                       4194 1$:  
      0017E7 A3 17 EF         [ 2] 4195 	cpw x,#to 
      0017EA 27 03            [ 1] 4196 	jreq to
      0017EC CC 06 FF         [ 2] 4197 	jp syntax_error 
                                   4198 
                                   4199 ;-----------------------------------
                                   4200 ; BASIC: TO expr 
                                   4201 ; second part of FOR loop initilization
                                   4202 ; leave limit on dstack and set 
                                   4203 ; FTO bit in 'flags'
                                   4204 ;-----------------------------------
      0017EF                       4205 to: ; { var_addr -- var_addr limit step }
      0017EF 72 04 00 1F 03   [ 2] 4206 	btjt flags,#FFOR,1$
      0017F4 CC 06 FF         [ 2] 4207 	jp syntax_error
      0017F7 CD 12 E4         [ 4] 4208 1$: call relation  
      0017FA A1 04            [ 1] 4209 	cp a,#TK_INTGR 
      0017FC 27 03            [ 1] 4210 	jreq 2$ 
      0017FE CC 06 FF         [ 2] 4211 	jp syntax_error
      001801                       4212 2$: 
      001801 CD 0F 71         [ 4] 4213     call dpush ; limit
      001804 CE 00 00         [ 2] 4214 	ldw x,in.w 
      001807 CD 07 DF         [ 4] 4215 	call next_token
      00180A A1 00            [ 1] 4216 	cp a,#TK_NONE  
      00180C 27 0C            [ 1] 4217 	jreq 4$ 
      00180E A1 06            [ 1] 4218 	cp a,#TK_CMD
      001810 26 05            [ 1] 4219 	jrne 3$
      001812 A3 18 1F         [ 2] 4220 	cpw x,#step 
      001815 27 08            [ 1] 4221 	jreq step
      001817                       4222 3$:	
      001817 CD 0F 6B         [ 4] 4223 	call unget_token   	 
      00181A                       4224 4$:	
      00181A AE 00 01         [ 2] 4225 	ldw x,#1   ; default step  
      00181D 20 12            [ 2] 4226 	jra store_loop_addr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4227 
                                   4228 
                                   4229 ;----------------------------------
                                   4230 ; BASIC: STEP expr 
                                   4231 ; optional third par of FOR loop
                                   4232 ; initialization. 	
                                   4233 ;------------------------------------
      00181F                       4234 step: ; {var limit -- var limit step}
      00181F 72 04 00 1F 03   [ 2] 4235 	btjt flags,#FFOR,1$
      001824 CC 06 FF         [ 2] 4236 	jp syntax_error
      001827 CD 12 E4         [ 4] 4237 1$: call relation
      00182A A1 04            [ 1] 4238 	cp a,#TK_INTGR
      00182C 27 03            [ 1] 4239 	jreq store_loop_addr  
      00182E CC 06 FF         [ 2] 4240 	jp syntax_error
                                   4241 ; leave loop back entry point on cstack 
                                   4242 ; cstack is 2 call deep from interp_loop
      001831                       4243 store_loop_addr:
      001831 CD 0F 71         [ 4] 4244 	call dpush 
      001834 CE 00 04         [ 2] 4245 	ldw x,basicptr  
      001837 1F 05            [ 2] 4246 	ldw (BPTR,sp),x 
      001839 CE 00 00         [ 2] 4247 	ldw x,in.w 
      00183C 1F 03            [ 2] 4248 	ldw (INW,sp),x   
      00183E 72 15 00 1F      [ 1] 4249 	bres flags,#FFOR 
      001842 72 5C 00 1C      [ 1] 4250 	inc loop_depth  
      001846 81               [ 4] 4251 	ret 
                                   4252 
                                   4253 ;--------------------------------
                                   4254 ; BASIC: NEXT var 
                                   4255 ; FOR loop control 
                                   4256 ; increment variable with step 
                                   4257 ; and compare with limit 
                                   4258 ; loop if threshold not crossed.
                                   4259 ; else clean both stacks. 
                                   4260 ; and decrement 'loop_depth' 
                                   4261 ;--------------------------------
      001847                       4262 next: ; {var limit step -- [var limit step ] }
      001847 72 5D 00 1C      [ 1] 4263 	tnz loop_depth 
      00184B 26 03            [ 1] 4264 	jrne 1$ 
      00184D CC 06 FF         [ 2] 4265 	jp syntax_error 
      001850                       4266 1$: 
      001850 A6 05            [ 1] 4267 	ld a,#TK_VAR 
      001852 CD 11 91         [ 4] 4268 	call expect
                                   4269 ; check for good variable after NEXT 	 
      001855 90 93            [ 1] 4270 	ldw y,x 
      001857 AE 00 04         [ 2] 4271 	ldw x,#4  
      00185A 72 D3 00 16      [ 4] 4272 	cpw y,([dstkptr],x) ; compare variables address 
      00185E 27 03            [ 1] 4273 	jreq 2$  
      001860 CC 06 FF         [ 2] 4274 	jp syntax_error ; not the good one 
      001863                       4275 2$: ; increment variable 
      001863 93               [ 1] 4276 	ldw x,y
      001864 FE               [ 2] 4277 	ldw x,(x)  ; get var value 
      001865 CF 00 08         [ 2] 4278 	ldw acc16,x 
      001868 72 CE 00 16      [ 5] 4279 	ldw x,[dstkptr] ; step
      00186C 72 BB 00 08      [ 2] 4280 	addw x,acc16 ; var+step 
      001870 90 FF            [ 2] 4281 	ldw (y),x ; save var new value 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4282 ; compare with limit 
      001872 90 93            [ 1] 4283 	ldw y,x 
      001874 72 CE 00 16      [ 5] 4284 	ldw x,[dstkptr] ; step in x 
      001878 5D               [ 2] 4285 	tnzw x  
      001879 2A 0B            [ 1] 4286 	jrpl 4$ ; positive step 
                                   4287 ;negative step 
      00187B AE 00 02         [ 2] 4288 	ldw x,#2
      00187E 72 D3 00 16      [ 4] 4289 	cpw y,([dstkptr],x)
      001882 2F 20            [ 1] 4290 	jrslt loop_done
      001884 20 09            [ 2] 4291 	jra loop_back 
      001886                       4292 4$: ; positive step
      001886 AE 00 02         [ 2] 4293 	ldw x,#2 
      001889 72 D3 00 16      [ 4] 4294 	cpw y,([dstkptr],x)
      00188D 2C 15            [ 1] 4295 	jrsgt loop_done
      00188F                       4296 loop_back:
      00188F 1E 05            [ 2] 4297 	ldw x,(BPTR,sp)
      001891 CF 00 04         [ 2] 4298 	ldw basicptr,x 
      001894 72 01 00 1F 05   [ 2] 4299 	btjf flags,#FRUN,1$ 
      001899 E6 02            [ 1] 4300 	ld a,(2,x)
      00189B C7 00 03         [ 1] 4301 	ld count,a
      00189E 1E 03            [ 2] 4302 1$:	ldw x,(INW,sp)
      0018A0 CF 00 00         [ 2] 4303 	ldw in.w,x 
      0018A3 81               [ 4] 4304 	ret 
      0018A4                       4305 loop_done:
                                   4306 	; remove var limit step on dstack 
      0018A4 CE 00 16         [ 2] 4307 	ldw x,dstkptr 
      0018A7 1C 00 06         [ 2] 4308 	addw x,#3*CELL_SIZE
      0018AA CF 00 16         [ 2] 4309 	ldw dstkptr,x 
                                   4310 	; remove 2 return address on cstack 
      0018AD 85               [ 2] 4311 	popw x
      0018AE                       4312 	_drop 4
      0018AE 5B 04            [ 2]    1     addw sp,#4 
      0018B0 89               [ 2] 4313 	pushw x 
      0018B1 72 5A 00 1C      [ 1] 4314 	dec loop_depth 
      0018B5 81               [ 4] 4315 	ret 
                                   4316 
                                   4317 
                                   4318 ;------------------------
                                   4319 ; BASIC: GOTO line# 
                                   4320 ; jump to line# 
                                   4321 ; here cstack is 2 call deep from interp_loop 
                                   4322 ;------------------------
      0018B6                       4323 goto:
      0018B6 72 00 00 1F 06   [ 2] 4324 	btjt flags,#FRUN,0$ 
      0018BB A6 06            [ 1] 4325 	ld a,#ERR_RUN_ONLY
      0018BD CC 07 01         [ 2] 4326 	jp tb_error 
      0018C0 81               [ 4] 4327 	ret 
      0018C1 20 23            [ 2] 4328 0$:	jra go_common
                                   4329 
                                   4330 ;--------------------
                                   4331 ; BASIC: GOSUB line#
                                   4332 ; basic subroutine call
                                   4333 ; actual line# and basicptr 
                                   4334 ; are saved on cstack
                                   4335 ; here cstack is 2 call deep from interp_loop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4336 ;--------------------
                           000003  4337 	GOS_RET=3
      0018C3                       4338 gosub:
      0018C3 72 00 00 1F 06   [ 2] 4339 	btjt flags,#FRUN,0$ 
      0018C8 A6 06            [ 1] 4340 	ld a,#ERR_RUN_ONLY
      0018CA CC 07 01         [ 2] 4341 	jp tb_error 
      0018CD 81               [ 4] 4342 	ret 
      0018CE 85               [ 2] 4343 0$:	popw x 
      0018CF 52 02            [ 2] 4344 	sub sp,#2 
      0018D1 89               [ 2] 4345 	pushw x 
      0018D2 CE 00 04         [ 2] 4346 	ldw x,basicptr
      0018D5 E6 02            [ 1] 4347 	ld a,(2,x)
      0018D7 AB 03            [ 1] 4348 	add a,#3 
      0018D9 C7 00 09         [ 1] 4349 	ld acc8,a 
      0018DC 72 5F 00 08      [ 1] 4350 	clr acc16 
      0018E0 72 BB 00 08      [ 2] 4351 	addw x,acc16
      0018E4 1F 03            [ 2] 4352 	ldw (GOS_RET,sp),x 
      0018E6                       4353 go_common: 
      0018E6 CD 12 E4         [ 4] 4354 	call relation 
      0018E9 A1 04            [ 1] 4355 	cp a,#TK_INTGR
      0018EB 27 03            [ 1] 4356 	jreq 1$ 
      0018ED CC 06 FF         [ 2] 4357 	jp syntax_error
      0018F0                       4358 1$: 
      0018F0 CD 02 E0         [ 4] 4359 	call search_lineno  
      0018F3 5D               [ 2] 4360 	tnzw x 
      0018F4 26 05            [ 1] 4361 	jrne 2$ 
      0018F6 A6 05            [ 1] 4362 	ld a,#ERR_NO_LINE 
      0018F8 CC 07 01         [ 2] 4363 	jp tb_error 
      0018FB                       4364 2$: 
      0018FB CF 00 04         [ 2] 4365 	ldw basicptr,x 
      0018FE E6 02            [ 1] 4366 	ld a,(2,x)
      001900 C7 00 03         [ 1] 4367 	ld count,a 
      001903 35 03 00 01      [ 1] 4368 	mov in,#3 
      001907 81               [ 4] 4369 	ret 
                                   4370 
                                   4371 ;------------------------
                                   4372 ; BASIC: RETURN 
                                   4373 ; exit from a subroutine 
                                   4374 ; cstack is 2 level deep from interp_loop 
                                   4375 ;------------------------
      001908                       4376 return:
      001908 72 00 00 1F 05   [ 2] 4377 	btjt flags,#FRUN,0$ 
      00190D A6 06            [ 1] 4378 	ld a,#ERR_RUN_ONLY
      00190F CC 07 01         [ 2] 4379 	jp tb_error 
      001912                       4380 0$:	
      001912 1E 03            [ 2] 4381 	ldw x,(GOS_RET,sp) 
      001914 CF 00 04         [ 2] 4382 	ldw basicptr,x 
      001917 E6 02            [ 1] 4383 	ld a,(2,x)
      001919 AB 03            [ 1] 4384 	add a,#3 
      00191B C7 00 03         [ 1] 4385 	ld count,a 
      00191E 35 03 00 01      [ 1] 4386 	mov in,#3
      001922 4F               [ 1] 4387 	clr a 
      001923 85               [ 2] 4388 	popw x 
      001924                       4389 	_drop 2
      001924 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001926 89               [ 2] 4390 	pushw x
      001927 81               [ 4] 4391 	ret  
                                   4392 
                                   4393 
                                   4394 ;----------------------------------
                                   4395 ; BASIC: RUN
                                   4396 ; run BASIC program in RAM
                                   4397 ;----------------------------------- 
      001928                       4398 run: 
      001928 72 01 00 1F 02   [ 2] 4399 	btjf flags,#FRUN,0$  
      00192D 4F               [ 1] 4400 	clr a 
      00192E 81               [ 4] 4401 	ret
      00192F                       4402 0$: 
      00192F 72 09 00 1F 12   [ 2] 4403 	btjf flags,#FBREAK,1$
      001934                       4404 	_drop 2 
      001934 5B 02            [ 2]    1     addw sp,#2 
      001936 CD 16 6E         [ 4] 4405 	call rest_context
      001939                       4406 	_drop CTXT_SIZE 
      001939 5B 06            [ 2]    1     addw sp,#CTXT_SIZE 
      00193B 72 19 00 1F      [ 1] 4407 	bres flags,#FBREAK 
      00193F 72 10 00 1F      [ 1] 4408 	bset flags,#FRUN 
      001943 CC 07 AF         [ 2] 4409 	jp interp_loop 
      001946 CE 00 18         [ 2] 4410 1$:	ldw x,txtbgn
      001949 C3 00 1A         [ 2] 4411 	cpw x,txtend 
      00194C 2B 02            [ 1] 4412 	jrmi 2$ 
      00194E 4F               [ 1] 4413 	clr a 
      00194F 81               [ 4] 4414 	ret 
      001950 CD 13 5F         [ 4] 4415 2$: call ubound 
      001953                       4416 	_drop 2 
      001953 5B 02            [ 2]    1     addw sp,#2 
      001955 CE 00 18         [ 2] 4417 	ldw x,txtbgn 
      001958 CF 00 04         [ 2] 4418 	ldw basicptr,x 
      00195B E6 02            [ 1] 4419 	ld a,(2,x)
      00195D C7 00 03         [ 1] 4420 	ld count,a
      001960 35 03 00 01      [ 1] 4421 	mov in,#3	
      001964 72 10 00 1F      [ 1] 4422 	bset flags,#FRUN 
      001968 CC 07 AF         [ 2] 4423 	jp interp_loop 
                                   4424 
                                   4425 
                                   4426 ;----------------------
                                   4427 ; BASIC: STOP 
                                   4428 ; stop running program
                                   4429 ;---------------------- 
      00196B                       4430 stop: 
                                   4431 ; clean dstack and cstack 
      00196B AE 17 FF         [ 2] 4432 	ldw x,#STACK_EMPTY 
      00196E 94               [ 1] 4433 	ldw sp,x 
      00196F 72 11 00 1F      [ 1] 4434 	bres flags,#FRUN 
      001973 72 19 00 1F      [ 1] 4435 	bres flags,#FBREAK
      001977 CC 07 53         [ 2] 4436 	jp warm_start
                                   4437 
                                   4438 ;-----------------------
                                   4439 ; BASIC BEEP expr1,expr2
                                   4440 ; used MCU internal beeper 
                                   4441 ; to produce a sound
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4442 ; arguments:
                                   4443 ;    expr1   frequency  (expr1%32)
                                   4444 ;    expr2   duration msec.
                                   4445 ;---------------------------
      00197A                       4446 beep:
      00197A CD 11 9E         [ 4] 4447 	call arg_list 
      00197D A1 02            [ 1] 4448 	cp a,#2 
      00197F 27 03            [ 1] 4449 	jreq 1$
      001981 CC 06 FF         [ 2] 4450 	jp syntax_error 
      001984                       4451 1$: 
      001984 CE 00 16         [ 2] 4452 	ldw x,dstkptr 
      001987 EE 02            [ 2] 4453 	ldw x,(2,x);frequency 
      001989 A6 1F            [ 1] 4454 	ld a,#31
      00198B 62               [ 2] 4455 	div x,a 
      00198C C7 50 F3         [ 1] 4456 	ld BEEP_CSR,a	
      00198F 72 1A 50 F3      [ 1] 4457 	bset BEEP_CSR,#5 
      001993 CD 0F 7E         [ 4] 4458 	call dpop 
      001996 CD 1E 19         [ 4] 4459 	call pause02 
      001999 CD 0F A5         [ 4] 4460 	call ddrop 
      00199C A6 1F            [ 1] 4461 	ld a,#0x1f
      00199E C7 50 F3         [ 1] 4462 	ld BEEP_CSR,a 
      0019A1 81               [ 4] 4463 	ret 
                                   4464 
                                   4465 ;-------------------------------
                                   4466 ; BASIC: PWRADC 0|1 [,divisor]  
                                   4467 ; disable/enanble ADC 
                                   4468 ;-------------------------------
      0019A2                       4469 power_adc:
      0019A2 CD 11 9E         [ 4] 4470 	call arg_list 
      0019A5 A1 02            [ 1] 4471 	cp a,#2	
      0019A7 27 0D            [ 1] 4472 	jreq 1$
      0019A9 A1 01            [ 1] 4473 	cp a,#1 
      0019AB 27 03            [ 1] 4474 	jreq 0$ 
      0019AD CC 06 FF         [ 2] 4475 	jp syntax_error 
      0019B0 AE 00 00         [ 2] 4476 0$: ldw x,#0
      0019B3 CD 0F 71         [ 4] 4477 	call dpush 
      0019B6 AE 00 02         [ 2] 4478 1$: ldw x,#2
      0019B9 72 DE 00 16      [ 5] 4479 	ldw x,([dstkptr],x) ; on|off
      0019BD 5D               [ 2] 4480 	tnzw x 
      0019BE 27 1C            [ 1] 4481 	jreq 2$ 
      0019C0 72 CE 00 16      [ 5] 4482 	ldw x,[dstkptr] ; divisor 
      0019C4 9F               [ 1] 4483 	ld a,xl
      0019C5 A4 07            [ 1] 4484 	and a,#7
      0019C7 4E               [ 1] 4485 	swap a 
      0019C8 C7 54 01         [ 1] 4486 	ld ADC_CR1,a
      0019CB 72 16 54 02      [ 1] 4487 	bset ADC_CR2,#ADC_CR2_ALIGN ; right 
      0019CF 72 10 54 01      [ 1] 4488 	bset ADC_CR1,#ADC_CR1_ADON 
      0019D3                       4489 	_usec_dly 7 
      0019D3 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0019D6 5A               [ 2]    2     decw x
      0019D7 9D               [ 1]    3     nop 
      0019D8 26 FA            [ 1]    4     jrne .-4
      0019DA 20 04            [ 2] 4490 	jra 3$
      0019DC 72 11 54 01      [ 1] 4491 2$: bres ADC_CR1,#ADC_CR1_ADON 
      0019E0 AE 00 02         [ 2] 4492 3$:	ldw x,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0019E3 CD 0F E2         [ 4] 4493 	call ddrop_n 
      0019E6 81               [ 4] 4494 	ret
                                   4495 
                                   4496 ;-----------------------------
                                   4497 ; BASIC: RDADC(channel)
                                   4498 ; read adc channel 
                                   4499 ; output:
                                   4500 ;   A 		TK_INTGR 
                                   4501 ;   X 		value 
                                   4502 ;-----------------------------
      0019E7                       4503 read_adc:
      0019E7 CD 11 C2         [ 4] 4504 	call func_args 
      0019EA A1 01            [ 1] 4505 	cp a,#1 
      0019EC 27 03            [ 1] 4506 	jreq 1$
      0019EE CC 06 FF         [ 2] 4507 	jp syntax_error
      0019F1 CD 0F 7E         [ 4] 4508 1$: call dpop 
      0019F4 A3 00 10         [ 2] 4509 	cpw x,#16 
      0019F7 25 05            [ 1] 4510 	jrult 2$
      0019F9 A6 0A            [ 1] 4511 	ld a,#ERR_BAD_VALUE
      0019FB CC 07 01         [ 2] 4512 	jp tb_error 
      0019FE 9F               [ 1] 4513 2$: ld a,xl
      0019FF C7 54 00         [ 1] 4514 	ld ADC_CSR,a 
      001A02 72 10 54 01      [ 1] 4515 	bset ADC_CR1,#ADC_CR1_ADON
      001A06 72 0F 54 00 FB   [ 2] 4516 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001A0B CE 54 04         [ 2] 4517 	ldw x,ADC_DRH 
      001A0E A6 04            [ 1] 4518 	ld a,#TK_INTGR
      001A10 81               [ 4] 4519 	ret 
                                   4520 
                                   4521 
                                   4522 ;-----------------------
                                   4523 ; BASIC: BREAK 
                                   4524 ; insert a breakpoint 
                                   4525 ; in pogram. 
                                   4526 ; the program is resumed
                                   4527 ; with RUN 
                                   4528 ;-------------------------
      001A11                       4529 break:
      001A11 72 00 00 1F 02   [ 2] 4530 	btjt flags,#FRUN,2$
      001A16 4F               [ 1] 4531 	clr a
      001A17 81               [ 4] 4532 	ret 
      001A18                       4533 2$:	 
                                   4534 ; create space on cstack to save context 
      001A18 AE 1A 3F         [ 2] 4535 	ldw x,#break_point 
      001A1B CD 01 B0         [ 4] 4536 	call puts 
      001A1E                       4537 	_drop 2 ;drop return address 
      001A1E 5B 02            [ 2]    1     addw sp,#2 
      001A20                       4538 	_vars CTXT_SIZE ; context size 
      001A20 52 06            [ 2]    1     sub sp,#CTXT_SIZE 
      001A22 CD 16 5E         [ 4] 4539 	call save_context 
      001A25 AE 16 C8         [ 2] 4540 	ldw x,#tib 
      001A28 CF 00 04         [ 2] 4541 	ldw basicptr,x
      001A2B 7F               [ 1] 4542 	clr (x)
      001A2C 72 5F 00 03      [ 1] 4543 	clr count  
      001A30 5F               [ 1] 4544 	clrw x 
      001A31 CF 00 00         [ 2] 4545 	ldw in.w,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A34 72 11 00 1F      [ 1] 4546 	bres flags,#FRUN 
      001A38 72 18 00 1F      [ 1] 4547 	bset flags,#FBREAK
      001A3C CC 07 AF         [ 2] 4548 	jp interp_loop 
      001A3F 0A 62 72 65 61 6B 20  4549 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4550 
                                   4551 ;-----------------------
                                   4552 ; BASIC: NEW
                                   4553 ; from command line only 
                                   4554 ; free program memory
                                   4555 ; and clear variables 
                                   4556 ;------------------------
      001A5D                       4557 new: 
      001A5D 72 01 00 1F 02   [ 2] 4558 	btjf flags,#FRUN,0$ 
      001A62 4F               [ 1] 4559 	clr a 
      001A63 81               [ 4] 4560 	ret 
      001A64                       4561 0$:	
      001A64 CD 05 D1         [ 4] 4562 	call clear_basic 
      001A67 81               [ 4] 4563 	ret 
                                   4564 	 
                                   4565 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4566 ;   file system routines
                                   4567 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4568 
                                   4569 ;--------------------
                                   4570 ; input:
                                   4571 ;   X     increment 
                                   4572 ; output:
                                   4573 ;   farptr  incremented 
                                   4574 ;---------------------
      001A68                       4575 incr_farptr:
      001A68 72 BB 00 11      [ 2] 4576 	addw x,farptr+1 
      001A6C 24 04            [ 1] 4577 	jrnc 1$
      001A6E 72 5C 00 10      [ 1] 4578 	inc farptr 
      001A72 CF 00 11         [ 2] 4579 1$:	ldw farptr+1,x  
      001A75 81               [ 4] 4580 	ret 
                                   4581 
                                   4582 ;------------------------------
                                   4583 ; extended flash memory used as FLASH_DRIVE 
                                   4584 ; seek end of used flash drive   
                                   4585 ; starting at 0x10000 address.
                                   4586 ; 4 consecutives 0 bytes signal free space. 
                                   4587 ; input:
                                   4588 ;	none
                                   4589 ; output:
                                   4590 ;   ffree     free_addr| 0 if memory full.
                                   4591 ;------------------------------
      001A76                       4592 seek_fdrive:
                                   4593 ; start scan at 0x10000 address 
      001A76 A6 01            [ 1] 4594 	ld a,#1
      001A78 C7 00 10         [ 1] 4595 	ld farptr,a 
      001A7B 5F               [ 1] 4596 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A7C CF 00 11         [ 2] 4597 	ldw farptr+1,x 
      001A7F                       4598 1$:
      001A7F AE 00 03         [ 2] 4599 	ldw x,#3  
      001A82 92 AF 00 10      [ 5] 4600 2$:	ldf a,([farptr],x) 
      001A86 26 05            [ 1] 4601 	jrne 3$
      001A88 5A               [ 2] 4602 	decw x
      001A89 2A F7            [ 1] 4603 	jrpl 2$
      001A8B 20 19            [ 2] 4604 	jra 4$ 
      001A8D 5C               [ 1] 4605 3$:	incw x 
      001A8E CD 1A 68         [ 4] 4606 	call incr_farptr
      001A91 AE 02 7F         [ 2] 4607 	ldw x,#0x27f 
      001A94 C3 00 10         [ 2] 4608 	cpw x,farptr
      001A97 2A E6            [ 1] 4609 	jrpl 1$
                                   4610 ; drive full 
      001A99 72 5F 00 13      [ 1] 4611 	clr ffree 
      001A9D 72 5F 00 14      [ 1] 4612 	clr ffree+1 
      001AA1 72 5F 00 15      [ 1] 4613 	clr ffree+2 
      001AA5 81               [ 4] 4614 	ret
      001AA6                       4615 4$: ; copy farptr to ffree	 
      001AA6 CE 00 10         [ 2] 4616 	ldw x,farptr 
      001AA9 C6 00 12         [ 1] 4617 	ld a,farptr+2 
      001AAC CF 00 13         [ 2] 4618 	ldw ffree,x 
      001AAF C7 00 15         [ 1] 4619 	ld ffree+2,a  
      001AB2 81               [ 4] 4620 	ret 
                                   4621 
                                   4622 ;-----------------------
                                   4623 ; compare file name 
                                   4624 ; with name pointed by Y  
                                   4625 ; input:
                                   4626 ;   farptr   file name 
                                   4627 ;   Y        target name 
                                   4628 ; output:
                                   4629 ;   farptr 	 at file_name
                                   4630 ;   X 		 farptr[x] point at size field  
                                   4631 ;   Carry    0|1 no match|match  
                                   4632 ;----------------------
      001AB3                       4633 cmp_name:
      001AB3 5F               [ 1] 4634 	clrw x
      001AB4 92 AF 00 10      [ 5] 4635 1$:	ldf a,([farptr],x)
      001AB8 90 F1            [ 1] 4636 	cp a,(y)
      001ABA 26 08            [ 1] 4637 	jrne 4$
      001ABC 4D               [ 1] 4638 	tnz a 
      001ABD 27 12            [ 1] 4639 	jreq 9$ 
      001ABF 5C               [ 1] 4640     incw x 
      001AC0 90 5C            [ 1] 4641 	incw y 
      001AC2 20 F0            [ 2] 4642 	jra 1$
      001AC4                       4643 4$: ;no match 
      001AC4 4D               [ 1] 4644 	tnz a 
      001AC5 27 07            [ 1] 4645 	jreq 5$
      001AC7 5C               [ 1] 4646 	incw x 
      001AC8 92 AF 00 10      [ 5] 4647 	ldf a,([farptr],x)
      001ACC 20 F6            [ 2] 4648 	jra 4$  
      001ACE 5C               [ 1] 4649 5$:	incw x ; farptr[x] point at 'size' field 
      001ACF 98               [ 1] 4650 	rcf 
      001AD0 81               [ 4] 4651 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001AD1                       4652 9$: ; match  
      001AD1 5C               [ 1] 4653 	incw x  ; farptr[x] at 'size' field 
      001AD2 99               [ 1] 4654 	scf 
      001AD3 81               [ 4] 4655 	ret 
                                   4656 
                                   4657 ;-----------------------
                                   4658 ; search file in 
                                   4659 ; flash memory 
                                   4660 ; input:
                                   4661 ;   Y       file name  
                                   4662 ; output:
                                   4663 ;   farptr  addr at name|0
                                   4664 ;-----------------------
                           000001  4665 	FSIZE=1
                           000003  4666 	YSAVE=3
                           000004  4667 	VSIZE=4 
      001AD4                       4668 search_file: 
      001AD4                       4669 	_vars VSIZE
      001AD4 52 04            [ 2]    1     sub sp,#VSIZE 
      001AD6 17 03            [ 2] 4670 	ldw (YSAVE,sp),y  
      001AD8 5F               [ 1] 4671 	clrw x 
      001AD9 CF 00 11         [ 2] 4672 	ldw farptr+1,x 
      001ADC 35 01 00 10      [ 1] 4673 	mov farptr,#1
      001AE0                       4674 1$:	
                                   4675 ; check if farptr is after any file 
                                   4676 ; if  0 then so.
      001AE0 92 BC 00 10      [ 5] 4677 	ldf a,[farptr]
      001AE4 27 25            [ 1] 4678 	jreq 6$
      001AE6 5F               [ 1] 4679 2$: clrw x 	
      001AE7 16 03            [ 2] 4680 	ldw y,(YSAVE,sp) 
      001AE9 CD 1A B3         [ 4] 4681 	call cmp_name
      001AEC 25 2D            [ 1] 4682 	jrc 9$
      001AEE 92 AF 00 10      [ 5] 4683 	ldf a,([farptr],x)
      001AF2 6B 01            [ 1] 4684 	ld (FSIZE,sp),a 
      001AF4 5C               [ 1] 4685 	incw x 
      001AF5 92 AF 00 10      [ 5] 4686 	ldf a,([farptr],x)
      001AF9 6B 02            [ 1] 4687 	ld (FSIZE+1,sp),a 
      001AFB 5C               [ 1] 4688 	incw x 
      001AFC 72 FB 01         [ 2] 4689 	addw x,(FSIZE,sp) ; count to skip 
      001AFF 5C               [ 1] 4690 	incw x ; skip over EOF marker 
      001B00 CD 1A 68         [ 4] 4691 	call incr_farptr ; now at next file 'name_field'
      001B03 AE 02 80         [ 2] 4692 	ldw x,#0x280
      001B06 C3 00 10         [ 2] 4693 	cpw x,farptr 
      001B09 2A D5            [ 1] 4694 	jrpl 1$
      001B0B                       4695 6$: ; file not found 
      001B0B 72 5F 00 10      [ 1] 4696 	clr farptr
      001B0F 72 5F 00 11      [ 1] 4697 	clr farptr+1 
      001B13 72 5F 00 12      [ 1] 4698 	clr farptr+2 
      001B17                       4699 	_drop VSIZE 
      001B17 5B 04            [ 2]    1     addw sp,#VSIZE 
      001B19 98               [ 1] 4700 	rcf
      001B1A 81               [ 4] 4701 	ret
      001B1B                       4702 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001B1B                       4703 	_drop VSIZE 
      001B1B 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B1D 99               [ 1] 4704 	scf 	
      001B1E 81               [ 4] 4705 	ret
                                   4706 
                                   4707 ;--------------------------------
                                   4708 ; BASIC: SAVE "name" 
                                   4709 ; save text program in 
                                   4710 ; flash memory used as 
                                   4711 ;--------------------------------
                           000001  4712 	BSIZE=1
                           000003  4713 	NAMEPTR=3
                           000004  4714 	VSIZE=4
      001B1F                       4715 save:
      001B1F 72 01 00 1F 05   [ 2] 4716 	btjf flags,#FRUN,0$ 
      001B24 A6 07            [ 1] 4717 	ld a,#ERR_CMD_ONLY 
      001B26 CC 07 01         [ 2] 4718 	jp tb_error
      001B29                       4719 0$:	 
      001B29 CE 00 1A         [ 2] 4720 	ldw x,txtend 
      001B2C 72 B0 00 18      [ 2] 4721 	subw x,txtbgn
      001B30 26 01            [ 1] 4722 	jrne 1$
                                   4723 ; nothing to save 
      001B32 81               [ 4] 4724 	ret 
      001B33                       4725 1$:	
      001B33                       4726 	_vars VSIZE 
      001B33 52 04            [ 2]    1     sub sp,#VSIZE 
      001B35 1F 01            [ 2] 4727 	ldw (BSIZE,sp),x 
      001B37 CD 07 DF         [ 4] 4728 	call next_token	
      001B3A A1 0A            [ 1] 4729 	cp a,#TK_QSTR
      001B3C 27 03            [ 1] 4730 	jreq 2$
      001B3E CC 06 FF         [ 2] 4731 	jp syntax_error
      001B41                       4732 2$: 
      001B41 90 CE 00 04      [ 2] 4733 	ldw y,basicptr 
      001B45 72 B9 00 00      [ 2] 4734 	addw y,in.w
      001B49 17 03            [ 2] 4735 	ldw (NAMEPTR,sp),y  
      001B4B 55 00 03 00 01   [ 1] 4736 	mov in,count 
                                   4737 ; check if enough free space 
      001B50 93               [ 1] 4738 	ldw x,y 
      001B51 CD 02 72         [ 4] 4739 	call strlen 
      001B54 1C 00 03         [ 2] 4740 	addw x,#3 
      001B57 72 FB 01         [ 2] 4741 	addw x,(BSIZE,sp)
      001B5A 72 5D 00 13      [ 1] 4742 	tnz ffree 
      001B5E 26 0B            [ 1] 4743 	jrne 21$
      001B60 72 B0 00 14      [ 2] 4744 	subw x,ffree+1 
      001B64 23 05            [ 2] 4745 	jrule 21$
      001B66 A6 01            [ 1] 4746 	ld a,#ERR_MEM_FULL 
      001B68 CC 07 01         [ 2] 4747 	jp tb_error
      001B6B                       4748 21$: 
                                   4749 ; check for existing file of that name 
      001B6B 16 03            [ 2] 4750 	ldw y,(NAMEPTR,sp)	
      001B6D CD 1A D4         [ 4] 4751 	call search_file 
      001B70 24 05            [ 1] 4752 	jrnc 3$ 
      001B72 A6 08            [ 1] 4753 	ld a,#ERR_DUPLICATE 
      001B74 CC 07 01         [ 2] 4754 	jp tb_error 
      001B77                       4755 3$:	;** write file name to flash **
      001B77 CE 00 13         [ 2] 4756 	ldw x,ffree 
      001B7A C6 00 15         [ 1] 4757 	ld a,ffree+2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001B7D CF 00 10         [ 2] 4758 	ldw farptr,x 
      001B80 C7 00 12         [ 1] 4759 	ld farptr+2,a 
      001B83 1E 03            [ 2] 4760 	ldw x,(NAMEPTR,sp)  
      001B85 CD 02 72         [ 4] 4761 	call strlen 
      001B88 5C               [ 1] 4762 	incw  x
      001B89 1F 01            [ 2] 4763 	ldw (BSIZE,sp),x  
      001B8B 5F               [ 1] 4764 	clrw x   
      001B8C 16 03            [ 2] 4765 	ldw y,(NAMEPTR,sp)
      001B8E CD 01 51         [ 4] 4766 	call write_block  
                                   4767 ;** write file length after name **
      001B91 CE 00 1A         [ 2] 4768 	ldw x,txtend 
      001B94 72 B0 00 18      [ 2] 4769 	subw x,txtbgn
      001B98 1F 01            [ 2] 4770 	ldw (BSIZE,sp),x 
      001B9A 5F               [ 1] 4771 	clrw x 
      001B9B 7B 01            [ 1] 4772 	ld a,(1,sp)
      001B9D CD 00 DC         [ 4] 4773 	call write_byte 
      001BA0 5C               [ 1] 4774 	incw x 
      001BA1 7B 02            [ 1] 4775 	ld a,(2,sp)
      001BA3 CD 00 DC         [ 4] 4776 	call write_byte
      001BA6 5C               [ 1] 4777 	incw x  
      001BA7 CD 1A 68         [ 4] 4778 	call incr_farptr ; move farptr after SIZE field 
                                   4779 ;** write BASIC text **
                                   4780 ; copy BSIZE, cstack:{... bsize -- ... bsize bsize }	
      001BAA 1E 01            [ 2] 4781 	ldw x,(BSIZE,sp)
      001BAC 89               [ 2] 4782 	pushw x ; write_block argument 
      001BAD 5F               [ 1] 4783 	clrw x 
      001BAE 90 CE 00 18      [ 2] 4784 	ldw y,txtbgn  ; BASIC text to save 
      001BB2 CD 01 51         [ 4] 4785 	call write_block 
      001BB5                       4786 	_drop 2 ;  drop write_block argument  
      001BB5 5B 02            [ 2]    1     addw sp,#2 
                                   4787 ; write en end of file marker 
      001BB7 AE 00 01         [ 2] 4788 	ldw x,#1
      001BBA A6 FF            [ 1] 4789 	ld a,#EOF  
      001BBC CD 00 DC         [ 4] 4790 	call write_byte 
      001BBF CD 1A 68         [ 4] 4791 	call incr_farptr
                                   4792 ; save farptr in ffree
      001BC2 CE 00 10         [ 2] 4793 	ldw x,farptr 
      001BC5 C6 00 12         [ 1] 4794 	ld a,farptr+2 
      001BC8 CF 00 13         [ 2] 4795 	ldw ffree,x 
      001BCB C7 00 15         [ 1] 4796 	ld ffree+2,a
                                   4797 ;write 4 zero bytes as an end of all files marker 
      001BCE 5F               [ 1] 4798     clrw x 
      001BCF 4B 04            [ 1] 4799 	push #4 
      001BD1                       4800 4$:
      001BD1 4F               [ 1] 4801 	clr a 
      001BD2 CD 00 DC         [ 4] 4802 	call write_byte 
      001BD5 5C               [ 1] 4803 	incw x 
      001BD6 0A 01            [ 1] 4804 	dec (1,sp)
      001BD8 26 F7            [ 1] 4805 	jrne 4$
      001BDA 84               [ 1] 4806 5$: pop a 
                                   4807 ; display saved size  
      001BDB 1E 01            [ 2] 4808 	ldw x,(BSIZE,sp) 
      001BDD CD 09 78         [ 4] 4809 	call print_int 
      001BE0                       4810 	_drop VSIZE 
      001BE0 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001BE2 81               [ 4] 4811 	ret 
                                   4812 
                                   4813 
                                   4814 ;------------------------
                                   4815 ; BASIC: LOAD "file" 
                                   4816 ; load file to RAM 
                                   4817 ; for execution 
                                   4818 ;------------------------
      001BE3                       4819 load:
      001BE3 72 01 00 1F 07   [ 2] 4820 	btjf flags,#FRUN,0$ 
      001BE8 27 05            [ 1] 4821 	jreq 0$ 
      001BEA A6 07            [ 1] 4822 	ld a,#ERR_CMD_ONLY 
      001BEC CC 07 01         [ 2] 4823 	jp tb_error 
      001BEF                       4824 0$:	
      001BEF CD 07 DF         [ 4] 4825 	call next_token 
      001BF2 A1 0A            [ 1] 4826 	cp a,#TK_QSTR
      001BF4 27 03            [ 1] 4827 	jreq 1$
      001BF6 CC 06 FF         [ 2] 4828 	jp syntax_error 
      001BF9                       4829 1$:	
      001BF9 90 CE 00 04      [ 2] 4830 	ldw y,basicptr
      001BFD 72 B9 00 00      [ 2] 4831 	addw y,in.w 
      001C01 55 00 03 00 01   [ 1] 4832 	mov in,count 
      001C06 CD 1A D4         [ 4] 4833 	call search_file 
      001C09 25 05            [ 1] 4834 	jrc 2$ 
      001C0B A6 09            [ 1] 4835 	ld a,#ERR_NOT_FILE
      001C0D CC 07 01         [ 2] 4836 	jp tb_error  
      001C10                       4837 2$:	
      001C10 CD 1A 68         [ 4] 4838 	call incr_farptr  
      001C13 CD 05 D1         [ 4] 4839 	call clear_basic  
      001C16 5F               [ 1] 4840 	clrw x
      001C17 92 AF 00 10      [ 5] 4841 	ldf a,([farptr],x)
      001C1B 90 95            [ 1] 4842 	ld yh,a 
      001C1D 5C               [ 1] 4843 	incw x  
      001C1E 92 AF 00 10      [ 5] 4844 	ldf a,([farptr],x)
      001C22 5C               [ 1] 4845 	incw x 
      001C23 90 97            [ 1] 4846 	ld yl,a 
      001C25 72 B9 00 18      [ 2] 4847 	addw y,txtbgn
      001C29 90 CF 00 1A      [ 2] 4848 	ldw txtend,y
      001C2D 90 CE 00 18      [ 2] 4849 	ldw y,txtbgn
      001C31                       4850 3$:	; load BASIC text 	
      001C31 92 AF 00 10      [ 5] 4851 	ldf a,([farptr],x)
      001C35 90 F7            [ 1] 4852 	ld (y),a 
      001C37 5C               [ 1] 4853 	incw x 
      001C38 90 5C            [ 1] 4854 	incw y 
      001C3A 90 C3 00 1A      [ 2] 4855 	cpw y,txtend 
      001C3E 2B F1            [ 1] 4856 	jrmi 3$
                                   4857 ; print loaded size 	 
      001C40 CE 00 1A         [ 2] 4858 	ldw x,txtend 
      001C43 72 B0 00 18      [ 2] 4859 	subw x,txtbgn
      001C47 CD 09 78         [ 4] 4860 	call print_int 
      001C4A 81               [ 4] 4861 	ret 
                                   4862 
                                   4863 ;-----------------------------------
                                   4864 ; BASIC: FORGET ["file_name"] 
                                   4865 ; erase file_name and all others 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                   4866 ; after it. 
                                   4867 ; without argument erase all files 
                                   4868 ;-----------------------------------
      001C4B                       4869 forget:
      001C4B CD 07 DF         [ 4] 4870 	call next_token 
      001C4E A1 00            [ 1] 4871 	cp a,#TK_NONE 
      001C50 27 26            [ 1] 4872 	jreq 3$ 
      001C52 A1 0A            [ 1] 4873 	cp a,#TK_QSTR
      001C54 27 03            [ 1] 4874 	jreq 1$
      001C56 CC 06 FF         [ 2] 4875 	jp syntax_error
      001C59 90 CE 00 04      [ 2] 4876 1$: ldw y,basicptr
      001C5D 72 B9 00 00      [ 2] 4877 	addw y,in.w
      001C61 55 00 03 00 01   [ 1] 4878 	mov in,count 
      001C66 CD 1A D4         [ 4] 4879 	call search_file
      001C69 25 05            [ 1] 4880 	jrc 2$
      001C6B A6 09            [ 1] 4881 	ld a,#ERR_NOT_FILE 
      001C6D CC 07 01         [ 2] 4882 	jp tb_error 
      001C70                       4883 2$: 
      001C70 CE 00 10         [ 2] 4884 	ldw x,farptr
      001C73 C6 00 12         [ 1] 4885 	ld a,farptr+2
      001C76 20 0A            [ 2] 4886 	jra 4$ 
      001C78                       4887 3$: ; forget all files 
      001C78 AE 01 00         [ 2] 4888 	ldw x,#0x100
      001C7B 4F               [ 1] 4889 	clr a 
      001C7C CF 00 10         [ 2] 4890 	ldw farptr,x 
      001C7F C7 00 12         [ 1] 4891 	ld farptr+2,a 
      001C82                       4892 4$:
      001C82 CF 00 13         [ 2] 4893 	ldw ffree,x 
      001C85 C7 00 15         [ 1] 4894 	ld ffree+2,a 
      001C88 4B 04            [ 1] 4895 	push #4
      001C8A 5F               [ 1] 4896 	clrw x 
      001C8B                       4897 5$: 
      001C8B 4F               [ 1] 4898 	clr a  
      001C8C CD 00 DC         [ 4] 4899 	call write_byte 
      001C8F 5C               [ 1] 4900 	incw x 
      001C90 0A 01            [ 1] 4901 	dec (1,sp)
      001C92 26 F7            [ 1] 4902 	jrne 5$	
      001C94 84               [ 1] 4903 6$: pop a 
      001C95 81               [ 4] 4904 	ret 
                                   4905 
                                   4906 ;----------------------
                                   4907 ; BASIC: DIR 
                                   4908 ; list saved files 
                                   4909 ;----------------------
                           000001  4910 	COUNT=1 ; files counter 
                           000002  4911 	VSIZE=2 
      001C96                       4912 directory:
      001C96                       4913 	_vars VSIZE 
      001C96 52 02            [ 2]    1     sub sp,#VSIZE 
      001C98 5F               [ 1] 4914 	clrw x 
      001C99 1F 01            [ 2] 4915 	ldw (COUNT,sp),x 
      001C9B CF 00 11         [ 2] 4916 	ldw farptr+1,x 
      001C9E 35 01 00 10      [ 1] 4917 	mov farptr,#1 
      001CA2                       4918 dir_loop:
      001CA2 5F               [ 1] 4919 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001CA3 92 AF 00 10      [ 5] 4920 	ldf a,([farptr],x)
      001CA7 27 39            [ 1] 4921 	jreq 8$ 
      001CA9                       4922 1$: ;name loop 	
      001CA9 92 AF 00 10      [ 5] 4923 	ldf a,([farptr],x)
      001CAD 27 06            [ 1] 4924 	jreq 2$ 
      001CAF CD 01 9E         [ 4] 4925 	call putc 
      001CB2 5C               [ 1] 4926 	incw x 
      001CB3 20 F4            [ 2] 4927 	jra 1$
      001CB5 5C               [ 1] 4928 2$: incw x ; skip ending 0. 
      001CB6 A6 20            [ 1] 4929 	ld a,#SPACE 
      001CB8 CD 01 9E         [ 4] 4930 	call putc 
                                   4931 ; get file size 	
      001CBB 92 AF 00 10      [ 5] 4932 	ldf a,([farptr],x)
      001CBF 90 95            [ 1] 4933 	ld yh,a 
      001CC1 5C               [ 1] 4934 	incw x 
      001CC2 92 AF 00 10      [ 5] 4935 	ldf a,([farptr],x)
      001CC6 5C               [ 1] 4936 	incw x 
      001CC7 90 97            [ 1] 4937 	ld yl,a 
      001CC9 90 89            [ 2] 4938 	pushw y 
      001CCB 72 FB 01         [ 2] 4939 	addw x,(1,sp)
      001CCE 5C               [ 1] 4940 	incw x ; skip EOF marker 
                                   4941 ; skip to next file 
      001CCF CD 1A 68         [ 4] 4942 	call incr_farptr 
                                   4943 ; print file size 
      001CD2 85               [ 2] 4944 	popw x ; file size 
      001CD3 CD 09 78         [ 4] 4945 	call print_int 
      001CD6 A6 0D            [ 1] 4946 	ld a,#CR 
      001CD8 CD 01 9E         [ 4] 4947 	call putc
      001CDB 1E 01            [ 2] 4948 	ldw x,(COUNT,sp)
      001CDD 5C               [ 1] 4949 	incw x
      001CDE 1F 01            [ 2] 4950 	ldw (COUNT,sp),x  
      001CE0 20 C0            [ 2] 4951 	jra dir_loop 
      001CE2                       4952 8$: ; print number of files 
      001CE2 1E 01            [ 2] 4953 	ldw x,(COUNT,sp)
      001CE4 CD 09 78         [ 4] 4954 	call print_int 
      001CE7 AE 1D 17         [ 2] 4955 	ldw x,#file_count 
      001CEA CD 01 B0         [ 4] 4956 	call puts  
                                   4957 ; print drive free space 	
      001CED A6 FF            [ 1] 4958 	ld a,#0xff 
      001CEF C0 00 15         [ 1] 4959 	sub a,ffree+2 
      001CF2 C7 00 09         [ 1] 4960 	ld acc8,a 
      001CF5 A6 7F            [ 1] 4961 	ld a,#0x7f 
      001CF7 C2 00 14         [ 1] 4962 	sbc a,ffree+1 
      001CFA C7 00 08         [ 1] 4963 	ld acc16,a 
      001CFD A6 02            [ 1] 4964 	ld a,#2 
      001CFF C2 00 13         [ 1] 4965 	sbc a,ffree 
      001D02 C7 00 07         [ 1] 4966 	ld acc24,a 
      001D05 5F               [ 1] 4967 	clrw x  
      001D06 A6 06            [ 1] 4968 	ld a,#6 
      001D08 97               [ 1] 4969 	ld xl,a 
      001D09 A6 0A            [ 1] 4970 	ld a,#10 
      001D0B CD 09 30         [ 4] 4971 	call prti24 
      001D0E AE 1D 1F         [ 2] 4972 	ldw x,#drive_free
      001D11 CD 01 B0         [ 4] 4973 	call puts 
      001D14                       4974 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D14 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D16 81               [ 4] 4975 	ret
      001D17 20 66 69 6C 65 73 0A  4976 file_count: .asciz " files\n"
             00
      001D1F 20 62 79 74 65 73 20  4977 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4978 
                                   4979 ;---------------------
                                   4980 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4981 ; write 1 or more byte to FLASH or EEPROM
                                   4982 ; starting at address  
                                   4983 ; input:
                                   4984 ;   expr1  	is address 
                                   4985 ;   expr2   is byte to write
                                   4986 ; output:
                                   4987 ;   none 
                                   4988 ;---------------------
                           000001  4989 	ADDR=1
                           000002  4990 	VSIZ=2 
      001D2C                       4991 write:
      001D2C                       4992 	_vars VSIZE 
      001D2C 52 02            [ 2]    1     sub sp,#VSIZE 
      001D2E 72 5F 00 10      [ 1] 4993 	clr farptr ; expect 16 bits address 
      001D32 CD 12 A0         [ 4] 4994 	call expression
      001D35 A1 04            [ 1] 4995 	cp a,#TK_INTGR 
      001D37 27 03            [ 1] 4996 	jreq 0$
      001D39 CC 06 FF         [ 2] 4997 	jp syntax_error
      001D3C 1F 01            [ 2] 4998 0$: ldw (ADDR,sp),x 
      001D3E CD 07 DF         [ 4] 4999 	call next_token 
      001D41 A1 0D            [ 1] 5000 	cp a,#TK_COMMA 
      001D43 27 02            [ 1] 5001 	jreq 1$ 
      001D45 20 19            [ 2] 5002 	jra 9$ 
      001D47 CD 12 A0         [ 4] 5003 1$:	call expression
      001D4A A1 04            [ 1] 5004 	cp a,#TK_INTGR
      001D4C 27 03            [ 1] 5005 	jreq 2$
      001D4E CC 06 FF         [ 2] 5006 	jp syntax_error
      001D51 9F               [ 1] 5007 2$:	ld a,xl 
      001D52 1E 01            [ 2] 5008 	ldw x,(ADDR,sp) 
      001D54 CF 00 11         [ 2] 5009 	ldw farptr+1,x 
      001D57 5F               [ 1] 5010 	clrw x 
      001D58 CD 00 DC         [ 4] 5011 	call write_byte
      001D5B 1E 01            [ 2] 5012 	ldw x,(ADDR,sp)
      001D5D 5C               [ 1] 5013 	incw x 
      001D5E 20 DC            [ 2] 5014 	jra 0$ 
      001D60                       5015 9$:
      001D60                       5016 	_drop VSIZE
      001D60 5B 02            [ 2]    1     addw sp,#VSIZE 
      001D62 81               [ 4] 5017 	ret 
                                   5018 
                                   5019 
                                   5020 ;---------------------
                                   5021 ;BASIC: CHAR(expr)
                                   5022 ; évaluate expression 
                                   5023 ; and take the 7 least 
                                   5024 ; bits as ASCII character
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   5025 ;---------------------
      001D63                       5026 char:
      001D63 CD 11 C2         [ 4] 5027 	call func_args 
      001D66 A1 01            [ 1] 5028 	cp a,#1
      001D68 27 03            [ 1] 5029 	jreq 1$
      001D6A CC 06 FF         [ 2] 5030 	jp syntax_error
      001D6D CD 0F 7E         [ 4] 5031 1$:	call dpop 
      001D70 9F               [ 1] 5032 	ld a,xl 
      001D71 A4 7F            [ 1] 5033 	and a,#0x7f 
      001D73 97               [ 1] 5034 	ld xl,a
      001D74 A6 03            [ 1] 5035 	ld a,#TK_CHAR
      001D76 81               [ 4] 5036 	ret
                                   5037 
                                   5038 ;---------------------
                                   5039 ; BASIC: ASC(string|char)
                                   5040 ; extract first character 
                                   5041 ; of string argument 
                                   5042 ; return it as TK_INTGR 
                                   5043 ;---------------------
      001D77                       5044 ascii:
      001D77 CD 11 C2         [ 4] 5045 	call func_args 
      001D7A CD 07 DF         [ 4] 5046 	call next_token 
      001D7D A1 0A            [ 1] 5047 	cp a,#TK_QSTR 
      001D7F 27 07            [ 1] 5048 	jreq 1$
      001D81 A1 03            [ 1] 5049 	cp a,#TK_CHAR 
      001D83 27 06            [ 1] 5050 	jreq 2$ 
      001D85 CC 06 FF         [ 2] 5051 	jp syntax_error
      001D88                       5052 1$: 
      001D88 F6               [ 1] 5053 	ld a,(x)
      001D89 20 01            [ 2] 5054 	jra 3$
      001D8B                       5055 2$: 
      001D8B 9F               [ 1] 5056 	ld a,xl 
      001D8C 97               [ 1] 5057 3$:	ld xl,a 
      001D8D 4F               [ 1] 5058 	clr a  
      001D8E 95               [ 1] 5059 	ld xh,a 
      001D8F A6 04            [ 1] 5060 	ld a,#TK_INTGR 
      001D91 81               [ 4] 5061 	ret 
                                   5062 
                                   5063 ;---------------------
                                   5064 ;BASIC: KEY
                                   5065 ; wait for a character 
                                   5066 ; received from STDIN 
                                   5067 ; input:
                                   5068 ;	none 
                                   5069 ; output:
                                   5070 ;	X 		ASCII character 
                                   5071 ;---------------------
      001D92                       5072 key:
      001D92 CD 01 A7         [ 4] 5073 	call getc 
      001D95 5F               [ 1] 5074 	clrw x 
      001D96 97               [ 1] 5075 	ld xl,a 
      001D97 A6 04            [ 1] 5076 	ld a,#TK_INTGR
      001D99 81               [ 4] 5077 	ret
                                   5078 
                                   5079 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5080 ; BASIC: QKEY
                                   5081 ; Return true if there 
                                   5082 ; is a character in 
                                   5083 ; waiting in STDIN 
                                   5084 ; input:
                                   5085 ;  none 
                                   5086 ; output:
                                   5087 ;   X 		0|1 
                                   5088 ;-----------------------
      001D9A                       5089 qkey: 
      001D9A 5F               [ 1] 5090 	clrw x 
      001D9B 72 0B 52 40 01   [ 2] 5091 	btjf UART3_SR,#UART_SR_RXNE,9$ 
      001DA0 5C               [ 1] 5092 	incw x 
      001DA1 A6 04            [ 1] 5093 9$: ld a,#TK_INTGR
      001DA3 81               [ 4] 5094 	ret 
                                   5095 
                                   5096 ;---------------------
                                   5097 ; BASIC: GPIO(expr,reg)
                                   5098 ; return gpio address 
                                   5099 ; expr {0..8}
                                   5100 ; input:
                                   5101 ;   none 
                                   5102 ; output:
                                   5103 ;   X 		gpio register address
                                   5104 ;----------------------------
      001DA4                       5105 gpio:
      001DA4 CD 11 C2         [ 4] 5106 	call func_args 
      001DA7 A1 02            [ 1] 5107 	cp a,#2
      001DA9 27 03            [ 1] 5108 	jreq 1$
      001DAB CC 06 FF         [ 2] 5109 	jp syntax_error  
      001DAE                       5110 1$:	
      001DAE AE 00 02         [ 2] 5111 	ldw x,#2
      001DB1 72 DE 00 16      [ 5] 5112 	ldw x,([dstkptr],x) ; port 
      001DB5 2B 1B            [ 1] 5113 	jrmi bad_port
      001DB7 A3 00 09         [ 2] 5114 	cpw x,#9
      001DBA 2A 16            [ 1] 5115 	jrpl bad_port
      001DBC A6 05            [ 1] 5116 	ld a,#5
      001DBE 42               [ 4] 5117 	mul x,a
      001DBF 1C 50 00         [ 2] 5118 	addw x,#GPIO_BASE 
      001DC2 89               [ 2] 5119 	pushw x 
      001DC3 CD 0F 7E         [ 4] 5120 	call dpop 
      001DC6 72 FB 01         [ 2] 5121 	addw x,(1,sp)
      001DC9 1F 01            [ 2] 5122 	ldw (1,sp),x  
      001DCB CD 0F A5         [ 4] 5123 	call ddrop  
      001DCE 85               [ 2] 5124 	popw x 
      001DCF A6 04            [ 1] 5125 	ld a,#TK_INTGR
      001DD1 81               [ 4] 5126 	ret
      001DD2                       5127 bad_port:
      001DD2 A6 0A            [ 1] 5128 	ld a,#ERR_BAD_VALUE
      001DD4 CC 07 01         [ 2] 5129 	jp tb_error
                                   5130 
                                   5131 
                                   5132 ;-------------------------
                                   5133 ; BASIC: UFLASH 
                                   5134 ; return user flash address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   5135 ; input:
                                   5136 ;  none 
                                   5137 ; output:
                                   5138 ;	A		TK_INTGR
                                   5139 ;   X 		user address 
                                   5140 ;---------------------------
      001DD7                       5141 uflash:
      001DD7 AE 21 80         [ 2] 5142 	ldw x,#user_space 
      001DDA A6 04            [ 1] 5143 	ld a,#TK_INTGR 
      001DDC 81               [ 4] 5144 	ret 
                                   5145 
                                   5146 
                                   5147 ;---------------------
                                   5148 ; BASIC: USR(addr[,arg])
                                   5149 ; execute a function written 
                                   5150 ; in binary code.
                                   5151 ; binary fonction should 
                                   5152 ; return token attribute in A 
                                   5153 ; and value in X. 
                                   5154 ; input:
                                   5155 ;   addr	routine address 
                                   5156 ;   arg 	is an optional argument 
                                   5157 ; output:
                                   5158 ;   A 		token attribute 
                                   5159 ;   X       returned value 
                                   5160 ;---------------------
      001DDD                       5161 usr:
      001DDD 90 89            [ 2] 5162 	pushw y 	
      001DDF CD 11 C2         [ 4] 5163 	call func_args 
      001DE2 A1 01            [ 1] 5164 	cp a,#1 
      001DE4 2A 03            [ 1] 5165 	jrpl 2$ 
      001DE6 CC 06 FF         [ 2] 5166 	jp syntax_error 
      001DE9                       5167 2$: 
      001DE9 CD 0F 7E         [ 4] 5168 	call dpop 
      001DEC A1 02            [ 1] 5169 	cp a,#2 
      001DEE 2B 05            [ 1] 5170 	jrmi 4$
      001DF0 90 93            [ 1] 5171 	ldw y,x ; y=arg 
      001DF2 CD 0F 7E         [ 4] 5172 	call dpop ;x=addr 
      001DF5 51               [ 1] 5173 4$:	exgw y,x ; y=addr,x=arg 
      001DF6 90 FD            [ 4] 5174 	call (y)
      001DF8 90 85            [ 2] 5175 	popw y 
      001DFA 81               [ 4] 5176 	ret 
                                   5177 
                                   5178 ;------------------------------
                                   5179 ; BASIC: BYE 
                                   5180 ; halt mcu in its lowest power mode 
                                   5181 ; wait for reset or external interrupt
                                   5182 ; do a cold start on wakeup.
                                   5183 ;------------------------------
      001DFB                       5184 bye:
      001DFB 72 0D 52 40 FB   [ 2] 5185 	btjf UART3_SR,#UART_SR_TC,.
      001E00 8E               [10] 5186 	halt
      001E01 CC 05 4C         [ 2] 5187 	jp cold_start  
                                   5188 
                                   5189 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   5190 ; BASIC: SLEEP 
                                   5191 ; halt mcu until reset or external
                                   5192 ; interrupt.
                                   5193 ; Resume progam after SLEEP command
                                   5194 ;----------------------------------
      001E04                       5195 sleep:
      001E04 72 0D 52 40 FB   [ 2] 5196 	btjf UART3_SR,#UART_SR_TC,.
      001E09 72 16 00 1F      [ 1] 5197 	bset flags,#FSLEEP
      001E0D 8E               [10] 5198 	halt 
      001E0E 81               [ 4] 5199 	ret 
                                   5200 
                                   5201 ;-------------------------------
                                   5202 ; BASIC: PAUSE expr 
                                   5203 ; suspend execution for n msec.
                                   5204 ; input:
                                   5205 ;	none
                                   5206 ; output:
                                   5207 ;	none 
                                   5208 ;------------------------------
      001E0F                       5209 pause:
      001E0F CD 12 A0         [ 4] 5210 	call expression
      001E12 A1 04            [ 1] 5211 	cp a,#TK_INTGR
      001E14 27 03            [ 1] 5212 	jreq pause02 
      001E16 CC 06 FF         [ 2] 5213 	jp syntax_error
      001E19                       5214 pause02: 
      001E19 5D               [ 2] 5215 1$: tnzw x 
      001E1A 27 04            [ 1] 5216 	jreq 2$
      001E1C 8F               [10] 5217 	wfi 
      001E1D 5A               [ 2] 5218 	decw x 
      001E1E 26 F9            [ 1] 5219 	jrne 1$
      001E20 4F               [ 1] 5220 2$:	clr a 
      001E21 81               [ 4] 5221 	ret 
                                   5222 
                                   5223 ;------------------------------
                                   5224 ; BASIC: TICKS
                                   5225 ; return msec ticks counter value 
                                   5226 ; input:
                                   5227 ; 	none 
                                   5228 ; output:
                                   5229 ;	X 		TK_INTGR
                                   5230 ;-------------------------------
      001E22                       5231 get_ticks:
      001E22 CE 00 0A         [ 2] 5232 	ldw x,ticks 
      001E25 A6 04            [ 1] 5233 	ld a,#TK_INTGR
      001E27 81               [ 4] 5234 	ret 
                                   5235 
                                   5236 
                                   5237 
                                   5238 ;------------------------------
                                   5239 ; BASIC: ABS(expr)
                                   5240 ; return absolute value of expr.
                                   5241 ; input:
                                   5242 ;   none
                                   5243 ; output:
                                   5244 ;   X     	positive integer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   5245 ;-------------------------------
      001E28                       5246 abs:
      001E28 CD 11 C2         [ 4] 5247 	call func_args 
      001E2B A1 01            [ 1] 5248 	cp a,#1 
      001E2D 27 03            [ 1] 5249 	jreq 0$ 
      001E2F CC 06 FF         [ 2] 5250 	jp syntax_error
      001E32                       5251 0$:  
      001E32 CD 0F 7E         [ 4] 5252     call dpop   
      001E35 9E               [ 1] 5253 	ld a,xh 
      001E36 A5 80            [ 1] 5254 	bcp a,#0x80 
      001E38 27 01            [ 1] 5255 	jreq 2$ 
      001E3A 50               [ 2] 5256 	negw x 
      001E3B A6 04            [ 1] 5257 2$: ld a,#TK_INTGR 
      001E3D 81               [ 4] 5258 	ret 
                                   5259 
                                   5260 ;------------------------------
                                   5261 ; BASIC: AND(expr1,expr2)
                                   5262 ; Apply bit AND relation between
                                   5263 ; the 2 arguments, i.e expr1 & expr2 
                                   5264 ; output:
                                   5265 ; 	A 		TK_INTGR
                                   5266 ;   X 		result 
                                   5267 ;------------------------------
      001E3E                       5268 bit_and:
      001E3E CD 11 C2         [ 4] 5269 	call func_args 
      001E41 A1 02            [ 1] 5270 	cp a,#2
      001E43 27 03            [ 1] 5271 	jreq 1$
      001E45 CC 06 FF         [ 2] 5272 	jp syntax_error 
      001E48 CD 0F 7E         [ 4] 5273 1$:	call dpop 
      001E4B 89               [ 2] 5274 	pushw x 
      001E4C CD 0F 7E         [ 4] 5275 	call dpop 
      001E4F 9E               [ 1] 5276 	ld a,xh 
      001E50 14 01            [ 1] 5277 	and a,(1,sp)
      001E52 95               [ 1] 5278 	ld xh,a 
      001E53 9F               [ 1] 5279 	ld a,xl
      001E54 14 02            [ 1] 5280 	and a,(2,sp)
      001E56 97               [ 1] 5281 	ld xl,a 
      001E57                       5282 	_drop 2 
      001E57 5B 02            [ 2]    1     addw sp,#2 
      001E59 A6 04            [ 1] 5283 	ld a,#TK_INTGR
      001E5B 81               [ 4] 5284 	ret
                                   5285 
                                   5286 ;------------------------------
                                   5287 ; BASIC: OR(expr1,expr2)
                                   5288 ; Apply bit OR relation between
                                   5289 ; the 2 arguments, i.e expr1 | expr2 
                                   5290 ; output:
                                   5291 ; 	A 		TK_INTGR
                                   5292 ;   X 		result 
                                   5293 ;------------------------------
      001E5C                       5294 bit_or:
      001E5C CD 11 C2         [ 4] 5295 	call func_args 
      001E5F A1 02            [ 1] 5296 	cp a,#2
      001E61 27 03            [ 1] 5297 	jreq 1$
      001E63 CC 06 FF         [ 2] 5298 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E66                       5299 1$: 
      001E66 CD 0F 7E         [ 4] 5300 	call dpop 
      001E69 89               [ 2] 5301 	pushw x 
      001E6A CD 0F 7E         [ 4] 5302 	call dpop 
      001E6D 9E               [ 1] 5303 	ld a,xh 
      001E6E 1A 01            [ 1] 5304 	or a,(1,sp)
      001E70 95               [ 1] 5305 	ld xh,a 
      001E71 9F               [ 1] 5306 	ld a,xl 
      001E72 1A 02            [ 1] 5307 	or a,(2,sp)
      001E74 97               [ 1] 5308 	ld xl,a 
      001E75                       5309 	_drop 2 
      001E75 5B 02            [ 2]    1     addw sp,#2 
      001E77 A6 04            [ 1] 5310 	ld a,#TK_INTGR 
      001E79 81               [ 4] 5311 	ret
                                   5312 
                                   5313 ;------------------------------
                                   5314 ; BASIC: XOR(expr1,expr2)
                                   5315 ; Apply bit XOR relation between
                                   5316 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5317 ; output:
                                   5318 ; 	A 		TK_INTGR
                                   5319 ;   X 		result 
                                   5320 ;------------------------------
      001E7A                       5321 bit_xor:
      001E7A CD 11 C2         [ 4] 5322 	call func_args 
      001E7D A1 02            [ 1] 5323 	cp a,#2
      001E7F 27 03            [ 1] 5324 	jreq 1$
      001E81 CC 06 FF         [ 2] 5325 	jp syntax_error 
      001E84                       5326 1$: 
      001E84 CD 0F 7E         [ 4] 5327 	call dpop 
      001E87 89               [ 2] 5328 	pushw x 
      001E88 CD 0F 7E         [ 4] 5329 	call dpop 
      001E8B 9E               [ 1] 5330 	ld a,xh 
      001E8C 18 01            [ 1] 5331 	xor a,(1,sp)
      001E8E 95               [ 1] 5332 	ld xh,a 
      001E8F 9F               [ 1] 5333 	ld a,xl 
      001E90 18 02            [ 1] 5334 	xor a,(2,sp)
      001E92 97               [ 1] 5335 	ld xl,a 
      001E93                       5336 	_drop 2 
      001E93 5B 02            [ 2]    1     addw sp,#2 
      001E95 A6 04            [ 1] 5337 	ld a,#TK_INTGR 
      001E97 81               [ 4] 5338 	ret 
                                   5339 
                                   5340 ;------------------------------
                                   5341 ; BASIC: RND(expr)
                                   5342 ; return random number 
                                   5343 ; between 1 and expr inclusive
                                   5344 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5345 ; input:
                                   5346 ; 	none 
                                   5347 ; output:
                                   5348 ;	X 		random positive integer 
                                   5349 ;------------------------------
      001E98                       5350 random:
      001E98 CD 11 C2         [ 4] 5351 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001E9B A1 01            [ 1] 5352 	cp a,#1
      001E9D 27 03            [ 1] 5353 	jreq 1$
      001E9F CC 06 FF         [ 2] 5354 	jp syntax_error
      001EA2                       5355 1$: 
      001EA2 CD 0F 7E         [ 4] 5356 	call dpop 
      001EA5 89               [ 2] 5357 	pushw x 
      001EA6 9E               [ 1] 5358 	ld a,xh 
      001EA7 A5 80            [ 1] 5359 	bcp a,#0x80 
      001EA9 27 05            [ 1] 5360 	jreq 2$
      001EAB A6 0A            [ 1] 5361 	ld a,#ERR_BAD_VALUE
      001EAD CC 07 01         [ 2] 5362 	jp tb_error
      001EB0                       5363 2$: 
                                   5364 ; acc16=(x<<5)^x 
      001EB0 CE 00 0C         [ 2] 5365 	ldw x,seedx 
      001EB3 58               [ 2] 5366 	sllw x 
      001EB4 58               [ 2] 5367 	sllw x 
      001EB5 58               [ 2] 5368 	sllw x 
      001EB6 58               [ 2] 5369 	sllw x 
      001EB7 58               [ 2] 5370 	sllw x 
      001EB8 9E               [ 1] 5371 	ld a,xh 
      001EB9 C8 00 0C         [ 1] 5372 	xor a,seedx 
      001EBC C7 00 08         [ 1] 5373 	ld acc16,a 
      001EBF 9F               [ 1] 5374 	ld a,xl 
      001EC0 C8 00 0D         [ 1] 5375 	xor a,seedx+1 
      001EC3 C7 00 09         [ 1] 5376 	ld acc8,a 
                                   5377 ; seedx=seedy 
      001EC6 CE 00 0E         [ 2] 5378 	ldw x,seedy 
      001EC9 CF 00 0C         [ 2] 5379 	ldw seedx,x  
                                   5380 ; seedy=seedy^(seedy>>1)
      001ECC 90 54            [ 2] 5381 	srlw y 
      001ECE 90 9E            [ 1] 5382 	ld a,yh 
      001ED0 C8 00 0E         [ 1] 5383 	xor a,seedy 
      001ED3 C7 00 0E         [ 1] 5384 	ld seedy,a  
      001ED6 90 9F            [ 1] 5385 	ld a,yl 
      001ED8 C8 00 0F         [ 1] 5386 	xor a,seedy+1 
      001EDB C7 00 0F         [ 1] 5387 	ld seedy+1,a 
                                   5388 ; acc16>>3 
      001EDE CE 00 08         [ 2] 5389 	ldw x,acc16 
      001EE1 54               [ 2] 5390 	srlw x 
      001EE2 54               [ 2] 5391 	srlw x 
      001EE3 54               [ 2] 5392 	srlw x 
                                   5393 ; x=acc16^x 
      001EE4 9E               [ 1] 5394 	ld a,xh 
      001EE5 C8 00 08         [ 1] 5395 	xor a,acc16 
      001EE8 95               [ 1] 5396 	ld xh,a 
      001EE9 9F               [ 1] 5397 	ld a,xl 
      001EEA C8 00 09         [ 1] 5398 	xor a,acc8 
      001EED 97               [ 1] 5399 	ld xl,a 
                                   5400 ; seedy=x^seedy 
      001EEE C8 00 0F         [ 1] 5401 	xor a,seedy+1
      001EF1 97               [ 1] 5402 	ld xl,a 
      001EF2 9E               [ 1] 5403 	ld a,xh 
      001EF3 C8 00 0E         [ 1] 5404 	xor a,seedy
      001EF6 95               [ 1] 5405 	ld xh,a 
      001EF7 CF 00 0E         [ 2] 5406 	ldw seedy,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                   5407 ; return seedy modulo expr + 1 
      001EFA 90 85            [ 2] 5408 	popw y 
      001EFC 65               [ 2] 5409 	divw x,y 
      001EFD 93               [ 1] 5410 	ldw x,y 
      001EFE 5C               [ 1] 5411 	incw x 
      001EFF A6 04            [ 1] 5412 	ld a,#TK_INTGR
      001F01 81               [ 4] 5413 	ret 
                                   5414 
                                   5415 ;---------------------------------
                                   5416 ; BASIC: WORDS 
                                   5417 ; affiche la listes des mots du
                                   5418 ; dictionnaire.
                                   5419 ;---------------------------------
                           000001  5420 	WLEN=1
                           000002  5421 	LLEN=2  
                           000002  5422 	VSIZE=2 
      001F02                       5423 words:
      001F02                       5424 	_vars VSIZE
      001F02 52 02            [ 2]    1     sub sp,#VSIZE 
      001F04 0F 02            [ 1] 5425 	clr (LLEN,sp)
      001F06 90 AE 21 5D      [ 2] 5426 	ldw y,#kword_dict+2
      001F0A 93               [ 1] 5427 0$:	ldw x,y
      001F0B F6               [ 1] 5428 	ld a,(x)
      001F0C A4 0F            [ 1] 5429 	and a,#15 
      001F0E 6B 01            [ 1] 5430 	ld (WLEN,sp),a 
      001F10 5C               [ 1] 5431 1$:	incw x 
      001F11 F6               [ 1] 5432 	ld a,(x)
      001F12 CD 01 9E         [ 4] 5433 	call putc 
      001F15 0C 02            [ 1] 5434 	inc (LLEN,sp)
      001F17 0A 01            [ 1] 5435 	dec (WLEN,sp)
      001F19 26 F5            [ 1] 5436 	jrne 1$
      001F1B A6 46            [ 1] 5437 	ld a,#70
      001F1D 11 02            [ 1] 5438 	cp a,(LLEN,sp)
      001F1F 2B 09            [ 1] 5439 	jrmi 2$   
      001F21 A6 20            [ 1] 5440 	ld a,#SPACE 
      001F23 CD 01 9E         [ 4] 5441 	call putc 
      001F26 0C 02            [ 1] 5442 	inc (LLEN,sp) 
      001F28 20 07            [ 2] 5443 	jra 3$
      001F2A A6 0D            [ 1] 5444 2$: ld a,#CR 
      001F2C CD 01 9E         [ 4] 5445 	call putc 
      001F2F 0F 02            [ 1] 5446 	clr (LLEN,sp)
      001F31 72 A2 00 02      [ 2] 5447 3$:	subw y,#2 
      001F35 90 FE            [ 2] 5448 	ldw y,(y)
      001F37 26 D1            [ 1] 5449 	jrne 0$  
      001F39                       5450 	_drop VSIZE 
      001F39 5B 02            [ 2]    1     addw sp,#VSIZE 
      001F3B 81               [ 4] 5451 	ret 
                                   5452 
                                   5453 
                                   5454 ;*********************************
                                   5455 
                                   5456 ;------------------------------
                                   5457 ;      dictionary 
                                   5458 ; format:
                                   5459 ;   link:   2 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   5460 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   5461 ;   cmd_name: 16 byte max 
                                   5462 ;   code_address: 2 bytes 
                                   5463 ;------------------------------
                                   5464 	.macro _dict_entry len,name,cmd 
                                   5465 	.word LINK 
                                   5466 	LINK=.
                                   5467 name:
                                   5468 	.byte len 	
                                   5469 	.ascii "name"
                                   5470 	.word cmd 
                                   5471 	.endm 
                                   5472 
                           000000  5473 	LINK=0
      001F3C                       5474 kword_end:
      001F3C                       5475 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      001F3C 00 00                    1 	.word LINK 
                           001F3E     2 	LINK=.
      001F3E                          3 XOR:
      001F3E 43                       4 	.byte 3+F_IFUNC 	
      001F3F 58 4F 52                 5 	.ascii "XOR"
      001F42 1E 7A                    6 	.word bit_xor 
      001F44                       5476 	_dict_entry,5,WRITE,write  
      001F44 1F 3E                    1 	.word LINK 
                           001F46     2 	LINK=.
      001F46                          3 WRITE:
      001F46 05                       4 	.byte 5 	
      001F47 57 52 49 54 45           5 	.ascii "WRITE"
      001F4C 1D 2C                    6 	.word write 
      001F4E                       5477 	_dict_entry,5,WORDS,words 
      001F4E 1F 46                    1 	.word LINK 
                           001F50     2 	LINK=.
      001F50                          3 WORDS:
      001F50 05                       4 	.byte 5 	
      001F51 57 4F 52 44 53           5 	.ascii "WORDS"
      001F56 1F 02                    6 	.word words 
      001F58                       5478 	_dict_entry 4,WAIT,wait 
      001F58 1F 50                    1 	.word LINK 
                           001F5A     2 	LINK=.
      001F5A                          3 WAIT:
      001F5A 04                       4 	.byte 4 	
      001F5B 57 41 49 54              5 	.ascii "WAIT"
      001F5F 16 F8                    6 	.word wait 
      001F61                       5479 	_dict_entry,3+F_IFUNC,USR,usr
      001F61 1F 5A                    1 	.word LINK 
                           001F63     2 	LINK=.
      001F63                          3 USR:
      001F63 43                       4 	.byte 3+F_IFUNC 	
      001F64 55 53 52                 5 	.ascii "USR"
      001F67 1D DD                    6 	.word usr 
      001F69                       5480 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      001F69 1F 63                    1 	.word LINK 
                           001F6B     2 	LINK=.
      001F6B                          3 UFLASH:
      001F6B 46                       4 	.byte 6+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001F6C 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001F72 1D D7                    6 	.word uflash 
      001F74                       5481 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      001F74 1F 6B                    1 	.word LINK 
                           001F76     2 	LINK=.
      001F76                          3 UBOUND:
      001F76 46                       4 	.byte 6+F_IFUNC 	
      001F77 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001F7D 13 5F                    6 	.word ubound 
      001F7F                       5482 	_dict_entry,2,TO,to
      001F7F 1F 76                    1 	.word LINK 
                           001F81     2 	LINK=.
      001F81                          3 TO:
      001F81 02                       4 	.byte 2 	
      001F82 54 4F                    5 	.ascii "TO"
      001F84 17 EF                    6 	.word to 
      001F86                       5483 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      001F86 1F 81                    1 	.word LINK 
                           001F88     2 	LINK=.
      001F88                          3 TICKS:
      001F88 45                       4 	.byte 5+F_IFUNC 	
      001F89 54 49 43 4B 53           5 	.ascii "TICKS"
      001F8E 1E 22                    6 	.word get_ticks 
      001F90                       5484 	_dict_entry,4,STOP,stop 
      001F90 1F 88                    1 	.word LINK 
                           001F92     2 	LINK=.
      001F92                          3 STOP:
      001F92 04                       4 	.byte 4 	
      001F93 53 54 4F 50              5 	.ascii "STOP"
      001F97 19 6B                    6 	.word stop 
      001F99                       5485 	_dict_entry,4,STEP,step 
      001F99 1F 92                    1 	.word LINK 
                           001F9B     2 	LINK=.
      001F9B                          3 STEP:
      001F9B 04                       4 	.byte 4 	
      001F9C 53 54 45 50              5 	.ascii "STEP"
      001FA0 18 1F                    6 	.word step 
      001FA2                       5486 	_dict_entry,5,SLEEP,sleep 
      001FA2 1F 9B                    1 	.word LINK 
                           001FA4     2 	LINK=.
      001FA4                          3 SLEEP:
      001FA4 05                       4 	.byte 5 	
      001FA5 53 4C 45 45 50           5 	.ascii "SLEEP"
      001FAA 1E 04                    6 	.word sleep 
      001FAC                       5487 	_dict_entry,4+F_IFUNC,SIZE,size
      001FAC 1F A4                    1 	.word LINK 
                           001FAE     2 	LINK=.
      001FAE                          3 SIZE:
      001FAE 44                       4 	.byte 4+F_IFUNC 	
      001FAF 53 49 5A 45              5 	.ascii "SIZE"
      001FB3 13 55                    6 	.word size 
      001FB5                       5488     _dict_entry,4,SHOW,show 
      001FB5 1F AE                    1 	.word LINK 
                           001FB7     2 	LINK=.
      001FB7                          3 SHOW:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001FB7 04                       4 	.byte 4 	
      001FB8 53 48 4F 57              5 	.ascii "SHOW"
      001FBC 13 3B                    6 	.word show 
      001FBE                       5489 	_dict_entry,4,SAVE,save
      001FBE 1F B7                    1 	.word LINK 
                           001FC0     2 	LINK=.
      001FC0                          3 SAVE:
      001FC0 04                       4 	.byte 4 	
      001FC1 53 41 56 45              5 	.ascii "SAVE"
      001FC5 1B 1F                    6 	.word save 
      001FC7                       5490 	_dict_entry 3,RUN,run
      001FC7 1F C0                    1 	.word LINK 
                           001FC9     2 	LINK=.
      001FC9                          3 RUN:
      001FC9 03                       4 	.byte 3 	
      001FCA 52 55 4E                 5 	.ascii "RUN"
      001FCD 19 28                    6 	.word run 
      001FCF                       5491 	_dict_entry,3+F_IFUNC,RND,random 
      001FCF 1F C9                    1 	.word LINK 
                           001FD1     2 	LINK=.
      001FD1                          3 RND:
      001FD1 43                       4 	.byte 3+F_IFUNC 	
      001FD2 52 4E 44                 5 	.ascii "RND"
      001FD5 1E 98                    6 	.word random 
      001FD7                       5492 	_dict_entry,6,RETURN,return 
      001FD7 1F D1                    1 	.word LINK 
                           001FD9     2 	LINK=.
      001FD9                          3 RETURN:
      001FD9 06                       4 	.byte 6 	
      001FDA 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001FE0 19 08                    6 	.word return 
      001FE2                       5493 	_dict_entry 6,REMARK,rem 
      001FE2 1F D9                    1 	.word LINK 
                           001FE4     2 	LINK=.
      001FE4                          3 REMARK:
      001FE4 06                       4 	.byte 6 	
      001FE5 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001FEB 16 F2                    6 	.word rem 
      001FED                       5494 	_dict_entry,6,REBOOT,cold_start 
      001FED 1F E4                    1 	.word LINK 
                           001FEF     2 	LINK=.
      001FEF                          3 REBOOT:
      001FEF 06                       4 	.byte 6 	
      001FF0 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001FF6 05 4C                    6 	.word cold_start 
      001FF8                       5495 	_dict_entry,5+F_IFUNC,RDADC,read_adc
      001FF8 1F EF                    1 	.word LINK 
                           001FFA     2 	LINK=.
      001FFA                          3 RDADC:
      001FFA 45                       4 	.byte 5+F_IFUNC 	
      001FFB 52 44 41 44 43           5 	.ascii "RDADC"
      002000 19 E7                    6 	.word read_adc 
      002002                       5496 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002002 1F FA                    1 	.word LINK 
                           002004     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      002004                          3 QKEY:
      002004 44                       4 	.byte 4+F_IFUNC 	
      002005 51 4B 45 59              5 	.ascii "QKEY"
      002009 1D 9A                    6 	.word qkey 
      00200B                       5497 	_dict_entry,6,PWRADC,power_adc 
      00200B 20 04                    1 	.word LINK 
                           00200D     2 	LINK=.
      00200D                          3 PWRADC:
      00200D 06                       4 	.byte 6 	
      00200E 50 57 52 41 44 43        5 	.ascii "PWRADC"
      002014 19 A2                    6 	.word power_adc 
      002016                       5498 	_dict_entry 5,PRINT,print 
      002016 20 0D                    1 	.word LINK 
                           002018     2 	LINK=.
      002018                          3 PRINT:
      002018 05                       4 	.byte 5 	
      002019 50 52 49 4E 54           5 	.ascii "PRINT"
      00201E 15 ED                    6 	.word print 
      002020                       5499 	_dict_entry,4,POKE,poke 
      002020 20 18                    1 	.word LINK 
                           002022     2 	LINK=.
      002022                          3 POKE:
      002022 04                       4 	.byte 4 	
      002023 50 4F 4B 45              5 	.ascii "POKE"
      002027 17 8B                    6 	.word poke 
      002029                       5500 	_dict_entry,4+F_IFUNC,PEEK,peek 
      002029 20 22                    1 	.word LINK 
                           00202B     2 	LINK=.
      00202B                          3 PEEK:
      00202B 44                       4 	.byte 4+F_IFUNC 	
      00202C 50 45 45 4B              5 	.ascii "PEEK"
      002030 17 9E                    6 	.word peek 
      002032                       5501 	_dict_entry,5,PAUSE,pause 
      002032 20 2B                    1 	.word LINK 
                           002034     2 	LINK=.
      002034                          3 PAUSE:
      002034 05                       4 	.byte 5 	
      002035 50 41 55 53 45           5 	.ascii "PAUSE"
      00203A 1E 0F                    6 	.word pause 
      00203C                       5502 	_dict_entry,2+F_IFUNC,OR,bit_or
      00203C 20 34                    1 	.word LINK 
                           00203E     2 	LINK=.
      00203E                          3 OR:
      00203E 42                       4 	.byte 2+F_IFUNC 	
      00203F 4F 52                    5 	.ascii "OR"
      002041 1E 5C                    6 	.word bit_or 
      002043                       5503 	_dict_entry,3+F_CONST,ODR,GPIO_ODR
      002043 20 3E                    1 	.word LINK 
                           002045     2 	LINK=.
      002045                          3 ODR:
      002045 C3                       4 	.byte 3+F_CONST 	
      002046 4F 44 52                 5 	.ascii "ODR"
      002049 00 00                    6 	.word GPIO_ODR 
      00204B                       5504 	_dict_entry,3,NEW,new
      00204B 20 45                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                           00204D     2 	LINK=.
      00204D                          3 NEW:
      00204D 03                       4 	.byte 3 	
      00204E 4E 45 57                 5 	.ascii "NEW"
      002051 1A 5D                    6 	.word new 
      002053                       5505 	_dict_entry,4,NEXT,next 
      002053 20 4D                    1 	.word LINK 
                           002055     2 	LINK=.
      002055                          3 NEXT:
      002055 04                       4 	.byte 4 	
      002056 4E 45 58 54              5 	.ascii "NEXT"
      00205A 18 47                    6 	.word next 
      00205C                       5506 	_dict_entry,4,LOAD,load 
      00205C 20 55                    1 	.word LINK 
                           00205E     2 	LINK=.
      00205E                          3 LOAD:
      00205E 04                       4 	.byte 4 	
      00205F 4C 4F 41 44              5 	.ascii "LOAD"
      002063 1B E3                    6 	.word load 
      002065                       5507 	_dict_entry 4,LIST,list
      002065 20 5E                    1 	.word LINK 
                           002067     2 	LINK=.
      002067                          3 LIST:
      002067 04                       4 	.byte 4 	
      002068 4C 49 53 54              5 	.ascii "LIST"
      00206C 13 A9                    6 	.word list 
      00206E                       5508 	_dict_entry 3,LET,let 
      00206E 20 67                    1 	.word LINK 
                           002070     2 	LINK=.
      002070                          3 LET:
      002070 03                       4 	.byte 3 	
      002071 4C 45 54                 5 	.ascii "LET"
      002074 13 81                    6 	.word let 
      002076                       5509 	_dict_entry,3+F_IFUNC,KEY,key 
      002076 20 70                    1 	.word LINK 
                           002078     2 	LINK=.
      002078                          3 KEY:
      002078 43                       4 	.byte 3+F_IFUNC 	
      002079 4B 45 59                 5 	.ascii "KEY"
      00207C 1D 92                    6 	.word key 
      00207E                       5510 	_dict_entry,5,INPUT,input_var  
      00207E 20 78                    1 	.word LINK 
                           002080     2 	LINK=.
      002080                          3 INPUT:
      002080 05                       4 	.byte 5 	
      002081 49 4E 50 55 54           5 	.ascii "INPUT"
      002086 16 7E                    6 	.word input_var 
      002088                       5511 	_dict_entry,2,IF,if 
      002088 20 80                    1 	.word LINK 
                           00208A     2 	LINK=.
      00208A                          3 IF:
      00208A 02                       4 	.byte 2 	
      00208B 49 46                    5 	.ascii "IF"
      00208D 17 B1                    6 	.word if 
      00208F                       5512 	_dict_entry,3+F_CONST,IDR,GPIO_IDR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      00208F 20 8A                    1 	.word LINK 
                           002091     2 	LINK=.
      002091                          3 IDR:
      002091 C3                       4 	.byte 3+F_CONST 	
      002092 49 44 52                 5 	.ascii "IDR"
      002095 00 01                    6 	.word GPIO_IDR 
      002097                       5513 	_dict_entry,3,HEX,hex_base
      002097 20 91                    1 	.word LINK 
                           002099     2 	LINK=.
      002099                          3 HEX:
      002099 03                       4 	.byte 3 	
      00209A 48 45 58                 5 	.ascii "HEX"
      00209D 13 4B                    6 	.word hex_base 
      00209F                       5514 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      00209F 20 99                    1 	.word LINK 
                           0020A1     2 	LINK=.
      0020A1                          3 GPIO:
      0020A1 44                       4 	.byte 4+F_IFUNC 	
      0020A2 47 50 49 4F              5 	.ascii "GPIO"
      0020A6 1D A4                    6 	.word gpio 
      0020A8                       5515 	_dict_entry,4,GOTO,goto 
      0020A8 20 A1                    1 	.word LINK 
                           0020AA     2 	LINK=.
      0020AA                          3 GOTO:
      0020AA 04                       4 	.byte 4 	
      0020AB 47 4F 54 4F              5 	.ascii "GOTO"
      0020AF 18 B6                    6 	.word goto 
      0020B1                       5516 	_dict_entry,5,GOSUB,gosub 
      0020B1 20 AA                    1 	.word LINK 
                           0020B3     2 	LINK=.
      0020B3                          3 GOSUB:
      0020B3 05                       4 	.byte 5 	
      0020B4 47 4F 53 55 42           5 	.ascii "GOSUB"
      0020B9 18 C3                    6 	.word gosub 
      0020BB                       5517 	_dict_entry,6,FORGET,forget 
      0020BB 20 B3                    1 	.word LINK 
                           0020BD     2 	LINK=.
      0020BD                          3 FORGET:
      0020BD 06                       4 	.byte 6 	
      0020BE 46 4F 52 47 45 54        5 	.ascii "FORGET"
      0020C4 1C 4B                    6 	.word forget 
      0020C6                       5518 	_dict_entry,3,FOR,for 
      0020C6 20 BD                    1 	.word LINK 
                           0020C8     2 	LINK=.
      0020C8                          3 FOR:
      0020C8 03                       4 	.byte 3 	
      0020C9 46 4F 52                 5 	.ascii "FOR"
      0020CC 17 C5                    6 	.word for 
      0020CE                       5519 	_dict_entry,6+F_CONST,EEPROM,EEPROM_BASE  
      0020CE 20 C8                    1 	.word LINK 
                           0020D0     2 	LINK=.
      0020D0                          3 EEPROM:
      0020D0 C6                       4 	.byte 6+F_CONST 	
      0020D1 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0020D7 40 00                    6 	.word EEPROM_BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0020D9                       5520 	_dict_entry,3,DIR,directory 
      0020D9 20 D0                    1 	.word LINK 
                           0020DB     2 	LINK=.
      0020DB                          3 DIR:
      0020DB 03                       4 	.byte 3 	
      0020DC 44 49 52                 5 	.ascii "DIR"
      0020DF 1C 96                    6 	.word directory 
      0020E1                       5521 	_dict_entry,3,DEC,dec_base
      0020E1 20 DB                    1 	.word LINK 
                           0020E3     2 	LINK=.
      0020E3                          3 DEC:
      0020E3 03                       4 	.byte 3 	
      0020E4 44 45 43                 5 	.ascii "DEC"
      0020E7 13 50                    6 	.word dec_base 
      0020E9                       5522 	_dict_entry,3+F_CONST,DDR,GPIO_DDR
      0020E9 20 E3                    1 	.word LINK 
                           0020EB     2 	LINK=.
      0020EB                          3 DDR:
      0020EB C3                       4 	.byte 3+F_CONST 	
      0020EC 44 44 52                 5 	.ascii "DDR"
      0020EF 00 02                    6 	.word GPIO_DDR 
      0020F1                       5523 	_dict_entry,3+F_CONST,CRL,GPIO_CR1
      0020F1 20 EB                    1 	.word LINK 
                           0020F3     2 	LINK=.
      0020F3                          3 CRL:
      0020F3 C3                       4 	.byte 3+F_CONST 	
      0020F4 43 52 4C                 5 	.ascii "CRL"
      0020F7 00 03                    6 	.word GPIO_CR1 
      0020F9                       5524 	_dict_entry,3+F_CONST,CRH,GPIO_CR2
      0020F9 20 F3                    1 	.word LINK 
                           0020FB     2 	LINK=.
      0020FB                          3 CRH:
      0020FB C3                       4 	.byte 3+F_CONST 	
      0020FC 43 52 48                 5 	.ascii "CRH"
      0020FF 00 04                    6 	.word GPIO_CR2 
      002101                       5525 	_dict_entry,4+F_CFUNC,CHAR,char
      002101 20 FB                    1 	.word LINK 
                           002103     2 	LINK=.
      002103                          3 CHAR:
      002103 84                       4 	.byte 4+F_CFUNC 	
      002104 43 48 41 52              5 	.ascii "CHAR"
      002108 1D 63                    6 	.word char 
      00210A                       5526 	_dict_entry,3,BYE,bye 
      00210A 21 03                    1 	.word LINK 
                           00210C     2 	LINK=.
      00210C                          3 BYE:
      00210C 03                       4 	.byte 3 	
      00210D 42 59 45                 5 	.ascii "BYE"
      002110 1D FB                    6 	.word bye 
      002112                       5527 	_dict_entry,5,BTOGL,bit_toggle
      002112 21 0C                    1 	.word LINK 
                           002114     2 	LINK=.
      002114                          3 BTOGL:
      002114 05                       4 	.byte 5 	
      002115 42 54 4F 47 4C           5 	.ascii "BTOGL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00211A 17 4C                    6 	.word bit_toggle 
      00211C                       5528 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      00211C 21 14                    1 	.word LINK 
                           00211E     2 	LINK=.
      00211E                          3 BTEST:
      00211E 45                       4 	.byte 5+F_IFUNC 	
      00211F 42 54 45 53 54           5 	.ascii "BTEST"
      002124 17 60                    6 	.word bit_test 
      002126                       5529 	_dict_entry,4,BSET,bit_set 
      002126 21 1E                    1 	.word LINK 
                           002128     2 	LINK=.
      002128                          3 BSET:
      002128 04                       4 	.byte 4 	
      002129 42 53 45 54              5 	.ascii "BSET"
      00212D 17 23                    6 	.word bit_set 
      00212F                       5530 	_dict_entry,4,BRES,bit_reset
      00212F 21 28                    1 	.word LINK 
                           002131     2 	LINK=.
      002131                          3 BRES:
      002131 04                       4 	.byte 4 	
      002132 42 52 45 53              5 	.ascii "BRES"
      002136 17 37                    6 	.word bit_reset 
      002138                       5531 	_dict_entry,5,BREAK,break 
      002138 21 31                    1 	.word LINK 
                           00213A     2 	LINK=.
      00213A                          3 BREAK:
      00213A 05                       4 	.byte 5 	
      00213B 42 52 45 41 4B           5 	.ascii "BREAK"
      002140 1A 11                    6 	.word break 
      002142                       5532 	_dict_entry,4,BEEP,beep 
      002142 21 3A                    1 	.word LINK 
                           002144     2 	LINK=.
      002144                          3 BEEP:
      002144 04                       4 	.byte 4 	
      002145 42 45 45 50              5 	.ascii "BEEP"
      002149 19 7A                    6 	.word beep 
      00214B                       5533 	_dict_entry,3+F_IFUNC,ASC,ascii
      00214B 21 44                    1 	.word LINK 
                           00214D     2 	LINK=.
      00214D                          3 ASC:
      00214D 43                       4 	.byte 3+F_IFUNC 	
      00214E 41 53 43                 5 	.ascii "ASC"
      002151 1D 77                    6 	.word ascii 
      002153                       5534 	_dict_entry,3+F_IFUNC,AND,bit_and
      002153 21 4D                    1 	.word LINK 
                           002155     2 	LINK=.
      002155                          3 AND:
      002155 43                       4 	.byte 3+F_IFUNC 	
      002156 41 4E 44                 5 	.ascii "AND"
      002159 1E 3E                    6 	.word bit_and 
      00215B                       5535 kword_dict:
      00215B                       5536 	_dict_entry,3+F_IFUNC,ABS,abs
      00215B 21 55                    1 	.word LINK 
                           00215D     2 	LINK=.
      00215D                          3 ABS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00215D 43                       4 	.byte 3+F_IFUNC 	
      00215E 41 42 53                 5 	.ascii "ABS"
      002161 1E 28                    6 	.word abs 
                                   5537 	
                                   5538 
      002180                       5539 	.bndry 128 ; align on FLASH block.
                                   5540 ; free space for user application  
      002180                       5541 user_space:
                                   5542 ; USR() function test
      002180 89               [ 2] 5543 	pushw x 
      002181 72 1A 50 0A      [ 1] 5544 	bset PC_ODR,#5 
      002185 85               [ 2] 5545 	popw x 
      002186 CD 1E 19         [ 4] 5546 	call pause02 
      002189 72 1B 50 0A      [ 1] 5547 	bres PC_ODR,#5 
      00218D 81               [ 4] 5548 	ret
                                   5549 
                                   5550 	.area FLASH_DRIVE (ABS)
      010000                       5551 	.org 0x10000
      010000                       5552 fdrive:
                                   5553 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        00215D R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   5 AND        002155 R
    ARG_CNT =  000001     |     ARG_OFS =  000002     |   5 ASC        00214D R
    ATTRIB  =  000002     |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
  5 BEEP       002144 R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
    BLOCK_ER=  000000     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  000005     |   5 BREAK      00213A R
  5 BRES       002131 R   |   5 BSET       002128 R   |     BSIZE   =  000001 
    BSP     =  000008     |   5 BTEST      00211E R   |   5 BTOGL      002114 R
    BTW     =  000001     |     BUFIDX  =  000003     |   5 BYE        00210C R
    C       =  000001     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       002103 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000008 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        0020FB R
  5 CRL        0020F3 R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000006     |     CURR    =  000002     |     CX_BPTR =  000001 
    CX_CNT  =  000005     |     CX_IN   =  000004     |     CX_LNO  =  000003 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |   5 DDR        0020EB R   |     DEBUG   =  000001 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   5 DEC        0020E3 R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        0020DB R   |     DIVIDND =  000007     |     DIVISR  =  000005 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |     DSTACK_S=  000040 
  5 EEPROM     0020D0 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |     EOF     =  0000FF     |     ERR_BAD_=  00000A 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_L=  000005 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |     FBREAK  =  000004 
    FCOMP   =  000005     |     FF      =  00000C     |     FFOR    =  000002 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   5 FOR        0020C8 R   |   5 FORGET     0020BD R
    FRUN    =  000000     |     FSIZE   =  000001     |     FSLEEP  =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   5 GOSUB      0020B3 R
    GOS_RET =  000003     |   5 GOTO       0020AA R   |   5 GPIO       0020A1 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   5 HEX        002099 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  5 IDR        002091 R   |   5 IF         00208A R   |     IN      =  000007 
    INCR    =  000001     |   5 INPUT      002080 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |     INW     =  000003     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        002078 R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        002070 R
    LINENO  =  000005     |   5 LINK    =  00215D R   |   5 LIST       002067 R
    LL      =  000002     |     LLEN    =  000002     |     LL_HB   =  000001 
    LNO     =  000005     |     LN_PTR  =  000005     |   5 LOAD       00205E R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MINOR   =  000000     |     MULOP   =  000005     |     N1      =  000001 
    N1_HB   =  000006     |     N1_LB   =  000007     |     N2      =  000003 
    N2_HB   =  000008     |     N2_LB   =  000009     |     NAFR    =  004804 
    NAMEPTR =  000003     |     NCLKOPT =  004808     |     NEG     =  000001 
  5 NEW        00204D R   |   5 NEXT       002055 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NL      =  00000A     |     NLEN    =  000001 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |     NUBC    =  004802 
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000009 R
  5 ODR        002045 R   |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         00203E R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVFH    =  000001 
    OVFL    =  000002     |     PA      =  000000     |     PAD_SIZE=  000028 
  5 PAUSE      002034 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   5 PEEK       00202B R
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   5 POKE       002022 R   |     PREV    =  000001 
  5 PRINT      002018 R   |     PROD    =  000002     |     PSIZE   =  000001 
  5 PWRADC     00200D R   |   5 QKEY       002004 R   |     RAM_BASE=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   5 RDADC      001FFA R
  5 REBOOT     001FEF R   |   5 REG_A      000922 R   |   5 REG_CC     000926 R
  5 REG_EPC    000915 R   |   5 REG_SP     00092B R   |   5 REG_X      00091E R
  5 REG_Y      00091A R   |     RELOP   =  000005     |   5 REMARK     001FE4 R
    RETL1   =  000001     |   5 RETURN     001FD9 R   |   5 RND        001FD1 R
    ROP     =  004800     |     RST_SR  =  0050B3     |   5 RUN        001FC9 R
    RXCHAR  =  000001     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   5 SAVE       001FC0 R
    SDIVD   =  000002     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       001FB7 R   |     SIGN    =  000001 
  5 SIZE       001FAE R   |     SKIP    =  000006     |   5 SLEEP      001FA4 R
    SPACE   =  000020     |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SQUOT   =  000001     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  000080     |   5 STATES     0008D8 R   |   5 STEP       001F9B R
  5 STOP       001F92 R   |     SWIM_CSR=  007F80     |     TAB     =  000009 
    TAB_WIDT=  000004     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   5 TICKS      001F88 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000002     |     TK_CFUNC=  000008     |     TK_CHAR =  000003 
    TK_CMD  =  000006     |     TK_COLON=  000001     |     TK_COMMA=  00000D 
    TK_CONST=  000009     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000007     |     TK_INTGR=  000004 
    TK_LE   =  000036     |     TK_LPARE=  00000B     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  00000A     |     TK_RPARE=  00000C     |     TK_SHARP=  00000E 
    TK_VAR  =  000005     |   5 TO         001F81 R   |   5 Timer4Up   000019 R
  5 TrapHand   00000A R   |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     001F76 R   |   5 UFLASH     001F6B R
  5 USER_ABO   00007E R   |   5 USR        001F63 R   |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   5 UserButt   000025 R
    VSIZ    =  000002     |     VSIZE   =  000002     |     VT      =  00000B 
  5 WAIT       001F5A R   |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
    WIDTH   =  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  5 WORDS      001F50 R   |   5 WRITE      001F46 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XADR    =  000001     |     XMASK   =  000001 
  5 XOR        001F3E R   |     XSAVE   =  000003     |     YSAVE   =  000003 
  5 abs        001E28 R   |   1 acc16      000008 R   |   1 acc24      000007 R
  1 acc8       000009 R   |   5 accept_c   000ACC R   |   5 add        00105F R
  5 ansi_seq   000A8E R   |   5 arg_list   00119E R   |   1 array_si   00001D R
  5 ascii      001D77 R   |   5 at_tst     000D99 R   |   5 atoi24     000EAC R
  5 atoi_exi   000F1A R   |   5 bad_port   001DD2 R   |   1 base       000006 R
  1 basicptr   000004 R   |   5 beep       00197A R   |   5 bin_exit   000C9D R
  5 bit_and    001E3E R   |   5 bit_or     001E5C R   |   5 bit_rese   001737 R
  5 bit_set    001723 R   |   5 bit_test   001760 R   |   5 bit_togg   00174C R
  5 bit_xor    001E7A R   |   5 bkslsh_t   000D44 R   |   5 bksp       0001BA R
  5 break      001A11 R   |   5 break_po   001A3F R   |   5 bye        001DFB R
  5 char       001D63 R   |   5 check_fu   0003DD R   |   5 clear_ba   0005D1 R
  5 clear_va   0004E7 R   |   5 clock_in   000099 R   |   5 cmd_itf    000AF0 R
  5 cmd_name   00110A R   |   5 cmp_name   001AB3 R   |   5 cold_sta   00054C R
  5 colon_ts   000D6D R   |   5 comma_ts   000D78 R   |   5 compile    0003EC R
  5 convert_   000C25 R   |   1 count      000003 R   |   5 cp_loop    00114D R
  5 create_g   00033C R   |   5 cstk_pro   001029 R   |   5 dash_tst   000D8E R
  5 ddrop      000FA5 R   |   5 ddrop_n    000FE2 R   |   5 ddup       000FAE R
  5 dec_base   001350 R   |   5 del_back   000ABD R   |   5 del_line   000304 R
  5 del_ln     000AAE R   |   5 delete     0001CA R   |   5 dir_loop   001CA2 R
  5 director   001C96 R   |   5 divide     0010B5 R   |   5 divu24_8   000A1B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

  5 dotr       001032 R   |   5 dotr_loo   001047 R   |   5 dots       000FFF R
  5 dpick      000FBF R   |   5 dpop       000F7E R   |   5 dpush      000F71 R
  5 drive_fr   001D1F R   |   3 dstack     001740 R   |   3 dstack_u   001780 R
  5 dstk_pro   000FF5 R   |   1 dstkptr    000016 R   |   5 dswap      000F8B R
  5 eql_tst    000DF9 R   |   5 equal      0015E0 R   |   5 err_bad_   0006AE R
  5 err_cmd_   00066F R   |   5 err_div0   000631 R   |   5 err_dupl   00068A R
  5 err_math   000617 R   |   5 err_mem_   0005FA R   |   5 err_msg    0005E2 R
  5 err_no_a   0006BB R   |   5 err_no_l   000641 R   |   5 err_not_   00069C R
  5 err_run_   000658 R   |   5 err_synt   000608 R   |   5 escaped    000C3A R
  5 expect     001191 R   |   5 expr_exi   0012E1 R   |   5 expressi   0012A0 R
  5 factor     0011F9 R   |   1 farptr     000010 R   |   7 fdrive     010000 R
  5 fetch      000FCE R   |   5 fetchc     000BDD R   |   1 ffree      000013 R
  5 file_cou   001D17 R   |   5 final_te   000A88 R   |   5 first_li   0013D4 R
  1 flags      00001F R   |   5 for        0017C5 R   |   5 forget     001C4B R
  1 free_ram   000055 R   |   5 func_arg   0011C2 R   |   5 ge         0015E2 R
  5 get_arra   0011D2 R   |   5 get_tick   001E22 R   |   5 get_toke   000CDF R
  5 getc       0001A7 R   |   5 go_commo   0018E6 R   |   5 gosub      0018C3 R
  5 goto       0018B6 R   |   5 gpio       001DA4 R   |   5 gt         0015DE R
  5 gt_tst     000E04 R   |   5 hex_base   00134B R   |   5 hse_cloc   000187 R
  5 hsi_cloc   000191 R   |   5 if         0017B1 R   |   1 in         000001 R
  1 in.saved   000002 R   |   1 in.w       000000 R   |   5 incr_far   001A68 R
  5 input_ex   0016EF R   |   5 input_lo   00168A R   |   5 input_va   00167E R
  5 insert_l   000375 R   |   5 insert_l   0003DA R   |   5 interp     00076F R
  5 interp_l   0007AF R   |   5 invalid    000B35 R   |   5 invalid_   000BB3 R
  5 is_alpha   0004F5 R   |   5 is_digit   000E97 R   |   5 itoa       0009D4 R
  5 itoa_loo   0009EC R   |   5 key        001D92 R   |   5 kword_di   00215B R
  5 kword_en   001F3C R   |   5 last_lin   0013DD R   |   5 le         0015E7 R
  5 ledoff     000828 R   |   5 ledon      000823 R   |   5 ledtoggl   00082D R
  5 left_arr   000A8E R   |   5 left_par   000836 R   |   5 let        001381 R
  5 let02      00138B R   |   5 lines_sk   0013E2 R   |   5 list       0013A9 R
  5 list_exi   001429 R   |   5 list_sta   001405 R   |   5 load       001BE3 R
  5 loop_bac   00188F R   |   1 loop_dep   00001C R   |   5 loop_don   0018A4 R
  5 lt         0015E5 R   |   5 lt_tst     000E3D R   |   5 mem_peek   000B52 R
  5 modulo     0010F9 R   |   5 move       00029E R   |   5 move_dow   0002BC R
  5 move_exi   0002DD R   |   5 move_loo   0002C1 R   |   5 move_up    0002AE R
  5 mul_char   0015CF R   |   5 multiply   00106D R   |   5 mulu24_8   000F1E R
  5 nbr_tst    000D1A R   |   5 ne         0015EA R   |   5 neg_acc2   000A43 R
  5 new        001A5D R   |   5 next       001847 R   |   5 next_tok   0007DF R
  5 no_match   00115F R   |   5 none       000CDF R   |   5 number     000BE3 GR
  5 other      000E75 R   |   3 pad        001718 R   |   5 parse_bi   000C7D R
  5 parse_in   000C42 R   |   5 parse_ke   000CA5 R   |   5 parse_qu   000BEA R
  5 pause      001E0F R   |   5 pause02    001E19 R   |   5 peek       00179E R
  5 peek_byt   000B7D R   |   5 plus_tst   000DCD R   |   5 poke       00178B R
  5 power_ad   0019A2 R   |   5 prcnt_ts   000DEE R   |   5 print      0015ED R
  5 print_ex   001652 R   |   5 print_fa   000BC2 R   |   5 print_in   000978 R
  5 print_re   000885 R   |   5 print_st   000B45 R   |   5 prt_basi   00147C R
  5 prt_cmd_   00142C R   |   5 prt_loop   0015F1 R   |   5 prt_peek   00024E R
  5 prt_quot   001440 R   |   5 prt_reg1   000866 R   |   5 prt_reg8   000841 R
  5 prt_regs   0001E4 R   |   5 prti24     000930 R   |   1 ptr16      000011 R
  1 ptr8       000012 R   |   5 putc       00019E R   |   5 puts       0001B0 R
  5 qkey       001D9A R   |   5 qmark_ts   000DA4 R   |   5 random     001E98 R
  5 read_adc   0019E7 R   |   5 readln     000A66 R   |   5 readln_l   000A6C R
  5 readln_q   000AE1 R   |   5 regs_sta   000227 R   |   5 rel_exit   001338 R
  5 relation   0012E4 R   |   5 relop_st   0015D2 R   |   5 rem        0016F2 R
  5 repl       000AFE R   |   5 repl_exi   000B26 R   |   5 reprint    000A8E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

  5 reset_co   0015EF R   |   5 rest_con   00166E R   |   5 return     001908 R
  5 right_ar   000A8E R   |   5 rparnt_t   000D62 R   |   5 rt_msg     0006EF R
  5 run        001928 R   |   5 save       001B1F R   |   5 save_con   00165E R
  5 search_d   00113C R   |   5 search_e   00118D R   |   5 search_f   001AD4 R
  5 search_l   0002E0 R   |   5 search_l   0002E8 R   |   5 search_n   001140 R
  1 seedx      00000C R   |   1 seedy      00000E R   |   5 seek_fdr   001A76 R
  5 sharp_ts   000D83 R   |   5 show       00133B R   |   5 single_c   0015CB R
  5 size       001355 R   |   5 skip       000F58 R   |   5 slash_ts   000DE3 R
  5 sleep      001E04 R   |   5 software   000506 R   |   5 spaces     0001D8 R
  3 stack_fu   001780 R   |   3 stack_un   001800 R   |   5 star_tst   000DD8 R
  5 step       00181F R   |   5 stop       00196B R   |   5 store      000FD8 R
  5 store_lo   001831 R   |   5 str_matc   00116E R   |   5 str_tst    000D09 R
  5 strcmp     00027F R   |   5 strcpy     000290 R   |   5 strlen     000272 R
  5 substrac   001067 R   |   5 syntax_e   0006FF R   |   1 tab_widt   000020 R
  5 tb_error   000701 R   |   5 term       001253 R   |   5 term01     00125C R
  5 term_exi   00129D R   |   5 test_p     000B3D R   |   3 tib        0016C8 R
  5 tick_tst   000DBB R   |   1 ticks      00000A R   |   5 timer4_i   0000AF R
  5 to         0017EF R   |   5 to_upper   000EA0 GR  |   5 token_ch   000E84 R
  5 token_ex   000E94 R   |   1 txtbgn     000018 R   |   1 txtend     00001A R
  5 uart3_in   000174 R   |   5 uart3_se   000180 R   |   5 uart_ena   000199 R
  5 ubound     00135F R   |   5 uflash     001DD7 R   |   5 unget_to   000F6B R
  5 unlock_e   0000C0 R   |   5 unlock_f   0000CE R   |   5 user_spa   002180 R
  5 usr        001DDD R   |   1 vars       000021 R   |   5 wait       0016F8 R
  5 warm_sta   000753 R   |   5 words      001F02 R   |   5 write      001D2C R
  5 write_bl   000151 R   |   5 write_by   0000DC R   |   5 write_ee   000118 R
  5 write_ex   00014C R   |   5 write_fl   000102 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     55   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    138   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   218E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

