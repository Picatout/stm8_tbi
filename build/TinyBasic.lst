ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000040    23         F_IFUNC=0x40 ; integer function keyword
                           000080    24         F_CFUNC=0x80 ; character function keyword
                           0000C0    25         F_CONST=0xC0 ; function keyword that return a constant
                                     26 
                           00008C    27 	STACK_SIZE=140
                           0017FF    28 	STACK_EMPTY=RAM_SIZE-1  
                           000003    29         CELL_SIZE=3
                           00003C    30         XSTACK_SIZE=CELL_SIZE*20 ; 20 * int24
                           001773    31         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    32 	FRUN=0 ; flags run code in variable flags
                           000001    33 	FTRAP=1 ; inside trap handler 
                           000002    34 	FLOOP=2 ; FOR loop in preparation 
                           000003    35 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    36 	FBREAK=4 ; break point flag 
                           000005    37 	FCOMP=5  ; compiling flags 
                                     38 
                                     39 
                           000006    40         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     41 
                           007FFF    42 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     43 
                           000008    44 	RX_QUEUE_SIZE=8 
                                     45 
                           00F424    46         TIM2_CLK_FREQ=62500
                                     47 
                           000050    48 	TIB_SIZE=80
                           000080    49         PAD_SIZE=BLOCK_SIZE 
                                     50 
                                     51 ;--------------------------------------
                                     52 ;   constantes related to Arduino 
                                     53 ;   API mapping 
                                     54 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000000    55         INP=0
                           000001    56         OUTP=1 
                                     57 
                                     58 ;--------------------------------------
                                     59 ;       token attribute
                                     60 ;--------------------------------------
                                     61         ; bits 4:5 identify token group 
                                     62         ; 0x0n -> miscelinous 
                                     63         ; 0x1n -> +|- operators 
                                     64         ; 0x2n -> *|/|% operators
                                     65         ; 0x3n -> relational operators 
                           000080    66         TK_CMD=128      ; BASIC command   
                           000081    67         TK_IFUNC=129    ; BASIC integer function
                           000082    68         TK_CFUNC=130    ; BASIC character function
                           000083    69         TK_CONST=131    ; BASIC constant 
                           000084    70         TK_INTGR=132    ; 16 bits integer 
                           000085    71         TK_VAR=133
                           000086    72         TK_FLOAT=134    ; float32 
                           000087    73         TK_AND=135      ;
                           000088    74         TK_OR=136       ;
                           000089    75         TK_XOR=137      ; 
                           000000    76         TK_NONE=0       ; not a token 
                           000002    77         TK_QSTR=2       ; quoted string  
                           000003    78         TK_LABEL=3      ; used for defined, constants, variables
                           000004    79         TK_CHAR=4       ; ASCII character 
                           000005    80         TK_ARRAY=5     ; array variable '@' 
                           000006    81         TK_LPAREN=6     ; left parenthesis '('
                           000007    82         TK_RPAREN=7     ; right parenthesis ')'
                           000008    83         TK_COMMA=8     ; item separator ',' 
                           000009    84         TK_SHARP=9     ; print colon width '#' 
                           00000A    85         TK_COLON=0xa      ; command separator ':' 
                                     86         
                           000010    87         TK_PLUS=0x10    ; addition operator '+'
                           000011    88         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    89         TK_MULT=0x20    ; multiplication operator '*'
                           000021    90         TK_DIV=0x21     ; division operator '/'
                           000022    91         TK_MOD=0x22     ; modulo operator '%'
                                     92 
                                     93         ; don't change these token values 
                                     94         ; values chosen to be used as a mask.
                                     95         ; bit 7   1 for dictionary words else 0 
                                     96         ; bits 6  always 0 
                                     97         ; bits 5:4 identify group 
                                     98         ; bits 3:0 token identifier inside group  
                           000031    99         TK_GT=0x31      ; relation operator '>'
                           000032   100         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   101         TK_GE=0x33      ; relation operator '>='
                           000034   102         TK_LT=0x34      ; relation operator '<'
                           000036   103         TK_LE=0x36      ; relation operator '<='
                           000035   104         TK_NE=0x35      ; relation operator '<>' not equal 
                                    105         ; token groups 
                           000030   106         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   107         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   108         TK_GRP_ADD=0x10  ; additive operators
                           000020   109         TK_GRP_MULT=0x20 ; multiplicative operators
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000030   110         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   111         CMD_END=2 
                                    112 
                                    113 ;--------------------------------------
                                    114 ;   error codes 
                                    115 ;--------------------------------------
                           000000   116     ERR_NONE=0
                           000001   117     ERR_MEM_FULL=1 
                           000002   118     ERR_SYNTAX=2
                           000003   119     ERR_MATH_OVF=3
                           000004   120     ERR_DIV0=4 
                           000005   121     ERR_NO_LINE=5
                           000006   122     ERR_RUN_ONLY=6
                           000007   123     ERR_CMD_ONLY=7
                           000008   124     ERR_DUPLICATE=8
                           000009   125     ERR_NOT_FILE=9
                           00000A   126     ERR_BAD_VALUE=10
                           00000B   127     ERR_NO_ACCESS=11
                           00000C   128     ERR_NO_DATA=12 
                           00000D   129     ERR_NO_PROG=13
                           00000E   130     ERR_NO_FSPACE=14
                           00000F   131     ERR_BUF_FULL=15
                           000010   132     ERR_OVERFLOW=16 
                                    133 
                                    134 ;--------------------------------------
                                    135 ;   assembler flags 
                                    136 ;-------------------------------------
                                    137 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    138 
                                    139      .macro _usec_dly n 
                                    140     ldw x,#(16*n-2)/4
                                    141     decw x
                                    142     nop 
                                    143     jrne .-4
                                    144     .endm 
                                    145     
                                    146     ; load X register with 
                                    147     ; entry point of dictionary
                                    148     ; before calling 'search_dict'
                                    149     .macro _ldx_dict dict_name
                                    150     ldw x,#dict_name+2
                                    151     .endm 
                                    152 
                                    153     ; reset BASIC pointer
                                    154     ; to beginning of last token
                                    155     ; extracted except if it was end of line 
                                    156     .macro _unget_token 
                                    157      mov in,in.saved  
                                    158     .endm
                                    159 
                                    160 
                                    161 ;---------------------------------------
                                    162 ;    xtack manipulation macros 
                                    163 ;    Y is used as xstack pointer  
                                    164 ;----------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; pop in A:X from XSTACK 
                                    166     .macro _xpop 
                                    167     ld a,(y)
                                    168     ldw x,y 
                                    169     ldw x,(1,x)
                                    170     addw y,#CELL_SIZE 
                                    171     .endm 
                                    172 
                                    173     ; push A:X  to XSTACK 
                                    174     .macro _xpush 
                                    175     subw y,#CELL_SIZE
                                    176     ld (y),a 
                                    177     ldw (1,y),x 
                                    178     .endm 
                                    179 
                                    180     ; drop from XSTACK 
                                    181     .macro _xdrop 
                                    182     addw y,#CELL_SIZE 
                                    183     .endm 
                                    184 
                                    185     ; @T fetch top xstack 
                                    186     .macro _at_top
                                    187     ld a,(y)
                                    188     ldw x,y 
                                    189     ldw x,(1,x)
                                    190     .endm 
                                    191 
                                    192     ; @N  fetch next on xstack 
                                    193     .macro _at_next 
                                    194     ld a,(3,y)
                                    195     ldw x,y 
                                    196     ldw x,(4,x)
                                    197     .endm 
                                    198 
                                    199     ; !T put on top of xtack 
                                    200     .macro _store_top 
                                    201     ld (y),a 
                                    202     ldw (1,y),x     
                                    203     .endm 
                                    204 
                                    205     ; !N put next on xstack 
                                    206     .macro _store_next 
                                    207     ld (3,y),a 
                                    208     ldw (4,y),x 
                                    209     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     AND_IDX=ADCREAD_IDX+2     ;
                           000008    29     ASC_IDX=AND_IDX+2     ;
                           00000A    30     AWU_IDX=ASC_IDX+2 
                           00000C    31     BIT_IDX=AWU_IDX+2
                           00000E    32     BRES_IDX=BIT_IDX+2
                           000010    33     BSET_IDX=BRES_IDX+2
                           000012    34     BTEST_IDX=BSET_IDX+2
                           000014    35     BTOGL_IDX=BTEST_IDX+2
                           000016    36     BYE_IDX=BTOGL_IDX+2
                           000018    37     CHAR_IDX=BYE_IDX+2
                           00001A    38     CRH_IDX=CHAR_IDX+2
                           00001C    39     CRL_IDX=CRH_IDX+2
                           00001E    40     DATA_IDX=CRL_IDX+2
                           000020    41     DDR_IDX=DATA_IDX+2
                           000022    42     DEC_IDX=DDR_IDX+2
                           000024    43     DO_IDX=DEC_IDX+2
                           000026    44     DREAD_IDX=DO_IDX+2
                           000028    45     DWRITE_IDX=DREAD_IDX+2
                           00002A    46     EDIT_IDX=DWRITE_IDX+2
                           00002C    47     EEPROM_IDX=EDIT_IDX+2
                           00002E    48     END_IDX=EEPROM_IDX+2
                           000030    49     ERASE_IDX=END_IDX+2
                           000032    50     FCPU_IDX=ERASE_IDX+2
                           000034    51     SAVE_IDX=FCPU_IDX+2
                           000036    52     FOR_IDX=SAVE_IDX+2
                           000038    53     GOSUB_IDX=FOR_IDX+2
                           00003A    54     GOTO_IDX=GOSUB_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           00003C    55     GPIO_IDX=GOTO_IDX+2
                           00003E    56     HEX_IDX=GPIO_IDX+2
                           000040    57     IDR_IDX=HEX_IDX+2
                           000042    58     IF_IDX=IDR_IDX+2
                           000044    59     INPUT_IDX=IF_IDX+2
                           000046    60     INVERT_IDX=INPUT_IDX+2
                           000048    61     IWDGEN_IDX=INVERT_IDX+2
                           00004A    62     IWDGREF_IDX=IWDGEN_IDX+2
                           00004C    63     KEY_IDX=IWDGREF_IDX+2
                           00004E    64     LET_IDX=KEY_IDX+2
                           000050    65     LIST_IDX=LET_IDX+2
                           000052    66     LOG_IDX=LIST_IDX+2
                           000054    67     LSHIFT_IDX=LOG_IDX+2
                                     68 ;    MULDIV_IDX=LSHIFT_IDX+2
                           000056    69     NEXT_IDX=LSHIFT_IDX+2
                           000058    70     NEW_IDX=NEXT_IDX+2
                           00005A    71     NOT_IDX=NEW_IDX+2
                           00005C    72     ODR_IDX=NOT_IDX+2
                           00005E    73     OR_IDX=ODR_IDX+2
                           000060    74     PAD_IDX=OR_IDX+2
                           000062    75     PAUSE_IDX=PAD_IDX+2
                           000064    76     PMODE_IDX=PAUSE_IDX+2
                           000066    77     PEEK_IDX=PMODE_IDX+2
                           000068    78     PINP_IDX=PEEK_IDX+2
                           00006A    79     POKE_IDX=PINP_IDX+2
                           00006C    80     POUT_IDX=POKE_IDX+2
                           00006E    81    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000070    82     PRTA_IDX=PRT_IDX+2
                           000072    83     PRTB_IDX=PRTA_IDX+2
                           000074    84     PRTC_IDX=PRTB_IDX+2
                           000076    85     PRTD_IDX=PRTC_IDX+2
                           000078    86     PRTE_IDX=PRTD_IDX+2
                           00007A    87     PRTF_IDX=PRTE_IDX+2
                           00007C    88     PRTG_IDX=PRTF_IDX+2
                           00007E    89     PRTH_IDX=PRTG_IDX+2
                           000080    90     PRTI_IDX=PRTH_IDX+2
                           000082    91     QKEY_IDX=PRTI_IDX+2
                           000084    92     READ_IDX=QKEY_IDX+2
                           000086    93     RBT_IDX=READ_IDX+2  ; REBOOT
                           000088    94 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00008A    95     REST_IDX=REM_IDX+2 ; RESTORE
                           00008C    96     RET_IDX=REST_IDX+2  ; RETURN 
                           00008E    97     RND_IDX=RET_IDX+2 ; RANDOM 
                           000090    98     RSHIFT_IDX=RND_IDX+2
                           000092    99     RUN_IDX=RSHIFT_IDX+2
                           000094   100     FREE_IDX=RUN_IDX+2
                           000096   101     SLEEP_IDX=FREE_IDX+2
                           000098   102     SPIRD_IDX=SLEEP_IDX+2
                           00009A   103     SPIEN_IDX=SPIRD_IDX+2
                           00009C   104     SPISEL_IDX=SPIEN_IDX+2
                           00009E   105     SPIWR_IDX=SPISEL_IDX+2
                           0000A0   106     STEP_IDX=SPIWR_IDX+2
                           0000A2   107     STOP_IDX=STEP_IDX+2
                           0000A4   108     TICKS_IDX=STOP_IDX+2
                           0000A6   109     TIMER_IDX=TICKS_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           0000A8   110     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           0000AA   111     TO_IDX=TMROUT_IDX+2
                           0000AC   112     TONE_IDX=TO_IDX+2
                           0000AE   113     UBOUND_IDX=TONE_IDX+2
                           0000B0   114     UFLASH_IDX=UBOUND_IDX+2
                           0000B2   115     UNTIL_IDX=UFLASH_IDX+2
                           0000B4   116     USR_IDX=UNTIL_IDX+2
                           0000B6   117     WAIT_IDX=USR_IDX+2
                           0000B8   118     WORDS_IDX=WAIT_IDX+2
                           0000BA   119     WRITE_IDX=WORDS_IDX+2
                           0000BC   120     XOR_IDX=WRITE_IDX+2
                           0000BE   121     SIZE_IDX=XOR_IDX+2 
                           0000C0   122     ON_IDX=SIZE_IDX+2 
                           0000C2   123     GET_IDX=ON_IDX+2
                           0000C4   124     CONST_IDX=GET_IDX+2
                           0000C6   125     EEFREE_IDX=CONST_IDX+2 
                                    126      
                                    127         
                                    128 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                     34 	.include "dbg_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;----------------------------------
                                     21 ;  macros used for debugging
                                     22 ;---------------------------------
                                     23 ;-------------------------------
                                     24 ;  macros used to help debugging
                                     25 ;-------------------------------
                                     26     
                           000009    27     DBG_CC=9
                           000008    28     DBG_A=8 
                           000006    29     DBG_X=6 
                           000004    30     DBG_Y=4 
                                     31     .macro _dbg_save_regs 
                                     32     .if DEBUG 
                                     33     push cc ; (9,sp)
                                     34     push a   ; (8,sp)
                                     35     pushw x  ; (6,sp)
                                     36     pushw y  ; (4,sp)
                                     37     ; save acc24 
                                     38     ld a,acc24 
                                     39     ldw x,acc16 
                                     40     pushw x 
                                     41     push a 
                                     42     .endif 
                                     43     .endm 
                                     44 
                                     45     .macro _dbg_restore_regs 
                                     46     ; restore acc24 
                                     47     .if DEBUG 
                                     48     pop a 
                                     49     popw x 
                                     50     ld acc24,a 
                                     51     ldw acc16,x 
                                     52     popw y 
                                     53     popw x 
                                     54     pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     55     pop cc 
                                     56     .endif 
                                     57     .endm 
                                     58 
                                     59     .macro _dbg_getc
                                     60     .if DEBUG  
                                     61     _dbg_save_regs 
                                     62     call getc
                                     63     ld (DBG_A,sp),a 
                                     64     _dbg_restore_regs
                                     65     .endif   
                                     66     .endm 
                                     67 
                                     68     .macro _dbg_putc
                                     69     .if DEBUG  
                                     70     push cc 
                                     71     call putc 
                                     72     pop cc 
                                     73     .endif 
                                     74     .endm 
                                     75 
                                     76     .macro _dbg_puts
                                     77     .if DEBUG  
                                     78     _dbg_save_regs
                                     79     call puts 
                                     80     _dbg_restore_regs
                                     81     .endif 
                                     82     .endm 
                                     83 
                                     84     .macro _dbg_prti24 
                                     85     .if DEBUG 
                                     86     _dbg_save_regs
                                     87     call prti24 
                                     88     _dbg_restore_regs
                                     89     .endif 
                                     90     .endm 
                                     91 
                                     92     .macro _dbg_prt_regs
                                     93     .if DEBUG 
                                     94     call print_registers
                                     95     .endif  
                                     96     .endm 
                                     97 
                                     98     .macro _dbg_peek addr 
                                     99     .if DEBUG 
                                    100     _dbg_save_regs 
                                    101     ldw x,addr 
                                    102     call peek     
                                    103     _dbg_restore_regs
                                    104     .endif 
                                    105     .endm 
                                    106 
                                    107     .macro _dbg_parser_init 
                                    108     .if DEBUG 
                                    109     _dbg_save_regs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                    110     call parser_init 
                                    111     _dbg_restore_regs
                                    112     .endif 
                                    113     .endm
                                    114 
                                    115     .macro _dbg_readln
                                    116     .if DEBUG 
                                    117     _dbg_save_regs
                                    118     call readln
                                    119     _dbg_restore_regs
                                    120     .endif 
                                    121     .endm
                                    122 
                                    123     .macro _dbg_number
                                    124     .if DEBUG 
                                    125     _dbg_save_regs
                                    126     call number 
                                    127     _dbg_restore_regs
                                    128     .endif 
                                    129     .endm  
                                    130 
                                    131     .macro _dbg_nextword
                                    132     .if DEBUG 
                                    133     _dbg_save_regs
                                    134     call get_token   
                                    135     _dbg_restore_regs
                                    136     .endif 
                                    137     .endm  
                                    138 
                                    139     .macro _dbg_dots 
                                    140     .if DEBUG 
                                    141     _dbg_save_regs
                                    142     call dots 
                                    143     _dbg_restore_regs
                                    144     .endif 
                                    145     .endm 
                                    146 
                                    147     .macro _dbg_trap
                                    148     bset flags,#FTRAP 
                                    149     trap 
                                    150     .endm 
                                    151 
                                    152     .macro _dbg_mark n  
                                    153     .if DEBUG 
                                    154     push cc
                                    155     push a 
                                    156     ld a,#n 
                                    157     call putc
                                    158     btjf UART1_SR,#UART_SR_TC,. 
                                    159     pop a 
                                    160     pop cc 
                                    161     .endif 
                                    162     .endm 
                                    163     
                                    164     .macro _dbg_prt_var var 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    165     .if DEBUG 
                                    166     _dbg_save_regs 
                                    167     ldw x,var 
                                    168     ldw acc16,x 
                                    169     clr acc24 
                                    170     clrw x 
                                    171     ld a,#16+128  
                                    172     call prti24
                                    173     ld a,#CR 
                                    174     call putc  
                                    175     _dbg_restore_regs
                                    176     .endif  
                                    177     .endm 
                                    178 
                                    179     .macro _dbg_show
                                    180     .if DEBUG  
                                    181     _dbg_save_regs 
                                    182     call show 
                                    183     _dbg_restore_regs
                                    184     .endif 
                                    185     .endm 
                                    186 
                                    187 
                                    188 
                                    189 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                     35   
                                     36 
                                     37 ;;-----------------------------------
                                     38     .area SSEG (ABS)
                                     39 ;; working buffers and stack at end of RAM. 	
                                     40 ;;-----------------------------------
      001668                         41     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001668                         42 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016B8                         43 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016B8                         44 pad:: .ds PAD_SIZE             ; working buffer
      001738                         45 xstack_full:: .ds XSTACK_SIZE   ; expression stack 
      001774                         46 xstack_unf:: ; xstack underflow 
      001774                         47 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         48 stack_unf: ; stack underflow ; control_stack bottom 
                                     49 
                                     50 ;;--------------------------------------
                                     51     .area HOME 
                                     52 ;; interrupt vector table at 0x8000
                                     53 ;;--------------------------------------
                                     54 
      000000 82 00 00 C3             55     int cold_start			; RESET vector 
                           000001    56 .if DEBUG
      000004 82 00 00 12             57 	int TrapHandler 		;TRAP  software interrupt
                           000000    58 .else
                                     59 	int NonHandledInterrupt ;TRAP  software interrupt
                                     60 .endif
      000008 82 00 00 00             61 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             62 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             63 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             64 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             65 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             66 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             67 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 44             68 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             69 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             70 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             71 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             72 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             73 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             74 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             75 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             76 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             77 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             78 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 D2             79 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             80 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             81 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             82 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             83 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 21             84 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             85 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             86 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             87 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             88 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             89 	int NonHandledInterrupt ;int28  not used
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      00007C 82 00 00 00             90 	int NonHandledInterrupt ;int29  not used
                                     91 
                                     92 ;---------------------------------------
                                     93     .area CODE
                                     94 ;---------------------------------------
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ; non handled interrupt 
                                     98 ; reset MCU
                                     99 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        100 NonHandledInterrupt:
      000000                        101 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                    102 
                                    103 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    104 ; auto wakeup from halt
                                    105 ; at iret, program continue 
                                    106 ; after hatl instruction
                                    107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        108 AWUHandler:
      000004 72 19 50 F0      [ 1]  109 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  110 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  111 	clr AWU_TBR 
      000011 80               [11]  112 	iret
                                    113 
                                    114 ;------------------------------------
                                    115 ; software interrupt handler  
                                    116 ;------------------------------------
                           000001   117 .if DEBUG 
      000012                        118 TrapHandler:
      000012 72 12 00 22      [ 1]  119 	bset flags,#FTRAP 
      000016 CD 04 C5         [ 4]  120 	call print_registers
      000019 CD 05 70         [ 4]  121 	call cmd_itf
      00001C 72 13 00 22      [ 1]  122 	bres flags,#FTRAP 	
      000020 80               [11]  123 	iret
                                    124 .endif 
                                    125 
                                    126 ;------------------------------
                                    127 ; TIMER 4 is used to maintain 
                                    128 ; a milliseconds 'ticks' counter
                                    129 ; and decrement 'timer' varaiable
                                    130 ; ticks range {0..2^23-1}
                                    131 ;--------------------------------
      000021                        132 Timer4UpdateHandler:
      000021 72 5F 53 42      [ 1]  133 	clr TIM4_SR 
      000025 C6 00 0F         [ 1]  134 	ld a,ticks 
      000028 CE 00 10         [ 2]  135 	ldw x,ticks+1
      00002B 1C 00 01         [ 2]  136 	addw x,#1 
      00002E A9 00            [ 1]  137 	adc a,#0 
      000030 2A 02            [ 1]  138 	jrpl 0$
                                    139 ; reset to 0 when negatif 
      000032 4F               [ 1]  140 	clr a 
      000033 5F               [ 1]  141 	clrw x 
      000034 C7 00 0F         [ 1]  142 0$:	ld ticks,a 
      000037 CF 00 10         [ 2]  143 	ldw ticks+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      00003A CE 00 12         [ 2]  144 	ldw x,timer
      00003D 27 04            [ 1]  145 	jreq 1$
      00003F 5A               [ 2]  146 	decw x 
      000040 CF 00 12         [ 2]  147 	ldw timer,x 
      000043                        148 1$:	
      000043 80               [11]  149 	iret 
                                    150 
                                    151 ;------------------------------------
                                    152 ; Triggered by pressing USER UserButton 
                                    153 ; on NUCLEO card.
                                    154 ; This is used to abort a progam lock 
                                    155 ; in infinite loop. 
                                    156 ;------------------------------------
      000044                        157 UserButtonHandler:
                                    158 ; wait button release
      000044 5F               [ 1]  159 	clrw x
      000045 5A               [ 2]  160 1$: decw x 
      000046 26 FD            [ 1]  161 	jrne 1$
      000048 72 09 50 15 F8   [ 2]  162 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    163 ; if MCU suspended by SLEEP resume program
      00004D 72 07 00 22 05   [ 2]  164     btjf flags,#FSLEEP,2$
      000052 72 17 00 22      [ 1]  165 	bres flags,#FSLEEP 
      000056 80               [11]  166 	iret
      000057                        167 2$:	
      000057                        168 user_interrupted:
      000057 72 00 00 22 02   [ 2]  169     btjt flags,#FRUN,4$
      00005C 20 0A            [ 2]  170 	jra UBTN_Handler_exit 
      00005E                        171 4$:	; program interrupted by user 
      00005E 72 11 00 22      [ 1]  172 	bres flags,#FRUN 
      000062 AE 00 70         [ 2]  173 	ldw x,#USER_ABORT
      000065 CD 09 A1         [ 4]  174 	call puts 
      000068                        175 UBTN_Handler_exit:
      000068 AE 17 FF         [ 2]  176     ldw x,#STACK_EMPTY 
      00006B 94               [ 1]  177     ldw sp,x
      00006C 9A               [ 1]  178 	rim 
      00006D CC 17 2C         [ 2]  179 5$:	jp warm_start
                                    180 
      000070 0A 50 72 6F 67 72 61   181 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    182 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    peripherals initialization
                                    185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    186 
                                    187 ;----------------------------------------
                                    188 ; inialize MCU clock 
                                    189 ; input:
                                    190 ;   A 		source  HSI | 1 HSE 
                                    191 ;   XL      CLK_CKDIVR , clock divisor 
                                    192 ; output:
                                    193 ;   none 
                                    194 ;----------------------------------------
      00008B                        195 clock_init:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      00008B C1 50 C3         [ 1]  196 	cp a,CLK_CMSR 
      00008E 27 0C            [ 1]  197 	jreq 2$ ; no switching required 
                                    198 ; select clock source 
      000090 72 12 50 C5      [ 1]  199 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000094 C7 50 C4         [ 1]  200 	ld CLK_SWR,a
      000097 C1 50 C3         [ 1]  201 1$:	cp a,CLK_CMSR
      00009A 26 FB            [ 1]  202 	jrne 1$
      00009C                        203 2$: 	
                                    204 ; HSI and cpu clock divisor 
      00009C 9F               [ 1]  205 	ld a,xl 
      00009D C7 50 C6         [ 1]  206 	ld CLK_CKDIVR,a  
      0000A0 81               [ 4]  207 	ret
                                    208 
                                    209 ;----------------------------------
                                    210 ; TIMER2 used as audio tone output 
                                    211 ; on port D:5.
                                    212 ; channel 1 configured as PWM mode 1 
                                    213 ;-----------------------------------  
                                    214 
      0000A1                        215 timer2_init:
      0000A1 72 1A 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000A5 35 60 53 05      [ 1]  217  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000A9 35 08 53 0C      [ 1]  218 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000AD 81               [ 4]  219 	ret 
                                    220 
                                    221 ;---------------------------------
                                    222 ; TIM4 is configured to generate an 
                                    223 ; interrupt every millisecond 
                                    224 ;----------------------------------
      0000AE                        225 timer4_init:
      0000AE 72 18 50 C7      [ 1]  226 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000B2 35 07 53 45      [ 1]  227 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B6 35 7D 53 46      [ 1]  228 	mov TIM4_ARR,#125 ; set for 1msec.
      0000BA 35 05 53 40      [ 1]  229 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BE 72 10 53 41      [ 1]  230 	bset TIM4_IER,#TIM4_IER_UIE
      0000C2 81               [ 4]  231 	ret
                                    232 
                                    233 ;-------------------------------------
                                    234 ;  initialization entry point 
                                    235 ;-------------------------------------
      0000C3                        236 cold_start:
                                    237 ;set stack 
      0000C3 AE 17 FF         [ 2]  238 	ldw x,#STACK_EMPTY
      0000C6 94               [ 1]  239 	ldw sp,x
                                    240 ; clear all ram 
      0000C7 7F               [ 1]  241 0$: clr (x)
      0000C8 5A               [ 2]  242 	decw x 
      0000C9 26 FC            [ 1]  243 	jrne 0$
                                    244 ; activate pull up on all inputs 
      0000CB A6 FF            [ 1]  245 	ld a,#255 
      0000CD C7 50 03         [ 1]  246 	ld PA_CR1,a 
      0000D0 C7 50 08         [ 1]  247 	ld PB_CR1,a 
      0000D3 C7 50 0D         [ 1]  248 	ld PC_CR1,a 
      0000D6 C7 50 12         [ 1]  249 	ld PD_CR1,a 
      0000D9 C7 50 17         [ 1]  250 	ld PE_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      0000DC C7 50 1C         [ 1]  251 	ld PF_CR1,a 
      0000DF C7 50 21         [ 1]  252 	ld PG_CR1,a 
      0000E2 C7 50 2B         [ 1]  253 	ld PI_CR1,a
                                    254 ; set LD2 pin as output 
      0000E5 72 1A 50 0D      [ 1]  255     bset PC_CR1,#LED2_BIT
      0000E9 72 1A 50 0E      [ 1]  256     bset PC_CR2,#LED2_BIT
      0000ED 72 1A 50 0C      [ 1]  257     bset PC_DDR,#LED2_BIT
      0000F1 72 1B 50 0A      [ 1]  258 	bres PC_ODR,#LED2_BIT 
                                    259 ; disable schmitt triggers on Arduino CN4 analog inputs
      0000F5 55 00 3F 54 07   [ 1]  260 	mov ADC_TDRL,0x3f
                                    261 ; disable peripherals clocks
                                    262 ;	clr CLK_PCKENR1 
                                    263 ;	clr CLK_PCKENR2
      0000FA 72 5F 50 F2      [ 1]  264 	clr AWU_TBR 
      0000FE 72 14 50 CA      [ 1]  265 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    266 ; select internal clock no divisor: 16 Mhz 	
      000102 A6 E1            [ 1]  267 	ld a,#CLK_SWR_HSI 
      000104 5F               [ 1]  268 	clrw x  
      000105 CD 00 8B         [ 4]  269     call clock_init 
      000108 CD 00 AE         [ 4]  270 	call timer4_init
      00010B CD 00 A1         [ 4]  271 	call timer2_init
                                    272 ; UART1 at 115200 BAUD
      00010E CD 08 FF         [ 4]  273 	call uart1_init
                                    274 ; activate PE_4 (user button interrupt)
      000111 72 18 50 18      [ 1]  275     bset PE_CR2,#USR_BTN_BIT 
                                    276 ; display system information
      000115 9A               [ 1]  277 	rim ; enable interrupts 
      000116 72 5C 00 17      [ 1]  278 	inc seedy+1 
      00011A 72 5C 00 15      [ 1]  279 	inc seedx+1 
      00011E CD 1C AB         [ 4]  280 	call func_eefree 
      000121 CD 1B E2         [ 4]  281 	call ubound 
      000124 CD 14 FC         [ 4]  282 	call clear_basic
      000127 CD 24 E0         [ 4]  283 	call beep_1khz  
      00012A CD 14 A9         [ 4]  284 	call system_information
      00012D                        285 2$:	
                                    286 ; check for application in flash memory 
      00012D CD 27 15         [ 4]  287 	call qsign 
      000130 27 03            [ 1]  288 	jreq run_app
      000132 CC 17 2C         [ 2]  289 	jp warm_start 
      000135                        290 run_app:
                                    291 ; run application in FLASH|EEPROM 
      000135 90 CE 17 73      [ 2]  292 	ldw y,XSTACK_EMPTY
      000139 CD 14 DA         [ 4]  293 	call warm_init
      00013C AE 36 04         [ 2]  294 	ldw x,#app 
      00013F CF 00 1B         [ 2]  295 	ldw txtbgn,x
      000142 72 BB 36 02      [ 2]  296 	addw x,app_size 
      000146 CF 00 1D         [ 2]  297 	ldw txtend,x 
      000149 AE 01 57         [ 2]  298 	ldw x,#AUTO_RUN 
      00014C CD 09 A1         [ 4]  299 	call puts 
      00014F CD 1D CF         [ 4]  300 	call program_info 
      000152 CC 24 84         [ 2]  301 	jp run_it_02  
      000155 20 FE            [ 2]  302     jra .  
                                    303 
      000157 20 61 75 74 6F 20 72   304 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic 
                                     21 ;;  format in registers: A:X 
                                     22 ;;      A  bits 23..16 
                                     23 ;;      X  bits 15..0 
                                     24 ;;  acc24 variable used for 
                                     25 ;;  computation 
                                     26 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     27 
                                     28 
                                     29     .area CODE 
                                     30 
                                     31 ;-------------------------------
                                     32 ; add24 A:X+acc24 
                                     33 ; add 24 bits integers 
                                     34 ;------------------------------
      00016A                         35 add24: ; ( i1 i2 -- i1 + i2 )
      00016A                         36     _xpop 
      00016A 90 F6            [ 1]    1     ld a,(y)
      00016C 93               [ 1]    2     ldw x,y 
      00016D EE 01            [ 2]    3     ldw x,(1,x)
      00016F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000173 89               [ 2]   37     pushw x  
      000174 88               [ 1]   38     push a  
      000175                         39     _at_top  
      000175 90 F6            [ 1]    1     ld a,(y)
      000177 93               [ 1]    2     ldw x,y 
      000178 EE 01            [ 2]    3     ldw x,(1,x)
      00017A 72 FB 02         [ 2]   40     addw x,(2,sp)
      00017D 19 01            [ 1]   41     adc a, (1,sp)
      00017F                         42     _store_top 
      00017F 90 F7            [ 1]    1     ld (y),a 
      000181 90 EF 01         [ 2]    2     ldw (1,y),x     
      000184                         43     _drop 3 
      000184 5B 03            [ 2]    1     addw sp,#3 
      000186 81               [ 4]   44     ret 
                                     45 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                     46 ;-------------------------------
                                     47 ; sub24 A:X-acc24 
                                     48 ; subtract 24 bits integers 
                                     49 ;------------------------------
      000187                         50 sub24: ; (i1 i2 -- i1-i2 ) 
      000187                         51     _xpop 
      000187 90 F6            [ 1]    1     ld a,(y)
      000189 93               [ 1]    2     ldw x,y 
      00018A EE 01            [ 2]    3     ldw x,(1,x)
      00018C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000190 89               [ 2]   52     pushw x 
      000191 88               [ 1]   53     push  a
      000192                         54     _at_top  
      000192 90 F6            [ 1]    1     ld a,(y)
      000194 93               [ 1]    2     ldw x,y 
      000195 EE 01            [ 2]    3     ldw x,(1,x)
      000197 72 F0 02         [ 2]   55     subw x,(2,sp) 
      00019A 12 01            [ 1]   56     sbc a, (1,sp)
      00019C                         57     _store_top  
      00019C 90 F7            [ 1]    1     ld (y),a 
      00019E 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001A1                         58     _drop 3 
      0001A1 5B 03            [ 2]    1     addw sp,#3 
      0001A3 81               [ 4]   59     ret 
                                     60 
                                     61 ;------------------------------
                                     62 ; cp24  i1 i2 -- 0x800000|0|0x010000
                                     63 ;------------------------------
      0001A4                         64 cp24:
      0001A4                         65     _xpop 
      0001A4 90 F6            [ 1]    1     ld a,(y)
      0001A6 93               [ 1]    2     ldw x,y 
      0001A7 EE 01            [ 2]    3     ldw x,(1,x)
      0001A9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001AD C7 00 0C         [ 1]   66     ld acc24,a 
      0001B0 CF 00 0D         [ 2]   67     ldw acc16,x
      0001B3                         68     _at_top 
      0001B3 90 F6            [ 1]    1     ld a,(y)
      0001B5 93               [ 1]    2     ldw x,y 
      0001B6 EE 01            [ 2]    3     ldw x,(1,x)
      0001B8 72 B0 00 0D      [ 2]   69     subw x,acc16
      0001BC C2 00 0C         [ 1]   70     sbc a,acc24
      0001BF 2F 08            [ 1]   71     jrslt 1$
      0001C1 26 0A            [ 1]   72     jrne 2$
      0001C3 5D               [ 2]   73     tnzw x 
      0001C4 26 07            [ 1]   74     jrne 2$
      0001C6 4F               [ 1]   75     clr a 
      0001C7 20 06            [ 2]   76     jra 9$ 
      0001C9                         77 1$: ; i1 < i2 
      0001C9 A6 FF            [ 1]   78     ld a,#255
      0001CB 20 02            [ 2]   79     jra 9$ 
      0001CD                         80 2$: ; i1 > i2 
      0001CD A6 01            [ 1]   81     ld a,#1 
      0001CF 5F               [ 1]   82 9$: clrw x
      0001D0                         83      _store_top 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      0001D0 90 F7            [ 1]    1     ld (y),a 
      0001D2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001D5 81               [ 4]   84     ret 
                                     85 
                                     86 ;-------------------------------
                                     87 ; cp24_ax 
                                     88 ; compare acc24 with A:X 
                                     89 ;-------------------------------
      0001D6                         90 cp24_ax:
      0001D6 88               [ 1]   91     push a 
      0001D7 C3 00 0D         [ 2]   92     cpw x,acc16 
      0001DA C2 00 0C         [ 1]   93     sbc a,acc24
      0001DD 84               [ 1]   94     pop a 
      0001DE 81               [ 4]   95     ret 
                                     96 
                                     97 
                                     98 ;-------------------------------
                                     99 ; abs24 
                                    100 ; abolute value of top  
                                    101 ;-------------------------------
      0001DF                        102 abs24: ; ( i -- u )
      0001DF 90 F6            [ 1]  103     ld a,(y)
      0001E1 A1 80            [ 1]  104     cp a,#0x80 
      0001E3 2A 0E            [ 1]  105     jrpl neg24 ; negative integer
      0001E5 81               [ 4]  106     ret  
                                    107 
                                    108 ;----------------------------
                                    109 ;  one's compleement 
                                    110 ;----------------------------
      0001E6                        111 cpl24:  ; i -- ~i 
      0001E6                        112     _at_top 
      0001E6 90 F6            [ 1]    1     ld a,(y)
      0001E8 93               [ 1]    2     ldw x,y 
      0001E9 EE 01            [ 2]    3     ldw x,(1,x)
      0001EB 43               [ 1]  113     cpl a 
      0001EC 53               [ 2]  114     cplw x 
      0001ED                        115     _store_top 
      0001ED 90 F7            [ 1]    1     ld (y),a 
      0001EF 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001F2 81               [ 4]  116     ret 
                                    117 
                                    118 ;----------------------------    
                                    119 ; two'2 complement of top  
                                    120 ;---------------------------
      0001F3                        121 neg24: ; (i -- -i )
      0001F3                        122     _at_top
      0001F3 90 F6            [ 1]    1     ld a,(y)
      0001F5 93               [ 1]    2     ldw x,y 
      0001F6 EE 01            [ 2]    3     ldw x,(1,x)
      0001F8 43               [ 1]  123     cpl  a  
      0001F9 53               [ 2]  124     cplw x 
      0001FA 1C 00 01         [ 2]  125     addw x,#1
      0001FD A9 00            [ 1]  126     adc a,#0
      0001FF                        127     _store_top  
      0001FF 90 F7            [ 1]    1     ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000201 90 EF 01         [ 2]    2     ldw (1,y),x     
      000204 81               [ 4]  128 9$: ret 
                                    129 
                                    130 ;-----------------------------
                                    131 ; negate integer in A:X 
                                    132 ;----------------------------
      000205                        133 neg_ax:
      000205 43               [ 1]  134     cpl  a  
      000206 53               [ 2]  135     cplw x 
      000207 1C 00 01         [ 2]  136     addw x,#1
      00020A A9 00            [ 1]  137     adc a,#0
      00020C 81               [ 4]  138     ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ;  two's complement of acc24 
                                    142 ;-------------------------------------
      00020D                        143 neg_acc24: ; 
      00020D 72 53 00 0C      [ 1]  144     cpl acc24 
      000211 72 53 00 0D      [ 1]  145     cpl acc16 
      000215 72 53 00 0E      [ 1]  146     cpl acc8
      000219 72 5C 00 0E      [ 1]  147     inc acc8 
      00021D 26 0A            [ 1]  148     jrne 9$
      00021F 72 5C 00 0D      [ 1]  149     inc acc16 
      000223 26 04            [ 1]  150     jrne 9$
      000225 72 5C 00 0C      [ 1]  151     inc acc24 
      000229 81               [ 4]  152 9$: ret 
                                    153 
                                    154 
                                    155 ;--------------------------------------
                                    156 ; unsigned multiply uint24_t by uint8_t
                                    157 ; input:
                                    158 ;	acc24	uint24_t 
                                    159 ;   A		uint8_t
                                    160 ; output:
                                    161 ;   acc24   A*acc24
                                    162 ;      A    overflow, bits 31..24 
                                    163 ;-------------------------------------
                                    164 ; local variables offset  on sp
                           000001   165 	U8   = 1   ; A pushed on stack
                           000001   166 	VSIZE = 1 
      00022A                        167 mulu24_8:
      00022A 89               [ 2]  168 	pushw x    ; save X
                                    169 	; local variable
      00022B 88               [ 1]  170 	push a     ; U8
      00022C 72 5F 00 0B      [ 1]  171 	clr acc32 
                                    172 ; multiply bits 7..0 * U8   	
      000230 97               [ 1]  173 	ld xl,a 
      000231 C6 00 0E         [ 1]  174 	ld a,acc8 
      000234 42               [ 4]  175 	mul x,a 
      000235 C6 00 0D         [ 1]  176 	ld a, acc16 
      000238 CF 00 0D         [ 2]  177 	ldw acc16,x
                                    178 ; multiply middle byte, bits 15..8 * U8  	
      00023B 97               [ 1]  179 	ld xl,a 
      00023C 7B 01            [ 1]  180 	ld a,(U8,sp)
      00023E 42               [ 4]  181 	mul x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00023F C6 00 0C         [ 1]  182 	ld a,acc24
      000242 72 5F 00 0C      [ 1]  183 	clr acc24  
      000246 72 BB 00 0C      [ 2]  184 	addw x,acc24
      00024A CF 00 0C         [ 2]  185 	ldw acc24,x 
                                    186 ; multiply  MSB, bits 23..16 * U8 
      00024D 97               [ 1]  187 	ld xl,a 
      00024E 7B 01            [ 1]  188 	ld a,(U8,sp)
      000250 42               [ 4]  189 	mul x,a
      000251 72 BB 00 0B      [ 2]  190 	addw x,acc32  
      000255 CF 00 0B         [ 2]  191 	ldw acc32,x 
      000258 9E               [ 1]  192 	ld a,xh 
      000259                        193 	_drop VSIZE  
      000259 5B 01            [ 2]    1     addw sp,#VSIZE 
      00025B 85               [ 2]  194 	popw x 
      00025C 81               [ 4]  195 	ret 
                                    196 
                                    197 
                                    198 ;-------------------------------
                                    199 ; mul24 i1 i2 -- i1*i2  
                                    200 ; multiply 24 bits integers 
                                    201 ;------------------------------
                           000001   202     PROD=1 
                           000004   203     N1=4
                           000007   204     N2=7
                           00000A   205     PROD_SIGN=10
                           00000A   206     VSIZE=10 
      00025D                        207 mul24:
      00025D                        208     _vars VSIZE
      00025D 52 0A            [ 2]    1     sub sp,#VSIZE 
      00025F 0F 0A            [ 1]  209     clr (PROD_SIGN,sp)
      000261 0F 01            [ 1]  210     clr (PROD,sp)
      000263 5F               [ 1]  211     clrw x 
      000264 1F 02            [ 2]  212     ldw (PROD+1,sp),x
      000266                        213     _xpop 
      000266 90 F6            [ 1]    1     ld a,(y)
      000268 93               [ 1]    2     ldw x,y 
      000269 EE 01            [ 2]    3     ldw x,(1,x)
      00026B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00026F 4D               [ 1]  214     tnz a 
      000270 2A 05            [ 1]  215     jrpl 0$
      000272 03 0A            [ 1]  216     cpl (PROD_SIGN,sp)
      000274 CD 02 05         [ 4]  217     call neg_ax 
      000277                        218 0$:    
      000277 6B 04            [ 1]  219     ld (N1,sp),a 
      000279 1F 05            [ 2]  220     ldw (N1+1,sp),x
      00027B                        221     _at_top 
      00027B 90 F6            [ 1]    1     ld a,(y)
      00027D 93               [ 1]    2     ldw x,y 
      00027E EE 01            [ 2]    3     ldw x,(1,x)
      000280 4D               [ 1]  222     tnz a 
      000281 2A 09            [ 1]  223     jrpl 2$ 
      000283 03 0A            [ 1]  224     cpl (PROD_SIGN,sp) 
      000285 CD 02 05         [ 4]  225     call neg_ax
      000288 6B 07            [ 1]  226     ld (N2,sp),a 
      00028A 1F 08            [ 2]  227     ldw (N2+1,sp),x   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00028C                        228 2$: 
      00028C C7 00 0C         [ 1]  229     ld acc24,a 
      00028F CF 00 0D         [ 2]  230     ldw acc16,x 
      000292 7B 06            [ 1]  231     ld a,(N1+2,sp); least byte     
      000294 27 12            [ 1]  232     jreq 4$
      000296 CD 02 2A         [ 4]  233     call mulu24_8
      000299 4D               [ 1]  234     tnz a 
      00029A 26 60            [ 1]  235     jrne 8$ ; overflow 
      00029C CE 00 0D         [ 2]  236     ldw x,acc16  
      00029F C6 00 0C         [ 1]  237     ld a,acc24
      0002A2 2B 58            [ 1]  238     jrmi 8$ ; overflow  
      0002A4 6B 01            [ 1]  239     ld (PROD,sp),a
      0002A6 1F 02            [ 2]  240     ldw (PROD+1,sp),x 
      0002A8                        241 4$:
      0002A8 7B 07            [ 1]  242     ld a,(N2,sp) 
      0002AA 1E 08            [ 2]  243     ldw x,(N2+1,sp)
      0002AC C7 00 0C         [ 1]  244     ld acc24,a 
      0002AF CF 00 0D         [ 2]  245     ldw acc16,x 
      0002B2 7B 05            [ 1]  246     ld a,(N1+1,sp); middle byte     
      0002B4 27 1F            [ 1]  247     jreq 5$
      0002B6 CD 02 2A         [ 4]  248     call mulu24_8
      0002B9 4D               [ 1]  249     tnz a 
      0002BA 26 40            [ 1]  250     jrne 8$ ; overflow 
      0002BC C6 00 0C         [ 1]  251     ld a,acc24 
      0002BF 26 3B            [ 1]  252     jrne 8$  ; overflow 
      0002C1 CE 00 0D         [ 2]  253     ldw x,acc16  
      0002C4 72 FB 01         [ 2]  254     addw x,(PROD,sp)
      0002C7 29 33            [ 1]  255     jrv 8$ ; overflow
      0002C9 1F 01            [ 2]  256     ldw (PROD,sp),x 
      0002CB 7B 07            [ 1]  257     ld a,(N2,sp)
      0002CD 1E 08            [ 2]  258     ldw x,(N2+1,sp)
      0002CF C7 00 0C         [ 1]  259     ld acc24,a 
      0002D2 CF 00 0D         [ 2]  260     ldw acc16,x 
      0002D5                        261 5$:
      0002D5 7B 04            [ 1]  262     ld a,(N1,sp) ; high byte 
      0002D7 27 16            [ 1]  263     jreq 6$
      0002D9 CD 02 2A         [ 4]  264     call mulu24_8
      0002DC 4D               [ 1]  265     tnz a 
      0002DD 26 1D            [ 1]  266     jrne 8$ ; overflow 
      0002DF CE 00 0C         [ 2]  267     ldw x,acc24 
      0002E2 26 18            [ 1]  268     jrne 8$ ; overflow 
      0002E4 C6 00 0E         [ 1]  269     ld a,acc8 
      0002E7 2B 13            [ 1]  270     jrmi 8$ ; overflow 
      0002E9 1B 01            [ 1]  271     add a,(PROD,sp)
      0002EB 6B 01            [ 1]  272     ld (PROD,sp),a 
      0002ED 29 0D            [ 1]  273     jrv 8$ ; overflow 
      0002EF                        274 6$:
      0002EF 7B 01            [ 1]  275     ld a,(PROD,sp)
      0002F1 1E 02            [ 2]  276     ldw x,(PROD+1,sp)
      0002F3 0D 0A            [ 1]  277     tnz (PROD_SIGN,sp)
      0002F5 27 0A            [ 1]  278     jreq 9$
      0002F7 CD 02 05         [ 4]  279     call neg_ax 
      0002FA 20 05            [ 2]  280     jra 9$ 
      0002FC                        281 8$: ; overflow
      0002FC A6 10            [ 1]  282     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      0002FE CC 16 A2         [ 2]  283     jp tb_error 
      000301                        284 9$:    
      000301                        285     _store_top 
      000301 90 F7            [ 1]    1     ld (y),a 
      000303 90 EF 01         [ 2]    2     ldw (1,y),x     
      000306                        286     _drop VSIZE 
      000306 5B 0A            [ 2]    1     addw sp,#VSIZE 
      000308 81               [ 4]  287     ret 
                                    288 
                                    289 ;-------------------------------------
                                    290 ; divide uint24_t by uint8_t
                                    291 ; input:
                                    292 ;	acc24	dividend
                                    293 ;   A 		divisor
                                    294 ; output:
                                    295 ;   acc24	quotient
                                    296 ;   A		remainder
                                    297 ;------------------------------------- 
                                    298 ; offset  on sp of arguments and locals
                           000001   299 	U8   = 1   ; divisor on stack
                           000001   300 	VSIZE =1
      000309                        301 divu24_8:
      000309 89               [ 2]  302 	pushw x ; save x
      00030A 88               [ 1]  303 	push a 
                                    304 	; ld dividend UU:MM bytes in X
      00030B CE 00 0C         [ 2]  305 	ldw x,acc24
      00030E 7B 01            [ 1]  306 	ld a,(U8,SP) ; divisor
      000310 62               [ 2]  307 	div x,a ; UU:MM/U8
      000311 88               [ 1]  308 	push a  ;save remainder
      000312 CF 00 0C         [ 2]  309     ldw acc24,x ; quotient 
      000315 84               [ 1]  310 	pop a
      000316 95               [ 1]  311 	ld xh,a
      000317 C6 00 0E         [ 1]  312 	ld a,acc8
      00031A 97               [ 1]  313 	ld xl,a
      00031B 7B 01            [ 1]  314 	ld a,(U8,sp) ; divisor
      00031D 62               [ 2]  315 	div x,a  ; R:LL/U8
      00031E 6B 01            [ 1]  316 	ld (U8,sp),a ; save remainder
      000320 9F               [ 1]  317 	ld a,xl
      000321 C7 00 0E         [ 1]  318 	ld acc8,a
      000324 84               [ 1]  319 	pop a
      000325 85               [ 2]  320 	popw x
      000326 81               [ 4]  321 	ret
                                    322 
                                    323 
                                    324 ;-------------------------------
                                    325 ; div24 N/T   
                                    326 ; divide 24 bits integers
                                    327 ;  i1 i2 -- i1/i2 
                                    328 ;------------------------------
                           000001   329     DIVISOR=1
                           000004   330     CNTR=4
                           000005   331     QSIGN=5
                           000006   332     RSIGN=6 
                           000006   333     VSIZE=6 
      000327                        334 div24:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000327                        335     _vars VSIZE 
      000327 52 06            [ 2]    1     sub sp,#VSIZE 
      000329 0F 06            [ 1]  336     clr (RSIGN,sp)
      00032B 0F 05            [ 1]  337     clr (QSIGN,sp)
      00032D                        338     _xpop 
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000336 4D               [ 1]  339     tnz a 
      000337 2A 05            [ 1]  340     jrpl 0$ 
      000339 03 05            [ 1]  341     cpl (QSIGN,sp)
      00033B CD 02 05         [ 4]  342     call neg_ax
      00033E                        343 0$:
      00033E 6B 01            [ 1]  344     ld  (DIVISOR,sp),a
      000340 1F 02            [ 2]  345     ldw (DIVISOR+1,sp),x
      000342 1A 02            [ 1]  346     or a,(DIVISOR+1,sp)
      000344 1A 03            [ 1]  347     or a,(DIVISOR+2,sp)
      000346 26 05            [ 1]  348     jrne 1$ 
      000348 A6 04            [ 1]  349     ld a,#ERR_DIV0 
      00034A CC 16 A2         [ 2]  350     jp tb_error 
      00034D                        351 1$: 
      00034D                        352     _at_top
      00034D 90 F6            [ 1]    1     ld a,(y)
      00034F 93               [ 1]    2     ldw x,y 
      000350 EE 01            [ 2]    3     ldw x,(1,x)
      000352 4D               [ 1]  353     tnz a 
      000353 2A 07            [ 1]  354     jrpl 2$
      000355 CD 02 05         [ 4]  355     call neg_ax
      000358 03 05            [ 1]  356     cpl (QSIGN,sp)
      00035A 03 06            [ 1]  357     cpl (RSIGN,sp)
      00035C                        358 2$: 
      00035C C7 00 0C         [ 1]  359     ld acc24,a 
      00035F CF 00 0D         [ 2]  360     ldw acc16,x 
      000362 A6 18            [ 1]  361     ld a,#24 
      000364 6B 04            [ 1]  362     ld (CNTR,sp),a
      000366 7B 01            [ 1]  363     ld a,(DIVISOR,sp)
      000368 1E 02            [ 2]  364     ldw x,(DIVISOR+1,sp)
      00036A CD 01 D6         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00036D 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00036F C6 00 0C         [ 1]  368     ld a,acc24 
      000372 CE 00 0D         [ 2]  369     ldw x,acc16 
      000375 72 5F 00 0C      [ 1]  370     clr acc24 
      000379 72 5F 00 0D      [ 1]  371     clr acc16 
      00037D 72 5F 00 0E      [ 1]  372     clr acc8 
      000381 20 2E            [ 2]  373     jra 6$
      000383                        374 22$:     
      000383 4F               [ 1]  375     clr a 
      000384 5F               [ 1]  376     clrw x 
      000385 98               [ 1]  377     rcf  
      000386                        378 3$: 
      000386 72 59 00 0E      [ 1]  379     rlc acc8 
      00038A 72 59 00 0D      [ 1]  380     rlc acc16
      00038E 72 59 00 0C      [ 1]  381     rlc acc24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000392 59               [ 2]  382     rlcw x  
      000393 49               [ 1]  383     rlc a
      000394 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000397 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000399 24 05            [ 1]  386     jrnc 5$
      00039B 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      00039E 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      0003A0                        389 5$: ; shift carry in QUOTIENT 
      0003A0 8C               [ 1]  390     ccf
      0003A1 0A 04            [ 1]  391     dec (CNTR,sp)
      0003A3 26 E1            [ 1]  392     jrne 3$ 
      0003A5 72 59 00 0E      [ 1]  393     rlc acc8 
      0003A9 72 59 00 0D      [ 1]  394     rlc acc16 
      0003AD 72 59 00 0B      [ 1]  395     rlc acc32 
      0003B1                        396 6$:    
      0003B1 6B 01            [ 1]  397     ld (DIVISOR,sp),a 
      0003B3 1F 02            [ 2]  398     ldw (DIVISOR+1,sp),x 
      0003B5 C6 00 0C         [ 1]  399     ld a,acc24 
      0003B8 CE 00 0D         [ 2]  400     ldw x,acc16 
      0003BB 0D 05            [ 1]  401     tnz (QSIGN,sp)
      0003BD 27 03            [ 1]  402     jreq 8$
      0003BF CD 02 05         [ 4]  403     call neg_ax 
      0003C2                        404 8$: 
      0003C2                        405     _store_top 
      0003C2 90 F7            [ 1]    1     ld (y),a 
      0003C4 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003C7 7B 01            [ 1]  406     ld a,(DIVISOR,sp)
      0003C9 1E 02            [ 2]  407     ldw x,(DIVSOR+1,sp)
      0003CB                        408 81$:
      0003CB 0D 06            [ 1]  409     tnz (RSIGN,sp)
      0003CD 27 03            [ 1]  410     jreq 9$
      0003CF CD 02 05         [ 4]  411     call neg_ax       
      0003D2                        412 9$: _drop VSIZE 
      0003D2 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003D4 81               [ 4]  413     ret 
                                    414 
                                    415 
                                    416 ;-------------------------------
                                    417 ; mod24 A:X % acc24 
                                    418 ; remainder 24 bits integers 
                                    419 ; input:
                                    420 ;    acc24   dividend 
                                    421 ;    A:X     divisor 
                                    422 ; output:
                                    423 ;    acc24   acc24 % A:X 
                                    424 ;------------------------------
      0003D5                        425 mod24:
      0003D5 CD 03 27         [ 4]  426     call div24 
      0003D8                        427     _store_top  ; replace quotient by remainder 
      0003D8 90 F7            [ 1]    1     ld (y),a 
      0003DA 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003DD 81               [ 4]  428     ret 
                                    429 
                                    430 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;;;;;;;;;;;;;;;;;;;
                                     22 
                           000001    23 .if DEBUG 
                                     24 
                                     25     .area CODE
                                     26 
                                     27 ;---------------------------------
                                     28 ;; print actual registers states 
                                     29 ;; as pushed on stack 
                                     30 ;; {Y,X,CC,A}
                                     31 ;---------------------------------
      0003DE                         32 	_argofs 0  
                           000002     1     ARG_OFS=2+0 
      0003DE                         33 	_arg R_Y 1 
                           000003     1     R_Y=ARG_OFS+1 
      0003DE                         34 	_arg R_X 3
                           000005     1     R_X=ARG_OFS+3 
      0003DE                         35 	_arg R_A 5
                           000007     1     R_A=ARG_OFS+5 
      0003DE                         36 	_arg R_CC 6
                           000008     1     R_CC=ARG_OFS+6 
      0003DE                         37 prt_regs::
      0003DE AE 04 21         [ 2]   38 	ldw x,#regs_state 
      0003E1 CD 09 A1         [ 4]   39 	call puts
                                     40 ; register PC
      0003E4 16 01            [ 2]   41 	ldw y,(1,sp)
      0003E6 AE 05 55         [ 2]   42 	ldw x,#REG_EPC 
      0003E9 CD 04 A6         [ 4]   43 	call prt_reg16 
                                     44 ; register CC 
      0003EC 7B 08            [ 1]   45 	ld a,(R_CC,sp)
      0003EE AE 05 66         [ 2]   46 	ldw x,#REG_CC 
      0003F1 CD 04 84         [ 4]   47 	call prt_reg8 
                                     48 ; register A 
      0003F4 7B 07            [ 1]   49 	ld a,(R_A,sp)
      0003F6 AE 05 62         [ 2]   50 	ldw x,#REG_A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0003F9 CD 04 84         [ 4]   51 	call prt_reg8 
                                     52 ; register X 
      0003FC 16 05            [ 2]   53 	ldw y,(R_X,sp)
      0003FE AE 05 5E         [ 2]   54 	ldw x,#REG_X 
      000401 CD 04 A6         [ 4]   55 	call prt_reg16 
                                     56 ; register Y 
      000404 16 03            [ 2]   57 	ldw y,(R_Y,sp)
      000406 AE 05 5A         [ 2]   58 	ldw x,#REG_Y 
      000409 CD 04 A6         [ 4]   59 	call prt_reg16 
                                     60 ; register SP 
      00040C 90 96            [ 1]   61 	ldw y,sp
      00040E 72 A9 00 08      [ 2]   62 	addw y,#6+ARG_OFS  
      000412 AE 05 6B         [ 2]   63 	ldw x,#REG_SP
      000415 CD 04 A6         [ 4]   64 	call prt_reg16
      000418 A6 0D            [ 1]   65 	ld a,#CR 
      00041A CD 09 44         [ 4]   66 	call putc
      00041D CD 09 44         [ 4]   67 	call putc   
      000420 81               [ 4]   68 	ret 
                                     69 
                                     70 
      000421 0A 72 65 67 69 73 74    71 regs_state: .asciz "\nregisters state\n--------------------\n"
             65 72 73 20 73 74 61
             74 65 0A 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 0A 00
                                     72 
                                     73 
                                     74 ;--------------------
                                     75 ; print content at address in hex.
                                     76 ; input:
                                     77 ;   X 	address to peek 
                                     78 ; output:
                                     79 ;	none 
                                     80 ;--------------------	
      000448                         81 prt_peek::
      000448 89               [ 2]   82 	pushw x 
      000449 35 10 00 0A      [ 1]   83 	mov base,#16 
      00044D CD 17 F6         [ 4]   84 	call prt_i16  
      000450 A6 3A            [ 1]   85 	ld a,#': 
      000452 CD 09 44         [ 4]   86 	call putc 
      000455 A6 20            [ 1]   87 	ld a,#SPACE 
      000457 CD 09 44         [ 4]   88 	call putc 
      00045A 85               [ 2]   89 	popw x 
      00045B F6               [ 1]   90 	ld a,(x)
      00045C 5F               [ 1]   91 	clrw x 
      00045D 97               [ 1]   92 	ld xl,a 
      00045E 35 0A 00 0A      [ 1]   93 	mov base,#10 
      000462 CD 17 F6         [ 4]   94 	call prt_i16 
      000465 81               [ 4]   95 	ret 
                                     96 
                                     97 ;----------------------------------------
                                     98 ;   DEBUG support functions
                                     99 ;----------------------------------------
                                    100 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                    101 ; turn LED on 
      000466                        102 ledon:
      000466 72 1A 50 0A      [ 1]  103     bset PC_ODR,#LED2_BIT
      00046A 81               [ 4]  104     ret 
                                    105 
                                    106 ; turn LED off 
      00046B                        107 ledoff:
      00046B 72 1B 50 0A      [ 1]  108     bres PC_ODR,#LED2_BIT 
      00046F 81               [ 4]  109     ret 
                                    110 
                                    111 ; invert LED status 
      000470                        112 ledtoggle:
      000470 A6 20            [ 1]  113     ld a,#LED2_MASK
      000472 C8 50 0A         [ 1]  114     xor a,PC_ODR
      000475 C7 50 0A         [ 1]  115     ld PC_ODR,a
      000478 81               [ 4]  116     ret 
                                    117 
      000479                        118 left_paren:
      000479 A6 20            [ 1]  119 	ld a,#SPACE 
      00047B CD 09 44         [ 4]  120 	call putc
      00047E A6 28            [ 1]  121 	ld a,#'( 
      000480 CD 09 44         [ 4]  122 	call putc 	
      000483 81               [ 4]  123 	ret 
                                    124 
                                    125 ;------------------------------
                                    126 ; print 8 bit register 
                                    127 ; input:
                                    128 ;   X  point to register name 
                                    129 ;   A  register value to print 
                                    130 ; output:
                                    131 ;   none
                                    132 ;------------------------------- 
      000484                        133 prt_reg8:
      000484 88               [ 1]  134 	push a 
      000485 CD 09 A1         [ 4]  135 	call puts 
      000488 7B 01            [ 1]  136 	ld a,(1,sp) 
      00048A 5F               [ 1]  137 	clrw x 
      00048B 97               [ 1]  138 	ld xl,a 
      00048C 35 10 00 0A      [ 1]  139 	mov base,#16
      000490 CD 17 F6         [ 4]  140 	call prt_i16  
      000493 CD 04 79         [ 4]  141 	call left_paren 
      000496 84               [ 1]  142 	pop a 
      000497 5F               [ 1]  143 	clrw x 
      000498 97               [ 1]  144 	ld xl,a 
      000499 35 0A 00 0A      [ 1]  145 	mov base,#10 
      00049D CD 17 F6         [ 4]  146 	call prt_i16  
      0004A0 A6 29            [ 1]  147 	ld a,#') 
      0004A2 CD 09 44         [ 4]  148 	call putc
      0004A5 81               [ 4]  149 	ret
                                    150 
                                    151 ;--------------------------------
                                    152 ; print 16 bits register 
                                    153 ; input:
                                    154 ;   X   point register name 
                                    155 ;   Y   register value to print 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                    156 ; output:
                                    157 ;  none
                                    158 ;--------------------------------
      0004A6                        159 prt_reg16: 
      0004A6 90 89            [ 2]  160 	pushw y 
      0004A8 CD 09 A1         [ 4]  161 	call puts 
      0004AB 1E 01            [ 2]  162 	ldw x,(1,sp) 
      0004AD 35 10 00 0A      [ 1]  163 	mov base,#16 
      0004B1 CD 17 F6         [ 4]  164 	call prt_i16  
      0004B4 CD 04 79         [ 4]  165 	call left_paren 
      0004B7 85               [ 2]  166 	popw x 
      0004B8 35 0A 00 0A      [ 1]  167 	mov base,#10 
      0004BC CD 17 F6         [ 4]  168 	call prt_i16  
      0004BF A6 29            [ 1]  169 	ld a,#') 
      0004C1 CD 09 44         [ 4]  170 	call putc
      0004C4 81               [ 4]  171 	ret 
                                    172 
                                    173 ;------------------------------------
                                    174 ; print registers contents saved on
                                    175 ; stack by trap interrupt.
                                    176 ;------------------------------------
      0004C5                        177 print_registers:
      0004C5 AE 05 18         [ 2]  178 	ldw x,#STATES
      0004C8 CD 09 A1         [ 4]  179 	call puts
                                    180 ; print EPC 
      0004CB AE 05 55         [ 2]  181 	ldw x, #REG_EPC
      0004CE CD 09 A1         [ 4]  182 	call puts 
      0004D1 7B 0B            [ 1]  183 	ld a, (11,sp)
      0004D3 C7 00 0E         [ 1]  184 	ld acc8,a 
      0004D6 7B 0A            [ 1]  185 	ld a, (10,sp) 
      0004D8 C7 00 0D         [ 1]  186 	ld acc16,a 
      0004DB 7B 09            [ 1]  187 	ld a,(9,sp) 
      0004DD C7 00 0C         [ 1]  188 	ld acc24,a
      0004E0 5F               [ 1]  189 	clrw x  
      0004E1 A6 10            [ 1]  190 	ld a,#16
      0004E3 CD 18 0D         [ 4]  191 	call prt_acc24  
                                    192 ; print X
      0004E6 AE 05 5E         [ 2]  193 	ldw x,#REG_X
      0004E9 16 05            [ 2]  194 	ldw y,(5,sp)
      0004EB CD 04 A6         [ 4]  195 	call prt_reg16  
                                    196 ; print Y 
      0004EE AE 05 5A         [ 2]  197 	ldw x,#REG_Y
      0004F1 16 07            [ 2]  198 	ldw y, (7,sp)
      0004F3 CD 04 A6         [ 4]  199 	call prt_reg16  
                                    200 ; print A 
      0004F6 AE 05 62         [ 2]  201 	ldw x,#REG_A
      0004F9 7B 04            [ 1]  202 	ld a, (4,sp) 
      0004FB CD 04 84         [ 4]  203 	call prt_reg8
                                    204 ; print CC 
      0004FE AE 05 66         [ 2]  205 	ldw x,#REG_CC 
      000501 7B 03            [ 1]  206 	ld a, (3,sp) 
      000503 CD 04 84         [ 4]  207 	call prt_reg8 
                                    208 ; print SP 
      000506 AE 05 6B         [ 2]  209 	ldw x,#REG_SP
      000509 90 96            [ 1]  210 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00050B 72 A9 00 0C      [ 2]  211 	addw y,#12
      00050F CD 04 A6         [ 4]  212 	call prt_reg16  
      000512 A6 0A            [ 1]  213 	ld a,#'\n' 
      000514 CD 09 44         [ 4]  214 	call putc
      000517 81               [ 4]  215 	ret
                                    216 
      000518 0A 52 65 67 69 73 74   217 STATES:  .asciz "\nRegisters state at abort point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 61
             62 6F 72 74 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      000555 45 50 43 3A 00         218 REG_EPC: .asciz "EPC:"
      00055A 0A 59 3A 00            219 REG_Y:   .asciz "\nY:" 
      00055E 0A 58 3A 00            220 REG_X:   .asciz "\nX:"
      000562 0A 41 3A 00            221 REG_A:   .asciz "\nA:" 
      000566 0A 43 43 3A 00         222 REG_CC:  .asciz "\nCC:"
      00056B 0A 53 50 3A 00         223 REG_SP:  .asciz "\nSP:"
                                    224 
                                    225 ;----------------------------
                                    226 ; command interface
                                    227 ; only 3 commands:
                                    228 ;  'q' to resume application
                                    229 ;  'p [addr]' to print memory values 
                                    230 ;  's addr' to print string 
                                    231 ;----------------------------
                                    232 ;local variable 
                           000001   233 	PSIZE=1
                           000001   234 	VSIZE=1 
      000570                        235 cmd_itf:
      000570 52 01            [ 2]  236 	sub sp,#VSIZE 
      000572 72 5F 00 18      [ 1]  237 	clr farptr 
      000576 72 5F 00 19      [ 1]  238 	clr farptr+1 
      00057A 72 5F 00 1A      [ 1]  239 	clr farptr+2  
      00057E                        240 repl:
      00057E A6 0D            [ 1]  241 	ld a,#CR 
      000580 CD 09 44         [ 4]  242 	call putc 
      000583 A6 3F            [ 1]  243 	ld a,#'? 
      000585 CD 09 44         [ 4]  244 	call putc
      000588 72 5F 00 00      [ 1]  245 	clr in.w 
      00058C 72 5F 00 01      [ 1]  246 	clr in 
      000590 CD 0A A6         [ 4]  247 	call readln
      000593 90 AE 16 68      [ 2]  248 	ldw y,#tib  
      000597 90 F6            [ 1]  249 	ld a,(y)
      000599 27 E3            [ 1]  250 	jreq repl  
      00059B 72 5C 00 01      [ 1]  251 	inc in 
      00059F CD 18 8C         [ 4]  252 	call to_upper 
      0005A2 A1 51            [ 1]  253 	cp a,#'Q 
      0005A4 26 17            [ 1]  254 	jrne test_p
      0005A6                        255 repl_exit:
      0005A6 72 5F 16 68      [ 1]  256 	clr tib 
      0005AA 72 5F 00 03      [ 1]  257 	clr count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0005AE 72 5F 00 01      [ 1]  258 	clr in 
      0005B2                        259 	_drop #VSIZE 	
      0005B2 5B 01            [ 2]    1     addw sp,##VSIZE 
      0005B4 81               [ 4]  260 	ret  
      0005B5                        261 invalid:
      0005B5 AE 06 36         [ 2]  262 	ldw x,#invalid_cmd 
      0005B8 CD 09 A1         [ 4]  263 	call puts 
      0005BB 20 C1            [ 2]  264 	jra repl 
      0005BD                        265 test_p:	
      0005BD A1 50            [ 1]  266     cp a,#'P 
      0005BF 27 11            [ 1]  267 	jreq mem_peek
      0005C1 A1 53            [ 1]  268     cp a,#'S 
      0005C3 26 F0            [ 1]  269 	jrne invalid 
      0005C5                        270 print_string:	
      0005C5 CD 0F 1F         [ 4]  271 	call get_token
      0005C8 A1 84            [ 1]  272 	cp a,#TK_INTGR 
      0005CA 26 E9            [ 1]  273 	jrne invalid 
      0005CC CD 09 A1         [ 4]  274 	call puts
      0005CF CC 05 7E         [ 2]  275 	jp repl 	
      0005D2                        276 mem_peek:
      0005D2 A6 20            [ 1]  277 	ld a,#SPACE 
      0005D4 CD 0F 0C         [ 4]  278 	call skip  	 
      0005D7 72 B9 00 00      [ 2]  279 	addw y,in.w 
      0005DB AE 16 B8         [ 2]  280 	ldw x,#pad 
      0005DE CD 14 00         [ 4]  281 	call strcpy
      0005E1 AE 16 B8         [ 2]  282 	ldw x,#pad
      0005E4 CD 18 98         [ 4]  283 	call atoi24 	
      0005E7 C6 00 0C         [ 1]  284 	ld a, acc24 
      0005EA CA 00 0D         [ 1]  285 	or a,acc16 
      0005ED CA 00 0E         [ 1]  286 	or a,acc8 
      0005F0 26 02            [ 1]  287 	jrne 1$ 
      0005F2 20 0C            [ 2]  288 	jra peek_byte  
      0005F4 CE 00 0C         [ 2]  289 1$:	ldw x,acc24 
      0005F7 CF 00 18         [ 2]  290 	ldw farptr,x 
      0005FA C6 00 0E         [ 1]  291 	ld a,acc8 
      0005FD C7 00 1A         [ 1]  292 	ld farptr+2,a 
      000600                        293 peek_byte:
      000600 CD 06 45         [ 4]  294 	call print_farptr 
      000603 A6 08            [ 1]  295 	ld a,#8 
      000605 6B 01            [ 1]  296 	ld (PSIZE,sp),a 
      000607 5F               [ 1]  297 	clrw x 
      000608 CD 06 60         [ 4]  298 1$:	call fetchc  
      00060B 89               [ 2]  299 	pushw x 
      00060C C7 00 0E         [ 1]  300 	ld acc8,a 
      00060F 5F               [ 1]  301 	clrw x 
      000610 CF 00 0C         [ 2]  302 	ldw acc24,x 
      000613 A6 90            [ 1]  303 	ld a,#16+128
      000615 CD 18 0D         [ 4]  304 	call prt_acc24
      000618 85               [ 2]  305 	popw x 
      000619 0A 01            [ 1]  306 	dec (PSIZE,sp)
      00061B 26 EB            [ 1]  307 	jrne 1$ 
      00061D A6 08            [ 1]  308 	ld a,#8 
      00061F CB 00 1A         [ 1]  309 	add a,farptr+2 
      000622 C7 00 1A         [ 1]  310 	ld farptr+2,a
      000625 4F               [ 1]  311 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000626 C9 00 19         [ 1]  312 	adc a,farptr+1 
      000629 C7 00 19         [ 1]  313 	ld farptr+1,a 
      00062C 4F               [ 1]  314 	clr a 
      00062D C9 00 18         [ 1]  315 	adc a,farptr 
      000630 C7 00 18         [ 1]  316 	ld farptr,a 
      000633 CC 05 7E         [ 2]  317 	jp repl  
                                    318 
      000636 6E 6F 74 20 61 20 63   319 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    320 
                                    321 ;----------------------------
                                    322 ; display farptr address
                                    323 ;----------------------------
      000645                        324 print_farptr:
      000645 C6 00 1A         [ 1]  325 	ld a ,farptr+2 
      000648 C7 00 0E         [ 1]  326 	ld acc8,a 
      00064B CE 00 18         [ 2]  327 	ldw x,farptr 
      00064E CF 00 0C         [ 2]  328 	ldw acc24,x 
      000651 5F               [ 1]  329 	clrw x 
      000652 A6 10            [ 1]  330 	ld a,#16 
      000654 CD 18 0D         [ 4]  331 	call prt_acc24
      000657 A6 20            [ 1]  332 	ld a,#SPACE 
      000659 CD 09 44         [ 4]  333 	call putc 
      00065C CD 09 44         [ 4]  334 	call putc 
      00065F 81               [ 4]  335 	ret
                                    336 
                                    337 ;------------------------------------
                                    338 ; get byte at address farptr[X]
                                    339 ; input:
                                    340 ;	 farptr   address to peek
                                    341 ;    X		  farptr index 	
                                    342 ; output:
                                    343 ;	 A 		  byte from memory  
                                    344 ;    x		  incremented by 1
                                    345 ;------------------------------------
      000660                        346 fetchc: ; @C
      000660 92 AF 00 18      [ 5]  347 	ldf a,([farptr],x)
      000664 5C               [ 1]  348 	incw x
      000665 81               [ 4]  349 	ret
                                    350 
                                    351 
                                    352 ;------------------------------------
                                    353 ; expect a number from command line 
                                    354 ; next argument
                                    355 ;  input:
                                    356 ;	  none
                                    357 ;  output:
                                    358 ;    acc24   int24_t 
                                    359 ;------------------------------------
      000666                        360 number:
      000666 CD 0F 1F         [ 4]  361 	call get_token
      000669 A1 84            [ 1]  362 	cp a,#TK_INTGR
      00066B 27 03            [ 1]  363 	jreq 1$
      00066D CC 16 A0         [ 2]  364 	jp syntax_error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000670 81               [ 4]  365 1$:	ret
                                    366 
                                    367 
                                    368 ;---------------------
                                    369 ; display n bytes row 
                                    370 ; from memory.
                                    371 ; input:
                                    372 ;   A   bytes to print 
                                    373 ;	X   start address 
                                    374 ; output:
                                    375 ;   X   address after last shown  
                                    376 ;---------------------
                           000001   377 	CNT=1 
                           000002   378 	ADR=2 
                           000003   379 	VSIZE=3 
      000671                        380 show_row:
      000671 4D               [ 1]  381 	tnz a 
      000672 26 01            [ 1]  382 	jrne 1$
      000674 81               [ 4]  383 	ret 
      000675                        384 1$:	
      000675 89               [ 2]  385 	pushw x  
      000676 88               [ 1]  386 	push a 
      000677 35 04 00 23      [ 1]  387 	mov tab_width,#4 
      00067B CD 17 F6         [ 4]  388 	call prt_i16 
      00067E A6 20            [ 1]  389 	ld a,#SPACE  
      000680 CD 09 44         [ 4]  390 	call putc
      000683                        391 row_loop:
      000683 1E 02            [ 2]  392 	ldw x,(ADR,sp)
      000685 F6               [ 1]  393 	ld a,(x)
      000686 5F               [ 1]  394 	clrw x 
      000687 97               [ 1]  395 	ld xl,a 
      000688 CD 17 F6         [ 4]  396 	call prt_i16 
      00068B 1E 02            [ 2]  397 	ldw x,(ADR,sp)
      00068D 5C               [ 1]  398 	incw x 
      00068E 1F 02            [ 2]  399 	ldw (ADR,sp),x 
      000690 0A 01            [ 1]  400 	dec (CNT,sp)
      000692 26 EF            [ 1]  401 	jrne row_loop
      000694                        402 	_drop VSIZE  		
      000694 5B 03            [ 2]    1     addw sp,#VSIZE 
      000696 35 04 00 23      [ 1]  403 	mov tab_width,#4
      00069A A6 0D            [ 1]  404 	ld a,#CR 
      00069C CD 09 44         [ 4]  405 	call putc 
      00069F 81               [ 4]  406 	ret 
                                    407 
                                    408 ;--------------------------
                                    409 ; print memory content 
                                    410 ; in hexadecimal format
                                    411 ;  input:
                                    412 ;    X    start address 
                                    413 ;    Y    count 
                                    414 ;--------------------------
                           000001   415 	BCNT=1
                           000003   416 	BASE=3
                           000004   417 	TABW=4
                           000004   418 	VSIZE=4   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0006A0                        419 hex_dump:
      0006A0 88               [ 1]  420 	push a 
      0006A1                        421 	_vars VSIZE
      0006A1 52 04            [ 2]    1     sub sp,#VSIZE 
      0006A3 C6 00 0A         [ 1]  422 	ld a,base
      0006A6 6B 03            [ 1]  423 	ld (BASE,sp),a 
      0006A8 35 10 00 0A      [ 1]  424 	mov base,#16
      0006AC C6 00 23         [ 1]  425 	ld a,tab_width 
      0006AF 6B 04            [ 1]  426 	ld (TABW,sp),a
      0006B1 A6 0D            [ 1]  427 	ld a,#CR 
      0006B3 CD 09 44         [ 4]  428 	call putc 
      0006B6 17 01            [ 2]  429 1$: ldw (BCNT,sp),y
      0006B8 A6 10            [ 1]  430 	ld a,#16
      0006BA 90 A3 00 10      [ 2]  431 	cpw y,#16
      0006BE 2A 02            [ 1]  432 	jrpl 2$
      0006C0 90 9F            [ 1]  433 	ld a,yl
      0006C2                        434 2$: 	
      0006C2 CD 06 71         [ 4]  435 	call show_row 
      0006C5 16 01            [ 2]  436 	ldw y,(BCNT,sp) 
      0006C7 72 A2 00 10      [ 2]  437 	subw y,#16 
      0006CB 90 A3 00 01      [ 2]  438 	cpw y,#1
      0006CF 2A E5            [ 1]  439 	jrpl 1$
      0006D1 7B 03            [ 1]  440 	ld a,(BASE,sp)
      0006D3 C7 00 0A         [ 1]  441 	ld base,a
      0006D6 7B 04            [ 1]  442 	ld a,(TABW,sp)
      0006D8 C7 00 23         [ 1]  443 	ld tab_width,a 
      0006DB                        444 	_drop VSIZE
      0006DB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0006DD 84               [ 1]  445 	pop a 
      0006DE 81               [ 4]  446 	ret 
                                    447 
                                    448 .endif ; DEBUG 
                                    449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      0006DF                         45 unlock_eeprom:
      0006DF 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0006E4 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      0006E8 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      0006EC 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0006F0 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0006F4 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0006F9 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      0006FA                         62 unlock_flash:
      0006FA 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006FF 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      000703 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      000707 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00070B 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00070F 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000714 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      000715                         76 row_erase:
      000715 88               [ 1]   77 	push a 
      000716 90 89            [ 2]   78 	pushw y 
      000718 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00071C 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      000720 4F               [ 1]   81 	clr a 
      000721 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000723 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      000727 90 5C            [ 1]   84     incw y
      000729 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      00072D 90 5C            [ 1]   86     incw y
      00072F 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      000733 90 5C            [ 1]   88     incw y
      000735 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      000739 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00073E 90 85            [ 2]   91 	popw y 
      000740 84               [ 1]   92 	pop a 
      000741 81               [ 4]   93 	ret
      000742                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      000742                         97 move_erase_to_ram:
      000742 89               [ 2]   98 	pushw x 
      000743 90 89            [ 2]   99 	pushw y 
      000745 AE 07 42         [ 2]  100 	ldw x,#row_erase_end 
      000748 1D 07 15         [ 2]  101 	subw x,#row_erase
      00074B CF 00 0D         [ 2]  102 	ldw acc16,x 
      00074E AE 16 68         [ 2]  103 	ldw x,#tib 
      000751 90 AE 07 15      [ 2]  104 	ldw y,#row_erase 
      000755 CD 14 10         [ 4]  105 	call move
      000758 90 85            [ 2]  106 	popw y
      00075A 85               [ 2]  107 	popw x
      00075B 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      00075C                        123 program_row:
      00075C 88               [ 1]  124 	push a 
      00075D 90 89            [ 2]  125 	pushw y 
      00075F 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000761 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000765 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      000769 90 5F            [ 1]  130 	clrw y 
      00076B F6               [ 1]  131 1$:	ld a,(x)
      00076C 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000770 5C               [ 1]  133 	incw x 
      000771 90 5C            [ 1]  134 	incw y 
      000773 0A 01            [ 1]  135 	dec (BCNT,sp)
      000775 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      000777 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00077C                        139 	_drop 1 
      00077C 5B 01            [ 2]    1     addw sp,#1 
      00077E 90 85            [ 2]  140 	popw y 
      000780 84               [ 1]  141 	pop a 
      000781 81               [ 4]  142 	ret 
      000782                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000782                        149 move_prg_to_ram:
      000782 89               [ 2]  150 	pushw x 
      000783 90 89            [ 2]  151 	pushw y 
      000785 AE 07 82         [ 2]  152 	ldw x,#program_row_end 
      000788 1D 07 5C         [ 2]  153 	subw x,#program_row 
      00078B CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      00078E AE 16 68         [ 2]  155 	ldw x,#tib ; destination address 
      000791 90 AE 07 5C      [ 2]  156 	ldw y,#program_row ; source address 
      000795 CD 14 10         [ 4]  157 	call move
      000798 90 85            [ 2]  158 	popw y 
      00079A 85               [ 2]  159 	popw x  
      00079B 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      00079C                        169 write_buffer:
      00079C 89               [ 2]  170 	pushw x 
      00079D 72 5D 00 18      [ 1]  171 	tnz farptr 
      0007A1 26 0D            [ 1]  172 	jrne to_flash 
      0007A3 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      0007A6 A3 36 00         [ 2]  174 	cpw x,#app_space  
      0007A9 24 05            [ 1]  175 	jruge to_flash 
      0007AB                        176 to_eeprom:
      0007AB CD 06 DF         [ 4]  177 	call unlock_eeprom
      0007AE 20 03            [ 2]  178 	jra do_programming
      0007B0                        179 to_flash:
      0007B0 CD 06 FA         [ 4]  180 	call unlock_flash
      0007B3                        181 do_programming:
      0007B3 85               [ 2]  182 	popw x 
      0007B4 CD 16 68         [ 4]  183 	call tib
      0007B7 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0007BB 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0007BF 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      0007C0                        197 block_erase:
      0007C0 89               [ 2]  198 	pushw x 
      0007C1 C6 00 18         [ 1]  199 	ld a,farptr 
      0007C4 26 14            [ 1]  200 	jrne erase_flash
      0007C6 CE 00 19         [ 2]  201 	ldw x,farptr+1
      0007C9 A3 36 00         [ 2]  202 	cpw x,#app_space 
      0007CC 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      0007CE CD 06 DF         [ 4]  205 	call unlock_eeprom 
      0007D1 CD 16 68         [ 4]  206 	call tib 
      0007D4 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0007D8 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      0007DA                        210 erase_flash:
      0007DA CD 06 FA         [ 4]  211 	call unlock_flash 
      0007DD CD 16 68         [ 4]  212 	call tib 
      0007E0 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007E4                        214 erase_exit: 
      0007E4 85               [ 2]  215 	popw x 
      0007E5 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      0007E6                        232 write_byte:
      0007E6 90 89            [ 2]  233 	pushw y
      0007E8                        234 	_vars VSIZE
      0007E8 52 02            [ 2]    1     sub sp,#VSIZE 
      0007EA 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      0007EC 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      0007EE 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      0007F2 72 5D 00 18      [ 1]  240 	tnz farptr 
      0007F6 26 14            [ 1]  241 	jrne write_flash
      0007F8 90 A3 36 00      [ 2]  242     cpw y,#app_space 	 
      0007FC 24 0E            [ 1]  243     jruge write_flash
      0007FE 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      000802 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      000804 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      000808 22 51            [ 1]  247 	jrugt write_exit
      00080A 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      00080C                        250 write_flash:
      00080C CD 06 FA         [ 4]  251 	call unlock_flash 
      00080F 9B               [ 1]  252 1$:	sim 
      000810 7B 01            [ 1]  253 	ld a,(BTW,sp)
      000812 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      000816 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00081B 9A               [ 1]  256     rim 
      00081C 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000820 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      000822                        260 write_eeprom:
      000822 CD 06 DF         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      000825 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      000829 2B 08            [ 1]  264 	jrmi 1$
      00082B 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      00082F 2A 02            [ 1]  266 	jrpl 1$
      000831 03 02            [ 1]  267 	cpl (OPT,sp)
      000833                        268 1$: 
      000833 0D 02            [ 1]  269     tnz (OPT,sp)
      000835 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      000837 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      00083B 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00083F                        274 2$: 
      00083F 7B 01            [ 1]  275     ld a,(BTW,sp)
      000841 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      000845 0D 02            [ 1]  277     tnz (OPT,sp)
      000847 27 08            [ 1]  278     jreq 3$
      000849 5C               [ 1]  279     incw x
      00084A 7B 01            [ 1]  280     ld a,(BTW,sp)
      00084C 43               [ 1]  281     cpl a
      00084D 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      000851 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000856 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      00085B                        285 write_exit:
      00085B                        286 	_drop VSIZE 
      00085B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00085D 90 85            [ 2]  287 	popw y
      00085F 81               [ 4]  288     ret
                                    289 
                                    290 ;--------------------------------------------
                                    291 ; write a data block to eeprom or flash 
                                    292 ; the block must be erased before 
                                    293 ; using this routine.
                                    294 ; input:
                                    295 ;   Y        source address   
                                    296 ;   X        array index  destination  farptr[x]
                                    297 ;   BSIZE    block size bytes 
                                    298 ;   farptr   write address , byte* 
                                    299 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                    300 ;	X 		after last byte written 
                                    301 ;   Y 		after last byte read 
                                    302 ;  farptr   point after block
                                    303 ;---------------------------------------------
      000860                        304 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      000860                        305 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    306 	; local var 
                           000001   307 	XSAVE=1 
                           000002   308 	VSIZE=2 
      000860                        309 write_block::
      000860 88               [ 1]  310 	push a 
      000861                        311 	_vars VSIZE
      000861 52 02            [ 2]    1     sub sp,#VSIZE 
      000863 1F 01            [ 2]  312 	ldw (XSAVE,sp),x 
      000865 1E 06            [ 2]  313 	ldw x,(BSIZE,sp) 
      000867 27 13            [ 1]  314 	jreq 9$
      000869 1E 01            [ 2]  315 1$:	ldw x,(XSAVE,sp)
      00086B 90 F6            [ 1]  316 	ld a,(y)
      00086D CD 07 E6         [ 4]  317 	call write_byte 
      000870 5C               [ 1]  318 	incw x 
      000871 90 5C            [ 1]  319 	incw y 
      000873 1F 01            [ 2]  320 	ldw (XSAVE,sp),x
      000875 1E 06            [ 2]  321 	ldw x,(BSIZE,sp)
      000877 5A               [ 2]  322 	decw x
      000878 1F 06            [ 2]  323 	ldw (BSIZE,sp),x 
      00087A 26 ED            [ 1]  324 	jrne 1$
      00087C                        325 9$:
      00087C 1E 01            [ 2]  326 	ldw x,(XSAVE,sp)
      00087E CD 08 B6         [ 4]  327 	call incr_farptr
      000881                        328 	_drop VSIZE
      000881 5B 02            [ 2]    1     addw sp,#VSIZE 
      000883 84               [ 1]  329 	pop a 
      000884 81               [ 4]  330 	ret 
                                    331 
                                    332 
                                    333 ;------------------------------------
                                    334 ; write n bytes to flash | eeprom 
                                    335 ; if the number of bytes is 
                                    336 ; >=128 it is faster to 
                                    337 ; use write_block
                                    338 ; the bytes are written one by 
                                    339 ; one and auto erased if required. 
                                    340 ; input:
                                    341 ;    farptr    dest address 
                                    342 ;    X         src address 
                                    343 ;    A         count 
                                    344 ; output:
                                    345 ;    none   
                                    346 ;----------------------------------
      000885                        347 write_nbytes:
      000885 90 89            [ 2]  348 	pushw y
      000887 88               [ 1]  349 	push a 
      000888 90 93            [ 1]  350 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00088A 5F               [ 1]  351 	clrw x 
      00088B                        352 1$:  
      00088B 90 F6            [ 1]  353 	ld a,(y)
      00088D 90 5C            [ 1]  354 	incw y
      00088F CD 07 E6         [ 4]  355 	call write_byte 
      000892 5C               [ 1]  356 	incw x 
      000893 0A 01            [ 1]  357 	dec (1,sp)  
      000895 26 F4            [ 1]  358 	jrne 1$ 
      000897 84               [ 1]  359 9$: pop a 
      000898 90 85            [ 2]  360 	popw y 
      00089A 81               [ 4]  361 	ret 
                                    362 
                                    363 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    364 ;;;  flash memory operations
                                    365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    366 
                                    367 ;--------------------------
                                    368 ; align farptr to BLOCK_SIZE 
                                    369 ;---------------------------
      00089B                        370 row_align:
      00089B A6 7F            [ 1]  371 	ld a,#0x7f 
      00089D C4 00 1A         [ 1]  372 	and a,farptr+2 
      0008A0 27 13            [ 1]  373 	jreq 1$ 
      0008A2 CE 00 19         [ 2]  374 	ldw x,farptr+1 
      0008A5 1C 00 80         [ 2]  375 	addw x,#BLOCK_SIZE 
      0008A8 24 04            [ 1]  376 	jrnc 0$
      0008AA 72 5C 00 18      [ 1]  377 	inc farptr 
      0008AE 9F               [ 1]  378 0$: ld a,xl 
      0008AF A4 80            [ 1]  379 	and a,#0x80
      0008B1 97               [ 1]  380 	ld xl,a
      0008B2 CF 00 19         [ 2]  381 	ldw farptr+1,x  	
      0008B5 81               [ 4]  382 1$:	ret
                                    383 
                                    384 ;--------------------
                                    385 ; input:
                                    386 ;   X     increment 
                                    387 ; output:
                                    388 ;   farptr  incremented 
                                    389 ;---------------------
      0008B6                        390 incr_farptr:
      0008B6 72 BB 00 19      [ 2]  391 	addw x,farptr+1 
      0008BA 24 04            [ 1]  392 	jrnc 1$
      0008BC 72 5C 00 18      [ 1]  393 	inc farptr 
      0008C0 CF 00 19         [ 2]  394 1$:	ldw farptr+1,x  
      0008C3 81               [ 4]  395 	ret 
                                    396 
                                    397 ;-----------------------------------
                                    398 ; scan block for non zero byte 
                                    399 ; block are 128 bytes 
                                    400 ; input:
                                    401 ;    farptr     address block  
                                    402 ; output:
                                    403 ;     A     0 cleared, other not cleared  
                                    404 ;-----------------------------------
      0008C4                        405 scan_block:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0008C4 5F               [ 1]  406 	clrw x 
      0008C5 92 AF 00 18      [ 5]  407 1$: ldf a,([farptr],x) 
      0008C9 26 06            [ 1]  408 	jrne 2$
      0008CB 5C               [ 1]  409 	incw x 
      0008CC A3 00 80         [ 2]  410 	cpw x,#BLOCK_SIZE 
      0008CF 25 F4            [ 1]  411 	jrult 1$ 
      0008D1 81               [ 4]  412 2$:	ret 
                                    413 
                                    414 
                                    415 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      0008D2                         66 Uart1RxHandler: ; console receive char 
      0008D2 72 0B 52 30 27   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      0008D7 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      0008DA A1 03            [ 1]   69 	cp a,#CTRL_C 
      0008DC 26 06            [ 1]   70 	jrne 2$
      0008DE CD 09 44         [ 4]   71 	call putc 
      0008E1 CC 00 57         [ 2]   72 	jp user_interrupted
      0008E4                         73 2$:
      0008E4 A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      0008E6 26 03            [ 1]   75 	jrne 3$
      0008E8 CC 00 C3         [ 2]   76 	jp cold_start 	
      0008EB 88               [ 1]   77 3$:	push a 
      0008EC A6 26            [ 1]   78 	ld a,#rx1_queue 
      0008EE CB 00 2F         [ 1]   79 	add a,rx1_tail 
      0008F1 5F               [ 1]   80 	clrw x 
      0008F2 97               [ 1]   81 	ld xl,a 
      0008F3 84               [ 1]   82 	pop a 
      0008F4 F7               [ 1]   83 	ld (x),a 
      0008F5 C6 00 2F         [ 1]   84 	ld a,rx1_tail 
      0008F8 4C               [ 1]   85 	inc a 
      0008F9 A4 07            [ 1]   86 	and a,#RX_QUEUE_SIZE-1
      0008FB C7 00 2F         [ 1]   87 	ld rx1_tail,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0008FE 80               [11]   88 5$:	iret 
                                     89 
                                     90 ;---------------------------------------------
                                     91 ; initialize UART1, 115200 8N1
                                     92 ; input:
                                     93 ;	none
                                     94 ; output:
                                     95 ;   none
                                     96 ;---------------------------------------------
      0008FF                         97 uart1_init:
      0008FF 72 1A 50 02      [ 1]   98     bset PA_DDR,#UART1_TX_PIN
      000903 72 1A 50 03      [ 1]   99     bset PA_CR1,#UART1_TX_PIN 
      000907 72 1A 50 04      [ 1]  100     bset PA_CR2,#UART1_TX_PIN 
                                    101 ; enable UART1 clock
      00090B 72 14 50 C7      [ 1]  102 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00090F                        103 uart1_set_baud: 
      00090F 88               [ 1]  104 	push a 
                                    105 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    106 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000910 A6 E1            [ 1]  107 	ld a,#CLK_SWR_HSI
      000912 C1 50 C3         [ 1]  108 	cp a,CLK_CMSR 
      000915 27 0A            [ 1]  109 	jreq 2$ 
      000917                        110 1$: ; 8 Mhz 	
      000917 35 05 52 33      [ 1]  111 	mov UART1_BRR2,#0x05 ; must be loaded first
      00091B 35 04 52 32      [ 1]  112 	mov UART1_BRR1,#0x4
      00091F 20 08            [ 2]  113 	jra 3$
      000921                        114 2$: ; 16 Mhz 	
      000921 35 0B 52 33      [ 1]  115 	mov UART1_BRR2,#0x0b ; must be loaded first
      000925 35 08 52 32      [ 1]  116 	mov UART1_BRR1,#0x08
      000929                        117 3$:
      000929 72 5F 52 31      [ 1]  118     clr UART1_DR
      00092D 35 2C 52 35      [ 1]  119 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      000931 72 10 52 35      [ 1]  120 	bset UART1_CR2,#UART_CR2_SBK
      000935 72 0D 52 30 FB   [ 2]  121     btjf UART1_SR,#UART_SR_TC,.
      00093A 72 5F 00 2E      [ 1]  122     clr rx1_head 
      00093E 72 5F 00 2F      [ 1]  123 	clr rx1_tail
      000942 84               [ 1]  124 	pop a  
      000943 81               [ 4]  125 	ret
                                    126 
                                    127 ;---------------------------------
                                    128 ; uart1_putc
                                    129 ; send a character via UART1
                                    130 ; input:
                                    131 ;    A  	character to send
                                    132 ;---------------------------------
      000944                        133 putc:: ; console output always on UART1
      000944                        134 uart1_putc:: 
      000944 72 0F 52 30 FB   [ 2]  135 	btjf UART1_SR,#UART_SR_TXE,.
      000949 C7 52 31         [ 1]  136 	ld UART1_DR,a 
      00094C 81               [ 4]  137 	ret 
                                    138 
                                    139 
                                    140 ;---------------------------------
                                    141 ; Query for character in rx1_queue
                                    142 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    143 ;   none 
                                    144 ; output:
                                    145 ;   A     0 no charcter available
                                    146 ;   Z     1 no character available
                                    147 ;---------------------------------
      00094D                        148 qgetc::
      00094D                        149 uart1_qgetc::
      00094D C6 00 2E         [ 1]  150 	ld a,rx1_head 
      000950 C0 00 2F         [ 1]  151 	sub a,rx1_tail 
      000953 81               [ 4]  152 	ret 
                                    153 
                                    154 ;---------------------------------
                                    155 ; wait character from UART1 
                                    156 ; input:
                                    157 ;   none
                                    158 ; output:
                                    159 ;   A 			char  
                                    160 ;--------------------------------	
      000954                        161 getc:: ;console input
      000954                        162 uart1_getc::
      000954 CD 09 4D         [ 4]  163 	call uart1_qgetc
      000957 27 FB            [ 1]  164 	jreq uart1_getc 
      000959 89               [ 2]  165 	pushw x 
                                    166 ;; rx1_queue must be in page 0 	
      00095A A6 26            [ 1]  167 	ld a,#rx1_queue
      00095C CB 00 2E         [ 1]  168 	add a,rx1_head 
      00095F 5F               [ 1]  169 	clrw x  
      000960 97               [ 1]  170 	ld xl,a 
      000961 F6               [ 1]  171 	ld a,(x)
      000962 88               [ 1]  172 	push a
      000963 C6 00 2E         [ 1]  173 	ld a,rx1_head 
      000966 4C               [ 1]  174 	inc a 
      000967 A4 07            [ 1]  175 	and a,#RX_QUEUE_SIZE-1
      000969 C7 00 2E         [ 1]  176 	ld rx1_head,a 
      00096C 84               [ 1]  177 	pop a  
      00096D 85               [ 2]  178 	popw x
      00096E 81               [ 4]  179 	ret 
                                    180 
                                    181 ;-----------------------------
                                    182 ;  constants replacing 
                                    183 ;  ANSI sequence received 
                                    184 ;  from terminal.
                                    185 ;  These are the ANSI sequences
                                    186 ;  accepted by function readln
                                    187 ;------------------------------
                           000080   188     ARROW_LEFT=128
                           000081   189     ARROW_RIGHT=129
                           000082   190     HOME=130
                           000083   191     KEY_END=131
                           000084   192     SUP=132 
                                    193 
      00096F 43 81 44 80 48 82 46   194 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    195 
                                    196 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    197 ; receive ANSI ESC 
                                    198 ; sequence and convert it
                                    199 ; to a single character code 
                                    200 ; in range {128..255}
                                    201 ; This is called after receiving 
                                    202 ; ESC character. 
                                    203 ; ignored sequence return 0 
                                    204 ; output:
                                    205 ;   A    converted character 
                                    206 ;-------------------------------
      00097B                        207 get_escape:
      00097B CD 09 54         [ 4]  208     call getc 
      00097E A1 5B            [ 1]  209     cp a,#'[ ; this character is expected after ESC 
      000980 27 02            [ 1]  210     jreq 1$
      000982 4F               [ 1]  211     clr a
      000983 81               [ 4]  212     ret
      000984 CD 09 54         [ 4]  213 1$: call getc 
      000987 AE 09 6F         [ 2]  214     ldw x,#convert_table
      00098A                        215 2$:
      00098A F1               [ 1]  216     cp a,(x)
      00098B 27 08            [ 1]  217     jreq 4$
      00098D 1C 00 02         [ 2]  218     addw x,#2
      000990 7D               [ 1]  219     tnz (x)
      000991 26 F7            [ 1]  220     jrne 2$
      000993 4F               [ 1]  221     clr a
      000994 81               [ 4]  222     ret 
      000995 5C               [ 1]  223 4$: incw x 
      000996 F6               [ 1]  224     ld a,(x)
      000997 A1 84            [ 1]  225     cp a,#SUP
      000999 26 05            [ 1]  226     jrne 5$
      00099B 88               [ 1]  227     push a 
      00099C CD 09 54         [ 4]  228     call getc
      00099F 84               [ 1]  229     pop a 
      0009A0                        230 5$:
      0009A0 81               [ 4]  231     ret 
                                    232 
                                    233 
                                    234 ;-----------------------------
                                    235 ; send an ASCIZ string to UART1 
                                    236 ; input: 
                                    237 ;   x 		char * 
                                    238 ; output:
                                    239 ;   none 
                                    240 ;-------------------------------
      0009A1                        241 puts::
      0009A1 F6               [ 1]  242     ld a,(x)
      0009A2 27 06            [ 1]  243 	jreq 1$
      0009A4 CD 09 44         [ 4]  244 	call putc 
      0009A7 5C               [ 1]  245 	incw x 
      0009A8 20 F7            [ 2]  246 	jra puts 
      0009AA 81               [ 4]  247 1$:	ret 
                                    248 
                                    249 
                                    250 ;---------------------------
                                    251 ; delete character at left 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                    252 ; of cursor on terminal 
                                    253 ; input:
                                    254 ;   none 
                                    255 ; output:
                                    256 ;	none 
                                    257 ;---------------------------
      0009AB                        258 bksp:
      0009AB A6 08            [ 1]  259 	ld a,#BS 
      0009AD CD 09 44         [ 4]  260 	call putc 
      0009B0 A6 20            [ 1]  261 	ld a,#SPACE 
      0009B2 CD 09 44         [ 4]  262 	call putc 
      0009B5 A6 08            [ 1]  263 	ld a,#BS 
      0009B7 CD 09 44         [ 4]  264 	call putc 
      0009BA 81               [ 4]  265 	ret 
                                    266 ;---------------------------
                                    267 ; delete n character left of cursor 
                                    268 ; at terminal.
                                    269 ; input: 
                                    270 ;   A   number of characters to delete.
                                    271 ; output:
                                    272 ;    none 
                                    273 ;--------------------------	
      0009BB                        274 delete_nchar:
      0009BB 88               [ 1]  275 	push a 
      0009BC 0D 01            [ 1]  276 0$:	tnz (1,sp)
      0009BE 27 07            [ 1]  277 	jreq 1$
      0009C0 CD 09 AB         [ 4]  278 	call bksp 
      0009C3 0A 01            [ 1]  279 	dec (1,sp)
      0009C5 20 F5            [ 2]  280 	jra 0$
      0009C7 84               [ 1]  281 1$:	pop a 
      0009C8 81               [ 4]  282 	ret
                                    283 
                                    284 ;--------------------------
                                    285 ; send ANSI escape sequence
                                    286 ; ANSI: ESC[
                                    287 ; note: ESC is ASCII 27
                                    288 ;       [   is ASCII 91  
                                    289 ;-------------------------- 
      0009C9                        290 send_escape:
      0009C9 A6 1B            [ 1]  291 	ld a,#ESC 
      0009CB CD 09 44         [ 4]  292 	call putc 
      0009CE A6 5B            [ 1]  293 	ld a,#'[
      0009D0 CD 09 44         [ 4]  294 	call putc 
      0009D3 81               [ 4]  295 	ret 
                                    296 
                                    297 ;---------------------
                                    298 ;send ANSI parameter value
                                    299 ; ANSI parameter values are 
                                    300 ; sent as ASCII charater 
                                    301 ; not as binary number.
                                    302 ; this routine 
                                    303 ; convert binary number to 
                                    304 ; ASCII string and send it.
                                    305 ; expected range {0..99}
                                    306 ; input: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                    307 ; 	A {0..99} 
                                    308 ; output:
                                    309 ;   none 
                                    310 ;---------------------
      0009D4                        311 send_parameter:
      0009D4 89               [ 2]  312 	pushw x 
      0009D5 5F               [ 1]  313 	clrw x 
      0009D6 97               [ 1]  314 	ld xl,a 
      0009D7 A6 0A            [ 1]  315 	ld a,#10 
      0009D9 62               [ 2]  316 	div x,a 
      0009DA 95               [ 1]  317 	ld xh,a 
      0009DB 9F               [ 1]  318 	ld a,xl
      0009DC 4D               [ 1]  319     tnz a 
      0009DD 27 0B            [ 1]  320     jreq 2$
      0009DF A1 09            [ 1]  321 	cp a,#9 
      0009E1 23 02            [ 2]  322 	jrule 1$
      0009E3 A6 39            [ 1]  323 	ld a,#'9
      0009E5                        324 1$:
      0009E5 AB 30            [ 1]  325 	add a,#'0 
      0009E7 CD 09 44         [ 4]  326 	call putc
      0009EA 9E               [ 1]  327 2$:	ld a,xh 
      0009EB AB 30            [ 1]  328 	add a,#'0
      0009ED CD 09 44         [ 4]  329 	call putc 
      0009F0 85               [ 2]  330 	popw x 
      0009F1 81               [ 4]  331 	ret 
                                    332 
                                    333 ;--------------------------
                                    334 ; move cursor left n character
                                    335 ; ANSI: ESC[PnD 
                                    336 ; 'Pn' est a numerical parameter
                                    337 ; specifying number of characters 
                                    338 ; displacement.
                                    339 ; input:
                                    340 ;   A     character count
                                    341 ; output:
                                    342 ;   none
                                    343 ;--------------------------
      0009F2                        344 move_left:
      0009F2 88               [ 1]  345 	push a 
      0009F3 CD 09 C9         [ 4]  346 	call send_escape
      0009F6 84               [ 1]  347     pop a
      0009F7 CD 09 D4         [ 4]  348 	call send_parameter 
      0009FA A6 44            [ 1]  349 	ld a,#'D 
      0009FC CD 09 44         [ 4]  350 	call putc 
      0009FF 81               [ 4]  351 	ret	
                                    352 
                                    353 
                                    354 ;--------------------------
                                    355 ; move cursor right n character 
                                    356 ; ANSI: ESC[PnC 
                                    357 ; input:
                                    358 ;   A     character count
                                    359 ; output:
                                    360 ;   none
                                    361 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      000A00                        362 move_right:
      000A00 88               [ 1]  363 	push a 
      000A01 CD 09 C9         [ 4]  364 	call send_escape
      000A04 84               [ 1]  365     pop a
      000A05 CD 09 D4         [ 4]  366 	call send_parameter 
      000A08 A6 43            [ 1]  367 	ld a,#'C 
      000A0A CD 09 44         [ 4]  368 	call putc 
      000A0D 81               [ 4]  369 	ret 
                                    370 
                                    371 
                                    372 ;--------------------------
                                    373 ; print n spaces on terminal
                                    374 ; input:
                                    375 ;  X 		number of spaces 
                                    376 ; output:
                                    377 ;	none 
                                    378 ;---------------------------
      000A0E                        379 spaces::
      000A0E A6 20            [ 1]  380 	ld a,#SPACE 
      000A10 5D               [ 2]  381 1$:	tnzw x
      000A11 27 06            [ 1]  382 	jreq 9$
      000A13 CD 09 44         [ 4]  383 	call putc 
      000A16 5A               [ 2]  384 	decw x
      000A17 20 F7            [ 2]  385 	jra 1$
      000A19                        386 9$: 
      000A19 81               [ 4]  387 	ret 
                                    388 
                                    389 ;--------------------------
                                    390 ; insert character in text 
                                    391 ; line 
                                    392 ; input:
                                    393 ;   A       character to insert 
                                    394 ;   xl      line length
                                    395 ;   xh      insert position 
                                    396 ;   Y       line pointer 
                                    397 ; output:
                                    398 ;   Y       updated Y 
                                    399 ;-------------------------
                           000001   400 	IPOS=1
                           000002   401 	KCHAR=2 
                           000003   402     LLEN=3 
                           000003   403 	VSISE=3 
      000A1A                        404 insert_char: 
      000A1A                        405 	_vars VSIZE 
      000A1A 52 02            [ 2]    1     sub sp,#VSIZE 
      000A1C 6B 02            [ 1]  406     ld (KCHAR,sp),a 
      000A1E 9E               [ 1]  407     ld a,xh 
      000A1F 6B 01            [ 1]  408 	ld (IPOS,sp),a
      000A21 9F               [ 1]  409     ld a,xl 
      000A22 6B 03            [ 1]  410     ld (LLEN,sp),a  
      000A24 93               [ 1]  411     ldw x,y
      000A25 5C               [ 1]  412     incw x 
      000A26 7B 03            [ 1]  413     ld a,(LLEN,sp)
      000A28 10 01            [ 1]  414     sub a,(IPOS,sp)
      000A2A 4C               [ 1]  415     inc a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000A2B C7 00 0E         [ 1]  416     ld acc8,a 
      000A2E 72 5F 00 0D      [ 1]  417     clr acc16
      000A32 CD 14 10         [ 4]  418     call move
      000A35 90 AE 16 68      [ 2]  419     ldw y,#tib 
      000A39 7B 01            [ 1]  420     ld a,(IPOS,sp)
      000A3B C7 00 0E         [ 1]  421     ld acc8,a 
      000A3E 72 B9 00 0D      [ 2]  422     addw y,acc16 
      000A42 7B 02            [ 1]  423     ld a,(KCHAR,sp)
      000A44 90 F7            [ 1]  424     ld (y),a
      000A46 90 5C            [ 1]  425     incw y  
      000A48 7B 01            [ 1]  426     ld a,(IPOS,sp)
      000A4A CD 09 F2         [ 4]  427     call move_left
      000A4D AE 16 68         [ 2]  428     ldw x,#tib 
      000A50 CD 09 A1         [ 4]  429     call puts 
      000A53 7B 03            [ 1]  430     ld a,(LLEN,sp)
      000A55 10 01            [ 1]  431     sub a,(IPOS,sp) 
      000A57 CD 09 F2         [ 4]  432     call move_left 
      000A5A                        433 	_drop VSIZE 
      000A5A 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A5C 81               [ 4]  434 	ret 
                                    435 
                                    436 
                                    437 ;--------------------------
                                    438 ; delete character under cursor
                                    439 ; input:
                                    440 ;   A       line length   
                                    441 ;   xl      delete position
                                    442 ;   Y       line pointer 
                                    443 ;-------------------------
                           000001   444 	CPOS=1
                           000002   445 	LLEN=2
                           000002   446 	VSIZE=2
      000A5D                        447 delete_under:
      000A5D                        448 	_vars VSIZE 
      000A5D 52 02            [ 2]    1     sub sp,#VSIZE 
      000A5F 6B 02            [ 1]  449     ld (LLEN,sp),a 
      000A61 9F               [ 1]  450     ld a,xl 
      000A62 6B 01            [ 1]  451     ld (CPOS,sp),a 
      000A64 93               [ 1]  452     ldw x,y ; move destination
      000A65 90 5C            [ 1]  453     incw y  ; move source 
      000A67 7B 02            [ 1]  454     ld a,(LLEN,sp)
      000A69 10 01            [ 1]  455     sub a,(CPOS,sp)
      000A6B 4C               [ 1]  456     inc a ; move including zero at end.
      000A6C C7 00 0E         [ 1]  457     ld acc8,a 
      000A6F 72 5F 00 0D      [ 1]  458     clr acc16 
      000A73 CD 14 10         [ 4]  459 	call move 
      000A76 90 AE 16 68      [ 2]  460     ldw y,#tib 
      000A7A 7B 01            [ 1]  461     ld a,(CPOS,sp)
      000A7C C7 00 0E         [ 1]  462     ld acc8,a 
      000A7F 72 B9 00 0D      [ 2]  463     addw y,acc16 
      000A83 93               [ 1]  464     ldw x,y 
      000A84 CD 09 A1         [ 4]  465     call puts 
      000A87 A6 20            [ 1]  466     ld a,#SPACE  
      000A89 CD 09 44         [ 4]  467     call putc
      000A8C 7B 02            [ 1]  468     ld a,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000A8E 10 01            [ 1]  469     sub a,(CPOS,sp)
      000A90 CD 09 F2         [ 4]  470     call move_left 
      000A93 0A 02            [ 1]  471     dec (LLEN,sp)
      000A95                        472 	_drop VSIZE 
      000A95 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A97 81               [ 4]  473 	ret 
                                    474 
                                    475 ;-----------------------------
                                    476 ; send ANSI sequence to delete
                                    477 ; whole line. Cursor position
                                    478 ; is not updated.
                                    479 ; ANSI: ESC[2K
                                    480 ; input:
                                    481 ;   none
                                    482 ; output:
                                    483 ;   none 
                                    484 ;-----------------------------
      000A98                        485 delete_line:
      000A98 CD 09 C9         [ 4]  486     call send_escape
      000A9B A6 32            [ 1]  487 	ld a,#'2
      000A9D CD 09 44         [ 4]  488 	call putc 
      000AA0 A6 4B            [ 1]  489 	ld a,#'K 
      000AA2 CD 09 44         [ 4]  490 	call putc 
      000AA5 81               [ 4]  491 	ret 
                                    492 
                                    493 
                                    494 
                                    495 ;------------------------------------
                                    496 ; read a line of text from terminal
                                    497 ;  touches de contrôle
                                    498 ;    BS   efface caractère à gauche 
                                    499 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    500 ;    CTRL_R  répète dernière ligne saisie
                                    501 ;    CTRL_D  supprime ligne 
                                    502 ;    HOME  va au début de la ligne 
                                    503 ;    KEY_END  va à la fin de la ligne 
                                    504 ;    ARROW_LEFT  un caractère vers la gauche 
                                    505 ;    ARROW_RIGHT  un caractère vers la droite 
                                    506 ;    CTRL_O  commute entre insert/overwrite
                                    507 ; input:
                                    508 ;	none
                                    509 ; local variable on stack:
                                    510 ;	LL  line length
                                    511 ;   RXCHAR last received character 
                                    512 ; output:
                                    513 ;   text in tib  buffer
                                    514 ;   count  line length 
                                    515 ;------------------------------------
                                    516 	; local variables
                           000001   517 	LL_HB=1
                           000001   518 	RXCHAR = 1 ; last char received
                           000002   519 	LL = 2  ; accepted line length
                           000003   520 	CPOS=3  ; cursor position 
                           000004   521 	OVRWR=4 ; overwrite flag 
                           000004   522 	VSIZE=4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000AA6                        523 readln::
      000AA6                        524 	_vars VSIZE 
      000AA6 52 04            [ 2]    1     sub sp,#VSIZE 
      000AA8 5F               [ 1]  525 	clrw x 
      000AA9 1F 02            [ 2]  526 	ldw (LL,sp),x 
      000AAB 1F 03            [ 2]  527 	ldw (CPOS,sp),x 
      000AAD 03 04            [ 1]  528 	cpl (OVRWR,sp) ; default to overwrite mode 
      000AAF 90 AE 16 68      [ 2]  529  	ldw y,#tib ; input buffer
      000AB3                        530 readln_loop:
      000AB3 CD 09 54         [ 4]  531 	call getc
      000AB6 6B 01            [ 1]  532 	ld (RXCHAR,sp),a
      000AB8 A1 1B            [ 1]  533     cp a,#ESC 
      000ABA 26 05            [ 1]  534     jrne 0$
      000ABC CD 09 7B         [ 4]  535     call get_escape 
      000ABF 6B 01            [ 1]  536     ld (RXCHAR,sp),a 
      000AC1 A1 0D            [ 1]  537 0$:	cp a,#CR
      000AC3 26 03            [ 1]  538 	jrne 1$
      000AC5 CC 0C 4F         [ 2]  539 	jp readln_quit
      000AC8 A1 0A            [ 1]  540 1$:	cp a,#LF 
      000ACA 26 03            [ 1]  541 	jrne 2$ 
      000ACC CC 0C 4F         [ 2]  542 	jp readln_quit
      000ACF                        543 2$:
      000ACF A1 08            [ 1]  544 	cp a,#BS
      000AD1 26 12            [ 1]  545 	jrne 3$
                                    546 ; delete left 
      000AD3 0D 03            [ 1]  547     tnz (CPOS,sp)
      000AD5 27 DC            [ 1]  548     jreq readln_loop 
      000AD7 A6 01            [ 1]  549     ld a,#1 
      000AD9 CD 09 F2         [ 4]  550     call move_left
      000ADC 0A 03            [ 1]  551     dec (CPOS,sp)
      000ADE 90 5A            [ 2]  552     decw y 
      000AE0 7B 03            [ 1]  553     ld a,(CPOS,sp) 
      000AE2 CC 0B FB         [ 2]  554     jp 12$
      000AE5                        555 3$:
      000AE5 A1 04            [ 1]  556 	cp a,#CTRL_D
      000AE7 26 1A            [ 1]  557 	jrne 4$
                                    558 ;delete line 
      000AE9 CD 0A 98         [ 4]  559 	call delete_line 
      000AEC 7B 03            [ 1]  560     ld a,(CPOS,sp)
      000AEE 4C               [ 1]  561     inc a 
      000AEF CD 09 F2         [ 4]  562     call move_left 
      000AF2 A6 3E            [ 1]  563 	ld a,#'> 
      000AF4 CD 09 44         [ 4]  564 	call putc 
      000AF7 90 AE 16 68      [ 2]  565 	ldw y,#tib
      000AFB 90 7F            [ 1]  566 	clr (y)
      000AFD 0F 02            [ 1]  567 	clr (LL,sp)
      000AFF 0F 03            [ 1]  568 	clr (CPOS,sp)
      000B01 20 B0            [ 2]  569 	jra readln_loop
      000B03                        570 4$:
      000B03 A1 12            [ 1]  571 	cp a,#CTRL_R 
      000B05 26 21            [ 1]  572 	jrne 5$
                                    573 ;reprint 
      000B07 0D 02            [ 1]  574 	tnz (LL,sp)
      000B09 26 A8            [ 1]  575 	jrne readln_loop
      000B0B AE 16 68         [ 2]  576 	ldw x,#tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000B0E CD 13 E4         [ 4]  577 	call strlen 
      000B11 90 AE 16 68      [ 2]  578 	ldw y,#tib 
      000B15 27 9C            [ 1]  579 	jreq readln_loop
      000B17 6B 02            [ 1]  580 	ld (LL,sp),a 
      000B19 6B 03            [ 1]  581     ld (CPOS,sp),a
      000B1B AE 16 68         [ 2]  582 	ldw x,#tib 
      000B1E CD 09 A1         [ 4]  583 	call puts
      000B21 0F 01            [ 1]  584 	clr (LL_HB,sp)
      000B23 72 F9 01         [ 2]  585 	addw y,(LL_HB,sp)
      000B26 20 8B            [ 2]  586 	jra readln_loop 
      000B28                        587 5$:
      000B28 A1 05            [ 1]  588 	cp a,#CTRL_E 
      000B2A 26 49            [ 1]  589 	jrne 6$
                                    590 ;edit line number 
      000B2C AE 16 68         [ 2]  591 	ldw x,#tib 
      000B2F CD 18 98         [ 4]  592 	call atoi24
      000B32 CE 00 0D         [ 2]  593 	ldw x,acc16
      000B35 CD 0C 89         [ 4]  594 	call search_lineno
      000B38 5D               [ 2]  595 	tnzw x 
      000B39 26 0B            [ 1]  596 	jrne 51$
      000B3B 0F 02            [ 1]  597 	clr (LL,sp)
      000B3D 90 AE 16 68      [ 2]  598 	ldw y,#tib
      000B41 90 7F            [ 1]  599     clr (y) 	
      000B43 CC 0C 4F         [ 2]  600 	jp readln_quit  
      000B46                        601 51$:
      000B46 CF 00 04         [ 2]  602 	ldw basicptr,x
      000B49 E6 02            [ 1]  603 	ld a,(2,x)
      000B4B C7 00 03         [ 1]  604 	ld count,a 
      000B4E 90 AE 16 68      [ 2]  605 	ldw y,#tib 
      000B52 CD 12 08         [ 4]  606 	call decompile 
      000B55 0F 01            [ 1]  607 	clr (LL_HB,sp)
      000B57 A6 0D            [ 1]  608 	ld a,#CR 
      000B59 CD 09 44         [ 4]  609 	call putc 
      000B5C A6 3E            [ 1]  610 	ld a,#'>
      000B5E CD 09 44         [ 4]  611 	call putc
      000B61 AE 16 68         [ 2]  612     ldw x,#tib  
      000B64 CD 13 E4         [ 4]  613 	call strlen 
      000B67 6B 02            [ 1]  614 	ld (LL,sp),a 
      000B69 CD 09 A1         [ 4]  615 	call puts 
      000B6C 90 93            [ 1]  616 	ldw y,x
      000B6E 7B 02            [ 1]  617     ld a,(LL,sp)
      000B70 6B 03            [ 1]  618     ld (CPOS,sp),a  
      000B72 CC 0A B3         [ 2]  619 	jp readln_loop
      000B75                        620 6$:
      000B75 A1 81            [ 1]  621 	cp a,#ARROW_RIGHT
      000B77 26 15            [ 1]  622    	jrne 7$ 
                                    623 ; right arrow
      000B79 7B 03            [ 1]  624 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  625     cp a,(LL,sp)
      000B7D 2B 03            [ 1]  626     jrmi 61$
      000B7F CC 0A B3         [ 2]  627     jp readln_loop 
      000B82                        628 61$:
      000B82 A6 01            [ 1]  629     ld a,#1 
      000B84 CD 0A 00         [ 4]  630 	call move_right 
      000B87 0C 03            [ 1]  631 	inc (CPOS,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      000B89 90 5C            [ 1]  632     incw y 
      000B8B CC 0A B3         [ 2]  633     jp readln_loop 
      000B8E A1 80            [ 1]  634 7$: cp a,#ARROW_LEFT  
      000B90 26 13            [ 1]  635 	jrne 8$
                                    636 ; left arrow 
      000B92 0D 03            [ 1]  637 	tnz (CPOS,sp)
      000B94 26 03            [ 1]  638 	jrne 71$
      000B96 CC 0A B3         [ 2]  639 	jp readln_loop
      000B99                        640 71$:
      000B99 A6 01            [ 1]  641     ld a,#1 
      000B9B CD 09 F2         [ 4]  642 	call move_left 
      000B9E 0A 03            [ 1]  643 	dec (CPOS,sp)
      000BA0 90 5A            [ 2]  644     decw y 
      000BA2 CC 0A B3         [ 2]  645 	jp readln_loop 
      000BA5 A1 82            [ 1]  646 8$: cp a,#HOME  
      000BA7 26 0E            [ 1]  647 	jrne 9$
                                    648 ; HOME 
      000BA9 7B 03            [ 1]  649     ld a,(CPOS,sp)
      000BAB CD 09 F2         [ 4]  650     call move_left 
      000BAE 0F 03            [ 1]  651 	clr (CPOS,sp)
      000BB0 90 AE 16 68      [ 2]  652     ldw y,#tib 
      000BB4 CC 0A B3         [ 2]  653 	jp readln_loop  
      000BB7 A1 83            [ 1]  654 9$: cp a,#KEY_END  
      000BB9 26 26            [ 1]  655 	jrne 10$
                                    656 ; KEY_END 
      000BBB 7B 03            [ 1]  657 	ld a,(CPOS,sp)
      000BBD 11 02            [ 1]  658 	cp a,(LL,sp)
      000BBF 26 03            [ 1]  659 	jrne 91$
      000BC1 CC 0A B3         [ 2]  660 	jp readln_loop 
      000BC4                        661 91$:
      000BC4 7B 02            [ 1]  662 	ld a,(LL,sp)
      000BC6 10 03            [ 1]  663 	sub a,(CPOS,sp)
      000BC8 CD 0A 00         [ 4]  664 	call move_right 
      000BCB 7B 02            [ 1]  665 	ld a,(LL,sp)
      000BCD 6B 03            [ 1]  666 	ld (CPOS,sp),a
      000BCF 90 AE 16 68      [ 2]  667     ldw y,#tib
      000BD3 72 5F 00 0D      [ 1]  668     clr acc16 
      000BD7 C7 00 0E         [ 1]  669     ld acc8,a 
      000BDA 72 B9 00 0D      [ 2]  670     addw y,acc16  
      000BDE CC 0A B3         [ 2]  671 	jp readln_loop 
      000BE1 A1 0F            [ 1]  672 10$: cp a,#CTRL_O
      000BE3 26 0C            [ 1]  673 	jrne 11$ 
                                    674 ; toggle between insert/overwrite
      000BE5 03 04            [ 1]  675 	cpl (OVRWR,sp)
      000BE7 90 89            [ 2]  676 	pushw y 
      000BE9 CD 24 E0         [ 4]  677 	call beep_1khz
      000BEC 90 85            [ 2]  678 	popw y 
      000BEE CC 0A B3         [ 2]  679 	jp readln_loop 
      000BF1 A1 84            [ 1]  680 11$: cp a,#SUP 
      000BF3 26 11            [ 1]  681     jrne final_test 
                                    682 ; del character under cursor 
      000BF5 7B 03            [ 1]  683     ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  684     cp a,(LL,sp)
      000BF9 2A 08            [ 1]  685     jrpl 13$
      000BFB                        686 12$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      000BFB 97               [ 1]  687     ld xl,a    ; cursor position 
      000BFC 7B 02            [ 1]  688     ld a,(LL,sp)  ; line length
      000BFE CD 0A 5D         [ 4]  689     call delete_under
      000C01 0A 02            [ 1]  690     dec (LLEN,sp)
      000C03                        691 13$:
      000C03 CC 0A B3         [ 2]  692     jp readln_loop 
      000C06                        693 final_test:
      000C06 A1 20            [ 1]  694 	cp a,#SPACE
      000C08 2A 03            [ 1]  695 	jrpl accept_char
      000C0A CC 0A B3         [ 2]  696 	jp readln_loop
      000C0D                        697 accept_char:
      000C0D A6 4F            [ 1]  698 	ld a,#TIB_SIZE-1
      000C0F 11 02            [ 1]  699 	cp a, (LL,sp)
      000C11 2A 03            [ 1]  700 	jrpl 1$
      000C13 CC 0A B3         [ 2]  701 	jp readln_loop
      000C16 0D 04            [ 1]  702 1$:	tnz (OVRWR,sp)
      000C18 26 18            [ 1]  703 	jrne overwrite
                                    704 ; insert mode 
      000C1A 7B 03            [ 1]  705     ld a,(CPOS,sp)
      000C1C 11 02            [ 1]  706     cp a,(LL,sp)
      000C1E 27 12            [ 1]  707     jreq overwrite
      000C20 7B 02            [ 1]  708     ld a,(LL,sp)
      000C22 97               [ 1]  709     ld xl,a 
      000C23 7B 03            [ 1]  710     ld a,(CPOS,sp)
      000C25 95               [ 1]  711     ld xh,a
      000C26 7B 01            [ 1]  712     ld a,(RXCHAR,sp)
      000C28 CD 0A 1A         [ 4]  713     call insert_char
      000C2B 0C 02            [ 1]  714     inc (LLEN,sp)
      000C2D 0C 03            [ 1]  715     inc (CPOS,sp)
      000C2F CC 0A B3         [ 2]  716     jp readln_loop 
      000C32                        717 overwrite:
      000C32 7B 01            [ 1]  718 	ld a,(RXCHAR,sp)
      000C34 90 F7            [ 1]  719 	ld (y),a
      000C36 90 5C            [ 1]  720     incw y
      000C38 CD 09 44         [ 4]  721     call putc 
      000C3B 7B 03            [ 1]  722 	ld a,(CPOS,sp)
      000C3D 11 02            [ 1]  723 	cp a,(LL,sp)
      000C3F 2B 09            [ 1]  724 	jrmi 1$
      000C41 90 7F            [ 1]  725 	clr (y)
      000C43 0C 02            [ 1]  726 	inc (LL,sp)
      000C45 0C 03            [ 1]  727     inc (CPOS,sp)
      000C47 CC 0A B3         [ 2]  728 	jp readln_loop 
      000C4A                        729 1$:	
      000C4A 0C 03            [ 1]  730 	inc (CPOS,sp)
      000C4C CC 0A B3         [ 2]  731 	jp readln_loop 
      000C4F                        732 readln_quit:
      000C4F 90 AE 16 68      [ 2]  733 	ldw y,#tib
      000C53 0F 01            [ 1]  734     clr (LL_HB,sp) 
      000C55 72 F9 01         [ 2]  735     addw y,(LL_HB,sp)
      000C58 90 7F            [ 1]  736     clr (y)
      000C5A 7B 02            [ 1]  737 	ld a,(LL,sp)
      000C5C C7 00 03         [ 1]  738 	ld count,a 
      000C5F A6 0D            [ 1]  739 	ld a,#CR
      000C61 CD 09 44         [ 4]  740 	call putc
      000C64                        741 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      000C64 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C66 81               [ 4]  742 	ret
                                    743 
                                    744 ;------------------------------
                                    745 ; print byte  in hexadecimal 
                                    746 ; on console
                                    747 ; input:
                                    748 ;    A		byte to print
                                    749 ;------------------------------
      000C67                        750 print_hex::
      000C67 88               [ 1]  751 	push a 
      000C68 4E               [ 1]  752 	swap a 
      000C69 CD 0C 7E         [ 4]  753 	call to_hex_char 
      000C6C CD 09 44         [ 4]  754 	call putc 
      000C6F 7B 01            [ 1]  755     ld a,(1,sp) 
      000C71 CD 0C 7E         [ 4]  756 	call to_hex_char
      000C74 CD 09 44         [ 4]  757 	call putc
      000C77 A6 20            [ 1]  758 	ld a,#SPACE 
      000C79 CD 09 44         [ 4]  759 	call putc 
      000C7C 84               [ 1]  760 	pop a 
      000C7D 81               [ 4]  761 	ret 
                                    762 
                                    763 ;----------------------------------
                                    764 ; convert to hexadecimal digit 
                                    765 ; input:
                                    766 ;   A       digit to convert 
                                    767 ; output:
                                    768 ;   A       hexdecimal character 
                                    769 ;----------------------------------
      000C7E                        770 to_hex_char::
      000C7E A4 0F            [ 1]  771 	and a,#15 
      000C80 A1 09            [ 1]  772 	cp a,#9 
      000C82 23 02            [ 2]  773 	jrule 1$ 
      000C84 AB 07            [ 1]  774 	add a,#7
      000C86 AB 30            [ 1]  775 1$: add a,#'0 
      000C88 81               [ 4]  776 	ret 
                                    777 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C89                         51 search_lineno::
      000C89                         52 	_vars VSIZE
      000C89 52 02            [ 2]    1     sub sp,#VSIZE 
      000C8B 0F 01            [ 1]   53 	clr (LL,sp)
      000C8D 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C91 4D               [ 1]   55 	tnz a 
      000C92 27 04            [ 1]   56 	jreq search_ln_loop
      000C94 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C98                         58 search_ln_loop:
      000C98 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C9C 2A 10            [ 1]   60 	jrpl 8$
      000C9E 90 F3            [ 1]   61 	cpw x,(y)
      000CA0 27 0E            [ 1]   62 	jreq 9$
      000CA2 2B 0A            [ 1]   63 	jrmi 8$ 
      000CA4 90 E6 02         [ 1]   64 	ld a,(2,y)
      000CA7 6B 02            [ 1]   65 	ld (LB,sp),a 
      000CA9 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000CAC 20 EA            [ 2]   67 	jra search_ln_loop 
      000CAE                         68 8$: 
      000CAE 5F               [ 1]   69 	clrw x 	
      000CAF 51               [ 1]   70 	exgw x,y 
      000CB0                         71 9$: _drop VSIZE
      000CB0 5B 02            [ 2]    1     addw sp,#VSIZE 
      000CB2 51               [ 1]   72 	exgw x,y   
      000CB3 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000CB4                         83 del_line: 
      000CB4                         84 	_vars VSIZE 
      000CB4 52 04            [ 2]    1     sub sp,#VSIZE 
      000CB6 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000CB8 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000CBA 0F 01            [ 1]   87 	clr (LLEN,sp)
      000CBC 90 93            [ 1]   88 	ldw y,x  
      000CBE 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000CC1 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000CC3 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000CC7 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000CCA 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000CCE 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000CD0 CD 14 10         [ 4]   95 	call move
      000CD3 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000CD7 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000CDA 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000CDE                         99 	_drop VSIZE     
      000CDE 5B 04            [ 2]    1     addw sp,#VSIZE 
      000CE0 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000CE1                        115 create_gap:
      000CE1                        116 	_vars VSIZE
      000CE1 52 06            [ 2]    1     sub sp,#VSIZE 
      000CE3 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CE5 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CE7 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CEB 90 93            [ 1]  120 	ldw y,x ; SRC
      000CED 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CF1 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CF3 CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CF6 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CF9 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CFC 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CFE CD 14 10         [ 4]  128 	call move
      000D01 CE 00 1D         [ 2]  129 	ldw x,txtend
      000D04 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000D07 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      000D0A                        132 9$:	_drop VSIZE 
      000D0A 5B 06            [ 2]    1     addw sp,#VSIZE 
      000D0C 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000D0D                        150 insert_line:
      000D0D                        151 	_vars VSIZE 
      000D0D 52 08            [ 2]    1     sub sp,#VSIZE 
      000D0F CE 00 1D         [ 2]  152 	ldw x,txtend  
      000D12 C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000D15 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000D17 AE 00 02         [ 2]  156 	ldw x,#2 
      000D1A 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000D1E A1 03            [ 1]  158 	cp a,#3
      000D20 27 5A            [ 1]  159 	jreq insert_ln_exit
      000D22 5F               [ 1]  160 	clrw x 
      000D23 97               [ 1]  161 	ld xl,a
      000D24 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000D26 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000D29 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000D2B CE 00 1D         [ 2]  165 	ldw x,txtend 
      000D2E 20 38            [ 2]  166 	jra 4$
      000D30 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000D34 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000D36 AE 00 02         [ 2]  170 	ldw x,#2 
      000D39 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000D3D 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000D3E 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000D40 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000D42 4F               [ 1]  177 	clr a 
      000D43 CD 0C 89         [ 4]  178 	call search_lineno 
      000D46 5D               [ 2]  179 	tnzw x 
      000D47 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D49 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D4B 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D4D 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D4F CD 0C B4         [ 4]  188 	call del_line
      000D52                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D52 A6 03            [ 1]  192 	ld a,#3
      000D54 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D56 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D58 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D5A C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D5D 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D5F 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D61 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D63 CD 0C E1         [ 4]  204 	call create_gap
      000D66 20 06            [ 2]  205 	jra 5$
      000D68                        206 4$: 
      000D68 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D6B CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D6E 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D70 CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D73 90 AE 16 B8      [ 2]  212 	ldw y,#pad ;SRC 
      000D77 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D79 CD 14 10         [ 4]  214 	call move 
      000D7C                        215 insert_ln_exit:	
      000D7C                        216 	_drop VSIZE
      000D7C 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D7E 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D7F                        233 parse_quote: 
      000D7F                        234 	_vars VSIZE 
      000D7F 52 02            [ 2]    1     sub sp,#VSIZE 
      000D81 4F               [ 1]  235 	clr a
      000D82 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D84                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      000D84 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D87 27 24            [ 1]  239 	jreq 6$
      000D89 72 5C 00 01      [ 1]  240 	inc in 
      000D8D 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D8F A6 5C            [ 1]  242 	ld a,#'\
      000D91 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D93 26 0A            [ 1]  244 	jrne 3$
      000D95 0F 01            [ 1]  245 	clr (PREV,sp)
      000D97 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D99 AD 1C            [ 4]  247 	callr convert_escape
      000D9B F7               [ 1]  248 	ld (x),a 
      000D9C 5C               [ 1]  249 	incw x 
      000D9D 20 E5            [ 2]  250 	jra 2$
      000D9F                        251 3$:
      000D9F 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000DA1 A1 5C            [ 1]  253 	cp a,#'\'
      000DA3 27 DD            [ 1]  254 	jreq 1$
      000DA5 A1 22            [ 1]  255 	cp a,#'"
      000DA7 27 04            [ 1]  256 	jreq 6$ 
      000DA9 F7               [ 1]  257 	ld (x),a 
      000DAA 5C               [ 1]  258 	incw x 
      000DAB 20 D7            [ 2]  259 	jra 2$
      000DAD                        260 6$:
      000DAD 7F               [ 1]  261 	clr (x)
      000DAE 5C               [ 1]  262 	incw x 
      000DAF 90 93            [ 1]  263 	ldw y,x 
      000DB1 5F               [ 1]  264 	clrw x 
      000DB2 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000DB4                        266 	_drop VSIZE
      000DB4 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DB6 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000DB7                        278 convert_escape:
      000DB7 89               [ 2]  279 	pushw x 
      000DB8 AE 0D CC         [ 2]  280 	ldw x,#escaped 
      000DBB F1               [ 1]  281 1$:	cp a,(x)
      000DBC 27 06            [ 1]  282 	jreq 2$
      000DBE 7D               [ 1]  283 	tnz (x)
      000DBF 27 09            [ 1]  284 	jreq 3$
      000DC1 5C               [ 1]  285 	incw x 
      000DC2 20 F7            [ 2]  286 	jra 1$
      000DC4 1D 0D CC         [ 2]  287 2$: subw x,#escaped 
      000DC7 9F               [ 1]  288 	ld a,xl 
      000DC8 AB 07            [ 1]  289 	add a,#7
      000DCA 85               [ 2]  290 3$:	popw x 
      000DCB 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    292 
      000DCC 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000DD4                        310 parse_integer: ; { -- n }
      000DD4 89               [ 2]  311 	pushw x 	
      000DD5 4B 00            [ 1]  312 	push #0 ; TCHAR
      000DD7 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000DD9 A1 24            [ 1]  314 	cp a,#'$
      000DDB 26 04            [ 1]  315 	jrne 2$ 
      000DDD                        316     _drop #1
      000DDD 5B 01            [ 2]    1     addw sp,##1 
      000DDF 4B 10            [ 1]  317 	push #16  ; BASE=16
      000DE1 F7               [ 1]  318 2$:	ld (x),a 
      000DE2 5C               [ 1]  319 	incw x 
      000DE3 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DE6 72 5C 00 01      [ 1]  321 	inc in 
      000DEA CD 18 8C         [ 4]  322 	call to_upper 
      000DED 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DEF CD 0E 75         [ 4]  324 	call is_digit 
      000DF2 25 ED            [ 1]  325 	jrc 2$
      000DF4 A6 10            [ 1]  326 	ld a,#16 
      000DF6 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DF8 26 0A            [ 1]  328 	jrne 3$ 
      000DFA 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DFC A1 41            [ 1]  330 	cp a,#'A 
      000DFE 2B 04            [ 1]  331 	jrmi 3$ 
      000E00 A1 47            [ 1]  332 	cp a,#'G 
      000E02 2B DD            [ 1]  333 	jrmi 2$ 
      000E04 72 5A 00 01      [ 1]  334 3$: dec in 	
      000E08 7F               [ 1]  335     clr (x)
      000E09 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000E0B CD 18 98         [ 4]  337 	call atoi24
      000E0E 90 93            [ 1]  338 	ldw y,x
      000E10 C6 00 0C         [ 1]  339 	ld a,acc24 
      000E13 90 F7            [ 1]  340 	ld (y),a 
      000E15 72 A9 00 01      [ 2]  341 	addw y,#1  
      000E19 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000E1C 90 FF            [ 2]  343 	ldw (y),x 
      000E1E 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      000E22 A6 84            [ 1]  345 	ld a,#TK_INTGR
      000E24                        346 	_drop VSIZE  
      000E24 5B 04            [ 2]    1     addw sp,#VSIZE 
      000E26 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000E27                        364 parse_binary: ; { -- n }
      000E27 4B 00            [ 1]  365 	push #0
      000E29 4B 00            [ 1]  366 	push #0
      000E2B 4B 00            [ 1]  367 	push #0
      000E2D                        368 2$:	
      000E2D 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000E30 72 5C 00 01      [ 1]  370 	inc in 
      000E34 A1 30            [ 1]  371 	cp a,#'0 
      000E36 27 06            [ 1]  372 	jreq 3$
      000E38 A1 31            [ 1]  373 	cp a,#'1 
      000E3A 27 02            [ 1]  374 	jreq 3$ 
      000E3C 20 0B            [ 2]  375 	jra bin_exit 
      000E3E A0 30            [ 1]  376 3$: sub a,#'0 
      000E40 46               [ 1]  377 	rrc a
      000E41 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000E43 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000E45 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E47 20 E4            [ 2]  381 	jra 2$  
      000E49                        382 bin_exit:
      000E49 72 5A 00 01      [ 1]  383 	dec in 
      000E4D 90 93            [ 1]  384 	ldw y,x
      000E4F 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E51 C7 00 0C         [ 1]  386 	ld acc24,a 
      000E54 1E 02            [ 2]  387 	ldw x,(BINARY+1,sp)
      000E56 CF 00 0D         [ 2]  388 	ldw acc16,x
      000E59 90 FF            [ 2]  389 	ldw (y),x 
      000E5B 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E5F A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E61                        392 	_drop VSIZE 
      000E61 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E63 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E64                        402 is_alpha::
      000E64 A1 41            [ 1]  403 	cp a,#'A 
      000E66 8C               [ 1]  404 	ccf 
      000E67 24 0B            [ 1]  405 	jrnc 9$ 
      000E69 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E6B 25 07            [ 1]  407 	jrc 9$ 
      000E6D A1 61            [ 1]  408 	cp a,#'a 
      000E6F 8C               [ 1]  409 	ccf 
      000E70 24 02            [ 1]  410 	jrnc 9$
      000E72 A1 7B            [ 1]  411 	cp a,#'z+1
      000E74 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E75                        421 is_digit::
      000E75 A1 30            [ 1]  422 	cp a,#'0
      000E77 25 03            [ 1]  423 	jrc 1$
      000E79 A1 3A            [ 1]  424     cp a,#'9+1
      000E7B 8C               [ 1]  425 	ccf 
      000E7C 8C               [ 1]  426 1$:	ccf 
      000E7D 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E7E                        438 is_alnum::
      000E7E CD 0E 75         [ 4]  439 	call is_digit
      000E81 25 03            [ 1]  440 	jrc 1$ 
      000E83 CD 0E 64         [ 4]  441 	call is_alpha
      000E86 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      000E87                        453 is_symbol_char: 
      000E87 A1 5F            [ 1]  454 	cp a,#'_ 
      000E89 26 03            [ 1]  455 	jrne 1$
      000E8B 99               [ 1]  456 	scf 
      000E8C 20 03            [ 2]  457 	jra 9$ 
      000E8E CD 0E 7E         [ 4]  458 1$:	call is_alnum 
      000E91 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E92                        473 parse_symbol:
      000E92 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E93                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E93 CD 18 8C         [ 4]  477 	call to_upper  
      000E96 F7               [ 1]  478 	ld (x), a 
      000E97 5C               [ 1]  479 	incw x
      000E98 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E9B 72 5C 00 01      [ 1]  481 	inc in 
      000E9F CD 0E 87         [ 4]  482 	call is_symbol_char 
      000EA2 25 EF            [ 1]  483 	jrc symb_loop 
      000EA4 7F               [ 1]  484 	clr (x)
      000EA5 72 5A 00 01      [ 1]  485 	dec in  
      000EA9 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000EAA                        502 parse_keyword: 
      000EAA 89               [ 2]  503 	pushw x ; preserve *symbol 
      000EAB CD 0E 92         [ 4]  504 	call parse_symbol
      000EAE 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000EB0 E6 02            [ 1]  506 	ld a,(2,x)
      000EB2 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000EB4 E6 01            [ 1]  509 	ld a,(1,x) 
      000EB6 A0 41            [ 1]  510 	sub a,#'A 
      000EB8 AE 00 03         [ 2]  511 	ldw x,#3 
      000EBB 42               [ 4]  512 	mul x,a 
      000EBC 1C 00 30         [ 2]  513 	addw x,#vars 
      000EBF A6 85            [ 1]  514 	ld a,#TK_VAR 
      000EC1 20 35            [ 2]  515 	jra 4$ 
      000EC3                        516 2$: ; check for keyword, otherwise syntax error.
      000EC3                        517 	_ldx_dict kword_dict ; dictionary entry point
      000EC3 AE 33 6B         [ 2]    1     ldw x,#kword_dict+2
      000EC6 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000EC8 90 5C            [ 1]  519 	incw y 
      000ECA CD 19 02         [ 4]  520 	call search_dict
      000ECD 4D               [ 1]  521 	tnz a
      000ECE 26 28            [ 1]  522 	jrne 4$
                                    523 ; not in this dictionary 
                                    524 ; search for operators dictionary 
      000ED0 1E 01            [ 2]  525 	ldw x,(XFIRST,sp)
      000ED2 5C               [ 1]  526 	incw x  ; *name to search for
      000ED3 CD 2F AF         [ 4]  527 	call search_op_dict
      000ED6 4D               [ 1]  528 	tnz a
      000ED7 27 08            [ 1]  529 	jreq 22$
                                    530 ; operator 
      000ED9 16 01            [ 2]  531 	ldw y,(XFIRST,sp)
      000EDB 90 F7            [ 1]  532 	ld (y),a 
      000EDD 90 5C            [ 1]  533 	incw y 
      000EDF 20 28            [ 2]  534 	jra 5$
      000EE1                        535 22$:	 
                                    536 ; not in dictionary
                                    537 ; compile it as TK_LABEL
      000EE1 16 01            [ 2]  538 	ldw y,(XFIRST,sp)
      000EE3 A6 03            [ 1]  539 	ld a,#TK_LABEL 
      000EE5 90 F7            [ 1]  540 	ld (y),a 
      000EE7 90 5C            [ 1]  541 	incw y
      000EE9                        542 24$:	
      000EE9 90 F6            [ 1]  543     ld a,(y)
      000EEB 27 04            [ 1]  544 	jreq 3$
      000EED 90 5C            [ 1]  545 	incw y 
      000EEF 20 F8            [ 2]  546 	jra 24$ 
      000EF1 90 5C            [ 1]  547 3$: incw y 
      000EF3 A6 03            [ 1]  548 	ld a,#TK_LABEL 
      000EF5 5F               [ 1]  549 	clrw x 	
      000EF6 20 11            [ 2]  550 	jra 5$ 
      000EF8                        551 4$:	
      000EF8 16 01            [ 2]  552 	ldw y,(XFIRST,sp)
      000EFA A3 00 4E         [ 2]  553 	cpw x,#LET_IDX 
      000EFD 27 0A            [ 1]  554 	jreq 5$  ; don't compile LET command 
      000EFF 90 F7            [ 1]  555 	ld (y),a 
      000F01 90 5C            [ 1]  556 	incw y 
      000F03 90 FF            [ 2]  557 	ldw (y),x
      000F05 72 A9 00 02      [ 2]  558 	addw y,#2  
      000F09                        559 5$:	_drop VSIZE 
      000F09 5B 02            [ 2]    1     addw sp,#VSIZE 
      000F0B 81               [ 4]  560 	ret  	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    561 
                                    562 ;------------------------------------
                                    563 ; skip character c in text starting from 'in'
                                    564 ; input:
                                    565 ;	 y 		point to text buffer
                                    566 ;    a 		character to skip
                                    567 ; output:  
                                    568 ;	'in' ajusted to new position
                                    569 ;------------------------------------
                           000001   570 	C = 1 ; local var
      000F0C                        571 skip:
      000F0C 88               [ 1]  572 	push a
      000F0D 91 D6 00         [ 4]  573 1$:	ld a,([in.w],y)
      000F10 27 0A            [ 1]  574 	jreq 2$
      000F12 11 01            [ 1]  575 	cp a,(C,sp)
      000F14 26 06            [ 1]  576 	jrne 2$
      000F16 72 5C 00 01      [ 1]  577 	inc in
      000F1A 20 F1            [ 2]  578 	jra 1$
      000F1C                        579 2$: _drop 1 
      000F1C 5B 01            [ 2]    1     addw sp,#1 
      000F1E 81               [ 4]  580 	ret
                                    581 	
                                    582 
                                    583 ;------------------------------------
                                    584 ; scan text for next token
                                    585 ; input: 
                                    586 ;	X 		pointer to buffer where 
                                    587 ;	        token id and value are copied 
                                    588 ; use:
                                    589 ;	Y   pointer to text in tib 
                                    590 ; output:
                                    591 ;   A       token attribute 
                                    592 ;   X 		token value
                                    593 ;   Y       updated position in output buffer   
                                    594 ;------------------------------------
                                    595 	; use to check special character 
                                    596 	.macro _case c t  
                                    597 	ld a,#c 
                                    598 	cp a,(TCHAR,sp) 
                                    599 	jrne t
                                    600 	.endm 
                                    601 
                           000001   602 	TCHAR=1
                           000002   603 	ATTRIB=2
                           000002   604 	VSIZE=2
      000F1F                        605 get_token:: 
      000F1F                        606 	_vars VSIZE
      000F1F 52 02            [ 2]    1     sub sp,#VSIZE 
                                    607 ;	ld a,in 
                                    608 ;	sub a,count
                                    609 ;   jrmi 0$
                                    610 ;	clr a 
                                    611 ;	ret 
      000F21                        612 0$: 
      000F21 90 AE 16 68      [ 2]  613 	ldw y,#tib    	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000F25 A6 20            [ 1]  614 	ld a,#SPACE
      000F27 CD 0F 0C         [ 4]  615 	call skip
      000F2A 55 00 01 00 02   [ 1]  616 	mov in.saved,in 
      000F2F 91 D6 00         [ 4]  617 	ld a,([in.w],y)
      000F32 26 05            [ 1]  618 	jrne 1$
      000F34 90 93            [ 1]  619 	ldw y,x 
      000F36 CC 10 DB         [ 2]  620 	jp token_exit ; end of line 
      000F39 72 5C 00 01      [ 1]  621 1$:	inc in 
      000F3D CD 18 8C         [ 4]  622 	call to_upper 
      000F40 6B 01            [ 1]  623 	ld (TCHAR,sp),a 
                                    624 ; check for quoted string
      000F42                        625 str_tst:  	
      000F42                        626 	_case '"' nbr_tst
      000F42 A6 22            [ 1]    1 	ld a,#'"' 
      000F44 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F46 26 0A            [ 1]    3 	jrne nbr_tst
      000F48 A6 02            [ 1]  627 	ld a,#TK_QSTR
      000F4A F7               [ 1]  628 	ld (x),a 
      000F4B 5C               [ 1]  629 	incw x 
      000F4C CD 0D 7F         [ 4]  630 	call parse_quote
      000F4F CC 10 DB         [ 2]  631 	jp token_exit
      000F52                        632 nbr_tst:
                                    633 ; check for hexadecimal number 
      000F52 A6 24            [ 1]  634 	ld a,#'$'
      000F54 11 01            [ 1]  635 	cp a,(TCHAR,sp) 
      000F56 27 17            [ 1]  636 	jreq 1$
                                    637 ;check for binary number 
      000F58 A6 26            [ 1]  638 	ld a,#'&
      000F5A 11 01            [ 1]  639 	cp a,(TCHAR,sp)
      000F5C 26 0A            [ 1]  640 	jrne 0$
      000F5E A6 84            [ 1]  641 	ld a,#TK_INTGR
      000F60 F7               [ 1]  642 	ld (x),a 
      000F61 5C               [ 1]  643 	incw x 
      000F62 CD 0E 27         [ 4]  644 	call parse_binary ; expect binary integer 
      000F65 CC 10 DB         [ 2]  645 	jp token_exit 
                                    646 ; check for decimal number 	
      000F68 7B 01            [ 1]  647 0$:	ld a,(TCHAR,sp)
      000F6A CD 0E 75         [ 4]  648 	call is_digit
      000F6D 24 0C            [ 1]  649 	jrnc 3$
      000F6F A6 84            [ 1]  650 1$:	ld a,#TK_INTGR 
      000F71 F7               [ 1]  651 	ld (x),a 
      000F72 5C               [ 1]  652 	incw x 
      000F73 7B 01            [ 1]  653 	ld a,(TCHAR,sp)
      000F75 CD 0D D4         [ 4]  654 	call parse_integer 
      000F78 CC 10 DB         [ 2]  655 	jp token_exit 
      000F7B                        656 3$: 
      000F7B                        657 	_case '(' bkslsh_tst 
      000F7B A6 28            [ 1]    1 	ld a,#'(' 
      000F7D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7F 26 05            [ 1]    3 	jrne bkslsh_tst
      000F81 A6 06            [ 1]  658 	ld a,#TK_LPAREN
      000F83 CC 10 D7         [ 2]  659 	jp token_char   	
      000F86                        660 bkslsh_tst: ; character token 
      000F86                        661 	_case '\',rparnt_tst
      000F86 A6 5C            [ 1]    1 	ld a,#'\' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      000F88 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8A 26 16            [ 1]    3 	jrne rparnt_tst
      000F8C A6 04            [ 1]  662 	ld a,#TK_CHAR 
      000F8E F7               [ 1]  663 	ld (x),a 
      000F8F 5C               [ 1]  664 	incw x 
      000F90 91 D6 00         [ 4]  665 	ld a,([in.w],y)
      000F93 F7               [ 1]  666 	ld (x),a 
      000F94 5C               [ 1]  667 	incw x
      000F95 90 93            [ 1]  668 	ldw y,x 	 
      000F97 72 5C 00 01      [ 1]  669 	inc in  
      000F9B 5F               [ 1]  670 	clrw x 
      000F9C 97               [ 1]  671 	ld xl,a 
      000F9D A6 04            [ 1]  672 	ld a,#TK_CHAR 
      000F9F CC 10 DB         [ 2]  673 	jp token_exit 
      000FA2                        674 rparnt_tst:		
      000FA2                        675 	_case ')' colon_tst 
      000FA2 A6 29            [ 1]    1 	ld a,#')' 
      000FA4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA6 26 05            [ 1]    3 	jrne colon_tst
      000FA8 A6 07            [ 1]  676 	ld a,#TK_RPAREN 
      000FAA CC 10 D7         [ 2]  677 	jp token_char
      000FAD                        678 colon_tst:
      000FAD                        679 	_case ':' comma_tst 
      000FAD A6 3A            [ 1]    1 	ld a,#':' 
      000FAF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FB1 26 05            [ 1]    3 	jrne comma_tst
      000FB3 A6 0A            [ 1]  680 	ld a,#TK_COLON 
      000FB5 CC 10 D7         [ 2]  681 	jp token_char  
      000FB8                        682 comma_tst:
      000FB8                        683 	_case COMMA sharp_tst 
      000FB8 A6 2C            [ 1]    1 	ld a,#COMMA 
      000FBA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FBC 26 05            [ 1]    3 	jrne sharp_tst
      000FBE A6 08            [ 1]  684 	ld a,#TK_COMMA
      000FC0 CC 10 D7         [ 2]  685 	jp token_char
      000FC3                        686 sharp_tst:
      000FC3                        687 	_case SHARP dash_tst 
      000FC3 A6 23            [ 1]    1 	ld a,#SHARP 
      000FC5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC7 26 05            [ 1]    3 	jrne dash_tst
      000FC9 A6 09            [ 1]  688 	ld a,#TK_SHARP
      000FCB CC 10 D7         [ 2]  689 	jp token_char  	 	 
      000FCE                        690 dash_tst: 	
      000FCE                        691 	_case '-' at_tst 
      000FCE A6 2D            [ 1]    1 	ld a,#'-' 
      000FD0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FD2 26 05            [ 1]    3 	jrne at_tst
      000FD4 A6 11            [ 1]  692 	ld a,#TK_MINUS  
      000FD6 CC 10 D7         [ 2]  693 	jp token_char 
      000FD9                        694 at_tst:
      000FD9                        695 	_case '@' qmark_tst 
      000FD9 A6 40            [ 1]    1 	ld a,#'@' 
      000FDB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FDD 26 05            [ 1]    3 	jrne qmark_tst
      000FDF A6 05            [ 1]  696 	ld a,#TK_ARRAY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      000FE1 CC 10 D7         [ 2]  697 	jp token_char
      000FE4                        698 qmark_tst:
      000FE4                        699 	_case '?' tick_tst 
      000FE4 A6 3F            [ 1]    1 	ld a,#'?' 
      000FE6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FE8 26 12            [ 1]    3 	jrne tick_tst
      000FEA A6 80            [ 1]  700 	ld a,#TK_CMD  
      000FEC F7               [ 1]  701 	ld (x),a 
      000FED 5C               [ 1]  702 	incw x 
      000FEE 90 93            [ 1]  703 	ldw y,x 
      000FF0 AE 00 6E         [ 2]  704 	ldw x,#PRT_IDX 
      000FF3 90 FF            [ 2]  705 	ldw (y),x 
      000FF5 72 A9 00 02      [ 2]  706 	addw y,#2
      000FF9 CC 10 DB         [ 2]  707 	jp token_exit
      000FFC                        708 tick_tst: ; comment 
      000FFC                        709 	_case TICK plus_tst 
      000FFC A6 27            [ 1]    1 	ld a,#TICK 
      000FFE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001000 26 35            [ 1]    3 	jrne plus_tst
      001002 A6 80            [ 1]  710 	ld a,#TK_CMD
      001004 F7               [ 1]  711 	ld (x),a 
      001005 5C               [ 1]  712 	incw x
      001006 90 AE 00 88      [ 2]  713 	ldw y,#REM_IDX
      00100A FF               [ 2]  714 	ldw (x),y 
      00100B 1C 00 02         [ 2]  715 	addw x,#2  
      00100E                        716 copy_comment:
      00100E 90 AE 16 68      [ 2]  717 	ldw y,#tib 
      001012 72 B9 00 00      [ 2]  718 	addw y,in.w
      001016 90 89            [ 2]  719 	pushw y
      001018 CD 14 00         [ 4]  720 	call strcpy
      00101B 72 F2 01         [ 2]  721     subw y,(1,sp)
      00101E 90 9F            [ 1]  722 	ld a,yl 
      001020 CB 00 01         [ 1]  723 	add a,in
      001023 C7 00 01         [ 1]  724 	ld in,a 
      001026 1F 01            [ 2]  725 	ldw (1,sp),x
      001028 72 F9 01         [ 2]  726 	addw y,(1,sp)
      00102B 90 5C            [ 1]  727 	incw y 
      00102D                        728 	_drop 2 
      00102D 5B 02            [ 2]    1     addw sp,#2 
      00102F AE 00 88         [ 2]  729 	ldw x,#REM_IDX 
      001032 A6 80            [ 1]  730 	ld a,#TK_CMD 
      001034 CC 10 DB         [ 2]  731 	jp token_exit 
      001037                        732 plus_tst:
      001037                        733 	_case '+' star_tst 
      001037 A6 2B            [ 1]    1 	ld a,#'+' 
      001039 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00103B 26 05            [ 1]    3 	jrne star_tst
      00103D A6 10            [ 1]  734 	ld a,#TK_PLUS  
      00103F CC 10 D7         [ 2]  735 	jp token_char 
      001042                        736 star_tst:
      001042                        737 	_case '*' slash_tst 
      001042 A6 2A            [ 1]    1 	ld a,#'*' 
      001044 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001046 26 05            [ 1]    3 	jrne slash_tst
      001048 A6 20            [ 1]  738 	ld a,#TK_MULT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00104A CC 10 D7         [ 2]  739 	jp token_char 
      00104D                        740 slash_tst: 
      00104D                        741 	_case '/' prcnt_tst 
      00104D A6 2F            [ 1]    1 	ld a,#'/' 
      00104F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001051 26 05            [ 1]    3 	jrne prcnt_tst
      001053 A6 21            [ 1]  742 	ld a,#TK_DIV 
      001055 CC 10 D7         [ 2]  743 	jp token_char 
      001058                        744 prcnt_tst:
      001058                        745 	_case '%' eql_tst 
      001058 A6 25            [ 1]    1 	ld a,#'%' 
      00105A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00105C 26 05            [ 1]    3 	jrne eql_tst
      00105E A6 22            [ 1]  746 	ld a,#TK_MOD
      001060 CC 10 D7         [ 2]  747 	jp token_char  
                                    748 ; 1 or 2 character tokens 	
      001063                        749 eql_tst:
      001063                        750 	_case '=' gt_tst 		
      001063 A6 3D            [ 1]    1 	ld a,#'=' 
      001065 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001067 26 05            [ 1]    3 	jrne gt_tst
      001069 A6 32            [ 1]  751 	ld a,#TK_EQUAL
      00106B CC 10 D7         [ 2]  752 	jp token_char 
      00106E                        753 gt_tst:
      00106E                        754 	_case '>' lt_tst 
      00106E A6 3E            [ 1]    1 	ld a,#'>' 
      001070 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001072 26 23            [ 1]    3 	jrne lt_tst
      001074 A6 31            [ 1]  755 	ld a,#TK_GT 
      001076 6B 02            [ 1]  756 	ld (ATTRIB,sp),a 
      001078 91 D6 00         [ 4]  757 	ld a,([in.w],y)
      00107B 72 5C 00 01      [ 1]  758 	inc in 
      00107F A1 3D            [ 1]  759 	cp a,#'=
      001081 26 04            [ 1]  760 	jrne 1$
      001083 A6 33            [ 1]  761 	ld a,#TK_GE 
      001085 20 50            [ 2]  762 	jra token_char  
      001087 A1 3C            [ 1]  763 1$: cp a,#'<
      001089 26 04            [ 1]  764 	jrne 2$
      00108B A6 35            [ 1]  765 	ld a,#TK_NE 
      00108D 20 48            [ 2]  766 	jra token_char 
      00108F 72 5A 00 01      [ 1]  767 2$: dec in
      001093 7B 02            [ 1]  768 	ld a,(ATTRIB,sp)
      001095 20 40            [ 2]  769 	jra token_char 	 
      001097                        770 lt_tst:
      001097                        771 	_case '<' other
      001097 A6 3C            [ 1]    1 	ld a,#'<' 
      001099 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00109B 26 23            [ 1]    3 	jrne other
      00109D A6 34            [ 1]  772 	ld a,#TK_LT 
      00109F 6B 02            [ 1]  773 	ld (ATTRIB,sp),a 
      0010A1 91 D6 00         [ 4]  774 	ld a,([in.w],y)
      0010A4 72 5C 00 01      [ 1]  775 	inc in 
      0010A8 A1 3D            [ 1]  776 	cp a,#'=
      0010AA 26 04            [ 1]  777 	jrne 1$
      0010AC A6 36            [ 1]  778 	ld a,#TK_LE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      0010AE 20 27            [ 2]  779 	jra token_char 
      0010B0 A1 3E            [ 1]  780 1$: cp a,#'>
      0010B2 26 04            [ 1]  781 	jrne 2$
      0010B4 A6 35            [ 1]  782 	ld a,#TK_NE 
      0010B6 20 1F            [ 2]  783 	jra token_char 
      0010B8 72 5A 00 01      [ 1]  784 2$: dec in 
      0010BC 7B 02            [ 1]  785 	ld a,(ATTRIB,sp)
      0010BE 20 17            [ 2]  786 	jra token_char 	
      0010C0                        787 other: ; not a special character 	 
      0010C0 7B 01            [ 1]  788 	ld a,(TCHAR,sp)
      0010C2 CD 0E 64         [ 4]  789 	call is_alpha 
      0010C5 25 03            [ 1]  790 	jrc 30$ 
      0010C7 CC 16 A0         [ 2]  791 	jp syntax_error 
      0010CA                        792 30$: 
      0010CA CD 0E AA         [ 4]  793 	call parse_keyword
      0010CD A3 20 A2         [ 2]  794 	cpw x,#remark 
      0010D0 26 09            [ 1]  795 	jrne token_exit 
      0010D2 90 93            [ 1]  796 	ldw y,x 
      0010D4 CC 10 0E         [ 2]  797 	jp copy_comment 
      0010D7                        798 token_char:
      0010D7 F7               [ 1]  799 	ld (x),a 
      0010D8 5C               [ 1]  800 	incw x
      0010D9 90 93            [ 1]  801 	ldw y,x 
      0010DB                        802 token_exit:
      0010DB                        803 	_drop VSIZE 
      0010DB 5B 02            [ 2]    1     addw sp,#VSIZE 
      0010DD 81               [ 4]  804 	ret
                                    805 
                                    806 
                                    807 ;-----------------------------------
                                    808 ; create token list fromm text line 
                                    809 ; save this list in pad buffer 
                                    810 ;  compiled line format: 
                                    811 ;    line_no  2 bytes {0...32767}
                                    812 ;    count    1 byte  
                                    813 ;    tokens   variable length 
                                    814 ;   
                                    815 ; input:
                                    816 ;   none
                                    817 ; modified variables:
                                    818 ;   basicptr     token list buffer address 
                                    819 ;   in.w  		 3|count, i.e. index in buffer
                                    820 ;   count        length of line | 0  
                                    821 ;-----------------------------------
                           000001   822 	XSAVE=1
                           000002   823 	VSIZE=2
      0010DE                        824 compile::
      0010DE 90 89            [ 2]  825 	pushw y 
      0010E0                        826 	_vars VSIZE 
      0010E0 52 02            [ 2]    1     sub sp,#VSIZE 
      0010E2 55 00 1B 00 04   [ 1]  827 	mov basicptr,txtbgn
      0010E7 72 1A 00 22      [ 1]  828 	bset flags,#FCOMP 
      0010EB A6 00            [ 1]  829 	ld a,#0
      0010ED AE 00 00         [ 2]  830 	ldw x,#0
      0010F0 CF 16 B8         [ 2]  831 	ldw pad,x ; destination buffer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      0010F3 C7 16 BA         [ 1]  832 	ld pad+2,a ; count 
      0010F6 AE 16 BB         [ 2]  833 	ldw x,#pad+3
      0010F9 72 5F 00 01      [ 1]  834 	clr in 
      0010FD CD 0F 1F         [ 4]  835 	call get_token
      001100 A1 84            [ 1]  836 	cp a,#TK_INTGR
      001102 26 11            [ 1]  837 	jrne 2$
      001104 A3 00 01         [ 2]  838 	cpw x,#1 
      001107 2A 05            [ 1]  839 	jrpl 1$
      001109 A6 0A            [ 1]  840 	ld a,#ERR_BAD_VALUE
      00110B CC 16 A2         [ 2]  841 	jp tb_error
      00110E CF 16 B8         [ 2]  842 1$:	ldw pad,x 
      001111 90 AE 16 BB      [ 2]  843 	ldw y,#pad+3 
      001115 90 A3 17 74      [ 2]  844 2$:	cpw y,#stack_full 
      001119 25 05            [ 1]  845 	jrult 3$
      00111B A6 0F            [ 1]  846 	ld a,#ERR_BUF_FULL 
      00111D CC 16 A2         [ 2]  847 	jp tb_error 
      001120                        848 3$:	
      001120 93               [ 1]  849 	ldw x,y 
      001121 CD 0F 1F         [ 4]  850 	call get_token 
      001124 A1 00            [ 1]  851 	cp a,#TK_NONE 
      001126 26 ED            [ 1]  852 	jrne 2$ 
                                    853 ; compilation completed  
      001128 72 A2 16 B8      [ 2]  854 	subw y,#pad
      00112C 90 9F            [ 1]  855     ld a,yl
      00112E AE 16 B8         [ 2]  856 	ldw x,#pad 
      001131 CF 00 19         [ 2]  857 	ldw ptr16,x 
      001134 E7 02            [ 1]  858 	ld (2,x),a 
      001136 FE               [ 2]  859 	ldw x,(x)
      001137 27 09            [ 1]  860 	jreq 10$
      001139 CD 0D 0D         [ 4]  861 	call insert_line
      00113C 72 5F 00 03      [ 1]  862 	clr  count 
      001140 20 0F            [ 2]  863 	jra  11$ 
      001142                        864 10$: ; line# is zero 
      001142 CE 00 19         [ 2]  865 	ldw x,ptr16  
      001145 CF 00 04         [ 2]  866 	ldw basicptr,x 
      001148 E6 02            [ 1]  867 	ld a,(2,x)
      00114A C7 00 03         [ 1]  868 	ld count,a 
      00114D 35 03 00 01      [ 1]  869 	mov in,#3 
      001151                        870 11$:
      001151                        871 	_drop VSIZE 
      001151 5B 02            [ 2]    1     addw sp,#VSIZE 
      001153 72 1B 00 22      [ 1]  872 	bres flags,#FCOMP 
      001157 90 85            [ 2]  873 	popw y 
      001159 81               [ 4]  874 	ret 
                                    875 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      00115A                         48 cpy_cmd_name:
      00115A F6               [ 1]   49 	ld a,(x)
      00115B 5C               [ 1]   50 	incw x
      00115C A4 0F            [ 1]   51 	and a,#15  
      00115E 88               [ 1]   52 	push a 
      00115F 0D 01            [ 1]   53     tnz (1,sp) 
      001161 27 0A            [ 1]   54 	jreq 9$
      001163 F6               [ 1]   55 1$:	ld a,(x)
      001164 90 F7            [ 1]   56 	ld (y),a  
      001166 5C               [ 1]   57 	incw x
      001167 90 5C            [ 1]   58 	incw y 
      001169 0A 01            [ 1]   59 	dec (1,sp)	 
      00116B 26 F6            [ 1]   60 	jrne 1$
      00116D 84               [ 1]   61 9$: pop a 
      00116E 81               [ 4]   62 	ret	
                                     63 
                                     64 ;--------------------------
                                     65 ; add a space after letter or 
                                     66 ; digit.
                                     67 ; input:
                                     68 ;   Y     pointer to buffer 
                                     69 ; output:
                                     70 ;   Y    moved to end 
                                     71 ;--------------------------
      00116F                         72 add_space:
      00116F 90 5A            [ 2]   73 	decw y 
      001171 90 F6            [ 1]   74 	ld a,(y)
      001173 90 5C            [ 1]   75 	incw y
      001175 A1 29            [ 1]   76 	cp a,#') 
      001177 27 05            [ 1]   77 	jreq 0$
      001179 CD 0E 7E         [ 4]   78 	call is_alnum 
      00117C 24 06            [ 1]   79 	jrnc 1$
      00117E                         80 0$: 
      00117E A6 20            [ 1]   81 	ld a,#SPACE 
      001180 90 F7            [ 1]   82 	ld (y),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001182 90 5C            [ 1]   83 	incw y 
      001184 81               [ 4]   84 1$: ret 
                                     85 
                                     86 ;--------------------------
                                     87 ;  align text in buffer 
                                     88 ;  to tab_width padding 
                                     89 ;  left with  SPACE 
                                     90 ; input:
                                     91 ;   X      str*
                                     92 ;   A      str_length 
                                     93 ; output:
                                     94 ;   X      ajusted
                                     95 ;--------------------------
      001185                         96 right_align::
      001185 88               [ 1]   97 	push a 
      001186 7B 01            [ 1]   98 0$: ld a,(1,sp)
      001188 C1 00 23         [ 1]   99 	cp a,tab_width 
      00118B 2A 08            [ 1]  100 	jrpl 1$
      00118D A6 20            [ 1]  101 	ld a,#SPACE 
      00118F 5A               [ 2]  102 	decw x
      001190 F7               [ 1]  103 	ld (x),a  
      001191 0C 01            [ 1]  104 	inc (1,sp)
      001193 20 F1            [ 2]  105 	jra 0$ 
      001195 84               [ 1]  106 1$: pop a 	
      001196 81               [ 4]  107 	ret 
                                    108 
                                    109 ;--------------------------
                                    110 ; print TK_QSTR
                                    111 ; converting control character
                                    112 ; to backslash sequence
                                    113 ; input:
                                    114 ;   X        char *
                                    115 ;   Y        dest. buffer 
                                    116 ; output:
                                    117 ;   X        moved forward 
                                    118 ;   Y        moved forward 
                                    119 ;-----------------------------
      001197                        120 cpy_quote:
      001197 A6 22            [ 1]  121 	ld a,#'"
      001199 90 F7            [ 1]  122 	ld (y),a 
      00119B 90 5C            [ 1]  123 	incw y 
      00119D 89               [ 2]  124 	pushw x 
      00119E CD 17 C7         [ 4]  125 	call skip_string 
      0011A1 85               [ 2]  126 	popw x 
      0011A2 F6               [ 1]  127 1$:	ld a,(x)
      0011A3 27 30            [ 1]  128 	jreq 9$
      0011A5 5C               [ 1]  129 	incw x 
      0011A6 A1 20            [ 1]  130 	cp a,#SPACE 
      0011A8 25 0E            [ 1]  131 	jrult 3$
      0011AA 90 F7            [ 1]  132 	ld (y),a
      0011AC 90 5C            [ 1]  133 	incw y 
      0011AE A1 5C            [ 1]  134 	cp a,#'\ 
      0011B0 26 F0            [ 1]  135 	jrne 1$ 
      0011B2                        136 2$:
      0011B2 90 F7            [ 1]  137 	ld (y),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      0011B4 90 5C            [ 1]  138 	incw y  
      0011B6 20 EA            [ 2]  139 	jra 1$
      0011B8 88               [ 1]  140 3$: push a 
      0011B9 A6 5C            [ 1]  141 	ld a,#'\
      0011BB 90 F7            [ 1]  142 	ld (y),a 
      0011BD 90 5C            [ 1]  143 	incw y  
      0011BF 84               [ 1]  144 	pop a 
      0011C0 A0 07            [ 1]  145 	sub a,#7
      0011C2 C7 00 0E         [ 1]  146 	ld acc8,a 
      0011C5 72 5F 00 0D      [ 1]  147 	clr acc16
      0011C9 89               [ 2]  148 	pushw x
      0011CA AE 0D CC         [ 2]  149 	ldw x,#escaped 
      0011CD 72 BB 00 0D      [ 2]  150 	addw x,acc16 
      0011D1 F6               [ 1]  151 	ld a,(x)
      0011D2 85               [ 2]  152 	popw x
      0011D3 20 DD            [ 2]  153 	jra 2$
      0011D5 A6 22            [ 1]  154 9$: ld a,#'"
      0011D7 90 F7            [ 1]  155 	ld (y),a 
      0011D9 90 5C            [ 1]  156 	incw y  
      0011DB 5C               [ 1]  157 	incw x 
      0011DC 81               [ 4]  158 	ret
                                    159 
                                    160 ;--------------------------
                                    161 ; return variable name 
                                    162 ; from its address.
                                    163 ; input:
                                    164 ;   X    variable address
                                    165 ; output:
                                    166 ;   A     variable letter
                                    167 ;--------------------------
      0011DD                        168 var_name::
      0011DD 1D 00 30         [ 2]  169 		subw x,#vars 
      0011E0 A6 03            [ 1]  170 		ld a,#3
      0011E2 62               [ 2]  171 		div x,a 
      0011E3 9F               [ 1]  172 		ld a,xl 
      0011E4 AB 41            [ 1]  173 		add a,#'A 
      0011E6 81               [ 4]  174 		ret 
                                    175 
                                    176 ;-----------------------------
                                    177 ; return cmd  idx from its 
                                    178 ; code address 
                                    179 ; input:
                                    180 ;   X      code address 
                                    181 ; output:
                                    182 ;   X      cmd_idx
                                    183 ;-----------------------------
      0011E7                        184 get_cmd_idx:
      0011E7 90 89            [ 2]  185 	pushw y
      0011E9 90 AE 33 71      [ 2]  186 	ldw y,#code_addr 
      0011ED 90 CF 00 19      [ 2]  187 	ldw ptr16,y 
      0011F1 90 5F            [ 1]  188 	clrw y 
      0011F3 91 D3 19         [ 5]  189 1$:	cpw x,([ptr16],y)
      0011F6 27 0C            [ 1]  190 	jreq 3$ 
      0011F8 90 5C            [ 1]  191 	incw y 
      0011FA 91 D6 19         [ 4]  192 	ld a,([ptr16],y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0011FD 90 5C            [ 1]  193 	incw y
      0011FF 91 DA 19         [ 4]  194 	or a,([ptr16],y)	
      001202 26 EF            [ 1]  195 	jrne 1$
      001204 93               [ 1]  196 3$: ldw x,y 
      001205 90 85            [ 2]  197 	popw y 
      001207 81               [ 4]  198 	ret
                                    199 
                                    200 
                                    201 ;-------------------------------------
                                    202 ; decompile tokens list 
                                    203 ; to original text line 
                                    204 ; input:
                                    205 ;   [basicptr]  pointer at line 
                                    206 ;   Y           output buffer
                                    207 ; output:
                                    208 ;   A           length 
                                    209 ;   Y           after string  
                                    210 ;------------------------------------
                           000001   211 	BASE_SAV=1
                           000002   212 	WIDTH_SAV=2
                           000003   213 	STR=3
                           000004   214 	VSIZE=4 
      001208                        215 decompile::
      001208                        216 	_vars VSIZE
      001208 52 04            [ 2]    1     sub sp,#VSIZE 
      00120A C6 00 0A         [ 1]  217 	ld a,base
      00120D 6B 01            [ 1]  218 	ld (BASE_SAV,sp),a  
      00120F C6 00 23         [ 1]  219 	ld a,tab_width 
      001212 6B 02            [ 1]  220 	ld (WIDTH_SAV,sp),a 
      001214 17 03            [ 2]  221 	ldw (STR,sp),y   
      001216 72 CE 00 04      [ 5]  222 	ldw x,[basicptr] ; line number 
      00121A 35 0A 00 0A      [ 1]  223 	mov base,#10
      00121E 35 05 00 23      [ 1]  224 	mov tab_width,#5
      001222 72 5F 00 0C      [ 1]  225 	clr acc24 
      001226 CF 00 0D         [ 2]  226 	ldw acc16,x
      001229 4F               [ 1]  227 	clr a ; unsigned conversion 
      00122A CD 18 33         [ 4]  228 	call itoa  
      00122D CD 11 85         [ 4]  229 	call right_align 
      001230 88               [ 1]  230 	push a 
      001231 90 93            [ 1]  231 1$:	ldw y,x ; source
      001233 1E 04            [ 2]  232 	ldw x,(STR+1,sp) ; destination
      001235 CD 14 00         [ 4]  233 	call strcpy 
      001238 90 5F            [ 1]  234 	clrw y 
      00123A 84               [ 1]  235 	pop a 
      00123B 90 97            [ 1]  236 	ld yl,a 
      00123D 72 F9 03         [ 2]  237 	addw y,(STR,sp)
      001240 A6 20            [ 1]  238 	ld a,#SPACE 
      001242 90 F7            [ 1]  239 	ld (y),a 
      001244 90 5C            [ 1]  240 	incw y 
      001246 72 5F 00 23      [ 1]  241 	clr tab_width
      00124A AE 00 03         [ 2]  242 	ldw x,#3
      00124D CF 00 00         [ 2]  243 	ldw in.w,x 
      001250                        244 decomp_loop:
      001250 90 89            [ 2]  245 	pushw y
      001252 CD 17 A1         [ 4]  246 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001255 90 85            [ 2]  247 	popw y 
      001257 4D               [ 1]  248 	tnz a  
      001258 26 03            [ 1]  249 	jrne 1$
      00125A CC 13 77         [ 2]  250 	jp 20$
      00125D 2B 03            [ 1]  251 1$:	jrmi 2$
      00125F CC 12 E8         [ 2]  252 	jp 6$
      001262                        253 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      001262 A1 85            [ 1]  254 	cp a,#TK_VAR 
      001264 26 0F            [ 1]  255 	jrne 3$
                                    256 ;; TK_VAR 
      001266 CD 11 6F         [ 4]  257 	call add_space
      001269 CD 17 D6         [ 4]  258 	call get_addr   
      00126C CD 11 DD         [ 4]  259 	call var_name
      00126F 90 F7            [ 1]  260 	ld (y),a 
      001271 90 5C            [ 1]  261 	incw y  
      001273 20 DB            [ 2]  262 	jra decomp_loop
      001275                        263 3$:
      001275 A1 84            [ 1]  264 	cp a,#TK_INTGR
      001277 26 26            [ 1]  265 	jrne 4$
                                    266 ;; TK_INTGR
      001279 CD 17 E0         [ 4]  267 	call get_int24 
      00127C C7 00 0C         [ 1]  268 	ld acc24,a 
      00127F CF 00 0D         [ 2]  269 	ldw acc16,x 
      001282 CD 11 6F         [ 4]  270 	call add_space
      001285 90 89            [ 2]  271 	pushw y 
      001287 A6 FF            [ 1]  272 	ld a,#255 ; signed conversion 
      001289 CD 18 33         [ 4]  273 	call itoa  
      00128C 16 01            [ 2]  274 	ldw y,(1,sp) 
      00128E 88               [ 1]  275 	push a 
      00128F 51               [ 1]  276 	exgw x,y 
      001290 CD 14 00         [ 4]  277 	call strcpy 
      001293 90 5F            [ 1]  278 	clrw y
      001295 84               [ 1]  279 	pop a  
      001296 90 97            [ 1]  280 	ld yl,a 
      001298 72 F9 01         [ 2]  281 	addw y,(1,sp)
      00129B                        282 	_drop 2 
      00129B 5B 02            [ 2]    1     addw sp,#2 
      00129D 20 B1            [ 2]  283 	jra decomp_loop
      00129F                        284 4$: ; dictionary keyword 
      00129F FE               [ 2]  285 	ldw x,(x)
      0012A0 72 5C 00 01      [ 1]  286 	inc in 
      0012A4 72 5C 00 01      [ 1]  287 	inc in 
      0012A8 A3 00 88         [ 2]  288 	cpw x,#REM_IDX
      0012AB 26 23            [ 1]  289 	jrne 5$
      0012AD CE 00 04         [ 2]  290 	ldw x,basicptr 
                                    291 ; copy comment to buffer 
      0012B0 CD 11 6F         [ 4]  292 	call add_space
      0012B3 A6 27            [ 1]  293 	ld a,#''
      0012B5 90 F7            [ 1]  294 	ld (y),a 
      0012B7 90 5C            [ 1]  295 	incw y 
      0012B9                        296 46$:
      0012B9 72 D6 00 00      [ 4]  297 	ld a,([in.w],x)
      0012BD 72 5C 00 01      [ 1]  298 	inc in  
      0012C1 90 F7            [ 1]  299 	ld (y),a 
      0012C3 90 5C            [ 1]  300 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0012C5 C6 00 01         [ 1]  301 	ld a,in 
      0012C8 C1 00 03         [ 1]  302 	cp a,count 
      0012CB 2B EC            [ 1]  303 	jrmi 46$
      0012CD CC 13 77         [ 2]  304 	jp 20$  
      0012D0 A3 00 4E         [ 2]  305 5$: cpw x,#LET_IDX 
      0012D3 26 03            [ 1]  306 	jrne 51$
      0012D5 CC 12 50         [ 2]  307 	jp decomp_loop ; down display LET 	
      0012D8                        308 51$: ; insert command name 
      0012D8 CD 11 6F         [ 4]  309 	call add_space  
      0012DB 90 89            [ 2]  310 	pushw y
      0012DD CD 13 B2         [ 4]  311 	call cmd_name
      0012E0 90 85            [ 2]  312 	popw y 
      0012E2 CD 11 5A         [ 4]  313 	call cpy_cmd_name
      0012E5 CC 12 50         [ 2]  314 	jp decomp_loop 
      0012E8                        315 6$:
                                    316 ; label?
      0012E8 A1 03            [ 1]  317 	cp a,#TK_LABEL 
      0012EA 26 1E            [ 1]  318 	jrne 64$
                                    319 ; copy label string to output buffer   	
      0012EC A6 20            [ 1]  320 	ld a,#32 
      0012EE 90 F7            [ 1]  321 	ld (y),a 
      0012F0 90 5C            [ 1]  322 	incw y 
      0012F2                        323 61$:
      0012F2 89               [ 2]  324 	pushw x 
      0012F3 CD 17 C7         [ 4]  325 	call skip_string 
      0012F6 85               [ 2]  326 	popw x 
      0012F7                        327 62$:	
      0012F7 F6               [ 1]  328 	ld a,(x)
      0012F8 27 07            [ 1]  329 	jreq 63$ 
      0012FA 5C               [ 1]  330 	incw x  
      0012FB 90 F7            [ 1]  331 	ld (y),a 
      0012FD 90 5C            [ 1]  332 	incw y 
      0012FF 20 F6            [ 2]  333 	jra 62$ 
      001301                        334 63$: 
      001301 A6 20            [ 1]  335 	ld a,#32 
      001303 90 F7            [ 1]  336 	ld (y),a 
      001305 90 5C            [ 1]  337 	incw y 
      001307 CC 12 50         [ 2]  338 	jp decomp_loop
      00130A                        339 64$:
      00130A A1 02            [ 1]  340 	cp a,#TK_QSTR 
      00130C 26 09            [ 1]  341 	jrne 7$
                                    342 ;; TK_QSTR
      00130E CD 11 6F         [ 4]  343 	call add_space
      001311 CD 11 97         [ 4]  344 	call cpy_quote  
      001314 CC 12 50         [ 2]  345 	jp decomp_loop
      001317                        346 7$:
      001317 A1 04            [ 1]  347 	cp a,#TK_CHAR 
      001319 26 10            [ 1]  348 	jrne 8$
                                    349 ;; TK_CHAR
      00131B CD 11 6F         [ 4]  350 	call add_space 
      00131E A6 5C            [ 1]  351 	ld a,#'\ 
      001320 90 F7            [ 1]  352 	ld (y),a 
      001322 90 5C            [ 1]  353 	incw y
      001324 F6               [ 1]  354 	ld a,(x)
      001325 72 5C 00 01      [ 1]  355 	inc in  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001329 20 06            [ 2]  356 	jra 81$
      00132B A1 0A            [ 1]  357 8$: cp a,#TK_COLON 
      00132D 26 09            [ 1]  358 	jrne 9$
      00132F A6 3A            [ 1]  359 	ld a,#':
      001331                        360 81$:
      001331 90 F7            [ 1]  361 	ld (y),a 
      001333 90 5C            [ 1]  362 	incw y 
      001335                        363 82$:
      001335 CC 12 50         [ 2]  364 	jp decomp_loop
      001338                        365 9$: 
      001338 A1 09            [ 1]  366 	cp a,#TK_SHARP
      00133A 22 0A            [ 1]  367 	jrugt 10$ 
      00133C A0 05            [ 1]  368 	sub a,#TK_ARRAY 
      00133E 5F               [ 1]  369 	clrw x 
      00133F 97               [ 1]  370 	ld xl,a
      001340 1C 13 8D         [ 2]  371 	addw x,#single_char 
      001343 F6               [ 1]  372 	ld a,(x)
      001344 20 EB            [ 2]  373 	jra 81$ 
      001346                        374 10$: 
      001346 A1 11            [ 1]  375 	cp a,#TK_MINUS 
      001348 22 0A            [ 1]  376 	jrugt 11$
      00134A A0 10            [ 1]  377 	sub a,#TK_PLUS 
      00134C 5F               [ 1]  378 	clrw x 
      00134D 97               [ 1]  379 	ld xl,a 
      00134E 1C 13 92         [ 2]  380 	addw x,#add_char 
      001351 F6               [ 1]  381 	ld a,(x)
      001352 20 DD            [ 2]  382 	jra 81$
      001354                        383 11$:
      001354 A1 22            [ 1]  384     cp a,#TK_MOD 
      001356 22 0A            [ 1]  385 	jrugt 12$
      001358 A0 20            [ 1]  386 	sub a,#TK_MULT
      00135A 5F               [ 1]  387 	clrw x 
      00135B 97               [ 1]  388 	ld xl,a 
      00135C 1C 13 94         [ 2]  389 	addw x,#mul_char
      00135F F6               [ 1]  390 	ld a,(x)
      001360 20 CF            [ 2]  391 	jra 81$
      001362                        392 12$:
      001362 A0 31            [ 1]  393 	sub a,#TK_GT  
      001364 48               [ 1]  394 	sll a 
      001365 5F               [ 1]  395 	clrw x 
      001366 97               [ 1]  396 	ld xl,a 
      001367 1C 13 97         [ 2]  397 	addw x,#relop_str 
      00136A FE               [ 2]  398 	ldw x,(x)
      00136B F6               [ 1]  399 	ld a,(x)
      00136C 5C               [ 1]  400 	incw x 
      00136D 90 F7            [ 1]  401 	ld (y),a
      00136F 90 5C            [ 1]  402 	incw y 
      001371 F6               [ 1]  403 	ld a,(x)
      001372 26 BD            [ 1]  404 	jrne 81$
      001374 CC 12 50         [ 2]  405 	jp decomp_loop 
      001377                        406 20$: 
      001377 90 7F            [ 1]  407 	clr (y)
      001379 1E 03            [ 2]  408 	ldw x,(STR,sp)
      00137B 7B 01            [ 1]  409 	ld a,(BASE_SAV,sp)
      00137D C7 00 0A         [ 1]  410 	ld base,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      001380 7B 02            [ 1]  411 	ld a,(WIDTH_SAV,sp)
      001382 C7 00 23         [ 1]  412 	ld tab_width,a
      001385 72 F2 03         [ 2]  413 	subw y,(STR,sp) 
      001388 90 9F            [ 1]  414 	ld a,yl 
      00138A                        415 	_drop VSIZE 
      00138A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00138C 81               [ 4]  416 	ret 
                                    417 
      00138D 40 28 29 2C 23         418 single_char: .byte '@','(',')',',','#'
      001392 2B 2D                  419 add_char: .byte '+','-'
      001394 2A 2F 25               420 mul_char: .byte '*','/','%'
      001397 13 A3 13 A5 13 A7 13   421 relop_str: .word gt,equal,ge,lt,le,ne 
             AA 13 AC 13 AF
      0013A3 3E 00                  422 gt: .asciz ">"
      0013A5 3D 00                  423 equal: .asciz "="
      0013A7 3E 3D 00               424 ge: .asciz ">="
      0013AA 3C 00                  425 lt: .asciz "<"
      0013AC 3C 3D 00               426 le: .asciz "<="
      0013AF 3C 3E 00               427 ne:  .asciz "<>"
                                    428 
                                    429 ;----------------------------------
                                    430 ; search in kword_dict name
                                    431 ; from its execution address 
                                    432 ; input:
                                    433 ;   X       	cmd_index 
                                    434 ; output:
                                    435 ;   X 			cstr*  | 0 
                                    436 ;--------------------------------
                           000001   437 	CMDX=1 
                           000003   438 	LINK=3 
                           000004   439 	VSIZE=4
      0013B2                        440 cmd_name:
      0013B2                        441 	_vars VSIZE 
      0013B2 52 04            [ 2]    1     sub sp,#VSIZE 
      0013B4 72 5F 00 0D      [ 1]  442 	clr acc16 
      0013B8 1F 01            [ 2]  443 	ldw (CMDX,sp),x  
      0013BA AE 33 69         [ 2]  444 	ldw x,#kword_dict	
      0013BD 1F 03            [ 2]  445 1$:	ldw (LINK,sp),x
      0013BF E6 02            [ 1]  446 	ld a,(2,x)
      0013C1 A4 0F            [ 1]  447 	and a,#15 
      0013C3 C7 00 0E         [ 1]  448 	ld acc8,a 
      0013C6 1C 00 03         [ 2]  449 	addw x,#3
      0013C9 72 BB 00 0D      [ 2]  450 	addw x,acc16
      0013CD FE               [ 2]  451 	ldw x,(x) ; command index  
      0013CE 13 01            [ 2]  452 	cpw x,(CMDX,sp)
      0013D0 27 0A            [ 1]  453 	jreq 2$
      0013D2 1E 03            [ 2]  454 	ldw x,(LINK,sp)
      0013D4 FE               [ 2]  455 	ldw x,(x) 
      0013D5 1D 00 02         [ 2]  456 	subw x,#2  
      0013D8 26 E3            [ 1]  457 	jrne 1$
      0013DA 20 05            [ 2]  458 	jra 9$
      0013DC 1E 03            [ 2]  459 2$: ldw x,(LINK,sp)
      0013DE 1C 00 02         [ 2]  460 	addw x,#2 	
      0013E1                        461 9$:	_drop VSIZE
      0013E1 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0013E3 81               [ 4]  462 	ret
                                    463 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     94 ; 24 bits integer variables 
      000030                         95 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     96 
                                     97 	.area BTXT (ABS)
      00007C                         98 	.org 0x7C  
                                     99 ; keep 'free_ram' as last variable 
                                    100 ; basic code compiled here. 
      00007C                        101 rsign: .blkw 1 ; "BC" 
      00007E                        102 rsize: .blkw 1 ; code size 	 
      000080                        103 free_ram: ; from here RAM free for BASIC text 
                                    104 
                                    105 	.area CODE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



                                    106 
                                    107 
                                    108 ;-------------------------------------
                                    109 ; retrun string length
                                    110 ; input:
                                    111 ;   X         .asciz  pointer 
                                    112 ; output:
                                    113 ;   X         not affected 
                                    114 ;   A         length 
                                    115 ;-------------------------------------
      0013E4                        116 strlen::
      0013E4 89               [ 2]  117 	pushw x 
      0013E5 4F               [ 1]  118 	clr a
      0013E6 7D               [ 1]  119 1$:	tnz (x) 
      0013E7 27 04            [ 1]  120 	jreq 9$ 
      0013E9 4C               [ 1]  121 	inc a 
      0013EA 5C               [ 1]  122 	incw x 
      0013EB 20 F9            [ 2]  123 	jra 1$ 
      0013ED 85               [ 2]  124 9$:	popw x 
      0013EE 81               [ 4]  125 	ret 
                                    126 
                                    127 ;------------------------------------
                                    128 ; compare 2 strings
                                    129 ; input:
                                    130 ;   X 		char* first string 
                                    131 ;   Y       char* second string 
                                    132 ; output:
                                    133 ;   A 		0 not == |1 ==  
                                    134 ;-------------------------------------
      0013EF                        135 strcmp:
      0013EF F6               [ 1]  136 	ld a,(x)
      0013F0 27 0B            [ 1]  137 	jreq 5$ 
      0013F2 90 F1            [ 1]  138 	cp a,(y) 
      0013F4 26 05            [ 1]  139 	jrne 4$ 
      0013F6 5C               [ 1]  140 	incw x 
      0013F7 90 5C            [ 1]  141 	incw y 
      0013F9 20 F4            [ 2]  142 	jra strcmp 
      0013FB                        143 4$: ; not same  
      0013FB 4F               [ 1]  144 	clr a 
      0013FC 81               [ 4]  145 	ret 
      0013FD                        146 5$: ; same 
      0013FD A6 01            [ 1]  147 	ld a,#1 
      0013FF 81               [ 4]  148 	ret 
                                    149 
                                    150 
                                    151 ;---------------------------------------
                                    152 ;  copy src to dest 
                                    153 ; input:
                                    154 ;   X 		dest 
                                    155 ;   Y 		src 
                                    156 ; output: 
                                    157 ;   X 		dest 
                                    158 ;----------------------------------
      001400                        159 strcpy::
      001400 88               [ 1]  160 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      001401 89               [ 2]  161 	pushw x 
      001402 90 F6            [ 1]  162 1$: ld a,(y)
      001404 27 06            [ 1]  163 	jreq 9$ 
      001406 F7               [ 1]  164 	ld (x),a 
      001407 5C               [ 1]  165 	incw x 
      001408 90 5C            [ 1]  166 	incw y 
      00140A 20 F6            [ 2]  167 	jra 1$ 
      00140C 7F               [ 1]  168 9$:	clr (x)
      00140D 85               [ 2]  169 	popw x 
      00140E 84               [ 1]  170 	pop a 
      00140F 81               [ 4]  171 	ret 
                                    172 
                                    173 ;---------------------------------------
                                    174 ; move memory block 
                                    175 ; input:
                                    176 ;   X 		destination 
                                    177 ;   Y 	    source 
                                    178 ;   acc16	bytes count 
                                    179 ; output:
                                    180 ;   none 
                                    181 ;--------------------------------------
                           000001   182 	INCR=1 ; increament high byte 
                           000002   183 	LB=2 ; increament low byte 
                           000002   184 	VSIZE=2
      001410                        185 move::
      001410 88               [ 1]  186 	push a 
      001411                        187 	_vars VSIZE 
      001411 52 02            [ 2]    1     sub sp,#VSIZE 
      001413 0F 01            [ 1]  188 	clr (INCR,sp)
      001415 0F 02            [ 1]  189 	clr (LB,sp)
      001417 90 89            [ 2]  190 	pushw y 
      001419 13 01            [ 2]  191 	cpw x,(1,sp) ; compare DEST to SRC 
      00141B 90 85            [ 2]  192 	popw y 
      00141D 27 31            [ 1]  193 	jreq move_exit ; x==y 
      00141F 2B 0E            [ 1]  194 	jrmi move_down
      001421                        195 move_up: ; start from top address with incr=-1
      001421 72 BB 00 0D      [ 2]  196 	addw x,acc16
      001425 72 B9 00 0D      [ 2]  197 	addw y,acc16
      001429 03 01            [ 1]  198 	cpl (INCR,sp)
      00142B 03 02            [ 1]  199 	cpl (LB,sp)   ; increment = -1 
      00142D 20 05            [ 2]  200 	jra move_loop  
      00142F                        201 move_down: ; start from bottom address with incr=1 
      00142F 5A               [ 2]  202     decw x 
      001430 90 5A            [ 2]  203 	decw y
      001432 0C 02            [ 1]  204 	inc (LB,sp) ; incr=1 
      001434                        205 move_loop:	
      001434 C6 00 0D         [ 1]  206     ld a, acc16 
      001437 CA 00 0E         [ 1]  207 	or a, acc8
      00143A 27 14            [ 1]  208 	jreq move_exit 
      00143C 72 FB 01         [ 2]  209 	addw x,(INCR,sp)
      00143F 72 F9 01         [ 2]  210 	addw y,(INCR,sp) 
      001442 90 F6            [ 1]  211 	ld a,(y)
      001444 F7               [ 1]  212 	ld (x),a 
      001445 89               [ 2]  213 	pushw x 
      001446 CE 00 0D         [ 2]  214 	ldw x,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      001449 5A               [ 2]  215 	decw x 
      00144A CF 00 0D         [ 2]  216 	ldw acc16,x 
      00144D 85               [ 2]  217 	popw x 
      00144E 20 E4            [ 2]  218 	jra move_loop
      001450                        219 move_exit:
      001450                        220 	_drop VSIZE
      001450 5B 02            [ 2]    1     addw sp,#VSIZE 
      001452 84               [ 1]  221 	pop a 
      001453 81               [ 4]  222 	ret 	
                                    223 
                                    224 ;------------------------------------
                                    225 ;  set all variables to zero 
                                    226 ; input:
                                    227 ;   none 
                                    228 ; output:
                                    229 ;	none
                                    230 ;------------------------------------
      001454                        231 clear_vars:
      001454 89               [ 2]  232 	pushw x 
      001455 88               [ 1]  233 	push a  
      001456 AE 00 30         [ 2]  234 	ldw x,#vars 
      001459 A6 4E            [ 1]  235 	ld a,#CELL_SIZE*26 
      00145B 7F               [ 1]  236 1$:	clr (x)
      00145C 5C               [ 1]  237 	incw x 
      00145D 4A               [ 1]  238 	dec a 
      00145E 26 FB            [ 1]  239 	jrne 1$
      001460 84               [ 1]  240 	pop a 
      001461 85               [ 2]  241 	popw x 
      001462 81               [ 4]  242 	ret 
                                    243 
                                    244 
                                    245 ;-----------------------
                                    246 ;  display system 
                                    247 ;  information 
                                    248 ;-----------------------
                           000002   249 	MAJOR=2
                           000000   250 	MINOR=0 
      001463 0A 0A 54 69 6E 79 20   251 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    252 
      0014A9                        253 system_information:
      0014A9 AE 14 63         [ 2]  254 	ldw x,#software 
      0014AC CD 09 A1         [ 4]  255 	call puts 
      0014AF A6 02            [ 1]  256 	ld a,#MAJOR 
      0014B1 C7 00 0E         [ 1]  257 	ld acc8,a 
      0014B4 5F               [ 1]  258 	clrw x 
      0014B5 CF 00 0C         [ 2]  259 	ldw acc24,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0014B8 72 5F 00 23      [ 1]  260 	clr tab_width  
      0014BC 35 0A 00 0A      [ 1]  261 	mov base, #10 
      0014C0 CD 18 0D         [ 4]  262 	call prt_acc24 
      0014C3 A6 2E            [ 1]  263 	ld a,#'.
      0014C5 CD 09 44         [ 4]  264 	call putc 
      0014C8 A6 00            [ 1]  265 	ld a,#MINOR 
      0014CA C7 00 0E         [ 1]  266 	ld acc8,a 
      0014CD 5F               [ 1]  267 	clrw x 
      0014CE CF 00 0C         [ 2]  268 	ldw acc24,x 
      0014D1 CD 18 0D         [ 4]  269 	call prt_acc24
      0014D4 A6 0D            [ 1]  270 	ld a,#CR 
      0014D6 CD 09 44         [ 4]  271 	call putc
                                    272 ;call test 
      0014D9 81               [ 4]  273 	ret
                                    274 
      0014DA                        275 warm_init:
      0014DA 90 AE 17 73      [ 2]  276 	ldw y,#XSTACK_EMPTY  
      0014DE 72 5F 00 22      [ 1]  277 	clr flags 
      0014E2 72 5F 00 1F      [ 1]  278 	clr loop_depth 
      0014E6 35 04 00 23      [ 1]  279 	mov tab_width,#TAB_WIDTH 
      0014EA 35 0A 00 0A      [ 1]  280 	mov base,#10 
      0014EE AE 00 00         [ 2]  281 	ldw x,#0 
      0014F1 CF 00 04         [ 2]  282 	ldw basicptr,x 
      0014F4 CF 00 00         [ 2]  283 	ldw in.w,x 
      0014F7 72 5F 00 03      [ 1]  284 	clr count
      0014FB 81               [ 4]  285 	ret 
                                    286 
                                    287 ;---------------------------
                                    288 ; reset BASIC text variables 
                                    289 ; and clear variables 
                                    290 ;---------------------------
      0014FC                        291 clear_basic:
      0014FC 89               [ 2]  292 	pushw x 
      0014FD 72 5F 00 03      [ 1]  293 	clr count
      001501 72 5F 00 01      [ 1]  294 	clr in  
      001505 AE 00 80         [ 2]  295 	ldw x,#free_ram 
      001508 CF 00 1B         [ 2]  296 	ldw txtbgn,x 
      00150B CF 00 1D         [ 2]  297 	ldw txtend,x 
      00150E CD 14 54         [ 4]  298 	call clear_vars 
      001511 85               [ 2]  299 	popw x
      001512 81               [ 4]  300 	ret 
                                    301 
                                    302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    303 ;;   Tiny BASIC error messages     ;;
                                    304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001513                        305 err_msg:
      001513 00 00 15 35 15 42 15   306 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             50 15 69 15 78
      00151F 15 8E 15 A4 15 BE 15   307 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             CF 15 E0
      001529 15 EC 16 1F 16 2F 16   308 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             43 16 56
      001533 16 63                  309 	.word err_overflow 
                                    310 
      001535 4D 65 6D 6F 72 79 20   311 err_mem_full: .asciz "Memory full\n" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



             66 75 6C 6C 0A 00
      001542 73 79 6E 74 61 78 20   312 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      001550 6D 61 74 68 20 6F 70   313 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001569 64 69 76 69 73 69 6F   314 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001578 69 6E 76 61 6C 69 64   315 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00158E 72 75 6E 20 74 69 6D   316 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0015A4 63 6F 6D 6D 61 6E 64   317 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0015BE 64 75 70 6C 69 63 61   318 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0015CF 46 69 6C 65 20 6E 6F   319 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0015E0 62 61 64 20 76 61 6C   320 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0015EC 46 69 6C 65 20 69 6E   321 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      00161F 4E 6F 20 64 61 74 61   322 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      00162F 4E 6F 20 70 72 6F 67   323 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      001643 46 69 6C 65 20 73 79   324 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001656 42 75 66 66 65 72 20   325 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      001663 6F 76 65 72 66 6C 6F   326 err_overflow: .asciz "overflow\n" 
             77 0A 00
                                    327 
      00166D 0A 72 75 6E 20 74 69   328 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      00167F 0A 63 6F 6D 70 69 6C   329 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001690 6C 61 73 74 20 74 6F   330 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    331 
      0016A0                        332 syntax_error::
      0016A0 A6 02            [ 1]  333 	ld a,#ERR_SYNTAX 
                                    334 
      0016A2                        335 tb_error::
      0016A2 72 0A 00 22 4C   [ 2]  336 	btjt flags,#FCOMP,1$
      0016A7 88               [ 1]  337 	push a 
      0016A8 AE 16 6D         [ 2]  338 	ldw x, #rt_msg 
      0016AB CD 09 A1         [ 4]  339 	call puts 
      0016AE 84               [ 1]  340 	pop a 
      0016AF AE 15 13         [ 2]  341 	ldw x, #err_msg 
      0016B2 72 5F 00 0D      [ 1]  342 	clr acc16 
      0016B6 48               [ 1]  343 	sll a
      0016B7 72 59 00 0D      [ 1]  344 	rlc acc16  
      0016BB C7 00 0E         [ 1]  345 	ld acc8, a 
      0016BE 72 BB 00 0D      [ 2]  346 	addw x,acc16 
      0016C2 FE               [ 2]  347 	ldw x,(x)
      0016C3 CD 09 A1         [ 4]  348 	call puts
      0016C6 CE 00 04         [ 2]  349 	ldw x,basicptr 
                           000001   350 .if DEBUG 
      0016C9 C6 00 03         [ 1]  351 ld a,count 
      0016CC 90 5F            [ 1]  352 clrw y 
      0016CE 90 02            [ 1]  353 rlwa y  
      0016D0 CD 06 A0         [ 4]  354 call hex_dump
      0016D3 CE 00 04         [ 2]  355 ldw x,basicptr
                                    356 .endif 
      0016D6 C6 00 01         [ 1]  357 	ld a,in 
      0016D9 CD 1F 41         [ 4]  358 	call prt_basic_line
      0016DC AE 16 90         [ 2]  359 	ldw x,#tk_id 
      0016DF CD 09 A1         [ 4]  360 	call puts 
      0016E2 C6 00 02         [ 1]  361 	ld a,in.saved 
      0016E5 5F               [ 1]  362 	clrw x 
      0016E6 97               [ 1]  363 	ld xl,a 
      0016E7 72 BB 00 04      [ 2]  364 	addw x,basicptr 
      0016EB F6               [ 1]  365 	ld a,(x)
      0016EC 5F               [ 1]  366 	clrw x 
      0016ED 97               [ 1]  367 	ld xl,a 
      0016EE CD 17 F6         [ 4]  368 	call prt_i16
      0016F1 20 35            [ 2]  369 	jra 6$
      0016F3                        370 1$:	
      0016F3 88               [ 1]  371 	push a 
      0016F4 AE 16 7F         [ 2]  372 	ldw x,#comp_msg
      0016F7 CD 09 A1         [ 4]  373 	call puts 
      0016FA 84               [ 1]  374 	pop a 
      0016FB AE 15 13         [ 2]  375 	ldw x, #err_msg 
      0016FE 72 5F 00 0D      [ 1]  376 	clr acc16 
      001702 48               [ 1]  377 	sll a
      001703 72 59 00 0D      [ 1]  378 	rlc acc16  
      001707 C7 00 0E         [ 1]  379 	ld acc8, a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      00170A 72 BB 00 0D      [ 2]  380 	addw x,acc16 
      00170E FE               [ 2]  381 	ldw x,(x)
      00170F CD 09 A1         [ 4]  382 	call puts
      001712 AE 16 68         [ 2]  383 	ldw x,#tib
      001715 CD 09 A1         [ 4]  384 	call puts 
      001718 A6 0D            [ 1]  385 	ld a,#CR 
      00171A CD 09 44         [ 4]  386 	call putc
      00171D CE 00 00         [ 2]  387 	ldw x,in.w
      001720 CD 0A 0E         [ 4]  388 	call spaces
      001723 A6 5E            [ 1]  389 	ld a,#'^
      001725 CD 09 44         [ 4]  390 	call putc 
      001728 AE 17 FF         [ 2]  391 6$: ldw x,#STACK_EMPTY 
      00172B 94               [ 1]  392     ldw sp,x
                                    393 
      00172C                        394 warm_start:
      00172C CD 14 DA         [ 4]  395 	call warm_init
                                    396 ;----------------------------
                                    397 ;   BASIC interpreter
                                    398 ;----------------------------
      00172F                        399 cmd_line: ; user interface 
      00172F A6 0D            [ 1]  400 	ld a,#CR 
      001731 CD 09 44         [ 4]  401 	call putc 
      001734 A6 3E            [ 1]  402 	ld a,#'> 
      001736 CD 09 44         [ 4]  403 	call putc
      001739 CD 0A A6         [ 4]  404 	call readln
      00173C 72 5D 00 03      [ 1]  405 	tnz count 
      001740 27 ED            [ 1]  406 	jreq cmd_line
      001742 CD 10 DE         [ 4]  407 	call compile
                                    408 
                                    409 ;;;;;;;;;;;;;;;;;;;;;;	
                                    410 ;pushw y 
                                    411 ;ldw x,txtbgn  
                                    412 ;ldw y,txtend
                                    413 ;ldw acc16,x   
                                    414 ;subw y,acc16 
                                    415 ;call hex_dump
                                    416 ;popw y 
                                    417 ;;;;;;;;;;;;;;;;;;;;;;
                                    418 
                                    419 ; if text begin with a line number
                                    420 ; the compiler set count to zero    
                                    421 ; so code is not interpreted
      001745 72 5D 00 03      [ 1]  422 	tnz count 
      001749 27 E4            [ 1]  423 	jreq cmd_line
                                    424 	
                                    425 ; if direct command 
                                    426 ; it's ready to interpret 
                                    427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    428 ;; This is the interpreter loop
                                    429 ;; for each BASIC code line. 
                                    430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00174B                        431 interpreter: 
      00174B C6 00 01         [ 1]  432 	ld a,in 
      00174E C1 00 03         [ 1]  433 	cp a,count 
      001751 2B 1D            [ 1]  434 	jrmi interp_loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      001753                        435 next_line:
      001753 72 01 00 22 D7   [ 2]  436 	btjf flags, #FRUN, cmd_line
      001758 CE 00 04         [ 2]  437 	ldw x,basicptr
      00175B 72 BB 00 00      [ 2]  438 	addw x,in.w 
      00175F C3 00 1D         [ 2]  439 	cpw x,txtend 
      001762 2A C8            [ 1]  440 	jrpl warm_start
      001764 CF 00 04         [ 2]  441 	ldw basicptr,x ; start of next line  
      001767 E6 02            [ 1]  442 	ld a,(2,x)
      001769 C7 00 03         [ 1]  443 	ld count,a 
      00176C 35 03 00 01      [ 1]  444 	mov in,#3 ; skip first 3 bytes of line 
      001770                        445 interp_loop:
      001770 CD 17 A1         [ 4]  446 	call next_token
      001773 A1 00            [ 1]  447 	cp a,#TK_NONE 
      001775 27 DC            [ 1]  448 	jreq next_line 
      001777 A1 80            [ 1]  449 	cp a,#TK_CMD
      001779 26 06            [ 1]  450 	jrne 1$
      00177B CD 17 BA         [ 4]  451 	call get_code_addr
      00177E FD               [ 4]  452 	call (x) 
      00177F 20 EF            [ 2]  453 	jra interp_loop 
      001781                        454 1$:	 
      001781 A1 85            [ 1]  455 	cp a,#TK_VAR
      001783 26 05            [ 1]  456 	jrne 2$
      001785 CD 1C 00         [ 4]  457 	call let_var  
      001788 20 E6            [ 2]  458 	jra interp_loop 
      00178A                        459 2$:	
      00178A A1 05            [ 1]  460 	cp a,#TK_ARRAY 
      00178C 26 05            [ 1]  461 	jrne 3$
      00178E CD 1B FB         [ 4]  462 	call let_array 
      001791 20 DD            [ 2]  463 	jra interp_loop
      001793                        464 3$:	
      001793 A1 0A            [ 1]  465 	cp a,#TK_COLON 
      001795 27 D9            [ 1]  466 	jreq interp_loop
      001797 A1 03            [ 1]  467 4$: cp a,#TK_LABEL
      001799 CD 17 C7         [ 4]  468 	call skip_string 
      00179C 20 D2            [ 2]  469 	jra interp_loop 
      00179E CC 16 A0         [ 2]  470 5$:	jp syntax_error 
                                    471 
                                    472 ;--------------------------
                                    473 ; extract next token from
                                    474 ; token list 
                                    475 ; basicptr -> base address 
                                    476 ; in  -> offset in list array 
                                    477 ; output:
                                    478 ;   A 		token attribute
                                    479 ;   X 		*token_value 
                                    480 ;----------------------------------------
      0017A1                        481 next_token::
                                    482 ;	clrw x 
      0017A1 C6 00 01         [ 1]  483 	ld a,in 
      0017A4 C7 00 02         [ 1]  484 	ld in.saved,a ; in case "_unget_token" needed 
                                    485 ; don't replace sub by "cp a,count" 
                                    486 ; if end of line must return with A=0   	
      0017A7 C0 00 03         [ 1]  487 	sub a,count 
      0017AA 27 0D            [ 1]  488 	jreq 9$ ; end of line 
      0017AC                        489 0$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      0017AC CE 00 04         [ 2]  490 	ldw x,basicptr 
      0017AF 72 BB 00 00      [ 2]  491 	addw x,in.w 
      0017B3 F6               [ 1]  492 	ld a,(x)
      0017B4 5C               [ 1]  493 	incw x
      0017B5 72 5C 00 01      [ 1]  494 	inc in   
      0017B9 81               [ 4]  495 9$: ret 
                                    496 
                                    497 ;------------------------
                                    498 ; get cmd and function 
                                    499 ; code address 
                                    500 ; input:
                                    501 ;    X   * cmd|func index 
                                    502 ;        in code_addr table 
                                    503 ;------------------------
      0017BA                        504 get_code_addr:
      0017BA FE               [ 2]  505 	ldw x,(x)
      0017BB DE 33 71         [ 2]  506 	ldw x,(code_addr,x)
      0017BE                        507 skip_2_bytes:
      0017BE 72 5C 00 01      [ 1]  508 	inc in 
      0017C2 72 5C 00 01      [ 1]  509 	inc in 
      0017C6 81               [ 4]  510 	ret
                                    511 
                                    512 ;-------------------------
                                    513 ;  skip .asciz in BASIC line 
                                    514 ;  name 
                                    515 ;  input:
                                    516 ;     x		* string 
                                    517 ;  output:
                                    518 ;     none 
                                    519 ;-------------------------
      0017C7                        520 skip_string:
      0017C7 F6               [ 1]  521 	ld a,(x)
      0017C8 27 03            [ 1]  522 	jreq 1$
      0017CA 5C               [ 1]  523 	incw x 
      0017CB 20 FA            [ 2]  524 	jra skip_string 
      0017CD 5C               [ 1]  525 1$: incw x 	
      0017CE 72 B0 00 04      [ 2]  526 	subw x,basicptr 
      0017D2 CF 00 00         [ 2]  527 	ldw in.w,x 
      0017D5 81               [ 4]  528 	ret 
                                    529 
                                    530 ;---------------------
                                    531 ; extract 16 bits  
                                    532 ; address from BASIC
                                    533 ; code 
                                    534 ; input:
                                    535 ;    X    *address
                                    536 ; output:
                                    537 ;    X    address 
                                    538 ;-------------------- 
      0017D6                        539 get_addr:
      0017D6 FE               [ 2]  540 	ldw x,(x)
      0017D7 72 5C 00 01      [ 1]  541 	inc in 
      0017DB 72 5C 00 01      [ 1]  542 	inc in 
      0017DF 81               [ 4]  543 	ret 
                                    544 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    545 ;--------------------
                                    546 ; extract int24_t  
                                    547 ; value from BASIC 
                                    548 ; code 
                                    549 ; input:
                                    550 ;    X   *integer 
                                    551 ; output:
                                    552 ;    A:X   int24  
                                    553 ;--------------------
      0017E0                        554 get_int24:
      0017E0 F6               [ 1]  555 	ld a,(x)
      0017E1 EE 01            [ 2]  556 	ldw x,(1,x)
                                    557 ; skip 3 bytes 
      0017E3 72 5C 00 01      [ 1]  558 	inc in 
      0017E7 72 5C 00 01      [ 1]  559 	inc in 
      0017EB 72 5C 00 01      [ 1]  560 	inc in 
      0017EF 81               [ 4]  561 	ret 
                                    562 
                                    563 ;-------------------------
                                    564 ; get character from 
                                    565 ; BASIC code 
                                    566 ; input:
                                    567 ;    X   *char 
                                    568 ; output:
                                    569 ;    A    char 
                                    570 ;-------------------------
      0017F0                        571 get_char:
      0017F0 F6               [ 1]  572 	ld a,(x)
      0017F1 72 5C 00 01      [ 1]  573 	inc in  
      0017F5 81               [ 4]  574     ret 
                                    575 
                                    576 ;-----------------------------------
                                    577 ; print a 16 bit integer 
                                    578 ; using variable 'base' as conversion
                                    579 ; format.
                                    580 ; input:
                                    581 ;    X       integer to print 
                                    582 ;   'base'    conversion base 
                                    583 ; output:
                                    584 ;   terminal  
                                    585 ;-----------------------------------
      0017F6                        586 prt_i16:
      0017F6 72 5F 00 0C      [ 1]  587 	clr acc24 
      0017FA CF 00 0D         [ 2]  588 	ldw acc16,x 
      0017FD A6 10            [ 1]  589 	ld a,#16
      0017FF C1 00 0A         [ 1]  590 	cp a,base
      001802 27 09            [ 1]  591 	jreq prt_acc24  
      001804 72 0F 00 0D 04   [ 2]  592 	btjf acc16,#7,prt_acc24
      001809 72 53 00 0C      [ 1]  593 	cpl acc24 ; sign extend 
                                    594 	
                                    595 ;------------------------------------
                                    596 ; print integer in acc24 
                                    597 ; input:
                                    598 ;	acc24 		integer to print 
                                    599 ;	'base' 		numerical base for conversion 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                    600 ;   'tab_width' field width 
                                    601 ;    A 			signed||unsigned conversion
                                    602 ;  output:
                                    603 ;    A          string length
                                    604 ;------------------------------------
      00180D                        605 prt_acc24:
      00180D A6 FF            [ 1]  606 	ld a,#255  ; signed conversion  
      00180F CD 18 33         [ 4]  607     call itoa  ; conversion entier en  .asciz
      001812 CD 11 85         [ 4]  608 	call right_align  
      001815 88               [ 1]  609 	push a 
      001816 CD 09 A1         [ 4]  610 	call puts
      001819 84               [ 1]  611 	pop a 
      00181A 81               [ 4]  612     ret	
                                    613 
                                    614 ;---------------------------------------
                                    615 ;  print value at xstack top 
                                    616 ;---------------------------------------
      00181B                        617 print_top: 
      00181B                        618 	_xpop 
      00181B 90 F6            [ 1]    1     ld a,(y)
      00181D 93               [ 1]    2     ldw x,y 
      00181E EE 01            [ 2]    3     ldw x,(1,x)
      001820 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001824 C7 00 0C         [ 1]  619 	ld acc24,a 
      001827 CF 00 0D         [ 2]  620 	ldw acc16,x 
      00182A CD 18 0D         [ 4]  621 	call prt_acc24 
      00182D A6 20            [ 1]  622 	ld a,#SPACE
      00182F CD 09 44         [ 4]  623 	call putc 
      001832 81               [ 4]  624 	ret 
                                    625 
                                    626 ;------------------------------------
                                    627 ; convert integer in acc24 to string
                                    628 ; input:
                                    629 ;   'base'	conversion base 
                                    630 ;	acc24	integer to convert
                                    631 ;   A       0=unsigned, else signed 
                                    632 ; output:
                                    633 ;   X  		pointer to first char of string
                                    634 ;   A       string length
                                    635 ;------------------------------------
                           000001   636 	SIGN=1  ; integer sign 
                           000002   637 	LEN=2 
                           000003   638 	PSTR=3
                           000004   639 	VSIZE=4 ;locals size
      001833                        640 itoa::
      001833                        641 	_vars VSIZE
      001833 52 04            [ 2]    1     sub sp,#VSIZE 
      001835 0F 02            [ 1]  642 	clr (LEN,sp) ; string length  
      001837 0F 01            [ 1]  643 	clr (SIGN,sp)    ; sign
      001839 4D               [ 1]  644 	tnz A
      00183A 27 11            [ 1]  645 	jreq 1$ ; unsigned conversion  
      00183C C6 00 0A         [ 1]  646 	ld a,base 
      00183F A1 0A            [ 1]  647 	cp a,#10
      001841 26 0A            [ 1]  648 	jrne 1$
                                    649 	; base 10 string display with negative sign if bit 23==1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      001843 72 0F 00 0C 05   [ 2]  650 	btjf acc24,#7,1$
      001848 03 01            [ 1]  651 	cpl (SIGN,sp)
      00184A CD 02 0D         [ 4]  652 	call neg_acc24
      00184D                        653 1$:
                                    654 ; initialize string pointer 
      00184D AE 16 68         [ 2]  655 	ldw x,#tib 
      001850 1C 00 50         [ 2]  656 	addw x,#TIB_SIZE
      001853 5A               [ 2]  657 	decw x 
      001854 7F               [ 1]  658 	clr (x)
      001855                        659 itoa_loop:
      001855 C6 00 0A         [ 1]  660     ld a,base
                                    661 ;	ldw (PSTR,sp),x 
      001858 CD 03 09         [ 4]  662     call divu24_8 ; acc24/A 
                                    663 ;	ldw x,(PSTR,sp)
      00185B AB 30            [ 1]  664     add a,#'0  ; remainder of division
      00185D A1 3A            [ 1]  665     cp a,#'9+1
      00185F 2B 02            [ 1]  666     jrmi 2$
      001861 AB 07            [ 1]  667     add a,#7 
      001863                        668 2$:	
      001863 5A               [ 2]  669 	decw x
      001864 F7               [ 1]  670     ld (x),a
      001865 0C 02            [ 1]  671 	inc (LEN,sp)
                                    672 	; if acc24==0 conversion done
      001867 C6 00 0C         [ 1]  673 	ld a,acc24
      00186A CA 00 0D         [ 1]  674 	or a,acc16
      00186D CA 00 0E         [ 1]  675 	or a,acc8
      001870 26 E3            [ 1]  676     jrne itoa_loop
                                    677 	;conversion done, next add '$' or '-' as required
      001872 C6 00 0A         [ 1]  678 	ld a,base 
      001875 A1 10            [ 1]  679 	cp a,#16
      001877 27 08            [ 1]  680 	jreq 8$
      001879 7B 01            [ 1]  681 	ld a,(SIGN,sp)
      00187B 27 0A            [ 1]  682     jreq 10$
      00187D A6 2D            [ 1]  683     ld a,#'-
      00187F 20 02            [ 2]  684 	jra 9$ 
      001881                        685 8$:	
      001881 A6 24            [ 1]  686 	ld a,#'$ 
      001883 5A               [ 2]  687 9$: decw x
      001884 F7               [ 1]  688     ld (x),a
      001885 0C 02            [ 1]  689 	inc (LEN,sp)
      001887                        690 10$:
      001887 7B 02            [ 1]  691 	ld a,(LEN,sp)
      001889                        692 	_drop VSIZE
      001889 5B 04            [ 2]    1     addw sp,#VSIZE 
      00188B 81               [ 4]  693 	ret
                                    694 
                                    695 ;------------------------------------
                                    696 ; convert alpha to uppercase
                                    697 ; input:
                                    698 ;    a  character to convert
                                    699 ; output:
                                    700 ;    a  uppercase character
                                    701 ;------------------------------------
      00188C                        702 to_upper::
      00188C A1 61            [ 1]  703 	cp a,#'a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00188E 2A 01            [ 1]  704 	jrpl 1$
      001890 81               [ 4]  705 0$:	ret
      001891 A1 7A            [ 1]  706 1$: cp a,#'z	
      001893 22 FB            [ 1]  707 	jrugt 0$
      001895 A0 20            [ 1]  708 	sub a,#32
      001897 81               [ 4]  709 	ret
                                    710 	
                                    711 ;------------------------------------
                                    712 ; convert pad content in integer
                                    713 ; input:
                                    714 ;    x		* .asciz to convert
                                    715 ; output:
                                    716 ;    acc24      int24_t
                                    717 ;------------------------------------
                                    718 	; local variables
                           000001   719 	SIGN=1 ; 1 byte, 
                           000002   720 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   721 	TEMP=3 ; 1 byte, temporary storage
                           000003   722 	VSIZE=3 ; 3 bytes reserved for local storage
      001898                        723 atoi24::
      001898 89               [ 2]  724 	pushw x 
      001899                        725 	_vars VSIZE
      001899 52 03            [ 2]    1     sub sp,#VSIZE 
                                    726 	; acc24=0 
      00189B 72 5F 00 0C      [ 1]  727 	clr acc24    
      00189F 72 5F 00 0D      [ 1]  728 	clr acc16
      0018A3 72 5F 00 0E      [ 1]  729 	clr acc8 
      0018A7 0F 01            [ 1]  730 	clr (SIGN,sp)
      0018A9 A6 0A            [ 1]  731 	ld a,#10
      0018AB 6B 02            [ 1]  732 	ld (BASE,sp),a ; default base decimal
      0018AD F6               [ 1]  733 	ld a,(x)
      0018AE 27 47            [ 1]  734 	jreq 9$  ; completed if 0
      0018B0 A1 2D            [ 1]  735 	cp a,#'-
      0018B2 26 04            [ 1]  736 	jrne 1$
      0018B4 03 01            [ 1]  737 	cpl (SIGN,sp)
      0018B6 20 08            [ 2]  738 	jra 2$
      0018B8 A1 24            [ 1]  739 1$: cp a,#'$
      0018BA 26 06            [ 1]  740 	jrne 3$
      0018BC A6 10            [ 1]  741 	ld a,#16
      0018BE 6B 02            [ 1]  742 	ld (BASE,sp),a
      0018C0 5C               [ 1]  743 2$:	incw x
      0018C1 F6               [ 1]  744 	ld a,(x)
      0018C2                        745 3$:	
      0018C2 A1 61            [ 1]  746 	cp a,#'a
      0018C4 2B 02            [ 1]  747 	jrmi 4$
      0018C6 A0 20            [ 1]  748 	sub a,#32
      0018C8 A1 30            [ 1]  749 4$:	cp a,#'0
      0018CA 2B 2B            [ 1]  750 	jrmi 9$
      0018CC A0 30            [ 1]  751 	sub a,#'0
      0018CE A1 0A            [ 1]  752 	cp a,#10
      0018D0 2B 06            [ 1]  753 	jrmi 5$
      0018D2 A0 07            [ 1]  754 	sub a,#7
      0018D4 11 02            [ 1]  755 	cp a,(BASE,sp)
      0018D6 2A 1F            [ 1]  756 	jrpl 9$
      0018D8 6B 03            [ 1]  757 5$:	ld (TEMP,sp),a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0018DA 7B 02            [ 1]  758 	ld a,(BASE,sp)
      0018DC CD 02 2A         [ 4]  759 	call mulu24_8
      0018DF 7B 03            [ 1]  760 	ld a,(TEMP,sp)
      0018E1 CB 00 0E         [ 1]  761 	add a,acc24+2
      0018E4 C7 00 0E         [ 1]  762 	ld acc24+2,a
      0018E7 4F               [ 1]  763 	clr a
      0018E8 C9 00 0D         [ 1]  764 	adc a,acc24+1
      0018EB C7 00 0D         [ 1]  765 	ld acc24+1,a
      0018EE 4F               [ 1]  766 	clr a
      0018EF C9 00 0C         [ 1]  767 	adc a,acc24
      0018F2 C7 00 0C         [ 1]  768 	ld acc24,a
      0018F5 20 C9            [ 2]  769 	jra 2$
      0018F7 0D 01            [ 1]  770 9$:	tnz (SIGN,sp)
      0018F9 27 03            [ 1]  771     jreq atoi_exit
      0018FB CD 02 0D         [ 4]  772     call neg_acc24
      0018FE                        773 atoi_exit: 
      0018FE                        774 	_drop VSIZE
      0018FE 5B 03            [ 2]    1     addw sp,#VSIZE 
      001900 85               [ 2]  775 	popw x ; restore x
      001901 81               [ 4]  776 	ret
                                    777 
                                    778 
                                    779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    780 ;;   TINY BASIC  operators,
                                    781 ;;   commands and functions 
                                    782 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    783 
                                    784 ;---------------------------------
                                    785 ; dictionary search 
                                    786 ; input:
                                    787 ;	X 		dictionary entry point, name field  
                                    788 ;   y		.asciz name to search 
                                    789 ; output:
                                    790 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    791 ;  X		cmd_index
                                    792 ;---------------------------------
                           000001   793 	NLEN=1 ; cmd length 
                           000002   794 	XSAVE=2
                           000004   795 	YSAVE=4
                           000005   796 	VSIZE=5 
      001902                        797 search_dict::
      001902                        798 	_vars VSIZE 
      001902 52 05            [ 2]    1     sub sp,#VSIZE 
      001904 17 04            [ 2]  799 	ldw (YSAVE,sp),y 
      001906                        800 search_next:
      001906 1F 02            [ 2]  801 	ldw (XSAVE,sp),x 
                                    802 ; get name length in dictionary	
      001908 F6               [ 1]  803 	ld a,(x)
      001909 A4 0F            [ 1]  804 	and a,#0xf 
      00190B 6B 01            [ 1]  805 	ld (NLEN,sp),a  
      00190D 16 04            [ 2]  806 	ldw y,(YSAVE,sp) ; name pointer 
      00190F 5C               [ 1]  807 	incw x 
      001910                        808 cp_loop:
      001910 90 F6            [ 1]  809 	ld a,(y)
      001912 27 1B            [ 1]  810 	jreq str_match 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      001914 0D 01            [ 1]  811 	tnz (NLEN,sp)
      001916 27 0A            [ 1]  812 	jreq no_match  
      001918 F1               [ 1]  813 	cp a,(x)
      001919 26 07            [ 1]  814 	jrne no_match 
      00191B 90 5C            [ 1]  815 	incw y 
      00191D 5C               [ 1]  816 	incw x
      00191E 0A 01            [ 1]  817 	dec (NLEN,sp)
      001920 20 EE            [ 2]  818 	jra cp_loop 
      001922                        819 no_match:
      001922 1E 02            [ 2]  820 	ldw x,(XSAVE,sp) 
      001924 1D 00 02         [ 2]  821 	subw x,#2 ; move X to link field
      001927 4B 00            [ 1]  822 	push #TK_NONE 
      001929 FE               [ 2]  823 	ldw x,(x) ; next word link 
      00192A 84               [ 1]  824 	pop a ; TK_NONE 
      00192B 27 1F            [ 1]  825 	jreq search_exit  ; not found  
                                    826 ;try next 
      00192D 20 D7            [ 2]  827 	jra search_next
      00192F                        828 str_match:
      00192F 1E 02            [ 2]  829 	ldw x,(XSAVE,sp)
      001931 F6               [ 1]  830 	ld a,(X)
      001932 6B 01            [ 1]  831 	ld (NLEN,sp),a ; needed to test keyword type  
      001934 A4 0F            [ 1]  832 	and a,#0xf 
                                    833 ; move x to procedure address field 	
      001936 4C               [ 1]  834 	inc a 
      001937 C7 00 0E         [ 1]  835 	ld acc8,a 
      00193A 72 5F 00 0D      [ 1]  836 	clr acc16 
      00193E 72 BB 00 0D      [ 2]  837 	addw x,acc16 
      001942 FE               [ 2]  838 	ldw x,(x) ; routine index  
                                    839 ;determine keyword type bits 7:6 
      001943 7B 01            [ 1]  840 	ld a,(NLEN,sp)
      001945 4E               [ 1]  841 	swap a 
      001946 A4 0C            [ 1]  842 	and a,#0xc
      001948 44               [ 1]  843 	srl a
      001949 44               [ 1]  844 	srl a 
      00194A AB 80            [ 1]  845 	add a,#128
      00194C                        846 search_exit: 
      00194C                        847 	_drop VSIZE 
      00194C 5B 05            [ 2]    1     addw sp,#VSIZE 
      00194E 81               [ 4]  848 	ret 
                                    849 
                                    850 ;---------------------
                                    851 ; check if next token
                                    852 ;  is of expected type 
                                    853 ; input:
                                    854 ;   A 		 expected token attribute
                                    855 ;  ouput:
                                    856 ;   none     if fail call syntax_error 
                                    857 ;--------------------
      00194F                        858 expect:
      00194F 88               [ 1]  859 	push a 
      001950 CD 17 A1         [ 4]  860 	call next_token 
      001953 11 01            [ 1]  861 	cp a,(1,sp)
      001955 27 03            [ 1]  862 	jreq 1$
      001957 CC 16 A0         [ 2]  863 	jp syntax_error
      00195A 84               [ 1]  864 1$: pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      00195B 81               [ 4]  865 	ret 
                                    866 
                                    867 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    868 ; parse arguments list 
                                    869 ; between ()
                                    870 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      00195C                        871 func_args:
      00195C A6 06            [ 1]  872 	ld a,#TK_LPAREN 
      00195E CD 19 4F         [ 4]  873 	call expect 
                                    874 ; expected to continue in arg_list 
                                    875 ; caller must check for TK_RPAREN 
                                    876 
                                    877 ;-------------------------------
                                    878 ; parse embedded BASIC routines 
                                    879 ; arguments list.
                                    880 ; arg_list::=  expr[','expr]*
                                    881 ; all arguments are of int24_t type
                                    882 ; and pushed on stack 
                                    883 ; input:
                                    884 ;   none
                                    885 ; output:
                                    886 ;   xstack{n}   arguments pushed on xstack
                                    887 ;   A 	number of arguments pushed on xstack  
                                    888 ;--------------------------------
      001961                        889 arg_list:
      001961 4B 00            [ 1]  890 	push #0  
      001963 CD 17 A1         [ 4]  891 	call next_token 
      001966 A1 80            [ 1]  892 	cp a,#TK_CMD 
      001968 27 1D            [ 1]  893 	jreq 5$
      00196A A1 00            [ 1]  894 	cp a,#TK_NONE  
      00196C 27 1E            [ 1]  895 	jreq 6$
      00196E A1 0A            [ 1]  896 	cp a,#TK_COLON 
      001970 27 15            [ 1]  897 	jreq 5$
      001972                        898 	_unget_token
      001972 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001977 CD 1A 81         [ 4]  899 1$: call expression
      00197A 0C 01            [ 1]  900 	inc (1,sp)
      00197C CD 17 A1         [ 4]  901 	call next_token 
      00197F A1 08            [ 1]  902 	cp a,#TK_COMMA 
      001981 27 F4            [ 1]  903 	jreq 1$ 
      001983 A1 07            [ 1]  904 4$:	cp a,#TK_RPAREN 
      001985 27 05            [ 1]  905 	jreq 6$
      001987                        906 5$:
      001987                        907 	_unget_token 
      001987 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00198C 84               [ 1]  908 6$:	pop a  
      00198D 81               [ 4]  909 	ret 
                                    910 
                                    911 ;--------------------------------
                                    912 ;   BASIC commnands 
                                    913 ;--------------------------------
                                    914 
                                    915 ;--------------------------------
                                    916 ;  arithmetic and relational 
                                    917 ;  routines
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



                                    918 ;  operators precedence
                                    919 ;  highest to lowest
                                    920 ;  operators on same row have 
                                    921 ;  same precedence and are executed
                                    922 ;  from left to right.
                                    923 ;	'*','/','%'
                                    924 ;   '-','+'
                                    925 ;   '=','>','<','>=','<=','<>','><'
                                    926 ;   '<>' and '><' are equivalent for not equal.
                                    927 ;--------------------------------
                                    928 
                                    929 ;---------------------
                                    930 ; return array element
                                    931 ; address from @(expr)
                                    932 ; input:
                                    933 ;   A 		TK_ARRAY
                                    934 ; output:
                                    935 ;	X 		element address 
                                    936 ;----------------------
      00198E                        937 get_array_element:
      00198E CD 19 5C         [ 4]  938 	call func_args 
      001991 A1 01            [ 1]  939 	cp a,#1
      001993 27 03            [ 1]  940 	jreq 1$
      001995 CC 16 A0         [ 2]  941 	jp syntax_error
      001998                        942 1$: _xpop 
      001998 90 F6            [ 1]    1     ld a,(y)
      00199A 93               [ 1]    2     ldw x,y 
      00199B EE 01            [ 2]    3     ldw x,(1,x)
      00199D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    943     ; ignore A, index < 65536 in any case 
                                    944 	; check for bounds 
      0019A1 C3 00 20         [ 2]  945 	cpw x,array_size 
      0019A4 23 05            [ 2]  946 	jrule 3$
                                    947 ; bounds {1..array_size}	
      0019A6 A6 0A            [ 1]  948 2$: ld a,#ERR_BAD_VALUE 
      0019A8 CC 16 A2         [ 2]  949 	jp tb_error 
      0019AB 5D               [ 2]  950 3$: tnzw  x
      0019AC 27 F8            [ 1]  951 	jreq 2$ 
      0019AE 89               [ 2]  952 	pushw x 
      0019AF 58               [ 2]  953 	sllw x 
      0019B0 72 FB 01         [ 2]  954 	addw x,(1,sp) ; index*size_of(int24)
      0019B3 1F 01            [ 2]  955 	ldw (1,sp),x  
      0019B5 AE 16 68         [ 2]  956 	ldw x,#tib ; array is below tib 
      0019B8 72 F0 01         [ 2]  957 	subw x,(1,sp)
      0019BB                        958 	_drop 2   
      0019BB 5B 02            [ 2]    1     addw sp,#2 
      0019BD 81               [ 4]  959 	ret 
                                    960 
                                    961 
                                    962 ;***********************************
                                    963 ;   expression parse,execute 
                                    964 ;***********************************
                                    965 ;-----------------------------------
                                    966 ; factor ::= ['+'|'-'|e]  var | @ |
                                    967 ;			 integer | function |
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



                                    968 ;			 '('relation')' 
                                    969 ; output:
                                    970 ;   A       token attribute 
                                    971 ;   xstack  value  
                                    972 ; ---------------------------------
                           000001   973 	NEG=1
                           000001   974 	VSIZE=1
      0019BE                        975 factor:
      0019BE                        976 	_vars VSIZE 
      0019BE 52 01            [ 2]    1     sub sp,#VSIZE 
      0019C0 0F 01            [ 1]  977 	clr (NEG,sp)
      0019C2 CD 17 A1         [ 4]  978 	call next_token
      0019C5 A1 10            [ 1]  979 1$:	cp a,#TK_PLUS 
      0019C7 27 06            [ 1]  980 	jreq 2$
      0019C9 A1 11            [ 1]  981 	cp a,#TK_MINUS 
      0019CB 26 05            [ 1]  982 	jrne 4$ 
      0019CD 03 01            [ 1]  983 	cpl (NEG,sp)
      0019CF                        984 2$:	
      0019CF CD 17 A1         [ 4]  985 	call next_token 
      0019D2                        986 4$:	
      0019D2 A1 81            [ 1]  987 	cp a,#TK_IFUNC 
      0019D4 26 06            [ 1]  988 	jrne 5$ 
      0019D6 CD 17 BA         [ 4]  989 	call get_code_addr 
      0019D9 FD               [ 4]  990 	call (x); result in A:X  
      0019DA 20 58            [ 2]  991 	jra 18$ 
      0019DC                        992 5$:
      0019DC A1 84            [ 1]  993 	cp a,#TK_INTGR
      0019DE 26 05            [ 1]  994 	jrne 6$
      0019E0 CD 17 E0         [ 4]  995 	call get_int24 ; A:X
      0019E3 20 4F            [ 2]  996 	jra 18$
      0019E5                        997 6$:
      0019E5 A1 05            [ 1]  998 	cp a,#TK_ARRAY
      0019E7 26 05            [ 1]  999 	jrne 7$
      0019E9 CD 19 8E         [ 4] 1000 	call get_array_element
      0019EC 20 07            [ 2] 1001     jra 71$
      0019EE                       1002 7$:
      0019EE A1 85            [ 1] 1003 	cp a,#TK_VAR 
      0019F0 26 08            [ 1] 1004 	jrne 8$
      0019F2 CD 17 D6         [ 4] 1005 	call get_addr 
      0019F5                       1006 71$: ; put value in A:X
      0019F5 F6               [ 1] 1007 	ld a,(x)
      0019F6 EE 01            [ 2] 1008 	ldw x,(1,x)
      0019F8 20 3A            [ 2] 1009 	jra 18$
      0019FA                       1010 8$:
      0019FA A1 03            [ 1] 1011 	cp a,#TK_LABEL 
      0019FC 26 10            [ 1] 1012 	jrne 9$ 
      0019FE 89               [ 2] 1013 	pushw x 
      0019FF CD 17 C7         [ 4] 1014 	call skip_string
      001A02 85               [ 2] 1015 	popw x 
      001A03 CD 1C D4         [ 4] 1016 	call search_const 
      001A06 5D               [ 2] 1017 	tnzw x 
      001A07 27 28            [ 1] 1018 	jreq 16$
      001A09 CD 1C 30         [ 4] 1019 	call get_const_value ; in A:X 
      001A0C 20 26            [ 2] 1020 	jra 18$
      001A0E                       1021 9$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001A0E A1 82            [ 1] 1022 	cp a,#TK_CFUNC 
      001A10 26 08            [ 1] 1023 	jrne 12$
      001A12 CD 17 BA         [ 4] 1024 	call get_code_addr 
      001A15 FD               [ 4] 1025 	call(x)
      001A16 5F               [ 1] 1026 	clrw x 
      001A17 02               [ 1] 1027 	rlwa x  ; char>int24 in A:X 
      001A18 20 1A            [ 2] 1028 	jra 18$ 	 
      001A1A                       1029 12$:			
      001A1A A1 06            [ 1] 1030 	cp a,#TK_LPAREN
      001A1C 26 13            [ 1] 1031 	jrne 16$
      001A1E CD 1A 81         [ 4] 1032 	call expression
      001A21 A6 07            [ 1] 1033 	ld a,#TK_RPAREN 
      001A23 CD 19 4F         [ 4] 1034 	call expect
      001A26                       1035 	_xpop 
      001A26 90 F6            [ 1]    1     ld a,(y)
      001A28 93               [ 1]    2     ldw x,y 
      001A29 EE 01            [ 2]    3     ldw x,(1,x)
      001A2B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A2F 20 03            [ 2] 1036 	jra 18$	
      001A31                       1037 16$:
      001A31 CC 16 A0         [ 2] 1038 	jp syntax_error
      001A34                       1039 18$: 
      001A34 0D 01            [ 1] 1040 	tnz (NEG,sp)
      001A36 27 03            [ 1] 1041 	jreq 20$
      001A38 CD 02 05         [ 4] 1042 	call neg_ax   
      001A3B                       1043 20$:
      001A3B                       1044 	_xpush 
      001A3B 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001A3F 90 F7            [ 1]    2     ld (y),a 
      001A41 90 EF 01         [ 2]    3     ldw (1,y),x 
      001A44                       1045 	_drop VSIZE
      001A44 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A46 81               [ 4] 1046 	ret
                                   1047 
                                   1048 
                                   1049 ;-----------------------------------
                                   1050 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1051 ; output:
                                   1052 ;   A    	token attribute 
                                   1053 ;	xstack		value 
                                   1054 ;-----------------------------------
                           000001  1055 	MULOP=1
                           000001  1056 	VSIZE=1
      001A47                       1057 term:
      001A47                       1058 	_vars VSIZE
      001A47 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1059 ; first factor 	
      001A49 CD 19 BE         [ 4] 1060 	call factor
      001A4C                       1061 term01:	 ; check for  operator '*'|'/'|'%' 
      001A4C CD 17 A1         [ 4] 1062 	call next_token
      001A4F 6B 01            [ 1] 1063 	ld (MULOP,sp),a
      001A51 A1 02            [ 1] 1064 	cp a,#CMD_END
      001A53 25 24            [ 1] 1065 	jrult 8$
      001A55 A4 30            [ 1] 1066 	and a,#TK_GRP_MASK
      001A57 A1 20            [ 1] 1067 	cp a,#TK_GRP_MULT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001A59 27 02            [ 1] 1068 	jreq 1$
      001A5B 20 1C            [ 2] 1069 	jra 8$
      001A5D                       1070 1$:	; got *|/|%
                                   1071 ;second factor
      001A5D CD 19 BE         [ 4] 1072 	call factor
      001A60                       1073 2$: ; select operation 	
      001A60 7B 01            [ 1] 1074 	ld a,(MULOP,sp) 
      001A62 A1 20            [ 1] 1075 	cp a,#TK_MULT 
      001A64 26 05            [ 1] 1076 	jrne 3$
                                   1077 ; '*' operator
      001A66 CD 02 5D         [ 4] 1078 	call mul24 
      001A69 20 E1            [ 2] 1079 	jra term01
      001A6B A1 21            [ 1] 1080 3$: cp a,#TK_DIV 
      001A6D 26 05            [ 1] 1081 	jrne 4$ 
                                   1082 ; '/' operator	
      001A6F CD 03 27         [ 4] 1083 	call div24 
      001A72 20 D8            [ 2] 1084 	jra term01 
      001A74                       1085 4$: ; '%' operator
      001A74 CD 03 D5         [ 4] 1086 	call mod24
      001A77 20 D3            [ 2] 1087 	jra term01 
      001A79                       1088 8$: ; term end 
      001A79                       1089 	_unget_token
      001A79 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A7E                       1090 9$: 
      001A7E                       1091 term_exit:
      001A7E                       1092 	_drop VSIZE 
      001A7E 5B 01            [ 2]    1     addw sp,#VSIZE 
      001A80 81               [ 4] 1093 	ret 
                                   1094 
                                   1095 ;-------------------------------
                                   1096 ;  expr ::= term [['+'|'-'] term]*
                                   1097 ;  result range {-32768..32767}
                                   1098 ;  output:
                                   1099 ;   A    token attribute 
                                   1100 ;   xstack	 result    
                                   1101 ;-------------------------------
                           000001  1102 	OP=1 
                           000001  1103 	VSIZE=1 
      001A81                       1104 expression:
      001A81                       1105 	_vars VSIZE 
      001A81 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1106 ; first term 	
      001A83 CD 1A 47         [ 4] 1107 	call term
      001A86                       1108 1$:	; operator '+'|'-'
      001A86 CD 17 A1         [ 4] 1109 	call next_token
      001A89 6B 01            [ 1] 1110 	ld (OP,sp),a 
      001A8B A1 02            [ 1] 1111 	cp a,#CMD_END 
      001A8D 25 1B            [ 1] 1112 	jrult 8$ 
      001A8F A4 30            [ 1] 1113 	and a,#TK_GRP_MASK
      001A91 A1 10            [ 1] 1114 	cp a,#TK_GRP_ADD 
      001A93 27 02            [ 1] 1115 	jreq 2$ 
      001A95 20 13            [ 2] 1116 	jra 8$
      001A97                       1117 2$: ; second term 
      001A97 CD 1A 47         [ 4] 1118 	call term
      001A9A 7B 01            [ 1] 1119 	ld a,(OP,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001A9C A1 10            [ 1] 1120 	cp a,#TK_PLUS 
      001A9E 26 05            [ 1] 1121 	jrne 4$
                                   1122 ; '+' operator	
      001AA0 CD 01 6A         [ 4] 1123 	call add24
      001AA3 20 E1            [ 2] 1124 	jra 1$ 
      001AA5                       1125 4$:	; '-' operator 
      001AA5 CD 01 87         [ 4] 1126 	call sub24
      001AA8 20 DC            [ 2] 1127 	jra 1$
      001AAA                       1128 8$: ; end of expression 
      001AAA                       1129 	_unget_token	
      001AAA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AAF                       1130 9$: ; expression value on xstack 
      001AAF A6 84            [ 1] 1131 	ld a,#TK_INTGR 	
      001AB1                       1132 expr_exit:
      001AB1                       1133 	_drop VSIZE 
      001AB1 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AB3 81               [ 4] 1134 	ret 
                                   1135 
                                   1136 ;---------------------------------------------
                                   1137 ; rel ::= expr rel_op expr
                                   1138 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1139 ;  relation return  integer , zero is false 
                                   1140 ;  output:
                                   1141 ;    A 		token attribute  
                                   1142 ;	 xstack		value  
                                   1143 ;---------------------------------------------
                           000001  1144 	RELOP=1
                           000001  1145 	VSIZE=1 
      001AB4                       1146 relation: 
      001AB4                       1147 	_vars VSIZE
      001AB4 52 01            [ 2]    1     sub sp,#VSIZE 
      001AB6 CD 1A 81         [ 4] 1148 	call expression
                                   1149 ; expect rel_op or leave 
      001AB9 CD 17 A1         [ 4] 1150 	call next_token 
      001ABC 6B 01            [ 1] 1151 	ld (RELOP,sp),a 
      001ABE A4 30            [ 1] 1152 	and a,#TK_GRP_MASK
      001AC0 A1 30            [ 1] 1153 	cp a,#TK_GRP_RELOP 
      001AC2 26 31            [ 1] 1154 	jrne 8$
      001AC4                       1155 2$:	; expect another expression
      001AC4 CD 1A 81         [ 4] 1156 	call expression
      001AC7 CD 01 A4         [ 4] 1157 	call cp24 
      001ACA                       1158 	_xpop  
      001ACA 90 F6            [ 1]    1     ld a,(y)
      001ACC 93               [ 1]    2     ldw x,y 
      001ACD EE 01            [ 2]    3     ldw x,(1,x)
      001ACF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001AD3 4D               [ 1] 1159 	tnz a 
      001AD4 2B 08            [ 1] 1160 	jrmi 4$
      001AD6 26 0C            [ 1] 1161 	jrne 5$
      001AD8 35 02 00 0E      [ 1] 1162 	mov acc8,#2 ; i1==i2
      001ADC 20 0A            [ 2] 1163 	jra 6$ 
      001ADE                       1164 4$: ; i1<i2
      001ADE 35 04 00 0E      [ 1] 1165 	mov acc8,#4 
      001AE2 20 04            [ 2] 1166 	jra 6$
      001AE4                       1167 5$: ; i1>i2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001AE4 35 01 00 0E      [ 1] 1168 	mov acc8,#1  
      001AE8                       1169 6$:
      001AE8 5F               [ 1] 1170 	clrw x 
      001AE9 C6 00 0E         [ 1] 1171 	ld a, acc8  
      001AEC 14 01            [ 1] 1172 	and a,(RELOP,sp)
      001AEE 27 17            [ 1] 1173 	jreq rel_exit
      001AF0 53               [ 2] 1174 	cplw x 
      001AF1 A6 FF            [ 1] 1175 	ld a,#255 
      001AF3 20 12            [ 2] 1176 	jra rel_exit   	
      001AF5 7B 01            [ 1] 1177 8$: ld a,(RELOP,sp)
      001AF7 27 05            [ 1] 1178 	jreq 10$ 
      001AF9                       1179 	_unget_token
      001AF9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001AFE                       1180 10$:
      001AFE                       1181 	_xpop
      001AFE 90 F6            [ 1]    1     ld a,(y)
      001B00 93               [ 1]    2     ldw x,y 
      001B01 EE 01            [ 2]    3     ldw x,(1,x)
      001B03 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B07                       1182 rel_exit: 
      001B07                       1183 	_drop VSIZE
      001B07 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B09 81               [ 4] 1184 	ret 
                                   1185 
                                   1186 ;--------------------------------------------
                                   1187 ; condition for IF and UNTIL 
                                   1188 ; operators: AND,OR,XOR 
                                   1189 ;--------------------------------------------
                           000001  1190 	COND=1 
                           000001  1191 	VSIZE=1 
      001B0A                       1192 condition:
      001B0A 4B 00            [ 1] 1193 	push #0 
      001B0C CD 1A B4         [ 4] 1194 	call relation 
      001B0F                       1195 	_xpush 
      001B0F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B13 90 F7            [ 1]    2     ld (y),a 
      001B15 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B18 CD 17 A1         [ 4] 1196 	call next_token 
      001B1B A1 87            [ 1] 1197 	cp a,#TK_AND 
      001B1D 2B 5F            [ 1] 1198 	jrmi 8$ 
      001B1F A1 8A            [ 1] 1199 	cp a,#TK_XOR+1 
      001B21 2A 5B            [ 1] 1200 	jrpl 8$ 
      001B23 6B 01            [ 1] 1201 	ld (COND,sp),a ; TK_AND|TK_OR|TK_XOR 
      001B25 CD 1A B4         [ 4] 1202 	call relation 
      001B28 C7 00 0C         [ 1] 1203 	ld acc24,a 
      001B2B CF 00 0D         [ 2] 1204 	ldw acc16,x 
      001B2E                       1205 	_xpop
      001B2E 90 F6            [ 1]    1     ld a,(y)
      001B30 93               [ 1]    2     ldw x,y 
      001B31 EE 01            [ 2]    3     ldw x,(1,x)
      001B33 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B37 88               [ 1] 1206 	push a
      001B38 7B 02            [ 1] 1207 	ld a,(COND+1,sp)
      001B3A A1 89            [ 1] 1208 	cp a,#TK_XOR 
      001B3C 27 2C            [ 1] 1209 	jreq 7$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001B3E A1 88            [ 1] 1210 	cp a,#TK_OR 
      001B40 27 14            [ 1] 1211 	jreq 6$
                                   1212 ; AND
      001B42 7B 01            [ 1] 1213 	ld a,(1,sp) 
      001B44 C4 00 0C         [ 1] 1214 	and a,acc24
      001B47 6B 01            [ 1] 1215 	ld (1,sp),a 
      001B49 9E               [ 1] 1216 	ld a,xh  
      001B4A C4 00 0D         [ 1] 1217 	and a,acc16 
      001B4D 95               [ 1] 1218 	ld xh,a 
      001B4E 9F               [ 1] 1219 	ld a,xl 
      001B4F C4 00 0E         [ 1] 1220 	and a,acc8 
      001B52 97               [ 1] 1221 	ld xl,a 
      001B53 84               [ 1] 1222 	pop a 
      001B54 20 36            [ 2] 1223 	jra 9$
      001B56                       1224 6$: ; OR 
      001B56 7B 01            [ 1] 1225 	ld a,(1,sp) 
      001B58 CA 00 0C         [ 1] 1226 	or a,acc24
      001B5B 6B 01            [ 1] 1227 	ld (1,sp),a 
      001B5D 9E               [ 1] 1228 	ld a,xh  
      001B5E CA 00 0D         [ 1] 1229 	or a,acc16 
      001B61 95               [ 1] 1230 	ld xh,a 
      001B62 9F               [ 1] 1231 	ld a,xl 
      001B63 CA 00 0E         [ 1] 1232 	or a,acc8 
      001B66 97               [ 1] 1233 	ld xl,a 
      001B67 84               [ 1] 1234 	pop a 
      001B68 20 22            [ 2] 1235 	jra 9$  
      001B6A                       1236 7$: ; XOR 
      001B6A 7B 01            [ 1] 1237 	ld a,(1,sp) 
      001B6C C8 00 0C         [ 1] 1238 	xor a,acc24
      001B6F 6B 01            [ 1] 1239 	ld (1,sp),a 
      001B71 9E               [ 1] 1240 	ld a,xh  
      001B72 C8 00 0D         [ 1] 1241 	xor a,acc16 
      001B75 95               [ 1] 1242 	ld xh,a 
      001B76 9F               [ 1] 1243 	ld a,xl 
      001B77 C8 00 0E         [ 1] 1244 	xor a,acc8 
      001B7A 97               [ 1] 1245 	ld xl,a 
      001B7B 84               [ 1] 1246 	pop a 
      001B7C 20 0E            [ 2] 1247 	jra 9$ 
      001B7E                       1248 8$: _unget_token 
      001B7E 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B83                       1249 	_xpop 
      001B83 90 F6            [ 1]    1     ld a,(y)
      001B85 93               [ 1]    2     ldw x,y 
      001B86 EE 01            [ 2]    3     ldw x,(1,x)
      001B88 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B8C                       1250 9$:	_drop VSIZE 
      001B8C 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B8E 81               [ 4] 1251 	ret 
                                   1252 
                                   1253 
                                   1254 ;--------------------------------------------
                                   1255 ; BASIC: HEX 
                                   1256 ; select hexadecimal base for integer print
                                   1257 ;---------------------------------------------
      001B8F                       1258 hex_base:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001B8F 35 10 00 0A      [ 1] 1259 	mov base,#16 
      001B93 81               [ 4] 1260 	ret 
                                   1261 
                                   1262 ;--------------------------------------------
                                   1263 ; BASIC: DEC 
                                   1264 ; select decimal base for integer print
                                   1265 ;---------------------------------------------
      001B94                       1266 dec_base:
      001B94 35 0A 00 0A      [ 1] 1267 	mov base,#10
      001B98 81               [ 4] 1268 	ret 
                                   1269 
                                   1270 ;------------------------
                                   1271 ; BASIC: FREE 
                                   1272 ; return free size in RAM 
                                   1273 ; output:
                                   1274 ;   A:x		size 
                                   1275 ;--------------------------
      001B99                       1276 free:
      001B99 90 89            [ 2] 1277 	pushw y 
      001B9B 4F               [ 1] 1278 	clr a 
      001B9C AE 16 68         [ 2] 1279 	ldw x,#tib 
      001B9F 90 CE 00 1B      [ 2] 1280 	ldw y,txtbgn 
      001BA3 90 A3 36 00      [ 2] 1281 	cpw y,#app_space
      001BA7 25 05            [ 1] 1282 	jrult 1$
      001BA9 1D 00 80         [ 2] 1283 	subw x,#free_ram 
      001BAC 20 04            [ 2] 1284 	jra 2$ 
      001BAE                       1285 1$:	
      001BAE 72 B0 00 1D      [ 2] 1286 	subw x,txtend
      001BB2 90 85            [ 2] 1287 2$:	popw y 
      001BB4 81               [ 4] 1288 	ret 
                                   1289 
                                   1290 ;------------------------------
                                   1291 ; BASIC: SIZE 
                                   1292 ; command that print 
                                   1293 ; program start addres and size 
                                   1294 ;------------------------------
      001BB5                       1295 cmd_size:
      001BB5 3B 00 0A         [ 1] 1296 	push base 
      001BB8 AE 1E 0E         [ 2] 1297 	ldw x,#PROG_ADDR 
      001BBB CD 09 A1         [ 4] 1298 	call puts 
      001BBE CE 00 1B         [ 2] 1299 	ldw x,txtbgn     
      001BC1 35 10 00 0A      [ 1] 1300 	mov base,#16 
      001BC5 CD 17 F6         [ 4] 1301 	call prt_i16
      001BC8 32 00 0A         [ 1] 1302 	pop base 
      001BCB AE 1E 20         [ 2] 1303 	ldw x,#PROG_SIZE 
      001BCE CD 09 A1         [ 4] 1304 	call puts 
      001BD1 CE 00 1D         [ 2] 1305 	ldw x,txtend 
      001BD4 72 B0 00 1B      [ 2] 1306 	subw x,txtbgn 
      001BD8 CD 17 F6         [ 4] 1307 	call prt_i16
      001BDB AE 1E 31         [ 2] 1308 	ldw x,#STR_BYTES 
      001BDE CD 09 A1         [ 4] 1309 	call puts  
      001BE1 81               [ 4] 1310 	ret 
                                   1311 
                                   1312 
                                   1313 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



                                   1314 ; BASIC: UBOUND  
                                   1315 ; return array variable size 
                                   1316 ; and set 'array_size' variable 
                                   1317 ; output:
                                   1318 ;   A:X 	array_size
                                   1319 ;--------------------------
      001BE2                       1320 ubound:
      001BE2 CD 1B 99         [ 4] 1321 	call free 
      001BE5 A6 03            [ 1] 1322 	ld a,#CELL_SIZE 
      001BE7 42               [ 4] 1323 	mul x,a 
      001BE8 CF 00 20         [ 2] 1324 	ldw array_size,x
      001BEB 4F               [ 1] 1325 	clr a 
      001BEC 81               [ 4] 1326 	ret 
                                   1327 
                                   1328 ;-----------------------------
                                   1329 ; BASIC: LET var=expr 
                                   1330 ; variable assignement 
                                   1331 ; output:
                                   1332 ;   A 		TK_NONE 
                                   1333 ;-----------------------------
      001BED                       1334 let::
      001BED CD 17 A1         [ 4] 1335 	call next_token 
      001BF0 A1 85            [ 1] 1336 	cp a,#TK_VAR 
      001BF2 27 0C            [ 1] 1337 	jreq let_var
      001BF4 A1 05            [ 1] 1338 	cp a,#TK_ARRAY 
      001BF6 27 03            [ 1] 1339 	jreq  let_array
      001BF8 CC 16 A0         [ 2] 1340 	jp syntax_error
      001BFB                       1341 let_array:
      001BFB CD 19 8E         [ 4] 1342 	call get_array_element
      001BFE 20 03            [ 2] 1343 	jra let_eval 
      001C00                       1344 let_var:
      001C00 CD 17 D6         [ 4] 1345 	call get_addr
      001C03                       1346 let_eval:
      001C03 CF 00 19         [ 2] 1347 	ldw ptr16,x  ; variable address 
      001C06 CD 17 A1         [ 4] 1348 	call next_token 
      001C09 A1 32            [ 1] 1349 	cp a,#TK_EQUAL
      001C0B 27 03            [ 1] 1350 	jreq 1$
      001C0D CC 16 A0         [ 2] 1351 	jp syntax_error
      001C10                       1352 1$:	
      001C10 CD 1A 81         [ 4] 1353 	call expression    
      001C13 A1 84            [ 1] 1354 	cp a,#TK_INTGR 
      001C15 27 03            [ 1] 1355 	jreq 2$
      001C17 CC 16 A0         [ 2] 1356 	jp syntax_error
      001C1A                       1357 2$:	
      001C1A                       1358 	_xpop ; value 
      001C1A 90 F6            [ 1]    1     ld a,(y)
      001C1C 93               [ 1]    2     ldw x,y 
      001C1D EE 01            [ 2]    3     ldw x,(1,x)
      001C1F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C23                       1359 3$:
      001C23 72 C7 00 19      [ 4] 1360 	ld [ptr16],a
      001C27 72 5C 00 1A      [ 1] 1361 	inc ptr8  
      001C2B 72 CF 00 19      [ 5] 1362 	ldw [ptr16],x 
      001C2F 81               [ 4] 1363 	ret 
                                   1364 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



                                   1365 
                                   1366 ;--------------------------
                                   1367 ; return constant value 
                                   1368 ; from it's record address
                                   1369 ; input:
                                   1370 ;	X	*const record 
                                   1371 ; output:
                                   1372 ;   A:X   const  value
                                   1373 ;--------------------------
      001C30                       1374 get_const_value: ; -- i 
      001C30 F6               [ 1] 1375 	ld a,(x) ; record size 
      001C31 A0 03            [ 1] 1376 	sub a,#3 ; * value 
      001C33 88               [ 1] 1377 	push a 
      001C34 4B 00            [ 1] 1378 	push #0 
      001C36 72 FB 01         [ 2] 1379 	addw x,(1,sp)
      001C39 F6               [ 1] 1380 	ld a,(x)
      001C3A EE 01            [ 2] 1381 	ldw x,(1,x)
      001C3C                       1382 	_drop 2
      001C3C 5B 02            [ 2]    1     addw sp,#2 
      001C3E 81               [ 4] 1383 	ret 
                                   1384 
                                   1385 
                                   1386 ;--------------------------
                                   1387 ; list constants in EEPROM 
                                   1388 ; call when using LIST \C 
                                   1389 ;-------------------------
                           000001  1390 	COUNT=1
                           000003  1391 	YTEMP=3
                           000004  1392 	VSIZE=4 
      001C3F                       1393 list_const:
      001C3F 90 89            [ 2] 1394 	pushw y 
      001C41                       1395 	_vars 4 
      001C41 52 04            [ 2]    1     sub sp,#4 
      001C43 5F               [ 1] 1396 	clrw x 
      001C44 1F 01            [ 2] 1397 	ldw (COUNT,sp),x  
      001C46 90 AE 40 00      [ 2] 1398 	ldw Y,#EEPROM_BASE 
      001C4A 90 C3 00 24      [ 2] 1399 1$:	cpw y,free_eeprom 
      001C4E 24 35            [ 1] 1400 	jruge 9$
      001C50 17 03            [ 2] 1401     ldw (YTEMP,sp),y 
      001C52 93               [ 1] 1402 	ldw x,y
      001C53 5C               [ 1] 1403 	incw x 
      001C54 CD 09 A1         [ 4] 1404 	call puts  
      001C57 A6 3D            [ 1] 1405 	ld a,#'= 
      001C59 CD 09 44         [ 4] 1406 	call putc 
      001C5C 1E 03            [ 2] 1407 	ldw x,(YTEMP,sp)
      001C5E CD 1C 30         [ 4] 1408 	call get_const_value 
      001C61 C7 00 0C         [ 1] 1409 	ld acc24,a 
      001C64 CF 00 0D         [ 2] 1410 	ldw acc16,x 
      001C67 CD 18 0D         [ 4] 1411 	call prt_acc24
      001C6A A6 0D            [ 1] 1412 	ld a,#CR 
      001C6C CD 09 44         [ 4] 1413 	call putc 
      001C6F 1E 01            [ 2] 1414 	ldw x,(COUNT,sp)
      001C71 5C               [ 1] 1415 	incw x 
      001C72 1F 01            [ 2] 1416 	ldw (COUNT,sp),x 
      001C74 72 5F 00 0D      [ 1] 1417 	clr acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001C78 16 03            [ 2] 1418 	ldw y,(YTEMP,sp)
      001C7A 90 F6            [ 1] 1419 	ld a,(y)
      001C7C C7 00 0E         [ 1] 1420 	ld acc8,a
      001C7F 72 B9 00 0D      [ 2] 1421 	addw y,acc16 
      001C83 20 C5            [ 2] 1422 	jra 1$ 
      001C85                       1423 9$:	
      001C85 1E 01            [ 2] 1424 	ldw x,(COUNT,sp)
      001C87 CD 17 F6         [ 4] 1425 	call prt_i16 
      001C8A AE 1C 95         [ 2] 1426 	ldw x,#CONST_COUNT 
      001C8D CD 09 A1         [ 4] 1427 	call puts 
      001C90                       1428 	_drop VSIZE 
      001C90 5B 04            [ 2]    1     addw sp,#VSIZE 
      001C92 90 85            [ 2] 1429 	popw y 
      001C94 81               [ 4] 1430 	ret 
                                   1431 
      001C95 20 63 6F 6E 73 74 61  1432 CONST_COUNT: .asciz " constants in EEPROM\n"
             6E 74 73 20 69 6E 20
             45 45 50 52 4F 4D 0A
             00
                                   1433 
                                   1434 
                                   1435 ;--------------------------
                                   1436 ; BASIC: EEFREE 
                                   1437 ; eeprom_free 
                                   1438 ; search end of data  
                                   1439 ; in EEPROM 
                                   1440 ; input:
                                   1441 ;    none 
                                   1442 ; output:
                                   1443 ;    A:X     address free
                                   1444 ;-------------------------
      001CAB                       1445 func_eefree:
      001CAB AE 40 00         [ 2] 1446 	ldw x,#EEPROM_BASE 
      001CAE 35 08 00 0E      [ 1] 1447 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001CB2 A3 47 F8         [ 2] 1448     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001CB5 24 17            [ 1] 1449 	jruge 8$ ; no free space 
      001CB7 F6               [ 1] 1450 2$: ld a,(x)
      001CB8 26 0C            [ 1] 1451 	jrne 3$
      001CBA 5C               [ 1] 1452 	incw x 
      001CBB 72 5A 00 0E      [ 1] 1453 	dec acc8 
      001CBF 26 F6            [ 1] 1454 	jrne 2$
      001CC1 1D 00 08         [ 2] 1455 	subw x,#8 
      001CC4 20 09            [ 2] 1456 	jra 9$  
      001CC6 F6               [ 1] 1457 3$: ld a,(x)
      001CC7 5C               [ 1] 1458 	incw x
      001CC8 4D               [ 1] 1459 	tnz a  
      001CC9 26 FB            [ 1] 1460 	jrne 3$
      001CCB 5A               [ 2] 1461 	decw x   
      001CCC 20 E0            [ 2] 1462 	jra 1$ 
      001CCE 5F               [ 1] 1463 8$: clrw x ; no free space 
      001CCF 4F               [ 1] 1464 9$: clr a 
      001CD0 CF 00 24         [ 2] 1465 	ldw free_eeprom,x ; save in system variable 
      001CD3 81               [ 4] 1466 	ret 
                                   1467 
                           000005  1468 CONST_REC_XTRA_BYTES=5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                   1469 ;--------------------------
                                   1470 ; search constant name 
                                   1471 ; format of constant record  
                                   1472 ;   .byte record length 
                                   1473 ;         = strlen(name)+5 
                                   1474 ;   .asciz name (variable length)
                                   1475 ;   .int24 value (3 bytes )
                                   1476 ; a constant record use 7+ bytes
                                   1477 ; constants are saved in EEPROM  
                                   1478 ; input:
                                   1479 ;    X     *name
                                   1480 ; output:
                                   1481 ;    X     address|0
                                   1482 ; use:
                                   1483 ;   A,Y, acc16 
                                   1484 ;-------------------------
                           000001  1485 	NAMEPTR=1 ; target name pointer 
                           000003  1486 	EEPTR=3   ; walking pointer in EEPROM
                           000005  1487 	RECLEN=5  ; record length of target
                           000005  1488 	VSIZE=5
      001CD4                       1489 search_const:
      001CD4 90 89            [ 2] 1490 	pushw y 
      001CD6                       1491 	_vars VSIZE
      001CD6 52 05            [ 2]    1     sub sp,#VSIZE 
      001CD8 72 5F 00 0D      [ 1] 1492 	clr acc16 
      001CDC CD 13 E4         [ 4] 1493 	call strlen 
      001CDF AB 05            [ 1] 1494 	add a,#CONST_REC_XTRA_BYTES
      001CE1 6B 05            [ 1] 1495 	ld (RECLEN,sp),a    
      001CE3 1F 01            [ 2] 1496 	ldw (NAMEPTR,sp),x
      001CE5 90 AE 40 00      [ 2] 1497 	ldw y,#EEPROM_BASE 
      001CE9 1E 01            [ 2] 1498 1$:	ldw x,(NAMEPTR,sp)
      001CEB 17 03            [ 2] 1499 	ldw (EEPTR,sp),y
      001CED 90 C3 00 24      [ 2] 1500 	cpw y, free_eeprom 
      001CF1 24 1A            [ 1] 1501 	jruge 7$ ; no match found 
      001CF3 90 F6            [ 1] 1502 	ld a,(y)
      001CF5 11 05            [ 1] 1503 	cp a,(RECLEN,sp)
      001CF7 26 07            [ 1] 1504 	jrne 2$ 
      001CF9 90 5C            [ 1] 1505 	incw y 
      001CFB CD 13 EF         [ 4] 1506 	call strcmp
      001CFE 26 11            [ 1] 1507 	jrne 8$ ; match found 
      001D00                       1508 2$: ; skip this one 	
      001D00 16 03            [ 2] 1509 	ldW Y,(EEPTR,sp)
      001D02 90 F6            [ 1] 1510 	ld a,(y)
      001D04 C7 00 0E         [ 1] 1511 	ld acc8,a 
      001D07 72 B9 00 0D      [ 2] 1512 	addw y,acc16 
      001D0B 20 DC            [ 2] 1513 	jra 1$  
      001D0D                       1514 7$: ; no match found 
      001D0D 0F 03            [ 1] 1515 	clr (EEPTR,sp)
      001D0F 0F 04            [ 1] 1516 	clr (EEPTR+1,sp)
      001D11                       1517 8$: ; match found 
      001D11 1E 03            [ 2] 1518 	ldw x,(EEPTR,sp) ; record address 
      001D13                       1519 9$:	_DROP VSIZE
      001D13 5B 05            [ 2]    1     addw sp,#VSIZE 
      001D15 90 85            [ 2] 1520 	 popw y 
      001D17 81               [ 4] 1521 	 ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



                                   1522 
                                   1523 
                                   1524 ;--------------------------------------------
                                   1525 ; BASIC: CONST name=value [, name=value]*
                                   1526 ; define constant(s) saved in EEPROM
                                   1527 ;--------------------------------------------
                           000001  1528 	CNAME=1 
                           000003  1529 	BUFPTR=3
                           000005  1530 	RECLEN=5
                           000006  1531 	UPDATE=6
                           000007  1532 	YSAVE=7
                           000008  1533 	VSIZE=8 
      001D18                       1534 cmd_const:
      001D18 90 89            [ 2] 1535 	pushw y 
      001D1A                       1536 	_vars VSIZE 
      001D1A 52 08            [ 2]    1     sub sp,#VSIZE 
      001D1C 0F 06            [ 1] 1537 	clr (UPDATE,sp)
      001D1E CD 17 A1         [ 4] 1538 	call next_token 
      001D21 A1 04            [ 1] 1539 	cp a,#TK_CHAR 
      001D23 26 0D            [ 1] 1540 	jrne 0$
      001D25 CD 17 F0         [ 4] 1541 	call get_char 
      001D28 A4 DF            [ 1] 1542 	and a,#0xDF 
      001D2A A1 55            [ 1] 1543 	cp a,#'U 
      001D2C 26 08            [ 1] 1544 	jrne 1$
      001D2E 03 06            [ 1] 1545 	cpl (UPDATE,sp)
      001D30 20 07            [ 2] 1546 	jra const_loop 
      001D32 A1 03            [ 1] 1547 0$: cp a,#TK_LABEL 
      001D34 27 08            [ 1] 1548 	jreq cloop_1
      001D36 CC 16 A0         [ 2] 1549 1$: jp syntax_error
      001D39                       1550 const_loop: 
      001D39 A6 03            [ 1] 1551 	ld a,#TK_LABEL 
      001D3B CD 19 4F         [ 4] 1552 	call expect  
      001D3E                       1553 cloop_1: 
      001D3E 1F 01            [ 2] 1554 	ldw (CNAME,sp),x ; *const_name
      001D40 CD 17 C7         [ 4] 1555 	call skip_string
      001D43 1E 01            [ 2] 1556 	ldw x,(CNAME,sp)
      001D45 CD 13 E4         [ 4] 1557 	call strlen  
      001D48 AB 05            [ 1] 1558 	add a,#CONST_REC_XTRA_BYTES 
      001D4A 6B 05            [ 1] 1559 	ld (RECLEN,sp),a 
                                   1560 ; copy name in buffer  
      001D4C 16 01            [ 2] 1561 	ldw y,(CNAME,sp) 
      001D4E AE 16 68         [ 2] 1562 	ldw x,#tib  
      001D51 7B 05            [ 1] 1563 	ld a,(RECLEN,sp)
      001D53 F7               [ 1] 1564 	ld (x),a 
      001D54 5C               [ 1] 1565 	incw x  
      001D55 CD 14 00         [ 4] 1566 	call strcpy 
      001D58 1F 03            [ 2] 1567 	ldw (BUFPTR,sp),x 
                                   1568 ; x not updated by strcpy 
                                   1569 ; BUFPTR must be incremented 
                                   1570 ; to point after name 
      001D5A 5F               [ 1] 1571 	clrw x 
      001D5B 7B 05            [ 1] 1572 	ld a,(RECLEN,sp)
      001D5D A0 04            [ 1] 1573 	sub a,#CONST_REC_XTRA_BYTES-1
      001D5F 97               [ 1] 1574 	ld xl,a  
      001D60 72 FB 03         [ 2] 1575 	addw x,(BUFPTR,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      001D63 1F 03            [ 2] 1576 	ldw (BUFPTR,sp),x 
      001D65 A6 32            [ 1] 1577 	ld a,#TK_EQUAL 
      001D67 CD 19 4F         [ 4] 1578 	call expect 
      001D6A 16 07            [ 2] 1579 	ldw y,(YSAVE,sp) ; restore xstack pointer 
      001D6C CD 1A 81         [ 4] 1580 	call expression 
      001D6F A1 84            [ 1] 1581 	cp a,#TK_INTGR 
      001D71 27 03            [ 1] 1582 	jreq 5$ 
      001D73 CC 16 A0         [ 2] 1583 	jp syntax_error 
      001D76                       1584 5$:	_xpop 
      001D76 90 F6            [ 1]    1     ld a,(y)
      001D78 93               [ 1]    2     ldw x,y 
      001D79 EE 01            [ 2]    3     ldw x,(1,x)
      001D7B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001D7F 17 07            [ 2] 1585 	ldw (YSAVE,sp),y ; save xtack pointer 
      001D81 16 03            [ 2] 1586 	ldw y,(BUFPTR,sp)
      001D83 90 F7            [ 1] 1587 	ld (y),a 
      001D85 90 EF 01         [ 2] 1588 	ldw (1,y),x 
                                   1589 ; record completed in buffer 
                                   1590 ; check if constant already exist 
                                   1591 ; if exist and \U option then update  
      001D88 72 5F 00 18      [ 1] 1592 	clr farptr 
      001D8C 1E 01            [ 2] 1593 	ldw x,(CNAME,sp)
      001D8E CD 1C D4         [ 4] 1594 	call search_const 
      001D91 5D               [ 2] 1595 	tnzw x 
      001D92 27 06            [ 1] 1596 	jreq 6$ ; new constant  
      001D94 0D 06            [ 1] 1597 	tnz (UPDATE,sp)
      001D96 27 1B            [ 1] 1598 	jreq 8$ 
      001D98 20 03            [ 2] 1599 	jra 7$	
      001D9A                       1600 6$:	
      001D9A CE 00 24         [ 2] 1601 	ldw x,free_eeprom  
      001D9D                       1602 7$:	
      001D9D CF 00 19         [ 2] 1603 	ldw farptr+1,x 
      001DA0 AE 16 68         [ 2] 1604 	ldw x,#tib 
      001DA3 7B 05            [ 1] 1605 	ld a,(RECLEN,sp)
      001DA5 CD 08 85         [ 4] 1606 	call write_nbytes
                                   1607 ; update free_eeprom 
      001DA8 5F               [ 1] 1608 	clrw x 
      001DA9 7B 05            [ 1] 1609 	ld a,(RECLEN,sp)
      001DAB 97               [ 1] 1610 	ld xl,a 
      001DAC 72 BB 00 24      [ 2] 1611 	addw x,free_eeprom 
      001DB0 CF 00 24         [ 2] 1612 	ldw free_eeprom,x
      001DB3                       1613 8$: ; check for next constant 
      001DB3 CD 17 A1         [ 4] 1614 	call next_token 
      001DB6 A1 08            [ 1] 1615 	cp a,#TK_COMMA 
      001DB8 26 03            [ 1] 1616 	jrne 9$ ; no other constant 
      001DBA CC 1D 39         [ 2] 1617 	jp const_loop 
      001DBD                       1618 9$: 
      001DBD                       1619 	_unget_token    
      001DBD 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001DC2                       1620 10$: 
      001DC2                       1621 	_drop VSIZE 
      001DC2 5B 08            [ 2]    1     addw sp,#VSIZE 
      001DC4 90 85            [ 2] 1622 	popw y ; restore xstack pointer 
      001DC6 81               [ 4] 1623 	ret 
                                   1624 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1625 
                                   1626 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1627 ; return program size 
                                   1628 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001DC7                       1629 prog_size:
      001DC7 CE 00 1D         [ 2] 1630 	ldw x,txtend 
      001DCA 72 B0 00 1B      [ 2] 1631 	subw x,txtbgn 
      001DCE 81               [ 4] 1632 	ret 
                                   1633 
                                   1634 ;----------------------------
                                   1635 ; print program information 
                                   1636 ;---------------------------
      001DCF                       1637 program_info: 
      001DCF AE 1E 0E         [ 2] 1638 	ldw x,#PROG_ADDR 
      001DD2 CD 09 A1         [ 4] 1639 	call puts 
      001DD5 CE 00 1B         [ 2] 1640 	ldw x,txtbgn 
      001DD8 35 10 00 0A      [ 1] 1641 	mov base,#16 
      001DDC CD 17 F6         [ 4] 1642 	call prt_i16
      001DDF 35 0A 00 0A      [ 1] 1643 	mov base,#10  
      001DE3 AE 1E 20         [ 2] 1644 	ldw x,#PROG_SIZE
      001DE6 CD 09 A1         [ 4] 1645 	call puts 
      001DE9 CD 1D C7         [ 4] 1646 	call prog_size 
      001DEC CD 17 F6         [ 4] 1647 	call prt_i16 
      001DEF AE 1E 31         [ 2] 1648 	ldw x,#STR_BYTES 
      001DF2 CD 09 A1         [ 4] 1649 	call puts
      001DF5 CE 00 1B         [ 2] 1650 	ldw x,txtbgn
      001DF8 A3 36 04         [ 2] 1651 	cpw x,#app 
      001DFB 25 05            [ 1] 1652 	jrult 2$
      001DFD AE 1E 38         [ 2] 1653 	ldw x,#FLASH_MEM 
      001E00 20 03            [ 2] 1654 	jra 3$
      001E02 AE 1E 49         [ 2] 1655 2$: ldw x,#RAM_MEM 	 
      001E05 CD 09 A1         [ 4] 1656 3$:	call puts 
      001E08 A6 0D            [ 1] 1657 	ld a,#CR 
      001E0A CD 09 44         [ 4] 1658 	call putc
      001E0D 81               [ 4] 1659 	ret 
                                   1660 
      001E0E 70 72 6F 67 72 61 6D  1661 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001E20 2C 20 70 72 6F 67 72  1662 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001E31 20 62 79 74 65 73 00  1663 STR_BYTES: .asciz " bytes" 
      001E38 20 69 6E 20 46 4C 41  1664 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001E49 20 69 6E 20 52 41 4D  1665 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
                                   1666 
                                   1667 
                                   1668 ;----------------------------
                                   1669 ; BASIC: LIST [[start][,end]]
                                   1670 ; list program lines 
                                   1671 ; form start to end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



                                   1672 ; if empty argument list then 
                                   1673 ; list all.
                                   1674 ;----------------------------
                           000001  1675 	FIRST=1
                           000003  1676 	LAST=3 
                           000005  1677 	LN_PTR=5
                           000006  1678 	VSIZE=6 
      001E58                       1679 list:
      001E58 72 01 00 22 05   [ 2] 1680 	btjf flags,#FRUN,0$
      001E5D A6 07            [ 1] 1681 	ld a,#ERR_CMD_ONLY
      001E5F CC 16 A2         [ 2] 1682 	jp tb_error
      001E62                       1683 0$:	 
      001E62 CD 17 A1         [ 4] 1684 	call next_token 
      001E65 A1 04            [ 1] 1685 	cp a,#TK_CHAR 
      001E67 26 10            [ 1] 1686 	jrne 2$
      001E69 CD 17 F0         [ 4] 1687 	call get_char 
      001E6C A4 DF            [ 1] 1688 	and a,#0xDF 
      001E6E A1 43            [ 1] 1689 	cp a,#'C 
      001E70 26 04            [ 1] 1690 	jrne 1$
      001E72 CD 1C 3F         [ 4] 1691 	call list_const
      001E75 81               [ 4] 1692 	ret 
      001E76 CC 16 A0         [ 2] 1693 1$: jp syntax_error 
      001E79                       1694 2$:	_unget_token 
      001E79 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E7E CD 1D C7         [ 4] 1695 	call prog_size 
      001E81 22 01            [ 1] 1696 	jrugt 3$
      001E83 81               [ 4] 1697 	ret 
      001E84                       1698 3$: _vars VSIZE
      001E84 52 06            [ 2]    1     sub sp,#VSIZE 
      001E86 CE 00 1B         [ 2] 1699 	ldw x,txtbgn 
      001E89 1F 05            [ 2] 1700 	ldw (LN_PTR,sp),x 
      001E8B FE               [ 2] 1701 	ldw x,(x) 
      001E8C 1F 01            [ 2] 1702 	ldw (FIRST,sp),x ; list from first line 
      001E8E AE 7F FF         [ 2] 1703 	ldw x,#MAX_LINENO ; biggest line number 
      001E91 1F 03            [ 2] 1704 	ldw (LAST,sp),x 
      001E93 CD 19 61         [ 4] 1705 	call arg_list
      001E96 4D               [ 1] 1706 	tnz a
      001E97 27 31            [ 1] 1707 	jreq list_loop 
      001E99 A1 02            [ 1] 1708 	cp a,#2 
      001E9B 27 07            [ 1] 1709 	jreq 4$
      001E9D A1 01            [ 1] 1710 	cp a,#1 
      001E9F 27 06            [ 1] 1711 	jreq first_line 
      001EA1 CC 16 A0         [ 2] 1712 	jp syntax_error 
      001EA4 85               [ 2] 1713 4$:	popw x 
      001EA5 1F 05            [ 2] 1714 	ldw (LAST+2,sp),x 
      001EA7                       1715 first_line:
      001EA7 85               [ 2] 1716 	popw x
      001EA8 1F 01            [ 2] 1717 	ldw (FIRST,sp),x 
      001EAA                       1718 lines_skip:
      001EAA CE 00 1B         [ 2] 1719 	ldw x,txtbgn
      001EAD 1F 05            [ 2] 1720 2$:	ldw (LN_PTR,sp),x 
      001EAF C3 00 1D         [ 2] 1721 	cpw x,txtend 
      001EB2 2A 38            [ 1] 1722 	jrpl list_exit 
      001EB4 FE               [ 2] 1723 	ldw x,(x) ;line# 
      001EB5 13 01            [ 2] 1724 	cpw x,(FIRST,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001EB7 2A 11            [ 1] 1725 	jrpl list_loop 
      001EB9 1E 05            [ 2] 1726 	ldw x,(LN_PTR,sp) 
      001EBB E6 02            [ 1] 1727 	ld a,(2,x)
      001EBD C7 00 0E         [ 1] 1728 	ld acc8,a 
      001EC0 72 5F 00 0D      [ 1] 1729 	clr acc16 
      001EC4 72 BB 00 0D      [ 2] 1730 	addw x,acc16
      001EC8 20 E3            [ 2] 1731 	jra 2$ 
                                   1732 ; print loop
      001ECA                       1733 list_loop:
      001ECA 1E 05            [ 2] 1734 	ldw x,(LN_PTR,sp)
      001ECC E6 02            [ 1] 1735 	ld a,(2,x) 
      001ECE CD 1F 41         [ 4] 1736 	call prt_basic_line
      001ED1 1E 05            [ 2] 1737 	ldw x,(LN_PTR,sp)
      001ED3 E6 02            [ 1] 1738 	ld a,(2,x)
      001ED5 C7 00 0E         [ 1] 1739 	ld acc8,a 
      001ED8 72 5F 00 0D      [ 1] 1740 	clr acc16 
      001EDC 72 BB 00 0D      [ 2] 1741 	addw x,acc16
      001EE0 C3 00 1D         [ 2] 1742 	cpw x,txtend 
      001EE3 2A 07            [ 1] 1743 	jrpl list_exit
      001EE5 1F 05            [ 2] 1744 	ldw (LN_PTR,sp),x
      001EE7 FE               [ 2] 1745 	ldw x,(x)
      001EE8 13 03            [ 2] 1746 	cpw x,(LAST,sp)  
      001EEA 2F DE            [ 1] 1747 	jrslt list_loop
      001EEC                       1748 list_exit:
      001EEC 55 00 03 00 01   [ 1] 1749 	mov in,count 
      001EF1 AE 16 B8         [ 2] 1750 	ldw x,#pad 
      001EF4 CF 00 04         [ 2] 1751 	ldw basicptr,x 
      001EF7                       1752 	_drop VSIZE 
      001EF7 5B 06            [ 2]    1     addw sp,#VSIZE 
      001EF9 CD 1D CF         [ 4] 1753 	call program_info 
      001EFC 81               [ 4] 1754 	ret
                                   1755 
                                   1756 
                                   1757 ;--------------------------
                                   1758 ; BASIC: EDIT 
                                   1759 ;  copy program in FLASH 
                                   1760 ;  to RAM for edition 
                                   1761 ;-------------------------
      001EFD                       1762 edit:
      001EFD CD 27 15         [ 4] 1763 	call qsign 
      001F00 27 07            [ 1] 1764 	jreq 1$ 
      001F02 AE 1F 2A         [ 2] 1765 	ldw x,#NOT_SAVED 
      001F05 CD 09 A1         [ 4] 1766 	call puts 
      001F08 81               [ 4] 1767 	ret 
      001F09                       1768 1$: 
      001F09 90 AE 36 00      [ 2] 1769 	ldw y,#app_sign ; source address 
      001F0D CE 36 02         [ 2] 1770     ldw x,app_size  
      001F10 1C 00 04         [ 2] 1771 	addw x,#4 
      001F13 CF 00 0D         [ 2] 1772 	ldw acc16,x  ; bytes to copy 
      001F16 AE 00 7C         [ 2] 1773 	ldw x,#rsign ; destination address 
      001F19 CD 14 10         [ 4] 1774 	call move  
      001F1C AE 00 80         [ 2] 1775 	ldw x,#free_ram 
      001F1F CF 00 1B         [ 2] 1776 	ldw txtbgn,x 
      001F22 72 BB 00 7E      [ 2] 1777 	addw x,rsize  
      001F26 CF 00 1D         [ 2] 1778 	ldw txtend,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      001F29 81               [ 4] 1779 	ret 
                                   1780 
      001F2A 4E 6F 20 61 70 70 6C  1781 NOT_SAVED: .asciz "No application saved.\n"
             69 63 61 74 69 6F 6E
             20 73 61 76 65 64 2E
             0A 00
                                   1782 
                                   1783 
                                   1784 ;--------------------------
                                   1785 ; decompile line from token list
                                   1786 ; and print it. 
                                   1787 ; input:
                                   1788 ;   A       stop at this position 
                                   1789 ;   X 		pointer at line
                                   1790 ; output:
                                   1791 ;   none 
                                   1792 ;--------------------------	
      001F41                       1793 prt_basic_line:
      001F41 90 89            [ 2] 1794 	pushw y 
      001F43 C7 00 03         [ 1] 1795 	ld count,a 
      001F46 E6 02            [ 1] 1796 	ld a,(2,x)
      001F48 C1 00 03         [ 1] 1797 	cp a,count 
      001F4B 2A 03            [ 1] 1798 	jrpl 1$ 
      001F4D C7 00 03         [ 1] 1799 	ld count,a 
      001F50 CF 00 04         [ 2] 1800 1$:	ldw basicptr,x 
      001F53 90 AE 16 68      [ 2] 1801 	ldw y,#tib  
      001F57 CD 12 08         [ 4] 1802 	call decompile 
      001F5A CD 09 A1         [ 4] 1803 	call puts 
      001F5D A6 0D            [ 1] 1804 	ld a,#CR 
      001F5F CD 09 44         [ 4] 1805 	call putc 
      001F62 90 85            [ 2] 1806 	popw y 
      001F64 81               [ 4] 1807 	ret 
                                   1808 
                                   1809 
                                   1810 ;---------------------------------
                                   1811 ; BASIC: PRINT|? arg_list 
                                   1812 ; print values from argument list
                                   1813 ;----------------------------------
                           000001  1814 	CCOMMA=1
                           000001  1815 	VSIZE=1
      001F65                       1816 print:
      001F65                       1817 	_vars VSIZE 
      001F65 52 01            [ 2]    1     sub sp,#VSIZE 
      001F67                       1818 reset_comma:
      001F67 0F 01            [ 1] 1819 	clr (CCOMMA,sp)
      001F69                       1820 prt_loop:
      001F69 CD 17 A1         [ 4] 1821 	call next_token
      001F6C A1 02            [ 1] 1822 	cp a,#CMD_END 
      001F6E 25 08            [ 1] 1823 	jrult 0$
      001F70 A1 0A            [ 1] 1824 	cp a,#TK_COLON 
      001F72 27 04            [ 1] 1825 	jreq 0$
      001F74 A1 80            [ 1] 1826 	cp a,#TK_CMD
      001F76 26 07            [ 1] 1827 	jrne 10$
      001F78                       1828 0$:
      001F78                       1829 	_unget_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



      001F78 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001F7D 20 5A            [ 2] 1830 	jra print_exit 
      001F7F                       1831 10$:	
      001F7F A1 02            [ 1] 1832 	cp a,#TK_QSTR
      001F81 27 12            [ 1] 1833 	jreq 1$
      001F83 A1 04            [ 1] 1834 	cp a,#TK_CHAR 
      001F85 27 1B            [ 1] 1835 	jreq 2$ 
      001F87 A1 82            [ 1] 1836 	cp a,#TK_CFUNC 
      001F89 27 1F            [ 1] 1837 	jreq 3$
      001F8B A1 08            [ 1] 1838 	cp a,#TK_COMMA 
      001F8D 27 24            [ 1] 1839 	jreq 4$
      001F8F A1 09            [ 1] 1840 	cp a,#TK_SHARP 
      001F91 27 24            [ 1] 1841 	jreq 5$
      001F93 20 37            [ 2] 1842 	jra 7$ 
      001F95                       1843 1$:	; print string 
      001F95 CD 09 A1         [ 4] 1844 	call puts
      001F98 5C               [ 1] 1845 	incw x
      001F99 72 B0 00 04      [ 2] 1846 	subw x,basicptr 
      001F9D CF 00 00         [ 2] 1847 	ldw in.w,x  
      001FA0 20 C5            [ 2] 1848 	jra reset_comma
      001FA2                       1849 2$:	; print character 
      001FA2 CD 17 F0         [ 4] 1850 	call get_char 
      001FA5 CD 09 44         [ 4] 1851 	call putc 
      001FA8 20 BD            [ 2] 1852 	jra reset_comma 
      001FAA                       1853 3$: ; print character function value  	
      001FAA CD 17 BA         [ 4] 1854 	call get_code_addr 
      001FAD FD               [ 4] 1855 	call (x)
      001FAE CD 09 44         [ 4] 1856 	call putc
      001FB1 20 B4            [ 2] 1857 	jra reset_comma 
      001FB3                       1858 4$: ; set comma state 
      001FB3 03 01            [ 1] 1859 	cpl (CCOMMA,sp)
      001FB5 20 B2            [ 2] 1860 	jra prt_loop   
      001FB7                       1861 5$: ; # character must be followed by an integer   
      001FB7 CD 17 A1         [ 4] 1862 	call next_token
      001FBA A1 84            [ 1] 1863 	cp a,#TK_INTGR 
      001FBC 27 03            [ 1] 1864 	jreq 6$
      001FBE CC 16 A0         [ 2] 1865 	jp syntax_error 
      001FC1                       1866 6$: ; set tab width
      001FC1 CD 17 E0         [ 4] 1867 	call get_int24 
      001FC4 9F               [ 1] 1868 	ld a,xl 
      001FC5 A4 0F            [ 1] 1869 	and a,#15 
      001FC7 C7 00 23         [ 1] 1870 	ld tab_width,a 
      001FCA 20 9B            [ 2] 1871 	jra reset_comma 
      001FCC                       1872 7$:	
      001FCC                       1873 	_unget_token 
      001FCC 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001FD1 CD 1A 81         [ 4] 1874 	call expression  
      001FD4 CD 18 1B         [ 4] 1875     call print_top
      001FD7 20 8E            [ 2] 1876 	jra reset_comma 
      001FD9                       1877 print_exit:
      001FD9 0D 01            [ 1] 1878 	tnz (CCOMMA,sp)
      001FDB 26 05            [ 1] 1879 	jrne 9$
      001FDD A6 0D            [ 1] 1880 	ld a,#CR 
      001FDF CD 09 44         [ 4] 1881     call putc 
      001FE2                       1882 9$:	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      001FE2 5B 01            [ 2]    1     addw sp,#VSIZE 
      001FE4 81               [ 4] 1883 	ret 
                                   1884 
                                   1885 ;----------------------
                                   1886 ; 'save_context' and
                                   1887 ; 'rest_context' must be 
                                   1888 ; called at the same 
                                   1889 ; call stack depth 
                                   1890 ; i.e. SP must have the 
                                   1891 ; save value at  
                                   1892 ; entry point of both 
                                   1893 ; routine. 
                                   1894 ;---------------------
                           000004  1895 	CTXT_SIZE=4 ; size of saved data 
                                   1896 ;--------------------
                                   1897 ; save current BASIC
                                   1898 ; interpreter context 
                                   1899 ; on stack 
                                   1900 ;--------------------
      001FE5                       1901 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001FE5                       1902 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001FE5                       1903 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001FE5                       1904 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001FE5                       1905 save_context:
      001FE5 CE 00 04         [ 2] 1906 	ldw x,basicptr 
      001FE8 1F 03            [ 2] 1907 	ldw (BPTR,sp),x
      001FEA C6 00 01         [ 1] 1908 	ld a,in 
      001FED 6B 05            [ 1] 1909 	ld (IN,sp),a
      001FEF C6 00 03         [ 1] 1910 	ld a,count 
      001FF2 6B 06            [ 1] 1911 	ld (CNT,sp),a  
      001FF4 81               [ 4] 1912 	ret
                                   1913 
                                   1914 ;-----------------------
                                   1915 ; restore previously saved 
                                   1916 ; BASIC interpreter context 
                                   1917 ; from stack 
                                   1918 ;-------------------------
      001FF5                       1919 rest_context:
      001FF5 1E 03            [ 2] 1920 	ldw x,(BPTR,sp)
      001FF7 CF 00 04         [ 2] 1921 	ldw basicptr,x 
      001FFA 7B 05            [ 1] 1922 	ld a,(IN,sp)
      001FFC C7 00 01         [ 1] 1923 	ld in,a
      001FFF 7B 06            [ 1] 1924 	ld a,(CNT,sp)
      002001 C7 00 03         [ 1] 1925 	ld count,a  
      002004 81               [ 4] 1926 	ret
                                   1927 
                                   1928 
                                   1929 
                                   1930 ;------------------------------------------
                                   1931 ; BASIC: INPUT [string]var[,[string]var]
                                   1932 ; input value in variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                   1933 ; [string] optionally can be used as prompt 
                                   1934 ;-----------------------------------------
                           000001  1935 	CX_BPTR=1
                           000003  1936 	CX_IN=3
                           000004  1937 	CX_CNT=4
                           000005  1938 	SKIP=5
                           000005  1939 	VSIZE=5
      002005                       1940 input_var:
      002005 90 89            [ 2] 1941 	pushw y 
      002007                       1942 	_vars VSIZE 
      002007 52 05            [ 2]    1     sub sp,#VSIZE 
      002009                       1943 input_loop:
      002009 0F 05            [ 1] 1944 	clr (SKIP,sp)
      00200B CD 17 A1         [ 4] 1945 	call next_token 
      00200E A1 02            [ 1] 1946 	cp a,#TK_QSTR 
      002010 26 10            [ 1] 1947 	jrne 1$ 
      002012 CD 09 A1         [ 4] 1948 	call puts 
      002015 5C               [ 1] 1949 	incw x 
      002016 72 B0 00 04      [ 2] 1950 	subw x,basicptr 
      00201A CF 00 00         [ 2] 1951 	ldw in.w,x 
      00201D 03 05            [ 1] 1952 	cpl (SKIP,sp)
      00201F CD 17 A1         [ 4] 1953 	call next_token 
      002022 A1 85            [ 1] 1954 1$: cp a,#TK_VAR  
      002024 27 03            [ 1] 1955 	jreq 2$ 
      002026 CC 16 A0         [ 2] 1956 	jp syntax_error
      002029 CD 17 D6         [ 4] 1957 2$:	call get_addr
      00202C CF 00 19         [ 2] 1958 	ldw ptr16,x 
      00202F 0D 05            [ 1] 1959 	tnz (SKIP,sp)
      002031 26 06            [ 1] 1960 	jrne 21$ 
      002033 CD 11 DD         [ 4] 1961 	call var_name 
      002036 CD 09 44         [ 4] 1962 	call putc   
      002039                       1963 21$:
      002039 A6 3A            [ 1] 1964 	ld a,#':
      00203B CD 09 44         [ 4] 1965 	call putc 
      00203E CD 1F E5         [ 4] 1966 	call save_context 
      002041 72 5F 00 03      [ 1] 1967 	clr count  
      002045 CD 0A A6         [ 4] 1968 	call readln 
      002048 AE 16 68         [ 2] 1969 	ldw x,#tib 
      00204B 3B 00 03         [ 1] 1970 	push count
      00204E 4B 00            [ 1] 1971 	push #0 
      002050 72 FB 01         [ 2] 1972 	addw x,(1,sp)
      002053 5C               [ 1] 1973 	incw x 
      002054                       1974 	_drop 2 
      002054 5B 02            [ 2]    1     addw sp,#2 
      002056 72 5F 00 01      [ 1] 1975 	clr in 
      00205A CD 0F 1F         [ 4] 1976 	call get_token
      00205D A1 84            [ 1] 1977 	cp a,#TK_INTGR
      00205F 27 12            [ 1] 1978 	jreq 3$ 
      002061 A1 11            [ 1] 1979 	cp a,#TK_MINUS
      002063 CD 0F 1F         [ 4] 1980 	call get_token 
      002066 A1 84            [ 1] 1981 	cp a,#TK_INTGR 
      002068 27 06            [ 1] 1982 	jreq 22$
      00206A CD 1F F5         [ 4] 1983 	call rest_context 
      00206D CC 16 A0         [ 2] 1984 	jp syntax_error
      002070                       1985 22$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002070 CD 02 0D         [ 4] 1986 	call neg_acc24	
      002073                       1987 3$: 
      002073 C6 00 0C         [ 1] 1988 	ld a,acc24 
      002076 CE 00 0D         [ 2] 1989 	ldw x,acc16 
      002079 72 C7 00 19      [ 4] 1990 	ld [ptr16],a
      00207D 72 5C 00 1A      [ 1] 1991 	inc ptr8  
      002081 72 CF 00 19      [ 5] 1992 	ldw [ptr16],x 
      002085 CD 1F F5         [ 4] 1993 	call rest_context
      002088 CD 17 A1         [ 4] 1994 	call next_token 
      00208B A1 08            [ 1] 1995 	cp a,#TK_COMMA
      00208D 26 03            [ 1] 1996 	jrne 4$ 
      00208F CC 20 09         [ 2] 1997 	jp input_loop
      002092                       1998 4$:
      002092 A1 00            [ 1] 1999 	cp a,#TK_NONE 
      002094 27 07            [ 1] 2000 	jreq input_exit  
      002096 A1 0A            [ 1] 2001 	cp a,#TK_COLON 
      002098 27 03            [ 1] 2002     jreq input_exit 
      00209A CC 16 A0         [ 2] 2003 	jp syntax_error 
      00209D                       2004 input_exit:
      00209D                       2005 	_drop VSIZE 
      00209D 5B 05            [ 2]    1     addw sp,#VSIZE 
      00209F 90 85            [ 2] 2006 	popw y 
      0020A1 81               [ 4] 2007 	ret 
                                   2008 
                                   2009 
                                   2010 ;---------------------
                                   2011 ; BASIC: REM | ' 
                                   2012 ; skip comment to end of line 
                                   2013 ;---------------------- 
      0020A2                       2014 remark::
      0020A2 55 00 03 00 01   [ 1] 2015 	mov in,count 
      0020A7 81               [ 4] 2016  	ret 
                                   2017 
                                   2018 
                                   2019 ;---------------------
                                   2020 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2021 ; read in loop 'addr'  
                                   2022 ; apply & 'mask' to value 
                                   2023 ; loop while result==0.  
                                   2024 ; 'xor_mask' is used to 
                                   2025 ; invert the wait logic.
                                   2026 ; i.e. loop while not 0.
                                   2027 ;---------------------
                           000001  2028 	XMASK=1 
                           000002  2029 	MASK=2
                           000003  2030 	ADDR=3
                           000004  2031 	VSIZE=4
      0020A8                       2032 wait: 
      0020A8                       2033 	_vars VSIZE
      0020A8 52 04            [ 2]    1     sub sp,#VSIZE 
      0020AA 0F 01            [ 1] 2034 	clr (XMASK,sp) 
      0020AC CD 19 61         [ 4] 2035 	call arg_list 
      0020AF A1 02            [ 1] 2036 	cp a,#2
      0020B1 24 03            [ 1] 2037 	jruge 0$
      0020B3 CC 16 A0         [ 2] 2038 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      0020B6 A1 03            [ 1] 2039 0$:	cp a,#3
      0020B8 25 0C            [ 1] 2040 	jrult 1$
      0020BA                       2041 	_xpop  ; xor mask 
      0020BA 90 F6            [ 1]    1     ld a,(y)
      0020BC 93               [ 1]    2     ldw x,y 
      0020BD EE 01            [ 2]    3     ldw x,(1,x)
      0020BF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020C3 9F               [ 1] 2042 	ld a,xl 
      0020C4 6B 01            [ 1] 2043 	ld (XMASK,sp),a 
      0020C6                       2044 1$: _xpop ; mask
      0020C6 90 F6            [ 1]    1     ld a,(y)
      0020C8 93               [ 1]    2     ldw x,y 
      0020C9 EE 01            [ 2]    3     ldw x,(1,x)
      0020CB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020CF 9F               [ 1] 2045     ld a,xl  
      0020D0 6B 02            [ 1] 2046 	ld (MASK,sp),a 
      0020D2                       2047 	_xpop ; address 
      0020D2 90 F6            [ 1]    1     ld a,(y)
      0020D4 93               [ 1]    2     ldw x,y 
      0020D5 EE 01            [ 2]    3     ldw x,(1,x)
      0020D7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020DB F6               [ 1] 2048 2$:	ld a,(x)
      0020DC 14 02            [ 1] 2049 	and a,(MASK,sp)
      0020DE 18 01            [ 1] 2050 	xor a,(XMASK,sp)
      0020E0 27 F9            [ 1] 2051 	jreq 2$ 
      0020E2                       2052 	_drop VSIZE 
      0020E2 5B 04            [ 2]    1     addw sp,#VSIZE 
      0020E4 81               [ 4] 2053 	ret 
                                   2054 
                                   2055 ;---------------------
                                   2056 ; BASIC: BSET addr,mask
                                   2057 ; set bits at 'addr' corresponding 
                                   2058 ; to those of 'mask' that are at 1.
                                   2059 ; arguments:
                                   2060 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2061 ;   mask        mask|addr
                                   2062 ; output:
                                   2063 ;	none 
                                   2064 ;--------------------------
      0020E5                       2065 bit_set:
      0020E5 CD 19 61         [ 4] 2066 	call arg_list 
      0020E8 A1 02            [ 1] 2067 	cp a,#2	 
      0020EA 27 03            [ 1] 2068 	jreq 1$ 
      0020EC CC 16 A0         [ 2] 2069 	jp syntax_error
      0020EF                       2070 1$: 
      0020EF                       2071 	_xpop ; mask 
      0020EF 90 F6            [ 1]    1     ld a,(y)
      0020F1 93               [ 1]    2     ldw x,y 
      0020F2 EE 01            [ 2]    3     ldw x,(1,x)
      0020F4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0020F8 9F               [ 1] 2072 	ld a,xl
      0020F9 88               [ 1] 2073 	push a  
      0020FA                       2074 	_xpop ; addr  
      0020FA 90 F6            [ 1]    1     ld a,(y)
      0020FC 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0020FD EE 01            [ 2]    3     ldw x,(1,x)
      0020FF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002103 84               [ 1] 2075 	pop a 
      002104 FA               [ 1] 2076 	or a,(x)
      002105 F7               [ 1] 2077 	ld (x),a
      002106 81               [ 4] 2078 	ret 
                                   2079 
                                   2080 ;---------------------
                                   2081 ; BASIC: BRES addr,mask
                                   2082 ; reset bits at 'addr' corresponding 
                                   2083 ; to those of 'mask' that are at 1.
                                   2084 ; arguments:
                                   2085 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2086 ;   mask	    ~mask&*addr  
                                   2087 ; output:
                                   2088 ;	none 
                                   2089 ;--------------------------
      002107                       2090 bit_reset:
      002107 CD 19 61         [ 4] 2091 	call arg_list 
      00210A A1 02            [ 1] 2092 	cp a,#2  
      00210C 27 03            [ 1] 2093 	jreq 1$ 
      00210E CC 16 A0         [ 2] 2094 	jp syntax_error
      002111                       2095 1$: 
      002111                       2096 	_xpop ; mask 
      002111 90 F6            [ 1]    1     ld a,(y)
      002113 93               [ 1]    2     ldw x,y 
      002114 EE 01            [ 2]    3     ldw x,(1,x)
      002116 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00211A 9F               [ 1] 2097 	ld a,xl 
      00211B 43               [ 1] 2098 	cpl a
      00211C 88               [ 1] 2099 	push a  
      00211D                       2100 	_xpop ; addr  
      00211D 90 F6            [ 1]    1     ld a,(y)
      00211F 93               [ 1]    2     ldw x,y 
      002120 EE 01            [ 2]    3     ldw x,(1,x)
      002122 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002126 84               [ 1] 2101 	pop a 
      002127 F4               [ 1] 2102 	and a,(x)
      002128 F7               [ 1] 2103 	ld (x),a 
      002129 81               [ 4] 2104 	ret 
                                   2105 
                                   2106 ;---------------------
                                   2107 ; BASIC: BTOGL addr,mask
                                   2108 ; toggle bits at 'addr' corresponding 
                                   2109 ; to those of 'mask' that are at 1.
                                   2110 ; arguments:
                                   2111 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2112 ;   mask	    mask^*addr  
                                   2113 ; output:
                                   2114 ;	none 
                                   2115 ;--------------------------
      00212A                       2116 bit_toggle:
      00212A CD 19 61         [ 4] 2117 	call arg_list 
      00212D A1 02            [ 1] 2118 	cp a,#2 
      00212F 27 03            [ 1] 2119 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002131 CC 16 A0         [ 2] 2120 	jp syntax_error
      002134                       2121 1$: _xpop ; mask 
      002134 90 F6            [ 1]    1     ld a,(y)
      002136 93               [ 1]    2     ldw x,y 
      002137 EE 01            [ 2]    3     ldw x,(1,x)
      002139 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00213D 9F               [ 1] 2122 	ld a,xl
      00213E 88               [ 1] 2123 	push a 
      00213F                       2124 	_xpop  ; addr  
      00213F 90 F6            [ 1]    1     ld a,(y)
      002141 93               [ 1]    2     ldw x,y 
      002142 EE 01            [ 2]    3     ldw x,(1,x)
      002144 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002148 84               [ 1] 2125 	pop a 
      002149 F8               [ 1] 2126 	xor a,(x)
      00214A F7               [ 1] 2127 	ld (x),a 
      00214B 81               [ 4] 2128 	ret 
                                   2129 
                                   2130 
                                   2131 ;---------------------
                                   2132 ; BASIC: BTEST(addr,bit)
                                   2133 ; return bit value at 'addr' 
                                   2134 ; bit is in range {0..7}.
                                   2135 ; arguments:
                                   2136 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2137 ;   bit 	    bit position {0..7}  
                                   2138 ; output:
                                   2139 ;	A:X       bit value  
                                   2140 ;--------------------------
      00214C                       2141 bit_test:
      00214C CD 19 5C         [ 4] 2142 	call func_args 
      00214F A1 02            [ 1] 2143 	cp a,#2
      002151 27 03            [ 1] 2144 	jreq 0$
      002153 CC 16 A0         [ 2] 2145 	jp syntax_error
      002156                       2146 0$:	
      002156                       2147 	_xpop 
      002156 90 F6            [ 1]    1     ld a,(y)
      002158 93               [ 1]    2     ldw x,y 
      002159 EE 01            [ 2]    3     ldw x,(1,x)
      00215B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00215F 9F               [ 1] 2148 	ld a,xl 
      002160 A4 07            [ 1] 2149 	and a,#7
      002162 88               [ 1] 2150 	push a   
      002163 A6 01            [ 1] 2151 	ld a,#1 
      002165 0D 01            [ 1] 2152 1$: tnz (1,sp)
      002167 27 05            [ 1] 2153 	jreq 2$
      002169 48               [ 1] 2154 	sll a 
      00216A 0A 01            [ 1] 2155 	dec (1,sp)
      00216C 20 F7            [ 2] 2156 	jra 1$
      00216E 6B 01            [ 1] 2157 2$: ld (1,sp),a  
      002170                       2158 	_xpop ; address  
      002170 90 F6            [ 1]    1     ld a,(y)
      002172 93               [ 1]    2     ldw x,y 
      002173 EE 01            [ 2]    3     ldw x,(1,x)
      002175 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002179 84               [ 1] 2159 	pop a 
      00217A F4               [ 1] 2160 	and a,(x)
      00217B 27 02            [ 1] 2161 	jreq 3$
      00217D A6 01            [ 1] 2162 	ld a,#1 
      00217F 5F               [ 1] 2163 3$:	clrw x 
      002180 97               [ 1] 2164 	ld xl,a
      002181 4F               [ 1] 2165 	clr a  
      002182 81               [ 4] 2166 	ret
                                   2167 
                                   2168 ;--------------------
                                   2169 ; BASIC: POKE addr,byte
                                   2170 ; put a byte at addr 
                                   2171 ;--------------------
      002183                       2172 poke:
      002183 CD 19 61         [ 4] 2173 	call arg_list 
      002186 A1 02            [ 1] 2174 	cp a,#2
      002188 27 03            [ 1] 2175 	jreq 1$
      00218A CC 16 A0         [ 2] 2176 	jp syntax_error
      00218D                       2177 1$:	
      00218D                       2178 	_xpop ; byte   
      00218D 90 F6            [ 1]    1     ld a,(y)
      00218F 93               [ 1]    2     ldw x,y 
      002190 EE 01            [ 2]    3     ldw x,(1,x)
      002192 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002196 9F               [ 1] 2179     ld a,xl 
      002197 88               [ 1] 2180 	push a 
      002198                       2181 	_xpop ; address 
      002198 90 F6            [ 1]    1     ld a,(y)
      00219A 93               [ 1]    2     ldw x,y 
      00219B EE 01            [ 2]    3     ldw x,(1,x)
      00219D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A1 84               [ 1] 2182 	pop a 
      0021A2 F7               [ 1] 2183 	ld (x),a 
      0021A3 81               [ 4] 2184 	ret 
                                   2185 
                                   2186 ;-----------------------
                                   2187 ; BASIC: PEEK(addr)
                                   2188 ; get the byte at addr 
                                   2189 ; input:
                                   2190 ;	none 
                                   2191 ; output:
                                   2192 ;	X 		value 
                                   2193 ;-----------------------
      0021A4                       2194 peek:
      0021A4 CD 19 5C         [ 4] 2195 	call func_args
      0021A7 A1 01            [ 1] 2196 	cp a,#1 
      0021A9 27 03            [ 1] 2197 	jreq 1$
      0021AB CC 16 A0         [ 2] 2198 	jp syntax_error
      0021AE                       2199 1$: _xpop ; address  
      0021AE 90 F6            [ 1]    1     ld a,(y)
      0021B0 93               [ 1]    2     ldw x,y 
      0021B1 EE 01            [ 2]    3     ldw x,(1,x)
      0021B3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021B7 C7 00 18         [ 1] 2200 	ld farptr,a 
      0021BA CF 00 19         [ 2] 2201 	ldw ptr16,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      0021BD 92 BC 00 18      [ 5] 2202 	ldf a,[farptr]
      0021C1 5F               [ 1] 2203 	clrw x 
      0021C2 97               [ 1] 2204 	ld xl,a 
      0021C3 4F               [ 1] 2205 	clr a 
      0021C4 81               [ 4] 2206 	ret 
                                   2207 
                                   2208 ;---------------------------
                                   2209 ; BASIC IF expr : instructions
                                   2210 ; evaluate expr and if true 
                                   2211 ; execute instructions on same line. 
                                   2212 ;----------------------------
      0021C5                       2213 if: 
      0021C5 CD 1B 0A         [ 4] 2214 	call condition  
      0021C8 4D               [ 1] 2215 	tnz  a  
      0021C9 26 0A            [ 1] 2216 	jrne 9$ 
                                   2217 ;skip to next line
      0021CB 55 00 03 00 01   [ 1] 2218 	mov in,count
      0021D0                       2219 	_drop 2 
      0021D0 5B 02            [ 2]    1     addw sp,#2 
      0021D2 CC 17 53         [ 2] 2220 	jp next_line
      0021D5 81               [ 4] 2221 9$:	ret 
                                   2222 
                                   2223 ;------------------------
                                   2224 ; BASIC: FOR var=expr 
                                   2225 ; set variable to expression 
                                   2226 ; leave variable address 
                                   2227 ; on stack and set
                                   2228 ; FLOOP bit in 'flags'
                                   2229 ;-----------------
                           000001  2230 	RETL1=1 ; return address  
                           000003  2231 	FSTEP=3  ; variable increment int24
                           000006  2232 	LIMIT=6 ; loop limit, int24  
                           000009  2233 	CVAR=9   ; control variable 
                           00000B  2234 	INW=11   ;  in.w saved
                           00000D  2235 	BPTR=13 ; baseptr saved
                           00000D  2236 	VSIZE=13  
      0021D6                       2237 for: ; { -- var_addr }
      0021D6 85               [ 2] 2238 	popw x ; call return address 
      0021D7                       2239 	_vars VSIZE 
      0021D7 52 0D            [ 2]    1     sub sp,#VSIZE 
      0021D9 89               [ 2] 2240 	pushw x  ; RETL1 
      0021DA A6 85            [ 1] 2241 	ld a,#TK_VAR 
      0021DC CD 19 4F         [ 4] 2242 	call expect
      0021DF CD 17 D6         [ 4] 2243 	call get_addr
      0021E2 1F 09            [ 2] 2244 	ldw (CVAR,sp),x  ; control variable 
      0021E4 CD 1C 03         [ 4] 2245 	call let_eval 
      0021E7 72 14 00 22      [ 1] 2246 	bset flags,#FLOOP 
      0021EB CD 17 A1         [ 4] 2247 	call next_token 
      0021EE A1 80            [ 1] 2248 	cp a,#TK_CMD 
      0021F0 27 03            [ 1] 2249 	jreq 1$
      0021F2 CC 16 A0         [ 2] 2250 	jp syntax_error
      0021F5                       2251 1$:  
      0021F5 CD 17 BA         [ 4] 2252 	call get_code_addr
      0021F8 A3 22 00         [ 2] 2253 	cpw x,#to   
      0021FB 27 03            [ 1] 2254 	jreq to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      0021FD CC 16 A0         [ 2] 2255 	jp syntax_error 
                                   2256 
                                   2257 ;-----------------------------------
                                   2258 ; BASIC: TO expr 
                                   2259 ; second part of FOR loop initilization
                                   2260 ; leave limit on stack and set 
                                   2261 ; FTO bit in 'flags'
                                   2262 ;-----------------------------------
      002200                       2263 to: ; { var_addr -- var_addr limit step }
      002200 72 04 00 22 03   [ 2] 2264 	btjt flags,#FLOOP,1$
      002205 CC 16 A0         [ 2] 2265 	jp syntax_error
      002208 CD 1A 81         [ 4] 2266 1$: call expression   
      00220B A1 84            [ 1] 2267 	cp a,#TK_INTGR 
      00220D 27 03            [ 1] 2268 	jreq 2$ 
      00220F CC 16 A0         [ 2] 2269 	jp syntax_error
      002212                       2270 2$: _xpop
      002212 90 F6            [ 1]    1     ld a,(y)
      002214 93               [ 1]    2     ldw x,y 
      002215 EE 01            [ 2]    3     ldw x,(1,x)
      002217 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00221B 6B 06            [ 1] 2271 	ld (LIMIT,sp),a 
      00221D 1F 07            [ 2] 2272 	ldw (LIMIT+1,sp),x
      00221F CD 17 A1         [ 4] 2273 	call next_token
      002222 A1 00            [ 1] 2274 	cp a,#TK_NONE  
      002224 27 11            [ 1] 2275 	jreq 4$ 
      002226 A1 80            [ 1] 2276 	cp a,#TK_CMD
      002228 26 08            [ 1] 2277 	jrne 3$
      00222A CD 17 BA         [ 4] 2278 	call get_code_addr
      00222D A3 22 40         [ 2] 2279 	cpw x,#step 
      002230 27 0E            [ 1] 2280 	jreq step
      002232                       2281 3$:	
      002232                       2282 	_unget_token   	 
      002232 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002237                       2283 4$:	
      002237 0F 03            [ 1] 2284 	clr (FSTEP,sp) 
      002239 AE 00 01         [ 2] 2285 	ldw x,#1   ; default step  
      00223C 1F 04            [ 2] 2286 	ldw (FSTEP+1,sp),x 
      00223E 20 2F            [ 2] 2287 	jra store_loop_addr 
                                   2288 
                                   2289 
                                   2290 ;----------------------------------
                                   2291 ; BASIC: STEP expr 
                                   2292 ; optional third par of FOR loop
                                   2293 ; initialization. 	
                                   2294 ;------------------------------------
      002240                       2295 step: ; {var limit -- var limit step}
      002240 72 04 00 22 03   [ 2] 2296 	btjt flags,#FLOOP,1$
      002245 CC 16 A0         [ 2] 2297 	jp syntax_error
      002248 CD 1A 81         [ 4] 2298 1$: call expression 
      00224B A1 84            [ 1] 2299 	cp a,#TK_INTGR
      00224D 27 03            [ 1] 2300 	jreq 2$
      00224F CC 16 A0         [ 2] 2301 	jp syntax_error
      002252                       2302 2$:	
      002252                       2303 	_xpop 
      002252 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002254 93               [ 1]    2     ldw x,y 
      002255 EE 01            [ 2]    3     ldw x,(1,x)
      002257 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00225B 6B 03            [ 1] 2304 	ld (FSTEP,sp),a 
      00225D 1F 04            [ 2] 2305 	ldw (FSTEP+1,sp),x ; step
                                   2306 ; if step < 0 decrement LIMIT 
      00225F 4D               [ 1] 2307 	tnz a
      002260 2A 0D            [ 1] 2308 	jrpl store_loop_addr 
      002262 7B 06            [ 1] 2309 	ld a,(LIMIT,sp)
      002264 1E 07            [ 2] 2310 	ldw x,(LIMIT+1,sp)
      002266 1D 00 01         [ 2] 2311 	subw x,#1 
      002269 A2 00            [ 1] 2312 	sbc a,#0 
      00226B 6B 06            [ 1] 2313 	ld (LIMIT,sp),a 
      00226D 1F 07            [ 2] 2314 	ldw (LIMIT+1,sp),x 
                                   2315 ; leave loop back entry point on cstack 
                                   2316 ; cstack is 1 call deep from interpreter
      00226F                       2317 store_loop_addr:
      00226F CE 00 04         [ 2] 2318 	ldw x,basicptr
      002272 1F 0D            [ 2] 2319 	ldw (BPTR,sp),x 
      002274 CE 00 00         [ 2] 2320 	ldw x,in.w 
      002277 1F 0B            [ 2] 2321 	ldw (INW,sp),x   
      002279 72 15 00 22      [ 1] 2322 	bres flags,#FLOOP 
      00227D 72 5C 00 1F      [ 1] 2323 	inc loop_depth  
      002281 81               [ 4] 2324 	ret 
                                   2325 
                                   2326 ;--------------------------------
                                   2327 ; BASIC: NEXT var 
                                   2328 ; FOR loop control 
                                   2329 ; increment variable with step 
                                   2330 ; and compare with limit 
                                   2331 ; loop if threshold not crossed.
                                   2332 ; else stack. 
                                   2333 ; and decrement 'loop_depth' 
                                   2334 ;--------------------------------
      002282                       2335 next: ; {var limit step retl1 -- [var limit step ] }
      002282 72 5D 00 1F      [ 1] 2336 	tnz loop_depth 
      002286 26 03            [ 1] 2337 	jrne 1$ 
      002288 CC 16 A0         [ 2] 2338 	jp syntax_error 
      00228B                       2339 1$: 
      00228B A6 85            [ 1] 2340 	ld a,#TK_VAR 
      00228D CD 19 4F         [ 4] 2341 	call expect
      002290 CD 17 D6         [ 4] 2342 	call get_addr 
                                   2343 ; check for good variable after NEXT 	 
      002293 13 09            [ 2] 2344 	cpw x,(CVAR,sp)
      002295 27 03            [ 1] 2345 	jreq 2$  
      002297 CC 16 A0         [ 2] 2346 	jp syntax_error ; not the good one 
      00229A                       2347 2$: 
      00229A CF 00 19         [ 2] 2348 	ldw ptr16,x 
                                   2349 	; increment variable 
      00229D F6               [ 1] 2350 	ld a,(x)
      00229E EE 01            [ 2] 2351 	ldw x,(1,x)  ; get var value 
      0022A0 72 FB 04         [ 2] 2352 	addw x,(FSTEP+1,sp) ; var+step 
      0022A3 19 03            [ 1] 2353 	adc a,(FSTEP,sp)
      0022A5 72 C7 00 19      [ 4] 2354 	ld [ptr16],a
      0022A9 72 5C 00 1A      [ 1] 2355 	inc ptr8  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0022AD 72 CF 00 19      [ 5] 2356 	ldw [ptr16],x 
      0022B1 C7 00 0C         [ 1] 2357 	ld acc24,a 
      0022B4 CF 00 0D         [ 2] 2358 	ldw acc16,x 
      0022B7 7B 06            [ 1] 2359 	ld a,(LIMIT,sp)
      0022B9 1E 07            [ 2] 2360 	ldw x,(LIMIT+1,sp)
      0022BB 72 B0 00 0D      [ 2] 2361 	subw x,acc16 
      0022BF C2 00 0C         [ 1] 2362 	sbc a,acc24
      0022C2 18 03            [ 1] 2363 	xor a,(FSTEP,sp)
      0022C4 A8 80            [ 1] 2364 	xor a,#0x80
      0022C6 2B 12            [ 1] 2365 	jrmi loop_back  
      0022C8 20 25            [ 2] 2366 	jra loop_done   
                                   2367 ; check sign of STEP  
      0022CA 7B 03            [ 1] 2368 	ld a,(FSTEP,sp)
      0022CC 2A 07            [ 1] 2369 	jrpl 4$
                                   2370 ;negative step
      0022CE C6 00 0E         [ 1] 2371     ld a,acc8 
      0022D1 2F 07            [ 1] 2372 	jrslt loop_back   
      0022D3 20 1A            [ 2] 2373 	jra loop_done  
      0022D5                       2374 4$: ; positive step
      0022D5 72 0E 00 0E 15   [ 2] 2375 	btjt acc8,#7,loop_done 
      0022DA                       2376 loop_back:
      0022DA 1E 0D            [ 2] 2377 	ldw x,(BPTR,sp)
      0022DC CF 00 04         [ 2] 2378 	ldw basicptr,x 
      0022DF 72 01 00 22 05   [ 2] 2379 	btjf flags,#FRUN,1$ 
      0022E4 E6 02            [ 1] 2380 	ld a,(2,x)
      0022E6 C7 00 03         [ 1] 2381 	ld count,a
      0022E9 1E 0B            [ 2] 2382 1$:	ldw x,(INW,sp)
      0022EB CF 00 00         [ 2] 2383 	ldw in.w,x 
      0022EE 81               [ 4] 2384 	ret 
      0022EF                       2385 loop_done:
                                   2386 	; remove loop data from stack  
      0022EF 85               [ 2] 2387 	popw x
      0022F0                       2388 	_drop VSIZE 
      0022F0 5B 0D            [ 2]    1     addw sp,#VSIZE 
      0022F2 72 5A 00 1F      [ 1] 2389 	dec loop_depth 
      0022F6 FC               [ 2] 2390 	jp (x)
                                   2391 
                                   2392 ;----------------------------
                                   2393 ; called by goto/gosub
                                   2394 ; to get target line number 
                                   2395 ; output:
                                   2396 ;    x    line address 
                                   2397 ;---------------------------
      0022F7                       2398 get_target_line:
      0022F7 CD 17 A1         [ 4] 2399 	call next_token  
      0022FA A1 84            [ 1] 2400 	cp a,#TK_INTGR
      0022FC 27 07            [ 1] 2401 	jreq get_target_line_addr 
      0022FE A1 03            [ 1] 2402 	cp a,#TK_LABEL 
      002300 27 26            [ 1] 2403 	jreq look_target_symbol 
      002302 CC 16 A0         [ 2] 2404 	jp syntax_error
                                   2405 ; the target is a line number 
                                   2406 ; search it. 
      002305                       2407 get_target_line_addr:
      002305 90 89            [ 2] 2408 	pushw y 
      002307 CD 17 E0         [ 4] 2409 	call get_int24 ; line # 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      00230A 4F               [ 1] 2410 	clr a
      00230B 90 CE 00 04      [ 2] 2411 	ldw y,basicptr 
      00230F 90 FE            [ 2] 2412 	ldw y,(y)
      002311 90 89            [ 2] 2413 	pushw y 
      002313 13 01            [ 2] 2414 	cpw x,(1,sp)
      002315                       2415 	_drop 2  
      002315 5B 02            [ 2]    1     addw sp,#2 
      002317 25 01            [ 1] 2416 	jrult 11$
      002319 4C               [ 1] 2417 	inc a 
      00231A                       2418 11$: ; scan program for this line# 	
      00231A CD 0C 89         [ 4] 2419 	call search_lineno  
      00231D 5D               [ 2] 2420 	tnzw x ; 0| line# address 
      00231E 26 05            [ 1] 2421 	jrne 2$ 
      002320 A6 05            [ 1] 2422 	ld a,#ERR_NO_LINE 
      002322 CC 16 A2         [ 2] 2423 	jp tb_error 
      002325 90 85            [ 2] 2424 2$:	popw y  
      002327 81               [ 4] 2425 	ret 
                                   2426 
                                   2427 ; the GOTO|GOSUB target is a symbol.
      002328                       2428 look_target_symbol:
      002328 90 89            [ 2] 2429 	pushw y 
      00232A 89               [ 2] 2430 	pushw x 
      00232B 72 5F 00 0D      [ 1] 2431 	clr acc16 
      00232F 90 CE 00 1B      [ 2] 2432 	ldw y,txtbgn 
      002333 90 E6 03         [ 1] 2433 1$:	ld a,(3,y) ; first TK_ID on line 
      002336 A1 03            [ 1] 2434 	cp a,#TK_LABEL 
      002338 27 15            [ 1] 2435 	jreq 3$ 
      00233A 90 E6 02         [ 1] 2436 2$:	ld a,(2,y); line length 
      00233D C7 00 0E         [ 1] 2437 	ld acc8,a 
      002340 72 B9 00 0D      [ 2] 2438 	addw y,acc16 ;point to next line 
      002344 90 C3 00 1D      [ 2] 2439 	cpw y,txtend 
      002348 25 E9            [ 1] 2440 	jrult 1$
      00234A A6 0A            [ 1] 2441 	ld a,#ERR_BAD_VALUE
      00234C CC 16 A2         [ 2] 2442 	jp tb_error 
      00234F                       2443 3$: ; found a TK_LABEL 
                                   2444 	; compare with GOTO|GOSUB target 
      00234F 90 89            [ 2] 2445 	pushw y ; line address 
      002351 72 A9 00 04      [ 2] 2446 	addw y,#4 ; label string 
      002355 1E 03            [ 2] 2447 	ldw x,(3,sp) ; target string 
      002357 CD 13 EF         [ 4] 2448 	call strcmp
      00235A 26 04            [ 1] 2449 	jrne 4$
      00235C 90 85            [ 2] 2450 	popw y 
      00235E 20 DA            [ 2] 2451 	jra 2$ 
      002360                       2452 4$: ; target found 
      002360 85               [ 2] 2453 	popw x ;  address line target  
      002361                       2454 	_drop 2 ; target string 
      002361 5B 02            [ 2]    1     addw sp,#2 
      002363 90 85            [ 2] 2455 	popw y 
      002365 81               [ 4] 2456 	ret
                                   2457 
                                   2458 
                                   2459 ;--------------------------------
                                   2460 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2461 ; selective goto or gosub 
                                   2462 ;--------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002366                       2463 cmd_on:
      002366 72 00 00 22 05   [ 2] 2464 	btjt flags,#FRUN,0$ 
      00236B A6 06            [ 1] 2465 	ld a,#ERR_RUN_ONLY
      00236D CC 16 A2         [ 2] 2466 	jp tb_error 
      002370 CD 1A 81         [ 4] 2467 0$:	call expression 
      002373 A1 84            [ 1] 2468 	cp a,#TK_INTGR
      002375 27 03            [ 1] 2469 	jreq 1$
      002377 CC 16 A0         [ 2] 2470 	jp syntax_error
      00237A                       2471 1$: _xpop
      00237A 90 F6            [ 1]    1     ld a,(y)
      00237C 93               [ 1]    2     ldw x,y 
      00237D EE 01            [ 2]    3     ldw x,(1,x)
      00237F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2472 ; the selector is the element indice 
                                   2473 ; in the list of arguments. {1..#elements} 
      002383 9F               [ 1] 2474 	ld a,xl ; keep only bits 7..0
      002384 27 62            [ 1] 2475 	jreq 9$ ; element # begin at 1. 
      002386 88               [ 1] 2476 	push a  ; selector  
      002387 CD 17 A1         [ 4] 2477 	call next_token
      00238A A1 80            [ 1] 2478 	cp a,#TK_CMD 
      00238C 27 03            [ 1] 2479 	jreq 2$ 
      00238E CC 16 A0         [ 2] 2480 	jp syntax_error 
      002391 CD 17 BA         [ 4] 2481 2$: call get_code_addr
                                   2482 ;; must be a GOTO or GOSUB 
      002394 A3 23 F2         [ 2] 2483 	cpw x,#goto 
      002397 27 08            [ 1] 2484 	jreq 4$
      002399 A3 24 0C         [ 2] 2485 	cpw x,#gosub 
      00239C 27 03            [ 1] 2486 	jreq 4$ 
      00239E CC 16 A0         [ 2] 2487 	jp syntax_error 
      0023A1                       2488 4$: 
      0023A1 84               [ 1] 2489 	pop a 
      0023A2 89               [ 2] 2490 	pushw x ; save routine address 	
      0023A3 88               [ 1] 2491 	push a  ; selector  
      0023A4                       2492 5$: ; skip elements in list until selector==0 
      0023A4 0A 01            [ 1] 2493 	dec (1,sp)
      0023A6 27 26            [ 1] 2494 	jreq 6$ 
                                   2495 ; can be a line# or a label 
      0023A8 CD 17 A1         [ 4] 2496 	call next_token 
      0023AB A1 84            [ 1] 2497 	cp a,#TK_INTGR 
      0023AD 27 07            [ 1] 2498 	jreq 52$
      0023AF A1 03            [ 1] 2499 	cp a,#TK_LABEL 
      0023B1 27 0D            [ 1] 2500 	jreq 54$
      0023B3 CC 16 A0         [ 2] 2501 	jp syntax_error 
      0023B6                       2502 52$: ; got a line number 
      0023B6 C6 00 01         [ 1] 2503 	ld a,in ; skip over int24 value 
      0023B9 AB 03            [ 1] 2504 	add a,#CELL_SIZE ; integer size  
      0023BB C7 00 01         [ 1] 2505 	ld in,a 
      0023BE 20 03            [ 2] 2506 	jra 56$
      0023C0 CD 17 C7         [ 4] 2507 54$: call skip_string ; skip over label 	
      0023C3                       2508 56$: ; if another element comma present 
      0023C3 CD 17 A1         [ 4] 2509 	call next_token
      0023C6 A1 08            [ 1] 2510 	cp a,#TK_COMMA 
      0023C8 27 DA            [ 1] 2511 	jreq 5$ 
                                   2512 ; arg list exhausted, selector to big 
                                   2513 ; continue execution on next line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0023CA                       2514 	_drop 3 ; drop selector and GOTO|GOSUB address 
      0023CA 5B 03            [ 2]    1     addw sp,#3 
      0023CC 20 1A            [ 2] 2515 	jra 9$
      0023CE                       2516 6$: ;at selected position  
      0023CE                       2517 	_drop 1 ; discard selector
      0023CE 5B 01            [ 2]    1     addw sp,#1 
                                   2518 ; here only the routine address 
                                   2519 ; of GOTO|GOSUB is on stack 
      0023D0 CD 22 F7         [ 4] 2520     call get_target_line
      0023D3 CF 00 19         [ 2] 2521 	ldw ptr16,x 	
      0023D6 55 00 03 00 01   [ 1] 2522 	mov in,count ; move to end of line  
      0023DB 85               [ 2] 2523 	popw x ; cmd address, GOTO||GOSUB 
      0023DC A3 23 F2         [ 2] 2524 	cpw x,#goto 
      0023DF 26 05            [ 1] 2525 	jrne 7$ 
      0023E1 CE 00 19         [ 2] 2526 	ldw x,ptr16 
      0023E4 20 19            [ 2] 2527 	jra jp_to_target
      0023E6                       2528 7$: 
      0023E6 20 35            [ 2] 2529 	jra gosub_2 ; target in ptr16 
      0023E8                       2530 9$: ; expr out of range skip to end of line
                                   2531     ; this will force a fall to next line  
      0023E8 55 00 03 00 01   [ 1] 2532 	mov in,count
      0023ED                       2533 	_drop 2
      0023ED 5B 02            [ 2]    1     addw sp,#2 
      0023EF CC 17 53         [ 2] 2534 	jp next_line  
                                   2535 
                                   2536 
                                   2537 ;------------------------
                                   2538 ; BASIC: GOTO line# 
                                   2539 ; jump to line# 
                                   2540 ; here cstack is 2 call deep from interpreter 
                                   2541 ;------------------------
      0023F2                       2542 goto:
      0023F2 72 00 00 22 05   [ 2] 2543 	btjt flags,#FRUN,goto_1  
      0023F7 A6 06            [ 1] 2544 	ld a,#ERR_RUN_ONLY
      0023F9 CC 16 A2         [ 2] 2545 	jp tb_error 
      0023FC                       2546 goto_1:
      0023FC CD 22 F7         [ 4] 2547 	call get_target_line
      0023FF                       2548 jp_to_target:
      0023FF CF 00 04         [ 2] 2549 	ldw basicptr,x 
      002402 E6 02            [ 1] 2550 	ld a,(2,x)
      002404 C7 00 03         [ 1] 2551 	ld count,a 
      002407 35 03 00 01      [ 1] 2552 	mov in,#3 
      00240B 81               [ 4] 2553 	ret 
                                   2554 
                                   2555 
                                   2556 ;--------------------
                                   2557 ; BASIC: GOSUB line#
                                   2558 ; basic subroutine call
                                   2559 ; actual line# and basicptr 
                                   2560 ; are saved on cstack
                                   2561 ; here cstack is 2 call deep from interpreter 
                                   2562 ;--------------------
                           000001  2563 	TARGET=1   ; target address 
                           000003  2564 	RET_ADDR=3 ; subroutine return address 
                           000005  2565 	RET_BPTR=5 ; basicptr return point 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



                           000007  2566 	RET_INW=7  ; in.w return point 
                           000004  2567 	VSIZE=4  
      00240C                       2568 gosub:
      00240C 72 00 00 22 06   [ 2] 2569 	btjt flags,#FRUN,gosub_1 
      002411 A6 06            [ 1] 2570 	ld a,#ERR_RUN_ONLY
      002413 CC 16 A2         [ 2] 2571 	jp tb_error 
      002416 81               [ 4] 2572 	ret 
      002417                       2573 gosub_1:
      002417 CD 22 F7         [ 4] 2574 	call get_target_line 
      00241A CF 00 19         [ 2] 2575 	ldw ptr16,x 
      00241D                       2576 gosub_2: 
      00241D 85               [ 2] 2577 	popw x 
      00241E                       2578 	_vars VSIZE  
      00241E 52 04            [ 2]    1     sub sp,#VSIZE 
      002420 89               [ 2] 2579 	pushw x ; RET_ADDR 
      002421 CE 00 19         [ 2] 2580 	ldw x,ptr16 
      002424 89               [ 2] 2581 	pushw x ; TARGET
                                   2582 ; save BASIC subroutine return point.   
      002425 CE 00 04         [ 2] 2583 	ldw x,basicptr
      002428 1F 05            [ 2] 2584 	ldw (RET_BPTR,sp),x 
      00242A CE 00 00         [ 2] 2585 	ldw x,in.w 
      00242D 1F 07            [ 2] 2586 	ldw (RET_INW,sp),x
      00242F 85               [ 2] 2587 	popw x 
      002430 20 CD            [ 2] 2588 	jra jp_to_target
                                   2589 
                                   2590 ;------------------------
                                   2591 ; BASIC: RETURN 
                                   2592 ; exit from BASIC subroutine 
                                   2593 ;------------------------
                           000003  2594 	RET_BPTR=3 ; basicptr return point 
                           000005  2595 	RET_INW=5  ; in.w return point 
                           000004  2596 	VSIZE=4  
      002432                       2597 return:
      002432 72 00 00 22 05   [ 2] 2598 	btjt flags,#FRUN,0$ 
      002437 A6 06            [ 1] 2599 	ld a,#ERR_RUN_ONLY
      002439 CC 16 A2         [ 2] 2600 	jp tb_error 
      00243C                       2601 0$:	
      00243C 1E 03            [ 2] 2602 	ldw x,(RET_ADDR,sp) 
      00243E CF 00 04         [ 2] 2603 	ldw basicptr,x
      002441 E6 02            [ 1] 2604 	ld a,(2,x)
      002443 C7 00 03         [ 1] 2605 	ld count,a  
      002446 1E 05            [ 2] 2606 	ldw x,(RET_INW,sp)
      002448 CF 00 00         [ 2] 2607 	ldw in.w,x 
      00244B 85               [ 2] 2608 	popw x 
      00244C                       2609 	_drop VSIZE 
      00244C 5B 04            [ 2]    1     addw sp,#VSIZE 
      00244E 89               [ 2] 2610 	pushw x
      00244F 81               [ 4] 2611 	ret  
                                   2612 
                                   2613 ;----------------------------------
                                   2614 ; BASIC: RUN
                                   2615 ; run BASIC program in RAM
                                   2616 ;----------------------------------- 
      002450                       2617 run: 
      002450 72 01 00 22 02   [ 2] 2618 	btjf flags,#FRUN,0$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002455 4F               [ 1] 2619 	clr a 
      002456 81               [ 4] 2620 	ret
      002457                       2621 0$: 
      002457 72 09 00 22 12   [ 2] 2622 	btjf flags,#FBREAK,1$
      00245C                       2623 	_drop 2 
      00245C 5B 02            [ 2]    1     addw sp,#2 
      00245E CD 1F F5         [ 4] 2624 	call rest_context
      002461                       2625 	_drop CTXT_SIZE 
      002461 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      002463 72 19 00 22      [ 1] 2626 	bres flags,#FBREAK 
      002467 72 10 00 22      [ 1] 2627 	bset flags,#FRUN 
      00246B CC 17 4B         [ 2] 2628 	jp interpreter 
      00246E CE 00 1B         [ 2] 2629 1$:	ldw x,txtbgn
      002471 C3 00 1D         [ 2] 2630 	cpw x,txtend 
      002474 2B 0C            [ 1] 2631 	jrmi run_it 
      002476 AE 16 2F         [ 2] 2632 	ldw x,#err_no_prog
      002479 CD 09 A1         [ 4] 2633 	call puts 
      00247C 55 00 03 00 01   [ 1] 2634 	mov in,count
      002481 81               [ 4] 2635 	ret 
      002482                       2636 run_it:	 
      002482                       2637 	_drop 2 ; drop return address 
      002482 5B 02            [ 2]    1     addw sp,#2 
      002484                       2638 run_it_02: 
      002484 CD 1B E2         [ 4] 2639     call ubound 
      002487 CD 14 54         [ 4] 2640 	call clear_vars 
                                   2641 ; clear data pointer 
      00248A 5F               [ 1] 2642 	clrw x 
      00248B CF 00 06         [ 2] 2643 	ldw data_ptr,x 
      00248E 72 5F 00 08      [ 1] 2644 	clr data_ofs 
      002492 72 5F 00 09      [ 1] 2645 	clr data_len 
                                   2646 ; initialize BASIC pointer 
      002496 CE 00 1B         [ 2] 2647 	ldw x,txtbgn 
      002499 CF 00 04         [ 2] 2648 	ldw basicptr,x 
      00249C E6 02            [ 1] 2649 	ld a,(2,x)
      00249E C7 00 03         [ 1] 2650 	ld count,a
      0024A1 35 03 00 01      [ 1] 2651 	mov in,#3	
      0024A5 72 10 00 22      [ 1] 2652 	bset flags,#FRUN 
      0024A9 CC 17 4B         [ 2] 2653 	jp interpreter 
                                   2654 
                                   2655 
                                   2656 ;----------------------
                                   2657 ; BASIC: END
                                   2658 ; end running program
                                   2659 ;---------------------- 
      0024AC                       2660 cmd_end: 
                                   2661 ; clean stack 
      0024AC AE 17 FF         [ 2] 2662 	ldw x,#STACK_EMPTY
      0024AF 94               [ 1] 2663 	ldw sp,x 
      0024B0 CC 17 2C         [ 2] 2664 	jp warm_start
                                   2665 
                                   2666 ;---------------------------
                                   2667 ; BASIC: GET var 
                                   2668 ; receive a key in variable 
                                   2669 ; don't wait 
                                   2670 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0024B3                       2671 cmd_get:
      0024B3 CD 17 A1         [ 4] 2672 	call next_token 
      0024B6 A1 85            [ 1] 2673 	cp a,#TK_VAR 
      0024B8 27 03            [ 1] 2674 	jreq 0$
      0024BA CC 16 A0         [ 2] 2675 	jp syntax_error 
      0024BD CD 17 D6         [ 4] 2676 0$: call get_addr 
      0024C0 CF 00 19         [ 2] 2677 	ldw ptr16,x 
      0024C3 CD 09 4D         [ 4] 2678 	call qgetc 
      0024C6 27 03            [ 1] 2679 	jreq 2$
      0024C8 CD 09 54         [ 4] 2680 	call getc  
      0024CB 72 3F 00 19      [ 4] 2681 2$: clr [ptr16]
      0024CF 72 5C 00 1A      [ 1] 2682 	inc ptr8 
      0024D3 72 3F 00 19      [ 4] 2683 	clr [ptr16]
      0024D7 72 5C 00 1A      [ 1] 2684 	inc ptr8 
      0024DB 72 C7 00 19      [ 4] 2685 	ld [ptr16],a 
      0024DF 81               [ 4] 2686 	ret 
                                   2687 
                                   2688 
                                   2689 ;-----------------
                                   2690 ; 1 Khz beep 
                                   2691 ;-----------------
      0024E0                       2692 beep_1khz:: 
      0024E0 AE 00 64         [ 2] 2693 	ldw x,#100
      0024E3 90 AE 03 E8      [ 2] 2694 	ldw y,#1000
      0024E7 20 20            [ 2] 2695 	jra beep
                                   2696 
                                   2697 ;-----------------------
                                   2698 ; BASIC: TONE expr1,expr2
                                   2699 ; used TIMER2 channel 1
                                   2700 ; to produce a tone 
                                   2701 ; arguments:
                                   2702 ;    expr1   frequency 
                                   2703 ;    expr2   duration msec.
                                   2704 ;---------------------------
      0024E9                       2705 tone:
      0024E9 CD 19 61         [ 4] 2706 	call arg_list 
      0024EC A1 02            [ 1] 2707 	cp a,#2 
      0024EE 27 03            [ 1] 2708 	jreq 1$
      0024F0 CC 16 A0         [ 2] 2709 	jp syntax_error 
      0024F3                       2710 1$: 
      0024F3                       2711 	_xpop 
      0024F3 90 F6            [ 1]    1     ld a,(y)
      0024F5 93               [ 1]    2     ldw x,y 
      0024F6 EE 01            [ 2]    3     ldw x,(1,x)
      0024F8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0024FC 89               [ 2] 2712 	pushw x ; duration 
      0024FD                       2713 	_xpop ; frequency
      0024FD 90 F6            [ 1]    1     ld a,(y)
      0024FF 93               [ 1]    2     ldw x,y 
      002500 EE 01            [ 2]    3     ldw x,(1,x)
      002502 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002506 90 93            [ 1] 2714 	ldw y,x ; frequency 
      002508 85               [ 2] 2715 	popw x  ; duration 
      002509                       2716 beep:  
      002509 89               [ 2] 2717 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      00250A AE F4 24         [ 2] 2718 	ldw x,#TIM2_CLK_FREQ
      00250D 65               [ 2] 2719 	divw x,y ; cntr=Fclk/freq 
                                   2720 ; round to nearest integer 
      00250E 90 A3 7A 12      [ 2] 2721 	cpw y,#TIM2_CLK_FREQ/2
      002512 2B 01            [ 1] 2722 	jrmi 2$
      002514 5C               [ 1] 2723 	incw x 
      002515                       2724 2$:	 
      002515 9E               [ 1] 2725 	ld a,xh 
      002516 C7 53 0D         [ 1] 2726 	ld TIM2_ARRH,a 
      002519 9F               [ 1] 2727 	ld a,xl 
      00251A C7 53 0E         [ 1] 2728 	ld TIM2_ARRL,a 
                                   2729 ; 50% duty cycle 
      00251D 8C               [ 1] 2730 	ccf 
      00251E 56               [ 2] 2731 	rrcw x 
      00251F 9E               [ 1] 2732 	ld a,xh 
      002520 C7 53 0F         [ 1] 2733 	ld TIM2_CCR1H,a 
      002523 9F               [ 1] 2734 	ld a,xl
      002524 C7 53 10         [ 1] 2735 	ld TIM2_CCR1L,a
      002527 72 10 53 08      [ 1] 2736 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      00252B 72 10 53 00      [ 1] 2737 	bset TIM2_CR1,#TIM2_CR1_CEN
      00252F 72 10 53 04      [ 1] 2738 	bset TIM2_EGR,#TIM2_EGR_UG
      002533 85               [ 2] 2739 	popw x 
      002534 CD 29 84         [ 4] 2740 	call pause02
      002537 72 11 53 08      [ 1] 2741 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      00253B 72 11 53 00      [ 1] 2742 	bres TIM2_CR1,#TIM2_CR1_CEN 
      00253F 81               [ 4] 2743 	ret 
                                   2744 
                                   2745 ;-------------------------------
                                   2746 ; BASIC: ADCON 0|1 [,divisor]  
                                   2747 ; disable/enanble ADC 
                                   2748 ;-------------------------------
                           000003  2749 	ONOFF=3 
                           000001  2750 	DIVSOR=1
                           000004  2751 	VSIZE=4 
      002540                       2752 power_adc:
      002540 CD 19 61         [ 4] 2753 	call arg_list 
      002543 A1 02            [ 1] 2754 	cp a,#2	
      002545 27 12            [ 1] 2755 	jreq 1$
      002547 A1 01            [ 1] 2756 	cp a,#1 
      002549 27 03            [ 1] 2757 	jreq 0$ 
      00254B CC 16 A0         [ 2] 2758 	jp syntax_error 
      00254E 4F               [ 1] 2759 0$:	clr a 
      00254F 5F               [ 1] 2760 	clrw x
      002550                       2761 	_xpush   ; divisor  
      002550 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002554 90 F7            [ 1]    2     ld (y),a 
      002556 90 EF 01         [ 2]    3     ldw (1,y),x 
      002559                       2762 1$: _at_next 
      002559 90 E6 03         [ 1]    1     ld a,(3,y)
      00255C 93               [ 1]    2     ldw x,y 
      00255D EE 04            [ 2]    3     ldw x,(4,x)
      00255F 5D               [ 2] 2763 	tnzw x 
      002560 27 25            [ 1] 2764 	jreq 2$ 
      002562                       2765 	_xpop
      002562 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002564 93               [ 1]    2     ldw x,y 
      002565 EE 01            [ 2]    3     ldw x,(1,x)
      002567 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00256B                       2766 	_xdrop  
      00256B 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      00256F 9F               [ 1] 2767 	ld a,xl
      002570 A4 07            [ 1] 2768 	and a,#7
      002572 4E               [ 1] 2769 	swap a 
      002573 C7 54 01         [ 1] 2770 	ld ADC_CR1,a
      002576 72 16 50 CA      [ 1] 2771 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      00257A 72 10 54 01      [ 1] 2772 	bset ADC_CR1,#ADC_CR1_ADON 
      00257E                       2773 	_usec_dly 7 
      00257E AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      002581 5A               [ 2]    2     decw x
      002582 9D               [ 1]    3     nop 
      002583 26 FA            [ 1]    4     jrne .-4
      002585 20 08            [ 2] 2774 	jra 3$
      002587 72 11 54 01      [ 1] 2775 2$: bres ADC_CR1,#ADC_CR1_ADON
      00258B 72 17 50 CA      [ 1] 2776 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      00258F                       2777 3$:	
      00258F 81               [ 4] 2778 	ret
                                   2779 
                                   2780 ;-----------------------------
                                   2781 ; BASIC: ADCREAD (channel)
                                   2782 ; read adc channel {0..5}
                                   2783 ; output:
                                   2784 ;   A 		TK_INTGR 
                                   2785 ;   X 		value 
                                   2786 ;-----------------------------
      002590                       2787 analog_read:
      002590 CD 19 5C         [ 4] 2788 	call func_args 
      002593 A1 01            [ 1] 2789 	cp a,#1 
      002595 27 03            [ 1] 2790 	jreq 1$
      002597 CC 16 A0         [ 2] 2791 	jp syntax_error
      00259A                       2792 1$: _xpop 
      00259A 90 F6            [ 1]    1     ld a,(y)
      00259C 93               [ 1]    2     ldw x,y 
      00259D EE 01            [ 2]    3     ldw x,(1,x)
      00259F 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025A3 A3 00 05         [ 2] 2793 	cpw x,#5 
      0025A6 23 05            [ 2] 2794 	jrule 2$
      0025A8 A6 0A            [ 1] 2795 	ld a,#ERR_BAD_VALUE
      0025AA CC 16 A2         [ 2] 2796 	jp tb_error 
      0025AD 9F               [ 1] 2797 2$: ld a,xl
      0025AE C7 00 0E         [ 1] 2798 	ld acc8,a 
      0025B1 A6 05            [ 1] 2799 	ld a,#5
      0025B3 C0 00 0E         [ 1] 2800 	sub a,acc8 
      0025B6 C7 54 00         [ 1] 2801 	ld ADC_CSR,a
      0025B9 72 16 54 02      [ 1] 2802 	bset ADC_CR2,#ADC_CR2_ALIGN
      0025BD 72 10 54 01      [ 1] 2803 	bset ADC_CR1,#ADC_CR1_ADON
      0025C1 72 0F 54 00 FB   [ 2] 2804 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0025C6 CE 54 04         [ 2] 2805 	ldw x,ADC_DRH
      0025C9 A6 84            [ 1] 2806 	ld a,#TK_INTGR
      0025CB 81               [ 4] 2807 	ret 
                                   2808 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                   2809 ;-----------------------
                                   2810 ; BASIC: DREAD(pin)
                                   2811 ; Arduino pins 
                                   2812 ; read state of a digital pin 
                                   2813 ; pin# {0..15}
                                   2814 ; output:
                                   2815 ;    A 		TK_INTGR
                                   2816 ;    X      0|1 
                                   2817 ;-------------------------
                           000001  2818 	PINNO=1
                           000001  2819 	VSIZE=1
      0025CC                       2820 digital_read:
      0025CC                       2821 	_vars VSIZE 
      0025CC 52 01            [ 2]    1     sub sp,#VSIZE 
      0025CE CD 19 5C         [ 4] 2822 	call func_args
      0025D1 A1 01            [ 1] 2823 	cp a,#1
      0025D3 27 03            [ 1] 2824 	jreq 1$
      0025D5 CC 16 A0         [ 2] 2825 	jp syntax_error
      0025D8                       2826 1$: _xpop 
      0025D8 90 F6            [ 1]    1     ld a,(y)
      0025DA 93               [ 1]    2     ldw x,y 
      0025DB EE 01            [ 2]    3     ldw x,(1,x)
      0025DD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025E1 A3 00 0F         [ 2] 2827 	cpw x,#15 
      0025E4 23 05            [ 2] 2828 	jrule 2$
      0025E6 A6 0A            [ 1] 2829 	ld a,#ERR_BAD_VALUE
      0025E8 CC 16 A2         [ 2] 2830 	jp tb_error 
      0025EB CD 2B 59         [ 4] 2831 2$:	call select_pin 
      0025EE 6B 01            [ 1] 2832 	ld (PINNO,sp),a
      0025F0 E6 01            [ 1] 2833 	ld a,(GPIO_IDR,x)
      0025F2 0D 01            [ 1] 2834 	tnz (PINNO,sp)
      0025F4 27 05            [ 1] 2835 	jreq 8$
      0025F6 44               [ 1] 2836 3$: srl a 
      0025F7 0A 01            [ 1] 2837 	dec (PINNO,sp)
      0025F9 26 FB            [ 1] 2838 	jrne 3$ 
      0025FB A4 01            [ 1] 2839 8$: and a,#1 
      0025FD 5F               [ 1] 2840 	clrw x 
      0025FE 97               [ 1] 2841 	ld xl,a 
      0025FF 4F               [ 1] 2842 	clr a 
      002600                       2843 	_drop VSIZE
      002600 5B 01            [ 2]    1     addw sp,#VSIZE 
      002602 81               [ 4] 2844 	ret
                                   2845 
                                   2846 
                                   2847 ;-----------------------
                                   2848 ; BASIC: DWRITE pin,0|1
                                   2849 ; Arduino pins 
                                   2850 ; write to a digital pin 
                                   2851 ; pin# {0..15}
                                   2852 ; output:
                                   2853 ;    A 		TK_INTGR
                                   2854 ;    X      0|1 
                                   2855 ;-------------------------
                           000001  2856 	PINNO=1
                           000002  2857 	PINVAL=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



                           000002  2858 	VSIZE=2
      002603                       2859 digital_write:
      002603                       2860 	_vars VSIZE 
      002603 52 02            [ 2]    1     sub sp,#VSIZE 
      002605 CD 19 61         [ 4] 2861 	call arg_list  
      002608 A1 02            [ 1] 2862 	cp a,#2 
      00260A 27 03            [ 1] 2863 	jreq 1$
      00260C CC 16 A0         [ 2] 2864 	jp syntax_error
      00260F                       2865 1$: _xpop 
      00260F 90 F6            [ 1]    1     ld a,(y)
      002611 93               [ 1]    2     ldw x,y 
      002612 EE 01            [ 2]    3     ldw x,(1,x)
      002614 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002618 9F               [ 1] 2866 	ld a,xl 
      002619 6B 02            [ 1] 2867 	ld (PINVAL,sp),a
      00261B                       2868 	_xpop 
      00261B 90 F6            [ 1]    1     ld a,(y)
      00261D 93               [ 1]    2     ldw x,y 
      00261E EE 01            [ 2]    3     ldw x,(1,x)
      002620 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002624 A3 00 0F         [ 2] 2869 	cpw x,#15 
      002627 23 05            [ 2] 2870 	jrule 2$
      002629 A6 0A            [ 1] 2871 	ld a,#ERR_BAD_VALUE
      00262B CC 16 A2         [ 2] 2872 	jp tb_error 
      00262E CD 2B 59         [ 4] 2873 2$:	call select_pin 
      002631 6B 01            [ 1] 2874 	ld (PINNO,sp),a 
      002633 A6 01            [ 1] 2875 	ld a,#1
      002635 0D 01            [ 1] 2876 	tnz (PINNO,sp)
      002637 27 05            [ 1] 2877 	jreq 4$
      002639 48               [ 1] 2878 3$: sll a
      00263A 0A 01            [ 1] 2879 	dec (PINNO,sp)
      00263C 26 FB            [ 1] 2880 	jrne 3$
      00263E 0D 02            [ 1] 2881 4$: tnz (PINVAL,sp)
      002640 26 05            [ 1] 2882 	jrne 5$
      002642 43               [ 1] 2883 	cpl a 
      002643 E4 00            [ 1] 2884 	and a,(GPIO_ODR,x)
      002645 20 02            [ 2] 2885 	jra 8$
      002647 EA 00            [ 1] 2886 5$: or a,(GPIO_ODR,x)
      002649 E7 00            [ 1] 2887 8$: ld (GPIO_ODR,x),a 
      00264B                       2888 	_drop VSIZE 
      00264B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00264D 81               [ 4] 2889 	ret
                                   2890 
                                   2891 
                                   2892 ;-----------------------
                                   2893 ; BASIC: STOP
                                   2894 ; stop progam execution  
                                   2895 ; without resetting pointers 
                                   2896 ; the program is resumed
                                   2897 ; with RUN 
                                   2898 ;-------------------------
      00264E                       2899 stop:
      00264E 72 00 00 22 02   [ 2] 2900 	btjt flags,#FRUN,2$
      002653 4F               [ 1] 2901 	clr a
      002654 81               [ 4] 2902 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002655                       2903 2$:	 
                                   2904 ; create space on cstack to save context 
      002655 AE 26 7C         [ 2] 2905 	ldw x,#break_point 
      002658 CD 09 A1         [ 4] 2906 	call puts 
      00265B                       2907 	_drop 2 ;drop return address 
      00265B 5B 02            [ 2]    1     addw sp,#2 
      00265D                       2908 	_vars CTXT_SIZE ; context size 
      00265D 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00265F CD 1F E5         [ 4] 2909 	call save_context 
      002662 AE 16 68         [ 2] 2910 	ldw x,#tib 
      002665 CF 00 04         [ 2] 2911 	ldw basicptr,x
      002668 7F               [ 1] 2912 	clr (x)
      002669 72 5F 00 03      [ 1] 2913 	clr count  
      00266D 5F               [ 1] 2914 	clrw x 
      00266E CF 00 00         [ 2] 2915 	ldw in.w,x
      002671 72 11 00 22      [ 1] 2916 	bres flags,#FRUN 
      002675 72 18 00 22      [ 1] 2917 	bset flags,#FBREAK
      002679 CC 17 4B         [ 2] 2918 	jp interpreter 
      00267C 0A 62 72 65 61 6B 20  2919 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   2920 
                                   2921 ;-----------------------
                                   2922 ; BASIC: NEW
                                   2923 ; from command line only 
                                   2924 ; free program memory
                                   2925 ; and clear variables 
                                   2926 ;------------------------
      00269A                       2927 new: 
      00269A 72 01 00 22 01   [ 2] 2928 	btjf flags,#FRUN,0$ 
      00269F 81               [ 4] 2929 	ret 
      0026A0                       2930 0$:	
      0026A0 CD 14 FC         [ 4] 2931 	call clear_basic 
      0026A3 81               [ 4] 2932 	ret 
                                   2933 
                                   2934 ;-----------------------------------
                                   2935 ; BASIC: ERASE \E | \F 
                                   2936 ; erase all block in range from 
                                   2937 ;  'app_space' to FLASH end (0x20000)
                                   2938 ;  or all EEPROM 
                                   2939 ; that contains a non zero byte.  
                                   2940 ;-----------------------------------
                           000001  2941 	LIMIT=1 
                           000003  2942 	VSIZE = 3 
      0026A4                       2943 erase:
      0026A4 72 5F 00 18      [ 1] 2944 	clr farptr 
      0026A8                       2945 	_vars VSIZE 
      0026A8 52 03            [ 2]    1     sub sp,#VSIZE 
      0026AA CD 17 A1         [ 4] 2946 	call next_token 
      0026AD A1 04            [ 1] 2947 	cp a,#TK_CHAR 
      0026AF 27 03            [ 1] 2948 	jreq 0$ 
      0026B1 CC 16 A0         [ 2] 2949 	jp syntax_error
      0026B4 CD 17 F0         [ 4] 2950 0$: call get_char 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0026B7 A4 DF            [ 1] 2951 	and a,#0XDF 
      0026B9 A1 45            [ 1] 2952 	cp a,#'E
      0026BB 26 0C            [ 1] 2953 	jrne 1$
      0026BD AE 40 00         [ 2] 2954 	ldw x,#EEPROM_BASE 
      0026C0 CF 00 19         [ 2] 2955 	ldw farptr+1,x 
      0026C3 AE 47 FF         [ 2] 2956 	ldw x,#EEPROM_END
      0026C6 4F               [ 1] 2957 	clr a 
      0026C7 20 15            [ 2] 2958 	jra 3$ 
      0026C9 A1 46            [ 1] 2959 1$: cp a,#'F 
      0026CB 27 06            [ 1] 2960 	jreq 2$
      0026CD AE 15 E0         [ 2] 2961 	ldw x,#err_bad_value
      0026D0 CC 16 A2         [ 2] 2962 	jp tb_error
      0026D3                       2963 2$:
      0026D3 AE 36 00         [ 2] 2964 	ldw x,#app_space  
      0026D6 CF 00 19         [ 2] 2965 	ldw farptr+1,x 
      0026D9 A6 02            [ 1] 2966 	ld a,#(FLASH_END>>16)&0XFF 
      0026DB AE 7F FF         [ 2] 2967 	ldw x,#FLASH_END&0xffff
      0026DE                       2968 3$:
      0026DE 6B 01            [ 1] 2969 	ld (LIMIT,sp),a 
      0026E0 1F 02            [ 2] 2970 	ldw (LIMIT+1,sp),x 
                                   2971  ; operation done from RAM
                                   2972  ; copy code to RAM in tib   
      0026E2 CD 07 42         [ 4] 2973 	call move_erase_to_ram
      0026E5                       2974 4$:	 
      0026E5 CD 08 C4         [ 4] 2975     call scan_block 
      0026E8 27 08            [ 1] 2976 	jreq 5$  ; block already erased 
      0026EA A6 45            [ 1] 2977     ld a,#'E 
      0026EC CD 09 44         [ 4] 2978     call putc 
      0026EF CD 07 C0         [ 4] 2979 	call block_erase   
                                   2980 ; this block is clean, next  
      0026F2 AE 00 80         [ 2] 2981 5$:	ldw x,#BLOCK_SIZE
      0026F5 CD 08 B6         [ 4] 2982 	call incr_farptr
                                   2983 ; check limit, 24 bit substraction  	
      0026F8 7B 01            [ 1] 2984 	ld a,(LIMIT,sp)
      0026FA 1E 02            [ 2] 2985 	ldw x,(LIMIT+1,sp)
      0026FC 72 B0 00 19      [ 2] 2986 	subw x,farptr+1
      002700 C2 00 18         [ 1] 2987 	sbc a,farptr 
      002703 22 E0            [ 1] 2988 	jrugt 4$ 
      002705 CD 14 FC         [ 4] 2989 9$: call clear_basic
      002708 1E 02            [ 2] 2990 	ldw x,(LIMIT+1,sp)
      00270A A3 47 FF         [ 2] 2991 	cpw x,#EEPROM_END
      00270D 26 03            [ 1] 2992 	jrne 10$
      00270F CD 1C AB         [ 4] 2993 	call func_eefree 
      002712                       2994 10$:
      002712                       2995 	_drop VSIZE 
      002712 5B 03            [ 2]    1     addw sp,#VSIZE 
      002714 81               [ 4] 2996 	ret 
                                   2997 	
                                   2998 
                                   2999 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3000 ;  check for application signature 
                                   3001 ; output:
                                   3002 ;   Carry    0 app present 
                                   3003 ;            1 no app installed  
                                   3004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      002715                       3005 qsign: 
      002715 CE 36 00         [ 2] 3006 	ldw x,app_sign 
      002718 C3 27 D5         [ 2] 3007 	cpw x,SIGNATURE ; "BC" 
      00271B 81               [ 4] 3008 	ret 
                                   3009 
                                   3010 ;--------------------------------------
                                   3011 ;  fill write buffer 
                                   3012 ;  input:
                                   3013 ;    y  point to output buffer 
                                   3014 ;    x  point to source 
                                   3015 ;    a  bytes to write in buffer 
                                   3016 ;  output:
                                   3017 ;    y   += A 
                                   3018 ;    X   += A 
                                   3019 ;    A   0 
                                   3020 ;---------------------------------------
      00271C                       3021 fill_write_buffer:
      00271C 88               [ 1] 3022 	push a 
      00271D 4D               [ 1] 3023 	tnz a 
      00271E 27 0A            [ 1] 3024 	jreq 9$ 
      002720 F6               [ 1] 3025 1$: ld a,(x)
      002721 5C               [ 1] 3026 	incw x 
      002722 90 F7            [ 1] 3027 	ld (y),a 
      002724 90 5C            [ 1] 3028 	incw y 
      002726 0A 01            [ 1] 3029 	dec (1,sp) 
      002728 26 F6            [ 1] 3030 	jrne 1$ 
      00272A 84               [ 1] 3031 9$:	pop a 
      00272B 81               [ 4] 3032     ret 	
                                   3033 
                                   3034 ;--------------------------------------
                                   3035 ;  fill pad buffer with zero 
                                   3036 ;  input:
                                   3037 ;	none 
                                   3038 ;  output:
                                   3039 ;    y     buffer address  
                                   3040 ;--------------------------------------
      00272C                       3041 clear_block_buffer:
      00272C 88               [ 1] 3042 	push a 
      00272D 90 AE 16 B8      [ 2] 3043 	ldw y,#block_buffer 
      002731 90 89            [ 2] 3044 	pushw y
      002733 A6 80            [ 1] 3045 	ld a,#BLOCK_SIZE   
      002735 90 7F            [ 1] 3046 1$:	clr (y)
      002737 90 5C            [ 1] 3047 	incw y
      002739 4A               [ 1] 3048 	dec a  
      00273A 26 F9            [ 1] 3049 	jrne 1$ 	
      00273C 90 85            [ 2] 3050 9$: popw y 
      00273E 84               [ 1] 3051 	pop a 			
      00273F 81               [ 4] 3052 	ret 
                                   3053 
                                   3054 
                                   3055 ;---------------------------------------
                                   3056 ; BASIC: SAVE
                                   3057 ; write application from RAM to FLASH
                                   3058 ;--------------------------------------
                           000001  3059 	XTEMP=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                           000003  3060 	COUNT=3  ; last count bytes written 
                           000004  3061 	CNT_LO=4 ; count low byte 
                           000005  3062 	TOWRITE=5 ; how bytes left to write  
                           000006  3063 	VSIZE=6 
      002740                       3064 save_app:
      002740 89               [ 2] 3065 	pushw x 
      002741 90 89            [ 2] 3066 	pushw y 
      002743                       3067 	_vars VSIZE
      002743 52 06            [ 2]    1     sub sp,#VSIZE 
      002745 CD 27 15         [ 4] 3068 	call qsign 
      002748 26 09            [ 1] 3069 	jrne 1$
      00274A AE 27 D7         [ 2] 3070 	ldw x,#CANT_DO 
      00274D CD 09 A1         [ 4] 3071 	call puts 
      002750 CC 27 CF         [ 2] 3072 	jp 9$
      002753                       3073 1$: 
      002753 CE 00 1B         [ 2] 3074 	ldw x,txtbgn
      002756 C3 00 1D         [ 2] 3075 	cpw x,txtend 
      002759 25 09            [ 1] 3076 	jrult 2$ 
      00275B AE 28 19         [ 2] 3077 	ldw x,#NO_APP
      00275E CD 09 A1         [ 4] 3078 	call puts 
      002761 CC 27 CF         [ 2] 3079 	jp 9$
      002764                       3080 2$: 
                                   3081 ; block programming flash
                                   3082 ; must be done from RAM
                                   3083 ; moved in tib  
      002764 CD 07 82         [ 4] 3084 	call move_prg_to_ram
                                   3085 ; initialize farptr 
                                   3086 ; to app_sign address 
      002767 72 5F 00 18      [ 1] 3087 	clr farptr 
      00276B AE 36 00         [ 2] 3088 	ldw x,#app_sign 
      00276E CF 00 19         [ 2] 3089 	ldw farptr+1,x
                                   3090 ; initialize local variables 
      002771 CD 1D C7         [ 4] 3091 	call prog_size
      002774 1F 05            [ 2] 3092 	ldw (TOWRITE,sp),x
      002776 0F 03            [ 1] 3093 	clr (COUNT,sp)
                                   3094 ; first bock 
                                   3095 ; containt signature 2 bytes 
                                   3096 ; and size 	2 bytes 
                                   3097 ; use Y as pointer to block_buffer
      002778 CD 27 2C         [ 4] 3098 	call clear_block_buffer ; -- y=*block_buffer	
                                   3099 ; write signature
      00277B CE 27 D5         [ 2] 3100 	ldw x,SIGNATURE ; "BC" 
      00277E 90 FF            [ 2] 3101 	ldw (y),x 
      002780 72 A9 00 02      [ 2] 3102 	addw y,#2
      002784 1E 05            [ 2] 3103 	ldw x,(TOWRITE,sp)
      002786 90 FF            [ 2] 3104 	ldw (y),x
      002788 72 A9 00 02      [ 2] 3105 	addw y,#2   
      00278C A6 7C            [ 1] 3106 	ld a,#(BLOCK_SIZE-4)
      00278E 6B 04            [ 1] 3107 	ld (CNT_LO,sp),a 
      002790 A3 00 7C         [ 2] 3108 	cpw x,#(BLOCK_SIZE-4) 
      002793 22 01            [ 1] 3109 	jrugt 3$
      002795 9F               [ 1] 3110 	ld a,xl 
      002796 6B 04            [ 1] 3111 3$:	ld (CNT_LO,sp),a   
      002798 CE 00 1B         [ 2] 3112 	ldw x,txtbgn 
      00279B 1F 01            [ 2] 3113 	ldw (XTEMP,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      00279D                       3114 32$: 
      00279D 1E 01            [ 2] 3115 	ldw x,(XTEMP,sp)
      00279F 7B 04            [ 1] 3116 	ld a,(CNT_LO,sp)
      0027A1 CD 27 1C         [ 4] 3117 	call fill_write_buffer 
      0027A4 1F 01            [ 2] 3118 	ldw (XTEMP,sp),x 
      0027A6 AE 16 B8         [ 2] 3119 	ldw x,#block_buffer
      0027A9 CD 07 9C         [ 4] 3120 	call write_buffer
      0027AC AE 00 80         [ 2] 3121 	ldw x,#BLOCK_SIZE 
      0027AF CD 08 B6         [ 4] 3122 	call incr_farptr  
                                   3123 ; following blocks 
      0027B2 1E 01            [ 2] 3124 	ldw x,(XTEMP,sp)
      0027B4 C3 00 1D         [ 2] 3125 	cpw x,txtend 
      0027B7 24 16            [ 1] 3126 	jruge 9$ 
      0027B9 1E 05            [ 2] 3127 	ldw x,(TOWRITE,sp)
      0027BB 72 F0 03         [ 2] 3128 	subw x,(COUNT,sp)
      0027BE 1F 05            [ 2] 3129 	ldw (TOWRITE,sp),x 
      0027C0 A6 80            [ 1] 3130 	ld a,#BLOCK_SIZE 
      0027C2 A3 00 80         [ 2] 3131 	cpw x,#BLOCK_SIZE 
      0027C5 24 01            [ 1] 3132 	jruge 4$ 
      0027C7 9F               [ 1] 3133 	ld a,xl 
      0027C8 6B 04            [ 1] 3134 4$:	ld (CNT_LO,sp),a 
      0027CA CD 27 2C         [ 4] 3135 	call clear_block_buffer 
      0027CD 20 CE            [ 2] 3136 	jra 32$ 
      0027CF                       3137 9$:	_drop VSIZE 
      0027CF 5B 06            [ 2]    1     addw sp,#VSIZE 
      0027D1 90 85            [ 2] 3138     popw y 
      0027D3 85               [ 2] 3139 	popw x 
      0027D4 81               [ 4] 3140 	ret 
                                   3141 
                                   3142 
      0027D5 42 43                 3143 SIGNATURE: .ascii "BC"
      0027D7 43 61 6E 27 74 20 66  3144 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE \F before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             5C 46 20 62 65 66 6F
             72 65 00
      002819 4E 6F 20 61 70 70 6C  3145 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
                                   3146 
                                   3147 ;---------------------
                                   3148 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3149 ; write 1 or more byte to FLASH or EEPROM
                                   3150 ; starting at address  
                                   3151 ; input:
                                   3152 ;   expr1  	is address 
                                   3153 ;   expr2,...,exprn   are bytes to write
                                   3154 ; output:
                                   3155 ;   none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



                                   3156 ;---------------------
      00282F                       3157 write:
      00282F CD 1A 81         [ 4] 3158 	call expression
      002832 A1 84            [ 1] 3159 	cp a,#TK_INTGR 
      002834 27 03            [ 1] 3160 	jreq 0$
      002836 CC 16 A0         [ 2] 3161 	jp syntax_error
      002839                       3162 0$: _xpop 
      002839 90 F6            [ 1]    1     ld a,(y)
      00283B 93               [ 1]    2     ldw x,y 
      00283C EE 01            [ 2]    3     ldw x,(1,x)
      00283E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002842 C7 00 18         [ 1] 3163 	ld farptr,a 
      002845 CF 00 19         [ 2] 3164 	ldw ptr16,x 
      002848                       3165 1$:	
      002848 CD 17 A1         [ 4] 3166 	call next_token 
      00284B A1 08            [ 1] 3167 	cp a,#TK_COMMA 
      00284D 27 02            [ 1] 3168 	jreq 2$ 
      00284F 20 20            [ 2] 3169 	jra 9$ ; no more data 
      002851 CD 1A 81         [ 4] 3170 2$:	call expression
      002854 A1 84            [ 1] 3171 	cp a,#TK_INTGR
      002856 27 03            [ 1] 3172 	jreq 3$
      002858 CC 16 A0         [ 2] 3173 	jp syntax_error
      00285B                       3174 3$:	_xpop 
      00285B 90 F6            [ 1]    1     ld a,(y)
      00285D 93               [ 1]    2     ldw x,y 
      00285E EE 01            [ 2]    3     ldw x,(1,x)
      002860 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002864 9F               [ 1] 3175 	ld a,xl 
      002865 5F               [ 1] 3176 	clrw x 
      002866 CD 07 E6         [ 4] 3177 	call write_byte
      002869 AE 00 01         [ 2] 3178 	ldw x,#1 
      00286C CD 08 B6         [ 4] 3179 	call incr_farptr 
      00286F 20 D7            [ 2] 3180 	jra 1$ 
      002871                       3181 9$:
      002871 81               [ 4] 3182 	ret 
                                   3183 
                                   3184 
                                   3185 ;---------------------
                                   3186 ;BASIC: CHAR(expr)
                                   3187 ; évaluate expression 
                                   3188 ; and take the 7 least 
                                   3189 ; bits as ASCII character
                                   3190 ; output: 
                                   3191 ; 	A char 
                                   3192 ;---------------------
      002872                       3193 char:
      002872 CD 19 5C         [ 4] 3194 	call func_args 
      002875 A1 01            [ 1] 3195 	cp a,#1
      002877 27 03            [ 1] 3196 	jreq 1$
      002879 CC 16 A0         [ 2] 3197 	jp syntax_error
      00287C                       3198 1$:	_xpop
      00287C 90 F6            [ 1]    1     ld a,(y)
      00287E 93               [ 1]    2     ldw x,y 
      00287F EE 01            [ 2]    3     ldw x,(1,x)
      002881 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002885 9F               [ 1] 3199 	ld a,xl
      002886 A4 7F            [ 1] 3200 	and a,#0x7f 
      002888 81               [ 4] 3201 	ret
                                   3202 
                                   3203 ;---------------------
                                   3204 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3205 ; extract first character 
                                   3206 ; of string argument 
                                   3207 ; output:
                                   3208 ;    A:X    int24 
                                   3209 ;---------------------
      002889                       3210 ascii:
      002889 A6 06            [ 1] 3211 	ld a,#TK_LPAREN
      00288B CD 19 4F         [ 4] 3212 	call expect 
      00288E CD 17 A1         [ 4] 3213 	call next_token 
      002891 A1 02            [ 1] 3214 	cp a,#TK_QSTR 
      002893 27 0E            [ 1] 3215 	jreq 1$
      002895 A1 04            [ 1] 3216 	cp a,#TK_CHAR 
      002897 27 12            [ 1] 3217 	jreq 2$ 
      002899 A1 82            [ 1] 3218 	cp a,#TK_CFUNC 
      00289B 27 03            [ 1] 3219 	jreq 0$
      00289D CC 16 A0         [ 2] 3220 	jp syntax_error
      0028A0                       3221 0$: ; cfunc 
      0028A0 FD               [ 4] 3222 	call (x)
      0028A1 20 0B            [ 2] 3223 	jra 3$
      0028A3                       3224 1$: ; quoted string 
      0028A3 F6               [ 1] 3225 	ld a,(x)
      0028A4 88               [ 1] 3226 	push a  
      0028A5 CD 17 C7         [ 4] 3227 	call skip_string
      0028A8 84               [ 1] 3228 	pop a  	
      0028A9 20 03            [ 2] 3229 	jra 3$ 
      0028AB                       3230 2$: ; character 
      0028AB CD 17 F0         [ 4] 3231 	call get_char 
      0028AE 5F               [ 1] 3232 3$:	clrw x 
      0028AF 02               [ 1] 3233 	rlwa x   
      0028B0                       3234 4$:	_xpush  
      0028B0 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0028B4 90 F7            [ 1]    2     ld (y),a 
      0028B6 90 EF 01         [ 2]    3     ldw (1,y),x 
      0028B9 A6 07            [ 1] 3235 	ld a,#TK_RPAREN 
      0028BB CD 19 4F         [ 4] 3236 	call expect
      0028BE                       3237 9$:	
      0028BE                       3238 	_xpop  
      0028BE 90 F6            [ 1]    1     ld a,(y)
      0028C0 93               [ 1]    2     ldw x,y 
      0028C1 EE 01            [ 2]    3     ldw x,(1,x)
      0028C3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028C7 81               [ 4] 3239 	ret 
                                   3240 
                                   3241 ;---------------------
                                   3242 ;BASIC: KEY
                                   3243 ; wait for a character 
                                   3244 ; received from STDIN 
                                   3245 ; input:
                                   3246 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3247 ; output:
                                   3248 ;	a	 character 
                                   3249 ;---------------------
      0028C8                       3250 key:
      0028C8 CD 09 54         [ 4] 3251 	call getc 
      0028CB 81               [ 4] 3252 	ret
                                   3253 
                                   3254 ;----------------------
                                   3255 ; BASIC: QKEY
                                   3256 ; Return true if there 
                                   3257 ; is a character in 
                                   3258 ; waiting in STDIN 
                                   3259 ; input:
                                   3260 ;  none 
                                   3261 ; output:
                                   3262 ;   A     0|-1
                                   3263 ;-----------------------
      0028CC                       3264 qkey:: 
      0028CC 5F               [ 1] 3265 	clrw x 
      0028CD C6 00 2E         [ 1] 3266 	ld a,rx1_head
      0028D0 C0 00 2F         [ 1] 3267 	sub a,rx1_tail 
      0028D3 27 03            [ 1] 3268 	jreq 9$ 
      0028D5 53               [ 2] 3269 	cplw x
      0028D6 A6 FF            [ 1] 3270 	ld a,#255    
      0028D8                       3271 9$: 
      0028D8 81               [ 4] 3272 	ret 
                                   3273 
                                   3274 ;---------------------
                                   3275 ; BASIC: GPIO(port,reg)
                                   3276 ; return gpio register address 
                                   3277 ; expr {PORTA..PORTI}
                                   3278 ; input:
                                   3279 ;   none 
                                   3280 ; output:
                                   3281 ;   A:X 	gpio register address
                                   3282 ;----------------------------
                                   3283 ;	N=PORT
                                   3284 ;	T=REG 
      0028D9                       3285 gpio:
      0028D9 CD 19 5C         [ 4] 3286 	call func_args 
      0028DC A1 02            [ 1] 3287 	cp a,#2
      0028DE 27 03            [ 1] 3288 	jreq 1$
      0028E0 CC 16 A0         [ 2] 3289 	jp syntax_error  
      0028E3                       3290 1$:	_at_next 
      0028E3 90 E6 03         [ 1]    1     ld a,(3,y)
      0028E6 93               [ 1]    2     ldw x,y 
      0028E7 EE 04            [ 2]    3     ldw x,(4,x)
      0028E9 A3 50 00         [ 2] 3291 	cpw x,#PA_BASE 
      0028EC 2B 16            [ 1] 3292 	jrmi bad_port
      0028EE A3 50 29         [ 2] 3293 	cpw x,#PI_BASE+1 
      0028F1 2A 11            [ 1] 3294 	jrpl bad_port
      0028F3 89               [ 2] 3295 	pushw x 
      0028F4                       3296 	_xpop
      0028F4 90 F6            [ 1]    1     ld a,(y)
      0028F6 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0028F7 EE 01            [ 2]    3     ldw x,(1,x)
      0028F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0028FD 72 FB 01         [ 2] 3297 	addw x,(1,sp)
      002900                       3298 	_drop 2 
      002900 5B 02            [ 2]    1     addw sp,#2 
      002902 4F               [ 1] 3299 	clr a 
      002903 81               [ 4] 3300 	ret
      002904                       3301 bad_port:
      002904 A6 0A            [ 1] 3302 	ld a,#ERR_BAD_VALUE
      002906 CC 16 A2         [ 2] 3303 	jp tb_error
                                   3304 
                                   3305 
                                   3306 ;-------------------------
                                   3307 ; BASIC: UFLASH 
                                   3308 ; return free flash address
                                   3309 ; input:
                                   3310 ;  none 
                                   3311 ; output:
                                   3312 ;	A		TK_INTGR
                                   3313 ;   xstack	free address 
                                   3314 ;---------------------------
      002909                       3315 uflash:
      002909 CE 36 00         [ 2] 3316 	ldw x,app_sign
      00290C A3 10 93         [ 2] 3317 	cpw x,#4243 ; signature "BC" 
      00290F 27 08            [ 1] 3318 	jreq 1$
      002911 CE 36 02         [ 2] 3319 	ldw x,app_size 
      002914 1C 36 04         [ 2] 3320 	addw x,#app
      002917 20 03            [ 2] 3321 	jra 2$
      002919 AE 36 00         [ 2] 3322 1$:	ldw x,#app_space 
      00291C 4F               [ 1] 3323 2$:	clr a 
      00291D 81               [ 4] 3324 	ret 
                                   3325 
                                   3326 
                                   3327 ;---------------------
                                   3328 ; BASIC: USR(addr[,arg])
                                   3329 ; execute a function written 
                                   3330 ; in binary code.
                                   3331 ; binary fonction should 
                                   3332 ; return token attribute in A 
                                   3333 ; and value in YL:X. 
                                   3334 ; input:
                                   3335 ;   addr	routine address 
                                   3336 ;   arg 	is an optional argument 
                                   3337 ; output:
                                   3338 ;   A 		token attribute 
                                   3339 ;   xstack  returned value 
                                   3340 ;---------------------
      00291E                       3341 usr:
      00291E 89               [ 2] 3342 	pushw x 
      00291F 90 89            [ 2] 3343 	pushw y 	
      002921 CD 19 5C         [ 4] 3344 	call func_args 
      002924 A1 01            [ 1] 3345 	cp a,#1 
      002926 27 07            [ 1] 3346 	jreq 1$
      002928 A1 02            [ 1] 3347 	cp a,#2
      00292A 27 03            [ 1] 3348 	jreq 1$  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



      00292C CC 16 A0         [ 2] 3349 	jp syntax_error 
      00292F 88               [ 1] 3350 1$: push a 
      002930                       3351 	_xpop 
      002930 90 F6            [ 1]    1     ld a,(y)
      002932 93               [ 1]    2     ldw x,y 
      002933 EE 01            [ 2]    3     ldw x,(1,x)
      002935 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002939 90 93            [ 1] 3352 	ldw y,x  ; arg|addr 
      00293B 84               [ 1] 3353     pop a 
      00293C A1 01            [ 1] 3354 	cp a,#1 
      00293E 27 0A            [ 1] 3355 	jreq 3$
      002940                       3356 	_xpop  ; x=code addr  
      002940 90 F6            [ 1]    1     ld a,(y)
      002942 93               [ 1]    2     ldw x,y 
      002943 EE 01            [ 2]    3     ldw x,(1,x)
      002945 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002949 51               [ 1] 3357 	exgw x,y ; y=code addr, x=arg 
      00294A 90 FD            [ 4] 3358 3$: call (y)
      00294C 88               [ 1] 3359 	push a 
      00294D 90 9F            [ 1] 3360 	ld a,yl  
      00294F                       3361 	_xpush 
      00294F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002953 90 F7            [ 1]    2     ld (y),a 
      002955 90 EF 01         [ 2]    3     ldw (1,y),x 
      002958 84               [ 1] 3362 	pop a 
      002959 90 85            [ 2] 3363 	popw y 
      00295B 85               [ 2] 3364 	popw x 
      00295C 81               [ 4] 3365 	ret 
                                   3366 
                                   3367 
                                   3368 ;------------------------------
                                   3369 ; BASIC: BYE 
                                   3370 ; halt mcu in its lowest power mode 
                                   3371 ; wait for reset or external interrupt
                                   3372 ; do a cold start on wakeup.
                                   3373 ;------------------------------
      00295D                       3374 bye:
      00295D 72 0D 52 30 FB   [ 2] 3375 	btjf UART1_SR,#UART_SR_TC,.
      002962 8E               [10] 3376 	halt
      002963 CC 00 C3         [ 2] 3377 	jp cold_start  
                                   3378 
                                   3379 ;----------------------------------
                                   3380 ; BASIC: SLEEP 
                                   3381 ; halt mcu until reset or external
                                   3382 ; interrupt.
                                   3383 ; Resume progam after SLEEP command
                                   3384 ;----------------------------------
      002966                       3385 sleep:
      002966 72 0D 52 30 FB   [ 2] 3386 	btjf UART1_SR,#UART_SR_TC,.
      00296B 72 16 00 22      [ 1] 3387 	bset flags,#FSLEEP
      00296F 8E               [10] 3388 	halt 
      002970 81               [ 4] 3389 	ret 
                                   3390 
                                   3391 ;-------------------------------
                                   3392 ; BASIC: PAUSE expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



                                   3393 ; suspend execution for n msec.
                                   3394 ; input:
                                   3395 ;	none
                                   3396 ; output:
                                   3397 ;	none 
                                   3398 ;------------------------------
      002971                       3399 pause:
      002971 CD 1A 81         [ 4] 3400 	call expression
      002974 A1 84            [ 1] 3401 	cp a,#TK_INTGR
      002976 27 03            [ 1] 3402 	jreq 1$ 
      002978 CC 16 A0         [ 2] 3403 	jp syntax_error
      00297B                       3404 1$: _xpop 
      00297B 90 F6            [ 1]    1     ld a,(y)
      00297D 93               [ 1]    2     ldw x,y 
      00297E EE 01            [ 2]    3     ldw x,(1,x)
      002980 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002984                       3405 pause02:
      002984 CF 00 12         [ 2] 3406 	ldw timer,x 
      002987 CE 00 12         [ 2] 3407 1$: ldw x,timer 
      00298A 5D               [ 2] 3408 	tnzw x 
      00298B 27 03            [ 1] 3409 	jreq 2$
      00298D 8F               [10] 3410 	wfi 
      00298E 26 F7            [ 1] 3411 	jrne 1$
      002990 4F               [ 1] 3412 2$:	clr a 
      002991 81               [ 4] 3413 	ret 
                                   3414 
                                   3415 ;------------------------------
                                   3416 ; BASIC: AWU expr
                                   3417 ; halt mcu for 'expr' milliseconds
                                   3418 ; use Auto wakeup peripheral
                                   3419 ; all oscillators stopped except LSI
                                   3420 ; range: 1ms - 511ms
                                   3421 ; input:
                                   3422 ;  none
                                   3423 ; output:
                                   3424 ;  none:
                                   3425 ;------------------------------
      002992                       3426 awu:
      002992 CD 1A 81         [ 4] 3427   call expression
      002995 A1 84            [ 1] 3428   cp a,#TK_INTGR
      002997 27 03            [ 1] 3429   jreq 1$
      002999 CC 16 A0         [ 2] 3430   jp syntax_error
      00299C                       3431 1$: _xpop 
      00299C 90 F6            [ 1]    1     ld a,(y)
      00299E 93               [ 1]    2     ldw x,y 
      00299F EE 01            [ 2]    3     ldw x,(1,x)
      0029A1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029A5                       3432 awu02:
      0029A5 A3 14 00         [ 2] 3433   cpw x,#5120
      0029A8 2B 0C            [ 1] 3434   jrmi 1$ 
      0029AA 35 0F 50 F2      [ 1] 3435   mov AWU_TBR,#15 
      0029AE A6 1E            [ 1] 3436   ld a,#30
      0029B0 62               [ 2] 3437   div x,a
      0029B1 A6 10            [ 1] 3438   ld a,#16
      0029B3 62               [ 2] 3439   div x,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      0029B4 20 1E            [ 2] 3440   jra 4$
      0029B6                       3441 1$: 
      0029B6 A3 08 00         [ 2] 3442   cpw x,#2048
      0029B9 2B 09            [ 1] 3443   jrmi 2$ 
      0029BB 35 0E 50 F2      [ 1] 3444   mov AWU_TBR,#14
      0029BF A6 50            [ 1] 3445   ld a,#80
      0029C1 62               [ 2] 3446   div x,a 
      0029C2 20 10            [ 2] 3447   jra 4$   
      0029C4                       3448 2$:
      0029C4 35 07 50 F2      [ 1] 3449   mov AWU_TBR,#7
      0029C8                       3450 3$:  
                                   3451 ; while X > 64  divide by 2 and increment AWU_TBR 
      0029C8 A3 00 40         [ 2] 3452   cpw x,#64 
      0029CB 23 07            [ 2] 3453   jrule 4$ 
      0029CD 72 5C 50 F2      [ 1] 3454   inc AWU_TBR 
      0029D1 54               [ 2] 3455   srlw x 
      0029D2 20 F4            [ 2] 3456   jra 3$ 
      0029D4                       3457 4$:
      0029D4 9F               [ 1] 3458   ld a, xl
      0029D5 4A               [ 1] 3459   dec a 
      0029D6 27 01            [ 1] 3460   jreq 5$
      0029D8 4A               [ 1] 3461   dec a 	
      0029D9                       3462 5$: 
      0029D9 A4 3E            [ 1] 3463   and a,#0x3e 
      0029DB C7 50 F1         [ 1] 3464   ld AWU_APR,a 
      0029DE 72 18 50 F0      [ 1] 3465   bset AWU_CSR,#AWU_CSR_AWUEN
      0029E2 8E               [10] 3466   halt 
                                   3467 
      0029E3 81               [ 4] 3468   ret 
                                   3469 
                                   3470 ;------------------------------
                                   3471 ; BASIC: TICKS
                                   3472 ; return msec ticks counter value 
                                   3473 ; input:
                                   3474 ; 	none 
                                   3475 ; output:
                                   3476 ;	X 		TK_INTGR
                                   3477 ;-------------------------------
      0029E4                       3478 get_ticks:
      0029E4 C6 00 0F         [ 1] 3479 	ld a,ticks 
      0029E7 CE 00 10         [ 2] 3480 	ldw x,ticks+1 
      0029EA 81               [ 4] 3481 	ret 
                                   3482 
                                   3483 ;------------------------------
                                   3484 ; BASIC: ABS(expr)
                                   3485 ; return absolute value of expr.
                                   3486 ; input:
                                   3487 ;   none
                                   3488 ; output:
                                   3489 ;   xstack    positive int24 
                                   3490 ;-------------------------------
      0029EB                       3491 abs:
      0029EB CD 19 5C         [ 4] 3492 	call func_args 
      0029EE A1 01            [ 1] 3493 	cp a,#1 
      0029F0 27 03            [ 1] 3494 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      0029F2 CC 16 A0         [ 2] 3495 	jp syntax_error
      0029F5                       3496 0$:  
      0029F5 CD 01 DF         [ 4] 3497 	call abs24 
      0029F8                       3498 	_xpop 
      0029F8 90 F6            [ 1]    1     ld a,(y)
      0029FA 93               [ 1]    2     ldw x,y 
      0029FB EE 01            [ 2]    3     ldw x,(1,x)
      0029FD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A01 81               [ 4] 3499 	ret 
                                   3500 
                                   3501 ;------------------------------
                                   3502 ; BASIC: AND(expr1,expr2)
                                   3503 ; Apply bit AND relation between
                                   3504 ; the 2 arguments, i.e expr1 & expr2 
                                   3505 ; output:
                                   3506 ; 	A 		TK_INTGR
                                   3507 ;   X 		result 
                                   3508 ;------------------------------
      002A02                       3509 bit_and: ; i1 i2 -- i1 & i2 
      002A02 CD 19 5C         [ 4] 3510 	call func_args 
      002A05 A1 02            [ 1] 3511 	cp a,#2
      002A07 27 03            [ 1] 3512 	jreq 1$
      002A09 CC 16 A0         [ 2] 3513 	jp syntax_error 
      002A0C                       3514 1$:	_xpop 
      002A0C 90 F6            [ 1]    1     ld a,(y)
      002A0E 93               [ 1]    2     ldw x,y 
      002A0F EE 01            [ 2]    3     ldw x,(1,x)
      002A11 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A15 89               [ 2] 3515     pushw x 
      002A16 88               [ 1] 3516 	push  a 
      002A17                       3517 	_at_top 
      002A17 90 F6            [ 1]    1     ld a,(y)
      002A19 93               [ 1]    2     ldw x,y 
      002A1A EE 01            [ 2]    3     ldw x,(1,x)
      002A1C 14 01            [ 1] 3518 	and a,(1,sp)
      002A1E 02               [ 1] 3519 	rlwa x 
      002A1F 14 02            [ 1] 3520 	and a,(2,sp)
      002A21 02               [ 1] 3521 	rlwa x 
      002A22 14 03            [ 1] 3522 	and a,(3,sp)
      002A24 02               [ 1] 3523 	rlwa x 
      002A25                       3524 	_drop 3 
      002A25 5B 03            [ 2]    1     addw sp,#3 
      002A27                       3525 	_store_top 
      002A27 90 F7            [ 1]    1     ld (y),a 
      002A29 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A2C A6 84            [ 1] 3526 	ld a,#TK_INTGR
      002A2E 81               [ 4] 3527 	ret
                                   3528 
                                   3529 ;------------------------------
                                   3530 ; BASIC: OR(expr1,expr2)
                                   3531 ; Apply bit OR relation between
                                   3532 ; the 2 arguments, i.e expr1 | expr2 
                                   3533 ; output:
                                   3534 ; 	A 		TK_INTGR
                                   3535 ;   X 		result 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



                                   3536 ;------------------------------
      002A2F                       3537 bit_or:
      002A2F CD 19 5C         [ 4] 3538 	call func_args 
      002A32 A1 02            [ 1] 3539 	cp a,#2
      002A34 27 03            [ 1] 3540 	jreq 1$
      002A36 CC 16 A0         [ 2] 3541 	jp syntax_error 
      002A39                       3542 1$:	_xpop 
      002A39 90 F6            [ 1]    1     ld a,(y)
      002A3B 93               [ 1]    2     ldw x,y 
      002A3C EE 01            [ 2]    3     ldw x,(1,x)
      002A3E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A42 89               [ 2] 3543     pushw x 
      002A43 88               [ 1] 3544 	push  a 
      002A44                       3545 	_at_top 
      002A44 90 F6            [ 1]    1     ld a,(y)
      002A46 93               [ 1]    2     ldw x,y 
      002A47 EE 01            [ 2]    3     ldw x,(1,x)
      002A49 1A 01            [ 1] 3546 	or a,(1,sp)
      002A4B 90 97            [ 1] 3547 	ld yl,a 
      002A4D 9E               [ 1] 3548 	ld a,xh 
      002A4E 1A 02            [ 1] 3549 	or a,(2,sp)
      002A50 95               [ 1] 3550 	ld xh,a 
      002A51 9F               [ 1] 3551 	ld a,xl 
      002A52 1A 03            [ 1] 3552 	or a,(3,sp)
      002A54 97               [ 1] 3553 	ld xl,a 
      002A55 90 9F            [ 1] 3554 	ld a,yl 
      002A57                       3555 	_drop 3 
      002A57 5B 03            [ 2]    1     addw sp,#3 
      002A59                       3556 	_store_top 
      002A59 90 F7            [ 1]    1     ld (y),a 
      002A5B 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A5E A6 84            [ 1] 3557 	ld a,#TK_INTGR
      002A60 81               [ 4] 3558 	ret
                                   3559 
                                   3560 ;------------------------------
                                   3561 ; BASIC: XOR(expr1,expr2)
                                   3562 ; Apply bit XOR relation between
                                   3563 ; the 2 arguments, i.e expr1 ^ expr2 
                                   3564 ; output:
                                   3565 ; 	A 		TK_INTGR
                                   3566 ;   X 		result 
                                   3567 ;------------------------------
      002A61                       3568 bit_xor:
      002A61 CD 19 5C         [ 4] 3569 	call func_args 
      002A64 A1 02            [ 1] 3570 	cp a,#2
      002A66 27 03            [ 1] 3571 	jreq 1$
      002A68 CC 16 A0         [ 2] 3572 	jp syntax_error 
      002A6B                       3573 1$:	_xpop 
      002A6B 90 F6            [ 1]    1     ld a,(y)
      002A6D 93               [ 1]    2     ldw x,y 
      002A6E EE 01            [ 2]    3     ldw x,(1,x)
      002A70 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A74 89               [ 2] 3574     pushw x 
      002A75 88               [ 1] 3575 	push  a 
      002A76                       3576 	_at_top 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002A76 90 F6            [ 1]    1     ld a,(y)
      002A78 93               [ 1]    2     ldw x,y 
      002A79 EE 01            [ 2]    3     ldw x,(1,x)
      002A7B 18 01            [ 1] 3577 	xor a,(1,sp)
      002A7D 90 97            [ 1] 3578 	ld yl,a 
      002A7F 9E               [ 1] 3579 	ld a,xh 
      002A80 18 02            [ 1] 3580 	xor a,(2,sp)
      002A82 95               [ 1] 3581 	ld xh,a 
      002A83 9F               [ 1] 3582 	ld a,xl 
      002A84 18 03            [ 1] 3583 	xor a,(3,sp)
      002A86 97               [ 1] 3584 	ld xl,a 
      002A87 90 9F            [ 1] 3585 	ld a,yl 
      002A89                       3586 	_drop 3 
      002A89 5B 03            [ 2]    1     addw sp,#3 
      002A8B                       3587 	_store_top 
      002A8B 90 F7            [ 1]    1     ld (y),a 
      002A8D 90 EF 01         [ 2]    2     ldw (1,y),x     
      002A90 A6 84            [ 1] 3588 	ld a,#TK_INTGR
      002A92 81               [ 4] 3589 	ret
                                   3590 
                                   3591 ;------------------------------
                                   3592 ; BASIC: LSHIFT(expr1,expr2)
                                   3593 ; logical shift left expr1 by 
                                   3594 ; expr2 bits 
                                   3595 ; output:
                                   3596 ; 	A 		TK_INTGR
                                   3597 ;   X 		result 
                                   3598 ;------------------------------
      002A93                       3599 lshift:
      002A93 CD 19 5C         [ 4] 3600 	call func_args
      002A96 A1 02            [ 1] 3601 	cp a,#2 
      002A98 27 03            [ 1] 3602 	jreq 1$
      002A9A CC 16 A0         [ 2] 3603 	jp syntax_error
      002A9D                       3604 1$: _xpop 
      002A9D 90 F6            [ 1]    1     ld a,(y)
      002A9F 93               [ 1]    2     ldw x,y 
      002AA0 EE 01            [ 2]    3     ldw x,(1,x)
      002AA2 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AA6 90 93            [ 1] 3605     ldw y,x    
      002AA8                       3606 	_at_top  ; T@ 
      002AA8 90 F6            [ 1]    1     ld a,(y)
      002AAA 93               [ 1]    2     ldw x,y 
      002AAB EE 01            [ 2]    3     ldw x,(1,x)
      002AAD 90 5D            [ 2] 3607 	tnzw y 
      002AAF 27 07            [ 1] 3608 	jreq 4$
      002AB1 98               [ 1] 3609 2$:	rcf 
      002AB2 59               [ 2] 3610 	rlcw x 
      002AB3 49               [ 1] 3611 	rlc a 
      002AB4 90 5A            [ 2] 3612 	decw y 
      002AB6 26 F9            [ 1] 3613 	jrne 2$
      002AB8                       3614 4$: _store_top  ; T! 
      002AB8 90 F7            [ 1]    1     ld (y),a 
      002ABA 90 EF 01         [ 2]    2     ldw (1,y),x     
      002ABD A6 84            [ 1] 3615 	ld a,#TK_INTGR
      002ABF 81               [ 4] 3616 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3617 
                                   3618 ;------------------------------
                                   3619 ; BASIC: RSHIFT(expr1,expr2)
                                   3620 ; logical shift right expr1 by 
                                   3621 ; expr2 bits.
                                   3622 ; output:
                                   3623 ; 	A 		TK_INTGR
                                   3624 ;   X 		result 
                                   3625 ;------------------------------
      002AC0                       3626 rshift:
      002AC0 CD 19 5C         [ 4] 3627 	call func_args
      002AC3 A1 02            [ 1] 3628 	cp a,#2 
      002AC5 27 03            [ 1] 3629 	jreq 1$
      002AC7 CC 16 A0         [ 2] 3630 	jp syntax_error
      002ACA                       3631 1$: _xpop 
      002ACA 90 F6            [ 1]    1     ld a,(y)
      002ACC 93               [ 1]    2     ldw x,y 
      002ACD EE 01            [ 2]    3     ldw x,(1,x)
      002ACF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AD3 90 93            [ 1] 3632     ldw y,x   
      002AD5                       3633 	_at_top  ; T@  
      002AD5 90 F6            [ 1]    1     ld a,(y)
      002AD7 93               [ 1]    2     ldw x,y 
      002AD8 EE 01            [ 2]    3     ldw x,(1,x)
      002ADA 90 5D            [ 2] 3634 	tnzw y 
      002ADC 27 07            [ 1] 3635 	jreq 4$
      002ADE 98               [ 1] 3636 2$:	rcf 
      002ADF 56               [ 2] 3637 	rrcw x
      002AE0 46               [ 1] 3638 	rrc a  
      002AE1 90 5A            [ 2] 3639 	decw y 
      002AE3 26 F9            [ 1] 3640 	jrne 2$
      002AE5                       3641 4$: _store_top  ; T! 
      002AE5 90 F7            [ 1]    1     ld (y),a 
      002AE7 90 EF 01         [ 2]    2     ldw (1,y),x     
      002AEA A6 84            [ 1] 3642 	ld a,#TK_INTGR
      002AEC 81               [ 4] 3643 	ret
                                   3644 
                                   3645 ;--------------------------
                                   3646 ; BASIC: FCPU integer
                                   3647 ; set CPU frequency 
                                   3648 ;-------------------------- 
                                   3649 
      002AED                       3650 fcpu:
      002AED A6 84            [ 1] 3651 	ld a,#TK_INTGR
      002AEF CD 19 4F         [ 4] 3652 	call expect 
      002AF2 CD 17 E0         [ 4] 3653 	call get_int24 
      002AF5 9F               [ 1] 3654 	ld a,xl 
      002AF6 A4 07            [ 1] 3655 	and a,#7 
      002AF8 C7 50 C6         [ 1] 3656 	ld CLK_CKDIVR,a 
      002AFB 81               [ 4] 3657 	ret 
                                   3658 
                                   3659 ;------------------------------
                                   3660 ; BASIC: PMODE pin#, mode 
                                   3661 ; Arduino pin. 
                                   3662 ; define pin as input or output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



                                   3663 ; pin#: {0..15}
                                   3664 ; mode: INPUT|OUTPUT  
                                   3665 ;------------------------------
                           000001  3666 	PINNO=1
                           000001  3667 	VSIZE=1
      002AFC                       3668 pin_mode:
      002AFC                       3669 	_vars VSIZE 
      002AFC 52 01            [ 2]    1     sub sp,#VSIZE 
      002AFE CD 19 61         [ 4] 3670 	call arg_list 
      002B01 A1 02            [ 1] 3671 	cp a,#2 
      002B03 27 03            [ 1] 3672 	jreq 1$
      002B05 CC 16 A0         [ 2] 3673 	jp syntax_error 
      002B08                       3674 1$: _xpop 
      002B08 90 F6            [ 1]    1     ld a,(y)
      002B0A 93               [ 1]    2     ldw x,y 
      002B0B EE 01            [ 2]    3     ldw x,(1,x)
      002B0D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B11 90 93            [ 1] 3675 	ldw y,x ; mode 
      002B13                       3676 	_xpop ; Dx pin 
      002B13 90 F6            [ 1]    1     ld a,(y)
      002B15 93               [ 1]    2     ldw x,y 
      002B16 EE 01            [ 2]    3     ldw x,(1,x)
      002B18 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B1C CD 2B 59         [ 4] 3677 	call select_pin 
      002B1F 6B 01            [ 1] 3678 	ld (PINNO,sp),a  
      002B21 A6 01            [ 1] 3679 	ld a,#1 
      002B23 0D 01            [ 1] 3680 	tnz (PINNO,sp)
      002B25 27 0D            [ 1] 3681 	jreq 4$
      002B27 48               [ 1] 3682 2$:	sll a 
      002B28 0A 01            [ 1] 3683 	dec (PINNO,sp)
      002B2A 26 FB            [ 1] 3684 	jrne 2$ 
      002B2C 6B 01            [ 1] 3685 	ld (PINNO,sp),a
      002B2E 7B 01            [ 1] 3686 	ld a,(PINNO,sp)
      002B30 EA 03            [ 1] 3687 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002B32 E7 03            [ 1] 3688 	ld (GPIO_CR1,x),a 
      002B34 90 A3 00 01      [ 2] 3689 4$:	cpw y,#OUTP 
      002B38 27 10            [ 1] 3690 	jreq 6$
                                   3691 ; input mode
                                   3692 ; disable external interrupt 
      002B3A 7B 01            [ 1] 3693 	ld a,(PINNO,sp)
      002B3C 43               [ 1] 3694 	cpl a 
      002B3D E4 04            [ 1] 3695 	and a,(GPIO_CR2,x)
      002B3F E7 04            [ 1] 3696 	ld (GPIO_CR2,x),a 
                                   3697 ;clear bit in DDR for input mode 
      002B41 7B 01            [ 1] 3698 	ld a,(PINNO,sp)
      002B43 43               [ 1] 3699 	cpl a 
      002B44 E4 02            [ 1] 3700 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002B46 E7 02            [ 1] 3701 	ld (GPIO_DDR,x),a 
      002B48 20 0C            [ 2] 3702 	jra 9$
      002B4A                       3703 6$: ;output mode  
      002B4A 7B 01            [ 1] 3704 	ld a,(PINNO,sp)
      002B4C EA 02            [ 1] 3705 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002B4E E7 02            [ 1] 3706 	ld (GPIO_DDR,x),a 
      002B50 7B 01            [ 1] 3707 	ld a,(PINNO,sp)
      002B52 EA 04            [ 1] 3708 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



      002B54 E7 04            [ 1] 3709 	ld (GPIO_CR2,x),a 
      002B56                       3710 9$:	
      002B56                       3711 	_drop VSIZE 
      002B56 5B 01            [ 2]    1     addw sp,#VSIZE 
      002B58 81               [ 4] 3712 	ret
                                   3713 
                                   3714 ;------------------------
                                   3715 ; select Arduino pin 
                                   3716 ; input:
                                   3717 ;   X 	 {0..15} Arduino Dx 
                                   3718 ; output:
                                   3719 ;   A     stm8s208 pin 
                                   3720 ;   X     base address s208 GPIO port 
                                   3721 ;---------------------------
      002B59                       3722 select_pin:
      002B59 58               [ 2] 3723 	sllw x 
      002B5A 1C 2B 69         [ 2] 3724 	addw x,#arduino_to_8s208 
      002B5D FE               [ 2] 3725 	ldw x,(x)
      002B5E 9F               [ 1] 3726 	ld a,xl 
      002B5F 88               [ 1] 3727 	push a 
      002B60 5E               [ 1] 3728 	swapw x 
      002B61 A6 05            [ 1] 3729 	ld a,#5 
      002B63 42               [ 4] 3730 	mul x,a 
      002B64 1C 50 00         [ 2] 3731 	addw x,#GPIO_BASE 
      002B67 84               [ 1] 3732 	pop a 
      002B68 81               [ 4] 3733 	ret 
                                   3734 ; translation from Arduino D0..D15 to stm8s208rb 
      002B69                       3735 arduino_to_8s208:
      002B69 03 06                 3736 .byte 3,6 ; D0 
      002B6B 03 05                 3737 .byte 3,5 ; D1 
      002B6D 04 00                 3738 .byte 4,0 ; D2 
      002B6F 02 01                 3739 .byte 2,1 ; D3
      002B71 06 00                 3740 .byte 6,0 ; D4
      002B73 02 02                 3741 .byte 2,2 ; D5
      002B75 02 03                 3742 .byte 2,3 ; D6
      002B77 03 01                 3743 .byte 3,1 ; D7
      002B79 03 03                 3744 .byte 3,3 ; D8
      002B7B 02 04                 3745 .byte 2,4 ; D9
      002B7D 04 05                 3746 .byte 4,5 ; D10
      002B7F 02 06                 3747 .byte 2,6 ; D11
      002B81 02 07                 3748 .byte 2,7 ; D12
      002B83 02 05                 3749 .byte 2,5 ; D13
      002B85 04 02                 3750 .byte 4,2 ; D14
      002B87 04 01                 3751 .byte 4,1 ; D15
                                   3752 
                                   3753 
                                   3754 ;------------------------------
                                   3755 ; BASIC: RND(expr)
                                   3756 ; return random number 
                                   3757 ; between 1 and expr inclusive
                                   3758 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   3759 ; input:
                                   3760 ; 	none 
                                   3761 ; output:
                                   3762 ;	xstack 	random positive integer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



                                   3763 ;------------------------------
      002B89                       3764 random:
      002B89 CD 19 5C         [ 4] 3765 	call func_args 
      002B8C A1 01            [ 1] 3766 	cp a,#1
      002B8E 27 03            [ 1] 3767 	jreq 1$
      002B90 CC 16 A0         [ 2] 3768 	jp syntax_error
      002B93                       3769 1$:  
      002B93                       3770 	_xpop   
      002B93 90 F6            [ 1]    1     ld a,(y)
      002B95 93               [ 1]    2     ldw x,y 
      002B96 EE 01            [ 2]    3     ldw x,(1,x)
      002B98 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B9C 89               [ 2] 3771 	pushw x 
      002B9D 88               [ 1] 3772 	push a  
      002B9E A6 80            [ 1] 3773 	ld a,#0x80 
      002BA0 15 01            [ 1] 3774 	bcp a,(1,sp)
      002BA2 27 05            [ 1] 3775 	jreq 2$
      002BA4 A6 0A            [ 1] 3776 	ld a,#ERR_BAD_VALUE
      002BA6 CC 16 A2         [ 2] 3777 	jp tb_error
      002BA9                       3778 2$: 
                                   3779 ; acc16=(x<<5)^x 
      002BA9 CE 00 14         [ 2] 3780 	ldw x,seedx 
      002BAC 58               [ 2] 3781 	sllw x 
      002BAD 58               [ 2] 3782 	sllw x 
      002BAE 58               [ 2] 3783 	sllw x 
      002BAF 58               [ 2] 3784 	sllw x 
      002BB0 58               [ 2] 3785 	sllw x 
      002BB1 9E               [ 1] 3786 	ld a,xh 
      002BB2 C8 00 14         [ 1] 3787 	xor a,seedx 
      002BB5 C7 00 0D         [ 1] 3788 	ld acc16,a 
      002BB8 9F               [ 1] 3789 	ld a,xl 
      002BB9 C8 00 15         [ 1] 3790 	xor a,seedx+1 
      002BBC C7 00 0E         [ 1] 3791 	ld acc8,a 
                                   3792 ; seedx=seedy 
      002BBF CE 00 16         [ 2] 3793 	ldw x,seedy 
      002BC2 CF 00 14         [ 2] 3794 	ldw seedx,x  
                                   3795 ; seedy=seedy^(seedy>>1)
      002BC5 CE 00 16         [ 2] 3796 	ldw x,seedy 
      002BC8 54               [ 2] 3797 	srlw x 
      002BC9 9E               [ 1] 3798 	ld a,xh 
      002BCA C8 00 16         [ 1] 3799 	xor a,seedy 
      002BCD C7 00 16         [ 1] 3800 	ld seedy,a  
      002BD0 9F               [ 1] 3801 	ld a,xl 
      002BD1 C8 00 17         [ 1] 3802 	xor a,seedy+1 
      002BD4 C7 00 17         [ 1] 3803 	ld seedy+1,a 
                                   3804 ; acc16>>3 
      002BD7 CE 00 0D         [ 2] 3805 	ldw x,acc16 
      002BDA 54               [ 2] 3806 	srlw x 
      002BDB 54               [ 2] 3807 	srlw x 
      002BDC 54               [ 2] 3808 	srlw x 
                                   3809 ; x=acc16^x 
      002BDD 9E               [ 1] 3810 	ld a,xh 
      002BDE C8 00 0D         [ 1] 3811 	xor a,acc16 
      002BE1 C7 00 0D         [ 1] 3812 	ld acc16,a 
      002BE4 9F               [ 1] 3813 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002BE5 C8 00 0E         [ 1] 3814 	xor a,acc8 
      002BE8 C7 00 0E         [ 1] 3815 	ld acc8,a 
                                   3816 ; seedy=acc16^seedy 
      002BEB C8 00 17         [ 1] 3817 	xor a,seedy+1
      002BEE 97               [ 1] 3818 	ld xl,a 
      002BEF C6 00 0D         [ 1] 3819 	ld a,acc16 
      002BF2 C8 00 16         [ 1] 3820 	xor a,seedy
      002BF5 95               [ 1] 3821 	ld xh,a 
      002BF6 CF 00 16         [ 2] 3822 	ldw seedy,x 
                                   3823 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002BF9 C6 00 15         [ 1] 3824 	ld a,seedx+1
      002BFC A4 7F            [ 1] 3825 	and a,#127
      002BFE                       3826 	_xpush 
      002BFE 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C02 90 F7            [ 1]    2     ld (y),a 
      002C04 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C07 84               [ 1] 3827 	pop a 
      002C08 85               [ 2] 3828 	popw x 
      002C09                       3829 	_xpush 
      002C09 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002C0D 90 F7            [ 1]    2     ld (y),a 
      002C0F 90 EF 01         [ 2]    3     ldw (1,y),x 
      002C12 CD 03 D5         [ 4] 3830 	call mod24 
      002C15                       3831 	_xpop
      002C15 90 F6            [ 1]    1     ld a,(y)
      002C17 93               [ 1]    2     ldw x,y 
      002C18 EE 01            [ 2]    3     ldw x,(1,x)
      002C1A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C1E 1C 00 01         [ 2] 3832 	addw x,#1 
      002C21 A9 00            [ 1] 3833 	adc a,#0  
      002C23 81               [ 4] 3834 	ret 
                                   3835 
                                   3836 ;---------------------------------
                                   3837 ; BASIC: WORDS 
                                   3838 ; affiche la listes des mots du
                                   3839 ; dictionnaire ainsi que le nombre
                                   3840 ; de mots.
                                   3841 ;---------------------------------
                           000001  3842 	WLEN=1 ; word length
                           000002  3843 	LLEN=2 ; character sent to console
                           000003  3844 	WCNT=3 ; count words printed 
                           000003  3845 	VSIZE=3 
      002C24                       3846 words:
      002C24                       3847 	_vars VSIZE
      002C24 52 03            [ 2]    1     sub sp,#VSIZE 
      002C26 0F 02            [ 1] 3848 	clr (LLEN,sp)
      002C28 0F 03            [ 1] 3849 	clr (WCNT,sp)
      002C2A 90 AE 33 6B      [ 2] 3850 	ldw y,#kword_dict+2
      002C2E 93               [ 1] 3851 0$:	ldw x,y
      002C2F F6               [ 1] 3852 	ld a,(x)
      002C30 A4 0F            [ 1] 3853 	and a,#15 
      002C32 6B 01            [ 1] 3854 	ld (WLEN,sp),a 
      002C34 0C 03            [ 1] 3855 	inc (WCNT,sp)
      002C36 5C               [ 1] 3856 1$:	incw x 
      002C37 F6               [ 1] 3857 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002C38 CD 09 44         [ 4] 3858 	call putc 
      002C3B 0C 02            [ 1] 3859 	inc (LLEN,sp)
      002C3D 0A 01            [ 1] 3860 	dec (WLEN,sp)
      002C3F 26 F5            [ 1] 3861 	jrne 1$
      002C41 A6 46            [ 1] 3862 	ld a,#70
      002C43 11 02            [ 1] 3863 	cp a,(LLEN,sp)
      002C45 2B 09            [ 1] 3864 	jrmi 2$   
      002C47 A6 20            [ 1] 3865 	ld a,#SPACE 
      002C49 CD 09 44         [ 4] 3866 	call putc 
      002C4C 0C 02            [ 1] 3867 	inc (LLEN,sp) 
      002C4E 20 07            [ 2] 3868 	jra 3$
      002C50 A6 0D            [ 1] 3869 2$: ld a,#CR 
      002C52 CD 09 44         [ 4] 3870 	call putc 
      002C55 0F 02            [ 1] 3871 	clr (LLEN,sp)
      002C57 72 A2 00 02      [ 2] 3872 3$:	subw y,#2 
      002C5B 90 FE            [ 2] 3873 	ldw y,(y)
      002C5D 26 CF            [ 1] 3874 	jrne 0$ 
      002C5F A6 0D            [ 1] 3875 	ld a,#CR 
      002C61 CD 09 44         [ 4] 3876 	call putc  
      002C64 5F               [ 1] 3877 	clrw x 
      002C65 7B 03            [ 1] 3878 	ld a,(WCNT,sp)
      002C67 97               [ 1] 3879 	ld xl,a 
      002C68 CD 17 F6         [ 4] 3880 	call prt_i16 
      002C6B AE 2C 74         [ 2] 3881 	ldw x,#words_count_msg
      002C6E CD 09 A1         [ 4] 3882 	call puts 
      002C71                       3883 	_drop VSIZE 
      002C71 5B 03            [ 2]    1     addw sp,#VSIZE 
      002C73 81               [ 4] 3884 	ret 
      002C74 20 77 6F 72 64 73 20  3885 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   3886 
                                   3887 
                                   3888 ;-----------------------------
                                   3889 ; BASIC: TIMER expr 
                                   3890 ; initialize count down timer 
                                   3891 ;-----------------------------
      002C8A                       3892 set_timer:
      002C8A CD 19 61         [ 4] 3893 	call arg_list
      002C8D A1 01            [ 1] 3894 	cp a,#1 
      002C8F 27 03            [ 1] 3895 	jreq 1$
      002C91 CC 16 A0         [ 2] 3896 	jp syntax_error
      002C94                       3897 1$: 
      002C94                       3898 	_xpop  
      002C94 90 F6            [ 1]    1     ld a,(y)
      002C96 93               [ 1]    2     ldw x,y 
      002C97 EE 01            [ 2]    3     ldw x,(1,x)
      002C99 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C9D CF 00 12         [ 2] 3899 	ldw timer,x 
      002CA0 81               [ 4] 3900 	ret 
                                   3901 
                                   3902 ;------------------------------
                                   3903 ; BASIC: TIMEOUT 
                                   3904 ; return state of timer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



                                   3905 ; output:
                                   3906 ;   A:X     0 not timeout 
                                   3907 ;   A:X     -1 timeout 
                                   3908 ;------------------------------
      002CA1                       3909 timeout:
      002CA1 CE 00 12         [ 2] 3910 	ldw x,timer 
      002CA4 4F               [ 1] 3911 	clr a 
      002CA5 20 13            [ 2] 3912 	jra logical_not 
                                   3913 
                                   3914 ;--------------------------------
                                   3915 ; BASIC NOT(expr) 
                                   3916 ; return logical complement of expr
                                   3917 ;--------------------------------
      002CA7                       3918 func_not:
      002CA7 CD 19 5C         [ 4] 3919 	call func_args  
      002CAA A1 01            [ 1] 3920 	cp a,#1
      002CAC 27 03            [ 1] 3921 	jreq 1$
      002CAE CC 16 A0         [ 2] 3922 	jp syntax_error
      002CB1                       3923 1$: _xpop 
      002CB1 90 F6            [ 1]    1     ld a,(y)
      002CB3 93               [ 1]    2     ldw x,y 
      002CB4 EE 01            [ 2]    3     ldw x,(1,x)
      002CB6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CBA                       3924 logical_not: 
      002CBA 4D               [ 1] 3925 	tnz a 
      002CBB 26 06            [ 1] 3926 	jrne 2$
      002CBD 5D               [ 2] 3927 	tnzw x 
      002CBE 26 03            [ 1] 3928 	jrne 2$  
      002CC0 43               [ 1] 3929 	cpl a 
      002CC1 53               [ 2] 3930 	cplw x  
      002CC2 81               [ 4] 3931 	ret 
      002CC3 4F               [ 1] 3932 2$: clr a 
      002CC4 5F               [ 1] 3933 	clrw x 
      002CC5 81               [ 4] 3934 	ret 
                                   3935 
                                   3936 
                                   3937 ;-----------------------------------
                                   3938 ; BASIC: IWDGEN expr1 
                                   3939 ; enable independant watchdog timer
                                   3940 ; expr1 is delay in multiple of 62.5µsec
                                   3941 ; expr1 -> {1..16383}
                                   3942 ;-----------------------------------
      002CC6                       3943 enable_iwdg:
      002CC6 CD 19 61         [ 4] 3944 	call arg_list
      002CC9 A1 01            [ 1] 3945 	cp a,#1 
      002CCB 27 03            [ 1] 3946 	jreq 1$
      002CCD CC 16 A0         [ 2] 3947 	jp syntax_error 
      002CD0                       3948 1$: _xpop  
      002CD0 90 F6            [ 1]    1     ld a,(y)
      002CD2 93               [ 1]    2     ldw x,y 
      002CD3 EE 01            [ 2]    3     ldw x,(1,x)
      002CD5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CD9 4B 00            [ 1] 3949 	push #0
      002CDB 35 CC 50 E0      [ 1] 3950 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002CDF 9E               [ 1] 3951 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



      002CE0 A4 3F            [ 1] 3952 	and a,#0x3f
      002CE2 95               [ 1] 3953 	ld xh,a  
      002CE3 A3 00 FF         [ 2] 3954 2$:	cpw x,#255
      002CE6 23 06            [ 2] 3955 	jrule 3$
      002CE8 0C 01            [ 1] 3956 	inc (1,sp)
      002CEA 98               [ 1] 3957 	rcf 
      002CEB 56               [ 2] 3958 	rrcw x 
      002CEC 20 F5            [ 2] 3959 	jra 2$
      002CEE 35 55 50 E0      [ 1] 3960 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CF2 84               [ 1] 3961 	pop a  
      002CF3 C7 50 E1         [ 1] 3962 	ld IWDG_PR,a 
      002CF6 9F               [ 1] 3963 	ld a,xl
      002CF7 4A               [ 1] 3964 	dec a 
      002CF8 35 55 50 E0      [ 1] 3965 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002CFC C7 50 E2         [ 1] 3966 	ld IWDG_RLR,a 
      002CFF 35 AA 50 E0      [ 1] 3967 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002D03 81               [ 4] 3968 	ret 
                                   3969 
                                   3970 
                                   3971 ;-----------------------------------
                                   3972 ; BASIC: IWDGREF  
                                   3973 ; refresh independant watchdog count down 
                                   3974 ; timer before it reset MCU. 
                                   3975 ;-----------------------------------
      002D04                       3976 refresh_iwdg:
      002D04 35 AA 50 E0      [ 1] 3977 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002D08 81               [ 4] 3978 	ret 
                                   3979 
                                   3980 
                                   3981 ;-------------------------------------
                                   3982 ; BASIC: LOG(expr)
                                   3983 ; return logarithm base 2 of expr 
                                   3984 ; this is the position of most significant
                                   3985 ; bit set. 
                                   3986 ; input: 
                                   3987 ; output:
                                   3988 ;   A     TK_INTGR 
                                   3989 ;   xstack log2 
                                   3990 ;*********************************
      002D09                       3991 log2:
      002D09 CD 19 5C         [ 4] 3992 	call func_args 
      002D0C A1 01            [ 1] 3993 	cp a,#1 
      002D0E 27 03            [ 1] 3994 	jreq 1$
      002D10 CC 16 A0         [ 2] 3995 	jp syntax_error 
      002D13                       3996 1$: 
      002D13                       3997 	_xpop    
      002D13 90 F6            [ 1]    1     ld a,(y)
      002D15 93               [ 1]    2     ldw x,y 
      002D16 EE 01            [ 2]    3     ldw x,(1,x)
      002D18 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D1C 4D               [ 1] 3998 	tnz a
      002D1D 26 08            [ 1] 3999 	jrne 2$ 
      002D1F 5D               [ 2] 4000 	tnzw x 
      002D20 26 05            [ 1] 4001 	jrne 2$
      002D22 A6 0A            [ 1] 4002 	ld a,#ERR_BAD_VALUE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



      002D24 CC 16 A2         [ 2] 4003 	jp tb_error 
      002D27 4B 18            [ 1] 4004 2$: push #24 
      002D29 59               [ 2] 4005 3$: rlcw x 
      002D2A 49               [ 1] 4006     rlc a 
      002D2B 25 04            [ 1] 4007 	jrc 4$
      002D2D 0A 01            [ 1] 4008 	dec (1,sp) 
      002D2F 26 F8            [ 1] 4009 	jrne 3$
      002D31 5F               [ 1] 4010 4$: clrw x 
      002D32 84               [ 1] 4011     pop a 
      002D33 4A               [ 1] 4012 	dec a
      002D34 02               [ 1] 4013 	rlwa x  
      002D35                       4014 9$:	
      002D35 81               [ 4] 4015 	ret 
                                   4016 
                                   4017 ;-----------------------------------
                                   4018 ; BASIC: BIT(expr) 
                                   4019 ; expr ->{0..23}
                                   4020 ; return 2^expr 
                                   4021 ; output:
                                   4022 ;    A:X    2^expr 
                                   4023 ;-----------------------------------
      002D36                       4024 bitmask:
      002D36 CD 19 5C         [ 4] 4025     call func_args 
      002D39 A1 01            [ 1] 4026 	cp a,#1
      002D3B 27 03            [ 1] 4027 	jreq 1$
      002D3D CC 16 A0         [ 2] 4028 	jp syntax_error 
      002D40                       4029 1$: _xpop 
      002D40 90 F6            [ 1]    1     ld a,(y)
      002D42 93               [ 1]    2     ldw x,y 
      002D43 EE 01            [ 2]    3     ldw x,(1,x)
      002D45 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D49 9F               [ 1] 4030 	ld a,xl 
      002D4A AE 00 01         [ 2] 4031 	ldw x,#1 
      002D4D A4 17            [ 1] 4032 	and a,#23
      002D4F 27 0A            [ 1] 4033 	jreq 9$
      002D51 88               [ 1] 4034 	push a 
      002D52 4F               [ 1] 4035 	clr a 
      002D53                       4036 2$: 
      002D53 58               [ 2] 4037 	slaw x 
      002D54 49               [ 1] 4038 	rlc a 	
      002D55 0A 01            [ 1] 4039 	dec (1,sp)
      002D57 26 FA            [ 1] 4040 	jrne 2$ 
      002D59                       4041 4$:
      002D59                       4042     _drop 1 
      002D59 5B 01            [ 2]    1     addw sp,#1 
      002D5B 81               [ 4] 4043 9$:	ret 
                                   4044 
                                   4045 ;------------------------------
                                   4046 ; BASIC: INVERT(expr)
                                   4047 ; 1's complement 
                                   4048 ;--------------------------------
      002D5C                       4049 invert:
      002D5C CD 19 5C         [ 4] 4050 	call func_args
      002D5F A1 01            [ 1] 4051 	cp a,#1 
      002D61 27 03            [ 1] 4052 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



      002D63 CC 16 A0         [ 2] 4053 	jp syntax_error
      002D66                       4054 1$: _xpop 
      002D66 90 F6            [ 1]    1     ld a,(y)
      002D68 93               [ 1]    2     ldw x,y 
      002D69 EE 01            [ 2]    3     ldw x,(1,x)
      002D6B 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D6F 43               [ 1] 4055 	cpl a 
      002D70 53               [ 2] 4056 	cplw x 
      002D71 81               [ 4] 4057 	ret 
                                   4058 
                                   4059 ;------------------------------
                                   4060 ; BASIC: DO 
                                   4061 ; initiate a DO ... UNTIL loop 
                                   4062 ;------------------------------
                           000003  4063 	DOLP_ADR=3 
                           000005  4064 	DOLP_INW=5
                           000004  4065 	VSIZE=4 
      002D72                       4066 do_loop:
      002D72 85               [ 2] 4067 	popw x 
      002D73                       4068 	_vars VSIZE 
      002D73 52 04            [ 2]    1     sub sp,#VSIZE 
      002D75 89               [ 2] 4069 	pushw x 
      002D76 CE 00 04         [ 2] 4070 	ldw x,basicptr 
      002D79 1F 03            [ 2] 4071 	ldw (DOLP_ADR,sp),x
      002D7B CE 00 00         [ 2] 4072 	ldw x,in.w 
      002D7E 1F 05            [ 2] 4073 	ldw (DOLP_INW,sp),x
      002D80 72 5C 00 1F      [ 1] 4074 	inc loop_depth 
      002D84 81               [ 4] 4075 	ret 
                                   4076 
                                   4077 ;--------------------------------
                                   4078 ; BASIC: UNTIL expr 
                                   4079 ; loop if exprssion is false 
                                   4080 ; else terminate loop
                                   4081 ;--------------------------------
      002D85                       4082 until: 
      002D85 72 5D 00 1F      [ 1] 4083 	tnz loop_depth 
      002D89 26 03            [ 1] 4084 	jrne 1$ 
      002D8B CC 16 A0         [ 2] 4085 	jp syntax_error 
      002D8E                       4086 1$: 
      002D8E CD 1B 0A         [ 4] 4087 	call condition  
      002D91 4D               [ 1] 4088 	tnz a 
      002D92 26 13            [ 1] 4089 	jrne 9$ 
      002D94 5D               [ 2] 4090 	tnzw x   
      002D95 26 10            [ 1] 4091 	jrne 9$
      002D97 1E 03            [ 2] 4092 	ldw x,(DOLP_ADR,sp)
      002D99 CF 00 04         [ 2] 4093 	ldw basicptr,x 
      002D9C E6 02            [ 1] 4094 	ld a,(2,x)
      002D9E C7 00 03         [ 1] 4095 	ld count,a 
      002DA1 1E 05            [ 2] 4096 	ldw x,(DOLP_INW,sp)
      002DA3 CF 00 00         [ 2] 4097 	ldw in.w,x 
      002DA6 81               [ 4] 4098 	ret 
      002DA7                       4099 9$:	; remove loop data from stack  
      002DA7 85               [ 2] 4100 	popw x
      002DA8                       4101 	_drop VSIZE
      002DA8 5B 04            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002DAA 72 5A 00 1F      [ 1] 4102 	dec loop_depth 
      002DAE FC               [ 2] 4103 	jp (x)
                                   4104 
                                   4105 ;--------------------------
                                   4106 ; BASIC: PORTA...PORTI  
                                   4107 ;  return constant value 
                                   4108 ;  PORT  base address 
                                   4109 ;---------------------------
      002DAF                       4110 const_porta:
      002DAF AE 50 00         [ 2] 4111 	ldw x,#PA_BASE 
      002DB2 4F               [ 1] 4112 	clr a 
      002DB3 81               [ 4] 4113 	ret 
      002DB4                       4114 const_portb:
      002DB4 AE 50 05         [ 2] 4115 	ldw x,#PB_BASE 
      002DB7 4F               [ 1] 4116 	clr a 
      002DB8 81               [ 4] 4117 	ret 
      002DB9                       4118 const_portc:
      002DB9 AE 50 0A         [ 2] 4119 	ldw x,#PC_BASE 
      002DBC 4F               [ 1] 4120 	clr a 
      002DBD 81               [ 4] 4121 	ret 
      002DBE                       4122 const_portd:
      002DBE AE 50 0F         [ 2] 4123 	ldw x,#PD_BASE 
      002DC1 4F               [ 1] 4124 	clr a 
      002DC2 81               [ 4] 4125 	ret 
      002DC3                       4126 const_porte:
      002DC3 AE 50 14         [ 2] 4127 	ldw x,#PE_BASE 
      002DC6 4F               [ 1] 4128 	clr a 
      002DC7 81               [ 4] 4129 	ret 
      002DC8                       4130 const_portf:
      002DC8 AE 50 19         [ 2] 4131 	ldw x,#PF_BASE 
      002DCB 4F               [ 1] 4132 	clr a 
      002DCC 81               [ 4] 4133 	ret 
      002DCD                       4134 const_portg:
      002DCD AE 50 1E         [ 2] 4135 	ldw x,#PG_BASE 
      002DD0 4F               [ 1] 4136 	clr a 
      002DD1 81               [ 4] 4137 	ret 
      002DD2                       4138 const_porth:
      002DD2 AE 50 23         [ 2] 4139 	ldw x,#PH_BASE 
      002DD5 4F               [ 1] 4140 	clr a 
      002DD6 81               [ 4] 4141 	ret 
      002DD7                       4142 const_porti:
      002DD7 AE 50 28         [ 2] 4143 	ldw x,#PI_BASE 
      002DDA 4F               [ 1] 4144 	clr a 
      002DDB 81               [ 4] 4145 	ret 
                                   4146 
                                   4147 ;-------------------------------
                                   4148 ; following return constant 
                                   4149 ; related to GPIO register offset 
                                   4150 ;---------------------------------
      002DDC                       4151 const_odr:
      002DDC 4F               [ 1] 4152 	clr a 
      002DDD AE 00 00         [ 2] 4153 	ldw x,#GPIO_ODR
      002DE0 81               [ 4] 4154 	ret 
      002DE1                       4155 const_idr:
      002DE1 4F               [ 1] 4156 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002DE2 AE 00 01         [ 2] 4157 	ldw x,#GPIO_IDR
      002DE5 81               [ 4] 4158 	ret 
      002DE6                       4159 const_ddr:
      002DE6 4F               [ 1] 4160 	clr a
      002DE7 AE 00 02         [ 2] 4161 	ldw x,#GPIO_DDR
      002DEA 81               [ 4] 4162 	ret 
      002DEB                       4163 const_cr1:
      002DEB 4F               [ 1] 4164 	clr a 
      002DEC AE 00 03         [ 2] 4165 	ldw x,#GPIO_CR1
      002DEF 81               [ 4] 4166 	ret 
      002DF0                       4167 const_cr2:
      002DF0 4F               [ 1] 4168 	clr a
      002DF1 AE 00 04         [ 2] 4169 	ldw x,#GPIO_CR2
      002DF4 81               [ 4] 4170 	ret 
                                   4171 ;-------------------------
                                   4172 ; BASIC: POUT 
                                   4173 ;  constant for port mode
                                   4174 ;  used by PMODE 
                                   4175 ;  to set pin as output
                                   4176 ;------------------------
      002DF5                       4177 const_output:
      002DF5 4F               [ 1] 4178 	clr a 
      002DF6 AE 00 01         [ 2] 4179 	ldw x,#OUTP
      002DF9 81               [ 4] 4180 	ret 
                                   4181 
                                   4182 ;-------------------------
                                   4183 ; BASIC: PINP 
                                   4184 ;  constant for port mode
                                   4185 ;  used by PMODE 
                                   4186 ;  to set pin as input
                                   4187 ;------------------------
      002DFA                       4188 const_input:
      002DFA 4F               [ 1] 4189 	clr a  
      002DFB AE 00 00         [ 2] 4190 	ldw x,#INP 
      002DFE 81               [ 4] 4191 	ret 
                                   4192 	
                                   4193 ;-----------------------
                                   4194 ; memory area constants
                                   4195 ;-----------------------
      002DFF                       4196 const_eeprom_base:
      002DFF 4F               [ 1] 4197 	clr a  
      002E00 AE 40 00         [ 2] 4198 	ldw x,#EEPROM_BASE 
      002E03 81               [ 4] 4199 	ret 
                                   4200 
                                   4201 ;---------------------------
                                   4202 ; BASIC: DATA 
                                   4203 ; when the interpreter find 
                                   4204 ; a DATA line it skip it.
                                   4205 ;---------------------------
      002E04                       4206 data:
      002E04 55 00 03 00 01   [ 1] 4207 	mov in,count 
      002E09 81               [ 4] 4208 	ret 
                                   4209 
                                   4210 ;------------------------------
                                   4211 ; check if it is a DATA line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



                                   4212 ; input: 
                                   4213 ;    X    line address 
                                   4214 ; output:
                                   4215 ;    Z    set if DATA line 
                                   4216 ;----------------------------
      002E0A                       4217 is_data_line:
      002E0A EE 04            [ 2] 4218 	ldw x,(4,x)
      002E0C DE 33 71         [ 2] 4219 	ldw x,(code_addr,x)
      002E0F A3 2E 04         [ 2] 4220 	cpw x,#data 
      002E12 81               [ 4] 4221 	ret 
                                   4222 
                                   4223 ;---------------------------
                                   4224 ; set DATA pointer at line# 
                                   4225 ; specified by X 
                                   4226 ;---------------------------
      002E13                       4227 data_line:
      002E13 90 89            [ 2] 4228 	pushw y 
      002E15 4F               [ 1] 4229 	clr a 
      002E16 CD 0C 89         [ 4] 4230 	call search_lineno
      002E19 5D               [ 2] 4231 	tnzw x 
      002E1A 26 05            [ 1] 4232 	jrne 3$
      002E1C A6 05            [ 1] 4233 2$:	ld a,#ERR_NO_LINE 
      002E1E CC 16 A2         [ 2] 4234 	jp tb_error
      002E21                       4235 3$: ; check if valid data line 
      002E21 90 93            [ 1] 4236     ldw y,x 
      002E23 CD 2E 0A         [ 4] 4237 	call is_data_line 
      002E26 26 F4            [ 1] 4238 	jrne 2$ 
      002E28                       4239 set_data_ptr: 	
      002E28 90 CF 00 06      [ 2] 4240 	ldw data_ptr,y
      002E2C 90 E6 02         [ 1] 4241 	ld a,(2,y)
      002E2F C7 00 09         [ 1] 4242 	ld data_len,a 
      002E32 35 06 00 08      [ 1] 4243 	mov data_ofs,#FIRST_DATA_ITEM 
      002E36 90 85            [ 2] 4244 	popw y 
      002E38 81               [ 4] 4245 	ret
                                   4246 
                                   4247 ;---------------------------------
                                   4248 ; BASIC: RESTORE [line#]
                                   4249 ; set data_ptr to first data line
                                   4250 ; if no DATA found pointer set to
                                   4251 ; zero.
                                   4252 ; if a line# is given as argument 
                                   4253 ; a data line with that number 
                                   4254 ; is searched and the data pointer 
                                   4255 ; is set to it. If there is no 
                                   4256 ; data line with that number 
                                   4257 ; the program is interrupted. 
                                   4258 ;---------------------------------
      002E39                       4259 restore:
      002E39 72 5F 00 06      [ 1] 4260 	clr data_ptr 
      002E3D 72 5F 00 07      [ 1] 4261 	clr data_ptr+1
      002E41 72 5F 00 08      [ 1] 4262 	clr data_ofs 
      002E45 72 5F 00 09      [ 1] 4263 	clr data_len
      002E49 CD 17 A1         [ 4] 4264 	call next_token 
      002E4C A1 84            [ 1] 4265 	cp a,#TK_INTGR
      002E4E 26 05            [ 1] 4266 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002E50 CD 17 E0         [ 4] 4267 	call get_int24 
      002E53 20 BE            [ 2] 4268 	jra data_line 
      002E55                       4269 0$:	
      002E55                       4270 	_unget_token  
      002E55 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002E5A CE 00 1B         [ 2] 4271 	ldw x,txtbgn
      002E5D 90 89            [ 2] 4272 	pushw y 
                                   4273 ; search first DATA line 
      002E5F                       4274 data_search_loop: 	
      002E5F C3 00 1D         [ 2] 4275 	cpw x,txtend
      002E62 24 17            [ 1] 4276 	jruge restore_error 
      002E64 90 93            [ 1] 4277 	ldw y,x 
      002E66 CD 2E 0A         [ 4] 4278 	call is_data_line 
      002E69 27 BD            [ 1] 4279 	jreq set_data_ptr
      002E6B                       4280 try_next_line: 
      002E6B 93               [ 1] 4281 	ldw x,y 
      002E6C E6 02            [ 1] 4282 	ld a,(2,x)
      002E6E C7 00 0E         [ 1] 4283 	ld acc8,a 
      002E71 72 5F 00 0D      [ 1] 4284 	clr acc16 
      002E75 72 BB 00 0D      [ 2] 4285 	addw x,acc16 
      002E79 20 E4            [ 2] 4286 	jra data_search_loop
      002E7B                       4287 restore_error:	
      002E7B A6 0C            [ 1] 4288     ld a,#ERR_NO_DATA 
      002E7D CC 16 A2         [ 2] 4289 	jp tb_error 
                                   4290 
                                   4291 
                                   4292 ;---------------------------------
                                   4293 ; BASIC: READ 
                                   4294 ; return next data item | 0 
                                   4295 ;---------------------------------
                           000001  4296 	CTX_BPTR=1 
                           000003  4297 	CTX_IN=3 
                           000004  4298 	CTX_COUNT=4 
                           000005  4299 	INT24=5
                           000007  4300 	VSIZE=7 
      002E80                       4301 read:
      002E80                       4302 	_vars  VSIZE 
      002E80 52 07            [ 2]    1     sub sp,#VSIZE 
      002E82                       4303 read01:	
      002E82 C6 00 08         [ 1] 4304 	ld a,data_ofs
      002E85 C1 00 09         [ 1] 4305 	cp a,data_len 
      002E88 27 3A            [ 1] 4306 	jreq 2$ ; end of line  
      002E8A CD 1F E5         [ 4] 4307 	call save_context
      002E8D CE 00 06         [ 2] 4308 	ldw x,data_ptr 
      002E90 CF 00 04         [ 2] 4309 	ldw basicptr,x 
      002E93 55 00 08 00 01   [ 1] 4310 	mov in,data_ofs 
      002E98 55 00 09 00 03   [ 1] 4311 	mov count,data_len  
      002E9D CD 1A 81         [ 4] 4312 	call expression 
      002EA0 A1 84            [ 1] 4313 	cp a,#TK_INTGR 
      002EA2 27 03            [ 1] 4314 	jreq 1$ 
      002EA4 CC 16 A0         [ 2] 4315 	jp syntax_error 
      002EA7                       4316 1$:
      002EA7 CD 17 A1         [ 4] 4317 	call next_token ; skip comma
      002EAA CE 00 04         [ 2] 4318 	ldw x,basicptr 
      002EAD CF 00 06         [ 2] 4319 	ldw data_ptr,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002EB0 55 00 01 00 08   [ 1] 4320 	mov data_ofs,in 
      002EB5 CD 1F F5         [ 4] 4321 	call rest_context
      002EB8                       4322 	_xpop 
      002EB8 90 F6            [ 1]    1     ld a,(y)
      002EBA 93               [ 1]    2     ldw x,y 
      002EBB EE 01            [ 2]    3     ldw x,(1,x)
      002EBD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002EC1                       4323 	_drop VSIZE 
      002EC1 5B 07            [ 2]    1     addw sp,#VSIZE 
      002EC3 81               [ 4] 4324 	ret 
      002EC4                       4325 2$: ; end of line reached 
      002EC4 90 CE 00 06      [ 2] 4326 	ldw y, data_ptr 
      002EC8 72 5F 00 06      [ 1] 4327 	clr data_ptr
      002ECC 72 5F 00 07      [ 1] 4328 	clr data_ptr+1   
      002ED0 72 5F 00 08      [ 1] 4329 	clr data_ofs 
      002ED4 72 5F 00 09      [ 1] 4330 	clr data_len 
      002ED8 CD 2E 6B         [ 4] 4331 	call try_next_line 
      002EDB 20 A5            [ 2] 4332 	jra read01
                                   4333 
                                   4334 
                                   4335 ;---------------------------------
                                   4336 ; BASIC: SPIEN clkdiv, 0|1  
                                   4337 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4338 ; if clkdiv==-1 disable SPI
                                   4339 ; 0|1 -> disable|enable  
                                   4340 ;--------------------------------- 
                           000005  4341 SPI_CS_BIT=5
      002EDD                       4342 spi_enable:
      002EDD CD 19 61         [ 4] 4343 	call arg_list 
      002EE0 A1 02            [ 1] 4344 	cp a,#2
      002EE2 27 03            [ 1] 4345 	jreq 1$
      002EE4 CC 16 A0         [ 2] 4346 	jp syntax_error 
      002EE7                       4347 1$: 
      002EE7 72 12 50 C7      [ 1] 4348 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002EEB 85               [ 2] 4349 	popw x  
      002EEC 5D               [ 2] 4350 	tnzw x 
      002EED 27 21            [ 1] 4351 	jreq spi_disable 
      002EEF 85               [ 2] 4352 	popw x 
      002EF0 A6 08            [ 1] 4353 	ld a,#(1<<SPI_CR1_BR)
      002EF2 42               [ 4] 4354 	mul x,a 
      002EF3 9F               [ 1] 4355 	ld a,xl 
      002EF4 C7 52 00         [ 1] 4356 	ld SPI_CR1,a 
                                   4357 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002EF7 72 1A 50 14      [ 1] 4358 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002EFB 72 1A 50 16      [ 1] 4359 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4360 ; configure SPI as master mode 0.	
      002EFF 72 14 52 00      [ 1] 4361 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4362 ; ~CS line controlled by sofware 	
      002F03 72 12 52 01      [ 1] 4363 	bset SPI_CR2,#SPI_CR2_SSM 
      002F07 72 10 52 01      [ 1] 4364     bset SPI_CR2,#SPI_CR2_SSI 
                                   4365 ; enable SPI
      002F0B 72 1C 52 00      [ 1] 4366 	bset SPI_CR1,#SPI_CR1_SPE 	
      002F0F 81               [ 4] 4367 	ret 
      002F10                       4368 spi_disable:
      002F10                       4369 	_drop #2; throw first argument.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



      002F10 5B 02            [ 2]    1     addw sp,##2 
                                   4370 ; wait spi idle 
      002F12 A6 82            [ 1] 4371 1$:	ld a,#0x82 
      002F14 C4 52 03         [ 1] 4372 	and a,SPI_SR
      002F17 A1 02            [ 1] 4373 	cp a,#2 
      002F19 26 F7            [ 1] 4374 	jrne 1$
      002F1B 72 1D 52 00      [ 1] 4375 	bres SPI_CR1,#SPI_CR1_SPE
      002F1F 72 13 50 C7      [ 1] 4376 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002F23 72 1B 50 16      [ 1] 4377 	bres PE_DDR,#SPI_CS_BIT 
      002F27 81               [ 4] 4378 	ret 
                                   4379 
      002F28                       4380 spi_clear_error:
      002F28 A6 78            [ 1] 4381 	ld a,#0x78 
      002F2A C5 52 03         [ 1] 4382 	bcp a,SPI_SR 
      002F2D 27 04            [ 1] 4383 	jreq 1$
      002F2F 72 5F 52 03      [ 1] 4384 	clr SPI_SR 
      002F33 81               [ 4] 4385 1$: ret 
                                   4386 
      002F34                       4387 spi_send_byte:
      002F34 88               [ 1] 4388 	push a 
      002F35 CD 2F 28         [ 4] 4389 	call spi_clear_error
      002F38 84               [ 1] 4390 	pop a 
      002F39 72 03 52 03 FB   [ 2] 4391 	btjf SPI_SR,#SPI_SR_TXE,.
      002F3E C7 52 04         [ 1] 4392 	ld SPI_DR,a
      002F41 72 01 52 03 FB   [ 2] 4393 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002F46 C6 52 04         [ 1] 4394 	ld a,SPI_DR 
      002F49 81               [ 4] 4395 	ret 
                                   4396 
      002F4A                       4397 spi_rcv_byte:
      002F4A A6 FF            [ 1] 4398 	ld a,#255
      002F4C 72 01 52 03 E3   [ 2] 4399 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002F51 C6 52 04         [ 1] 4400 	ld a,SPI_DR 
      002F54 81               [ 4] 4401 	ret
                                   4402 
                                   4403 ;------------------------------
                                   4404 ; BASIC: SPIWR byte [,byte]
                                   4405 ; write 1 or more byte
                                   4406 ;------------------------------
      002F55                       4407 spi_write:
      002F55 CD 1A 81         [ 4] 4408 	call expression
      002F58 A1 84            [ 1] 4409 	cp a,#TK_INTGR 
      002F5A 27 03            [ 1] 4410 	jreq 1$
      002F5C CC 16 A0         [ 2] 4411 	jp syntax_error 
      002F5F                       4412 1$:	
      002F5F 9F               [ 1] 4413 	ld a,xl 
      002F60 CD 2F 34         [ 4] 4414 	call spi_send_byte 
      002F63 CD 17 A1         [ 4] 4415 	call next_token 
      002F66 A1 08            [ 1] 4416 	cp a,#TK_COMMA 
      002F68 26 02            [ 1] 4417 	jrne 2$ 
      002F6A 20 E9            [ 2] 4418 	jra spi_write 
      002F6C 4D               [ 1] 4419 2$:	tnz a 
      002F6D 27 05            [ 1] 4420 	jreq 3$
      002F6F                       4421 	_unget_token  
      002F6F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002F74 81               [ 4] 4422 3$:	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



                                   4423 
                                   4424 
                                   4425 ;-------------------------------
                                   4426 ; BASIC: SPIRD 	
                                   4427 ; read one byte from SPI 
                                   4428 ;-------------------------------
      002F75                       4429 spi_read:
      002F75 CD 2F 4A         [ 4] 4430 	call spi_rcv_byte 
      002F78 5F               [ 1] 4431 	clrw x 
      002F79 97               [ 1] 4432 	ld xl,a 
      002F7A 4F               [ 1] 4433 	clr a  
      002F7B 81               [ 4] 4434 	ret 
                                   4435 
                                   4436 ;------------------------------
                                   4437 ; BASIC: SPISEL 0|1 
                                   4438 ; set state of ~CS line
                                   4439 ; 0|1 deselect|select  
                                   4440 ;------------------------------
      002F7C                       4441 spi_select:
      002F7C CD 17 A1         [ 4] 4442 	call next_token 
      002F7F A1 84            [ 1] 4443 	cp a,#TK_INTGR 
      002F81 27 03            [ 1] 4444 	jreq 1$
      002F83 CC 16 A0         [ 2] 4445 	jp syntax_error 
      002F86 5D               [ 2] 4446 1$: tnzw x  
      002F87 27 05            [ 1] 4447 	jreq cs_high 
      002F89 72 1B 50 14      [ 1] 4448 	bres PE_ODR,#SPI_CS_BIT
      002F8D 81               [ 4] 4449 	ret 
      002F8E                       4450 cs_high: 
      002F8E 72 1A 50 14      [ 1] 4451 	bset PE_ODR,#SPI_CS_BIT
      002F92 81               [ 4] 4452 	ret 
                                   4453 
                                   4454 ;-------------------------------
                                   4455 ; BASIC: PAD 
                                   4456 ; Return pad buffer address.
                                   4457 ;------------------------------
      002F93                       4458 pad_ref:
      002F93 AE 16 B8         [ 2] 4459 	ldw x,#pad 
      002F96 4F               [ 1] 4460 	clr a
      002F97 81               [ 4] 4461 	ret 
                                   4462 
                                   4463 
                                   4464 ;------------------------------
                                   4465 ; logical operators dictonary 
                                   4466 ; format:
                                   4467 ;    link: 2 bytes 
                                   4468 ;    name_length: 1 byte 
                                   4469 ;    op_name: 4 char max 
                                   4470 ;    op_id: # byte
                                   4471 ;-------------------------------
                                   4472 	.macro _op_entry len,name,id 
                                   4473 	.word OP_LINK 
                                   4474 	OP_LINK=.
                                   4475 name:
                                   4476 	.byte len 
                                   4477 	.asciz "name" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



                                   4478 	.byte  id 
                                   4479 	.endm 
                                   4480 
                           000000  4481 	OP_LINK=0 
      002F98                       4482 op_end:
      002F98                       4483 	_op_entry 3,XOR,TK_XOR 
      002F98 00 00                    1 	.word OP_LINK 
                           002F9A     2 	OP_LINK=.
      002F9A                          3 XOR:
      002F9A 03                       4 	.byte 3 
      002F9B 58 4F 52 00              5 	.asciz "XOR" 
      002F9F 89                       6 	.byte  TK_XOR 
      002FA0                       4484 	_op_entry 2,OR,TK_OR 
      002FA0 2F 9A                    1 	.word OP_LINK 
                           002FA2     2 	OP_LINK=.
      002FA2                          3 OR:
      002FA2 02                       4 	.byte 2 
      002FA3 4F 52 00                 5 	.asciz "OR" 
      002FA6 88                       6 	.byte  TK_OR 
      002FA7                       4485 op_dict:	
      002FA7                       4486 	_op_entry 3,AND,TK_AND 
      002FA7 2F A2                    1 	.word OP_LINK 
                           002FA9     2 	OP_LINK=.
      002FA9                          3 AND:
      002FA9 03                       4 	.byte 3 
      002FAA 41 4E 44 00              5 	.asciz "AND" 
      002FAE 87                       6 	.byte  TK_AND 
                                   4487 
                                   4488 ;------------------------------
                                   4489 ;  search operator dictonary 
                                   4490 ;  input:
                                   4491 ;     x    *name 
                                   4492 ;  output:
                                   4493 ;     A     op_id | 0 
                                   4494 ;-----------------------------
                           000001  4495 	NLEN=1 
                           000002  4496 	NAME=2
                           000004  4497 	XSAVE=4
                           000005  4498 	VSIZE=5 
      002FAF                       4499 search_op_dict:
      002FAF                       4500 	_vars VSIZE 
      002FAF 52 05            [ 2]    1     sub sp,#VSIZE 
      002FB1 1F 02            [ 2] 4501 	ldw (NAME,sp),x 
      002FB3 CD 13 E4         [ 4] 4502 	call strlen 
      002FB6 6B 01            [ 1] 4503 	ld (NLEN,sp),a 
      002FB8 AE 2F A9         [ 2] 4504 	ldw x,#op_dict+2
      002FBB 1F 04            [ 2] 4505 1$:	ldw (XSAVE,sp),x 
      002FBD F6               [ 1] 4506 	ld a,(x)
      002FBE 11 01            [ 1] 4507 	cp a,(NLEN,sp)
      002FC0 27 0A            [ 1] 4508 	jreq 3$
                                   4509 ; skip over this one 	
      002FC2 1E 04            [ 2] 4510 2$:	ldw x,(XSAVE,sp)
      002FC4 1D 00 02         [ 2] 4511 	subw x,#2 
      002FC7 FE               [ 2] 4512 	ldw x,(x) ; link 
      002FC8 27 1A            [ 1] 4513 	jreq 8$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      002FCA 20 EF            [ 2] 4514 	jra 1$
      002FCC                       4515 3$: ; len good compare string 
      002FCC 5C               [ 1] 4516 	incw x  
      002FCD 16 02            [ 2] 4517 	ldw y,(NAME,sp)
      002FCF CD 13 EF         [ 4] 4518 	call strcmp 
      002FD2 27 EE            [ 1] 4519 	jreq 2$ 
                                   4520 ; found 
      002FD4 1E 04            [ 2] 4521 	ldw x,(XSAVE,sp)
                                   4522 ; skip to id field 
      002FD6 F6               [ 1] 4523 	ld a,(x) ; len field 
      002FD7 AB 02            [ 1] 4524 	add a,#2 ; len and 0 at end of string 
      002FD9 88               [ 1] 4525 	push a 
      002FDA 4B 00            [ 1] 4526 	push #0 
      002FDC 72 FB 01         [ 2] 4527 	addw x,(1,sp)
      002FDF                       4528 	_drop 2 
      002FDF 5B 02            [ 2]    1     addw sp,#2 
      002FE1 F6               [ 1] 4529 	ld a,(x)
      002FE2 20 01            [ 2] 4530 	jra 9$ 
      002FE4                       4531 8$: ; not found 	
      002FE4 4F               [ 1] 4532 	clr a 	
      002FE5                       4533 9$:	_drop VSIZE 
      002FE5 5B 05            [ 2]    1     addw sp,#VSIZE 
      002FE7 81               [ 4] 4534 	ret 
                                   4535 
                                   4536 
                                   4537 ;------------------------------
                                   4538 ;      dictionary 
                                   4539 ; format:
                                   4540 ;   link:   2 bytes 
                                   4541 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4542 ;   cmd_name: 16 byte max 
                                   4543 ;   cmd_index: 2 bytes 
                                   4544 ;------------------------------
                                   4545 	.macro _dict_entry len,name,cmd_idx 
                                   4546 	.word LINK 
                                   4547 	LINK=.
                                   4548 name:
                                   4549 	.byte len 	
                                   4550 	.ascii "name"
                                   4551 	.word cmd_idx 
                                   4552 	.endm 
                                   4553 
                           000000  4554 	LINK=0
                                   4555 ; respect alphabetic order for BASIC names from Z-A
                                   4556 ; this sort order is for a cleaner WORDS cmd output. 	
      002FE8                       4557 kword_end:
                                   4558 ;	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      002FE8                       4559 	_dict_entry,5,WRITE,WRITE_IDX;write  
      002FE8 00 00                    1 	.word LINK 
                           002FEA     2 	LINK=.
      002FEA                          3 WRITE:
      002FEA 05                       4 	.byte 5 	
      002FEB 57 52 49 54 45           5 	.ascii "WRITE"
      002FF0 00 BA                    6 	.word WRITE_IDX 
      002FF2                       4560 	_dict_entry,5,WORDS,WORDS_IDX;words 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



      002FF2 2F EA                    1 	.word LINK 
                           002FF4     2 	LINK=.
      002FF4                          3 WORDS:
      002FF4 05                       4 	.byte 5 	
      002FF5 57 4F 52 44 53           5 	.ascii "WORDS"
      002FFA 00 B8                    6 	.word WORDS_IDX 
      002FFC                       4561 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      002FFC 2F F4                    1 	.word LINK 
                           002FFE     2 	LINK=.
      002FFE                          3 WAIT:
      002FFE 04                       4 	.byte 4 	
      002FFF 57 41 49 54              5 	.ascii "WAIT"
      003003 00 B6                    6 	.word WAIT_IDX 
      003005                       4562 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      003005 2F FE                    1 	.word LINK 
                           003007     2 	LINK=.
      003007                          3 USR:
      003007 43                       4 	.byte 3+F_IFUNC 	
      003008 55 53 52                 5 	.ascii "USR"
      00300B 00 B4                    6 	.word USR_IDX 
      00300D                       4563 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      00300D 30 07                    1 	.word LINK 
                           00300F     2 	LINK=.
      00300F                          3 UNTIL:
      00300F 05                       4 	.byte 5 	
      003010 55 4E 54 49 4C           5 	.ascii "UNTIL"
      003015 00 B2                    6 	.word UNTIL_IDX 
      003017                       4564 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      003017 30 0F                    1 	.word LINK 
                           003019     2 	LINK=.
      003019                          3 UFLASH:
      003019 46                       4 	.byte 6+F_IFUNC 	
      00301A 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      003020 00 B0                    6 	.word UFLASH_IDX 
      003022                       4565 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      003022 30 19                    1 	.word LINK 
                           003024     2 	LINK=.
      003024                          3 UBOUND:
      003024 46                       4 	.byte 6+F_IFUNC 	
      003025 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00302B 00 AE                    6 	.word UBOUND_IDX 
      00302D                       4566 	_dict_entry,4,TONE,TONE_IDX;tone  
      00302D 30 24                    1 	.word LINK 
                           00302F     2 	LINK=.
      00302F                          3 TONE:
      00302F 04                       4 	.byte 4 	
      003030 54 4F 4E 45              5 	.ascii "TONE"
      003034 00 AC                    6 	.word TONE_IDX 
      003036                       4567 	_dict_entry,2,TO,TO_IDX;to
      003036 30 2F                    1 	.word LINK 
                           003038     2 	LINK=.
      003038                          3 TO:
      003038 02                       4 	.byte 2 	
      003039 54 4F                    5 	.ascii "TO"
      00303B 00 AA                    6 	.word TO_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



      00303D                       4568 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      00303D 30 38                    1 	.word LINK 
                           00303F     2 	LINK=.
      00303F                          3 TIMER:
      00303F 05                       4 	.byte 5 	
      003040 54 49 4D 45 52           5 	.ascii "TIMER"
      003045 00 A6                    6 	.word TIMER_IDX 
      003047                       4569 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      003047 30 3F                    1 	.word LINK 
                           003049     2 	LINK=.
      003049                          3 TIMEOUT:
      003049 47                       4 	.byte 7+F_IFUNC 	
      00304A 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      003051 00 A8                    6 	.word TMROUT_IDX 
      003053                       4570 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      003053 30 49                    1 	.word LINK 
                           003055     2 	LINK=.
      003055                          3 TICKS:
      003055 45                       4 	.byte 5+F_IFUNC 	
      003056 54 49 43 4B 53           5 	.ascii "TICKS"
      00305B 00 A4                    6 	.word TICKS_IDX 
      00305D                       4571 	_dict_entry,4,STOP,STOP_IDX;stop 
      00305D 30 55                    1 	.word LINK 
                           00305F     2 	LINK=.
      00305F                          3 STOP:
      00305F 04                       4 	.byte 4 	
      003060 53 54 4F 50              5 	.ascii "STOP"
      003064 00 A2                    6 	.word STOP_IDX 
      003066                       4572 	_dict_entry,4,STEP,STEP_IDX;step 
      003066 30 5F                    1 	.word LINK 
                           003068     2 	LINK=.
      003068                          3 STEP:
      003068 04                       4 	.byte 4 	
      003069 53 54 45 50              5 	.ascii "STEP"
      00306D 00 A0                    6 	.word STEP_IDX 
      00306F                       4573 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      00306F 30 68                    1 	.word LINK 
                           003071     2 	LINK=.
      003071                          3 SPIWR:
      003071 05                       4 	.byte 5 	
      003072 53 50 49 57 52           5 	.ascii "SPIWR"
      003077 00 9E                    6 	.word SPIWR_IDX 
      003079                       4574 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      003079 30 71                    1 	.word LINK 
                           00307B     2 	LINK=.
      00307B                          3 SPISEL:
      00307B 06                       4 	.byte 6 	
      00307C 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      003082 00 9C                    6 	.word SPISEL_IDX 
      003084                       4575 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      003084 30 7B                    1 	.word LINK 
                           003086     2 	LINK=.
      003086                          3 SPIRD:
      003086 45                       4 	.byte 5+F_IFUNC 	
      003087 53 50 49 52 44           5 	.ascii "SPIRD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      00308C 00 98                    6 	.word SPIRD_IDX 
      00308E                       4576 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      00308E 30 86                    1 	.word LINK 
                           003090     2 	LINK=.
      003090                          3 SPIEN:
      003090 05                       4 	.byte 5 	
      003091 53 50 49 45 4E           5 	.ascii "SPIEN"
      003096 00 9A                    6 	.word SPIEN_IDX 
      003098                       4577 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      003098 30 90                    1 	.word LINK 
                           00309A     2 	LINK=.
      00309A                          3 SLEEP:
      00309A 05                       4 	.byte 5 	
      00309B 53 4C 45 45 50           5 	.ascii "SLEEP"
      0030A0 00 96                    6 	.word SLEEP_IDX 
      0030A2                       4578     _dict_entry,4,SIZE,SIZE_IDX; cmd_size 
      0030A2 30 9A                    1 	.word LINK 
                           0030A4     2 	LINK=.
      0030A4                          3 SIZE:
      0030A4 04                       4 	.byte 4 	
      0030A5 53 49 5A 45              5 	.ascii "SIZE"
      0030A9 00 BE                    6 	.word SIZE_IDX 
      0030AB                       4579 	_dict_entry,4,SAVE,SAVE_IDX ;save_app 
      0030AB 30 A4                    1 	.word LINK 
                           0030AD     2 	LINK=.
      0030AD                          3 SAVE:
      0030AD 04                       4 	.byte 4 	
      0030AE 53 41 56 45              5 	.ascii "SAVE"
      0030B2 00 34                    6 	.word SAVE_IDX 
      0030B4                       4580 	_dict_entry 3,RUN,RUN_IDX;run
      0030B4 30 AD                    1 	.word LINK 
                           0030B6     2 	LINK=.
      0030B6                          3 RUN:
      0030B6 03                       4 	.byte 3 	
      0030B7 52 55 4E                 5 	.ascii "RUN"
      0030BA 00 92                    6 	.word RUN_IDX 
      0030BC                       4581 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      0030BC 30 B6                    1 	.word LINK 
                           0030BE     2 	LINK=.
      0030BE                          3 RSHIFT:
      0030BE 46                       4 	.byte 6+F_IFUNC 	
      0030BF 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0030C5 00 90                    6 	.word RSHIFT_IDX 
      0030C7                       4582 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      0030C7 30 BE                    1 	.word LINK 
                           0030C9     2 	LINK=.
      0030C9                          3 RND:
      0030C9 43                       4 	.byte 3+F_IFUNC 	
      0030CA 52 4E 44                 5 	.ascii "RND"
      0030CD 00 8E                    6 	.word RND_IDX 
      0030CF                       4583 	_dict_entry,6,RETURN,RET_IDX;return 
      0030CF 30 C9                    1 	.word LINK 
                           0030D1     2 	LINK=.
      0030D1                          3 RETURN:
      0030D1 06                       4 	.byte 6 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      0030D2 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0030D8 00 8C                    6 	.word RET_IDX 
      0030DA                       4584 	_dict_entry,7,RESTORE,REST_IDX;restore 
      0030DA 30 D1                    1 	.word LINK 
                           0030DC     2 	LINK=.
      0030DC                          3 RESTORE:
      0030DC 07                       4 	.byte 7 	
      0030DD 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0030E4 00 8A                    6 	.word REST_IDX 
      0030E6                       4585 	_dict_entry 3,REM,REM_IDX;remark 
      0030E6 30 DC                    1 	.word LINK 
                           0030E8     2 	LINK=.
      0030E8                          3 REM:
      0030E8 03                       4 	.byte 3 	
      0030E9 52 45 4D                 5 	.ascii "REM"
      0030EC 00 88                    6 	.word REM_IDX 
      0030EE                       4586 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      0030EE 30 E8                    1 	.word LINK 
                           0030F0     2 	LINK=.
      0030F0                          3 REBOOT:
      0030F0 06                       4 	.byte 6 	
      0030F1 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0030F7 00 86                    6 	.word RBT_IDX 
      0030F9                       4587 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      0030F9 30 F0                    1 	.word LINK 
                           0030FB     2 	LINK=.
      0030FB                          3 READ:
      0030FB 44                       4 	.byte 4+F_IFUNC 	
      0030FC 52 45 41 44              5 	.ascii "READ"
      003100 00 84                    6 	.word READ_IDX 
      003102                       4588 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      003102 30 FB                    1 	.word LINK 
                           003104     2 	LINK=.
      003104                          3 QKEY:
      003104 44                       4 	.byte 4+F_IFUNC 	
      003105 51 4B 45 59              5 	.ascii "QKEY"
      003109 00 82                    6 	.word QKEY_IDX 
      00310B                       4589 	_dict_entry,5+F_IFUNC,PORTI,PRTI_IDX;const_porti 
      00310B 31 04                    1 	.word LINK 
                           00310D     2 	LINK=.
      00310D                          3 PORTI:
      00310D 45                       4 	.byte 5+F_IFUNC 	
      00310E 50 4F 52 54 49           5 	.ascii "PORTI"
      003113 00 80                    6 	.word PRTI_IDX 
      003115                       4590 	_dict_entry,5+F_IFUNC,PORTH,PRTH_IDX;const_porth 
      003115 31 0D                    1 	.word LINK 
                           003117     2 	LINK=.
      003117                          3 PORTH:
      003117 45                       4 	.byte 5+F_IFUNC 	
      003118 50 4F 52 54 48           5 	.ascii "PORTH"
      00311D 00 7E                    6 	.word PRTH_IDX 
      00311F                       4591 	_dict_entry,5+F_IFUNC,PORTG,PRTG_IDX;const_portg 
      00311F 31 17                    1 	.word LINK 
                           003121     2 	LINK=.
      003121                          3 PORTG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



      003121 45                       4 	.byte 5+F_IFUNC 	
      003122 50 4F 52 54 47           5 	.ascii "PORTG"
      003127 00 7C                    6 	.word PRTG_IDX 
      003129                       4592 	_dict_entry,5+F_IFUNC,PORTF,PRTF_IDX;const_portf
      003129 31 21                    1 	.word LINK 
                           00312B     2 	LINK=.
      00312B                          3 PORTF:
      00312B 45                       4 	.byte 5+F_IFUNC 	
      00312C 50 4F 52 54 46           5 	.ascii "PORTF"
      003131 00 7A                    6 	.word PRTF_IDX 
      003133                       4593 	_dict_entry,5+F_IFUNC,PORTE,PRTE_IDX;const_porte
      003133 31 2B                    1 	.word LINK 
                           003135     2 	LINK=.
      003135                          3 PORTE:
      003135 45                       4 	.byte 5+F_IFUNC 	
      003136 50 4F 52 54 45           5 	.ascii "PORTE"
      00313B 00 78                    6 	.word PRTE_IDX 
      00313D                       4594 	_dict_entry,5+F_IFUNC,PORTD,PRTD_IDX;const_portd
      00313D 31 35                    1 	.word LINK 
                           00313F     2 	LINK=.
      00313F                          3 PORTD:
      00313F 45                       4 	.byte 5+F_IFUNC 	
      003140 50 4F 52 54 44           5 	.ascii "PORTD"
      003145 00 76                    6 	.word PRTD_IDX 
      003147                       4595 	_dict_entry,5+F_IFUNC,PORTC,PRTC_IDX;const_portc
      003147 31 3F                    1 	.word LINK 
                           003149     2 	LINK=.
      003149                          3 PORTC:
      003149 45                       4 	.byte 5+F_IFUNC 	
      00314A 50 4F 52 54 43           5 	.ascii "PORTC"
      00314F 00 74                    6 	.word PRTC_IDX 
      003151                       4596 	_dict_entry,5+F_IFUNC,PORTB,PRTB_IDX;const_portb
      003151 31 49                    1 	.word LINK 
                           003153     2 	LINK=.
      003153                          3 PORTB:
      003153 45                       4 	.byte 5+F_IFUNC 	
      003154 50 4F 52 54 42           5 	.ascii "PORTB"
      003159 00 72                    6 	.word PRTB_IDX 
      00315B                       4597 	_dict_entry,5+F_IFUNC,PORTA,PRTA_IDX;const_porta 
      00315B 31 53                    1 	.word LINK 
                           00315D     2 	LINK=.
      00315D                          3 PORTA:
      00315D 45                       4 	.byte 5+F_IFUNC 	
      00315E 50 4F 52 54 41           5 	.ascii "PORTA"
      003163 00 70                    6 	.word PRTA_IDX 
      003165                       4598 	_dict_entry 5,PRINT,PRT_IDX;print 
      003165 31 5D                    1 	.word LINK 
                           003167     2 	LINK=.
      003167                          3 PRINT:
      003167 05                       4 	.byte 5 	
      003168 50 52 49 4E 54           5 	.ascii "PRINT"
      00316D 00 6E                    6 	.word PRT_IDX 
      00316F                       4599 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      00316F 31 67                    1 	.word LINK 
                           003171     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      003171                          3 POUT:
      003171 44                       4 	.byte 4+F_IFUNC 	
      003172 50 4F 55 54              5 	.ascii "POUT"
      003176 00 6C                    6 	.word POUT_IDX 
      003178                       4600 	_dict_entry,4,POKE,POKE_IDX;poke 
      003178 31 71                    1 	.word LINK 
                           00317A     2 	LINK=.
      00317A                          3 POKE:
      00317A 04                       4 	.byte 4 	
      00317B 50 4F 4B 45              5 	.ascii "POKE"
      00317F 00 6A                    6 	.word POKE_IDX 
      003181                       4601 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      003181 31 7A                    1 	.word LINK 
                           003183     2 	LINK=.
      003183                          3 PMODE:
      003183 05                       4 	.byte 5 	
      003184 50 4D 4F 44 45           5 	.ascii "PMODE"
      003189 00 64                    6 	.word PMODE_IDX 
      00318B                       4602 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      00318B 31 83                    1 	.word LINK 
                           00318D     2 	LINK=.
      00318D                          3 PINP:
      00318D 44                       4 	.byte 4+F_IFUNC 	
      00318E 50 49 4E 50              5 	.ascii "PINP"
      003192 00 68                    6 	.word PINP_IDX 
      003194                       4603 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      003194 31 8D                    1 	.word LINK 
                           003196     2 	LINK=.
      003196                          3 PEEK:
      003196 44                       4 	.byte 4+F_IFUNC 	
      003197 50 45 45 4B              5 	.ascii "PEEK"
      00319B 00 66                    6 	.word PEEK_IDX 
      00319D                       4604 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      00319D 31 96                    1 	.word LINK 
                           00319F     2 	LINK=.
      00319F                          3 PAUSE:
      00319F 05                       4 	.byte 5 	
      0031A0 50 41 55 53 45           5 	.ascii "PAUSE"
      0031A5 00 62                    6 	.word PAUSE_IDX 
      0031A7                       4605 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      0031A7 31 9F                    1 	.word LINK 
                           0031A9     2 	LINK=.
      0031A9                          3 PAD:
      0031A9 43                       4 	.byte 3+F_IFUNC 	
      0031AA 50 41 44                 5 	.ascii "PAD"
      0031AD 00 60                    6 	.word PAD_IDX 
                                   4606 ;	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      0031AF                       4607 	_dict_entry,2,ON,ON_IDX; cmd_on 
      0031AF 31 A9                    1 	.word LINK 
                           0031B1     2 	LINK=.
      0031B1                          3 ON:
      0031B1 02                       4 	.byte 2 	
      0031B2 4F 4E                    5 	.ascii "ON"
      0031B4 00 C0                    6 	.word ON_IDX 
      0031B6                       4608 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0031B6 31 B1                    1 	.word LINK 
                           0031B8     2 	LINK=.
      0031B8                          3 ODR:
      0031B8 43                       4 	.byte 3+F_IFUNC 	
      0031B9 4F 44 52                 5 	.ascii "ODR"
      0031BC 00 5C                    6 	.word ODR_IDX 
      0031BE                       4609 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      0031BE 31 B8                    1 	.word LINK 
                           0031C0     2 	LINK=.
      0031C0                          3 NOT:
      0031C0 43                       4 	.byte 3+F_IFUNC 	
      0031C1 4E 4F 54                 5 	.ascii "NOT"
      0031C4 00 5A                    6 	.word NOT_IDX 
      0031C6                       4610 	_dict_entry,4,NEXT,NEXT_IDX;next 
      0031C6 31 C0                    1 	.word LINK 
                           0031C8     2 	LINK=.
      0031C8                          3 NEXT:
      0031C8 04                       4 	.byte 4 	
      0031C9 4E 45 58 54              5 	.ascii "NEXT"
      0031CD 00 56                    6 	.word NEXT_IDX 
      0031CF                       4611 	_dict_entry,3,NEW,NEW_IDX;new
      0031CF 31 C8                    1 	.word LINK 
                           0031D1     2 	LINK=.
      0031D1                          3 NEW:
      0031D1 03                       4 	.byte 3 	
      0031D2 4E 45 57                 5 	.ascii "NEW"
      0031D5 00 58                    6 	.word NEW_IDX 
                                   4612 ;	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      0031D7                       4613 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      0031D7 31 D1                    1 	.word LINK 
                           0031D9     2 	LINK=.
      0031D9                          3 LSHIFT:
      0031D9 46                       4 	.byte 6+F_IFUNC 	
      0031DA 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0031E0 00 54                    6 	.word LSHIFT_IDX 
      0031E2                       4614 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      0031E2 31 D9                    1 	.word LINK 
                           0031E4     2 	LINK=.
      0031E4                          3 LOG:
      0031E4 43                       4 	.byte 3+F_IFUNC 	
      0031E5 4C 4F 47                 5 	.ascii "LOG"
      0031E8 00 52                    6 	.word LOG_IDX 
      0031EA                       4615 	_dict_entry 4,LIST,LIST_IDX;list
      0031EA 31 E4                    1 	.word LINK 
                           0031EC     2 	LINK=.
      0031EC                          3 LIST:
      0031EC 04                       4 	.byte 4 	
      0031ED 4C 49 53 54              5 	.ascii "LIST"
      0031F1 00 50                    6 	.word LIST_IDX 
      0031F3                       4616 	_dict_entry 3,LET,LET_IDX;let 
      0031F3 31 EC                    1 	.word LINK 
                           0031F5     2 	LINK=.
      0031F5                          3 LET:
      0031F5 03                       4 	.byte 3 	
      0031F6 4C 45 54                 5 	.ascii "LET"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      0031F9 00 4E                    6 	.word LET_IDX 
      0031FB                       4617 	_dict_entry,3+F_CFUNC,KEY,KEY_IDX;key 
      0031FB 31 F5                    1 	.word LINK 
                           0031FD     2 	LINK=.
      0031FD                          3 KEY:
      0031FD 83                       4 	.byte 3+F_CFUNC 	
      0031FE 4B 45 59                 5 	.ascii "KEY"
      003201 00 4C                    6 	.word KEY_IDX 
      003203                       4618 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      003203 31 FD                    1 	.word LINK 
                           003205     2 	LINK=.
      003205                          3 IWDGREF:
      003205 07                       4 	.byte 7 	
      003206 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      00320D 00 4A                    6 	.word IWDGREF_IDX 
      00320F                       4619 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      00320F 32 05                    1 	.word LINK 
                           003211     2 	LINK=.
      003211                          3 IWDGEN:
      003211 06                       4 	.byte 6 	
      003212 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003218 00 48                    6 	.word IWDGEN_IDX 
      00321A                       4620 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      00321A 32 11                    1 	.word LINK 
                           00321C     2 	LINK=.
      00321C                          3 INVERT:
      00321C 46                       4 	.byte 6+F_IFUNC 	
      00321D 49 4E 56 45 52 54        5 	.ascii "INVERT"
      003223 00 46                    6 	.word INVERT_IDX 
      003225                       4621 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      003225 32 1C                    1 	.word LINK 
                           003227     2 	LINK=.
      003227                          3 INPUT:
      003227 05                       4 	.byte 5 	
      003228 49 4E 50 55 54           5 	.ascii "INPUT"
      00322D 00 44                    6 	.word INPUT_IDX 
      00322F                       4622 	_dict_entry,2,IF,IF_IDX;if 
      00322F 32 27                    1 	.word LINK 
                           003231     2 	LINK=.
      003231                          3 IF:
      003231 02                       4 	.byte 2 	
      003232 49 46                    5 	.ascii "IF"
      003234 00 42                    6 	.word IF_IDX 
      003236                       4623 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      003236 32 31                    1 	.word LINK 
                           003238     2 	LINK=.
      003238                          3 IDR:
      003238 43                       4 	.byte 3+F_IFUNC 	
      003239 49 44 52                 5 	.ascii "IDR"
      00323C 00 40                    6 	.word IDR_IDX 
      00323E                       4624 	_dict_entry,3,HEX,HEX_IDX;hex_base
      00323E 32 38                    1 	.word LINK 
                           003240     2 	LINK=.
      003240                          3 HEX:
      003240 03                       4 	.byte 3 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003241 48 45 58                 5 	.ascii "HEX"
      003244 00 3E                    6 	.word HEX_IDX 
      003246                       4625 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      003246 32 40                    1 	.word LINK 
                           003248     2 	LINK=.
      003248                          3 GPIO:
      003248 44                       4 	.byte 4+F_IFUNC 	
      003249 47 50 49 4F              5 	.ascii "GPIO"
      00324D 00 3C                    6 	.word GPIO_IDX 
      00324F                       4626 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      00324F 32 48                    1 	.word LINK 
                           003251     2 	LINK=.
      003251                          3 GOTO:
      003251 04                       4 	.byte 4 	
      003252 47 4F 54 4F              5 	.ascii "GOTO"
      003256 00 3A                    6 	.word GOTO_IDX 
      003258                       4627 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      003258 32 51                    1 	.word LINK 
                           00325A     2 	LINK=.
      00325A                          3 GOSUB:
      00325A 05                       4 	.byte 5 	
      00325B 47 4F 53 55 42           5 	.ascii "GOSUB"
      003260 00 38                    6 	.word GOSUB_IDX 
      003262                       4628 	_dict_entry,3,GET,GET_IDX; cmd_get 
      003262 32 5A                    1 	.word LINK 
                           003264     2 	LINK=.
      003264                          3 GET:
      003264 03                       4 	.byte 3 	
      003265 47 45 54                 5 	.ascii "GET"
      003268 00 C2                    6 	.word GET_IDX 
      00326A                       4629 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      00326A 32 64                    1 	.word LINK 
                           00326C     2 	LINK=.
      00326C                          3 FREE:
      00326C 44                       4 	.byte 4+F_IFUNC 	
      00326D 46 52 45 45              5 	.ascii "FREE"
      003271 00 94                    6 	.word FREE_IDX 
      003273                       4630 	_dict_entry,3,FOR,FOR_IDX;for 
      003273 32 6C                    1 	.word LINK 
                           003275     2 	LINK=.
      003275                          3 FOR:
      003275 03                       4 	.byte 3 	
      003276 46 4F 52                 5 	.ascii "FOR"
      003279 00 36                    6 	.word FOR_IDX 
      00327B                       4631 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      00327B 32 75                    1 	.word LINK 
                           00327D     2 	LINK=.
      00327D                          3 FCPU:
      00327D 04                       4 	.byte 4 	
      00327E 46 43 50 55              5 	.ascii "FCPU"
      003282 00 32                    6 	.word FCPU_IDX 
      003284                       4632 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      003284 32 7D                    1 	.word LINK 
                           003286     2 	LINK=.
      003286                          3 ERASE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      003286 05                       4 	.byte 5 	
      003287 45 52 41 53 45           5 	.ascii "ERASE"
      00328C 00 30                    6 	.word ERASE_IDX 
      00328E                       4633 	_dict_entry,3,END,END_IDX;cmd_end  
      00328E 32 86                    1 	.word LINK 
                           003290     2 	LINK=.
      003290                          3 END:
      003290 03                       4 	.byte 3 	
      003291 45 4E 44                 5 	.ascii "END"
      003294 00 2E                    6 	.word END_IDX 
      003296                       4634 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      003296 32 90                    1 	.word LINK 
                           003298     2 	LINK=.
      003298                          3 EEPROM:
      003298 46                       4 	.byte 6+F_IFUNC 	
      003299 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      00329F 00 2C                    6 	.word EEPROM_IDX 
      0032A1                       4635 	_dict_entry,6+F_IFUNC,EEFREE,EEFREE_IDX; func_eefree 
      0032A1 32 98                    1 	.word LINK 
                           0032A3     2 	LINK=.
      0032A3                          3 EEFREE:
      0032A3 46                       4 	.byte 6+F_IFUNC 	
      0032A4 45 45 46 52 45 45        5 	.ascii "EEFREE"
      0032AA 00 C6                    6 	.word EEFREE_IDX 
      0032AC                       4636 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      0032AC 32 A3                    1 	.word LINK 
                           0032AE     2 	LINK=.
      0032AE                          3 EDIT:
      0032AE 04                       4 	.byte 4 	
      0032AF 45 44 49 54              5 	.ascii "EDIT"
      0032B3 00 2A                    6 	.word EDIT_IDX 
      0032B5                       4637 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      0032B5 32 AE                    1 	.word LINK 
                           0032B7     2 	LINK=.
      0032B7                          3 DWRITE:
      0032B7 06                       4 	.byte 6+F_CMD 	
      0032B8 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0032BE 00 28                    6 	.word DWRITE_IDX 
      0032C0                       4638 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      0032C0 32 B7                    1 	.word LINK 
                           0032C2     2 	LINK=.
      0032C2                          3 DREAD:
      0032C2 45                       4 	.byte 5+F_IFUNC 	
      0032C3 44 52 45 41 44           5 	.ascii "DREAD"
      0032C8 00 26                    6 	.word DREAD_IDX 
      0032CA                       4639 	_dict_entry,2,DO,DO_IDX;do_loop
      0032CA 32 C2                    1 	.word LINK 
                           0032CC     2 	LINK=.
      0032CC                          3 DO:
      0032CC 02                       4 	.byte 2 	
      0032CD 44 4F                    5 	.ascii "DO"
      0032CF 00 24                    6 	.word DO_IDX 
      0032D1                       4640 	_dict_entry,3,DEC,DEC_IDX;dec_base
      0032D1 32 CC                    1 	.word LINK 
                           0032D3     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0032D3                          3 DEC:
      0032D3 03                       4 	.byte 3 	
      0032D4 44 45 43                 5 	.ascii "DEC"
      0032D7 00 22                    6 	.word DEC_IDX 
      0032D9                       4641 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      0032D9 32 D3                    1 	.word LINK 
                           0032DB     2 	LINK=.
      0032DB                          3 DDR:
      0032DB 43                       4 	.byte 3+F_IFUNC 	
      0032DC 44 44 52                 5 	.ascii "DDR"
      0032DF 00 20                    6 	.word DDR_IDX 
      0032E1                       4642 	_dict_entry,4,DATA,DATA_IDX;data  
      0032E1 32 DB                    1 	.word LINK 
                           0032E3     2 	LINK=.
      0032E3                          3 DATA:
      0032E3 04                       4 	.byte 4 	
      0032E4 44 41 54 41              5 	.ascii "DATA"
      0032E8 00 1E                    6 	.word DATA_IDX 
      0032EA                       4643 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      0032EA 32 E3                    1 	.word LINK 
                           0032EC     2 	LINK=.
      0032EC                          3 CRL:
      0032EC 43                       4 	.byte 3+F_IFUNC 	
      0032ED 43 52 4C                 5 	.ascii "CRL"
      0032F0 00 1C                    6 	.word CRL_IDX 
      0032F2                       4644 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      0032F2 32 EC                    1 	.word LINK 
                           0032F4     2 	LINK=.
      0032F4                          3 CRH:
      0032F4 43                       4 	.byte 3+F_IFUNC 	
      0032F5 43 52 48                 5 	.ascii "CRH"
      0032F8 00 1A                    6 	.word CRH_IDX 
      0032FA                       4645 	_dict_entry,5,CONST,CONST_IDX; cmd_const 
      0032FA 32 F4                    1 	.word LINK 
                           0032FC     2 	LINK=.
      0032FC                          3 CONST:
      0032FC 05                       4 	.byte 5 	
      0032FD 43 4F 4E 53 54           5 	.ascii "CONST"
      003302 00 C4                    6 	.word CONST_IDX 
      003304                       4646 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      003304 32 FC                    1 	.word LINK 
                           003306     2 	LINK=.
      003306                          3 CHAR:
      003306 84                       4 	.byte 4+F_CFUNC 	
      003307 43 48 41 52              5 	.ascii "CHAR"
      00330B 00 18                    6 	.word CHAR_IDX 
      00330D                       4647 	_dict_entry,3,BYE,BYE_IDX;bye 
      00330D 33 06                    1 	.word LINK 
                           00330F     2 	LINK=.
      00330F                          3 BYE:
      00330F 03                       4 	.byte 3 	
      003310 42 59 45                 5 	.ascii "BYE"
      003313 00 16                    6 	.word BYE_IDX 
      003315                       4648 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      003315 33 0F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                           003317     2 	LINK=.
      003317                          3 BTOGL:
      003317 05                       4 	.byte 5 	
      003318 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00331D 00 14                    6 	.word BTOGL_IDX 
      00331F                       4649 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      00331F 33 17                    1 	.word LINK 
                           003321     2 	LINK=.
      003321                          3 BTEST:
      003321 45                       4 	.byte 5+F_IFUNC 	
      003322 42 54 45 53 54           5 	.ascii "BTEST"
      003327 00 12                    6 	.word BTEST_IDX 
      003329                       4650 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      003329 33 21                    1 	.word LINK 
                           00332B     2 	LINK=.
      00332B                          3 BSET:
      00332B 04                       4 	.byte 4 	
      00332C 42 53 45 54              5 	.ascii "BSET"
      003330 00 10                    6 	.word BSET_IDX 
      003332                       4651 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      003332 33 2B                    1 	.word LINK 
                           003334     2 	LINK=.
      003334                          3 BRES:
      003334 04                       4 	.byte 4 	
      003335 42 52 45 53              5 	.ascii "BRES"
      003339 00 0E                    6 	.word BRES_IDX 
      00333B                       4652 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      00333B 33 34                    1 	.word LINK 
                           00333D     2 	LINK=.
      00333D                          3 BIT:
      00333D 43                       4 	.byte 3+F_IFUNC 	
      00333E 42 49 54                 5 	.ascii "BIT"
      003341 00 0C                    6 	.word BIT_IDX 
      003343                       4653 	_dict_entry,3,AWU,AWU_IDX;awu 
      003343 33 3D                    1 	.word LINK 
                           003345     2 	LINK=.
      003345                          3 AWU:
      003345 03                       4 	.byte 3 	
      003346 41 57 55                 5 	.ascii "AWU"
      003349 00 0A                    6 	.word AWU_IDX 
      00334B                       4654 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      00334B 33 45                    1 	.word LINK 
                           00334D     2 	LINK=.
      00334D                          3 ASC:
      00334D 43                       4 	.byte 3+F_IFUNC 	
      00334E 41 53 43                 5 	.ascii "ASC"
      003351 00 08                    6 	.word ASC_IDX 
                                   4655 ;	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      003353                       4656 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      003353 33 4D                    1 	.word LINK 
                           003355     2 	LINK=.
      003355                          3 ADCREAD:
      003355 47                       4 	.byte 7+F_IFUNC 	
      003356 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      00335D 00 04                    6 	.word ADCREAD_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      00335F                       4657 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      00335F 33 55                    1 	.word LINK 
                           003361     2 	LINK=.
      003361                          3 ADCON:
      003361 05                       4 	.byte 5 	
      003362 41 44 43 4F 4E           5 	.ascii "ADCON"
      003367 00 02                    6 	.word ADCON_IDX 
      003369                       4658 kword_dict::
      003369                       4659 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      003369 33 61                    1 	.word LINK 
                           00336B     2 	LINK=.
      00336B                          3 ABS:
      00336B 43                       4 	.byte 3+F_IFUNC 	
      00336C 41 42 53                 5 	.ascii "ABS"
      00336F 00 00                    6 	.word ABS_IDX 
                                   4660 
                                   4661 ;comands and fonctions address table 	
      003371                       4662 code_addr::
      003371 29 EB 25 40 25 90 2A  4663 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             02 28 89 29 92 2D 36
      00337F 21 07 20 E5 21 4C 21  4664 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             2A 29 5D 28 72 2D F0
      00338D 2D EB 2E 04 2D E6 1B  4665 	.word const_cr1,data,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             94 2D 72 25 CC 26 03
      00339B 1E FD 2D FF 24 AC 26  4666 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,save_app,for,gosub,goto,gpio ; 24..31 
             A4 2A ED 27 40 21 D6
             24 0C 23 F2 28 D9
      0033AF 1B 8F 2D E1 21 C5 20  4667 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             05 2D 5C 2C C6 2D 04
             28 C8
      0033BF 1B ED 1E 58 2D 09 2A  4668 	.word let,list,log2,lshift,next,new ; 40..47
             93 22 82 26 9A
      0033CB 2C A7 2D DC 2A 2F 2F  4669 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             93 29 71 2A FC 21 A4
             2D FA
      0033DB 21 83 2D F5 1F 65 2D  4670 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             AF 2D B4 2D B9 2D BE
             2D C3
      0033EB 2D C8 2D CD 2D D2 2D  4671 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             D7 28 CC 2E 80 00 C3
             20 A2
      0033FB 2E 39 24 32 2B 89 2A  4672 	.word restore,return, random,rshift,run,free ; 72..79
             C0 24 50 1B 99
      003407 29 66 2F 75 2E DD 2F  4673 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             7C 2F 55 22 40 26 4E
             29 E4
      003417 2C 8A 2C A1 22 00 24  4674 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             E9 1B E2 29 09 2D 85
             29 1E
      003427 20 A8 2C 24 28 2F 2A  4675 	.word wait,words,write,bit_xor,cmd_size,cmd_on,cmd_get,cmd_const ; 96..99
             61 1B B5 23 66 24 B3
             1D 18
      003437 1C AB 00 00           4676 	.word func_eefree,0 
                                   4677 
                                   4678 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



                                   4679 
                                   4680 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      00343B                         30 test:
      00343B                         31     _vars VSIZE 
      00343B 52 08            [ 2]    1     sub sp,#VSIZE 
      00343D AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      003440 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      003442 CE 00 0F         [ 2]   34     ldw x,ticks 
      003445 1F 01            [ 2]   35     ldw (T,sp),x
      003447                         36 1$: ; test add24 
      003447 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      003449 AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      00344C C7 00 0C         [ 1]   39     ld acc24,a 
      00344F CF 00 0D         [ 2]   40     ldw acc24+1,x  
      003452 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      003454 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      003457 CD 01 6A         [ 4]   43     call add24 
      00345A 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      00345C 1D 00 01         [ 2]   45     subw x,#1
      00345F 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      003461 26 E4            [ 1]   47     jrne 1$
      003463 CD 18 0D         [ 4]   48     call prt_acc24
      003466 A6 20            [ 1]   49     ld a,#SPACE 
      003468 CD 09 44         [ 4]   50     call putc 
      00346B CE 00 0F         [ 2]   51     ldw x,ticks 
      00346E 72 F0 01         [ 2]   52     subw x,(T,sp)
      003471 CD 17 F6         [ 4]   53     call prt_i16  
      003474 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      003476 CD 09 44         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      003479 CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      00347C 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      00347E CE 00 0F         [ 2]   60     ldw x,ticks 
      003481 1F 01            [ 2]   61     ldw (T,sp),x 
      003483                         62 2$: 
      003483 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      003485 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      003488 C7 00 0C         [ 1]   65     ld acc24,a 
      00348B CF 00 0D         [ 2]   66     ldw acc24+1,x  
      00348E A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      003490 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      003493 CD 02 5D         [ 4]   69     call mul24 
      003496 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      003498 1D 00 01         [ 2]   71     subw x,#1
      00349B 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      00349D 26 E4            [ 1]   73     jrne 2$ 
      00349F CD 18 0D         [ 4]   74    call prt_acc24 
      0034A2 A6 20            [ 1]   75    ld a,#SPACE 
      0034A4 CD 09 44         [ 4]   76    call putc 
      0034A7 CE 00 0F         [ 2]   77     ldw x,ticks 
      0034AA 72 F0 01         [ 2]   78     subw x,(T,sp)
      0034AD CD 17 F6         [ 4]   79     call prt_i16 
      0034B0 A6 0D            [ 1]   80     ld a,#CR 
      0034B2 CD 09 44         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      0034B5 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      0034B8 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      0034BA CE 00 0F         [ 2]   85     ldw x,ticks 
      0034BD 1F 01            [ 2]   86     ldw (T,sp),x 
      0034BF                         87 3$: 
      0034BF A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      0034C1 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      0034C4 C7 00 0C         [ 1]   90     ld acc24,a 
      0034C7 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      0034CA A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      0034CC AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      0034CF CD 02 5D         [ 4]   94     call mul24 
      0034D2 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      0034D4 1D 00 01         [ 2]   96     subw x,#1
      0034D7 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      0034D9 26 E4            [ 1]   98     jrne 3$ 
      0034DB CD 18 0D         [ 4]   99     call prt_acc24    
      0034DE A6 20            [ 1]  100     ld a,#SPACE 
      0034E0 CD 09 44         [ 4]  101     call putc 
      0034E3 CE 00 0F         [ 2]  102     ldw x,ticks 
      0034E6 72 F0 01         [ 2]  103     subw x,(T,sp)
      0034E9 CD 17 F6         [ 4]  104     call prt_i16 
      0034EC A6 0D            [ 1]  105     ld a,#CR 
      0034EE CD 09 44         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      0034F1 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      0034F4 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      0034F6 CE 00 0F         [ 2]  110     ldw x,ticks 
      0034F9 1F 01            [ 2]  111     ldw (T,sp),x 
      0034FB                        112 4$:
      0034FB A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      0034FD AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003500 C7 00 0C         [ 1]  115     ld acc24,a 
      003503 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      003506 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      003508 AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      00350B CD 02 5D         [ 4]  119     call mul24 
      00350E 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003510 1D 00 01         [ 2]  121     subw x,#1
      003513 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      003515 26 E4            [ 1]  123     jrne 4$ 
      003517 CD 18 0D         [ 4]  124     call prt_acc24 
      00351A A6 20            [ 1]  125     ld a,#SPACE 
      00351C CD 09 44         [ 4]  126     call putc 
      00351F CE 00 0F         [ 2]  127     ldw x,ticks 
      003522 72 F0 01         [ 2]  128     subw x,(T,sp)
      003525 CD 17 F6         [ 4]  129     call prt_i16 
      003528 A6 0D            [ 1]  130     ld a,#CR 
      00352A CD 09 44         [ 4]  131     call putc 
                                    132 ; test abs24 
      00352D CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      003530 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      003532 CE 00 0F         [ 2]  135     ldw x,ticks 
      003535 1F 01            [ 2]  136     ldw (T,sp),x 
      003537                        137 5$: 
      003537 A6 FF            [ 1]  138     ld a,#0xff
      003539 AE FF FF         [ 2]  139     ldw x,#0xffff
      00353C CD 01 DF         [ 4]  140     call abs24 
      00353F C7 00 0C         [ 1]  141     ld acc24,a 
      003542 CF 00 0D         [ 2]  142     ldw acc24+1,x
      003545 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      003547 1D 00 01         [ 2]  144     subw x,#1
      00354A 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      00354C 26 E9            [ 1]  146     jrne 5$ 
      00354E CD 18 0D         [ 4]  147     call prt_acc24 
      003551 A6 20            [ 1]  148     ld a,#SPACE 
      003553 CD 09 44         [ 4]  149     call putc 
      003556 CE 00 0F         [ 2]  150     ldw x,ticks 
      003559 72 F0 01         [ 2]  151     subw x,(T,sp)
      00355C CD 17 F6         [ 4]  152     call prt_i16 
      00355F                        153 6$:
      00355F A6 0D            [ 1]  154     ld a,#CR 
      003561 CD 09 44         [ 4]  155     call putc 
      003564 CD 35 AA         [ 4]  156     call read_integer 
      003567 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      00356C 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      003571 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      003576 CD 35 AA         [ 4]  160     call read_integer 
      003579 C6 00 0C         [ 1]  161     ld a,acc24 
      00357C CE 00 0D         [ 2]  162     ldw x,acc16 
      00357F 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      003584 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



      003589 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      00358E CD 03 27         [ 4]  166     call div24 
      003591 88               [ 1]  167     push a 
      003592 89               [ 2]  168     pushw x 
      003593 CD 18 0D         [ 4]  169     call prt_acc24 
      003596 A6 20            [ 1]  170     ld a,#SPACE 
      003598 CD 09 44         [ 4]  171     call putc 
      00359B 85               [ 2]  172     popw x
      00359C CF 00 0D         [ 2]  173     ldw acc16,x  
      00359F 32 00 0C         [ 1]  174     pop acc24 
      0035A2 CD 18 0D         [ 4]  175     call prt_acc24
      0035A5 20 B8            [ 2]  176     jra 6$
      0035A7                        177     _drop VSIZE 
      0035A7 5B 08            [ 2]    1     addw sp,#VSIZE 
      0035A9 81               [ 4]  178     ret 
                                    179 
                                    180 
      0035AA                        181 read_integer:
      0035AA A6 3F            [ 1]  182     ld a,#'? 
      0035AC CD 09 44         [ 4]  183     call putc  
      0035AF 72 5F 00 03      [ 1]  184 	clr count  
      0035B3 CD 0A A6         [ 4]  185 	call readln 
      0035B6 AE 16 68         [ 2]  186 	ldw x,#tib 
      0035B9 3B 00 03         [ 1]  187 	push count
      0035BC 4B 00            [ 1]  188 	push #0 
      0035BE 72 FB 01         [ 2]  189 	addw x,(1,sp)
      0035C1 5C               [ 1]  190 	incw x 
      0035C2                        191 	_drop 2 
      0035C2 5B 02            [ 2]    1     addw sp,#2 
      0035C4 72 5F 00 01      [ 1]  192 	clr in 
      0035C8 CD 0F 1F         [ 4]  193 	call get_token
      0035CB A1 84            [ 1]  194 	cp a,#TK_INTGR
      0035CD 27 0F            [ 1]  195 	jreq 3$ 
      0035CF A1 11            [ 1]  196 	cp a,#TK_MINUS
      0035D1 CD 0F 1F         [ 4]  197 	call get_token 
      0035D4 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      0035D6 27 03            [ 1]  199 	jreq 2$
      0035D8 CC 16 A0         [ 2]  200 	jp syntax_error
      0035DB                        201 2$:
      0035DB CD 02 0D         [ 4]  202 	call neg_acc24  	
      0035DE                        203 3$: 
      0035DE 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003600                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003600                         30 app_space::
      003600 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003602 00 00                   32 app_size: .word 0 
      003604                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        00336B R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      003361 R
    ADCON_ID=  000002     |   4 ADCREAD    003355 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 AND        002FA9 R   |     AND_IDX =  000006     |     ARG_OFS =  000002 
    ARROW_LE=  000080     |     ARROW_RI=  000081     |   4 ASC        00334D R
    ASC_IDX =  000008     |     ATTRIB  =  000002     |   4 AUTO_RUN   000157 R
  4 AWU        003345 R   |   4 AWUHandl   000004 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_CSR_=  000004     |     AWU_IDX =  00000A 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   4 BIT        00333D R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BIT_IDX =  00000C     |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |     BPTR    =  00000D 
  4 BRES       003334 R   |     BRES_IDX=  00000E     |     BS      =  000008 
  4 BSET       00332B R   |     BSET_IDX=  000010     |     BSIZE   =  000006 
  4 BTEST      003321 R   |     BTEST_ID=  000012     |   4 BTOGL      003317 R
    BTOGL_ID=  000014     |     BTW     =  000001     |     BUFPTR  =  000003 
  4 BYE        00330F R   |     BYE_IDX =  000016     |     C       =  000001 
    CAN     =  000018     |   4 CANT_DO    0027D7 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAR       003306 R
    CHAR_IDX=  000018     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMDX    =  000001     |     CMD_END =  000002 
    CNAME   =  000001     |     CNT     =  000006     |     CNTR    =  000003 
    CNT_LO  =  000004     |     COMMA   =  00002C     |     COND    =  000001 
  4 CONST      0032FC R   |   4 CONST_CO   001C95 R   |     CONST_ID=  0000C4 
    CONST_RE=  000005     |     COUNT   =  000003     |     CPOS    =  000003 
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |     CR      =  00000D 
  4 CRH        0032F4 R   |     CRH_IDX =  00001A     |   4 CRL        0032EC R
    CRL_IDX =  00001C     |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000009 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  4 DATA       0032E3 R   |     DATA_IDX=  00001E     |     DBG_A   =  000008 
    DBG_CC  =  000009     |     DBG_X   =  000006     |     DBG_Y   =  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   4 DDR        0032DB R   |     DDR_IDX =  000020 
    DEBUG   =  000001     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  4 DEC        0032D3 R   |     DEC_IDX =  000022     |     DEST    =  000001 
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |     DIVISOR =  000001 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   4 DO         0032CC R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000024     |   4 DREAD      0032C2 R
    DREAD_ID=  000026     |   4 DWRITE     0032B7 R   |     DWRITE_I=  000028 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]

Symbol Table

  4 EDIT       0032AE R   |     EDIT_IDX=  00002A     |   4 EEFREE     0032A3 R
    EEFREE_I=  0000C6     |   4 EEPROM     003298 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_I=  00002C     |     EEPROM_S=  000800 
    EEPTR   =  000003     |     EM      =  000019     |   4 END        003290 R
    END_IDX =  00002E     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      003286 R   |     ERASE_ID=  000030 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_OVER=  000010 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       00327D R   |     FCPU_IDX=  000032     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001E38 R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        003275 R   |     FOR_IDX =  000036 
  4 FREE       00326C R   |     FREE_IDX=  000094     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_CFUNC =  000080     |     F_CMD   =  000000 
    F_CONST =  0000C0     |     F_IFUNC =  000040     |   4 GET        003264 R
    GET_IDX =  0000C2     |   4 GOSUB      00325A R   |     GOSUB_ID=  000038 
  4 GOTO       003251 R   |     GOTO_IDX=  00003A     |   4 GPIO       003248 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003C 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  4 HEX        003240 R   |     HEX_IDX =  00003E     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   4 IDR        003238 R   |     IDR_IDX =  000040 
  4 IF         003231 R   |     IF_IDX  =  000042     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   4 INPUT      003227 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000044     |     INPUT_PU=  000001     |     INT24   =  000005 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   4 INVERT     00321C R   |     INVERT_I=  000046 
    INW     =  00000B     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     003211 R   |     IWDGEN_I=  000048 
  4 IWDGREF    003205 R   |     IWDGREF_=  00004A     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        0031FD R   |     KEY_END =  000083     |     KEY_IDX =  00004C 
    LAST    =  000003     |     LB      =  000002     |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |     LEN     =  000002 
  4 LET        0031F5 R   |     LET_IDX =  00004E     |     LF      =  00000A 
    LIMIT   =  000001     |     LINENO  =  000005     |   4 LINK    =  00336B R
  4 LIST       0031EC R   |     LIST_IDX=  000050     |     LL      =  000001 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  4 LOG        0031E4 R   |     LOG_IDX =  000052     |     LOOP_CNT=  002710 
  4 LSHIFT     0031D9 R   |     LSHIFT_I=  000054     |     MAJOR   =  000002 
    MASK    =  000002     |     MAX_LINE=  007FFF     |     MINOR   =  000000 
    MULOP   =  000001     |     N1      =  000004     |     N2      =  000007 
    NAFR    =  004804     |     NAK     =  000015     |     NAME    =  000002 
    NAMEPTR =  000001     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        0031D1 R   |     NEW_IDX =  000058     |   4 NEXT       0031C8 R
    NEXT_IDX=  000056     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  4 NOT        0031C0 R   |     NOT_IDX =  00005A     |   4 NOT_SAVE   001F2A R
  4 NO_APP     002819 R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        0031B8 R
    ODR_IDX =  00005C     |   4 ON         0031B1 R   |     ONOFF   =  000003 
    ON_IDX  =  0000C0     |     OP      =  000001     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OP_LINK =  002FA9 R   |   4 OR         002FA2 R   |     OR_IDX  =  00005E 
    OUTP    =  000001     |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVRWR   =  000004 
    PA      =  000000     |   4 PAD        0031A9 R   |     PAD_IDX =  000060 
    PAD_SIZE=  000080     |   4 PAUSE      00319F R   |     PAUSE_ID=  000062 
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |   4 PEEK       003196 R   |     PEEK_IDX=  000066 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PINNO   =  000001     |   4 PINP       00318D R
    PINP_IDX=  000068     |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   4 PMODE      003183 R
    PMODE_ID=  000064     |   4 POKE       00317A R   |     POKE_IDX=  00006A 
  4 PORTA      00315D R   |   4 PORTB      003153 R   |   4 PORTC      003149 R
  4 PORTD      00313F R   |   4 PORTE      003135 R   |   4 PORTF      00312B R
  4 PORTG      003121 R   |   4 PORTH      003117 R   |   4 PORTI      00310D R
  4 POUT       003171 R   |     POUT_IDX=  00006C     |     PREV    =  000001 
  4 PRINT      003167 R   |     PROD    =  000001     |     PROD_SIG=  00000A 
  4 PROG_ADD   001E0E R   |   4 PROG_SIZ   001E20 R   |     PRTA_IDX=  000070 
    PRTB_IDX=  000072     |     PRTC_IDX=  000074     |     PRTD_IDX=  000076 
    PRTE_IDX=  000078     |     PRTF_IDX=  00007A     |     PRTG_IDX=  00007C 
    PRTH_IDX=  00007E     |     PRTI_IDX=  000080     |     PRT_IDX =  00006E 
    PSIZE   =  000001     |     PSTR    =  000003     |   4 QKEY       003104 R
    QKEY_IDX=  000082     |     QSIGN   =  000005     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   4 RAM_MEM    001E49 R   |     RAM_SIZE=  001800 
    RBT_IDX =  000086     |   4 READ       0030FB R   |     READ_IDX=  000084 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

  4 REBOOT     0030F0 R   |     RECLEN  =  000005     |   4 REG_A      000562 R
  4 REG_CC     000566 R   |   4 REG_EPC    000555 R   |   4 REG_SP     00056B R
  4 REG_X      00055E R   |   4 REG_Y      00055A R   |     RELOP   =  000001 
  4 REM        0030E8 R   |     REM_IDX =  000088     |   4 RESTORE    0030DC R
    REST_IDX=  00008A     |     RETL1   =  000001     |   4 RETURN     0030D1 R
    RET_ADDR=  000003     |     RET_BPTR=  000003     |     RET_IDX =  00008C 
    RET_INW =  000005     |   4 RND        0030C9 R   |     RND_IDX =  00008E 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     0030BE R
    RSHIFT_I=  000090     |     RSIGN   =  000006     |     RST_SR  =  0050B3 
  4 RUN        0030B6 R   |     RUN_IDX =  000092     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |     R_A     =  000007     |     R_CC    =  000008 
    R_X     =  000005     |     R_Y     =  000003     |   4 SAVE       0030AD R
    SAVE_IDX=  000034     |     SEPARATE=  000000     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |     SI      =  00000F 
    SIGN    =  000001     |   4 SIGNATUR   0027D5 R   |   4 SIZE       0030A4 R
    SIZE_IDX=  0000BE     |     SKIP    =  000005     |   4 SLEEP      00309A R
    SLEEP_ID=  000096     |     SO      =  00000E     |     SOH     =  000001 
    SPACE   =  000020     |   4 SPIEN      003090 R   |     SPIEN_ID=  00009A 
  4 SPIRD      003086 R   |     SPIRD_ID=  000098     |   4 SPISEL     00307B R
    SPISEL_I=  00009C     |   4 SPIWR      003071 R   |     SPIWR_ID=  00009E 
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SRC     =  000003 
    STACK_EM=  0017FF     |     STACK_SI=  00008C     |   4 STATES     000518 R
  4 STEP       003068 R   |     STEP_IDX=  0000A0     |   4 STOP       00305F R
    STOP_IDX=  0000A2     |     STR     =  000003     |   4 STR_BYTE   001E31 R
    STX     =  000002     |     SUB     =  00001A     |     SUP     =  000084 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     T       =  000001 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TARGET  =  000001     |     TCHAR   =  000001     |     TEMP    =  000003 
    TIB_SIZE=  000050     |     TICK    =  000027     |   4 TICKS      003055 R
    TICKS_ID=  0000A4     |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   4 TIMEOUT    003049 R
  4 TIMER      00303F R   |     TIMER_ID=  0000A6     |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |     TK_AND  =  000087     |     TK_ARRAY=  000005 
    TK_CFUNC=  000082     |     TK_CHAR =  000004     |     TK_CMD  =  000080 
    TK_COLON=  00000A     |     TK_COMMA=  000008     |     TK_CONST=  000083 
    TK_DIV  =  000021     |     TK_EQUAL=  000032     |     TK_FLOAT=  000086 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LABEL=  000003     |     TK_LE   =  000036     |     TK_LPARE=  000006 
    TK_LT   =  000034     |     TK_MINUS=  000011     |     TK_MOD  =  000022 
    TK_MULT =  000020     |     TK_NE   =  000035     |     TK_NONE =  000000 
    TK_OR   =  000088     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TK_XOR  =  000089     |     TMROUT_I=  0000A8     |   4 TO         003038 R
  4 TONE       00302F R   |     TONE_IDX=  0000AC     |     TOWRITE =  000005 
    TO_IDX  =  0000AA     |   4 Timer4Up   000021 R   |   4 TrapHand   000012 R
    U8      =  000001     |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART2   =  000001 
    UART3   =  000002     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    UBC     =  004801     |   4 UBOUND     003024 R   |     UBOUND_I=  0000AE 
  4 UBTN_Han   000068 R   |   4 UFLASH     003019 R   |     UFLASH_I=  0000B0 
  4 UNTIL      00300F R   |     UNTIL_ID=  0000B2     |     UPDATE  =  000006 
    US      =  00001F     |   4 USER_ABO   000070 R   |   4 USR        003007 R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    USR_IDX =  0000B4     |   4 Uart1RxH   0008D2 R   |   4 UserButt   000044 R
    VAL1    =  02FFFF     |     VAL2    =  00002A     |     VAL3    =  000003 
    VAL4    =  0005FF     |     VAL5    =  FFFFFFFD     |     VSISE   =  000003 
    VSIZE   =  000008     |     VT      =  00000B     |   4 WAIT       002FFE R
    WAIT_IDX=  0000B6     |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH_SA=  000002     |     WLEN    =  000001 
  4 WORDS      002FF4 R   |     WORDS_ID=  0000B8     |   4 WRITE      002FEA R
    WRITE_ID=  0000BA     |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   4 XOR        002F9A R   |     XOR_IDX =  0000BC 
    XSAVE   =  000004     |     XSTACK_E=  001773     |     XSTACK_S=  00003C 
    XTEMP   =  000001     |     YSAVE   =  000007     |     YTEMP   =  000003 
  4 abs        0029EB R   |   4 abs24      0001DF R   |   5 acc16      00000D GR
  5 acc24      00000C GR  |   5 acc32      00000B GR  |   5 acc8       00000E GR
  4 accept_c   000C0D R   |   4 add24      00016A R   |   4 add_char   001392 R
  4 add_spac   00116F R   |   4 analog_r   002590 R   |   4 app        003604 R
  4 app_sign   003600 R   |   4 app_size   003602 R   |   4 app_spac   003600 GR
  4 arduino_   002B69 R   |   4 arg_list   001961 R   |   5 array_si   000020 R
  4 ascii      002889 R   |   4 at_tst     000FD9 R   |   4 atoi24     001898 GR
  4 atoi_exi   0018FE R   |   4 awu        002992 R   |   4 awu02      0029A5 R
  4 bad_port   002904 R   |   5 base       00000A GR  |   5 basicptr   000004 GR
  4 beep       002509 R   |   4 beep_1kh   0024E0 GR  |   4 bin_exit   000E49 R
  4 bit_and    002A02 R   |   4 bit_or     002A2F R   |   4 bit_rese   002107 R
  4 bit_set    0020E5 R   |   4 bit_test   00214C R   |   4 bit_togg   00212A R
  4 bit_xor    002A61 R   |   4 bitmask    002D36 R   |   4 bkslsh_t   000F86 R
  4 bksp       0009AB R   |   2 block_bu   0016B8 GR  |   4 block_er   0007C0 R
  4 break_po   00267C R   |   4 bye        00295D R   |   4 char       002872 R
  4 clear_ba   0014FC R   |   4 clear_bl   00272C R   |   4 clear_va   001454 R
  4 clock_in   00008B R   |   4 cloop_1    001D3E R   |   4 cmd_cons   001D18 R
  4 cmd_end    0024AC R   |   4 cmd_get    0024B3 R   |   4 cmd_itf    000570 R
  4 cmd_line   00172F R   |   4 cmd_name   0013B2 R   |   4 cmd_on     002366 R
  4 cmd_size   001BB5 R   |   4 code_add   003371 GR  |   4 cold_sta   0000C3 R
  4 colon_ts   000FAD R   |   4 comma_ts   000FB8 R   |   4 comp_msg   00167F R
  4 compile    0010DE GR  |   4 conditio   001B0A R   |   4 const_cr   002DEB R
  4 const_cr   002DF0 R   |   4 const_dd   002DE6 R   |   4 const_ee   002DFF R
  4 const_id   002DE1 R   |   4 const_in   002DFA R   |   4 const_lo   001D39 R
  4 const_od   002DDC R   |   4 const_ou   002DF5 R   |   4 const_po   002DAF R
  4 const_po   002DB4 R   |   4 const_po   002DB9 R   |   4 const_po   002DBE R
  4 const_po   002DC3 R   |   4 const_po   002DC8 R   |   4 const_po   002DCD R
  4 const_po   002DD2 R   |   4 const_po   002DD7 R   |   4 convert_   000DB7 R
  4 convert_   00096F R   |   4 copy_com   00100E R   |   5 count      000003 GR
  4 cp24       0001A4 R   |   4 cp24_ax    0001D6 R   |   4 cp_loop    001910 R
  4 cpl24      0001E6 R   |   4 cpy_cmd_   00115A R   |   4 cpy_quot   001197 R
  4 create_g   000CE1 R   |   4 cs_high    002F8E R   |   4 dash_tst   000FCE R
  4 data       002E04 R   |   5 data_len   000009 R   |   4 data_lin   002E13 R
  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 data_sea   002E5F R
  4 dec_base   001B94 R   |   4 decomp_l   001250 R   |   4 decompil   001208 GR
  4 del_line   000CB4 R   |   4 delete_l   000A98 R   |   4 delete_n   0009BB R
  4 delete_u   000A5D R   |   4 digital_   0025CC R   |   4 digital_   002603 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

  4 div24      000327 R   |   4 divu24_8   000309 R   |   4 do_loop    002D72 R
  4 do_progr   0007B3 R   |   4 edit       001EFD R   |   4 enable_i   002CC6 R
  4 eql_tst    001063 R   |   4 equal      0013A5 R   |   4 erase      0026A4 R
  4 erase_ex   0007E4 R   |   4 erase_fl   0007DA R   |   4 err_bad_   0015E0 R
  4 err_buf_   001656 R   |   4 err_cmd_   0015A4 R   |   4 err_div0   001569 R
  4 err_dupl   0015BE R   |   4 err_math   001550 R   |   4 err_mem_   001535 R
  4 err_msg    001513 R   |   4 err_no_a   0015EC R   |   4 err_no_d   00161F R
  4 err_no_f   001643 R   |   4 err_no_l   001578 R   |   4 err_no_p   00162F R
  4 err_not_   0015CF R   |   4 err_over   001663 R   |   4 err_run_   00158E R
  4 err_synt   001542 R   |   4 escaped    000DCC GR  |   4 expect     00194F R
  4 expr_exi   001AB1 R   |   4 expressi   001A81 R   |   4 factor     0019BE R
  5 farptr     000018 R   |   4 fcpu       002AED R   |   4 fetchc     000660 R
  4 fill_wri   00271C R   |   4 final_te   000C06 R   |   4 first_li   001EA7 R
  5 flags      000022 GR  |   4 for        0021D6 R   |   4 free       001B99 R
  5 free_eep   000024 R   |   7 free_ram   000080 R   |   4 func_arg   00195C R
  4 func_eef   001CAB R   |   4 func_not   002CA7 R   |   4 ge         0013A7 R
  4 get_addr   0017D6 R   |   4 get_arra   00198E R   |   4 get_char   0017F0 R
  4 get_cmd_   0011E7 R   |   4 get_code   0017BA R   |   4 get_cons   001C30 R
  4 get_esca   00097B R   |   4 get_int2   0017E0 R   |   4 get_targ   0022F7 R
  4 get_targ   002305 R   |   4 get_tick   0029E4 R   |   4 get_toke   000F1F GR
  4 getc       000954 GR  |   4 gosub      00240C R   |   4 gosub_1    002417 R
  4 gosub_2    00241D R   |   4 goto       0023F2 R   |   4 goto_1     0023FC R
  4 gpio       0028D9 R   |   4 gt         0013A3 R   |   4 gt_tst     00106E R
  4 hex_base   001B8F R   |   4 hex_dump   0006A0 R   |   4 if         0021C5 R
  5 in         000001 GR  |   5 in.saved   000002 GR  |   5 in.w       000000 GR
  4 incr_far   0008B6 R   |   4 input_ex   00209D R   |   4 input_lo   002009 R
  4 input_va   002005 R   |   4 insert_c   000A1A R   |   4 insert_l   000D0D R
  4 insert_l   000D7C R   |   4 interp_l   001770 R   |   4 interpre   00174B R
  4 invalid    0005B5 R   |   4 invalid_   000636 R   |   4 invert     002D5C R
  4 is_alnum   000E7E GR  |   4 is_alpha   000E64 GR  |   4 is_data_   002E0A R
  4 is_digit   000E75 GR  |   4 is_symbo   000E87 R   |   4 itoa       001833 GR
  4 itoa_loo   001855 R   |   4 jp_to_ta   0023FF R   |   4 key        0028C8 R
  4 kword_di   003369 GR  |   4 kword_en   002FE8 R   |   4 le         0013AC R
  4 ledoff     00046B R   |   4 ledon      000466 R   |   4 ledtoggl   000470 R
  4 left_par   000479 R   |   4 let        001BED GR  |   4 let_arra   001BFB R
  4 let_eval   001C03 R   |   4 let_var    001C00 R   |   4 lines_sk   001EAA R
  4 list       001E58 R   |   4 list_con   001C3F R   |   4 list_exi   001EEC R
  4 list_loo   001ECA R   |   4 log2       002D09 R   |   4 logical_   002CBA R
  4 look_tar   002328 R   |   4 loop_bac   0022DA R   |   5 loop_dep   00001F R
  4 loop_don   0022EF R   |   4 lshift     002A93 R   |   4 lt         0013AA R
  4 lt_tst     001097 R   |   4 mem_peek   0005D2 R   |   4 mod24      0003D5 R
  4 move       001410 GR  |   4 move_dow   00142F R   |   4 move_era   000742 R
  4 move_exi   001450 R   |   4 move_lef   0009F2 R   |   4 move_loo   001434 R
  4 move_prg   000782 R   |   4 move_rig   000A00 R   |   4 move_up    001421 R
  4 mul24      00025D R   |   4 mul_char   001394 R   |   4 mulu24_8   00022A R
  4 nbr_tst    000F52 R   |   4 ne         0013AF R   |   4 neg24      0001F3 R
  4 neg_acc2   00020D R   |   4 neg_ax     000205 R   |   4 new        00269A R
  4 next       002282 R   |   4 next_lin   001753 R   |   4 next_tok   0017A1 GR
  4 no_match   001922 R   |   4 number     000666 R   |   4 op_dict    002FA7 R
  4 op_end     002F98 R   |   4 other      0010C0 R   |   4 overwrit   000C32 R
  2 pad        0016B8 GR  |   4 pad_ref    002F93 R   |   4 parse_bi   000E27 R
  4 parse_in   000DD4 R   |   4 parse_ke   000EAA R   |   4 parse_qu   000D7F R
  4 parse_sy   000E92 R   |   4 pause      002971 R   |   4 pause02    002984 R
  4 peek       0021A4 R   |   4 peek_byt   000600 R   |   4 pin_mode   002AFC R
  4 plus_tst   001037 R   |   4 poke       002183 R   |   4 power_ad   002540 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

  4 prcnt_ts   001058 R   |   4 print      001F65 R   |   4 print_ex   001FD9 R
  4 print_fa   000645 R   |   4 print_he   000C67 GR  |   4 print_re   0004C5 R
  4 print_st   0005C5 R   |   4 print_to   00181B R   |   4 prog_siz   001DC7 R
  4 program_   001DCF R   |   4 program_   00075C R   |   4 program_   000782 R
  4 prt_acc2   00180D R   |   4 prt_basi   001F41 R   |   4 prt_i16    0017F6 R
  4 prt_loop   001F69 R   |   4 prt_peek   000448 GR  |   4 prt_reg1   0004A6 R
  4 prt_reg8   000484 R   |   4 prt_regs   0003DE GR  |   5 ptr16      000019 GR
  5 ptr8       00001A R   |   4 putc       000944 GR  |   4 puts       0009A1 GR
  4 qgetc      00094D GR  |   4 qkey       0028CC GR  |   4 qmark_ts   000FE4 R
  4 qsign      002715 R   |   4 random     002B89 R   |   4 read       002E80 R
  4 read01     002E82 R   |   4 read_int   0035AA R   |   4 readln     000AA6 GR
  4 readln_l   000AB3 R   |   4 readln_q   000C4F R   |   4 refresh_   002D04 R
  4 regs_sta   000421 R   |   4 rel_exit   001B07 R   |   4 relation   001AB4 R
  4 relop_st   001397 R   |   4 remark     0020A2 GR  |   4 repl       00057E R
  4 repl_exi   0005A6 R   |   4 reset_co   001F67 R   |   4 rest_con   001FF5 R
  4 restore    002E39 R   |   4 restore_   002E7B R   |   4 return     002432 R
  4 right_al   001185 GR  |   4 row_alig   00089B R   |   4 row_eras   000715 R
  4 row_eras   000742 R   |   4 row_loop   000683 R   |   4 rparnt_t   000FA2 R
  4 rshift     002AC0 R   |   7 rsign      00007C R   |   7 rsize      00007E R
  4 rt_msg     00166D R   |   4 run        002450 R   |   4 run_app    000135 R
  4 run_it     002482 R   |   4 run_it_0   002484 R   |   5 rx1_head   00002E R
  5 rx1_queu   000026 R   |   5 rx1_tail   00002F R   |   4 save_app   002740 R
  4 save_con   001FE5 R   |   4 scan_blo   0008C4 R   |   4 search_c   001CD4 R
  4 search_d   001902 GR  |   4 search_e   00194C R   |   4 search_l   000C89 GR
  4 search_l   000C98 R   |   4 search_n   001906 R   |   4 search_o   002FAF R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   002B59 R
  4 send_esc   0009C9 R   |   4 send_par   0009D4 R   |   4 set_data   002E28 R
  4 set_time   002C8A R   |   4 sharp_ts   000FC3 R   |   4 show_row   000671 R
  4 single_c   00138D R   |   4 skip       000F0C R   |   4 skip_2_b   0017BE R
  4 skip_str   0017C7 R   |   4 slash_ts   00104D R   |   4 sleep      002966 R
  4 software   001463 R   |   4 spaces     000A0E GR  |   4 spi_clea   002F28 R
  4 spi_disa   002F10 R   |   4 spi_enab   002EDD R   |   4 spi_rcv_   002F4A R
  4 spi_read   002F75 R   |   4 spi_sele   002F7C R   |   4 spi_send   002F34 R
  4 spi_writ   002F55 R   |   2 stack_fu   001774 GR  |   2 stack_un   001800 R
  4 star_tst   001042 R   |   4 step       002240 R   |   4 stop       00264E R
  4 store_lo   00226F R   |   4 str_matc   00192F R   |   4 str_tst    000F42 R
  4 strcmp     0013EF R   |   4 strcpy     001400 GR  |   4 strlen     0013E4 GR
  4 sub24      000187 R   |   4 symb_loo   000E93 R   |   4 syntax_e   0016A0 GR
  4 system_i   0014A9 R   |   5 tab_widt   000023 GR  |   4 tb_error   0016A2 GR
  4 term       001A47 R   |   4 term01     001A4C R   |   4 term_exi   001A7E R
  4 test       00343B R   |   4 test_p     0005BD R   |   2 tib        001668 GR
  4 tick_tst   000FFC R   |   5 ticks      00000F R   |   4 timeout    002CA1 R
  5 timer      000012 GR  |   4 timer2_i   0000A1 R   |   4 timer4_i   0000AE R
  4 tk_id      001690 R   |   4 to         002200 R   |   4 to_eepro   0007AB R
  4 to_flash   0007B0 R   |   4 to_hex_c   000C7E GR  |   4 to_upper   00188C GR
  4 token_ch   0010D7 R   |   4 token_ex   0010DB R   |   4 tone       0024E9 R
  4 try_next   002E6B R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   000954 GR  |   4 uart1_in   0008FF R   |   4 uart1_pu   000944 GR
  4 uart1_qg   00094D GR  |   4 uart1_se   00090F R   |   4 ubound     001BE2 R
  4 uflash     002909 R   |   4 unlock_e   0006DF R   |   4 unlock_f   0006FA R
  4 until      002D85 R   |   4 user_int   000057 R   |   4 usr        00291E R
  4 var_name   0011DD GR  |   5 vars       000030 GR  |   4 wait       0020A8 R
  4 warm_ini   0014DA R   |   4 warm_sta   00172C R   |   4 words      002C24 R
  4 words_co   002C74 R   |   4 write      00282F R   |   4 write_bl   000860 GR
  4 write_bu   00079C R   |   4 write_by   0007E6 R   |   4 write_ee   000822 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

  4 write_ex   00085B R   |   4 write_fl   00080C R   |   4 write_nb   000885 R
  2 xstack_f   001738 GR  |   2 xstack_u   001774 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3604   flags    0
   5 DATA       size     7E   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

