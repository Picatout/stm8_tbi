ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;; hardware initialisation
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
                                     22 
                                     23     .module HW_INIT 
                                     24 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     25     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                     27   	.include "inc/nucleo_8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; NUCLEO-8S208RB board specific definitions
                                     20 ; Date: 2019/10/29
                                     21 ; author: Jacques Deschênes, copyright 2018,2019
                                     22 ; licence: GPLv3
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ; mcu on board is stm8s208rbt6
                                     26 
                                     27 ; crystal on board is 8Mhz
                           7A1200    28 FHSE = 8000000
                                     29 
                                     30 ; LED2 is user LED
                                     31 ; connected to PC5 via Q2 -> 2N7002 MOSFET
                           00500A    32 LED2_PORT = 0x500a ;port C  ODR
                           000005    33 LED2_BIT = 5
                           000020    34 LED2_MASK = (1<<LED2_BIT) ;bit 5 mask
                                     35 
                                     36     .macro _led2_on 
                                     37     bset LED2_PORT,#LED2_BIT 
                                     38     .endm 
                                     39 
                                     40     .macro _led2_off 
                                     41     bres LED2_PORT,#LED2_BIT 
                                     42     .endm 
                                     43 
                                     44     .macro _led2_toggle 
                                     45     ld a,LED2_PORT 
                                     46     xor a,#LED2_BIT 
                                     47     ld LED2_PORT,a 
                                     48     .endm 
                                     49      
                                     50 ; B1 on schematic is user button
                                     51 ; connected to PE4
                                     52 ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                           005015    53 USR_BTN_PORT = 0x5015 ; port E  IDR
                           000004    54 USR_BTN_BIT = 4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000010    55 USR_BTN_MASK = (1<<USR_BTN_BIT) ;bit 4 mask
                                     56 
                                     57 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                     28 	.include "inc/stm8s208.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 ; 2019/10/18
                                     20 ; STM8S208RB µC registers map
                                     21 ; sdas source file
                                     22 ; author: Jacques Deschênes, copyright 2018,2019
                                     23 ; licence: GPLv3
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 	.module stm8s208rb
                                     26 
                                     27 ;;;;;;;;;;;;
                                     28 ; bits
                                     29 ;;;;;;;;;;;;
                           000000    30  BIT0 = 0
                           000001    31  BIT1 = 1
                           000002    32  BIT2 = 2
                           000003    33  BIT3 = 3
                           000004    34  BIT4 = 4
                           000005    35  BIT5 = 5
                           000006    36  BIT6 = 6
                           000007    37  BIT7 = 7
                                     38  	
                                     39 ;;;;;;;;;;;;
                                     40 ; bits masks
                                     41 ;;;;;;;;;;;;
                           000001    42  B0_MASK = (1<<0)
                           000002    43  B1_MASK = (1<<1)
                           000004    44  B2_MASK = (1<<2)
                           000008    45  B3_MASK = (1<<3)
                           000010    46  B4_MASK = (1<<4)
                           000020    47  B5_MASK = (1<<5)
                           000040    48  B6_MASK = (1<<6)
                           000080    49  B7_MASK = (1<<7)
                                     50 
                                     51 ; HSI oscillator frequency 16Mhz
                           F42400    52  FHSI = 16000000
                                     53 ; LSI oscillator frequency 128Khz
                           01F400    54  FLSI = 128000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                     55 
                                     56 ; controller memory regions
                           001800    57  RAM_SIZE = (0x1800) ; 6KB 
                           000800    58  EEPROM_SIZE = (0x800) ; 2KB
                                     59 ; STM8S208RB have 128K flash
                           020000    60  FLASH_SIZE = (0x20000)
                                     61 ; erase block size 
                           000080    62 BLOCK_SIZE=128 
                                     63 
                           000000    64  RAM_BASE = (0)
                           0017FF    65  RAM_END = (RAM_BASE+RAM_SIZE-1)
                           004000    66  EEPROM_BASE = (0x4000)
                           0047FF    67  EEPROM_END = (EEPROM_BASE+EEPROM_SIZE-1)
                           005000    68  SFR_BASE = (0x5000)
                           0057FF    69  SFR_END = (0x57FF)
                           006000    70  BOOT_ROM_BASE = (0x6000)
                           007FFF    71  BOOT_ROM_END = (0x7fff)
                           008000    72  FLASH_BASE = (0x8000)
                           027FFF    73  FLASH_END = (FLASH_BASE+FLASH_SIZE-1)
                           004800    74  OPTION_BASE = (0x4800)
                           000080    75  OPTION_SIZE = (0x80)
                           00487F    76  OPTION_END = (OPTION_BASE+OPTION_SIZE-1)
                           0048CD    77  DEVID_BASE = (0x48CD)
                           0048D8    78  DEVID_END = (0x48D8)
                           007F00    79  DEBUG_BASE = (0X7F00)
                           007FFF    80  DEBUG_END = (0X7FFF)
                                     81 
                                     82 ; options bytes
                                     83 ; this one can be programmed only from SWIM  (ICP)
                           004800    84  OPT0  = (0x4800)
                                     85 ; these can be programmed at runtime (IAP)
                           004801    86  OPT1  = (0x4801)
                           004802    87  NOPT1  = (0x4802)
                           004803    88  OPT2  = (0x4803)
                           004804    89  NOPT2  = (0x4804)
                           004805    90  OPT3  = (0x4805)
                           004806    91  NOPT3  = (0x4806)
                           004807    92  OPT4  = (0x4807)
                           004808    93  NOPT4  = (0x4808)
                           004809    94  OPT5  = (0x4809)
                           00480A    95  NOPT5  = (0x480A)
                           00480B    96  OPT6  = (0x480B)
                           00480C    97  NOPT6 = (0x480C)
                           00480D    98  OPT7 = (0x480D)
                           00480E    99  NOPT7 = (0x480E)
                           00487E   100  OPTBL  = (0x487E)
                           00487F   101  NOPTBL  = (0x487F)
                                    102 ; option registers usage
                                    103 ; read out protection, value 0xAA enable ROP
                           004800   104  ROP = OPT0  
                                    105 ; user boot code, {0..0x3e} 512 bytes row
                           004801   106  UBC = OPT1
                           004802   107  NUBC = NOPT1
                                    108 ; alternate function register
                           004803   109  AFR = OPT2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           004804   110  NAFR = NOPT2
                                    111 ; miscelinous options
                           004805   112  WDGOPT = OPT3
                           004806   113  NWDGOPT = NOPT3
                                    114 ; clock options
                           004807   115  CLKOPT = OPT4
                           004808   116  NCLKOPT = NOPT4
                                    117 ; HSE clock startup delay
                           004809   118  HSECNT = OPT5
                           00480A   119  NHSECNT = NOPT5
                                    120 ; flash wait state
                           00480D   121 FLASH_WS = OPT7
                           00480E   122 NFLASH_WS = NOPT7
                                    123 
                                    124 ; watchdog options bits
                           000003   125   WDGOPT_LSIEN   =  BIT3
                           000002   126   WDGOPT_IWDG_HW =  BIT2
                           000001   127   WDGOPT_WWDG_HW =  BIT1
                           000000   128   WDGOPT_WWDG_HALT = BIT0
                                    129 ; NWDGOPT bits
                           FFFFFFFC   130   NWDGOPT_LSIEN    = ~BIT3
                           FFFFFFFD   131   NWDGOPT_IWDG_HW  = ~BIT2
                           FFFFFFFE   132   NWDGOPT_WWDG_HW  = ~BIT1
                           FFFFFFFF   133   NWDGOPT_WWDG_HALT = ~BIT0
                                    134 
                                    135 ; CLKOPT bits
                           000003   136  CLKOPT_EXT_CLK  = BIT3
                           000002   137  CLKOPT_CKAWUSEL = BIT2
                           000001   138  CLKOPT_PRS_C1   = BIT1
                           000000   139  CLKOPT_PRS_C0   = BIT0
                                    140 
                                    141 ; AFR option, remapable functions
                           000007   142  AFR7_BEEP    = BIT7
                           000006   143  AFR6_I2C     = BIT6
                           000005   144  AFR5_TIM1    = BIT5
                           000004   145  AFR4_TIM1    = BIT4
                           000003   146  AFR3_TIM1    = BIT3
                           000002   147  AFR2_CCO     = BIT2
                           000001   148  AFR1_TIM2    = BIT1
                           000000   149  AFR0_ADC     = BIT0
                                    150 
                                    151 ; device ID = (read only)
                           0048CD   152  DEVID_XL  = (0x48CD)
                           0048CE   153  DEVID_XH  = (0x48CE)
                           0048CF   154  DEVID_YL  = (0x48CF)
                           0048D0   155  DEVID_YH  = (0x48D0)
                           0048D1   156  DEVID_WAF  = (0x48D1)
                           0048D2   157  DEVID_LOT0  = (0x48D2)
                           0048D3   158  DEVID_LOT1  = (0x48D3)
                           0048D4   159  DEVID_LOT2  = (0x48D4)
                           0048D5   160  DEVID_LOT3  = (0x48D5)
                           0048D6   161  DEVID_LOT4  = (0x48D6)
                           0048D7   162  DEVID_LOT5  = (0x48D7)
                           0048D8   163  DEVID_LOT6  = (0x48D8)
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    165 
                           005000   166 GPIO_BASE = (0x5000)
                           000005   167 GPIO_SIZE = (5)
                                    168 ; PORTS SFR OFFSET
                           000000   169 PA = 0
                           000005   170 PB = 5
                           00000A   171 PC = 10
                           00000F   172 PD = 15
                           000014   173 PE = 20
                           000019   174 PF = 25
                           00001E   175 PG = 30
                           000023   176 PH = 35 
                           000028   177 PI = 40 
                                    178 
                                    179 ; GPIO
                                    180 ; gpio register offset to base
                           000000   181  GPIO_ODR = 0
                           000001   182  GPIO_IDR = 1
                           000002   183  GPIO_DDR = 2
                           000003   184  GPIO_CR1 = 3
                           000004   185  GPIO_CR2 = 4
                           005000   186  GPIO_BASE=(0X5000)
                                    187  
                                    188 ; port A
                           005000   189  PA_BASE = (0X5000)
                           005000   190  PA_ODR  = (0x5000)
                           005001   191  PA_IDR  = (0x5001)
                           005002   192  PA_DDR  = (0x5002)
                           005003   193  PA_CR1  = (0x5003)
                           005004   194  PA_CR2  = (0x5004)
                                    195 ; port B
                           005005   196  PB_BASE = (0X5005)
                           005005   197  PB_ODR  = (0x5005)
                           005006   198  PB_IDR  = (0x5006)
                           005007   199  PB_DDR  = (0x5007)
                           005008   200  PB_CR1  = (0x5008)
                           005009   201  PB_CR2  = (0x5009)
                                    202 ; port C
                           00500A   203  PC_BASE = (0X500A)
                           00500A   204  PC_ODR  = (0x500A)
                           00500B   205  PC_IDR  = (0x500B)
                           00500C   206  PC_DDR  = (0x500C)
                           00500D   207  PC_CR1  = (0x500D)
                           00500E   208  PC_CR2  = (0x500E)
                                    209 ; port D
                           00500F   210  PD_BASE = (0X500F)
                           00500F   211  PD_ODR  = (0x500F)
                           005010   212  PD_IDR  = (0x5010)
                           005011   213  PD_DDR  = (0x5011)
                           005012   214  PD_CR1  = (0x5012)
                           005013   215  PD_CR2  = (0x5013)
                                    216 ; port E
                           005014   217  PE_BASE = (0X5014)
                           005014   218  PE_ODR  = (0x5014)
                           005015   219  PE_IDR  = (0x5015)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                           005016   220  PE_DDR  = (0x5016)
                           005017   221  PE_CR1  = (0x5017)
                           005018   222  PE_CR2  = (0x5018)
                                    223 ; port F
                           005019   224  PF_BASE = (0X5019)
                           005019   225  PF_ODR  = (0x5019)
                           00501A   226  PF_IDR  = (0x501A)
                           00501B   227  PF_DDR  = (0x501B)
                           00501C   228  PF_CR1  = (0x501C)
                           00501D   229  PF_CR2  = (0x501D)
                                    230 ; port G
                           00501E   231  PG_BASE = (0X501E)
                           00501E   232  PG_ODR  = (0x501E)
                           00501F   233  PG_IDR  = (0x501F)
                           005020   234  PG_DDR  = (0x5020)
                           005021   235  PG_CR1  = (0x5021)
                           005022   236  PG_CR2  = (0x5022)
                                    237 ; port H not present on LQFP48/LQFP64 package
                           005023   238  PH_BASE = (0X5023)
                           005023   239  PH_ODR  = (0x5023)
                           005024   240  PH_IDR  = (0x5024)
                           005025   241  PH_DDR  = (0x5025)
                           005026   242  PH_CR1  = (0x5026)
                           005027   243  PH_CR2  = (0x5027)
                                    244 ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                           005028   245  PI_BASE = (0X5028)
                           005028   246  PI_ODR  = (0x5028)
                           005029   247  PI_IDR  = (0x5029)
                           00502A   248  PI_DDR  = (0x502a)
                           00502B   249  PI_CR1  = (0x502b)
                           00502C   250  PI_CR2  = (0x502c)
                                    251 
                                    252 ; input modes CR1
                           000000   253  INPUT_FLOAT = (0) ; no pullup resistor
                           000001   254  INPUT_PULLUP = (1)
                                    255 ; output mode CR1
                           000000   256  OUTPUT_OD = (0) ; open drain
                           000001   257  OUTPUT_PP = (1) ; push pull
                                    258 ; input modes CR2
                           000000   259  INPUT_DI = (0)
                           000001   260  INPUT_EI = (1)
                                    261 ; output speed CR2
                           000000   262  OUTPUT_SLOW = (0)
                           000001   263  OUTPUT_FAST = (1)
                                    264 
                                    265 
                                    266 ; Flash memory
                           000080   267  BLOCK_SIZE=128 
                           00505A   268  FLASH_CR1  = (0x505A)
                           00505B   269  FLASH_CR2  = (0x505B)
                           00505C   270  FLASH_NCR2  = (0x505C)
                           00505D   271  FLASH_FPR  = (0x505D)
                           00505E   272  FLASH_NFPR  = (0x505E)
                           00505F   273  FLASH_IAPSR  = (0x505F)
                           005062   274  FLASH_PUKR  = (0x5062)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                           005064   275  FLASH_DUKR  = (0x5064)
                                    276 ; data memory unlock keys
                           0000AE   277  FLASH_DUKR_KEY1 = (0xae)
                           000056   278  FLASH_DUKR_KEY2 = (0x56)
                                    279 ; flash memory unlock keys
                           000056   280  FLASH_PUKR_KEY1 = (0x56)
                           0000AE   281  FLASH_PUKR_KEY2 = (0xae)
                                    282 ; FLASH_CR1 bits
                           000003   283  FLASH_CR1_HALT = BIT3
                           000002   284  FLASH_CR1_AHALT = BIT2
                           000001   285  FLASH_CR1_IE = BIT1
                           000000   286  FLASH_CR1_FIX = BIT0
                                    287 ; FLASH_CR2 bits
                           000007   288  FLASH_CR2_OPT = BIT7
                           000006   289  FLASH_CR2_WPRG = BIT6
                           000005   290  FLASH_CR2_ERASE = BIT5
                           000004   291  FLASH_CR2_FPRG = BIT4
                           000000   292  FLASH_CR2_PRG = BIT0
                                    293 ; FLASH_FPR bits
                           000005   294  FLASH_FPR_WPB5 = BIT5
                           000004   295  FLASH_FPR_WPB4 = BIT4
                           000003   296  FLASH_FPR_WPB3 = BIT3
                           000002   297  FLASH_FPR_WPB2 = BIT2
                           000001   298  FLASH_FPR_WPB1 = BIT1
                           000000   299  FLASH_FPR_WPB0 = BIT0
                                    300 ; FLASH_NFPR bits
                           000005   301  FLASH_NFPR_NWPB5 = BIT5
                           000004   302  FLASH_NFPR_NWPB4 = BIT4
                           000003   303  FLASH_NFPR_NWPB3 = BIT3
                           000002   304  FLASH_NFPR_NWPB2 = BIT2
                           000001   305  FLASH_NFPR_NWPB1 = BIT1
                           000000   306  FLASH_NFPR_NWPB0 = BIT0
                                    307 ; FLASH_IAPSR bits
                           000006   308  FLASH_IAPSR_HVOFF = BIT6
                           000003   309  FLASH_IAPSR_DUL = BIT3
                           000002   310  FLASH_IAPSR_EOP = BIT2
                           000001   311  FLASH_IAPSR_PUL = BIT1
                           000000   312  FLASH_IAPSR_WR_PG_DIS = BIT0
                                    313 
                                    314 ; Interrupt control
                           0050A0   315  EXTI_CR1  = (0x50A0)
                           0050A1   316  EXTI_CR2  = (0x50A1)
                                    317 
                                    318 ; Reset Status
                           0050B3   319  RST_SR  = (0x50B3)
                                    320 
                                    321 ; Clock Registers
                           0050C0   322  CLK_ICKR  = (0x50c0)
                           0050C1   323  CLK_ECKR  = (0x50c1)
                           0050C3   324  CLK_CMSR  = (0x50C3)
                           0050C4   325  CLK_SWR  = (0x50C4)
                           0050C5   326  CLK_SWCR  = (0x50C5)
                           0050C6   327  CLK_CKDIVR  = (0x50C6)
                           0050C7   328  CLK_PCKENR1  = (0x50C7)
                           0050C8   329  CLK_CSSR  = (0x50C8)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           0050C9   330  CLK_CCOR  = (0x50C9)
                           0050CA   331  CLK_PCKENR2  = (0x50CA)
                           0050CC   332  CLK_HSITRIMR  = (0x50CC)
                           0050CD   333  CLK_SWIMCCR  = (0x50CD)
                                    334 
                                    335 ; Peripherals clock gating
                                    336 ; CLK_PCKENR1 
                           000007   337  CLK_PCKENR1_TIM1 = (7)
                           000006   338  CLK_PCKENR1_TIM3 = (6)
                           000005   339  CLK_PCKENR1_TIM2 = (5)
                           000004   340  CLK_PCKENR1_TIM4 = (4)
                           000003   341  CLK_PCKENR1_UART3 = (3)
                           000002   342  CLK_PCKENR1_UART1 = (2)
                           000001   343  CLK_PCKENR1_SPI = (1)
                           000000   344  CLK_PCKENR1_I2C = (0)
                                    345 ; CLK_PCKENR2
                           000007   346  CLK_PCKENR2_CAN = (7)
                           000003   347  CLK_PCKENR2_ADC = (3)
                           000002   348  CLK_PCKENR2_AWU = (2)
                                    349 
                                    350 ; Clock bits
                           000005   351  CLK_ICKR_REGAH = (5)
                           000004   352  CLK_ICKR_LSIRDY = (4)
                           000003   353  CLK_ICKR_LSIEN = (3)
                           000002   354  CLK_ICKR_FHW = (2)
                           000001   355  CLK_ICKR_HSIRDY = (1)
                           000000   356  CLK_ICKR_HSIEN = (0)
                                    357 
                           000001   358  CLK_ECKR_HSERDY = (1)
                           000000   359  CLK_ECKR_HSEEN = (0)
                                    360 ; clock source
                           0000E1   361  CLK_SWR_HSI = 0xE1
                           0000D2   362  CLK_SWR_LSI = 0xD2
                           0000B4   363  CLK_SWR_HSE = 0xB4
                                    364 
                           000003   365  CLK_SWCR_SWIF = (3)
                           000002   366  CLK_SWCR_SWIEN = (2)
                           000001   367  CLK_SWCR_SWEN = (1)
                           000000   368  CLK_SWCR_SWBSY = (0)
                                    369 
                           000004   370  CLK_CKDIVR_HSIDIV1 = (4)
                           000003   371  CLK_CKDIVR_HSIDIV0 = (3)
                           000002   372  CLK_CKDIVR_CPUDIV2 = (2)
                           000001   373  CLK_CKDIVR_CPUDIV1 = (1)
                           000000   374  CLK_CKDIVR_CPUDIV0 = (0)
                                    375 
                                    376 ; Watchdog
                           0050D1   377  WWDG_CR  = (0x50D1)
                           0050D2   378  WWDG_WR  = (0x50D2)
                           0050E0   379  IWDG_KR  = (0x50E0)
                           0050E1   380  IWDG_PR  = (0x50E1)
                           0050E2   381  IWDG_RLR  = (0x50E2)
                           0000CC   382  IWDG_KEY_ENABLE = 0xCC  ; enable IWDG key 
                           0000AA   383  IWDG_KEY_REFRESH = 0xAA ; refresh counter key 
                           000055   384  IWDG_KEY_ACCESS = 0x55 ; write register key 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    385  
                           0050F0   386  AWU_CSR  = (0x50F0)
                           0050F1   387  AWU_APR  = (0x50F1)
                           0050F2   388  AWU_TBR  = (0x50F2)
                           000004   389  AWU_CSR_AWUEN = 4
                                    390 
                                    391 
                                    392 
                                    393 ; Beeper
                                    394 ; beeper output is alternate function AFR7 on PD4
                                    395 ; connected to CN9-6
                           0050F3   396  BEEP_CSR  = (0x50F3)
                           00000F   397  BEEP_PORT = PD
                           000004   398  BEEP_BIT = 4
                           000010   399  BEEP_MASK = B4_MASK
                                    400 
                                    401 ; SPI
                           005200   402  SPI_CR1  = (0x5200)
                           005201   403  SPI_CR2  = (0x5201)
                           005202   404  SPI_ICR  = (0x5202)
                           005203   405  SPI_SR  = (0x5203)
                           005204   406  SPI_DR  = (0x5204)
                           005205   407  SPI_CRCPR  = (0x5205)
                           005206   408  SPI_RXCRCR  = (0x5206)
                           005207   409  SPI_TXCRCR  = (0x5207)
                                    410 
                                    411 ; SPI_CR1 bit fields 
                           000000   412   SPI_CR1_CPHA=0
                           000001   413   SPI_CR1_CPOL=1
                           000002   414   SPI_CR1_MSTR=2
                           000003   415   SPI_CR1_BR=3
                           000006   416   SPI_CR1_SPE=6
                           000007   417   SPI_CR1_LSBFIRST=7
                                    418   
                                    419 ; SPI_CR2 bit fields 
                           000000   420   SPI_CR2_SSI=0
                           000001   421   SPI_CR2_SSM=1
                           000002   422   SPI_CR2_RXONLY=2
                           000004   423   SPI_CR2_CRCNEXT=4
                           000005   424   SPI_CR2_CRCEN=5
                           000006   425   SPI_CR2_BDOE=6
                           000007   426   SPI_CR2_BDM=7  
                                    427 
                                    428 ; SPI_SR bit fields 
                           000000   429   SPI_SR_RXNE=0
                           000001   430   SPI_SR_TXE=1
                           000003   431   SPI_SR_WKUP=3
                           000004   432   SPI_SR_CRCERR=4
                           000005   433   SPI_SR_MODF=5
                           000006   434   SPI_SR_OVR=6
                           000007   435   SPI_SR_BSY=7
                                    436 
                                    437 ; I2C
                           005210   438  I2C_CR1  = (0x5210)
                           005211   439  I2C_CR2  = (0x5211)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                           005212   440  I2C_FREQR  = (0x5212)
                           005213   441  I2C_OARL  = (0x5213)
                           005214   442  I2C_OARH  = (0x5214)
                           005216   443  I2C_DR  = (0x5216)
                           005217   444  I2C_SR1  = (0x5217)
                           005218   445  I2C_SR2  = (0x5218)
                           005219   446  I2C_SR3  = (0x5219)
                           00521A   447  I2C_ITR  = (0x521A)
                           00521B   448  I2C_CCRL  = (0x521B)
                           00521C   449  I2C_CCRH  = (0x521C)
                           00521D   450  I2C_TRISER  = (0x521D)
                           00521E   451  I2C_PECR  = (0x521E)
                                    452 
                           000007   453  I2C_CR1_NOSTRETCH = (7)
                           000006   454  I2C_CR1_ENGC = (6)
                           000000   455  I2C_CR1_PE = (0)
                                    456 
                           000007   457  I2C_CR2_SWRST = (7)
                           000003   458  I2C_CR2_POS = (3)
                           000002   459  I2C_CR2_ACK = (2)
                           000001   460  I2C_CR2_STOP = (1)
                           000000   461  I2C_CR2_START = (0)
                                    462 
                           000000   463  I2C_OARL_ADD0 = (0)
                                    464 
                           000009   465  I2C_OAR_ADDR_7BIT = ((I2C_OARL & 0xFE) >> 1)
                           000813   466  I2C_OAR_ADDR_10BIT = (((I2C_OARH & 0x06) << 9) | (I2C_OARL & 0xFF))
                                    467 
                           000007   468  I2C_OARH_ADDMODE = (7)
                           000006   469  I2C_OARH_ADDCONF = (6)
                           000002   470  I2C_OARH_ADD9 = (2)
                           000001   471  I2C_OARH_ADD8 = (1)
                                    472 
                           000007   473  I2C_SR1_TXE = (7)
                           000006   474  I2C_SR1_RXNE = (6)
                           000004   475  I2C_SR1_STOPF = (4)
                           000003   476  I2C_SR1_ADD10 = (3)
                           000002   477  I2C_SR1_BTF = (2)
                           000001   478  I2C_SR1_ADDR = (1)
                           000000   479  I2C_SR1_SB = (0)
                                    480 
                           000005   481  I2C_SR2_WUFH = (5)
                           000003   482  I2C_SR2_OVR = (3)
                           000002   483  I2C_SR2_AF = (2)
                           000001   484  I2C_SR2_ARLO = (1)
                           000000   485  I2C_SR2_BERR = (0)
                                    486 
                           000007   487  I2C_SR3_DUALF = (7)
                           000004   488  I2C_SR3_GENCALL = (4)
                           000002   489  I2C_SR3_TRA = (2)
                           000001   490  I2C_SR3_BUSY = (1)
                           000000   491  I2C_SR3_MSL = (0)
                                    492 
                           000002   493  I2C_ITR_ITBUFEN = (2)
                           000001   494  I2C_ITR_ITEVTEN = (1)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           000000   495  I2C_ITR_ITERREN = (0)
                                    496 
                                    497 ; Precalculated values, all in KHz
                           000080   498  I2C_CCRH_16MHZ_FAST_400 = 0x80
                           00000D   499  I2C_CCRL_16MHZ_FAST_400 = 0x0D
                                    500 ;
                                    501 ; Fast I2C mode max rise time = 300ns
                                    502 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    503 ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                    504 
                           000005   505  I2C_TRISER_16MHZ_FAST_400 = 0x05
                                    506 
                           0000C0   507  I2C_CCRH_16MHZ_FAST_320 = 0xC0
                           000002   508  I2C_CCRL_16MHZ_FAST_320 = 0x02
                           000005   509  I2C_TRISER_16MHZ_FAST_320 = 0x05
                                    510 
                           000080   511  I2C_CCRH_16MHZ_FAST_200 = 0x80
                           00001A   512  I2C_CCRL_16MHZ_FAST_200 = 0x1A
                           000005   513  I2C_TRISER_16MHZ_FAST_200 = 0x05
                                    514 
                           000000   515  I2C_CCRH_16MHZ_STD_100 = 0x00
                           000050   516  I2C_CCRL_16MHZ_STD_100 = 0x50
                                    517 ;
                                    518 ; Standard I2C mode max rise time = 1000ns
                                    519 ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                    520 ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                    521 
                           000011   522  I2C_TRISER_16MHZ_STD_100 = 0x11
                                    523 
                           000000   524  I2C_CCRH_16MHZ_STD_50 = 0x00
                           0000A0   525  I2C_CCRL_16MHZ_STD_50 = 0xA0
                           000011   526  I2C_TRISER_16MHZ_STD_50 = 0x11
                                    527 
                           000001   528  I2C_CCRH_16MHZ_STD_20 = 0x01
                           000090   529  I2C_CCRL_16MHZ_STD_20 = 0x90
                           000011   530  I2C_TRISER_16MHZ_STD_20 = 0x11;
                                    531 
                           000001   532  I2C_READ = 1
                           000000   533  I2C_WRITE = 0
                                    534 
                                    535 ; baudrate constant for brr_value table access
                                    536 ; to be used by uart_init 
                           000000   537 B2400=0
                           000001   538 B4800=1
                           000002   539 B9600=2
                           000003   540 B19200=3
                           000004   541 B38400=4
                           000005   542 B57600=5
                           000006   543 B115200=6
                           000007   544 B230400=7
                           000008   545 B460800=8
                           000009   546 B921600=9
                                    547 
                                    548 ; UART registers offset from
                                    549 ; base address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000000   550 UART_SR=0
                           000001   551 UART_DR=1
                           000002   552 UART_BRR1=2
                           000003   553 UART_BRR2=3
                           000004   554 UART_CR1=4
                           000005   555 UART_CR2=5
                           000006   556 UART_CR3=6
                           000007   557 UART_CR4=7
                           000008   558 UART_CR5=8
                           000009   559 UART_CR6=9
                           000009   560 UART_GTR=9
                           00000A   561 UART_PSCR=10
                                    562 
                                    563 ; uart identifier
                           000000   564  UART1 = 0 
                           000001   565  UART2 = 1
                           000002   566  UART3 = 2
                                    567 
                                    568 ; pins used by uart 
                           000005   569 UART1_TX_PIN=BIT5
                           000004   570 UART1_RX_PIN=BIT4
                           000005   571 UART3_TX_PIN=BIT5
                           000006   572 UART3_RX_PIN=BIT6
                                    573 ; uart port base address 
                           000000   574 UART1_PORT=PA 
                           00000F   575 UART3_PORT=PD
                                    576 
                                    577 ; UART1 
                           005230   578  UART1_BASE  = (0x5230)
                           005230   579  UART1_SR    = (0x5230)
                           005231   580  UART1_DR    = (0x5231)
                           005232   581  UART1_BRR1  = (0x5232)
                           005233   582  UART1_BRR2  = (0x5233)
                           005234   583  UART1_CR1   = (0x5234)
                           005235   584  UART1_CR2   = (0x5235)
                           005236   585  UART1_CR3   = (0x5236)
                           005237   586  UART1_CR4   = (0x5237)
                           005238   587  UART1_CR5   = (0x5238)
                           005239   588  UART1_GTR   = (0x5239)
                           00523A   589  UART1_PSCR  = (0x523A)
                                    590 
                                    591 ; UART3
                           005240   592  UART3_BASE  = (0x5240)
                           005240   593  UART3_SR    = (0x5240)
                           005241   594  UART3_DR    = (0x5241)
                           005242   595  UART3_BRR1  = (0x5242)
                           005243   596  UART3_BRR2  = (0x5243)
                           005244   597  UART3_CR1   = (0x5244)
                           005245   598  UART3_CR2   = (0x5245)
                           005246   599  UART3_CR3   = (0x5246)
                           005247   600  UART3_CR4   = (0x5247)
                           004249   601  UART3_CR6   = (0x4249)
                                    602 
                                    603 ; UART Status Register bits
                           000007   604  UART_SR_TXE = (7)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                           000006   605  UART_SR_TC = (6)
                           000005   606  UART_SR_RXNE = (5)
                           000004   607  UART_SR_IDLE = (4)
                           000003   608  UART_SR_OR = (3)
                           000002   609  UART_SR_NF = (2)
                           000001   610  UART_SR_FE = (1)
                           000000   611  UART_SR_PE = (0)
                                    612 
                                    613 ; Uart Control Register bits
                           000007   614  UART_CR1_R8 = (7)
                           000006   615  UART_CR1_T8 = (6)
                           000005   616  UART_CR1_UARTD = (5)
                           000004   617  UART_CR1_M = (4)
                           000003   618  UART_CR1_WAKE = (3)
                           000002   619  UART_CR1_PCEN = (2)
                           000001   620  UART_CR1_PS = (1)
                           000000   621  UART_CR1_PIEN = (0)
                                    622 
                           000007   623  UART_CR2_TIEN = (7)
                           000006   624  UART_CR2_TCIEN = (6)
                           000005   625  UART_CR2_RIEN = (5)
                           000004   626  UART_CR2_ILIEN = (4)
                           000003   627  UART_CR2_TEN = (3)
                           000002   628  UART_CR2_REN = (2)
                           000001   629  UART_CR2_RWU = (1)
                           000000   630  UART_CR2_SBK = (0)
                                    631 
                           000006   632  UART_CR3_LINEN = (6)
                           000005   633  UART_CR3_STOP1 = (5)
                           000004   634  UART_CR3_STOP0 = (4)
                           000003   635  UART_CR3_CLKEN = (3)
                           000002   636  UART_CR3_CPOL = (2)
                           000001   637  UART_CR3_CPHA = (1)
                           000000   638  UART_CR3_LBCL = (0)
                                    639 
                           000006   640  UART_CR4_LBDIEN = (6)
                           000005   641  UART_CR4_LBDL = (5)
                           000004   642  UART_CR4_LBDF = (4)
                           000003   643  UART_CR4_ADD3 = (3)
                           000002   644  UART_CR4_ADD2 = (2)
                           000001   645  UART_CR4_ADD1 = (1)
                           000000   646  UART_CR4_ADD0 = (0)
                                    647 
                           000005   648  UART_CR5_SCEN = (5)
                           000004   649  UART_CR5_NACK = (4)
                           000003   650  UART_CR5_HDSEL = (3)
                           000002   651  UART_CR5_IRLP = (2)
                           000001   652  UART_CR5_IREN = (1)
                                    653 ; LIN mode config register
                           000007   654  UART_CR6_LDUM = (7)
                           000005   655  UART_CR6_LSLV = (5)
                           000004   656  UART_CR6_LASE = (4)
                           000002   657  UART_CR6_LHDIEN = (2) 
                           000001   658  UART_CR6_LHDF = (1)
                           000000   659  UART_CR6_LSF = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    660 
                                    661 ; TIMERS
                                    662 ; Timer 1 - 16-bit timer with complementary PWM outputs
                           005250   663  TIM1_CR1  = (0x5250)
                           005251   664  TIM1_CR2  = (0x5251)
                           005252   665  TIM1_SMCR  = (0x5252)
                           005253   666  TIM1_ETR  = (0x5253)
                           005254   667  TIM1_IER  = (0x5254)
                           005255   668  TIM1_SR1  = (0x5255)
                           005256   669  TIM1_SR2  = (0x5256)
                           005257   670  TIM1_EGR  = (0x5257)
                           005258   671  TIM1_CCMR1  = (0x5258)
                           005259   672  TIM1_CCMR2  = (0x5259)
                           00525A   673  TIM1_CCMR3  = (0x525A)
                           00525B   674  TIM1_CCMR4  = (0x525B)
                           00525C   675  TIM1_CCER1  = (0x525C)
                           00525D   676  TIM1_CCER2  = (0x525D)
                           00525E   677  TIM1_CNTRH  = (0x525E)
                           00525F   678  TIM1_CNTRL  = (0x525F)
                           005260   679  TIM1_PSCRH  = (0x5260)
                           005261   680  TIM1_PSCRL  = (0x5261)
                           005262   681  TIM1_ARRH  = (0x5262)
                           005263   682  TIM1_ARRL  = (0x5263)
                           005264   683  TIM1_RCR  = (0x5264)
                           005265   684  TIM1_CCR1H  = (0x5265)
                           005266   685  TIM1_CCR1L  = (0x5266)
                           005267   686  TIM1_CCR2H  = (0x5267)
                           005268   687  TIM1_CCR2L  = (0x5268)
                           005269   688  TIM1_CCR3H  = (0x5269)
                           00526A   689  TIM1_CCR3L  = (0x526A)
                           00526B   690  TIM1_CCR4H  = (0x526B)
                           00526C   691  TIM1_CCR4L  = (0x526C)
                           00526D   692  TIM1_BKR  = (0x526D)
                           00526E   693  TIM1_DTR  = (0x526E)
                           00526F   694  TIM1_OISR  = (0x526F)
                                    695 
                                    696 ; Timer Control Register bits
                           000007   697  TIM_CR1_ARPE = (7)
                           000006   698  TIM_CR1_CMSH = (6)
                           000005   699  TIM_CR1_CMSL = (5)
                           000004   700  TIM_CR1_DIR = (4)
                           000003   701  TIM_CR1_OPM = (3)
                           000002   702  TIM_CR1_URS = (2)
                           000001   703  TIM_CR1_UDIS = (1)
                           000000   704  TIM_CR1_CEN = (0)
                                    705 
                           000006   706  TIM1_CR2_MMS2 = (6)
                           000005   707  TIM1_CR2_MMS1 = (5)
                           000004   708  TIM1_CR2_MMS0 = (4)
                           000002   709  TIM1_CR2_COMS = (2)
                           000000   710  TIM1_CR2_CCPC = (0)
                                    711 
                                    712 ; Timer Slave Mode Control bits
                           000007   713  TIM1_SMCR_MSM = (7)
                           000006   714  TIM1_SMCR_TS2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                           000005   715  TIM1_SMCR_TS1 = (5)
                           000004   716  TIM1_SMCR_TS0 = (4)
                           000002   717  TIM1_SMCR_SMS2 = (2)
                           000001   718  TIM1_SMCR_SMS1 = (1)
                           000000   719  TIM1_SMCR_SMS0 = (0)
                                    720 
                                    721 ; Timer External Trigger Enable bits
                           000007   722  TIM1_ETR_ETP = (7)
                           000006   723  TIM1_ETR_ECE = (6)
                           000005   724  TIM1_ETR_ETPS1 = (5)
                           000004   725  TIM1_ETR_ETPS0 = (4)
                           000003   726  TIM1_ETR_ETF3 = (3)
                           000002   727  TIM1_ETR_ETF2 = (2)
                           000001   728  TIM1_ETR_ETF1 = (1)
                           000000   729  TIM1_ETR_ETF0 = (0)
                                    730 
                                    731 ; Timer Interrupt Enable bits
                           000007   732  TIM1_IER_BIE = (7)
                           000006   733  TIM1_IER_TIE = (6)
                           000005   734  TIM1_IER_COMIE = (5)
                           000004   735  TIM1_IER_CC4IE = (4)
                           000003   736  TIM1_IER_CC3IE = (3)
                           000002   737  TIM1_IER_CC2IE = (2)
                           000001   738  TIM1_IER_CC1IE = (1)
                           000000   739  TIM1_IER_UIE = (0)
                                    740 
                                    741 ; Timer Status Register bits
                           000007   742  TIM1_SR1_BIF = (7)
                           000006   743  TIM1_SR1_TIF = (6)
                           000005   744  TIM1_SR1_COMIF = (5)
                           000004   745  TIM1_SR1_CC4IF = (4)
                           000003   746  TIM1_SR1_CC3IF = (3)
                           000002   747  TIM1_SR1_CC2IF = (2)
                           000001   748  TIM1_SR1_CC1IF = (1)
                           000000   749  TIM1_SR1_UIF = (0)
                                    750 
                           000004   751  TIM1_SR2_CC4OF = (4)
                           000003   752  TIM1_SR2_CC3OF = (3)
                           000002   753  TIM1_SR2_CC2OF = (2)
                           000001   754  TIM1_SR2_CC1OF = (1)
                                    755 
                                    756 ; Timer Event Generation Register bits
                           000007   757  TIM1_EGR_BG = (7)
                           000006   758  TIM1_EGR_TG = (6)
                           000005   759  TIM1_EGR_COMG = (5)
                           000004   760  TIM1_EGR_CC4G = (4)
                           000003   761  TIM1_EGR_CC3G = (3)
                           000002   762  TIM1_EGR_CC2G = (2)
                           000001   763  TIM1_EGR_CC1G = (1)
                           000000   764  TIM1_EGR_UG = (0)
                                    765 
                                    766 ; Capture/Compare Mode Register 1 - channel configured in output
                           000007   767  TIM1_CCMR1_OC1CE = (7)
                           000006   768  TIM1_CCMR1_OC1M2 = (6)
                           000005   769  TIM1_CCMR1_OC1M1 = (5)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000004   770  TIM1_CCMR1_OC1M0 = (4)
                           000003   771  TIM1_CCMR1_OC1PE = (3)
                           000002   772  TIM1_CCMR1_OC1FE = (2)
                           000001   773  TIM1_CCMR1_CC1S1 = (1)
                           000000   774  TIM1_CCMR1_CC1S0 = (0)
                                    775 
                                    776 ; Capture/Compare Mode Register 1 - channel configured in input
                           000007   777  TIM1_CCMR1_IC1F3 = (7)
                           000006   778  TIM1_CCMR1_IC1F2 = (6)
                           000005   779  TIM1_CCMR1_IC1F1 = (5)
                           000004   780  TIM1_CCMR1_IC1F0 = (4)
                           000003   781  TIM1_CCMR1_IC1PSC1 = (3)
                           000002   782  TIM1_CCMR1_IC1PSC0 = (2)
                                    783 ;  TIM1_CCMR1_CC1S1 = (1)
                           000000   784  TIM1_CCMR1_CC1S0 = (0)
                                    785 
                                    786 ; Capture/Compare Mode Register 2 - channel configured in output
                           000007   787  TIM1_CCMR2_OC2CE = (7)
                           000006   788  TIM1_CCMR2_OC2M2 = (6)
                           000005   789  TIM1_CCMR2_OC2M1 = (5)
                           000004   790  TIM1_CCMR2_OC2M0 = (4)
                           000003   791  TIM1_CCMR2_OC2PE = (3)
                           000002   792  TIM1_CCMR2_OC2FE = (2)
                           000001   793  TIM1_CCMR2_CC2S1 = (1)
                           000000   794  TIM1_CCMR2_CC2S0 = (0)
                                    795 
                                    796 ; Capture/Compare Mode Register 2 - channel configured in input
                           000007   797  TIM1_CCMR2_IC2F3 = (7)
                           000006   798  TIM1_CCMR2_IC2F2 = (6)
                           000005   799  TIM1_CCMR2_IC2F1 = (5)
                           000004   800  TIM1_CCMR2_IC2F0 = (4)
                           000003   801  TIM1_CCMR2_IC2PSC1 = (3)
                           000002   802  TIM1_CCMR2_IC2PSC0 = (2)
                                    803 ;  TIM1_CCMR2_CC2S1 = (1)
                           000000   804  TIM1_CCMR2_CC2S0 = (0)
                                    805 
                                    806 ; Capture/Compare Mode Register 3 - channel configured in output
                           000007   807  TIM1_CCMR3_OC3CE = (7)
                           000006   808  TIM1_CCMR3_OC3M2 = (6)
                           000005   809  TIM1_CCMR3_OC3M1 = (5)
                           000004   810  TIM1_CCMR3_OC3M0 = (4)
                           000003   811  TIM1_CCMR3_OC3PE = (3)
                           000002   812  TIM1_CCMR3_OC3FE = (2)
                           000001   813  TIM1_CCMR3_CC3S1 = (1)
                           000000   814  TIM1_CCMR3_CC3S0 = (0)
                                    815 
                                    816 ; Capture/Compare Mode Register 3 - channel configured in input
                           000007   817  TIM1_CCMR3_IC3F3 = (7)
                           000006   818  TIM1_CCMR3_IC3F2 = (6)
                           000005   819  TIM1_CCMR3_IC3F1 = (5)
                           000004   820  TIM1_CCMR3_IC3F0 = (4)
                           000003   821  TIM1_CCMR3_IC3PSC1 = (3)
                           000002   822  TIM1_CCMR3_IC3PSC0 = (2)
                                    823 ;  TIM1_CCMR3_CC3S1 = (1)
                           000000   824  TIM1_CCMR3_CC3S0 = (0)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                    825 
                                    826 ; Capture/Compare Mode Register 4 - channel configured in output
                           000007   827  TIM1_CCMR4_OC4CE = (7)
                           000006   828  TIM1_CCMR4_OC4M2 = (6)
                           000005   829  TIM1_CCMR4_OC4M1 = (5)
                           000004   830  TIM1_CCMR4_OC4M0 = (4)
                           000003   831  TIM1_CCMR4_OC4PE = (3)
                           000002   832  TIM1_CCMR4_OC4FE = (2)
                           000001   833  TIM1_CCMR4_CC4S1 = (1)
                           000000   834  TIM1_CCMR4_CC4S0 = (0)
                                    835 
                                    836 ; Capture/Compare Mode Register 4 - channel configured in input
                           000007   837  TIM1_CCMR4_IC4F3 = (7)
                           000006   838  TIM1_CCMR4_IC4F2 = (6)
                           000005   839  TIM1_CCMR4_IC4F1 = (5)
                           000004   840  TIM1_CCMR4_IC4F0 = (4)
                           000003   841  TIM1_CCMR4_IC4PSC1 = (3)
                           000002   842  TIM1_CCMR4_IC4PSC0 = (2)
                                    843 ;  TIM1_CCMR4_CC4S1 = (1)
                           000000   844  TIM1_CCMR4_CC4S0 = (0)
                                    845 
                                    846 ; Timer 2 - 16-bit timer
                           005300   847  TIM2_CR1  = (0x5300)
                           005301   848  TIM2_IER  = (0x5301)
                           005302   849  TIM2_SR1  = (0x5302)
                           005303   850  TIM2_SR2  = (0x5303)
                           005304   851  TIM2_EGR  = (0x5304)
                           005305   852  TIM2_CCMR1  = (0x5305)
                           005306   853  TIM2_CCMR2  = (0x5306)
                           005307   854  TIM2_CCMR3  = (0x5307)
                           005308   855  TIM2_CCER1  = (0x5308)
                           005309   856  TIM2_CCER2  = (0x5309)
                           00530A   857  TIM2_CNTRH  = (0x530A)
                           00530B   858  TIM2_CNTRL  = (0x530B)
                           00530C   859  TIM2_PSCR  = (0x530C)
                           00530D   860  TIM2_ARRH  = (0x530D)
                           00530E   861  TIM2_ARRL  = (0x530E)
                           00530F   862  TIM2_CCR1H  = (0x530F)
                           005310   863  TIM2_CCR1L  = (0x5310)
                           005311   864  TIM2_CCR2H  = (0x5311)
                           005312   865  TIM2_CCR2L  = (0x5312)
                           005313   866  TIM2_CCR3H  = (0x5313)
                           005314   867  TIM2_CCR3L  = (0x5314)
                                    868 
                                    869 ; TIM2_CR1 bitfields
                           000000   870  TIM2_CR1_CEN=(0) ; Counter enable
                           000001   871  TIM2_CR1_UDIS=(1) ; Update disable
                           000002   872  TIM2_CR1_URS=(2) ; Update request source
                           000003   873  TIM2_CR1_OPM=(3) ; One-pulse mode
                           000007   874  TIM2_CR1_ARPE=(7) ; Auto-reload preload enable
                                    875 
                                    876 ; TIMER2_CCMR bitfields 
                           000000   877  TIM2_CCMR_CCS=(0) ; input/output select
                           000003   878  TIM2_CCMR_OCPE=(3) ; preload enable
                           000004   879  TIM2_CCMR_OCM=(4)  ; output compare mode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    880 
                                    881 ; TIMER2_CCER1 bitfields
                           000000   882  TIM2_CCER1_CC1E=(0)
                           000001   883  TIM2_CCER1_CC1P=(1)
                           000004   884  TIM2_CCER1_CC2E=(4)
                           000005   885  TIM2_CCER1_CC2P=(5)
                                    886 
                                    887 ; TIMER2_EGR bitfields
                           000000   888  TIM2_EGR_UG=(0) ; update generation
                           000001   889  TIM2_EGR_CC1G=(1) ; Capture/compare 1 generation
                           000002   890  TIM2_EGR_CC2G=(2) ; Capture/compare 2 generation
                           000003   891  TIM2_EGR_CC3G=(3) ; Capture/compare 3 generation
                           000006   892  TIM2_EGR_TG=(6); Trigger generation
                                    893 
                                    894 ; Timer 3
                           005320   895  TIM3_CR1  = (0x5320)
                           005321   896  TIM3_IER  = (0x5321)
                           005322   897  TIM3_SR1  = (0x5322)
                           005323   898  TIM3_SR2  = (0x5323)
                           005324   899  TIM3_EGR  = (0x5324)
                           005325   900  TIM3_CCMR1  = (0x5325)
                           005326   901  TIM3_CCMR2  = (0x5326)
                           005327   902  TIM3_CCER1  = (0x5327)
                           005328   903  TIM3_CNTRH  = (0x5328)
                           005329   904  TIM3_CNTRL  = (0x5329)
                           00532A   905  TIM3_PSCR  = (0x532A)
                           00532B   906  TIM3_ARRH  = (0x532B)
                           00532C   907  TIM3_ARRL  = (0x532C)
                           00532D   908  TIM3_CCR1H  = (0x532D)
                           00532E   909  TIM3_CCR1L  = (0x532E)
                           00532F   910  TIM3_CCR2H  = (0x532F)
                           005330   911  TIM3_CCR2L  = (0x5330)
                                    912 
                                    913 ; TIM3_CR1  fields
                           000000   914  TIM3_CR1_CEN = (0)
                           000001   915  TIM3_CR1_UDIS = (1)
                           000002   916  TIM3_CR1_URS = (2)
                           000003   917  TIM3_CR1_OPM = (3)
                           000007   918  TIM3_CR1_ARPE = (7)
                                    919 ; TIM3_CCR2  fields
                           000000   920  TIM3_CCMR2_CC2S_POS = (0)
                           000003   921  TIM3_CCMR2_OC2PE_POS = (3)
                           000004   922  TIM3_CCMR2_OC2M_POS = (4)  
                                    923 ; TIM3_CCER1 fields
                           000000   924  TIM3_CCER1_CC1E = (0)
                           000001   925  TIM3_CCER1_CC1P = (1)
                           000004   926  TIM3_CCER1_CC2E = (4)
                           000005   927  TIM3_CCER1_CC2P = (5)
                                    928 ; TIM3_CCER2 fields
                           000000   929  TIM3_CCER2_CC3E = (0)
                           000001   930  TIM3_CCER2_CC3P = (1)
                                    931 
                                    932 ; Timer 4
                           005340   933  TIM4_CR1  = (0x5340)
                           005341   934  TIM4_IER  = (0x5341)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                           005342   935  TIM4_SR  = (0x5342)
                           005343   936  TIM4_EGR  = (0x5343)
                           005344   937  TIM4_CNTR  = (0x5344)
                           005345   938  TIM4_PSCR  = (0x5345)
                           005346   939  TIM4_ARR  = (0x5346)
                                    940 
                                    941 ; Timer 4 bitmasks
                                    942 
                           000007   943  TIM4_CR1_ARPE = (7)
                           000003   944  TIM4_CR1_OPM = (3)
                           000002   945  TIM4_CR1_URS = (2)
                           000001   946  TIM4_CR1_UDIS = (1)
                           000000   947  TIM4_CR1_CEN = (0)
                                    948 
                           000000   949  TIM4_IER_UIE = (0)
                                    950 
                           000000   951  TIM4_SR_UIF = (0)
                                    952 
                           000000   953  TIM4_EGR_UG = (0)
                                    954 
                           000002   955  TIM4_PSCR_PSC2 = (2)
                           000001   956  TIM4_PSCR_PSC1 = (1)
                           000000   957  TIM4_PSCR_PSC0 = (0)
                                    958 
                           000000   959  TIM4_PSCR_1 = 0
                           000001   960  TIM4_PSCR_2 = 1
                           000002   961  TIM4_PSCR_4 = 2
                           000003   962  TIM4_PSCR_8 = 3
                           000004   963  TIM4_PSCR_16 = 4
                           000005   964  TIM4_PSCR_32 = 5
                           000006   965  TIM4_PSCR_64 = 6
                           000007   966  TIM4_PSCR_128 = 7
                                    967 
                                    968 ; ADC2
                           005400   969  ADC_CSR  = (0x5400)
                           005401   970  ADC_CR1  = (0x5401)
                           005402   971  ADC_CR2  = (0x5402)
                           005403   972  ADC_CR3  = (0x5403)
                           005404   973  ADC_DRH  = (0x5404)
                           005405   974  ADC_DRL  = (0x5405)
                           005406   975  ADC_TDRH  = (0x5406)
                           005407   976  ADC_TDRL  = (0x5407)
                                    977  
                                    978 ; ADC bitmasks
                                    979 
                           000007   980  ADC_CSR_EOC = (7)
                           000006   981  ADC_CSR_AWD = (6)
                           000005   982  ADC_CSR_EOCIE = (5)
                           000004   983  ADC_CSR_AWDIE = (4)
                           000003   984  ADC_CSR_CH3 = (3)
                           000002   985  ADC_CSR_CH2 = (2)
                           000001   986  ADC_CSR_CH1 = (1)
                           000000   987  ADC_CSR_CH0 = (0)
                                    988 
                           000006   989  ADC_CR1_SPSEL2 = (6)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           000005   990  ADC_CR1_SPSEL1 = (5)
                           000004   991  ADC_CR1_SPSEL0 = (4)
                           000001   992  ADC_CR1_CONT = (1)
                           000000   993  ADC_CR1_ADON = (0)
                                    994 
                           000006   995  ADC_CR2_EXTTRIG = (6)
                           000005   996  ADC_CR2_EXTSEL1 = (5)
                           000004   997  ADC_CR2_EXTSEL0 = (4)
                           000003   998  ADC_CR2_ALIGN = (3)
                           000001   999  ADC_CR2_SCAN = (1)
                                   1000 
                           000007  1001  ADC_CR3_DBUF = (7)
                           000006  1002  ADC_CR3_DRH = (6)
                                   1003 
                                   1004 ; beCAN
                           005420  1005  CAN_MCR = (0x5420)
                           005421  1006  CAN_MSR = (0x5421)
                           005422  1007  CAN_TSR = (0x5422)
                           005423  1008  CAN_TPR = (0x5423)
                           005424  1009  CAN_RFR = (0x5424)
                           005425  1010  CAN_IER = (0x5425)
                           005426  1011  CAN_DGR = (0x5426)
                           005427  1012  CAN_FPSR = (0x5427)
                           005428  1013  CAN_P0 = (0x5428)
                           005429  1014  CAN_P1 = (0x5429)
                           00542A  1015  CAN_P2 = (0x542A)
                           00542B  1016  CAN_P3 = (0x542B)
                           00542C  1017  CAN_P4 = (0x542C)
                           00542D  1018  CAN_P5 = (0x542D)
                           00542E  1019  CAN_P6 = (0x542E)
                           00542F  1020  CAN_P7 = (0x542F)
                           005430  1021  CAN_P8 = (0x5430)
                           005431  1022  CAN_P9 = (0x5431)
                           005432  1023  CAN_PA = (0x5432)
                           005433  1024  CAN_PB = (0x5433)
                           005434  1025  CAN_PC = (0x5434)
                           005435  1026  CAN_PD = (0x5435)
                           005436  1027  CAN_PE = (0x5436)
                           005437  1028  CAN_PF = (0x5437)
                                   1029 
                                   1030 
                                   1031 ; CPU
                           007F00  1032  CPU_A  = (0x7F00)
                           007F01  1033  CPU_PCE  = (0x7F01)
                           007F02  1034  CPU_PCH  = (0x7F02)
                           007F03  1035  CPU_PCL  = (0x7F03)
                           007F04  1036  CPU_XH  = (0x7F04)
                           007F05  1037  CPU_XL  = (0x7F05)
                           007F06  1038  CPU_YH  = (0x7F06)
                           007F07  1039  CPU_YL  = (0x7F07)
                           007F08  1040  CPU_SPH  = (0x7F08)
                           007F09  1041  CPU_SPL   = (0x7F09)
                           007F0A  1042  CPU_CCR   = (0x7F0A)
                                   1043 
                                   1044 ; global configuration register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                           007F60  1045  CFG_GCR   = (0x7F60)
                           000001  1046  CFG_GCR_AL = 1
                           000000  1047  CFG_GCR_SWIM = 0
                                   1048 
                                   1049 ; interrupt control registers
                           007F70  1050  ITC_SPR1   = (0x7F70)
                           007F71  1051  ITC_SPR2   = (0x7F71)
                           007F72  1052  ITC_SPR3   = (0x7F72)
                           007F73  1053  ITC_SPR4   = (0x7F73)
                           007F74  1054  ITC_SPR5   = (0x7F74)
                           007F75  1055  ITC_SPR6   = (0x7F75)
                           007F76  1056  ITC_SPR7   = (0x7F76)
                           007F77  1057  ITC_SPR8   = (0x7F77)
                                   1058 
                                   1059 ; SWIM, control and status register
                           007F80  1060  SWIM_CSR   = (0x7F80)
                                   1061 ; debug registers
                           007F90  1062  DM_BK1RE   = (0x7F90)
                           007F91  1063  DM_BK1RH   = (0x7F91)
                           007F92  1064  DM_BK1RL   = (0x7F92)
                           007F93  1065  DM_BK2RE   = (0x7F93)
                           007F94  1066  DM_BK2RH   = (0x7F94)
                           007F95  1067  DM_BK2RL   = (0x7F95)
                           007F96  1068  DM_CR1   = (0x7F96)
                           007F97  1069  DM_CR2   = (0x7F97)
                           007F98  1070  DM_CSR1   = (0x7F98)
                           007F99  1071  DM_CSR2   = (0x7F99)
                           007F9A  1072  DM_ENFCTR   = (0x7F9A)
                                   1073 
                                   1074 ; Interrupt Numbers
                           000000  1075  INT_TLI = 0
                           000001  1076  INT_AWU = 1
                           000002  1077  INT_CLK = 2
                           000003  1078  INT_EXTI0 = 3
                           000004  1079  INT_EXTI1 = 4
                           000005  1080  INT_EXTI2 = 5
                           000006  1081  INT_EXTI3 = 6
                           000007  1082  INT_EXTI4 = 7
                           000008  1083  INT_CAN_RX = 8
                           000009  1084  INT_CAN_TX = 9
                           00000A  1085  INT_SPI = 10
                           00000B  1086  INT_TIM1_OVF = 11
                           00000C  1087  INT_TIM1_CCM = 12
                           00000D  1088  INT_TIM2_OVF = 13
                           00000E  1089  INT_TIM2_CCM = 14
                           00000F  1090  INT_TIM3_OVF = 15
                           000010  1091  INT_TIM3_CCM = 16
                           000011  1092  INT_UART1_TX_COMPLETED = 17
                           000012  1093  INT_AUART1_RX_FULL = 18
                           000013  1094  INT_I2C = 19
                           000014  1095  INT_UART3_TX_COMPLETED = 20
                           000015  1096  INT_UART3_RX_FULL = 21
                           000016  1097  INT_ADC2 = 22
                           000017  1098  INT_TIM4_OVF = 23
                           000018  1099  INT_FLASH = 24
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1100 
                                   1101 ; Interrupt Vectors
                           008000  1102  INT_VECTOR_RESET = 0x8000
                           008004  1103  INT_VECTOR_TRAP = 0x8004
                           008008  1104  INT_VECTOR_TLI = 0x8008
                           00800C  1105  INT_VECTOR_AWU = 0x800C
                           008010  1106  INT_VECTOR_CLK = 0x8010
                           008014  1107  INT_VECTOR_EXTI0 = 0x8014
                           008018  1108  INT_VECTOR_EXTI1 = 0x8018
                           00801C  1109  INT_VECTOR_EXTI2 = 0x801C
                           008020  1110  INT_VECTOR_EXTI3 = 0x8020
                           008024  1111  INT_VECTOR_EXTI4 = 0x8024
                           008028  1112  INT_VECTOR_CAN_RX = 0x8028
                           00802C  1113  INT_VECTOR_CAN_TX = 0x802c
                           008030  1114  INT_VECTOR_SPI = 0x8030
                           008034  1115  INT_VECTOR_TIM1_OVF = 0x8034
                           008038  1116  INT_VECTOR_TIM1_CCM = 0x8038
                           00803C  1117  INT_VECTOR_TIM2_OVF = 0x803C
                           008040  1118  INT_VECTOR_TIM2_CCM = 0x8040
                           008044  1119  INT_VECTOR_TIM3_OVF = 0x8044
                           008048  1120  INT_VECTOR_TIM3_CCM = 0x8048
                           00804C  1121  INT_VECTOR_UART1_TX_COMPLETED = 0x804c
                           008050  1122  INT_VECTOR_UART1_RX_FULL = 0x8050
                           008054  1123  INT_VECTOR_I2C = 0x8054
                           008058  1124  INT_VECTOR_UART3_TX_COMPLETED = 0x8058
                           00805C  1125  INT_VECTOR_UART3_RX_FULL = 0x805C
                           008060  1126  INT_VECTOR_ADC2 = 0x8060
                           008064  1127  INT_VECTOR_TIM4_OVF = 0x8064
                           008068  1128  INT_VECTOR_FLASH = 0x8068
                                   1129 
                                   1130 ; Condition code register bits
                           000007  1131 CC_V = 7  ; overflow flag 
                           000005  1132 CC_I1= 5  ; interrupt bit 1
                           000004  1133 CC_H = 4  ; half carry 
                           000003  1134 CC_I0 = 3 ; interrupt bit 0
                           000002  1135 CC_N = 2 ;  negative flag 
                           000001  1136 CC_Z = 1 ;  zero flag  
                           000000  1137 CC_C = 0 ; carry bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                     29 	.include "inc/ascii.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of MONA 
                                      4 ;
                                      5 ;     MONA is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     MONA is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;-------------------------------------------------------
                                     20 ;     ASCII control  values
                                     21 ;     CTRL_x   are VT100 keyboard values  
                                     22 ; REF: https://en.wikipedia.org/wiki/ASCII    
                                     23 ;-------------------------------------------------------
                           000001    24 		CTRL_A = 1
                           000001    25 		SOH=CTRL_A  ; start of heading 
                           000002    26 		CTRL_B = 2
                           000002    27 		STX=CTRL_B  ; start of text 
                           000003    28 		CTRL_C = 3
                           000003    29 		ETX=CTRL_C  ; end of text 
                           000004    30 		CTRL_D = 4
                           000004    31 		EOT=CTRL_D  ; end of transmission 
                           000005    32 		CTRL_E = 5
                           000005    33 		ENQ=CTRL_E  ; enquery 
                           000006    34 		CTRL_F = 6
                           000006    35 		ACK=CTRL_F  ; acknowledge
                           000007    36 		CTRL_G = 7
                           000007    37         BELL = 7    ; vt100 terminal generate a sound.
                           000008    38 		CTRL_H = 8  
                           000008    39 		BS = 8     ; back space 
                           000009    40         CTRL_I = 9
                           000009    41     	TAB = 9     ; horizontal tabulation
                           00000A    42         CTRL_J = 10 
                           00000A    43 		LF = 10     ; line feed
                           00000B    44 		CTRL_K = 11
                           00000B    45         VT = 11     ; vertical tabulation 
                           00000C    46 		CTRL_L = 12
                           00000C    47         FF = 12      ; new page
                           00000D    48 		CTRL_M = 13
                           00000D    49 		CR = 13      ; carriage return 
                           00000E    50 		CTRL_N = 14
                           00000E    51 		SO=CTRL_N    ; shift out 
                           00000F    52 		CTRL_O = 15
                           00000F    53 		SI=CTRL_O    ; shift in 
                           000010    54 		CTRL_P = 16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           000010    55 		DLE=CTRL_P   ; data link escape 
                           000011    56 		CTRL_Q = 17
                           000011    57 		DC1=CTRL_Q   ; device control 1 
                           000011    58 		XON=DC1 
                           000012    59 		CTRL_R = 18
                           000012    60 		DC2=CTRL_R   ; device control 2 
                           000013    61 		CTRL_S = 19
                           000013    62 		DC3=CTRL_S   ; device control 3
                           000013    63 		XOFF=DC3 
                           000014    64 		CTRL_T = 20
                           000014    65 		DC4=CTRL_T   ; device control 4 
                           000015    66 		CTRL_U = 21
                           000015    67 		NAK=CTRL_U   ; negative acknowledge
                           000016    68 		CTRL_V = 22
                           000016    69 		SYN=CTRL_V   ; synchronous idle 
                           000017    70 		CTRL_W = 23
                           000017    71 		ETB=CTRL_W   ; end of transmission block
                           000018    72 		CTRL_X = 24
                           000018    73 		CAN=CTRL_X   ; cancel 
                           000019    74 		CTRL_Y = 25
                           000019    75 		EM=CTRL_Y    ; end of medium
                           00001A    76 		CTRL_Z = 26
                           00001A    77 		SUB=CTRL_Z   ; substitute 
                           00001A    78 		EOF=SUB      ; end of text file in MSDOS 
                           00001B    79 		ESC = 27     ; escape 
                           00001C    80 		FS=28        ; file separator 
                           00001D    81 		GS=29        ; group separator 
                           00001E    82 		RS=30		 ; record separator 
                           00001F    83 		US=31 		 ; unit separator 
                           000020    84 		SPACE = 32
                           00002C    85 		COMMA = 44 
                           000023    86 		SHARP = 35
                           000027    87 		TICK = 39
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                     30 	.include "inc/gen_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   console Input/Output module
                                     20 ;   DATE: 2019-12-11
                                     21 ;    
                                     22 ;   General usage macros.   
                                     23 ;
                                     24 ;--------------------------------------
                                     25 
                                     26     ; reserve space on stack
                                     27     ; for local variables
                                     28     .macro _vars n 
                                     29     sub sp,#n 
                                     30     .endm 
                                     31     
                                     32     ; free space on stack
                                     33     .macro _drop n 
                                     34     addw sp,#n 
                                     35     .endm
                                     36 
                                     37     ; declare ARG_OFS for arguments 
                                     38     ; displacement on stack. This 
                                     39     ; value depend on local variables 
                                     40     ; size.
                                     41     .macro _argofs n 
                                     42     ARG_OFS=2+n 
                                     43     .endm 
                                     44 
                                     45     ; declare a function argument 
                                     46     ; position relative to stack pointer 
                                     47     ; _argofs must be called before it.
                                     48     .macro _arg name ofs 
                                     49     name=ARG_OFS+ofs 
                                     50     .endm 
                                     51 
                                     52     ; software reset 
                                     53     .macro _swreset
                                     54     mov WWDG_CR,#0X80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                     55     .endm 
                                     56 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                     31 	.include "config.inc" 
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                     32 	.include "tbi_macros.inc" 
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019 
                                      3 ; This file is part of STM8_NUCLEO 
                                      4 ;
                                      5 ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                           000004    19         TAB_WIDTH=4 ; default tabulation width 
                           0000FF    20         EOF=0xff ; end of file marker 
                                     21         ; keyword types 
                           000000    22         F_CMD=0     ; command keyword
                           000010    23         F_IFUNC=(1<<4) ; integer function keyword
                           000020    24         F_CFUNC=(2<<4) ; character function keyword
                           000030    25         F_CONST=(3<<4) ; function keyword that return a constant
                           000070    26         F_NOT=(7<<4)   ; TK_NOT 
                           000080    27         F_AND=(8<<4)   ; TK_AND
                           000090    28         F_OR=(9<<4)    ; TK_OR
                           0000A0    29         F_XOR=(10<<4)   ; TK_XOR   
                           00000F    30         NLEN_MASK=0xf  ; mask to extract name len 
                           0000F0    31         KW_TYPE_MASK=0xf0 ; mask to extract keyword type 
                                     32 
                                     33 
                           00008C    34 	STACK_SIZE=140
                           0017FF    35 	STACK_EMPTY=RAM_SIZE-1  
                           000003    36         CELL_SIZE=3
                           000014    37         XSTACK_SIZE=20 ; 20 * int24
                           001773    38         XSTACK_EMPTY=STACK_EMPTY-STACK_SIZE 
                           000000    39 	FRUN=0 ; flags run code in variable flags
                           000001    40 	FTRAP=1 ; inside trap handler 
                           000002    41 	FLOOP=2 ; FOR loop in preparation 
                           000003    42 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    43 	FBREAK=4 ; break point flag 
                           000005    44 	FCOMP=5  ; compiling flags 
                                     45 
                                     46 
                           000006    47         FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     48 
                           007FFF    49 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     50 
                           000008    51 	RX_QUEUE_SIZE=8 
                                     52 
                           00F424    53         TIM2_CLK_FREQ=62500
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                           000050    55 	TIB_SIZE=80
                           000080    56         PAD_SIZE=BLOCK_SIZE 
                                     57 
                           00000F    58         NAME_MAX_LEN=15  ; CONST and DIM variables maximum length 
                                     59 
                                     60 ;--------------------------------------
                                     61 ;   constantes related to Arduino 
                                     62 ;   API mapping 
                                     63 ;-------------------------------------
                           000000    64         INP=0
                           000001    65         OUTP=1 
                                     66 
                                     67 ;--------------------------------------
                                     68 ;       token attribute
                                     69 ;--------------------------------------
                                     70         ; bits 4:5 identify token group 
                                     71         ; 0x0n -> miscelinous 
                                     72         ; 0x1n -> +|- operators 
                                     73         ; 0x2n -> *|/|% operators
                                     74         ; 0x3n -> relational operators 
                           000080    75         TK_CMD=128      ; BASIC command   
                           000081    76         TK_IFUNC=129    ; BASIC integer function
                           000082    77         TK_CFUNC=130    ; BASIC character function
                           000083    78         TK_CONST=131    ; BASIC constant 
                           000084    79         TK_INTGR=132    ; 16 bits integer 
                           000085    80         TK_VAR=133
                           000086    81         TK_FLOAT=134    ; float32 
                           000087    82         TK_NOT=135
                           000088    83         TK_AND=136      ;
                           000089    84         TK_OR=137       ;
                           00008A    85         TK_XOR=138      ; 
                           000000    86         TK_NONE=0       ; not a token 
                           000002    87         TK_QSTR=2       ; quoted string  
                           000003    88         TK_LABEL=3      ; used for defined, constants, variables
                           000004    89         TK_CHAR=4       ; ASCII character 
                           000005    90         TK_ARRAY=5     ; array variable '@' 
                           000006    91         TK_LPAREN=6     ; left parenthesis '('
                           000007    92         TK_RPAREN=7     ; right parenthesis ')'
                           000008    93         TK_COMMA=8     ; item separator ',' 
                           000009    94         TK_SHARP=9     ; print colon width '#' 
                           00000A    95         TK_COLON=0xa      ; command separator ':' 
                                     96         
                           000010    97         TK_PLUS=0x10    ; addition operator '+'
                           000011    98         TK_MINUS=0x11   ; subtraction operator '-'
                           000020    99         TK_MULT=0x20    ; multiplication operator '*'
                           000021   100         TK_DIV=0x21     ; division operator '/'
                           000022   101         TK_MOD=0x22     ; modulo operator '%'
                                    102 
                                    103         ; don't change these token values 
                                    104         ; values chosen to be used as a mask.
                                    105         ; bit 7   1 for dictionary words else 0 
                                    106         ; bits 6  always 0 
                                    107         ; bits 5:4 identify group 
                                    108         ; bits 3:0 token identifier inside group  
                           000031   109         TK_GT=0x31      ; relation operator '>'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000032   110         TK_EQUAL=0x32   ; assignment or relation operator '='
                           000033   111         TK_GE=0x33      ; relation operator '>='
                           000034   112         TK_LT=0x34      ; relation operator '<'
                           000036   113         TK_LE=0x36      ; relation operator '<='
                           000035   114         TK_NE=0x35      ; relation operator '<>' not equal 
                                    115         ; token groups 
                           000030   116         TK_GRP_MASK=0x30 ; groups bits selector 
                           000000   117         TK_GRP_MISC=0x00 ; miscelinous group 
                           000010   118         TK_GRP_ADD=0x10  ; additive operators
                           000020   119         TK_GRP_MULT=0x20 ; multiplicative operators
                           000030   120         TK_GRP_RELOP=0x30 ;relational operators. 
                           000002   121         CMD_END=2 
                                    122 
                                    123 ;--------------------------------------
                                    124 ;   error codes 
                                    125 ;--------------------------------------
                           000000   126     ERR_NONE=0
                           000001   127     ERR_MEM_FULL=1 
                           000002   128     ERR_SYNTAX=2
                           000003   129     ERR_MATH_OVF=3
                           000004   130     ERR_DIV0=4 
                           000005   131     ERR_NO_LINE=5
                           000006   132     ERR_RUN_ONLY=6
                           000007   133     ERR_CMD_ONLY=7
                           000008   134     ERR_DUPLICATE=8
                           000009   135     ERR_NOT_FILE=9
                           00000A   136     ERR_BAD_VALUE=10
                           00000B   137     ERR_NO_ACCESS=11
                           00000C   138     ERR_NO_DATA=12 
                           00000D   139     ERR_NO_PROG=13
                           00000E   140     ERR_NO_FSPACE=14
                           00000F   141     ERR_BUF_FULL=15
                           000010   142     ERR_OVERFLOW=16 
                           000011   143     ERR_RD_ONLY=17
                           000012   144     ERR_NO_PROGRAM=18
                                    145 
                                    146 ;--------------------------------------
                                    147 ;   assembler flags 
                                    148 ;-------------------------------------
                                    149 ;    MATH_OVF=0 ; if 1 the stop on math overflow 
                                    150 
                                    151      .macro _usec_dly n 
                                    152     ldw x,#(16*n-2)/4
                                    153     decw x
                                    154     nop 
                                    155     jrne .-4
                                    156     .endm 
                                    157     
                                    158     ; load X register with 
                                    159     ; entry point of dictionary
                                    160     ; before calling 'search_dict'
                                    161     .macro _ldx_dict dict_name
                                    162     ldw x,#dict_name+2
                                    163     .endm 
                                    164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                    165     ; reset BASIC pointer
                                    166     ; to beginning of last token
                                    167     ; extracted except if it was end of line 
                                    168     .macro _unget_token 
                                    169      mov in,in.saved  
                                    170     .endm
                                    171 
                                    172 
                                    173     ; extract code address for 
                                    174     ; TK_CMD|TK_FUNC|TK_IFUNC|TK_CFUNC 
                                    175     .macro _get_code_addr
                                    176         ldw x,(x)
                                    177         inc in 
                                    178         inc in 
                                    179     .endm 
                                    180 
                                    181 
                                    182 
                                    183 ;---------------------------------------
                                    184 ;    xtack manipulation macros 
                                    185 ;    Y is used as xstack pointer  
                                    186 ;----------------------------------------
                                    187     ; pop in A:X from XSTACK 
                                    188     .macro _xpop 
                                    189     ld a,(y)
                                    190     ldw x,y 
                                    191     ldw x,(1,x)
                                    192     addw y,#CELL_SIZE 
                                    193     .endm 
                                    194 
                                    195     ; push A:X  to XSTACK 
                                    196     .macro _xpush 
                                    197     subw y,#CELL_SIZE
                                    198     ld (y),a 
                                    199     ldw (1,y),x 
                                    200     .endm 
                                    201 
                                    202     ; drop from XSTACK 
                                    203     .macro _xdrop 
                                    204     addw y,#CELL_SIZE 
                                    205     .endm 
                                    206 
                                    207     ; @T fetch top xstack 
                                    208     .macro _at_top
                                    209     ld a,(y)
                                    210     ldw x,y 
                                    211     ldw x,(1,x)
                                    212     .endm 
                                    213 
                                    214     ; @N  fetch next on xstack 
                                    215     .macro _at_next 
                                    216     ld a,(3,y)
                                    217     ldw x,y 
                                    218     ldw x,(4,x)
                                    219     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                    220 
                                    221     ; !T put on top of xtack 
                                    222     .macro _store_top 
                                    223     ld (y),a 
                                    224     ldw (1,y),x     
                                    225     .endm 
                                    226 
                                    227     ; !N put next on xstack 
                                    228     .macro _store_next 
                                    229     ld (3,y),a 
                                    230     ldw (4,y),x 
                                    231     .endm 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                     33 	.include "cmd_index.inc"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 
                                     20 ;---------------------------------------
                                     21 ; BASIC command and functions indexes
                                     22 ; for addressing 'code_addr' table
                                     23 ;--------------------------------------
                                     24 
                           000000    25     ABS_IDX=0        ; absolute function
                           000002    26     ADCON_IDX=ABS_IDX+2   ;  adc on 
                           000004    27     ADCREAD_IDX=ADCON_IDX+2
                           000006    28     ASC_IDX=ADCREAD_IDX+2     ;
                           000008    29     AWU_IDX=ASC_IDX+2 
                           00000A    30     BIT_IDX=AWU_IDX+2
                           00000C    31     BRES_IDX=BIT_IDX+2
                           00000E    32     BSET_IDX=BRES_IDX+2
                           000010    33     BTEST_IDX=BSET_IDX+2
                           000012    34     BTOGL_IDX=BTEST_IDX+2
                           000014    35     BYE_IDX=BTOGL_IDX+2
                           000016    36     CHAR_IDX=BYE_IDX+2
                           000018    37     CR2_IDX=CHAR_IDX+2
                           00001A    38     CR1_IDX=CR2_IDX+2
                           00001C    39     DATA_IDX=CR1_IDX+2
                           00001E    40     DDR_IDX=DATA_IDX+2
                           000020    41     DEC_IDX=DDR_IDX+2
                           000022    42     DO_IDX=DEC_IDX+2
                           000024    43     DREAD_IDX=DO_IDX+2
                           000026    44     DWRITE_IDX=DREAD_IDX+2
                           000028    45     EDIT_IDX=DWRITE_IDX+2
                           00002A    46     EEPROM_IDX=EDIT_IDX+2
                           00002C    47     END_IDX=EEPROM_IDX+2
                           00002E    48     ERASE_IDX=END_IDX+2
                           000030    49     FCPU_IDX=ERASE_IDX+2
                           000032    50     SAVE_IDX=FCPU_IDX+2
                           000034    51     FOR_IDX=SAVE_IDX+2
                           000036    52     GOSUB_IDX=FOR_IDX+2
                           000038    53     GOTO_IDX=GOSUB_IDX+2
                           00003A    54     HEX_IDX=GOTO_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           00003C    55     IDR_IDX=HEX_IDX+2
                           00003E    56     IF_IDX=IDR_IDX+2
                           000040    57     INPUT_IDX=IF_IDX+2
                           000042    58     IWDGEN_IDX=INPUT_IDX+2
                           000044    59     IWDGREF_IDX=IWDGEN_IDX+2
                           000046    60     KEY_IDX=IWDGREF_IDX+2
                           000048    61     LET_IDX=KEY_IDX+2
                           00004A    62     LIST_IDX=LET_IDX+2
                           00004C    63     LOG_IDX=LIST_IDX+2
                           00004E    64     LSHIFT_IDX=LOG_IDX+2
                           000050    65     NEXT_IDX=LSHIFT_IDX+2
                           000052    66     NEW_IDX=NEXT_IDX+2
                           000054    67     ODR_IDX=NEW_IDX+2
                           000056    68     PAD_IDX=ODR_IDX+2
                           000058    69     PAUSE_IDX=PAD_IDX+2
                           00005A    70     PMODE_IDX=PAUSE_IDX+2
                           00005C    71     PEEK_IDX=PMODE_IDX+2
                           00005E    72     PINP_IDX=PEEK_IDX+2
                           000060    73     POKE_IDX=PINP_IDX+2
                           000062    74     POUT_IDX=POKE_IDX+2
                           000064    75    	PRT_IDX=POUT_IDX+2 ; PRINT commande index 
                           000066    76     PRTA_IDX=PRT_IDX+2
                           000068    77     PRTB_IDX=PRTA_IDX+2
                           00006A    78     PRTC_IDX=PRTB_IDX+2
                           00006C    79     PRTD_IDX=PRTC_IDX+2
                           00006E    80     PRTE_IDX=PRTD_IDX+2
                           000070    81     PRTF_IDX=PRTE_IDX+2
                           000072    82     PRTG_IDX=PRTF_IDX+2
                           000074    83     PRTI_IDX=PRTG_IDX+2
                           000076    84     QKEY_IDX=PRTI_IDX+2
                           000078    85     READ_IDX=QKEY_IDX+2
                           00007A    86     RBT_IDX=READ_IDX+2  ; REBOOT
                           00007C    87 	REM_IDX=RBT_IDX+2 ; REMARK command index 
                           00007E    88     REST_IDX=REM_IDX+2 ; RESTORE
                           000080    89     RET_IDX=REST_IDX+2  ; RETURN 
                           000082    90     RND_IDX=RET_IDX+2 ; RANDOM 
                           000084    91     RSHIFT_IDX=RND_IDX+2
                           000086    92     RUN_IDX=RSHIFT_IDX+2
                           000088    93     FREE_IDX=RUN_IDX+2
                           00008A    94     SLEEP_IDX=FREE_IDX+2
                           00008C    95     SPIRD_IDX=SLEEP_IDX+2
                           00008E    96     SPIEN_IDX=SPIRD_IDX+2
                           000090    97     SPISEL_IDX=SPIEN_IDX+2
                           000092    98     SPIWR_IDX=SPISEL_IDX+2
                           000094    99     STEP_IDX=SPIWR_IDX+2
                           000096   100     STOP_IDX=STEP_IDX+2
                           000098   101     TICKS_IDX=STOP_IDX+2
                           00009A   102     TIMER_IDX=TICKS_IDX+2
                           00009C   103     TMROUT_IDX=TIMER_IDX+2  ; TIMEOUT
                           00009E   104     TO_IDX=TMROUT_IDX+2
                           0000A0   105     TONE_IDX=TO_IDX+2
                           0000A2   106     UBOUND_IDX=TONE_IDX+2
                           0000A4   107     UFLASH_IDX=UBOUND_IDX+2
                           0000A6   108     UNTIL_IDX=UFLASH_IDX+2
                           0000A8   109     USR_IDX=UNTIL_IDX+2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                           0000AA   110     WAIT_IDX=USR_IDX+2
                           0000AC   111     WORDS_IDX=WAIT_IDX+2
                           0000AE   112     WRITE_IDX=WORDS_IDX+2
                           0000B0   113     SIZE_IDX=WRITE_IDX+2 
                           0000B2   114     ON_IDX=SIZE_IDX+2 
                           0000B4   115     GET_IDX=ON_IDX+2
                           0000B6   116     CONST_IDX=GET_IDX+2
                           0000B8   117     EEFREE_IDX=CONST_IDX+2
                                    118      
                                    119     ; keep these 3 at end
                                    120     ; these have no entry in code_addr 
                           0000F8   121     NOT_IDX=248
                           0000FA   122     AND_IDX=250 
                           0000FC   123     OR_IDX=252 
                           0000FE   124     XOR_IDX=254    
                                    125 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                     34   
                                     35 
                                     36 ;;-----------------------------------
                                     37     .area SSEG (ABS)
                                     38 ;; working buffers and stack at end of RAM. 	
                                     39 ;;-----------------------------------
      001690                         40     .org RAM_SIZE-STACK_SIZE-XSTACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         41 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         42 block_buffer::                 ; use to write FLASH block (alias for pad )
      0016E0                         43 pad:: .ds PAD_SIZE             ; working buffer
      001760                         44 xstack_full:: .ds XSTACK_SIZE*CELL_SIZE   ; expression stack 
      00179C                         45 xstack_unf:: ; xstack underflow 
      00179C                         46 stack_full:: .ds STACK_SIZE   ; control stack 
      001828                         47 stack_unf: ; stack underflow ; control_stack bottom 
                                     48 
                                     49 ;;--------------------------------------
                                     50     .area HOME 
                                     51 ;; interrupt vector table at 0x8000
                                     52 ;;--------------------------------------
                                     53 
      000000 82 00 00 B5             54     int cold_start			; RESET vector 
      000004 82 00 00 12             55 	int SysCall ; TRAP  BASIC sys() calls 
      000008 82 00 00 00             56 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 04             57 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00             58 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00             59 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00             60 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00             61 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00             62 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 36             63 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00             64 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00             65 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00             66 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00             67 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00             68 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00             69 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00             70 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00             71 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00             72 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00             73 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 08 7C             74 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00             75 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00             76 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00             77 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00             78 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 13             79 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00             80 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00             81 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00             82 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00             83 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00             84 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00             85 	int NonHandledInterrupt ;int29  not used
                                     86 
                                     87 ;---------------------------------------
                                     88     .area CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                     89 ;---------------------------------------
                                     90 
                                     91 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     92 ; non handled interrupt 
                                     93 ; reset MCU
                                     94 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                         95 NonHandledInterrupt:
      000000                         96 	_swreset 
      000000 35 80 50 D1      [ 1]    1     mov WWDG_CR,#0X80
                                     97 
                                     98 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     99 ; auto wakeup from halt
                                    100 ; at iret, program continue 
                                    101 ; after hatl instruction
                                    102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000004                        103 AWUHandler:
      000004 72 19 50 F0      [ 1]  104 	bres AWU_CSR,#AWU_CSR_AWUEN
      000008 55 00 3F 50 F1   [ 1]  105 	mov AWU_APR,0x3F
      00000D 72 5F 50 F2      [ 1]  106 	clr AWU_TBR 
      000011 80               [11]  107 	iret
                                    108 
                                    109 ;------------------------------------
                                    110 ; software interrupt handler  
                                    111 ;------------------------------------
      000012                        112 SysCall:
                                    113 
      000012 80               [11]  114 	iret 
                                    115 
                                    116 ;------------------------------
                                    117 ; TIMER 4 is used to maintain 
                                    118 ; a milliseconds 'ticks' counter
                                    119 ; and decrement 'timer' varaiable
                                    120 ; ticks range {0..2^23-1}
                                    121 ;--------------------------------
      000013                        122 Timer4UpdateHandler:
      000013 72 5F 53 42      [ 1]  123 	clr TIM4_SR 
      000017 C6 00 0F         [ 1]  124 	ld a,ticks 
      00001A CE 00 10         [ 2]  125 	ldw x,ticks+1
      00001D 1C 00 01         [ 2]  126 	addw x,#1 
      000020 A9 00            [ 1]  127 	adc a,#0 
      000022 2A 02            [ 1]  128 	jrpl 0$
                                    129 ; reset to 0 when negatif 
      000024 4F               [ 1]  130 	clr a 
      000025 5F               [ 1]  131 	clrw x 
      000026 C7 00 0F         [ 1]  132 0$:	ld ticks,a 
      000029 CF 00 10         [ 2]  133 	ldw ticks+1,x 
      00002C CE 00 12         [ 2]  134 	ldw x,timer
      00002F 27 04            [ 1]  135 	jreq 1$
      000031 5A               [ 2]  136 	decw x 
      000032 CF 00 12         [ 2]  137 	ldw timer,x 
      000035                        138 1$:	
      000035 80               [11]  139 	iret 
                                    140 
                                    141 ;------------------------------------
                                    142 ; Triggered by pressing USER UserButton 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                    143 ; on NUCLEO card.
                                    144 ; This is used to abort a progam lock 
                                    145 ; in infinite loop. 
                                    146 ;------------------------------------
      000036                        147 UserButtonHandler:
                                    148 ; wait button release
      000036 5F               [ 1]  149 	clrw x
      000037 5A               [ 2]  150 1$: decw x 
      000038 26 FD            [ 1]  151 	jrne 1$
      00003A 72 09 50 15 F8   [ 2]  152 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    153 ; if MCU suspended by SLEEP resume program
      00003F 72 07 00 22 05   [ 2]  154     btjf flags,#FSLEEP,2$
      000044 72 17 00 22      [ 1]  155 	bres flags,#FSLEEP 
      000048 80               [11]  156 	iret
      000049                        157 2$:	
      000049                        158 user_interrupted:
      000049 72 00 00 22 02   [ 2]  159     btjt flags,#FRUN,4$
      00004E 20 0A            [ 2]  160 	jra UBTN_Handler_exit 
      000050                        161 4$:	; program interrupted by user 
      000050 72 11 00 22      [ 1]  162 	bres flags,#FRUN 
      000054 AE 00 62         [ 2]  163 	ldw x,#USER_ABORT
      000057 CD 09 5C         [ 4]  164 	call puts 
      00005A                        165 UBTN_Handler_exit:
      00005A AE 17 FF         [ 2]  166     ldw x,#STACK_EMPTY 
      00005D 94               [ 1]  167     ldw sp,x
      00005E 9A               [ 1]  168 	rim 
      00005F CC 17 10         [ 2]  169 5$:	jp warm_start
                                    170 
      000062 0A 50 72 6F 67 72 61   171 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    172 
                                    173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    174 ;    peripherals initialization
                                    175 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    176 
                                    177 ;----------------------------------------
                                    178 ; inialize MCU clock 
                                    179 ; input:
                                    180 ;   A 		source  HSI | 1 HSE 
                                    181 ;   XL      CLK_CKDIVR , clock divisor 
                                    182 ; output:
                                    183 ;   none 
                                    184 ;----------------------------------------
      00007D                        185 clock_init:	
      00007D C1 50 C3         [ 1]  186 	cp a,CLK_CMSR 
      000080 27 0C            [ 1]  187 	jreq 2$ ; no switching required 
                                    188 ; select clock source 
      000082 72 12 50 C5      [ 1]  189 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000086 C7 50 C4         [ 1]  190 	ld CLK_SWR,a
      000089 C1 50 C3         [ 1]  191 1$:	cp a,CLK_CMSR
      00008C 26 FB            [ 1]  192 	jrne 1$
      00008E                        193 2$: 	
                                    194 ; HSI and cpu clock divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      00008E 9F               [ 1]  195 	ld a,xl 
      00008F C7 50 C6         [ 1]  196 	ld CLK_CKDIVR,a  
      000092 81               [ 4]  197 	ret
                                    198 
                                    199 ;----------------------------------
                                    200 ; TIMER2 used as audio tone output 
                                    201 ; on port D:5. CN9-6
                                    202 ; channel 1 configured as PWM mode 1 
                                    203 ;-----------------------------------  
                                    204 
      000093                        205 timer2_init:
      000093 72 1A 50 C7      [ 1]  206 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      000097 35 60 53 05      [ 1]  207  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      00009B 35 08 53 0C      [ 1]  208 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      00009F 81               [ 4]  209 	ret 
                                    210 
                                    211 ;---------------------------------
                                    212 ; TIM4 is configured to generate an 
                                    213 ; interrupt every millisecond 
                                    214 ;----------------------------------
      0000A0                        215 timer4_init:
      0000A0 72 18 50 C7      [ 1]  216 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000A4 35 07 53 45      [ 1]  217 	mov TIM4_PSCR,#7 ; prescale 128  
      0000A8 35 7D 53 46      [ 1]  218 	mov TIM4_ARR,#125 ; set for 1msec.
      0000AC 35 05 53 40      [ 1]  219 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000B0 72 10 53 41      [ 1]  220 	bset TIM4_IER,#TIM4_IER_UIE
      0000B4 81               [ 4]  221 	ret
                                    222 
                                    223 ;-------------------------------------
                                    224 ;  initialization entry point 
                                    225 ;-------------------------------------
      0000B5                        226 cold_start:
                                    227 ;set stack 
      0000B5 AE 17 FF         [ 2]  228 	ldw x,#STACK_EMPTY
      0000B8 94               [ 1]  229 	ldw sp,x
                                    230 ; clear all ram 
      0000B9 7F               [ 1]  231 0$: clr (x)
      0000BA 5A               [ 2]  232 	decw x 
      0000BB 26 FC            [ 1]  233 	jrne 0$
                                    234 ; activate pull up on all inputs 
      0000BD A6 FF            [ 1]  235 	ld a,#255 
      0000BF C7 50 03         [ 1]  236 	ld PA_CR1,a 
      0000C2 C7 50 08         [ 1]  237 	ld PB_CR1,a 
      0000C5 C7 50 0D         [ 1]  238 	ld PC_CR1,a 
      0000C8 C7 50 12         [ 1]  239 	ld PD_CR1,a 
      0000CB C7 50 17         [ 1]  240 	ld PE_CR1,a 
      0000CE C7 50 1C         [ 1]  241 	ld PF_CR1,a 
      0000D1 C7 50 21         [ 1]  242 	ld PG_CR1,a 
      0000D4 C7 50 2B         [ 1]  243 	ld PI_CR1,a
                                    244 ; set LD2 pin as output 
      0000D7 72 1A 50 0D      [ 1]  245     bset PC_CR1,#LED2_BIT
      0000DB 72 1A 50 0E      [ 1]  246     bset PC_CR2,#LED2_BIT
      0000DF 72 1A 50 0C      [ 1]  247     bset PC_DDR,#LED2_BIT
      0000E3 72 1B 50 0A      [ 1]  248 	bres PC_ODR,#LED2_BIT 
                                    249 ; disable schmitt triggers on Arduino CN4 analog inputs
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      0000E7 55 00 3F 54 07   [ 1]  250 	mov ADC_TDRL,0x3f
                                    251 ; disable peripherals clocks
                                    252 ;	clr CLK_PCKENR1 
                                    253 ;	clr CLK_PCKENR2
      0000EC 72 5F 50 F2      [ 1]  254 	clr AWU_TBR 
      0000F0 72 14 50 CA      [ 1]  255 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                    256 ; select internal clock no divisor: 16 Mhz 	
      0000F4 A6 E1            [ 1]  257 	ld a,#CLK_SWR_HSI 
      0000F6 5F               [ 1]  258 	clrw x  
      0000F7 CD 00 7D         [ 4]  259     call clock_init 
      0000FA CD 00 A0         [ 4]  260 	call timer4_init
      0000FD CD 00 93         [ 4]  261 	call timer2_init
                                    262 ; UART1 at 115200 BAUD
      000100 CD 08 BA         [ 4]  263 	call uart1_init
                                    264 ; activate PE_4 (user button interrupt)
      000103 72 18 50 18      [ 1]  265     bset PE_CR2,#USR_BTN_BIT 
                                    266 ; display system information
      000107 9A               [ 1]  267 	rim ; enable interrupts 
      000108 72 5C 00 17      [ 1]  268 	inc seedy+1 
      00010C 72 5C 00 15      [ 1]  269 	inc seedx+1 
      000110 CD 1D 20         [ 4]  270 	call func_eefree 
      000113 CD 1C C1         [ 4]  271 	call ubound 
      000116 CD 14 9E         [ 4]  272 	call clear_basic
      000119 CD 25 A0         [ 4]  273 	call beep_1khz  
      00011C CD 14 4B         [ 4]  274 	call system_information
      00011F                        275 2$:	
                                    276 ; check for autorun application
      00011F CE 40 00         [ 2]  277 	ldw x,EEPROM_BASE 
      000122 C3 31 A7         [ 2]  278 	cpw x,AR_SIGN 
      000125 27 03            [ 1]  279 	jreq run_app
      000127 CC 17 10         [ 2]  280 	jp warm_start 
      00012A                        281 run_app:
      00012A 4F               [ 1]  282 	clr a 
      00012B CE 40 02         [ 2]  283 	ldw x,EEPROM_BASE+2
      00012E CD 24 CD         [ 4]  284 	call is_program_addr 
      000131 27 03            [ 1]  285 	jreq 1$
      000133 CC 17 10         [ 2]  286 	jp warm_start
      000136                        287 1$:	
                                    288 ; run application in FLASH|EEPROM 
      000136 90 CE 17 73      [ 2]  289 	ldw y,XSTACK_EMPTY
      00013A CD 14 7C         [ 4]  290 	call warm_init
      00013D CE 40 02         [ 2]  291 	ldw x,EEPROM_BASE+2 
      000140 CF 00 1B         [ 2]  292 	ldw txtbgn,x
      000143 1D 00 02         [ 2]  293 	subw x,#2 
      000146 FE               [ 2]  294 	ldw x,(x)
      000147 72 BB 00 1B      [ 2]  295 	addw x,txtbgn 
      00014B CF 00 1D         [ 2]  296 	ldw txtend,x 
      00014E AE 01 5C         [ 2]  297 	ldw x,#AUTO_RUN 
      000151 CD 09 5C         [ 4]  298 	call puts 
      000154 CD 1E 42         [ 4]  299 	call program_info 
      000157 CC 25 3B         [ 2]  300 	jp run_it_02  
      00015A 20 FE            [ 2]  301     jra .  
                                    302 
      00015C 20 61 75 74 6F 20 72   303 AUTO_RUN: .asciz " auto run program\n"
             75 6E 20 70 72 6F 67
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



             72 61 6D 0A 00
                                    304 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;    24 bits arithmetic
                                     21 ;;  arguments are on xtack  
                                     22 ;;  format in registers: A:X 
                                     23 ;;      A  bits 23..16 
                                     24 ;;      X  bits 15..0 
                                     25 ;;  acc24 variable used for 
                                     26 ;;  computation 
                                     27 ;;   T   Top element on xstack 
                                     28 ;;   N   Next element on xtack 
                                     29 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     30 
                                     31 
                                     32     .area CODE 
                                     33 
                                     34 ;-------------------------------
                                     35 ;  duplacte T 
                                     36 ;------------------------------
      00016F                         37 dup24:
      00016F                         38     _at_top 
      00016F 90 F6            [ 1]    1     ld a,(y)
      000171 93               [ 1]    2     ldw x,y 
      000172 EE 01            [ 2]    3     ldw x,(1,x)
      000174                         39     _xpush 
      000174 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      000178 90 F7            [ 1]    2     ld (y),a 
      00017A 90 EF 01         [ 2]    3     ldw (1,y),x 
      00017D 81               [ 4]   40     ret 
                                     41 
                                     42 
                                     43 
                                     44 ;-------------------------------
                                     45 ; add24 
                                     46 ; add 24 bits integers 
                                     47 ;------------------------------
      00017E                         48 add24: ; ( N T -- N+T )
      00017E                         49     _xpop 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      00017E 90 F6            [ 1]    1     ld a,(y)
      000180 93               [ 1]    2     ldw x,y 
      000181 EE 01            [ 2]    3     ldw x,(1,x)
      000183 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000187 89               [ 2]   50     pushw x  
      000188 88               [ 1]   51     push a  
      000189                         52     _at_top  
      000189 90 F6            [ 1]    1     ld a,(y)
      00018B 93               [ 1]    2     ldw x,y 
      00018C EE 01            [ 2]    3     ldw x,(1,x)
      00018E 72 FB 02         [ 2]   53     addw x,(2,sp)
      000191 19 01            [ 1]   54     adc a, (1,sp)
      000193                         55     _store_top 
      000193 90 F7            [ 1]    1     ld (y),a 
      000195 90 EF 01         [ 2]    2     ldw (1,y),x     
      000198                         56     _drop 3 
      000198 5B 03            [ 2]    1     addw sp,#3 
      00019A 81               [ 4]   57     ret 
                                     58 
                                     59 ;-------------------------------
                                     60 ; sub24 
                                     61 ; subtract 24 bits integers 
                                     62 ;------------------------------
      00019B                         63 sub24: ; ( N T -- N-T ) 
      00019B                         64     _xpop 
      00019B 90 F6            [ 1]    1     ld a,(y)
      00019D 93               [ 1]    2     ldw x,y 
      00019E EE 01            [ 2]    3     ldw x,(1,x)
      0001A0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001A4 89               [ 2]   65     pushw x 
      0001A5 88               [ 1]   66     push  a
      0001A6                         67     _at_top  
      0001A6 90 F6            [ 1]    1     ld a,(y)
      0001A8 93               [ 1]    2     ldw x,y 
      0001A9 EE 01            [ 2]    3     ldw x,(1,x)
      0001AB 72 F0 02         [ 2]   68     subw x,(2,sp) 
      0001AE 12 01            [ 1]   69     sbc a, (1,sp)
      0001B0                         70     _store_top  
      0001B0 90 F7            [ 1]    1     ld (y),a 
      0001B2 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001B5                         71     _drop 3 
      0001B5 5B 03            [ 2]    1     addw sp,#3 
      0001B7 81               [ 4]   72     ret 
                                     73 
                                     74 ;------------------------------
                                     75 ; cp24  N T -- 0x800000|0|0x010000
                                     76 ;------------------------------
      0001B8                         77 cp24:
      0001B8                         78     _xpop 
      0001B8 90 F6            [ 1]    1     ld a,(y)
      0001BA 93               [ 1]    2     ldw x,y 
      0001BB EE 01            [ 2]    3     ldw x,(1,x)
      0001BD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0001C1 C7 00 0C         [ 1]   79     ld acc24,a 
      0001C4 CF 00 0D         [ 2]   80     ldw acc16,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      0001C7                         81     _at_top 
      0001C7 90 F6            [ 1]    1     ld a,(y)
      0001C9 93               [ 1]    2     ldw x,y 
      0001CA EE 01            [ 2]    3     ldw x,(1,x)
      0001CC 72 B0 00 0D      [ 2]   82     subw x,acc16
      0001D0 C2 00 0C         [ 1]   83     sbc a,acc24
      0001D3 2F 08            [ 1]   84     jrslt 1$
      0001D5 26 0A            [ 1]   85     jrne 2$
      0001D7 5D               [ 2]   86     tnzw x 
      0001D8 26 07            [ 1]   87     jrne 2$
      0001DA 4F               [ 1]   88     clr a 
      0001DB 20 06            [ 2]   89     jra 9$ 
      0001DD                         90 1$: ; i1 < i2 
      0001DD A6 FF            [ 1]   91     ld a,#255
      0001DF 20 02            [ 2]   92     jra 9$ 
      0001E1                         93 2$: ; i1 > i2 
      0001E1 A6 01            [ 1]   94     ld a,#1 
      0001E3 5F               [ 1]   95 9$: clrw x
      0001E4                         96      _store_top 
      0001E4 90 F7            [ 1]    1     ld (y),a 
      0001E6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0001E9 81               [ 4]   97     ret 
                                     98 
                                     99 ;-------------------------------
                                    100 ; cp24_ax 
                                    101 ; compare acc24 with A:X 
                                    102 ;-------------------------------
      0001EA                        103 cp24_ax:
      0001EA 88               [ 1]  104     push a 
      0001EB C3 00 0D         [ 2]  105     cpw x,acc16 
      0001EE C2 00 0C         [ 1]  106     sbc a,acc24
      0001F1 84               [ 1]  107     pop a 
      0001F2 81               [ 4]  108     ret 
                                    109 
                                    110 
                                    111 ;-------------------------------
                                    112 ; abs24 
                                    113 ; abolute value of top  
                                    114 ;-------------------------------
      0001F3                        115 abs24: ; ( i -- u )
      0001F3 90 F6            [ 1]  116     ld a,(y)
      0001F5 A1 80            [ 1]  117     cp a,#0x80 
      0001F7 2A 0A            [ 1]  118     jrpl neg24 ; negative integer
      0001F9 81               [ 4]  119     ret  
                                    120 
                                    121 ;----------------------------
                                    122 ;  one's compleement 
                                    123 ;----------------------------
      0001FA                        124 cpl24:  ; i -- ~i 
      0001FA 90 73            [ 1]  125     cpl (y) 
      0001FC 90 63 01         [ 1]  126     cpl (1,y)
      0001FF 90 63 02         [ 1]  127     cpl (2,y)
      000202 81               [ 4]  128     ret 
                                    129 
                                    130 ;----------------------------    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                    131 ; two'2 complement of top  
                                    132 ;---------------------------
      000203                        133 neg24: ; (i -- -i )
      000203                        134     _at_top
      000203 90 F6            [ 1]    1     ld a,(y)
      000205 93               [ 1]    2     ldw x,y 
      000206 EE 01            [ 2]    3     ldw x,(1,x)
      000208 43               [ 1]  135     cpl  a  
      000209 53               [ 2]  136     cplw x 
      00020A 1C 00 01         [ 2]  137     addw x,#1
      00020D A9 00            [ 1]  138     adc a,#0
      00020F                        139     _store_top  
      00020F 90 F7            [ 1]    1     ld (y),a 
      000211 90 EF 01         [ 2]    2     ldw (1,y),x     
      000214 81               [ 4]  140 9$: ret 
                                    141 
                                    142 ;-----------------------------
                                    143 ; negate integer in A:X 
                                    144 ;----------------------------
      000215                        145 neg_ax:
      000215 43               [ 1]  146     cpl  a  
      000216 53               [ 2]  147     cplw x 
      000217 1C 00 01         [ 2]  148     addw x,#1
      00021A A9 00            [ 1]  149     adc a,#0
      00021C 81               [ 4]  150     ret 
                                    151 
                                    152 ;------------------------------------
                                    153 ;  two's complement of acc24 
                                    154 ;-------------------------------------
      00021D                        155 neg_acc24: ; 
      00021D 72 53 00 0C      [ 1]  156     cpl acc24 
      000221 72 53 00 0D      [ 1]  157     cpl acc16 
      000225 72 53 00 0E      [ 1]  158     cpl acc8
      000229 72 5C 00 0E      [ 1]  159     inc acc8 
      00022D 26 0A            [ 1]  160     jrne 9$
      00022F 72 5C 00 0D      [ 1]  161     inc acc16 
      000233 26 04            [ 1]  162     jrne 9$
      000235 72 5C 00 0C      [ 1]  163     inc acc24 
      000239 81               [ 4]  164 9$: ret 
                                    165 
                                    166 
                                    167 ;--------------------------------------
                                    168 ; unsigned multiply uint24_t by uint8_t
                                    169 ; input:
                                    170 ;	xstack	    uint24_t 
                                    171 ;   a	        uint8_t
                                    172 ; output:
                                    173 ;   xstack   not modified 
                                    174 ;   A:X     product 
                                    175 ;   acc32   overflow, bits 31..24 
                                    176 ;-------------------------------------
                                    177 ; local variables offset  on sp
                           000001   178 	U8   = 1 
                           000001   179     VSIZE=1 
      00023A                        180 mulu24_8:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      00023A 88               [ 1]  181     push a 
      00023B 72 5F 00 0B      [ 1]  182 	clr acc32
      00023F 72 5F 00 0C      [ 1]  183     clr acc24  
                                    184 ; multiply top bits 7..0 * U8   	
      000243 90 E6 02         [ 1]  185     ld a,(2,Y) ; top least byte  
      000246 97               [ 1]  186     ld xl,a 
      000247 7B 01            [ 1]  187     ld a,(U8,sp)
      000249 42               [ 4]  188     mul x,a 
      00024A CF 00 0D         [ 2]  189     ldw acc16,x 
                                    190 ; multiply top bits 15..8 * U8     
      00024D 90 E6 01         [ 1]  191     ld a,(1,Y) ; top middle byte 
      000250 97               [ 1]  192     ld xl,a 
      000251 7B 01            [ 1]  193     ld a,(U8,sp) 
      000253 42               [ 4]  194     mul x,a 
      000254 72 BB 00 0C      [ 2]  195     addw x,acc24
      000258 72 59 00 0B      [ 1]  196     rlc acc32 
      00025C CF 00 0C         [ 2]  197     ldw acc24,x 
                                    198 ; multiply top bits 23..16 * 8 
      00025F 90 F6            [ 1]  199     ld a,(Y)
      000261 97               [ 1]  200     ld xl,a 
      000262 7B 01            [ 1]  201     ld a,(U8,sp)
      000264 42               [ 4]  202     mul x,a 
      000265 72 BB 00 0B      [ 2]  203     addw x,acc32
      000269 02               [ 1]  204     rlwa x 
      00026A 4D               [ 1]  205     tnz a 
      00026B 27 05            [ 1]  206     jreq 1$
      00026D A6 10            [ 1]  207     ld a,#ERR_OVERFLOW
      00026F CC 16 86         [ 2]  208     jp tb_error 
      000272                        209 1$:
      000272 9E               [ 1]  210     ld a,xh  
      000273 CE 00 0D         [ 2]  211     ldw x,acc16   
      000276                        212     _drop VSIZE 
      000276 5B 01            [ 2]    1     addw sp,#VSIZE 
      000278 81               [ 4]  213     ret
                                    214 
                                    215 
                                    216 ;-------------------------------
                                    217 ; mul24 i1 i2 -- i1*i2  
                                    218 ; multiply 24 bits integers 
                                    219 ;------------------------------
                           000001   220     PROD=1 
                           000004   221     PROD_SIGN=4
                           000005   222     N1=5
                           000007   223     VSIZE=7  
      000279                        224 mul24:
      000279                        225     _vars VSIZE
      000279 52 07            [ 2]    1     sub sp,#VSIZE 
      00027B 5F               [ 1]  226     clrw x 
      00027C 1F 01            [ 2]  227     ldw (PROD,sp),x 
      00027E 1F 03            [ 2]  228     ldw (PROD+2,sp),x
      000280                        229     _xpop 
      000280 90 F6            [ 1]    1     ld a,(y)
      000282 93               [ 1]    2     ldw x,y 
      000283 EE 01            [ 2]    3     ldw x,(1,x)
      000285 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000289 4D               [ 1]  230     tnz a 
      00028A 2A 05            [ 1]  231     jrpl 0$
      00028C 03 04            [ 1]  232     cpl (PROD_SIGN,sp)
      00028E CD 02 15         [ 4]  233     call neg_ax 
      000291                        234 0$:    
      000291 6B 05            [ 1]  235     ld (N1,sp),a 
      000293 1F 06            [ 2]  236     ldw (N1+1,sp),x
      000295 90 7D            [ 1]  237     tnz (Y)
      000297 2A 05            [ 1]  238     jrpl 2$ 
      000299 03 04            [ 1]  239     cpl (PROD_SIGN,sp) 
      00029B CD 02 03         [ 4]  240     call neg24
      00029E                        241 2$: 
      00029E 7B 07            [ 1]  242     ld a,(N1+2,sp); least byte     
      0002A0 27 0A            [ 1]  243     jreq 4$
      0002A2 CD 02 3A         [ 4]  244     call mulu24_8
      0002A5 4D               [ 1]  245     tnz a 
      0002A6 2B 3C            [ 1]  246     jrmi 8$ ; overflow  
      0002A8 6B 01            [ 1]  247     ld (PROD,sp),a
      0002AA 1F 02            [ 2]  248     ldw (PROD+1,sp),x 
      0002AC                        249 4$:
      0002AC 7B 06            [ 1]  250     ld a,(N1+1,sp); middle byte     
      0002AE 27 0D            [ 1]  251     jreq 5$
      0002B0 CD 02 3A         [ 4]  252     call mulu24_8
      0002B3 4D               [ 1]  253     tnz a 
      0002B4 26 2E            [ 1]  254     jrne 8$  ; overflow 
      0002B6 72 FB 01         [ 2]  255     addw x,(PROD,sp)
      0002B9 29 29            [ 1]  256     jrv 8$ ; overflow
      0002BB 1F 01            [ 2]  257     ldw (PROD,sp),x 
      0002BD                        258 5$:
      0002BD 7B 05            [ 1]  259     ld a,(N1,sp) ; high byte 
      0002BF 27 10            [ 1]  260     jreq 6$
      0002C1 CD 02 3A         [ 4]  261     call mulu24_8
      0002C4 01               [ 1]  262     rrwa x 
      0002C5 5D               [ 2]  263     tnzw x 
      0002C6 26 1C            [ 1]  264     jrne 8$ ; overflow 
      0002C8 4D               [ 1]  265     tnz a 
      0002C9 2B 19            [ 1]  266     jrmi 8$ ; overflow 
      0002CB 1B 01            [ 1]  267     add a,(PROD,sp)
      0002CD 6B 01            [ 1]  268     ld (PROD,sp),a 
      0002CF 29 13            [ 1]  269     jrv 8$ ; overflow 
      0002D1                        270 6$:
      0002D1 7B 01            [ 1]  271     ld a,(PROD,sp)
      0002D3 1E 02            [ 2]  272     ldw x,(PROD+1,sp)
      0002D5 0D 04            [ 1]  273     tnz (PROD_SIGN,sp)
      0002D7 27 03            [ 1]  274     jreq 9$
      0002D9 CD 02 15         [ 4]  275     call neg_ax 
      0002DC                        276 9$:
      0002DC                        277     _store_top 
      0002DC 90 F7            [ 1]    1     ld (y),a 
      0002DE 90 EF 01         [ 2]    2     ldw (1,y),x     
      0002E1                        278     _drop VSIZE 
      0002E1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0002E3 81               [ 4]  279     ret 
      0002E4                        280 8$: ; overflow
      0002E4 A6 10            [ 1]  281     ld a,#ERR_OVERFLOW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      0002E6 CC 16 86         [ 2]  282     jp tb_error 
                                    283 
                                    284 ;-------------------------------------
                                    285 ; divide uint24_t by uint8_t
                                    286 ; input:
                                    287 ;	acc24	dividend
                                    288 ;   A 		divisor
                                    289 ; output:
                                    290 ;   acc24	quotient
                                    291 ;   A		remainder
                                    292 ;------------------------------------- 
                                    293 ; offset  on sp of arguments and locals
                           000001   294 	U8   = 1   ; divisor on stack
                           000001   295 	VSIZE =1
      0002E9                        296 divu24_8:
      0002E9 89               [ 2]  297 	pushw x ; save x
      0002EA 88               [ 1]  298 	push a 
                                    299 	; ld dividend UU:MM bytes in X
      0002EB CE 00 0C         [ 2]  300 	ldw x,acc24
      0002EE 7B 01            [ 1]  301 	ld a,(U8,SP) ; divisor
      0002F0 62               [ 2]  302 	div x,a ; UU:MM/U8
      0002F1 88               [ 1]  303 	push a  ;save remainder
      0002F2 CF 00 0C         [ 2]  304     ldw acc24,x ; quotient 
      0002F5 84               [ 1]  305 	pop a
      0002F6 95               [ 1]  306 	ld xh,a
      0002F7 C6 00 0E         [ 1]  307 	ld a,acc8
      0002FA 97               [ 1]  308 	ld xl,a
      0002FB 7B 01            [ 1]  309 	ld a,(U8,sp) ; divisor
      0002FD 62               [ 2]  310 	div x,a  ; R:LL/U8
      0002FE 6B 01            [ 1]  311 	ld (U8,sp),a ; save remainder
      000300 9F               [ 1]  312 	ld a,xl
      000301 C7 00 0E         [ 1]  313 	ld acc8,a
      000304 84               [ 1]  314 	pop a
      000305 85               [ 2]  315 	popw x
      000306 81               [ 4]  316 	ret
                                    317 
                                    318 
                                    319 ;-------------------------------
                                    320 ; div24 N/T   
                                    321 ; divide 24 bits integers
                                    322 ;  i1 i2 -- i1/i2 
                                    323 ;  output:
                                    324 ;    T     quotient 
                                    325 ;    A:X   remainder 
                                    326 ;------------------------------
                           000001   327     DIVISOR=1
                           000004   328     CNTR=4
                           000005   329     QSIGN=5
                           000006   330     RSIGN=6 
                           000006   331     VSIZE=6 
      000307                        332 div24:
      000307                        333     _vars VSIZE 
      000307 52 06            [ 2]    1     sub sp,#VSIZE 
      000309 0F 06            [ 1]  334     clr (RSIGN,sp)
      00030B 0F 05            [ 1]  335     clr (QSIGN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      00030D                        336     _xpop 
      00030D 90 F6            [ 1]    1     ld a,(y)
      00030F 93               [ 1]    2     ldw x,y 
      000310 EE 01            [ 2]    3     ldw x,(1,x)
      000312 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      000316 4D               [ 1]  337     tnz a 
      000317 2A 05            [ 1]  338     jrpl 0$ 
      000319 03 05            [ 1]  339     cpl (QSIGN,sp)
      00031B CD 02 15         [ 4]  340     call neg_ax
      00031E                        341 0$:
      00031E 6B 01            [ 1]  342     ld  (DIVISOR,sp),a
      000320 1F 02            [ 2]  343     ldw (DIVISOR+1,sp),x
      000322 1A 02            [ 1]  344     or a,(DIVISOR+1,sp)
      000324 1A 03            [ 1]  345     or a,(DIVISOR+2,sp)
      000326 26 05            [ 1]  346     jrne 1$ 
      000328 A6 04            [ 1]  347     ld a,#ERR_DIV0 
      00032A CC 16 86         [ 2]  348     jp tb_error 
      00032D                        349 1$: ; dividend  
      00032D                        350     _at_top
      00032D 90 F6            [ 1]    1     ld a,(y)
      00032F 93               [ 1]    2     ldw x,y 
      000330 EE 01            [ 2]    3     ldw x,(1,x)
      000332 4D               [ 1]  351     tnz a 
      000333 2A 07            [ 1]  352     jrpl 2$
      000335 CD 02 15         [ 4]  353     call neg_ax
      000338 03 05            [ 1]  354     cpl (QSIGN,sp)
      00033A 03 06            [ 1]  355     cpl (RSIGN,sp)
      00033C                        356 2$: 
                                    357 ;    ld acc24,a 
                                    358 ;    ldw acc16,x 
      00033C                        359     _store_top 
      00033C 90 F7            [ 1]    1     ld (y),a 
      00033E 90 EF 01         [ 2]    2     ldw (1,y),x     
      000341 A6 18            [ 1]  360     ld a,#24 
      000343 6B 04            [ 1]  361     ld (CNTR,sp),a
      000345 7B 01            [ 1]  362     ld a,(DIVISOR,sp)
      000347 1E 02            [ 2]  363     ldw x,(DIVISOR+1,sp)
                                    364 ; dividend >= divisor ? 
      000349 CD 01 EA         [ 4]  365     call cp24_ax ; A:X-acc24 ?
      00034C 23 14            [ 2]  366     jrule 22$ 
                                    367 ; quotient=0, remainder=divisor      
      00034E C6 00 0C         [ 1]  368     ld a,acc24 
      000351 CE 00 0D         [ 2]  369     ldw x,acc16 
      000354 72 5F 00 0C      [ 1]  370     clr acc24 
      000358 72 5F 00 0D      [ 1]  371     clr acc16 
      00035C 72 5F 00 0E      [ 1]  372     clr acc8 
      000360 20 26            [ 2]  373     jra 6$
      000362                        374 22$:     
      000362 4F               [ 1]  375     clr a 
      000363 5F               [ 1]  376     clrw x 
      000364 98               [ 1]  377     rcf  
      000365                        378 3$: ; shift carry in acc24 bit 0 
      000365 90 69 02         [ 1]  379     rlc (2,y) 
      000368 90 69 01         [ 1]  380     rlc (1,y)
      00036B 90 79            [ 1]  381     rlc (Y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00036D 59               [ 2]  382     rlcw x  
      00036E 49               [ 1]  383     rlc a
      00036F 72 F0 02         [ 2]  384 4$: subw x,(DIVISOR+1,sp) 
      000372 12 01            [ 1]  385     sbc a,(DIVISOR,sp)
      000374 24 05            [ 1]  386     jrnc 5$
      000376 72 FB 02         [ 2]  387     addw x,(DIVISOR+1,sp)
      000379 19 01            [ 1]  388     adc a,(DIVISOR,sp)
      00037B                        389 5$: ; shift carry in QUOTIENT 
      00037B 8C               [ 1]  390     ccf
      00037C 0A 04            [ 1]  391     dec (CNTR,sp)
      00037E 26 E5            [ 1]  392     jrne 3$ 
                                    393 ; shift quotient last bit     
      000380 90 69 02         [ 1]  394     rlc (2,y)
      000383 90 69 01         [ 1]  395     rlc (1,y) 
      000386 90 79            [ 1]  396     rlc (y) 
      000388                        397 6$:    
      000388 6B 01            [ 1]  398     ld (DIVISOR,sp),a 
      00038A 1F 02            [ 2]  399     ldw (DIVISOR+1,sp),x 
      00038C 0D 05            [ 1]  400     tnz (QSIGN,sp)
      00038E 27 03            [ 1]  401     jreq 8$
      000390 CD 02 03         [ 4]  402     call neg24
      000393                        403 8$: 
      000393 7B 01            [ 1]  404     ld a,(DIVISOR,sp)
      000395 1E 02            [ 2]  405     ldw x,(DIVSOR+1,sp)
      000397                        406 81$:
      000397 0D 06            [ 1]  407     tnz (RSIGN,sp)
      000399 27 03            [ 1]  408     jreq 9$
      00039B CD 02 15         [ 4]  409     call neg_ax       
      00039E                        410 9$: _drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  411     ret 
                                    412 
                                    413 
                                    414 ;-------------------------------
                                    415 ; mod24 A:X % acc24 
                                    416 ; remainder 24 bits integers 
                                    417 ; input:
                                    418 ;    acc24   dividend 
                                    419 ;    A:X     divisor 
                                    420 ; output:
                                    421 ;    acc24   acc24 % A:X 
                                    422 ;------------------------------
      0003A1                        423 mod24:
      0003A1 CD 03 07         [ 4]  424     call div24 
      0003A4                        425     _store_top  ; replace quotient by remainder 
      0003A4 90 F7            [ 1]    1     ld (y),a 
      0003A6 90 EF 01         [ 2]    2     ldw (1,y),x     
      0003A9 81               [ 4]  426     ret 
                                    427 
                                    428 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;  debug support
                                     21 ;;  set DEBUG=1 in config.inc 
                                     22 ;;  to enable it.
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 	.macro _dbg_prt_regs
                                     26 	.if DEBUG 
                                     27 		call print_registers  
                                     28 	.endif 
                                     29 	.endm 
                                     30 
                                     31 	.macro _dbg_cmd_itf 
                                     32 	.if DEBUG 
                                     33 		call cmd_itf 
                                     34 	.endif 
                                     35 	.endm 
                                     36 
                           000001    37 .if DEBUG 
                                     38 
                                     39     .area CODE
                                     40 
                                     41 ;--------------------
                                     42 ; print content at address in hex.
                                     43 ; input:
                                     44 ;   X 	address to peek 
                                     45 ; output:
                                     46 ;	none 
                                     47 ;--------------------	
      0003AA                         48 prt_peek::
      0003AA 89               [ 2]   49 	pushw x 
      0003AB 35 10 00 0A      [ 1]   50 	mov base,#16 
      0003AF CD 18 30         [ 4]   51 	call prt_i16  
      0003B2 A6 3A            [ 1]   52 	ld a,#': 
      0003B4 CD 08 FF         [ 4]   53 	call putc 
      0003B7 A6 20            [ 1]   54 	ld a,#SPACE 
      0003B9 CD 08 FF         [ 4]   55 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0003BC 85               [ 2]   56 	popw x 
      0003BD F6               [ 1]   57 	ld a,(x)
      0003BE 5F               [ 1]   58 	clrw x 
      0003BF 97               [ 1]   59 	ld xl,a 
      0003C0 35 0A 00 0A      [ 1]   60 	mov base,#10 
      0003C4 CD 18 30         [ 4]   61 	call prt_i16 
      0003C7 81               [ 4]   62 	ret 
                                     63 
                                     64 ;----------------------------------------
                                     65 ;   DEBUG support functions
                                     66 ;----------------------------------------
                                     67 
                                     68 ; turn LED on 
      0003C8                         69 ledon:
      0003C8 72 1A 50 0A      [ 1]   70     bset PC_ODR,#LED2_BIT
      0003CC 81               [ 4]   71     ret 
                                     72 
                                     73 ; turn LED off 
      0003CD                         74 ledoff:
      0003CD 72 1B 50 0A      [ 1]   75     bres PC_ODR,#LED2_BIT 
      0003D1 81               [ 4]   76     ret 
                                     77 
                                     78 ; invert LED status 
      0003D2                         79 ledtoggle:
      0003D2 A6 20            [ 1]   80     ld a,#LED2_MASK
      0003D4 C8 50 0A         [ 1]   81     xor a,PC_ODR
      0003D7 C7 50 0A         [ 1]   82     ld PC_ODR,a
      0003DA 81               [ 4]   83     ret 
                                     84 
      0003DB                         85 left_paren:
      0003DB A6 20            [ 1]   86 	ld a,#SPACE 
      0003DD CD 08 FF         [ 4]   87 	call putc
      0003E0 A6 28            [ 1]   88 	ld a,#'( 
      0003E2 CD 08 FF         [ 4]   89 	call putc 	
      0003E5 81               [ 4]   90 	ret 
                                     91 
                                     92 ;------------------------------
                                     93 ; print 8 bit register 
                                     94 ; input:
                                     95 ;   X  point to register name 
                                     96 ;   A  register value to print 
                                     97 ; output:
                                     98 ;   none
                                     99 ;------------------------------- 
      0003E6                        100 prt_reg8:
      0003E6 88               [ 1]  101 	push a 
      0003E7 CD 09 5C         [ 4]  102 	call puts 
      0003EA 7B 01            [ 1]  103 	ld a,(1,sp) 
      0003EC 5F               [ 1]  104 	clrw x 
      0003ED 97               [ 1]  105 	ld xl,a 
      0003EE 35 10 00 0A      [ 1]  106 	mov base,#16
      0003F2 CD 18 30         [ 4]  107 	call prt_i16  
      0003F5 CD 03 DB         [ 4]  108 	call left_paren 
      0003F8 84               [ 1]  109 	pop a 
      0003F9 5F               [ 1]  110 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0003FA 97               [ 1]  111 	ld xl,a 
      0003FB 35 0A 00 0A      [ 1]  112 	mov base,#10 
      0003FF CD 18 30         [ 4]  113 	call prt_i16  
      000402 A6 29            [ 1]  114 	ld a,#') 
      000404 CD 08 FF         [ 4]  115 	call putc
      000407 81               [ 4]  116 	ret
                                    117 
                                    118 ;--------------------------------
                                    119 ; print 16 bits register 
                                    120 ; input:
                                    121 ;   X   point register name 
                                    122 ;   Y   register value to print 
                                    123 ; output:
                                    124 ;  none
                                    125 ;--------------------------------
      000408                        126 prt_reg16: 
      000408 90 89            [ 2]  127 	pushw y 
      00040A CD 09 5C         [ 4]  128 	call puts 
      00040D 1E 01            [ 2]  129 	ldw x,(1,sp) 
      00040F 35 10 00 0A      [ 1]  130 	mov base,#16 
      000413 CD 18 30         [ 4]  131 	call prt_i16  
      000416 CD 03 DB         [ 4]  132 	call left_paren 
      000419 85               [ 2]  133 	popw x 
      00041A 35 0A 00 0A      [ 1]  134 	mov base,#10 
      00041E CD 18 30         [ 4]  135 	call prt_i16  
      000421 A6 29            [ 1]  136 	ld a,#') 
      000423 CD 08 FF         [ 4]  137 	call putc
      000426 81               [ 4]  138 	ret 
                                    139 
                                    140 ;------------------------------------
                                    141 ; print registers contents saved on
                                    142 ; stack by trap interrupt.
                                    143 ;------------------------------------
                           00000A   144 	R_PC=10 
                           000009   145 	R_CC=9
                           000008   146 	SAV_ACC24=8
                           000006   147 	SAV_ACC16=6
                           000004   148 	R_Y=4
                           000002   149 	R_X=2
                           000001   150 	R_A=1
                           000008   151 	VSIZE=8 
      000427                        152 print_registers:
      000427 8A               [ 1]  153 	push cc 
      000428                        154 	_vars VSIZE 
      000428 52 08            [ 2]    1     sub sp,#VSIZE 
      00042A 6B 01            [ 1]  155 	ld (R_A,sp),a 
      00042C 1F 02            [ 2]  156 	ldw (R_X,sp),x 
      00042E 17 04            [ 2]  157 	ldw (R_Y,sp),y
      000430 C6 00 0C         [ 1]  158 	ld a,acc24 
      000433 CE 00 0D         [ 2]  159 	ldw x,acc16 
      000436 6B 08            [ 1]  160 	ld (SAV_ACC24,sp),a 
      000438 1F 06            [ 2]  161 	ldw (SAV_ACC16,sp),x 
      00043A AE 04 91         [ 2]  162 	ldw x,#STATES
      00043D CD 09 5C         [ 4]  163 	call puts
                                    164 ; print PC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000440 AE 04 CE         [ 2]  165 	ldw x, #REG_PC
      000443 16 0A            [ 2]  166 	ldw y, (R_PC,sp)
      000445 72 A2 00 03      [ 2]  167 	subw y,#3
      000449 CD 04 08         [ 4]  168 	call prt_reg16 
                                    169 ; print x
      00044C AE 04 D6         [ 2]  170 	ldw x,#REG_X
      00044F 16 02            [ 2]  171 	ldw y,(R_X,sp)
      000451 CD 04 08         [ 4]  172 	call prt_reg16  
                                    173 ; print Y 
      000454 AE 04 D2         [ 2]  174 	ldw x,#REG_Y
      000457 16 04            [ 2]  175 	ldw y, (R_Y,sp)
      000459 CD 04 08         [ 4]  176 	call prt_reg16  
                                    177 ; print A 
      00045C AE 04 DA         [ 2]  178 	ldw x,#REG_A
      00045F 7B 01            [ 1]  179 	ld a, (R_A,sp) 
      000461 CD 03 E6         [ 4]  180 	call prt_reg8
                                    181 ; print CC 
      000464 AE 04 DE         [ 2]  182 	ldw x,#REG_CC 
      000467 7B 09            [ 1]  183 	ld a, (R_CC,sp) 
      000469 CD 03 E6         [ 4]  184 	call prt_reg8 
                                    185 ; print SP 
      00046C AE 04 E3         [ 2]  186 	ldw x,#REG_SP
      00046F 90 96            [ 1]  187 	ldw y,sp 
      000471 72 A9 00 0B      [ 2]  188 	addw y,#(VSIZE+3)
      000475 CD 04 08         [ 4]  189 	call prt_reg16  
      000478 A6 0A            [ 1]  190 	ld a,#'\n' 
      00047A CD 08 FF         [ 4]  191 	call putc
      00047D 7B 08            [ 1]  192 	ld a,(SAV_ACC24,sp)
      00047F 1E 06            [ 2]  193 	ldw x,(SAV_ACC16,sp)
      000481 C7 00 0C         [ 1]  194 	ld acc24,a 
      000484 CF 00 0D         [ 2]  195 	ldw acc16,x 
      000487 7B 01            [ 1]  196 	ld a,(R_A,sp)
      000489 1E 02            [ 2]  197 	ldw x,(R_X,sp)
      00048B 16 04            [ 2]  198 	ldw y,(R_Y,sp)
      00048D                        199 	_drop VSIZE
      00048D 5B 08            [ 2]    1     addw sp,#VSIZE 
      00048F 86               [ 1]  200 	pop cc   	
      000490 81               [ 4]  201 	ret
                                    202 
      000491 0A 52 65 67 69 73 74   203 STATES:  .asciz "\nRegisters state at break point.\n--------------------------\n"
             65 72 73 20 73 74 61
             74 65 20 61 74 20 62
             72 65 61 6B 20 70 6F
             69 6E 74 2E 0A 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 0A 00
      0004CE 50 43 3A 00            204 REG_PC: .asciz "PC:"
      0004D2 0A 59 3A 00            205 REG_Y:   .asciz "\nY:" 
      0004D6 0A 58 3A 00            206 REG_X:   .asciz "\nX:"
      0004DA 0A 41 3A 00            207 REG_A:   .asciz "\nA:" 
      0004DE 0A 43 43 3A 00         208 REG_CC:  .asciz "\nCC:"
      0004E3 0A 53 50 3A 00         209 REG_SP:  .asciz "\nSP:"
                                    210 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                    211 ;----------------------
                                    212 ; input:
                                    213 ;	Y    *input buffer 
                                    214 ; output:
                                    215 ;   acc24  integer 
                                    216 ;----------------------
      0004E8                        217 parse_addr:
      0004E8 A6 20            [ 1]  218 	ld a,#SPACE 
      0004EA CD 0E CF         [ 4]  219 	call skip  	 
      0004ED 72 B9 00 00      [ 2]  220 	addw y,in.w 
      0004F1 AE 16 E0         [ 2]  221 	ldw x,#pad 
      0004F4 CD 13 A2         [ 4]  222 	call strcpy
      0004F7 AE 16 E0         [ 2]  223 	ldw x,#pad
      0004FA CD 18 D2         [ 4]  224 	call atoi24 	
      0004FD 81               [ 4]  225 	ret 
                                    226 
                                    227 ;----------------------------
                                    228 ; command interface
                                    229 ; only 3 commands:
                                    230 ;  'q' to resume application
                                    231 ;  'p [addr]' to print memory values 
                                    232 ;  's addr' to print string 
                                    233 ;----------------------------
                                    234 ;local variable
                           00000B   235 	PSIZE=11
                           00000A   236 	SAV_COUNT=10
                           000009   237 	SAV_IN=9
                           000008   238 	SAV_ACC24=8
                           000006   239 	SAV_ACC16=6
                           000004   240 	R_Y=4
                           000002   241 	R_X=2
                           000001   242 	R_A=1
                           00000B   243 	VSIZE=11
      0004FE                        244 cmd_itf:
      0004FE 8A               [ 1]  245 	push cc 
      0004FF                        246 	_vars VSIZE
      0004FF 52 0B            [ 2]    1     sub sp,#VSIZE 
      000501 6B 01            [ 1]  247 	ld (R_A,sp),a
      000503 C6 00 03         [ 1]  248 	ld a,count 
      000506 6B 0A            [ 1]  249 	ld (SAV_COUNT,sp),a 
      000508 C6 00 01         [ 1]  250 	ld a,in 
      00050B 6B 09            [ 1]  251 	ld (SAV_IN,sp),a  
      00050D 1F 02            [ 2]  252 	ldw (R_X,sp),x 
      00050F 17 04            [ 2]  253 	ldw (R_Y,sp),y
      000511 C6 00 0C         [ 1]  254 	ld a,acc24 
      000514 CE 00 0D         [ 2]  255 	ldw x,acc16 
      000517 6B 08            [ 1]  256 	ld (SAV_ACC24,sp),a 
      000519 1F 06            [ 2]  257 	ldw (SAV_ACC16,sp),x 
      00051B 72 5F 00 18      [ 1]  258 	clr farptr 
      00051F 72 5F 00 19      [ 1]  259 	clr farptr+1 
      000523 72 5F 00 1A      [ 1]  260 	clr farptr+2  
      000527                        261 repl:
      000527 A6 0D            [ 1]  262 	ld a,#CR 
      000529 CD 08 FF         [ 4]  263 	call putc 
      00052C A6 3F            [ 1]  264 	ld a,#'? 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00052E CD 08 FF         [ 4]  265 	call putc
      000531 72 5F 00 00      [ 1]  266 	clr in.w 
      000535 72 5F 00 01      [ 1]  267 	clr in 
      000539 CD 0A 61         [ 4]  268 	call readln
      00053C 90 AE 16 90      [ 2]  269 	ldw y,#tib  
      000540 90 F6            [ 1]  270 	ld a,(y)
      000542 27 E3            [ 1]  271 	jreq repl  
      000544 72 5C 00 01      [ 1]  272 	inc in 
      000548 CD 18 C6         [ 4]  273 	call to_upper 
      00054B A1 51            [ 1]  274 	cp a,#'Q 
      00054D 26 26            [ 1]  275 	jrne test_p
      00054F                        276 repl_exit:
                                    277 ; restore original context 
      00054F 7B 08            [ 1]  278 	ld a,(SAV_ACC24,sp)
      000551 1E 06            [ 2]  279 	ldw x,(SAV_ACC16,sp)
      000553 C7 00 0C         [ 1]  280 	ld acc24,a 
      000556 CF 00 0D         [ 2]  281 	ldw acc16,x
      000559 7B 0A            [ 1]  282 	ld a,(SAV_COUNT,sp)
      00055B C7 00 03         [ 1]  283 	ld count,a 
      00055E 7B 09            [ 1]  284 	ld a,(SAV_IN,sp)
      000560 C7 00 01         [ 1]  285 	ld in,a 
      000563 16 04            [ 2]  286 	ldw y,(R_Y,sp)
      000565 1E 02            [ 2]  287 	ldw x,(R_X,sp)
      000567 7B 01            [ 1]  288 	ld a,(R_A,sp)
      000569                        289 	_drop VSIZE
      000569 5B 0B            [ 2]    1     addw sp,#VSIZE 
      00056B 86               [ 1]  290 	pop cc 
      00056C 81               [ 4]  291 	ret  
      00056D                        292 invalid:
      00056D AE 05 DB         [ 2]  293 	ldw x,#invalid_cmd 
      000570 CD 09 5C         [ 4]  294 	call puts 
      000573 20 B2            [ 2]  295 	jra repl 
      000575                        296 test_p:	
      000575 A1 50            [ 1]  297     cp a,#'P 
      000577 27 10            [ 1]  298 	jreq mem_peek
      000579 A1 53            [ 1]  299     cp a,#'S 
      00057B 26 F0            [ 1]  300 	jrne invalid 
      00057D                        301 print_string:
      00057D CD 04 E8         [ 4]  302 	call parse_addr 	
      000580 CE 00 0D         [ 2]  303 	ldw x,acc16
      000583 CD 09 5C         [ 4]  304 	call puts
      000586 CC 05 27         [ 2]  305 	jp repl 	
      000589                        306 mem_peek:
      000589 CD 04 E8         [ 4]  307 	call parse_addr 
      00058C C6 00 0C         [ 1]  308 	ld a, acc24 
      00058F CA 00 0D         [ 1]  309 	or a,acc16 
      000592 CA 00 0E         [ 1]  310 	or a,acc8 
      000595 26 02            [ 1]  311 	jrne 1$ 
      000597 20 0C            [ 2]  312 	jra peek_byte  
      000599 CE 00 0C         [ 2]  313 1$:	ldw x,acc24 
      00059C CF 00 18         [ 2]  314 	ldw farptr,x 
      00059F C6 00 0E         [ 1]  315 	ld a,acc8 
      0005A2 C7 00 1A         [ 1]  316 	ld farptr+2,a 
      0005A5                        317 peek_byte:
      0005A5 CD 05 EA         [ 4]  318 	call print_farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0005A8 A6 08            [ 1]  319 	ld a,#8 
      0005AA 6B 0B            [ 1]  320 	ld (PSIZE,sp),a 
      0005AC 5F               [ 1]  321 	clrw x 
      0005AD CD 06 05         [ 4]  322 1$:	call fetchc  
      0005B0 89               [ 2]  323 	pushw x 
      0005B1 C7 00 0E         [ 1]  324 	ld acc8,a 
      0005B4 5F               [ 1]  325 	clrw x 
      0005B5 CF 00 0C         [ 2]  326 	ldw acc24,x 
      0005B8 A6 90            [ 1]  327 	ld a,#16+128
      0005BA CD 18 47         [ 4]  328 	call prt_acc24
      0005BD 85               [ 2]  329 	popw x 
      0005BE 0A 0B            [ 1]  330 	dec (PSIZE,sp)
      0005C0 26 EB            [ 1]  331 	jrne 1$ 
      0005C2 A6 08            [ 1]  332 	ld a,#8 
      0005C4 CB 00 1A         [ 1]  333 	add a,farptr+2 
      0005C7 C7 00 1A         [ 1]  334 	ld farptr+2,a
      0005CA 4F               [ 1]  335 	clr a 
      0005CB C9 00 19         [ 1]  336 	adc a,farptr+1 
      0005CE C7 00 19         [ 1]  337 	ld farptr+1,a 
      0005D1 4F               [ 1]  338 	clr a 
      0005D2 C9 00 18         [ 1]  339 	adc a,farptr 
      0005D5 C7 00 18         [ 1]  340 	ld farptr,a 
      0005D8 CC 05 27         [ 2]  341 	jp repl  
                                    342 
      0005DB 6E 6F 74 20 61 20 63   343 invalid_cmd: .asciz "not a command\n" 
             6F 6D 6D 61 6E 64 0A
             00
                                    344 
                                    345 ;----------------------------
                                    346 ; display farptr address
                                    347 ;----------------------------
      0005EA                        348 print_farptr:
      0005EA C6 00 1A         [ 1]  349 	ld a ,farptr+2 
      0005ED C7 00 0E         [ 1]  350 	ld acc8,a 
      0005F0 CE 00 18         [ 2]  351 	ldw x,farptr 
      0005F3 CF 00 0C         [ 2]  352 	ldw acc24,x 
      0005F6 5F               [ 1]  353 	clrw x 
      0005F7 A6 10            [ 1]  354 	ld a,#16 
      0005F9 CD 18 47         [ 4]  355 	call prt_acc24
      0005FC A6 20            [ 1]  356 	ld a,#SPACE 
      0005FE CD 08 FF         [ 4]  357 	call putc 
      000601 CD 08 FF         [ 4]  358 	call putc 
      000604 81               [ 4]  359 	ret
                                    360 
                                    361 ;------------------------------------
                                    362 ; get byte at address farptr[X]
                                    363 ; input:
                                    364 ;	 farptr   address to peek
                                    365 ;    X		  farptr index 	
                                    366 ; output:
                                    367 ;	 A 		  byte from memory  
                                    368 ;    x		  incremented by 1
                                    369 ;------------------------------------
      000605                        370 fetchc: ; @C
      000605 92 AF 00 18      [ 5]  371 	ldf a,([farptr],x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000609 5C               [ 1]  372 	incw x
      00060A 81               [ 4]  373 	ret
                                    374 
                                    375 
                                    376 ;------------------------------------
                                    377 ; expect a number from command line 
                                    378 ; next argument
                                    379 ;  input:
                                    380 ;	  none
                                    381 ;  output:
                                    382 ;    acc24   int24_t 
                                    383 ;------------------------------------
      00060B                        384 number:
      00060B CD 0E E2         [ 4]  385 	call get_token
      00060E A1 84            [ 1]  386 	cp a,#TK_INTGR
      000610 27 03            [ 1]  387 	jreq 1$
      000612 CC 16 84         [ 2]  388 	jp syntax_error
      000615 81               [ 4]  389 1$:	ret
                                    390 
                                    391 
                                    392 ;---------------------
                                    393 ; display n bytes row 
                                    394 ; from memory.
                                    395 ; input:
                                    396 ;   A   bytes to print 
                                    397 ;	X   start address 
                                    398 ; output:
                                    399 ;   X   address after last shown  
                                    400 ;---------------------
                           000001   401 	CNT=1 
                           000002   402 	ADR=2 
                           000003   403 	VSIZE=3 
      000616                        404 show_row:
      000616 4D               [ 1]  405 	tnz a 
      000617 26 01            [ 1]  406 	jrne 1$
      000619 81               [ 4]  407 	ret 
      00061A                        408 1$:	
      00061A 89               [ 2]  409 	pushw x  
      00061B 88               [ 1]  410 	push a 
      00061C 35 04 00 23      [ 1]  411 	mov tab_width,#4 
      000620 CD 18 30         [ 4]  412 	call prt_i16 
      000623 A6 20            [ 1]  413 	ld a,#SPACE  
      000625 CD 08 FF         [ 4]  414 	call putc
      000628                        415 row_loop:
      000628 1E 02            [ 2]  416 	ldw x,(ADR,sp)
      00062A F6               [ 1]  417 	ld a,(x)
      00062B 5F               [ 1]  418 	clrw x 
      00062C 97               [ 1]  419 	ld xl,a 
      00062D CD 18 30         [ 4]  420 	call prt_i16 
      000630 1E 02            [ 2]  421 	ldw x,(ADR,sp)
      000632 5C               [ 1]  422 	incw x 
      000633 1F 02            [ 2]  423 	ldw (ADR,sp),x 
      000635 0A 01            [ 1]  424 	dec (CNT,sp)
      000637 26 EF            [ 1]  425 	jrne row_loop
      000639                        426 	_drop VSIZE  		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000639 5B 03            [ 2]    1     addw sp,#VSIZE 
      00063B 35 04 00 23      [ 1]  427 	mov tab_width,#4
      00063F A6 0D            [ 1]  428 	ld a,#CR 
      000641 CD 08 FF         [ 4]  429 	call putc 
      000644 81               [ 4]  430 	ret 
                                    431 
                                    432 ;--------------------------
                                    433 ; print memory content 
                                    434 ; in hexadecimal format
                                    435 ;  input:
                                    436 ;    X    start address 
                                    437 ;    Y    count 
                                    438 ;--------------------------
                           000001   439 	BCNT=1
                           000003   440 	BASE=3
                           000004   441 	TABW=4
                           000004   442 	VSIZE=4   
      000645                        443 hex_dump:
      000645 88               [ 1]  444 	push a 
      000646                        445 	_vars VSIZE
      000646 52 04            [ 2]    1     sub sp,#VSIZE 
      000648 C6 00 0A         [ 1]  446 	ld a,base
      00064B 6B 03            [ 1]  447 	ld (BASE,sp),a 
      00064D 35 10 00 0A      [ 1]  448 	mov base,#16
      000651 C6 00 23         [ 1]  449 	ld a,tab_width 
      000654 6B 04            [ 1]  450 	ld (TABW,sp),a
      000656 A6 0D            [ 1]  451 	ld a,#CR 
      000658 CD 08 FF         [ 4]  452 	call putc 
      00065B 17 01            [ 2]  453 1$: ldw (BCNT,sp),y
      00065D A6 10            [ 1]  454 	ld a,#16
      00065F 90 A3 00 10      [ 2]  455 	cpw y,#16
      000663 2A 02            [ 1]  456 	jrpl 2$
      000665 90 9F            [ 1]  457 	ld a,yl
      000667                        458 2$: 	
      000667 CD 06 16         [ 4]  459 	call show_row 
      00066A 16 01            [ 2]  460 	ldw y,(BCNT,sp) 
      00066C 72 A2 00 10      [ 2]  461 	subw y,#16 
      000670 90 A3 00 01      [ 2]  462 	cpw y,#1
      000674 2A E5            [ 1]  463 	jrpl 1$
      000676 7B 03            [ 1]  464 	ld a,(BASE,sp)
      000678 C7 00 0A         [ 1]  465 	ld base,a
      00067B 7B 04            [ 1]  466 	ld a,(TABW,sp)
      00067D C7 00 23         [ 1]  467 	ld tab_width,a 
      000680                        468 	_drop VSIZE
      000680 5B 04            [ 2]    1     addw sp,#VSIZE 
      000682 84               [ 1]  469 	pop a 
      000683 81               [ 4]  470 	ret 
                                    471 
                                    472 .endif ; DEBUG 
                                    473 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;;  In application Programming of 
                                     21 ;;;  FLASH, EEPROM and OPTION memory 
                                     22 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     23 
                                     24     .module IAP 
                                     25 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 ;----------------------------------
                                     38 ; unlock EEPROM/OPT for writing/erasing
                                     39 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                     40 ; input:
                                     41 ;  none
                                     42 ; output:
                                     43 ;  none 
                                     44 ;----------------------------------
      000684                         45 unlock_eeprom:
      000684 72 06 50 5F 15   [ 2]   46 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      000689 35 00 50 5B      [ 1]   47 	mov FLASH_CR2,#0 
      00068D 35 FF 50 5C      [ 1]   48 	mov FLASH_NCR2,#0xFF 
      000691 35 AE 50 64      [ 1]   49 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      000695 35 56 50 64      [ 1]   50     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      000699 72 07 50 5F FB   [ 2]   51 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      00069E 81               [ 4]   52 9$:	ret
                                     53 
                                     54 ;----------------------------------
                                     55 ; unlock FLASH for writing/erasing
                                     56 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                     57 ; input:
                                     58 ;  none
                                     59 ; output:
                                     60 ;  none
                                     61 ;----------------------------------
      00069F                         62 unlock_flash:
      00069F 72 02 50 5F 15   [ 2]   63 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0006A4 35 00 50 5B      [ 1]   64 	mov FLASH_CR2,#0 
      0006A8 35 FF 50 5C      [ 1]   65 	mov FLASH_NCR2,#0xFF 
      0006AC 35 56 50 62      [ 1]   66 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0006B0 35 AE 50 62      [ 1]   67 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0006B4 72 03 50 5F FB   [ 2]   68 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0006B9 81               [ 4]   69 9$:	ret
                                     70 
                                     71 ;----------------------------
                                     72 ; erase block code must be 
                                     73 ; executed from RAM
                                     74 ; input:
                                     75 ;-----------------------------
      0006BA                         76 row_erase:
      0006BA 88               [ 1]   77 	push a 
      0006BB 90 89            [ 2]   78 	pushw y 
      0006BD 35 20 50 5B      [ 1]   79 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0006C1 35 DF 50 5C      [ 1]   80 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0006C5 4F               [ 1]   81 	clr a 
      0006C6 90 5F            [ 1]   82 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0006C8 91 A7 00 18      [ 1]   83 	ldf ([farptr],y),a
      0006CC 90 5C            [ 1]   84     incw y
      0006CE 91 A7 00 18      [ 1]   85 	ldf ([farptr],y),a
      0006D2 90 5C            [ 1]   86     incw y
      0006D4 91 A7 00 18      [ 1]   87 	ldf ([farptr],y),a
      0006D8 90 5C            [ 1]   88     incw y
      0006DA 91 A7 00 18      [ 1]   89 	ldf ([farptr],y),a
      0006DE 72 05 50 5F FB   [ 2]   90 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      0006E3 90 85            [ 2]   91 	popw y 
      0006E5 84               [ 1]   92 	pop a 
      0006E6 81               [ 4]   93 	ret
      0006E7                         94 row_erase_end:
                                     95 
                                     96 ; copy erase_start in RAM 
      0006E7                         97 move_erase_to_ram:
      0006E7 89               [ 2]   98 	pushw x 
      0006E8 90 89            [ 2]   99 	pushw y 
      0006EA AE 06 E7         [ 2]  100 	ldw x,#row_erase_end 
      0006ED 1D 06 BA         [ 2]  101 	subw x,#row_erase
      0006F0 CF 00 0D         [ 2]  102 	ldw acc16,x 
      0006F3 AE 16 90         [ 2]  103 	ldw x,#tib 
      0006F6 90 AE 06 BA      [ 2]  104 	ldw y,#row_erase 
      0006FA CD 13 B2         [ 4]  105 	call move
      0006FD 90 85            [ 2]  106 	popw y
      0006FF 85               [ 2]  107 	popw x
      000700 81               [ 4]  108 	ret 
                                    109 
                                    110 ;-----------------------------------
                                    111 ; block programming must be 
                                    112 ; executed from RAM 
                                    113 ; initial contidions: 
                                    114 ; 	memory unlocked
                                    115 ;   bit PRG set in 
                                    116 ; input:
                                    117 ;   x        data source 
                                    118 ;   farptr   row address destination 
                                    119 ; output:
                                    120 ;   none 
                                    121 ;----------------------------------
                           000001   122 	BCNT=1 
      000701                        123 program_row:
      000701 88               [ 1]  124 	push a 
      000702 90 89            [ 2]  125 	pushw y 
      000704 4B 80            [ 1]  126 	push #BLOCK_SIZE  
                                    127 ;enable block programming 
      000706 72 10 50 5B      [ 1]  128 	bset FLASH_CR2,#FLASH_CR2_PRG 
      00070A 72 11 50 5C      [ 1]  129 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00070E 90 5F            [ 1]  130 	clrw y 
      000710 F6               [ 1]  131 1$:	ld a,(x)
      000711 91 A7 00 18      [ 1]  132 	ldf ([farptr],y),a
      000715 5C               [ 1]  133 	incw x 
      000716 90 5C            [ 1]  134 	incw y 
      000718 0A 01            [ 1]  135 	dec (BCNT,sp)
      00071A 26 F4            [ 1]  136 	jrne 1$
                                    137 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00071C 72 05 50 5F FB   [ 2]  138 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      000721                        139 	_drop 1 
      000721 5B 01            [ 2]    1     addw sp,#1 
      000723 90 85            [ 2]  140 	popw y 
      000725 84               [ 1]  141 	pop a 
      000726 81               [ 4]  142 	ret 
      000727                        143 program_row_end:
                                    144 
                                    145 ;-------------------------
                                    146 ; move program_row to RAM 
                                    147 ; at txtubound address 
                                    148 ;------------------------
      000727                        149 move_prg_to_ram:
      000727 89               [ 2]  150 	pushw x 
      000728 90 89            [ 2]  151 	pushw y 
      00072A AE 07 27         [ 2]  152 	ldw x,#program_row_end 
      00072D 1D 07 01         [ 2]  153 	subw x,#program_row 
      000730 CF 00 0D         [ 2]  154 	ldw acc16,x ; bytes to move 
      000733 AE 16 90         [ 2]  155 	ldw x,#tib ; destination address 
      000736 90 AE 07 01      [ 2]  156 	ldw y,#program_row ; source address 
      00073A CD 13 B2         [ 4]  157 	call move
      00073D 90 85            [ 2]  158 	popw y 
      00073F 85               [ 2]  159 	popw x  
      000740 81               [ 4]  160 	ret 
                                    161 
                                    162 
                                    163 ;-----------------------------
                                    164 ; write a buffer in FLASH/EEPROM 
                                    165 ; input:
                                    166 ;    farptr   destination address 
                                    167 ;    x        buffer address 
                                    168 ;-----------------------------
      000741                        169 write_buffer:
      000741 89               [ 2]  170 	pushw x 
      000742 72 5D 00 18      [ 1]  171 	tnz farptr 
      000746 26 0D            [ 1]  172 	jrne to_flash 
      000748 CE 00 19         [ 2]  173 	ldw x,farptr+1 
      00074B A3 37 80         [ 2]  174 	cpw x,#app_space  
      00074E 24 05            [ 1]  175 	jruge to_flash 
      000750                        176 to_eeprom:
      000750 CD 06 84         [ 4]  177 	call unlock_eeprom
      000753 20 03            [ 2]  178 	jra do_programming
      000755                        179 to_flash:
      000755 CD 06 9F         [ 4]  180 	call unlock_flash
      000758                        181 do_programming:
      000758 85               [ 2]  182 	popw x 
      000759 CD 16 90         [ 4]  183 	call tib
      00075C 72 13 50 5F      [ 1]  184 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      000760 72 17 50 5F      [ 1]  185 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      000764 81               [ 4]  186 	ret 
                                    187 
                                    188 
                                    189 ;-----------------------------------
                                    190 ; erase flash or EEPROM block
                                    191 ; a block is 128 bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                    192 ; input:
                                    193 ;   farptr  address row begin
                                    194 ; output:
                                    195 ;   none
                                    196 ;--------------------------------------
      000765                        197 block_erase:
      000765 89               [ 2]  198 	pushw x 
      000766 C6 00 18         [ 1]  199 	ld a,farptr 
      000769 26 14            [ 1]  200 	jrne erase_flash
      00076B CE 00 19         [ 2]  201 	ldw x,farptr+1
      00076E A3 37 80         [ 2]  202 	cpw x,#app_space 
      000771 24 0C            [ 1]  203 	jruge erase_flash 
                                    204 ; erase eeprom block
      000773 CD 06 84         [ 4]  205 	call unlock_eeprom 
      000776 CD 16 90         [ 4]  206 	call tib 
      000779 72 17 50 5F      [ 1]  207 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      00077D 20 0A            [ 2]  208 	jra erase_exit  
                                    209 ; erase flash block:
      00077F                        210 erase_flash:
      00077F CD 06 9F         [ 4]  211 	call unlock_flash 
      000782 CD 16 90         [ 4]  212 	call tib 
      000785 72 13 50 5F      [ 1]  213     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      000789                        214 erase_exit: 
      000789 85               [ 2]  215 	popw x 
      00078A 81               [ 4]  216 	ret 
                                    217 
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    220 ; write a byte to FLASH or EEPROM/OPTION  
                                    221 ; input:
                                    222 ;    a  		byte to write
                                    223 ;    farptr  	address
                                    224 ;    x          farptr[x]
                                    225 ; output:
                                    226 ;    none
                                    227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    228 	; variables locales
                           000001   229 	BTW = 1   ; byte to write offset on stack
                           000002   230 	OPT = 2   ; OPTION flag offset on stack
                           000002   231 	VSIZE = 2
      00078B                        232 write_byte:
      00078B 90 89            [ 2]  233 	pushw y
      00078D                        234 	_vars VSIZE
      00078D 52 02            [ 2]    1     sub sp,#VSIZE 
      00078F 6B 01            [ 1]  235 	ld (BTW,sp),a ; byte to write 
      000791 0F 02            [ 1]  236 	clr (OPT,sp)  ; OPTION flag
                                    237 ; put addr[15:0] in Y, for bounds check.
      000793 90 CE 00 19      [ 2]  238 	ldw y,farptr+1   ; Y=addr15:0
                                    239 ; check addr[23:16], if <> 0 then it is extened flash memory
      000797 72 5D 00 18      [ 1]  240 	tnz farptr 
      00079B 26 14            [ 1]  241 	jrne write_flash
      00079D 90 A3 37 80      [ 2]  242     cpw y,#app_space 	 
      0007A1 24 0E            [ 1]  243     jruge write_flash
      0007A3 90 A3 40 00      [ 2]  244 	cpw y,#EEPROM_BASE  
      0007A7 25 57            [ 1]  245     jrult write_exit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0007A9 90 A3 48 7F      [ 2]  246 	cpw y,#OPTION_END 
      0007AD 22 51            [ 1]  247 	jrugt write_exit
      0007AF 20 16            [ 2]  248 	jra write_eeprom 
                                    249 ; write program memory
      0007B1                        250 write_flash:
      0007B1 CD 06 9F         [ 4]  251 	call unlock_flash 
      0007B4 9B               [ 1]  252 1$:	sim 
      0007B5 7B 01            [ 1]  253 	ld a,(BTW,sp)
      0007B7 92 A7 00 18      [ 4]  254 	ldf ([farptr],x),a ; farptr[x]=A
      0007BB 72 05 50 5F FB   [ 2]  255 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007C0 9A               [ 1]  256     rim 
      0007C1 72 13 50 5F      [ 1]  257     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0007C5 20 39            [ 2]  258     jra write_exit
                                    259 ; write eeprom and option
      0007C7                        260 write_eeprom:
      0007C7 CD 06 84         [ 4]  261 	call unlock_eeprom
                                    262 	; check for data eeprom or option eeprom
      0007CA 90 A3 48 00      [ 2]  263 	cpw y,#OPTION_BASE
      0007CE 2B 08            [ 1]  264 	jrmi 1$
      0007D0 90 A3 48 80      [ 2]  265 	cpw y,#OPTION_END+1
      0007D4 2A 02            [ 1]  266 	jrpl 1$
      0007D6 03 02            [ 1]  267 	cpl (OPT,sp)
      0007D8                        268 1$: 
      0007D8 0D 02            [ 1]  269     tnz (OPT,sp)
      0007DA 27 08            [ 1]  270     jreq 2$
                                    271 	; pour modifier une option il faut modifier ces 2 bits
      0007DC 72 1E 50 5B      [ 1]  272     bset FLASH_CR2,#FLASH_CR2_OPT
      0007E0 72 1F 50 5C      [ 1]  273     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0007E4                        274 2$: 
      0007E4 7B 01            [ 1]  275     ld a,(BTW,sp)
      0007E6 92 A7 00 18      [ 4]  276     ldf ([farptr],x),a
      0007EA 0D 02            [ 1]  277     tnz (OPT,sp)
      0007EC 27 08            [ 1]  278     jreq 3$
      0007EE 5C               [ 1]  279     incw x
      0007EF 7B 01            [ 1]  280     ld a,(BTW,sp)
      0007F1 43               [ 1]  281     cpl a
      0007F2 92 A7 00 18      [ 4]  282     ldf ([farptr],x),a
      0007F6 72 05 50 5F FB   [ 2]  283 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0007FB 72 0D 50 5F FB   [ 2]  284 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000800                        285 write_exit:
      000800 5C               [ 1]  286 	incw x 
      000801 CD 08 60         [ 4]  287 	call incr_farptr
      000804 5F               [ 1]  288 	clrw x 
      000805                        289 	_drop VSIZE 
      000805 5B 02            [ 2]    1     addw sp,#VSIZE 
      000807 90 85            [ 2]  290 	popw y
      000809 81               [ 4]  291     ret
                                    292 
                                    293 ;--------------------------------------------
                                    294 ; write a data block to eeprom or flash 
                                    295 ; the block must be erased before 
                                    296 ; using this routine.
                                    297 ; input:
                                    298 ;   Y        source address   
                                    299 ;   X        array index  destination  farptr[x]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                    300 ;   BSIZE    block size bytes 
                                    301 ;   farptr   write address , byte* 
                                    302 ; output:
                                    303 ;	X 		after last byte written 
                                    304 ;   Y 		after last byte read 
                                    305 ;  farptr   point after block
                                    306 ;---------------------------------------------
      00080A                        307 	_argofs 3 
                           000005     1     ARG_OFS=2+3 
      00080A                        308 	_arg BSIZE 1  ; block size
                           000006     1     BSIZE=ARG_OFS+1 
                                    309 	; local var 
                           000001   310 	XSAVE=1 
                           000002   311 	VSIZE=2 
      00080A                        312 write_block::
      00080A 88               [ 1]  313 	push a 
      00080B                        314 	_vars VSIZE
      00080B 52 02            [ 2]    1     sub sp,#VSIZE 
      00080D 1F 01            [ 2]  315 	ldw (XSAVE,sp),x 
      00080F 1E 06            [ 2]  316 	ldw x,(BSIZE,sp) 
      000811 27 13            [ 1]  317 	jreq 9$
      000813 1E 01            [ 2]  318 1$:	ldw x,(XSAVE,sp)
      000815 90 F6            [ 1]  319 	ld a,(y)
      000817 CD 07 8B         [ 4]  320 	call write_byte 
      00081A 5C               [ 1]  321 	incw x 
      00081B 90 5C            [ 1]  322 	incw y 
      00081D 1F 01            [ 2]  323 	ldw (XSAVE,sp),x
      00081F 1E 06            [ 2]  324 	ldw x,(BSIZE,sp)
      000821 5A               [ 2]  325 	decw x
      000822 1F 06            [ 2]  326 	ldw (BSIZE,sp),x 
      000824 26 ED            [ 1]  327 	jrne 1$
      000826                        328 9$:
      000826 1E 01            [ 2]  329 	ldw x,(XSAVE,sp)
      000828 CD 08 60         [ 4]  330 	call incr_farptr
      00082B                        331 	_drop VSIZE
      00082B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00082D 84               [ 1]  332 	pop a 
      00082E 81               [ 4]  333 	ret 
                                    334 
                                    335 
                                    336 ;------------------------------------
                                    337 ; write n bytes to flash | eeprom 
                                    338 ; if the number of bytes is 
                                    339 ; >=128 it is faster to 
                                    340 ; use write_block
                                    341 ; the bytes are written one by 
                                    342 ; one and auto erased if required. 
                                    343 ; input:
                                    344 ;    farptr    dest address 
                                    345 ;    X         src address 
                                    346 ;    A         count 
                                    347 ; output:
                                    348 ;    none   
                                    349 ;----------------------------------
      00082F                        350 write_nbytes:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00082F 90 89            [ 2]  351 	pushw y
      000831 88               [ 1]  352 	push a 
      000832 90 93            [ 1]  353 	ldw y,x
      000834 5F               [ 1]  354 	clrw x 
      000835                        355 1$:  
      000835 90 F6            [ 1]  356 	ld a,(y)
      000837 90 5C            [ 1]  357 	incw y
      000839 CD 07 8B         [ 4]  358 	call write_byte 
      00083C 5C               [ 1]  359 	incw x 
      00083D 0A 01            [ 1]  360 	dec (1,sp)  
      00083F 26 F4            [ 1]  361 	jrne 1$ 
      000841 84               [ 1]  362 9$: pop a 
      000842 90 85            [ 2]  363 	popw y 
      000844 81               [ 4]  364 	ret 
                                    365 
                                    366 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    367 ;;;  flash memory operations
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 
                                    370 ;--------------------------
                                    371 ; align farptr to BLOCK_SIZE 
                                    372 ;---------------------------
      000845                        373 row_align:
      000845 A6 7F            [ 1]  374 	ld a,#0x7f 
      000847 C4 00 1A         [ 1]  375 	and a,farptr+2 
      00084A 27 13            [ 1]  376 	jreq 1$ 
      00084C CE 00 19         [ 2]  377 	ldw x,farptr+1 
      00084F 1C 00 80         [ 2]  378 	addw x,#BLOCK_SIZE 
      000852 24 04            [ 1]  379 	jrnc 0$
      000854 72 5C 00 18      [ 1]  380 	inc farptr 
      000858 9F               [ 1]  381 0$: ld a,xl 
      000859 A4 80            [ 1]  382 	and a,#0x80
      00085B 97               [ 1]  383 	ld xl,a
      00085C CF 00 19         [ 2]  384 	ldw farptr+1,x  	
      00085F 81               [ 4]  385 1$:	ret
                                    386 
                                    387 ;--------------------
                                    388 ; input:
                                    389 ;   X     increment 
                                    390 ; output:
                                    391 ;   farptr  incremented 
                                    392 ;---------------------
      000860                        393 incr_farptr:
      000860 72 BB 00 19      [ 2]  394 	addw x,farptr+1 
      000864 24 04            [ 1]  395 	jrnc 1$
      000866 72 5C 00 18      [ 1]  396 	inc farptr 
      00086A CF 00 19         [ 2]  397 1$:	ldw farptr+1,x  
      00086D 81               [ 4]  398 	ret 
                                    399 
                                    400 ;-----------------------------------
                                    401 ; scan block for non zero byte 
                                    402 ; block are 128 bytes 
                                    403 ; input:
                                    404 ;    farptr     address block  
                                    405 ; output:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                    406 ;     A     0 cleared, other not cleared  
                                    407 ;-----------------------------------
      00086E                        408 scan_block:
      00086E 5F               [ 1]  409 	clrw x 
      00086F 92 AF 00 18      [ 5]  410 1$: ldf a,([farptr],x) 
      000873 26 06            [ 1]  411 	jrne 2$
      000875 5C               [ 1]  412 	incw x 
      000876 A3 00 80         [ 2]  413 	cpw x,#BLOCK_SIZE 
      000879 25 F4            [ 1]  414 	jrult 1$ 
      00087B 81               [ 4]  415 2$:	ret 
                                    416 
                                    417 
                                    418 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2022 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                     32     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                     33 
                           000000    34 .if SEPARATE
                                     35 	.include "inc/nucleo_8s208.inc"
                                     36 	.include "inc/stm8s208.inc"
                                     37 	.include "inc/ascii.inc"
                                     38 	.include "inc/gen_macros.inc" 
                                     39 	.include "tbi_macros.inc" 
                                     40 .endif 
                                     41 
                                     42 ;    .list 
                                     43 
                                     44 
                                     45     .area CODE 
                                     46 
                                     47 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     48 ;;   UART1 subroutines
                                     49 ;;   used for user interface 
                                     50 ;;   communication channel.
                                     51 ;;   settings: 
                                     52 ;;		115200 8N1 no flow control
                                     53 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     54 
                                     55 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     56 ;;; Uart1 intterrupt handler 
                                     57 ;;; on receive 
                                     58 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     59 ;--------------------------
                                     60 ; UART1 receive character
                                     61 ; CTRL+C (ASCII 3)
                                     62 ; cancel program execution
                                     63 ; and fall back to command line
                                     64 ; CTRL+X reboot system 
                                     65 ;--------------------------
      00087C                         66 Uart1RxHandler: ; console receive char 
      00087C 72 0B 52 30 31   [ 2]   67 	btjf UART1_SR,#UART_SR_RXNE,5$
      000881 C6 52 31         [ 1]   68 	ld a,UART1_DR 
      000884 A1 03            [ 1]   69 	cp a,#CTRL_C 
      000886 26 06            [ 1]   70 	jrne 2$
      000888 CD 08 FF         [ 4]   71 	call putc 
      00088B CC 00 49         [ 2]   72 	jp user_interrupted
      00088E                         73 2$:
      00088E A1 18            [ 1]   74 	cp a,#CAN ; CTRL_X 
      000890 26 03            [ 1]   75 	jrne 3$
      000892 CC 00 B5         [ 2]   76 	jp cold_start 	
      000895 A1 1A            [ 1]   77 3$:	cp a,#CTRL_Z 
      000897 26 06            [ 1]   78 	jrne 4$
      000899 CD 08 B3         [ 4]   79 	call clear_autorun
      00089C CC 00 B5         [ 2]   80 	jp cold_start 
      00089F                         81 4$:
      00089F 88               [ 1]   82 	push a 
      0008A0 A6 26            [ 1]   83 	ld a,#rx1_queue 
      0008A2 CB 00 2F         [ 1]   84 	add a,rx1_tail 
      0008A5 5F               [ 1]   85 	clrw x 
      0008A6 97               [ 1]   86 	ld xl,a 
      0008A7 84               [ 1]   87 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0008A8 F7               [ 1]   88 	ld (x),a 
      0008A9 C6 00 2F         [ 1]   89 	ld a,rx1_tail 
      0008AC 4C               [ 1]   90 	inc a 
      0008AD A4 07            [ 1]   91 	and a,#RX_QUEUE_SIZE-1
      0008AF C7 00 2F         [ 1]   92 	ld rx1_tail,a 
      0008B2 80               [11]   93 5$:	iret 
                                     94 
      0008B3                         95 clear_autorun:
      0008B3 AE 40 00         [ 2]   96 	ldw x,#EEPROM_BASE 
      0008B6 CD 28 95         [ 4]   97 	call erase_header 
      0008B9 81               [ 4]   98 	ret 
                                     99 
                                    100 ;---------------------------------------------
                                    101 ; initialize UART1, 115200 8N1
                                    102 ; input:
                                    103 ;	none
                                    104 ; output:
                                    105 ;   none
                                    106 ;---------------------------------------------
      0008BA                        107 uart1_init:
      0008BA 72 1A 50 02      [ 1]  108     bset PA_DDR,#UART1_TX_PIN
      0008BE 72 1A 50 03      [ 1]  109     bset PA_CR1,#UART1_TX_PIN 
      0008C2 72 1A 50 04      [ 1]  110     bset PA_CR2,#UART1_TX_PIN 
                                    111 ; enable UART1 clock
      0008C6 72 14 50 C7      [ 1]  112 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      0008CA                        113 uart1_set_baud: 
      0008CA 88               [ 1]  114 	push a 
                                    115 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    116 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      0008CB A6 E1            [ 1]  117 	ld a,#CLK_SWR_HSI
      0008CD C1 50 C3         [ 1]  118 	cp a,CLK_CMSR 
      0008D0 27 0A            [ 1]  119 	jreq 2$ 
      0008D2                        120 1$: ; 8 Mhz 	
      0008D2 35 05 52 33      [ 1]  121 	mov UART1_BRR2,#0x05 ; must be loaded first
      0008D6 35 04 52 32      [ 1]  122 	mov UART1_BRR1,#0x4
      0008DA 20 08            [ 2]  123 	jra 3$
      0008DC                        124 2$: ; 16 Mhz 	
      0008DC 35 0B 52 33      [ 1]  125 	mov UART1_BRR2,#0x0b ; must be loaded first
      0008E0 35 08 52 32      [ 1]  126 	mov UART1_BRR1,#0x08
      0008E4                        127 3$:
      0008E4 72 5F 52 31      [ 1]  128     clr UART1_DR
      0008E8 35 2C 52 35      [ 1]  129 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0008EC 72 10 52 35      [ 1]  130 	bset UART1_CR2,#UART_CR2_SBK
      0008F0 72 0D 52 30 FB   [ 2]  131     btjf UART1_SR,#UART_SR_TC,.
      0008F5 72 5F 00 2E      [ 1]  132     clr rx1_head 
      0008F9 72 5F 00 2F      [ 1]  133 	clr rx1_tail
      0008FD 84               [ 1]  134 	pop a  
      0008FE 81               [ 4]  135 	ret
                                    136 
                                    137 ;---------------------------------
                                    138 ; uart1_putc
                                    139 ; send a character via UART1
                                    140 ; input:
                                    141 ;    A  	character to send
                                    142 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0008FF                        143 putc:: ; console output always on UART1
      0008FF                        144 uart1_putc:: 
      0008FF 72 0F 52 30 FB   [ 2]  145 	btjf UART1_SR,#UART_SR_TXE,.
      000904 C7 52 31         [ 1]  146 	ld UART1_DR,a 
      000907 81               [ 4]  147 	ret 
                                    148 
                                    149 
                                    150 ;---------------------------------
                                    151 ; Query for character in rx1_queue
                                    152 ; input:
                                    153 ;   none 
                                    154 ; output:
                                    155 ;   A     0 no charcter available
                                    156 ;   Z     1 no character available
                                    157 ;---------------------------------
      000908                        158 qgetc::
      000908                        159 uart1_qgetc::
      000908 C6 00 2E         [ 1]  160 	ld a,rx1_head 
      00090B C0 00 2F         [ 1]  161 	sub a,rx1_tail 
      00090E 81               [ 4]  162 	ret 
                                    163 
                                    164 ;---------------------------------
                                    165 ; wait character from UART1 
                                    166 ; input:
                                    167 ;   none
                                    168 ; output:
                                    169 ;   A 			char  
                                    170 ;--------------------------------	
      00090F                        171 getc:: ;console input
      00090F                        172 uart1_getc::
      00090F CD 09 08         [ 4]  173 	call uart1_qgetc
      000912 27 FB            [ 1]  174 	jreq uart1_getc 
      000914 89               [ 2]  175 	pushw x 
                                    176 ;; rx1_queue must be in page 0 	
      000915 A6 26            [ 1]  177 	ld a,#rx1_queue
      000917 CB 00 2E         [ 1]  178 	add a,rx1_head 
      00091A 5F               [ 1]  179 	clrw x  
      00091B 97               [ 1]  180 	ld xl,a 
      00091C F6               [ 1]  181 	ld a,(x)
      00091D 88               [ 1]  182 	push a
      00091E C6 00 2E         [ 1]  183 	ld a,rx1_head 
      000921 4C               [ 1]  184 	inc a 
      000922 A4 07            [ 1]  185 	and a,#RX_QUEUE_SIZE-1
      000924 C7 00 2E         [ 1]  186 	ld rx1_head,a 
      000927 84               [ 1]  187 	pop a  
      000928 85               [ 2]  188 	popw x
      000929 81               [ 4]  189 	ret 
                                    190 
                                    191 ;-----------------------------
                                    192 ;  constants replacing 
                                    193 ;  ANSI sequence received 
                                    194 ;  from terminal.
                                    195 ;  These are the ANSI sequences
                                    196 ;  accepted by function readln
                                    197 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                           000080   198     ARROW_LEFT=128
                           000081   199     ARROW_RIGHT=129
                           000082   200     HOME=130
                           000083   201     KEY_END=131
                           000084   202     SUP=132 
                                    203 
      00092A 43 81 44 80 48 82 46   204 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                    205 
                                    206 ;--------------------------------
                                    207 ; receive ANSI ESC 
                                    208 ; sequence and convert it
                                    209 ; to a single character code 
                                    210 ; in range {128..255}
                                    211 ; This is called after receiving 
                                    212 ; ESC character. 
                                    213 ; ignored sequence return 0 
                                    214 ; output:
                                    215 ;   A    converted character 
                                    216 ;-------------------------------
      000936                        217 get_escape:
      000936 CD 09 0F         [ 4]  218     call getc 
      000939 A1 5B            [ 1]  219     cp a,#'[ ; this character is expected after ESC 
      00093B 27 02            [ 1]  220     jreq 1$
      00093D 4F               [ 1]  221     clr a
      00093E 81               [ 4]  222     ret
      00093F CD 09 0F         [ 4]  223 1$: call getc 
      000942 AE 09 2A         [ 2]  224     ldw x,#convert_table
      000945                        225 2$:
      000945 F1               [ 1]  226     cp a,(x)
      000946 27 08            [ 1]  227     jreq 4$
      000948 1C 00 02         [ 2]  228     addw x,#2
      00094B 7D               [ 1]  229     tnz (x)
      00094C 26 F7            [ 1]  230     jrne 2$
      00094E 4F               [ 1]  231     clr a
      00094F 81               [ 4]  232     ret 
      000950 5C               [ 1]  233 4$: incw x 
      000951 F6               [ 1]  234     ld a,(x)
      000952 A1 84            [ 1]  235     cp a,#SUP
      000954 26 05            [ 1]  236     jrne 5$
      000956 88               [ 1]  237     push a 
      000957 CD 09 0F         [ 4]  238     call getc
      00095A 84               [ 1]  239     pop a 
      00095B                        240 5$:
      00095B 81               [ 4]  241     ret 
                                    242 
                                    243 
                                    244 ;-----------------------------
                                    245 ; send an ASCIZ string to UART1 
                                    246 ; input: 
                                    247 ;   x 		char * 
                                    248 ; output:
                                    249 ;   none 
                                    250 ;-------------------------------
      00095C                        251 puts::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00095C F6               [ 1]  252     ld a,(x)
      00095D 27 06            [ 1]  253 	jreq 1$
      00095F CD 08 FF         [ 4]  254 	call putc 
      000962 5C               [ 1]  255 	incw x 
      000963 20 F7            [ 2]  256 	jra puts 
      000965 81               [ 4]  257 1$:	ret 
                                    258 
                                    259 
                                    260 ;---------------------------
                                    261 ; delete character at left 
                                    262 ; of cursor on terminal 
                                    263 ; input:
                                    264 ;   none 
                                    265 ; output:
                                    266 ;	none 
                                    267 ;---------------------------
      000966                        268 bksp:
      000966 A6 08            [ 1]  269 	ld a,#BS 
      000968 CD 08 FF         [ 4]  270 	call putc 
      00096B A6 20            [ 1]  271 	ld a,#SPACE 
      00096D CD 08 FF         [ 4]  272 	call putc 
      000970 A6 08            [ 1]  273 	ld a,#BS 
      000972 CD 08 FF         [ 4]  274 	call putc 
      000975 81               [ 4]  275 	ret 
                                    276 ;---------------------------
                                    277 ; delete n character left of cursor 
                                    278 ; at terminal.
                                    279 ; input: 
                                    280 ;   A   number of characters to delete.
                                    281 ; output:
                                    282 ;    none 
                                    283 ;--------------------------	
      000976                        284 delete_nchar:
      000976 88               [ 1]  285 	push a 
      000977 0D 01            [ 1]  286 0$:	tnz (1,sp)
      000979 27 07            [ 1]  287 	jreq 1$
      00097B CD 09 66         [ 4]  288 	call bksp 
      00097E 0A 01            [ 1]  289 	dec (1,sp)
      000980 20 F5            [ 2]  290 	jra 0$
      000982 84               [ 1]  291 1$:	pop a 
      000983 81               [ 4]  292 	ret
                                    293 
                                    294 ;--------------------------
                                    295 ; send ANSI escape sequence
                                    296 ; ANSI: ESC[
                                    297 ; note: ESC is ASCII 27
                                    298 ;       [   is ASCII 91  
                                    299 ;-------------------------- 
      000984                        300 send_escape:
      000984 A6 1B            [ 1]  301 	ld a,#ESC 
      000986 CD 08 FF         [ 4]  302 	call putc 
      000989 A6 5B            [ 1]  303 	ld a,#'[
      00098B CD 08 FF         [ 4]  304 	call putc 
      00098E 81               [ 4]  305 	ret 
                                    306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                    307 ;---------------------
                                    308 ;send ANSI parameter value
                                    309 ; ANSI parameter values are 
                                    310 ; sent as ASCII charater 
                                    311 ; not as binary number.
                                    312 ; this routine 
                                    313 ; convert binary number to 
                                    314 ; ASCII string and send it.
                                    315 ; expected range {0..99}
                                    316 ; input: 
                                    317 ; 	A {0..99} 
                                    318 ; output:
                                    319 ;   none 
                                    320 ;---------------------
      00098F                        321 send_parameter:
      00098F 89               [ 2]  322 	pushw x 
      000990 5F               [ 1]  323 	clrw x 
      000991 97               [ 1]  324 	ld xl,a 
      000992 A6 0A            [ 1]  325 	ld a,#10 
      000994 62               [ 2]  326 	div x,a 
      000995 95               [ 1]  327 	ld xh,a 
      000996 9F               [ 1]  328 	ld a,xl
      000997 4D               [ 1]  329     tnz a 
      000998 27 0B            [ 1]  330     jreq 2$
      00099A A1 09            [ 1]  331 	cp a,#9 
      00099C 23 02            [ 2]  332 	jrule 1$
      00099E A6 09            [ 1]  333 	ld a,#9
      0009A0                        334 1$:
      0009A0 AB 30            [ 1]  335 	add a,#'0 
      0009A2 CD 08 FF         [ 4]  336 	call putc
      0009A5 9E               [ 1]  337 2$:	ld a,xh 
      0009A6 AB 30            [ 1]  338 	add a,#'0
      0009A8 CD 08 FF         [ 4]  339 	call putc 
      0009AB 85               [ 2]  340 	popw x 
      0009AC 81               [ 4]  341 	ret 
                                    342 
                                    343 ;--------------------------
                                    344 ; move cursor left n character
                                    345 ; ANSI: ESC[PnD 
                                    346 ; 'Pn' est a numerical parameter
                                    347 ; specifying number of characters 
                                    348 ; displacement.
                                    349 ; input:
                                    350 ;   A     character count
                                    351 ; output:
                                    352 ;   none
                                    353 ;--------------------------
      0009AD                        354 move_left:
      0009AD 88               [ 1]  355 	push a 
      0009AE CD 09 84         [ 4]  356 	call send_escape
      0009B1 84               [ 1]  357     pop a
      0009B2 CD 09 8F         [ 4]  358 	call send_parameter 
      0009B5 A6 44            [ 1]  359 	ld a,#'D 
      0009B7 CD 08 FF         [ 4]  360 	call putc 
      0009BA 81               [ 4]  361 	ret	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    362 
                                    363 
                                    364 ;--------------------------
                                    365 ; move cursor right n character 
                                    366 ; ANSI: ESC[PnC 
                                    367 ; input:
                                    368 ;   A     character count
                                    369 ; output:
                                    370 ;   none
                                    371 ;--------------------------
      0009BB                        372 move_right:
      0009BB 88               [ 1]  373 	push a 
      0009BC CD 09 84         [ 4]  374 	call send_escape
      0009BF 84               [ 1]  375     pop a
      0009C0 CD 09 8F         [ 4]  376 	call send_parameter 
      0009C3 A6 43            [ 1]  377 	ld a,#'C 
      0009C5 CD 08 FF         [ 4]  378 	call putc 
      0009C8 81               [ 4]  379 	ret 
                                    380 
                                    381 
                                    382 ;--------------------------
                                    383 ; print n spaces on terminal
                                    384 ; input:
                                    385 ;  X 		number of spaces 
                                    386 ; output:
                                    387 ;	none 
                                    388 ;---------------------------
      0009C9                        389 spaces::
      0009C9 A6 20            [ 1]  390 	ld a,#SPACE 
      0009CB 5D               [ 2]  391 1$:	tnzw x
      0009CC 27 06            [ 1]  392 	jreq 9$
      0009CE CD 08 FF         [ 4]  393 	call putc 
      0009D1 5A               [ 2]  394 	decw x
      0009D2 20 F7            [ 2]  395 	jra 1$
      0009D4                        396 9$: 
      0009D4 81               [ 4]  397 	ret 
                                    398 
                                    399 ;--------------------------
                                    400 ; insert character in text 
                                    401 ; line 
                                    402 ; input:
                                    403 ;   A       character to insert 
                                    404 ;   xl      line length
                                    405 ;   xh      insert position 
                                    406 ;   Y       line pointer 
                                    407 ; output:
                                    408 ;   tib     updated 
                                    409 ;   Y       updated  
                                    410 ;-------------------------
                           000001   411 	IPOS=1
                           000002   412 	KCHAR=2 
                           000003   413     LLEN=3 
                           000003   414 	VSIZE=3 
      0009D5                        415 insert_char: 
      0009D5                        416 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0009D5 52 03            [ 2]    1     sub sp,#VSIZE 
      0009D7 6B 02            [ 1]  417     ld (KCHAR,sp),a 
      0009D9 9E               [ 1]  418     ld a,xh 
      0009DA 6B 01            [ 1]  419 	ld (IPOS,sp),a
      0009DC 9F               [ 1]  420     ld a,xl 
      0009DD 6B 03            [ 1]  421     ld (LLEN,sp),a  
      0009DF 93               [ 1]  422     ldw x,y
      0009E0 5C               [ 1]  423     incw x 
      0009E1 7B 03            [ 1]  424     ld a,(LLEN,sp)
      0009E3 10 01            [ 1]  425     sub a,(IPOS,sp)
      0009E5 4C               [ 1]  426     inc a 
      0009E6 C7 00 0E         [ 1]  427     ld acc8,a 
      0009E9 72 5F 00 0D      [ 1]  428     clr acc16
      0009ED CD 13 B2         [ 4]  429     call move
      0009F0 90 AE 16 90      [ 2]  430     ldw y,#tib 
      0009F4 7B 01            [ 1]  431     ld a,(IPOS,sp)
      0009F6 C7 00 0E         [ 1]  432     ld acc8,a 
      0009F9 72 B9 00 0D      [ 2]  433     addw y,acc16 
      0009FD 7B 02            [ 1]  434     ld a,(KCHAR,sp)
      0009FF 90 F7            [ 1]  435     ld (y),a
      000A01 90 5C            [ 1]  436     incw y  
      000A03 7B 01            [ 1]  437     ld a,(IPOS,sp)
      000A05 CD 09 AD         [ 4]  438     call move_left
      000A08 AE 16 90         [ 2]  439     ldw x,#tib 
      000A0B CD 09 5C         [ 4]  440     call puts 
      000A0E 7B 03            [ 1]  441     ld a,(LLEN,sp)
      000A10 10 01            [ 1]  442     sub a,(IPOS,sp) 
      000A12 CD 09 AD         [ 4]  443     call move_left 
      000A15                        444 	_drop VSIZE 
      000A15 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A17 81               [ 4]  445 	ret 
                                    446 
                                    447 
                                    448 ;--------------------------
                                    449 ; delete character under cursor
                                    450 ; input:
                                    451 ;   A       line length   
                                    452 ;   xl      delete position
                                    453 ;   Y       line pointer 
                                    454 ;-------------------------
                           000001   455 	CPOS=1
                           000002   456 	LLEN=2
                           000002   457 	VSIZE=2
      000A18                        458 delete_under:
      000A18                        459 	_vars VSIZE 
      000A18 52 02            [ 2]    1     sub sp,#VSIZE 
      000A1A 6B 02            [ 1]  460     ld (LLEN,sp),a 
      000A1C 9F               [ 1]  461     ld a,xl 
      000A1D 6B 01            [ 1]  462     ld (CPOS,sp),a 
      000A1F 93               [ 1]  463     ldw x,y ; move destination
      000A20 90 5C            [ 1]  464     incw y  ; move source 
      000A22 7B 02            [ 1]  465     ld a,(LLEN,sp)
      000A24 10 01            [ 1]  466     sub a,(CPOS,sp)
      000A26 4C               [ 1]  467     inc a ; move including zero at end.
      000A27 C7 00 0E         [ 1]  468     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      000A2A 72 5F 00 0D      [ 1]  469     clr acc16 
      000A2E CD 13 B2         [ 4]  470 	call move 
      000A31 90 AE 16 90      [ 2]  471     ldw y,#tib 
      000A35 7B 01            [ 1]  472     ld a,(CPOS,sp)
      000A37 C7 00 0E         [ 1]  473     ld acc8,a 
      000A3A 72 B9 00 0D      [ 2]  474     addw y,acc16 
      000A3E 93               [ 1]  475     ldw x,y 
      000A3F CD 09 5C         [ 4]  476     call puts 
      000A42 A6 20            [ 1]  477     ld a,#SPACE  
      000A44 CD 08 FF         [ 4]  478     call putc
      000A47 7B 02            [ 1]  479     ld a,(LLEN,sp)
      000A49 10 01            [ 1]  480     sub a,(CPOS,sp)
      000A4B CD 09 AD         [ 4]  481     call move_left 
      000A4E 0A 02            [ 1]  482     dec (LLEN,sp)
      000A50                        483 	_drop VSIZE 
      000A50 5B 02            [ 2]    1     addw sp,#VSIZE 
      000A52 81               [ 4]  484 	ret 
                                    485 
                                    486 ;-----------------------------
                                    487 ; send ANSI sequence to delete
                                    488 ; whole line. Cursor position
                                    489 ; is not updated.
                                    490 ; ANSI: ESC[2K
                                    491 ; input:
                                    492 ;   none
                                    493 ; output:
                                    494 ;   none 
                                    495 ;-----------------------------
      000A53                        496 delete_line:
      000A53 CD 09 84         [ 4]  497     call send_escape
      000A56 A6 32            [ 1]  498 	ld a,#'2
      000A58 CD 08 FF         [ 4]  499 	call putc 
      000A5B A6 4B            [ 1]  500 	ld a,#'K 
      000A5D CD 08 FF         [ 4]  501 	call putc 
      000A60 81               [ 4]  502 	ret 
                                    503 
                                    504 
                                    505 
                                    506 ;------------------------------------
                                    507 ; read a line of text from terminal
                                    508 ;  control keys: 
                                    509 ;    BS   efface caractère à gauche 
                                    510 ;    ln+CTRL_E  edit ligne# 'ln' line # 
                                    511 ;    CTRL_R  edit previous line.
                                    512 ;    CTRL_D  delete line  
                                    513 ;    HOME  go to start of line  
                                    514 ;    KEY_END  go to end of line 
                                    515 ;    ARROW_LEFT  move cursor left 
                                    516 ;    ARROW_RIGHT  move cursor right 
                                    517 ;    CTRL_O  toggle between insert/overwrite
                                    518 ; input:
                                    519 ;	none
                                    520 ; local variable on stack:
                                    521 ;	LL  line length
                                    522 ;   RXCHAR last received character 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    523 ; output:
                                    524 ;   text in tib  buffer
                                    525 ;   count  line length 
                                    526 ;------------------------------------
                                    527 	; local variables
                           000001   528 	LL_HB=1  ; line length high byte 
                           000001   529 	RXCHAR = 1 ; last char received
                           000002   530 	LL = 2  ; accepted line length
                           000003   531 	CPOS=3  ; cursor position 
                           000004   532 	OVRWR=4 ; overwrite flag 
                           000005   533 	YTEMP=5 ; 
                           000006   534 	VSIZE=6 
      000A61                        535 readln::
      000A61 90 89            [ 2]  536 	pushw y 
      000A63                        537 	_vars VSIZE 
      000A63 52 06            [ 2]    1     sub sp,#VSIZE 
      000A65 5F               [ 1]  538 	clrw x 
      000A66 1F 02            [ 2]  539 	ldw (LL,sp),x 
      000A68 1F 03            [ 2]  540 	ldw (CPOS,sp),x 
      000A6A 03 04            [ 1]  541 	cpl (OVRWR,sp) ; default to overwrite mode 
      000A6C 90 AE 16 90      [ 2]  542  	ldw y,#tib ; terminal input buffer
      000A70                        543 readln_loop:
      000A70 CD 09 0F         [ 4]  544 	call getc
      000A73 6B 01            [ 1]  545 	ld (RXCHAR,sp),a
      000A75 A1 1B            [ 1]  546     cp a,#ESC 
      000A77 26 05            [ 1]  547     jrne 0$
      000A79 CD 09 36         [ 4]  548     call get_escape 
      000A7C 6B 01            [ 1]  549     ld (RXCHAR,sp),a 
      000A7E A1 0D            [ 1]  550 0$:	cp a,#CR
      000A80 26 03            [ 1]  551 	jrne 1$
      000A82 CC 0C 09         [ 2]  552 	jp readln_quit
      000A85 A1 0A            [ 1]  553 1$:	cp a,#LF 
      000A87 26 03            [ 1]  554 	jrne 2$ 
      000A89 CC 0C 09         [ 2]  555 	jp readln_quit
      000A8C                        556 2$:
      000A8C A1 08            [ 1]  557 	cp a,#BS
      000A8E 26 12            [ 1]  558 	jrne 3$
                                    559 ; delete left 
      000A90 0D 03            [ 1]  560     tnz (CPOS,sp)
      000A92 27 DC            [ 1]  561     jreq readln_loop 
      000A94 A6 01            [ 1]  562     ld a,#1 
      000A96 CD 09 AD         [ 4]  563     call move_left
      000A99 0A 03            [ 1]  564     dec (CPOS,sp)
      000A9B 90 5A            [ 2]  565     decw y 
      000A9D 7B 03            [ 1]  566     ld a,(CPOS,sp) 
      000A9F CC 0B B5         [ 2]  567     jp 12$
      000AA2                        568 3$:
      000AA2 A1 04            [ 1]  569 	cp a,#CTRL_D
      000AA4 26 1A            [ 1]  570 	jrne 4$
                                    571 ;delete line 
      000AA6 CD 0A 53         [ 4]  572 	call delete_line 
      000AA9 7B 03            [ 1]  573     ld a,(CPOS,sp)
      000AAB 4C               [ 1]  574     inc a 
      000AAC CD 09 AD         [ 4]  575     call move_left 
      000AAF A6 3E            [ 1]  576 	ld a,#'> 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      000AB1 CD 08 FF         [ 4]  577 	call putc 
      000AB4 90 AE 16 90      [ 2]  578 	ldw y,#tib
      000AB8 90 7F            [ 1]  579 	clr (y)
      000ABA 0F 02            [ 1]  580 	clr (LL,sp)
      000ABC 0F 03            [ 1]  581 	clr (CPOS,sp)
      000ABE 20 B0            [ 2]  582 	jra readln_loop
      000AC0                        583 4$:
      000AC0 A1 12            [ 1]  584 	cp a,#CTRL_R 
      000AC2 26 1E            [ 1]  585 	jrne 5$
                                    586 ;repeat line 
      000AC4 0D 02            [ 1]  587 	tnz (LL,sp)
      000AC6 26 A8            [ 1]  588 	jrne readln_loop
      000AC8 90 AE 16 90      [ 2]  589 	ldw y,#tib 
      000ACC 93               [ 1]  590 	ldw x,y
      000ACD CD 13 86         [ 4]  591 	call strlen
      000AD0 4D               [ 1]  592 	tnz a  
      000AD1 27 9D            [ 1]  593 	jreq readln_loop
      000AD3 6B 02            [ 1]  594 	ld (LL,sp),a 
      000AD5 6B 03            [ 1]  595     ld (CPOS,sp),a
      000AD7 93               [ 1]  596 	ldw x,y  
      000AD8 CD 09 5C         [ 4]  597 	call puts
      000ADB 0F 01            [ 1]  598 	clr (LL_HB,sp)
      000ADD 72 F9 01         [ 2]  599 	addw y,(LL_HB,sp)
      000AE0 20 8E            [ 2]  600 	jra readln_loop 
      000AE2                        601 5$:
      000AE2 A1 05            [ 1]  602 	cp a,#CTRL_E 
      000AE4 26 4D            [ 1]  603 	jrne 6$
                                    604 ;edit line number 
      000AE6 AE 16 90         [ 2]  605 	ldw x,#tib 
      000AE9 17 05            [ 2]  606 	ldw (YTEMP,sp),y  
      000AEB 16 07            [ 2]  607 	ldw y,(VSIZE+1,sp) ; restore xstack pointer 
      000AED CD 18 D2         [ 4]  608 	call atoi24
      000AF0 16 05            [ 2]  609 	ldw y,(YTEMP,sp) ; restore tib pointer 
      000AF2 4F               [ 1]  610 	clr a
      000AF3 CD 0C 45         [ 4]  611 	call search_lineno
      000AF6 5D               [ 2]  612 	tnzw x 
      000AF7 26 0B            [ 1]  613 	jrne 51$
      000AF9 0F 02            [ 1]  614 	clr (LL,sp)
      000AFB 90 AE 16 90      [ 2]  615 	ldw y,#tib
      000AFF 90 7F            [ 1]  616     clr (y) 	
      000B01 CC 0C 09         [ 2]  617 	jp readln_quit  
      000B04                        618 51$:
      000B04 CF 00 04         [ 2]  619 	ldw basicptr,x
      000B07 E6 02            [ 1]  620 	ld a,(2,x)
      000B09 C7 00 03         [ 1]  621 	ld count,a 
      000B0C 90 AE 16 90      [ 2]  622 	ldw y,#tib 
      000B10 CD 11 A2         [ 4]  623 	call decompile 
      000B13 0F 01            [ 1]  624 	clr (LL_HB,sp)
      000B15 A6 0D            [ 1]  625 	ld a,#CR 
      000B17 CD 08 FF         [ 4]  626 	call putc 
      000B1A A6 3E            [ 1]  627 	ld a,#'>
      000B1C CD 08 FF         [ 4]  628 	call putc
      000B1F AE 16 90         [ 2]  629     ldw x,#tib  
      000B22 CD 13 86         [ 4]  630 	call strlen 
      000B25 6B 02            [ 1]  631 	ld (LL,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      000B27 CD 09 5C         [ 4]  632 	call puts 
      000B2A 90 93            [ 1]  633 	ldw y,x
      000B2C 7B 02            [ 1]  634     ld a,(LL,sp)
      000B2E 6B 03            [ 1]  635     ld (CPOS,sp),a  
      000B30 CC 0A 70         [ 2]  636 	jp readln_loop
      000B33                        637 6$:
      000B33 A1 81            [ 1]  638 	cp a,#ARROW_RIGHT
      000B35 26 15            [ 1]  639    	jrne 7$ 
                                    640 ; right arrow
      000B37 7B 03            [ 1]  641 	ld a,(CPOS,sp)
      000B39 11 02            [ 1]  642     cp a,(LL,sp)
      000B3B 2B 03            [ 1]  643     jrmi 61$
      000B3D CC 0A 70         [ 2]  644     jp readln_loop 
      000B40                        645 61$:
      000B40 A6 01            [ 1]  646     ld a,#1 
      000B42 CD 09 BB         [ 4]  647 	call move_right 
      000B45 0C 03            [ 1]  648 	inc (CPOS,sp)
      000B47 90 5C            [ 1]  649     incw y 
      000B49 CC 0A 70         [ 2]  650     jp readln_loop 
      000B4C A1 80            [ 1]  651 7$: cp a,#ARROW_LEFT  
      000B4E 26 13            [ 1]  652 	jrne 8$
                                    653 ; left arrow 
      000B50 0D 03            [ 1]  654 	tnz (CPOS,sp)
      000B52 26 03            [ 1]  655 	jrne 71$
      000B54 CC 0A 70         [ 2]  656 	jp readln_loop
      000B57                        657 71$:
      000B57 A6 01            [ 1]  658     ld a,#1 
      000B59 CD 09 AD         [ 4]  659 	call move_left 
      000B5C 0A 03            [ 1]  660 	dec (CPOS,sp)
      000B5E 90 5A            [ 2]  661     decw y 
      000B60 CC 0A 70         [ 2]  662 	jp readln_loop 
      000B63 A1 82            [ 1]  663 8$: cp a,#HOME  
      000B65 26 0E            [ 1]  664 	jrne 9$
                                    665 ; HOME 
      000B67 7B 03            [ 1]  666     ld a,(CPOS,sp)
      000B69 CD 09 AD         [ 4]  667     call move_left 
      000B6C 0F 03            [ 1]  668 	clr (CPOS,sp)
      000B6E 90 AE 16 90      [ 2]  669     ldw y,#tib 
      000B72 CC 0A 70         [ 2]  670 	jp readln_loop  
      000B75 A1 83            [ 1]  671 9$: cp a,#KEY_END  
      000B77 26 26            [ 1]  672 	jrne 10$
                                    673 ; KEY_END 
      000B79 7B 03            [ 1]  674 	ld a,(CPOS,sp)
      000B7B 11 02            [ 1]  675 	cp a,(LL,sp)
      000B7D 26 03            [ 1]  676 	jrne 91$
      000B7F CC 0A 70         [ 2]  677 	jp readln_loop 
      000B82                        678 91$:
      000B82 7B 02            [ 1]  679 	ld a,(LL,sp)
      000B84 10 03            [ 1]  680 	sub a,(CPOS,sp)
      000B86 CD 09 BB         [ 4]  681 	call move_right 
      000B89 7B 02            [ 1]  682 	ld a,(LL,sp)
      000B8B 6B 03            [ 1]  683 	ld (CPOS,sp),a
      000B8D 90 AE 16 90      [ 2]  684     ldw y,#tib
      000B91 72 5F 00 0D      [ 1]  685     clr acc16 
      000B95 C7 00 0E         [ 1]  686     ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      000B98 72 B9 00 0D      [ 2]  687     addw y,acc16  
      000B9C CC 0A 70         [ 2]  688 	jp readln_loop 
      000B9F A1 0F            [ 1]  689 10$: cp a,#CTRL_O
      000BA1 26 08            [ 1]  690 	jrne 11$ 
                                    691 ; toggle between insert/overwrite
      000BA3 03 04            [ 1]  692 	cpl (OVRWR,sp)
      000BA5 CD 25 A0         [ 4]  693 	call beep_1khz
      000BA8 CC 0A 70         [ 2]  694 	jp readln_loop 
      000BAB A1 84            [ 1]  695 11$: cp a,#SUP 
      000BAD 26 11            [ 1]  696     jrne final_test 
                                    697 ; del character under cursor 
      000BAF 7B 03            [ 1]  698     ld a,(CPOS,sp)
      000BB1 11 02            [ 1]  699     cp a,(LL,sp)
      000BB3 2A 08            [ 1]  700     jrpl 13$
      000BB5                        701 12$:
      000BB5 97               [ 1]  702     ld xl,a    ; cursor position 
      000BB6 7B 02            [ 1]  703     ld a,(LL,sp)  ; line length
      000BB8 CD 0A 18         [ 4]  704     call delete_under
      000BBB 0A 02            [ 1]  705     dec (LLEN,sp)
      000BBD                        706 13$:
      000BBD CC 0A 70         [ 2]  707     jp readln_loop 
      000BC0                        708 final_test:
      000BC0 A1 20            [ 1]  709 	cp a,#SPACE
      000BC2 2A 03            [ 1]  710 	jrpl accept_char
      000BC4 CC 0A 70         [ 2]  711 	jp readln_loop
      000BC7                        712 accept_char:
      000BC7 A6 4F            [ 1]  713 	ld a,#TIB_SIZE-1
      000BC9 11 02            [ 1]  714 	cp a, (LL,sp)
      000BCB 2A 03            [ 1]  715 	jrpl 1$
      000BCD CC 0A 70         [ 2]  716 	jp readln_loop
      000BD0 0D 04            [ 1]  717 1$:	tnz (OVRWR,sp)
      000BD2 26 18            [ 1]  718 	jrne overwrite
                                    719 ; insert mode 
      000BD4 7B 03            [ 1]  720     ld a,(CPOS,sp)
      000BD6 11 02            [ 1]  721     cp a,(LL,sp)
      000BD8 27 12            [ 1]  722     jreq overwrite
      000BDA 7B 02            [ 1]  723     ld a,(LL,sp)
      000BDC 97               [ 1]  724     ld xl,a 
      000BDD 7B 03            [ 1]  725     ld a,(CPOS,sp)
      000BDF 95               [ 1]  726     ld xh,a
      000BE0 7B 01            [ 1]  727     ld a,(RXCHAR,sp)
      000BE2 CD 09 D5         [ 4]  728     call insert_char
      000BE5 0C 02            [ 1]  729     inc (LLEN,sp)
      000BE7 0C 03            [ 1]  730     inc (CPOS,sp)	
      000BE9 CC 0A 70         [ 2]  731     jp readln_loop 
      000BEC                        732 overwrite:
      000BEC 7B 01            [ 1]  733 	ld a,(RXCHAR,sp)
      000BEE 90 F7            [ 1]  734 	ld (y),a
      000BF0 90 5C            [ 1]  735     incw y
      000BF2 CD 08 FF         [ 4]  736     call putc 
      000BF5 7B 03            [ 1]  737 	ld a,(CPOS,sp)
      000BF7 11 02            [ 1]  738 	cp a,(LL,sp)
      000BF9 2B 09            [ 1]  739 	jrmi 1$
      000BFB 90 7F            [ 1]  740 	clr (y)
      000BFD 0C 02            [ 1]  741 	inc (LL,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      000BFF 0C 03            [ 1]  742     inc (CPOS,sp)
      000C01 CC 0A 70         [ 2]  743 	jp readln_loop 
      000C04                        744 1$:	
      000C04 0C 03            [ 1]  745 	inc (CPOS,sp)
      000C06 CC 0A 70         [ 2]  746 	jp readln_loop 
      000C09                        747 readln_quit:
      000C09 90 AE 16 90      [ 2]  748 	ldw y,#tib
      000C0D 0F 01            [ 1]  749     clr (LL_HB,sp) 
      000C0F 72 F9 01         [ 2]  750     addw y,(LL_HB,sp)
      000C12 90 7F            [ 1]  751     clr (y)
      000C14 7B 02            [ 1]  752 	ld a,(LL,sp)
      000C16 C7 00 03         [ 1]  753 	ld count,a 
      000C19 A6 0D            [ 1]  754 	ld a,#CR
      000C1B CD 08 FF         [ 4]  755 	call putc
      000C1E                        756 	_drop VSIZE 
      000C1E 5B 06            [ 2]    1     addw sp,#VSIZE 
      000C20 90 85            [ 2]  757 	popw y 
      000C22 81               [ 4]  758 	ret
                                    759 
                                    760 ;------------------------------
                                    761 ; print byte  in hexadecimal 
                                    762 ; on console
                                    763 ; input:
                                    764 ;    A		byte to print
                                    765 ;------------------------------
      000C23                        766 print_hex::
      000C23 88               [ 1]  767 	push a 
      000C24 4E               [ 1]  768 	swap a 
      000C25 CD 0C 3A         [ 4]  769 	call to_hex_char 
      000C28 CD 08 FF         [ 4]  770 	call putc 
      000C2B 7B 01            [ 1]  771     ld a,(1,sp) 
      000C2D CD 0C 3A         [ 4]  772 	call to_hex_char
      000C30 CD 08 FF         [ 4]  773 	call putc
      000C33 A6 20            [ 1]  774 	ld a,#SPACE 
      000C35 CD 08 FF         [ 4]  775 	call putc 
      000C38 84               [ 1]  776 	pop a 
      000C39 81               [ 4]  777 	ret 
                                    778 
                                    779 ;----------------------------------
                                    780 ; convert to hexadecimal digit 
                                    781 ; input:
                                    782 ;   A       digit to convert 
                                    783 ; output:
                                    784 ;   A       hexdecimal character 
                                    785 ;----------------------------------
      000C3A                        786 to_hex_char::
      000C3A A4 0F            [ 1]  787 	and a,#15 
      000C3C A1 09            [ 1]  788 	cp a,#9 
      000C3E 23 02            [ 2]  789 	jrule 1$ 
      000C40 AB 07            [ 1]  790 	add a,#7
      000C42 AB 30            [ 1]  791 1$: add a,#'0 
      000C44 81               [ 4]  792 	ret 
                                    793 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                     26     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                     27 
                           000000    28 .if SEPARATE
                                     29 	.include "inc/nucleo_8s208.inc"
                                     30 	.include "inc/stm8s208.inc"
                                     31 	.include "inc/ascii.inc"
                                     32 	.include "inc/gen_macros.inc" 
                                     33 	.include "tbi_macros.inc" 
                                     34 .endif 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      000C45                         51 search_lineno::
      000C45                         52 	_vars VSIZE
      000C45 52 02            [ 2]    1     sub sp,#VSIZE 
      000C47 0F 01            [ 1]   53 	clr (LL,sp)
      000C49 90 CE 00 1B      [ 2]   54 	ldw y,txtbgn
      000C4D 4D               [ 1]   55 	tnz a 
      000C4E 27 04            [ 1]   56 	jreq search_ln_loop
      000C50 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      000C54                         58 search_ln_loop:
      000C54 90 C3 00 1D      [ 2]   59 	cpw y,txtend 
      000C58 2A 10            [ 1]   60 	jrpl 8$
      000C5A 90 F3            [ 1]   61 	cpw x,(y)
      000C5C 27 0E            [ 1]   62 	jreq 9$
      000C5E 2B 0A            [ 1]   63 	jrmi 8$ 
      000C60 90 E6 02         [ 1]   64 	ld a,(2,y)
      000C63 6B 02            [ 1]   65 	ld (LB,sp),a 
      000C65 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      000C68 20 EA            [ 2]   67 	jra search_ln_loop 
      000C6A                         68 8$: 
      000C6A 5F               [ 1]   69 	clrw x 	
      000C6B 51               [ 1]   70 	exgw x,y 
      000C6C                         71 9$: _drop VSIZE
      000C6C 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C6E 51               [ 1]   72 	exgw x,y   
      000C6F 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      000C70                         83 del_line: 
      000C70                         84 	_vars VSIZE 
      000C70 52 04            [ 2]    1     sub sp,#VSIZE 
      000C72 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      000C74 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      000C76 0F 01            [ 1]   87 	clr (LLEN,sp)
      000C78 90 93            [ 1]   88 	ldw y,x  
      000C7A 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      000C7D 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      000C7F 90 CE 00 1D      [ 2]   91 	ldw y,txtend 
      000C83 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      000C86 90 CF 00 0D      [ 2]   93 	ldw acc16,y 
      000C8A 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      000C8C CD 13 B2         [ 4]   95 	call move
      000C8F 90 CE 00 1D      [ 2]   96 	ldw y,txtend 
      000C93 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      000C96 90 CF 00 1D      [ 2]   98 	ldw txtend,y  
      000C9A                         99 	_drop VSIZE     
      000C9A 5B 04            [ 2]    1     addw sp,#VSIZE 
      000C9C 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      000C9D                        115 create_gap:
      000C9D                        116 	_vars VSIZE
      000C9D 52 06            [ 2]    1     sub sp,#VSIZE 
      000C9F 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      000CA1 17 05            [ 2]  118 	ldw (LEN,sp),y 
      000CA3 90 CF 00 0D      [ 2]  119 	ldw acc16,y 
      000CA7 90 93            [ 1]  120 	ldw y,x ; SRC
      000CA9 72 BB 00 0D      [ 2]  121 	addw x,acc16  
      000CAD 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      000CAF CE 00 1D         [ 2]  124 	ldw x,txtend 
      000CB2 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      000CB5 CF 00 0D         [ 2]  126 	ldw acc16,x ; size to move
      000CB8 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      000CBA CD 13 B2         [ 4]  128 	call move
      000CBD CE 00 1D         [ 2]  129 	ldw x,txtend
      000CC0 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      000CC3 CF 00 1D         [ 2]  131 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      000CC6                        132 9$:	_drop VSIZE 
      000CC6 5B 06            [ 2]    1     addw sp,#VSIZE 
      000CC8 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      000CC9                        150 insert_line:
      000CC9                        151 	_vars VSIZE 
      000CC9 52 08            [ 2]    1     sub sp,#VSIZE 
      000CCB CE 00 1D         [ 2]  152 	ldw x,txtend  
      000CCE C3 00 1B         [ 2]  153 	cpw x,txtbgn 
      000CD1 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      000CD3 AE 00 02         [ 2]  156 	ldw x,#2 
      000CD6 72 D6 00 19      [ 4]  157 	ld a,([ptr16],x)
      000CDA A1 03            [ 1]  158 	cp a,#3
      000CDC 27 5A            [ 1]  159 	jreq insert_ln_exit
      000CDE 5F               [ 1]  160 	clrw x 
      000CDF 97               [ 1]  161 	ld xl,a
      000CE0 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      000CE2 CE 00 1B         [ 2]  163 	ldw x,txtbgn
      000CE5 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      000CE7 CE 00 1D         [ 2]  165 	ldw x,txtend 
      000CEA 20 38            [ 2]  166 	jra 4$
      000CEC 72 CE 00 19      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      000CF0 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      000CF2 AE 00 02         [ 2]  170 	ldw x,#2 
      000CF5 72 D6 00 19      [ 4]  171 	ld a,([ptr16],x)
      000CF9 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      000CFA 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      000CFC 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      000CFE 4F               [ 1]  177 	clr a 
      000CFF CD 0C 45         [ 4]  178 	call search_lineno 
      000D02 5D               [ 2]  179 	tnzw x 
      000D03 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      000D05 17 01            [ 2]  183 	ldw (DEST,sp),y 
      000D07 20 05            [ 2]  184 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      000D09 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      000D0B CD 0C 70         [ 4]  188 	call del_line
      000D0E                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      000D0E A6 03            [ 1]  192 	ld a,#3
      000D10 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      000D12 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      000D14 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      000D16 C3 00 1D         [ 2]  198 	cpw x,txtend 
      000D19 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      000D1B 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      000D1D 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      000D1F CD 0C 9D         [ 4]  204 	call create_gap
      000D22 20 06            [ 2]  205 	jra 5$
      000D24                        206 4$: 
      000D24 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      000D27 CF 00 1D         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      000D2A 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      000D2C CF 00 0D         [ 2]  211 	ldw acc16,x 
      000D2F 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      000D33 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
      000D35 CD 13 B2         [ 4]  214 	call move 
      000D38                        215 insert_ln_exit:	
      000D38                        216 	_drop VSIZE
      000D38 5B 08            [ 2]    1     addw sp,#VSIZE 
      000D3A 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      000D3B                        233 parse_quote: 
      000D3B                        234 	_vars VSIZE 
      000D3B 52 02            [ 2]    1     sub sp,#VSIZE 
      000D3D 4F               [ 1]  235 	clr a
      000D3E 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      000D40                        237 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      000D40 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      000D43 27 24            [ 1]  239 	jreq 6$
      000D45 72 5C 00 01      [ 1]  240 	inc in 
      000D49 6B 02            [ 1]  241 	ld (CURR,sp),a 
      000D4B A6 5C            [ 1]  242 	ld a,#'\
      000D4D 11 01            [ 1]  243 	cp a, (PREV,sp)
      000D4F 26 0A            [ 1]  244 	jrne 3$
      000D51 0F 01            [ 1]  245 	clr (PREV,sp)
      000D53 7B 02            [ 1]  246 	ld a,(CURR,sp)
      000D55 AD 1C            [ 4]  247 	callr convert_escape
      000D57 F7               [ 1]  248 	ld (x),a 
      000D58 5C               [ 1]  249 	incw x 
      000D59 20 E5            [ 2]  250 	jra 2$
      000D5B                        251 3$:
      000D5B 7B 02            [ 1]  252 	ld a,(CURR,sp)
      000D5D A1 5C            [ 1]  253 	cp a,#'\'
      000D5F 27 DD            [ 1]  254 	jreq 1$
      000D61 A1 22            [ 1]  255 	cp a,#'"
      000D63 27 04            [ 1]  256 	jreq 6$ 
      000D65 F7               [ 1]  257 	ld (x),a 
      000D66 5C               [ 1]  258 	incw x 
      000D67 20 D7            [ 2]  259 	jra 2$
      000D69                        260 6$:
      000D69 7F               [ 1]  261 	clr (x)
      000D6A 5C               [ 1]  262 	incw x 
      000D6B 90 93            [ 1]  263 	ldw y,x 
      000D6D 5F               [ 1]  264 	clrw x 
      000D6E A6 02            [ 1]  265 	ld a,#TK_QSTR  
      000D70                        266 	_drop VSIZE
      000D70 5B 02            [ 2]    1     addw sp,#VSIZE 
      000D72 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      000D73                        278 convert_escape:
      000D73 89               [ 2]  279 	pushw x 
      000D74 AE 0D 88         [ 2]  280 	ldw x,#escaped 
      000D77 F1               [ 1]  281 1$:	cp a,(x)
      000D78 27 06            [ 1]  282 	jreq 2$
      000D7A 7D               [ 1]  283 	tnz (x)
      000D7B 27 09            [ 1]  284 	jreq 3$
      000D7D 5C               [ 1]  285 	incw x 
      000D7E 20 F7            [ 2]  286 	jra 1$
      000D80 1D 0D 88         [ 2]  287 2$: subw x,#escaped 
      000D83 9F               [ 1]  288 	ld a,xl 
      000D84 AB 07            [ 1]  289 	add a,#7
      000D86 85               [ 2]  290 3$:	popw x 
      000D87 81               [ 4]  291 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    292 
      000D88 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer bits 15..0 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      000D90                        310 parse_integer: ; { -- n }
      000D90 89               [ 2]  311 	pushw x 	
      000D91 4B 00            [ 1]  312 	push #0 ; TCHAR
      000D93 4B 0A            [ 1]  313 	push #10 ; BASE=10
      000D95 A1 24            [ 1]  314 	cp a,#'$
      000D97 26 04            [ 1]  315 	jrne 2$ 
      000D99                        316     _drop #1
      000D99 5B 01            [ 2]    1     addw sp,##1 
      000D9B 4B 10            [ 1]  317 	push #16  ; BASE=16
      000D9D F7               [ 1]  318 2$:	ld (x),a 
      000D9E 5C               [ 1]  319 	incw x 
      000D9F 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      000DA2 72 5C 00 01      [ 1]  321 	inc in 
      000DA6 CD 18 C6         [ 4]  322 	call to_upper 
      000DA9 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      000DAB CD 0E 2D         [ 4]  324 	call is_digit 
      000DAE 25 ED            [ 1]  325 	jrc 2$
      000DB0 A6 10            [ 1]  326 	ld a,#16 
      000DB2 11 01            [ 1]  327 	cp a,(BASE,sp)
      000DB4 26 0A            [ 1]  328 	jrne 3$ 
      000DB6 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      000DB8 A1 41            [ 1]  330 	cp a,#'A 
      000DBA 2B 04            [ 1]  331 	jrmi 3$ 
      000DBC A1 47            [ 1]  332 	cp a,#'G 
      000DBE 2B DD            [ 1]  333 	jrmi 2$ 
      000DC0 72 5A 00 01      [ 1]  334 3$: dec in 	
      000DC4 7F               [ 1]  335     clr (x)
      000DC5 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      000DC7 CD 18 D2         [ 4]  337 	call atoi24
      000DCA 16 03            [ 2]  338 	ldw y,(XSAVE,sp)
      000DCC C6 00 0C         [ 1]  339 	ld a,acc24 
      000DCF 90 F7            [ 1]  340 	ld (y),a 
      000DD1 90 5C            [ 1]  341 	incw y  
      000DD3 CE 00 0D         [ 2]  342 	ldw x,acc16 
      000DD6 90 FF            [ 2]  343 	ldw (y),x 
      000DD8 72 A9 00 02      [ 2]  344 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      000DDC A6 84            [ 1]  345 	ld a,#TK_INTGR
      000DDE                        346 	_drop VSIZE  
      000DDE 5B 04            [ 2]    1     addw sp,#VSIZE 
      000DE0 81               [ 4]  347 	ret 	
                                    348 
                                    349 ;-------------------------
                                    350 ; binary integer parser
                                    351 ; build integer in acc24  
                                    352 ; input:
                                    353 ;   X 		point to output buffer  
                                    354 ;   Y 		point to tib 
                                    355 ;   A 	    '&' 
                                    356 ; output:  
                                    357 ;   buffer  TK_INTGR integer  
                                    358 ;   X 		int16 
                                    359 ;   A 		TK_INTGR
                                    360 ;   acc24    int24 
                                    361 ;-------------------------
                           000001   362 	BINARY=1 ; 24 bits integer 
                           000003   363 	VSIZE=3
      000DE1                        364 parse_binary: ; { -- n }
      000DE1 4B 00            [ 1]  365 	push #0
      000DE3 4B 00            [ 1]  366 	push #0
      000DE5 4B 00            [ 1]  367 	push #0
      000DE7                        368 2$:	
      000DE7 91 D6 00         [ 4]  369 	ld a,([in.w],y)
      000DEA 72 5C 00 01      [ 1]  370 	inc in 
      000DEE A1 30            [ 1]  371 	cp a,#'0 
      000DF0 27 06            [ 1]  372 	jreq 3$
      000DF2 A1 31            [ 1]  373 	cp a,#'1 
      000DF4 27 02            [ 1]  374 	jreq 3$ 
      000DF6 20 0B            [ 2]  375 	jra bin_exit 
      000DF8 A0 30            [ 1]  376 3$: sub a,#'0 
      000DFA 46               [ 1]  377 	rrc a
      000DFB 09 03            [ 1]  378 	rlc (BINARY+2,sp) 
      000DFD 09 02            [ 1]  379 	rlc (BINARY+1,sp)
      000DFF 09 01            [ 1]  380 	rlc (BINARY,sp) 
      000E01 20 E4            [ 2]  381 	jra 2$  
      000E03                        382 bin_exit:
      000E03 72 5A 00 01      [ 1]  383 	dec in 
      000E07 90 93            [ 1]  384 	ldw y,x
      000E09 7B 01            [ 1]  385 	ld a,(BINARY,sp)
      000E0B 90 F7            [ 1]  386 	ld (y),a 
      000E0D 90 5C            [ 1]  387 	incw y 
      000E0F 1E 02            [ 2]  388 	ldw x,(BINARY+1,sp)
      000E11 90 FF            [ 2]  389 	ldw (y),x 
      000E13 72 A9 00 02      [ 2]  390 	addw y,#2  
      000E17 A6 84            [ 1]  391 	ld a,#TK_INTGR 	
      000E19                        392 	_drop VSIZE 
      000E19 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E1B 81               [ 4]  393 	ret
                                    394 
                                    395 ;-------------------------------------
                                    396 ; check if A is a letter 
                                    397 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    398 ;   A 			character to test 
                                    399 ; output:
                                    400 ;   C flag      1 true, 0 false 
                                    401 ;-------------------------------------
      000E1C                        402 is_alpha::
      000E1C A1 41            [ 1]  403 	cp a,#'A 
      000E1E 8C               [ 1]  404 	ccf 
      000E1F 24 0B            [ 1]  405 	jrnc 9$ 
      000E21 A1 5B            [ 1]  406 	cp a,#'Z+1 
      000E23 25 07            [ 1]  407 	jrc 9$ 
      000E25 A1 61            [ 1]  408 	cp a,#'a 
      000E27 8C               [ 1]  409 	ccf 
      000E28 24 02            [ 1]  410 	jrnc 9$
      000E2A A1 7B            [ 1]  411 	cp a,#'z+1
      000E2C 81               [ 4]  412 9$: ret 	
                                    413 
                                    414 ;------------------------------------
                                    415 ; check if character in {'0'..'9'}
                                    416 ; input:
                                    417 ;    A  character to test
                                    418 ; output:
                                    419 ;    Carry  0 not digit | 1 digit
                                    420 ;------------------------------------
      000E2D                        421 is_digit::
      000E2D A1 30            [ 1]  422 	cp a,#'0
      000E2F 25 03            [ 1]  423 	jrc 1$
      000E31 A1 3A            [ 1]  424     cp a,#'9+1
      000E33 8C               [ 1]  425 	ccf 
      000E34 8C               [ 1]  426 1$:	ccf 
      000E35 81               [ 4]  427     ret
                                    428 
                                    429 ;-------------------------------------
                                    430 ; return true if character in  A 
                                    431 ; is letter or digit.
                                    432 ; input:
                                    433 ;   A     ASCII character 
                                    434 ; output:
                                    435 ;   A     no change 
                                    436 ;   Carry    0 false| 1 true 
                                    437 ;--------------------------------------
      000E36                        438 is_alnum::
      000E36 CD 0E 2D         [ 4]  439 	call is_digit
      000E39 25 03            [ 1]  440 	jrc 1$ 
      000E3B CD 0E 1C         [ 4]  441 	call is_alpha
      000E3E 81               [ 4]  442 1$:	ret 
                                    443 
                                    444 ;-----------------------------
                                    445 ; check if character in A 
                                    446 ; is a valid symbol character 
                                    447 ; valid: Upper case LETTER,DIGIT,'_' 
                                    448 ; input:
                                    449 ;    A   character to validate
                                    450 ; output:
                                    451 ;    Carry   set if valid 
                                    452 ;----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      000E3F                        453 is_symbol_char: 
      000E3F A1 5F            [ 1]  454 	cp a,#'_ 
      000E41 26 03            [ 1]  455 	jrne 1$
      000E43 99               [ 1]  456 	scf 
      000E44 20 03            [ 2]  457 	jra 9$ 
      000E46 CD 0E 36         [ 4]  458 1$:	call is_alnum 
      000E49 81               [ 4]  459 9$: ret 
                                    460 
                                    461 ;---------------------------
                                    462 ;  when lexical unit begin 
                                    463 ;  with a letter a symbol 
                                    464 ;  is expected.
                                    465 ; input:
                                    466 ;   A   first character of symbol 
                                    467 ;	X   point to output buffer 
                                    468 ;   Y   point to input text 
                                    469 ; output:
                                    470 ;	X   after symbol 
                                    471 ;   Y   point after lexical unit 
                                    472 ;---------------------------
      000E4A                        473 parse_symbol:
      000E4A 5C               [ 1]  474 	incw x ; keep space for TK_ID 
      000E4B                        475 symb_loop: 
                                    476 ; symbol are converted to upper case 
      000E4B CD 18 C6         [ 4]  477 	call to_upper  
      000E4E F7               [ 1]  478 	ld (x), a 
      000E4F 5C               [ 1]  479 	incw x
      000E50 91 D6 00         [ 4]  480 	ld a,([in.w],y)
      000E53 72 5C 00 01      [ 1]  481 	inc in 
      000E57 CD 0E 3F         [ 4]  482 	call is_symbol_char 
      000E5A 25 EF            [ 1]  483 	jrc symb_loop 
      000E5C 7F               [ 1]  484 	clr (x)
      000E5D 72 5A 00 01      [ 1]  485 	dec in  
      000E61 81               [ 4]  486 	ret 
                                    487 
                                    488 ;---------------------------
                                    489 ;  token begin with a letter,
                                    490 ;  is keyword or variable. 	
                                    491 ; input:
                                    492 ;   X 		point to pad 
                                    493 ;   Y 		point to text
                                    494 ;   A 	    first letter  
                                    495 ; output:
                                    496 ;   X		exec_addr|var_addr 
                                    497 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC|TK_AND|TK_OR|TK_XOR   
                                    498 ;   pad 	keyword|var_name  
                                    499 ;--------------------------  
                           000001   500 	XFIRST=1
                           000002   501 	VSIZE=2
      000E62                        502 parse_keyword: 
      000E62 89               [ 2]  503 	pushw x ; preserve *symbol 
      000E63 CD 0E 4A         [ 4]  504 	call parse_symbol
      000E66 1E 01            [ 2]  505 	ldw x,(XFIRST,sp) 
      000E68 E6 02            [ 1]  506 	ld a,(2,x)
      000E6A 26 0F            [ 1]  507 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    508 ; one letter variable name 
      000E6C E6 01            [ 1]  509 	ld a,(1,x) 
      000E6E A0 41            [ 1]  510 	sub a,#'A 
      000E70 AE 00 03         [ 2]  511 	ldw x,#3 
      000E73 42               [ 4]  512 	mul x,a 
      000E74 1C 00 34         [ 2]  513 	addw x,#vars 
      000E77 A6 85            [ 1]  514 	ld a,#TK_VAR 
      000E79 20 36            [ 2]  515 	jra 4$ 
      000E7B                        516 2$: ; check for keyword, otherwise syntax error.
      000E7B                        517 	_ldx_dict kword_dict ; dictionary entry point
      000E7B AE 35 77         [ 2]    1     ldw x,#kword_dict+2
      000E7E 16 01            [ 2]  518 	ldw y,(XFIRST,sp) ; name to search for
      000E80 90 5C            [ 1]  519 	incw y 
      000E82 CD 19 53         [ 4]  520 	call search_dict
      000E85 4D               [ 1]  521 	tnz a
      000E86 26 29            [ 1]  522 	jrne 4$
                                    523 ; not in dictionary
                                    524 ; compile it as TK_LABEL
      000E88 16 01            [ 2]  525 	ldw y,(XFIRST,sp)
      000E8A A6 03            [ 1]  526 	ld a,#TK_LABEL 
      000E8C 90 F7            [ 1]  527 	ld (y),a 
      000E8E 90 5C            [ 1]  528 	incw y
      000E90 93               [ 1]  529 	ldw x,y 
      000E91 CD 13 86         [ 4]  530 	call strlen
      000E94 A1 0F            [ 1]  531 	cp a,#NAME_MAX_LEN 
      000E96 23 02            [ 2]  532 	jrule 22$ 
      000E98 A6 0F            [ 1]  533 	ld a,#NAME_MAX_LEN 
      000E9A                        534 22$:	
      000E9A 88               [ 1]  535 	push a 
      000E9B                        536 24$:
      000E9B 90 F6            [ 1]  537     ld a,(y)
      000E9D 27 09            [ 1]  538 	jreq 3$
      000E9F 90 5C            [ 1]  539 	incw y
      000EA1 0A 01            [ 1]  540 	dec (1,sp) 
      000EA3 26 F6            [ 1]  541 	jrne 24$
      000EA5 4F               [ 1]  542 	clr a 
      000EA6 90 F7            [ 1]  543 	ld (y),a 
      000EA8 90 5C            [ 1]  544 3$: incw y 
      000EAA                        545 	_drop 1 
      000EAA 5B 01            [ 2]    1     addw sp,#1 
      000EAC A6 03            [ 1]  546 	ld a,#TK_LABEL 
      000EAE 5F               [ 1]  547 	clrw x 
      000EAF 20 1B            [ 2]  548 	jra 5$ 
      000EB1                        549 4$:	
      000EB1 16 01            [ 2]  550 	ldw y,(XFIRST,sp)
      000EB3 A1 87            [ 1]  551 	cp a,#TK_NOT 
      000EB5 2B 06            [ 1]  552 	jrmi 41$
      000EB7 90 F7            [ 1]  553 	ld (y),a 
      000EB9 90 5C            [ 1]  554 	incw y 
      000EBB 20 0F            [ 2]  555 	jra 5$ 
      000EBD                        556 41$:	
      000EBD A3 1C CC         [ 2]  557 	cpw x,#let  
      000EC0 27 0A            [ 1]  558 	jreq 5$  ; don't compile LET command 
      000EC2 90 F7            [ 1]  559 	ld (y),a 
      000EC4 90 5C            [ 1]  560 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      000EC6 90 FF            [ 2]  561 	ldw (y),x
      000EC8 72 A9 00 02      [ 2]  562 	addw y,#2  
      000ECC                        563 5$:	_drop VSIZE 
      000ECC 5B 02            [ 2]    1     addw sp,#VSIZE 
      000ECE 81               [ 4]  564 	ret  	
                                    565 
                                    566 ;------------------------------------
                                    567 ; skip character c in text starting from 'in'
                                    568 ; input:
                                    569 ;	 y 		point to text buffer
                                    570 ;    a 		character to skip
                                    571 ; output:  
                                    572 ;	'in' ajusted to new position
                                    573 ;------------------------------------
                           000001   574 	C = 1 ; local var
      000ECF                        575 skip:
      000ECF 88               [ 1]  576 	push a
      000ED0 91 D6 00         [ 4]  577 1$:	ld a,([in.w],y)
      000ED3 27 0A            [ 1]  578 	jreq 2$
      000ED5 11 01            [ 1]  579 	cp a,(C,sp)
      000ED7 26 06            [ 1]  580 	jrne 2$
      000ED9 72 5C 00 01      [ 1]  581 	inc in
      000EDD 20 F1            [ 2]  582 	jra 1$
      000EDF                        583 2$: _drop 1 
      000EDF 5B 01            [ 2]    1     addw sp,#1 
      000EE1 81               [ 4]  584 	ret
                                    585 	
                                    586 
                                    587 ;------------------------------------
                                    588 ; scan text for next token
                                    589 ; input: 
                                    590 ;	X 		pointer to buffer where 
                                    591 ;	        token id and value are copied 
                                    592 ; use:
                                    593 ;	Y   pointer to text in tib 
                                    594 ; output:
                                    595 ;   A       token attribute 
                                    596 ;   X 		token value
                                    597 ;   Y       updated position in output buffer   
                                    598 ;------------------------------------
                                    599 	; use to check special character 
                                    600 	.macro _case c t  
                                    601 	ld a,#c 
                                    602 	cp a,(TCHAR,sp) 
                                    603 	jrne t
                                    604 	.endm 
                                    605 
                           000001   606 	TCHAR=1
                           000002   607 	ATTRIB=2
                           000002   608 	VSIZE=2
      000EE2                        609 get_token:: 
      000EE2                        610 	_vars VSIZE
      000EE2 52 02            [ 2]    1     sub sp,#VSIZE 
                                    611 ;	ld a,in 
                                    612 ;	sub a,count
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    613 ;   jrmi 0$
                                    614 ;	clr a 
                                    615 ;	ret 
      000EE4                        616 0$: 
      000EE4 90 AE 16 90      [ 2]  617 	ldw y,#tib    	
      000EE8 A6 20            [ 1]  618 	ld a,#SPACE
      000EEA CD 0E CF         [ 4]  619 	call skip
      000EED 55 00 01 00 02   [ 1]  620 	mov in.saved,in 
      000EF2 91 D6 00         [ 4]  621 	ld a,([in.w],y)
      000EF5 26 05            [ 1]  622 	jrne 1$
      000EF7 90 93            [ 1]  623 	ldw y,x 
      000EF9 CC 10 93         [ 2]  624 	jp token_exit ; end of line 
      000EFC 72 5C 00 01      [ 1]  625 1$:	inc in 
      000F00 CD 18 C6         [ 4]  626 	call to_upper 
      000F03 6B 01            [ 1]  627 	ld (TCHAR,sp),a 
                                    628 ; check for quoted string
      000F05                        629 str_tst:  	
      000F05                        630 	_case '"' nbr_tst
      000F05 A6 22            [ 1]    1 	ld a,#'"' 
      000F07 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F09 26 0A            [ 1]    3 	jrne nbr_tst
      000F0B A6 02            [ 1]  631 	ld a,#TK_QSTR
      000F0D F7               [ 1]  632 	ld (x),a 
      000F0E 5C               [ 1]  633 	incw x 
      000F0F CD 0D 3B         [ 4]  634 	call parse_quote
      000F12 CC 10 93         [ 2]  635 	jp token_exit
      000F15                        636 nbr_tst:
                                    637 ; check for hexadecimal number 
      000F15 A6 24            [ 1]  638 	ld a,#'$'
      000F17 11 01            [ 1]  639 	cp a,(TCHAR,sp) 
      000F19 27 17            [ 1]  640 	jreq 1$
                                    641 ;check for binary number 
      000F1B A6 26            [ 1]  642 	ld a,#'&
      000F1D 11 01            [ 1]  643 	cp a,(TCHAR,sp)
      000F1F 26 0A            [ 1]  644 	jrne 0$
      000F21 A6 84            [ 1]  645 	ld a,#TK_INTGR
      000F23 F7               [ 1]  646 	ld (x),a 
      000F24 5C               [ 1]  647 	incw x 
      000F25 CD 0D E1         [ 4]  648 	call parse_binary ; expect binary integer 
      000F28 CC 10 93         [ 2]  649 	jp token_exit 
                                    650 ; check for decimal number 	
      000F2B 7B 01            [ 1]  651 0$:	ld a,(TCHAR,sp)
      000F2D CD 0E 2D         [ 4]  652 	call is_digit
      000F30 24 0C            [ 1]  653 	jrnc 3$
      000F32 A6 84            [ 1]  654 1$:	ld a,#TK_INTGR 
      000F34 F7               [ 1]  655 	ld (x),a 
      000F35 5C               [ 1]  656 	incw x 
      000F36 7B 01            [ 1]  657 	ld a,(TCHAR,sp)
      000F38 CD 0D 90         [ 4]  658 	call parse_integer 
      000F3B CC 10 93         [ 2]  659 	jp token_exit 
      000F3E                        660 3$: 
      000F3E                        661 	_case '(' bkslsh_tst 
      000F3E A6 28            [ 1]    1 	ld a,#'(' 
      000F40 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F42 26 05            [ 1]    3 	jrne bkslsh_tst
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      000F44 A6 06            [ 1]  662 	ld a,#TK_LPAREN
      000F46 CC 10 8F         [ 2]  663 	jp token_char   	
      000F49                        664 bkslsh_tst: ; character token 
      000F49                        665 	_case '\',rparnt_tst
      000F49 A6 5C            [ 1]    1 	ld a,#'\' 
      000F4B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F4D 26 16            [ 1]    3 	jrne rparnt_tst
      000F4F A6 04            [ 1]  666 	ld a,#TK_CHAR 
      000F51 F7               [ 1]  667 	ld (x),a 
      000F52 5C               [ 1]  668 	incw x 
      000F53 91 D6 00         [ 4]  669 	ld a,([in.w],y)
      000F56 F7               [ 1]  670 	ld (x),a 
      000F57 5C               [ 1]  671 	incw x
      000F58 90 93            [ 1]  672 	ldw y,x 	 
      000F5A 72 5C 00 01      [ 1]  673 	inc in  
      000F5E 5F               [ 1]  674 	clrw x 
      000F5F 97               [ 1]  675 	ld xl,a 
      000F60 A6 04            [ 1]  676 	ld a,#TK_CHAR 
      000F62 CC 10 93         [ 2]  677 	jp token_exit 
      000F65                        678 rparnt_tst:		
      000F65                        679 	_case ')' colon_tst 
      000F65 A6 29            [ 1]    1 	ld a,#')' 
      000F67 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F69 26 05            [ 1]    3 	jrne colon_tst
      000F6B A6 07            [ 1]  680 	ld a,#TK_RPAREN 
      000F6D CC 10 8F         [ 2]  681 	jp token_char
      000F70                        682 colon_tst:
      000F70                        683 	_case ':' comma_tst 
      000F70 A6 3A            [ 1]    1 	ld a,#':' 
      000F72 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F74 26 05            [ 1]    3 	jrne comma_tst
      000F76 A6 0A            [ 1]  684 	ld a,#TK_COLON 
      000F78 CC 10 8F         [ 2]  685 	jp token_char  
      000F7B                        686 comma_tst:
      000F7B                        687 	_case COMMA sharp_tst 
      000F7B A6 2C            [ 1]    1 	ld a,#COMMA 
      000F7D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F7F 26 05            [ 1]    3 	jrne sharp_tst
      000F81 A6 08            [ 1]  688 	ld a,#TK_COMMA
      000F83 CC 10 8F         [ 2]  689 	jp token_char
      000F86                        690 sharp_tst:
      000F86                        691 	_case SHARP dash_tst 
      000F86 A6 23            [ 1]    1 	ld a,#SHARP 
      000F88 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F8A 26 05            [ 1]    3 	jrne dash_tst
      000F8C A6 09            [ 1]  692 	ld a,#TK_SHARP
      000F8E CC 10 8F         [ 2]  693 	jp token_char  	 	 
      000F91                        694 dash_tst: 	
      000F91                        695 	_case '-' at_tst 
      000F91 A6 2D            [ 1]    1 	ld a,#'-' 
      000F93 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000F95 26 05            [ 1]    3 	jrne at_tst
      000F97 A6 11            [ 1]  696 	ld a,#TK_MINUS  
      000F99 CC 10 8F         [ 2]  697 	jp token_char 
      000F9C                        698 at_tst:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      000F9C                        699 	_case '@' qmark_tst 
      000F9C A6 40            [ 1]    1 	ld a,#'@' 
      000F9E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FA0 26 05            [ 1]    3 	jrne qmark_tst
      000FA2 A6 05            [ 1]  700 	ld a,#TK_ARRAY 
      000FA4 CC 10 8F         [ 2]  701 	jp token_char
      000FA7                        702 qmark_tst:
      000FA7                        703 	_case '?' tick_tst 
      000FA7 A6 3F            [ 1]    1 	ld a,#'?' 
      000FA9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FAB 26 12            [ 1]    3 	jrne tick_tst
      000FAD A6 80            [ 1]  704 	ld a,#TK_CMD  
      000FAF F7               [ 1]  705 	ld (x),a 
      000FB0 5C               [ 1]  706 	incw x 
      000FB1 90 93            [ 1]  707 	ldw y,x 
      000FB3 AE 1F B9         [ 2]  708 	ldw x,#print
      000FB6 90 FF            [ 2]  709 	ldw (y),x 
      000FB8 72 A9 00 02      [ 2]  710 	addw y,#2
      000FBC CC 10 93         [ 2]  711 	jp token_exit
      000FBF                        712 tick_tst: ; comment 
      000FBF                        713 	_case TICK plus_tst 
      000FBF A6 27            [ 1]    1 	ld a,#TICK 
      000FC1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FC3 26 2B            [ 1]    3 	jrne plus_tst
      000FC5 A6 80            [ 1]  714 	ld a,#TK_CMD
      000FC7 F7               [ 1]  715 	ld (x),a 
      000FC8 5C               [ 1]  716 	incw x
      000FC9 90 AE 21 01      [ 2]  717 	ldw y,#remark 
      000FCD FF               [ 2]  718 	ldw (x),y 
      000FCE 1C 00 02         [ 2]  719 	addw x,#2  
      000FD1                        720 copy_comment:
      000FD1 90 AE 16 90      [ 2]  721 	ldw y,#tib 
      000FD5 72 B9 00 00      [ 2]  722 	addw y,in.w
      000FD9 90 89            [ 2]  723 	pushw y 
      000FDB CD 13 A2         [ 4]  724 	call strcpy
      000FDE 72 F2 01         [ 2]  725 	subw y,(1,sp)
      000FE1 90 5C            [ 1]  726 	incw y ; strlen+1 
      000FE3 17 01            [ 2]  727 	ldw (1,sp),y 
      000FE5 72 FB 01         [ 2]  728 	addw x,(1,sp) 
      000FE8                        729 	_drop 2 
      000FE8 5B 02            [ 2]    1     addw sp,#2 
      000FEA 4F               [ 1]  730 	clr a 
      000FEB 90 93            [ 1]  731 	ldw y,x 
      000FED CC 10 93         [ 2]  732 	jp token_exit 
      000FF0                        733 plus_tst:
      000FF0                        734 	_case '+' star_tst 
      000FF0 A6 2B            [ 1]    1 	ld a,#'+' 
      000FF2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000FF4 26 05            [ 1]    3 	jrne star_tst
      000FF6 A6 10            [ 1]  735 	ld a,#TK_PLUS  
      000FF8 CC 10 8F         [ 2]  736 	jp token_char 
      000FFB                        737 star_tst:
      000FFB                        738 	_case '*' slash_tst 
      000FFB A6 2A            [ 1]    1 	ld a,#'*' 
      000FFD 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      000FFF 26 05            [ 1]    3 	jrne slash_tst
      001001 A6 20            [ 1]  739 	ld a,#TK_MULT 
      001003 CC 10 8F         [ 2]  740 	jp token_char 
      001006                        741 slash_tst: 
      001006                        742 	_case '/' prcnt_tst 
      001006 A6 2F            [ 1]    1 	ld a,#'/' 
      001008 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00100A 26 05            [ 1]    3 	jrne prcnt_tst
      00100C A6 21            [ 1]  743 	ld a,#TK_DIV 
      00100E CC 10 8F         [ 2]  744 	jp token_char 
      001011                        745 prcnt_tst:
      001011                        746 	_case '%' eql_tst 
      001011 A6 25            [ 1]    1 	ld a,#'%' 
      001013 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001015 26 05            [ 1]    3 	jrne eql_tst
      001017 A6 22            [ 1]  747 	ld a,#TK_MOD
      001019 CC 10 8F         [ 2]  748 	jp token_char  
                                    749 ; 1 or 2 character tokens 	
      00101C                        750 eql_tst:
      00101C                        751 	_case '=' gt_tst 		
      00101C A6 3D            [ 1]    1 	ld a,#'=' 
      00101E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001020 26 05            [ 1]    3 	jrne gt_tst
      001022 A6 32            [ 1]  752 	ld a,#TK_EQUAL
      001024 CC 10 8F         [ 2]  753 	jp token_char 
      001027                        754 gt_tst:
      001027                        755 	_case '>' lt_tst 
      001027 A6 3E            [ 1]    1 	ld a,#'>' 
      001029 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00102B 26 23            [ 1]    3 	jrne lt_tst
      00102D A6 31            [ 1]  756 	ld a,#TK_GT 
      00102F 6B 02            [ 1]  757 	ld (ATTRIB,sp),a 
      001031 91 D6 00         [ 4]  758 	ld a,([in.w],y)
      001034 72 5C 00 01      [ 1]  759 	inc in 
      001038 A1 3D            [ 1]  760 	cp a,#'=
      00103A 26 04            [ 1]  761 	jrne 1$
      00103C A6 33            [ 1]  762 	ld a,#TK_GE 
      00103E 20 4F            [ 2]  763 	jra token_char  
      001040 A1 3C            [ 1]  764 1$: cp a,#'<
      001042 26 04            [ 1]  765 	jrne 2$
      001044 A6 35            [ 1]  766 	ld a,#TK_NE 
      001046 20 47            [ 2]  767 	jra token_char 
      001048 72 5A 00 01      [ 1]  768 2$: dec in
      00104C 7B 02            [ 1]  769 	ld a,(ATTRIB,sp)
      00104E 20 3F            [ 2]  770 	jra token_char 	 
      001050                        771 lt_tst:
      001050                        772 	_case '<' other
      001050 A6 3C            [ 1]    1 	ld a,#'<' 
      001052 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      001054 26 23            [ 1]    3 	jrne other
      001056 A6 34            [ 1]  773 	ld a,#TK_LT 
      001058 6B 02            [ 1]  774 	ld (ATTRIB,sp),a 
      00105A 91 D6 00         [ 4]  775 	ld a,([in.w],y)
      00105D 72 5C 00 01      [ 1]  776 	inc in 
      001061 A1 3D            [ 1]  777 	cp a,#'=
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001063 26 04            [ 1]  778 	jrne 1$
      001065 A6 36            [ 1]  779 	ld a,#TK_LE 
      001067 20 26            [ 2]  780 	jra token_char 
      001069 A1 3E            [ 1]  781 1$: cp a,#'>
      00106B 26 04            [ 1]  782 	jrne 2$
      00106D A6 35            [ 1]  783 	ld a,#TK_NE 
      00106F 20 1E            [ 2]  784 	jra token_char 
      001071 72 5A 00 01      [ 1]  785 2$: dec in 
      001075 7B 02            [ 1]  786 	ld a,(ATTRIB,sp)
      001077 20 16            [ 2]  787 	jra token_char 	
      001079                        788 other: ; not a special character 	 
      001079 7B 01            [ 1]  789 	ld a,(TCHAR,sp)
      00107B CD 0E 1C         [ 4]  790 	call is_alpha 
      00107E 25 03            [ 1]  791 	jrc 30$ 
      001080 CC 16 84         [ 2]  792 	jp syntax_error 
      001083                        793 30$: 
      001083 CD 0E 62         [ 4]  794 	call parse_keyword
      001086 A3 21 01         [ 2]  795 	cpw x,#remark 
      001089 26 08            [ 1]  796 	jrne token_exit 
      00108B 93               [ 1]  797 	ldw x,y 
      00108C CC 0F D1         [ 2]  798 	jp copy_comment 
      00108F                        799 token_char:
      00108F F7               [ 1]  800 	ld (x),a 
      001090 5C               [ 1]  801 	incw x
      001091 90 93            [ 1]  802 	ldw y,x 
      001093                        803 token_exit:
      001093                        804 	_drop VSIZE 
      001093 5B 02            [ 2]    1     addw sp,#VSIZE 
      001095 81               [ 4]  805 	ret
                                    806 
                                    807 
                                    808 ;-----------------------------------
                                    809 ; create token list fromm text line 
                                    810 ; save this list in pad buffer 
                                    811 ;  compiled line format: 
                                    812 ;    line_no  2 bytes {0...32767}
                                    813 ;    count    1 byte  
                                    814 ;    tokens   variable length 
                                    815 ;   
                                    816 ; input:
                                    817 ;   none
                                    818 ; modified variables:
                                    819 ;   basicptr     token list buffer address 
                                    820 ;   in.w  		 3|count, i.e. index in buffer
                                    821 ;   count        length of line | 0  
                                    822 ;-----------------------------------
                           000001   823 	XSAVE=1
                           000002   824 	VSIZE=2
      001096                        825 compile::
      001096 90 89            [ 2]  826 	pushw y 
      001098                        827 	_vars VSIZE 
      001098 52 02            [ 2]    1     sub sp,#VSIZE 
      00109A 55 00 1B 00 04   [ 1]  828 	mov basicptr,txtbgn
      00109F 72 1A 00 22      [ 1]  829 	bset flags,#FCOMP 
      0010A3 A6 00            [ 1]  830 	ld a,#0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      0010A5 AE 00 00         [ 2]  831 	ldw x,#0
      0010A8 CF 16 E0         [ 2]  832 	ldw pad,x ; destination buffer 
      0010AB C7 16 E2         [ 1]  833 	ld pad+2,a ; count 
      0010AE AE 16 E3         [ 2]  834 	ldw x,#pad+3
      0010B1 72 5F 00 01      [ 1]  835 	clr in 
      0010B5 CD 0E E2         [ 4]  836 	call get_token
      0010B8 A1 84            [ 1]  837 	cp a,#TK_INTGR
      0010BA 26 11            [ 1]  838 	jrne 2$
      0010BC A3 00 01         [ 2]  839 	cpw x,#1 
      0010BF 2A 05            [ 1]  840 	jrpl 1$
      0010C1 A6 0A            [ 1]  841 	ld a,#ERR_BAD_VALUE
      0010C3 CC 16 86         [ 2]  842 	jp tb_error
      0010C6 CF 16 E0         [ 2]  843 1$:	ldw pad,x 
      0010C9 90 AE 16 E3      [ 2]  844 	ldw y,#pad+3 
      0010CD 90 A3 17 60      [ 2]  845 2$:	cpw y,#xstack_full 
      0010D1 25 05            [ 1]  846 	jrult 3$
      0010D3 A6 0F            [ 1]  847 	ld a,#ERR_BUF_FULL 
      0010D5 CC 16 86         [ 2]  848 	jp tb_error 
      0010D8                        849 3$:	
      0010D8 93               [ 1]  850 	ldw x,y 
      0010D9 CD 0E E2         [ 4]  851 	call get_token 
      0010DC A1 00            [ 1]  852 	cp a,#TK_NONE 
      0010DE 26 ED            [ 1]  853 	jrne 2$ 
                                    854 ; compilation completed  
      0010E0 72 A2 16 E0      [ 2]  855 	subw y,#pad
      0010E4 90 9F            [ 1]  856     ld a,yl
      0010E6 AE 16 E0         [ 2]  857 	ldw x,#pad 
      0010E9 CF 00 19         [ 2]  858 	ldw ptr16,x 
      0010EC E7 02            [ 1]  859 	ld (2,x),a 
      0010EE FE               [ 2]  860 	ldw x,(x)
      0010EF 27 09            [ 1]  861 	jreq 10$
      0010F1 CD 0C C9         [ 4]  862 	call insert_line
      0010F4 72 5F 00 03      [ 1]  863 	clr  count 
      0010F8 20 0F            [ 2]  864 	jra  11$ 
      0010FA                        865 10$: ; line# is zero 
      0010FA CE 00 19         [ 2]  866 	ldw x,ptr16  
      0010FD CF 00 04         [ 2]  867 	ldw basicptr,x 
      001100 E6 02            [ 1]  868 	ld a,(2,x)
      001102 C7 00 03         [ 1]  869 	ld count,a 
      001105 35 03 00 01      [ 1]  870 	mov in,#3 
      001109                        871 11$:
      001109                        872 	_drop VSIZE 
      001109 5B 02            [ 2]    1     addw sp,#VSIZE 
      00110B 72 1B 00 22      [ 1]  873 	bres flags,#FCOMP 
      00110F 90 85            [ 2]  874 	popw y 
      001111 81               [ 4]  875 	ret 
                                    876 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     27     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                     28 
                           000000    29 .if SEPARATE
                                     30 	.include "inc/nucleo_8s208.inc"
                                     31 	.include "inc/stm8s208.inc"
                                     32 	.include "inc/ascii.inc"
                                     33 	.include "inc/gen_macros.inc" 
                                     34 	.include "tbi_macros.inc" 
                                     35 .endif 
                                     36 
                                     37 
                                     38     .area  CODE 
                                     39 
                                     40 ;-------------------------
                                     41 ; copy command name to buffer  
                                     42 ; input:
                                     43 ;   X 	name address 
                                     44 ;   Y   destination buffer 
                                     45 ; output:
                                     46 ;   Y   point after name  
                                     47 ;--------------------------
      001112                         48 cpy_cmd_name:
      001112 5D               [ 2]   49 	tnzw x 
      001113 27 14            [ 1]   50 	jreq 10$
      001115 F6               [ 1]   51 	ld a,(x)
      001116 5C               [ 1]   52 	incw x
      001117 A4 0F            [ 1]   53 	and a,#15  
      001119 88               [ 1]   54 	push a 
      00111A 0D 01            [ 1]   55     tnz (1,sp) 
      00111C 27 0A            [ 1]   56 	jreq 9$
      00111E F6               [ 1]   57 1$:	ld a,(x)
      00111F 90 F7            [ 1]   58 	ld (y),a  
      001121 5C               [ 1]   59 	incw x
      001122 90 5C            [ 1]   60 	incw y 
      001124 0A 01            [ 1]   61 	dec (1,sp)	 
      001126 26 F6            [ 1]   62 	jrne 1$
      001128 84               [ 1]   63 9$: pop a 
      001129                         64 10$: 
      001129 81               [ 4]   65 	ret	
                                     66 
                                     67 ;--------------------------
                                     68 ; add a space after letter or 
                                     69 ; digit.
                                     70 ; input:
                                     71 ;   Y     pointer to buffer 
                                     72 ; output:
                                     73 ;   Y    moved to end 
                                     74 ;--------------------------
      00112A                         75 add_space:
      00112A 90 5A            [ 2]   76 	decw y 
      00112C 90 F6            [ 1]   77 	ld a,(y)
      00112E 90 5C            [ 1]   78 	incw y
      001130 A1 29            [ 1]   79 	cp a,#') 
      001132 27 05            [ 1]   80 	jreq 0$
      001134 CD 0E 36         [ 4]   81 	call is_alnum 
      001137 24 06            [ 1]   82 	jrnc 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001139                         83 0$: 
      001139 A6 20            [ 1]   84 	ld a,#SPACE 
      00113B 90 F7            [ 1]   85 	ld (y),a 
      00113D 90 5C            [ 1]   86 	incw y 
      00113F 81               [ 4]   87 1$: ret 
                                     88 
                                     89 ;--------------------------
                                     90 ;  align text in buffer 
                                     91 ;  to tab_width padding 
                                     92 ;  left with  SPACE 
                                     93 ; input:
                                     94 ;   X      str*
                                     95 ;   A      str_length 
                                     96 ; output:
                                     97 ;   X      ajusted
                                     98 ;--------------------------
      001140                         99 right_align::
      001140 88               [ 1]  100 	push a 
      001141 7B 01            [ 1]  101 0$: ld a,(1,sp)
      001143 C1 00 23         [ 1]  102 	cp a,tab_width 
      001146 2A 08            [ 1]  103 	jrpl 1$
      001148 A6 20            [ 1]  104 	ld a,#SPACE 
      00114A 5A               [ 2]  105 	decw x
      00114B F7               [ 1]  106 	ld (x),a  
      00114C 0C 01            [ 1]  107 	inc (1,sp)
      00114E 20 F1            [ 2]  108 	jra 0$ 
      001150 84               [ 1]  109 1$: pop a 	
      001151 81               [ 4]  110 	ret 
                                    111 
                                    112 ;--------------------------
                                    113 ; print TK_QSTR
                                    114 ; converting control character
                                    115 ; to backslash sequence
                                    116 ; input:
                                    117 ;   X        char *
                                    118 ;   Y        dest. buffer 
                                    119 ; output:
                                    120 ;   X        moved forward 
                                    121 ;   Y        moved forward 
                                    122 ;-----------------------------
      001152                        123 cpy_quote:
      001152 A6 22            [ 1]  124 	ld a,#'"
      001154 90 F7            [ 1]  125 	ld (y),a 
      001156 90 5C            [ 1]  126 	incw y 
      001158 89               [ 2]  127 	pushw x 
      001159 CD 18 01         [ 4]  128 	call skip_string 
      00115C 85               [ 2]  129 	popw x 
      00115D F6               [ 1]  130 1$:	ld a,(x)
      00115E 27 30            [ 1]  131 	jreq 9$
      001160 5C               [ 1]  132 	incw x 
      001161 A1 20            [ 1]  133 	cp a,#SPACE 
      001163 25 0E            [ 1]  134 	jrult 3$
      001165 90 F7            [ 1]  135 	ld (y),a
      001167 90 5C            [ 1]  136 	incw y 
      001169 A1 5C            [ 1]  137 	cp a,#'\ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00116B 26 F0            [ 1]  138 	jrne 1$ 
      00116D                        139 2$:
      00116D 90 F7            [ 1]  140 	ld (y),a
      00116F 90 5C            [ 1]  141 	incw y  
      001171 20 EA            [ 2]  142 	jra 1$
      001173 88               [ 1]  143 3$: push a 
      001174 A6 5C            [ 1]  144 	ld a,#'\
      001176 90 F7            [ 1]  145 	ld (y),a 
      001178 90 5C            [ 1]  146 	incw y  
      00117A 84               [ 1]  147 	pop a 
      00117B A0 07            [ 1]  148 	sub a,#7
      00117D C7 00 0E         [ 1]  149 	ld acc8,a 
      001180 72 5F 00 0D      [ 1]  150 	clr acc16
      001184 89               [ 2]  151 	pushw x
      001185 AE 0D 88         [ 2]  152 	ldw x,#escaped 
      001188 72 BB 00 0D      [ 2]  153 	addw x,acc16 
      00118C F6               [ 1]  154 	ld a,(x)
      00118D 85               [ 2]  155 	popw x
      00118E 20 DD            [ 2]  156 	jra 2$
      001190 A6 22            [ 1]  157 9$: ld a,#'"
      001192 90 F7            [ 1]  158 	ld (y),a 
      001194 90 5C            [ 1]  159 	incw y  
      001196 5C               [ 1]  160 	incw x 
      001197 81               [ 4]  161 	ret
                                    162 
                                    163 ;--------------------------
                                    164 ; return variable name 
                                    165 ; from its address.
                                    166 ; input:
                                    167 ;   X    variable address
                                    168 ; output:
                                    169 ;   A     variable letter
                                    170 ;--------------------------
      001198                        171 var_name::
      001198 1D 00 34         [ 2]  172 		subw x,#vars 
      00119B A6 03            [ 1]  173 		ld a,#3
      00119D 62               [ 2]  174 		div x,a 
      00119E 9F               [ 1]  175 		ld a,xl 
      00119F AB 41            [ 1]  176 		add a,#'A 
      0011A1 81               [ 4]  177 		ret 
                                    178 
                                    179 
                                    180 
                                    181 ;-------------------------------------
                                    182 ; decompile tokens list 
                                    183 ; to original text line 
                                    184 ; input:
                                    185 ;   [basicptr]  pointer at line 
                                    186 ;   Y           output buffer
                                    187 ; output:
                                    188 ;   A           length 
                                    189 ;   Y           after string  
                                    190 ;------------------------------------
                           000001   191 	BASE_SAV=1
                           000002   192 	WIDTH_SAV=2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           000003   193 	STR=3
                           000004   194 	VSIZE=4 
      0011A2                        195 decompile::
      0011A2                        196 	_vars VSIZE
      0011A2 52 04            [ 2]    1     sub sp,#VSIZE 
      0011A4 C6 00 0A         [ 1]  197 	ld a,base
      0011A7 6B 01            [ 1]  198 	ld (BASE_SAV,sp),a  
      0011A9 C6 00 23         [ 1]  199 	ld a,tab_width 
      0011AC 6B 02            [ 1]  200 	ld (WIDTH_SAV,sp),a 
      0011AE 17 03            [ 2]  201 	ldw (STR,sp),y   
      0011B0 72 CE 00 04      [ 5]  202 	ldw x,[basicptr] ; line number 
      0011B4 35 0A 00 0A      [ 1]  203 	mov base,#10
      0011B8 35 05 00 23      [ 1]  204 	mov tab_width,#5
      0011BC 72 5F 00 0C      [ 1]  205 	clr acc24 
      0011C0 CF 00 0D         [ 2]  206 	ldw acc16,x
      0011C3 4F               [ 1]  207 	clr a ; unsigned conversion 
      0011C4 CD 18 6D         [ 4]  208 	call itoa  
      0011C7 CD 11 40         [ 4]  209 	call right_align 
      0011CA 88               [ 1]  210 	push a 
      0011CB 90 93            [ 1]  211 1$:	ldw y,x ; source
      0011CD 1E 04            [ 2]  212 	ldw x,(STR+1,sp) ; destination
      0011CF CD 13 A2         [ 4]  213 	call strcpy 
      0011D2 90 5F            [ 1]  214 	clrw y 
      0011D4 84               [ 1]  215 	pop a 
      0011D5 90 97            [ 1]  216 	ld yl,a 
      0011D7 72 F9 03         [ 2]  217 	addw y,(STR,sp)
      0011DA A6 20            [ 1]  218 	ld a,#SPACE 
      0011DC 90 F7            [ 1]  219 	ld (y),a 
      0011DE 90 5C            [ 1]  220 	incw y 
      0011E0 72 5F 00 23      [ 1]  221 	clr tab_width
      0011E4 AE 00 03         [ 2]  222 	ldw x,#3
      0011E7 CF 00 00         [ 2]  223 	ldw in.w,x 
      0011EA                        224 decomp_loop:
      0011EA 90 89            [ 2]  225 	pushw y
      0011EC CD 17 E8         [ 4]  226 	call next_token 
      0011EF 90 85            [ 2]  227 	popw y 
      0011F1 4D               [ 1]  228 	tnz a  
      0011F2 26 03            [ 1]  229 	jrne 1$
      0011F4 CC 13 17         [ 2]  230 	jp 20$
      0011F7 2B 03            [ 1]  231 1$:	jrmi 2$
      0011F9 CC 12 88         [ 2]  232 	jp 6$
      0011FC                        233 2$: ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR|TK_AND|TK_OR|TK_XOR 
      0011FC A1 85            [ 1]  234 	cp a,#TK_VAR 
      0011FE 26 0F            [ 1]  235 	jrne 3$
                                    236 ;; TK_VAR 
      001200 CD 11 2A         [ 4]  237 	call add_space
      001203 CD 18 10         [ 4]  238 	call get_addr   
      001206 CD 11 98         [ 4]  239 	call var_name
      001209 90 F7            [ 1]  240 	ld (y),a 
      00120B 90 5C            [ 1]  241 	incw y  
      00120D 20 DB            [ 2]  242 	jra decomp_loop
      00120F                        243 3$:
      00120F A1 84            [ 1]  244 	cp a,#TK_INTGR
      001211 26 26            [ 1]  245 	jrne 4$
                                    246 ;; TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      001213 CD 18 1A         [ 4]  247 	call get_int24 
      001216 C7 00 0C         [ 1]  248 	ld acc24,a 
      001219 CF 00 0D         [ 2]  249 	ldw acc16,x 
      00121C CD 11 2A         [ 4]  250 	call add_space
      00121F 90 89            [ 2]  251 	pushw y 
      001221 A6 FF            [ 1]  252 	ld a,#255 ; signed conversion 
      001223 CD 18 6D         [ 4]  253 	call itoa  
      001226 16 01            [ 2]  254 	ldw y,(1,sp) 
      001228 88               [ 1]  255 	push a 
      001229 51               [ 1]  256 	exgw x,y 
      00122A CD 13 A2         [ 4]  257 	call strcpy 
      00122D 90 5F            [ 1]  258 	clrw y
      00122F 84               [ 1]  259 	pop a  
      001230 90 97            [ 1]  260 	ld yl,a 
      001232 72 F9 01         [ 2]  261 	addw y,(1,sp)
      001235                        262 	_drop 2 
      001235 5B 02            [ 2]    1     addw sp,#2 
      001237 20 B1            [ 2]  263 	jra decomp_loop
      001239                        264 4$: ; dictionary keyword
      001239 A1 87            [ 1]  265 	cp a,#TK_NOT 
      00123B 24 39            [ 1]  266 	jruge 50$ 
      00123D FE               [ 2]  267 	ldw x,(x)
      00123E 72 5C 00 01      [ 1]  268 	inc in 
      001242 72 5C 00 01      [ 1]  269 	inc in 
      001246 A3 21 01         [ 2]  270 	cpw x,#remark 
      001249 26 23            [ 1]  271 	jrne 5$
      00124B CE 00 04         [ 2]  272 	ldw x,basicptr 
                                    273 ; copy comment to buffer 
      00124E CD 11 2A         [ 4]  274 	call add_space
      001251 A6 27            [ 1]  275 	ld a,#''
      001253 90 F7            [ 1]  276 	ld (y),a 
      001255 90 5C            [ 1]  277 	incw y 
      001257                        278 46$:
      001257 72 D6 00 00      [ 4]  279 	ld a,([in.w],x)
      00125B 72 5C 00 01      [ 1]  280 	inc in  
      00125F 90 F7            [ 1]  281 	ld (y),a 
      001261 90 5C            [ 1]  282 	incw y 
      001263 C6 00 01         [ 1]  283 	ld a,in 
      001266 C1 00 03         [ 1]  284 	cp a,count 
      001269 2B EC            [ 1]  285 	jrmi 46$
      00126B CC 13 17         [ 2]  286 	jp 20$  
      00126E A3 1C CC         [ 2]  287 5$: cpw x,#let  
      001271 26 05            [ 1]  288 	jrne 54$
      001273 CC 11 EA         [ 2]  289 	jp decomp_loop ; down display LET
      001276                        290 50$:
      001276 5F               [ 1]  291 	clrw x 
      001277 97               [ 1]  292 	ld xl,a 
                                    293 ;	sub a,#TK_NOT  
                                    294 ;	sll a 
                                    295 ;	ld xl,a 
                                    296 ;	addw x,#NOT_IDX
      001278                        297 54$: ; insert command name 
      001278 CD 11 2A         [ 4]  298 	call add_space  
      00127B 90 89            [ 2]  299 	pushw y
      00127D CD 13 52         [ 4]  300 	call cmd_name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      001280 90 85            [ 2]  301 	popw y 
      001282 CD 11 12         [ 4]  302 	call cpy_cmd_name
      001285 CC 11 EA         [ 2]  303 	jp decomp_loop 
      001288                        304 6$:
                                    305 ; label?
      001288 A1 03            [ 1]  306 	cp a,#TK_LABEL 
      00128A 26 1E            [ 1]  307 	jrne 64$
                                    308 ; copy label string to output buffer   	
      00128C A6 20            [ 1]  309 	ld a,#32 
      00128E 90 F7            [ 1]  310 	ld (y),a 
      001290 90 5C            [ 1]  311 	incw y 
      001292                        312 61$:
      001292 89               [ 2]  313 	pushw x 
      001293 CD 18 01         [ 4]  314 	call skip_string 
      001296 85               [ 2]  315 	popw x 
      001297                        316 62$:	
      001297 F6               [ 1]  317 	ld a,(x)
      001298 27 07            [ 1]  318 	jreq 63$ 
      00129A 5C               [ 1]  319 	incw x  
      00129B 90 F7            [ 1]  320 	ld (y),a 
      00129D 90 5C            [ 1]  321 	incw y 
      00129F 20 F6            [ 2]  322 	jra 62$ 
      0012A1                        323 63$: 
      0012A1 A6 20            [ 1]  324 	ld a,#32 
      0012A3 90 F7            [ 1]  325 	ld (y),a 
      0012A5 90 5C            [ 1]  326 	incw y 
      0012A7 CC 11 EA         [ 2]  327 	jp decomp_loop
      0012AA                        328 64$:
      0012AA A1 02            [ 1]  329 	cp a,#TK_QSTR 
      0012AC 26 09            [ 1]  330 	jrne 7$
                                    331 ;; TK_QSTR
      0012AE CD 11 2A         [ 4]  332 	call add_space
      0012B1 CD 11 52         [ 4]  333 	call cpy_quote  
      0012B4 CC 11 EA         [ 2]  334 	jp decomp_loop
      0012B7                        335 7$:
      0012B7 A1 04            [ 1]  336 	cp a,#TK_CHAR 
      0012B9 26 10            [ 1]  337 	jrne 8$
                                    338 ;; TK_CHAR
      0012BB CD 11 2A         [ 4]  339 	call add_space 
      0012BE A6 5C            [ 1]  340 	ld a,#'\ 
      0012C0 90 F7            [ 1]  341 	ld (y),a 
      0012C2 90 5C            [ 1]  342 	incw y
      0012C4 F6               [ 1]  343 	ld a,(x)
      0012C5 72 5C 00 01      [ 1]  344 	inc in  
      0012C9 20 06            [ 2]  345 	jra 81$
      0012CB A1 0A            [ 1]  346 8$: cp a,#TK_COLON 
      0012CD 26 09            [ 1]  347 	jrne 9$
      0012CF A6 3A            [ 1]  348 	ld a,#':
      0012D1                        349 81$:
      0012D1 90 F7            [ 1]  350 	ld (y),a 
      0012D3 90 5C            [ 1]  351 	incw y 
      0012D5                        352 82$:
      0012D5 CC 11 EA         [ 2]  353 	jp decomp_loop
      0012D8                        354 9$: 
      0012D8 A1 09            [ 1]  355 	cp a,#TK_SHARP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      0012DA 22 0A            [ 1]  356 	jrugt 10$ 
      0012DC A0 05            [ 1]  357 	sub a,#TK_ARRAY 
      0012DE 5F               [ 1]  358 	clrw x 
      0012DF 97               [ 1]  359 	ld xl,a
      0012E0 1C 13 2D         [ 2]  360 	addw x,#single_char 
      0012E3 F6               [ 1]  361 	ld a,(x)
      0012E4 20 EB            [ 2]  362 	jra 81$ 
      0012E6                        363 10$: 
      0012E6 A1 11            [ 1]  364 	cp a,#TK_MINUS 
      0012E8 22 0A            [ 1]  365 	jrugt 11$
      0012EA A0 10            [ 1]  366 	sub a,#TK_PLUS 
      0012EC 5F               [ 1]  367 	clrw x 
      0012ED 97               [ 1]  368 	ld xl,a 
      0012EE 1C 13 32         [ 2]  369 	addw x,#add_char 
      0012F1 F6               [ 1]  370 	ld a,(x)
      0012F2 20 DD            [ 2]  371 	jra 81$
      0012F4                        372 11$:
      0012F4 A1 22            [ 1]  373     cp a,#TK_MOD 
      0012F6 22 0A            [ 1]  374 	jrugt 12$
      0012F8 A0 20            [ 1]  375 	sub a,#TK_MULT
      0012FA 5F               [ 1]  376 	clrw x 
      0012FB 97               [ 1]  377 	ld xl,a 
      0012FC 1C 13 34         [ 2]  378 	addw x,#mul_char
      0012FF F6               [ 1]  379 	ld a,(x)
      001300 20 CF            [ 2]  380 	jra 81$
      001302                        381 12$:
      001302 A0 31            [ 1]  382 	sub a,#TK_GT  
      001304 48               [ 1]  383 	sll a 
      001305 5F               [ 1]  384 	clrw x 
      001306 97               [ 1]  385 	ld xl,a 
      001307 1C 13 37         [ 2]  386 	addw x,#relop_str 
      00130A FE               [ 2]  387 	ldw x,(x)
      00130B F6               [ 1]  388 	ld a,(x)
      00130C 5C               [ 1]  389 	incw x 
      00130D 90 F7            [ 1]  390 	ld (y),a
      00130F 90 5C            [ 1]  391 	incw y 
      001311 F6               [ 1]  392 	ld a,(x)
      001312 26 BD            [ 1]  393 	jrne 81$
      001314 CC 11 EA         [ 2]  394 	jp decomp_loop 
      001317                        395 20$: 
      001317 90 7F            [ 1]  396 	clr (y)
      001319 1E 03            [ 2]  397 	ldw x,(STR,sp)
      00131B 7B 01            [ 1]  398 	ld a,(BASE_SAV,sp)
      00131D C7 00 0A         [ 1]  399 	ld base,a 
      001320 7B 02            [ 1]  400 	ld a,(WIDTH_SAV,sp)
      001322 C7 00 23         [ 1]  401 	ld tab_width,a
      001325 72 F2 03         [ 2]  402 	subw y,(STR,sp) 
      001328 90 9F            [ 1]  403 	ld a,yl 
      00132A                        404 	_drop VSIZE 
      00132A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00132C 81               [ 4]  405 	ret 
                                    406 
      00132D 40 28 29 2C 23         407 single_char: .byte '@','(',')',',','#'
      001332 2B 2D                  408 add_char: .byte '+','-'
      001334 2A 2F 25               409 mul_char: .byte '*','/','%'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001337 13 43 13 45 13 47 13   410 relop_str: .word gt,equal,ge,lt,ne,le 
             4A 13 4F 13 4C
      001343 3E 00                  411 gt: .asciz ">"
      001345 3D 00                  412 equal: .asciz "="
      001347 3E 3D 00               413 ge: .asciz ">="
      00134A 3C 00                  414 lt: .asciz "<"
      00134C 3C 3D 00               415 le: .asciz "<="
      00134F 3C 3E 00               416 ne:  .asciz "<>"
                                    417 
                                    418 ;----------------------------------
                                    419 ; search in kword_dict name
                                    420 ; from its execution address 
                                    421 ; input:
                                    422 ;   X       	routine_address  
                                    423 ; output:
                                    424 ;   X 			cstr*  | 0 
                                    425 ;--------------------------------
                           000001   426 	CODE_ADDR=1 
                           000003   427 	LINK=3 
                           000004   428 	VSIZE=4
      001352                        429 cmd_name:
      001352                        430 	_vars VSIZE 
      001352 52 04            [ 2]    1     sub sp,#VSIZE 
      001354 72 5F 00 0D      [ 1]  431 	clr acc16 
      001358 1F 01            [ 2]  432 	ldw (CODE_ADDR,sp),x  
      00135A AE 35 75         [ 2]  433 	ldw x,#kword_dict	
      00135D 1F 03            [ 2]  434 1$:	ldw (LINK,sp),x
      00135F E6 02            [ 1]  435 	ld a,(2,x)
      001361 A4 0F            [ 1]  436 	and a,#15 
      001363 C7 00 0E         [ 1]  437 	ld acc8,a 
      001366 1C 00 03         [ 2]  438 	addw x,#3
      001369 72 BB 00 0D      [ 2]  439 	addw x,acc16
      00136D FE               [ 2]  440 	ldw x,(x) ; code address   
      00136E 13 01            [ 2]  441 	cpw x,(CODE_ADDR,sp)
      001370 27 0C            [ 1]  442 	jreq 2$
      001372 1E 03            [ 2]  443 	ldw x,(LINK,sp)
      001374 FE               [ 2]  444 	ldw x,(x) 
      001375 1D 00 02         [ 2]  445 	subw x,#2  
      001378 26 E3            [ 1]  446 	jrne 1$
      00137A 4F               [ 1]  447 	clr a 
      00137B 5F               [ 1]  448 	clrw x 
      00137C 20 05            [ 2]  449 	jra 9$
      00137E 1E 03            [ 2]  450 2$: ldw x,(LINK,sp)
      001380 1C 00 02         [ 2]  451 	addw x,#2 	
      001383                        452 9$:	_drop VSIZE
      001383 5B 04            [ 2]    1     addw sp,#VSIZE 
      001385 81               [ 4]  453 	ret
                                    454 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 ;     implementation information
                                     27 ;
                                     28 ; *  integer are 24 bits in registers they are 
                                     29 ;    kept as A:X   (A being most signifant byte)
                                     30 ; *  an expression stack is used *xstack* 
                                     31 ;    register Y is used as xstack pointer 
                                     32 ; 
                                     33 ;    IMPORTANT: when a routine use Y it must preserve 
                                     34 ;               its content and restore it at exit.
                                     35 ;               This hold only wheb BASIC is running  
                                     36 ;
                                     37 ; *  BASIC function return their value registers 
                                     38 ;    A for character 
                                     39 ;	 X for address 
                                     40 ;	 A:X for integer 
                                     41 ; 
                                     42 ;  * variables return their value in A:X 
                                     43 ;
                                     44 ;  * relation, expression return value on xstack 
                                     45 ;    and A=TK_INTGR or else if no expression.
                                     46 ;--------------------------------------------------- 
                                     47 
                                     48     .module STM8_TBI
                                     49 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



                                     50     .include "config.inc"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;;  configuration paramters 
                                      3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      4 
                           000001     5 DEBUG=1 ; set to 1 to include debugging code 
                                      6 
                           000000     7 SEPARATE=0 ; set to 1 for 'make separate' 
                                      8 
                                      9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                     51 
                           000000    52 .if SEPARATE
                                     53 	.include "inc/nucleo_8s208.inc"
                                     54 	.include "inc/stm8s208.inc"
                                     55 	.include "inc/ascii.inc"
                                     56 	.include "inc/gen_macros.inc" 
                                     57 	.include "tbi_macros.inc" 
                                     58 .endif 
                                     59 
                                     60 ;--------------------------------------
                                     61     .area DATA 
                                     62 ;--------------------------------------	
                                     63 
      000000                         64 in.w::  .blkb 1 ; parser position in text line high-byte 
      000001                         65 in::    .blkb 1 ; low byte of in.w 
      000002                         66 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         67 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         68 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         69 data_ptr:  .blkw 1  ; point to DATA address
      000008                         70 data_ofs:  .blkb 1  ; index to next data item 
      000009                         71 data_len:  .blkb 1  ; length of data line 
      00000A                         72 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         73 acc32:: .blkb 1 ; 32 bit accumalator upper-byte 
      00000C                         74 acc24:: .blkb 1 ; 24 bits accumulator upper-byte 
      00000D                         75 acc16:: .blkb 1 ; 16 bits accumulator, acc24 high-byte
      00000E                         76 acc8::  .blkb 1 ;  8 bits accumulator, acc24 low-byte  
      00000F                         77 ticks: .blkb 3 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000012                         78 timer:: .blkw 1 ;  milliseconds count down timer 
      000014                         79 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000016                         80 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000018                         81 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000019                         82 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      00001A                         83 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      00001B                         84 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001D                         85 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001F                         86 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000020                         87 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000022                         88 flags:: .blkb 1 ; various boolean flags
      000023                         89 tab_width:: .blkb 1 ; print colon width (default 6)
      000024                         90 free_eeprom: .blkw 1 ; start address of free eeprom 
      000026                         91 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002E                         92 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002F                         93 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
      000030                         94 dvar_bgn:: .blkw 1 ; DIM variables start address 
      000032                         95 dvar_end:: .blkw 1 ; DIM variables end address 
                                     96 ; 24 bits integer variables 
      000034                         97 vars:: .blkb 3*26 ; BASIC variables A-Z,
                                     98 
                                     99 	.area BTXT (ABS)
      00008C                        100 	.org 0x8C  
                                    101 ; keep 'free_ram' as last variable 
                                    102 ; basic code compiled here. 
      00008C                        103 rsign: .blkw 1 ; "TB" 
      00008E                        104 rsize: .blkw 1 ; code size 	 
      000090                        105 free_ram: ; from here RAM free for BASIC text 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                    106 
                                    107 	.area CODE 
                                    108 
                                    109 
                                    110 ;-------------------------------------
                                    111 ; retrun string length
                                    112 ; input:
                                    113 ;   X         .asciz  pointer 
                                    114 ; output:
                                    115 ;   X         not affected 
                                    116 ;   A         length 
                                    117 ;-------------------------------------
      001386                        118 strlen::
      001386 89               [ 2]  119 	pushw x 
      001387 4F               [ 1]  120 	clr a
      001388 7D               [ 1]  121 1$:	tnz (x) 
      001389 27 04            [ 1]  122 	jreq 9$ 
      00138B 4C               [ 1]  123 	inc a 
      00138C 5C               [ 1]  124 	incw x 
      00138D 20 F9            [ 2]  125 	jra 1$ 
      00138F 85               [ 2]  126 9$:	popw x 
      001390 81               [ 4]  127 	ret 
                                    128 
                                    129 ;------------------------------------
                                    130 ; compare 2 strings
                                    131 ; input:
                                    132 ;   X 		char* first string 
                                    133 ;   Y       char* second string 
                                    134 ; output:
                                    135 ;   A 		0 not == |1 ==  
                                    136 ;-------------------------------------
      001391                        137 strcmp:
      001391 F6               [ 1]  138 	ld a,(x)
      001392 27 0B            [ 1]  139 	jreq 5$ 
      001394 90 F1            [ 1]  140 	cp a,(y) 
      001396 26 05            [ 1]  141 	jrne 4$ 
      001398 5C               [ 1]  142 	incw x 
      001399 90 5C            [ 1]  143 	incw y 
      00139B 20 F4            [ 2]  144 	jra strcmp 
      00139D                        145 4$: ; not same  
      00139D 4F               [ 1]  146 	clr a 
      00139E 81               [ 4]  147 	ret 
      00139F                        148 5$: ; same 
      00139F A6 01            [ 1]  149 	ld a,#1 
      0013A1 81               [ 4]  150 	ret 
                                    151 
                                    152 
                                    153 ;---------------------------------------
                                    154 ;  copy src to dest 
                                    155 ; input:
                                    156 ;   X 		dest 
                                    157 ;   Y 		src 
                                    158 ; output: 
                                    159 ;   X 		dest 
                                    160 ;----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      0013A2                        161 strcpy::
      0013A2 88               [ 1]  162 	push a 
      0013A3 89               [ 2]  163 	pushw x 
      0013A4 90 F6            [ 1]  164 1$: ld a,(y)
      0013A6 27 06            [ 1]  165 	jreq 9$ 
      0013A8 F7               [ 1]  166 	ld (x),a 
      0013A9 5C               [ 1]  167 	incw x 
      0013AA 90 5C            [ 1]  168 	incw y 
      0013AC 20 F6            [ 2]  169 	jra 1$ 
      0013AE 7F               [ 1]  170 9$:	clr (x)
      0013AF 85               [ 2]  171 	popw x 
      0013B0 84               [ 1]  172 	pop a 
      0013B1 81               [ 4]  173 	ret 
                                    174 
                                    175 ;---------------------------------------
                                    176 ; move memory block 
                                    177 ; input:
                                    178 ;   X 		destination 
                                    179 ;   Y 	    source 
                                    180 ;   acc16	bytes count 
                                    181 ; output:
                                    182 ;   none 
                                    183 ;--------------------------------------
                           000001   184 	INCR=1 ; incrament high byte 
                           000002   185 	LB=2 ; increment low byte 
                           000002   186 	VSIZE=2
      0013B2                        187 move::
      0013B2 88               [ 1]  188 	push a 
      0013B3                        189 	_vars VSIZE 
      0013B3 52 02            [ 2]    1     sub sp,#VSIZE 
      0013B5 0F 01            [ 1]  190 	clr (INCR,sp)
      0013B7 0F 02            [ 1]  191 	clr (LB,sp)
      0013B9 90 89            [ 2]  192 	pushw y 
      0013BB 13 01            [ 2]  193 	cpw x,(1,sp) ; compare DEST to SRC 
      0013BD 90 85            [ 2]  194 	popw y 
      0013BF 27 31            [ 1]  195 	jreq move_exit ; x==y 
      0013C1 2B 0E            [ 1]  196 	jrmi move_down
      0013C3                        197 move_up: ; start from top address with incr=-1
      0013C3 72 BB 00 0D      [ 2]  198 	addw x,acc16
      0013C7 72 B9 00 0D      [ 2]  199 	addw y,acc16
      0013CB 03 01            [ 1]  200 	cpl (INCR,sp)
      0013CD 03 02            [ 1]  201 	cpl (LB,sp)   ; increment = -1 
      0013CF 20 05            [ 2]  202 	jra move_loop  
      0013D1                        203 move_down: ; start from bottom address with incr=1 
      0013D1 5A               [ 2]  204     decw x 
      0013D2 90 5A            [ 2]  205 	decw y
      0013D4 0C 02            [ 1]  206 	inc (LB,sp) ; incr=1 
      0013D6                        207 move_loop:	
      0013D6 C6 00 0D         [ 1]  208     ld a, acc16 
      0013D9 CA 00 0E         [ 1]  209 	or a, acc8
      0013DC 27 14            [ 1]  210 	jreq move_exit 
      0013DE 72 FB 01         [ 2]  211 	addw x,(INCR,sp)
      0013E1 72 F9 01         [ 2]  212 	addw y,(INCR,sp) 
      0013E4 90 F6            [ 1]  213 	ld a,(y)
      0013E6 F7               [ 1]  214 	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      0013E7 89               [ 2]  215 	pushw x 
      0013E8 CE 00 0D         [ 2]  216 	ldw x,acc16 
      0013EB 5A               [ 2]  217 	decw x 
      0013EC CF 00 0D         [ 2]  218 	ldw acc16,x 
      0013EF 85               [ 2]  219 	popw x 
      0013F0 20 E4            [ 2]  220 	jra move_loop
      0013F2                        221 move_exit:
      0013F2                        222 	_drop VSIZE
      0013F2 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013F4 84               [ 1]  223 	pop a 
      0013F5 81               [ 4]  224 	ret 	
                                    225 
                                    226 ;------------------------------------
                                    227 ;  set all variables to zero 
                                    228 ; input:
                                    229 ;   none 
                                    230 ; output:
                                    231 ;	none
                                    232 ;------------------------------------
      0013F6                        233 clear_vars:
      0013F6 89               [ 2]  234 	pushw x 
      0013F7 88               [ 1]  235 	push a  
      0013F8 AE 00 34         [ 2]  236 	ldw x,#vars 
      0013FB A6 4E            [ 1]  237 	ld a,#CELL_SIZE*26 
      0013FD 7F               [ 1]  238 1$:	clr (x)
      0013FE 5C               [ 1]  239 	incw x 
      0013FF 4A               [ 1]  240 	dec a 
      001400 26 FB            [ 1]  241 	jrne 1$
      001402 84               [ 1]  242 	pop a 
      001403 85               [ 2]  243 	popw x 
      001404 81               [ 4]  244 	ret 
                                    245 
                                    246 
                                    247 ;-----------------------
                                    248 ;  display system 
                                    249 ;  information 
                                    250 ;-----------------------
                           000002   251 	MAJOR=2
                           000000   252 	MINOR=0 
      001405 0A 0A 54 69 6E 79 20   253 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
                                    254 
      00144B                        255 system_information:
      00144B AE 14 05         [ 2]  256 	ldw x,#software 
      00144E CD 09 5C         [ 4]  257 	call puts 
      001451 A6 02            [ 1]  258 	ld a,#MAJOR 
      001453 C7 00 0E         [ 1]  259 	ld acc8,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      001456 5F               [ 1]  260 	clrw x 
      001457 CF 00 0C         [ 2]  261 	ldw acc24,x
      00145A 72 5F 00 23      [ 1]  262 	clr tab_width  
      00145E 35 0A 00 0A      [ 1]  263 	mov base, #10 
      001462 CD 18 47         [ 4]  264 	call prt_acc24 
      001465 A6 2E            [ 1]  265 	ld a,#'.
      001467 CD 08 FF         [ 4]  266 	call putc 
      00146A A6 00            [ 1]  267 	ld a,#MINOR 
      00146C C7 00 0E         [ 1]  268 	ld acc8,a 
      00146F 5F               [ 1]  269 	clrw x 
      001470 CF 00 0C         [ 2]  270 	ldw acc24,x 
      001473 CD 18 47         [ 4]  271 	call prt_acc24
      001476 A6 0D            [ 1]  272 	ld a,#CR 
      001478 CD 08 FF         [ 4]  273 	call putc
                                    274 ;call test 
      00147B 81               [ 4]  275 	ret
                                    276 
      00147C                        277 warm_init:
      00147C 90 AE 17 73      [ 2]  278 	ldw y,#XSTACK_EMPTY  
      001480 72 5F 00 22      [ 1]  279 	clr flags 
      001484 72 5F 00 1F      [ 1]  280 	clr loop_depth 
      001488 35 04 00 23      [ 1]  281 	mov tab_width,#TAB_WIDTH 
      00148C 35 0A 00 0A      [ 1]  282 	mov base,#10 
      001490 AE 00 00         [ 2]  283 	ldw x,#0 
      001493 CF 00 04         [ 2]  284 	ldw basicptr,x 
      001496 CF 00 00         [ 2]  285 	ldw in.w,x 
      001499 72 5F 00 03      [ 1]  286 	clr count
      00149D 81               [ 4]  287 	ret 
                                    288 
                                    289 ;---------------------------
                                    290 ; reset BASIC text variables 
                                    291 ; and clear variables 
                                    292 ;---------------------------
      00149E                        293 clear_basic:
      00149E 89               [ 2]  294 	pushw x 
      00149F 72 5F 00 03      [ 1]  295 	clr count
      0014A3 72 5F 00 01      [ 1]  296 	clr in  
      0014A7 AE 00 90         [ 2]  297 	ldw x,#free_ram 
      0014AA CF 00 1B         [ 2]  298 	ldw txtbgn,x 
      0014AD CF 00 1D         [ 2]  299 	ldw txtend,x 
      0014B0 CF 00 30         [ 2]  300 	ldw dvar_bgn,x 
      0014B3 CF 00 32         [ 2]  301 	ldw dvar_end,x 
      0014B6 CD 13 F6         [ 4]  302 	call clear_vars 
      0014B9 85               [ 2]  303 	popw x
      0014BA 81               [ 4]  304 	ret 
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;;   Tiny BASIC error messages     ;;
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014BB                        309 err_msg:
      0014BB 00 00 14 E1 14 EE 14   310 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             FC 15 15 15 24
      0014C7 15 3A 15 50 15 6A 15   311 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             7B 15 8C
      0014D1 15 98 15 CB 15 DB 15   312 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



             EF 16 02
      0014DB 16 0F 16 19 16 35      313 	.word err_overflow,err_read_only,err_not_program  
                                    314 
      0014E1 4D 65 6D 6F 72 79 20   315 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0014EE 73 79 6E 74 61 78 20   316 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0014FC 6D 61 74 68 20 6F 70   317 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      001515 64 69 76 69 73 69 6F   318 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      001524 69 6E 76 61 6C 69 64   319 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00153A 72 75 6E 20 74 69 6D   320 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      001550 63 6F 6D 6D 61 6E 64   321 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      00156A 64 75 70 6C 69 63 61   322 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      00157B 46 69 6C 65 20 6E 6F   323 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      00158C 62 61 64 20 76 61 6C   324 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      001598 46 69 6C 65 20 69 6E   325 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0015CB 4E 6F 20 64 61 74 61   326 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0015DB 4E 6F 20 70 72 6F 67   327 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0015EF 46 69 6C 65 20 73 79   328 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      001602 42 75 66 66 65 72 20   329 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
      00160F 6F 76 65 72 66 6C 6F   330 err_overflow: .asciz "overflow\n" 
             77 0A 00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      001619 63 6F 6E 73 74 61 6E   331 err_read_only: .asciz "constant can't be modified\n"
             74 20 63 61 6E 27 74
             20 62 65 20 6D 6F 64
             69 66 69 65 64 0A 00
      001635 6E 6F 20 70 72 6F 67   332 err_not_program: .asciz "no program at this address\n"
             72 61 6D 20 61 74 20
             74 68 69 73 20 61 64
             64 72 65 73 73 0A 00
                                    333 
                                    334 ;-------------------------------------
      001651 0A 72 75 6E 20 74 69   335 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      001663 0A 63 6F 6D 70 69 6C   336 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      001674 6C 61 73 74 20 74 6F   337 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                    338 
      001684                        339 syntax_error::
      001684 A6 02            [ 1]  340 	ld a,#ERR_SYNTAX 
                                    341 
      001686                        342 tb_error::
      001686 72 0A 00 22 4C   [ 2]  343 	btjt flags,#FCOMP,1$
      00168B 88               [ 1]  344 	push a 
      00168C AE 16 51         [ 2]  345 	ldw x, #rt_msg 
      00168F CD 09 5C         [ 4]  346 	call puts 
      001692 84               [ 1]  347 	pop a 
      001693 AE 14 BB         [ 2]  348 	ldw x, #err_msg 
      001696 72 5F 00 0D      [ 1]  349 	clr acc16 
      00169A 48               [ 1]  350 	sll a
      00169B 72 59 00 0D      [ 1]  351 	rlc acc16  
      00169F C7 00 0E         [ 1]  352 	ld acc8, a 
      0016A2 72 BB 00 0D      [ 2]  353 	addw x,acc16 
      0016A6 FE               [ 2]  354 	ldw x,(x)
      0016A7 CD 09 5C         [ 4]  355 	call puts
      0016AA CE 00 04         [ 2]  356 	ldw x,basicptr 
                           000001   357 .if DEBUG 
      0016AD C6 00 03         [ 1]  358 ld a,count 
      0016B0 90 5F            [ 1]  359 clrw y 
      0016B2 90 02            [ 1]  360 rlwa y  
      0016B4 CD 06 45         [ 4]  361 call hex_dump
      0016B7 CE 00 04         [ 2]  362 ldw x,basicptr
                                    363 .endif 
      0016BA C6 00 01         [ 1]  364 	ld a,in 
      0016BD CD 1F 95         [ 4]  365 	call prt_basic_line
      0016C0 AE 16 74         [ 2]  366 	ldw x,#tk_id 
      0016C3 CD 09 5C         [ 4]  367 	call puts 
      0016C6 C6 00 02         [ 1]  368 	ld a,in.saved 
      0016C9 5F               [ 1]  369 	clrw x 
      0016CA 97               [ 1]  370 	ld xl,a 
      0016CB 72 BB 00 04      [ 2]  371 	addw x,basicptr 
      0016CF F6               [ 1]  372 	ld a,(x)
      0016D0 5F               [ 1]  373 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0016D1 97               [ 1]  374 	ld xl,a 
      0016D2 CD 18 30         [ 4]  375 	call prt_i16
      0016D5 20 35            [ 2]  376 	jra 6$
      0016D7                        377 1$:	
      0016D7 88               [ 1]  378 	push a 
      0016D8 AE 16 63         [ 2]  379 	ldw x,#comp_msg
      0016DB CD 09 5C         [ 4]  380 	call puts 
      0016DE 84               [ 1]  381 	pop a 
      0016DF AE 14 BB         [ 2]  382 	ldw x, #err_msg 
      0016E2 72 5F 00 0D      [ 1]  383 	clr acc16 
      0016E6 48               [ 1]  384 	sll a
      0016E7 72 59 00 0D      [ 1]  385 	rlc acc16  
      0016EB C7 00 0E         [ 1]  386 	ld acc8, a 
      0016EE 72 BB 00 0D      [ 2]  387 	addw x,acc16 
      0016F2 FE               [ 2]  388 	ldw x,(x)
      0016F3 CD 09 5C         [ 4]  389 	call puts
      0016F6 AE 16 90         [ 2]  390 	ldw x,#tib
      0016F9 CD 09 5C         [ 4]  391 	call puts 
      0016FC A6 0D            [ 1]  392 	ld a,#CR 
      0016FE CD 08 FF         [ 4]  393 	call putc
      001701 CE 00 00         [ 2]  394 	ldw x,in.w
      001704 CD 09 C9         [ 4]  395 	call spaces
      001707 A6 5E            [ 1]  396 	ld a,#'^
      001709 CD 08 FF         [ 4]  397 	call putc 
      00170C AE 17 FF         [ 2]  398 6$: ldw x,#STACK_EMPTY 
      00170F 94               [ 1]  399     ldw sp,x
                                    400 
      001710                        401 warm_start:
      001710 CD 14 7C         [ 4]  402 	call warm_init
                                    403 ;----------------------------
                                    404 ;   BASIC interpreter
                                    405 ;----------------------------
      001713                        406 cmd_line: ; user interface 
      001713 A6 0D            [ 1]  407 	ld a,#CR 
      001715 CD 08 FF         [ 4]  408 	call putc 
      001718 A6 3E            [ 1]  409 	ld a,#'> 
      00171A CD 08 FF         [ 4]  410 	call putc
      00171D CD 0A 61         [ 4]  411 	call readln
      001720 72 5D 00 03      [ 1]  412 	tnz count 
      001724 27 ED            [ 1]  413 	jreq cmd_line
      001726 CD 10 96         [ 4]  414 	call compile
                                    415 ;;;;;;;;;;;;;;;;;;;;;;	
                                    416 ;pushw y 
                                    417 ;ldw x,txtbgn  
                                    418 ;ldw y,txtend
                                    419 ;ldw acc16,x   
                                    420 ;subw y,acc16 
                                    421 ;call hex_dump
                                    422 ;popw y 
                                    423 ;;;;;;;;;;;;;;;;;;;;;;
                                    424 
                                    425 ; if text begin with a line number
                                    426 ; the compiler set count to zero    
                                    427 ; so code is not interpreted
      001729 72 5D 00 03      [ 1]  428 	tnz count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00172D 27 E4            [ 1]  429 	jreq cmd_line
                                    430 	
                                    431 ; if direct command 
                                    432 ; it's ready to interpret 
                                    433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    434 ;; This is the interpreter loop
                                    435 ;; for each BASIC code line. 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00172F                        437 interpreter: 
      00172F C6 00 01         [ 1]  438 	ld a,in 
      001732 C1 00 03         [ 1]  439 	cp a,count 
      001735 2B 1D            [ 1]  440 	jrmi interp_loop
      001737                        441 next_line:
      001737 72 01 00 22 D7   [ 2]  442 	btjf flags, #FRUN, cmd_line
      00173C CE 00 04         [ 2]  443 	ldw x,basicptr
      00173F 72 BB 00 00      [ 2]  444 	addw x,in.w 
      001743 C3 00 1D         [ 2]  445 	cpw x,txtend 
      001746 2A C8            [ 1]  446 	jrpl warm_start
      001748 CF 00 04         [ 2]  447 	ldw basicptr,x ; start of next line  
      00174B E6 02            [ 1]  448 	ld a,(2,x)
      00174D C7 00 03         [ 1]  449 	ld count,a 
      001750 35 03 00 01      [ 1]  450 	mov in,#3 ; skip first 3 bytes of line 
      001754                        451 interp_loop:
      001754 CD 17 E8         [ 4]  452 	call next_token
      001757 A1 00            [ 1]  453 	cp a,#TK_NONE 
      001759 27 DC            [ 1]  454 	jreq next_line 
      00175B A1 80            [ 1]  455 	cp a,#TK_CMD
      00175D 26 0C            [ 1]  456 	jrne 1$
      00175F                        457 	_get_code_addr
      00175F FE               [ 2]    1         ldw x,(x)
      001760 72 5C 00 01      [ 1]    2         inc in 
      001764 72 5C 00 01      [ 1]    3         inc in 
      001768 FD               [ 4]  458 	call(x)
      001769 20 E9            [ 2]  459 	jra interp_loop 
      00176B                        460 1$:	 
      00176B A1 85            [ 1]  461 	cp a,#TK_VAR
      00176D 26 05            [ 1]  462 	jrne 2$
      00176F CD 1C DF         [ 4]  463 	call let_var  
      001772 20 E0            [ 2]  464 	jra interp_loop 
      001774                        465 2$:	
      001774 A1 05            [ 1]  466 	cp a,#TK_ARRAY 
      001776 26 05            [ 1]  467 	jrne 3$
      001778 CD 1C DA         [ 4]  468 	call let_array 
      00177B 20 D7            [ 2]  469 	jra interp_loop
      00177D                        470 3$:	
      00177D A1 03            [ 1]  471 	cp a,#TK_LABEL
      00177F 26 05            [ 1]  472 	jrne 4$
      001781 CD 17 8D         [ 4]  473 	call let_dvar  
      001784 20 CE            [ 2]  474 	jra interp_loop 
      001786                        475 4$: 
      001786 A1 0A            [ 1]  476 	cp a,#TK_COLON 
      001788 27 CA            [ 1]  477 	jreq interp_loop
      00178A CC 16 84         [ 2]  478 5$:	jp syntax_error 
                                    479 
                                    480 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    481 ;----------------------
                                    482 ; when a label is met 
                                    483 ; at interp_loop
                                    484 ; it may be a variable 
                                    485 ; assignement to DIM 
                                    486 ; variable 
                                    487 ;----------------------
                           000001   488 	VAR_NAME=1 
                           000003   489 	REC_LEN=3
                           000004   490 	VSIZE=4 
      00178D                        491 let_dvar:
      00178D                        492 	_vars VSIZE 
      00178D 52 04            [ 2]    1     sub sp,#VSIZE 
      00178F 1F 01            [ 2]  493 	ldw (VAR_NAME,sp),x
      001791 0F 03            [ 1]  494 	clr (REC_LEN,sp) 
      001793 CD 18 01         [ 4]  495 	call skip_string 
      001796 CE 00 04         [ 2]  496 	ldw x,basicptr 
      001799 72 BB 00 00      [ 2]  497 	addw x,in.w 
      00179D F6               [ 1]  498 	ld a,(x)
      00179E A1 32            [ 1]  499 	cp a,#TK_EQUAL 
      0017A0 26 43            [ 1]  500 	jrne 9$ 
                                    501 ; dvar assignment 
      0017A2 72 5C 00 01      [ 1]  502 	inc in  
      0017A6 CD 1C 0D         [ 4]  503 	call condition  
      0017A9 A1 84            [ 1]  504 	cp a,#TK_INTGR 
      0017AB 27 03            [ 1]  505 	jreq 1$ 
      0017AD CC 16 84         [ 2]  506 0$:	jp syntax_error 
      0017B0                        507 1$: 
      0017B0 1E 01            [ 2]  508 	ldw x,(VAR_NAME,sp) ; pointer to var name 
      0017B2 CD 13 86         [ 4]  509 	call strlen 
      0017B5 AB 05            [ 1]  510 	add a,#REC_XTRA_BYTES
      0017B7 6B 04            [ 1]  511 	ld (REC_LEN+1,sp),a 
      0017B9 CD 1D 49         [ 4]  512 	call search_name 
      0017BC 5D               [ 2]  513 	tnzw x 
      0017BD 27 EE            [ 1]  514 	jreq 0$ 
      0017BF F6               [ 1]  515 	ld a,(x)
      0017C0 2A 05            [ 1]  516 	jrpl 2$
      0017C2 A6 11            [ 1]  517 	ld a,#ERR_RD_ONLY 
      0017C4 CC 16 86         [ 2]  518 	jp tb_error 
      0017C7                        519 2$:
      0017C7 72 FB 03         [ 2]  520 	addw x,(REC_LEN,sp)
      0017CA 1D 00 03         [ 2]  521 	subw x,#CELL_SIZE 
      0017CD CF 00 19         [ 2]  522 	ldw ptr16,x
      0017D0                        523 	_xpop 
      0017D0 90 F6            [ 1]    1     ld a,(y)
      0017D2 93               [ 1]    2     ldw x,y 
      0017D3 EE 01            [ 2]    3     ldw x,(1,x)
      0017D5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0017D9 72 C7 00 19      [ 4]  524 	ld [ptr16],a 
      0017DD 72 5C 00 1A      [ 1]  525 	inc ptr8 
      0017E1 72 CF 00 19      [ 5]  526 	ldw [ptr16],x 
      0017E5                        527 9$: _drop VSIZE 	
      0017E5 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017E7 81               [ 4]  528 	ret 
                                    529 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                    530 
                                    531 ;--------------------------
                                    532 ; extract next token from
                                    533 ; token list 
                                    534 ; basicptr -> base address 
                                    535 ; in  -> offset in list array 
                                    536 ; output:
                                    537 ;   A 		token attribute
                                    538 ;   X 		*token_value 
                                    539 ;----------------------------------------
      0017E8                        540 next_token::
                                    541 ;	clrw x 
      0017E8 C6 00 01         [ 1]  542 	ld a,in 
      0017EB C7 00 02         [ 1]  543 	ld in.saved,a ; in case "_unget_token" needed 
                                    544 ; don't replace sub by "cp a,count" 
                                    545 ; if end of line must return with A=0   	
      0017EE C0 00 03         [ 1]  546 	sub a,count 
      0017F1 27 0D            [ 1]  547 	jreq 9$ ; end of line 
      0017F3                        548 0$: 
      0017F3 CE 00 04         [ 2]  549 	ldw x,basicptr 
      0017F6 72 BB 00 00      [ 2]  550 	addw x,in.w 
      0017FA F6               [ 1]  551 	ld a,(x)
      0017FB 5C               [ 1]  552 	incw x
      0017FC 72 5C 00 01      [ 1]  553 	inc in   
      001800 81               [ 4]  554 9$: ret 
                                    555 
                                    556 ;-------------------------
                                    557 ;  skip .asciz in BASIC line 
                                    558 ;  name 
                                    559 ;  input:
                                    560 ;     x		* string 
                                    561 ;  output:
                                    562 ;     none 
                                    563 ;-------------------------
      001801                        564 skip_string:
      001801 F6               [ 1]  565 	ld a,(x)
      001802 27 03            [ 1]  566 	jreq 1$
      001804 5C               [ 1]  567 	incw x 
      001805 20 FA            [ 2]  568 	jra skip_string 
      001807 5C               [ 1]  569 1$: incw x 	
      001808 72 B0 00 04      [ 2]  570 	subw x,basicptr 
      00180C CF 00 00         [ 2]  571 	ldw in.w,x 
      00180F 81               [ 4]  572 	ret 
                                    573 
                                    574 ;---------------------
                                    575 ; extract 16 bits  
                                    576 ; address from BASIC
                                    577 ; code 
                                    578 ; input:
                                    579 ;    X    *address
                                    580 ; output:
                                    581 ;    X    address 
                                    582 ;-------------------- 
      001810                        583 get_addr:
      001810 FE               [ 2]  584 	ldw x,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      001811 72 5C 00 01      [ 1]  585 	inc in 
      001815 72 5C 00 01      [ 1]  586 	inc in 
      001819 81               [ 4]  587 	ret 
                                    588 
                                    589 ;--------------------
                                    590 ; extract int24_t  
                                    591 ; value from BASIC 
                                    592 ; code 
                                    593 ; input:
                                    594 ;    X   *integer 
                                    595 ; output:
                                    596 ;    A:X   int24  
                                    597 ;--------------------
      00181A                        598 get_int24:
      00181A F6               [ 1]  599 	ld a,(x)
      00181B EE 01            [ 2]  600 	ldw x,(1,x)
                                    601 ; skip 3 bytes 
      00181D 72 5C 00 01      [ 1]  602 	inc in 
      001821 72 5C 00 01      [ 1]  603 	inc in 
      001825 72 5C 00 01      [ 1]  604 	inc in 
      001829 81               [ 4]  605 	ret 
                                    606 
                                    607 ;-------------------------
                                    608 ; get character from 
                                    609 ; BASIC code 
                                    610 ; input:
                                    611 ;    X   *char 
                                    612 ; output:
                                    613 ;    A    char 
                                    614 ;-------------------------
      00182A                        615 get_char:
      00182A F6               [ 1]  616 	ld a,(x)
      00182B 72 5C 00 01      [ 1]  617 	inc in  
      00182F 81               [ 4]  618     ret 
                                    619 
                                    620 ;-----------------------------------
                                    621 ; print a 16 bit integer 
                                    622 ; using variable 'base' as conversion
                                    623 ; format.
                                    624 ; input:
                                    625 ;    X       integer to print 
                                    626 ;   'base'    conversion base 
                                    627 ; output:
                                    628 ;   terminal  
                                    629 ;-----------------------------------
      001830                        630 prt_i16:
      001830 72 5F 00 0C      [ 1]  631 	clr acc24 
      001834 CF 00 0D         [ 2]  632 	ldw acc16,x 
      001837 A6 10            [ 1]  633 	ld a,#16
      001839 C1 00 0A         [ 1]  634 	cp a,base
      00183C 27 09            [ 1]  635 	jreq prt_acc24  
      00183E 72 0F 00 0D 04   [ 2]  636 	btjf acc16,#7,prt_acc24
      001843 72 53 00 0C      [ 1]  637 	cpl acc24 ; sign extend 
                                    638 	
                                    639 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                    640 ; print integer in acc24 
                                    641 ; input:
                                    642 ;	acc24 		integer to print 
                                    643 ;	'base' 		numerical base for conversion 
                                    644 ;   'tab_width' field width 
                                    645 ;    A 			signed||unsigned conversion
                                    646 ;  output:
                                    647 ;    A          string length
                                    648 ;------------------------------------
      001847                        649 prt_acc24:
      001847 A6 FF            [ 1]  650 	ld a,#255  ; signed conversion  
      001849 CD 18 6D         [ 4]  651     call itoa  ; conversion entier en  .asciz
      00184C CD 11 40         [ 4]  652 	call right_align  
      00184F 88               [ 1]  653 	push a 
      001850 CD 09 5C         [ 4]  654 	call puts
      001853 84               [ 1]  655 	pop a 
      001854 81               [ 4]  656     ret	
                                    657 
                                    658 ;---------------------------------------
                                    659 ;  print value at xstack top 
                                    660 ;---------------------------------------
      001855                        661 print_top: 
      001855                        662 	_xpop 
      001855 90 F6            [ 1]    1     ld a,(y)
      001857 93               [ 1]    2     ldw x,y 
      001858 EE 01            [ 2]    3     ldw x,(1,x)
      00185A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00185E C7 00 0C         [ 1]  663 	ld acc24,a 
      001861 CF 00 0D         [ 2]  664 	ldw acc16,x 
      001864 CD 18 47         [ 4]  665 	call prt_acc24 
      001867 A6 20            [ 1]  666 	ld a,#SPACE
      001869 CD 08 FF         [ 4]  667 	call putc 
      00186C 81               [ 4]  668 	ret 
                                    669 
                                    670 ;------------------------------------
                                    671 ; convert integer in acc24 to string
                                    672 ; input:
                                    673 ;   'base'	conversion base 
                                    674 ;	acc24	integer to convert
                                    675 ;   A       0=unsigned, else signed 
                                    676 ; output:
                                    677 ;   X  		pointer to first char of string
                                    678 ;   A       string length
                                    679 ;------------------------------------
                           000001   680 	SIGN=1  ; integer sign 
                           000002   681 	LEN=2 
                           000003   682 	PSTR=3
                           000004   683 	VSIZE=4 ;locals size
      00186D                        684 itoa::
      00186D                        685 	_vars VSIZE
      00186D 52 04            [ 2]    1     sub sp,#VSIZE 
      00186F 0F 02            [ 1]  686 	clr (LEN,sp) ; string length  
      001871 0F 01            [ 1]  687 	clr (SIGN,sp)    ; sign
      001873 4D               [ 1]  688 	tnz A
      001874 27 11            [ 1]  689 	jreq 1$ ; unsigned conversion  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      001876 C6 00 0A         [ 1]  690 	ld a,base 
      001879 A1 0A            [ 1]  691 	cp a,#10
      00187B 26 0A            [ 1]  692 	jrne 1$
                                    693 	; base 10 string display with negative sign if bit 23==1
      00187D 72 0F 00 0C 05   [ 2]  694 	btjf acc24,#7,1$
      001882 03 01            [ 1]  695 	cpl (SIGN,sp)
      001884 CD 02 1D         [ 4]  696 	call neg_acc24
      001887                        697 1$:
                                    698 ; initialize string pointer 
      001887 AE 16 90         [ 2]  699 	ldw x,#tib 
      00188A 1C 00 50         [ 2]  700 	addw x,#TIB_SIZE
      00188D 5A               [ 2]  701 	decw x 
      00188E 7F               [ 1]  702 	clr (x)
      00188F                        703 itoa_loop:
      00188F C6 00 0A         [ 1]  704     ld a,base
      001892 CD 02 E9         [ 4]  705     call divu24_8 ; acc24/A 
      001895 AB 30            [ 1]  706     add a,#'0  ; remainder of division
      001897 A1 3A            [ 1]  707     cp a,#'9+1
      001899 2B 02            [ 1]  708     jrmi 2$
      00189B AB 07            [ 1]  709     add a,#7 
      00189D                        710 2$:	
      00189D 5A               [ 2]  711 	decw x
      00189E F7               [ 1]  712     ld (x),a
      00189F 0C 02            [ 1]  713 	inc (LEN,sp)
                                    714 	; if acc24==0 conversion done
      0018A1 C6 00 0C         [ 1]  715 	ld a,acc24
      0018A4 CA 00 0D         [ 1]  716 	or a,acc16
      0018A7 CA 00 0E         [ 1]  717 	or a,acc8
      0018AA 26 E3            [ 1]  718     jrne itoa_loop
                                    719 	;conversion done, next add '$' or '-' as required
      0018AC C6 00 0A         [ 1]  720 	ld a,base 
      0018AF A1 10            [ 1]  721 	cp a,#16
      0018B1 27 08            [ 1]  722 	jreq 8$
      0018B3 7B 01            [ 1]  723 	ld a,(SIGN,sp)
      0018B5 27 0A            [ 1]  724     jreq 10$
      0018B7 A6 2D            [ 1]  725     ld a,#'-
      0018B9 20 02            [ 2]  726 	jra 9$ 
      0018BB                        727 8$:	
      0018BB A6 24            [ 1]  728 	ld a,#'$ 
      0018BD 5A               [ 2]  729 9$: decw x
      0018BE F7               [ 1]  730     ld (x),a
      0018BF 0C 02            [ 1]  731 	inc (LEN,sp)
      0018C1                        732 10$:
      0018C1 7B 02            [ 1]  733 	ld a,(LEN,sp)
      0018C3                        734 	_drop VSIZE
      0018C3 5B 04            [ 2]    1     addw sp,#VSIZE 
      0018C5 81               [ 4]  735 	ret
                                    736 
                                    737 ;------------------------------------
                                    738 ; convert alpha to uppercase
                                    739 ; input:
                                    740 ;    a  character to convert
                                    741 ; output:
                                    742 ;    a  uppercase character
                                    743 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0018C6                        744 to_upper::
      0018C6 A1 61            [ 1]  745 	cp a,#'a
      0018C8 2A 01            [ 1]  746 	jrpl 1$
      0018CA 81               [ 4]  747 0$:	ret
      0018CB A1 7A            [ 1]  748 1$: cp a,#'z	
      0018CD 22 FB            [ 1]  749 	jrugt 0$
      0018CF A0 20            [ 1]  750 	sub a,#32
      0018D1 81               [ 4]  751 	ret
                                    752 	
                                    753 ;------------------------------------
                                    754 ; convert pad content in integer
                                    755 ; input:
                                    756 ;    x		* .asciz to convert
                                    757 ; output:
                                    758 ;    A:X        int24_t 
                                    759 ;    acc24      int24_t
                                    760 ;------------------------------------
                                    761 	; local variables
                           000001   762 	SIGN=1 ; 1 byte, 
                           000002   763 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003   764 	TEMP=3 ; 1 byte, temporary storage
                           000004   765 	XTEMP=4 ; 2 bytes, preserve X 
                           000005   766 	VSIZE=5 ; 5 bytes reserved for local storage
      0018D2                        767 atoi24::
      0018D2                        768 	_vars VSIZE
      0018D2 52 05            [ 2]    1     sub sp,#VSIZE 
      0018D4 1F 04            [ 2]  769 	ldw (XTEMP,sp),x 
                                    770 ; conversion made on xstack 
      0018D6 4F               [ 1]  771 	clr a 
      0018D7 5F               [ 1]  772 	clrw x 
      0018D8                        773 	_xpush 
      0018D8 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      0018DC 90 F7            [ 1]    2     ld (y),a 
      0018DE 90 EF 01         [ 2]    3     ldw (1,y),x 
      0018E1 0F 01            [ 1]  774 	clr (SIGN,sp)
      0018E3 A6 0A            [ 1]  775 	ld a,#10
      0018E5 6B 02            [ 1]  776 	ld (BASE,sp),a ; default base decimal
      0018E7 1E 04            [ 2]  777 	ldw x,(XTEMP,sp)
      0018E9 F6               [ 1]  778 	ld a,(x)
      0018EA 27 4E            [ 1]  779 	jreq 9$  ; completed if 0
      0018EC A1 2D            [ 1]  780 	cp a,#'-
      0018EE 26 04            [ 1]  781 	jrne 1$
      0018F0 03 01            [ 1]  782 	cpl (SIGN,sp)
      0018F2 20 08            [ 2]  783 	jra 2$
      0018F4 A1 24            [ 1]  784 1$: cp a,#'$
      0018F6 26 08            [ 1]  785 	jrne 3$
      0018F8 A6 10            [ 1]  786 	ld a,#16
      0018FA 6B 02            [ 1]  787 	ld (BASE,sp),a
      0018FC 5C               [ 1]  788 2$:	incw x
      0018FD 1F 04            [ 2]  789 	ldw (XTEMP,sp),x 
      0018FF F6               [ 1]  790 	ld a,(x)
      001900                        791 3$:	; char to digit 
      001900 A1 61            [ 1]  792 	cp a,#'a
      001902 2B 02            [ 1]  793 	jrmi 4$
      001904 A0 20            [ 1]  794 	sub a,#32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      001906 A1 30            [ 1]  795 4$:	cp a,#'0
      001908 2B 30            [ 1]  796 	jrmi 9$
      00190A A0 30            [ 1]  797 	sub a,#'0
      00190C A1 0A            [ 1]  798 	cp a,#10
      00190E 2B 06            [ 1]  799 	jrmi 5$
      001910 A0 07            [ 1]  800 	sub a,#7
      001912 11 02            [ 1]  801 	cp a,(BASE,sp)
      001914 2A 24            [ 1]  802 	jrpl 9$
      001916 6B 03            [ 1]  803 5$:	ld (TEMP,sp),a
      001918 7B 02            [ 1]  804 	ld a,(BASE,sp)
      00191A CD 02 3A         [ 4]  805 	call mulu24_8
      00191D                        806 	_xpush 
      00191D 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001921 90 F7            [ 1]    2     ld (y),a 
      001923 90 EF 01         [ 2]    3     ldw (1,y),x 
      001926 5F               [ 1]  807 	clrw x 
      001927 7B 03            [ 1]  808 	ld a,(TEMP,sp)
      001929 02               [ 1]  809 	rlwa x 
      00192A                        810 	_xpush 
      00192A 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00192E 90 F7            [ 1]    2     ld (y),a 
      001930 90 EF 01         [ 2]    3     ldw (1,y),x 
      001933 CD 01 7E         [ 4]  811 	call add24 
      001936 1E 04            [ 2]  812 	ldw x,(XTEMP,sp)
      001938 20 C2            [ 2]  813 	jra 2$
      00193A 0D 01            [ 1]  814 9$:	tnz (SIGN,sp)
      00193C 27 03            [ 1]  815     jreq atoi_exit
      00193E CD 02 03         [ 4]  816     call neg24
      001941                        817 atoi_exit:
      001941                        818 	_xpop 
      001941 90 F6            [ 1]    1     ld a,(y)
      001943 93               [ 1]    2     ldw x,y 
      001944 EE 01            [ 2]    3     ldw x,(1,x)
      001946 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00194A C7 00 0C         [ 1]  819 	ld acc24,a 
      00194D CF 00 0D         [ 2]  820 	ldw acc16,x  
      001950                        821 	_drop VSIZE
      001950 5B 05            [ 2]    1     addw sp,#VSIZE 
      001952 81               [ 4]  822 	ret
                                    823 
                                    824 
                                    825 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    826 ;;   TINY BASIC  operators,
                                    827 ;;   commands and functions 
                                    828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    829 
                                    830 ;---------------------------------
                                    831 ; dictionary search 
                                    832 ; input:
                                    833 ;	X 		dictionary entry point, name field  
                                    834 ;   y		.asciz name to search 
                                    835 ; output:
                                    836 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                    837 ;  X		routine address|TK_OP 
                                    838 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                           000001   839 	NLEN=1 ; cmd length 
                           000002   840 	XSAVE=2
                           000004   841 	YSAVE=4
                           000005   842 	VSIZE=5 
      001953                        843 search_dict::
      001953                        844 	_vars VSIZE 
      001953 52 05            [ 2]    1     sub sp,#VSIZE 
      001955 17 04            [ 2]  845 	ldw (YSAVE,sp),y 
      001957                        846 search_next:
      001957 1F 02            [ 2]  847 	ldw (XSAVE,sp),x 
                                    848 ; get name length in dictionary	
      001959 F6               [ 1]  849 	ld a,(x)
      00195A A4 0F            [ 1]  850 	and a,#0xf 
      00195C 6B 01            [ 1]  851 	ld (NLEN,sp),a  
      00195E 16 04            [ 2]  852 	ldw y,(YSAVE,sp) ; name pointer 
      001960 5C               [ 1]  853 	incw x 
      001961                        854 cp_loop:
      001961 90 F6            [ 1]  855 	ld a,(y)
      001963 27 1B            [ 1]  856 	jreq str_match 
      001965 0D 01            [ 1]  857 	tnz (NLEN,sp)
      001967 27 0A            [ 1]  858 	jreq no_match  
      001969 F1               [ 1]  859 	cp a,(x)
      00196A 26 07            [ 1]  860 	jrne no_match 
      00196C 90 5C            [ 1]  861 	incw y 
      00196E 5C               [ 1]  862 	incw x
      00196F 0A 01            [ 1]  863 	dec (NLEN,sp)
      001971 20 EE            [ 2]  864 	jra cp_loop 
      001973                        865 no_match:
      001973 1E 02            [ 2]  866 	ldw x,(XSAVE,sp) 
      001975 1D 00 02         [ 2]  867 	subw x,#2 ; move X to link field
      001978 4B 00            [ 1]  868 	push #TK_NONE 
      00197A FE               [ 2]  869 	ldw x,(x) ; next word link 
      00197B 84               [ 1]  870 	pop a ; TK_NONE 
      00197C 27 1D            [ 1]  871 	jreq search_exit  ; not found  
                                    872 ;try next 
      00197E 20 D7            [ 2]  873 	jra search_next
      001980                        874 str_match:
      001980 1E 02            [ 2]  875 	ldw x,(XSAVE,sp)
      001982 F6               [ 1]  876 	ld a,(X)
      001983 6B 01            [ 1]  877 	ld (NLEN,sp),a ; needed to test keyword type  
      001985 A4 0F            [ 1]  878 	and a,#NLEN_MASK 
                                    879 ; move x to procedure address field 	
      001987 4C               [ 1]  880 	inc a 
      001988 C7 00 0E         [ 1]  881 	ld acc8,a 
      00198B 72 5F 00 0D      [ 1]  882 	clr acc16 
      00198F 72 BB 00 0D      [ 2]  883 	addw x,acc16 
      001993 FE               [ 2]  884 	ldw x,(x) ; routine address  
                                    885 ;determine keyword type bits 7:4 
      001994 7B 01            [ 1]  886 	ld a,(NLEN,sp)
      001996 A4 F0            [ 1]  887 	and a,#KW_TYPE_MASK 
      001998 4E               [ 1]  888 	swap a 
      001999 AB 80            [ 1]  889 	add a,#128
      00199B                        890 search_exit: 
      00199B                        891 	_drop VSIZE 
      00199B 5B 05            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      00199D 81               [ 4]  892 	ret 
                                    893 
                                    894 ;---------------------
                                    895 ; check if next token
                                    896 ;  is of expected type 
                                    897 ; input:
                                    898 ;   A 		 expected token attribute
                                    899 ;  ouput:
                                    900 ;   none     if fail call syntax_error 
                                    901 ;--------------------
      00199E                        902 expect:
      00199E 88               [ 1]  903 	push a 
      00199F CD 17 E8         [ 4]  904 	call next_token 
      0019A2 11 01            [ 1]  905 	cp a,(1,sp)
      0019A4 27 03            [ 1]  906 	jreq 1$
      0019A6 CC 16 84         [ 2]  907 	jp syntax_error
      0019A9 84               [ 1]  908 1$: pop a 
      0019AA 81               [ 4]  909 	ret 
                                    910 
                                    911 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    912 ; parse arguments list 
                                    913 ; between ()
                                    914 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019AB                        915 func_args:
      0019AB A6 06            [ 1]  916 	ld a,#TK_LPAREN 
      0019AD CD 19 9E         [ 4]  917 	call expect 
                                    918 ; expected to continue in arg_list 
                                    919 ; caller must check for TK_RPAREN 
                                    920 
                                    921 ;-------------------------------
                                    922 ; parse embedded BASIC routines 
                                    923 ; arguments list.
                                    924 ; arg_list::=  expr[','expr]*
                                    925 ; all arguments are of int24_t type
                                    926 ; and pushed on stack 
                                    927 ; input:
                                    928 ;   none
                                    929 ; output:
                                    930 ;   xstack{n}   arguments pushed on xstack
                                    931 ;   A 	number of arguments pushed on xstack  
                                    932 ;--------------------------------
      0019B0                        933 arg_list:
      0019B0 4B 00            [ 1]  934 	push #0
      0019B2 CD 1C 0D         [ 4]  935 1$:	call condition 
      0019B5 4D               [ 1]  936 	tnz a 
      0019B6 27 12            [ 1]  937 	jreq 7$  
      0019B8 0C 01            [ 1]  938 	inc (1,sp)
      0019BA CD 17 E8         [ 4]  939 	call next_token 
      0019BD A1 08            [ 1]  940 	cp a,#TK_COMMA 
      0019BF 27 F1            [ 1]  941 	jreq 1$ 
      0019C1 A1 07            [ 1]  942 	cp a,#TK_RPAREN
      0019C3 27 05            [ 1]  943 	jreq 7$
      0019C5                        944 	_unget_token 
      0019C5 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0019CA 84               [ 1]  945 7$:	pop a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      0019CB 81               [ 4]  946 	ret 
                                    947 
                                    948 ;--------------------------------
                                    949 ;   BASIC commnands 
                                    950 ;--------------------------------
                                    951 
                                    952 ;--------------------------------
                                    953 ;  arithmetic and relational 
                                    954 ;  routines
                                    955 ;  operators precedence
                                    956 ;  highest to lowest
                                    957 ;  operators on same row have 
                                    958 ;  same precedence and are executed
                                    959 ;  from left to right.
                                    960 ;	'*','/','%'
                                    961 ;   '-','+'
                                    962 ;   '=','>','<','>=','<=','<>','><'
                                    963 ;   '<>' and '><' are equivalent for not equal.
                                    964 ;--------------------------------
                                    965 
                                    966 ;---------------------
                                    967 ; return array element
                                    968 ; address from @(expr)
                                    969 ; input:
                                    970 ;   A 		TK_ARRAY
                                    971 ; output:
                                    972 ;	X 		element address 
                                    973 ;----------------------
      0019CC                        974 get_array_element:
      0019CC CD 19 AB         [ 4]  975 	call func_args 
      0019CF A1 01            [ 1]  976 	cp a,#1
      0019D1 27 03            [ 1]  977 	jreq 1$
      0019D3 CC 16 84         [ 2]  978 	jp syntax_error
      0019D6                        979 1$: _xpop 
      0019D6 90 F6            [ 1]    1     ld a,(y)
      0019D8 93               [ 1]    2     ldw x,y 
      0019D9 EE 01            [ 2]    3     ldw x,(1,x)
      0019DB 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                    980     ; ignore A, index < 65536 in any case 
                                    981 	; check for bounds 
      0019DF C3 00 20         [ 2]  982 	cpw x,array_size 
      0019E2 23 05            [ 2]  983 	jrule 3$
                                    984 ; bounds {1..array_size}	
      0019E4 A6 0A            [ 1]  985 2$: ld a,#ERR_BAD_VALUE 
      0019E6 CC 16 86         [ 2]  986 	jp tb_error 
      0019E9 5D               [ 2]  987 3$: tnzw  x
      0019EA 27 F8            [ 1]  988 	jreq 2$ 
      0019EC 89               [ 2]  989 	pushw x 
      0019ED 58               [ 2]  990 	sllw x 
      0019EE 72 FB 01         [ 2]  991 	addw x,(1,sp) ; index*size_of(int24)
      0019F1 1F 01            [ 2]  992 	ldw (1,sp),x  
      0019F3 AE 16 90         [ 2]  993 	ldw x,#tib ; array is below tib 
      0019F6 72 F0 01         [ 2]  994 	subw x,(1,sp)
      0019F9                        995 	_drop 2   
      0019F9 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0019FB 81               [ 4]  996 	ret 
                                    997 
                                    998 
                                    999 ;***********************************
                                   1000 ;   expression parse,execute 
                                   1001 ;***********************************
                                   1002 ;-----------------------------------
                                   1003 ; factor ::= ['+'|'-'|e]  var | @ |
                                   1004 ;			 integer | function |
                                   1005 ;			 '('relation')' 
                                   1006 ; output:
                                   1007 ;   A       token attribute 
                                   1008 ;   xstack  value  
                                   1009 ; ---------------------------------
                           000001  1010 	NEG=1
                           000001  1011 	VSIZE=1
      0019FC                       1012 factor:
      0019FC                       1013 	_vars VSIZE 
      0019FC 52 01            [ 2]    1     sub sp,#VSIZE 
      0019FE 0F 01            [ 1] 1014 	clr (NEG,sp)
      001A00 CD 17 E8         [ 4] 1015 	call next_token
      001A03 4D               [ 1] 1016 	tnz a 
      001A04 26 03            [ 1] 1017 	jrne 1$ 
      001A06 CC 1A AE         [ 2] 1018 	jp 22$ 
      001A09 A1 10            [ 1] 1019 1$:	cp a,#TK_PLUS 
      001A0B 27 06            [ 1] 1020 	jreq 2$
      001A0D A1 11            [ 1] 1021 	cp a,#TK_MINUS 
      001A0F 26 05            [ 1] 1022 	jrne 4$ 
      001A11 03 01            [ 1] 1023 	cpl (NEG,sp)
      001A13                       1024 2$:	
      001A13 CD 17 E8         [ 4] 1025 	call next_token
      001A16                       1026 4$:
      001A16 4D               [ 1] 1027 	tnz a 
      001A17 26 03            [ 1] 1028 	jrne 41$ 
      001A19 CC 16 84         [ 2] 1029 	jp syntax_error  
      001A1C                       1030 41$:	
      001A1C A1 81            [ 1] 1031 	cp a,#TK_IFUNC 
      001A1E 26 0C            [ 1] 1032 	jrne 5$ 
      001A20                       1033 	_get_code_addr 
      001A20 FE               [ 2]    1         ldw x,(x)
      001A21 72 5C 00 01      [ 1]    2         inc in 
      001A25 72 5C 00 01      [ 1]    3         inc in 
      001A29 FD               [ 4] 1034 	call (x); result in A:X  
      001A2A 20 70            [ 2] 1035 	jra 18$ 
      001A2C                       1036 5$:
      001A2C A1 84            [ 1] 1037 	cp a,#TK_INTGR
      001A2E 26 05            [ 1] 1038 	jrne 6$
      001A30 CD 18 1A         [ 4] 1039 	call get_int24 ; A:X
      001A33 20 67            [ 2] 1040 	jra 18$
      001A35                       1041 6$:
      001A35 A1 05            [ 1] 1042 	cp a,#TK_ARRAY
      001A37 26 05            [ 1] 1043 	jrne 7$
      001A39 CD 19 CC         [ 4] 1044 	call get_array_element
      001A3C 20 07            [ 2] 1045     jra 71$
      001A3E                       1046 7$:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      001A3E A1 85            [ 1] 1047 	cp a,#TK_VAR 
      001A40 26 08            [ 1] 1048 	jrne 8$
      001A42 CD 18 10         [ 4] 1049 	call get_addr 
      001A45                       1050 71$: ; put value in A:X
      001A45 F6               [ 1] 1051 	ld a,(x)
      001A46 EE 01            [ 2] 1052 	ldw x,(1,x)
      001A48 20 52            [ 2] 1053 	jra 18$
      001A4A                       1054 8$:
      001A4A A1 03            [ 1] 1055 	cp a,#TK_LABEL 
      001A4C 26 1D            [ 1] 1056 	jrne 9$
      001A4E 90 89            [ 2] 1057 	pushw y  
      001A50 89               [ 2] 1058 	pushw x 
      001A51 CD 18 01         [ 4] 1059 	call skip_string
      001A54 85               [ 2] 1060 	popw x  
      001A55 CD 13 86         [ 4] 1061 	call strlen 
      001A58 AB 05            [ 1] 1062 	add a,#REC_XTRA_BYTES
      001A5A CD 1D 49         [ 4] 1063 	call search_name
      001A5D 5D               [ 2] 1064 	tnzw x 
      001A5E 26 04            [ 1] 1065 	jrne 82$ 
      001A60 90 85            [ 2] 1066 	popw y 
      001A62 20 30            [ 2] 1067 	jra 16$
      001A64                       1068 82$:
      001A64 90 85            [ 2] 1069 	popw y   
      001A66 CD 1D 0F         [ 4] 1070 	call get_value ; in A:X 
      001A69 20 31            [ 2] 1071 	jra 18$
      001A6B                       1072 9$: 
      001A6B A1 82            [ 1] 1073 	cp a,#TK_CFUNC 
      001A6D 26 0E            [ 1] 1074 	jrne 12$
      001A6F                       1075 	_get_code_addr 
      001A6F FE               [ 2]    1         ldw x,(x)
      001A70 72 5C 00 01      [ 1]    2         inc in 
      001A74 72 5C 00 01      [ 1]    3         inc in 
      001A78 FD               [ 4] 1076 	call(x)
      001A79 5F               [ 1] 1077 	clrw x 
      001A7A 02               [ 1] 1078 	rlwa x  ; char>int24 in A:X 
      001A7B 20 1F            [ 2] 1079 	jra 18$ 	 
      001A7D                       1080 12$:			
      001A7D A1 06            [ 1] 1081 	cp a,#TK_LPAREN
      001A7F 26 13            [ 1] 1082 	jrne 16$
      001A81 CD 1A F4         [ 4] 1083 	call expression
      001A84 A6 07            [ 1] 1084 	ld a,#TK_RPAREN 
      001A86 CD 19 9E         [ 4] 1085 	call expect
      001A89                       1086 	_xpop 
      001A89 90 F6            [ 1]    1     ld a,(y)
      001A8B 93               [ 1]    2     ldw x,y 
      001A8C EE 01            [ 2]    3     ldw x,(1,x)
      001A8E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001A92 20 08            [ 2] 1087 	jra 18$	
      001A94                       1088 16$:
      001A94                       1089 	_unget_token 
      001A94 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001A99 4F               [ 1] 1090 	clr a 
      001A9A 20 12            [ 2] 1091 	jra 22$ 
      001A9C                       1092 18$: 
      001A9C 0D 01            [ 1] 1093 	tnz (NEG,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      001A9E 27 03            [ 1] 1094 	jreq 20$
      001AA0 CD 02 15         [ 4] 1095 	call neg_ax   
      001AA3                       1096 20$:
      001AA3                       1097 	_xpush 
      001AA3 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001AA7 90 F7            [ 1]    2     ld (y),a 
      001AA9 90 EF 01         [ 2]    3     ldw (1,y),x 
      001AAC A6 84            [ 1] 1098 	ld a,#TK_INTGR
      001AAE                       1099 22$:
      001AAE                       1100 	_drop VSIZE
      001AAE 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AB0 81               [ 4] 1101 	ret
                                   1102 
                                   1103 
                                   1104 ;-----------------------------------
                                   1105 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   1106 ; output:
                                   1107 ;   A    	token attribute 
                                   1108 ;	xstack		value 
                                   1109 ;-----------------------------------
                           000001  1110 	MULOP=1
                           000001  1111 	VSIZE=1
      001AB1                       1112 term:
      001AB1                       1113 	_vars VSIZE
      001AB1 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1114 ; first factor 	
      001AB3 CD 19 FC         [ 4] 1115 	call factor
      001AB6 4D               [ 1] 1116 	tnz a 
      001AB7 27 38            [ 1] 1117 	jreq term_exit  
      001AB9                       1118 term01:	 ; check for  operator '*'|'/'|'%' 
      001AB9 CD 17 E8         [ 4] 1119 	call next_token
      001ABC 6B 01            [ 1] 1120 	ld (MULOP,sp),a
      001ABE A4 30            [ 1] 1121 	and a,#TK_GRP_MASK
      001AC0 A1 20            [ 1] 1122 	cp a,#TK_GRP_MULT
      001AC2 27 09            [ 1] 1123 	jreq 1$
      001AC4 A6 84            [ 1] 1124 	ld a,#TK_INTGR
      001AC6                       1125 	_unget_token 
      001AC6 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001ACB 20 24            [ 2] 1126 	jra term_exit 
      001ACD                       1127 1$:	; got *|/|%
                                   1128 ;second factor
      001ACD CD 19 FC         [ 4] 1129 	call factor
      001AD0 4D               [ 1] 1130 	tnz a 
      001AD1 26 03            [ 1] 1131 	jrne 2$ 
      001AD3 CC 16 84         [ 2] 1132 	jp syntax_error 
      001AD6                       1133 2$: ; select operation 	
      001AD6 7B 01            [ 1] 1134 	ld a,(MULOP,sp) 
      001AD8 A1 20            [ 1] 1135 	cp a,#TK_MULT 
      001ADA 26 05            [ 1] 1136 	jrne 3$
                                   1137 ; '*' operator
      001ADC CD 02 79         [ 4] 1138 	call mul24 
      001ADF 20 D8            [ 2] 1139 	jra term01
      001AE1 A1 21            [ 1] 1140 3$: cp a,#TK_DIV 
      001AE3 26 05            [ 1] 1141 	jrne 4$ 
                                   1142 ; '/' operator	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      001AE5 CD 03 07         [ 4] 1143 	call div24 
      001AE8 20 CF            [ 2] 1144 	jra term01 
      001AEA                       1145 4$: ; '%' operator
      001AEA CD 03 A1         [ 4] 1146 	call mod24
      001AED 20 CA            [ 2] 1147 	jra term01 
      001AEF                       1148 9$: 
      001AEF A6 84            [ 1] 1149 	ld a,#TK_INTGR
      001AF1                       1150 term_exit:
      001AF1                       1151 	_drop VSIZE 
      001AF1 5B 01            [ 2]    1     addw sp,#VSIZE 
      001AF3 81               [ 4] 1152 	ret 
                                   1153 
                                   1154 ;-------------------------------
                                   1155 ;  expr ::= term [['+'|'-'] term]*
                                   1156 ;  result range {-32768..32767}
                                   1157 ;  output:
                                   1158 ;   A    token attribute 
                                   1159 ;   xstack	 result    
                                   1160 ;-------------------------------
                           000001  1161 	OP=1 
                           000001  1162 	VSIZE=1 
      001AF4                       1163 expression:
      001AF4                       1164 	_vars VSIZE 
      001AF4 52 01            [ 2]    1     sub sp,#VSIZE 
                                   1165 ; first term 	
      001AF6 CD 1A B1         [ 4] 1166 	call term
      001AF9 4D               [ 1] 1167 	tnz a 
      001AFA 27 2D            [ 1] 1168 	jreq 9$
      001AFC                       1169 1$:	; operator '+'|'-'
      001AFC CD 17 E8         [ 4] 1170 	call next_token
      001AFF 6B 01            [ 1] 1171 	ld (OP,sp),a 
      001B01 A4 30            [ 1] 1172 	and a,#TK_GRP_MASK
      001B03 A1 10            [ 1] 1173 	cp a,#TK_GRP_ADD 
      001B05 27 09            [ 1] 1174 	jreq 2$ 
      001B07                       1175 	_unget_token 
      001B07 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B0C A6 84            [ 1] 1176 	ld a,#TK_INTGR
      001B0E 20 19            [ 2] 1177 	jra 9$ 
      001B10                       1178 2$: ; second term 
      001B10 CD 1A B1         [ 4] 1179 	call term
      001B13 4D               [ 1] 1180 	tnz a 
      001B14 26 03            [ 1] 1181 	jrne 3$
      001B16 CC 16 84         [ 2] 1182 	jp syntax_error
      001B19                       1183 3$:
      001B19 7B 01            [ 1] 1184 	ld a,(OP,sp)
      001B1B A1 10            [ 1] 1185 	cp a,#TK_PLUS 
      001B1D 26 05            [ 1] 1186 	jrne 4$
                                   1187 ; '+' operator	
      001B1F CD 01 7E         [ 4] 1188 	call add24
      001B22 20 D8            [ 2] 1189 	jra 1$ 
      001B24                       1190 4$:	; '-' operator 
      001B24 CD 01 9B         [ 4] 1191 	call sub24
      001B27 20 D3            [ 2] 1192 	jra 1$
      001B29                       1193 9$:
      001B29                       1194 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      001B29 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B2B 81               [ 4] 1195 	ret 
                                   1196 
                                   1197 ;---------------------------------------------
                                   1198 ; rel ::= expr rel_op expr
                                   1199 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   1200 ;  relation return  integer , zero is false 
                                   1201 ;  output:
                                   1202 ;	 xstack		value  
                                   1203 ;---------------------------------------------
                           000001  1204 	RELOP=1
                           000001  1205 	VSIZE=1 
      001B2C                       1206 relation: 
      001B2C                       1207 	_vars VSIZE
      001B2C 52 01            [ 2]    1     sub sp,#VSIZE 
      001B2E CD 1A F4         [ 4] 1208 	call expression
      001B31 4D               [ 1] 1209 	tnz a 
      001B32 27 54            [ 1] 1210 	jreq 9$ 
                                   1211 ; expect rel_op or leave 
      001B34 CD 17 E8         [ 4] 1212 	call next_token 
      001B37 6B 01            [ 1] 1213 	ld (RELOP,sp),a 
      001B39 A4 30            [ 1] 1214 	and a,#TK_GRP_MASK
      001B3B A1 30            [ 1] 1215 	cp a,#TK_GRP_RELOP 
      001B3D 27 09            [ 1] 1216 	jreq 2$
      001B3F A6 84            [ 1] 1217 	ld a,#TK_INTGR 
      001B41                       1218 	_unget_token 
      001B41 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B46 20 40            [ 2] 1219 	jra 9$ 
      001B48                       1220 2$:	; expect another expression
      001B48 CD 1A F4         [ 4] 1221 	call expression
      001B4B 4D               [ 1] 1222 	tnz a 
      001B4C 26 03            [ 1] 1223 	jrne 3$
      001B4E CC 16 84         [ 2] 1224 	jp syntax_error 
      001B51                       1225 3$: 
      001B51 CD 01 B8         [ 4] 1226 	call cp24 
      001B54                       1227 	_xpop  
      001B54 90 F6            [ 1]    1     ld a,(y)
      001B56 93               [ 1]    2     ldw x,y 
      001B57 EE 01            [ 2]    3     ldw x,(1,x)
      001B59 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001B5D 4D               [ 1] 1228 	tnz a 
      001B5E 2B 08            [ 1] 1229 	jrmi 4$
      001B60 26 0C            [ 1] 1230 	jrne 5$
      001B62 35 02 00 0E      [ 1] 1231 	mov acc8,#2 ; i1==i2
      001B66 20 0A            [ 2] 1232 	jra 6$ 
      001B68                       1233 4$: ; i1<i2
      001B68 35 04 00 0E      [ 1] 1234 	mov acc8,#4 
      001B6C 20 04            [ 2] 1235 	jra 6$
      001B6E                       1236 5$: ; i1>i2
      001B6E 35 01 00 0E      [ 1] 1237 	mov acc8,#1  
      001B72                       1238 6$: ; 0=false, -1=true 
      001B72 5F               [ 1] 1239 	clrw x 
      001B73 C6 00 0E         [ 1] 1240 	ld a, acc8  
      001B76 14 01            [ 1] 1241 	and a,(RELOP,sp)
      001B78 27 03            [ 1] 1242 	jreq 7$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



      001B7A 53               [ 2] 1243 	cplw x 
      001B7B A6 FF            [ 1] 1244 	ld a,#255 
      001B7D                       1245 7$:	_xpush 
      001B7D 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001B81 90 F7            [ 1]    2     ld (y),a 
      001B83 90 EF 01         [ 2]    3     ldw (1,y),x 
      001B86 A6 84            [ 1] 1246 	ld a,#TK_INTGR
      001B88                       1247 9$: 
      001B88                       1248 	_drop VSIZE
      001B88 5B 01            [ 2]    1     addw sp,#VSIZE 
      001B8A 81               [ 4] 1249 	ret 
                                   1250 
                                   1251 ;-------------------------------------------
                                   1252 ;  AND factor:  [NOT] relation | (condition)
                                   1253 ;  output:
                                   1254 ;     A      TK_INTGR|0
                                   1255 ;-------------------------------------------
                           000001  1256 	NOT_OP=1
      001B8B                       1257 and_factor:
      001B8B 4B 00            [ 1] 1258 	push #0 
      001B8D CD 17 E8         [ 4] 1259 0$:	call next_token  
      001B90 4D               [ 1] 1260 	tnz a 
      001B91 27 25            [ 1] 1261 	jreq 8$ 
      001B93 A1 87            [ 1] 1262 	cp a,#TK_NOT 
      001B95 26 04            [ 1] 1263 	jrne 1$ 
      001B97 03 01            [ 1] 1264 	cpl (NOT_OP,sp)
      001B99 20 F2            [ 2] 1265 	jra 0$ 
      001B9B                       1266 1$:	
      001B9B A1 06            [ 1] 1267 	cp a,#TK_LPAREN 
      001B9D 26 0A            [ 1] 1268 	jrne 2$
      001B9F CD 1C 0D         [ 4] 1269 	call condition
      001BA2 A6 07            [ 1] 1270 	ld a,#TK_RPAREN 
      001BA4 CD 19 9E         [ 4] 1271 	call expect
      001BA7 20 08            [ 2] 1272 	jra 3$
      001BA9                       1273 2$: _unget_token 
      001BA9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BAE CD 1B 2C         [ 4] 1274 	call relation
      001BB1                       1275 3$:
      001BB1 0D 01            [ 1] 1276 	tnz (NOT_OP,sp)
      001BB3 27 03            [ 1] 1277 	jreq 8$ 
      001BB5 CD 01 FA         [ 4] 1278 	call cpl24
      001BB8                       1279 8$:
      001BB8                       1280 	_drop 1  
      001BB8 5B 01            [ 2]    1     addw sp,#1 
      001BBA 81               [ 4] 1281     ret 
                                   1282 
                                   1283 
                                   1284 ;--------------------------------------------
                                   1285 ;  AND operator as priority over OR||XOR 
                                   1286 ;  format: relation | (condition) [AND relation|(condition)]*
                                   1287 ;          
                                   1288 ;  output:
                                   1289 ;     A     TK_INTGR|0
                                   1290 ;    xtack   value 
                                   1291 ;--------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      001BBB                       1292 and_cond:
      001BBB CD 1B 8B         [ 4] 1293 	call and_factor
      001BBE 4D               [ 1] 1294 	tnz a 
      001BBF 27 4B            [ 1] 1295 	jreq 9$  
      001BC1 CD 17 E8         [ 4] 1296 1$: call next_token 
      001BC4 4D               [ 1] 1297 	tnz a 
      001BC5 27 43            [ 1] 1298 	jreq 6$ 
      001BC7 A1 88            [ 1] 1299 	cp a,#TK_AND 
      001BC9 27 07            [ 1] 1300 	jreq 3$
      001BCB                       1301 	_unget_token 
      001BCB 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001BD0 20 38            [ 2] 1302 	jra 6$ 
      001BD2 CD 1B 8B         [ 4] 1303 3$:	call and_factor  
      001BD5 4D               [ 1] 1304 	tnz a 
      001BD6 26 03            [ 1] 1305 	jrne 4$
      001BD8 CC 16 84         [ 2] 1306 	jp syntax_error 
      001BDB                       1307 4$:	
      001BDB                       1308 	_xpop 
      001BDB 90 F6            [ 1]    1     ld a,(y)
      001BDD 93               [ 1]    2     ldw x,y 
      001BDE EE 01            [ 2]    3     ldw x,(1,x)
      001BE0 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BE4 C7 00 0C         [ 1] 1309 	ld acc24,a 
      001BE7 CF 00 0D         [ 2] 1310 	ldw acc16,x
      001BEA                       1311 	_xpop 
      001BEA 90 F6            [ 1]    1     ld a,(y)
      001BEC 93               [ 1]    2     ldw x,y 
      001BED EE 01            [ 2]    3     ldw x,(1,x)
      001BEF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001BF3 C4 00 0C         [ 1] 1312 	and a,acc24 
      001BF6 02               [ 1] 1313 	rlwa x 
      001BF7 C4 00 0D         [ 1] 1314 	and a,acc16 
      001BFA 02               [ 1] 1315 	rlwa x 
      001BFB C4 00 0E         [ 1] 1316 	and a,acc8 
      001BFE 02               [ 1] 1317 	rlwa x
      001BFF                       1318 	_xpush
      001BFF 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      001C03 90 F7            [ 1]    2     ld (y),a 
      001C05 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C08 20 B7            [ 2] 1319 	jra 1$  
      001C0A A6 84            [ 1] 1320 6$: ld a,#TK_INTGR 
      001C0C 81               [ 4] 1321 9$:	ret 	 
                                   1322 
                                   1323 
                                   1324 ;--------------------------------------------
                                   1325 ; condition for IF and UNTIL 
                                   1326 ; operators: OR,XOR 
                                   1327 ; format:  and_cond [ OP and_cond ]* 
                                   1328 ; output:
                                   1329 ;    A        INTGR|0 
                                   1330 ;    xstack   value 
                                   1331 ;--------------------------------------------
                           000001  1332 	ATMP=1
                           000002  1333 	OP=2
                           000002  1334 	VSIZE=2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      001C0D                       1335 condition:
      001C0D                       1336 	_vars VSIZE 
      001C0D 52 02            [ 2]    1     sub sp,#VSIZE 
      001C0F CD 1B BB         [ 4] 1337 	call and_cond
      001C12 4D               [ 1] 1338 	tnz a 
      001C13 27 69            [ 1] 1339 	jreq 9$ 
      001C15 CD 17 E8         [ 4] 1340 1$:	call next_token 
      001C18 A1 89            [ 1] 1341 	cp a,#TK_OR 
      001C1A 27 0B            [ 1] 1342 	jreq 2$
      001C1C A1 8A            [ 1] 1343 	cp a,#TK_XOR
      001C1E 27 07            [ 1] 1344 	jreq 2$ 
      001C20                       1345 	_unget_token 
      001C20 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001C25 20 55            [ 2] 1346 	jra 8$ 
      001C27 6B 02            [ 1] 1347 2$:	ld (OP,sp),a ; TK_OR|TK_XOR 
      001C29 CD 1B BB         [ 4] 1348 	call and_cond
      001C2C A1 84            [ 1] 1349 	cp a,#TK_INTGR 
      001C2E 27 03            [ 1] 1350 	jreq 3$
      001C30 CC 16 84         [ 2] 1351 	jp syntax_error 
      001C33                       1352 3$:	 
      001C33                       1353 	_xpop  ; rigth arg 
      001C33 90 F6            [ 1]    1     ld a,(y)
      001C35 93               [ 1]    2     ldw x,y 
      001C36 EE 01            [ 2]    3     ldw x,(1,x)
      001C38 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C3C C7 00 0C         [ 1] 1354 	ld acc24,a 
      001C3F CF 00 0D         [ 2] 1355 	ldw acc16,x 
      001C42                       1356 	_xpop  ; left arg  
      001C42 90 F6            [ 1]    1     ld a,(y)
      001C44 93               [ 1]    2     ldw x,y 
      001C45 EE 01            [ 2]    3     ldw x,(1,x)
      001C47 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001C4B 6B 01            [ 1] 1357 	ld (ATMP,sp),a 
      001C4D 7B 02            [ 1] 1358 	ld a,(OP,sp)
      001C4F A1 8A            [ 1] 1359 	cp a,#TK_XOR 
      001C51 27 10            [ 1] 1360 	jreq 5$ 
      001C53                       1361 4$: ; A:X OR acc24   
      001C53 7B 01            [ 1] 1362 	ld a,(ATMP,sp)
      001C55 CA 00 0C         [ 1] 1363 	or a,acc24 
      001C58 02               [ 1] 1364 	rlwa x 
      001C59 CA 00 0D         [ 1] 1365 	or a,acc16 
      001C5C 02               [ 1] 1366 	rlwa x 
      001C5D CA 00 0E         [ 1] 1367 	or a,acc8 
      001C60 02               [ 1] 1368 	rlwa x 
      001C61 20 0E            [ 2] 1369 	jra 6$  
      001C63                       1370 5$: ; A:X XOR acc24 
      001C63 7B 01            [ 1] 1371 	ld a,(ATMP,sp)
      001C65 C8 00 0C         [ 1] 1372 	xor a,acc24 
      001C68 02               [ 1] 1373 	rlwa x 
      001C69 C8 00 0D         [ 1] 1374 	xor a,acc16 
      001C6C 02               [ 1] 1375 	rlwa x 
      001C6D C8 00 0E         [ 1] 1376 	xor a,acc8 
      001C70 02               [ 1] 1377 	rlwa x 
      001C71                       1378 6$: _xpush
      001C71 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      001C75 90 F7            [ 1]    2     ld (y),a 
      001C77 90 EF 01         [ 2]    3     ldw (1,y),x 
      001C7A 20 99            [ 2] 1379 	jra 1$ 
      001C7C A6 84            [ 1] 1380 8$:	ld a,#TK_INTGR 
      001C7E                       1381 9$:	_drop VSIZE 
      001C7E 5B 02            [ 2]    1     addw sp,#VSIZE 
      001C80 81               [ 4] 1382 	ret 
                                   1383 
                                   1384 
                                   1385 ;--------------------------------------------
                                   1386 ; BASIC: HEX 
                                   1387 ; select hexadecimal base for integer print
                                   1388 ;---------------------------------------------
      001C81                       1389 hex_base:
      001C81 35 10 00 0A      [ 1] 1390 	mov base,#16 
      001C85 81               [ 4] 1391 	ret 
                                   1392 
                                   1393 ;--------------------------------------------
                                   1394 ; BASIC: DEC 
                                   1395 ; select decimal base for integer print
                                   1396 ;---------------------------------------------
      001C86                       1397 dec_base:
      001C86 35 0A 00 0A      [ 1] 1398 	mov base,#10
      001C8A 81               [ 4] 1399 	ret 
                                   1400 
                                   1401 ;------------------------
                                   1402 ; BASIC: FREE 
                                   1403 ; return free size in RAM 
                                   1404 ; output:
                                   1405 ;   A:x		size 
                                   1406 ;--------------------------
      001C8B                       1407 free:
      001C8B 4F               [ 1] 1408 	clr a 
      001C8C AE 16 90         [ 2] 1409 	ldw x,#tib 
      001C8F 72 B0 00 32      [ 2] 1410 	subw x,dvar_end 
      001C93 81               [ 4] 1411 	ret 
                                   1412 
                                   1413 ;------------------------------
                                   1414 ; BASIC: SIZE 
                                   1415 ; command that print 
                                   1416 ; program start addres and size 
                                   1417 ;------------------------------
      001C94                       1418 cmd_size:
      001C94 3B 00 0A         [ 1] 1419 	push base 
      001C97 AE 1E 81         [ 2] 1420 	ldw x,#PROG_ADDR 
      001C9A CD 09 5C         [ 4] 1421 	call puts 
      001C9D CE 00 1B         [ 2] 1422 	ldw x,txtbgn     
      001CA0 35 10 00 0A      [ 1] 1423 	mov base,#16 
      001CA4 CD 18 30         [ 4] 1424 	call prt_i16
      001CA7 32 00 0A         [ 1] 1425 	pop base 
      001CAA AE 1E 93         [ 2] 1426 	ldw x,#PROG_SIZE 
      001CAD CD 09 5C         [ 4] 1427 	call puts 
      001CB0 CE 00 1D         [ 2] 1428 	ldw x,txtend 
      001CB3 72 B0 00 1B      [ 2] 1429 	subw x,txtbgn 
      001CB7 CD 18 30         [ 4] 1430 	call prt_i16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      001CBA AE 1E A4         [ 2] 1431 	ldw x,#STR_BYTES 
      001CBD CD 09 5C         [ 4] 1432 	call puts  
      001CC0 81               [ 4] 1433 	ret 
                                   1434 
                                   1435 
                                   1436 ;------------------------
                                   1437 ; BASIC: UBOUND  
                                   1438 ; return array variable size 
                                   1439 ; and set 'array_size' variable 
                                   1440 ; output:
                                   1441 ;   A:X 	array_size
                                   1442 ;--------------------------
      001CC1                       1443 ubound:
      001CC1 CD 1C 8B         [ 4] 1444 	call free 
      001CC4 A6 03            [ 1] 1445 	ld a,#CELL_SIZE 
      001CC6 62               [ 2] 1446 	div x,a 
      001CC7 CF 00 20         [ 2] 1447 	ldw array_size,x
      001CCA 4F               [ 1] 1448 	clr a 
      001CCB 81               [ 4] 1449 	ret 
                                   1450 
                                   1451 ;-----------------------------
                                   1452 ; BASIC: LET var=expr 
                                   1453 ; variable assignement 
                                   1454 ; output:
                                   1455 ;   A 		TK_NONE 
                                   1456 ;-----------------------------
      001CCC                       1457 let::
      001CCC CD 17 E8         [ 4] 1458 	call next_token 
      001CCF A1 85            [ 1] 1459 	cp a,#TK_VAR 
      001CD1 27 0C            [ 1] 1460 	jreq let_var
      001CD3 A1 05            [ 1] 1461 	cp a,#TK_ARRAY 
      001CD5 27 03            [ 1] 1462 	jreq  let_array
      001CD7 CC 16 84         [ 2] 1463 	jp syntax_error
      001CDA                       1464 let_array:
      001CDA CD 19 CC         [ 4] 1465 	call get_array_element
      001CDD 20 03            [ 2] 1466 	jra let_eval 
      001CDF                       1467 let_var:
      001CDF CD 18 10         [ 4] 1468 	call get_addr
      001CE2                       1469 let_eval:
      001CE2 CF 00 19         [ 2] 1470 	ldw ptr16,x  ; variable address 
      001CE5 CD 17 E8         [ 4] 1471 	call next_token 
      001CE8 A1 32            [ 1] 1472 	cp a,#TK_EQUAL
      001CEA 27 03            [ 1] 1473 	jreq 1$
      001CEC CC 16 84         [ 2] 1474 	jp syntax_error
      001CEF                       1475 1$:	
      001CEF CD 1C 0D         [ 4] 1476 	call condition   
      001CF2 A1 84            [ 1] 1477 	cp a,#TK_INTGR 
      001CF4 27 03            [ 1] 1478 	jreq 2$
      001CF6 CC 16 84         [ 2] 1479 	jp syntax_error
      001CF9                       1480 2$:	
      001CF9                       1481 	_xpop ; value 
      001CF9 90 F6            [ 1]    1     ld a,(y)
      001CFB 93               [ 1]    2     ldw x,y 
      001CFC EE 01            [ 2]    3     ldw x,(1,x)
      001CFE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      001D02                       1482 3$:
      001D02 72 C7 00 19      [ 4] 1483 	ld [ptr16],a
      001D06 72 5C 00 1A      [ 1] 1484 	inc ptr8  
      001D0A 72 CF 00 19      [ 5] 1485 	ldw [ptr16],x 
      001D0E 81               [ 4] 1486 	ret 
                                   1487 
                                   1488 
                                   1489 ;--------------------------
                                   1490 ; return constant/dvar value 
                                   1491 ; from it's record address
                                   1492 ; input:
                                   1493 ;	X	*const record 
                                   1494 ; output:
                                   1495 ;   A:X   const  value
                                   1496 ;--------------------------
      001D0F                       1497 get_value: ; -- i 
      001D0F F6               [ 1] 1498 	ld a,(x) ; record size 
      001D10 A4 0F            [ 1] 1499 	and a,#NAME_MAX_LEN
      001D12 A0 03            [ 1] 1500 	sub a,#CELL_SIZE ; * value 
      001D14 88               [ 1] 1501 	push a 
      001D15 4B 00            [ 1] 1502 	push #0 
      001D17 72 FB 01         [ 2] 1503 	addw x,(1,sp)
      001D1A F6               [ 1] 1504 	ld a,(x)
      001D1B EE 01            [ 2] 1505 	ldw x,(1,x)
      001D1D                       1506 	_drop 2
      001D1D 5B 02            [ 2]    1     addw sp,#2 
      001D1F 81               [ 4] 1507 	ret 
                                   1508 
                                   1509 
                                   1510 ;--------------------------
                                   1511 ; BASIC: EEFREE 
                                   1512 ; eeprom_free 
                                   1513 ; search end of data  
                                   1514 ; in EEPROM 
                                   1515 ; input:
                                   1516 ;    none 
                                   1517 ; output:
                                   1518 ;    A:X     address free
                                   1519 ;-------------------------
      001D20                       1520 func_eefree:
      001D20 AE 40 00         [ 2] 1521 	ldw x,#EEPROM_BASE 
      001D23 35 08 00 0E      [ 1] 1522 1$:	mov acc8,#8 ; count 8 consecutive zeros
      001D27 A3 47 F8         [ 2] 1523     cpw x,#EEPROM_BASE+EEPROM_SIZE-8
      001D2A 24 17            [ 1] 1524 	jruge 8$ ; no free space 
      001D2C F6               [ 1] 1525 2$: ld a,(x)
      001D2D 26 0C            [ 1] 1526 	jrne 3$
      001D2F 5C               [ 1] 1527 	incw x 
      001D30 72 5A 00 0E      [ 1] 1528 	dec acc8 
      001D34 26 F6            [ 1] 1529 	jrne 2$
      001D36 1D 00 08         [ 2] 1530 	subw x,#8 
      001D39 20 09            [ 2] 1531 	jra 9$  
      001D3B F6               [ 1] 1532 3$: ld a,(x)
      001D3C 5C               [ 1] 1533 	incw x
      001D3D 4D               [ 1] 1534 	tnz a  
      001D3E 26 FB            [ 1] 1535 	jrne 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      001D40 5A               [ 2] 1536 	decw x   
      001D41 20 E0            [ 2] 1537 	jra 1$ 
      001D43 5F               [ 1] 1538 8$: clrw x ; no free space 
      001D44 4F               [ 1] 1539 9$: clr a 
      001D45 CF 00 24         [ 2] 1540 	ldw free_eeprom,x ; save in system variable 
      001D48 81               [ 4] 1541 	ret 
                                   1542 
                           000005  1543 REC_XTRA_BYTES=5 
                                   1544 ;--------------------------
                                   1545 ; search constant/dim_var name 
                                   1546 ; format of record  
                                   1547 ;   .byte record length 
                                   1548 ;         = strlen(name)+5 
                                   1549 ;   .asciz name (variable length)
                                   1550 ;   .int24 value (3 bytes )
                                   1551 ; a constant record use 7+ bytes
                                   1552 ; constants are saved in EEPROM  
                                   1553 ; input:
                                   1554 ;    A     record_len 
                                   1555 ;    X     *name
                                   1556 ; output:
                                   1557 ;    X     address|0
                                   1558 ; use:
                                   1559 ;   A,Y, acc16 
                                   1560 ;-------------------------
                           000001  1561 	NAMEPTR=1 ; target name pointer 
                           000003  1562 	WLKPTR=3   ; walking pointer in EEPROM||RAM 
                           000005  1563 	RECLEN=5  ; record length of target
                           000007  1564 	LIMIT=7   ; search area limit 
                           000008  1565 	VSIZE=8  
      001D49                       1566 search_name:
      001D49 90 89            [ 2] 1567 	pushw y 
      001D4B                       1568 	_vars VSIZE
      001D4B 52 08            [ 2]    1     sub sp,#VSIZE 
      001D4D 72 5F 00 0D      [ 1] 1569 	clr acc16 
      001D51 6B 05            [ 1] 1570 	ld (RECLEN,sp),a    
      001D53 1F 01            [ 2] 1571 	ldw (NAMEPTR,sp),x
      001D55 CE 00 32         [ 2] 1572 	ldw x,dvar_end 
      001D58 1F 07            [ 2] 1573 	ldw (LIMIT,sp),x 
      001D5A 90 CE 00 30      [ 2] 1574 	ldw y,dvar_bgn
      001D5E 17 03            [ 2] 1575 1$:	ldw (WLKPTR,sp),y
      001D60 93               [ 1] 1576 	ldw x,y 
      001D61 13 07            [ 2] 1577 	cpw x, (LIMIT,sp) 
      001D63 24 20            [ 1] 1578 	jruge 7$ ; no match found 
      001D65 90 F6            [ 1] 1579 	ld a,(y)
      001D67 A4 0F            [ 1] 1580 	and a,#NAME_MAX_LEN
      001D69 11 05            [ 1] 1581 	cp a,(RECLEN,sp)
      001D6B 26 09            [ 1] 1582 	jrne 2$ 
      001D6D 90 5C            [ 1] 1583 	incw y 
      001D6F 1E 01            [ 2] 1584 	ldw x,(NAMEPTR,sp)
      001D71 CD 13 91         [ 4] 1585 	call strcmp
      001D74 26 13            [ 1] 1586 	jrne 8$ ; match found 
      001D76                       1587 2$: ; skip this one 	
      001D76 16 03            [ 2] 1588 	ldW Y,(WLKPTR,sp)
      001D78 90 F6            [ 1] 1589 	ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      001D7A A4 0F            [ 1] 1590 	and a,#NAME_MAX_LEN 
      001D7C C7 00 0E         [ 1] 1591 	ld acc8,a 
      001D7F 72 B9 00 0D      [ 2] 1592 	addw y,acc16 
      001D83 20 D9            [ 2] 1593 	jra 1$  
      001D85                       1594 7$: ; no match found 
      001D85 0F 03            [ 1] 1595 	clr (WLKPTR,sp)
      001D87 0F 04            [ 1] 1596 	clr (WLKPTR+1,sp)
      001D89                       1597 8$: ; match found 
      001D89 1E 03            [ 2] 1598 	ldw x,(WLKPTR,sp) ; record address 
      001D8B                       1599 9$:	_DROP VSIZE
      001D8B 5B 08            [ 2]    1     addw sp,#VSIZE 
      001D8D 90 85            [ 2] 1600 	popw y 
      001D8F 81               [ 4] 1601 	 ret 
                                   1602 
                                   1603 ;--------------------------------------------
                                   1604 ; BASIC: CONST name=value [, name=value]*
                                   1605 ; define constant(s) saved in EEPROM
                                   1606 ; share most of his code with cmd_dim 
                                   1607 ;--------------------------------------------
                           000001  1608 	VAR_NAME=1 
                           000003  1609 	REC_LEN=3
                           000005  1610 	RONLY=5
                           000005  1611 	VSIZE=5
      001D90                       1612 cmd_const:
      001D90 72 00 00 22 05   [ 2] 1613 	btjt flags,#FRUN,0$
      001D95 A6 06            [ 1] 1614 	ld a,#ERR_RUN_ONLY
      001D97 CC 16 86         [ 2] 1615 	jp tb_error 
      001D9A                       1616 0$: 
      001D9A                       1617 	_vars VSIZE 
      001D9A 52 05            [ 2]    1     sub sp,#VSIZE 
      001D9C A6 80            [ 1] 1618 	ld a,#128 
      001D9E 6B 05            [ 1] 1619 	ld (RONLY,sp),a 
      001DA0 0F 03            [ 1] 1620 	clr (REC_LEN,sp)
      001DA2 20 10            [ 2] 1621 	jra cmd_dim2 ; shared code with cmd_dim  
                                   1622 
                                   1623 ;---------------------------------
                                   1624 ; BASIC: DIM var_name [var_name]* 
                                   1625 ; create named variables at end 
                                   1626 ; of BASIC program. 
                                   1627 ; These variables are initialized 
                                   1628 ; to 0. 
                                   1629 ; record format same ast CONST 
                                   1630 ; but r/w because stored in RAM 
                                   1631 ;---------------------------------
      001DA4                       1632 cmd_dim:
      001DA4 72 00 00 22 05   [ 2] 1633 	btjt flags,#FRUN,cmd_dim1
      001DA9 A6 06            [ 1] 1634 	ld a,#ERR_RUN_ONLY
      001DAB CC 16 86         [ 2] 1635 	jp tb_error 
      001DAE                       1636 cmd_dim1:	
      001DAE                       1637 	_vars VSIZE
      001DAE 52 05            [ 2]    1     sub sp,#VSIZE 
      001DB0 0F 03            [ 1] 1638 	clr (REC_LEN,sp )
      001DB2 0F 05            [ 1] 1639 	clr (RONLY,sp)
      001DB4                       1640 cmd_dim2: 
      001DB4 CD 17 E8         [ 4] 1641 0$:	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



      001DB7 A1 03            [ 1] 1642 	cp a,#TK_LABEL  
      001DB9 27 03            [ 1] 1643 	jreq 1$ 
      001DBB CC 16 84         [ 2] 1644 	jp syntax_error 
      001DBE 1F 01            [ 2] 1645 1$: ldw (VAR_NAME,sp),x ; name pointer 
      001DC0 CD 13 86         [ 4] 1646 	call strlen
      001DC3 AB 05            [ 1] 1647 	add a,#REC_XTRA_BYTES
      001DC5 6B 04            [ 1] 1648 	ld (REC_LEN+1,sp),a
      001DC7 CD 18 01         [ 4] 1649 	call skip_string 
      001DCA 7B 04            [ 1] 1650 	ld a,(REC_LEN+1,sp)
      001DCC 1E 01            [ 2] 1651 	ldw x,(VAR_NAME,sp) 
      001DCE CD 1D 49         [ 4] 1652 	call search_name  
      001DD1 5D               [ 2] 1653 	tnzw x 
      001DD2 27 05            [ 1] 1654 	jreq 2$
      001DD4 A6 08            [ 1] 1655 	ld a,#ERR_DUPLICATE
      001DD6 CC 16 86         [ 2] 1656 	jp tb_error  
      001DD9 CE 00 32         [ 2] 1657 2$:	ldw x,dvar_end 
      001DDC 7B 04            [ 1] 1658 	ld a,(REC_LEN+1,sp)
      001DDE 1A 05            [ 1] 1659 	or a,(RONLY,sp)
      001DE0 F7               [ 1] 1660 	ld (x),a 
      001DE1 5C               [ 1] 1661 	incw x 
      001DE2 90 89            [ 2] 1662 	pushw y 
      001DE4 16 03            [ 2] 1663 	ldw y,(VAR_NAME+2,sp)
      001DE6 CD 13 A2         [ 4] 1664 	call strcpy
      001DE9 90 85            [ 2] 1665 	popw y 
      001DEB 5A               [ 2] 1666 	decw x
      001DEC 72 FB 03         [ 2] 1667 	addw x,(REC_LEN,sp)
      001DEF CF 00 32         [ 2] 1668 	ldw dvar_end,x 
      001DF2 1D 00 03         [ 2] 1669 	subw x,#CELL_SIZE  
      001DF5 7F               [ 1] 1670 	clr (x)
      001DF6 6F 01            [ 1] 1671 	clr (1,x)  
      001DF8 6F 02            [ 1] 1672 	clr (2,x)
      001DFA CD 17 E8         [ 4] 1673 4$: call next_token 
      001DFD A1 08            [ 1] 1674 	cp a,#TK_COMMA 
      001DFF 27 B3            [ 1] 1675 	jreq 0$ 
      001E01 A1 32            [ 1] 1676 	cp a,#TK_EQUAL 
      001E03 26 2A            [ 1] 1677 	jrne 8$
                                   1678 ; initialize variable 
      001E05 CD 1C 0D         [ 4] 1679 	call condition 
      001E08 A1 84            [ 1] 1680 	cp a,#TK_INTGR
      001E0A 27 03            [ 1] 1681 	jreq 5$
      001E0C CC 16 84         [ 2] 1682 	jp syntax_error
      001E0F CE 00 32         [ 2] 1683 5$: ldw x,dvar_end 
      001E12 1D 00 03         [ 2] 1684 	subw x,#CELL_SIZE 
      001E15 CF 00 19         [ 2] 1685 	ldw ptr16,x 
      001E18                       1686 	_xpop 
      001E18 90 F6            [ 1]    1     ld a,(y)
      001E1A 93               [ 1]    2     ldw x,y 
      001E1B EE 01            [ 2]    3     ldw x,(1,x)
      001E1D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      001E21 72 C7 00 19      [ 4] 1687 	ld [ptr16],a 
      001E25 72 5C 00 1A      [ 1] 1688 	inc ptr8 
      001E29 72 CF 00 19      [ 5] 1689 	ldw [ptr16],x 
      001E2D 20 CB            [ 2] 1690 	jra 4$ 
      001E2F                       1691 8$:	
      001E2F                       1692 	_unget_token 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      001E2F 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001E34                       1693 	_drop VSIZE 
      001E34 5B 05            [ 2]    1     addw sp,#VSIZE 
      001E36 CD 1C C1         [ 4] 1694 	call ubound 
      001E39 81               [ 4] 1695 	ret 
                                   1696 
                                   1697 
                                   1698 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1699 ; return program size 
                                   1700 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      001E3A                       1701 prog_size:
      001E3A CE 00 1D         [ 2] 1702 	ldw x,txtend 
      001E3D 72 B0 00 1B      [ 2] 1703 	subw x,txtbgn 
      001E41 81               [ 4] 1704 	ret 
                                   1705 
                                   1706 ;----------------------------
                                   1707 ; print program information 
                                   1708 ;---------------------------
      001E42                       1709 program_info: 
      001E42 AE 1E 81         [ 2] 1710 	ldw x,#PROG_ADDR 
      001E45 CD 09 5C         [ 4] 1711 	call puts 
      001E48 CE 00 1B         [ 2] 1712 	ldw x,txtbgn 
      001E4B 35 10 00 0A      [ 1] 1713 	mov base,#16 
      001E4F CD 18 30         [ 4] 1714 	call prt_i16
      001E52 35 0A 00 0A      [ 1] 1715 	mov base,#10  
      001E56 AE 1E 93         [ 2] 1716 	ldw x,#PROG_SIZE
      001E59 CD 09 5C         [ 4] 1717 	call puts 
      001E5C CD 1E 3A         [ 4] 1718 	call prog_size 
      001E5F CD 18 30         [ 4] 1719 	call prt_i16 
      001E62 AE 1E A4         [ 2] 1720 	ldw x,#STR_BYTES 
      001E65 CD 09 5C         [ 4] 1721 	call puts
      001E68 CE 00 1B         [ 2] 1722 	ldw x,txtbgn
      001E6B A3 37 84         [ 2] 1723 	cpw x,#app 
      001E6E 25 05            [ 1] 1724 	jrult 2$
      001E70 AE 1E AB         [ 2] 1725 	ldw x,#FLASH_MEM 
      001E73 20 03            [ 2] 1726 	jra 3$
      001E75 AE 1E BC         [ 2] 1727 2$: ldw x,#RAM_MEM 	 
      001E78 CD 09 5C         [ 4] 1728 3$:	call puts 
      001E7B A6 0D            [ 1] 1729 	ld a,#CR 
      001E7D CD 08 FF         [ 4] 1730 	call putc
      001E80 81               [ 4] 1731 	ret 
                                   1732 
      001E81 70 72 6F 67 72 61 6D  1733 PROG_ADDR: .asciz "program address: "
             20 61 64 64 72 65 73
             73 3A 20 00
      001E93 2C 20 70 72 6F 67 72  1734 PROG_SIZE: .asciz ", program size: "
             61 6D 20 73 69 7A 65
             3A 20 00
      001EA4 20 62 79 74 65 73 00  1735 STR_BYTES: .asciz " bytes" 
      001EAB 20 69 6E 20 46 4C 41  1736 FLASH_MEM: .asciz " in FLASH memory" 
             53 48 20 6D 65 6D 6F
             72 79 00
      001EBC 20 69 6E 20 52 41 4D  1737 RAM_MEM:   .asciz " in RAM memory" 
             20 6D 65 6D 6F 72 79
             00
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



                                   1738 
                                   1739 
                                   1740 ;----------------------------
                                   1741 ; BASIC: LIST [[start][,end]]
                                   1742 ; list program lines 
                                   1743 ; form start to end 
                                   1744 ; if empty argument list then 
                                   1745 ; list all.
                                   1746 ;----------------------------
                           000001  1747 	FIRST=1
                           000003  1748 	LAST=3 
                           000005  1749 	LN_PTR=5
                           000006  1750 	VSIZE=6 
      001ECB                       1751 list:
      001ECB 72 01 00 22 05   [ 2] 1752 	btjf flags,#FRUN,0$
      001ED0 A6 07            [ 1] 1753 	ld a,#ERR_CMD_ONLY
      001ED2 CC 16 86         [ 2] 1754 	jp tb_error
      001ED5                       1755 0$:	 
      001ED5 CD 1E 3A         [ 4] 1756 	call prog_size 
      001ED8 22 01            [ 1] 1757 	jrugt 3$
      001EDA 81               [ 4] 1758 	ret 
      001EDB                       1759 3$: _vars VSIZE
      001EDB 52 06            [ 2]    1     sub sp,#VSIZE 
      001EDD CE 00 1B         [ 2] 1760 	ldw x,txtbgn 
      001EE0 1F 05            [ 2] 1761 	ldw (LN_PTR,sp),x 
      001EE2 FE               [ 2] 1762 	ldw x,(x) 
      001EE3 1F 01            [ 2] 1763 	ldw (FIRST,sp),x ; list from first line 
      001EE5 AE 7F FF         [ 2] 1764 	ldw x,#MAX_LINENO ; biggest line number 
      001EE8 1F 03            [ 2] 1765 	ldw (LAST,sp),x 
      001EEA CD 19 B0         [ 4] 1766 	call arg_list
      001EED 4D               [ 1] 1767 	tnz a
      001EEE 27 31            [ 1] 1768 	jreq list_loop 
      001EF0 A1 02            [ 1] 1769 	cp a,#2 
      001EF2 27 07            [ 1] 1770 	jreq 4$
      001EF4 A1 01            [ 1] 1771 	cp a,#1 
      001EF6 27 06            [ 1] 1772 	jreq first_line 
      001EF8 CC 16 84         [ 2] 1773 	jp syntax_error 
      001EFB 85               [ 2] 1774 4$:	popw x 
      001EFC 1F 05            [ 2] 1775 	ldw (LAST+2,sp),x 
      001EFE                       1776 first_line:
      001EFE 85               [ 2] 1777 	popw x
      001EFF 1F 01            [ 2] 1778 	ldw (FIRST,sp),x 
      001F01                       1779 lines_skip:
      001F01 CE 00 1B         [ 2] 1780 	ldw x,txtbgn
      001F04 1F 05            [ 2] 1781 2$:	ldw (LN_PTR,sp),x 
      001F06 C3 00 1D         [ 2] 1782 	cpw x,txtend 
      001F09 2A 38            [ 1] 1783 	jrpl list_exit 
      001F0B FE               [ 2] 1784 	ldw x,(x) ;line# 
      001F0C 13 01            [ 2] 1785 	cpw x,(FIRST,sp)
      001F0E 2A 11            [ 1] 1786 	jrpl list_loop 
      001F10 1E 05            [ 2] 1787 	ldw x,(LN_PTR,sp) 
      001F12 E6 02            [ 1] 1788 	ld a,(2,x)
      001F14 C7 00 0E         [ 1] 1789 	ld acc8,a 
      001F17 72 5F 00 0D      [ 1] 1790 	clr acc16 
      001F1B 72 BB 00 0D      [ 2] 1791 	addw x,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



      001F1F 20 E3            [ 2] 1792 	jra 2$ 
                                   1793 ; print loop
      001F21                       1794 list_loop:
      001F21 1E 05            [ 2] 1795 	ldw x,(LN_PTR,sp)
      001F23 E6 02            [ 1] 1796 	ld a,(2,x) 
      001F25 CD 1F 95         [ 4] 1797 	call prt_basic_line
      001F28 1E 05            [ 2] 1798 	ldw x,(LN_PTR,sp)
      001F2A E6 02            [ 1] 1799 	ld a,(2,x)
      001F2C C7 00 0E         [ 1] 1800 	ld acc8,a 
      001F2F 72 5F 00 0D      [ 1] 1801 	clr acc16 
      001F33 72 BB 00 0D      [ 2] 1802 	addw x,acc16
      001F37 C3 00 1D         [ 2] 1803 	cpw x,txtend 
      001F3A 2A 07            [ 1] 1804 	jrpl list_exit
      001F3C 1F 05            [ 2] 1805 	ldw (LN_PTR,sp),x
      001F3E FE               [ 2] 1806 	ldw x,(x)
      001F3F 13 03            [ 2] 1807 	cpw x,(LAST,sp)  
      001F41 2F DE            [ 1] 1808 	jrslt list_loop
      001F43                       1809 list_exit:
      001F43 55 00 03 00 01   [ 1] 1810 	mov in,count 
      001F48 AE 16 E0         [ 2] 1811 	ldw x,#pad 
      001F4B CF 00 04         [ 2] 1812 	ldw basicptr,x 
      001F4E                       1813 	_drop VSIZE 
      001F4E 5B 06            [ 2]    1     addw sp,#VSIZE 
      001F50 CD 1E 42         [ 4] 1814 	call program_info 
      001F53 81               [ 4] 1815 	ret
                                   1816 
                                   1817 
                                   1818 ;--------------------------
                                   1819 ; BASIC: EDIT addr 
                                   1820 ;  copy program in FLASH 
                                   1821 ;  to RAM for edition 
                                   1822 ;-------------------------
      001F54                       1823 edit:
      001F54 CD 17 E8         [ 4] 1824 	call next_token 
      001F57 A1 84            [ 1] 1825 	cp a,#TK_INTGR
      001F59 27 03            [ 1] 1826 	jreq 0$ 
      001F5B CC 16 84         [ 2] 1827 	jp syntax_error 
      001F5E CD 18 1A         [ 4] 1828 0$: call get_int24
      001F61 CD 24 CD         [ 4] 1829 	call is_program_addr
      001F64 27 06            [ 1] 1830 	jreq 1$ 
      001F66 AE 00 12         [ 2] 1831 	ldw x,#ERR_NO_PROGRAM
      001F69 CC 16 86         [ 2] 1832 	jp tb_error 
      001F6C 90 89            [ 2] 1833 1$: pushw y 
      001F6E 90 93            [ 1] 1834 	ldw y,x ; source address 
      001F70 1D 00 04         [ 2] 1835     subw x,#4 
      001F73 EE 02            [ 2] 1836 	ldw x,(2,x) ; program size 
      001F75 1C 00 04         [ 2] 1837 	addw x,#4 
      001F78 CF 00 0D         [ 2] 1838 	ldw acc16,x  ; bytes to copy 
      001F7B AE 00 8C         [ 2] 1839 	ldw x,#rsign ; destination address 
      001F7E 72 A2 00 04      [ 2] 1840 	subw y,#4 
      001F82 CD 13 B2         [ 4] 1841 	call move  
      001F85 AE 00 90         [ 2] 1842 	ldw x,#free_ram 
      001F88 CF 00 1B         [ 2] 1843 	ldw txtbgn,x 
      001F8B 72 BB 00 8E      [ 2] 1844 	addw x,rsize  
      001F8F CF 00 1D         [ 2] 1845 	ldw txtend,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      001F92 90 85            [ 2] 1846 	popw y  
      001F94 81               [ 4] 1847 	ret 
                                   1848 
                                   1849 ;--------------------------
                                   1850 ; decompile line from token list
                                   1851 ; and print it. 
                                   1852 ; input:
                                   1853 ;   A       stop at this position 
                                   1854 ;   X 		pointer at line
                                   1855 ; output:
                                   1856 ;   none 
                                   1857 ;--------------------------	
      001F95                       1858 prt_basic_line:
      001F95 90 89            [ 2] 1859 	pushw y 
      001F97 C7 00 03         [ 1] 1860 	ld count,a 
      001F9A E6 02            [ 1] 1861 	ld a,(2,x)
      001F9C C1 00 03         [ 1] 1862 	cp a,count 
      001F9F 2A 03            [ 1] 1863 	jrpl 1$ 
      001FA1 C7 00 03         [ 1] 1864 	ld count,a 
      001FA4 CF 00 04         [ 2] 1865 1$:	ldw basicptr,x 
      001FA7 90 AE 16 90      [ 2] 1866 	ldw y,#tib  
      001FAB CD 11 A2         [ 4] 1867 	call decompile 
      001FAE CD 09 5C         [ 4] 1868 	call puts 
      001FB1 A6 0D            [ 1] 1869 	ld a,#CR 
      001FB3 CD 08 FF         [ 4] 1870 	call putc 
      001FB6 90 85            [ 2] 1871 	popw y 
      001FB8 81               [ 4] 1872 	ret 
                                   1873 
                                   1874 
                                   1875 ;---------------------------------
                                   1876 ; BASIC: PRINT|? arg_list 
                                   1877 ; print values from argument list
                                   1878 ;----------------------------------
                           000001  1879 	CCOMMA=1
                           000001  1880 	VSIZE=1
      001FB9                       1881 print:
      001FB9                       1882 	_vars VSIZE 
      001FB9 52 01            [ 2]    1     sub sp,#VSIZE 
      001FBB                       1883 reset_comma:
      001FBB 0F 01            [ 1] 1884 	clr (CCOMMA,sp)
      001FBD                       1885 prt_loop:
      001FBD CD 17 E8         [ 4] 1886 	call next_token
      001FC0 A1 02            [ 1] 1887 	cp a,#CMD_END 
      001FC2 25 08            [ 1] 1888 	jrult 0$
      001FC4 A1 0A            [ 1] 1889 	cp a,#TK_COLON 
      001FC6 27 04            [ 1] 1890 	jreq 0$
      001FC8 A1 80            [ 1] 1891 	cp a,#TK_CMD
      001FCA 26 07            [ 1] 1892 	jrne 10$
      001FCC                       1893 0$:
      001FCC                       1894 	_unget_token 
      001FCC 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001FD1 20 63            [ 2] 1895 	jra 8$ 
      001FD3                       1896 10$:	
      001FD3 A1 02            [ 1] 1897 	cp a,#TK_QSTR
      001FD5 27 12            [ 1] 1898 	jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



      001FD7 A1 04            [ 1] 1899 	cp a,#TK_CHAR 
      001FD9 27 1B            [ 1] 1900 	jreq 2$ 
      001FDB A1 82            [ 1] 1901 	cp a,#TK_CFUNC 
      001FDD 27 1F            [ 1] 1902 	jreq 3$
      001FDF A1 08            [ 1] 1903 	cp a,#TK_COMMA 
      001FE1 27 2A            [ 1] 1904 	jreq 4$
      001FE3 A1 09            [ 1] 1905 	cp a,#TK_SHARP 
      001FE5 27 2A            [ 1] 1906 	jreq 5$
      001FE7 20 3D            [ 2] 1907 	jra 7$ 
      001FE9                       1908 1$:	; print string 
      001FE9 CD 09 5C         [ 4] 1909 	call puts
      001FEC 5C               [ 1] 1910 	incw x
      001FED 72 B0 00 04      [ 2] 1911 	subw x,basicptr 
      001FF1 CF 00 00         [ 2] 1912 	ldw in.w,x  
      001FF4 20 C5            [ 2] 1913 	jra reset_comma
      001FF6                       1914 2$:	; print character 
      001FF6 CD 18 2A         [ 4] 1915 	call get_char 
      001FF9 CD 08 FF         [ 4] 1916 	call putc 
      001FFC 20 BD            [ 2] 1917 	jra reset_comma 
      001FFE                       1918 3$: ; print character function value  	
      001FFE                       1919 	_get_code_addr 
      001FFE FE               [ 2]    1         ldw x,(x)
      001FFF 72 5C 00 01      [ 1]    2         inc in 
      002003 72 5C 00 01      [ 1]    3         inc in 
      002007 FD               [ 4] 1920 	call (x)
      002008 CD 08 FF         [ 4] 1921 	call putc
      00200B 20 AE            [ 2] 1922 	jra reset_comma 
      00200D                       1923 4$: ; set comma state 
      00200D 03 01            [ 1] 1924 	cpl (CCOMMA,sp)
      00200F 20 AC            [ 2] 1925 	jra prt_loop   
      002011                       1926 5$: ; # character must be followed by an integer   
      002011 CD 17 E8         [ 4] 1927 	call next_token
      002014 A1 84            [ 1] 1928 	cp a,#TK_INTGR 
      002016 27 03            [ 1] 1929 	jreq 6$
      002018 CC 16 84         [ 2] 1930 	jp syntax_error 
      00201B                       1931 6$: ; set tab width
      00201B CD 18 1A         [ 4] 1932 	call get_int24 
      00201E 9F               [ 1] 1933 	ld a,xl 
      00201F A4 0F            [ 1] 1934 	and a,#15 
      002021 C7 00 23         [ 1] 1935 	ld tab_width,a 
      002024 20 95            [ 2] 1936 	jra reset_comma 
      002026                       1937 7$:	
      002026                       1938 	_unget_token 
      002026 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      00202B CD 1C 0D         [ 4] 1939 	call condition
      00202E 4D               [ 1] 1940 	tnz a 
      00202F 27 05            [ 1] 1941 	jreq 8$    
      002031 CD 18 55         [ 4] 1942     call print_top
      002034 20 85            [ 2] 1943 	jra reset_comma 
      002036                       1944 8$:
      002036 0D 01            [ 1] 1945 	tnz (CCOMMA,sp)
      002038 26 05            [ 1] 1946 	jrne 9$
      00203A A6 0D            [ 1] 1947 	ld a,#CR 
      00203C CD 08 FF         [ 4] 1948     call putc 
      00203F                       1949 9$:	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



      00203F 5B 01            [ 2]    1     addw sp,#VSIZE 
      002041 81               [ 4] 1950 	ret 
                                   1951 
                                   1952 ;----------------------
                                   1953 ; 'save_context' and
                                   1954 ; 'rest_context' must be 
                                   1955 ; called at the same 
                                   1956 ; call stack depth 
                                   1957 ; i.e. SP must have the 
                                   1958 ; save value at  
                                   1959 ; entry point of both 
                                   1960 ; routine. 
                                   1961 ;---------------------
                           000004  1962 	CTXT_SIZE=4 ; size of saved data 
                                   1963 ;--------------------
                                   1964 ; save current BASIC
                                   1965 ; interpreter context 
                                   1966 ; on stack 
                                   1967 ;--------------------
      002042                       1968 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      002042                       1969 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      002042                       1970 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      002042                       1971 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      002042                       1972 save_context:
      002042 CE 00 04         [ 2] 1973 	ldw x,basicptr 
      002045 1F 03            [ 2] 1974 	ldw (BPTR,sp),x
      002047 C6 00 01         [ 1] 1975 	ld a,in 
      00204A 6B 05            [ 1] 1976 	ld (IN,sp),a
      00204C C6 00 03         [ 1] 1977 	ld a,count 
      00204F 6B 06            [ 1] 1978 	ld (CNT,sp),a  
      002051 81               [ 4] 1979 	ret
                                   1980 
                                   1981 ;-----------------------
                                   1982 ; restore previously saved 
                                   1983 ; BASIC interpreter context 
                                   1984 ; from stack 
                                   1985 ;-------------------------
      002052                       1986 rest_context:
      002052 1E 03            [ 2] 1987 	ldw x,(BPTR,sp)
      002054 CF 00 04         [ 2] 1988 	ldw basicptr,x 
      002057 7B 05            [ 1] 1989 	ld a,(IN,sp)
      002059 C7 00 01         [ 1] 1990 	ld in,a
      00205C 7B 06            [ 1] 1991 	ld a,(CNT,sp)
      00205E C7 00 03         [ 1] 1992 	ld count,a  
      002061 81               [ 4] 1993 	ret
                                   1994 
                                   1995 
                                   1996 
                                   1997 ;------------------------------------------
                                   1998 ; BASIC: INPUT [string]var[,[string]var]
                                   1999 ; input value in variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                   2000 ; [string] optionally can be used as prompt 
                                   2001 ;-----------------------------------------
                           000001  2002 	CX_BPTR=1
                           000003  2003 	CX_IN=3
                           000004  2004 	CX_CNT=4
                           000005  2005 	SKIP=5
                           000005  2006 	VSIZE=5
      002062                       2007 input_var:
      002062 90 89            [ 2] 2008 	pushw y 
      002064                       2009 	_vars VSIZE 
      002064 52 05            [ 2]    1     sub sp,#VSIZE 
      002066                       2010 input_loop:
      002066 0F 05            [ 1] 2011 	clr (SKIP,sp)
      002068 CD 17 E8         [ 4] 2012 	call next_token 
      00206B A1 02            [ 1] 2013 	cp a,#TK_QSTR 
      00206D 26 10            [ 1] 2014 	jrne 1$ 
      00206F CD 09 5C         [ 4] 2015 	call puts 
      002072 5C               [ 1] 2016 	incw x 
      002073 72 B0 00 04      [ 2] 2017 	subw x,basicptr 
      002077 CF 00 00         [ 2] 2018 	ldw in.w,x 
      00207A 03 05            [ 1] 2019 	cpl (SKIP,sp)
      00207C CD 17 E8         [ 4] 2020 	call next_token 
      00207F A1 85            [ 1] 2021 1$: cp a,#TK_VAR  
      002081 27 03            [ 1] 2022 	jreq 2$ 
      002083 CC 16 84         [ 2] 2023 	jp syntax_error
      002086 CD 18 10         [ 4] 2024 2$:	call get_addr
      002089 CF 00 19         [ 2] 2025 	ldw ptr16,x 
      00208C 0D 05            [ 1] 2026 	tnz (SKIP,sp)
      00208E 26 06            [ 1] 2027 	jrne 21$ 
      002090 CD 11 98         [ 4] 2028 	call var_name 
      002093 CD 08 FF         [ 4] 2029 	call putc   
      002096                       2030 21$:
      002096 A6 3A            [ 1] 2031 	ld a,#':
      002098 CD 08 FF         [ 4] 2032 	call putc 
      00209B CD 20 42         [ 4] 2033 	call save_context 
      00209E 72 5F 00 03      [ 1] 2034 	clr count  
      0020A2 CD 0A 61         [ 4] 2035 	call readln 
      0020A5 AE 16 90         [ 2] 2036 	ldw x,#tib 
      0020A8 3B 00 03         [ 1] 2037 	push count
      0020AB 4B 00            [ 1] 2038 	push #0 
      0020AD 72 FB 01         [ 2] 2039 	addw x,(1,sp)
      0020B0 5C               [ 1] 2040 	incw x 
      0020B1                       2041 	_drop 2 
      0020B1 5B 02            [ 2]    1     addw sp,#2 
      0020B3 72 5F 00 01      [ 1] 2042 	clr in 
      0020B7 CD 0E E2         [ 4] 2043 	call get_token
      0020BA A1 84            [ 1] 2044 	cp a,#TK_INTGR
      0020BC 27 14            [ 1] 2045 	jreq 3$ 
      0020BE A1 11            [ 1] 2046 	cp a,#TK_MINUS
      0020C0 26 07            [ 1] 2047 	jrne 22$
      0020C2 CD 0E E2         [ 4] 2048 	call get_token 
      0020C5 A1 84            [ 1] 2049 	cp a,#TK_INTGR 
      0020C7 27 06            [ 1] 2050 	jreq 23$
      0020C9                       2051 22$:
      0020C9 CD 20 52         [ 4] 2052 	call rest_context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



      0020CC CC 16 84         [ 2] 2053 	jp syntax_error
      0020CF                       2054 23$:
      0020CF CD 02 1D         [ 4] 2055 	call neg_acc24	
      0020D2                       2056 3$: 
      0020D2 C6 00 0C         [ 1] 2057 	ld a,acc24 
      0020D5 CE 00 0D         [ 2] 2058 	ldw x,acc16 
      0020D8 72 C7 00 19      [ 4] 2059 	ld [ptr16],a
      0020DC 72 5C 00 1A      [ 1] 2060 	inc ptr8  
      0020E0 72 CF 00 19      [ 5] 2061 	ldw [ptr16],x 
      0020E4 CD 20 52         [ 4] 2062 	call rest_context
      0020E7 CD 17 E8         [ 4] 2063 	call next_token 
      0020EA A1 08            [ 1] 2064 	cp a,#TK_COMMA
      0020EC 26 03            [ 1] 2065 	jrne 4$ 
      0020EE CC 20 66         [ 2] 2066 	jp input_loop
      0020F1                       2067 4$:
      0020F1 A1 00            [ 1] 2068 	cp a,#TK_NONE 
      0020F3 27 07            [ 1] 2069 	jreq input_exit  
      0020F5 A1 0A            [ 1] 2070 	cp a,#TK_COLON 
      0020F7 27 03            [ 1] 2071     jreq input_exit 
      0020F9 CC 16 84         [ 2] 2072 	jp syntax_error 
      0020FC                       2073 input_exit:
      0020FC                       2074 	_drop VSIZE 
      0020FC 5B 05            [ 2]    1     addw sp,#VSIZE 
      0020FE 90 85            [ 2] 2075 	popw y 
      002100 81               [ 4] 2076 	ret 
                                   2077 
                                   2078 
                                   2079 ;---------------------
                                   2080 ; BASIC: REM | ' 
                                   2081 ; skip comment to end of line 
                                   2082 ;---------------------- 
      002101                       2083 remark::
      002101 55 00 03 00 01   [ 1] 2084 	mov in,count 
      002106 81               [ 4] 2085  	ret 
                                   2086 
                                   2087 
                                   2088 ;---------------------
                                   2089 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2090 ; read in loop 'addr'  
                                   2091 ; apply & 'mask' to value 
                                   2092 ; loop while result==0.  
                                   2093 ; 'xor_mask' is used to 
                                   2094 ; invert the wait logic.
                                   2095 ; i.e. loop while not 0.
                                   2096 ;---------------------
                           000001  2097 	XMASK=1 
                           000002  2098 	MASK=2
                           000003  2099 	ADDR=3
                           000004  2100 	VSIZE=4
      002107                       2101 wait: 
      002107                       2102 	_vars VSIZE
      002107 52 04            [ 2]    1     sub sp,#VSIZE 
      002109 0F 01            [ 1] 2103 	clr (XMASK,sp) 
      00210B CD 19 B0         [ 4] 2104 	call arg_list 
      00210E A1 02            [ 1] 2105 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



      002110 24 03            [ 1] 2106 	jruge 0$
      002112 CC 16 84         [ 2] 2107 	jp syntax_error 
      002115 A1 03            [ 1] 2108 0$:	cp a,#3
      002117 25 0C            [ 1] 2109 	jrult 1$
      002119                       2110 	_xpop  ; xor mask 
      002119 90 F6            [ 1]    1     ld a,(y)
      00211B 93               [ 1]    2     ldw x,y 
      00211C EE 01            [ 2]    3     ldw x,(1,x)
      00211E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002122 9F               [ 1] 2111 	ld a,xl 
      002123 6B 01            [ 1] 2112 	ld (XMASK,sp),a 
      002125                       2113 1$: _xpop ; mask
      002125 90 F6            [ 1]    1     ld a,(y)
      002127 93               [ 1]    2     ldw x,y 
      002128 EE 01            [ 2]    3     ldw x,(1,x)
      00212A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00212E 9F               [ 1] 2114     ld a,xl  
      00212F 6B 02            [ 1] 2115 	ld (MASK,sp),a 
      002131                       2116 	_xpop ; address 
      002131 90 F6            [ 1]    1     ld a,(y)
      002133 93               [ 1]    2     ldw x,y 
      002134 EE 01            [ 2]    3     ldw x,(1,x)
      002136 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00213A F6               [ 1] 2117 2$:	ld a,(x)
      00213B 14 02            [ 1] 2118 	and a,(MASK,sp)
      00213D 18 01            [ 1] 2119 	xor a,(XMASK,sp)
      00213F 27 F9            [ 1] 2120 	jreq 2$ 
      002141                       2121 	_drop VSIZE 
      002141 5B 04            [ 2]    1     addw sp,#VSIZE 
      002143 81               [ 4] 2122 	ret 
                                   2123 
                                   2124 ;---------------------
                                   2125 ; BASIC: BSET addr,mask
                                   2126 ; set bits at 'addr' corresponding 
                                   2127 ; to those of 'mask' that are at 1.
                                   2128 ; arguments:
                                   2129 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2130 ;   mask        mask|addr
                                   2131 ; output:
                                   2132 ;	none 
                                   2133 ;--------------------------
      002144                       2134 bit_set:
      002144 CD 19 B0         [ 4] 2135 	call arg_list 
      002147 A1 02            [ 1] 2136 	cp a,#2	 
      002149 27 03            [ 1] 2137 	jreq 1$ 
      00214B CC 16 84         [ 2] 2138 	jp syntax_error
      00214E                       2139 1$: 
      00214E                       2140 	_xpop ; mask 
      00214E 90 F6            [ 1]    1     ld a,(y)
      002150 93               [ 1]    2     ldw x,y 
      002151 EE 01            [ 2]    3     ldw x,(1,x)
      002153 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002157 9F               [ 1] 2141 	ld a,xl
      002158 88               [ 1] 2142 	push a  
      002159                       2143 	_xpop ; addr  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



      002159 90 F6            [ 1]    1     ld a,(y)
      00215B 93               [ 1]    2     ldw x,y 
      00215C EE 01            [ 2]    3     ldw x,(1,x)
      00215E 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002162 84               [ 1] 2144 	pop a 
      002163 FA               [ 1] 2145 	or a,(x)
      002164 F7               [ 1] 2146 	ld (x),a
      002165 81               [ 4] 2147 	ret 
                                   2148 
                                   2149 ;---------------------
                                   2150 ; BASIC: BRES addr,mask
                                   2151 ; reset bits at 'addr' corresponding 
                                   2152 ; to those of 'mask' that are at 1.
                                   2153 ; arguments:
                                   2154 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2155 ;   mask	    ~mask&*addr  
                                   2156 ; output:
                                   2157 ;	none 
                                   2158 ;--------------------------
      002166                       2159 bit_reset:
      002166 CD 19 B0         [ 4] 2160 	call arg_list 
      002169 A1 02            [ 1] 2161 	cp a,#2  
      00216B 27 03            [ 1] 2162 	jreq 1$ 
      00216D CC 16 84         [ 2] 2163 	jp syntax_error
      002170                       2164 1$: 
      002170                       2165 	_xpop ; mask 
      002170 90 F6            [ 1]    1     ld a,(y)
      002172 93               [ 1]    2     ldw x,y 
      002173 EE 01            [ 2]    3     ldw x,(1,x)
      002175 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002179 9F               [ 1] 2166 	ld a,xl 
      00217A 43               [ 1] 2167 	cpl a
      00217B 88               [ 1] 2168 	push a  
      00217C                       2169 	_xpop ; addr  
      00217C 90 F6            [ 1]    1     ld a,(y)
      00217E 93               [ 1]    2     ldw x,y 
      00217F EE 01            [ 2]    3     ldw x,(1,x)
      002181 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002185 84               [ 1] 2170 	pop a 
      002186 F4               [ 1] 2171 	and a,(x)
      002187 F7               [ 1] 2172 	ld (x),a 
      002188 81               [ 4] 2173 	ret 
                                   2174 
                                   2175 ;---------------------
                                   2176 ; BASIC: BTOGL addr,mask
                                   2177 ; toggle bits at 'addr' corresponding 
                                   2178 ; to those of 'mask' that are at 1.
                                   2179 ; arguments:
                                   2180 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2181 ;   mask	    mask^*addr  
                                   2182 ; output:
                                   2183 ;	none 
                                   2184 ;--------------------------
      002189                       2185 bit_toggle:
      002189 CD 19 B0         [ 4] 2186 	call arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



      00218C A1 02            [ 1] 2187 	cp a,#2 
      00218E 27 03            [ 1] 2188 	jreq 1$ 
      002190 CC 16 84         [ 2] 2189 	jp syntax_error
      002193                       2190 1$: _xpop ; mask 
      002193 90 F6            [ 1]    1     ld a,(y)
      002195 93               [ 1]    2     ldw x,y 
      002196 EE 01            [ 2]    3     ldw x,(1,x)
      002198 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00219C 9F               [ 1] 2191 	ld a,xl
      00219D 88               [ 1] 2192 	push a 
      00219E                       2193 	_xpop  ; addr  
      00219E 90 F6            [ 1]    1     ld a,(y)
      0021A0 93               [ 1]    2     ldw x,y 
      0021A1 EE 01            [ 2]    3     ldw x,(1,x)
      0021A3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021A7 84               [ 1] 2194 	pop a 
      0021A8 F8               [ 1] 2195 	xor a,(x)
      0021A9 F7               [ 1] 2196 	ld (x),a 
      0021AA 81               [ 4] 2197 	ret 
                                   2198 
                                   2199 
                                   2200 ;---------------------
                                   2201 ; BASIC: BTEST(addr,bit)
                                   2202 ; return bit value at 'addr' 
                                   2203 ; bit is in range {0..7}.
                                   2204 ; arguments:
                                   2205 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2206 ;   bit 	    bit position {0..7}  
                                   2207 ; output:
                                   2208 ;	A:X       bit value  
                                   2209 ;--------------------------
      0021AB                       2210 bit_test:
      0021AB CD 19 AB         [ 4] 2211 	call func_args 
      0021AE A1 02            [ 1] 2212 	cp a,#2
      0021B0 27 03            [ 1] 2213 	jreq 0$
      0021B2 CC 16 84         [ 2] 2214 	jp syntax_error
      0021B5                       2215 0$:	
      0021B5                       2216 	_xpop 
      0021B5 90 F6            [ 1]    1     ld a,(y)
      0021B7 93               [ 1]    2     ldw x,y 
      0021B8 EE 01            [ 2]    3     ldw x,(1,x)
      0021BA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021BE 9F               [ 1] 2217 	ld a,xl 
      0021BF A4 07            [ 1] 2218 	and a,#7
      0021C1 88               [ 1] 2219 	push a   
      0021C2 A6 01            [ 1] 2220 	ld a,#1 
      0021C4 0D 01            [ 1] 2221 1$: tnz (1,sp)
      0021C6 27 05            [ 1] 2222 	jreq 2$
      0021C8 48               [ 1] 2223 	sll a 
      0021C9 0A 01            [ 1] 2224 	dec (1,sp)
      0021CB 20 F7            [ 2] 2225 	jra 1$
      0021CD 6B 01            [ 1] 2226 2$: ld (1,sp),a  
      0021CF                       2227 	_xpop ; address  
      0021CF 90 F6            [ 1]    1     ld a,(y)
      0021D1 93               [ 1]    2     ldw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      0021D2 EE 01            [ 2]    3     ldw x,(1,x)
      0021D4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021D8 84               [ 1] 2228 	pop a 
      0021D9 F4               [ 1] 2229 	and a,(x)
      0021DA 27 02            [ 1] 2230 	jreq 3$
      0021DC A6 01            [ 1] 2231 	ld a,#1 
      0021DE 5F               [ 1] 2232 3$:	clrw x 
      0021DF 97               [ 1] 2233 	ld xl,a
      0021E0 4F               [ 1] 2234 	clr a  
      0021E1 81               [ 4] 2235 	ret
                                   2236 
                                   2237 ;--------------------
                                   2238 ; BASIC: POKE addr,byte
                                   2239 ; put a byte at addr 
                                   2240 ;--------------------
      0021E2                       2241 poke:
      0021E2 CD 19 B0         [ 4] 2242 	call arg_list 
      0021E5 A1 02            [ 1] 2243 	cp a,#2
      0021E7 27 03            [ 1] 2244 	jreq 1$
      0021E9 CC 16 84         [ 2] 2245 	jp syntax_error
      0021EC                       2246 1$:	
      0021EC                       2247 	_xpop ; byte   
      0021EC 90 F6            [ 1]    1     ld a,(y)
      0021EE 93               [ 1]    2     ldw x,y 
      0021EF EE 01            [ 2]    3     ldw x,(1,x)
      0021F1 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0021F5 9F               [ 1] 2248     ld a,xl 
      0021F6 88               [ 1] 2249 	push a 
      0021F7                       2250 	_xpop ; address 
      0021F7 90 F6            [ 1]    1     ld a,(y)
      0021F9 93               [ 1]    2     ldw x,y 
      0021FA EE 01            [ 2]    3     ldw x,(1,x)
      0021FC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002200 84               [ 1] 2251 	pop a 
      002201 F7               [ 1] 2252 	ld (x),a 
      002202 81               [ 4] 2253 	ret 
                                   2254 
                                   2255 ;-----------------------
                                   2256 ; BASIC: PEEK(addr)
                                   2257 ; get the byte at addr 
                                   2258 ; input:
                                   2259 ;	none 
                                   2260 ; output:
                                   2261 ;	X 		value 
                                   2262 ;-----------------------
      002203                       2263 peek:
      002203 CD 19 AB         [ 4] 2264 	call func_args
      002206 A1 01            [ 1] 2265 	cp a,#1 
      002208 27 03            [ 1] 2266 	jreq 1$
      00220A CC 16 84         [ 2] 2267 	jp syntax_error
      00220D                       2268 1$: _xpop ; address  
      00220D 90 F6            [ 1]    1     ld a,(y)
      00220F 93               [ 1]    2     ldw x,y 
      002210 EE 01            [ 2]    3     ldw x,(1,x)
      002212 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002216 C7 00 18         [ 1] 2269 	ld farptr,a 
      002219 CF 00 19         [ 2] 2270 	ldw ptr16,x 
      00221C 92 BC 00 18      [ 5] 2271 	ldf a,[farptr]
      002220 5F               [ 1] 2272 	clrw x 
      002221 97               [ 1] 2273 	ld xl,a 
      002222 4F               [ 1] 2274 	clr a 
      002223 81               [ 4] 2275 	ret 
                                   2276 
                                   2277 ;---------------------------
                                   2278 ; BASIC IF expr : instructions
                                   2279 ; evaluate expr and if true 
                                   2280 ; execute instructions on same line. 
                                   2281 ;----------------------------
      002224                       2282 if: 
      002224 CD 1C 0D         [ 4] 2283 	call condition  
      002227                       2284 	_xpop 
      002227 90 F6            [ 1]    1     ld a,(y)
      002229 93               [ 1]    2     ldw x,y 
      00222A EE 01            [ 2]    3     ldw x,(1,x)
      00222C 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002230 4D               [ 1] 2285 	tnz  a  
      002231 26 0D            [ 1] 2286 	jrne 9$
      002233 5D               [ 2] 2287 	tnzw x 
      002234 26 0A            [ 1] 2288 	jrne 9$  
                                   2289 ;skip to next line
      002236 55 00 03 00 01   [ 1] 2290 	mov in,count
      00223B                       2291 	_drop 2 
      00223B 5B 02            [ 2]    1     addw sp,#2 
      00223D CC 17 37         [ 2] 2292 	jp next_line
      002240 81               [ 4] 2293 9$:	ret 
                                   2294 
                                   2295 ;------------------------
                                   2296 ; BASIC: FOR var=expr 
                                   2297 ; set variable to expression 
                                   2298 ; leave variable address 
                                   2299 ; on stack and set
                                   2300 ; FLOOP bit in 'flags'
                                   2301 ;-----------------
                           000001  2302 	RETL1=1 ; return address  
                           000003  2303 	FSTEP=3  ; variable increment int24
                           000006  2304 	LIMIT=6 ; loop limit, int24  
                           000009  2305 	CVAR=9   ; control variable 
                           00000B  2306 	INW=11   ;  in.w saved
                           00000D  2307 	BPTR=13 ; baseptr saved
                           00000D  2308 	VSIZE=13  
      002241                       2309 for: ; { -- var_addr }
      002241 85               [ 2] 2310 	popw x ; call return address 
      002242                       2311 	_vars VSIZE 
      002242 52 0D            [ 2]    1     sub sp,#VSIZE 
      002244 89               [ 2] 2312 	pushw x  ; RETL1 
      002245 A6 85            [ 1] 2313 	ld a,#TK_VAR 
      002247 CD 19 9E         [ 4] 2314 	call expect
      00224A CD 18 10         [ 4] 2315 	call get_addr
      00224D 1F 09            [ 2] 2316 	ldw (CVAR,sp),x  ; control variable 
      00224F CD 1C E2         [ 4] 2317 	call let_eval 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



      002252 72 14 00 22      [ 1] 2318 	bset flags,#FLOOP 
      002256 CD 17 E8         [ 4] 2319 	call next_token 
      002259 A1 80            [ 1] 2320 	cp a,#TK_CMD 
      00225B 27 03            [ 1] 2321 	jreq 1$
      00225D CC 16 84         [ 2] 2322 	jp syntax_error
      002260                       2323 1$:  
      002260                       2324 	_get_code_addr
      002260 FE               [ 2]    1         ldw x,(x)
      002261 72 5C 00 01      [ 1]    2         inc in 
      002265 72 5C 00 01      [ 1]    3         inc in 
      002269 A3 22 71         [ 2] 2325 	cpw x,#to   
      00226C 27 03            [ 1] 2326 	jreq to
      00226E CC 16 84         [ 2] 2327 	jp syntax_error 
                                   2328 
                                   2329 ;-----------------------------------
                                   2330 ; BASIC: TO expr 
                                   2331 ; second part of FOR loop initilization
                                   2332 ; leave limit on stack and set 
                                   2333 ; FTO bit in 'flags'
                                   2334 ;-----------------------------------
      002271                       2335 to: ; { var_addr -- var_addr limit step }
      002271 72 04 00 22 03   [ 2] 2336 	btjt flags,#FLOOP,1$
      002276 CC 16 84         [ 2] 2337 	jp syntax_error
      002279 CD 1A F4         [ 4] 2338 1$: call expression   
      00227C A1 84            [ 1] 2339 	cp a,#TK_INTGR 
      00227E 27 03            [ 1] 2340 	jreq 2$ 
      002280 CC 16 84         [ 2] 2341 	jp syntax_error
      002283                       2342 2$: _xpop
      002283 90 F6            [ 1]    1     ld a,(y)
      002285 93               [ 1]    2     ldw x,y 
      002286 EE 01            [ 2]    3     ldw x,(1,x)
      002288 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00228C 6B 06            [ 1] 2343 	ld (LIMIT,sp),a 
      00228E 1F 07            [ 2] 2344 	ldw (LIMIT+1,sp),x
      002290 CD 17 E8         [ 4] 2345 	call next_token
      002293 A1 00            [ 1] 2346 	cp a,#TK_NONE  
      002295 27 17            [ 1] 2347 	jreq 4$ 
      002297 A1 80            [ 1] 2348 	cp a,#TK_CMD
      002299 26 0E            [ 1] 2349 	jrne 3$
      00229B                       2350 	_get_code_addr
      00229B FE               [ 2]    1         ldw x,(x)
      00229C 72 5C 00 01      [ 1]    2         inc in 
      0022A0 72 5C 00 01      [ 1]    3         inc in 
      0022A4 A3 22 B7         [ 2] 2351 	cpw x,#step 
      0022A7 27 0E            [ 1] 2352 	jreq step
      0022A9                       2353 3$:	
      0022A9                       2354 	_unget_token   	 
      0022A9 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0022AE                       2355 4$:	
      0022AE 0F 03            [ 1] 2356 	clr (FSTEP,sp) 
      0022B0 AE 00 01         [ 2] 2357 	ldw x,#1   ; default step  
      0022B3 1F 04            [ 2] 2358 	ldw (FSTEP+1,sp),x 
      0022B5 20 2F            [ 2] 2359 	jra store_loop_addr 
                                   2360 
                                   2361 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



                                   2362 ;----------------------------------
                                   2363 ; BASIC: STEP expr 
                                   2364 ; optional third par of FOR loop
                                   2365 ; initialization. 	
                                   2366 ;------------------------------------
      0022B7                       2367 step: ; {var limit -- var limit step}
      0022B7 72 04 00 22 03   [ 2] 2368 	btjt flags,#FLOOP,1$
      0022BC CC 16 84         [ 2] 2369 	jp syntax_error
      0022BF CD 1A F4         [ 4] 2370 1$: call expression 
      0022C2 A1 84            [ 1] 2371 	cp a,#TK_INTGR
      0022C4 27 03            [ 1] 2372 	jreq 2$
      0022C6 CC 16 84         [ 2] 2373 	jp syntax_error
      0022C9                       2374 2$:	
      0022C9                       2375 	_xpop 
      0022C9 90 F6            [ 1]    1     ld a,(y)
      0022CB 93               [ 1]    2     ldw x,y 
      0022CC EE 01            [ 2]    3     ldw x,(1,x)
      0022CE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0022D2 6B 03            [ 1] 2376 	ld (FSTEP,sp),a 
      0022D4 1F 04            [ 2] 2377 	ldw (FSTEP+1,sp),x ; step
                                   2378 ; if step < 0 decrement LIMIT 
      0022D6 4D               [ 1] 2379 	tnz a
      0022D7 2A 0D            [ 1] 2380 	jrpl store_loop_addr 
      0022D9 7B 06            [ 1] 2381 	ld a,(LIMIT,sp)
      0022DB 1E 07            [ 2] 2382 	ldw x,(LIMIT+1,sp)
      0022DD 1D 00 01         [ 2] 2383 	subw x,#1 
      0022E0 A2 00            [ 1] 2384 	sbc a,#0 
      0022E2 6B 06            [ 1] 2385 	ld (LIMIT,sp),a 
      0022E4 1F 07            [ 2] 2386 	ldw (LIMIT+1,sp),x 
                                   2387 ; leave loop back entry point on cstack 
                                   2388 ; cstack is 1 call deep from interpreter
      0022E6                       2389 store_loop_addr:
      0022E6 CE 00 04         [ 2] 2390 	ldw x,basicptr
      0022E9 1F 0D            [ 2] 2391 	ldw (BPTR,sp),x 
      0022EB CE 00 00         [ 2] 2392 	ldw x,in.w 
      0022EE 1F 0B            [ 2] 2393 	ldw (INW,sp),x   
      0022F0 72 15 00 22      [ 1] 2394 	bres flags,#FLOOP 
      0022F4 72 5C 00 1F      [ 1] 2395 	inc loop_depth  
      0022F8 81               [ 4] 2396 	ret 
                                   2397 
                                   2398 ;--------------------------------
                                   2399 ; BASIC: NEXT var 
                                   2400 ; FOR loop control 
                                   2401 ; increment variable with step 
                                   2402 ; and compare with limit 
                                   2403 ; loop if threshold not crossed.
                                   2404 ; else stack. 
                                   2405 ; and decrement 'loop_depth' 
                                   2406 ;--------------------------------
      0022F9                       2407 next: ; {var limit step retl1 -- [var limit step ] }
      0022F9 72 5D 00 1F      [ 1] 2408 	tnz loop_depth 
      0022FD 26 03            [ 1] 2409 	jrne 1$ 
      0022FF CC 16 84         [ 2] 2410 	jp syntax_error 
      002302                       2411 1$: 
      002302 A6 85            [ 1] 2412 	ld a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002304 CD 19 9E         [ 4] 2413 	call expect
      002307 CD 18 10         [ 4] 2414 	call get_addr 
                                   2415 ; check for good variable after NEXT 	 
      00230A 13 09            [ 2] 2416 	cpw x,(CVAR,sp)
      00230C 27 03            [ 1] 2417 	jreq 2$  
      00230E CC 16 84         [ 2] 2418 	jp syntax_error ; not the good one 
      002311                       2419 2$: 
      002311 CF 00 19         [ 2] 2420 	ldw ptr16,x 
                                   2421 	; increment variable 
      002314 F6               [ 1] 2422 	ld a,(x)
      002315 EE 01            [ 2] 2423 	ldw x,(1,x)  ; get var value 
      002317 72 FB 04         [ 2] 2424 	addw x,(FSTEP+1,sp) ; var+step 
      00231A 19 03            [ 1] 2425 	adc a,(FSTEP,sp)
      00231C 72 C7 00 19      [ 4] 2426 	ld [ptr16],a
      002320 72 5C 00 1A      [ 1] 2427 	inc ptr8  
      002324 72 CF 00 19      [ 5] 2428 	ldw [ptr16],x 
      002328 C7 00 0C         [ 1] 2429 	ld acc24,a 
      00232B CF 00 0D         [ 2] 2430 	ldw acc16,x 
      00232E 7B 06            [ 1] 2431 	ld a,(LIMIT,sp)
      002330 1E 07            [ 2] 2432 	ldw x,(LIMIT+1,sp)
      002332 72 B0 00 0D      [ 2] 2433 	subw x,acc16 
      002336 C2 00 0C         [ 1] 2434 	sbc a,acc24
      002339 18 03            [ 1] 2435 	xor a,(FSTEP,sp)
      00233B A8 80            [ 1] 2436 	xor a,#0x80
      00233D 2B 12            [ 1] 2437 	jrmi loop_back  
      00233F 20 25            [ 2] 2438 	jra loop_done   
                                   2439 ; check sign of STEP  
      002341 7B 03            [ 1] 2440 	ld a,(FSTEP,sp)
      002343 2A 07            [ 1] 2441 	jrpl 4$
                                   2442 ;negative step
      002345 C6 00 0E         [ 1] 2443     ld a,acc8 
      002348 2F 07            [ 1] 2444 	jrslt loop_back   
      00234A 20 1A            [ 2] 2445 	jra loop_done  
      00234C                       2446 4$: ; positive step
      00234C 72 0E 00 0E 15   [ 2] 2447 	btjt acc8,#7,loop_done 
      002351                       2448 loop_back:
      002351 1E 0D            [ 2] 2449 	ldw x,(BPTR,sp)
      002353 CF 00 04         [ 2] 2450 	ldw basicptr,x 
      002356 72 01 00 22 05   [ 2] 2451 	btjf flags,#FRUN,1$ 
      00235B E6 02            [ 1] 2452 	ld a,(2,x)
      00235D C7 00 03         [ 1] 2453 	ld count,a
      002360 1E 0B            [ 2] 2454 1$:	ldw x,(INW,sp)
      002362 CF 00 00         [ 2] 2455 	ldw in.w,x 
      002365 81               [ 4] 2456 	ret 
      002366                       2457 loop_done:
                                   2458 	; remove loop data from stack  
      002366 85               [ 2] 2459 	popw x
      002367                       2460 	_drop VSIZE 
      002367 5B 0D            [ 2]    1     addw sp,#VSIZE 
      002369 72 5A 00 1F      [ 1] 2461 	dec loop_depth 
      00236D FC               [ 2] 2462 	jp (x)
                                   2463 
                                   2464 ;----------------------------
                                   2465 ; called by goto/gosub
                                   2466 ; to get target line number 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



                                   2467 ; output:
                                   2468 ;    x    line address 
                                   2469 ;---------------------------
      00236E                       2470 get_target_line:
      00236E CD 17 E8         [ 4] 2471 	call next_token  
      002371 A1 84            [ 1] 2472 	cp a,#TK_INTGR
      002373 27 07            [ 1] 2473 	jreq get_target_line_addr 
      002375 A1 03            [ 1] 2474 	cp a,#TK_LABEL 
      002377 27 26            [ 1] 2475 	jreq look_target_symbol 
      002379 CC 16 84         [ 2] 2476 	jp syntax_error
                                   2477 ; the target is a line number 
                                   2478 ; search it. 
      00237C                       2479 get_target_line_addr:
      00237C 90 89            [ 2] 2480 	pushw y 
      00237E CD 18 1A         [ 4] 2481 	call get_int24 ; line # 
      002381 4F               [ 1] 2482 	clr a
      002382 90 CE 00 04      [ 2] 2483 	ldw y,basicptr 
      002386 90 FE            [ 2] 2484 	ldw y,(y)
      002388 90 89            [ 2] 2485 	pushw y 
      00238A 13 01            [ 2] 2486 	cpw x,(1,sp)
      00238C                       2487 	_drop 2  
      00238C 5B 02            [ 2]    1     addw sp,#2 
      00238E 25 01            [ 1] 2488 	jrult 11$
      002390 4C               [ 1] 2489 	inc a 
      002391                       2490 11$: ; scan program for this line# 	
      002391 CD 0C 45         [ 4] 2491 	call search_lineno  
      002394 5D               [ 2] 2492 	tnzw x ; 0| line# address 
      002395 26 05            [ 1] 2493 	jrne 2$ 
      002397 A6 05            [ 1] 2494 	ld a,#ERR_NO_LINE 
      002399 CC 16 86         [ 2] 2495 	jp tb_error 
      00239C 90 85            [ 2] 2496 2$:	popw y  
      00239E 81               [ 4] 2497 	ret 
                                   2498 
                                   2499 ; the GOTO|GOSUB target is a symbol.
                                   2500 ; output:
                                   2501 ;    X    line address|0 
      00239F                       2502 look_target_symbol:
      00239F 90 89            [ 2] 2503 	pushw y 
      0023A1 89               [ 2] 2504 	pushw x 
      0023A2 CD 18 01         [ 4] 2505 	call skip_string 
      0023A5 72 5F 00 0D      [ 1] 2506 	clr acc16 
      0023A9 90 CE 00 1B      [ 2] 2507 	ldw y,txtbgn 
      0023AD 90 E6 03         [ 1] 2508 1$:	ld a,(3,y) ; first TK_ID on line 
      0023B0 A1 03            [ 1] 2509 	cp a,#TK_LABEL 
      0023B2 27 15            [ 1] 2510 	jreq 3$ 
      0023B4 90 E6 02         [ 1] 2511 2$:	ld a,(2,y); line length 
      0023B7 C7 00 0E         [ 1] 2512 	ld acc8,a 
      0023BA 72 B9 00 0D      [ 2] 2513 	addw y,acc16 ;point to next line 
      0023BE 90 C3 00 1D      [ 2] 2514 	cpw y,txtend 
      0023C2 25 E9            [ 1] 2515 	jrult 1$
      0023C4 A6 0A            [ 1] 2516 	ld a,#ERR_BAD_VALUE
      0023C6 CC 16 86         [ 2] 2517 	jp tb_error 
      0023C9                       2518 3$: ; found a TK_LABEL 
                                   2519 	; compare with GOTO|GOSUB target 
      0023C9 90 89            [ 2] 2520 	pushw y ; line address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      0023CB 72 A9 00 04      [ 2] 2521 	addw y,#4 ; label string 
      0023CF 1E 03            [ 2] 2522 	ldw x,(3,sp) ; target string 
      0023D1 CD 13 91         [ 4] 2523 	call strcmp
      0023D4 26 04            [ 1] 2524 	jrne 4$
      0023D6 90 85            [ 2] 2525 	popw y 
      0023D8 20 DA            [ 2] 2526 	jra 2$ 
      0023DA                       2527 4$: ; target found 
      0023DA 85               [ 2] 2528 	popw x ;  address line target  
      0023DB                       2529 	_drop 2 ; target string 
      0023DB 5B 02            [ 2]    1     addw sp,#2 
      0023DD 90 85            [ 2] 2530 	popw y 
      0023DF 81               [ 4] 2531 	ret
                                   2532 
                                   2533 
                                   2534 ;--------------------------------
                                   2535 ; BASIC: ON expr GOTO|GOSUB line# [,line#]*
                                   2536 ; selective goto or gosub 
                                   2537 ;--------------------------------
      0023E0                       2538 cmd_on:
      0023E0 72 00 00 22 05   [ 2] 2539 	btjt flags,#FRUN,0$ 
      0023E5 A6 06            [ 1] 2540 	ld a,#ERR_RUN_ONLY
      0023E7 CC 16 86         [ 2] 2541 	jp tb_error 
      0023EA CD 1A F4         [ 4] 2542 0$:	call expression 
      0023ED A1 84            [ 1] 2543 	cp a,#TK_INTGR
      0023EF 27 03            [ 1] 2544 	jreq 1$
      0023F1 CC 16 84         [ 2] 2545 	jp syntax_error
      0023F4                       2546 1$: _xpop
      0023F4 90 F6            [ 1]    1     ld a,(y)
      0023F6 93               [ 1]    2     ldw x,y 
      0023F7 EE 01            [ 2]    3     ldw x,(1,x)
      0023F9 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
                                   2547 ; the selector is the element indice 
                                   2548 ; in the list of arguments. {1..#elements} 
      0023FD 9F               [ 1] 2549 	ld a,xl ; keep only bits 7..0
      0023FE 27 68            [ 1] 2550 	jreq 9$ ; element # begin at 1. 
      002400 88               [ 1] 2551 	push a  ; selector  
      002401 CD 17 E8         [ 4] 2552 	call next_token
      002404 A1 80            [ 1] 2553 	cp a,#TK_CMD 
      002406 27 03            [ 1] 2554 	jreq 2$ 
      002408 CC 16 84         [ 2] 2555 	jp syntax_error 
      00240B                       2556 2$: _get_code_addr
      00240B FE               [ 2]    1         ldw x,(x)
      00240C 72 5C 00 01      [ 1]    2         inc in 
      002410 72 5C 00 01      [ 1]    3         inc in 
                                   2557 ;; must be a GOTO or GOSUB 
      002414 A3 24 72         [ 2] 2558 	cpw x,#goto 
      002417 27 08            [ 1] 2559 	jreq 4$
      002419 A3 24 8C         [ 2] 2560 	cpw x,#gosub 
      00241C 27 03            [ 1] 2561 	jreq 4$ 
      00241E CC 16 84         [ 2] 2562 	jp syntax_error 
      002421                       2563 4$: 
      002421 84               [ 1] 2564 	pop a 
      002422 89               [ 2] 2565 	pushw x ; save routine address 	
      002423 88               [ 1] 2566 	push a  ; selector  
      002424                       2567 5$: ; skip elements in list until selector==0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002424 0A 01            [ 1] 2568 	dec (1,sp)
      002426 27 26            [ 1] 2569 	jreq 6$ 
                                   2570 ; can be a line# or a label 
      002428 CD 17 E8         [ 4] 2571 	call next_token 
      00242B A1 84            [ 1] 2572 	cp a,#TK_INTGR 
      00242D 27 07            [ 1] 2573 	jreq 52$
      00242F A1 03            [ 1] 2574 	cp a,#TK_LABEL 
      002431 27 0D            [ 1] 2575 	jreq 54$
      002433 CC 16 84         [ 2] 2576 	jp syntax_error 
      002436                       2577 52$: ; got a line number 
      002436 C6 00 01         [ 1] 2578 	ld a,in ; skip over int24 value 
      002439 AB 03            [ 1] 2579 	add a,#CELL_SIZE ; integer size  
      00243B C7 00 01         [ 1] 2580 	ld in,a 
      00243E 20 03            [ 2] 2581 	jra 56$
      002440 CD 18 01         [ 4] 2582 54$: call skip_string ; skip over label 	
      002443                       2583 56$: ; if another element comma present 
      002443 CD 17 E8         [ 4] 2584 	call next_token
      002446 A1 08            [ 1] 2585 	cp a,#TK_COMMA 
      002448 27 DA            [ 1] 2586 	jreq 5$ 
                                   2587 ; arg list exhausted, selector to big 
                                   2588 ; continue execution on next line 
      00244A                       2589 	_drop 3 ; drop selector and GOTO|GOSUB address 
      00244A 5B 03            [ 2]    1     addw sp,#3 
      00244C 20 1A            [ 2] 2590 	jra 9$
      00244E                       2591 6$: ;at selected position  
      00244E                       2592 	_drop 1 ; discard selector
      00244E 5B 01            [ 2]    1     addw sp,#1 
                                   2593 ; here only the routine address 
                                   2594 ; of GOTO|GOSUB is on stack 
      002450 CD 23 6E         [ 4] 2595     call get_target_line
      002453 CF 00 19         [ 2] 2596 	ldw ptr16,x 	
      002456 55 00 03 00 01   [ 1] 2597 	mov in,count ; move to end of line  
      00245B 85               [ 2] 2598 	popw x ; cmd address, GOTO||GOSUB 
      00245C A3 24 72         [ 2] 2599 	cpw x,#goto 
      00245F 26 05            [ 1] 2600 	jrne 7$ 
      002461 CE 00 19         [ 2] 2601 	ldw x,ptr16 
      002464 20 19            [ 2] 2602 	jra jp_to_target
      002466                       2603 7$: 
      002466 20 35            [ 2] 2604 	jra gosub_2 ; target in ptr16 
      002468                       2605 9$: ; expr out of range skip to end of line
                                   2606     ; this will force a fall to next line  
      002468 55 00 03 00 01   [ 1] 2607 	mov in,count
      00246D                       2608 	_drop 2
      00246D 5B 02            [ 2]    1     addw sp,#2 
      00246F CC 17 37         [ 2] 2609 	jp next_line  
                                   2610 
                                   2611 
                                   2612 ;------------------------
                                   2613 ; BASIC: GOTO line# 
                                   2614 ; jump to line# 
                                   2615 ; here cstack is 2 call deep from interpreter 
                                   2616 ;------------------------
      002472                       2617 goto:
      002472 72 00 00 22 05   [ 2] 2618 	btjt flags,#FRUN,goto_1  
      002477 A6 06            [ 1] 2619 	ld a,#ERR_RUN_ONLY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002479 CC 16 86         [ 2] 2620 	jp tb_error 
      00247C                       2621 goto_1:
      00247C CD 23 6E         [ 4] 2622 	call get_target_line
      00247F                       2623 jp_to_target:
      00247F CF 00 04         [ 2] 2624 	ldw basicptr,x 
      002482 E6 02            [ 1] 2625 	ld a,(2,x)
      002484 C7 00 03         [ 1] 2626 	ld count,a 
      002487 35 03 00 01      [ 1] 2627 	mov in,#3 
      00248B 81               [ 4] 2628 	ret 
                                   2629 
                                   2630 
                                   2631 ;--------------------
                                   2632 ; BASIC: GOSUB line#
                                   2633 ; basic subroutine call
                                   2634 ; actual line# and basicptr 
                                   2635 ; are saved on cstack
                                   2636 ; here cstack is 2 call deep from interpreter 
                                   2637 ;--------------------
                           000001  2638 	RET_ADDR=1 ; subroutine return address 
                           000003  2639 	RET_BPTR=3 ; basicptr return point 
                           000005  2640 	RET_INW=5  ; in.w return point 
                           000004  2641 	VSIZE=4 
      00248C                       2642 gosub:
      00248C 72 00 00 22 06   [ 2] 2643 	btjt flags,#FRUN,gosub_1 
      002491 A6 06            [ 1] 2644 	ld a,#ERR_RUN_ONLY
      002493 CC 16 86         [ 2] 2645 	jp tb_error 
      002496 81               [ 4] 2646 	ret 
      002497                       2647 gosub_1:
      002497 CD 23 6E         [ 4] 2648 	call get_target_line 
      00249A CF 00 19         [ 2] 2649 	ldw ptr16,x
      00249D                       2650 gosub_2: 
      00249D 85               [ 2] 2651 	popw x 
      00249E                       2652 	_vars VSIZE  
      00249E 52 04            [ 2]    1     sub sp,#VSIZE 
      0024A0 89               [ 2] 2653 	pushw x ; RET_ADDR 
                                   2654 ; save BASIC subroutine return point.   
      0024A1 CE 00 04         [ 2] 2655 	ldw x,basicptr
      0024A4 1F 03            [ 2] 2656 	ldw (RET_BPTR,sp),x 
      0024A6 CE 00 00         [ 2] 2657 	ldw x,in.w 
      0024A9 1F 05            [ 2] 2658 	ldw (RET_INW,sp),x
      0024AB CE 00 19         [ 2] 2659 	ldw x,ptr16  
      0024AE 20 CF            [ 2] 2660 	jra jp_to_target
                                   2661 
                                   2662 ;------------------------
                                   2663 ; BASIC: RETURN 
                                   2664 ; exit from BASIC subroutine 
                                   2665 ;------------------------
      0024B0                       2666 return:
      0024B0 72 00 00 22 05   [ 2] 2667 	btjt flags,#FRUN,0$ 
      0024B5 A6 06            [ 1] 2668 	ld a,#ERR_RUN_ONLY
      0024B7 CC 16 86         [ 2] 2669 	jp tb_error 
      0024BA                       2670 0$:	
      0024BA 1E 03            [ 2] 2671 	ldw x,(RET_BPTR,sp) 
      0024BC CF 00 04         [ 2] 2672 	ldw basicptr,x
      0024BF E6 02            [ 1] 2673 	ld a,(2,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      0024C1 C7 00 03         [ 1] 2674 	ld count,a  
      0024C4 1E 05            [ 2] 2675 	ldw x,(RET_INW,sp)
      0024C6 CF 00 00         [ 2] 2676 	ldw in.w,x 
      0024C9 85               [ 2] 2677 	popw x 
      0024CA                       2678 	_drop VSIZE 
      0024CA 5B 04            [ 2]    1     addw sp,#VSIZE 
      0024CC FC               [ 2] 2679 	jp (x)
                                   2680 
                                   2681 
                                   2682 ;---------------------------------
                                   2683 ; check if A:X contain the address 
                                   2684 ; of a program in FLASH 
                                   2685 ; output:
                                   2686 ;     Z    set is progam 
                                   2687 ;----------------------------------
      0024CD                       2688 is_program_addr:
      0024CD 4D               [ 1] 2689 	tnz a 
      0024CE 26 0D            [ 1] 2690 	jrne 9$
      0024D0 A3 37 80         [ 2] 2691 	cpw x,#app_space 
      0024D3 25 07            [ 1] 2692 	jrult 8$
      0024D5 89               [ 2] 2693 	pushw x 
      0024D6 CD 28 3C         [ 4] 2694 	call qsign 
      0024D9 85               [ 2] 2695 	popw x 
      0024DA 27 01            [ 1] 2696 	jreq 9$ 
      0024DC 43               [ 1] 2697 8$:	cpl a ; clr Z bit  
      0024DD 81               [ 4] 2698 9$:	ret 
                                   2699 
                                   2700 ;----------------------------------
                                   2701 ; BASIC: RUN [addr]
                                   2702 ; run BASIC program in RAM
                                   2703 ;----------------------------------- 
      0024DE                       2704 run: 
      0024DE 72 01 00 22 02   [ 2] 2705 	btjf flags,#FRUN,0$  
      0024E3 4F               [ 1] 2706 	clr a 
      0024E4 81               [ 4] 2707 	ret
      0024E5                       2708 0$: ; check for STOP condition 
      0024E5 72 09 00 22 12   [ 2] 2709 	btjf flags,#FBREAK,1$
      0024EA                       2710 	_drop 2 
      0024EA 5B 02            [ 2]    1     addw sp,#2 
      0024EC CD 20 52         [ 4] 2711 	call rest_context
      0024EF                       2712 	_drop CTXT_SIZE 
      0024EF 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0024F1 72 19 00 22      [ 1] 2713 	bres flags,#FBREAK 
      0024F5 72 10 00 22      [ 1] 2714 	bset flags,#FRUN 
      0024F9 CC 17 2F         [ 2] 2715 	jp interpreter 
      0024FC                       2716 1$:	; check for address option 
      0024FC CD 17 E8         [ 4] 2717 	call next_token 
      0024FF A1 84            [ 1] 2718 	cp a,#TK_INTGR
      002501 26 1D            [ 1] 2719 	jrne 3$
      002503 CD 18 1A         [ 4] 2720 	call get_int24 
      002506 CD 24 CD         [ 4] 2721 	call is_program_addr
      002509 27 05            [ 1] 2722 	jreq 2$
      00250B A6 12            [ 1] 2723 	ld a,#ERR_NO_PROGRAM
      00250D CC 16 86         [ 2] 2724 	jp tb_error 
      002510 CF 00 1B         [ 2] 2725 2$: ldw txtbgn,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      002513 1D 00 02         [ 2] 2726 	subw x,#2 
      002516 FE               [ 2] 2727 	ldw x,(x)
      002517 72 BB 00 1B      [ 2] 2728 	addw x,txtbgn 
      00251B CF 00 1D         [ 2] 2729 	ldw txtend,x 
      00251E 20 19            [ 2] 2730 	jra run_it 	
      002520                       2731 3$:	_unget_token 
      002520 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      002525 CE 00 1B         [ 2] 2732 	ldw x,txtbgn
      002528 C3 00 1D         [ 2] 2733 	cpw x,txtend 
      00252B 2B 0C            [ 1] 2734 	jrmi run_it 
      00252D AE 15 DB         [ 2] 2735 	ldw x,#err_no_prog
      002530 CD 09 5C         [ 4] 2736 	call puts 
      002533 55 00 03 00 01   [ 1] 2737 	mov in,count
      002538 81               [ 4] 2738 	ret 
      002539                       2739 run_it:	 
      002539                       2740 	_drop 2 ; drop return address 
      002539 5B 02            [ 2]    1     addw sp,#2 
      00253B                       2741 run_it_02: 
      00253B CD 1C C1         [ 4] 2742     call ubound 
      00253E CD 13 F6         [ 4] 2743 	call clear_vars
                                   2744 ; initialize DIM variables pointers 
      002541 CE 00 1D         [ 2] 2745 	ldw x,txtend 
      002544 CF 00 30         [ 2] 2746 	ldw dvar_bgn,x 
      002547 CF 00 32         [ 2] 2747 	ldw dvar_end,x 	 
                                   2748 ; clear data pointer 
      00254A 5F               [ 1] 2749 	clrw x 
      00254B CF 00 06         [ 2] 2750 	ldw data_ptr,x 
      00254E 72 5F 00 08      [ 1] 2751 	clr data_ofs 
      002552 72 5F 00 09      [ 1] 2752 	clr data_len 
                                   2753 ; initialize BASIC pointer 
      002556 CE 00 1B         [ 2] 2754 	ldw x,txtbgn 
      002559 CF 00 04         [ 2] 2755 	ldw basicptr,x 
      00255C E6 02            [ 1] 2756 	ld a,(2,x)
      00255E C7 00 03         [ 1] 2757 	ld count,a
      002561 35 03 00 01      [ 1] 2758 	mov in,#3	
      002565 72 10 00 22      [ 1] 2759 	bset flags,#FRUN 
      002569 CC 17 2F         [ 2] 2760 	jp interpreter 
                                   2761 
                                   2762 
                                   2763 ;----------------------
                                   2764 ; BASIC: END
                                   2765 ; end running program
                                   2766 ;---------------------- 
      00256C                       2767 cmd_end: 
                                   2768 ; clean stack 
      00256C AE 17 FF         [ 2] 2769 	ldw x,#STACK_EMPTY
      00256F 94               [ 1] 2770 	ldw sp,x 
      002570 CC 17 10         [ 2] 2771 	jp warm_start
                                   2772 
                                   2773 ;---------------------------
                                   2774 ; BASIC: GET var 
                                   2775 ; receive a key in variable 
                                   2776 ; don't wait 
                                   2777 ;---------------------------
      002573                       2778 cmd_get:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      002573 CD 17 E8         [ 4] 2779 	call next_token 
      002576 A1 85            [ 1] 2780 	cp a,#TK_VAR 
      002578 27 03            [ 1] 2781 	jreq 0$
      00257A CC 16 84         [ 2] 2782 	jp syntax_error 
      00257D CD 18 10         [ 4] 2783 0$: call get_addr 
      002580 CF 00 19         [ 2] 2784 	ldw ptr16,x 
      002583 CD 09 08         [ 4] 2785 	call qgetc 
      002586 27 03            [ 1] 2786 	jreq 2$
      002588 CD 09 0F         [ 4] 2787 	call getc  
      00258B 72 3F 00 19      [ 4] 2788 2$: clr [ptr16]
      00258F 72 5C 00 1A      [ 1] 2789 	inc ptr8 
      002593 72 3F 00 19      [ 4] 2790 	clr [ptr16]
      002597 72 5C 00 1A      [ 1] 2791 	inc ptr8 
      00259B 72 C7 00 19      [ 4] 2792 	ld [ptr16],a 
      00259F 81               [ 4] 2793 	ret 
                                   2794 
                                   2795 
                                   2796 ;-----------------
                                   2797 ; 1 Khz beep 
                                   2798 ;-----------------
      0025A0                       2799 beep_1khz:: 
      0025A0 90 89            [ 2] 2800 	pushw y 
      0025A2 AE 00 64         [ 2] 2801 	ldw x,#100
      0025A5 90 AE 03 E8      [ 2] 2802 	ldw y,#1000
      0025A9 20 22            [ 2] 2803 	jra beep
                                   2804 
                                   2805 ;-----------------------
                                   2806 ; BASIC: TONE expr1,expr2
                                   2807 ; used TIMER2 channel 1
                                   2808 ; to produce a tone 
                                   2809 ; arguments:
                                   2810 ;    expr1   frequency 
                                   2811 ;    expr2   duration msec.
                                   2812 ;---------------------------
      0025AB                       2813 tone:
      0025AB 90 89            [ 2] 2814 	pushw y 
      0025AD CD 19 B0         [ 4] 2815 	call arg_list 
      0025B0 A1 02            [ 1] 2816 	cp a,#2 
      0025B2 27 03            [ 1] 2817 	jreq 1$
      0025B4 CC 16 84         [ 2] 2818 	jp syntax_error 
      0025B7                       2819 1$: 
      0025B7                       2820 	_xpop 
      0025B7 90 F6            [ 1]    1     ld a,(y)
      0025B9 93               [ 1]    2     ldw x,y 
      0025BA EE 01            [ 2]    3     ldw x,(1,x)
      0025BC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025C0 89               [ 2] 2821 	pushw x ; duration 
      0025C1                       2822 	_xpop ; frequency
      0025C1 90 F6            [ 1]    1     ld a,(y)
      0025C3 93               [ 1]    2     ldw x,y 
      0025C4 EE 01            [ 2]    3     ldw x,(1,x)
      0025C6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0025CA 90 93            [ 1] 2823 	ldw y,x ; frequency 
      0025CC 85               [ 2] 2824 	popw x  ; duration 
      0025CD                       2825 beep:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



      0025CD 89               [ 2] 2826 	pushw x 
      0025CE AE F4 24         [ 2] 2827 	ldw x,#TIM2_CLK_FREQ
      0025D1 65               [ 2] 2828 	divw x,y ; cntr=Fclk/freq 
                                   2829 ; round to nearest integer 
      0025D2 90 A3 7A 12      [ 2] 2830 	cpw y,#TIM2_CLK_FREQ/2
      0025D6 2B 01            [ 1] 2831 	jrmi 2$
      0025D8 5C               [ 1] 2832 	incw x 
      0025D9                       2833 2$:	 
      0025D9 9E               [ 1] 2834 	ld a,xh 
      0025DA C7 53 0D         [ 1] 2835 	ld TIM2_ARRH,a 
      0025DD 9F               [ 1] 2836 	ld a,xl 
      0025DE C7 53 0E         [ 1] 2837 	ld TIM2_ARRL,a 
                                   2838 ; 50% duty cycle 
      0025E1 8C               [ 1] 2839 	ccf 
      0025E2 56               [ 2] 2840 	rrcw x 
      0025E3 9E               [ 1] 2841 	ld a,xh 
      0025E4 C7 53 0F         [ 1] 2842 	ld TIM2_CCR1H,a 
      0025E7 9F               [ 1] 2843 	ld a,xl
      0025E8 C7 53 10         [ 1] 2844 	ld TIM2_CCR1L,a
      0025EB 72 10 53 08      [ 1] 2845 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0025EF 72 10 53 00      [ 1] 2846 	bset TIM2_CR1,#TIM2_CR1_CEN
      0025F3 72 10 53 04      [ 1] 2847 	bset TIM2_EGR,#TIM2_EGR_UG
      0025F7 85               [ 2] 2848 	popw x 
      0025F8 CD 2B 2C         [ 4] 2849 	call pause02
      0025FB 72 11 53 08      [ 1] 2850 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0025FF 72 11 53 00      [ 1] 2851 	bres TIM2_CR1,#TIM2_CR1_CEN 
      002603 90 85            [ 2] 2852 	popw y 
      002605 81               [ 4] 2853 	ret 
                                   2854 
                                   2855 ;-------------------------------
                                   2856 ; BASIC: ADCON 0|1 [,divisor]  
                                   2857 ; disable/enanble ADC 
                                   2858 ;-------------------------------
                           000003  2859 	ONOFF=3 
                           000001  2860 	DIVSOR=1
                           000004  2861 	VSIZE=4 
      002606                       2862 power_adc:
      002606 CD 19 B0         [ 4] 2863 	call arg_list 
      002609 A1 02            [ 1] 2864 	cp a,#2	
      00260B 27 12            [ 1] 2865 	jreq 1$
      00260D A1 01            [ 1] 2866 	cp a,#1 
      00260F 27 03            [ 1] 2867 	jreq 0$ 
      002611 CC 16 84         [ 2] 2868 	jp syntax_error 
      002614 4F               [ 1] 2869 0$:	clr a 
      002615 5F               [ 1] 2870 	clrw x
      002616                       2871 	_xpush   ; divisor  
      002616 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      00261A 90 F7            [ 1]    2     ld (y),a 
      00261C 90 EF 01         [ 2]    3     ldw (1,y),x 
      00261F                       2872 1$: _at_next 
      00261F 90 E6 03         [ 1]    1     ld a,(3,y)
      002622 93               [ 1]    2     ldw x,y 
      002623 EE 04            [ 2]    3     ldw x,(4,x)
      002625 5D               [ 2] 2873 	tnzw x 
      002626 27 25            [ 1] 2874 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      002628                       2875 	_xpop
      002628 90 F6            [ 1]    1     ld a,(y)
      00262A 93               [ 1]    2     ldw x,y 
      00262B EE 01            [ 2]    3     ldw x,(1,x)
      00262D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002631                       2876 	_xdrop  
      002631 72 A9 00 03      [ 2]    1     addw y,#CELL_SIZE 
      002635 9F               [ 1] 2877 	ld a,xl
      002636 A4 07            [ 1] 2878 	and a,#7
      002638 4E               [ 1] 2879 	swap a 
      002639 C7 54 01         [ 1] 2880 	ld ADC_CR1,a
      00263C 72 16 50 CA      [ 1] 2881 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      002640 72 10 54 01      [ 1] 2882 	bset ADC_CR1,#ADC_CR1_ADON 
      002644                       2883 	_usec_dly 7 
      002644 AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      002647 5A               [ 2]    2     decw x
      002648 9D               [ 1]    3     nop 
      002649 26 FA            [ 1]    4     jrne .-4
      00264B 20 08            [ 2] 2884 	jra 3$
      00264D 72 11 54 01      [ 1] 2885 2$: bres ADC_CR1,#ADC_CR1_ADON
      002651 72 17 50 CA      [ 1] 2886 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      002655                       2887 3$:	
      002655 81               [ 4] 2888 	ret
                                   2889 
                                   2890 ;-----------------------------
                                   2891 ; BASIC: ADCREAD (channel)
                                   2892 ; read adc channel {0..5}
                                   2893 ; output:
                                   2894 ;   A 		TK_INTGR 
                                   2895 ;   X 		value 
                                   2896 ;-----------------------------
      002656                       2897 analog_read:
      002656 CD 19 AB         [ 4] 2898 	call func_args 
      002659 A1 01            [ 1] 2899 	cp a,#1 
      00265B 27 03            [ 1] 2900 	jreq 1$
      00265D CC 16 84         [ 2] 2901 	jp syntax_error
      002660                       2902 1$: _xpop 
      002660 90 F6            [ 1]    1     ld a,(y)
      002662 93               [ 1]    2     ldw x,y 
      002663 EE 01            [ 2]    3     ldw x,(1,x)
      002665 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002669 A3 00 05         [ 2] 2903 	cpw x,#5 
      00266C 23 05            [ 2] 2904 	jrule 2$
      00266E A6 0A            [ 1] 2905 	ld a,#ERR_BAD_VALUE
      002670 CC 16 86         [ 2] 2906 	jp tb_error 
      002673 9F               [ 1] 2907 2$: ld a,xl
      002674 C7 00 0E         [ 1] 2908 	ld acc8,a 
      002677 A6 05            [ 1] 2909 	ld a,#5
      002679 C0 00 0E         [ 1] 2910 	sub a,acc8 
      00267C C7 54 00         [ 1] 2911 	ld ADC_CSR,a
      00267F 72 16 54 02      [ 1] 2912 	bset ADC_CR2,#ADC_CR2_ALIGN
      002683 72 10 54 01      [ 1] 2913 	bset ADC_CR1,#ADC_CR1_ADON
      002687 72 0F 54 00 FB   [ 2] 2914 	btjf ADC_CSR,#ADC_CSR_EOC,.
      00268C CE 54 04         [ 2] 2915 	ldw x,ADC_DRH
      00268F A6 84            [ 1] 2916 	ld a,#TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      002691 81               [ 4] 2917 	ret 
                                   2918 
                                   2919 ;-----------------------
                                   2920 ; BASIC: DREAD(pin)
                                   2921 ; Arduino pins 
                                   2922 ; read state of a digital pin 
                                   2923 ; pin# {0..15}
                                   2924 ; output:
                                   2925 ;    A 		TK_INTGR
                                   2926 ;    X      0|1 
                                   2927 ;-------------------------
                           000001  2928 	PINNO=1
                           000001  2929 	VSIZE=1
      002692                       2930 digital_read:
      002692                       2931 	_vars VSIZE 
      002692 52 01            [ 2]    1     sub sp,#VSIZE 
      002694 CD 19 AB         [ 4] 2932 	call func_args
      002697 A1 01            [ 1] 2933 	cp a,#1
      002699 27 03            [ 1] 2934 	jreq 1$
      00269B CC 16 84         [ 2] 2935 	jp syntax_error
      00269E                       2936 1$: _xpop 
      00269E 90 F6            [ 1]    1     ld a,(y)
      0026A0 93               [ 1]    2     ldw x,y 
      0026A1 EE 01            [ 2]    3     ldw x,(1,x)
      0026A3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026A7 A3 00 0F         [ 2] 2937 	cpw x,#15 
      0026AA 23 05            [ 2] 2938 	jrule 2$
      0026AC A6 0A            [ 1] 2939 	ld a,#ERR_BAD_VALUE
      0026AE CC 16 86         [ 2] 2940 	jp tb_error 
      0026B1 CD 2C 6F         [ 4] 2941 2$:	call select_pin 
      0026B4 6B 01            [ 1] 2942 	ld (PINNO,sp),a
      0026B6 E6 01            [ 1] 2943 	ld a,(GPIO_IDR,x)
      0026B8 0D 01            [ 1] 2944 	tnz (PINNO,sp)
      0026BA 27 05            [ 1] 2945 	jreq 8$
      0026BC 44               [ 1] 2946 3$: srl a 
      0026BD 0A 01            [ 1] 2947 	dec (PINNO,sp)
      0026BF 26 FB            [ 1] 2948 	jrne 3$ 
      0026C1 A4 01            [ 1] 2949 8$: and a,#1 
      0026C3 5F               [ 1] 2950 	clrw x 
      0026C4 97               [ 1] 2951 	ld xl,a 
      0026C5 4F               [ 1] 2952 	clr a 
      0026C6                       2953 	_drop VSIZE
      0026C6 5B 01            [ 2]    1     addw sp,#VSIZE 
      0026C8 81               [ 4] 2954 	ret
                                   2955 
                                   2956 
                                   2957 ;-----------------------
                                   2958 ; BASIC: DWRITE pin,0|1
                                   2959 ; Arduino pins 
                                   2960 ; write to a digital pin 
                                   2961 ; pin# {0..15}
                                   2962 ; output:
                                   2963 ;    A 		TK_INTGR
                                   2964 ;    X      0|1 
                                   2965 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                           000001  2966 	PINNO=1
                           000002  2967 	PINVAL=2
                           000002  2968 	VSIZE=2
      0026C9                       2969 digital_write:
      0026C9                       2970 	_vars VSIZE 
      0026C9 52 02            [ 2]    1     sub sp,#VSIZE 
      0026CB CD 19 B0         [ 4] 2971 	call arg_list  
      0026CE A1 02            [ 1] 2972 	cp a,#2 
      0026D0 27 03            [ 1] 2973 	jreq 1$
      0026D2 CC 16 84         [ 2] 2974 	jp syntax_error
      0026D5                       2975 1$: _xpop 
      0026D5 90 F6            [ 1]    1     ld a,(y)
      0026D7 93               [ 1]    2     ldw x,y 
      0026D8 EE 01            [ 2]    3     ldw x,(1,x)
      0026DA 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026DE 9F               [ 1] 2976 	ld a,xl 
      0026DF 6B 02            [ 1] 2977 	ld (PINVAL,sp),a
      0026E1                       2978 	_xpop 
      0026E1 90 F6            [ 1]    1     ld a,(y)
      0026E3 93               [ 1]    2     ldw x,y 
      0026E4 EE 01            [ 2]    3     ldw x,(1,x)
      0026E6 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0026EA A3 00 0F         [ 2] 2979 	cpw x,#15 
      0026ED 23 05            [ 2] 2980 	jrule 2$
      0026EF A6 0A            [ 1] 2981 	ld a,#ERR_BAD_VALUE
      0026F1 CC 16 86         [ 2] 2982 	jp tb_error 
      0026F4 CD 2C 6F         [ 4] 2983 2$:	call select_pin 
      0026F7 6B 01            [ 1] 2984 	ld (PINNO,sp),a 
      0026F9 A6 01            [ 1] 2985 	ld a,#1
      0026FB 0D 01            [ 1] 2986 	tnz (PINNO,sp)
      0026FD 27 05            [ 1] 2987 	jreq 4$
      0026FF 48               [ 1] 2988 3$: sll a
      002700 0A 01            [ 1] 2989 	dec (PINNO,sp)
      002702 26 FB            [ 1] 2990 	jrne 3$
      002704 0D 02            [ 1] 2991 4$: tnz (PINVAL,sp)
      002706 26 05            [ 1] 2992 	jrne 5$
      002708 43               [ 1] 2993 	cpl a 
      002709 E4 00            [ 1] 2994 	and a,(GPIO_ODR,x)
      00270B 20 02            [ 2] 2995 	jra 8$
      00270D EA 00            [ 1] 2996 5$: or a,(GPIO_ODR,x)
      00270F E7 00            [ 1] 2997 8$: ld (GPIO_ODR,x),a 
      002711                       2998 	_drop VSIZE 
      002711 5B 02            [ 2]    1     addw sp,#VSIZE 
      002713 81               [ 4] 2999 	ret
                                   3000 
                                   3001 
                                   3002 ;-----------------------
                                   3003 ; BASIC: STOP
                                   3004 ; stop progam execution  
                                   3005 ; without resetting pointers 
                                   3006 ; the program is resumed
                                   3007 ; with RUN 
                                   3008 ;-------------------------
      002714                       3009 stop:
      002714 72 00 00 22 02   [ 2] 3010 	btjt flags,#FRUN,2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      002719 4F               [ 1] 3011 	clr a
      00271A 81               [ 4] 3012 	ret 
      00271B                       3013 2$:	 
                                   3014 ; create space on cstack to save context 
      00271B AE 27 42         [ 2] 3015 	ldw x,#break_point 
      00271E CD 09 5C         [ 4] 3016 	call puts 
      002721                       3017 	_drop 2 ;drop return address 
      002721 5B 02            [ 2]    1     addw sp,#2 
      002723                       3018 	_vars CTXT_SIZE ; context size 
      002723 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      002725 CD 20 42         [ 4] 3019 	call save_context 
      002728 AE 16 90         [ 2] 3020 	ldw x,#tib 
      00272B CF 00 04         [ 2] 3021 	ldw basicptr,x
      00272E 7F               [ 1] 3022 	clr (x)
      00272F 72 5F 00 03      [ 1] 3023 	clr count  
      002733 5F               [ 1] 3024 	clrw x 
      002734 CF 00 00         [ 2] 3025 	ldw in.w,x
      002737 72 11 00 22      [ 1] 3026 	bres flags,#FRUN 
      00273B 72 18 00 22      [ 1] 3027 	bset flags,#FBREAK
      00273F CC 17 2F         [ 2] 3028 	jp interpreter 
      002742 0A 62 72 65 61 6B 20  3029 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3030 
                                   3031 ;-----------------------
                                   3032 ; BASIC: NEW
                                   3033 ; from command line only 
                                   3034 ; free program memory
                                   3035 ; and clear variables 
                                   3036 ;------------------------
      002760                       3037 new: 
      002760 72 01 00 22 01   [ 2] 3038 	btjf flags,#FRUN,0$ 
      002765 81               [ 4] 3039 	ret 
      002766                       3040 0$:	
      002766 CD 14 9E         [ 4] 3041 	call clear_basic 
      002769 81               [ 4] 3042 	ret 
                                   3043 
                                   3044 ;-----------------------------------
                                   3045 ; erase program at specified address
                                   3046 ; keep signature and size fields. 
                                   3047 ; signature replaced by "XX"
                                   3048 ; input:
                                   3049 ;    X    address 
                                   3050 ;-----------------------------------
                           000001  3051 	ADDR=1    ; program address
                           000003  3052 	PRG_SIZE=3    ; program size 
                           000005  3053 	BLOCKS=5 ; blocks to erase 
                           000006  3054 	VSIZE=6
      00276A                       3055 erase_program:
      00276A CD 18 1A         [ 4] 3056 	call get_int24
      00276D CD 24 CD         [ 4] 3057 	call is_program_addr 
      002770 26 4A            [ 1] 3058 	jrne 9$
      002772 CD 06 E7         [ 4] 3059 	call move_erase_to_ram
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      002775 72 5F 00 18      [ 1] 3060 	clr farptr 
      002779                       3061 	_vars VSIZE 
      002779 52 06            [ 2]    1     sub sp,#VSIZE 
      00277B 1D 00 04         [ 2] 3062 1$:	subw x,#4 
      00277E 1F 01            [ 2] 3063 	ldw (ADDR,sp),x
      002780 EE 02            [ 2] 3064 	ldw x,(2,x)
      002782 1F 03            [ 2] 3065 	ldw (PRG_SIZE,sp),x
      002784 A6 80            [ 1] 3066 	ld a,#BLOCK_SIZE 
      002786 62               [ 2] 3067 	div x,a 
      002787 4D               [ 1] 3068 	tnz a 
      002788 27 01            [ 1] 3069 	jreq 2$ 
      00278A 5C               [ 1] 3070 	incw x 
      00278B 1F 05            [ 2] 3071 2$:	ldw (BLOCKS,sp),x 
      00278D 1E 01            [ 2] 3072 	ldw x,(ADDR,sp)
      00278F CF 00 19         [ 2] 3073 	ldw ptr16,x 
      002792 CD 07 65         [ 4] 3074 3$:	call block_erase
      002795 AE 00 80         [ 2] 3075 	ldw x,#BLOCK_SIZE 
      002798 CD 08 60         [ 4] 3076 	call incr_farptr
      00279B 1E 05            [ 2] 3077 	ldw x,(BLOCKS,sp)
      00279D 5A               [ 2] 3078 	decw x 
      00279E 1F 05            [ 2] 3079 	ldw (BLOCKS,sp),x 
      0027A0 26 F0            [ 1] 3080 	jrne 3$ 
                                   3081 ; write XX and size at addr 
      0027A2 1E 01            [ 2] 3082 	ldw x,(ADDR,sp)
      0027A4 CF 00 19         [ 2] 3083 	ldw ptr16,x 
      0027A7 A6 58            [ 1] 3084 	ld a,#'X 
      0027A9 5F               [ 1] 3085 	clrw x 
      0027AA CD 07 8B         [ 4] 3086 	call write_byte 
      0027AD CD 07 8B         [ 4] 3087 	call write_byte 
      0027B0 7B 03            [ 1] 3088 	ld a,(PRG_SIZE,sp)
      0027B2 CD 07 8B         [ 4] 3089 	call write_byte 
      0027B5 7B 04            [ 1] 3090 	ld a,(PRG_SIZE+1,sp)
      0027B7 CD 07 8B         [ 4] 3091 	call write_byte 
      0027BA                       3092 	_drop VSIZE 
      0027BA 5B 06            [ 2]    1     addw sp,#VSIZE 
      0027BC                       3093 9$:	
      0027BC 81               [ 4] 3094 	ret 
                                   3095 
                                   3096 ;-----------------------------------
                                   3097 ; BASIC: ERASE \E | \F || address
                                   3098 ; erase all block in range from 
                                   3099 ;  'app_space' to FLASH end (0x27fff)
                                   3100 ;  or all EEPROM 
                                   3101 ; that contains a non zero byte. 
                                   3102 ; if the argument is an address  
                                   3103 ; mark the program at this address 
                                   3104 ; as erased. Erase the blocks 
                                   3105 ; replace signature by 'XX' and 
                                   3106 ; keep size field.  
                                   3107 ;-----------------------------------
                           000001  3108 	LIMIT=1 
                           000003  3109 	VSIZE = 3 
      0027BD                       3110 erase:
      0027BD 72 01 00 22 05   [ 2] 3111 	btjf flags,#FRUN,eras0
      0027C2 A6 07            [ 1] 3112 	ld a,#ERR_CMD_ONLY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      0027C4 CC 16 86         [ 2] 3113 	jp tb_error 
      0027C7                       3114 eras0:	
      0027C7 72 5F 00 18      [ 1] 3115 	clr farptr 
      0027CB CD 17 E8         [ 4] 3116 	call next_token
      0027CE A1 84            [ 1] 3117 	cp a,#TK_INTGR
      0027D0 27 98            [ 1] 3118 	jreq erase_program  
      0027D2                       3119 	_vars VSIZE 
      0027D2 52 03            [ 2]    1     sub sp,#VSIZE 
      0027D4 A1 04            [ 1] 3120 	cp a,#TK_CHAR 
      0027D6 27 03            [ 1] 3121 	jreq 0$ 
      0027D8 CC 16 84         [ 2] 3122 	jp syntax_error
      0027DB CD 18 2A         [ 4] 3123 0$: call get_char 
      0027DE A4 DF            [ 1] 3124 	and a,#0XDF 
      0027E0 A1 45            [ 1] 3125 	cp a,#'E
      0027E2 26 0C            [ 1] 3126 	jrne 1$
      0027E4 AE 40 00         [ 2] 3127 	ldw x,#EEPROM_BASE 
      0027E7 CF 00 19         [ 2] 3128 	ldw farptr+1,x 
      0027EA AE 47 FF         [ 2] 3129 	ldw x,#EEPROM_END
      0027ED 4F               [ 1] 3130 	clr a 
      0027EE 20 15            [ 2] 3131 	jra 3$ 
      0027F0 A1 46            [ 1] 3132 1$: cp a,#'F 
      0027F2 27 06            [ 1] 3133 	jreq 2$
      0027F4 AE 15 8C         [ 2] 3134 	ldw x,#err_bad_value
      0027F7 CC 16 86         [ 2] 3135 	jp tb_error
      0027FA                       3136 2$:
      0027FA AE 37 80         [ 2] 3137 	ldw x,#app_space  
      0027FD CF 00 19         [ 2] 3138 	ldw farptr+1,x 
      002800 A6 02            [ 1] 3139 	ld a,#(FLASH_END>>16)&0XFF 
      002802 AE 7F FF         [ 2] 3140 	ldw x,#FLASH_END&0xffff
      002805                       3141 3$:
      002805 6B 01            [ 1] 3142 	ld (LIMIT,sp),a 
      002807 1F 02            [ 2] 3143 	ldw (LIMIT+1,sp),x 
                                   3144 ; operation done from RAM
                                   3145 ; copy code to RAM in tib   
      002809 CD 06 E7         [ 4] 3146 	call move_erase_to_ram
      00280C                       3147 4$:	 
      00280C CD 08 6E         [ 4] 3148     call scan_block 
      00280F 27 08            [ 1] 3149 	jreq 5$  ; block already erased 
      002811 A6 45            [ 1] 3150     ld a,#'E 
      002813 CD 08 FF         [ 4] 3151     call putc 
      002816 CD 07 65         [ 4] 3152 	call block_erase   
                                   3153 ; this block is clean, next  
      002819 AE 00 80         [ 2] 3154 5$:	ldw x,#BLOCK_SIZE
      00281C CD 08 60         [ 4] 3155 	call incr_farptr
                                   3156 ; check limit, 24 bit substraction  	
      00281F 7B 01            [ 1] 3157 	ld a,(LIMIT,sp)
      002821 1E 02            [ 2] 3158 	ldw x,(LIMIT+1,sp)
      002823 72 B0 00 19      [ 2] 3159 	subw x,farptr+1
      002827 C2 00 18         [ 1] 3160 	sbc a,farptr 
      00282A 22 E0            [ 1] 3161 	jrugt 4$ 
      00282C CD 14 9E         [ 4] 3162 9$: call clear_basic
      00282F 1E 02            [ 2] 3163 	ldw x,(LIMIT+1,sp)
      002831 A3 47 FF         [ 2] 3164 	cpw x,#EEPROM_END
      002834 26 03            [ 1] 3165 	jrne 10$
      002836 CD 1D 20         [ 4] 3166 	call func_eefree 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      002839                       3167 10$:
      002839                       3168 	_drop VSIZE 
      002839 5B 03            [ 2]    1     addw sp,#VSIZE 
      00283B 81               [ 4] 3169 	ret 
                                   3170 	
                                   3171 
                                   3172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3173 ;  check for application signature 
                                   3174 ; input:
                                   3175 ;	x       address to check 
                                   3176 ; output:
                                   3177 ;   Z      1  signature present 
                                   3178 ;          0 not app signature  
                                   3179 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00283C                       3180 qsign: 
      00283C 89               [ 2] 3181 	pushw x 
                                   3182 ; align to block 
      00283D 9F               [ 1] 3183 	ld a,xl 
      00283E A4 80            [ 1] 3184 	and a,#BLOCK_SIZE 
      002840 97               [ 1] 3185 	ld xl,a 
      002841 FE               [ 2] 3186 	ldw x,(x)
      002842 C3 29 4A         [ 2] 3187 	cpw x,SIGNATURE ; "TB" 
      002845 85               [ 2] 3188 	popw x 
      002846 81               [ 4] 3189 	ret 
                                   3190 
                                   3191 ;--------------------------------------
                                   3192 ;  fill write buffer 
                                   3193 ;  input:
                                   3194 ;    y  point to output buffer 
                                   3195 ;    x  point to source 
                                   3196 ;    a  bytes to write in buffer 
                                   3197 ;  output:
                                   3198 ;    y   += A 
                                   3199 ;    X   += A 
                                   3200 ;    A   0 
                                   3201 ;---------------------------------------
      002847                       3202 fill_write_buffer:
      002847 88               [ 1] 3203 	push a 
      002848 4D               [ 1] 3204 	tnz a 
      002849 27 0A            [ 1] 3205 	jreq 9$ 
      00284B F6               [ 1] 3206 1$: ld a,(x)
      00284C 5C               [ 1] 3207 	incw x 
      00284D 90 F7            [ 1] 3208 	ld (y),a 
      00284F 90 5C            [ 1] 3209 	incw y 
      002851 0A 01            [ 1] 3210 	dec (1,sp) 
      002853 26 F6            [ 1] 3211 	jrne 1$ 
      002855 84               [ 1] 3212 9$:	pop a 
      002856 81               [ 4] 3213     ret 	
                                   3214 
                                   3215 ;--------------------------------------
                                   3216 ;  fill pad buffer with zero 
                                   3217 ;  input:
                                   3218 ;	none 
                                   3219 ;  output:
                                   3220 ;    y     buffer address  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                                   3221 ;--------------------------------------
      002857                       3222 clear_block_buffer:
      002857 88               [ 1] 3223 	push a 
      002858 90 AE 16 E0      [ 2] 3224 	ldw y,#block_buffer 
      00285C 90 89            [ 2] 3225 	pushw y
      00285E A6 80            [ 1] 3226 	ld a,#BLOCK_SIZE   
      002860 90 7F            [ 1] 3227 1$:	clr (y)
      002862 90 5C            [ 1] 3228 	incw y
      002864 4A               [ 1] 3229 	dec a  
      002865 26 F9            [ 1] 3230 	jrne 1$ 	
      002867 90 85            [ 2] 3231 9$: popw y 
      002869 84               [ 1] 3232 	pop a 			
      00286A 81               [ 4] 3233 	ret 
                                   3234 
                                   3235 
                                   3236 ;----------------------------------
                                   3237 ;  search  a free space space that 
                                   3238 ;  fit program size 
                                   3239 ; input:
                                   3240 ;    X    program size 
                                   3241 ; output:
                                   3242 ;    X    address | 0 
                                   3243 ;------------------------------------
                           000001  3244 	PG_SIZE=1 
                           000002  3245 	VSIZE=2 
      00286B                       3246 search_fit:
      00286B 89               [ 2] 3247 	pushw x; PG_SIZE 
      00286C AE 37 80         [ 2] 3248 	ldw x,#app_space 
      00286F CD 29 4E         [ 4] 3249 1$:	call is_erased 
      002872 27 0D            [ 1] 3250 	jreq 4$
      002874 F6               [ 1] 3251 	ld a,(x)
      002875 EA 01            [ 1] 3252 	or a,(1,x)
      002877 27 19            [ 1] 3253 	jreq 9$ ; free space 
      002879 CD 29 59         [ 4] 3254 2$:	call skip_to_next
      00287C 5D               [ 2] 3255 	tnzw x 
      00287D 26 F0            [ 1] 3256 	jrne 1$
      00287F 20 11            [ 2] 3257 	jra 9$
      002881                       3258 4$: ; erased program 
                                   3259     ; does it fit? 
      002881 CF 00 0D         [ 2] 3260 	ldw acc16,x 
      002884 EE 02            [ 2] 3261 	ldw x,(2,x) ; size erased program 
      002886 13 01            [ 2] 3262 	cpw x,(1,sp) ; size program to save 
      002888 24 05            [ 1] 3263 	jruge 8$   ; fit 
      00288A CE 00 0D         [ 2] 3264 	ldw x,acc16 
      00288D 20 EA            [ 2] 3265 	jra 2$ 
      00288F CE 00 0D         [ 2] 3266 8$: ldw x,acc16 ; fit in this one 	
      002892                       3267 9$:	_drop VSIZE 
      002892 5B 02            [ 2]    1     addw sp,#VSIZE 
      002894 81               [ 4] 3268 	ret  
                                   3269 
                                   3270 ;-------------------------
                                   3271 ; erase header and 
                                   3272 ; size fields 
                                   3273 ; input: 
                                   3274 ;    X    program address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



                                   3275 ; output:
                                   3276 ;    X    unchanged 
                                   3277 ;-------------------------
                           000001  3278 	COUNT=1 
      002895                       3279 erase_header:
      002895 89               [ 2] 3280 	pushw x 
      002896 4B 04            [ 1] 3281 	push #4 ; COUNT 
      002898 72 5F 00 18      [ 1] 3282 	clr farptr 
      00289C CF 00 19         [ 2] 3283 	ldw ptr16,x 
      00289F 4F               [ 1] 3284 	clr a 
      0028A0 5F               [ 1] 3285 	clrw x 
      0028A1 CD 07 8B         [ 4] 3286 1$:	call write_byte 
      0028A4 0A 01            [ 1] 3287 	dec (COUNT,sp)
      0028A6 26 F9            [ 1] 3288 	jrne 1$
      0028A8                       3289 	_drop 1 
      0028A8 5B 01            [ 2]    1     addw sp,#1 
      0028AA 85               [ 2] 3290 	popw x 
      0028AB CF 00 19         [ 2] 3291 	ldw ptr16,x 
      0028AE 81               [ 4] 3292 	ret 
                                   3293 
                                   3294 ;---------------------------------------
                                   3295 ; BASIC: SAVE
                                   3296 ; write application from RAM to FLASH
                                   3297 ; at UFLASH address
                                   3298 ;--------------------------------------
                           000001  3299 	XTEMP=1
                           000003  3300 	COUNT=3  ; last count bytes written 
                           000004  3301 	CNT_LO=4 ; count low byte 
                           000005  3302 	TOWRITE=5 ; how bytes left to write  
                           000006  3303 	VSIZE=6 
      0028AF                       3304 cmd_save:
      0028AF 89               [ 2] 3305 	pushw x 
      0028B0 90 89            [ 2] 3306 	pushw y 
      0028B2                       3307 	_vars VSIZE
      0028B2 52 06            [ 2]    1     sub sp,#VSIZE 
      0028B4 CD 1E 3A         [ 4] 3308 	call prog_size 
      0028B7 26 03            [ 1] 3309 	jrne 0$ 
      0028B9 CC 29 44         [ 2] 3310 	jp 9$ ; no program to save 
      0028BC 1F 05            [ 2] 3311 0$:	ldw (TOWRITE,sp),x ; program size
      0028BE 72 5F 00 18      [ 1] 3312 	clr farptr 
      0028C2 CD 28 6B         [ 4] 3313 	call search_fit
      0028C5 CF 00 19         [ 2] 3314 	ldw ptr16,x 
      0028C8 AE FF FF         [ 2] 3315 	ldw x,#0xFFFF
      0028CB 72 B0 00 19      [ 2] 3316 	subw x,ptr16 ; free flash 
      0028CF 1D 00 04         [ 2] 3317 	subw x,#4 ; signature and size field 
      0028D2 13 05            [ 2] 3318 	cpw x,(TOWRITE,sp)
      0028D4 24 05            [ 1] 3319 	jruge 1$
      0028D6 A6 01            [ 1] 3320 	ld a,#ERR_MEM_FULL
      0028D8 CC 16 86         [ 2] 3321 	jp tb_error 
      0028DB                       3322 1$: ; check if header bytes are zero's 
      0028DB CE 00 19         [ 2] 3323 	ldw x,ptr16 
      0028DE F6               [ 1] 3324 	ld a,(x)
      0028DF EA 01            [ 1] 3325 	or a,(1,x)
      0028E1 EA 02            [ 1] 3326 	or a,(2,x)
      0028E3 EA 03            [ 1] 3327 	or a,(3,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0028E5 27 03            [ 1] 3328 	jreq 2$
      0028E7 CD 28 95         [ 4] 3329 	call erase_header ; preserve X and farptr 
      0028EA                       3330 2$: 
                                   3331 ; block programming flash
                                   3332 ; must be done from RAM
                                   3333 ; moved in tib  
      0028EA CD 07 27         [ 4] 3334 	call move_prg_to_ram
                                   3335 ; initialize written bytes count  
      0028ED 0F 03            [ 1] 3336 	clr (COUNT,sp)
                                   3337 ; first bock 
                                   3338 ; containt signature 2 bytes 
                                   3339 ; and size 	2 bytes 
                                   3340 ; use Y as pointer to block_buffer
      0028EF CD 28 57         [ 4] 3341 	call clear_block_buffer ; -- y=*block_buffer	
                                   3342 ; write signature
      0028F2 CE 29 4A         [ 2] 3343 	ldw x,SIGNATURE ; "TB" 
      0028F5 90 FF            [ 2] 3344 	ldw (y),x 
      0028F7 72 A9 00 02      [ 2] 3345 	addw y,#2
      0028FB 1E 05            [ 2] 3346 	ldw x,(TOWRITE,sp)
      0028FD 90 FF            [ 2] 3347 	ldw (y),x
      0028FF 72 A9 00 02      [ 2] 3348 	addw y,#2   
      002903 A6 7C            [ 1] 3349 	ld a,#(BLOCK_SIZE-4)
      002905 A3 00 7C         [ 2] 3350 	cpw x,#(BLOCK_SIZE-4) 
      002908 22 01            [ 1] 3351 	jrugt 3$
      00290A 9F               [ 1] 3352 	ld a,xl 
      00290B 6B 04            [ 1] 3353 3$:	ld (CNT_LO,sp),a   
      00290D CE 00 1B         [ 2] 3354 	ldw x,txtbgn 
      002910 1F 01            [ 2] 3355 	ldw (XTEMP,sp),x 
      002912                       3356 32$: 
      002912 1E 01            [ 2] 3357 	ldw x,(XTEMP,sp)
      002914 7B 04            [ 1] 3358 	ld a,(CNT_LO,sp)
      002916 CD 28 47         [ 4] 3359 	call fill_write_buffer 
      002919 1F 01            [ 2] 3360 	ldw (XTEMP,sp),x 
      00291B AE 16 E0         [ 2] 3361 	ldw x,#block_buffer
      00291E CD 07 41         [ 4] 3362 	call write_buffer
      002921 AE 00 80         [ 2] 3363 	ldw x,#BLOCK_SIZE 
      002924 CD 08 60         [ 4] 3364 	call incr_farptr  
                                   3365 ; following blocks 
      002927 1E 01            [ 2] 3366 	ldw x,(XTEMP,sp)
      002929 C3 00 1D         [ 2] 3367 	cpw x,txtend 
      00292C 24 16            [ 1] 3368 	jruge 9$ 
      00292E 1E 05            [ 2] 3369 	ldw x,(TOWRITE,sp)
      002930 72 F0 03         [ 2] 3370 	subw x,(COUNT,sp)
      002933 1F 05            [ 2] 3371 	ldw (TOWRITE,sp),x 
      002935 A6 80            [ 1] 3372 	ld a,#BLOCK_SIZE 
      002937 A3 00 80         [ 2] 3373 	cpw x,#BLOCK_SIZE 
      00293A 24 01            [ 1] 3374 	jruge 4$ 
      00293C 9F               [ 1] 3375 	ld a,xl 
      00293D 6B 04            [ 1] 3376 4$:	ld (CNT_LO,sp),a 
      00293F CD 28 57         [ 4] 3377 	call clear_block_buffer 
      002942 20 CE            [ 2] 3378 	jra 32$ 
      002944                       3379 9$:	_drop VSIZE 
      002944 5B 06            [ 2]    1     addw sp,#VSIZE 
      002946 90 85            [ 2] 3380     popw y 
      002948 85               [ 2] 3381 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      002949 81               [ 4] 3382 	ret 
                                   3383 
      00294A 54 42                 3384 SIGNATURE: .ascii "TB"
      00294C 58 58                 3385 ERASED: .ascii "XX" 
                                   3386 
                                   3387 ;---------------------
                                   3388 ; check if there is 
                                   3389 ; an erased program 
                                   3390 ; at this address 
                                   3391 ; input:
                                   3392 ;    X    address 
                                   3393 ; output:
                                   3394 ;    Z    Set=erased program 
                                   3395 ;--------------------
      00294E                       3396 is_erased:
      00294E 89               [ 2] 3397 	pushw x 
                                   3398 ; align to BLOCK 
      00294F 9F               [ 1] 3399 	ld a,xl 
      002950 A4 80            [ 1] 3400 	and a,#BLOCK_SIZE 
      002952 97               [ 1] 3401 	ld xl,a 
      002953 FE               [ 2] 3402 	ldw x,(x)
      002954 C3 29 4C         [ 2] 3403 	cpw x,ERASED 
      002957 85               [ 2] 3404 	popw x 
      002958 81               [ 4] 3405 	ret 
                                   3406 
                                   3407 ;----------------------------
                                   3408 ;  skip to next program
                                   3409 ;  block 
                                   3410 ; input:
                                   3411 ;    X   actual program addr
                                   3412 ; output:
                                   3413 ;    X   next block 
                                   3414 ;        after program 
                                   3415 ;----------------------------
      002959                       3416 skip_to_next:
                                   3417 ; align to block 
      002959 9F               [ 1] 3418 	ld a,xl 
      00295A A4 80            [ 1] 3419 	and a,#BLOCK_SIZE 
      00295C 97               [ 1] 3420 	ld xl,a 
      00295D CF 00 0D         [ 2] 3421 	ldw acc16,x 
      002960 EE 02            [ 2] 3422 	ldw x,(2,x)
      002962 72 BB 00 0D      [ 2] 3423 	addw x,acc16 ; blk_addr+prg_size 
      002966 1C 00 04         [ 2] 3424 	addw x,#4 ; +header fields 
                                   3425 ; align to next block 
      002969 1C 00 7F         [ 2] 3426 	addw x,#BLOCK_SIZE-1 
      00296C 9F               [ 1] 3427 	ld a,xl 
      00296D A4 80            [ 1] 3428 	and a,#0x80 
      00296F 97               [ 1] 3429 	ld xl,a  
      002970 81               [ 4] 3430 	ret 
                                   3431 
                                   3432 
                                   3433 ;---------------------
                                   3434 ; BASIC: DIR 
                                   3435 ; list programs saved 
                                   3436 ; in flash 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   3437 ;--------------------
                           000001  3438 	XTEMP=1 
      002971                       3439 cmd_dir:
      002971 AE 37 80         [ 2] 3440 	ldw x,#app_space 
      002974 89               [ 2] 3441 	pushw x 
      002975                       3442 1$: 
      002975 CD 28 3C         [ 4] 3443 	call qsign 
      002978 26 3B            [ 1] 3444 	jrne 4$
      00297A 1C 00 04         [ 2] 3445 	addw x,#4
      00297D 35 10 00 0A      [ 1] 3446 	mov base,#16
      002981 CD 18 30         [ 4] 3447 	call prt_i16
      002984 A6 20            [ 1] 3448 	ld a,#SPACE 
      002986 CD 08 FF         [ 4] 3449 	call putc 
      002989 1E 01            [ 2] 3450 	ldw x,(1,sp)
      00298B EE 02            [ 2] 3451 	ldw x,(2,x)
      00298D 35 0A 00 0A      [ 1] 3452 	mov base,#10 
      002991 CD 18 30         [ 4] 3453 	call prt_i16 
      002994 AE 1E A4         [ 2] 3454 	ldw x,#STR_BYTES
      002997 CD 09 5C         [ 4] 3455 	call puts
      00299A A6 2C            [ 1] 3456 	ld a,#', 
      00299C CD 08 FF         [ 4] 3457 	call putc
      00299F 1E 01            [ 2] 3458 	ldw x,(1,sp)
      0029A1 1C 00 0A         [ 2] 3459 	addw x,#10
      0029A4 CD 09 5C         [ 4] 3460 	call puts 
      0029A7 A6 0D            [ 1] 3461 	ld a,#CR 
      0029A9 CD 08 FF         [ 4] 3462 	call putc
      0029AC 1E 01            [ 2] 3463 	ldw x,(1,sp)
      0029AE CD 29 59         [ 4] 3464 3$:	call skip_to_next
      0029B1 1F 01            [ 2] 3465 	ldw (1,sp),x 
      0029B3 20 C0            [ 2] 3466 	jra 1$
      0029B5                       3467 4$: ; check if it is an erased program 
      0029B5 CD 29 4E         [ 4] 3468 	call is_erased 
      0029B8 27 F4            [ 1] 3469 	jreq 3$ 
      0029BA                       3470 8$: ; done 
      0029BA                       3471 	_drop 2 
      0029BA 5B 02            [ 2]    1     addw sp,#2 
      0029BC 81               [ 4] 3472 	ret 
                                   3473 
                                   3474 ;---------------------
                                   3475 ; BASIC: WRITE expr1,expr2|char|string[,expr|char|string]* 
                                   3476 ; write 1 or more byte to FLASH or EEPROM
                                   3477 ; starting at address  
                                   3478 ; input:
                                   3479 ;   expr1  	is address 
                                   3480 ;   expr2,...,exprn   are bytes to write
                                   3481 ; output:
                                   3482 ;   none 
                                   3483 ;---------------------
      0029BD                       3484 write:
      0029BD CD 1A F4         [ 4] 3485 	call expression
      0029C0 A1 84            [ 1] 3486 	cp a,#TK_INTGR 
      0029C2 27 03            [ 1] 3487 	jreq 0$
      0029C4 CC 16 84         [ 2] 3488 	jp syntax_error
      0029C7                       3489 0$: _xpop 
      0029C7 90 F6            [ 1]    1     ld a,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]



      0029C9 93               [ 1]    2     ldw x,y 
      0029CA EE 01            [ 2]    3     ldw x,(1,x)
      0029CC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0029D0 C7 00 18         [ 1] 3490 	ld farptr,a 
      0029D3 CF 00 19         [ 2] 3491 	ldw ptr16,x 
      0029D6                       3492 1$:	
      0029D6 CD 17 E8         [ 4] 3493 	call next_token 
      0029D9 A1 08            [ 1] 3494 	cp a,#TK_COMMA 
      0029DB 27 02            [ 1] 3495 	jreq 2$ 
      0029DD 20 46            [ 2] 3496 	jra 9$ ; no more data 
      0029DF CD 17 E8         [ 4] 3497 2$:	call next_token 
      0029E2 A1 04            [ 1] 3498 	cp a,#TK_CHAR 
      0029E4 27 23            [ 1] 3499 	jreq 4$ 
      0029E6 A1 02            [ 1] 3500 	cp a,#TK_QSTR
      0029E8 27 2A            [ 1] 3501 	jreq 6$
      0029EA                       3502 	_unget_token 
      0029EA 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      0029EF CD 1A F4         [ 4] 3503 	call expression
      0029F2 A1 84            [ 1] 3504 	cp a,#TK_INTGR
      0029F4 27 03            [ 1] 3505 	jreq 3$
      0029F6 CC 16 84         [ 2] 3506 	jp syntax_error
      0029F9                       3507 3$:	_xpop 
      0029F9 90 F6            [ 1]    1     ld a,(y)
      0029FB 93               [ 1]    2     ldw x,y 
      0029FC EE 01            [ 2]    3     ldw x,(1,x)
      0029FE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A02 9F               [ 1] 3508 	ld a,xl 
      002A03 5F               [ 1] 3509 	clrw x 
      002A04 CD 07 8B         [ 4] 3510 	call write_byte
      002A07 20 CD            [ 2] 3511 	jra 1$ 
      002A09                       3512 4$: ; write character 
      002A09 F6               [ 1] 3513 	ld a,(x)
      002A0A 72 5C 00 01      [ 1] 3514 	inc in 
      002A0E 5F               [ 1] 3515 	clrw x 
      002A0F CD 07 8B         [ 4] 3516 	call write_byte 
      002A12 20 C2            [ 2] 3517 	jra 1$ 
      002A14                       3518 6$: ; write string 
      002A14 89               [ 2] 3519 	pushw x 
      002A15 F6               [ 1] 3520 	ld a,(x)
      002A16 72 5C 00 01      [ 1] 3521 	inc in 
      002A1A 5F               [ 1] 3522 	clrw x 
      002A1B CD 07 8B         [ 4] 3523 	call write_byte 
      002A1E 85               [ 2] 3524 	popw x 
      002A1F F6               [ 1] 3525 	ld a,(x)
      002A20 27 B4            [ 1] 3526 	jreq 1$
      002A22 5C               [ 1] 3527 	incw x 
      002A23 20 EF            [ 2] 3528 	jra 6$ 	
      002A25                       3529 9$:
      002A25 81               [ 4] 3530 	ret 
                                   3531 
                                   3532 
                                   3533 ;---------------------
                                   3534 ;BASIC: CHAR(expr)
                                   3535 ; évaluate expression 
                                   3536 ; and take the 7 least 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]



                                   3537 ; bits as ASCII character
                                   3538 ; output: 
                                   3539 ; 	A char 
                                   3540 ;---------------------
      002A26                       3541 func_char:
      002A26 CD 19 AB         [ 4] 3542 	call func_args 
      002A29 A1 01            [ 1] 3543 	cp a,#1
      002A2B 27 03            [ 1] 3544 	jreq 1$
      002A2D CC 16 84         [ 2] 3545 	jp syntax_error
      002A30                       3546 1$:	_xpop
      002A30 90 F6            [ 1]    1     ld a,(y)
      002A32 93               [ 1]    2     ldw x,y 
      002A33 EE 01            [ 2]    3     ldw x,(1,x)
      002A35 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A39 9F               [ 1] 3547 	ld a,xl
      002A3A A4 7F            [ 1] 3548 	and a,#0x7f 
      002A3C 81               [ 4] 3549 	ret
                                   3550 
                                   3551 ;---------------------
                                   3552 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3553 ; extract first character 
                                   3554 ; of string argument 
                                   3555 ; output:
                                   3556 ;    A:X    int24 
                                   3557 ;---------------------
      002A3D                       3558 ascii:
      002A3D A6 06            [ 1] 3559 	ld a,#TK_LPAREN
      002A3F CD 19 9E         [ 4] 3560 	call expect 
      002A42 CD 17 E8         [ 4] 3561 	call next_token 
      002A45 A1 02            [ 1] 3562 	cp a,#TK_QSTR 
      002A47 27 0E            [ 1] 3563 	jreq 1$
      002A49 A1 04            [ 1] 3564 	cp a,#TK_CHAR 
      002A4B 27 12            [ 1] 3565 	jreq 2$ 
      002A4D A1 82            [ 1] 3566 	cp a,#TK_CFUNC 
      002A4F 27 03            [ 1] 3567 	jreq 0$
      002A51 CC 16 84         [ 2] 3568 	jp syntax_error
      002A54                       3569 0$: ; cfunc 
      002A54 FD               [ 4] 3570 	call (x)
      002A55 20 0B            [ 2] 3571 	jra 3$
      002A57                       3572 1$: ; quoted string 
      002A57 F6               [ 1] 3573 	ld a,(x)
      002A58 88               [ 1] 3574 	push a  
      002A59 CD 18 01         [ 4] 3575 	call skip_string
      002A5C 84               [ 1] 3576 	pop a  	
      002A5D 20 03            [ 2] 3577 	jra 3$ 
      002A5F                       3578 2$: ; character 
      002A5F CD 18 2A         [ 4] 3579 	call get_char 
      002A62 5F               [ 1] 3580 3$:	clrw x 
      002A63 02               [ 1] 3581 	rlwa x   
      002A64                       3582 4$:	_xpush  
      002A64 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002A68 90 F7            [ 1]    2     ld (y),a 
      002A6A 90 EF 01         [ 2]    3     ldw (1,y),x 
      002A6D A6 07            [ 1] 3583 	ld a,#TK_RPAREN 
      002A6F CD 19 9E         [ 4] 3584 	call expect
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]



      002A72                       3585 9$:	
      002A72                       3586 	_xpop  
      002A72 90 F6            [ 1]    1     ld a,(y)
      002A74 93               [ 1]    2     ldw x,y 
      002A75 EE 01            [ 2]    3     ldw x,(1,x)
      002A77 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002A7B 81               [ 4] 3587 	ret 
                                   3588 
                                   3589 ;---------------------
                                   3590 ;BASIC: KEY
                                   3591 ; wait for a character 
                                   3592 ; received from STDIN 
                                   3593 ; input:
                                   3594 ;	none 
                                   3595 ; output:
                                   3596 ;	a	 character 
                                   3597 ;---------------------
      002A7C                       3598 key:
      002A7C CD 09 0F         [ 4] 3599 	call getc 
      002A7F 81               [ 4] 3600 	ret
                                   3601 
                                   3602 ;----------------------
                                   3603 ; BASIC: QKEY
                                   3604 ; Return true if there 
                                   3605 ; is a character in 
                                   3606 ; waiting in STDIN 
                                   3607 ; input:
                                   3608 ;  none 
                                   3609 ; output:
                                   3610 ;   A     0|-1
                                   3611 ;-----------------------
      002A80                       3612 qkey:: 
      002A80 5F               [ 1] 3613 	clrw x 
      002A81 C6 00 2E         [ 1] 3614 	ld a,rx1_head
      002A84 C0 00 2F         [ 1] 3615 	sub a,rx1_tail 
      002A87 27 03            [ 1] 3616 	jreq 9$ 
      002A89 53               [ 2] 3617 	cplw x
      002A8A A6 FF            [ 1] 3618 	ld a,#255    
      002A8C                       3619 9$: 
      002A8C 81               [ 4] 3620 	ret 
                                   3621 
                                   3622 ;---------------------
                                   3623 ; BASIC: GPIO(port,reg)
                                   3624 ; return gpio register address 
                                   3625 ; expr {PORTA..PORTI}
                                   3626 ; input:
                                   3627 ;   none 
                                   3628 ; output:
                                   3629 ;   A:X 	gpio register address
                                   3630 ;----------------------------
                                   3631 ;	N=PORT
                                   3632 ;	T=REG 
      002A8D                       3633 gpio:
      002A8D CD 19 AB         [ 4] 3634 	call func_args 
      002A90 A1 02            [ 1] 3635 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]



      002A92 27 03            [ 1] 3636 	jreq 1$
      002A94 CC 16 84         [ 2] 3637 	jp syntax_error  
      002A97                       3638 1$:	_at_next 
      002A97 90 E6 03         [ 1]    1     ld a,(3,y)
      002A9A 93               [ 1]    2     ldw x,y 
      002A9B EE 04            [ 2]    3     ldw x,(4,x)
      002A9D A3 50 00         [ 2] 3639 	cpw x,#PA_BASE 
      002AA0 2B 16            [ 1] 3640 	jrmi bad_port
      002AA2 A3 50 29         [ 2] 3641 	cpw x,#PI_BASE+1 
      002AA5 2A 11            [ 1] 3642 	jrpl bad_port
      002AA7 89               [ 2] 3643 	pushw x 
      002AA8                       3644 	_xpop
      002AA8 90 F6            [ 1]    1     ld a,(y)
      002AAA 93               [ 1]    2     ldw x,y 
      002AAB EE 01            [ 2]    3     ldw x,(1,x)
      002AAD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AB1 72 FB 01         [ 2] 3645 	addw x,(1,sp)
      002AB4                       3646 	_drop 2 
      002AB4 5B 02            [ 2]    1     addw sp,#2 
      002AB6 4F               [ 1] 3647 	clr a 
      002AB7 81               [ 4] 3648 	ret
      002AB8                       3649 bad_port:
      002AB8 A6 0A            [ 1] 3650 	ld a,#ERR_BAD_VALUE
      002ABA CC 16 86         [ 2] 3651 	jp tb_error
                                   3652 
                                   3653 
                                   3654 ;-------------------------
                                   3655 ; BASIC: UFLASH 
                                   3656 ; return free flash address
                                   3657 ; scan all block starting at 
                                   3658 ; app_space and return 
                                   3659 ; address of first free block 
                                   3660 ; below extended memory.  
                                   3661 ; return 0 if no free block 
                                   3662 ; input:
                                   3663 ;  none 
                                   3664 ; output:
                                   3665 ;	A:X		FLASH free address
                                   3666 ;---------------------------
      002ABD                       3667 uflash:
      002ABD 72 5F 00 18      [ 1] 3668 	clr farptr 
      002AC1 AE 37 80         [ 2] 3669 	ldw x,#app_space 
      002AC4 89               [ 2] 3670 	pushw x 
      002AC5 CF 00 19         [ 2] 3671 1$:	ldw ptr16,x 
      002AC8 CD 08 6E         [ 4] 3672 	call scan_block 
      002ACB 27 0F            [ 1] 3673 	jreq 8$
      002ACD 1E 01            [ 2] 3674 	ldw x,(1,sp)
      002ACF 1C 00 80         [ 2] 3675 	addw x,#BLOCK_SIZE 
      002AD2 27 04            [ 1] 3676 	jreq 7$ 
      002AD4 1F 01            [ 2] 3677 	ldw (1,sp),x 
      002AD6 20 ED            [ 2] 3678 	jra 1$ 
      002AD8                       3679 7$: ; no free block 
      002AD8 0F 01            [ 1] 3680 	clr (1,sp) 
      002ADA 0F 02            [ 1] 3681 	clr (2,sp)
      002ADC 85               [ 2] 3682 8$: popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]



      002ADD 4F               [ 1] 3683 	clr a 
      002ADE 81               [ 4] 3684 	ret 
                                   3685 
                                   3686 
                                   3687 ;---------------------
                                   3688 ; BASIC: USR(addr,arg)
                                   3689 ; execute a function written 
                                   3690 ; in binary code.
                                   3691 ; input:
                                   3692 ;   addr	routine address 
                                   3693 ;   arg 	is an argument
                                   3694 ;           it can be ignore 
                                   3695 ;           by cally. 
                                   3696 ; output:
                                   3697 ;   xstack 	value returned by cally  
                                   3698 ;---------------------
      002ADF                       3699 usr:
      002ADF CD 19 AB         [ 4] 3700 	call func_args 
      002AE2 A1 02            [ 1] 3701 	cp a,#2
      002AE4 27 03            [ 1] 3702 	jreq 1$  
      002AE6 CC 16 84         [ 2] 3703 	jp syntax_error 
      002AE9                       3704 1$: 
      002AE9                       3705 	_at_next ; A:X addr 
      002AE9 90 E6 03         [ 1]    1     ld a,(3,y)
      002AEC 93               [ 1]    2     ldw x,y 
      002AED EE 04            [ 2]    3     ldw x,(4,x)
      002AEF CF 00 19         [ 2] 3706 	ldw ptr16,X 
      002AF2                       3707 	_xpop  ; arg 
      002AF2 90 F6            [ 1]    1     ld a,(y)
      002AF4 93               [ 1]    2     ldw x,y 
      002AF5 EE 01            [ 2]    3     ldw x,(1,x)
      002AF7 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002AFB                       3708 	_store_top ; overwrite addr 
      002AFB 90 F7            [ 1]    1     ld (y),a 
      002AFD 90 EF 01         [ 2]    2     ldw (1,y),x     
      002B00 72 CD 00 19      [ 6] 3709     call [ptr16]
      002B04 81               [ 4] 3710 	ret 
                                   3711 
                                   3712 
                                   3713 ;------------------------------
                                   3714 ; BASIC: BYE 
                                   3715 ; halt mcu in its lowest power mode 
                                   3716 ; wait for reset or external interrupt
                                   3717 ; do a cold start on wakeup.
                                   3718 ;------------------------------
      002B05                       3719 bye:
      002B05 72 0D 52 30 FB   [ 2] 3720 	btjf UART1_SR,#UART_SR_TC,.
      002B0A 8E               [10] 3721 	halt
      002B0B CC 00 B5         [ 2] 3722 	jp cold_start  
                                   3723 
                                   3724 ;----------------------------------
                                   3725 ; BASIC: SLEEP 
                                   3726 ; halt mcu until reset or external
                                   3727 ; interrupt.
                                   3728 ; Resume progam after SLEEP command
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]



                                   3729 ;----------------------------------
      002B0E                       3730 sleep:
      002B0E 72 0D 52 30 FB   [ 2] 3731 	btjf UART1_SR,#UART_SR_TC,.
      002B13 72 16 00 22      [ 1] 3732 	bset flags,#FSLEEP
      002B17 8E               [10] 3733 	halt 
      002B18 81               [ 4] 3734 	ret 
                                   3735 
                                   3736 ;-------------------------------
                                   3737 ; BASIC: PAUSE expr 
                                   3738 ; suspend execution for n msec.
                                   3739 ; input:
                                   3740 ;	none
                                   3741 ; output:
                                   3742 ;	none 
                                   3743 ;------------------------------
      002B19                       3744 pause:
      002B19 CD 1A F4         [ 4] 3745 	call expression
      002B1C A1 84            [ 1] 3746 	cp a,#TK_INTGR
      002B1E 27 03            [ 1] 3747 	jreq 1$ 
      002B20 CC 16 84         [ 2] 3748 	jp syntax_error
      002B23                       3749 1$: _xpop 
      002B23 90 F6            [ 1]    1     ld a,(y)
      002B25 93               [ 1]    2     ldw x,y 
      002B26 EE 01            [ 2]    3     ldw x,(1,x)
      002B28 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B2C                       3750 pause02:
      002B2C CF 00 12         [ 2] 3751 	ldw timer,x 
      002B2F CE 00 12         [ 2] 3752 1$: ldw x,timer 
      002B32 5D               [ 2] 3753 	tnzw x 
      002B33 27 03            [ 1] 3754 	jreq 2$
      002B35 8F               [10] 3755 	wfi 
      002B36 26 F7            [ 1] 3756 	jrne 1$
      002B38                       3757 2$:	
      002B38 81               [ 4] 3758 	ret 
                                   3759 
                                   3760 ;------------------------------
                                   3761 ; BASIC: AWU expr
                                   3762 ; halt mcu for 'expr' milliseconds
                                   3763 ; use Auto wakeup peripheral
                                   3764 ; all oscillators stopped except LSI
                                   3765 ; range: 1ms - 511ms
                                   3766 ; input:
                                   3767 ;  none
                                   3768 ; output:
                                   3769 ;  none:
                                   3770 ;------------------------------
      002B39                       3771 awu:
      002B39 CD 1A F4         [ 4] 3772   call expression
      002B3C A1 84            [ 1] 3773   cp a,#TK_INTGR
      002B3E 27 03            [ 1] 3774   jreq 1$
      002B40 CC 16 84         [ 2] 3775   jp syntax_error
      002B43                       3776 1$: _xpop 
      002B43 90 F6            [ 1]    1     ld a,(y)
      002B45 93               [ 1]    2     ldw x,y 
      002B46 EE 01            [ 2]    3     ldw x,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]



      002B48 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002B4C                       3777 awu02:
      002B4C A3 14 00         [ 2] 3778   cpw x,#5120
      002B4F 2B 0C            [ 1] 3779   jrmi 1$ 
      002B51 35 0F 50 F2      [ 1] 3780   mov AWU_TBR,#15 
      002B55 A6 1E            [ 1] 3781   ld a,#30
      002B57 62               [ 2] 3782   div x,a
      002B58 A6 10            [ 1] 3783   ld a,#16
      002B5A 62               [ 2] 3784   div x,a 
      002B5B 20 1E            [ 2] 3785   jra 4$
      002B5D                       3786 1$: 
      002B5D A3 08 00         [ 2] 3787   cpw x,#2048
      002B60 2B 09            [ 1] 3788   jrmi 2$ 
      002B62 35 0E 50 F2      [ 1] 3789   mov AWU_TBR,#14
      002B66 A6 50            [ 1] 3790   ld a,#80
      002B68 62               [ 2] 3791   div x,a 
      002B69 20 10            [ 2] 3792   jra 4$   
      002B6B                       3793 2$:
      002B6B 35 07 50 F2      [ 1] 3794   mov AWU_TBR,#7
      002B6F                       3795 3$:  
                                   3796 ; while X > 64  divide by 2 and increment AWU_TBR 
      002B6F A3 00 40         [ 2] 3797   cpw x,#64 
      002B72 23 07            [ 2] 3798   jrule 4$ 
      002B74 72 5C 50 F2      [ 1] 3799   inc AWU_TBR 
      002B78 54               [ 2] 3800   srlw x 
      002B79 20 F4            [ 2] 3801   jra 3$ 
      002B7B                       3802 4$:
      002B7B 9F               [ 1] 3803   ld a, xl
      002B7C 4A               [ 1] 3804   dec a 
      002B7D 27 01            [ 1] 3805   jreq 5$
      002B7F 4A               [ 1] 3806   dec a 	
      002B80                       3807 5$: 
      002B80 A4 3E            [ 1] 3808   and a,#0x3e 
      002B82 C7 50 F1         [ 1] 3809   ld AWU_APR,a 
      002B85 72 18 50 F0      [ 1] 3810   bset AWU_CSR,#AWU_CSR_AWUEN
      002B89 8E               [10] 3811   halt 
                                   3812 
      002B8A 81               [ 4] 3813   ret 
                                   3814 
                                   3815 ;------------------------------
                                   3816 ; BASIC: TICKS
                                   3817 ; return msec ticks counter value 
                                   3818 ; input:
                                   3819 ; 	none 
                                   3820 ; output:
                                   3821 ;	X 		TK_INTGR
                                   3822 ;-------------------------------
      002B8B                       3823 get_ticks:
      002B8B C6 00 0F         [ 1] 3824 	ld a,ticks 
      002B8E CE 00 10         [ 2] 3825 	ldw x,ticks+1 
      002B91 81               [ 4] 3826 	ret 
                                   3827 
                                   3828 ;------------------------------
                                   3829 ; BASIC: ABS(expr)
                                   3830 ; return absolute value of expr.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]



                                   3831 ; input:
                                   3832 ;   none
                                   3833 ; output:
                                   3834 ;   xstack    positive int24 
                                   3835 ;-------------------------------
      002B92                       3836 abs:
      002B92 CD 19 AB         [ 4] 3837 	call func_args 
      002B95 A1 01            [ 1] 3838 	cp a,#1 
      002B97 27 03            [ 1] 3839 	jreq 0$ 
      002B99 CC 16 84         [ 2] 3840 	jp syntax_error
      002B9C                       3841 0$:  
      002B9C CD 01 F3         [ 4] 3842 	call abs24 
      002B9F                       3843 	_xpop 
      002B9F 90 F6            [ 1]    1     ld a,(y)
      002BA1 93               [ 1]    2     ldw x,y 
      002BA2 EE 01            [ 2]    3     ldw x,(1,x)
      002BA4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BA8 81               [ 4] 3844 	ret 
                                   3845 
                                   3846 ;------------------------------
                                   3847 ; BASIC: LSHIFT(expr1,expr2)
                                   3848 ; logical shift left expr1 by 
                                   3849 ; expr2 bits 
                                   3850 ; output:
                                   3851 ; 	A:x 	result 
                                   3852 ;------------------------------
      002BA9                       3853 lshift:
      002BA9 CD 19 AB         [ 4] 3854 	call func_args
      002BAC A1 02            [ 1] 3855 	cp a,#2 
      002BAE 27 03            [ 1] 3856 	jreq 1$
      002BB0 CC 16 84         [ 2] 3857 	jp syntax_error
      002BB3                       3858 1$: _xpop 
      002BB3 90 F6            [ 1]    1     ld a,(y)
      002BB5 93               [ 1]    2     ldw x,y 
      002BB6 EE 01            [ 2]    3     ldw x,(1,x)
      002BB8 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BBC 9F               [ 1] 3859 	ld a,xl 
      002BBD 88               [ 1] 3860 	push a      
      002BBE                       3861 	_xpop  ; T>A:X 
      002BBE 90 F6            [ 1]    1     ld a,(y)
      002BC0 93               [ 1]    2     ldw x,y 
      002BC1 EE 01            [ 2]    3     ldw x,(1,x)
      002BC3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BC7 0D 01            [ 1] 3862 	tnz (1,sp) 
      002BC9 27 07            [ 1] 3863 	jreq 4$
      002BCB 98               [ 1] 3864 2$:	rcf 
      002BCC 59               [ 2] 3865 	rlcw x 
      002BCD 49               [ 1] 3866 	rlc a 
      002BCE 0A 01            [ 1] 3867 	dec (1,sp) 
      002BD0 26 F9            [ 1] 3868 	jrne 2$
      002BD2                       3869 4$: _drop 1 
      002BD2 5B 01            [ 2]    1     addw sp,#1 
      002BD4 81               [ 4] 3870 	ret
                                   3871 
                                   3872 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]



                                   3873 ; BASIC: RSHIFT(expr1,expr2)
                                   3874 ; logical shift right expr1 by 
                                   3875 ; expr2 bits.
                                   3876 ; output:
                                   3877 ; 	A 		TK_INTGR
                                   3878 ;   X 		result 
                                   3879 ;------------------------------
      002BD5                       3880 rshift:
      002BD5 CD 19 AB         [ 4] 3881 	call func_args
      002BD8 A1 02            [ 1] 3882 	cp a,#2 
      002BDA 27 03            [ 1] 3883 	jreq 1$
      002BDC CC 16 84         [ 2] 3884 	jp syntax_error
      002BDF                       3885 1$: _xpop ; T>A:X
      002BDF 90 F6            [ 1]    1     ld a,(y)
      002BE1 93               [ 1]    2     ldw x,y 
      002BE2 EE 01            [ 2]    3     ldw x,(1,x)
      002BE4 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BE8 9F               [ 1] 3886     ld a,xl 
      002BE9 88               [ 1] 3887 	push a    
      002BEA                       3888 	_xpop  
      002BEA 90 F6            [ 1]    1     ld a,(y)
      002BEC 93               [ 1]    2     ldw x,y 
      002BED EE 01            [ 2]    3     ldw x,(1,x)
      002BEF 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002BF3 0D 01            [ 1] 3889 	tnz (1,sp)
      002BF5 27 07            [ 1] 3890 	jreq 4$
      002BF7 98               [ 1] 3891 2$:	rcf 
      002BF8 46               [ 1] 3892 	rrc a 
      002BF9 56               [ 2] 3893 	rrcw x 
      002BFA 0A 01            [ 1] 3894 	dec (1,sp) 
      002BFC 26 F9            [ 1] 3895 	jrne 2$
      002BFE                       3896 4$: _drop 1 
      002BFE 5B 01            [ 2]    1     addw sp,#1 
      002C00 81               [ 4] 3897 	ret
                                   3898 
                                   3899 ;--------------------------
                                   3900 ; BASIC: FCPU integer
                                   3901 ; set CPU frequency 
                                   3902 ;-------------------------- 
                                   3903 
      002C01                       3904 fcpu:
      002C01 A6 84            [ 1] 3905 	ld a,#TK_INTGR
      002C03 CD 19 9E         [ 4] 3906 	call expect 
      002C06 CD 18 1A         [ 4] 3907 	call get_int24 
      002C09 9F               [ 1] 3908 	ld a,xl 
      002C0A A4 07            [ 1] 3909 	and a,#7 
      002C0C C7 50 C6         [ 1] 3910 	ld CLK_CKDIVR,a 
      002C0F 81               [ 4] 3911 	ret 
                                   3912 
                                   3913 ;------------------------------
                                   3914 ; BASIC: PMODE pin#, mode 
                                   3915 ; Arduino pin. 
                                   3916 ; define pin as input or output
                                   3917 ; pin#: {0..15}
                                   3918 ; mode: INPUT|OUTPUT  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]



                                   3919 ;------------------------------
                           000001  3920 	PINNO=1
                           000001  3921 	VSIZE=1
      002C10                       3922 pin_mode:
      002C10                       3923 	_vars VSIZE 
      002C10 52 01            [ 2]    1     sub sp,#VSIZE 
      002C12 CD 19 B0         [ 4] 3924 	call arg_list 
      002C15 A1 02            [ 1] 3925 	cp a,#2 
      002C17 27 03            [ 1] 3926 	jreq 1$
      002C19 CC 16 84         [ 2] 3927 	jp syntax_error 
      002C1C                       3928 1$: _xpop 
      002C1C 90 F6            [ 1]    1     ld a,(y)
      002C1E 93               [ 1]    2     ldw x,y 
      002C1F EE 01            [ 2]    3     ldw x,(1,x)
      002C21 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C25 CF 00 19         [ 2] 3929 	ldw ptr16,x ; mode 
      002C28                       3930 	_xpop ; Dx pin 
      002C28 90 F6            [ 1]    1     ld a,(y)
      002C2A 93               [ 1]    2     ldw x,y 
      002C2B EE 01            [ 2]    3     ldw x,(1,x)
      002C2D 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002C31 CD 2C 6F         [ 4] 3931 	call select_pin 
      002C34 6B 01            [ 1] 3932 	ld (PINNO,sp),a  
      002C36 A6 01            [ 1] 3933 	ld a,#1 
      002C38 0D 01            [ 1] 3934 	tnz (PINNO,sp)
      002C3A 27 0D            [ 1] 3935 	jreq 4$
      002C3C 48               [ 1] 3936 2$:	sll a 
      002C3D 0A 01            [ 1] 3937 	dec (PINNO,sp)
      002C3F 26 FB            [ 1] 3938 	jrne 2$ 
      002C41 6B 01            [ 1] 3939 	ld (PINNO,sp),a
      002C43 7B 01            [ 1] 3940 	ld a,(PINNO,sp)
      002C45 EA 03            [ 1] 3941 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      002C47 E7 03            [ 1] 3942 	ld (GPIO_CR1,x),a 
      002C49 A6 01            [ 1] 3943 4$:	ld a,#OUTP
      002C4B C1 00 0E         [ 1] 3944 	cp a,acc8 
      002C4E 27 10            [ 1] 3945 	jreq 6$
                                   3946 ; input mode
                                   3947 ; disable external interrupt 
      002C50 7B 01            [ 1] 3948 	ld a,(PINNO,sp)
      002C52 43               [ 1] 3949 	cpl a 
      002C53 E4 04            [ 1] 3950 	and a,(GPIO_CR2,x)
      002C55 E7 04            [ 1] 3951 	ld (GPIO_CR2,x),a 
                                   3952 ;clear bit in DDR for input mode 
      002C57 7B 01            [ 1] 3953 	ld a,(PINNO,sp)
      002C59 43               [ 1] 3954 	cpl a 
      002C5A E4 02            [ 1] 3955 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      002C5C E7 02            [ 1] 3956 	ld (GPIO_DDR,x),a 
      002C5E 20 0C            [ 2] 3957 	jra 9$
      002C60                       3958 6$: ;output mode  
      002C60 7B 01            [ 1] 3959 	ld a,(PINNO,sp)
      002C62 EA 02            [ 1] 3960 	or a,(GPIO_DDR,x) ; bit==1 for output 
      002C64 E7 02            [ 1] 3961 	ld (GPIO_DDR,x),a 
      002C66 7B 01            [ 1] 3962 	ld a,(PINNO,sp)
      002C68 EA 04            [ 1] 3963 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      002C6A E7 04            [ 1] 3964 	ld (GPIO_CR2,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]



      002C6C                       3965 9$:	
      002C6C                       3966 	_drop VSIZE 
      002C6C 5B 01            [ 2]    1     addw sp,#VSIZE 
      002C6E 81               [ 4] 3967 	ret
                                   3968 
                                   3969 ;------------------------
                                   3970 ; select Arduino pin 
                                   3971 ; input:
                                   3972 ;   X 	 {0..15} Arduino Dx 
                                   3973 ; output:
                                   3974 ;   A     stm8s208 pin 
                                   3975 ;   X     base address s208 GPIO port 
                                   3976 ;---------------------------
      002C6F                       3977 select_pin:
      002C6F 58               [ 2] 3978 	sllw x 
      002C70 1C 2C 7F         [ 2] 3979 	addw x,#arduino_to_8s208 
      002C73 FE               [ 2] 3980 	ldw x,(x)
      002C74 9F               [ 1] 3981 	ld a,xl 
      002C75 88               [ 1] 3982 	push a 
      002C76 5E               [ 1] 3983 	swapw x 
      002C77 A6 05            [ 1] 3984 	ld a,#5 
      002C79 42               [ 4] 3985 	mul x,a 
      002C7A 1C 50 00         [ 2] 3986 	addw x,#GPIO_BASE 
      002C7D 84               [ 1] 3987 	pop a 
      002C7E 81               [ 4] 3988 	ret 
                                   3989 ; translation from Arduino D0..D15 to stm8s208rb 
      002C7F                       3990 arduino_to_8s208:
      002C7F 03 06                 3991 .byte 3,6 ; D0 
      002C81 03 05                 3992 .byte 3,5 ; D1 
      002C83 04 00                 3993 .byte 4,0 ; D2 
      002C85 02 01                 3994 .byte 2,1 ; D3
      002C87 06 00                 3995 .byte 6,0 ; D4
      002C89 02 02                 3996 .byte 2,2 ; D5
      002C8B 02 03                 3997 .byte 2,3 ; D6
      002C8D 03 01                 3998 .byte 3,1 ; D7
      002C8F 03 03                 3999 .byte 3,3 ; D8
      002C91 02 04                 4000 .byte 2,4 ; D9
      002C93 04 05                 4001 .byte 4,5 ; D10
      002C95 02 06                 4002 .byte 2,6 ; D11
      002C97 02 07                 4003 .byte 2,7 ; D12
      002C99 02 05                 4004 .byte 2,5 ; D13
      002C9B 04 02                 4005 .byte 4,2 ; D14
      002C9D 04 01                 4006 .byte 4,1 ; D15
                                   4007 
                                   4008 
                                   4009 ;------------------------------
                                   4010 ; BASIC: RND(expr)
                                   4011 ; return random number 
                                   4012 ; between 1 and expr inclusive
                                   4013 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4014 ; input:
                                   4015 ; 	none 
                                   4016 ; output:
                                   4017 ;	xstack 	random positive integer 
                                   4018 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 201.
Hexadecimal [24-Bits]



      002C9F                       4019 random:
      002C9F CD 19 AB         [ 4] 4020 	call func_args 
      002CA2 A1 01            [ 1] 4021 	cp a,#1
      002CA4 27 03            [ 1] 4022 	jreq 1$
      002CA6 CC 16 84         [ 2] 4023 	jp syntax_error
      002CA9                       4024 1$:  
      002CA9                       4025 	_xpop   
      002CA9 90 F6            [ 1]    1     ld a,(y)
      002CAB 93               [ 1]    2     ldw x,y 
      002CAC EE 01            [ 2]    3     ldw x,(1,x)
      002CAE 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002CB2 89               [ 2] 4026 	pushw x 
      002CB3 88               [ 1] 4027 	push a  
      002CB4 A6 80            [ 1] 4028 	ld a,#0x80 
      002CB6 15 01            [ 1] 4029 	bcp a,(1,sp)
      002CB8 27 05            [ 1] 4030 	jreq 2$
      002CBA A6 0A            [ 1] 4031 	ld a,#ERR_BAD_VALUE
      002CBC CC 16 86         [ 2] 4032 	jp tb_error
      002CBF                       4033 2$: 
                                   4034 ; acc16=(x<<5)^x 
      002CBF CE 00 14         [ 2] 4035 	ldw x,seedx 
      002CC2 58               [ 2] 4036 	sllw x 
      002CC3 58               [ 2] 4037 	sllw x 
      002CC4 58               [ 2] 4038 	sllw x 
      002CC5 58               [ 2] 4039 	sllw x 
      002CC6 58               [ 2] 4040 	sllw x 
      002CC7 9E               [ 1] 4041 	ld a,xh 
      002CC8 C8 00 14         [ 1] 4042 	xor a,seedx 
      002CCB C7 00 0D         [ 1] 4043 	ld acc16,a 
      002CCE 9F               [ 1] 4044 	ld a,xl 
      002CCF C8 00 15         [ 1] 4045 	xor a,seedx+1 
      002CD2 C7 00 0E         [ 1] 4046 	ld acc8,a 
                                   4047 ; seedx=seedy 
      002CD5 CE 00 16         [ 2] 4048 	ldw x,seedy 
      002CD8 CF 00 14         [ 2] 4049 	ldw seedx,x  
                                   4050 ; seedy=seedy^(seedy>>1)
      002CDB CE 00 16         [ 2] 4051 	ldw x,seedy 
      002CDE 54               [ 2] 4052 	srlw x 
      002CDF 9E               [ 1] 4053 	ld a,xh 
      002CE0 C8 00 16         [ 1] 4054 	xor a,seedy 
      002CE3 C7 00 16         [ 1] 4055 	ld seedy,a  
      002CE6 9F               [ 1] 4056 	ld a,xl 
      002CE7 C8 00 17         [ 1] 4057 	xor a,seedy+1 
      002CEA C7 00 17         [ 1] 4058 	ld seedy+1,a 
                                   4059 ; acc16>>3 
      002CED CE 00 0D         [ 2] 4060 	ldw x,acc16 
      002CF0 54               [ 2] 4061 	srlw x 
      002CF1 54               [ 2] 4062 	srlw x 
      002CF2 54               [ 2] 4063 	srlw x 
                                   4064 ; x=acc16^x 
      002CF3 9E               [ 1] 4065 	ld a,xh 
      002CF4 C8 00 0D         [ 1] 4066 	xor a,acc16 
      002CF7 C7 00 0D         [ 1] 4067 	ld acc16,a 
      002CFA 9F               [ 1] 4068 	ld a,xl 
      002CFB C8 00 0E         [ 1] 4069 	xor a,acc8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 202.
Hexadecimal [24-Bits]



      002CFE C7 00 0E         [ 1] 4070 	ld acc8,a 
                                   4071 ; seedy=acc16^seedy 
      002D01 C8 00 17         [ 1] 4072 	xor a,seedy+1
      002D04 97               [ 1] 4073 	ld xl,a 
      002D05 C6 00 0D         [ 1] 4074 	ld a,acc16 
      002D08 C8 00 16         [ 1] 4075 	xor a,seedy
      002D0B 95               [ 1] 4076 	ld xh,a 
      002D0C CF 00 16         [ 2] 4077 	ldw seedy,x 
                                   4078 ; return seedx_lo&0x7f:seedy modulo expr + 1 
      002D0F C6 00 15         [ 1] 4079 	ld a,seedx+1
      002D12 A4 7F            [ 1] 4080 	and a,#127
      002D14                       4081 	_xpush 
      002D14 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002D18 90 F7            [ 1]    2     ld (y),a 
      002D1A 90 EF 01         [ 2]    3     ldw (1,y),x 
      002D1D 84               [ 1] 4082 	pop a 
      002D1E 85               [ 2] 4083 	popw x 
      002D1F                       4084 	_xpush 
      002D1F 72 A2 00 03      [ 2]    1     subw y,#CELL_SIZE
      002D23 90 F7            [ 1]    2     ld (y),a 
      002D25 90 EF 01         [ 2]    3     ldw (1,y),x 
      002D28 CD 03 A1         [ 4] 4085 	call mod24 
      002D2B                       4086 	_xpop
      002D2B 90 F6            [ 1]    1     ld a,(y)
      002D2D 93               [ 1]    2     ldw x,y 
      002D2E EE 01            [ 2]    3     ldw x,(1,x)
      002D30 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002D34 1C 00 01         [ 2] 4087 	addw x,#1 
      002D37 A9 00            [ 1] 4088 	adc a,#0  
      002D39 81               [ 4] 4089 	ret 
                                   4090 
                                   4091 ;---------------------------------
                                   4092 ; BASIC: WORDS 
                                   4093 ; affiche la listes des mots du
                                   4094 ; dictionnaire ainsi que le nombre
                                   4095 ; de mots.
                                   4096 ;---------------------------------
                           000001  4097 	WLEN=1 ; word length
                           000002  4098 	LLEN=2 ; character sent to console
                           000003  4099 	WCNT=3 ; count words printed 
                           000003  4100 	VSIZE=3 
      002D3A                       4101 words:
      002D3A 90 89            [ 2] 4102 	pushw y
      002D3C                       4103 	_vars VSIZE
      002D3C 52 03            [ 2]    1     sub sp,#VSIZE 
      002D3E 0F 02            [ 1] 4104 	clr (LLEN,sp)
      002D40 0F 03            [ 1] 4105 	clr (WCNT,sp)
      002D42 90 AE 35 77      [ 2] 4106 	ldw y,#kword_dict+2
      002D46 93               [ 1] 4107 0$:	ldw x,y
      002D47 F6               [ 1] 4108 	ld a,(x)
      002D48 A4 0F            [ 1] 4109 	and a,#15 
      002D4A 6B 01            [ 1] 4110 	ld (WLEN,sp),a 
      002D4C 0C 03            [ 1] 4111 	inc (WCNT,sp)
      002D4E 5C               [ 1] 4112 1$:	incw x 
      002D4F F6               [ 1] 4113 	ld a,(x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 203.
Hexadecimal [24-Bits]



      002D50 CD 08 FF         [ 4] 4114 	call putc 
      002D53 0C 02            [ 1] 4115 	inc (LLEN,sp)
      002D55 0A 01            [ 1] 4116 	dec (WLEN,sp)
      002D57 26 F5            [ 1] 4117 	jrne 1$
      002D59 A6 46            [ 1] 4118 	ld a,#70
      002D5B 11 02            [ 1] 4119 	cp a,(LLEN,sp)
      002D5D 2B 09            [ 1] 4120 	jrmi 2$   
      002D5F A6 20            [ 1] 4121 	ld a,#SPACE 
      002D61 CD 08 FF         [ 4] 4122 	call putc 
      002D64 0C 02            [ 1] 4123 	inc (LLEN,sp) 
      002D66 20 07            [ 2] 4124 	jra 3$
      002D68 A6 0D            [ 1] 4125 2$: ld a,#CR 
      002D6A CD 08 FF         [ 4] 4126 	call putc 
      002D6D 0F 02            [ 1] 4127 	clr (LLEN,sp)
      002D6F 72 A2 00 02      [ 2] 4128 3$:	subw y,#2 
      002D73 90 FE            [ 2] 4129 	ldw y,(y)
      002D75 26 CF            [ 1] 4130 	jrne 0$ 
      002D77 A6 0D            [ 1] 4131 	ld a,#CR 
      002D79 CD 08 FF         [ 4] 4132 	call putc  
      002D7C 5F               [ 1] 4133 	clrw x 
      002D7D 7B 03            [ 1] 4134 	ld a,(WCNT,sp)
      002D7F 97               [ 1] 4135 	ld xl,a 
      002D80 CD 18 30         [ 4] 4136 	call prt_i16 
      002D83 AE 2D 8E         [ 2] 4137 	ldw x,#words_count_msg
      002D86 CD 09 5C         [ 4] 4138 	call puts 
      002D89                       4139 	_drop VSIZE 
      002D89 5B 03            [ 2]    1     addw sp,#VSIZE 
      002D8B 90 85            [ 2] 4140 	popw y 
      002D8D 81               [ 4] 4141 	ret 
      002D8E 20 77 6F 72 64 73 20  4142 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4143 
                                   4144 
                                   4145 ;-----------------------------
                                   4146 ; BASIC: TIMER expr 
                                   4147 ; initialize count down timer 
                                   4148 ;-----------------------------
      002DA4                       4149 set_timer:
      002DA4 CD 19 B0         [ 4] 4150 	call arg_list
      002DA7 A1 01            [ 1] 4151 	cp a,#1 
      002DA9 27 03            [ 1] 4152 	jreq 1$
      002DAB CC 16 84         [ 2] 4153 	jp syntax_error
      002DAE                       4154 1$: 
      002DAE                       4155 	_xpop  
      002DAE 90 F6            [ 1]    1     ld a,(y)
      002DB0 93               [ 1]    2     ldw x,y 
      002DB1 EE 01            [ 2]    3     ldw x,(1,x)
      002DB3 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DB7 CF 00 12         [ 2] 4156 	ldw timer,x 
      002DBA 81               [ 4] 4157 	ret 
                                   4158 
                                   4159 ;------------------------------
                                   4160 ; BASIC: TIMEOUT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 204.
Hexadecimal [24-Bits]



                                   4161 ; return state of timer 
                                   4162 ; output:
                                   4163 ;   A:X     0 not timeout 
                                   4164 ;   A:X     -1 timeout 
                                   4165 ;------------------------------
      002DBB                       4166 timeout:
      002DBB 4F               [ 1] 4167 	clr a 
      002DBC CE 00 12         [ 2] 4168 	ldw x,timer 
      002DBF 27 02            [ 1] 4169 	jreq 1$
      002DC1 5F               [ 1] 4170 	clrw x
      002DC2 81               [ 4] 4171 	ret  
      002DC3 43               [ 1] 4172 1$:	cpl a
      002DC4 53               [ 2] 4173 	cplw x 
      002DC5 81               [ 4] 4174 	ret 
                                   4175  	
                                   4176 
                                   4177 
                                   4178 
                                   4179 ;-----------------------------------
                                   4180 ; BASIC: IWDGEN expr1 
                                   4181 ; enable independant watchdog timer
                                   4182 ; expr1 is delay in multiple of 62.5µsec
                                   4183 ; expr1 -> {1..16383}
                                   4184 ;-----------------------------------
      002DC6                       4185 enable_iwdg:
      002DC6 CD 19 B0         [ 4] 4186 	call arg_list
      002DC9 A1 01            [ 1] 4187 	cp a,#1 
      002DCB 27 03            [ 1] 4188 	jreq 1$
      002DCD CC 16 84         [ 2] 4189 	jp syntax_error 
      002DD0                       4190 1$: _xpop  
      002DD0 90 F6            [ 1]    1     ld a,(y)
      002DD2 93               [ 1]    2     ldw x,y 
      002DD3 EE 01            [ 2]    3     ldw x,(1,x)
      002DD5 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002DD9 4B 00            [ 1] 4191 	push #0
      002DDB 35 CC 50 E0      [ 1] 4192 	mov IWDG_KR,#IWDG_KEY_ENABLE
      002DDF 9E               [ 1] 4193 	ld a,xh 
      002DE0 A4 3F            [ 1] 4194 	and a,#0x3f
      002DE2 95               [ 1] 4195 	ld xh,a  
      002DE3 A3 00 FF         [ 2] 4196 2$:	cpw x,#255
      002DE6 23 06            [ 2] 4197 	jrule 3$
      002DE8 0C 01            [ 1] 4198 	inc (1,sp)
      002DEA 98               [ 1] 4199 	rcf 
      002DEB 56               [ 2] 4200 	rrcw x 
      002DEC 20 F5            [ 2] 4201 	jra 2$
      002DEE 35 55 50 E0      [ 1] 4202 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002DF2 84               [ 1] 4203 	pop a  
      002DF3 C7 50 E1         [ 1] 4204 	ld IWDG_PR,a 
      002DF6 9F               [ 1] 4205 	ld a,xl
      002DF7 4A               [ 1] 4206 	dec a 
      002DF8 35 55 50 E0      [ 1] 4207 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      002DFC C7 50 E2         [ 1] 4208 	ld IWDG_RLR,a 
      002DFF 35 AA 50 E0      [ 1] 4209 	mov IWDG_KR,#IWDG_KEY_REFRESH
      002E03 81               [ 4] 4210 	ret 
                                   4211 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 205.
Hexadecimal [24-Bits]



                                   4212 
                                   4213 ;-----------------------------------
                                   4214 ; BASIC: IWDGREF  
                                   4215 ; refresh independant watchdog count down 
                                   4216 ; timer before it reset MCU. 
                                   4217 ;-----------------------------------
      002E04                       4218 refresh_iwdg:
      002E04 35 AA 50 E0      [ 1] 4219 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      002E08 81               [ 4] 4220 	ret 
                                   4221 
                                   4222 
                                   4223 ;-------------------------------------
                                   4224 ; BASIC: LOG2(expr)
                                   4225 ; return logarithm base 2 of expr 
                                   4226 ; this is the position of most significant
                                   4227 ; bit set. 
                                   4228 ; input: 
                                   4229 ; output:
                                   4230 ;   A     TK_INTGR 
                                   4231 ;   xstack log2 
                                   4232 ;*********************************
      002E09                       4233 log2:
      002E09 CD 19 AB         [ 4] 4234 	call func_args 
      002E0C A1 01            [ 1] 4235 	cp a,#1 
      002E0E 27 03            [ 1] 4236 	jreq 1$
      002E10 CC 16 84         [ 2] 4237 	jp syntax_error 
      002E13                       4238 1$: 
      002E13                       4239 	_xpop    
      002E13 90 F6            [ 1]    1     ld a,(y)
      002E15 93               [ 1]    2     ldw x,y 
      002E16 EE 01            [ 2]    3     ldw x,(1,x)
      002E18 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E1C 4D               [ 1] 4240 	tnz a
      002E1D 26 08            [ 1] 4241 	jrne 2$ 
      002E1F 5D               [ 2] 4242 	tnzw x 
      002E20 26 05            [ 1] 4243 	jrne 2$
      002E22 A6 0A            [ 1] 4244 	ld a,#ERR_BAD_VALUE
      002E24 CC 16 86         [ 2] 4245 	jp tb_error 
      002E27 4B 18            [ 1] 4246 2$: push #24 
      002E29 59               [ 2] 4247 3$: rlcw x 
      002E2A 49               [ 1] 4248     rlc a 
      002E2B 25 04            [ 1] 4249 	jrc 4$
      002E2D 0A 01            [ 1] 4250 	dec (1,sp) 
      002E2F 26 F8            [ 1] 4251 	jrne 3$
      002E31 5F               [ 1] 4252 4$: clrw x 
      002E32 84               [ 1] 4253     pop a 
      002E33 4A               [ 1] 4254 	dec a
      002E34 02               [ 1] 4255 	rlwa x  
      002E35                       4256 9$:	
      002E35 81               [ 4] 4257 	ret 
                                   4258 
                                   4259 ;-----------------------------------
                                   4260 ; BASIC: BIT(expr) 
                                   4261 ; expr ->{0..23}
                                   4262 ; return 2^expr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 206.
Hexadecimal [24-Bits]



                                   4263 ; output:
                                   4264 ;    A:X    2^expr 
                                   4265 ;-----------------------------------
      002E36                       4266 bitmask:
      002E36 CD 19 AB         [ 4] 4267     call func_args 
      002E39 A1 01            [ 1] 4268 	cp a,#1
      002E3B 27 03            [ 1] 4269 	jreq 1$
      002E3D CC 16 84         [ 2] 4270 	jp syntax_error 
      002E40                       4271 1$: _xpop 
      002E40 90 F6            [ 1]    1     ld a,(y)
      002E42 93               [ 1]    2     ldw x,y 
      002E43 EE 01            [ 2]    3     ldw x,(1,x)
      002E45 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E49 9F               [ 1] 4272 	ld a,xl 
      002E4A AE 00 01         [ 2] 4273 	ldw x,#1 
      002E4D A4 17            [ 1] 4274 	and a,#23
      002E4F 27 0A            [ 1] 4275 	jreq 9$
      002E51 88               [ 1] 4276 	push a 
      002E52 4F               [ 1] 4277 	clr a 
      002E53                       4278 2$: 
      002E53 58               [ 2] 4279 	slaw x 
      002E54 49               [ 1] 4280 	rlc a 	
      002E55 0A 01            [ 1] 4281 	dec (1,sp)
      002E57 26 FA            [ 1] 4282 	jrne 2$ 
      002E59                       4283 4$:
      002E59                       4284     _drop 1 
      002E59 5B 01            [ 2]    1     addw sp,#1 
      002E5B 81               [ 4] 4285 9$:	ret 
                                   4286 
                                   4287 ;------------------------------
                                   4288 ; BASIC: DO 
                                   4289 ; initiate a DO ... UNTIL loop 
                                   4290 ;------------------------------
                           000003  4291 	DOLP_ADR=3 
                           000005  4292 	DOLP_INW=5
                           000004  4293 	VSIZE=4 
      002E5C                       4294 do_loop:
      002E5C 85               [ 2] 4295 	popw x 
      002E5D                       4296 	_vars VSIZE 
      002E5D 52 04            [ 2]    1     sub sp,#VSIZE 
      002E5F 89               [ 2] 4297 	pushw x 
      002E60 CE 00 04         [ 2] 4298 	ldw x,basicptr 
      002E63 1F 03            [ 2] 4299 	ldw (DOLP_ADR,sp),x
      002E65 CE 00 00         [ 2] 4300 	ldw x,in.w 
      002E68 1F 05            [ 2] 4301 	ldw (DOLP_INW,sp),x
      002E6A 72 5C 00 1F      [ 1] 4302 	inc loop_depth 
      002E6E 81               [ 4] 4303 	ret 
                                   4304 
                                   4305 ;--------------------------------
                                   4306 ; BASIC: UNTIL expr 
                                   4307 ; loop if exprssion is false 
                                   4308 ; else terminate loop
                                   4309 ;--------------------------------
      002E6F                       4310 until: 
      002E6F 72 5D 00 1F      [ 1] 4311 	tnz loop_depth 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 207.
Hexadecimal [24-Bits]



      002E73 26 03            [ 1] 4312 	jrne 1$ 
      002E75 CC 16 84         [ 2] 4313 	jp syntax_error 
      002E78                       4314 1$: 
      002E78 CD 1C 0D         [ 4] 4315 	call condition  
      002E7B                       4316 	_xpop 
      002E7B 90 F6            [ 1]    1     ld a,(y)
      002E7D 93               [ 1]    2     ldw x,y 
      002E7E EE 01            [ 2]    3     ldw x,(1,x)
      002E80 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002E84 4D               [ 1] 4317 	tnz a 
      002E85 26 13            [ 1] 4318 	jrne 9$ 
      002E87 5D               [ 2] 4319 	tnzw x 
      002E88 26 10            [ 1] 4320 	jrne 9$ 
      002E8A 1E 03            [ 2] 4321 	ldw x,(DOLP_ADR,sp)
      002E8C CF 00 04         [ 2] 4322 	ldw basicptr,x 
      002E8F E6 02            [ 1] 4323 	ld a,(2,x)
      002E91 C7 00 03         [ 1] 4324 	ld count,a 
      002E94 1E 05            [ 2] 4325 	ldw x,(DOLP_INW,sp)
      002E96 CF 00 00         [ 2] 4326 	ldw in.w,x 
      002E99 81               [ 4] 4327 	ret 
      002E9A                       4328 9$:	; remove loop data from stack  
      002E9A 85               [ 2] 4329 	popw x
      002E9B                       4330 	_drop VSIZE
      002E9B 5B 04            [ 2]    1     addw sp,#VSIZE 
      002E9D 72 5A 00 1F      [ 1] 4331 	dec loop_depth 
      002EA1 FC               [ 2] 4332 	jp (x)
                                   4333 
                                   4334 ;--------------------------
                                   4335 ; BASIC: PORTA...PORTI  
                                   4336 ;  return constant value 
                                   4337 ;  PORT  base address 
                                   4338 ;---------------------------
      002EA2                       4339 const_porta:
      002EA2 AE 50 00         [ 2] 4340 	ldw x,#PA_BASE 
      002EA5 4F               [ 1] 4341 	clr a 
      002EA6 81               [ 4] 4342 	ret 
      002EA7                       4343 const_portb:
      002EA7 AE 50 05         [ 2] 4344 	ldw x,#PB_BASE 
      002EAA 4F               [ 1] 4345 	clr a 
      002EAB 81               [ 4] 4346 	ret 
      002EAC                       4347 const_portc:
      002EAC AE 50 0A         [ 2] 4348 	ldw x,#PC_BASE 
      002EAF 4F               [ 1] 4349 	clr a 
      002EB0 81               [ 4] 4350 	ret 
      002EB1                       4351 const_portd:
      002EB1 AE 50 0F         [ 2] 4352 	ldw x,#PD_BASE 
      002EB4 4F               [ 1] 4353 	clr a 
      002EB5 81               [ 4] 4354 	ret 
      002EB6                       4355 const_porte:
      002EB6 AE 50 14         [ 2] 4356 	ldw x,#PE_BASE 
      002EB9 4F               [ 1] 4357 	clr a 
      002EBA 81               [ 4] 4358 	ret 
      002EBB                       4359 const_portf:
      002EBB AE 50 19         [ 2] 4360 	ldw x,#PF_BASE 
      002EBE 4F               [ 1] 4361 	clr a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 208.
Hexadecimal [24-Bits]



      002EBF 81               [ 4] 4362 	ret 
      002EC0                       4363 const_portg:
      002EC0 AE 50 1E         [ 2] 4364 	ldw x,#PG_BASE 
      002EC3 4F               [ 1] 4365 	clr a 
      002EC4 81               [ 4] 4366 	ret 
      002EC5                       4367 const_porti:
      002EC5 AE 50 28         [ 2] 4368 	ldw x,#PI_BASE 
      002EC8 4F               [ 1] 4369 	clr a 
      002EC9 81               [ 4] 4370 	ret 
                                   4371 
                                   4372 ;-------------------------------
                                   4373 ; following return constant 
                                   4374 ; related to GPIO register offset 
                                   4375 ;---------------------------------
      002ECA                       4376 const_odr:
      002ECA 4F               [ 1] 4377 	clr a 
      002ECB AE 00 00         [ 2] 4378 	ldw x,#GPIO_ODR
      002ECE 81               [ 4] 4379 	ret 
      002ECF                       4380 const_idr:
      002ECF 4F               [ 1] 4381 	clr a 
      002ED0 AE 00 01         [ 2] 4382 	ldw x,#GPIO_IDR
      002ED3 81               [ 4] 4383 	ret 
      002ED4                       4384 const_ddr:
      002ED4 4F               [ 1] 4385 	clr a
      002ED5 AE 00 02         [ 2] 4386 	ldw x,#GPIO_DDR
      002ED8 81               [ 4] 4387 	ret 
      002ED9                       4388 const_cr1:
      002ED9 4F               [ 1] 4389 	clr a 
      002EDA AE 00 03         [ 2] 4390 	ldw x,#GPIO_CR1
      002EDD 81               [ 4] 4391 	ret 
      002EDE                       4392 const_cr2:
      002EDE 4F               [ 1] 4393 	clr a
      002EDF AE 00 04         [ 2] 4394 	ldw x,#GPIO_CR2
      002EE2 81               [ 4] 4395 	ret 
                                   4396 ;-------------------------
                                   4397 ; BASIC: POUT 
                                   4398 ;  constant for port mode
                                   4399 ;  used by PMODE 
                                   4400 ;  to set pin as output
                                   4401 ;------------------------
      002EE3                       4402 const_output:
      002EE3 4F               [ 1] 4403 	clr a 
      002EE4 AE 00 01         [ 2] 4404 	ldw x,#OUTP
      002EE7 81               [ 4] 4405 	ret 
                                   4406 
                                   4407 ;-------------------------
                                   4408 ; BASIC: PINP 
                                   4409 ;  constant for port mode
                                   4410 ;  used by PMODE 
                                   4411 ;  to set pin as input
                                   4412 ;------------------------
      002EE8                       4413 const_input:
      002EE8 4F               [ 1] 4414 	clr a  
      002EE9 AE 00 00         [ 2] 4415 	ldw x,#INP 
      002EEC 81               [ 4] 4416 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 209.
Hexadecimal [24-Bits]



                                   4417 	
                                   4418 ;-----------------------
                                   4419 ; memory area constants
                                   4420 ;-----------------------
      002EED                       4421 const_eeprom_base:
      002EED 4F               [ 1] 4422 	clr a  
      002EEE AE 40 00         [ 2] 4423 	ldw x,#EEPROM_BASE 
      002EF1 81               [ 4] 4424 	ret 
                                   4425 
                                   4426 ;---------------------------
                                   4427 ; BASIC: DATA 
                                   4428 ; when the interpreter find 
                                   4429 ; a DATA line it skip it.
                                   4430 ;---------------------------
      002EF2                       4431 data:
      002EF2 55 00 03 00 01   [ 1] 4432 	mov in,count 
      002EF7 81               [ 4] 4433 	ret 
                                   4434 
                                   4435 ;------------------------------
                                   4436 ; check if it is a DATA line 
                                   4437 ; input: 
                                   4438 ;    X    line address 
                                   4439 ; output:
                                   4440 ;    Z    set if DATA line 
                                   4441 ;----------------------------
      002EF8                       4442 is_data_line:
      002EF8 89               [ 2] 4443 	pushw x 
      002EF9 E6 03            [ 1] 4444 	ld a,(3,x)
      002EFB A1 80            [ 1] 4445 	cp a,#TK_CMD 
      002EFD 26 05            [ 1] 4446 	jrne 9$
      002EFF EE 04            [ 2] 4447 	ldw x,(4,x)
      002F01 A3 2E F2         [ 2] 4448 	cpw x,#data  
      002F04 85               [ 2] 4449 9$: popw x 
      002F05 81               [ 4] 4450 	ret 
                                   4451 
                                   4452 ;---------------------------------
                                   4453 ; BASIC: RESTORE [line#]
                                   4454 ; set data_ptr to first data line
                                   4455 ; if no DATA found pointer set to
                                   4456 ; zero.
                                   4457 ; if a line# is given as argument 
                                   4458 ; a data line with that number 
                                   4459 ; is searched and the data pointer 
                                   4460 ; is set to it. If there is no 
                                   4461 ; data line with that number 
                                   4462 ; the program is interrupted. 
                                   4463 ;---------------------------------
      002F06                       4464 restore:
      002F06 5F               [ 1] 4465 	clrw x 
      002F07 CF 00 06         [ 2] 4466 	ldw data_ptr,x 
      002F0A CF 00 08         [ 2] 4467 	ldw data_ofs,x 
      002F0D CE 00 1B         [ 2] 4468 	ldw x,txtbgn 
      002F10 CD 17 E8         [ 4] 4469 	call next_token 
      002F13 A1 84            [ 1] 4470 	cp a,#TK_INTGR
      002F15 26 10            [ 1] 4471 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 210.
Hexadecimal [24-Bits]



      002F17 CD 18 1A         [ 4] 4472 	call get_int24
      002F1A 90 89            [ 2] 4473 	pushw y 
      002F1C 4F               [ 1] 4474 	clr a 
      002F1D CD 0C 45         [ 4] 4475 	call search_lineno  
      002F20 90 85            [ 2] 4476 	popw y 
      002F22 5D               [ 2] 4477 	tnzw x 
      002F23 26 17            [ 1] 4478 	jrne set_data_pointer 
      002F25 20 44            [ 2] 4479 	jra data_error 
      002F27                       4480 0$:
      002F27                       4481 	_unget_token  
      002F27 55 00 02 00 01   [ 1]    1      mov in,in.saved  
                                   4482 ; search first DATA line 	
      002F2C C3 00 1D         [ 2] 4483 1$:	cpw x,txtend
      002F2F 24 3A            [ 1] 4484 	jruge data_error 
      002F31                       4485 2$:	
      002F31 CD 2E F8         [ 4] 4486 	call is_data_line 
      002F34 26 00            [ 1] 4487 	jrne 4$
      002F36 CD 2F 49         [ 4] 4488 4$:	call try_next_line 
      002F39 26 FB            [ 1] 4489 	jrne 4$ 
      002F3B 81               [ 4] 4490 	ret 
                                   4491 
                                   4492 ;---------------------
                                   4493 ; set data pointer 
                                   4494 ; variables at new line 
                                   4495 ; input:
                                   4496 ;    X    line address 
                                   4497 ;----------------------
      002F3C                       4498 set_data_pointer:
      002F3C CF 00 06         [ 2] 4499 	ldw data_ptr,x
      002F3F E6 02            [ 1] 4500 	ld a,(2,x)
      002F41 C7 00 09         [ 1] 4501 	ld data_len,a 
      002F44 35 06 00 08      [ 1] 4502 	mov data_ofs,#FIRST_DATA_ITEM
      002F48 81               [ 4] 4503 	ret 
                                   4504 
                                   4505 
                                   4506 ;--------------------
                                   4507 ; at end of data line 
                                   4508 ; check if next line 
                                   4509 ; is a data line 
                                   4510 ; input:
                                   4511 ;    X   actual line address 
                                   4512 ;  
                                   4513 ;-------------------
      002F49                       4514 try_next_line: 
      002F49 E6 02            [ 1] 4515 	ld a,(2,x)
      002F4B C7 00 0E         [ 1] 4516 	ld acc8,a 
      002F4E 72 5F 00 0D      [ 1] 4517 	clr acc16 
      002F52 72 BB 00 0D      [ 2] 4518 	addw x,acc16 
      002F56 C3 00 1D         [ 2] 4519 	cpw x,txtend 
      002F59 25 02            [ 1] 4520 	jrult 1$
      002F5B 20 0E            [ 2] 4521 	jra data_error 
      002F5D                       4522 1$:	
      002F5D CD 2E F8         [ 4] 4523 	call is_data_line 
      002F60 27 04            [ 1] 4524 	jreq 2$
      002F62 A6 01            [ 1] 4525 	ld a,#1  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 211.
Hexadecimal [24-Bits]



      002F64 20 04            [ 2] 4526 	jra 9$
      002F66 CD 2F 3C         [ 4] 4527 2$:	call set_data_pointer
      002F69 4F               [ 1] 4528 	clr a  
      002F6A 81               [ 4] 4529 9$:	ret 
      002F6B                       4530 data_error:	
      002F6B A6 0C            [ 1] 4531     ld a,#ERR_NO_DATA 
      002F6D CC 16 86         [ 2] 4532 	jp tb_error 
                                   4533 
                                   4534 
                                   4535 ;---------------------------------
                                   4536 ; BASIC: READ 
                                   4537 ; return next data item | 0 
                                   4538 ;---------------------------------
                           000001  4539 	CTX_BPTR=1 
                           000003  4540 	CTX_IN=3 
                           000004  4541 	CTX_COUNT=4 
                           000005  4542 	INT24=5
                           000007  4543 	VSIZE=7 
      002F70                       4544 read:
      002F70                       4545 	_vars  VSIZE 
      002F70 52 07            [ 2]    1     sub sp,#VSIZE 
      002F72 CD 20 42         [ 4] 4546 	call save_context
      002F75                       4547 read01:	
      002F75 C6 00 08         [ 1] 4548 	ld a,data_ofs
      002F78 C1 00 09         [ 1] 4549 	cp a,data_len 
      002F7B 27 37            [ 1] 4550 	jreq 2$ ; end of line  
      002F7D                       4551 0$:
      002F7D CE 00 06         [ 2] 4552 	ldw x,data_ptr 
      002F80 CF 00 04         [ 2] 4553 	ldw basicptr,x 
      002F83 55 00 08 00 01   [ 1] 4554 	mov in,data_ofs 
      002F88 55 00 09 00 03   [ 1] 4555 	mov count,data_len  
      002F8D CD 1A F4         [ 4] 4556 	call expression 
      002F90 A1 84            [ 1] 4557 	cp a,#TK_INTGR 
      002F92 27 03            [ 1] 4558 	jreq 1$ 
      002F94 CC 16 84         [ 2] 4559 	jp syntax_error 
      002F97                       4560 1$:
      002F97 CD 17 E8         [ 4] 4561 	call next_token ; skip comma
      002F9A CE 00 04         [ 2] 4562 	ldw x,basicptr 
      002F9D CF 00 06         [ 2] 4563 	ldw data_ptr,x 
      002FA0 55 00 01 00 08   [ 1] 4564 	mov data_ofs,in 
      002FA5 CD 20 52         [ 4] 4565 	call rest_context
      002FA8                       4566 	_xpop 
      002FA8 90 F6            [ 1]    1     ld a,(y)
      002FAA 93               [ 1]    2     ldw x,y 
      002FAB EE 01            [ 2]    3     ldw x,(1,x)
      002FAD 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      002FB1                       4567 	_drop VSIZE 
      002FB1 5B 07            [ 2]    1     addw sp,#VSIZE 
      002FB3 81               [ 4] 4568 	ret 
      002FB4                       4569 2$: ; end of line reached 
                                   4570 	; try next line 
      002FB4 CE 00 06         [ 2] 4571 	ldw x,data_ptr  
      002FB7 CD 2F 49         [ 4] 4572 	call try_next_line
      002FBA 27 C1            [ 1] 4573 	jreq 0$ 
      002FBC 20 AD            [ 2] 4574 	jra data_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 212.
Hexadecimal [24-Bits]



                                   4575 
                                   4576 ;---------------------------------
                                   4577 ; BASIC: SPIEN clkdiv, 0|1  
                                   4578 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4579 ; if clkdiv==-1 disable SPI
                                   4580 ; 0|1 -> disable|enable  
                                   4581 ;--------------------------------- 
                           000005  4582 SPI_CS_BIT=5
      002FBE                       4583 spi_enable:
      002FBE CD 19 B0         [ 4] 4584 	call arg_list 
      002FC1 A1 02            [ 1] 4585 	cp a,#2
      002FC3 27 03            [ 1] 4586 	jreq 1$
      002FC5 CC 16 84         [ 2] 4587 	jp syntax_error 
      002FC8                       4588 1$: 
      002FC8 72 12 50 C7      [ 1] 4589 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      002FCC 85               [ 2] 4590 	popw x  
      002FCD 5D               [ 2] 4591 	tnzw x 
      002FCE 27 21            [ 1] 4592 	jreq spi_disable 
      002FD0 85               [ 2] 4593 	popw x 
      002FD1 A6 08            [ 1] 4594 	ld a,#(1<<SPI_CR1_BR)
      002FD3 42               [ 4] 4595 	mul x,a 
      002FD4 9F               [ 1] 4596 	ld a,xl 
      002FD5 C7 52 00         [ 1] 4597 	ld SPI_CR1,a 
                                   4598 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002FD8 72 1A 50 14      [ 1] 4599 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      002FDC 72 1A 50 16      [ 1] 4600 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4601 ; configure SPI as master mode 0.	
      002FE0 72 14 52 00      [ 1] 4602 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4603 ; ~CS line controlled by sofware 	
      002FE4 72 12 52 01      [ 1] 4604 	bset SPI_CR2,#SPI_CR2_SSM 
      002FE8 72 10 52 01      [ 1] 4605     bset SPI_CR2,#SPI_CR2_SSI 
                                   4606 ; enable SPI
      002FEC 72 1C 52 00      [ 1] 4607 	bset SPI_CR1,#SPI_CR1_SPE 	
      002FF0 81               [ 4] 4608 	ret 
      002FF1                       4609 spi_disable:
      002FF1                       4610 	_drop #2; throw first argument.
      002FF1 5B 02            [ 2]    1     addw sp,##2 
                                   4611 ; wait spi idle 
      002FF3 A6 82            [ 1] 4612 1$:	ld a,#0x82 
      002FF5 C4 52 03         [ 1] 4613 	and a,SPI_SR
      002FF8 A1 02            [ 1] 4614 	cp a,#2 
      002FFA 26 F7            [ 1] 4615 	jrne 1$
      002FFC 72 1D 52 00      [ 1] 4616 	bres SPI_CR1,#SPI_CR1_SPE
      003000 72 13 50 C7      [ 1] 4617 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      003004 72 1B 50 16      [ 1] 4618 	bres PE_DDR,#SPI_CS_BIT 
      003008 81               [ 4] 4619 	ret 
                                   4620 
      003009                       4621 spi_clear_error:
      003009 A6 78            [ 1] 4622 	ld a,#0x78 
      00300B C5 52 03         [ 1] 4623 	bcp a,SPI_SR 
      00300E 27 04            [ 1] 4624 	jreq 1$
      003010 72 5F 52 03      [ 1] 4625 	clr SPI_SR 
      003014 81               [ 4] 4626 1$: ret 
                                   4627 
      003015                       4628 spi_send_byte:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 213.
Hexadecimal [24-Bits]



      003015 88               [ 1] 4629 	push a 
      003016 CD 30 09         [ 4] 4630 	call spi_clear_error
      003019 84               [ 1] 4631 	pop a 
      00301A 72 03 52 03 FB   [ 2] 4632 	btjf SPI_SR,#SPI_SR_TXE,.
      00301F C7 52 04         [ 1] 4633 	ld SPI_DR,a
      003022 72 01 52 03 FB   [ 2] 4634 	btjf SPI_SR,#SPI_SR_RXNE,.  
      003027 C6 52 04         [ 1] 4635 	ld a,SPI_DR 
      00302A 81               [ 4] 4636 	ret 
                                   4637 
      00302B                       4638 spi_rcv_byte:
      00302B A6 FF            [ 1] 4639 	ld a,#255
      00302D 72 01 52 03 E3   [ 2] 4640 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      003032 C6 52 04         [ 1] 4641 	ld a,SPI_DR 
      003035 81               [ 4] 4642 	ret
                                   4643 
                                   4644 ;------------------------------
                                   4645 ; BASIC: SPIWR byte [,byte]
                                   4646 ; write 1 or more byte
                                   4647 ;------------------------------
      003036                       4648 spi_write:
      003036 CD 1A F4         [ 4] 4649 	call expression
      003039 A1 84            [ 1] 4650 	cp a,#TK_INTGR 
      00303B 27 03            [ 1] 4651 	jreq 1$
      00303D CC 16 84         [ 2] 4652 	jp syntax_error 
      003040                       4653 1$:	
      003040 9F               [ 1] 4654 	ld a,xl 
      003041 CD 30 15         [ 4] 4655 	call spi_send_byte 
      003044 CD 17 E8         [ 4] 4656 	call next_token 
      003047 A1 08            [ 1] 4657 	cp a,#TK_COMMA 
      003049 26 02            [ 1] 4658 	jrne 2$ 
      00304B 20 E9            [ 2] 4659 	jra spi_write 
      00304D 4D               [ 1] 4660 2$:	tnz a 
      00304E 27 05            [ 1] 4661 	jreq 3$
      003050                       4662 	_unget_token  
      003050 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      003055 81               [ 4] 4663 3$:	ret 
                                   4664 
                                   4665 
                                   4666 ;-------------------------------
                                   4667 ; BASIC: SPIRD 	
                                   4668 ; read one byte from SPI 
                                   4669 ;-------------------------------
      003056                       4670 spi_read:
      003056 CD 30 2B         [ 4] 4671 	call spi_rcv_byte 
      003059 5F               [ 1] 4672 	clrw x 
      00305A 97               [ 1] 4673 	ld xl,a 
      00305B 4F               [ 1] 4674 	clr a  
      00305C 81               [ 4] 4675 	ret 
                                   4676 
                                   4677 ;------------------------------
                                   4678 ; BASIC: SPISEL 0|1 
                                   4679 ; set state of ~CS line
                                   4680 ; 0|1 deselect|select  
                                   4681 ;------------------------------
      00305D                       4682 spi_select:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 214.
Hexadecimal [24-Bits]



      00305D CD 17 E8         [ 4] 4683 	call next_token 
      003060 A1 84            [ 1] 4684 	cp a,#TK_INTGR 
      003062 27 03            [ 1] 4685 	jreq 1$
      003064 CC 16 84         [ 2] 4686 	jp syntax_error 
      003067 5D               [ 2] 4687 1$: tnzw x  
      003068 27 05            [ 1] 4688 	jreq cs_high 
      00306A 72 1B 50 14      [ 1] 4689 	bres PE_ODR,#SPI_CS_BIT
      00306E 81               [ 4] 4690 	ret 
      00306F                       4691 cs_high: 
      00306F 72 1A 50 14      [ 1] 4692 	bset PE_ODR,#SPI_CS_BIT
      003073 81               [ 4] 4693 	ret 
                                   4694 
                                   4695 ;-------------------------------
                                   4696 ; BASIC: PAD 
                                   4697 ; Return pad buffer address.
                                   4698 ;------------------------------
      003074                       4699 pad_ref:
      003074 AE 16 E0         [ 2] 4700 	ldw x,#pad 
      003077 4F               [ 1] 4701 	clr a
      003078 81               [ 4] 4702 	ret 
                                   4703 
                                   4704 ;****************************
                                   4705 ; expression stack 
                                   4706 ; manipulation routines
                                   4707 ;****************************
                                   4708 
                                   4709 ;-----------------------------
                                   4710 ; BASIC: PUSH expr|rel|cond 
                                   4711 ; push the result on xtack
                                   4712 ;-----------------------------
      003079                       4713 xpush:
      003079 CD 1C 0D         [ 4] 4714 	call condition 
      00307C 81               [ 4] 4715 	ret 
                                   4716 
                                   4717 ;------------------------------
                                   4718 ; BASIC: POP 
                                   4719 ; pop top of xstack 
                                   4720 ;------------------------------
      00307D                       4721 xpop:
      00307D                       4722 	_xpop 
      00307D 90 F6            [ 1]    1     ld a,(y)
      00307F 93               [ 1]    2     ldw x,y 
      003080 EE 01            [ 2]    3     ldw x,(1,x)
      003082 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003086 81               [ 4] 4723 	ret 
                                   4724 
                                   4725 
                                   4726 ;------------------------------
                                   4727 ; BASIC: ALLOC expr 
                                   4728 ; allocate expr element on xtack 
                                   4729 ;-------------------------------
      003087                       4730 xalloc: 
      003087 CD 1A F4         [ 4] 4731 	call expression 
      00308A A1 84            [ 1] 4732 	cp a,#TK_INTGR
      00308C 27 03            [ 1] 4733 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 215.
Hexadecimal [24-Bits]



      00308E CC 16 84         [ 2] 4734 	jp syntax_error
      003091                       4735 1$: _xpop 
      003091 90 F6            [ 1]    1     ld a,(y)
      003093 93               [ 1]    2     ldw x,y 
      003094 EE 01            [ 2]    3     ldw x,(1,x)
      003096 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00309A 4D               [ 1] 4736 	tnz a 
      00309B 27 05            [ 1] 4737 	jreq 3$ 
      00309D A6 0A            [ 1] 4738 2$:	ld a,#ERR_BAD_VALUE
      00309F CC 16 86         [ 2] 4739 	jp tb_error 
      0030A2 A3 00 14         [ 2] 4740 3$: cpw x,#XSTACK_SIZE 
      0030A5 22 F6            [ 1] 4741 	jrugt 2$
      0030A7 A6 03            [ 1] 4742 	ld a,#CELL_SIZE 
      0030A9 42               [ 4] 4743 	mul x,a 
      0030AA CF 00 0D         [ 2] 4744 	ldw acc16,x 
      0030AD 72 B2 00 0D      [ 2] 4745 	subw y,acc16 
      0030B1 90 A3 17 60      [ 2] 4746 	cpw y,#xstack_full
      0030B5 22 05            [ 1] 4747 	jrugt 9$
      0030B7 A6 01            [ 1] 4748 	ld a,#ERR_MEM_FULL
      0030B9 CC 16 86         [ 2] 4749 	jp tb_error 
      0030BC                       4750 9$:	 
      0030BC 81               [ 4] 4751 	ret 
                                   4752 
                                   4753 
                                   4754 ;------------------------------
                                   4755 ;  BASIC DROP expr 
                                   4756 ;  expr in range {0..XSTACK_SIZE}
                                   4757 ;  discard n elements from xtack
                                   4758 ;------------------------------
      0030BD                       4759 xdrop:
      0030BD CD 1A F4         [ 4] 4760 	call expression 
      0030C0 A1 84            [ 1] 4761 	cp a,#TK_INTGR
      0030C2 27 03            [ 1] 4762 	jreq 1$ 
      0030C4 CC 16 84         [ 2] 4763 	jp syntax_error 
      0030C7                       4764 1$:	_xpop 
      0030C7 90 F6            [ 1]    1     ld a,(y)
      0030C9 93               [ 1]    2     ldw x,y 
      0030CA EE 01            [ 2]    3     ldw x,(1,x)
      0030CC 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      0030D0 9F               [ 1] 4765 	ld a,xl 
      0030D1 A4 1F            [ 1] 4766 	and a,#0x1f 
      0030D3 5F               [ 1] 4767 	clrw x 
      0030D4 97               [ 1] 4768 	ld xl,a 
      0030D5 A6 03            [ 1] 4769 	ld a,#CELL_SIZE 
      0030D7 42               [ 4] 4770 	mul x,a 
      0030D8 CF 00 0D         [ 2] 4771 	ldw acc16,x  
      0030DB 72 B9 00 0D      [ 2] 4772 	addw y,acc16 
      0030DF 90 A3 17 73      [ 2] 4773 	cpw y,#XSTACK_EMPTY 
      0030E3 23 04            [ 2] 4774 	jrule 9$
      0030E5 90 AE 17 73      [ 2] 4775 	ldw y,#XSTACK_EMPTY 
      0030E9 81               [ 4] 4776 9$:	ret 
                                   4777 
                                   4778 ;-----------------------
                                   4779 ; check if value in A:X 
                                   4780 ; is inside xstack bound
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 216.
Hexadecimal [24-Bits]



                                   4781 ; output:
                                   4782 ;    X     slot address  
                                   4783 ;-----------------------
      0030EA                       4784 xstack_bound:
      0030EA 4D               [ 1] 4785 	tnz a 
      0030EB 26 16            [ 1] 4786 	jrne 8$ 
      0030ED A3 00 14         [ 2] 4787 1$: cpw x,#XSTACK_SIZE 
      0030F0 22 11            [ 1] 4788 	jrugt 8$
      0030F2 A6 03            [ 1] 4789 	ld a,#CELL_SIZE 
      0030F4 42               [ 4] 4790 	mul x,a
      0030F5 CF 00 0D         [ 2] 4791 	ldw acc16,x 
      0030F8 93               [ 1] 4792 	ldw x,y 
      0030F9 72 BB 00 0D      [ 2] 4793 	addw x,acc16 
      0030FD A3 17 73         [ 2] 4794 	cpw x,#XSTACK_EMPTY 
      003100 24 01            [ 1] 4795 	jruge 8$  
      003102 81               [ 4] 4796 	ret 
      003103 A6 0A            [ 1] 4797 8$: ld a,#ERR_BAD_VALUE
      003105 CC 16 86         [ 2] 4798 	jp tb_error 
                                   4799 
                                   4800 ;-------------------------
                                   4801 ; BASIC: PUT expr, cond 
                                   4802 ; expr -> slot 
                                   4803 ; cond -> valut to put 
                                   4804 ; on xstack 
                                   4805 ;-------------------------
      003108                       4806 xput:
      003108 CD 19 B0         [ 4] 4807 	call arg_list 
      00310B A1 02            [ 1] 4808 	cp a,#2 
      00310D 27 03            [ 1] 4809 	jreq 1$ 
      00310F CC 16 84         [ 2] 4810 0$:	jp syntax_error
      003112                       4811 1$: _xpop   ; value to put 
      003112 90 F6            [ 1]    1     ld a,(y)
      003114 93               [ 1]    2     ldw x,y 
      003115 EE 01            [ 2]    3     ldw x,(1,x)
      003117 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00311B 89               [ 2] 4812 	pushw x 
      00311C 88               [ 1] 4813 	push a 
      00311D                       4814 	_xpop    ; slot 
      00311D 90 F6            [ 1]    1     ld a,(y)
      00311F 93               [ 1]    2     ldw x,y 
      003120 EE 01            [ 2]    3     ldw x,(1,x)
      003122 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      003126 CD 30 EA         [ 4] 4815 	call xstack_bound
      003129 CF 00 19         [ 2] 4816     ldw ptr16,x 
      00312C 84               [ 1] 4817 	pop a 
      00312D 85               [ 2] 4818 	popw x 
      00312E 72 C7 00 19      [ 4] 4819 	ld [ptr16],a 
      003132 72 5C 00 1A      [ 1] 4820 	inc ptr8 
      003136 72 CF 00 19      [ 5] 4821 	ldw [ptr16],x 
      00313A 81               [ 4] 4822 	ret 
                                   4823 
                                   4824 ;------------------------
                                   4825 ; BASIC: PICK expr 
                                   4826 ; get nième element on 
                                   4827 ; xtack. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 217.
Hexadecimal [24-Bits]



                                   4828 ;-----------------------
      00313B                       4829 xpick:
      00313B CD 19 AB         [ 4] 4830 	call func_args 
      00313E A1 01            [ 1] 4831 	cp a,#1 
      003140 27 03            [ 1] 4832 	jreq 1$
      003142 CC 16 84         [ 2] 4833 	jp syntax_error 
      003145                       4834 1$: _xpop 
      003145 90 F6            [ 1]    1     ld a,(y)
      003147 93               [ 1]    2     ldw x,y 
      003148 EE 01            [ 2]    3     ldw x,(1,x)
      00314A 72 A9 00 03      [ 2]    4     addw y,#CELL_SIZE 
      00314E CD 30 EA         [ 4] 4835 	call xstack_bound
      003151 F6               [ 1] 4836     ld a,(x)
      003152 EE 01            [ 2] 4837 	ldw x,(1,x)				
      003154 81               [ 4] 4838 	ret 
                                   4839 
                                   4840 
                                   4841 ;----------------------------
                                   4842 ; BASIC: AUTORUN \E | addr 
                                   4843 ;  \E -> cancel autorun 
                                   4844 ;  addr -> register an 
                                   4845 ;    autorun program 
                                   4846 ;    this program execute at 
                                   4847 ;     reset/boot 
                                   4848 ;----------------------------
      003155                       4849 cmd_auto_run:
      003155 CD 17 E8         [ 4] 4850 	call next_token 
      003158 A1 84            [ 1] 4851 	cp a,#TK_INTGR
      00315A 27 19            [ 1] 4852 	jreq 1$ 
      00315C A1 04            [ 1] 4853 	cp a,#TK_CHAR 
      00315E 26 12            [ 1] 4854 	jrne 0$ 
      003160 F6               [ 1] 4855 	ld a,(x)
      003161 72 5C 00 01      [ 1] 4856 	inc in 
      003165 A4 DF            [ 1] 4857 	and a,#0xDF 
      003167 A1 01            [ 1] 4858 	cp a,#C 
      003169 26 07            [ 1] 4859 	jrne 0$ 
      00316B CE 40 00         [ 2] 4860 	ldw x,EEPROM_BASE 
      00316E CD 28 95         [ 4] 4861 	call erase_header
      003171 81               [ 4] 4862 	ret 
      003172 CC 16 84         [ 2] 4863 0$:	jp syntax_error
      003175 CD 18 1A         [ 4] 4864 1$:	call get_int24
      003178 CD 24 CD         [ 4] 4865 	call is_program_addr
      00317B 27 05            [ 1] 4866 	jreq 2$ 
      00317D A6 0A            [ 1] 4867 	ld a,#ERR_BAD_VALUE
      00317F CC 16 86         [ 2] 4868 	jp tb_error 
      003182 89               [ 2] 4869 2$: pushw x 
      003183 72 5F 00 18      [ 1] 4870 	clr farptr 
      003187 AE 40 00         [ 2] 4871 	ldw x,#EEPROM_BASE
      00318A CF 00 19         [ 2] 4872 	ldw ptr16,x 
      00318D C6 31 A7         [ 1] 4873 	ld a,AR_SIGN 
      003190 5F               [ 1] 4874 	clrw x 	 
      003191 CD 07 8B         [ 4] 4875 	call write_byte
      003194 C6 31 A8         [ 1] 4876 	ld a,AR_SIGN+1
      003197 CD 07 8B         [ 4] 4877 	call write_byte 
      00319A 7B 01            [ 1] 4878 	ld a,(1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 218.
Hexadecimal [24-Bits]



      00319C CD 07 8B         [ 4] 4879 	call write_byte 
      00319F 7B 02            [ 1] 4880 	ld a,(2,sp)
      0031A1 CD 07 8B         [ 4] 4881 	call write_byte 
      0031A4                       4882 	_drop 2 
      0031A4 5B 02            [ 2]    1     addw sp,#2 
      0031A6 81               [ 4] 4883 	ret 
                                   4884 
      0031A7 41 52                 4885 AR_SIGN: .ascii "AR" ; autorun signature 
                                   4886 
                                   4887 
                                   4888 ;------------------------------
                                   4889 ;      dictionary 
                                   4890 ; format:
                                   4891 ;   link:   2 bytes 
                                   4892 ;   name_length+flags:  1 byte, bits 0:3 lenght,4:8 kw type   
                                   4893 ;   cmd_name: 16 byte max 
                                   4894 ;   code_addr: 2 bytes 
                                   4895 ;------------------------------
                                   4896 	.macro _dict_entry len,name,code_addr 
                                   4897 	.word LINK 
                                   4898 	LINK=.
                                   4899 name:
                                   4900 	.byte len   	
                                   4901 	.ascii "name"
                                   4902 	.word code_addr  
                                   4903 	.endm 
                                   4904 
                           000000  4905 	LINK=0
                                   4906 ; respect alphabetic order for BASIC names from Z-A
                                   4907 ; this sort order is for a cleaner WORDS cmd output. 	
      0031A9                       4908 kword_end:
      0031A9                       4909 	_dict_entry,3+F_XOR,XOR,TK_XOR ; xor operator
      0031A9 00 00                    1 	.word LINK 
                           0031AB     2 	LINK=.
      0031AB                          3 XOR:
      0031AB A3                       4 	.byte 3+F_XOR   	
      0031AC 58 4F 52                 5 	.ascii "XOR"
      0031AF 00 8A                    6 	.word TK_XOR  
      0031B1                       4910 	_dict_entry,5,WRITE,write  
      0031B1 31 AB                    1 	.word LINK 
                           0031B3     2 	LINK=.
      0031B3                          3 WRITE:
      0031B3 05                       4 	.byte 5   	
      0031B4 57 52 49 54 45           5 	.ascii "WRITE"
      0031B9 29 BD                    6 	.word write  
      0031BB                       4911 	_dict_entry,5,WORDS,words 
      0031BB 31 B3                    1 	.word LINK 
                           0031BD     2 	LINK=.
      0031BD                          3 WORDS:
      0031BD 05                       4 	.byte 5   	
      0031BE 57 4F 52 44 53           5 	.ascii "WORDS"
      0031C3 2D 3A                    6 	.word words  
      0031C5                       4912 	_dict_entry 4,WAIT,wait 
      0031C5 31 BD                    1 	.word LINK 
                           0031C7     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 219.
Hexadecimal [24-Bits]



      0031C7                          3 WAIT:
      0031C7 04                       4 	.byte 4   	
      0031C8 57 41 49 54              5 	.ascii "WAIT"
      0031CC 21 07                    6 	.word wait  
      0031CE                       4913 	_dict_entry,3+F_IFUNC,USR,usr
      0031CE 31 C7                    1 	.word LINK 
                           0031D0     2 	LINK=.
      0031D0                          3 USR:
      0031D0 13                       4 	.byte 3+F_IFUNC   	
      0031D1 55 53 52                 5 	.ascii "USR"
      0031D4 2A DF                    6 	.word usr  
      0031D6                       4914 	_dict_entry,5,UNTIL,until 
      0031D6 31 D0                    1 	.word LINK 
                           0031D8     2 	LINK=.
      0031D8                          3 UNTIL:
      0031D8 05                       4 	.byte 5   	
      0031D9 55 4E 54 49 4C           5 	.ascii "UNTIL"
      0031DE 2E 6F                    6 	.word until  
      0031E0                       4915 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      0031E0 31 D8                    1 	.word LINK 
                           0031E2     2 	LINK=.
      0031E2                          3 UFLASH:
      0031E2 16                       4 	.byte 6+F_IFUNC   	
      0031E3 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      0031E9 2A BD                    6 	.word uflash  
      0031EB                       4916 	_dict_entry,6+F_IFUNC,UBOUND,ubound
      0031EB 31 E2                    1 	.word LINK 
                           0031ED     2 	LINK=.
      0031ED                          3 UBOUND:
      0031ED 16                       4 	.byte 6+F_IFUNC   	
      0031EE 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      0031F4 1C C1                    6 	.word ubound  
      0031F6                       4917 	_dict_entry,4,TONE,tone  
      0031F6 31 ED                    1 	.word LINK 
                           0031F8     2 	LINK=.
      0031F8                          3 TONE:
      0031F8 04                       4 	.byte 4   	
      0031F9 54 4F 4E 45              5 	.ascii "TONE"
      0031FD 25 AB                    6 	.word tone  
      0031FF                       4918 	_dict_entry,2,TO,to
      0031FF 31 F8                    1 	.word LINK 
                           003201     2 	LINK=.
      003201                          3 TO:
      003201 02                       4 	.byte 2   	
      003202 54 4F                    5 	.ascii "TO"
      003204 22 71                    6 	.word to  
      003206                       4919 	_dict_entry,5,TIMER,set_timer
      003206 32 01                    1 	.word LINK 
                           003208     2 	LINK=.
      003208                          3 TIMER:
      003208 05                       4 	.byte 5   	
      003209 54 49 4D 45 52           5 	.ascii "TIMER"
      00320E 2D A4                    6 	.word set_timer  
      003210                       4920 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      003210 32 08                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 220.
Hexadecimal [24-Bits]



                           003212     2 	LINK=.
      003212                          3 TIMEOUT:
      003212 17                       4 	.byte 7+F_IFUNC   	
      003213 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00321A 2D BB                    6 	.word timeout  
      00321C                       4921 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      00321C 32 12                    1 	.word LINK 
                           00321E     2 	LINK=.
      00321E                          3 TICKS:
      00321E 15                       4 	.byte 5+F_IFUNC   	
      00321F 54 49 43 4B 53           5 	.ascii "TICKS"
      003224 2B 8B                    6 	.word get_ticks  
      003226                       4922 	_dict_entry,4,STOP,stop 
      003226 32 1E                    1 	.word LINK 
                           003228     2 	LINK=.
      003228                          3 STOP:
      003228 04                       4 	.byte 4   	
      003229 53 54 4F 50              5 	.ascii "STOP"
      00322D 27 14                    6 	.word stop  
      00322F                       4923 	_dict_entry,4,STEP,step 
      00322F 32 28                    1 	.word LINK 
                           003231     2 	LINK=.
      003231                          3 STEP:
      003231 04                       4 	.byte 4   	
      003232 53 54 45 50              5 	.ascii "STEP"
      003236 22 B7                    6 	.word step  
      003238                       4924 	_dict_entry,5,SPIWR,spi_write
      003238 32 31                    1 	.word LINK 
                           00323A     2 	LINK=.
      00323A                          3 SPIWR:
      00323A 05                       4 	.byte 5   	
      00323B 53 50 49 57 52           5 	.ascii "SPIWR"
      003240 30 36                    6 	.word spi_write  
      003242                       4925 	_dict_entry,6,SPISEL,spi_select
      003242 32 3A                    1 	.word LINK 
                           003244     2 	LINK=.
      003244                          3 SPISEL:
      003244 06                       4 	.byte 6   	
      003245 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      00324B 30 5D                    6 	.word spi_select  
      00324D                       4926 	_dict_entry,5+F_IFUNC,SPIRD,spi_read 
      00324D 32 44                    1 	.word LINK 
                           00324F     2 	LINK=.
      00324F                          3 SPIRD:
      00324F 15                       4 	.byte 5+F_IFUNC   	
      003250 53 50 49 52 44           5 	.ascii "SPIRD"
      003255 30 56                    6 	.word spi_read  
      003257                       4927 	_dict_entry,5,SPIEN,spi_enable 
      003257 32 4F                    1 	.word LINK 
                           003259     2 	LINK=.
      003259                          3 SPIEN:
      003259 05                       4 	.byte 5   	
      00325A 53 50 49 45 4E           5 	.ascii "SPIEN"
      00325F 2F BE                    6 	.word spi_enable  
      003261                       4928 	_dict_entry,5,SLEEP,sleep 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 221.
Hexadecimal [24-Bits]



      003261 32 59                    1 	.word LINK 
                           003263     2 	LINK=.
      003263                          3 SLEEP:
      003263 05                       4 	.byte 5   	
      003264 53 4C 45 45 50           5 	.ascii "SLEEP"
      003269 2B 0E                    6 	.word sleep  
      00326B                       4929     _dict_entry,4,SIZE,cmd_size 
      00326B 32 63                    1 	.word LINK 
                           00326D     2 	LINK=.
      00326D                          3 SIZE:
      00326D 04                       4 	.byte 4   	
      00326E 53 49 5A 45              5 	.ascii "SIZE"
      003272 1C 94                    6 	.word cmd_size  
      003274                       4930 	_dict_entry,4,SAVE,cmd_save 
      003274 32 6D                    1 	.word LINK 
                           003276     2 	LINK=.
      003276                          3 SAVE:
      003276 04                       4 	.byte 4   	
      003277 53 41 56 45              5 	.ascii "SAVE"
      00327B 28 AF                    6 	.word cmd_save  
      00327D                       4931 	_dict_entry 3,RUN,run
      00327D 32 76                    1 	.word LINK 
                           00327F     2 	LINK=.
      00327F                          3 RUN:
      00327F 03                       4 	.byte 3   	
      003280 52 55 4E                 5 	.ascii "RUN"
      003283 24 DE                    6 	.word run  
      003285                       4932 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      003285 32 7F                    1 	.word LINK 
                           003287     2 	LINK=.
      003287                          3 RSHIFT:
      003287 16                       4 	.byte 6+F_IFUNC   	
      003288 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      00328E 2B D5                    6 	.word rshift  
      003290                       4933 	_dict_entry,3+F_IFUNC,RND,random 
      003290 32 87                    1 	.word LINK 
                           003292     2 	LINK=.
      003292                          3 RND:
      003292 13                       4 	.byte 3+F_IFUNC   	
      003293 52 4E 44                 5 	.ascii "RND"
      003296 2C 9F                    6 	.word random  
      003298                       4934 	_dict_entry,6,RETURN,return 
      003298 32 92                    1 	.word LINK 
                           00329A     2 	LINK=.
      00329A                          3 RETURN:
      00329A 06                       4 	.byte 6   	
      00329B 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0032A1 24 B0                    6 	.word return  
      0032A3                       4935 	_dict_entry,7,RESTORE,restore 
      0032A3 32 9A                    1 	.word LINK 
                           0032A5     2 	LINK=.
      0032A5                          3 RESTORE:
      0032A5 07                       4 	.byte 7   	
      0032A6 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0032AD 2F 06                    6 	.word restore  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 222.
Hexadecimal [24-Bits]



      0032AF                       4936 	_dict_entry 3,REM,remark 
      0032AF 32 A5                    1 	.word LINK 
                           0032B1     2 	LINK=.
      0032B1                          3 REM:
      0032B1 03                       4 	.byte 3   	
      0032B2 52 45 4D                 5 	.ascii "REM"
      0032B5 21 01                    6 	.word remark  
      0032B7                       4937 	_dict_entry,6,REBOOT,cold_start
      0032B7 32 B1                    1 	.word LINK 
                           0032B9     2 	LINK=.
      0032B9                          3 REBOOT:
      0032B9 06                       4 	.byte 6   	
      0032BA 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      0032C0 00 B5                    6 	.word cold_start  
      0032C2                       4938 	_dict_entry,4+F_IFUNC,READ,read  
      0032C2 32 B9                    1 	.word LINK 
                           0032C4     2 	LINK=.
      0032C4                          3 READ:
      0032C4 14                       4 	.byte 4+F_IFUNC   	
      0032C5 52 45 41 44              5 	.ascii "READ"
      0032C9 2F 70                    6 	.word read  
      0032CB                       4939 	_dict_entry,4+F_IFUNC,QKEY,qkey
      0032CB 32 C4                    1 	.word LINK 
                           0032CD     2 	LINK=.
      0032CD                          3 QKEY:
      0032CD 14                       4 	.byte 4+F_IFUNC   	
      0032CE 51 4B 45 59              5 	.ascii "QKEY"
      0032D2 2A 80                    6 	.word qkey  
      0032D4                       4940 	_dict_entry,3,PUT,xput 
      0032D4 32 CD                    1 	.word LINK 
                           0032D6     2 	LINK=.
      0032D6                          3 PUT:
      0032D6 03                       4 	.byte 3   	
      0032D7 50 55 54                 5 	.ascii "PUT"
      0032DA 31 08                    6 	.word xput  
      0032DC                       4941 	_dict_entry,4,PUSH,xpush   
      0032DC 32 D6                    1 	.word LINK 
                           0032DE     2 	LINK=.
      0032DE                          3 PUSH:
      0032DE 04                       4 	.byte 4   	
      0032DF 50 55 53 48              5 	.ascii "PUSH"
      0032E3 30 79                    6 	.word xpush  
      0032E5                       4942 	_dict_entry,5+F_IFUNC,PORTI,const_porti 
      0032E5 32 DE                    1 	.word LINK 
                           0032E7     2 	LINK=.
      0032E7                          3 PORTI:
      0032E7 15                       4 	.byte 5+F_IFUNC   	
      0032E8 50 4F 52 54 49           5 	.ascii "PORTI"
      0032ED 2E C5                    6 	.word const_porti  
      0032EF                       4943 	_dict_entry,5+F_IFUNC,PORTG,const_portg 
      0032EF 32 E7                    1 	.word LINK 
                           0032F1     2 	LINK=.
      0032F1                          3 PORTG:
      0032F1 15                       4 	.byte 5+F_IFUNC   	
      0032F2 50 4F 52 54 47           5 	.ascii "PORTG"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 223.
Hexadecimal [24-Bits]



      0032F7 2E C0                    6 	.word const_portg  
      0032F9                       4944 	_dict_entry,5+F_IFUNC,PORTF,const_portf
      0032F9 32 F1                    1 	.word LINK 
                           0032FB     2 	LINK=.
      0032FB                          3 PORTF:
      0032FB 15                       4 	.byte 5+F_IFUNC   	
      0032FC 50 4F 52 54 46           5 	.ascii "PORTF"
      003301 2E BB                    6 	.word const_portf  
      003303                       4945 	_dict_entry,5+F_IFUNC,PORTE,const_porte
      003303 32 FB                    1 	.word LINK 
                           003305     2 	LINK=.
      003305                          3 PORTE:
      003305 15                       4 	.byte 5+F_IFUNC   	
      003306 50 4F 52 54 45           5 	.ascii "PORTE"
      00330B 2E B6                    6 	.word const_porte  
      00330D                       4946 	_dict_entry,5+F_IFUNC,PORTD,const_portd
      00330D 33 05                    1 	.word LINK 
                           00330F     2 	LINK=.
      00330F                          3 PORTD:
      00330F 15                       4 	.byte 5+F_IFUNC   	
      003310 50 4F 52 54 44           5 	.ascii "PORTD"
      003315 2E B1                    6 	.word const_portd  
      003317                       4947 	_dict_entry,5+F_IFUNC,PORTC,const_portc
      003317 33 0F                    1 	.word LINK 
                           003319     2 	LINK=.
      003319                          3 PORTC:
      003319 15                       4 	.byte 5+F_IFUNC   	
      00331A 50 4F 52 54 43           5 	.ascii "PORTC"
      00331F 2E AC                    6 	.word const_portc  
      003321                       4948 	_dict_entry,5+F_IFUNC,PORTB,const_portb
      003321 33 19                    1 	.word LINK 
                           003323     2 	LINK=.
      003323                          3 PORTB:
      003323 15                       4 	.byte 5+F_IFUNC   	
      003324 50 4F 52 54 42           5 	.ascii "PORTB"
      003329 2E A7                    6 	.word const_portb  
      00332B                       4949 	_dict_entry,5+F_IFUNC,PORTA,const_porta 
      00332B 33 23                    1 	.word LINK 
                           00332D     2 	LINK=.
      00332D                          3 PORTA:
      00332D 15                       4 	.byte 5+F_IFUNC   	
      00332E 50 4F 52 54 41           5 	.ascii "PORTA"
      003333 2E A2                    6 	.word const_porta  
      003335                       4950 	_dict_entry 5,PRINT,print 
      003335 33 2D                    1 	.word LINK 
                           003337     2 	LINK=.
      003337                          3 PRINT:
      003337 05                       4 	.byte 5   	
      003338 50 52 49 4E 54           5 	.ascii "PRINT"
      00333D 1F B9                    6 	.word print  
      00333F                       4951 	_dict_entry,4+F_IFUNC,POUT,const_output
      00333F 33 37                    1 	.word LINK 
                           003341     2 	LINK=.
      003341                          3 POUT:
      003341 14                       4 	.byte 4+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 224.
Hexadecimal [24-Bits]



      003342 50 4F 55 54              5 	.ascii "POUT"
      003346 2E E3                    6 	.word const_output  
      003348                       4952 	_dict_entry,3+F_IFUNC,POP,xpop 
      003348 33 41                    1 	.word LINK 
                           00334A     2 	LINK=.
      00334A                          3 POP:
      00334A 13                       4 	.byte 3+F_IFUNC   	
      00334B 50 4F 50                 5 	.ascii "POP"
      00334E 30 7D                    6 	.word xpop  
      003350                       4953 	_dict_entry,4,POKE,poke 
      003350 33 4A                    1 	.word LINK 
                           003352     2 	LINK=.
      003352                          3 POKE:
      003352 04                       4 	.byte 4   	
      003353 50 4F 4B 45              5 	.ascii "POKE"
      003357 21 E2                    6 	.word poke  
      003359                       4954 	_dict_entry,5,PMODE,pin_mode 
      003359 33 52                    1 	.word LINK 
                           00335B     2 	LINK=.
      00335B                          3 PMODE:
      00335B 05                       4 	.byte 5   	
      00335C 50 4D 4F 44 45           5 	.ascii "PMODE"
      003361 2C 10                    6 	.word pin_mode  
      003363                       4955 	_dict_entry,4+F_IFUNC,PINP,const_input
      003363 33 5B                    1 	.word LINK 
                           003365     2 	LINK=.
      003365                          3 PINP:
      003365 14                       4 	.byte 4+F_IFUNC   	
      003366 50 49 4E 50              5 	.ascii "PINP"
      00336A 2E E8                    6 	.word const_input  
      00336C                       4956 	_dict_entry,4+F_IFUNC,PICK,xpick 
      00336C 33 65                    1 	.word LINK 
                           00336E     2 	LINK=.
      00336E                          3 PICK:
      00336E 14                       4 	.byte 4+F_IFUNC   	
      00336F 50 49 43 4B              5 	.ascii "PICK"
      003373 31 3B                    6 	.word xpick  
      003375                       4957 	_dict_entry,4+F_IFUNC,PEEK,peek 
      003375 33 6E                    1 	.word LINK 
                           003377     2 	LINK=.
      003377                          3 PEEK:
      003377 14                       4 	.byte 4+F_IFUNC   	
      003378 50 45 45 4B              5 	.ascii "PEEK"
      00337C 22 03                    6 	.word peek  
      00337E                       4958 	_dict_entry,5,PAUSE,pause 
      00337E 33 77                    1 	.word LINK 
                           003380     2 	LINK=.
      003380                          3 PAUSE:
      003380 05                       4 	.byte 5   	
      003381 50 41 55 53 45           5 	.ascii "PAUSE"
      003386 2B 19                    6 	.word pause  
      003388                       4959 	_dict_entry,3+F_IFUNC,PAD,pad_ref 
      003388 33 80                    1 	.word LINK 
                           00338A     2 	LINK=.
      00338A                          3 PAD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 225.
Hexadecimal [24-Bits]



      00338A 13                       4 	.byte 3+F_IFUNC   	
      00338B 50 41 44                 5 	.ascii "PAD"
      00338E 30 74                    6 	.word pad_ref  
      003390                       4960 	_dict_entry,2+F_OR,OR,TK_OR ; OR operator 
      003390 33 8A                    1 	.word LINK 
                           003392     2 	LINK=.
      003392                          3 OR:
      003392 92                       4 	.byte 2+F_OR   	
      003393 4F 52                    5 	.ascii "OR"
      003395 00 89                    6 	.word TK_OR  
      003397                       4961 	_dict_entry,2,ON,cmd_on 
      003397 33 92                    1 	.word LINK 
                           003399     2 	LINK=.
      003399                          3 ON:
      003399 02                       4 	.byte 2   	
      00339A 4F 4E                    5 	.ascii "ON"
      00339C 23 E0                    6 	.word cmd_on  
      00339E                       4962 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      00339E 33 99                    1 	.word LINK 
                           0033A0     2 	LINK=.
      0033A0                          3 ODR:
      0033A0 13                       4 	.byte 3+F_IFUNC   	
      0033A1 4F 44 52                 5 	.ascii "ODR"
      0033A4 2E CA                    6 	.word const_odr  
      0033A6                       4963 	_dict_entry,3+F_NOT,NOT,TK_NOT;NOT operator
      0033A6 33 A0                    1 	.word LINK 
                           0033A8     2 	LINK=.
      0033A8                          3 NOT:
      0033A8 73                       4 	.byte 3+F_NOT   	
      0033A9 4E 4F 54                 5 	.ascii "NOT"
      0033AC 00 87                    6 	.word TK_NOT  
      0033AE                       4964 	_dict_entry,4,NEXT,next 
      0033AE 33 A8                    1 	.word LINK 
                           0033B0     2 	LINK=.
      0033B0                          3 NEXT:
      0033B0 04                       4 	.byte 4   	
      0033B1 4E 45 58 54              5 	.ascii "NEXT"
      0033B5 22 F9                    6 	.word next  
      0033B7                       4965 	_dict_entry,3,NEW,new
      0033B7 33 B0                    1 	.word LINK 
                           0033B9     2 	LINK=.
      0033B9                          3 NEW:
      0033B9 03                       4 	.byte 3   	
      0033BA 4E 45 57                 5 	.ascii "NEW"
      0033BD 27 60                    6 	.word new  
      0033BF                       4966 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0033BF 33 B9                    1 	.word LINK 
                           0033C1     2 	LINK=.
      0033C1                          3 LSHIFT:
      0033C1 16                       4 	.byte 6+F_IFUNC   	
      0033C2 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0033C8 2B A9                    6 	.word lshift  
      0033CA                       4967 	_dict_entry,4+F_IFUNC,LOG2,log2 
      0033CA 33 C1                    1 	.word LINK 
                           0033CC     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 226.
Hexadecimal [24-Bits]



      0033CC                          3 LOG2:
      0033CC 14                       4 	.byte 4+F_IFUNC   	
      0033CD 4C 4F 47 32              5 	.ascii "LOG2"
      0033D1 2E 09                    6 	.word log2  
      0033D3                       4968 	_dict_entry 4,LIST,list
      0033D3 33 CC                    1 	.word LINK 
                           0033D5     2 	LINK=.
      0033D5                          3 LIST:
      0033D5 04                       4 	.byte 4   	
      0033D6 4C 49 53 54              5 	.ascii "LIST"
      0033DA 1E CB                    6 	.word list  
      0033DC                       4969 	_dict_entry 3,LET,let 
      0033DC 33 D5                    1 	.word LINK 
                           0033DE     2 	LINK=.
      0033DE                          3 LET:
      0033DE 03                       4 	.byte 3   	
      0033DF 4C 45 54                 5 	.ascii "LET"
      0033E2 1C CC                    6 	.word let  
      0033E4                       4970 	_dict_entry,3+F_CFUNC,KEY,key 
      0033E4 33 DE                    1 	.word LINK 
                           0033E6     2 	LINK=.
      0033E6                          3 KEY:
      0033E6 23                       4 	.byte 3+F_CFUNC   	
      0033E7 4B 45 59                 5 	.ascii "KEY"
      0033EA 2A 7C                    6 	.word key  
      0033EC                       4971 	_dict_entry,7,IWDGREF,refresh_iwdg
      0033EC 33 E6                    1 	.word LINK 
                           0033EE     2 	LINK=.
      0033EE                          3 IWDGREF:
      0033EE 07                       4 	.byte 7   	
      0033EF 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      0033F6 2E 04                    6 	.word refresh_iwdg  
      0033F8                       4972 	_dict_entry,6,IWDGEN,enable_iwdg
      0033F8 33 EE                    1 	.word LINK 
                           0033FA     2 	LINK=.
      0033FA                          3 IWDGEN:
      0033FA 06                       4 	.byte 6   	
      0033FB 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      003401 2D C6                    6 	.word enable_iwdg  
      003403                       4973 	_dict_entry,5,INPUT,input_var  
      003403 33 FA                    1 	.word LINK 
                           003405     2 	LINK=.
      003405                          3 INPUT:
      003405 05                       4 	.byte 5   	
      003406 49 4E 50 55 54           5 	.ascii "INPUT"
      00340B 20 62                    6 	.word input_var  
      00340D                       4974 	_dict_entry,2,IF,if 
      00340D 34 05                    1 	.word LINK 
                           00340F     2 	LINK=.
      00340F                          3 IF:
      00340F 02                       4 	.byte 2   	
      003410 49 46                    5 	.ascii "IF"
      003412 22 24                    6 	.word if  
      003414                       4975 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      003414 34 0F                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 227.
Hexadecimal [24-Bits]



                           003416     2 	LINK=.
      003416                          3 IDR:
      003416 13                       4 	.byte 3+F_IFUNC   	
      003417 49 44 52                 5 	.ascii "IDR"
      00341A 2E CF                    6 	.word const_idr  
      00341C                       4976 	_dict_entry,3,HEX,hex_base
      00341C 34 16                    1 	.word LINK 
                           00341E     2 	LINK=.
      00341E                          3 HEX:
      00341E 03                       4 	.byte 3   	
      00341F 48 45 58                 5 	.ascii "HEX"
      003422 1C 81                    6 	.word hex_base  
      003424                       4977 	_dict_entry,4,GOTO,goto 
      003424 34 1E                    1 	.word LINK 
                           003426     2 	LINK=.
      003426                          3 GOTO:
      003426 04                       4 	.byte 4   	
      003427 47 4F 54 4F              5 	.ascii "GOTO"
      00342B 24 72                    6 	.word goto  
      00342D                       4978 	_dict_entry,5,GOSUB,gosub 
      00342D 34 26                    1 	.word LINK 
                           00342F     2 	LINK=.
      00342F                          3 GOSUB:
      00342F 05                       4 	.byte 5   	
      003430 47 4F 53 55 42           5 	.ascii "GOSUB"
      003435 24 8C                    6 	.word gosub  
      003437                       4979 	_dict_entry,3,GET,cmd_get 
      003437 34 2F                    1 	.word LINK 
                           003439     2 	LINK=.
      003439                          3 GET:
      003439 03                       4 	.byte 3   	
      00343A 47 45 54                 5 	.ascii "GET"
      00343D 25 73                    6 	.word cmd_get  
      00343F                       4980 	_dict_entry,4+F_IFUNC,FREE,free
      00343F 34 39                    1 	.word LINK 
                           003441     2 	LINK=.
      003441                          3 FREE:
      003441 14                       4 	.byte 4+F_IFUNC   	
      003442 46 52 45 45              5 	.ascii "FREE"
      003446 1C 8B                    6 	.word free  
      003448                       4981 	_dict_entry,3,FOR,for 
      003448 34 41                    1 	.word LINK 
                           00344A     2 	LINK=.
      00344A                          3 FOR:
      00344A 03                       4 	.byte 3   	
      00344B 46 4F 52                 5 	.ascii "FOR"
      00344E 22 41                    6 	.word for  
      003450                       4982 	_dict_entry,4,FCPU,fcpu 
      003450 34 4A                    1 	.word LINK 
                           003452     2 	LINK=.
      003452                          3 FCPU:
      003452 04                       4 	.byte 4   	
      003453 46 43 50 55              5 	.ascii "FCPU"
      003457 2C 01                    6 	.word fcpu  
      003459                       4983 	_dict_entry,5,ERASE,erase 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 228.
Hexadecimal [24-Bits]



      003459 34 52                    1 	.word LINK 
                           00345B     2 	LINK=.
      00345B                          3 ERASE:
      00345B 05                       4 	.byte 5   	
      00345C 45 52 41 53 45           5 	.ascii "ERASE"
      003461 27 BD                    6 	.word erase  
      003463                       4984 	_dict_entry,3,END,cmd_end  
      003463 34 5B                    1 	.word LINK 
                           003465     2 	LINK=.
      003465                          3 END:
      003465 03                       4 	.byte 3   	
      003466 45 4E 44                 5 	.ascii "END"
      003469 25 6C                    6 	.word cmd_end  
      00346B                       4985 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      00346B 34 65                    1 	.word LINK 
                           00346D     2 	LINK=.
      00346D                          3 EEPROM:
      00346D 16                       4 	.byte 6+F_IFUNC   	
      00346E 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      003474 2E ED                    6 	.word const_eeprom_base  
      003476                       4986 	_dict_entry,6+F_IFUNC,EEFREE,func_eefree 
      003476 34 6D                    1 	.word LINK 
                           003478     2 	LINK=.
      003478                          3 EEFREE:
      003478 16                       4 	.byte 6+F_IFUNC   	
      003479 45 45 46 52 45 45        5 	.ascii "EEFREE"
      00347F 1D 20                    6 	.word func_eefree  
      003481                       4987 	_dict_entry,4,EDIT,edit 
      003481 34 78                    1 	.word LINK 
                           003483     2 	LINK=.
      003483                          3 EDIT:
      003483 04                       4 	.byte 4   	
      003484 45 44 49 54              5 	.ascii "EDIT"
      003488 1F 54                    6 	.word edit  
      00348A                       4988 	_dict_entry,6+F_CMD,DWRITE,digital_write
      00348A 34 83                    1 	.word LINK 
                           00348C     2 	LINK=.
      00348C                          3 DWRITE:
      00348C 06                       4 	.byte 6+F_CMD   	
      00348D 44 57 52 49 54 45        5 	.ascii "DWRITE"
      003493 26 C9                    6 	.word digital_write  
      003495                       4989 	_dict_entry,4,DROP,xdrop ; drop n element from xtack 
      003495 34 8C                    1 	.word LINK 
                           003497     2 	LINK=.
      003497                          3 DROP:
      003497 04                       4 	.byte 4   	
      003498 44 52 4F 50              5 	.ascii "DROP"
      00349C 30 BD                    6 	.word xdrop  
      00349E                       4990 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      00349E 34 97                    1 	.word LINK 
                           0034A0     2 	LINK=.
      0034A0                          3 DREAD:
      0034A0 15                       4 	.byte 5+F_IFUNC   	
      0034A1 44 52 45 41 44           5 	.ascii "DREAD"
      0034A6 26 92                    6 	.word digital_read  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 229.
Hexadecimal [24-Bits]



      0034A8                       4991 	_dict_entry,2,DO,do_loop
      0034A8 34 A0                    1 	.word LINK 
                           0034AA     2 	LINK=.
      0034AA                          3 DO:
      0034AA 02                       4 	.byte 2   	
      0034AB 44 4F                    5 	.ascii "DO"
      0034AD 2E 5C                    6 	.word do_loop  
      0034AF                       4992 	_dict_entry,3,DIR,cmd_dir
      0034AF 34 AA                    1 	.word LINK 
                           0034B1     2 	LINK=.
      0034B1                          3 DIR:
      0034B1 03                       4 	.byte 3   	
      0034B2 44 49 52                 5 	.ascii "DIR"
      0034B5 29 71                    6 	.word cmd_dir  
      0034B7                       4993 	_dict_entry,3,DIM,cmd_dim 
      0034B7 34 B1                    1 	.word LINK 
                           0034B9     2 	LINK=.
      0034B9                          3 DIM:
      0034B9 03                       4 	.byte 3   	
      0034BA 44 49 4D                 5 	.ascii "DIM"
      0034BD 1D A4                    6 	.word cmd_dim  
      0034BF                       4994 	_dict_entry,3,DEC,dec_base
      0034BF 34 B9                    1 	.word LINK 
                           0034C1     2 	LINK=.
      0034C1                          3 DEC:
      0034C1 03                       4 	.byte 3   	
      0034C2 44 45 43                 5 	.ascii "DEC"
      0034C5 1C 86                    6 	.word dec_base  
      0034C7                       4995 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0034C7 34 C1                    1 	.word LINK 
                           0034C9     2 	LINK=.
      0034C9                          3 DDR:
      0034C9 13                       4 	.byte 3+F_IFUNC   	
      0034CA 44 44 52                 5 	.ascii "DDR"
      0034CD 2E D4                    6 	.word const_ddr  
      0034CF                       4996 	_dict_entry,4,DATA,data  
      0034CF 34 C9                    1 	.word LINK 
                           0034D1     2 	LINK=.
      0034D1                          3 DATA:
      0034D1 04                       4 	.byte 4   	
      0034D2 44 41 54 41              5 	.ascii "DATA"
      0034D6 2E F2                    6 	.word data  
      0034D8                       4997 	_dict_entry,3+F_IFUNC,CR2,const_cr2 
      0034D8 34 D1                    1 	.word LINK 
                           0034DA     2 	LINK=.
      0034DA                          3 CR2:
      0034DA 13                       4 	.byte 3+F_IFUNC   	
      0034DB 43 52 32                 5 	.ascii "CR2"
      0034DE 2E DE                    6 	.word const_cr2  
      0034E0                       4998 	_dict_entry,3+F_IFUNC,CR1,const_cr1 
      0034E0 34 DA                    1 	.word LINK 
                           0034E2     2 	LINK=.
      0034E2                          3 CR1:
      0034E2 13                       4 	.byte 3+F_IFUNC   	
      0034E3 43 52 31                 5 	.ascii "CR1"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 230.
Hexadecimal [24-Bits]



      0034E6 2E D9                    6 	.word const_cr1  
      0034E8                       4999 	_dict_entry,5,CONST,cmd_const 
      0034E8 34 E2                    1 	.word LINK 
                           0034EA     2 	LINK=.
      0034EA                          3 CONST:
      0034EA 05                       4 	.byte 5   	
      0034EB 43 4F 4E 53 54           5 	.ascii "CONST"
      0034F0 1D 90                    6 	.word cmd_const  
      0034F2                       5000 	_dict_entry,4+F_CFUNC,CHAR,func_char
      0034F2 34 EA                    1 	.word LINK 
                           0034F4     2 	LINK=.
      0034F4                          3 CHAR:
      0034F4 24                       4 	.byte 4+F_CFUNC   	
      0034F5 43 48 41 52              5 	.ascii "CHAR"
      0034F9 2A 26                    6 	.word func_char  
      0034FB                       5001 	_dict_entry,3,BYE,bye 
      0034FB 34 F4                    1 	.word LINK 
                           0034FD     2 	LINK=.
      0034FD                          3 BYE:
      0034FD 03                       4 	.byte 3   	
      0034FE 42 59 45                 5 	.ascii "BYE"
      003501 2B 05                    6 	.word bye  
      003503                       5002 	_dict_entry,5,BTOGL,bit_toggle
      003503 34 FD                    1 	.word LINK 
                           003505     2 	LINK=.
      003505                          3 BTOGL:
      003505 05                       4 	.byte 5   	
      003506 42 54 4F 47 4C           5 	.ascii "BTOGL"
      00350B 21 89                    6 	.word bit_toggle  
      00350D                       5003 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      00350D 35 05                    1 	.word LINK 
                           00350F     2 	LINK=.
      00350F                          3 BTEST:
      00350F 15                       4 	.byte 5+F_IFUNC   	
      003510 42 54 45 53 54           5 	.ascii "BTEST"
      003515 21 AB                    6 	.word bit_test  
      003517                       5004 	_dict_entry,4,BSET,bit_set 
      003517 35 0F                    1 	.word LINK 
                           003519     2 	LINK=.
      003519                          3 BSET:
      003519 04                       4 	.byte 4   	
      00351A 42 53 45 54              5 	.ascii "BSET"
      00351E 21 44                    6 	.word bit_set  
      003520                       5005 	_dict_entry,4,BRES,bit_reset
      003520 35 19                    1 	.word LINK 
                           003522     2 	LINK=.
      003522                          3 BRES:
      003522 04                       4 	.byte 4   	
      003523 42 52 45 53              5 	.ascii "BRES"
      003527 21 66                    6 	.word bit_reset  
      003529                       5006 	_dict_entry,3+F_IFUNC,BIT,bitmask
      003529 35 22                    1 	.word LINK 
                           00352B     2 	LINK=.
      00352B                          3 BIT:
      00352B 13                       4 	.byte 3+F_IFUNC   	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 231.
Hexadecimal [24-Bits]



      00352C 42 49 54                 5 	.ascii "BIT"
      00352F 2E 36                    6 	.word bitmask  
      003531                       5007 	_dict_entry,3,AWU,awu 
      003531 35 2B                    1 	.word LINK 
                           003533     2 	LINK=.
      003533                          3 AWU:
      003533 03                       4 	.byte 3   	
      003534 41 57 55                 5 	.ascii "AWU"
      003537 2B 39                    6 	.word awu  
      003539                       5008 	_dict_entry,7,AUTORUN,cmd_auto_run
      003539 35 33                    1 	.word LINK 
                           00353B     2 	LINK=.
      00353B                          3 AUTORUN:
      00353B 07                       4 	.byte 7   	
      00353C 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      003543 31 55                    6 	.word cmd_auto_run  
      003545                       5009 	_dict_entry,3+F_IFUNC,ASC,ascii
      003545 35 3B                    1 	.word LINK 
                           003547     2 	LINK=.
      003547                          3 ASC:
      003547 13                       4 	.byte 3+F_IFUNC   	
      003548 41 53 43                 5 	.ascii "ASC"
      00354B 2A 3D                    6 	.word ascii  
      00354D                       5010 	_dict_entry,3+F_AND,AND,TK_AND ; AND operator 
      00354D 35 47                    1 	.word LINK 
                           00354F     2 	LINK=.
      00354F                          3 AND:
      00354F 83                       4 	.byte 3+F_AND   	
      003550 41 4E 44                 5 	.ascii "AND"
      003553 00 88                    6 	.word TK_AND  
      003555                       5011 	_dict_entry,5,ALLOC,xalloc ; allocate space on xtack 
      003555 35 4F                    1 	.word LINK 
                           003557     2 	LINK=.
      003557                          3 ALLOC:
      003557 05                       4 	.byte 5   	
      003558 41 4C 4C 4F 43           5 	.ascii "ALLOC"
      00355D 30 87                    6 	.word xalloc  
      00355F                       5012 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      00355F 35 57                    1 	.word LINK 
                           003561     2 	LINK=.
      003561                          3 ADCREAD:
      003561 17                       4 	.byte 7+F_IFUNC   	
      003562 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      003569 26 56                    6 	.word analog_read  
      00356B                       5013 	_dict_entry,5,ADCON,power_adc 
      00356B 35 61                    1 	.word LINK 
                           00356D     2 	LINK=.
      00356D                          3 ADCON:
      00356D 05                       4 	.byte 5   	
      00356E 41 44 43 4F 4E           5 	.ascii "ADCON"
      003573 26 06                    6 	.word power_adc  
      003575                       5014 kword_dict::
      003575                       5015 	_dict_entry,3+F_IFUNC,ABS,abs
      003575 35 6D                    1 	.word LINK 
                           003577     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 232.
Hexadecimal [24-Bits]



      003577                          3 ABS:
      003577 13                       4 	.byte 3+F_IFUNC   	
      003578 41 42 53                 5 	.ascii "ABS"
      00357B 2B 92                    6 	.word abs  
                                   5016 
                                   5017 
                                   5018 
                                   5019 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 233.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;   24 bits integers arithmetic 
                                      3 ;  format in registers A:X 
                                      4 ;    A   bits 31..24  
                                      5 ;    X   bits 23..0 
                                      6 ;  acc24  24 bits accumulator 
                                      7 ;  used in computation 
                                      8 ;  unless otherwise mentionned 
                                      9 ;  hold result. 
                                     10 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     11 
                                     12     .area CODE 
                                     13 
                           000001    14 .if DEBUG 
                                     15 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     16 ;;;    TEST  CODE   ;;;;
                                     17 ;;;;;;;;;;;;;;;;;;;;;;;;
                                     18 
                           002710    19 LOOP_CNT=10000
                           02FFFF    20 VAL1=0x2ffff ; 196607
                           00002A    21 VAL2=0x2a    ; 42  
                           000003    22 VAL3=3 
                           0005FF    23 VAL4=0X5FF   ; 1535 
                           FFFFFFFD    24 VAL5=-3 
                                     25 ; test code
                           000001    26     T=1    ; .word 
                           000003    27     CNTR=3 ; .word 
                           000005    28     A32=5  ; .blkw 2
                           000008    29     VSIZE= 8 
      00357D                         30 test:
      00357D                         31     _vars VSIZE 
      00357D 52 08            [ 2]    1     sub sp,#VSIZE 
      00357F AE 27 10         [ 2]   32     ldw x,#LOOP_CNT
      003582 1F 03            [ 2]   33     ldw (CNTR,sp),x  
      003584 CE 00 0F         [ 2]   34     ldw x,ticks 
      003587 1F 01            [ 2]   35     ldw (T,sp),x
      003589                         36 1$: ; test add24 
      003589 A6 02            [ 1]   37     ld a,#(VAL1>>16)&0XFF
      00358B AE FF FF         [ 2]   38     ldw x,#VAL1&0XFFFF
      00358E C7 00 0C         [ 1]   39     ld acc24,a 
      003591 CF 00 0D         [ 2]   40     ldw acc24+1,x  
      003594 A6 00            [ 1]   41     ld a,#(VAL4>>16)&0XFF
      003596 AE 05 FF         [ 2]   42     ldw x,#(VAL4&0XFFFF)
      003599 CD 01 7E         [ 4]   43     call add24 
      00359C 1E 03            [ 2]   44     ldw x,(CNTR,sp)
      00359E 1D 00 01         [ 2]   45     subw x,#1
      0035A1 1F 03            [ 2]   46     ldw (CNTR,sp),x 
      0035A3 26 E4            [ 1]   47     jrne 1$
      0035A5 CD 18 47         [ 4]   48     call prt_acc24
      0035A8 A6 20            [ 1]   49     ld a,#SPACE 
      0035AA CD 08 FF         [ 4]   50     call putc 
      0035AD CE 00 0F         [ 2]   51     ldw x,ticks 
      0035B0 72 F0 01         [ 2]   52     subw x,(T,sp)
      0035B3 CD 18 30         [ 4]   53     call prt_i16  
      0035B6 A6 0D            [ 1]   54     ld a,#CR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 234.
Hexadecimal [24-Bits]



      0035B8 CD 08 FF         [ 4]   55     call putc
                                     56 
                                     57 ; test mul24     
      0035BB CE 27 10         [ 2]   58     ldw x,LOOP_CNT
      0035BE 1F 03            [ 2]   59     ldw (CNTR,sp),x 
      0035C0 CE 00 0F         [ 2]   60     ldw x,ticks 
      0035C3 1F 01            [ 2]   61     ldw (T,sp),x 
      0035C5                         62 2$: 
      0035C5 A6 02            [ 1]   63     ld a,#(VAL1>>16)&0XFF
      0035C7 AE FF FF         [ 2]   64     ldw x,#VAL1&0XFFFF
      0035CA C7 00 0C         [ 1]   65     ld acc24,a 
      0035CD CF 00 0D         [ 2]   66     ldw acc24+1,x  
      0035D0 A6 00            [ 1]   67     ld a,#(VAL2>>16)&0XFF
      0035D2 AE 00 2A         [ 2]   68     ldw x,#(VAL2&0XFFFF)
      0035D5 CD 02 79         [ 4]   69     call mul24 
      0035D8 1E 03            [ 2]   70     ldw x,(CNTR,sp)
      0035DA 1D 00 01         [ 2]   71     subw x,#1
      0035DD 1F 03            [ 2]   72     ldw (CNTR,sp),x 
      0035DF 26 E4            [ 1]   73     jrne 2$ 
      0035E1 CD 18 47         [ 4]   74    call prt_acc24 
      0035E4 A6 20            [ 1]   75    ld a,#SPACE 
      0035E6 CD 08 FF         [ 4]   76    call putc 
      0035E9 CE 00 0F         [ 2]   77     ldw x,ticks 
      0035EC 72 F0 01         [ 2]   78     subw x,(T,sp)
      0035EF CD 18 30         [ 4]   79     call prt_i16 
      0035F2 A6 0D            [ 1]   80     ld a,#CR 
      0035F4 CD 08 FF         [ 4]   81     call putc 
                                     82 ; test mul24 with overflow     
      0035F7 CE 27 10         [ 2]   83     ldw x,LOOP_CNT
      0035FA 1F 03            [ 2]   84     ldw (CNTR,sp),x 
      0035FC CE 00 0F         [ 2]   85     ldw x,ticks 
      0035FF 1F 01            [ 2]   86     ldw (T,sp),x 
      003601                         87 3$: 
      003601 A6 02            [ 1]   88     ld a,#(VAL1>>16)&0XFF
      003603 AE FF FF         [ 2]   89     ldw x,#VAL1&0XFFFF
      003606 C7 00 0C         [ 1]   90     ld acc24,a 
      003609 CF 00 0D         [ 2]   91     ldw acc24+1,x  
      00360C A6 00            [ 1]   92     ld a,#(VAL4>>16)&0XFF
      00360E AE 05 FF         [ 2]   93     ldw x,#(VAL4&0XFFFF)
      003611 CD 02 79         [ 4]   94     call mul24 
      003614 1E 03            [ 2]   95     ldw x,(CNTR,sp)
      003616 1D 00 01         [ 2]   96     subw x,#1
      003619 1F 03            [ 2]   97     ldw (CNTR,sp),x 
      00361B 26 E4            [ 1]   98     jrne 3$ 
      00361D CD 18 47         [ 4]   99     call prt_acc24    
      003620 A6 20            [ 1]  100     ld a,#SPACE 
      003622 CD 08 FF         [ 4]  101     call putc 
      003625 CE 00 0F         [ 2]  102     ldw x,ticks 
      003628 72 F0 01         [ 2]  103     subw x,(T,sp)
      00362B CD 18 30         [ 4]  104     call prt_i16 
      00362E A6 0D            [ 1]  105     ld a,#CR 
      003630 CD 08 FF         [ 4]  106     call putc 
                                    107 ; test mul24  with negative result   
      003633 CE 27 10         [ 2]  108     ldw x,LOOP_CNT
      003636 1F 03            [ 2]  109     ldw (CNTR,sp),x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 235.
Hexadecimal [24-Bits]



      003638 CE 00 0F         [ 2]  110     ldw x,ticks 
      00363B 1F 01            [ 2]  111     ldw (T,sp),x 
      00363D                        112 4$:
      00363D A6 02            [ 1]  113     ld a,#(VAL1>>16)&0XFF
      00363F AE FF FF         [ 2]  114     ldw x,#VAL1&0XFFFF
      003642 C7 00 0C         [ 1]  115     ld acc24,a 
      003645 CF 00 0D         [ 2]  116     ldw acc24+1,x  
      003648 A6 FF            [ 1]  117     ld a,#(VAL5>>16)&0XFF
      00364A AE FF FD         [ 2]  118     ldw x,#(VAL5&0XFFFF)
      00364D CD 02 79         [ 4]  119     call mul24 
      003650 1E 03            [ 2]  120     ldw x,(CNTR,sp)
      003652 1D 00 01         [ 2]  121     subw x,#1
      003655 1F 03            [ 2]  122     ldw (CNTR,sp),x 
      003657 26 E4            [ 1]  123     jrne 4$ 
      003659 CD 18 47         [ 4]  124     call prt_acc24 
      00365C A6 20            [ 1]  125     ld a,#SPACE 
      00365E CD 08 FF         [ 4]  126     call putc 
      003661 CE 00 0F         [ 2]  127     ldw x,ticks 
      003664 72 F0 01         [ 2]  128     subw x,(T,sp)
      003667 CD 18 30         [ 4]  129     call prt_i16 
      00366A A6 0D            [ 1]  130     ld a,#CR 
      00366C CD 08 FF         [ 4]  131     call putc 
                                    132 ; test abs24 
      00366F CE 27 10         [ 2]  133     ldw x,LOOP_CNT
      003672 1F 03            [ 2]  134     ldw (CNTR,sp),x 
      003674 CE 00 0F         [ 2]  135     ldw x,ticks 
      003677 1F 01            [ 2]  136     ldw (T,sp),x 
      003679                        137 5$: 
      003679 A6 FF            [ 1]  138     ld a,#0xff
      00367B AE FF FF         [ 2]  139     ldw x,#0xffff
      00367E CD 01 F3         [ 4]  140     call abs24 
      003681 C7 00 0C         [ 1]  141     ld acc24,a 
      003684 CF 00 0D         [ 2]  142     ldw acc24+1,x
      003687 1E 03            [ 2]  143     ldw x,(CNTR,sp)
      003689 1D 00 01         [ 2]  144     subw x,#1
      00368C 1F 03            [ 2]  145     ldw (CNTR,sp),x 
      00368E 26 E9            [ 1]  146     jrne 5$ 
      003690 CD 18 47         [ 4]  147     call prt_acc24 
      003693 A6 20            [ 1]  148     ld a,#SPACE 
      003695 CD 08 FF         [ 4]  149     call putc 
      003698 CE 00 0F         [ 2]  150     ldw x,ticks 
      00369B 72 F0 01         [ 2]  151     subw x,(T,sp)
      00369E CD 18 30         [ 4]  152     call prt_i16 
      0036A1                        153 6$:
      0036A1 A6 0D            [ 1]  154     ld a,#CR 
      0036A3 CD 08 FF         [ 4]  155     call putc 
      0036A6 CD 36 EC         [ 4]  156     call read_integer 
      0036A9 55 00 0C 00 18   [ 1]  157     mov farptr,acc24 
      0036AE 55 00 0D 00 19   [ 1]  158     mov farptr+1,acc16 
      0036B3 55 00 0E 00 1A   [ 1]  159     mov farptr+2,acc8 
      0036B8 CD 36 EC         [ 4]  160     call read_integer 
      0036BB C6 00 0C         [ 1]  161     ld a,acc24 
      0036BE CE 00 0D         [ 2]  162     ldw x,acc16 
      0036C1 55 00 18 00 0C   [ 1]  163     mov acc24,farptr 
      0036C6 55 00 19 00 0D   [ 1]  164     mov acc16,farptr+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 236.
Hexadecimal [24-Bits]



      0036CB 55 00 1A 00 0E   [ 1]  165     mov acc8,farptr+2 
      0036D0 CD 03 07         [ 4]  166     call div24 
      0036D3 88               [ 1]  167     push a 
      0036D4 89               [ 2]  168     pushw x 
      0036D5 CD 18 47         [ 4]  169     call prt_acc24 
      0036D8 A6 20            [ 1]  170     ld a,#SPACE 
      0036DA CD 08 FF         [ 4]  171     call putc 
      0036DD 85               [ 2]  172     popw x
      0036DE CF 00 0D         [ 2]  173     ldw acc16,x  
      0036E1 32 00 0C         [ 1]  174     pop acc24 
      0036E4 CD 18 47         [ 4]  175     call prt_acc24
      0036E7 20 B8            [ 2]  176     jra 6$
      0036E9                        177     _drop VSIZE 
      0036E9 5B 08            [ 2]    1     addw sp,#VSIZE 
      0036EB 81               [ 4]  178     ret 
                                    179 
                                    180 
      0036EC                        181 read_integer:
      0036EC A6 3F            [ 1]  182     ld a,#'? 
      0036EE CD 08 FF         [ 4]  183     call putc  
      0036F1 72 5F 00 03      [ 1]  184 	clr count  
      0036F5 CD 0A 61         [ 4]  185 	call readln 
      0036F8 AE 16 90         [ 2]  186 	ldw x,#tib 
      0036FB 3B 00 03         [ 1]  187 	push count
      0036FE 4B 00            [ 1]  188 	push #0 
      003700 72 FB 01         [ 2]  189 	addw x,(1,sp)
      003703 5C               [ 1]  190 	incw x 
      003704                        191 	_drop 2 
      003704 5B 02            [ 2]    1     addw sp,#2 
      003706 72 5F 00 01      [ 1]  192 	clr in 
      00370A CD 0E E2         [ 4]  193 	call get_token
      00370D A1 84            [ 1]  194 	cp a,#TK_INTGR
      00370F 27 0F            [ 1]  195 	jreq 3$ 
      003711 A1 11            [ 1]  196 	cp a,#TK_MINUS
      003713 CD 0E E2         [ 4]  197 	call get_token 
      003716 A1 84            [ 1]  198 	cp a,#TK_INTGR 
      003718 27 03            [ 1]  199 	jreq 2$
      00371A CC 16 84         [ 2]  200 	jp syntax_error
      00371D                        201 2$:
      00371D CD 02 1D         [ 4]  202 	call neg_acc24  	
      003720                        203 3$: 
      003720 81               [ 4]  204     ret 
                                    205 
                                    206 .endif ; DEBUG  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 237.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27     .area CODE 
      003780                         28 	.bndry 128 ; align on FLASH block.
                                     29 ; space for user application  
      003780                         30 app_space::
      003780 00 00                   31 app_sign:  .word 0 ; .ascii "BC"  ; signature 
      003782 00 00                   32 app_size: .word 0 
      003784                         33 app: 
                                     34 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 238.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |     A32     =  000005     |   4 ABS        003577 R
    ABS_IDX =  000000     |     ACK     =  000006     |   4 ADCON      00356D R
    ADCON_ID=  000002     |   4 ADCREAD    003561 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  4 ALLOC      003557 R   |   4 AND        00354F R   |     AND_IDX =  0000FA 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  4 AR_SIGN    0031A7 R   |   4 ASC        003547 R   |     ASC_IDX =  000006 
    ATMP    =  000001     |     ATTRIB  =  000002     |   4 AUTORUN    00353B R
  4 AUTO_RUN   00015C R   |   4 AWU        003533 R   |   4 AWUHandl   000004 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  000008     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000002 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   4 BIT        00352B R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000A 
    BLOCKS  =  000005     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000D     |   4 BRES       003522 R
    BRES_IDX=  00000C     |     BS      =  000008     |   4 BSET       003519 R
    BSET_IDX=  00000E     |     BSIZE   =  000006     |   4 BTEST      00350F R
    BTEST_ID=  000010     |   4 BTOGL      003505 R   |     BTOGL_ID=  000012 
    BTW     =  000001     |   4 BYE        0034FD R   |     BYE_IDX =  000014 
    C       =  000001     |     CAN     =  000018     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CCOMMA  =  000001 
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELL_SIZ=  000003     |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   4 CHAR       0034F4 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 239.
Hexadecimal [24-Bits]

Symbol Table

    CHAR_IDX=  000016     |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    CNTR    =  000003     |     CNT_LO  =  000004     |     CODE_ADD=  000001 
    COMMA   =  00002C     |   4 CONST      0034EA R   |     CONST_ID=  0000B6 
    COUNT   =  000003     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   4 CR1        0034E2 R
    CR1_IDX =  00001A     |   4 CR2        0034DA R   |     CR2_IDX =  000018 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000009     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   4 DATA       0034D1 R
    DATA_IDX=  00001C     |     DC1     =  000011     |     DC2     =  000012 
    DC3     =  000013     |     DC4     =  000014     |   4 DDR        0034C9 R
    DDR_IDX =  00001E     |     DEBUG   =  000001     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   4 DEC        0034C1 R   |     DEC_IDX =  000020 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  4 DIM        0034B9 R   |   4 DIR        0034B1 R   |     DIVISOR =  000001 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   4 DO         0034AA R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |     DO_IDX  =  000022     |   4 DREAD      0034A0 R
    DREAD_ID=  000024     |   4 DROP       003497 R   |   4 DWRITE     00348C R
    DWRITE_I=  000026     |   4 EDIT       003483 R   |     EDIT_IDX=  000028 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 240.
Hexadecimal [24-Bits]

Symbol Table

  4 EEFREE     003478 R   |     EEFREE_I=  0000B8     |   4 EEPROM     00346D R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_I=  00002A 
    EEPROM_S=  000800     |     EM      =  000019     |   4 END        003465 R
    END_IDX =  00002C     |     ENQ     =  000005     |     EOF     =  0000FF 
    EOT     =  000004     |   4 ERASE      00345B R   |   4 ERASED     00294C R
    ERASE_ID=  00002E     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_NO_P=  000012     |     ERR_OVER=  000010     |     ERR_RD_O=  000011 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FBREAK  =  000004     |     FCOMP   =  000005 
  4 FCPU       003452 R   |     FCPU_IDX=  000030     |     FF      =  00000C 
    FHSE    =  7A1200     |     FHSI    =  F42400     |     FIRST   =  000001 
    FIRST_DA=  000006     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
  4 FLASH_ME   001EAB R   |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   4 FOR        00344A R   |     FOR_IDX =  000034 
  4 FREE       003441 R   |     FREE_IDX=  000088     |     FRUN    =  000000 
    FS      =  00001C     |     FSLEEP  =  000003     |     FSTEP   =  000003 
    FTRAP   =  000001     |     F_AND   =  000080     |     F_CFUNC =  000020 
    F_CMD   =  000000     |     F_CONST =  000030     |     F_IFUNC =  000010 
    F_NOT   =  000070     |     F_OR    =  000090     |     F_XOR   =  0000A0 
  4 GET        003439 R   |     GET_IDX =  0000B4     |   4 GOSUB      00342F R
    GOSUB_ID=  000036     |   4 GOTO       003426 R   |     GOTO_IDX=  000038 
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |     GS      =  00001D     |   4 HEX        00341E R
    HEX_IDX =  00003A     |     HOME    =  000082     |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 241.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  4 IDR        003416 R   |     IDR_IDX =  00003C     |   4 IF         00340F R
    IF_IDX  =  00003E     |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   4 INPUT      003405 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_ID=  000040 
    INPUT_PU=  000001     |     INT24   =  000005     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
    INW     =  00000B     |     IPOS    =  000001     |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |   4 IWDGEN     0033FA R   |     IWDGEN_I=  000042 
  4 IWDGREF    0033EE R   |     IWDGREF_=  000044     |     IWDG_KEY=  000055 
    IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |     KCHAR   =  000002 
  4 KEY        0033E6 R   |     KEY_END =  000083     |     KEY_IDX =  000046 
    KW_TYPE_=  0000F0     |     LAST    =  000003     |     LB      =  000002 
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
    LEN     =  000002     |   4 LET        0033DE R   |     LET_IDX =  000048 
    LF      =  00000A     |     LIMIT   =  000001     |     LINENO  =  000005 
  4 LINK    =  003577 R   |   4 LIST       0033D5 R   |     LIST_IDX=  00004A 
    LL      =  000001     |     LLEN    =  000002     |     LL_HB   =  000001 
    LN_PTR  =  000005     |   4 LOG2       0033CC R   |     LOG_IDX =  00004C 
    LOOP_CNT=  002710     |   4 LSHIFT     0033C1 R   |     LSHIFT_I=  00004E 
    MAJOR   =  000002     |     MASK    =  000002     |     MAX_LINE=  007FFF 
    MINOR   =  000000     |     MULOP   =  000001     |     N1      =  000005 
    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000001 
    NAME_MAX=  00000F     |     NCLKOPT =  004808     |     NEG     =  000001 
  4 NEW        0033B9 R   |     NEW_IDX =  000052     |   4 NEXT       0033B0 R
    NEXT_IDX=  000050     |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 242.
Hexadecimal [24-Bits]

Symbol Table

    NLEN    =  000001     |     NLEN_MAS=  00000F     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   4 NOT        0033A8 R   |     NOT_IDX =  0000F8 
    NOT_OP  =  000001     |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   4 NonHandl   000000 R   |   4 ODR        0033A0 R
    ODR_IDX =  000054     |   4 ON         003399 R   |     ONOFF   =  000003 
    ON_IDX  =  0000B2     |     OP      =  000002     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  4 OR         003392 R   |     OR_IDX  =  0000FC     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVRWR   =  000004     |     PA      =  000000 
  4 PAD        00338A R   |     PAD_IDX =  000056     |     PAD_SIZE=  000080 
  4 PAUSE      003380 R   |     PAUSE_ID=  000058     |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  4 PEEK       003377 R   |     PEEK_IDX=  00005C     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PG_SIZE =  000001     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   4 PICK       00336E R   |     PINNO   =  000001 
  4 PINP       003365 R   |     PINP_IDX=  00005E     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  4 PMODE      00335B R   |     PMODE_ID=  00005A     |   4 POKE       003352 R
    POKE_IDX=  000060     |   4 POP        00334A R   |   4 PORTA      00332D R
  4 PORTB      003323 R   |   4 PORTC      003319 R   |   4 PORTD      00330F R
  4 PORTE      003305 R   |   4 PORTF      0032FB R   |   4 PORTG      0032F1 R
  4 PORTI      0032E7 R   |   4 POUT       003341 R   |     POUT_IDX=  000062 
    PREV    =  000001     |     PRG_SIZE=  000003     |   4 PRINT      003337 R
    PROD    =  000001     |     PROD_SIG=  000004     |   4 PROG_ADD   001E81 R
  4 PROG_SIZ   001E93 R   |     PRTA_IDX=  000066     |     PRTB_IDX=  000068 
    PRTC_IDX=  00006A     |     PRTD_IDX=  00006C     |     PRTE_IDX=  00006E 
    PRTF_IDX=  000070     |     PRTG_IDX=  000072     |     PRTI_IDX=  000074 
    PRT_IDX =  000064     |     PSIZE   =  00000B     |     PSTR    =  000003 
  4 PUSH       0032DE R   |   4 PUT        0032D6 R   |   4 QKEY       0032CD R
    QKEY_IDX=  000076     |     QSIGN   =  000005     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |   4 RAM_MEM    001EBC R   |     RAM_SIZE=  001800 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 243.
Hexadecimal [24-Bits]

Symbol Table

    RBT_IDX =  00007A     |   4 READ       0032C4 R   |     READ_IDX=  000078 
  4 REBOOT     0032B9 R   |     RECLEN  =  000005     |     REC_LEN =  000003 
    REC_XTRA=  000005     |   4 REG_A      0004DA R   |   4 REG_CC     0004DE R
  4 REG_PC     0004CE R   |   4 REG_SP     0004E3 R   |   4 REG_X      0004D6 R
  4 REG_Y      0004D2 R   |     RELOP   =  000001     |   4 REM        0032B1 R
    REM_IDX =  00007C     |   4 RESTORE    0032A5 R   |     REST_IDX=  00007E 
    RETL1   =  000001     |   4 RETURN     00329A R   |     RET_ADDR=  000001 
    RET_BPTR=  000003     |     RET_IDX =  000080     |     RET_INW =  000005 
  4 RND        003292 R   |     RND_IDX =  000082     |     RONLY   =  000005 
    ROP     =  004800     |     RS      =  00001E     |   4 RSHIFT     003287 R
    RSHIFT_I=  000084     |     RSIGN   =  000006     |     RST_SR  =  0050B3 
  4 RUN        00327F R   |     RUN_IDX =  000086     |     RXCHAR  =  000001 
    RX_QUEUE=  000008     |     R_A     =  000001     |     R_CC    =  000009 
    R_PC    =  00000A     |     R_X     =  000002     |     R_Y     =  000004 
  4 SAVE       003276 R   |     SAVE_IDX=  000032     |     SAV_ACC1=  000006 
    SAV_ACC2=  000008     |     SAV_COUN=  00000A     |     SAV_IN  =  000009 
    SEPARATE=  000000     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |     SI      =  00000F     |     SIGN    =  000001 
  4 SIGNATUR   00294A R   |   4 SIZE       00326D R   |     SIZE_IDX=  0000B0 
    SKIP    =  000005     |   4 SLEEP      003263 R   |     SLEEP_ID=  00008A 
    SO      =  00000E     |     SOH     =  000001     |     SPACE   =  000020 
  4 SPIEN      003259 R   |     SPIEN_ID=  00008E     |   4 SPIRD      00324F R
    SPIRD_ID=  00008C     |   4 SPISEL     003244 R   |     SPISEL_I=  000090 
  4 SPIWR      00323A R   |     SPIWR_ID=  000092     |     SPI_CR1 =  005200 
    SPI_CR1_=  000003     |     SPI_CR1_=  000000     |     SPI_CR1_=  000001 
    SPI_CR1_=  000007     |     SPI_CR1_=  000002     |     SPI_CR1_=  000006 
    SPI_CR2 =  005201     |     SPI_CR2_=  000007     |     SPI_CR2_=  000006 
    SPI_CR2_=  000005     |     SPI_CR2_=  000004     |     SPI_CR2_=  000002 
    SPI_CR2_=  000000     |     SPI_CR2_=  000001     |     SPI_CRCP=  005205 
    SPI_CS_B=  000005     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  00008C     |   4 STATES     000491 R   |   4 STEP       003231 R
    STEP_IDX=  000094     |   4 STOP       003228 R   |     STOP_IDX=  000096 
    STR     =  000003     |   4 STR_BYTE   001EA4 R   |     STX     =  000002 
    SUB     =  00001A     |     SUP     =  000084     |     SWIM_CSR=  007F80 
    SYN     =  000016     |   4 SysCall    000012 R   |     T       =  000001 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   4 TICKS      00321E R   |     TICKS_ID=  000098 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 244.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 245.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   4 TIMEOUT    003212 R   |   4 TIMER      003208 R
    TIMER_ID=  00009A     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_AND  =  000088     |     TK_ARRAY=  000005     |     TK_CFUNC=  000082 
    TK_CHAR =  000004     |     TK_CMD  =  000080     |     TK_COLON=  00000A 
    TK_COMMA=  000008     |     TK_CONST=  000083     |     TK_DIV  =  000021 
    TK_EQUAL=  000032     |     TK_FLOAT=  000086     |     TK_GE   =  000033 
    TK_GRP_A=  000010     |     TK_GRP_M=  000030     |     TK_GRP_M=  000000 
    TK_GRP_M=  000020     |     TK_GRP_R=  000030     |     TK_GT   =  000031 
    TK_IFUNC=  000081     |     TK_INTGR=  000084     |     TK_LABEL=  000003 
    TK_LE   =  000036     |     TK_LPARE=  000006     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_NOT  =  000087 
    TK_OR   =  000089     |     TK_PLUS =  000010     |     TK_QSTR =  000002 
    TK_RPARE=  000007     |     TK_SHARP=  000009     |     TK_VAR  =  000085 
    TK_XOR  =  00008A     |     TMROUT_I=  00009C     |   4 TO         003201 R
  4 TONE       0031F8 R   |     TONE_IDX=  0000A0     |     TOWRITE =  000005 
    TO_IDX  =  00009E     |   4 Timer4Up   000013 R   |     U8      =  000001 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 246.
Hexadecimal [24-Bits]

Symbol Table

    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  4 UBOUND     0031ED R   |     UBOUND_I=  0000A2     |   4 UBTN_Han   00005A R
  4 UFLASH     0031E2 R   |     UFLASH_I=  0000A4     |   4 UNTIL      0031D8 R
    UNTIL_ID=  0000A6     |     US      =  00001F     |   4 USER_ABO   000062 R
  4 USR        0031D0 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000A8     |   4 Uart1RxH   00087C R
  4 UserButt   000036 R   |     VAL1    =  02FFFF     |     VAL2    =  00002A 
    VAL3    =  000003     |     VAL4    =  0005FF     |     VAL5    =  FFFFFFFD 
    VAR_NAME=  000001     |     VSIZE   =  000008     |     VT      =  00000B 
  4 WAIT       0031C7 R   |     WAIT_IDX=  0000AA     |     WCNT    =  000003 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |     WLKPTR  =  000003     |   4 WORDS      0031BD R
    WORDS_ID=  0000AC     |   4 WRITE      0031B3 R   |     WRITE_ID=  0000AE 
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XFIRST  =  000001 
    XMASK   =  000001     |     XOFF    =  000013     |     XON     =  000011 
  4 XOR        0031AB R   |     XOR_IDX =  0000FE     |     XSAVE   =  000002 
    XSTACK_E=  001773     |     XSTACK_S=  000014     |     XTEMP   =  000001 
    YSAVE   =  000004     |     YTEMP   =  000005     |   4 abs        002B92 R
  4 abs24      0001F3 R   |   5 acc16      00000D GR  |   5 acc24      00000C GR
  5 acc32      00000B GR  |   5 acc8       00000E GR  |   4 accept_c   000BC7 R
  4 add24      00017E R   |   4 add_char   001332 R   |   4 add_spac   00112A R
  4 analog_r   002656 R   |   4 and_cond   001BBB R   |   4 and_fact   001B8B R
  4 app        003784 R   |   4 app_sign   003780 R   |   4 app_size   003782 R
  4 app_spac   003780 GR  |   4 arduino_   002C7F R   |   4 arg_list   0019B0 R
  5 array_si   000020 R   |   4 ascii      002A3D R   |   4 at_tst     000F9C R
  4 atoi24     0018D2 GR  |   4 atoi_exi   001941 R   |   4 awu        002B39 R
  4 awu02      002B4C R   |   4 bad_port   002AB8 R   |   5 base       00000A GR
  5 basicptr   000004 GR  |   4 beep       0025CD R   |   4 beep_1kh   0025A0 GR
  4 bin_exit   000E03 R   |   4 bit_rese   002166 R   |   4 bit_set    002144 R
  4 bit_test   0021AB R   |   4 bit_togg   002189 R   |   4 bitmask    002E36 R
  4 bkslsh_t   000F49 R   |   4 bksp       000966 R   |   2 block_bu   0016E0 GR
  4 block_er   000765 R   |   4 break_po   002742 R   |   4 bye        002B05 R
  4 clear_au   0008B3 R   |   4 clear_ba   00149E R   |   4 clear_bl   002857 R
  4 clear_va   0013F6 R   |   4 clock_in   00007D R   |   4 cmd_auto   003155 R
  4 cmd_cons   001D90 R   |   4 cmd_dim    001DA4 R   |   4 cmd_dim1   001DAE R
  4 cmd_dim2   001DB4 R   |   4 cmd_dir    002971 R   |   4 cmd_end    00256C R
  4 cmd_get    002573 R   |   4 cmd_itf    0004FE R   |   4 cmd_line   001713 R
  4 cmd_name   001352 R   |   4 cmd_on     0023E0 R   |   4 cmd_save   0028AF R
  4 cmd_size   001C94 R   |   4 cold_sta   0000B5 R   |   4 colon_ts   000F70 R
  4 comma_ts   000F7B R   |   4 comp_msg   001663 R   |   4 compile    001096 GR
  4 conditio   001C0D R   |   4 const_cr   002ED9 R   |   4 const_cr   002EDE R
  4 const_dd   002ED4 R   |   4 const_ee   002EED R   |   4 const_id   002ECF R
  4 const_in   002EE8 R   |   4 const_od   002ECA R   |   4 const_ou   002EE3 R
  4 const_po   002EA2 R   |   4 const_po   002EA7 R   |   4 const_po   002EAC R
  4 const_po   002EB1 R   |   4 const_po   002EB6 R   |   4 const_po   002EBB R
  4 const_po   002EC0 R   |   4 const_po   002EC5 R   |   4 convert_   000D73 R
  4 convert_   00092A R   |   4 copy_com   000FD1 R   |   5 count      000003 GR
  4 cp24       0001B8 R   |   4 cp24_ax    0001EA R   |   4 cp_loop    001961 R
  4 cpl24      0001FA R   |   4 cpy_cmd_   001112 R   |   4 cpy_quot   001152 R
  4 create_g   000C9D R   |   4 cs_high    00306F R   |   4 dash_tst   000F91 R
  4 data       002EF2 R   |   4 data_err   002F6B R   |   5 data_len   000009 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 247.
Hexadecimal [24-Bits]

Symbol Table

  5 data_ofs   000008 R   |   5 data_ptr   000006 R   |   4 dec_base   001C86 R
  4 decomp_l   0011EA R   |   4 decompil   0011A2 GR  |   4 del_line   000C70 R
  4 delete_l   000A53 R   |   4 delete_n   000976 R   |   4 delete_u   000A18 R
  4 digital_   002692 R   |   4 digital_   0026C9 R   |   4 div24      000307 R
  4 divu24_8   0002E9 R   |   4 do_loop    002E5C R   |   4 do_progr   000758 R
  4 dup24      00016F R   |   5 dvar_bgn   000030 GR  |   5 dvar_end   000032 GR
  4 edit       001F54 R   |   4 enable_i   002DC6 R   |   4 eql_tst    00101C R
  4 equal      001345 R   |   4 eras0      0027C7 R   |   4 erase      0027BD R
  4 erase_ex   000789 R   |   4 erase_fl   00077F R   |   4 erase_he   002895 R
  4 erase_pr   00276A R   |   4 err_bad_   00158C R   |   4 err_buf_   001602 R
  4 err_cmd_   001550 R   |   4 err_div0   001515 R   |   4 err_dupl   00156A R
  4 err_math   0014FC R   |   4 err_mem_   0014E1 R   |   4 err_msg    0014BB R
  4 err_no_a   001598 R   |   4 err_no_d   0015CB R   |   4 err_no_f   0015EF R
  4 err_no_l   001524 R   |   4 err_no_p   0015DB R   |   4 err_not_   00157B R
  4 err_not_   001635 R   |   4 err_over   00160F R   |   4 err_read   001619 R
  4 err_run_   00153A R   |   4 err_synt   0014EE R   |   4 escaped    000D88 GR
  4 expect     00199E R   |   4 expressi   001AF4 R   |   4 factor     0019FC R
  5 farptr     000018 R   |   4 fcpu       002C01 R   |   4 fetchc     000605 R
  4 fill_wri   002847 R   |   4 final_te   000BC0 R   |   4 first_li   001EFE R
  5 flags      000022 GR  |   4 for        002241 R   |   4 free       001C8B R
  5 free_eep   000024 R   |   7 free_ram   000090 R   |   4 func_arg   0019AB R
  4 func_cha   002A26 R   |   4 func_eef   001D20 R   |   4 ge         001347 R
  4 get_addr   001810 R   |   4 get_arra   0019CC R   |   4 get_char   00182A R
  4 get_esca   000936 R   |   4 get_int2   00181A R   |   4 get_targ   00236E R
  4 get_targ   00237C R   |   4 get_tick   002B8B R   |   4 get_toke   000EE2 GR
  4 get_valu   001D0F R   |   4 getc       00090F GR  |   4 gosub      00248C R
  4 gosub_1    002497 R   |   4 gosub_2    00249D R   |   4 goto       002472 R
  4 goto_1     00247C R   |   4 gpio       002A8D R   |   4 gt         001343 R
  4 gt_tst     001027 R   |   4 hex_base   001C81 R   |   4 hex_dump   000645 R
  4 if         002224 R   |   5 in         000001 GR  |   5 in.saved   000002 GR
  5 in.w       000000 GR  |   4 incr_far   000860 R   |   4 input_ex   0020FC R
  4 input_lo   002066 R   |   4 input_va   002062 R   |   4 insert_c   0009D5 R
  4 insert_l   000CC9 R   |   4 insert_l   000D38 R   |   4 interp_l   001754 R
  4 interpre   00172F R   |   4 invalid    00056D R   |   4 invalid_   0005DB R
  4 is_alnum   000E36 GR  |   4 is_alpha   000E1C GR  |   4 is_data_   002EF8 R
  4 is_digit   000E2D GR  |   4 is_erase   00294E R   |   4 is_progr   0024CD R
  4 is_symbo   000E3F R   |   4 itoa       00186D GR  |   4 itoa_loo   00188F R
  4 jp_to_ta   00247F R   |   4 key        002A7C R   |   4 kword_di   003575 GR
  4 kword_en   0031A9 R   |   4 le         00134C R   |   4 ledoff     0003CD R
  4 ledon      0003C8 R   |   4 ledtoggl   0003D2 R   |   4 left_par   0003DB R
  4 let        001CCC GR  |   4 let_arra   001CDA R   |   4 let_dvar   00178D R
  4 let_eval   001CE2 R   |   4 let_var    001CDF R   |   4 lines_sk   001F01 R
  4 list       001ECB R   |   4 list_exi   001F43 R   |   4 list_loo   001F21 R
  4 log2       002E09 R   |   4 look_tar   00239F R   |   4 loop_bac   002351 R
  5 loop_dep   00001F R   |   4 loop_don   002366 R   |   4 lshift     002BA9 R
  4 lt         00134A R   |   4 lt_tst     001050 R   |   4 mem_peek   000589 R
  4 mod24      0003A1 R   |   4 move       0013B2 GR  |   4 move_dow   0013D1 R
  4 move_era   0006E7 R   |   4 move_exi   0013F2 R   |   4 move_lef   0009AD R
  4 move_loo   0013D6 R   |   4 move_prg   000727 R   |   4 move_rig   0009BB R
  4 move_up    0013C3 R   |   4 mul24      000279 R   |   4 mul_char   001334 R
  4 mulu24_8   00023A R   |   4 nbr_tst    000F15 R   |   4 ne         00134F R
  4 neg24      000203 R   |   4 neg_acc2   00021D R   |   4 neg_ax     000215 R
  4 new        002760 R   |   4 next       0022F9 R   |   4 next_lin   001737 R
  4 next_tok   0017E8 GR  |   4 no_match   001973 R   |   4 number     00060B R
  4 other      001079 R   |   4 overwrit   000BEC R   |   2 pad        0016E0 GR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 248.
Hexadecimal [24-Bits]

Symbol Table

  4 pad_ref    003074 R   |   4 parse_ad   0004E8 R   |   4 parse_bi   000DE1 R
  4 parse_in   000D90 R   |   4 parse_ke   000E62 R   |   4 parse_qu   000D3B R
  4 parse_sy   000E4A R   |   4 pause      002B19 R   |   4 pause02    002B2C R
  4 peek       002203 R   |   4 peek_byt   0005A5 R   |   4 pin_mode   002C10 R
  4 plus_tst   000FF0 R   |   4 poke       0021E2 R   |   4 power_ad   002606 R
  4 prcnt_ts   001011 R   |   4 print      001FB9 R   |   4 print_fa   0005EA R
  4 print_he   000C23 GR  |   4 print_re   000427 R   |   4 print_st   00057D R
  4 print_to   001855 R   |   4 prog_siz   001E3A R   |   4 program_   001E42 R
  4 program_   000701 R   |   4 program_   000727 R   |   4 prt_acc2   001847 R
  4 prt_basi   001F95 R   |   4 prt_i16    001830 R   |   4 prt_loop   001FBD R
  4 prt_peek   0003AA GR  |   4 prt_reg1   000408 R   |   4 prt_reg8   0003E6 R
  5 ptr16      000019 GR  |   5 ptr8       00001A R   |   4 putc       0008FF GR
  4 puts       00095C GR  |   4 qgetc      000908 GR  |   4 qkey       002A80 GR
  4 qmark_ts   000FA7 R   |   4 qsign      00283C R   |   4 random     002C9F R
  4 read       002F70 R   |   4 read01     002F75 R   |   4 read_int   0036EC R
  4 readln     000A61 GR  |   4 readln_l   000A70 R   |   4 readln_q   000C09 R
  4 refresh_   002E04 R   |   4 relation   001B2C R   |   4 relop_st   001337 R
  4 remark     002101 GR  |   4 repl       000527 R   |   4 repl_exi   00054F R
  4 reset_co   001FBB R   |   4 rest_con   002052 R   |   4 restore    002F06 R
  4 return     0024B0 R   |   4 right_al   001140 GR  |   4 row_alig   000845 R
  4 row_eras   0006BA R   |   4 row_eras   0006E7 R   |   4 row_loop   000628 R
  4 rparnt_t   000F65 R   |   4 rshift     002BD5 R   |   7 rsign      00008C R
  7 rsize      00008E R   |   4 rt_msg     001651 R   |   4 run        0024DE R
  4 run_app    00012A R   |   4 run_it     002539 R   |   4 run_it_0   00253B R
  5 rx1_head   00002E R   |   5 rx1_queu   000026 R   |   5 rx1_tail   00002F R
  4 save_con   002042 R   |   4 scan_blo   00086E R   |   4 search_d   001953 GR
  4 search_e   00199B R   |   4 search_f   00286B R   |   4 search_l   000C45 GR
  4 search_l   000C54 R   |   4 search_n   001D49 R   |   4 search_n   001957 R
  5 seedx      000014 R   |   5 seedy      000016 R   |   4 select_p   002C6F R
  4 send_esc   000984 R   |   4 send_par   00098F R   |   4 set_data   002F3C R
  4 set_time   002DA4 R   |   4 sharp_ts   000F86 R   |   4 show_row   000616 R
  4 single_c   00132D R   |   4 skip       000ECF R   |   4 skip_str   001801 R
  4 skip_to_   002959 R   |   4 slash_ts   001006 R   |   4 sleep      002B0E R
  4 software   001405 R   |   4 spaces     0009C9 GR  |   4 spi_clea   003009 R
  4 spi_disa   002FF1 R   |   4 spi_enab   002FBE R   |   4 spi_rcv_   00302B R
  4 spi_read   003056 R   |   4 spi_sele   00305D R   |   4 spi_send   003015 R
  4 spi_writ   003036 R   |   2 stack_fu   00179C GR  |   2 stack_un   001828 R
  4 star_tst   000FFB R   |   4 step       0022B7 R   |   4 stop       002714 R
  4 store_lo   0022E6 R   |   4 str_matc   001980 R   |   4 str_tst    000F05 R
  4 strcmp     001391 R   |   4 strcpy     0013A2 GR  |   4 strlen     001386 GR
  4 sub24      00019B R   |   4 symb_loo   000E4B R   |   4 syntax_e   001684 GR
  4 system_i   00144B R   |   5 tab_widt   000023 GR  |   4 tb_error   001686 GR
  4 term       001AB1 R   |   4 term01     001AB9 R   |   4 term_exi   001AF1 R
  4 test       00357D R   |   4 test_p     000575 R   |   2 tib        001690 GR
  4 tick_tst   000FBF R   |   5 ticks      00000F R   |   4 timeout    002DBB R
  5 timer      000012 GR  |   4 timer2_i   000093 R   |   4 timer4_i   0000A0 R
  4 tk_id      001674 R   |   4 to         002271 R   |   4 to_eepro   000750 R
  4 to_flash   000755 R   |   4 to_hex_c   000C3A GR  |   4 to_upper   0018C6 GR
  4 token_ch   00108F R   |   4 token_ex   001093 R   |   4 tone       0025AB R
  4 try_next   002F49 R   |   5 txtbgn     00001B GR  |   5 txtend     00001D GR
  4 uart1_ge   00090F GR  |   4 uart1_in   0008BA R   |   4 uart1_pu   0008FF GR
  4 uart1_qg   000908 GR  |   4 uart1_se   0008CA R   |   4 ubound     001CC1 R
  4 uflash     002ABD R   |   4 unlock_e   000684 R   |   4 unlock_f   00069F R
  4 until      002E6F R   |   4 user_int   000049 R   |   4 usr        002ADF R
  4 var_name   001198 GR  |   5 vars       000034 GR  |   4 wait       002107 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 249.
Hexadecimal [24-Bits]

Symbol Table

  4 warm_ini   00147C R   |   4 warm_sta   001710 R   |   4 words      002D3A R
  4 words_co   002D8E R   |   4 write      0029BD R   |   4 write_bl   00080A GR
  4 write_bu   000741 R   |   4 write_by   00078B R   |   4 write_ee   0007C7 R
  4 write_ex   000800 R   |   4 write_fl   0007B1 R   |   4 write_nb   00082F R
  4 xalloc     003087 R   |   4 xdrop      0030BD R   |   4 xpick      00313B R
  4 xpop       00307D R   |   4 xpush      003079 R   |   4 xput       003108 R
  4 xstack_b   0030EA R   |   2 xstack_f   001760 GR  |   2 xstack_u   00179C GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 250.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 SSEG       size      0   flags    8
   2 SSEG0      size    198   flags    8
   3 HOME       size     80   flags    0
   4 CODE       size   3784   flags    0
   5 DATA       size     82   flags    0
   6 BTXT       size      0   flags    8
   7 BTXT1      size      4   flags    8

