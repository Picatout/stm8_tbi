ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------
                                     20 ;   Implementation of Tiny BASIC
                                     21 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     22 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     23 ;   DATE: 2019-12-17
                                     24 ;
                                     25 ;--------------------------------------------------
                                     26 
                                     27     .module STM8_TBI
                                     28 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                            .macro _led2_on 
                                        
                                            .macro _led2_off 
                                        
                                            .macro _led2_toggle 
                                             
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                        
                                        
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                                
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; extracted except if it was end of line 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                        	.include "cmd_index.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of PABasic 
                                        ;
                                        ;     PABasic is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     PABasic is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        
                                        ;---------------------------------------
                                        ; BASIC command and functions indexes
                                        ; for addressing 'code_addr' table
                                        ;--------------------------------------
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                     36     .list 
                                     37 
                                     38 ;_dbg 
                                     39 
                                     40 ;--------------------------------------
                                     41     .area DATA 
                                     42 ;--------------------------------------	
                                     43 
                                     44 
      000000                         45 in.w::  .blkb 1 ; parser position in text line high-byte 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      000001                         46 in::    .blkb 1 ; low byte of in.w 
      000002                         47 in.saved:: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         48 count:: .blkb 1 ; current BASIC line length and tib text length  
      000004                         49 basicptr::  .blkb 2  ; point to current BASIC line address.
      000006                         50 data_ptr:  .blkw 1  ; point to DATA address
      000008                         51 data_ofs:  .blkb 1  ; index to next data item 
      000009                         52 data_len:  .blkb 1  ; length of data line 
      00000A                         53 base::  .blkb 1 ; nemeric base used to print integer 
      00000B                         54 acc24:: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         55 acc16:: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         56 acc8::  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         57 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         58 timer:: .blkw 1 ;  milliseconds count down timer 
      000012                         59 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         60 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         61 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         62 ptr16::  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         63 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         64 txtbgn:: .blkw 1 ; tokenized BASIC text beginning address 
      00001B                         65 txtend:: .blkw 1 ; tokenized BASIC text end address 
      00001D                         66 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      00001E                         67 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000020                         68 flags:: .blkb 1 ; various boolean flags
      000021                         69 tab_width:: .blkb 1 ; print colon width (default 6)
      000022                         70 rx1_queue: .ds RX_QUEUE_SIZE ; UART1 receive circular queue 
      00002A                         71 rx1_head:  .blkb 1 ; rx1_queue head pointer
      00002B                         72 rx1_tail:   .blkb 1 ; rx1_queue tail pointer  
                                     73 
      00002C                         74 vars:: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     75 ; keep 'free_ram' as last variable 
                                     76 ; basic code compiled here. 
      000060                         77 	.bndry 16
      000060                         78 rsign: .blkw 1 ; "BC" 
      000062                         79 rsize: .blkw 1 ; code size 	 
      000064                         80 free_ram: ; from here RAM free for BASIC text 
                                     81 
                                     82 ;;-----------------------------------
                                     83     .area SSEG (ABS)
                                     84 ;; working buffers and stack at end of RAM. 	
                                     85 ;;-----------------------------------
      001690                         86     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         87 tib:: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         88 pad:: .ds PAD_SIZE             ; working buffer
      001760                         89 stack_full:: .ds STACK_SIZE   ; control stack 
      001800                         90 stack_unf: ; stack underflow ; control_stack bottom 
                                     91 
                                     92 ;;--------------------------------------
                                     93     .area HOME 
                                     94 ;; interrupt vector table at 0x8000
                                     95 ;;--------------------------------------
      000000 82 00 04 7E             96     int cold_start			; RESET vector 
                           000000    97 .if DEBUG
                                     98 	int TrapHandler 		;TRAP  software interrupt
                           000001    99 .else
      000004 82 00 00 00            100 	int NonHandledInterrupt ;TRAP  software interrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                    101 .endif
      000008 82 00 00 00            102 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            103 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            104 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            105 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            106 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            107 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            108 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 55            109 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            110 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            111 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            112 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            113 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            114 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            115 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            116 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            117 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            118 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            119 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            120 	int Uart1RxHandler		;int18 UART1 RX full ; default user communication channel.
      000054 82 00 00 00            121 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            122 	int NonHandledInterrupt ;int20 UART3 TX completed
      00005C 82 00 00 00            123 	int NonHandledInterrupt ;int21 UART3 RX full
      000060 82 00 00 00            124 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 40            125 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
      000068 82 00 00 00            126 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            127 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            128 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            129 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            130 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            131 	int NonHandledInterrupt ;int29  not used
                                    132 
                                    133 ;---------------------------------------
                                    134     .area CODE
                                    135 ;---------------------------------------
                           000000   136 .if DEBUG
                                    137 .asciz "STM8_TBI" ; I like to put module name here.
                                    138 .endif 
                                    139 
                                    140 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    141 ; non handled interrupt 
                                    142 ; reset MCU
                                    143 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        144 NonHandledInterrupt:
      000000 71                     145     .byte 0x71  ; invalid opcode reinitialize MCU
                                    146 
                                    147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    148 ; auto wakeup from halt
                                    149 ; at iret, program continue 
                                    150 ; after hatl instruction
                                    151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        152 AWUHandler:
      000001 72 19 50 F0      [ 1]  153 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  154 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  155 	clr AWU_TBR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      00000E 80               [11]  156 	iret
                                    157 
                                    158 ;--------------------------
                                    159 ; UART1 receive character
                                    160 ; CTRL-C (ASCII 3)
                                    161 ; cancel program execution
                                    162 ; and fall back to command line
                                    163 ;--------------------------
      00000F                        164 Uart1RxHandler: ; console receive char 
      00000F 72 0B 52 30 2B   [ 2]  165 	btjf UART1_SR,#UART_SR_RXNE,5$
      000014 C6 52 31         [ 1]  166 	ld a,UART1_DR 
      000017 A1 03            [ 1]  167 	cp a,#CTRL_C 
      000019 26 06            [ 1]  168 	jrne 2$
      00001B CD 02 C1         [ 4]  169 	call putc 
      00001E CC 00 68         [ 2]  170 	jp user_interrupted
      000021                        171 2$:
      000021 A1 18            [ 1]  172 	cp a,#CAN ; CTRL_X 
      000023 26 03            [ 1]  173 	jrne 3$
      000025 CC 04 7E         [ 2]  174 	jp cold_start 	
      000028 AE 00 22         [ 2]  175 3$:	ldw x,#rx1_queue  
      00002B 88               [ 1]  176 	push a 
      00002C 9F               [ 1]  177 	ld a,xl 
      00002D CB 00 2B         [ 1]  178 	add a,rx1_tail 
      000030 97               [ 1]  179 	ld xl,a
      000031 84               [ 1]  180 	pop a  
      000032 F7               [ 1]  181 	ld (x),a
      000033 72 5C 00 2B      [ 1]  182 	inc rx1_tail 
      000037 A6 07            [ 1]  183 	ld a,#RX_QUEUE_SIZE-1
      000039 C4 00 2B         [ 1]  184 	and a,rx1_tail 
      00003C C7 00 2B         [ 1]  185 	ld rx1_tail,a  
      00003F                        186 5$:
      00003F 80               [11]  187 	iret 
                                    188 
                                    189 ;------------------------------------
                                    190 ; software interrupt handler  
                                    191 ;------------------------------------
                           000000   192 .if DEBUG 
                                    193 TrapHandler:
                                    194 	bset flags,#FTRAP 
                                    195 	call print_registers
                                    196 	call cmd_itf
                                    197 	bres flags,#FTRAP 	
                                    198 	iret
                                    199 .endif 
                                    200 
                                    201 ;------------------------------
                                    202 ; TIMER 4 is used to maintain 
                                    203 ; a milliseconds 'ticks' counter
                                    204 ; and decrement 'timer' varaiable
                                    205 ;--------------------------------
      000040                        206 Timer4UpdateHandler:
      000040 72 5F 53 42      [ 1]  207 	clr TIM4_SR 
      000044 CE 00 0E         [ 2]  208 	ldw x,ticks
      000047 5C               [ 1]  209 	incw x
      000048 CF 00 0E         [ 2]  210 	ldw ticks,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      00004B CE 00 10         [ 2]  211 	ldw x,timer
                                    212 ;	tnzw x 
      00004E 27 04            [ 1]  213 	jreq 1$
      000050 5A               [ 2]  214 	decw x 
      000051 CF 00 10         [ 2]  215 	ldw timer,x 
      000054                        216 1$:	
      000054 80               [11]  217 	iret 
                                    218 
                                    219 
                                    220 ;------------------------------------
                                    221 ; Triggered by pressing USER UserButton 
                                    222 ; on NUCLEO card.
                                    223 ; This is used to abort a progam lock 
                                    224 ; in infinite loop. 
                                    225 ;------------------------------------
      000055                        226 UserButtonHandler:
                                    227 ; wait button release
      000055 5F               [ 1]  228 	clrw x
      000056 5A               [ 2]  229 1$: decw x 
      000057 26 FD            [ 1]  230 	jrne 1$
      000059 72 09 50 15 F8   [ 2]  231 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    232 ; if MCU suspended by SLEEP resume program
      00005E 72 07 00 20 05   [ 2]  233     btjf flags,#FSLEEP,2$
      000063 72 17 00 20      [ 1]  234 	bres flags,#FSLEEP 
      000067 80               [11]  235 	iret
      000068                        236 2$:	
      000068                        237 user_interrupted:
      000068 72 00 00 20 02   [ 2]  238     btjt flags,#FRUN,4$
      00006D 20 0A            [ 2]  239 	jra UBTN_Handler_exit 
      00006F                        240 4$:	; program interrupted by user 
      00006F 72 11 00 20      [ 1]  241 	bres flags,#FRUN 
      000073 AE 00 8C         [ 2]  242 	ldw x,#USER_ABORT
      000076 CD 1F F4         [ 4]  243 	call puts 
      000079                        244 UBTN_Handler_exit:
      000079 AE 17 FF         [ 2]  245     ldw x,#STACK_EMPTY 
      00007C 94               [ 1]  246     ldw sp,x
      00007D 9A               [ 1]  247 	rim 
      00007E CE 00 19         [ 2]  248 	ldw x,txtbgn 
      000081 A3 2A 00         [ 2]  249 	cpw x,#app_space 
      000084 22 03            [ 1]  250 	jrugt 5$
      000086 CD 05 A3         [ 4]  251 	call clear_basic 
      000089 CC 07 BD         [ 2]  252 5$:	jp warm_start
                                    253 
      00008C 0A 50 72 6F 67 72 61   254 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    255 
                                    256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    257 ;    peripherals initialization
                                    258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    259 
                                    260 ;----------------------------------------
                                    261 ; inialize MCU clock 
                                    262 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    263 ;   A 		source  HSI | 1 HSE 
                                    264 ;   XL      CLK_CKDIVR , clock divisor 
                                    265 ; output:
                                    266 ;   none 
                                    267 ;----------------------------------------
      0000A7                        268 clock_init:	
      0000A7 C1 50 C3         [ 1]  269 	cp a,CLK_CMSR 
      0000AA 27 0C            [ 1]  270 	jreq 2$ ; no switching required 
                                    271 ; select clock source 
      0000AC 72 12 50 C5      [ 1]  272 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000B0 C7 50 C4         [ 1]  273 	ld CLK_SWR,a
      0000B3 C1 50 C3         [ 1]  274 1$:	cp a,CLK_CMSR
      0000B6 26 FB            [ 1]  275 	jrne 1$
      0000B8                        276 2$: 	
                                    277 ; HSI and cpu clock divisor 
      0000B8 9F               [ 1]  278 	ld a,xl 
      0000B9 C7 50 C6         [ 1]  279 	ld CLK_CKDIVR,a  
      0000BC 81               [ 4]  280 	ret
                                    281 
                                    282 ;----------------------------------
                                    283 ; TIMER2 used as audio tone output 
                                    284 ; on port D:5.
                                    285 ; channel 1 configured as PWM mode 1 
                                    286 ;-----------------------------------  
                           00F424   287 TIM2_CLK_FREQ=62500
      0000BD                        288 timer2_init:
      0000BD 72 1A 50 C7      [ 1]  289 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000C1 35 60 53 05      [ 1]  290  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000C5 35 08 53 0C      [ 1]  291 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000C9 81               [ 4]  292 	ret 
                                    293 
                                    294 ;---------------------------------
                                    295 ; TIM4 is configured to generate an 
                                    296 ; interrupt every millisecond 
                                    297 ;----------------------------------
      0000CA                        298 timer4_init:
      0000CA 72 18 50 C7      [ 1]  299 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000CE 35 07 53 45      [ 1]  300 	mov TIM4_PSCR,#7 ; prescale 128  
      0000D2 35 7D 53 46      [ 1]  301 	mov TIM4_ARR,#125 ; set for 1msec.
      0000D6 35 05 53 40      [ 1]  302 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000DA 72 10 53 41      [ 1]  303 	bset TIM4_IER,#TIM4_IER_UIE
      0000DE 81               [ 4]  304 	ret
                                    305 
                                    306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    307 ;  routines to write to FLASH, EEPROM 
                                    308 ;  and OPTION 
                                    309 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    310 
                                    311 ;----------------------------------
                                    312 ; unlock EEPROM/OPT for writing/erasing
                                    313 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    314 ; input:
                                    315 ;  none
                                    316 ; output:
                                    317 ;  none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    318 ;----------------------------------
      0000DF                        319 unlock_eeprom:
      0000DF 72 06 50 5F 15   [ 2]  320 	btjt FLASH_IAPSR,#FLASH_IAPSR_DUL,9$
      0000E4 35 00 50 5B      [ 1]  321 	mov FLASH_CR2,#0 
      0000E8 35 FF 50 5C      [ 1]  322 	mov FLASH_NCR2,#0xFF 
      0000EC 35 AE 50 64      [ 1]  323 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000F0 35 56 50 64      [ 1]  324     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000F4 72 07 50 5F FB   [ 2]  325 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000F9 81               [ 4]  326 9$:	ret
                                    327 
                                    328 ;----------------------------------
                                    329 ; unlock FLASH for writing/erasing
                                    330 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    331 ; input:
                                    332 ;  none
                                    333 ; output:
                                    334 ;  none
                                    335 ;----------------------------------
      0000FA                        336 unlock_flash:
      0000FA 72 02 50 5F 15   [ 2]  337 	btjt FLASH_IAPSR,#FLASH_IAPSR_PUL,9$
      0000FF 35 00 50 5B      [ 1]  338 	mov FLASH_CR2,#0 
      000103 35 FF 50 5C      [ 1]  339 	mov FLASH_NCR2,#0xFF 
      000107 35 56 50 62      [ 1]  340 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00010B 35 AE 50 62      [ 1]  341 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00010F 72 03 50 5F FB   [ 2]  342 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      000114 81               [ 4]  343 9$:	ret
                                    344 
                                    345 ;----------------------------
                                    346 ; erase block code must be 
                                    347 ; executed from RAM
                                    348 ; input:
                                    349 ;-----------------------------
      000115                        350 row_erase:
      000115 35 20 50 5B      [ 1]  351 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      000119 35 DF 50 5C      [ 1]  352 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      00011D 4F               [ 1]  353 	clr a 
      00011E 90 5F            [ 1]  354 	clrw y 
      000120 91 A7 00 16      [ 1]  355 	ldf ([farptr],y),a
      000124 90 5C            [ 1]  356     incw y
      000126 91 A7 00 16      [ 1]  357 	ldf ([farptr],y),a
      00012A 90 5C            [ 1]  358     incw y
      00012C 91 A7 00 16      [ 1]  359 	ldf ([farptr],y),a
      000130 90 5C            [ 1]  360     incw y
      000132 91 A7 00 16      [ 1]  361 	ldf ([farptr],y),a
      000136 72 05 50 5F FB   [ 2]  362 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00013B 81               [ 4]  363 	ret
      00013C                        364 row_erase_end:
                                    365 
                                    366 ; copy erase_start in RAM 
      00013C                        367 move_erase_to_ram:
      00013C AE 01 3C         [ 2]  368 	ldw x,#row_erase_end 
      00013F 1D 01 15         [ 2]  369 	subw x,#row_erase
      000142 CF 00 0C         [ 2]  370 	ldw acc16,x 
      000145 AE 16 90         [ 2]  371 	ldw x,#tib 
      000148 90 AE 01 15      [ 2]  372 	ldw y,#row_erase 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      00014C CD 03 C5         [ 4]  373 	call move 
      00014F 81               [ 4]  374 	ret 
                                    375 
                                    376 ;-----------------------------------
                                    377 ; block programming must be 
                                    378 ; executed from RAM 
                                    379 ; initial contidions: 
                                    380 ; 	memory unlocked
                                    381 ;   bit PRG set in 
                                    382 ; input:
                                    383 ;   x        data source 
                                    384 ;   farptr   row address destination 
                                    385 ; output:
                                    386 ;   none 
                                    387 ;----------------------------------
                           000001   388 	BCNT=1 
      000150                        389 program_row:
      000150 4B 80            [ 1]  390 	push #BLOCK_SIZE  
                                    391 ;enable block programming 
      000152 72 10 50 5B      [ 1]  392 	bset FLASH_CR2,#FLASH_CR2_PRG 
      000156 72 11 50 5C      [ 1]  393 	bres FLASH_NCR2,#FLASH_CR2_PRG
                                    394 ;	mov FLASH_CR2,#(1<<FLASH_CR2_PRG) 
                                    395 ;	mov FLASH_NCR2,#~(1<<FLASH_CR2_PRG)
      00015A 90 5F            [ 1]  396 	clrw y 
      00015C F6               [ 1]  397 1$:	ld a,(x)
      00015D 91 A7 00 16      [ 1]  398 	ldf ([farptr],y),a
      000161 5C               [ 1]  399 	incw x 
      000162 90 5C            [ 1]  400 	incw y 
      000164 0A 01            [ 1]  401 	dec (BCNT,sp)
      000166 26 F4            [ 1]  402 	jrne 1$
                                    403 ; wait EOP bit 
      000168 72 05 50 5F FB   [ 2]  404 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. ; wait end of operation 
      00016D                        405 	_drop 1 
      00016D 5B 01            [ 2]    1     addw sp,#1 
      00016F 81               [ 4]  406 	ret 
      000170                        407 program_row_end:
                                    408 
                                    409 ;-------------------------
                                    410 ; move program_row to RAM 
                                    411 ; at txtubound address 
                                    412 ;------------------------
      000170                        413 move_prg_to_ram:
      000170 AE 01 70         [ 2]  414 	ldw x,#program_row_end 
      000173 1D 01 50         [ 2]  415 	subw x,#program_row 
      000176 CF 00 0C         [ 2]  416 	ldw acc16,x ; bytes to move 
      000179 AE 16 90         [ 2]  417 	ldw x,#tib ; destination address 
      00017C 90 AE 01 50      [ 2]  418 	ldw y,#program_row ; source address 
      000180 CD 03 C5         [ 4]  419 	call move 
      000183 81               [ 4]  420 	ret 
                                    421 
                                    422 
                                    423 ;-----------------------------
                                    424 ; write a row in FLASH/EEPROM 
                                    425 ; input:
                                    426 ;    farptr   destination address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    427 ;    x        source address 
                                    428 ;-----------------------------
      000184                        429 write_row:
      000184 89               [ 2]  430 	pushw x 
      000185 72 5D 00 16      [ 1]  431 	tnz farptr 
      000189 26 1C            [ 1]  432 	jrne to_flash 
      00018B CE 00 17         [ 2]  433 	ldw x,farptr+1 
      00018E A3 2A 00         [ 2]  434 	cpw x,#app_space  
      000191 24 14            [ 1]  435 	jruge to_flash 
      000193                        436 to_eeprom:
      000193 AE 40 00         [ 2]  437 	ldw x,#EEPROM_BASE 
      000196 C3 00 17         [ 2]  438 	cpw x,farptr+1 
      000199 24 01            [ 1]  439 	jruge 1$
      00019B 81               [ 4]  440 	ret ; bad address 
      00019C AE 47 FF         [ 2]  441 1$: ldw x,#EEPROM_END 
      00019F 23 01            [ 2]  442 	jrule 2$ 
      0001A1 81               [ 4]  443 	ret ; bad address 
      0001A2 CD 00 DF         [ 4]  444 2$:	call unlock_eeprom
      0001A5 20 03            [ 2]  445 	jra do_programming
      0001A7                        446 to_flash:
      0001A7 CD 00 FA         [ 4]  447 	call unlock_flash
      0001AA                        448 do_programming:
      0001AA 85               [ 2]  449 	popw x 
      0001AB CD 16 90         [ 4]  450 	call tib
      0001AE 72 13 50 5F      [ 1]  451 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
      0001B2 72 17 50 5F      [ 1]  452 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
      0001B6 81               [ 4]  453 	ret 
                                    454 
                                    455 
                                    456 ;-----------------------------------
                                    457 ; erase flash or EEPROM block
                                    458 ; a block is 128 bytes 
                                    459 ; input:
                                    460 ;   farptr  address row begin
                                    461 ; output:
                                    462 ;   none
                                    463 ;--------------------------------------
      0001B7                        464 block_erase:
      0001B7 CE 00 17         [ 2]  465 	ldw x,farptr+1
      0001BA A3 2A 00         [ 2]  466 	cpw x,#app_space 
      0001BD 2A 17            [ 1]  467 	jrpl erase_flash 
                                    468 ; erase eeprom block
      0001BF A3 40 00         [ 2]  469 	cpw x,#EEPROM_BASE 
      0001C2 24 01            [ 1]  470 	jruge 1$
      0001C4 81               [ 4]  471 	ret ; bad address 
      0001C5 AE 47 FF         [ 2]  472 1$: ldw x,#EEPROM_END 
      0001C8 23 01            [ 2]  473 	jrule 2$ 
      0001CA 81               [ 4]  474 	ret ; bad address 
      0001CB CD 00 DF         [ 4]  475 2$:	call unlock_eeprom 
      0001CE CD 16 90         [ 4]  476 	call tib 
      0001D1 72 17 50 5F      [ 1]  477 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0001D5 81               [ 4]  478 	ret 
                                    479 ; erase flash block:
      0001D6                        480 erase_flash:
      0001D6 CD 00 FA         [ 4]  481 	call unlock_flash 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0001D9 CD 16 90         [ 4]  482 	call tib 
      0001DC 72 13 50 5F      [ 1]  483     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0001E0 81               [ 4]  484 	ret 
                                    485 
                                    486 
                                    487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    488 ; write a byte to FLASH or EEPROM/OPTION  
                                    489 ; input:
                                    490 ;    a  		byte to write
                                    491 ;    farptr  	address
                                    492 ;    x          farptr[x]
                                    493 ; output:
                                    494 ;    none
                                    495 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    496 	; variables locales
                           000001   497 	BTW = 1   ; byte to write offset on stack
                           000002   498 	OPT = 2   ; OPTION flag offset on stack
                           000002   499 	VSIZE = 2
      0001E1                        500 write_byte:
      0001E1 90 89            [ 2]  501 	pushw y
      0001E3                        502 	_vars VSIZE
      0001E3 52 02            [ 2]    1     sub sp,#VSIZE 
      0001E5 6B 01            [ 1]  503 	ld (BTW,sp),a ; byte to write 
      0001E7 0F 02            [ 1]  504 	clr (OPT,sp)  ; OPTION flag
                                    505 ; put addr[15:0] in Y, for bounds check.
      0001E9 90 CE 00 17      [ 2]  506 	ldw y,farptr+1   ; Y=addr15:0
                                    507 ; check addr[23:16], if <> 0 then it is extened flash memory
      0001ED 72 5D 00 16      [ 1]  508 	tnz farptr 
      0001F1 26 14            [ 1]  509 	jrne write_flash
      0001F3 90 A3 2A 00      [ 2]  510     cpw y,#app_space 	 
      0001F7 24 0E            [ 1]  511     jruge write_flash
      0001F9 90 A3 40 00      [ 2]  512 	cpw y,#EEPROM_BASE  
      0001FD 25 57            [ 1]  513     jrult write_exit
      0001FF 90 A3 48 7F      [ 2]  514 	cpw y,#OPTION_END 
      000203 22 51            [ 1]  515 	jrugt write_exit
      000205 20 16            [ 2]  516 	jra write_eeprom 
                                    517 ; write program memory
      000207                        518 write_flash:
      000207 CD 00 FA         [ 4]  519 	call unlock_flash 
      00020A 9B               [ 1]  520 1$:	sim 
      00020B 7B 01            [ 1]  521 	ld a,(BTW,sp)
      00020D 92 A7 00 16      [ 4]  522 	ldf ([farptr],x),a ; farptr[x]=A
      000211 72 05 50 5F FB   [ 2]  523 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000216 9A               [ 1]  524     rim 
      000217 72 13 50 5F      [ 1]  525     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00021B 20 39            [ 2]  526     jra write_exit
                                    527 ; write eeprom and option
      00021D                        528 write_eeprom:
      00021D CD 00 DF         [ 4]  529 	call unlock_eeprom
                                    530 	; check for data eeprom or option eeprom
      000220 90 A3 48 00      [ 2]  531 	cpw y,#OPTION_BASE
      000224 2B 08            [ 1]  532 	jrmi 1$
      000226 90 A3 48 80      [ 2]  533 	cpw y,#OPTION_END+1
      00022A 2A 02            [ 1]  534 	jrpl 1$
      00022C 03 02            [ 1]  535 	cpl (OPT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00022E                        536 1$: 
      00022E 0D 02            [ 1]  537     tnz (OPT,sp)
      000230 27 08            [ 1]  538     jreq 2$
                                    539 	; pour modifier une option il faut modifier ces 2 bits
      000232 72 1E 50 5B      [ 1]  540     bset FLASH_CR2,#FLASH_CR2_OPT
      000236 72 1F 50 5C      [ 1]  541     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00023A                        542 2$: 
      00023A 7B 01            [ 1]  543     ld a,(BTW,sp)
      00023C 92 A7 00 16      [ 4]  544     ldf ([farptr],x),a
      000240 0D 02            [ 1]  545     tnz (OPT,sp)
      000242 27 08            [ 1]  546     jreq 3$
      000244 5C               [ 1]  547     incw x
      000245 7B 01            [ 1]  548     ld a,(BTW,sp)
      000247 43               [ 1]  549     cpl a
      000248 92 A7 00 16      [ 4]  550     ldf ([farptr],x),a
      00024C 72 05 50 5F FB   [ 2]  551 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000251 72 0D 50 5F FB   [ 2]  552 	btjf FLASH_IAPSR,#FLASH_IAPSR_HVOFF,.
      000256                        553 write_exit:
      000256                        554 	_drop VSIZE 
      000256 5B 02            [ 2]    1     addw sp,#VSIZE 
      000258 90 85            [ 2]  555 	popw y
      00025A 81               [ 4]  556     ret
                                    557 
                                    558 ;--------------------------------------------
                                    559 ; write a data block to eeprom or flash 
                                    560 ; input:
                                    561 ;   Y        source address   
                                    562 ;   X        array index  destination  farptr[x]
                                    563 ;   BSIZE    block size bytes 
                                    564 ;   farptr   write address , byte* 
                                    565 ; output:
                                    566 ;	X 		after last byte written 
                                    567 ;   Y 		after last byte read 
                                    568 ;  farptr   point after block
                                    569 ;---------------------------------------------
      00025B                        570 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      00025B                        571 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    572 	; local var 
                           000001   573 	XSAVE=1 
                           000002   574 	VSIZE=2 
      00025B                        575 write_block:
      00025B                        576 	_vars VSIZE
      00025B 52 02            [ 2]    1     sub sp,#VSIZE 
      00025D 1F 01            [ 2]  577 	ldw (XSAVE,sp),x 
      00025F 1E 05            [ 2]  578 	ldw x,(BSIZE,sp) 
      000261 27 13            [ 1]  579 	jreq 9$
      000263 1E 01            [ 2]  580 1$:	ldw x,(XSAVE,sp)
      000265 90 F6            [ 1]  581 	ld a,(y)
      000267 CD 01 E1         [ 4]  582 	call write_byte 
      00026A 5C               [ 1]  583 	incw x 
      00026B 90 5C            [ 1]  584 	incw y 
      00026D 1F 01            [ 2]  585 	ldw (XSAVE,sp),x
      00026F 1E 05            [ 2]  586 	ldw x,(BSIZE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000271 5A               [ 2]  587 	decw x
      000272 1F 05            [ 2]  588 	ldw (BSIZE,sp),x 
      000274 26 ED            [ 1]  589 	jrne 1$
      000276                        590 9$:
      000276 1E 01            [ 2]  591 	ldw x,(XSAVE,sp)
      000278 CD 14 13         [ 4]  592 	call incr_farptr
      00027B                        593 	_drop VSIZE
      00027B 5B 02            [ 2]    1     addw sp,#VSIZE 
      00027D 81               [ 4]  594 	ret 
                                    595 
                                    596 
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    598 ;;   UART1 subroutines
                                    599 ;;   used for user interface 
                                    600 ;;   communication channel.
                                    601 ;;   settings: 
                                    602 ;;		115200 8N1 no flow control
                                    603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    604 
                                    605 ;---------------------------------------------
                                    606 ; initialize UART1, 115200 8N1
                                    607 ; input:
                                    608 ;	none
                                    609 ; output:
                                    610 ;   none
                                    611 ;---------------------------------------------
      00027E                        612 uart1_init:
      00027E 72 1A 50 02      [ 1]  613     bset PA_DDR,#UART1_TX_PIN
      000282 72 1A 50 03      [ 1]  614     bset PA_CR1,#UART1_TX_PIN 
      000286 72 1A 50 04      [ 1]  615     bset PA_CR2,#UART1_TX_PIN 
                                    616 ; enable UART1 clock
      00028A 72 14 50 C7      [ 1]  617 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      00028E                        618 uart1_set_baud: 
                                    619 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    620 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00028E A6 E1            [ 1]  621 	ld a,#CLK_SWR_HSI
      000290 C1 50 C3         [ 1]  622 	cp a,CLK_CMSR 
      000293 27 0A            [ 1]  623 	jreq 2$ 
      000295                        624 1$: ; 8 Mhz 	
      000295 35 05 52 33      [ 1]  625 	mov UART1_BRR2,#0x05 ; must be loaded first
      000299 35 04 52 32      [ 1]  626 	mov UART1_BRR1,#0x4
      00029D 20 08            [ 2]  627 	jra 3$
      00029F                        628 2$: ; 16 Mhz 	
      00029F 35 0B 52 33      [ 1]  629 	mov UART1_BRR2,#0x0b ; must be loaded first
      0002A3 35 08 52 32      [ 1]  630 	mov UART1_BRR1,#0x08
      0002A7                        631 3$:
      0002A7 72 5F 52 31      [ 1]  632     clr UART1_DR
      0002AB 35 2C 52 35      [ 1]  633 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0002AF 72 10 52 35      [ 1]  634 	bset UART1_CR2,#UART_CR2_SBK
      0002B3 72 0D 52 30 FB   [ 2]  635     btjf UART1_SR,#UART_SR_TC,.
      0002B8 72 5F 00 2A      [ 1]  636     clr rx1_head 
      0002BC 72 5F 00 2B      [ 1]  637 	clr rx1_tail 
      0002C0 81               [ 4]  638 	ret
                                    639 
                                    640 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    641 ; uart1_putc
                                    642 ; send a character via UART1
                                    643 ; input:
                                    644 ;    A  	character to send
                                    645 ;---------------------------------
      0002C1                        646 putc:: ; console output always on UART1
      0002C1                        647 uart1_putc:: 
      0002C1 72 0F 52 30 FB   [ 2]  648 	btjf UART1_SR,#UART_SR_TXE,.
      0002C6 C7 52 31         [ 1]  649 	ld UART1_DR,a 
      0002C9 81               [ 4]  650 	ret 
                                    651 
                                    652 
                                    653 ;---------------------------------
                                    654 ; Query for character in rx1_queue
                                    655 ; input:
                                    656 ;   none 
                                    657 ; output:
                                    658 ;   A     0 no charcter available
                                    659 ;   Z     1 no character available
                                    660 ;---------------------------------
      0002CA                        661 qgetc::
      0002CA                        662 uart1_qgetc::
      0002CA C6 00 2A         [ 1]  663 	ld a,rx1_head 
      0002CD C0 00 2B         [ 1]  664 	sub a,rx1_tail 
      0002D0 81               [ 4]  665 	ret 
                                    666 
                                    667 ;---------------------------------
                                    668 ; wait character from UART1 
                                    669 ; input:
                                    670 ;   none
                                    671 ; output:
                                    672 ;   A 			char  
                                    673 ;--------------------------------	
      0002D1                        674 getc:: ;console input
      0002D1                        675 uart1_getc::
      0002D1 CD 02 CA         [ 4]  676 	call uart1_qgetc
      0002D4 27 FB            [ 1]  677 	jreq uart1_getc 
      0002D6 89               [ 2]  678 	pushw x 
      0002D7 AE 00 22         [ 2]  679 	ldw x,#rx1_queue
      0002DA 9F               [ 1]  680 	ld a,xl 
      0002DB CB 00 2A         [ 1]  681 	add a,rx1_head 
      0002DE 97               [ 1]  682 	ld xl,a 
      0002DF F6               [ 1]  683 	ld a,(x)
      0002E0 85               [ 2]  684 	popw x
      0002E1 88               [ 1]  685 	push a
      0002E2 72 5C 00 2A      [ 1]  686 	inc rx1_head 
      0002E6 A6 07            [ 1]  687 	ld a,#RX_QUEUE_SIZE-1 
      0002E8 C4 00 2A         [ 1]  688 	and a,rx1_head 
      0002EB C7 00 2A         [ 1]  689 	ld rx1_head,a 
      0002EE 84               [ 1]  690 	pop a  
      0002EF 81               [ 4]  691 	ret 
                                    692 
                                    693 ;----------------------
                                    694 ; print token id && value
                                    695 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    696 ;   A     token id 
                                    697 ;   X     token value 
                                    698 ;---------------------
                           000001   699 	BSAVE=1
                           000002   700 	AREG=2
                           000003   701 	XREG=3
                           000004   702 	VSIZE=4
      0002F0                        703 prt_tok:
      0002F0                        704 	_vars VSIZE 
      0002F0 52 04            [ 2]    1     sub sp,#VSIZE 
      0002F2 6B 02            [ 1]  705 	ld (AREG,sp),a 
      0002F4 1F 03            [ 2]  706 	ldw (XREG,sp),x 
      0002F6 C6 00 0A         [ 1]  707 	ld a, base
      0002F9 6B 01            [ 1]  708 	ld (BSAVE,sp),a 
      0002FB 35 10 00 0A      [ 1]  709 	mov base,#16  
      0002FF AE 03 27         [ 2]  710 	ldw x,#token_msg
      000302 CD 1F F4         [ 4]  711 	call puts 
      000305 5F               [ 1]  712 	clrw x 
      000306 7B 02            [ 1]  713 	ld a,(AREG,sp)
      000308 97               [ 1]  714 	ld xl,a 
      000309 CD 08 83         [ 4]  715 	call print_int 
      00030C A6 20            [ 1]  716 	ld a,#SPACE
      00030E CD 02 C1         [ 4]  717 	call putc 
      000311 1E 03            [ 2]  718 	ldw x,(XREG,sp)
      000313 CD 08 83         [ 4]  719 	call print_int 
      000316 A6 0D            [ 1]  720 	ld a,#CR 
      000318 CD 02 C1         [ 4]  721 	call putc 
      00031B 7B 01            [ 1]  722 	ld a,(BSAVE,sp)
      00031D C7 00 0A         [ 1]  723 	ld base,a 
      000320 7B 02            [ 1]  724 	ld a,(AREG,sp)
      000322 1E 03            [ 2]  725 	ldw x,(XREG,sp)
      000324                        726 	_drop VSIZE 
      000324 5B 04            [ 2]    1     addw sp,#VSIZE 
      000326 81               [ 4]  727 	ret 
      000327 74 6F 6B 65 6E 3A 20   728 token_msg: .asciz "token: "
             00
                                    729 
                                    730 
                                    731 ;---------------------
                                    732 ; display n bytes row 
                                    733 ; from memory.
                                    734 ; input:
                                    735 ;   A   bytes to print 
                                    736 ;	X   start address 
                                    737 ; output:
                                    738 ;   X   address after last shown  
                                    739 ;---------------------
                           000001   740 	CNT=1 
                           000002   741 	ADR=2 
                           000003   742 	VSIZE=3 
      00032F                        743 show_row:
      00032F 4D               [ 1]  744 	tnz a 
      000330 26 01            [ 1]  745 	jrne 1$
      000332 81               [ 4]  746 	ret 
      000333                        747 1$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000333 89               [ 2]  748 	pushw x  
      000334 88               [ 1]  749 	push a 
      000335 35 04 00 21      [ 1]  750 	mov tab_width,#4 
      000339 CD 08 83         [ 4]  751 	call print_int 
      00033C A6 20            [ 1]  752 	ld a,#SPACE  
      00033E CD 02 C1         [ 4]  753 	call putc
      000341                        754 row_loop:
      000341 1E 02            [ 2]  755 	ldw x,(ADR,sp)
      000343 F6               [ 1]  756 	ld a,(x)
      000344 5F               [ 1]  757 	clrw x 
      000345 97               [ 1]  758 	ld xl,a 
      000346 CD 08 83         [ 4]  759 	call print_int 
      000349 1E 02            [ 2]  760 	ldw x,(ADR,sp)
      00034B 5C               [ 1]  761 	incw x 
      00034C 1F 02            [ 2]  762 	ldw (ADR,sp),x 
      00034E 0A 01            [ 1]  763 	dec (CNT,sp)
      000350 26 EF            [ 1]  764 	jrne row_loop
      000352                        765 	_drop VSIZE  		
      000352 5B 03            [ 2]    1     addw sp,#VSIZE 
      000354 35 04 00 21      [ 1]  766 	mov tab_width,#4
      000358 A6 0D            [ 1]  767 	ld a,#CR 
      00035A CD 02 C1         [ 4]  768 	call putc 
      00035D 81               [ 4]  769 	ret 
                                    770 
                                    771 ;--------------------------
                                    772 ; print memory content 
                                    773 ; in hexadecimal format
                                    774 ;  input:
                                    775 ;    X    start address 
                                    776 ;    Y    count 
                                    777 ;--------------------------
                           000001   778 	BCNT=1
                           000003   779 	BASE=3
                           000004   780 	TABW=4
                           000004   781 	VSIZE=4   
      00035E                        782 hex_dump:
      00035E                        783 	_vars VSIZE
      00035E 52 04            [ 2]    1     sub sp,#VSIZE 
      000360 C6 00 0A         [ 1]  784 	ld a,base
      000363 6B 03            [ 1]  785 	ld (BASE,sp),a 
      000365 35 10 00 0A      [ 1]  786 	mov base,#16
      000369 C6 00 21         [ 1]  787 	ld a,tab_width 
      00036C 6B 04            [ 1]  788 	ld (TABW,sp),a
      00036E A6 0D            [ 1]  789 	ld a,#CR 
      000370 CD 02 C1         [ 4]  790 	call putc 
      000373 17 01            [ 2]  791 1$: ldw (BCNT,sp),y
      000375 A6 10            [ 1]  792 	ld a,#16
      000377 90 A3 00 10      [ 2]  793 	cpw y,#16
      00037B 2A 02            [ 1]  794 	jrpl 2$
      00037D 90 9F            [ 1]  795 	ld a,yl
      00037F                        796 2$: 	
      00037F CD 03 2F         [ 4]  797 	call show_row 
      000382 16 01            [ 2]  798 	ldw y,(BCNT,sp) 
      000384 72 A2 00 10      [ 2]  799 	subw y,#16 
      000388 90 A3 00 01      [ 2]  800 	cpw y,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00038C 2A E5            [ 1]  801 	jrpl 1$
      00038E 7B 03            [ 1]  802 	ld a,(BASE,sp)
      000390 C7 00 0A         [ 1]  803 	ld base,a
      000393 7B 04            [ 1]  804 	ld a,(TABW,sp)
      000395 C7 00 21         [ 1]  805 	ld tab_width,a 
      000398                        806 	_drop VSIZE
      000398 5B 04            [ 2]    1     addw sp,#VSIZE 
      00039A 81               [ 4]  807 	ret 
                                    808 
                                    809 ;-------------------------------------
                                    810 ; retrun string length
                                    811 ; input:
                                    812 ;   X         .asciz  pointer 
                                    813 ; output:
                                    814 ;   X         not affected 
                                    815 ;   A         length 
                                    816 ;-------------------------------------
      00039B                        817 strlen::
      00039B 89               [ 2]  818 	pushw x 
      00039C 4F               [ 1]  819 	clr a
      00039D 7D               [ 1]  820 1$:	tnz (x) 
      00039E 27 04            [ 1]  821 	jreq 9$ 
      0003A0 4C               [ 1]  822 	inc a 
      0003A1 5C               [ 1]  823 	incw x 
      0003A2 20 F9            [ 2]  824 	jra 1$ 
      0003A4 85               [ 2]  825 9$:	popw x 
      0003A5 81               [ 4]  826 	ret 
                                    827 
                                    828 ;------------------------------------
                                    829 ; compare 2 strings
                                    830 ; input:
                                    831 ;   X 		char* first string 
                                    832 ;   Y       char* second string 
                                    833 ; output:
                                    834 ;   A 		0|1 
                                    835 ;-------------------------------------
      0003A6                        836 strcmp:
      0003A6 F6               [ 1]  837 	ld a,(x)
      0003A7 27 0B            [ 1]  838 	jreq 5$ 
      0003A9 90 F1            [ 1]  839 	cp a,(y) 
      0003AB 26 05            [ 1]  840 	jrne 4$ 
      0003AD 5C               [ 1]  841 	incw x 
      0003AE 90 5C            [ 1]  842 	incw y 
      0003B0 20 F4            [ 2]  843 	jra strcmp 
      0003B2                        844 4$: ; not same  
      0003B2 4F               [ 1]  845 	clr a 
      0003B3 81               [ 4]  846 	ret 
      0003B4                        847 5$: ; same 
      0003B4 A6 01            [ 1]  848 	ld a,#1 
      0003B6 81               [ 4]  849 	ret 
                                    850 
                                    851 
                                    852 ;---------------------------------------
                                    853 ;  copy src to dest 
                                    854 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    855 ;   X 		dest 
                                    856 ;   Y 		src 
                                    857 ; output: 
                                    858 ;   X 		dest 
                                    859 ;----------------------------------
      0003B7                        860 strcpy::
      0003B7 89               [ 2]  861 	pushw x 
      0003B8 90 F6            [ 1]  862 1$: ld a,(y)
      0003BA 27 06            [ 1]  863 	jreq 9$ 
      0003BC F7               [ 1]  864 	ld (x),a 
      0003BD 5C               [ 1]  865 	incw x 
      0003BE 90 5C            [ 1]  866 	incw y 
      0003C0 20 F6            [ 2]  867 	jra 1$ 
      0003C2 7F               [ 1]  868 9$:	clr (x)
      0003C3 85               [ 2]  869 	popw x 
      0003C4 81               [ 4]  870 	ret 
                                    871 
                                    872 ;---------------------------------------
                                    873 ; move memory block 
                                    874 ; input:
                                    875 ;   X 		destination 
                                    876 ;   Y 	    source 
                                    877 ;   acc16	bytes count 
                                    878 ; output:
                                    879 ;   none 
                                    880 ;--------------------------------------
                           000001   881 	INCR=1 ; increament high byte 
                           000002   882 	LB=2 ; increament low byte 
                           000002   883 	VSIZE=2
      0003C5                        884 move::
      0003C5                        885 	_vars VSIZE 
      0003C5 52 02            [ 2]    1     sub sp,#VSIZE 
      0003C7 0F 01            [ 1]  886 	clr (INCR,sp)
      0003C9 0F 02            [ 1]  887 	clr (LB,sp)
      0003CB 90 89            [ 2]  888 	pushw y 
      0003CD 13 01            [ 2]  889 	cpw x,(1,sp) ; compare DEST to SRC 
      0003CF 90 85            [ 2]  890 	popw y 
      0003D1 27 31            [ 1]  891 	jreq move_exit ; x==y 
      0003D3 2B 0E            [ 1]  892 	jrmi move_down
      0003D5                        893 move_up: ; start from top address with incr=-1
      0003D5 72 BB 00 0C      [ 2]  894 	addw x,acc16
      0003D9 72 B9 00 0C      [ 2]  895 	addw y,acc16
      0003DD 03 01            [ 1]  896 	cpl (INCR,sp)
      0003DF 03 02            [ 1]  897 	cpl (LB,sp)   ; increment = -1 
      0003E1 20 05            [ 2]  898 	jra move_loop  
      0003E3                        899 move_down: ; start from bottom address with incr=1 
      0003E3 5A               [ 2]  900     decw x 
      0003E4 90 5A            [ 2]  901 	decw y
      0003E6 0C 02            [ 1]  902 	inc (LB,sp) ; incr=1 
      0003E8                        903 move_loop:	
      0003E8 C6 00 0C         [ 1]  904     ld a, acc16 
      0003EB CA 00 0D         [ 1]  905 	or a, acc8
      0003EE 27 14            [ 1]  906 	jreq move_exit 
      0003F0 72 FB 01         [ 2]  907 	addw x,(INCR,sp)
      0003F3 72 F9 01         [ 2]  908 	addw y,(INCR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003F6 90 F6            [ 1]  909 	ld a,(y)
      0003F8 F7               [ 1]  910 	ld (x),a 
      0003F9 89               [ 2]  911 	pushw x 
      0003FA CE 00 0C         [ 2]  912 	ldw x,acc16 
      0003FD 5A               [ 2]  913 	decw x 
      0003FE CF 00 0C         [ 2]  914 	ldw acc16,x 
      000401 85               [ 2]  915 	popw x 
      000402 20 E4            [ 2]  916 	jra move_loop
      000404                        917 move_exit:
      000404                        918 	_drop VSIZE
      000404 5B 02            [ 2]    1     addw sp,#VSIZE 
      000406 81               [ 4]  919 	ret 	
                                    920 
                                    921 ;------------------------------------
                                    922 ;  set all variables to zero 
                                    923 ; input:
                                    924 ;   none 
                                    925 ; output:
                                    926 ;	none
                                    927 ;------------------------------------
      000407                        928 clear_vars:
      000407 AE 00 2C         [ 2]  929 	ldw x,#vars 
      00040A 90 AE 00 34      [ 2]  930 	ldw y,#2*26 
      00040E 7F               [ 1]  931 1$:	clr (x)
      00040F 5C               [ 1]  932 	incw x 
      000410 90 5A            [ 2]  933 	decw y 
      000412 26 FA            [ 1]  934 	jrne 1$
      000414 81               [ 4]  935 	ret 
                                    936 
                                    937 ;-------------------------------------
                                    938 ; check if A is a letter 
                                    939 ; input:
                                    940 ;   A 			character to test 
                                    941 ; output:
                                    942 ;   C flag      1 true, 0 false 
                                    943 ;-------------------------------------
      000415                        944 is_alpha::
      000415 A1 41            [ 1]  945 	cp a,#'A 
      000417 8C               [ 1]  946 	ccf 
      000418 24 0B            [ 1]  947 	jrnc 9$ 
      00041A A1 5B            [ 1]  948 	cp a,#'Z+1 
      00041C 25 07            [ 1]  949 	jrc 9$ 
      00041E A1 61            [ 1]  950 	cp a,#'a 
      000420 8C               [ 1]  951 	ccf 
      000421 24 02            [ 1]  952 	jrnc 9$
      000423 A1 7B            [ 1]  953 	cp a,#'z+1
      000425 81               [ 4]  954 9$: ret 	
                                    955 
                                    956 ;------------------------------------
                                    957 ; check if character in {'0'..'9'}
                                    958 ; input:
                                    959 ;    A  character to test
                                    960 ; output:
                                    961 ;    Carry  0 not digit | 1 digit
                                    962 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000426                        963 is_digit::
      000426 A1 30            [ 1]  964 	cp a,#'0
      000428 25 03            [ 1]  965 	jrc 1$
      00042A A1 3A            [ 1]  966     cp a,#'9+1
      00042C 8C               [ 1]  967 	ccf 
      00042D 8C               [ 1]  968 1$:	ccf 
      00042E 81               [ 4]  969     ret
                                    970 
                                    971 ;-------------------------------------
                                    972 ; return true if character in  A 
                                    973 ; is letter or digit.
                                    974 ; input:
                                    975 ;   A     ASCII character 
                                    976 ; output:
                                    977 ;   A     no change 
                                    978 ;   Carry    0 false| 1 true 
                                    979 ;--------------------------------------
      00042F                        980 is_alnum::
      00042F CD 04 26         [ 4]  981 	call is_digit
      000432 25 03            [ 1]  982 	jrc 1$ 
      000434 CD 04 15         [ 4]  983 	call is_alpha
      000437 81               [ 4]  984 1$:	ret 
                                    985 
                                    986 
                                    987 ;-------------------------------------
                                    988 ;  program initialization entry point 
                                    989 ;-------------------------------------
                           000001   990 	MAJOR=1
                           000002   991 	MINOR=2 
      000438 0A 0A 54 69 6E 79 20   992 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2022\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 32 0A 76 65
             72 73 69 6F 6E 20 00
      00047E                        993 cold_start:
                                    994 ;set stack 
      00047E AE 17 FF         [ 2]  995 	ldw x,#STACK_EMPTY
      000481 94               [ 1]  996 	ldw sp,x   
                                    997 ; clear all ram 
      000482 7F               [ 1]  998 0$: clr (x)
      000483 5A               [ 2]  999 	decw x 
      000484 26 FC            [ 1] 1000 	jrne 0$
                                   1001 ; activate pull up on all inputs 
      000486 A6 FF            [ 1] 1002 	ld a,#255 
      000488 C7 50 03         [ 1] 1003 	ld PA_CR1,a 
      00048B C7 50 08         [ 1] 1004 	ld PB_CR1,a 
      00048E C7 50 0D         [ 1] 1005 	ld PC_CR1,a 
      000491 C7 50 12         [ 1] 1006 	ld PD_CR1,a 
      000494 C7 50 17         [ 1] 1007 	ld PE_CR1,a 
      000497 C7 50 1C         [ 1] 1008 	ld PF_CR1,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00049A C7 50 21         [ 1] 1009 	ld PG_CR1,a 
      00049D C7 50 2B         [ 1] 1010 	ld PI_CR1,a
                                   1011 ; set LD2 pin as output 
      0004A0 72 1A 50 0D      [ 1] 1012     bset PC_CR1,#LED2_BIT
      0004A4 72 1A 50 0E      [ 1] 1013     bset PC_CR2,#LED2_BIT
      0004A8 72 1A 50 0C      [ 1] 1014     bset PC_DDR,#LED2_BIT
      0004AC 72 1B 50 0A      [ 1] 1015 	bres PC_ODR,#LED2_BIT 
                                   1016 ; disable schmitt triggers on Arduino CN4 analog inputs
      0004B0 55 00 3F 54 07   [ 1] 1017 	mov ADC_TDRL,0x3f
                                   1018 ; disable peripherals clocks
                                   1019 ;	clr CLK_PCKENR1 
                                   1020 ;	clr CLK_PCKENR2
      0004B5 72 5F 50 F2      [ 1] 1021 	clr AWU_TBR 
      0004B9 72 14 50 CA      [ 1] 1022 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1023 ; select internal clock no divisor: 16 Mhz 	
      0004BD A6 E1            [ 1] 1024 	ld a,#CLK_SWR_HSI 
      0004BF 5F               [ 1] 1025 	clrw x  
      0004C0 CD 00 A7         [ 4] 1026     call clock_init 
      0004C3 CD 00 CA         [ 4] 1027 	call timer4_init
      0004C6 CD 00 BD         [ 4] 1028 	call timer2_init
                                   1029 ; UART1 at 115200 BAUD
      0004C9 CD 02 7E         [ 4] 1030 	call uart1_init
                                   1031 ; activate PE_4 (user button interrupt)
      0004CC 72 18 50 18      [ 1] 1032     bset PE_CR2,#USR_BTN_BIT 
                                   1033 ; display system information
      0004D0 AE 04 38         [ 2] 1034 	ldw x,#software 
      0004D3 CD 1F F4         [ 4] 1035 	call puts 
      0004D6 A6 01            [ 1] 1036 	ld a,#MAJOR 
      0004D8 C7 00 0D         [ 1] 1037 	ld acc8,a 
      0004DB 5F               [ 1] 1038 	clrw x 
      0004DC CF 00 0B         [ 2] 1039 	ldw acc24,x
      0004DF 72 5F 00 21      [ 1] 1040 	clr tab_width  
      0004E3 35 0A 00 0A      [ 1] 1041 	mov base, #10 
      0004E7 CD 08 93         [ 4] 1042 	call prti24 
      0004EA A6 2E            [ 1] 1043 	ld a,#'.
      0004EC CD 02 C1         [ 4] 1044 	call putc 
      0004EF A6 02            [ 1] 1045 	ld a,#MINOR 
      0004F1 C7 00 0D         [ 1] 1046 	ld acc8,a 
      0004F4 5F               [ 1] 1047 	clrw x 
      0004F5 CF 00 0B         [ 2] 1048 	ldw acc24,x 
      0004F8 CD 08 93         [ 4] 1049 	call prti24
      0004FB A6 0D            [ 1] 1050 	ld a,#CR 
      0004FD CD 02 C1         [ 4] 1051 	call putc
      000500 9A               [ 1] 1052 	rim 
      000501 72 5C 00 15      [ 1] 1053 	inc seedy+1 
      000505 72 5C 00 13      [ 1] 1054 	inc seedx+1 
      000509 CD 05 A3         [ 4] 1055 	call clear_basic
      00050C CD 0D E5         [ 4] 1056 	call ubound 
      00050F CD 12 7A         [ 4] 1057 	call beep_1khz  
      000512                       1058 2$:	
      000512 CD 05 85         [ 4] 1059 	call warm_init
                                   1060 ; check for application in flash memory 
      000515 CD 14 55         [ 4] 1061 	call qsign ; app in flash?
      000518 27 03            [ 1] 1062 	jreq run_app ; yes 
      00051A CC 07 C0         [ 2] 1063 	jp cmd_line 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00051D                       1064 run_app:
                                   1065 ; run application in FLASH 
      00051D AE 05 5A         [ 2] 1066 	ldw x,#RUNNING 
      000520 CD 1F F4         [ 4] 1067 	call puts 
      000523 AE 2A 04         [ 2] 1068 	ldw x,#app
      000526 35 10 00 0A      [ 1] 1069 	mov base,#16 
      00052A CD 08 83         [ 4] 1070 	call print_int
      00052D 35 0A 00 0A      [ 1] 1071 	mov base,#10  
      000531 AE 2A 04         [ 2] 1072 4$:	ldw x,#app  
      000534 CF 00 04         [ 2] 1073 	ldw basicptr,x
      000537 CF 00 19         [ 2] 1074 	ldw txtbgn,x 
      00053A E6 02            [ 1] 1075 	ld a,(2,x)
      00053C C7 00 03         [ 1] 1076 	ld count,a 
      00053F A6 03            [ 1] 1077 	ld a,#3 
      000541 C7 00 01         [ 1] 1078 	ld in,a 
      000544 CE 2A 02         [ 2] 1079 	ldw x,app_size 
      000547 72 BB 00 19      [ 2] 1080 	addw x,txtbgn 
      00054B CF 00 1B         [ 2] 1081 	ldw txtend,x
      00054E 72 10 00 20      [ 1] 1082 	bset flags,#FRUN
      000552 CD 0D E5         [ 4] 1083 	call ubound   
      000555 CC 07 DC         [ 2] 1084 	jp interpreter  
      000558 20 FE            [ 2] 1085     jra .  
                                   1086 
      00055A 0A 72 75 6E 6E 69 6E  1087 RUNNING: .asciz "\nrunning application in FLASH at address: " 
             67 20 61 70 70 6C 69
             63 61 74 69 6F 6E 20
             69 6E 20 46 4C 41 53
             48 20 61 74 20 61 64
             64 72 65 73 73 3A 20
             00
                                   1088 
      000585                       1089 warm_init:
      000585 72 5F 00 20      [ 1] 1090 	clr flags 
      000589 72 5F 00 1D      [ 1] 1091 	clr loop_depth 
      00058D 35 04 00 21      [ 1] 1092 	mov tab_width,#TAB_WIDTH 
      000591 35 0A 00 0A      [ 1] 1093 	mov base,#10 
      000595 AE 00 00         [ 2] 1094 	ldw x,#0 
      000598 CF 00 04         [ 2] 1095 	ldw basicptr,x 
      00059B CF 00 00         [ 2] 1096 	ldw in.w,x 
      00059E 72 5F 00 03      [ 1] 1097 	clr count
      0005A2 81               [ 4] 1098 	ret 
                                   1099 
                                   1100 
                                   1101 ;---------------------------
                                   1102 ; reset BASIC text variables 
                                   1103 ; and clear variables 
                                   1104 ;---------------------------
      0005A3                       1105 clear_basic:
      0005A3 72 5F 00 03      [ 1] 1106 	clr count
      0005A7 72 5F 00 01      [ 1] 1107 	clr in  
      0005AB AE 00 64         [ 2] 1108 	ldw x,#free_ram 
      0005AE CF 00 19         [ 2] 1109 	ldw txtbgn,x 
      0005B1 CF 00 1B         [ 2] 1110 	ldw txtend,x 
      0005B4 CD 04 07         [ 4] 1111 	call clear_vars 
      0005B7 81               [ 4] 1112 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1113 
                                   1114 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1115 ;;   Tiny BASIC error messages     ;;
                                   1116 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B8                       1117 err_msg:
      0005B8 00 00 05 D8 05 E5 05  1118 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             F3 06 0C 06 1B
      0005C4 06 31 06 47 06 61 06  1119 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             72 06 83
      0005CE 06 8F 06 C2 06 D2 06  1120 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             E6 06 F9
                                   1121 
      0005D8 4D 65 6D 6F 72 79 20  1122 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      0005E5 73 79 6E 74 61 78 20  1123 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      0005F3 6D 61 74 68 20 6F 70  1124 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00060C 64 69 76 69 73 69 6F  1125 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      00061B 69 6E 76 61 6C 69 64  1126 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      000631 72 75 6E 20 74 69 6D  1127 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      000647 63 6F 6D 6D 61 6E 64  1128 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      000661 64 75 70 6C 69 63 61  1129 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      000672 46 69 6C 65 20 6E 6F  1130 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      000683 62 61 64 20 76 61 6C  1131 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      00068F 46 69 6C 65 20 69 6E  1132 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      0006C2 4E 6F 20 64 61 74 61  1133 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      0006D2 4E 6F 20 70 72 6F 67  1134 err_no_prog: .asciz "No program in RAM!\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      0006E6 46 69 6C 65 20 73 79  1135 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      0006F9 42 75 66 66 65 72 20  1136 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1137 
      000706 0A 72 75 6E 20 74 69  1138 rt_msg: .asciz "\nrun time error, "
             6D 65 20 65 72 72 6F
             72 2C 20 00
      000718 0A 63 6F 6D 70 69 6C  1139 comp_msg: .asciz "\ncompile error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000729 6C 61 73 74 20 74 6F  1140 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1141 
      000739                       1142 syntax_error::
      000739 A6 02            [ 1] 1143 	ld a,#ERR_SYNTAX 
                                   1144 
      00073B                       1145 tb_error::
      00073B 72 0A 00 20 44   [ 2] 1146 	btjt flags,#FCOMP,1$
      000740 88               [ 1] 1147 	push a 
      000741 AE 07 06         [ 2] 1148 	ldw x, #rt_msg 
      000744 CD 1F F4         [ 4] 1149 	call puts 
      000747 84               [ 1] 1150 	pop a 
      000748 AE 05 B8         [ 2] 1151 	ldw x, #err_msg 
      00074B 72 5F 00 0C      [ 1] 1152 	clr acc16 
      00074F 48               [ 1] 1153 	sll a
      000750 72 59 00 0C      [ 1] 1154 	rlc acc16  
      000754 C7 00 0D         [ 1] 1155 	ld acc8, a 
      000757 72 BB 00 0C      [ 2] 1156 	addw x,acc16 
      00075B FE               [ 2] 1157 	ldw x,(x)
      00075C CD 1F F4         [ 4] 1158 	call puts
      00075F CE 00 04         [ 2] 1159 	ldw x,basicptr
      000762 C6 00 01         [ 1] 1160 	ld a,in 
      000765 CD 0F 01         [ 4] 1161 	call prt_basic_line
      000768 AE 07 29         [ 2] 1162 	ldw x,#tk_id 
      00076B CD 1F F4         [ 4] 1163 	call puts 
      00076E C6 00 02         [ 1] 1164 	ld a,in.saved 
      000771 5F               [ 1] 1165 	clrw x 
      000772 97               [ 1] 1166 	ld xl,a 
      000773 72 BB 00 04      [ 2] 1167 	addw x,basicptr 
      000777 F6               [ 1] 1168 	ld a,(x)
      000778 5F               [ 1] 1169 	clrw x 
      000779 97               [ 1] 1170 	ld xl,a 
      00077A CD 08 83         [ 4] 1171 	call print_int
      00077D 72 0D 00 20 37   [ 2] 1172 	btjf flags,#FAUTORUN ,6$
      000782 20 35            [ 2] 1173 	jra 6$
      000784                       1174 1$:	
      000784 88               [ 1] 1175 	push a 
      000785 AE 07 18         [ 2] 1176 	ldw x,#comp_msg
      000788 CD 1F F4         [ 4] 1177 	call puts 
      00078B 84               [ 1] 1178 	pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00078C AE 05 B8         [ 2] 1179 	ldw x, #err_msg 
      00078F 72 5F 00 0C      [ 1] 1180 	clr acc16 
      000793 48               [ 1] 1181 	sll a
      000794 72 59 00 0C      [ 1] 1182 	rlc acc16  
      000798 C7 00 0D         [ 1] 1183 	ld acc8, a 
      00079B 72 BB 00 0C      [ 2] 1184 	addw x,acc16 
      00079F FE               [ 2] 1185 	ldw x,(x)
      0007A0 CD 1F F4         [ 4] 1186 	call puts
      0007A3 AE 16 90         [ 2] 1187 	ldw x,#tib
      0007A6 CD 1F F4         [ 4] 1188 	call puts 
      0007A9 A6 0D            [ 1] 1189 	ld a,#CR 
      0007AB CD 02 C1         [ 4] 1190 	call putc
      0007AE CE 00 00         [ 2] 1191 	ldw x,in.w
      0007B1 CD 20 61         [ 4] 1192 	call spaces
      0007B4 A6 5E            [ 1] 1193 	ld a,#'^
      0007B6 CD 02 C1         [ 4] 1194 	call putc 
      0007B9 AE 17 FF         [ 2] 1195 6$: ldw x,#STACK_EMPTY 
      0007BC 94               [ 1] 1196     ldw sp,x
      0007BD                       1197 warm_start:
      0007BD CD 05 85         [ 4] 1198 	call warm_init
                                   1199 ;----------------------------
                                   1200 ;   BASIC interpreter
                                   1201 ;----------------------------
      0007C0                       1202 cmd_line: ; user interface 
      0007C0 A6 0D            [ 1] 1203 	ld a,#CR 
      0007C2 CD 02 C1         [ 4] 1204 	call putc 
      0007C5 A6 3E            [ 1] 1205 	ld a,#'> 
      0007C7 CD 02 C1         [ 4] 1206 	call putc
      0007CA CD 20 F9         [ 4] 1207 	call readln
      0007CD 72 5D 00 03      [ 1] 1208 	tnz count 
      0007D1 27 ED            [ 1] 1209 	jreq cmd_line
      0007D3 CD 26 D2         [ 4] 1210 	call compile
                                   1211 ; if text begin with a line number
                                   1212 ; the compiler set count to zero    
                                   1213 ; so code is not interpreted
      0007D6 72 5D 00 03      [ 1] 1214 	tnz count 
      0007DA 27 E4            [ 1] 1215 	jreq cmd_line
                                   1216 
                                   1217 ; if direct command 
                                   1218 ; it's ready to interpret 
                                   1219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1220 ;; This is the interpreter loop
                                   1221 ;; for each BASIC code line. 
                                   1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      0007DC                       1223 interpreter: 
      0007DC C6 00 01         [ 1] 1224 	ld a,in 
      0007DF C1 00 03         [ 1] 1225 	cp a,count 
      0007E2 2B 1D            [ 1] 1226 	jrmi interp_loop
      0007E4                       1227 next_line:
      0007E4 72 01 00 20 D7   [ 2] 1228 	btjf flags, #FRUN, cmd_line
      0007E9 CE 00 04         [ 2] 1229 	ldw x,basicptr
      0007EC 72 BB 00 00      [ 2] 1230 	addw x,in.w 
      0007F0 C3 00 1B         [ 2] 1231 	cpw x,txtend 
      0007F3 2A C8            [ 1] 1232 	jrpl warm_start
      0007F5 CF 00 04         [ 2] 1233 	ldw basicptr,x ; start of next line  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0007F8 E6 02            [ 1] 1234 	ld a,(2,x)
      0007FA C7 00 03         [ 1] 1235 	ld count,a 
      0007FD 35 03 00 01      [ 1] 1236 	mov in,#3 ; skip first 3 bytes of line 
      000801                       1237 interp_loop: 
      000801 CD 08 28         [ 4] 1238 	call next_token
      000804 A1 00            [ 1] 1239 	cp a,#TK_NONE 
      000806 27 DC            [ 1] 1240 	jreq next_line 
      000808 A1 80            [ 1] 1241 	cp a,#TK_CMD
      00080A 26 03            [ 1] 1242 	jrne 1$
      00080C FD               [ 4] 1243 	call (x) 
      00080D 20 F2            [ 2] 1244 	jra interp_loop 
      00080F                       1245 1$:	 
      00080F A1 85            [ 1] 1246 	cp a,#TK_VAR
      000811 26 05            [ 1] 1247 	jrne 2$
      000813 CD 0E 00         [ 4] 1248 	call let_var  
      000816 20 E9            [ 2] 1249 	jra interp_loop 
      000818                       1250 2$:	
      000818 A1 06            [ 1] 1251 	cp a,#TK_ARRAY 
      00081A 26 05            [ 1] 1252 	jrne 3$
      00081C CD 0D FD         [ 4] 1253 	call let_array 
      00081F 20 E0            [ 2] 1254 	jra interp_loop
      000821                       1255 3$:	
      000821 A1 0B            [ 1] 1256 	cp a,#TK_COLON 
      000823 27 DC            [ 1] 1257 	jreq interp_loop 
      000825 CC 07 39         [ 2] 1258 	jp syntax_error 
                                   1259 
                                   1260 		
                                   1261 ;--------------------------
                                   1262 ; extract next token from
                                   1263 ; token list 
                                   1264 ; basicptr -> base address 
                                   1265 ; in  -> offset in list array 
                                   1266 ; output:
                                   1267 ;   A 		token attribute
                                   1268 ;   X 		token value if there is one
                                   1269 ;----------------------------------------
      000828                       1270 next_token::
      000828 5F               [ 1] 1271 	clrw x 
      000829 C6 00 01         [ 1] 1272 	ld a,in 
                                   1273 ; don't replace sub by "cp a,count" 
                                   1274 ; if end of line must return with A=0   	
      00082C C0 00 03         [ 1] 1275 	sub a,count 
      00082F 27 51            [ 1] 1276 	jreq 9$ ; end of line 
      000831                       1277 0$: 
      000831 55 00 01 00 02   [ 1] 1278 	mov in.saved,in ; in case "_unget_token" needed 
      000836 90 CE 00 04      [ 2] 1279 	ldw y,basicptr 
      00083A 91 D6 00         [ 4] 1280 	ld a,([in.w],y)
      00083D 72 5C 00 01      [ 1] 1281 	inc in  
      000841 4D               [ 1] 1282 	tnz a 
      000842 2B 27            [ 1] 1283 	jrmi 6$
      000844 A1 06            [ 1] 1284 	cp a,#TK_ARRAY
      000846 2A 3A            [ 1] 1285 	jrpl 9$  ; no attribute for these
      000848                       1286 1$: ; 
      000848 A1 03            [ 1] 1287 	cp a,#TK_CHAR
      00084A 26 0B            [ 1] 1288 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00084C 41               [ 1] 1289 	exg a,xl
      00084D 91 D6 00         [ 4] 1290 	ld a,([in.w],y)
      000850 72 5C 00 01      [ 1] 1291 	inc in 
      000854 41               [ 1] 1292 	exg a,xl  
      000855 20 2B            [ 2] 1293 	jra 9$ 
      000857 A1 02            [ 1] 1294 2$:	cp a,#TK_QSTR 
      000859 26 27            [ 1] 1295 	jrne 9$
      00085B 93               [ 1] 1296 	ldw x,y 
      00085C 72 BB 00 00      [ 2] 1297 	addw x,in.w ; pointer to string 
                                   1298 ; move pointer after string 
      000860 91 6D 00         [ 4] 1299 3$:	tnz ([in.w],y)
      000863 27 19            [ 1] 1300 	jreq 8$
      000865 72 5C 00 01      [ 1] 1301 	inc in 
      000869 20 F5            [ 2] 1302 	jra 3$
      00086B                       1303 6$: 
      00086B 72 B9 00 00      [ 2] 1304 	addw y,in.w 
      00086F 90 FE            [ 2] 1305 	ldw y,(y)
      000871 A1 84            [ 1] 1306 	cp a,#TK_INTGR
      000873 2A 04            [ 1] 1307 	jrpl 7$
      000875 90 DE 1E FC      [ 2] 1308 	ldw y,(code_addr,y) 
      000879 51               [ 1] 1309 7$:	exgw x,y 
      00087A 72 5C 00 01      [ 1] 1310 	inc in
      00087E 72 5C 00 01      [ 1] 1311 8$:	inc in 
      000882                       1312 9$: 
      000882 81               [ 4] 1313 	ret	
                                   1314 
                                   1315 ;-----------------------------------
                                   1316 ; print a 16 bit integer 
                                   1317 ; using variable 'base' as conversion
                                   1318 ; format.
                                   1319 ; input:
                                   1320 ;   X       integer to print 
                                   1321 ;   'base'    conversion base 
                                   1322 ; output:
                                   1323 ;   none 
                                   1324 ;-----------------------------------
      000883                       1325 print_int:
      000883 72 5F 00 0B      [ 1] 1326 	clr acc24 
      000887 CF 00 0C         [ 2] 1327 	ldw acc16,x 
      00088A 72 0F 00 0C 04   [ 2] 1328 	btjf acc16,#7,prti24
      00088F 72 53 00 0B      [ 1] 1329 	cpl acc24 
                                   1330 	
                                   1331 ;------------------------------------
                                   1332 ; print integer in acc24 
                                   1333 ; input:
                                   1334 ;	acc24 		integer to print 
                                   1335 ;	'base' 		numerical base for conversion 
                                   1336 ;   'tab_width' field width 
                                   1337 ;  output:
                                   1338 ;    A          string length
                                   1339 ;------------------------------------
      000893                       1340 prti24:
      000893 CD 08 9F         [ 4] 1341     call itoa  ; conversion entier en  .asciz
      000896 CD 27 71         [ 4] 1342 	call right_align  
      000899 88               [ 1] 1343 	push a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00089A CD 1F F4         [ 4] 1344 	call puts
      00089D 84               [ 1] 1345 	pop a 
      00089E 81               [ 4] 1346     ret	
                                   1347 
                                   1348 ;------------------------------------
                                   1349 ; convert integer in acc24 to string
                                   1350 ; input:
                                   1351 ;   'base'	conversion base 
                                   1352 ;	acc24	integer to convert
                                   1353 ; output:
                                   1354 ;   X  		pointer to first char of string
                                   1355 ;   A       string length
                                   1356 ;------------------------------------
                           000001  1357 	SIGN=1  ; integer sign 
                           000002  1358 	LEN=2 
                           000003  1359 	PSTR=3
                           000004  1360 	VSIZE=4 ;locals size
      00089F                       1361 itoa::
      00089F                       1362 	_vars VSIZE
      00089F 52 04            [ 2]    1     sub sp,#VSIZE 
      0008A1 0F 02            [ 1] 1363 	clr (LEN,sp) ; string length  
      0008A3 0F 01            [ 1] 1364 	clr (SIGN,sp)    ; sign
      0008A5 C6 00 0A         [ 1] 1365 	ld a,base 
      0008A8 A1 0A            [ 1] 1366 	cp a,#10
      0008AA 26 0A            [ 1] 1367 	jrne 1$
                                   1368 	; base 10 string display with negative sign if bit 23==1
      0008AC 72 0F 00 0B 05   [ 2] 1369 	btjf acc24,#7,1$
      0008B1 03 01            [ 1] 1370 	cpl (SIGN,sp)
      0008B3 CD 09 6C         [ 4] 1371 	call neg_acc24
      0008B6                       1372 1$:
                                   1373 ; initialize string pointer 
      0008B6 AE 16 90         [ 2] 1374 	ldw x,#tib 
      0008B9 1C 00 50         [ 2] 1375 	addw x,#TIB_SIZE
      0008BC 5A               [ 2] 1376 	decw x 
      0008BD 7F               [ 1] 1377 	clr (x)
      0008BE 5A               [ 2] 1378 	decw x 
      0008BF A6 20            [ 1] 1379 	ld a,#32
      0008C1 F7               [ 1] 1380 	ld (x),a
      0008C2 0C 02            [ 1] 1381 	inc (LEN,sp)
      0008C4                       1382 itoa_loop:
      0008C4 C6 00 0A         [ 1] 1383     ld a,base
      0008C7 1F 03            [ 2] 1384 	ldw (PSTR,sp),x 
      0008C9 CD 09 0A         [ 4] 1385     call divu24_8 ; acc24/A 
      0008CC 1E 03            [ 2] 1386 	ldw x,(PSTR,sp)
      0008CE AB 30            [ 1] 1387     add a,#'0  ; remainder of division
      0008D0 A1 3A            [ 1] 1388     cp a,#'9+1
      0008D2 2B 02            [ 1] 1389     jrmi 2$
      0008D4 AB 07            [ 1] 1390     add a,#7 
      0008D6                       1391 2$:	
      0008D6 5A               [ 2] 1392 	decw x
      0008D7 F7               [ 1] 1393     ld (x),a
      0008D8 0C 02            [ 1] 1394 	inc (LEN,sp)
                                   1395 	; if acc24==0 conversion done
      0008DA C6 00 0B         [ 1] 1396 	ld a,acc24
      0008DD CA 00 0C         [ 1] 1397 	or a,acc16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0008E0 CA 00 0D         [ 1] 1398 	or a,acc8
      0008E3 26 DF            [ 1] 1399     jrne itoa_loop
                                   1400 	;conversion done, next add '$' or '-' as required
      0008E5 C6 00 0A         [ 1] 1401 	ld a,base 
      0008E8 A1 10            [ 1] 1402 	cp a,#16
      0008EA 27 08            [ 1] 1403 	jreq 8$
      0008EC 7B 01            [ 1] 1404 	ld a,(SIGN,sp)
      0008EE 27 15            [ 1] 1405     jreq 10$
      0008F0 A6 2D            [ 1] 1406     ld a,#'-
      0008F2 20 0D            [ 2] 1407 	jra 9$ 
                                   1408 ; don't print more than 4 digits
                                   1409 ; in hexadecimal to avoid '-' sign 
                                   1410 ; extend display 	
      0008F4 7B 02            [ 1] 1411 8$: ld a,(LEN,sp) 
      0008F6 A1 06            [ 1] 1412 	cp a,#6 
      0008F8 2B 05            [ 1] 1413 	jrmi 81$
      0008FA 5C               [ 1] 1414 	incw x
      0008FB 0A 02            [ 1] 1415 	dec (LEN,sp)
      0008FD 20 F5            [ 2] 1416 	jra 8$
      0008FF                       1417 81$:	
      0008FF A6 24            [ 1] 1418 	ld a,#'$ 
      000901 5A               [ 2] 1419 9$: decw x
      000902 F7               [ 1] 1420     ld (x),a
      000903 0C 02            [ 1] 1421 	inc (LEN,sp)
      000905                       1422 10$:
      000905 7B 02            [ 1] 1423 	ld a,(LEN,sp)
      000907                       1424 	_drop VSIZE
      000907 5B 04            [ 2]    1     addw sp,#VSIZE 
      000909 81               [ 4] 1425 	ret
                                   1426 
                                   1427 ;-------------------------------------
                                   1428 ; divide uint24_t by uint8_t
                                   1429 ; used to convert uint24_t to string
                                   1430 ; input:
                                   1431 ;	acc24	dividend
                                   1432 ;   A 		divisor
                                   1433 ; output:
                                   1434 ;   acc24	quotient
                                   1435 ;   A		remainder
                                   1436 ;------------------------------------- 
                                   1437 ; offset  on sp of arguments and locals
                           000001  1438 	U8   = 1   ; divisor on stack
                           000001  1439 	VSIZE =1
      00090A                       1440 divu24_8:
      00090A 89               [ 2] 1441 	pushw x ; save x
      00090B 88               [ 1] 1442 	push a 
                                   1443 	; ld dividend UU:MM bytes in X
      00090C C6 00 0B         [ 1] 1444 	ld a, acc24
      00090F 95               [ 1] 1445 	ld xh,a
      000910 C6 00 0C         [ 1] 1446 	ld a,acc24+1
      000913 97               [ 1] 1447 	ld xl,a
      000914 7B 01            [ 1] 1448 	ld a,(U8,SP) ; divisor
      000916 62               [ 2] 1449 	div x,a ; UU:MM/U8
      000917 88               [ 1] 1450 	push a  ;save remainder
      000918 9E               [ 1] 1451 	ld a,xh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000919 C7 00 0B         [ 1] 1452 	ld acc24,a
      00091C 9F               [ 1] 1453 	ld a,xl
      00091D C7 00 0C         [ 1] 1454 	ld acc24+1,a
      000920 84               [ 1] 1455 	pop a
      000921 95               [ 1] 1456 	ld xh,a
      000922 C6 00 0D         [ 1] 1457 	ld a,acc24+2
      000925 97               [ 1] 1458 	ld xl,a
      000926 7B 01            [ 1] 1459 	ld a,(U8,sp) ; divisor
      000928 62               [ 2] 1460 	div x,a  ; R:LL/U8
      000929 6B 01            [ 1] 1461 	ld (U8,sp),a ; save remainder
      00092B 9F               [ 1] 1462 	ld a,xl
      00092C C7 00 0D         [ 1] 1463 	ld acc24+2,a
      00092F 84               [ 1] 1464 	pop a
      000930 85               [ 2] 1465 	popw x
      000931 81               [ 4] 1466 	ret
                                   1467 
                                   1468 ;--------------------------------------
                                   1469 ; unsigned multiply uint24_t by uint8_t
                                   1470 ; use to convert numerical string to uint24_t
                                   1471 ; input:
                                   1472 ;	acc24	uint24_t 
                                   1473 ;   A		uint8_t
                                   1474 ; output:
                                   1475 ;   acc24   A*acc24
                                   1476 ;-------------------------------------
                                   1477 ; local variables offset  on sp
                           000003  1478 	U8   = 3   ; A pushed on stack
                           000002  1479 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1480 	OVFH = 1  ; multiplication overflow high byte
                           000003  1481 	VSIZE = 3
      000932                       1482 mulu24_8:
      000932 89               [ 2] 1483 	pushw x    ; save X
                                   1484 	; local variables
      000933 88               [ 1] 1485 	push a     ; U8
      000934 5F               [ 1] 1486 	clrw x     ; initialize overflow to 0
      000935 89               [ 2] 1487 	pushw x    ; multiplication overflow
                                   1488 ; multiply low byte.
      000936 C6 00 0D         [ 1] 1489 	ld a,acc24+2
      000939 97               [ 1] 1490 	ld xl,a
      00093A 7B 03            [ 1] 1491 	ld a,(U8,sp)
      00093C 42               [ 4] 1492 	mul x,a
      00093D 9F               [ 1] 1493 	ld a,xl
      00093E C7 00 0D         [ 1] 1494 	ld acc24+2,a
      000941 9E               [ 1] 1495 	ld a, xh
      000942 6B 02            [ 1] 1496 	ld (OVFL,sp),a
                                   1497 ; multipy middle byte
      000944 C6 00 0C         [ 1] 1498 	ld a,acc24+1
      000947 97               [ 1] 1499 	ld xl,a
      000948 7B 03            [ 1] 1500 	ld a, (U8,sp)
      00094A 42               [ 4] 1501 	mul x,a
                                   1502 ; add overflow to this partial product
      00094B 72 FB 01         [ 2] 1503 	addw x,(OVFH,sp)
      00094E 9F               [ 1] 1504 	ld a,xl
      00094F C7 00 0C         [ 1] 1505 	ld acc24+1,a
      000952 4F               [ 1] 1506 	clr a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000953 A9 00            [ 1] 1507 	adc a,#0
      000955 6B 01            [ 1] 1508 	ld (OVFH,sp),a
      000957 9E               [ 1] 1509 	ld a,xh
      000958 6B 02            [ 1] 1510 	ld (OVFL,sp),a
                                   1511 ; multiply most signficant byte	
      00095A C6 00 0B         [ 1] 1512 	ld a, acc24
      00095D 97               [ 1] 1513 	ld xl, a
      00095E 7B 03            [ 1] 1514 	ld a, (U8,sp)
      000960 42               [ 4] 1515 	mul x,a
      000961 72 FB 01         [ 2] 1516 	addw x, (OVFH,sp)
      000964 9F               [ 1] 1517 	ld a, xl
      000965 C7 00 0B         [ 1] 1518 	ld acc24,a
      000968 5B 03            [ 2] 1519     addw sp,#VSIZE
      00096A 85               [ 2] 1520 	popw x
      00096B 81               [ 4] 1521 	ret
                                   1522 
                                   1523 ;------------------------------------
                                   1524 ;  two's complement acc24
                                   1525 ;  input:
                                   1526 ;		acc24 variable
                                   1527 ;  output:
                                   1528 ;		acc24 variable
                                   1529 ;-------------------------------------
      00096C                       1530 neg_acc24:
      00096C 72 53 00 0D      [ 1] 1531 	cpl acc24+2
      000970 72 53 00 0C      [ 1] 1532 	cpl acc24+1
      000974 72 53 00 0B      [ 1] 1533 	cpl acc24
      000978 A6 01            [ 1] 1534 	ld a,#1
      00097A CB 00 0D         [ 1] 1535 	add a,acc24+2
      00097D C7 00 0D         [ 1] 1536 	ld acc24+2,a
      000980 4F               [ 1] 1537 	clr a
      000981 C9 00 0C         [ 1] 1538 	adc a,acc24+1
      000984 C7 00 0C         [ 1] 1539 	ld acc24+1,a 
      000987 4F               [ 1] 1540 	clr a 
      000988 C9 00 0B         [ 1] 1541 	adc a,acc24 
      00098B C7 00 0B         [ 1] 1542 	ld acc24,a 
      00098E 81               [ 4] 1543 	ret
                                   1544 
                                   1545 
                                   1546 
                                   1547 
                                   1548 ;------------------------------------
                                   1549 ; convert alpha to uppercase
                                   1550 ; input:
                                   1551 ;    a  character to convert
                                   1552 ; output:
                                   1553 ;    a  uppercase character
                                   1554 ;------------------------------------
      00098F                       1555 to_upper::
      00098F A1 61            [ 1] 1556 	cp a,#'a
      000991 2A 01            [ 1] 1557 	jrpl 1$
      000993 81               [ 4] 1558 0$:	ret
      000994 A1 7A            [ 1] 1559 1$: cp a,#'z	
      000996 22 FB            [ 1] 1560 	jrugt 0$
      000998 A0 20            [ 1] 1561 	sub a,#32
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00099A 81               [ 4] 1562 	ret
                                   1563 	
                                   1564 ;------------------------------------
                                   1565 ; convert pad content in integer
                                   1566 ; input:
                                   1567 ;    x		.asciz to convert
                                   1568 ; output:
                                   1569 ;    acc24      int24_t
                                   1570 ;------------------------------------
                                   1571 	; local variables
                           000001  1572 	SIGN=1 ; 1 byte, 
                           000002  1573 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  1574 	TEMP=3 ; 1 byte, temporary storage
                           000003  1575 	VSIZE=3 ; 3 bytes reserved for local storage
      00099B                       1576 atoi24::
      00099B 89               [ 2] 1577 	pushw x 
      00099C                       1578 	_vars VSIZE
      00099C 52 03            [ 2]    1     sub sp,#VSIZE 
                                   1579 	; acc24=0 
      00099E 72 5F 00 0B      [ 1] 1580 	clr acc24    
      0009A2 72 5F 00 0C      [ 1] 1581 	clr acc16
      0009A6 72 5F 00 0D      [ 1] 1582 	clr acc8 
      0009AA 0F 01            [ 1] 1583 	clr (SIGN,sp)
      0009AC A6 0A            [ 1] 1584 	ld a,#10
      0009AE 6B 02            [ 1] 1585 	ld (BASE,sp),a ; default base decimal
      0009B0 F6               [ 1] 1586 	ld a,(x)
      0009B1 27 47            [ 1] 1587 	jreq 9$  ; completed if 0
      0009B3 A1 2D            [ 1] 1588 	cp a,#'-
      0009B5 26 04            [ 1] 1589 	jrne 1$
      0009B7 03 01            [ 1] 1590 	cpl (SIGN,sp)
      0009B9 20 08            [ 2] 1591 	jra 2$
      0009BB A1 24            [ 1] 1592 1$: cp a,#'$
      0009BD 26 06            [ 1] 1593 	jrne 3$
      0009BF A6 10            [ 1] 1594 	ld a,#16
      0009C1 6B 02            [ 1] 1595 	ld (BASE,sp),a
      0009C3 5C               [ 1] 1596 2$:	incw x
      0009C4 F6               [ 1] 1597 	ld a,(x)
      0009C5                       1598 3$:	
      0009C5 A1 61            [ 1] 1599 	cp a,#'a
      0009C7 2B 02            [ 1] 1600 	jrmi 4$
      0009C9 A0 20            [ 1] 1601 	sub a,#32
      0009CB A1 30            [ 1] 1602 4$:	cp a,#'0
      0009CD 2B 2B            [ 1] 1603 	jrmi 9$
      0009CF A0 30            [ 1] 1604 	sub a,#'0
      0009D1 A1 0A            [ 1] 1605 	cp a,#10
      0009D3 2B 06            [ 1] 1606 	jrmi 5$
      0009D5 A0 07            [ 1] 1607 	sub a,#7
      0009D7 11 02            [ 1] 1608 	cp a,(BASE,sp)
      0009D9 2A 1F            [ 1] 1609 	jrpl 9$
      0009DB 6B 03            [ 1] 1610 5$:	ld (TEMP,sp),a
      0009DD 7B 02            [ 1] 1611 	ld a,(BASE,sp)
      0009DF CD 09 32         [ 4] 1612 	call mulu24_8
      0009E2 7B 03            [ 1] 1613 	ld a,(TEMP,sp)
      0009E4 CB 00 0D         [ 1] 1614 	add a,acc24+2
      0009E7 C7 00 0D         [ 1] 1615 	ld acc24+2,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0009EA 4F               [ 1] 1616 	clr a
      0009EB C9 00 0C         [ 1] 1617 	adc a,acc24+1
      0009EE C7 00 0C         [ 1] 1618 	ld acc24+1,a
      0009F1 4F               [ 1] 1619 	clr a
      0009F2 C9 00 0B         [ 1] 1620 	adc a,acc24
      0009F5 C7 00 0B         [ 1] 1621 	ld acc24,a
      0009F8 20 C9            [ 2] 1622 	jra 2$
      0009FA 0D 01            [ 1] 1623 9$:	tnz (SIGN,sp)
      0009FC 27 03            [ 1] 1624     jreq atoi_exit
      0009FE CD 09 6C         [ 4] 1625     call neg_acc24
      000A01                       1626 atoi_exit: 
      000A01                       1627 	_drop VSIZE
      000A01 5B 03            [ 2]    1     addw sp,#VSIZE 
      000A03 85               [ 2] 1628 	popw x ; restore x
      000A04 81               [ 4] 1629 	ret
                                   1630 
                                   1631 
                                   1632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1633 ;;   TINY BASIC  operators,
                                   1634 ;;   commands and functions 
                                   1635 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1636 
                                   1637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1638 ;;  Arithmetic operators
                                   1639 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1640 
                                   1641 ;debug support
                           000001  1642 DEBUG_PRT=1
                           000001  1643 .if DEBUG_PRT 
                           000001  1644 	REGA=1
                           000002  1645 	SAVEB=2
                           000003  1646 	REGX=3
                           000005  1647 	REGY=5
                           000007  1648 	ACC24=7
                           000009  1649 	VSIZE=9 
      000A05                       1650 printxy:
      000A05                       1651 	_vars VSIZE 
      000A05 52 09            [ 2]    1     sub sp,#VSIZE 
      000A07 6B 01            [ 1] 1652 	ld (REGA,sp),a 
      000A09 C6 00 0A         [ 1] 1653 	ld a,base 
      000A0C 6B 02            [ 1] 1654 	ld (SAVEB,sp),a
      000A0E 1F 03            [ 2] 1655 	ldw (REGX,sp),x
      000A10 17 05            [ 2] 1656 	ldw (REGY,sp),y
      000A12 CE 00 0B         [ 2] 1657 	ldw x,acc24 
      000A15 C6 00 0D         [ 1] 1658 	ld a,acc8 
      000A18 1F 07            [ 2] 1659 	ldw (ACC24,sp),x 
      000A1A 6B 09            [ 1] 1660 	ld (ACC24+2,sp),a 
      000A1C 35 10 00 0A      [ 1] 1661 	mov base,#16 
      000A20 5F               [ 1] 1662 	clrw x 
      000A21 7B 01            [ 1] 1663 	ld a,(REGA,sp)
      000A23 97               [ 1] 1664 	ld xl,a 
      000A24 CD 08 83         [ 4] 1665 	call print_int
      000A27 A6 20            [ 1] 1666 	ld a,#SPACE 
      000A29 CD 02 C1         [ 4] 1667 	call putc  
      000A2C 1E 03            [ 2] 1668 	ldw x,(REGX,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000A2E CD 08 83         [ 4] 1669 	call print_int 
      000A31 A6 20            [ 1] 1670 	ld a,#SPACE 
      000A33 CD 02 C1         [ 4] 1671 	call putc  
      000A36 1E 05            [ 2] 1672 	ldw x,(REGY,sp)
      000A38 CD 08 83         [ 4] 1673 	call print_int 
      000A3B A6 0D            [ 1] 1674 	ld a,#CR 
      000A3D CD 02 C1         [ 4] 1675 	call putc 
      000A40 7B 09            [ 1] 1676 	ld a,(ACC24+2,sp)
      000A42 1E 07            [ 2] 1677 	ldw x,(ACC24,sp)
      000A44 CF 00 0B         [ 2] 1678 	ldw acc24,x 
      000A47 C7 00 0D         [ 1] 1679 	ld acc8,a
      000A4A 7B 02            [ 1] 1680 	ld a,(SAVEB,sp)
      000A4C C7 00 0A         [ 1] 1681 	ld base,a 
      000A4F 7B 01            [ 1] 1682 	ld a,(REGA,sp)
      000A51 1E 03            [ 2] 1683 	ldw x,(REGX,sp)
      000A53 16 05            [ 2] 1684 	ldw y,(REGY,sp)
      000A55                       1685 	_drop VSIZE 
      000A55 5B 09            [ 2]    1     addw sp,#VSIZE 
      000A57 81               [ 4] 1686 	ret 
                                   1687 .endif 
                                   1688 
                                   1689 
                                   1690 ;--------------------------------------
                                   1691 ;  multiply 2 uint16_t return uint32_t
                                   1692 ;  input:
                                   1693 ;     x       uint16_t 
                                   1694 ;     y       uint16_t 
                                   1695 ;  output:
                                   1696 ;     x       product bits 15..0
                                   1697 ;     y       product bits 31..16 
                                   1698 ;---------------------------------------
                           000001  1699 		U1=1  ; uint16_t 
                           000003  1700 		DBL=3 ; uint32_t
                           000006  1701 		VSIZE=6
      000A58                       1702 umstar:
      000A58                       1703 	_vars VSIZE 
      000A58 52 06            [ 2]    1     sub sp,#VSIZE 
      000A5A 1F 01            [ 2] 1704 	ldw (U1,sp),x 
                                   1705 ;initialize bits 31..16 of 
                                   1706 ;product to zero 
      000A5C 0F 03            [ 1] 1707 	clr (DBL,sp)
      000A5E 0F 04            [ 1] 1708 	clr (DBL+1,sp)
                                   1709 ; produc U1L*U2L 
      000A60 90 9F            [ 1] 1710 	ld a,yl 
      000A62 42               [ 4] 1711 	mul x,a 
      000A63 1F 05            [ 2] 1712 	ldw (DBL+2,sp),x
                                   1713 ; product U1H*U2L 
      000A65 7B 01            [ 1] 1714 	ld a,(U1,sp) ; xh 
      000A67 93               [ 1] 1715 	ldw x,y
      000A68 42               [ 4] 1716 	mul x,a 
      000A69 4F               [ 1] 1717 	clr a 
      000A6A 72 FB 04         [ 2] 1718 	addw x,(DBL+1,sp) 
      000A6D 4F               [ 1] 1719 	clr a 
      000A6E 19 03            [ 1] 1720 	adc a,(DBL,sp) 
      000A70 6B 03            [ 1] 1721 	ld (DBL,sp),a ; bits 23..17 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000A72 1F 04            [ 2] 1722 	ldw (DBL+1,sp),x ; bits 15..0 
                                   1723 ; product U1L*U2H
      000A74 90 5E            [ 1] 1724 	swapw y 
      000A76 93               [ 1] 1725 	ldw x,y
      000A77 7B 02            [ 1] 1726 	ld a,(U1+1,sp)
      000A79 42               [ 4] 1727 	mul x,a
      000A7A 72 FB 04         [ 2] 1728 	addw x,(DBL+1,sp)
      000A7D 4F               [ 1] 1729 	clr a 
      000A7E 19 03            [ 1] 1730 	adc a,(DBL,sp)
      000A80 6B 03            [ 1] 1731 	ld (DBL,sp),a 
      000A82 1F 04            [ 2] 1732 	ldw (DBL+1,sp),x 
                                   1733 ; product U1H*U2H 	
      000A84 7B 01            [ 1] 1734 	ld a,(U1,sp)
      000A86 93               [ 1] 1735 	ldw x,y  
      000A87 42               [ 4] 1736 	mul x,a 
      000A88 72 FB 03         [ 2] 1737 	addw x,(DBL,sp)
      000A8B 90 93            [ 1] 1738 	ldw y,x 
      000A8D 1E 05            [ 2] 1739 	ldw x,(DBL+2,sp)
      000A8F                       1740 	_drop VSIZE 
      000A8F 5B 06            [ 2]    1     addw sp,#VSIZE 
      000A91 81               [ 4] 1741 	ret
                                   1742 
                                   1743 
                                   1744 ;-------------------------------------
                                   1745 ; multiply 2 integers
                                   1746 ; input:
                                   1747 ;  	x       n1 
                                   1748 ;   y 		n2 
                                   1749 ; output:
                                   1750 ;	X        N1*N2 bits 15..0
                                   1751 ;   Y        N1*N2 bits 31..16 
                                   1752 ;-------------------------------------
                           000001  1753 	SIGN=1
                           000001  1754 	VSIZE=1
      000A92                       1755 multiply:
      000A92                       1756 	_vars VSIZE 
      000A92 52 01            [ 2]    1     sub sp,#VSIZE 
      000A94 0F 01            [ 1] 1757 	clr (SIGN,sp)
      000A96 9E               [ 1] 1758 	ld a,xh 
      000A97 A4 80            [ 1] 1759 	and a,#0x80
      000A99 2A 03            [ 1] 1760 	jrpl 1$
      000A9B 03 01            [ 1] 1761 	cpl (SIGN,sp)
      000A9D 50               [ 2] 1762 	negw x 
      000A9E                       1763 1$:	
      000A9E 90 9E            [ 1] 1764 	ld a,yh
      000AA0 A4 80            [ 1] 1765 	and a,#0x80  
      000AA2 2A 04            [ 1] 1766 	jrpl 2$ 
      000AA4 03 01            [ 1] 1767 	cpl (SIGN,sp)
      000AA6 90 50            [ 2] 1768 	negw y 
      000AA8                       1769 2$:	
      000AA8 CD 0A 58         [ 4] 1770 	call umstar
      000AAB 7B 01            [ 1] 1771 	ld a,(SIGN,sp)
      000AAD 27 03            [ 1] 1772 	jreq 3$
      000AAF CD 0A DF         [ 4] 1773 	call dneg 
      000AB2                       1774 3$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000AB2                       1775 	_drop VSIZE 
      000AB2 5B 01            [ 2]    1     addw sp,#VSIZE 
      000AB4 81               [ 4] 1776 	ret
                                   1777 
                                   1778 ;--------------------------------------
                                   1779 ; divide uint32_t/uint16_t
                                   1780 ; return:  quotient and remainder 
                                   1781 ; quotient expected to be uint16_t 
                                   1782 ; input:
                                   1783 ;   DBLDIVDND    on stack 
                                   1784 ;   X            divisor 
                                   1785 ; output:
                                   1786 ;   X            quotient 
                                   1787 ;   Y            remainder 
                                   1788 ;---------------------------------------
                           000003  1789 	VSIZE=3
      000AB5                       1790 	_argofs VSIZE 
                           000005     1     ARG_OFS=2+VSIZE 
      000AB5                       1791 	_arg DBLDIVDND 1
                           000006     1     DBLDIVDND=ARG_OFS+1 
                                   1792 	; local variables 
                           000001  1793 	DIVISOR=1 
                           000003  1794 	CNTR=3 
      000AB5                       1795 udiv32_16:
      000AB5                       1796 	_vars VSIZE 
      000AB5 52 03            [ 2]    1     sub sp,#VSIZE 
      000AB7 1F 01            [ 2] 1797 	ldw (DIVISOR,sp),x	; save divisor 
      000AB9 1E 08            [ 2] 1798 	ldw x,(DBLDIVDND+2,sp)  ; bits 15..0
      000ABB 16 06            [ 2] 1799 	ldw y,(DBLDIVDND,sp) ; bits 31..16
      000ABD 90 5D            [ 2] 1800 	tnzw y
      000ABF 26 06            [ 1] 1801 	jrne long_division 
      000AC1 16 01            [ 2] 1802 	ldw y,(DIVISOR,sp)
      000AC3 65               [ 2] 1803 	divw x,y
      000AC4                       1804 	_drop VSIZE 
      000AC4 5B 03            [ 2]    1     addw sp,#VSIZE 
      000AC6 81               [ 4] 1805 	ret
      000AC7                       1806 long_division:
      000AC7 51               [ 1] 1807 	exgw x,y ; hi in x, lo in y 
      000AC8 A6 11            [ 1] 1808 	ld a,#17 
      000ACA 6B 03            [ 1] 1809 	ld (CNTR,sp),a
      000ACC                       1810 1$:
      000ACC 13 01            [ 2] 1811 	cpw x,(DIVISOR,sp)
      000ACE 2B 03            [ 1] 1812 	jrmi 2$
      000AD0 72 F0 01         [ 2] 1813 	subw x,(DIVISOR,sp)
      000AD3 8C               [ 1] 1814 2$:	ccf 
      000AD4 90 59            [ 2] 1815 	rlcw y 
      000AD6 59               [ 2] 1816 	rlcw x 
      000AD7 0A 03            [ 1] 1817 	dec (CNTR,sp)
      000AD9 26 F1            [ 1] 1818 	jrne 1$
      000ADB 51               [ 1] 1819 	exgw x,y 
      000ADC                       1820 	_drop VSIZE 
      000ADC 5B 03            [ 2]    1     addw sp,#VSIZE 
      000ADE 81               [ 4] 1821 	ret
                                   1822 
                                   1823 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1824 ; negate double int.
                                   1825 ; input:
                                   1826 ;   x     bits 15..0
                                   1827 ;   y     bits 31..16
                                   1828 ; output: 
                                   1829 ;   x     bits 15..0
                                   1830 ;   y     bits 31..16
                                   1831 ;-----------------------------
      000ADF                       1832 dneg:
      000ADF 53               [ 2] 1833 	cplw x 
      000AE0 90 53            [ 2] 1834 	cplw y 
      000AE2 1C 00 01         [ 2] 1835 	addw x,#1 
      000AE5 24 02            [ 1] 1836 	jrnc 1$
      000AE7 90 5C            [ 1] 1837 	incw y 
      000AE9 81               [ 4] 1838 1$: ret 
                                   1839 
                                   1840 
                                   1841 ;--------------------------------
                                   1842 ; sign extend single to double
                                   1843 ; input:
                                   1844 ;   x    int16_t
                                   1845 ; output:
                                   1846 ;   x    int32_t bits 15..0
                                   1847 ;   y    int32_t bits 31..16
                                   1848 ;--------------------------------
      000AEA                       1849 dbl_sign_extend:
      000AEA 90 5F            [ 1] 1850 	clrw y
      000AEC 9E               [ 1] 1851 	ld a,xh 
      000AED A4 80            [ 1] 1852 	and a,#0x80 
      000AEF 27 02            [ 1] 1853 	jreq 1$
      000AF1 90 53            [ 2] 1854 	cplw y
      000AF3 81               [ 4] 1855 1$: ret 	
                                   1856 
                                   1857 
                                   1858 ;----------------------------------
                                   1859 ;  euclidian divide dbl/n1 
                                   1860 ;  ref: https://en.wikipedia.org/wiki/Euclidean_division
                                   1861 ; input:
                                   1862 ;    dbl    int32_t on stack 
                                   1863 ;    x 		n1   int16_t  disivor  
                                   1864 ; output:
                                   1865 ;    X      dbl/x  int16_t 
                                   1866 ;    Y      remainder int16_t 
                                   1867 ;----------------------------------
                           000008  1868 	VSIZE=8
      000AF4                       1869 	_argofs VSIZE 
                           00000A     1     ARG_OFS=2+VSIZE 
      000AF4                       1870 	_arg DIVDNDHI 1 
                           00000B     1     DIVDNDHI=ARG_OFS+1 
      000AF4                       1871 	_arg DIVDNDLO 3
                           00000D     1     DIVDNDLO=ARG_OFS+3 
                                   1872 	; local variables
                           000001  1873 	DBLHI=1
                           000003  1874 	DBLLO=3 
                           000005  1875 	SDIVSR=5 ; sign divisor
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           000006  1876 	SQUOT=6 ; sign dividend 
                           000007  1877 	DIVISR=7 ; divisor 
      000AF4                       1878 div32_16:
      000AF4                       1879 	_vars VSIZE 
      000AF4 52 08            [ 2]    1     sub sp,#VSIZE 
      000AF6 0F 05            [ 1] 1880 	clr (SDIVSR,sp)
      000AF8 0F 06            [ 1] 1881 	clr (SQUOT,sp)
                                   1882 ; copy arguments 
      000AFA 16 0B            [ 2] 1883 	ldw y,(DIVDNDHI,sp)
      000AFC 17 01            [ 2] 1884 	ldw (DBLHI,sp),y
      000AFE 16 0D            [ 2] 1885 	ldw y,(DIVDNDLO,sp)
      000B00 17 03            [ 2] 1886 	ldw (DBLLO,sp),y 
                                   1887 ; check for 0 divisor
      000B02 5D               [ 2] 1888 	tnzw x 
      000B03 26 05            [ 1] 1889     jrne 0$
      000B05 A6 04            [ 1] 1890 	ld a,#ERR_DIV0 
      000B07 CC 07 3B         [ 2] 1891 	jp tb_error 
                                   1892 ; check divisor sign 	
      000B0A 9E               [ 1] 1893 0$:	ld a,xh 
      000B0B A4 80            [ 1] 1894 	and a,#0x80 
      000B0D 27 05            [ 1] 1895 	jreq 1$
      000B0F 03 05            [ 1] 1896 	cpl (SDIVSR,sp)
      000B11 03 06            [ 1] 1897 	cpl (SQUOT,sp)
      000B13 50               [ 2] 1898 	negw x
      000B14 1F 07            [ 2] 1899 1$:	ldw (DIVISR,sp),x
                                   1900 ; check dividend sign 	 
      000B16 7B 01            [ 1] 1901  	ld a,(DBLHI,sp) 
      000B18 A4 80            [ 1] 1902 	and a,#0x80 
      000B1A 27 0D            [ 1] 1903 	jreq 2$ 
      000B1C 03 06            [ 1] 1904 	cpl (SQUOT,sp)
      000B1E 1E 03            [ 2] 1905 	ldw x,(DBLLO,sp)
      000B20 16 01            [ 2] 1906 	ldw y,(DBLHI,sp)
      000B22 CD 0A DF         [ 4] 1907 	call dneg 
      000B25 1F 03            [ 2] 1908 	ldw (DBLLO,sp),x 
      000B27 17 01            [ 2] 1909 	ldw (DBLHI,sp),y 
      000B29 1E 07            [ 2] 1910 2$:	ldw x,(DIVISR,sp)
      000B2B CD 0A B5         [ 4] 1911 	call udiv32_16
      000B2E 90 5D            [ 2] 1912 	tnzw y 
      000B30 27 11            [ 1] 1913 	jreq 3$ 
                                   1914 ; x=quotient 
                                   1915 ; y=remainder 
                                   1916 ; if SDIVSR XOR SQUOT increment quotient and remainder.
      000B32 7B 06            [ 1] 1917 	ld a,(SQUOT,sp)
      000B34 18 05            [ 1] 1918 	xor a,(SDIVSR,sp)
      000B36 27 0B            [ 1] 1919 	jreq 3$
      000B38 5C               [ 1] 1920 	incw x 
      000B39 90 CF 00 0C      [ 2] 1921 	ldw acc16,y 
      000B3D 16 07            [ 2] 1922 	ldw y,(DIVISR,sp)
      000B3F 72 B2 00 0C      [ 2] 1923 	subw y,acc16
                                   1924 ; sign quotient
      000B43 7B 06            [ 1] 1925 3$:	ld a,(SQUOT,sp)
      000B45 27 01            [ 1] 1926 	jreq 4$
      000B47 50               [ 2] 1927 	negw x 
      000B48                       1928 4$:	
      000B48                       1929 	_drop VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000B48 5B 08            [ 2]    1     addw sp,#VSIZE 
      000B4A 81               [ 4] 1930 	ret 
                                   1931 
                                   1932 
                                   1933 
                                   1934 ;----------------------------------
                                   1935 ; division x/y 
                                   1936 ; input:
                                   1937 ;    X       dividend
                                   1938 ;    Y       divisor 
                                   1939 ; output:
                                   1940 ;    X       quotient
                                   1941 ;    Y       remainder 
                                   1942 ;-----------------------------------
                           000004  1943 	VSIZE=4 
                                   1944 	; local variables 
                           000001  1945 	DBLHI=1
                           000003  1946 	DBLLO=3
      000B4B                       1947 divide: 
      000B4B                       1948 	_vars VSIZE 
      000B4B 52 04            [ 2]    1     sub sp,#VSIZE 
      000B4D 90 CF 00 0C      [ 2] 1949 	ldw acc16,y
      000B51 CD 0A EA         [ 4] 1950 	call dbl_sign_extend
      000B54 1F 03            [ 2] 1951 	ldw (DBLLO,sp),x 
      000B56 17 01            [ 2] 1952 	ldw (DBLHI,sp),y 
      000B58 CE 00 0C         [ 2] 1953 	ldw x,acc16 
      000B5B CD 0A F4         [ 4] 1954 	call div32_16 
      000B5E                       1955 	_drop VSIZE 
      000B5E 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B60 81               [ 4] 1956 	ret
                                   1957 
                                   1958 
                                   1959 ;----------------------------------
                                   1960 ;  remainder resulting from euclidian 
                                   1961 ;  division of x/y 
                                   1962 ; input:
                                   1963 ;   x   	dividend int16_t 
                                   1964 ;   y 		divisor int16_t
                                   1965 ; output:
                                   1966 ;   X       n1%n2 
                                   1967 ;----------------------------------
      000B61                       1968 modulo:
      000B61 CD 0B 4B         [ 4] 1969 	call divide
      000B64 93               [ 1] 1970 	ldw x,y 
      000B65 81               [ 4] 1971 	ret 
                                   1972 
                                   1973 ;----------------------------------
                                   1974 ; BASIC: MULDIV(expr1,expr2,expr3)
                                   1975 ; return expr1*expr2/expr3 
                                   1976 ; product result is int32_t and 
                                   1977 ; divisiont is int32_t/int16_t
                                   1978 ;----------------------------------
                           000004  1979 	DBL_SIZE=4 
      000B66                       1980 muldiv:
      000B66 CD 0B DC         [ 4] 1981 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000B69 A1 03            [ 1] 1982 	cp a,#3 
      000B6B 27 03            [ 1] 1983 	jreq 1$
      000B6D CC 07 39         [ 2] 1984 	jp syntax_error
      000B70                       1985 1$: 
      000B70 1E 05            [ 2] 1986 	ldw x,(5,sp) ; expr1
      000B72 16 03            [ 2] 1987 	ldw y,(3,sp) ; expr2
      000B74 CD 0A 92         [ 4] 1988 	call multiply 
      000B77 1F 05            [ 2] 1989 	ldw (5,sp),x  ;int32_t 15..0
      000B79 17 03            [ 2] 1990 	ldw (3,sp),y  ;int32_t 31..16
      000B7B 85               [ 2] 1991 	popw x        ; expr3 
      000B7C CD 0A F4         [ 4] 1992 	call div32_16 ; int32_t/expr3 
      000B7F                       1993 	_drop DBL_SIZE
      000B7F 5B 04            [ 2]    1     addw sp,#DBL_SIZE 
      000B81 81               [ 4] 1994 	ret 
                                   1995 
                                   1996 
                                   1997 ;---------------------------------
                                   1998 ; dictionary search 
                                   1999 ; input:
                                   2000 ;	X 		dictionary entry point, name field  
                                   2001 ;   y		.asciz name to search 
                                   2002 ; output:
                                   2003 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2004 ;  X		cmd_index
                                   2005 ;---------------------------------
                           000001  2006 	NLEN=1 ; cmd length 
                           000002  2007 	XSAVE=2
                           000004  2008 	YSAVE=4
                           000005  2009 	VSIZE=5 
      000B82                       2010 search_dict::
      000B82                       2011 	_vars VSIZE 
      000B82 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2012 
      000B84 17 04            [ 2] 2013 	ldw (YSAVE,sp),y 
      000B86                       2014 search_next:
      000B86 1F 02            [ 2] 2015 	ldw (XSAVE,sp),x 
                                   2016 ; get name length in dictionary	
      000B88 F6               [ 1] 2017 	ld a,(x)
      000B89 A4 0F            [ 1] 2018 	and a,#0xf 
      000B8B 6B 01            [ 1] 2019 	ld (NLEN,sp),a  
      000B8D 16 04            [ 2] 2020 	ldw y,(YSAVE,sp) ; name pointer 
      000B8F 5C               [ 1] 2021 	incw x 
      000B90                       2022 cp_loop:
      000B90 90 F6            [ 1] 2023 	ld a,(y)
      000B92 27 1B            [ 1] 2024 	jreq str_match 
      000B94 0D 01            [ 1] 2025 	tnz (NLEN,sp)
      000B96 27 0A            [ 1] 2026 	jreq no_match  
      000B98 F1               [ 1] 2027 	cp a,(x)
      000B99 26 07            [ 1] 2028 	jrne no_match 
      000B9B 90 5C            [ 1] 2029 	incw y 
      000B9D 5C               [ 1] 2030 	incw x
      000B9E 0A 01            [ 1] 2031 	dec (NLEN,sp)
      000BA0 20 EE            [ 2] 2032 	jra cp_loop 
      000BA2                       2033 no_match:
      000BA2 1E 02            [ 2] 2034 	ldw x,(XSAVE,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000BA4 1D 00 02         [ 2] 2035 	subw x,#2 ; move X to link field
      000BA7 4B 00            [ 1] 2036 	push #TK_NONE 
      000BA9 FE               [ 2] 2037 	ldw x,(x) ; next word link 
      000BAA 84               [ 1] 2038 	pop a ; TK_NONE 
      000BAB 27 1F            [ 1] 2039 	jreq search_exit  ; not found  
                                   2040 ;try next 
      000BAD 20 D7            [ 2] 2041 	jra search_next
      000BAF                       2042 str_match:
      000BAF 1E 02            [ 2] 2043 	ldw x,(XSAVE,sp)
      000BB1 F6               [ 1] 2044 	ld a,(X)
      000BB2 6B 01            [ 1] 2045 	ld (NLEN,sp),a ; needed to test keyword type  
      000BB4 A4 0F            [ 1] 2046 	and a,#0xf 
                                   2047 ; move x to procedure address field 	
      000BB6 4C               [ 1] 2048 	inc a 
      000BB7 C7 00 0D         [ 1] 2049 	ld acc8,a 
      000BBA 72 5F 00 0C      [ 1] 2050 	clr acc16 
      000BBE 72 BB 00 0C      [ 2] 2051 	addw x,acc16 
      000BC2 FE               [ 2] 2052 	ldw x,(x) ; routine index  
                                   2053 ;determine keyword type bits 7:6 
      000BC3 7B 01            [ 1] 2054 	ld a,(NLEN,sp)
      000BC5 4E               [ 1] 2055 	swap a 
      000BC6 A4 0C            [ 1] 2056 	and a,#0xc
      000BC8 44               [ 1] 2057 	srl a
      000BC9 44               [ 1] 2058 	srl a 
      000BCA AB 80            [ 1] 2059 	add a,#128
      000BCC                       2060 search_exit: 
      000BCC                       2061 	_drop VSIZE 	 
      000BCC 5B 05            [ 2]    1     addw sp,#VSIZE 
      000BCE 81               [ 4] 2062 	ret 
                                   2063 
                                   2064 ;---------------------
                                   2065 ; check if next token
                                   2066 ;  is of expected type 
                                   2067 ; input:
                                   2068 ;   A 		 expected token attribute
                                   2069 ;  ouput:
                                   2070 ;   none     if fail call syntax_error 
                                   2071 ;--------------------
      000BCF                       2072 expect:
      000BCF 88               [ 1] 2073 	push a 
      000BD0 CD 08 28         [ 4] 2074 	call next_token 
      000BD3 11 01            [ 1] 2075 	cp a,(1,sp)
      000BD5 27 03            [ 1] 2076 	jreq 1$
      000BD7 CC 07 39         [ 2] 2077 	jp syntax_error
      000BDA 84               [ 1] 2078 1$: pop a 
      000BDB 81               [ 4] 2079 	ret 
                                   2080 
                                   2081 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2082 ; parse arguments list 
                                   2083 ; between ()
                                   2084 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BDC                       2085 func_args:
      000BDC A6 07            [ 1] 2086 	ld a,#TK_LPAREN 
      000BDE CD 0B CF         [ 4] 2087 	call expect 
                                   2088 ; expected to continue in arg_list 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2089 ; caller must check for TK_RPAREN 
                                   2090 
                                   2091 ;-------------------------------
                                   2092 ; parse embedded BASIC routines 
                                   2093 ; arguments list.
                                   2094 ; arg_list::=  rel[','rel]*
                                   2095 ; all arguments are of integer type
                                   2096 ; and pushed on stack 
                                   2097 ; input:
                                   2098 ;   none
                                   2099 ; output:
                                   2100 ;   stack{n}   arguments pushed on stack
                                   2101 ;   A 	number of arguments pushed on stack  
                                   2102 ;--------------------------------
      000BE1                       2103 arg_list:
      000BE1 4B 00            [ 1] 2104 	push #0  
      000BE3 CD 0D 29         [ 4] 2105 1$: call relation
      000BE6 A1 00            [ 1] 2106 	cp a,#TK_NONE 
      000BE8 27 20            [ 1] 2107 	jreq 5$
      000BEA A1 84            [ 1] 2108 	cp a,#TK_INTGR
      000BEC 26 13            [ 1] 2109 	jrne 4$
      000BEE                       2110 3$: 
                                   2111 ; swap return address with argument
      000BEE 84               [ 1] 2112 	pop a ; arg_count
      000BEF 90 85            [ 2] 2113 	popw y ; return address 
      000BF1 89               [ 2] 2114 	pushw x ; new argument 
      000BF2 90 89            [ 2] 2115 	pushw y 
      000BF4 4C               [ 1] 2116     inc a
      000BF5 88               [ 1] 2117 	push a 
      000BF6 CD 08 28         [ 4] 2118 	call next_token 
      000BF9 A1 09            [ 1] 2119 	cp a,#TK_COMMA 
      000BFB 27 E6            [ 1] 2120 	jreq 1$ 
      000BFD A1 00            [ 1] 2121 	cp a,#TK_NONE 
      000BFF 27 09            [ 1] 2122 	jreq 5$ 
      000C01 A1 08            [ 1] 2123 4$:	cp a,#TK_RPAREN 
      000C03 27 05            [ 1] 2124 	jreq 5$
      000C05                       2125 	_unget_token 
      000C05 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C0A 84               [ 1] 2126 5$:	pop a  
      000C0B 81               [ 4] 2127 	ret 
                                   2128 
                                   2129 ;--------------------------------
                                   2130 ;   BASIC commnands 
                                   2131 ;--------------------------------
                                   2132 
                                   2133 ;--------------------------------
                                   2134 ;  arithmetic and relational 
                                   2135 ;  routines
                                   2136 ;  operators precedence
                                   2137 ;  highest to lowest
                                   2138 ;  operators on same row have 
                                   2139 ;  same precedence and are executed
                                   2140 ;  from left to right.
                                   2141 ;	'*','/','%'
                                   2142 ;   '-','+'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2143 ;   '=','>','<','>=','<=','<>','><'
                                   2144 ;   '<>' and '><' are equivalent for not equal.
                                   2145 ;--------------------------------
                                   2146 
                                   2147 ;---------------------
                                   2148 ; return array element
                                   2149 ; address from @(expr)
                                   2150 ; input:
                                   2151 ;   A 		TK_ARRAY
                                   2152 ; output:
                                   2153 ;   A 		TK_INTGR
                                   2154 ;	X 		element address 
                                   2155 ;----------------------
      000C0C                       2156 get_array_element:
      000C0C CD 0B DC         [ 4] 2157 	call func_args 
      000C0F A1 01            [ 1] 2158 	cp a,#1
      000C11 27 03            [ 1] 2159 	jreq 1$
      000C13 CC 07 39         [ 2] 2160 	jp syntax_error
      000C16 85               [ 2] 2161 1$: popw x 
                                   2162 	; check for bounds 
      000C17 C3 00 1E         [ 2] 2163 	cpw x,array_size 
      000C1A 23 05            [ 2] 2164 	jrule 3$
                                   2165 ; bounds {1..array_size}	
      000C1C A6 0A            [ 1] 2166 2$: ld a,#ERR_BAD_VALUE 
      000C1E CC 07 3B         [ 2] 2167 	jp tb_error 
      000C21 5D               [ 2] 2168 3$: tnzw  x
      000C22 27 F8            [ 1] 2169 	jreq 2$ 
      000C24 58               [ 2] 2170 	sllw x 
      000C25 89               [ 2] 2171 	pushw x 
      000C26 AE 16 90         [ 2] 2172 	ldw x,#tib
      000C29 72 F0 01         [ 2] 2173 	subw x,(1,sp)
      000C2C                       2174 	_drop 2   
      000C2C 5B 02            [ 2]    1     addw sp,#2 
      000C2E A6 84            [ 1] 2175 	ld a,#TK_INTGR
      000C30 81               [ 4] 2176 	ret 
                                   2177 
                                   2178 
                                   2179 ;***********************************
                                   2180 ;   expression parse,execute 
                                   2181 ;***********************************
                                   2182 ;-----------------------------------
                                   2183 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2184 ;			 integer | function |
                                   2185 ;			 '('relation')' 
                                   2186 ; output:
                                   2187 ;   A    token attribute 
                                   2188 ;   X 	 integer
                                   2189 ; ---------------------------------
                           000001  2190 	NEG=1
                           000001  2191 	VSIZE=1
      000C31                       2192 factor:
      000C31                       2193 	_vars VSIZE 
      000C31 52 01            [ 2]    1     sub sp,#VSIZE 
      000C33 CD 08 28         [ 4] 2194 	call next_token
      000C36 A1 02            [ 1] 2195 	cp a,#CMD_END  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000C38 25 3D            [ 1] 2196 	jrult 16$
      000C3A 6B 01            [ 1] 2197 1$:	ld (NEG,sp),a 
      000C3C A4 30            [ 1] 2198 	and a,#TK_GRP_MASK
      000C3E A1 10            [ 1] 2199 	cp a,#TK_GRP_ADD 
      000C40 27 04            [ 1] 2200 	jreq 2$
      000C42 7B 01            [ 1] 2201 	ld a,(NEG,sp)
      000C44 20 03            [ 2] 2202 	jra 4$  
      000C46                       2203 2$:	
      000C46 CD 08 28         [ 4] 2204 	call next_token 
      000C49                       2205 4$:	
      000C49 A1 81            [ 1] 2206 	cp a,#TK_IFUNC 
      000C4B 26 03            [ 1] 2207 	jrne 5$ 
      000C4D FD               [ 4] 2208 	call (x) 
      000C4E 20 32            [ 2] 2209 	jra 18$ 
      000C50                       2210 5$:
      000C50 A1 84            [ 1] 2211 	cp a,#TK_INTGR
      000C52 26 02            [ 1] 2212 	jrne 6$
      000C54 20 2C            [ 2] 2213 	jra 18$
      000C56                       2214 6$:
      000C56 A1 06            [ 1] 2215 	cp a,#TK_ARRAY
      000C58 26 06            [ 1] 2216 	jrne 10$
      000C5A CD 0C 0C         [ 4] 2217 	call get_array_element
      000C5D FE               [ 2] 2218 	ldw x,(x)
      000C5E 20 22            [ 2] 2219 	jra 18$ 
      000C60                       2220 10$:
      000C60 A1 85            [ 1] 2221 	cp a,#TK_VAR 
      000C62 26 03            [ 1] 2222 	jrne 12$
      000C64 FE               [ 2] 2223 	ldw x,(x)
      000C65 20 1B            [ 2] 2224 	jra 18$
      000C67                       2225 12$:			
      000C67 A1 07            [ 1] 2226 	cp a,#TK_LPAREN
      000C69 26 0C            [ 1] 2227 	jrne 16$
      000C6B CD 0D 29         [ 4] 2228 	call relation
      000C6E 89               [ 2] 2229 	pushw x 
      000C6F A6 08            [ 1] 2230 	ld a,#TK_RPAREN 
      000C71 CD 0B CF         [ 4] 2231 	call expect
      000C74 85               [ 2] 2232 	popw x 
      000C75 20 0B            [ 2] 2233 	jra 18$	
      000C77                       2234 16$:
      000C77 4D               [ 1] 2235 	tnz a 
      000C78 27 11            [ 1] 2236 	jreq 20$ 
      000C7A                       2237 	_unget_token
      000C7A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000C7F 4F               [ 1] 2238 	clr a 
      000C80 20 09            [ 2] 2239 	jra 20$ 
      000C82                       2240 18$: 
      000C82 A6 11            [ 1] 2241 	ld a,#TK_MINUS 
      000C84 11 01            [ 1] 2242 	cp a,(NEG,sp)
      000C86 26 01            [ 1] 2243 	jrne 19$
      000C88 50               [ 2] 2244 	negw x
      000C89                       2245 19$:
      000C89 A6 84            [ 1] 2246 	ld a,#TK_INTGR
      000C8B                       2247 20$:
      000C8B                       2248 	_drop VSIZE
      000C8B 5B 01            [ 2]    1     addw sp,#VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000C8D 81               [ 4] 2249 	ret
                                   2250 
                                   2251 ;-----------------------------------
                                   2252 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   2253 ; output:
                                   2254 ;   A    	token attribute 
                                   2255 ;	X		integer
                                   2256 ;-----------------------------------
                           000001  2257 	N1=1   ; int16_t
                           000003  2258 	MULOP=3
                           000003  2259 	VSIZE=3
      000C8E                       2260 term:
      000C8E                       2261 	_vars VSIZE
      000C8E 52 03            [ 2]    1     sub sp,#VSIZE 
      000C90 CD 0C 31         [ 4] 2262 	call factor
      000C93 4D               [ 1] 2263 	tnz a 
      000C94 27 47            [ 1] 2264 	jreq term_exit 
      000C96                       2265 term01:	 ; check for  operator 
      000C96 1F 01            [ 2] 2266 	ldw (N1,sp),x  ; save first factor 
      000C98 CD 08 28         [ 4] 2267 	call next_token
      000C9B 6B 03            [ 1] 2268 	ld (MULOP,sp),a
      000C9D A1 02            [ 1] 2269 	cp a,#CMD_END
      000C9F 25 2F            [ 1] 2270 	jrult 8$
      000CA1 A4 30            [ 1] 2271 	and a,#TK_GRP_MASK
      000CA3 A1 20            [ 1] 2272 	cp a,#TK_GRP_MULT
      000CA5 27 02            [ 1] 2273 	jreq 1$
      000CA7 20 27            [ 2] 2274 	jra 8$
      000CA9                       2275 1$:	; got *|/|%
      000CA9 CD 0C 31         [ 4] 2276 	call factor
      000CAC A1 84            [ 1] 2277 	cp a,#TK_INTGR
      000CAE 27 03            [ 1] 2278 	jreq 2$
      000CB0 CC 07 39         [ 2] 2279 	jp syntax_error
      000CB3 90 93            [ 1] 2280 2$:	ldw y,x 
      000CB5 1E 01            [ 2] 2281 	ldw x,(N1,sp)
      000CB7 7B 03            [ 1] 2282 	ld a,(MULOP,sp) 
      000CB9 A1 20            [ 1] 2283 	cp a,#TK_MULT 
      000CBB 26 05            [ 1] 2284 	jrne 3$
      000CBD CD 0A 92         [ 4] 2285 	call multiply 
      000CC0 20 D4            [ 2] 2286 	jra term01
      000CC2 A1 21            [ 1] 2287 3$: cp a,#TK_DIV 
      000CC4 26 05            [ 1] 2288 	jrne 4$ 
      000CC6 CD 0B 4B         [ 4] 2289 	call divide 
      000CC9 20 CB            [ 2] 2290 	jra term01 
      000CCB CD 0B 61         [ 4] 2291 4$: call modulo
      000CCE 20 C6            [ 2] 2292 	jra term01 
      000CD0 7B 03            [ 1] 2293 8$: ld a,(MULOP,sp)
      000CD2 27 05            [ 1] 2294 	jreq 9$ 
      000CD4                       2295 	_unget_token
      000CD4 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000CD9 1E 01            [ 2] 2296 9$: ldw x,(N1,sp)
      000CDB A6 84            [ 1] 2297 	ld a,#TK_INTGR 	
      000CDD                       2298 term_exit:
      000CDD                       2299 	_drop VSIZE 
      000CDD 5B 03            [ 2]    1     addw sp,#VSIZE 
      000CDF 81               [ 4] 2300 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2301 
                                   2302 ;-------------------------------
                                   2303 ;  expr ::= term [['+'|'-'] term]*
                                   2304 ;  result range {-32768..32767}
                                   2305 ;  output:
                                   2306 ;   A    token attribute 
                                   2307 ;   X	 integer   
                                   2308 ;-------------------------------
                           000001  2309 	N1=1
                           000003  2310 	N2=3 
                           000005  2311 	OP=5 
                           000005  2312 	VSIZE=5 
      000CE0                       2313 expression:
      000CE0                       2314 	_vars VSIZE 
      000CE0 52 05            [ 2]    1     sub sp,#VSIZE 
      000CE2 CD 0C 8E         [ 4] 2315 	call term
      000CE5 4D               [ 1] 2316 	tnz a 
      000CE6 27 3E            [ 1] 2317 	jreq expr_exit 
      000CE8 1F 01            [ 2] 2318 1$:	ldw (N1,sp),x 
      000CEA CD 08 28         [ 4] 2319 	call next_token
      000CED 6B 05            [ 1] 2320 	ld (OP,sp),a 
      000CEF A1 02            [ 1] 2321 	cp a,#CMD_END 
      000CF1 25 26            [ 1] 2322 	jrult 8$ 
      000CF3 A4 30            [ 1] 2323 	and a,#TK_GRP_MASK
      000CF5 A1 10            [ 1] 2324 	cp a,#TK_GRP_ADD 
      000CF7 27 02            [ 1] 2325 	jreq 2$ 
      000CF9 20 1E            [ 2] 2326 	jra 8$
      000CFB                       2327 2$: 
      000CFB CD 0C 8E         [ 4] 2328 	call term
      000CFE A1 84            [ 1] 2329 	cp a,#TK_INTGR
      000D00 27 03            [ 1] 2330 	jreq 3$
      000D02 CC 07 39         [ 2] 2331 	jp syntax_error
      000D05 1F 03            [ 2] 2332 3$:	ldw (N2,sp),x 
      000D07 1E 01            [ 2] 2333 	ldw x,(N1,sp)
      000D09 7B 05            [ 1] 2334 	ld a,(OP,sp)
      000D0B A1 10            [ 1] 2335 	cp a,#TK_PLUS 
      000D0D 26 05            [ 1] 2336 	jrne 4$
      000D0F 72 FB 03         [ 2] 2337 	addw x,(N2,sp)
      000D12 20 D4            [ 2] 2338 	jra 1$ 
      000D14 72 F0 03         [ 2] 2339 4$:	subw x,(N2,sp)
      000D17 20 CF            [ 2] 2340 	jra 1$
      000D19 7B 05            [ 1] 2341 8$: ld a,(OP,sp)
      000D1B 27 05            [ 1] 2342 	jreq 9$ 
      000D1D                       2343 	_unget_token	
      000D1D 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D22 1E 01            [ 2] 2344 9$: ldw x,(N1,sp)
      000D24 A6 84            [ 1] 2345 	ld a,#TK_INTGR	
      000D26                       2346 expr_exit:
      000D26                       2347 	_drop VSIZE 
      000D26 5B 05            [ 2]    1     addw sp,#VSIZE 
      000D28 81               [ 4] 2348 	ret 
                                   2349 
                                   2350 ;---------------------------------------------
                                   2351 ; rel ::= expr rel_op expr
                                   2352 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2353 ;  relation return  integer , zero is false 
                                   2354 ;  output:
                                   2355 ;    A 		token attribute  
                                   2356 ;	 X		integer 
                                   2357 ;---------------------------------------------
                           000001  2358 	N1=1
                           000003  2359 	RELOP=3
                           000003  2360 	VSIZE=3 
      000D29                       2361 relation: 
      000D29                       2362 	_vars VSIZE
      000D29 52 03            [ 2]    1     sub sp,#VSIZE 
      000D2B CD 0C E0         [ 4] 2363 	call expression
      000D2E 4D               [ 1] 2364 	tnz a 
      000D2F 27 4D            [ 1] 2365 	jreq rel_exit
      000D31 1F 01            [ 2] 2366 	ldw (N1,sp),x 
                                   2367 ; expect rel_op or leave 
      000D33 CD 08 28         [ 4] 2368 	call next_token 
      000D36 6B 03            [ 1] 2369 	ld (RELOP,sp),a 
      000D38 A4 30            [ 1] 2370 	and a,#TK_GRP_MASK
      000D3A A1 30            [ 1] 2371 	cp a,#TK_GRP_RELOP 
      000D3C 26 33            [ 1] 2372 	jrne 8$
      000D3E                       2373 2$:	; expect another expression
      000D3E CD 0C E0         [ 4] 2374 	call expression
      000D41 A1 84            [ 1] 2375 	cp a,#TK_INTGR
      000D43 27 03            [ 1] 2376 	jreq 3$
      000D45 CC 07 39         [ 2] 2377 	jp syntax_error 
      000D48 CF 00 0C         [ 2] 2378 3$:	ldw acc16,x 
      000D4B 1E 01            [ 2] 2379 	ldw x,(N1,sp) 
      000D4D 72 B0 00 0C      [ 2] 2380 	subw x,acc16
      000D51 26 06            [ 1] 2381 	jrne 4$
      000D53 35 02 00 0D      [ 1] 2382 	mov acc8,#2 ; n1==n2
      000D57 20 0C            [ 2] 2383 	jra 6$ 
      000D59                       2384 4$: 
      000D59 2C 06            [ 1] 2385 	jrsgt 5$  
      000D5B 35 04 00 0D      [ 1] 2386 	mov acc8,#4 ; n1<2 
      000D5F 20 04            [ 2] 2387 	jra 6$
      000D61                       2388 5$:
      000D61 35 01 00 0D      [ 1] 2389 	mov acc8,#1 ; n1>n2 
      000D65                       2390 6$:
      000D65 5F               [ 1] 2391 	clrw x 
      000D66 C6 00 0D         [ 1] 2392 	ld a, acc8  
      000D69 14 03            [ 1] 2393 	and a,(RELOP,sp)
      000D6B 4D               [ 1] 2394 	tnz a 
      000D6C 27 0E            [ 1] 2395 	jreq 10$
      000D6E 5C               [ 1] 2396 	incw x 
      000D6F 20 0B            [ 2] 2397 	jra 10$  	
      000D71 7B 03            [ 1] 2398 8$: ld a,(RELOP,sp)
      000D73 27 05            [ 1] 2399 	jreq 9$
      000D75                       2400 	_unget_token
      000D75 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000D7A                       2401 9$: 
      000D7A 1E 01            [ 2] 2402 	ldw x,(N1,sp)
      000D7C                       2403 10$:
      000D7C A6 84            [ 1] 2404 	ld a,#TK_INTGR
      000D7E                       2405 rel_exit:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000D7E                       2406 	_drop VSIZE
      000D7E 5B 03            [ 2]    1     addw sp,#VSIZE 
      000D80 81               [ 4] 2407 	ret 
                                   2408 
                                   2409 ;--------------------------------
                                   2410 ; BASIC: SHOW 
                                   2411 ; print stack content in hexadecimal bytes 
                                   2412 ; 16 bytes per row 
                                   2413 ;--------------------------------
      000D81                       2414 show:
      000D81 AE 0D 9B         [ 2] 2415 	ldw x,#cstk_prompt
      000D84 CD 1F F4         [ 4] 2416 	call puts 
      000D87 96               [ 1] 2417 	ldw x,sp 
      000D88 1C 00 03         [ 2] 2418 	addw x,#3 ; ignore return address
      000D8B 90 AE 18 00      [ 2] 2419 	ldw y,#RAM_SIZE  
      000D8F CF 00 0C         [ 2] 2420 	ldw acc16,x 
      000D92 72 B2 00 0C      [ 2] 2421 	subw y,acc16
      000D96 CD 03 5E         [ 4] 2422 	call hex_dump
      000D99 4F               [ 1] 2423 	clr a 
      000D9A 81               [ 4] 2424 	ret
                                   2425 
      000D9B 0A 63 6F 6E 74 65 6E  2426 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   2427 
                                   2428 
                                   2429 ;--------------------------------------------
                                   2430 ; BASIC: HEX 
                                   2431 ; select hexadecimal base for integer print
                                   2432 ;---------------------------------------------
      000DC2                       2433 hex_base:
      000DC2 35 10 00 0A      [ 1] 2434 	mov base,#16 
      000DC6 81               [ 4] 2435 	ret 
                                   2436 
                                   2437 ;--------------------------------------------
                                   2438 ; BASIC: DEC 
                                   2439 ; select decimal base for integer print
                                   2440 ;---------------------------------------------
      000DC7                       2441 dec_base:
      000DC7 35 0A 00 0A      [ 1] 2442 	mov base,#10
      000DCB 81               [ 4] 2443 	ret 
                                   2444 
                                   2445 ;------------------------
                                   2446 ; BASIC: FREE 
                                   2447 ; return free size in RAM 
                                   2448 ; output:
                                   2449 ;   A 		TK_INTGR
                                   2450 ;   X 	    size integer
                                   2451 ;--------------------------
      000DCC                       2452 free:
      000DCC AE 16 90         [ 2] 2453 	ldw x,#tib 
      000DCF 90 CE 00 19      [ 2] 2454 	ldw y,txtbgn 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000DD3 90 A3 2A 00      [ 2] 2455 	cpw y,#app_space
      000DD7 25 05            [ 1] 2456 	jrult 1$
      000DD9 1D 00 64         [ 2] 2457 	subw x,#free_ram 
      000DDC 20 04            [ 2] 2458 	jra 2$ 
      000DDE                       2459 1$:	
      000DDE 72 B0 00 1B      [ 2] 2460 	subw x,txtend 
      000DE2 A6 84            [ 1] 2461 2$:	ld a,#TK_INTGR
      000DE4 81               [ 4] 2462 	ret 
                                   2463 
                                   2464 
                                   2465 ;------------------------
                                   2466 ; BASIC: UBOUND  
                                   2467 ; return array variable size 
                                   2468 ; output:
                                   2469 ;   A 		TK_INTGR
                                   2470 ;   X 	    array size 
                                   2471 ;--------------------------
      000DE5                       2472 ubound:
      000DE5 CD 0D CC         [ 4] 2473 	call free 
      000DE8 54               [ 2] 2474 	srlw x 
      000DE9 CF 00 1E         [ 2] 2475 	ldw array_size,x
      000DEC A6 84            [ 1] 2476 	ld a,#TK_INTGR
      000DEE 81               [ 4] 2477 	ret 
                                   2478 
                                   2479 ;-----------------------------
                                   2480 ; BASIC: LET var=expr 
                                   2481 ; variable assignement 
                                   2482 ; output:
                                   2483 ;   A 		TK_NONE 
                                   2484 ;-----------------------------
      000DEF                       2485 let::
      000DEF CD 08 28         [ 4] 2486 	call next_token 
      000DF2 A1 85            [ 1] 2487 	cp a,#TK_VAR 
      000DF4 27 0A            [ 1] 2488 	jreq let_var
      000DF6 A1 06            [ 1] 2489 	cp a,#TK_ARRAY 
      000DF8 27 03            [ 1] 2490 	jreq  let_array
      000DFA CC 07 39         [ 2] 2491 	jp syntax_error
      000DFD                       2492 let_array:
      000DFD CD 0C 0C         [ 4] 2493 	call get_array_element
      000E00                       2494 let_var:
      000E00 89               [ 2] 2495 	pushw x  
      000E01 CD 08 28         [ 4] 2496 	call next_token 
      000E04 A1 32            [ 1] 2497 	cp a,#TK_EQUAL
      000E06 27 03            [ 1] 2498 	jreq 1$
      000E08 CC 07 39         [ 2] 2499 	jp syntax_error
      000E0B                       2500 1$:	
      000E0B CD 0D 29         [ 4] 2501 	call relation   
      000E0E A1 84            [ 1] 2502 	cp a,#TK_INTGR 
      000E10 27 03            [ 1] 2503 	jreq 2$
      000E12 CC 07 39         [ 2] 2504 	jp syntax_error
      000E15                       2505 2$:	
      000E15 90 93            [ 1] 2506 	ldw y,x 
      000E17 85               [ 2] 2507 	popw x   
      000E18 FF               [ 2] 2508 	ldw (x),y   
      000E19 81               [ 4] 2509 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2510 
                                   2511 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2512 ; return program size 
                                   2513 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E1A                       2514 prog_size:
      000E1A CE 00 1B         [ 2] 2515 	ldw x,txtend 
      000E1D 72 B0 00 19      [ 2] 2516 	subw x,txtbgn 
      000E21 81               [ 4] 2517 	ret 
                                   2518 
                                   2519 ;----------------------------
                                   2520 ; BASIC: LIST [[start][,end]]
                                   2521 ; list program lines 
                                   2522 ; form start to end 
                                   2523 ; if empty argument list then 
                                   2524 ; list all.
                                   2525 ;----------------------------
                           000001  2526 	FIRST=1
                           000003  2527 	LAST=3 
                           000005  2528 	LN_PTR=5
                           000006  2529 	VSIZE=6 
      000E22                       2530 list:
      000E22 CE 00 19         [ 2] 2531 	ldw x,txtbgn 
      000E25 C3 00 1B         [ 2] 2532 	cpw x,txtend 
      000E28 2B 01            [ 1] 2533 	jrmi 1$
      000E2A 81               [ 4] 2534 	ret 
      000E2B                       2535 1$:	
      000E2B AE 15 30         [ 2] 2536 	ldw x,#PROG_SIZE
      000E2E CD 1F F4         [ 4] 2537 	call puts 
      000E31 CE 00 1B         [ 2] 2538 	ldw x,txtend 
      000E34 72 B0 00 19      [ 2] 2539 	subw x,txtbgn 
      000E38 CD 08 83         [ 4] 2540 	call print_int 
      000E3B AE 15 3F         [ 2] 2541 	ldw x,#STR_BYTES 
      000E3E CD 1F F4         [ 4] 2542 	call puts 
      000E41                       2543 	_vars VSIZE
      000E41 52 06            [ 2]    1     sub sp,#VSIZE 
      000E43 CE 00 19         [ 2] 2544 	ldw x,txtbgn 
      000E46 1F 05            [ 2] 2545 	ldw (LN_PTR,sp),x 
      000E48 FE               [ 2] 2546 	ldw x,(x) 
      000E49 1F 01            [ 2] 2547 	ldw (FIRST,sp),x ; list from first line 
      000E4B AE 7F FF         [ 2] 2548 	ldw x,#MAX_LINENO ; biggest line number 
      000E4E 1F 03            [ 2] 2549 	ldw (LAST,sp),x 
      000E50 CD 0B E1         [ 4] 2550 	call arg_list
      000E53 4D               [ 1] 2551 	tnz a
      000E54 27 31            [ 1] 2552 	jreq list_loop 
      000E56 A1 02            [ 1] 2553 	cp a,#2 
      000E58 27 07            [ 1] 2554 	jreq 4$
      000E5A A1 01            [ 1] 2555 	cp a,#1 
      000E5C 27 06            [ 1] 2556 	jreq first_line 
      000E5E CC 07 39         [ 2] 2557 	jp syntax_error 
      000E61 85               [ 2] 2558 4$:	popw x 
      000E62 1F 05            [ 2] 2559 	ldw (LAST+2,sp),x 
      000E64                       2560 first_line:
      000E64 85               [ 2] 2561 	popw x
      000E65 1F 01            [ 2] 2562 	ldw (FIRST,sp),x 
      000E67                       2563 lines_skip:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E67 CE 00 19         [ 2] 2564 	ldw x,txtbgn
      000E6A 1F 05            [ 2] 2565 2$:	ldw (LN_PTR,sp),x 
      000E6C C3 00 1B         [ 2] 2566 	cpw x,txtend 
      000E6F 2A 38            [ 1] 2567 	jrpl list_exit 
      000E71 FE               [ 2] 2568 	ldw x,(x) ;line# 
      000E72 13 01            [ 2] 2569 	cpw x,(FIRST,sp)
      000E74 2A 11            [ 1] 2570 	jrpl list_loop 
      000E76 1E 05            [ 2] 2571 	ldw x,(LN_PTR,sp) 
      000E78 E6 02            [ 1] 2572 	ld a,(2,x)
      000E7A C7 00 0D         [ 1] 2573 	ld acc8,a 
      000E7D 72 5F 00 0C      [ 1] 2574 	clr acc16 
      000E81 72 BB 00 0C      [ 2] 2575 	addw x,acc16
      000E85 20 E3            [ 2] 2576 	jra 2$ 
                                   2577 ; print loop
      000E87                       2578 list_loop:
      000E87 1E 05            [ 2] 2579 	ldw x,(LN_PTR,sp)
      000E89 E6 02            [ 1] 2580 	ld a,(2,x) 
      000E8B CD 0F 01         [ 4] 2581 	call prt_basic_line
      000E8E 1E 05            [ 2] 2582 	ldw x,(LN_PTR,sp)
      000E90 E6 02            [ 1] 2583 	ld a,(2,x)
      000E92 C7 00 0D         [ 1] 2584 	ld acc8,a 
      000E95 72 5F 00 0C      [ 1] 2585 	clr acc16 
      000E99 72 BB 00 0C      [ 2] 2586 	addw x,acc16
      000E9D C3 00 1B         [ 2] 2587 	cpw x,txtend 
      000EA0 2A 07            [ 1] 2588 	jrpl list_exit
      000EA2 1F 05            [ 2] 2589 	ldw (LN_PTR,sp),x
      000EA4 FE               [ 2] 2590 	ldw x,(x)
      000EA5 13 03            [ 2] 2591 	cpw x,(LAST,sp)  
      000EA7 2F DE            [ 1] 2592 	jrslt list_loop
      000EA9                       2593 list_exit:
      000EA9 55 00 03 00 01   [ 1] 2594 	mov in,count 
      000EAE AE 16 E0         [ 2] 2595 	ldw x,#pad 
      000EB1 CF 00 04         [ 2] 2596 	ldw basicptr,x 
      000EB4                       2597 	_drop VSIZE 
      000EB4 5B 06            [ 2]    1     addw sp,#VSIZE 
      000EB6 81               [ 4] 2598 	ret
                                   2599 
                                   2600 
                                   2601 ;--------------------------
                                   2602 ; BASIC: EDIT 
                                   2603 ;  copy program in FLASH 
                                   2604 ;  to RAM for edition 
                                   2605 ;-------------------------
      000EB7                       2606 edit:
      000EB7 CD 14 55         [ 4] 2607 	call qsign 
      000EBA 27 07            [ 1] 2608 	jreq 1$
      000EBC AE 0E E1         [ 2] 2609 	ldw x,#NO_FLASH_APP 
      000EBF CD 1F F4         [ 4] 2610 	call puts 
      000EC2 81               [ 4] 2611 	ret 
      000EC3 CE 2A 02         [ 2] 2612 1$: ldw x,app_size 
      000EC6 CF 00 0C         [ 2] 2613 	ldw acc16,x 
      000EC9 90 AE 2A 04      [ 2] 2614 	ldw y,#app 
      000ECD AE 00 64         [ 2] 2615 	ldw x,#free_ram
      000ED0 CD 03 C5         [ 4] 2616 	call move  
      000ED3 AE 00 64         [ 2] 2617 	ldw x,#free_ram 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000ED6 CF 00 19         [ 2] 2618 	ldw txtbgn,x 
      000ED9 72 BB 2A 02      [ 2] 2619 	addw x,app_size 
      000EDD CF 00 1B         [ 2] 2620 	ldw txtend,x 
      000EE0 81               [ 4] 2621 	ret 
                                   2622 
      000EE1 4E 6F 20 61 70 70 6C  2623 NO_FLASH_APP: .asciz "No application stored in FLASH!"
             69 63 61 74 69 6F 6E
             20 73 74 6F 72 65 64
             20 69 6E 20 46 4C 41
             53 48 21 00
                                   2624 
                                   2625 ;--------------------------
                                   2626 ; decompile line from token list
                                   2627 ; and print it. 
                                   2628 ; input:
                                   2629 ;   A       stop at this position 
                                   2630 ;   X 		pointer at line
                                   2631 ; output:
                                   2632 ;   none 
                                   2633 ;--------------------------	
      000F01                       2634 prt_basic_line:
      000F01 C7 00 03         [ 1] 2635 	ld count,a 
      000F04 E6 02            [ 1] 2636 	ld a,(2,x)
      000F06 C1 00 03         [ 1] 2637 	cp a,count 
      000F09 2A 03            [ 1] 2638 	jrpl 1$ 
      000F0B C7 00 03         [ 1] 2639 	ld count,a 
      000F0E CF 00 04         [ 2] 2640 1$:	ldw basicptr,x 
      000F11 90 AE 16 90      [ 2] 2641 	ldw y,#tib  
      000F15 CD 27 ED         [ 4] 2642 	call decompile 
      000F18 CD 1F F4         [ 4] 2643 	call puts 
      000F1B A6 0D            [ 1] 2644 	ld a,#CR 
      000F1D CD 02 C1         [ 4] 2645 	call putc 
      000F20 81               [ 4] 2646 	ret 
                                   2647 
                                   2648 
                                   2649 
                                   2650 ;---------------------------------
                                   2651 ; BASIC: PRINT|? arg_list 
                                   2652 ; print values from argument list
                                   2653 ;----------------------------------
                           000001  2654 	CCOMMA=1
                           000001  2655 	VSIZE=1
      000F21                       2656 print:
      000F21                       2657 	_vars VSIZE 
      000F21 52 01            [ 2]    1     sub sp,#VSIZE 
      000F23                       2658 reset_comma:
      000F23 0F 01            [ 1] 2659 	clr (CCOMMA,sp)
      000F25                       2660 prt_loop:
      000F25 CD 08 28         [ 4] 2661 	call next_token
      000F28 A1 02            [ 1] 2662 	cp a,#CMD_END 
      000F2A 25 4F            [ 1] 2663 	jrult print_exit ; colon or end of line 
      000F2C A1 02            [ 1] 2664 	cp a,#TK_QSTR
      000F2E 27 12            [ 1] 2665 	jreq 1$
      000F30 A1 03            [ 1] 2666 	cp a,#TK_CHAR 
      000F32 27 13            [ 1] 2667 	jreq 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F34 A1 82            [ 1] 2668 	cp a,#TK_CFUNC 
      000F36 27 15            [ 1] 2669 	jreq 3$
      000F38 A1 09            [ 1] 2670 	cp a,#TK_COMMA 
      000F3A 27 18            [ 1] 2671 	jreq 4$
      000F3C A1 0A            [ 1] 2672 	cp a,#TK_SHARP 
      000F3E 27 18            [ 1] 2673 	jreq 5$
      000F40 20 28            [ 2] 2674 	jra 7$ 
      000F42                       2675 1$:	; print string 
      000F42 CD 1F F4         [ 4] 2676 	call puts
      000F45 20 DC            [ 2] 2677 	jra reset_comma
      000F47                       2678 2$:	; print character 
      000F47 9F               [ 1] 2679 	ld a,xl 
      000F48 CD 02 C1         [ 4] 2680 	call putc 
      000F4B 20 D6            [ 2] 2681 	jra reset_comma 
      000F4D                       2682 3$: ; print character function value  	
      000F4D FD               [ 4] 2683 	call (x)
      000F4E 9F               [ 1] 2684 	ld a,xl 
      000F4F CD 02 C1         [ 4] 2685 	call putc
      000F52 20 CF            [ 2] 2686 	jra reset_comma 
      000F54                       2687 4$: ; set comma state 
      000F54 03 01            [ 1] 2688 	cpl (CCOMMA,sp)
      000F56 20 CD            [ 2] 2689 	jra prt_loop   
      000F58                       2690 5$: ; # character must be followed by an integer   
      000F58 CD 08 28         [ 4] 2691 	call next_token
      000F5B A1 84            [ 1] 2692 	cp a,#TK_INTGR 
      000F5D 27 03            [ 1] 2693 	jreq 6$
      000F5F CC 07 39         [ 2] 2694 	jp syntax_error 
      000F62                       2695 6$: ; set tab width
      000F62 9F               [ 1] 2696 	ld a,xl 
      000F63 A4 0F            [ 1] 2697 	and a,#15 
      000F65 C7 00 21         [ 1] 2698 	ld tab_width,a 
      000F68 20 B9            [ 2] 2699 	jra reset_comma 
      000F6A                       2700 7$:	
      000F6A                       2701 	_unget_token 
      000F6A 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      000F6F CD 0D 29         [ 4] 2702 	call relation 
      000F72 A1 84            [ 1] 2703 	cp a,#TK_INTGR 
      000F74 26 05            [ 1] 2704 	jrne print_exit 
      000F76 CD 08 83         [ 4] 2705     call print_int 
      000F79 20 A8            [ 2] 2706 	jra reset_comma 
      000F7B                       2707 print_exit:
      000F7B 0D 01            [ 1] 2708 	tnz (CCOMMA,sp)
      000F7D 26 05            [ 1] 2709 	jrne 9$
      000F7F A6 0D            [ 1] 2710 	ld a,#CR 
      000F81 CD 02 C1         [ 4] 2711     call putc 
      000F84                       2712 9$:	_drop VSIZE 
      000F84 5B 01            [ 2]    1     addw sp,#VSIZE 
      000F86 81               [ 4] 2713 	ret 
                                   2714 
                                   2715 ;----------------------
                                   2716 ; 'save_context' and
                                   2717 ; 'rest_context' must be 
                                   2718 ; called at the same 
                                   2719 ; call stack depth 
                                   2720 ; i.e. SP must have the 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2721 ; save value at  
                                   2722 ; entry point of both 
                                   2723 ; routine. 
                                   2724 ;---------------------
                           000004  2725 	CTXT_SIZE=4 ; size of saved data 
                                   2726 ;--------------------
                                   2727 ; save current BASIC
                                   2728 ; interpreter context 
                                   2729 ; on stack 
                                   2730 ;--------------------
      000F87                       2731 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000F87                       2732 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      000F87                       2733 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      000F87                       2734 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      000F87                       2735 save_context:
      000F87 CE 00 04         [ 2] 2736 	ldw x,basicptr 
      000F8A 1F 03            [ 2] 2737 	ldw (BPTR,sp),x
      000F8C C6 00 01         [ 1] 2738 	ld a,in 
      000F8F 6B 05            [ 1] 2739 	ld (IN,sp),a
      000F91 C6 00 03         [ 1] 2740 	ld a,count 
      000F94 6B 06            [ 1] 2741 	ld (CNT,sp),a  
      000F96 81               [ 4] 2742 	ret
                                   2743 
                                   2744 ;-----------------------
                                   2745 ; restore previously saved 
                                   2746 ; BASIC interpreter context 
                                   2747 ; from stack 
                                   2748 ;-------------------------
      000F97                       2749 rest_context:
      000F97 1E 03            [ 2] 2750 	ldw x,(BPTR,sp)
      000F99 CF 00 04         [ 2] 2751 	ldw basicptr,x 
      000F9C 7B 05            [ 1] 2752 	ld a,(IN,sp)
      000F9E C7 00 01         [ 1] 2753 	ld in,a
      000FA1 7B 06            [ 1] 2754 	ld a,(CNT,sp)
      000FA3 C7 00 03         [ 1] 2755 	ld count,a  
      000FA6 81               [ 4] 2756 	ret
                                   2757 
                                   2758 
                                   2759 
                                   2760 ;------------------------------------------
                                   2761 ; BASIC: INPUT [string]var[,[string]var]
                                   2762 ; input value in variables 
                                   2763 ; [string] optionally can be used as prompt 
                                   2764 ;-----------------------------------------
                           000001  2765 	CX_BPTR=1
                           000003  2766 	CX_IN=3
                           000004  2767 	CX_CNT=4
                           000005  2768 	SKIP=5
                           000006  2769 	VAR_ADDR=6
                           000007  2770 	VSIZE=7
      000FA7                       2771 input_var:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FA7                       2772 	_vars VSIZE 
      000FA7 52 07            [ 2]    1     sub sp,#VSIZE 
      000FA9                       2773 input_loop:
      000FA9 0F 05            [ 1] 2774 	clr (SKIP,sp)
      000FAB CD 08 28         [ 4] 2775 	call next_token 
      000FAE A1 02            [ 1] 2776 	cp a,#TK_QSTR 
      000FB0 26 08            [ 1] 2777 	jrne 1$ 
      000FB2 CD 1F F4         [ 4] 2778 	call puts 
      000FB5 03 05            [ 1] 2779 	cpl (SKIP,sp)
      000FB7 CD 08 28         [ 4] 2780 	call next_token 
      000FBA A1 85            [ 1] 2781 1$: cp a,#TK_VAR  
      000FBC 27 03            [ 1] 2782 	jreq 2$ 
      000FBE CC 07 39         [ 2] 2783 	jp syntax_error
      000FC1 1F 06            [ 2] 2784 2$:	ldw (VAR_ADDR,sp),x 
      000FC3 0D 05            [ 1] 2785 	tnz (SKIP,sp)
      000FC5 26 06            [ 1] 2786 	jrne 21$ 
      000FC7 CD 27 C4         [ 4] 2787 	call var_name 
      000FCA CD 02 C1         [ 4] 2788 	call putc   
      000FCD                       2789 21$:
      000FCD A6 3A            [ 1] 2790 	ld a,#':
      000FCF CD 02 C1         [ 4] 2791 	call putc 
      000FD2 CD 0F 87         [ 4] 2792 	call save_context 
      000FD5 72 5F 00 03      [ 1] 2793 	clr count  
      000FD9 CD 20 F9         [ 4] 2794 	call readln 
      000FDC AE 16 90         [ 2] 2795 	ldw x,#tib 
      000FDF 3B 00 03         [ 1] 2796 	push count
      000FE2 4B 00            [ 1] 2797 	push #0 
      000FE4 72 FB 01         [ 2] 2798 	addw x,(1,sp)
      000FE7 5C               [ 1] 2799 	incw x 
      000FE8                       2800 	_drop 2 
      000FE8 5B 02            [ 2]    1     addw sp,#2 
      000FEA 72 5F 00 01      [ 1] 2801 	clr in 
      000FEE CD 25 13         [ 4] 2802 	call get_token
      000FF1 A1 84            [ 1] 2803 	cp a,#TK_INTGR
      000FF3 27 06            [ 1] 2804 	jreq 3$ 
      000FF5 CD 0F 97         [ 4] 2805 	call rest_context 
      000FF8 CC 07 39         [ 2] 2806 	jp syntax_error
      000FFB 16 06            [ 2] 2807 3$: ldw y,(VAR_ADDR,sp) 
      000FFD 90 FF            [ 2] 2808 	ldw (y),x 
      000FFF CD 0F 97         [ 4] 2809 	call rest_context
      001002 CD 08 28         [ 4] 2810 	call next_token 
      001005 A1 09            [ 1] 2811 	cp a,#TK_COMMA 
      001007 27 A0            [ 1] 2812 	jreq input_loop
      001009 A1 00            [ 1] 2813 	cp a,#TK_NONE 
      00100B 27 07            [ 1] 2814 	jreq input_exit  
      00100D A1 0B            [ 1] 2815 	cp a,#TK_COLON 
      00100F 27 03            [ 1] 2816     jreq input_exit 
      001011 CC 07 39         [ 2] 2817 	jp syntax_error 
      001014                       2818 input_exit:
      001014                       2819 	_drop VSIZE 
      001014 5B 07            [ 2]    1     addw sp,#VSIZE 
      001016 81               [ 4] 2820 	ret 
                                   2821 
                                   2822 
                                   2823 ;---------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2824 ; BASIC: REMARK | ' 
                                   2825 ; skip comment to end of line 
                                   2826 ;---------------------- 
      001017                       2827 remark::
      001017 55 00 03 00 01   [ 1] 2828 	mov in,count 
      00101C 81               [ 4] 2829  	ret 
                                   2830 
                                   2831 
                                   2832 ;---------------------
                                   2833 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   2834 ; read in loop 'addr'  
                                   2835 ; apply & 'mask' to value 
                                   2836 ; loop while result==0.  
                                   2837 ; 'xor_mask' is used to 
                                   2838 ; invert the wait logic.
                                   2839 ; i.e. loop while not 0.
                                   2840 ;---------------------
                           000001  2841 	XMASK=1 
                           000002  2842 	MASK=2
                           000003  2843 	ADDR=3
                           000004  2844 	VSIZE=4
      00101D                       2845 wait: 
      00101D                       2846 	_vars VSIZE
      00101D 52 04            [ 2]    1     sub sp,#VSIZE 
      00101F 0F 01            [ 1] 2847 	clr (XMASK,sp) 
      001021 CD 0B E1         [ 4] 2848 	call arg_list 
      001024 A1 02            [ 1] 2849 	cp a,#2
      001026 24 03            [ 1] 2850 	jruge 0$
      001028 CC 07 39         [ 2] 2851 	jp syntax_error 
      00102B A1 03            [ 1] 2852 0$:	cp a,#3
      00102D 25 04            [ 1] 2853 	jrult 1$
      00102F 85               [ 2] 2854 	popw x 
      001030 9F               [ 1] 2855 	ld a,xl
      001031 6B 01            [ 1] 2856 	ld (XMASK,sp),a 
      001033 85               [ 2] 2857 1$: popw x ; mask 
      001034 9F               [ 1] 2858 	ld a,xl 
      001035 6B 02            [ 1] 2859 	ld (MASK,sp),a 
      001037 85               [ 2] 2860 	popw x ; address 
      001038 F6               [ 1] 2861 2$:	ld a,(x)
      001039 14 02            [ 1] 2862 	and a,(MASK,sp)
      00103B 18 01            [ 1] 2863 	xor a,(XMASK,sp)
      00103D 27 F9            [ 1] 2864 	jreq 2$ 
      00103F                       2865 	_drop VSIZE 
      00103F 5B 04            [ 2]    1     addw sp,#VSIZE 
      001041 81               [ 4] 2866 	ret 
                                   2867 
                                   2868 ;---------------------
                                   2869 ; BASIC: BSET addr,mask
                                   2870 ; set bits at 'addr' corresponding 
                                   2871 ; to those of 'mask' that are at 1.
                                   2872 ; arguments:
                                   2873 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2874 ;   mask        mask|addr
                                   2875 ; output:
                                   2876 ;	none 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2877 ;--------------------------
      001042                       2878 bit_set:
      001042 CD 0B E1         [ 4] 2879 	call arg_list 
      001045 A1 02            [ 1] 2880 	cp a,#2	 
      001047 27 03            [ 1] 2881 	jreq 1$ 
      001049 CC 07 39         [ 2] 2882 	jp syntax_error
      00104C                       2883 1$: 
      00104C 85               [ 2] 2884 	popw x ; mask 
      00104D 9F               [ 1] 2885 	ld a,xl 
      00104E 85               [ 2] 2886 	popw x ; addr  
      00104F FA               [ 1] 2887 	or a,(x)
      001050 F7               [ 1] 2888 	ld (x),a
      001051 81               [ 4] 2889 	ret 
                                   2890 
                                   2891 ;---------------------
                                   2892 ; BASIC: BRES addr,mask
                                   2893 ; reset bits at 'addr' corresponding 
                                   2894 ; to those of 'mask' that are at 1.
                                   2895 ; arguments:
                                   2896 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2897 ;   mask	    ~mask&*addr  
                                   2898 ; output:
                                   2899 ;	none 
                                   2900 ;--------------------------
      001052                       2901 bit_reset:
      001052 CD 0B E1         [ 4] 2902 	call arg_list 
      001055 A1 02            [ 1] 2903 	cp a,#2  
      001057 27 03            [ 1] 2904 	jreq 1$ 
      001059 CC 07 39         [ 2] 2905 	jp syntax_error
      00105C                       2906 1$: 
      00105C 85               [ 2] 2907 	popw x ; mask 
      00105D 9F               [ 1] 2908 	ld a,xl 
      00105E 43               [ 1] 2909 	cpl a 
      00105F 85               [ 2] 2910 	popw x ; addr  
      001060 F4               [ 1] 2911 	and a,(x)
      001061 F7               [ 1] 2912 	ld (x),a 
      001062 81               [ 4] 2913 	ret 
                                   2914 
                                   2915 ;---------------------
                                   2916 ; BASIC: BTOGL addr,mask
                                   2917 ; toggle bits at 'addr' corresponding 
                                   2918 ; to those of 'mask' that are at 1.
                                   2919 ; arguments:
                                   2920 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2921 ;   mask	    mask^*addr  
                                   2922 ; output:
                                   2923 ;	none 
                                   2924 ;--------------------------
      001063                       2925 bit_toggle:
      001063 CD 0B E1         [ 4] 2926 	call arg_list 
      001066 A1 02            [ 1] 2927 	cp a,#2 
      001068 27 03            [ 1] 2928 	jreq 1$ 
      00106A CC 07 39         [ 2] 2929 	jp syntax_error
      00106D 85               [ 2] 2930 1$: popw x ; mask 
      00106E 9F               [ 1] 2931 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00106F 85               [ 2] 2932 	popw x ; addr  
      001070 F8               [ 1] 2933 	xor a,(x)
      001071 F7               [ 1] 2934 	ld (x),a 
      001072 81               [ 4] 2935 	ret 
                                   2936 
                                   2937 
                                   2938 ;---------------------
                                   2939 ; BASIC: BTEST(addr,bit)
                                   2940 ; return bit value at 'addr' 
                                   2941 ; bit is in range {0..7}.
                                   2942 ; arguments:
                                   2943 ; 	addr 		memory address RAM|PERIPHERAL 
                                   2944 ;   bit 	    bit position {0..7}  
                                   2945 ; output:
                                   2946 ;	none 
                                   2947 ;--------------------------
      001073                       2948 bit_test:
      001073 CD 0B DC         [ 4] 2949 	call func_args 
      001076 A1 02            [ 1] 2950 	cp a,#2
      001078 27 03            [ 1] 2951 	jreq 0$
      00107A CC 07 39         [ 2] 2952 	jp syntax_error
      00107D                       2953 0$:	
      00107D 85               [ 2] 2954 	popw x 
      00107E 9F               [ 1] 2955 	ld a,xl 
      00107F A4 07            [ 1] 2956 	and a,#7
      001081 88               [ 1] 2957 	push a   
      001082 A6 01            [ 1] 2958 	ld a,#1 
      001084 0D 01            [ 1] 2959 1$: tnz (1,sp)
      001086 27 05            [ 1] 2960 	jreq 2$
      001088 48               [ 1] 2961 	sll a 
      001089 0A 01            [ 1] 2962 	dec (1,sp)
      00108B 20 F7            [ 2] 2963 	jra 1$
      00108D                       2964 2$: _drop 1 
      00108D 5B 01            [ 2]    1     addw sp,#1 
      00108F 85               [ 2] 2965 	popw x 
      001090 F4               [ 1] 2966 	and a,(x)
      001091 27 02            [ 1] 2967 	jreq 3$
      001093 A6 01            [ 1] 2968 	ld a,#1 
      001095 5F               [ 1] 2969 3$:	clrw x 
      001096 97               [ 1] 2970 	ld xl,a 
      001097 A6 84            [ 1] 2971 	ld a,#TK_INTGR
      001099 81               [ 4] 2972 	ret
                                   2973 
                                   2974 
                                   2975 ;--------------------
                                   2976 ; BASIC: POKE addr,byte
                                   2977 ; put a byte at addr 
                                   2978 ;--------------------
      00109A                       2979 poke:
      00109A CD 0B E1         [ 4] 2980 	call arg_list 
      00109D A1 02            [ 1] 2981 	cp a,#2
      00109F 27 03            [ 1] 2982 	jreq 1$
      0010A1 CC 07 39         [ 2] 2983 	jp syntax_error
      0010A4                       2984 1$:	
      0010A4 85               [ 2] 2985 	popw x  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010A5 9F               [ 1] 2986     ld a,xl 
      0010A6 85               [ 2] 2987 	popw x 
      0010A7 F7               [ 1] 2988 	ld (x),a 
      0010A8 81               [ 4] 2989 	ret 
                                   2990 
                                   2991 ;-----------------------
                                   2992 ; BASIC: PEEK(addr)
                                   2993 ; get the byte at addr 
                                   2994 ; input:
                                   2995 ;	none 
                                   2996 ; output:
                                   2997 ;	X 		value 
                                   2998 ;-----------------------
      0010A9                       2999 peek:
      0010A9 CD 0B DC         [ 4] 3000 	call func_args
      0010AC A1 01            [ 1] 3001 	cp a,#1 
      0010AE 27 03            [ 1] 3002 	jreq 1$
      0010B0 CC 07 39         [ 2] 3003 	jp syntax_error
      0010B3 85               [ 2] 3004 1$: popw x 
      0010B4 F6               [ 1] 3005 	ld a,(x)
      0010B5 5F               [ 1] 3006 	clrw x 
      0010B6 97               [ 1] 3007 	ld xl,a 
      0010B7 A6 84            [ 1] 3008 	ld a,#TK_INTGR
      0010B9 81               [ 4] 3009 	ret 
                                   3010 
                                   3011 ;---------------------------
                                   3012 ; BASIC IF expr : instructions
                                   3013 ; evaluate expr and if true 
                                   3014 ; execute instructions on same line. 
                                   3015 ;----------------------------
      0010BA                       3016 if: 
      0010BA CD 0D 29         [ 4] 3017 	call relation 
      0010BD A1 84            [ 1] 3018 	cp a,#TK_INTGR
      0010BF 27 03            [ 1] 3019 	jreq 1$ 
      0010C1 CC 07 39         [ 2] 3020 	jp syntax_error
      0010C4 4F               [ 1] 3021 1$:	clr a 
      0010C5 5D               [ 2] 3022 	tnzw x 
      0010C6 26 05            [ 1] 3023 	jrne 9$  
                                   3024 ;skip to next line
      0010C8 55 00 03 00 01   [ 1] 3025 	mov in,count
      0010CD 81               [ 4] 3026 9$:	ret 
                                   3027 
                                   3028 ;------------------------
                                   3029 ; BASIC: FOR var=expr 
                                   3030 ; set variable to expression 
                                   3031 ; leave variable address 
                                   3032 ; on stack and set
                                   3033 ; FLOOP bit in 'flags'
                                   3034 ;-----------------
                           000001  3035 	RETL1=1 ; return address  
                           000003  3036 	FSTEP=3  ; variable increment
                           000005  3037 	LIMIT=5 ; loop limit 
                           000007  3038 	CVAR=7   ; control variable 
                           000009  3039 	INW=9   ;  in.w saved
                           00000B  3040 	BPTR=11 ; baseptr saved
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                           00000A  3041 	VSIZE=10  
      0010CE                       3042 for: ; { -- var_addr }
      0010CE 85               [ 2] 3043 	popw x ; call return address 
      0010CF                       3044 	_vars VSIZE 
      0010CF 52 0A            [ 2]    1     sub sp,#VSIZE 
      0010D1 89               [ 2] 3045 	pushw x  ; RETL1 
      0010D2 A6 85            [ 1] 3046 	ld a,#TK_VAR 
      0010D4 CD 0B CF         [ 4] 3047 	call expect
      0010D7 1F 07            [ 2] 3048 	ldw (CVAR,sp),x  ; control variable 
      0010D9 CD 0E 00         [ 4] 3049 	call let_var 
      0010DC 72 14 00 20      [ 1] 3050 	bset flags,#FLOOP 
                                   3051 ; open space on stack for loop data 
      0010E0 5F               [ 1] 3052 	clrw x 
      0010E1 1F 0B            [ 2] 3053 	ldw (BPTR,sp),x 
      0010E3 1F 09            [ 2] 3054 	ldw (INW,sp),x 
      0010E5 CD 08 28         [ 4] 3055 	call next_token 
      0010E8 A1 80            [ 1] 3056 	cp a,#TK_CMD 
      0010EA 27 03            [ 1] 3057 	jreq 1$
      0010EC CC 07 39         [ 2] 3058 	jp syntax_error
      0010EF                       3059 1$:  
      0010EF A3 10 F7         [ 2] 3060 	cpw x,#to 
      0010F2 27 03            [ 1] 3061 	jreq to
      0010F4 CC 07 39         [ 2] 3062 	jp syntax_error 
                                   3063 
                                   3064 ;-----------------------------------
                                   3065 ; BASIC: TO expr 
                                   3066 ; second part of FOR loop initilization
                                   3067 ; leave limit on stack and set 
                                   3068 ; FTO bit in 'flags'
                                   3069 ;-----------------------------------
      0010F7                       3070 to: ; { var_addr -- var_addr limit step }
      0010F7 72 04 00 20 03   [ 2] 3071 	btjt flags,#FLOOP,1$
      0010FC CC 07 39         [ 2] 3072 	jp syntax_error
      0010FF CD 0D 29         [ 4] 3073 1$: call relation  
      001102 A1 84            [ 1] 3074 	cp a,#TK_INTGR 
      001104 27 03            [ 1] 3075 	jreq 2$ 
      001106 CC 07 39         [ 2] 3076 	jp syntax_error
      001109 1F 05            [ 2] 3077 2$: ldw (LIMIT,sp),x
                                   3078 ;	ldw x,in.w 
      00110B CD 08 28         [ 4] 3079 	call next_token
      00110E A1 00            [ 1] 3080 	cp a,#TK_NONE  
      001110 27 0E            [ 1] 3081 	jreq 4$ 
      001112 A1 80            [ 1] 3082 	cp a,#TK_CMD
      001114 26 05            [ 1] 3083 	jrne 3$
      001116 A3 11 27         [ 2] 3084 	cpw x,#step 
      001119 27 0C            [ 1] 3085 	jreq step
      00111B                       3086 3$:	
      00111B                       3087 	_unget_token   	 
      00111B 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001120                       3088 4$:	
      001120 AE 00 01         [ 2] 3089 	ldw x,#1   ; default step  
      001123 1F 03            [ 2] 3090 	ldw (FSTEP,sp),x 
      001125 20 14            [ 2] 3091 	jra store_loop_addr 
                                   3092 
                                   3093 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3094 ;----------------------------------
                                   3095 ; BASIC: STEP expr 
                                   3096 ; optional third par of FOR loop
                                   3097 ; initialization. 	
                                   3098 ;------------------------------------
      001127                       3099 step: ; {var limit -- var limit step}
      001127 72 04 00 20 03   [ 2] 3100 	btjt flags,#FLOOP,1$
      00112C CC 07 39         [ 2] 3101 	jp syntax_error
      00112F CD 0D 29         [ 4] 3102 1$: call relation
      001132 A1 84            [ 1] 3103 	cp a,#TK_INTGR
      001134 27 03            [ 1] 3104 	jreq 2$
      001136 CC 07 39         [ 2] 3105 	jp syntax_error
      001139 1F 03            [ 2] 3106 2$:	ldw (FSTEP,sp),x ; step
                                   3107 ; leave loop back entry point on cstack 
                                   3108 ; cstack is 1 call deep from interpreter
      00113B                       3109 store_loop_addr:
      00113B CE 00 04         [ 2] 3110 	ldw x,basicptr  
      00113E 1F 0B            [ 2] 3111 	ldw (BPTR,sp),x 
      001140 CE 00 00         [ 2] 3112 	ldw x,in.w 
      001143 1F 09            [ 2] 3113 	ldw (INW,sp),x   
      001145 72 15 00 20      [ 1] 3114 	bres flags,#FLOOP 
      001149 72 5C 00 1D      [ 1] 3115 	inc loop_depth  
      00114D 81               [ 4] 3116 	ret 
                                   3117 
                                   3118 ;--------------------------------
                                   3119 ; BASIC: NEXT var 
                                   3120 ; FOR loop control 
                                   3121 ; increment variable with step 
                                   3122 ; and compare with limit 
                                   3123 ; loop if threshold not crossed.
                                   3124 ; else stack. 
                                   3125 ; and decrement 'loop_depth' 
                                   3126 ;--------------------------------
      00114E                       3127 next: ; {var limit step retl1 -- [var limit step ] }
      00114E 72 5D 00 1D      [ 1] 3128 	tnz loop_depth 
      001152 26 03            [ 1] 3129 	jrne 1$ 
      001154 CC 07 39         [ 2] 3130 	jp syntax_error 
      001157                       3131 1$: 
      001157 A6 85            [ 1] 3132 	ld a,#TK_VAR 
      001159 CD 0B CF         [ 4] 3133 	call expect
                                   3134 ; check for good variable after NEXT 	 
      00115C 13 07            [ 2] 3135 	cpw x,(CVAR,sp)
      00115E 27 03            [ 1] 3136 	jreq 2$  
      001160 CC 07 39         [ 2] 3137 	jp syntax_error ; not the good one 
      001163                       3138 2$: ; increment variable 
      001163 FE               [ 2] 3139 	ldw x,(x)  ; get var value 
      001164 72 FB 03         [ 2] 3140 	addw x,(FSTEP,sp) ; var+step 
      001167 16 07            [ 2] 3141 	ldw y,(CVAR,sp)
      001169 90 FF            [ 2] 3142 	ldw (y),x ; save var new value 
                                   3143 ; check sign of STEP  
      00116B A6 80            [ 1] 3144 	ld a,#0x80
      00116D 15 03            [ 1] 3145 	bcp a,(FSTEP,sp)
      00116F 2A 06            [ 1] 3146 	jrpl 4$
                                   3147 ;negative step 
      001171 13 05            [ 2] 3148 	cpw x,(LIMIT,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001173 2F 1B            [ 1] 3149 	jrslt loop_done
      001175 20 04            [ 2] 3150 	jra loop_back 
      001177                       3151 4$: ; positive step
      001177 13 05            [ 2] 3152 	cpw x,(LIMIT,sp)
      001179 2C 15            [ 1] 3153 	jrsgt loop_done
      00117B                       3154 loop_back:
      00117B 1E 0B            [ 2] 3155 	ldw x,(BPTR,sp)
      00117D CF 00 04         [ 2] 3156 	ldw basicptr,x 
      001180 72 01 00 20 05   [ 2] 3157 	btjf flags,#FRUN,1$ 
      001185 E6 02            [ 1] 3158 	ld a,(2,x)
      001187 C7 00 03         [ 1] 3159 	ld count,a
      00118A 1E 09            [ 2] 3160 1$:	ldw x,(INW,sp)
      00118C CF 00 00         [ 2] 3161 	ldw in.w,x 
      00118F 81               [ 4] 3162 	ret 
      001190                       3163 loop_done:
                                   3164 	; remove loop data from stack  
      001190 85               [ 2] 3165 	popw x
      001191                       3166 	_drop VSIZE 
      001191 5B 0A            [ 2]    1     addw sp,#VSIZE 
      001193 72 5A 00 1D      [ 1] 3167 	dec loop_depth 
                                   3168 ;	pushw x 
                                   3169 ;	ret 
      001197 FC               [ 2] 3170 	jp (x)
                                   3171 
                                   3172 ;----------------------------
                                   3173 ; called by goto/gosub
                                   3174 ; to get target line number 
                                   3175 ;---------------------------
      001198                       3176 get_target_line:
      001198 CD 0D 29         [ 4] 3177 	call relation 
      00119B A1 84            [ 1] 3178 	cp a,#TK_INTGR
      00119D 27 03            [ 1] 3179 	jreq 1$
      00119F CC 07 39         [ 2] 3180 	jp syntax_error
      0011A2 4F               [ 1] 3181 1$:	clr a
      0011A3 90 CE 00 04      [ 2] 3182 	ldw y,basicptr 
      0011A7 90 FE            [ 2] 3183 	ldw y,(y)
      0011A9 90 89            [ 2] 3184 	pushw y 
      0011AB 13 01            [ 2] 3185 	cpw x,(1,sp)
      0011AD 5B 02            [ 2] 3186 	addw sp,#2 
      0011AF 25 01            [ 1] 3187 	jrult 11$
      0011B1 4C               [ 1] 3188 	inc a 
      0011B2                       3189 11$:	
      0011B2 CD 22 DC         [ 4] 3190 	call search_lineno  
      0011B5 5D               [ 2] 3191 	tnzw x 
      0011B6 26 05            [ 1] 3192 	jrne 2$ 
      0011B8 A6 05            [ 1] 3193 	ld a,#ERR_NO_LINE 
      0011BA CC 07 3B         [ 2] 3194 	jp tb_error 
      0011BD 81               [ 4] 3195 2$:	ret 
                                   3196 
                                   3197 ;------------------------
                                   3198 ; BASIC: GOTO line# 
                                   3199 ; jump to line# 
                                   3200 ; here cstack is 2 call deep from interpreter 
                                   3201 ;------------------------
      0011BE                       3202 goto:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011BE 72 00 00 20 06   [ 2] 3203 	btjt flags,#FRUN,0$ 
      0011C3 A6 06            [ 1] 3204 	ld a,#ERR_RUN_ONLY
      0011C5 CC 07 3B         [ 2] 3205 	jp tb_error 
      0011C8 81               [ 4] 3206 	ret 
      0011C9 CD 11 98         [ 4] 3207 0$:	call get_target_line
      0011CC                       3208 jp_to_target:
      0011CC CF 00 04         [ 2] 3209 	ldw basicptr,x 
      0011CF E6 02            [ 1] 3210 	ld a,(2,x)
      0011D1 C7 00 03         [ 1] 3211 	ld count,a 
      0011D4 35 03 00 01      [ 1] 3212 	mov in,#3 
      0011D8 81               [ 4] 3213 	ret 
                                   3214 
                                   3215 
                                   3216 ;--------------------
                                   3217 ; BASIC: GOSUB line#
                                   3218 ; basic subroutine call
                                   3219 ; actual line# and basicptr 
                                   3220 ; are saved on cstack
                                   3221 ; here cstack is 2 call deep from interpreter 
                                   3222 ;--------------------
                           000003  3223 	RET_ADDR=3
                           000005  3224 	RET_INW=5
                           000004  3225 	VSIZE=4  
      0011D9                       3226 gosub:
      0011D9 72 00 00 20 06   [ 2] 3227 	btjt flags,#FRUN,0$ 
      0011DE A6 06            [ 1] 3228 	ld a,#ERR_RUN_ONLY
      0011E0 CC 07 3B         [ 2] 3229 	jp tb_error 
      0011E3 81               [ 4] 3230 	ret 
      0011E4 85               [ 2] 3231 0$:	popw x 
      0011E5                       3232 	_vars VSIZE  
      0011E5 52 04            [ 2]    1     sub sp,#VSIZE 
      0011E7 89               [ 2] 3233 	pushw x 
      0011E8 CE 00 04         [ 2] 3234 	ldw x,basicptr
      0011EB 1F 03            [ 2] 3235 	ldw (RET_ADDR,sp),x 
      0011ED CD 11 98         [ 4] 3236 	call get_target_line  
      0011F0 89               [ 2] 3237 	pushw x 
      0011F1 CE 00 00         [ 2] 3238 	ldw x,in.w 
      0011F4 1F 07            [ 2] 3239 	ldw (RET_INW+2,sp),x
      0011F6 85               [ 2] 3240 	popw x 
      0011F7 20 D3            [ 2] 3241 	jra jp_to_target
                                   3242 
                                   3243 ;------------------------
                                   3244 ; BASIC: RETURN 
                                   3245 ; exit from a subroutine 
                                   3246 ; 
                                   3247 ;------------------------
      0011F9                       3248 return:
      0011F9 72 00 00 20 05   [ 2] 3249 	btjt flags,#FRUN,0$ 
      0011FE A6 06            [ 1] 3250 	ld a,#ERR_RUN_ONLY
      001200 CC 07 3B         [ 2] 3251 	jp tb_error 
      001203                       3252 0$:	
      001203 1E 03            [ 2] 3253 	ldw x,(RET_ADDR,sp) 
      001205 CF 00 04         [ 2] 3254 	ldw basicptr,x
      001208 E6 02            [ 1] 3255 	ld a,(2,x)
      00120A C7 00 03         [ 1] 3256 	ld count,a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00120D 1E 05            [ 2] 3257 	ldw x,(RET_INW,sp)
      00120F CF 00 00         [ 2] 3258 	ldw in.w,x 
      001212 85               [ 2] 3259 	popw x 
      001213                       3260 	_drop VSIZE 
      001213 5B 04            [ 2]    1     addw sp,#VSIZE 
      001215 89               [ 2] 3261 	pushw x
      001216 81               [ 4] 3262 	ret  
                                   3263 
                                   3264 
                                   3265 ;----------------------------------
                                   3266 ; BASIC: RUN
                                   3267 ; run BASIC program in RAM
                                   3268 ;----------------------------------- 
      001217                       3269 run: 
      001217 72 01 00 20 02   [ 2] 3270 	btjf flags,#FRUN,0$  
      00121C 4F               [ 1] 3271 	clr a 
      00121D 81               [ 4] 3272 	ret
      00121E                       3273 0$: 
      00121E 72 09 00 20 12   [ 2] 3274 	btjf flags,#FBREAK,1$
      001223                       3275 	_drop 2 
      001223 5B 02            [ 2]    1     addw sp,#2 
      001225 CD 0F 97         [ 4] 3276 	call rest_context
      001228                       3277 	_drop CTXT_SIZE 
      001228 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      00122A 72 19 00 20      [ 1] 3278 	bres flags,#FBREAK 
      00122E 72 10 00 20      [ 1] 3279 	bset flags,#FRUN 
      001232 CC 07 DC         [ 2] 3280 	jp interpreter 
      001235 CE 00 19         [ 2] 3281 1$:	ldw x,txtbgn
      001238 C3 00 1B         [ 2] 3282 	cpw x,txtend 
      00123B 2B 0F            [ 1] 3283 	jrmi run_it 
      00123D AE 06 D2         [ 2] 3284 	ldw x,#err_no_prog
      001240 CD 1F F4         [ 4] 3285 	call puts 
      001243 55 00 03 00 01   [ 1] 3286 	mov in,count
      001248 85               [ 2] 3287 	popw x 
      001249 CC 05 1D         [ 2] 3288 	jp run_app  
      00124C                       3289 run_it:	 
      00124C CD 0D E5         [ 4] 3290     call ubound 
      00124F                       3291 	_drop 2 ; drop return address 
      00124F 5B 02            [ 2]    1     addw sp,#2 
                                   3292 ; clear data pointer 
      001251 5F               [ 1] 3293 	clrw x 
      001252 CF 00 06         [ 2] 3294 	ldw data_ptr,x 
      001255 72 5F 00 08      [ 1] 3295 	clr data_ofs 
      001259 72 5F 00 09      [ 1] 3296 	clr data_len 
                                   3297 ; initialize BASIC pointer 
      00125D CE 00 19         [ 2] 3298 	ldw x,txtbgn 
      001260 CF 00 04         [ 2] 3299 	ldw basicptr,x 
      001263 E6 02            [ 1] 3300 	ld a,(2,x)
      001265 C7 00 03         [ 1] 3301 	ld count,a
      001268 35 03 00 01      [ 1] 3302 	mov in,#3	
      00126C 72 10 00 20      [ 1] 3303 	bset flags,#FRUN 
      001270 CC 07 DC         [ 2] 3304 	jp interpreter 
                                   3305 
                                   3306 
                                   3307 ;----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3308 ; BASIC: END
                                   3309 ; end running program
                                   3310 ;---------------------- 
      001273                       3311 cmd_end: 
                                   3312 ; clean stack 
      001273 AE 17 FF         [ 2] 3313 	ldw x,#STACK_EMPTY
      001276 94               [ 1] 3314 	ldw sp,x 
      001277 CC 07 BD         [ 2] 3315 	jp warm_start
                                   3316 
                                   3317 ;-----------------
                                   3318 ; 1 Khz beep 
                                   3319 ;-----------------
      00127A                       3320 beep_1khz:: 
      00127A AE 00 64         [ 2] 3321 	ldw x,#100
      00127D 90 AE 03 E8      [ 2] 3322 	ldw y,#1000
      001281 20 0D            [ 2] 3323 	jra beep
                                   3324 
                                   3325 ;-----------------------
                                   3326 ; BASIC: TONE expr1,expr2
                                   3327 ; used TIMER2 channel 1
                                   3328 ; to produce a tone 
                                   3329 ; arguments:
                                   3330 ;    expr1   frequency 
                                   3331 ;    expr2   duration msec.
                                   3332 ;---------------------------
      001283                       3333 tone:
      001283 CD 0B E1         [ 4] 3334 	call arg_list 
      001286 A1 02            [ 1] 3335 	cp a,#2 
      001288 27 03            [ 1] 3336 	jreq 1$
      00128A CC 07 39         [ 2] 3337 	jp syntax_error 
      00128D                       3338 1$: 
      00128D 85               [ 2] 3339 	popw x ; duration
      00128E 90 85            [ 2] 3340 	popw y ; frequency 
      001290                       3341 beep:  
      001290 89               [ 2] 3342 	pushw x 
      001291 AE F4 24         [ 2] 3343 	ldw x,#TIM2_CLK_FREQ
      001294 65               [ 2] 3344 	divw x,y 
                                   3345 ; round to nearest integer 
      001295 90 A3 7A 12      [ 2] 3346 	cpw y,#TIM2_CLK_FREQ/2
      001299 2B 01            [ 1] 3347 	jrmi 2$
      00129B 5C               [ 1] 3348 	incw x 
      00129C                       3349 2$:	 
      00129C 9E               [ 1] 3350 	ld a,xh 
      00129D C7 53 0D         [ 1] 3351 	ld TIM2_ARRH,a 
      0012A0 9F               [ 1] 3352 	ld a,xl 
      0012A1 C7 53 0E         [ 1] 3353 	ld TIM2_ARRL,a 
                                   3354 ; 50% duty cycle 
      0012A4 8C               [ 1] 3355 	ccf 
      0012A5 56               [ 2] 3356 	rrcw x 
      0012A6 9E               [ 1] 3357 	ld a,xh 
      0012A7 C7 53 0F         [ 1] 3358 	ld TIM2_CCR1H,a 
      0012AA 9F               [ 1] 3359 	ld a,xl
      0012AB C7 53 10         [ 1] 3360 	ld TIM2_CCR1L,a
      0012AE 72 10 53 08      [ 1] 3361 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      0012B2 72 10 53 00      [ 1] 3362 	bset TIM2_CR1,#TIM2_CR1_CEN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012B6 72 10 53 04      [ 1] 3363 	bset TIM2_EGR,#TIM2_EGR_UG
      0012BA 85               [ 2] 3364 	popw x 
      0012BB CD 16 46         [ 4] 3365 	call pause02
      0012BE 72 11 53 08      [ 1] 3366 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      0012C2 72 11 53 00      [ 1] 3367 	bres TIM2_CR1,#TIM2_CR1_CEN 
      0012C6 81               [ 4] 3368 	ret 
                                   3369 
                                   3370 ;-------------------------------
                                   3371 ; BASIC: ADCON 0|1 [,divisor]  
                                   3372 ; disable/enanble ADC 
                                   3373 ;-------------------------------
                           000003  3374 	ONOFF=3 
                           000001  3375 	DIVSOR=1
                           000004  3376 	VSIZE=4 
      0012C7                       3377 power_adc:
      0012C7 CD 0B E1         [ 4] 3378 	call arg_list 
      0012CA A1 02            [ 1] 3379 	cp a,#2	
      0012CC 27 0B            [ 1] 3380 	jreq 1$
      0012CE A1 01            [ 1] 3381 	cp a,#1 
      0012D0 27 03            [ 1] 3382 	jreq 0$ 
      0012D2 CC 07 39         [ 2] 3383 	jp syntax_error 
      0012D5 AE 00 00         [ 2] 3384 0$: ldw x,#0
      0012D8 89               [ 2] 3385 	pushw x  ; divisor 
      0012D9 1E 03            [ 2] 3386 1$: ldw x,(ONOFF,sp)
      0012DB 5D               [ 2] 3387 	tnzw x 
      0012DC 27 1A            [ 1] 3388 	jreq 2$ 
      0012DE 1E 01            [ 2] 3389 	ldw x,(DIVSOR,sp) ; divisor 
      0012E0 9F               [ 1] 3390 	ld a,xl
      0012E1 A4 07            [ 1] 3391 	and a,#7
      0012E3 4E               [ 1] 3392 	swap a 
      0012E4 C7 54 01         [ 1] 3393 	ld ADC_CR1,a
      0012E7 72 16 50 CA      [ 1] 3394 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
      0012EB 72 10 54 01      [ 1] 3395 	bset ADC_CR1,#ADC_CR1_ADON 
      0012EF                       3396 	_usec_dly 7 
      0012EF AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      0012F2 5A               [ 2]    2     decw x
      0012F3 9D               [ 1]    3     nop 
      0012F4 26 FA            [ 1]    4     jrne .-4
      0012F6 20 08            [ 2] 3397 	jra 3$
      0012F8 72 11 54 01      [ 1] 3398 2$: bres ADC_CR1,#ADC_CR1_ADON
      0012FC 72 17 50 CA      [ 1] 3399 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      001300                       3400 3$:	_drop VSIZE 
      001300 5B 04            [ 2]    1     addw sp,#VSIZE 
      001302 81               [ 4] 3401 	ret
                                   3402 
                                   3403 ;-----------------------------
                                   3404 ; BASIC: ADCREAD (channel)
                                   3405 ; read adc channel {0..5}
                                   3406 ; output:
                                   3407 ;   A 		TK_INTGR 
                                   3408 ;   X 		value 
                                   3409 ;-----------------------------
      001303                       3410 analog_read:
      001303 CD 0B DC         [ 4] 3411 	call func_args 
      001306 A1 01            [ 1] 3412 	cp a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001308 27 03            [ 1] 3413 	jreq 1$
      00130A CC 07 39         [ 2] 3414 	jp syntax_error
      00130D 85               [ 2] 3415 1$: popw x 
      00130E A3 00 05         [ 2] 3416 	cpw x,#5 
      001311 23 05            [ 2] 3417 	jrule 2$
      001313 A6 0A            [ 1] 3418 	ld a,#ERR_BAD_VALUE
      001315 CC 07 3B         [ 2] 3419 	jp tb_error 
      001318 9F               [ 1] 3420 2$: ld a,xl
      001319 C7 00 0D         [ 1] 3421 	ld acc8,a 
      00131C A6 05            [ 1] 3422 	ld a,#5
      00131E C0 00 0D         [ 1] 3423 	sub a,acc8 
      001321 C7 54 00         [ 1] 3424 	ld ADC_CSR,a
      001324 72 16 54 02      [ 1] 3425 	bset ADC_CR2,#ADC_CR2_ALIGN
      001328 72 10 54 01      [ 1] 3426 	bset ADC_CR1,#ADC_CR1_ADON
      00132C 72 0F 54 00 FB   [ 2] 3427 	btjf ADC_CSR,#ADC_CSR_EOC,.
      001331 CE 54 04         [ 2] 3428 	ldw x,ADC_DRH
      001334 A6 84            [ 1] 3429 	ld a,#TK_INTGR
      001336 81               [ 4] 3430 	ret 
                                   3431 
                                   3432 ;-----------------------
                                   3433 ; BASIC: DREAD(pin)
                                   3434 ; Arduino pins 
                                   3435 ; read state of a digital pin 
                                   3436 ; pin# {0..15}
                                   3437 ; output:
                                   3438 ;    A 		TK_INTGR
                                   3439 ;    X      0|1 
                                   3440 ;-------------------------
                           000001  3441 	PINNO=1
                           000001  3442 	VSIZE=1
      001337                       3443 digital_read:
      001337                       3444 	_vars VSIZE 
      001337 52 01            [ 2]    1     sub sp,#VSIZE 
      001339 CD 0B DC         [ 4] 3445 	call func_args
      00133C A1 01            [ 1] 3446 	cp a,#1
      00133E 27 03            [ 1] 3447 	jreq 1$
      001340 CC 07 39         [ 2] 3448 	jp syntax_error
      001343 85               [ 2] 3449 1$: popw x 
      001344 A3 00 0F         [ 2] 3450 	cpw x,#15 
      001347 23 05            [ 2] 3451 	jrule 2$
      001349 A6 0A            [ 1] 3452 	ld a,#ERR_BAD_VALUE
      00134B CC 07 3B         [ 2] 3453 	jp tb_error 
      00134E CD 17 84         [ 4] 3454 2$:	call select_pin 
      001351 6B 01            [ 1] 3455 	ld (PINNO,sp),a
      001353 E6 01            [ 1] 3456 	ld a,(GPIO_IDR,x)
      001355 0D 01            [ 1] 3457 	tnz (PINNO,sp)
      001357 27 05            [ 1] 3458 	jreq 8$
      001359 44               [ 1] 3459 3$: srl a 
      00135A 0A 01            [ 1] 3460 	dec (PINNO,sp)
      00135C 26 FB            [ 1] 3461 	jrne 3$ 
      00135E A4 01            [ 1] 3462 8$: and a,#1 
      001360 5F               [ 1] 3463 	clrw x 
      001361 97               [ 1] 3464 	ld xl,a 
      001362 A6 84            [ 1] 3465 	ld a,#TK_INTGR
      001364                       3466 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001364 5B 01            [ 2]    1     addw sp,#VSIZE 
      001366 81               [ 4] 3467 	ret
                                   3468 
                                   3469 
                                   3470 ;-----------------------
                                   3471 ; BASIC: DWRITE pin,0|1
                                   3472 ; Arduino pins 
                                   3473 ; write to a digital pin 
                                   3474 ; pin# {0..15}
                                   3475 ; output:
                                   3476 ;    A 		TK_INTGR
                                   3477 ;    X      0|1 
                                   3478 ;-------------------------
                           000001  3479 	PINNO=1
                           000002  3480 	PINVAL=2
                           000002  3481 	VSIZE=2
      001367                       3482 digital_write:
      001367                       3483 	_vars VSIZE 
      001367 52 02            [ 2]    1     sub sp,#VSIZE 
      001369 CD 0B E1         [ 4] 3484 	call arg_list  
      00136C A1 02            [ 1] 3485 	cp a,#2 
      00136E 27 03            [ 1] 3486 	jreq 1$
      001370 CC 07 39         [ 2] 3487 	jp syntax_error
      001373 85               [ 2] 3488 1$: popw x 
      001374 9F               [ 1] 3489 	ld a,xl 
      001375 6B 02            [ 1] 3490 	ld (PINVAL,sp),a
      001377 85               [ 2] 3491 	popw x 
      001378 A3 00 0F         [ 2] 3492 	cpw x,#15 
      00137B 23 05            [ 2] 3493 	jrule 2$
      00137D A6 0A            [ 1] 3494 	ld a,#ERR_BAD_VALUE
      00137F CC 07 3B         [ 2] 3495 	jp tb_error 
      001382 CD 17 84         [ 4] 3496 2$:	call select_pin 
      001385 6B 01            [ 1] 3497 	ld (PINNO,sp),a 
      001387 A6 01            [ 1] 3498 	ld a,#1
      001389 0D 01            [ 1] 3499 	tnz (PINNO,sp)
      00138B 27 05            [ 1] 3500 	jreq 4$
      00138D 48               [ 1] 3501 3$: sll a
      00138E 0A 01            [ 1] 3502 	dec (PINNO,sp)
      001390 26 FB            [ 1] 3503 	jrne 3$
      001392 0D 02            [ 1] 3504 4$: tnz (PINVAL,sp)
      001394 26 05            [ 1] 3505 	jrne 5$
      001396 43               [ 1] 3506 	cpl a 
      001397 E4 00            [ 1] 3507 	and a,(GPIO_ODR,x)
      001399 20 02            [ 2] 3508 	jra 8$
      00139B EA 00            [ 1] 3509 5$: or a,(GPIO_ODR,x)
      00139D E7 00            [ 1] 3510 8$: ld (GPIO_ODR,x),a 
      00139F                       3511 	_drop VSIZE 
      00139F 5B 02            [ 2]    1     addw sp,#VSIZE 
      0013A1 81               [ 4] 3512 	ret
                                   3513 
                                   3514 
                                   3515 ;-----------------------
                                   3516 ; BASIC: STOP
                                   3517 ; stop progam execution  
                                   3518 ; without resetting pointers 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3519 ; the program is resumed
                                   3520 ; with RUN 
                                   3521 ;-------------------------
      0013A2                       3522 stop:
      0013A2 72 00 00 20 02   [ 2] 3523 	btjt flags,#FRUN,2$
      0013A7 4F               [ 1] 3524 	clr a
      0013A8 81               [ 4] 3525 	ret 
      0013A9                       3526 2$:	 
                                   3527 ; create space on cstack to save context 
      0013A9 AE 13 D0         [ 2] 3528 	ldw x,#break_point 
      0013AC CD 1F F4         [ 4] 3529 	call puts 
      0013AF                       3530 	_drop 2 ;drop return address 
      0013AF 5B 02            [ 2]    1     addw sp,#2 
      0013B1                       3531 	_vars CTXT_SIZE ; context size 
      0013B1 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      0013B3 CD 0F 87         [ 4] 3532 	call save_context 
      0013B6 AE 16 90         [ 2] 3533 	ldw x,#tib 
      0013B9 CF 00 04         [ 2] 3534 	ldw basicptr,x
      0013BC 7F               [ 1] 3535 	clr (x)
      0013BD 72 5F 00 03      [ 1] 3536 	clr count  
      0013C1 5F               [ 1] 3537 	clrw x 
      0013C2 CF 00 00         [ 2] 3538 	ldw in.w,x
      0013C5 72 11 00 20      [ 1] 3539 	bres flags,#FRUN 
      0013C9 72 18 00 20      [ 1] 3540 	bset flags,#FBREAK
      0013CD CC 07 DC         [ 2] 3541 	jp interpreter 
      0013D0 0A 62 72 65 61 6B 20  3542 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   3543 
                                   3544 ;-----------------------
                                   3545 ; BASIC: NEW
                                   3546 ; from command line only 
                                   3547 ; free program memory
                                   3548 ; and clear variables 
                                   3549 ;------------------------
      0013EE                       3550 new: 
      0013EE 72 01 00 20 01   [ 2] 3551 	btjf flags,#FRUN,0$ 
      0013F3 81               [ 4] 3552 	ret 
      0013F4                       3553 0$:	
      0013F4 CD 05 A3         [ 4] 3554 	call clear_basic 
      0013F7 81               [ 4] 3555 	ret 
                                   3556 
                                   3557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3558 ;;;  flash memory operations
                                   3559 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3560 
                                   3561 ;--------------------------
                                   3562 ; align farptr to BLOCK_SIZE 
                                   3563 ;---------------------------
      0013F8                       3564 row_align:
      0013F8 A6 7F            [ 1] 3565 	ld a,#0x7f 
      0013FA C4 00 18         [ 1] 3566 	and a,farptr+2 
      0013FD 27 13            [ 1] 3567 	jreq 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0013FF CE 00 17         [ 2] 3568 	ldw x,farptr+1 
      001402 1C 00 80         [ 2] 3569 	addw x,#BLOCK_SIZE 
      001405 24 04            [ 1] 3570 	jrnc 0$
      001407 72 5C 00 16      [ 1] 3571 	inc farptr 
      00140B 9F               [ 1] 3572 0$: ld a,xl 
      00140C A4 80            [ 1] 3573 	and a,#0x80
      00140E 97               [ 1] 3574 	ld xl,a
      00140F CF 00 17         [ 2] 3575 	ldw farptr+1,x  	
      001412 81               [ 4] 3576 1$:	ret
                                   3577 
                                   3578 ;--------------------
                                   3579 ; input:
                                   3580 ;   X     increment 
                                   3581 ; output:
                                   3582 ;   farptr  incremented 
                                   3583 ;---------------------
      001413                       3584 incr_farptr:
      001413 72 BB 00 17      [ 2] 3585 	addw x,farptr+1 
      001417 24 04            [ 1] 3586 	jrnc 1$
      001419 72 5C 00 16      [ 1] 3587 	inc farptr 
      00141D CF 00 17         [ 2] 3588 1$:	ldw farptr+1,x  
      001420 81               [ 4] 3589 	ret 
                                   3590 
                                   3591 ;-----------------------------------
                                   3592 ; scan block for non zero byte 
                                   3593 ; block are 128 bytes 
                                   3594 ; input:
                                   3595 ;    farptr     address block  
                                   3596 ; output:
                                   3597 ;     A     0 cleared, other not cleared  
                                   3598 ;-----------------------------------
      001421                       3599 scan_block:
      001421 5F               [ 1] 3600 	clrw x 
      001422 92 AF 00 16      [ 5] 3601 1$: ldf a,([farptr],x) 
      001426 26 06            [ 1] 3602 	jrne 2$
      001428 5C               [ 1] 3603 	incw x 
      001429 A3 00 80         [ 2] 3604 	cpw x,#BLOCK_SIZE 
      00142C 25 F4            [ 1] 3605 	jrult 1$ 
      00142E 81               [ 4] 3606 2$:	ret 
                                   3607 
                                   3608 
                                   3609 
                                   3610 ;-----------------------------------
                                   3611 ; BASIC: ERASE
                                   3612 ; erase all block in range from 
                                   3613 ;  'app_space' to RAM end (0x20000)
                                   3614 ; that contains a non zero byte.  
                                   3615 ;-----------------------------------
      00142F                       3616 erase:
                                   3617  ; operation done from RAM
                                   3618  ; copy code to RAM in tib   
      00142F CD 01 3C         [ 4] 3619 	call move_erase_to_ram
                                   3620 	; first block 
      001432 72 5F 00 16      [ 1] 3621 	clr farptr 
      001436 AE 2A 00         [ 2] 3622 	ldw x,#app_space
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001439 CF 00 17         [ 2] 3623 	ldw farptr+1,x
      00143C                       3624 1$:	 
      00143C CD 14 21         [ 4] 3625     call scan_block 
      00143F 27 03            [ 1] 3626 	jreq 2$
      001441 CD 01 B7         [ 4] 3627 	call block_erase   
                                   3628 ; this block is clean, next  
      001444 AE 00 80         [ 2] 3629 2$:	ldw x,#BLOCK_SIZE
      001447 CD 14 13         [ 4] 3630 	call incr_farptr
      00144A C6 00 16         [ 1] 3631 	ld a,farptr
      00144D A1 02            [ 1] 3632 	cp a,#2 
      00144F 25 EB            [ 1] 3633 	jrult 1$ 
      001451 CD 05 A3         [ 4] 3634 9$: call clear_basic
      001454 81               [ 4] 3635 	ret 
                                   3636 	
                                   3637 
                                   3638 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3639 ;  check for application signature 
                                   3640 ; output:
                                   3641 ;   Carry    0 app present 
                                   3642 ;            1 no app installed  
                                   3643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001455                       3644 qsign: 
      001455 CE 2A 00         [ 2] 3645 	ldw x,app_sign 
      001458 A3 42 43         [ 2] 3646 	cpw x,#0x4243 ; "BC" 
      00145B 81               [ 4] 3647 	ret 
                                   3648 
                                   3649 
                                   3650 ;---------------------------------------
                                   3651 ; BASIC: FLASHAPP  	
                                   3652 ; write application in RAM to FLASH 
                                   3653 ;--------------------------------------
      00145C                       3654 flash_app:
      00145C CD 14 55         [ 4] 3655 	call qsign
      00145F 26 08            [ 1] 3656 	jrne 1$
      001461 AE 14 DB         [ 2] 3657 	ldw x,#CANT_DO 
      001464 CD 1F F4         [ 4] 3658 	call puts 
      001467 20 71            [ 2] 3659 	jra 9$
      001469                       3660 1$: 
      001469 CE 00 19         [ 2] 3661 	ldw x,txtbgn
      00146C C3 00 1B         [ 2] 3662 	cpw x,txtend 
      00146F 25 08            [ 1] 3663 	jrult 2$ 
      001471 AE 15 1A         [ 2] 3664 	ldw x,#NO_APP
      001474 CD 1F F4         [ 4] 3665 	call puts 
      001477 20 61            [ 2] 3666 	jra 9$
      001479                       3667 2$: 
                                   3668 ; PRG flash
                                   3669 ; must be done from RAM 
      001479 CD 01 70         [ 4] 3670 	call move_prg_to_ram
      00147C CD 00 FA         [ 4] 3671 	call unlock_flash 
                                   3672 ; initialize farptr 
      00147F 72 5F 00 16      [ 1] 3673 	clr farptr 
      001483 AE 2A 00         [ 2] 3674 	ldw x,#app_sign 
      001486 CF 00 17         [ 2] 3675 	ldw farptr+1,x
                                   3676 ; write signature
      001489 AE 42 43         [ 2] 3677 	ldw x,#0x4243 ; "BC" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00148C CF 00 60         [ 2] 3678 	ldw rsign,x 
      00148F CE 00 1B         [ 2] 3679 	ldw x,txtend 
      001492 72 B0 00 19      [ 2] 3680 	subw x,txtbgn 
      001496 CF 00 62         [ 2] 3681 	ldw rsize,x   
                                   3682 ; copy block to flash 
      001499 AE 00 60         [ 2] 3683 	ldw x,#rsign  
      00149C 1F 01            [ 2] 3684 	ldw (1,sp),x   
      00149E 1E 01            [ 2] 3685 3$:	ldw x,(1,sp)
      0014A0 CD 01 84         [ 4] 3686 	call write_row 
      0014A3 A6 2E            [ 1] 3687 ld a,#'. 
      0014A5 CD 02 C1         [ 4] 3688 call putc 
      0014A8 1E 01            [ 2] 3689 	ldw x,(1,sp)
      0014AA 1C 00 80         [ 2] 3690 	addw x,#BLOCK_SIZE
      0014AD 1F 01            [ 2] 3691 	ldw (1,sp),x  
      0014AF C3 00 1B         [ 2] 3692 	cpw x,txtend 
      0014B2 24 08            [ 1] 3693 	jruge 8$
      0014B4 AE 00 80         [ 2] 3694 	ldw x,#BLOCK_SIZE 
      0014B7 CD 14 13         [ 4] 3695 	call incr_farptr
      0014BA 20 E2            [ 2] 3696 	jra 3$ 
      0014BC                       3697 8$:	
      0014BC                       3698 	_drop 2   
      0014BC 5B 02            [ 2]    1     addw sp,#2 
      0014BE AE 15 30         [ 2] 3699 	ldw x, #PROG_SIZE
      0014C1 CD 1F F4         [ 4] 3700 	call puts 
      0014C4 CE 00 1B         [ 2] 3701 	ldw x,txtend 
      0014C7 72 B0 00 19      [ 2] 3702 	subw x,txtbgn 
      0014CB CD 08 83         [ 4] 3703 	call print_int
      0014CE AE 15 3F         [ 2] 3704 	ldw x,#STR_BYTES
      0014D1 CD 1F F4         [ 4] 3705 	call puts
      0014D4 72 0D 52 30 FB   [ 2] 3706 	btjf UART1_SR,#UART_SR_TC,.	
      0014D9 71                    3707 	.byte 0x71 ; reset mcu 
      0014DA 81               [ 4] 3708 9$: ret 
                                   3709 
      0014DB 43 61 6E 27 74 20 66  3710 CANT_DO: .asciz "Can't flash application, already one in FLASH\nuse ERASE before"
             6C 61 73 68 20 61 70
             70 6C 69 63 61 74 69
             6F 6E 2C 20 61 6C 72
             65 61 64 79 20 6F 6E
             65 20 69 6E 20 46 4C
             41 53 48 0A 75 73 65
             20 45 52 41 53 45 20
             62 65 66 6F 72 65 00
      00151A 4E 6F 20 61 70 70 6C  3711 NO_APP: .asciz "No application in RAM"
             69 63 61 74 69 6F 6E
             20 69 6E 20 52 41 4D
             00
      001530 70 72 6F 67 72 61 6D  3712 PROG_SIZE: .asciz "program size: "
             20 73 69 7A 65 3A 20
             00
      00153F 62 79 74 65 73 0A 00  3713 STR_BYTES: .asciz "bytes\n" 
                                   3714 
                                   3715 ;---------------------
                                   3716 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   3717 ; write 1 or more byte to FLASH or EEPROM
                                   3718 ; starting at address  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3719 ; input:
                                   3720 ;   expr1  	is address 
                                   3721 ;   expr2,...,exprn   are bytes to write
                                   3722 ; output:
                                   3723 ;   none 
                                   3724 ;---------------------
                           000001  3725 	ADDR=1
                           000002  3726 	VSIZ=2 
      001546                       3727 write:
      001546                       3728 	_vars VSIZE 
      001546 52 02            [ 2]    1     sub sp,#VSIZE 
      001548 72 5F 00 16      [ 1] 3729 	clr farptr ; expect 16 bits address 
      00154C CD 0C E0         [ 4] 3730 	call expression
      00154F A1 84            [ 1] 3731 	cp a,#TK_INTGR 
      001551 27 03            [ 1] 3732 	jreq 0$
      001553 CC 07 39         [ 2] 3733 	jp syntax_error
      001556 1F 01            [ 2] 3734 0$: ldw (ADDR,sp),x 
      001558 CD 08 28         [ 4] 3735 	call next_token 
      00155B A1 09            [ 1] 3736 	cp a,#TK_COMMA 
      00155D 27 02            [ 1] 3737 	jreq 1$ 
      00155F 20 19            [ 2] 3738 	jra 9$ 
      001561 CD 0C E0         [ 4] 3739 1$:	call expression
      001564 A1 84            [ 1] 3740 	cp a,#TK_INTGR
      001566 27 03            [ 1] 3741 	jreq 2$
      001568 CC 07 39         [ 2] 3742 	jp syntax_error
      00156B 9F               [ 1] 3743 2$:	ld a,xl 
      00156C 1E 01            [ 2] 3744 	ldw x,(ADDR,sp) 
      00156E CF 00 17         [ 2] 3745 	ldw farptr+1,x 
      001571 5F               [ 1] 3746 	clrw x 
      001572 CD 01 E1         [ 4] 3747 	call write_byte
      001575 1E 01            [ 2] 3748 	ldw x,(ADDR,sp)
      001577 5C               [ 1] 3749 	incw x 
      001578 20 DC            [ 2] 3750 	jra 0$ 
      00157A                       3751 9$:
      00157A                       3752 	_drop VSIZE
      00157A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00157C 81               [ 4] 3753 	ret 
                                   3754 
                                   3755 
                                   3756 ;---------------------
                                   3757 ;BASIC: CHAR(expr)
                                   3758 ; évaluate expression 
                                   3759 ; and take the 7 least 
                                   3760 ; bits as ASCII character
                                   3761 ; return a TK_CHAR 
                                   3762 ;---------------------
      00157D                       3763 char:
      00157D CD 0B DC         [ 4] 3764 	call func_args 
      001580 A1 01            [ 1] 3765 	cp a,#1
      001582 27 03            [ 1] 3766 	jreq 1$
      001584 CC 07 39         [ 2] 3767 	jp syntax_error
      001587 85               [ 2] 3768 1$:	popw x 
      001588 9F               [ 1] 3769 	ld a,xl 
      001589 A4 7F            [ 1] 3770 	and a,#0x7f 
      00158B 97               [ 1] 3771 	ld xl,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00158C A6 03            [ 1] 3772 	ld a,#TK_CHAR
      00158E 81               [ 4] 3773 	ret
                                   3774 
                                   3775 ;---------------------
                                   3776 ; BASIC: ASC(string|char|TK_CFUNC)
                                   3777 ; extract first character 
                                   3778 ; of string argument 
                                   3779 ; return it as TK_INTGR 
                                   3780 ;---------------------
      00158F                       3781 ascii:
      00158F A6 07            [ 1] 3782 	ld a,#TK_LPAREN
      001591 CD 0B CF         [ 4] 3783 	call expect 
      001594 CD 08 28         [ 4] 3784 	call next_token 
      001597 A1 02            [ 1] 3785 	cp a,#TK_QSTR 
      001599 27 0E            [ 1] 3786 	jreq 1$
      00159B A1 03            [ 1] 3787 	cp a,#TK_CHAR 
      00159D 27 0D            [ 1] 3788 	jreq 2$ 
      00159F A1 82            [ 1] 3789 	cp a,#TK_CFUNC 
      0015A1 27 03            [ 1] 3790 	jreq 0$
      0015A3 CC 07 39         [ 2] 3791 	jp syntax_error
      0015A6 FD               [ 4] 3792 0$: call (x)
      0015A7 20 03            [ 2] 3793 	jra 2$
      0015A9                       3794 1$: 
      0015A9 F6               [ 1] 3795 	ld a,(x) 
      0015AA 5F               [ 1] 3796 	clrw x
      0015AB 97               [ 1] 3797 	ld xl,a 
      0015AC                       3798 2$: 
      0015AC 89               [ 2] 3799 	pushw x 
      0015AD A6 08            [ 1] 3800 	ld a,#TK_RPAREN 
      0015AF CD 0B CF         [ 4] 3801 	call expect
      0015B2 85               [ 2] 3802 	popw x 
      0015B3 A6 84            [ 1] 3803 	ld a,#TK_INTGR 
      0015B5 81               [ 4] 3804 	ret 
                                   3805 
                                   3806 ;---------------------
                                   3807 ;BASIC: KEY
                                   3808 ; wait for a character 
                                   3809 ; received from STDIN 
                                   3810 ; input:
                                   3811 ;	none 
                                   3812 ; output:
                                   3813 ;	X 		ASCII character 
                                   3814 ;---------------------
      0015B6                       3815 key:
      0015B6 CD 02 D1         [ 4] 3816 	call getc 
      0015B9 5F               [ 1] 3817 	clrw x 
      0015BA 97               [ 1] 3818 	ld xl,a 
      0015BB A6 84            [ 1] 3819 	ld a,#TK_INTGR
      0015BD 81               [ 4] 3820 	ret
                                   3821 
                                   3822 ;----------------------
                                   3823 ; BASIC: QKEY
                                   3824 ; Return true if there 
                                   3825 ; is a character in 
                                   3826 ; waiting in STDIN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3827 ; input:
                                   3828 ;  none 
                                   3829 ; output:
                                   3830 ;   X 		0|-1 
                                   3831 ;-----------------------
      0015BE                       3832 qkey:: 
      0015BE 5F               [ 1] 3833 	clrw x 
      0015BF C6 00 2A         [ 1] 3834 	ld a,rx1_head
      0015C2 C1 00 2B         [ 1] 3835 	cp a,rx1_tail 
      0015C5 27 01            [ 1] 3836 	jreq 9$ 
      0015C7 53               [ 2] 3837 	cplw x 
      0015C8 A6 84            [ 1] 3838 9$: ld a,#TK_INTGR
      0015CA 81               [ 4] 3839 	ret 
                                   3840 
                                   3841 ;---------------------
                                   3842 ; BASIC: GPIO(expr,reg)
                                   3843 ; return gpio address 
                                   3844 ; expr {0..8}
                                   3845 ; input:
                                   3846 ;   none 
                                   3847 ; output:
                                   3848 ;   X 		gpio register address
                                   3849 ;----------------------------
                           000003  3850 	PORT=3
                           000001  3851 	REG=1 
                           000004  3852 	VSIZE=4 
      0015CB                       3853 gpio:
      0015CB CD 0B DC         [ 4] 3854 	call func_args 
      0015CE A1 02            [ 1] 3855 	cp a,#2
      0015D0 27 03            [ 1] 3856 	jreq 1$
      0015D2 CC 07 39         [ 2] 3857 	jp syntax_error  
      0015D5                       3858 1$:	
      0015D5 1E 03            [ 2] 3859 	ldw x,(PORT,sp)
      0015D7 2B 17            [ 1] 3860 	jrmi bad_port
      0015D9 A3 00 09         [ 2] 3861 	cpw x,#9
      0015DC 2A 12            [ 1] 3862 	jrpl bad_port
      0015DE A6 05            [ 1] 3863 	ld a,#5
      0015E0 42               [ 4] 3864 	mul x,a
      0015E1 1C 50 00         [ 2] 3865 	addw x,#GPIO_BASE 
      0015E4 1F 03            [ 2] 3866 	ldw (PORT,sp),x  
      0015E6 1E 01            [ 2] 3867 	ldw x,(REG,sp) 
      0015E8 72 FB 03         [ 2] 3868 	addw x,(PORT,sp)
      0015EB A6 84            [ 1] 3869 	ld a,#TK_INTGR
      0015ED                       3870 	_drop VSIZE 
      0015ED 5B 04            [ 2]    1     addw sp,#VSIZE 
      0015EF 81               [ 4] 3871 	ret
      0015F0                       3872 bad_port:
      0015F0 A6 0A            [ 1] 3873 	ld a,#ERR_BAD_VALUE
      0015F2 CC 07 3B         [ 2] 3874 	jp tb_error
                                   3875 
                                   3876 
                                   3877 ;-------------------------
                                   3878 ; BASIC: UFLASH 
                                   3879 ; return free flash address
                                   3880 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3881 ;  none 
                                   3882 ; output:
                                   3883 ;	A		TK_INTGR
                                   3884 ;   X 		free address 
                                   3885 ;---------------------------
      0015F5                       3886 uflash:
      0015F5 CE 2A 00         [ 2] 3887 	ldw x,app_sign
      0015F8 A3 10 93         [ 2] 3888 	cpw x,#4243 ; signature "BC" 
      0015FB 27 08            [ 1] 3889 	jreq 1$
      0015FD CE 2A 02         [ 2] 3890 	ldw x,app_size 
      001600 1C 2A 04         [ 2] 3891 	addw x,#app
      001603 20 03            [ 2] 3892 	jra 2$
      001605 AE 2A 00         [ 2] 3893 1$:	ldw x,#app_space 
      001608 A6 84            [ 1] 3894 2$:	ld a,#TK_INTGR 
      00160A 81               [ 4] 3895 	ret 
                                   3896 
                                   3897 
                                   3898 ;---------------------
                                   3899 ; BASIC: USR(addr[,arg])
                                   3900 ; execute a function written 
                                   3901 ; in binary code.
                                   3902 ; binary fonction should 
                                   3903 ; return token attribute in A 
                                   3904 ; and value in X. 
                                   3905 ; input:
                                   3906 ;   addr	routine address 
                                   3907 ;   arg 	is an optional argument 
                                   3908 ; output:
                                   3909 ;   A 		token attribute 
                                   3910 ;   X       returned value 
                                   3911 ;---------------------
      00160B                       3912 usr:
      00160B 90 89            [ 2] 3913 	pushw y 	
      00160D CD 0B DC         [ 4] 3914 	call func_args 
      001610 A1 01            [ 1] 3915 	cp a,#1 
      001612 27 07            [ 1] 3916 	jreq 2$
      001614 A1 02            [ 1] 3917 	cp a,#2
      001616 27 03            [ 1] 3918 	jreq 2$  
      001618 CC 07 39         [ 2] 3919 	jp syntax_error 
      00161B 90 85            [ 2] 3920 2$: popw y  ; arg|addr 
      00161D A1 01            [ 1] 3921 	cp a,#1
      00161F 27 02            [ 1] 3922 	jreq 3$
      001621 85               [ 2] 3923 	popw x ; addr
      001622 51               [ 1] 3924 	exgw x,y 
      001623 90 FD            [ 4] 3925 3$: call (y)
      001625 90 85            [ 2] 3926 	popw y 
      001627 81               [ 4] 3927 	ret 
                                   3928 
                                   3929 ;------------------------------
                                   3930 ; BASIC: BYE 
                                   3931 ; halt mcu in its lowest power mode 
                                   3932 ; wait for reset or external interrupt
                                   3933 ; do a cold start on wakeup.
                                   3934 ;------------------------------
      001628                       3935 bye:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001628 72 0D 52 30 FB   [ 2] 3936 	btjf UART1_SR,#UART_SR_TC,.
      00162D 8E               [10] 3937 	halt
      00162E CC 04 7E         [ 2] 3938 	jp cold_start  
                                   3939 
                                   3940 ;----------------------------------
                                   3941 ; BASIC: SLEEP 
                                   3942 ; halt mcu until reset or external
                                   3943 ; interrupt.
                                   3944 ; Resume progam after SLEEP command
                                   3945 ;----------------------------------
      001631                       3946 sleep:
      001631 72 0D 52 30 FB   [ 2] 3947 	btjf UART1_SR,#UART_SR_TC,.
      001636 72 16 00 20      [ 1] 3948 	bset flags,#FSLEEP
      00163A 8E               [10] 3949 	halt 
      00163B 81               [ 4] 3950 	ret 
                                   3951 
                                   3952 ;-------------------------------
                                   3953 ; BASIC: PAUSE expr 
                                   3954 ; suspend execution for n msec.
                                   3955 ; input:
                                   3956 ;	none
                                   3957 ; output:
                                   3958 ;	none 
                                   3959 ;------------------------------
      00163C                       3960 pause:
      00163C CD 0C E0         [ 4] 3961 	call expression
      00163F A1 84            [ 1] 3962 	cp a,#TK_INTGR
      001641 27 03            [ 1] 3963 	jreq pause02 
      001643 CC 07 39         [ 2] 3964 	jp syntax_error
      001646                       3965 pause02: 
      001646 5D               [ 2] 3966 1$: tnzw x 
      001647 27 04            [ 1] 3967 	jreq 2$
      001649 8F               [10] 3968 	wfi 
      00164A 5A               [ 2] 3969 	decw x 
      00164B 26 F9            [ 1] 3970 	jrne 1$
      00164D 4F               [ 1] 3971 2$:	clr a 
      00164E 81               [ 4] 3972 	ret 
                                   3973 
                                   3974 ;------------------------------
                                   3975 ; BASIC: AWU expr
                                   3976 ; halt mcu for 'expr' milliseconds
                                   3977 ; use Auto wakeup peripheral
                                   3978 ; all oscillators stopped except LSI
                                   3979 ; range: 1ms - 511ms
                                   3980 ; input:
                                   3981 ;  none
                                   3982 ; output:
                                   3983 ;  none:
                                   3984 ;------------------------------
      00164F                       3985 awu:
      00164F CD 0C E0         [ 4] 3986   call expression
      001652 A1 84            [ 1] 3987   cp a,#TK_INTGR
      001654 27 03            [ 1] 3988   jreq awu02
      001656 CC 07 39         [ 2] 3989   jp syntax_error
      001659                       3990 awu02:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001659 A3 14 00         [ 2] 3991   cpw x,#5120
      00165C 2B 0C            [ 1] 3992   jrmi 1$ 
      00165E 35 0F 50 F2      [ 1] 3993   mov AWU_TBR,#15 
      001662 A6 1E            [ 1] 3994   ld a,#30
      001664 62               [ 2] 3995   div x,a
      001665 A6 10            [ 1] 3996   ld a,#16
      001667 62               [ 2] 3997   div x,a 
      001668 20 1E            [ 2] 3998   jra 4$
      00166A                       3999 1$: 
      00166A A3 08 00         [ 2] 4000   cpw x,#2048
      00166D 2B 09            [ 1] 4001   jrmi 2$ 
      00166F 35 0E 50 F2      [ 1] 4002   mov AWU_TBR,#14
      001673 A6 50            [ 1] 4003   ld a,#80
      001675 62               [ 2] 4004   div x,a 
      001676 20 10            [ 2] 4005   jra 4$   
      001678                       4006 2$:
      001678 35 07 50 F2      [ 1] 4007   mov AWU_TBR,#7
      00167C                       4008 3$:  
                                   4009 ; while X > 64  divide by 2 and increment AWU_TBR 
      00167C A3 00 40         [ 2] 4010   cpw x,#64 
      00167F 23 07            [ 2] 4011   jrule 4$ 
      001681 72 5C 50 F2      [ 1] 4012   inc AWU_TBR 
      001685 54               [ 2] 4013   srlw x 
      001686 20 F4            [ 2] 4014   jra 3$ 
      001688                       4015 4$:
      001688 9F               [ 1] 4016   ld a, xl
      001689 4A               [ 1] 4017   dec a 
      00168A 27 01            [ 1] 4018   jreq 5$
      00168C 4A               [ 1] 4019   dec a 	
      00168D                       4020 5$: 
      00168D A4 3E            [ 1] 4021   and a,#0x3e 
      00168F C7 50 F1         [ 1] 4022   ld AWU_APR,a 
      001692 72 18 50 F0      [ 1] 4023   bset AWU_CSR,#AWU_CSR_AWUEN
      001696 8E               [10] 4024   halt 
                                   4025 
      001697 81               [ 4] 4026   ret 
                                   4027 
                                   4028 ;------------------------------
                                   4029 ; BASIC: TICKS
                                   4030 ; return msec ticks counter value 
                                   4031 ; input:
                                   4032 ; 	none 
                                   4033 ; output:
                                   4034 ;	X 		TK_INTGR
                                   4035 ;-------------------------------
      001698                       4036 get_ticks:
      001698 CE 00 0E         [ 2] 4037 	ldw x,ticks 
      00169B A6 84            [ 1] 4038 	ld a,#TK_INTGR
      00169D 81               [ 4] 4039 	ret 
                                   4040 
                                   4041 
                                   4042 
                                   4043 ;------------------------------
                                   4044 ; BASIC: ABS(expr)
                                   4045 ; return absolute value of expr.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4046 ; input:
                                   4047 ;   none
                                   4048 ; output:
                                   4049 ;   X     	positive integer
                                   4050 ;-------------------------------
      00169E                       4051 abs:
      00169E CD 0B DC         [ 4] 4052 	call func_args 
      0016A1 A1 01            [ 1] 4053 	cp a,#1 
      0016A3 27 03            [ 1] 4054 	jreq 0$ 
      0016A5 CC 07 39         [ 2] 4055 	jp syntax_error
      0016A8                       4056 0$:  
      0016A8 85               [ 2] 4057     popw x   
      0016A9 9E               [ 1] 4058 	ld a,xh 
      0016AA A5 80            [ 1] 4059 	bcp a,#0x80 
      0016AC 27 01            [ 1] 4060 	jreq 2$ 
      0016AE 50               [ 2] 4061 	negw x 
      0016AF A6 84            [ 1] 4062 2$: ld a,#TK_INTGR 
      0016B1 81               [ 4] 4063 	ret 
                                   4064 
                                   4065 ;------------------------------
                                   4066 ; BASIC: AND(expr1,expr2)
                                   4067 ; Apply bit AND relation between
                                   4068 ; the 2 arguments, i.e expr1 & expr2 
                                   4069 ; output:
                                   4070 ; 	A 		TK_INTGR
                                   4071 ;   X 		result 
                                   4072 ;------------------------------
      0016B2                       4073 bit_and:
      0016B2 CD 0B DC         [ 4] 4074 	call func_args 
      0016B5 A1 02            [ 1] 4075 	cp a,#2
      0016B7 27 03            [ 1] 4076 	jreq 1$
      0016B9 CC 07 39         [ 2] 4077 	jp syntax_error 
      0016BC 85               [ 2] 4078 1$:	popw x 
      0016BD 9E               [ 1] 4079 	ld a,xh 
      0016BE 14 01            [ 1] 4080 	and a,(1,sp)
      0016C0 95               [ 1] 4081 	ld xh,a 
      0016C1 9F               [ 1] 4082 	ld a,xl
      0016C2 14 02            [ 1] 4083 	and a,(2,sp)
      0016C4 97               [ 1] 4084 	ld xl,a 
      0016C5                       4085 	_drop 2 
      0016C5 5B 02            [ 2]    1     addw sp,#2 
      0016C7 A6 84            [ 1] 4086 	ld a,#TK_INTGR
      0016C9 81               [ 4] 4087 	ret
                                   4088 
                                   4089 ;------------------------------
                                   4090 ; BASIC: OR(expr1,expr2)
                                   4091 ; Apply bit OR relation between
                                   4092 ; the 2 arguments, i.e expr1 | expr2 
                                   4093 ; output:
                                   4094 ; 	A 		TK_INTGR
                                   4095 ;   X 		result 
                                   4096 ;------------------------------
      0016CA                       4097 bit_or:
      0016CA CD 0B DC         [ 4] 4098 	call func_args 
      0016CD A1 02            [ 1] 4099 	cp a,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0016CF 27 03            [ 1] 4100 	jreq 1$
      0016D1 CC 07 39         [ 2] 4101 	jp syntax_error 
      0016D4                       4102 1$: 
      0016D4 85               [ 2] 4103 	popw x 
      0016D5 9E               [ 1] 4104 	ld a,xh 
      0016D6 1A 01            [ 1] 4105 	or a,(1,sp)
      0016D8 95               [ 1] 4106 	ld xh,a 
      0016D9 9F               [ 1] 4107 	ld a,xl 
      0016DA 1A 02            [ 1] 4108 	or a,(2,sp)
      0016DC 97               [ 1] 4109 	ld xl,a 
      0016DD                       4110 	_drop 2 
      0016DD 5B 02            [ 2]    1     addw sp,#2 
      0016DF A6 84            [ 1] 4111 	ld a,#TK_INTGR 
      0016E1 81               [ 4] 4112 	ret
                                   4113 
                                   4114 ;------------------------------
                                   4115 ; BASIC: XOR(expr1,expr2)
                                   4116 ; Apply bit XOR relation between
                                   4117 ; the 2 arguments, i.e expr1 ^ expr2 
                                   4118 ; output:
                                   4119 ; 	A 		TK_INTGR
                                   4120 ;   X 		result 
                                   4121 ;------------------------------
      0016E2                       4122 bit_xor:
      0016E2 CD 0B DC         [ 4] 4123 	call func_args 
      0016E5 A1 02            [ 1] 4124 	cp a,#2
      0016E7 27 03            [ 1] 4125 	jreq 1$
      0016E9 CC 07 39         [ 2] 4126 	jp syntax_error 
      0016EC                       4127 1$: 
      0016EC 85               [ 2] 4128 	popw x 
      0016ED 9E               [ 1] 4129 	ld a,xh 
      0016EE 18 01            [ 1] 4130 	xor a,(1,sp)
      0016F0 95               [ 1] 4131 	ld xh,a 
      0016F1 9F               [ 1] 4132 	ld a,xl 
      0016F2 18 02            [ 1] 4133 	xor a,(2,sp)
      0016F4 97               [ 1] 4134 	ld xl,a 
      0016F5                       4135 	_drop 2 
      0016F5 5B 02            [ 2]    1     addw sp,#2 
      0016F7 A6 84            [ 1] 4136 	ld a,#TK_INTGR 
      0016F9 81               [ 4] 4137 	ret 
                                   4138 
                                   4139 ;------------------------------
                                   4140 ; BASIC: LSHIFT(expr1,expr2)
                                   4141 ; logical shift left expr1 by 
                                   4142 ; expr2 bits 
                                   4143 ; output:
                                   4144 ; 	A 		TK_INTGR
                                   4145 ;   X 		result 
                                   4146 ;------------------------------
      0016FA                       4147 lshift:
      0016FA CD 0B DC         [ 4] 4148 	call func_args
      0016FD A1 02            [ 1] 4149 	cp a,#2 
      0016FF 27 03            [ 1] 4150 	jreq 1$
      001701 CC 07 39         [ 2] 4151 	jp syntax_error
      001704 90 85            [ 2] 4152 1$: popw y   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001706 85               [ 2] 4153 	popw x 
      001707 90 5D            [ 2] 4154 	tnzw y 
      001709 27 05            [ 1] 4155 	jreq 4$
      00170B 58               [ 2] 4156 2$:	sllw x 
      00170C 90 5A            [ 2] 4157 	decw y 
      00170E 26 FB            [ 1] 4158 	jrne 2$
      001710                       4159 4$:  
      001710 A6 84            [ 1] 4160 	ld a,#TK_INTGR
      001712 81               [ 4] 4161 	ret
                                   4162 
                                   4163 ;------------------------------
                                   4164 ; BASIC: RSHIFT(expr1,expr2)
                                   4165 ; logical shift right expr1 by 
                                   4166 ; expr2 bits.
                                   4167 ; output:
                                   4168 ; 	A 		TK_INTGR
                                   4169 ;   X 		result 
                                   4170 ;------------------------------
      001713                       4171 rshift:
      001713 CD 0B DC         [ 4] 4172 	call func_args
      001716 A1 02            [ 1] 4173 	cp a,#2 
      001718 27 03            [ 1] 4174 	jreq 1$
      00171A CC 07 39         [ 2] 4175 	jp syntax_error
      00171D 90 85            [ 2] 4176 1$: popw y  
      00171F 85               [ 2] 4177 	popw x
      001720 90 5D            [ 2] 4178 	tnzw y 
      001722 27 05            [ 1] 4179 	jreq 4$
      001724 54               [ 2] 4180 2$:	srlw x 
      001725 90 5A            [ 2] 4181 	decw y 
      001727 26 FB            [ 1] 4182 	jrne 2$
      001729                       4183 4$:  
      001729 A6 84            [ 1] 4184 	ld a,#TK_INTGR
      00172B 81               [ 4] 4185 	ret
                                   4186 
                                   4187 ;--------------------------
                                   4188 ; BASIC: FCPU integer
                                   4189 ; set CPU frequency 
                                   4190 ;-------------------------- 
                                   4191 
      00172C                       4192 fcpu:
      00172C A6 84            [ 1] 4193 	ld a,#TK_INTGR
      00172E CD 0B CF         [ 4] 4194 	call expect 
      001731 9F               [ 1] 4195 	ld a,xl 
      001732 A4 07            [ 1] 4196 	and a,#7 
      001734 C7 50 C6         [ 1] 4197 	ld CLK_CKDIVR,a 
      001737 81               [ 4] 4198 	ret 
                                   4199 
                                   4200 ;------------------------------
                                   4201 ; BASIC: PMODE pin#, mode 
                                   4202 ; Arduino pin. 
                                   4203 ; define pin as input or output
                                   4204 ; pin#: {0..15}
                                   4205 ; mode: INPUT|OUTPUT  
                                   4206 ;------------------------------
                           000001  4207 	PINNO=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                           000001  4208 	VSIZE=1
      001738                       4209 pin_mode:
      001738                       4210 	_vars VSIZE 
      001738 52 01            [ 2]    1     sub sp,#VSIZE 
      00173A CD 0B E1         [ 4] 4211 	call arg_list 
      00173D A1 02            [ 1] 4212 	cp a,#2 
      00173F 27 03            [ 1] 4213 	jreq 1$
      001741 CC 07 39         [ 2] 4214 	jp syntax_error 
      001744 90 85            [ 2] 4215 1$: popw y ; mode 
      001746 85               [ 2] 4216 	popw x ; Dx pin 
      001747 CD 17 84         [ 4] 4217 	call select_pin 
      00174A 6B 01            [ 1] 4218 	ld (PINNO,sp),a  
      00174C A6 01            [ 1] 4219 	ld a,#1 
      00174E 0D 01            [ 1] 4220 	tnz (PINNO,sp)
      001750 27 0D            [ 1] 4221 	jreq 4$
      001752 48               [ 1] 4222 2$:	sll a 
      001753 0A 01            [ 1] 4223 	dec (PINNO,sp)
      001755 26 FB            [ 1] 4224 	jrne 2$ 
      001757 6B 01            [ 1] 4225 	ld (PINNO,sp),a
      001759 7B 01            [ 1] 4226 	ld a,(PINNO,sp)
      00175B EA 03            [ 1] 4227 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      00175D E7 03            [ 1] 4228 	ld (GPIO_CR1,x),a 
      00175F 90 A3 00 01      [ 2] 4229 4$:	cpw y,#OUTP 
      001763 27 10            [ 1] 4230 	jreq 6$
                                   4231 ; input mode
                                   4232 ; disable external interrupt 
      001765 7B 01            [ 1] 4233 	ld a,(PINNO,sp)
      001767 43               [ 1] 4234 	cpl a 
      001768 E4 04            [ 1] 4235 	and a,(GPIO_CR2,x)
      00176A E7 04            [ 1] 4236 	ld (GPIO_CR2,x),a 
                                   4237 ;clear bit in DDR for input mode 
      00176C 7B 01            [ 1] 4238 	ld a,(PINNO,sp)
      00176E 43               [ 1] 4239 	cpl a 
      00176F E4 02            [ 1] 4240 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001771 E7 02            [ 1] 4241 	ld (GPIO_DDR,x),a 
      001773 20 0C            [ 2] 4242 	jra 9$
      001775                       4243 6$: ;output mode  
      001775 7B 01            [ 1] 4244 	ld a,(PINNO,sp)
      001777 EA 02            [ 1] 4245 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001779 E7 02            [ 1] 4246 	ld (GPIO_DDR,x),a 
      00177B 7B 01            [ 1] 4247 	ld a,(PINNO,sp)
      00177D EA 04            [ 1] 4248 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      00177F E7 04            [ 1] 4249 	ld (GPIO_CR2,x),a 
      001781                       4250 9$:	
      001781                       4251 	_drop VSIZE 
      001781 5B 01            [ 2]    1     addw sp,#VSIZE 
      001783 81               [ 4] 4252 	ret
                                   4253 
                                   4254 ;------------------------
                                   4255 ; select Arduino pin 
                                   4256 ; input:
                                   4257 ;   X 	 {0..15} Arduino Dx 
                                   4258 ; output:
                                   4259 ;   A     stm8s208 pin 
                                   4260 ;   X     base address s208 GPIO port 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4261 ;---------------------------
      001784                       4262 select_pin:
      001784 58               [ 2] 4263 	sllw x 
      001785 1C 17 94         [ 2] 4264 	addw x,#arduino_to_8s208 
      001788 FE               [ 2] 4265 	ldw x,(x)
      001789 9F               [ 1] 4266 	ld a,xl 
      00178A 88               [ 1] 4267 	push a 
      00178B 5E               [ 1] 4268 	swapw x 
      00178C A6 05            [ 1] 4269 	ld a,#5 
      00178E 42               [ 4] 4270 	mul x,a 
      00178F 1C 50 00         [ 2] 4271 	addw x,#GPIO_BASE 
      001792 84               [ 1] 4272 	pop a 
      001793 81               [ 4] 4273 	ret 
                                   4274 ; translation from Arduino D0..D15 to stm8s208rb 
      001794                       4275 arduino_to_8s208:
      001794 03 06                 4276 .byte 3,6 ; D0 
      001796 03 05                 4277 .byte 3,5 ; D1 
      001798 04 00                 4278 .byte 4,0 ; D2 
      00179A 02 01                 4279 .byte 2,1 ; D3
      00179C 06 00                 4280 .byte 6,0 ; D4
      00179E 02 02                 4281 .byte 2,2 ; D5
      0017A0 02 03                 4282 .byte 2,3 ; D6
      0017A2 03 01                 4283 .byte 3,1 ; D7
      0017A4 03 03                 4284 .byte 3,3 ; D8
      0017A6 02 04                 4285 .byte 2,4 ; D9
      0017A8 04 05                 4286 .byte 4,5 ; D10
      0017AA 02 06                 4287 .byte 2,6 ; D11
      0017AC 02 07                 4288 .byte 2,7 ; D12
      0017AE 02 05                 4289 .byte 2,5 ; D13
      0017B0 04 02                 4290 .byte 4,2 ; D14
      0017B2 04 01                 4291 .byte 4,1 ; D15
                                   4292 
                                   4293 
                                   4294 ;------------------------------
                                   4295 ; BASIC: RND(expr)
                                   4296 ; return random number 
                                   4297 ; between 1 and expr inclusive
                                   4298 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   4299 ; input:
                                   4300 ; 	none 
                                   4301 ; output:
                                   4302 ;	X 		random positive integer 
                                   4303 ;------------------------------
      0017B4                       4304 random:
      0017B4 CD 0B DC         [ 4] 4305 	call func_args 
      0017B7 A1 01            [ 1] 4306 	cp a,#1
      0017B9 27 03            [ 1] 4307 	jreq 1$
      0017BB CC 07 39         [ 2] 4308 	jp syntax_error
      0017BE                       4309 1$:  
      0017BE A6 80            [ 1] 4310 	ld a,#0x80 
      0017C0 15 01            [ 1] 4311 	bcp a,(1,sp)
      0017C2 27 05            [ 1] 4312 	jreq 2$
      0017C4 A6 0A            [ 1] 4313 	ld a,#ERR_BAD_VALUE
      0017C6 CC 07 3B         [ 2] 4314 	jp tb_error
      0017C9                       4315 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4316 ; acc16=(x<<5)^x 
      0017C9 CE 00 12         [ 2] 4317 	ldw x,seedx 
      0017CC 58               [ 2] 4318 	sllw x 
      0017CD 58               [ 2] 4319 	sllw x 
      0017CE 58               [ 2] 4320 	sllw x 
      0017CF 58               [ 2] 4321 	sllw x 
      0017D0 58               [ 2] 4322 	sllw x 
      0017D1 9E               [ 1] 4323 	ld a,xh 
      0017D2 C8 00 12         [ 1] 4324 	xor a,seedx 
      0017D5 C7 00 0C         [ 1] 4325 	ld acc16,a 
      0017D8 9F               [ 1] 4326 	ld a,xl 
      0017D9 C8 00 13         [ 1] 4327 	xor a,seedx+1 
      0017DC C7 00 0D         [ 1] 4328 	ld acc8,a 
                                   4329 ; seedx=seedy 
      0017DF CE 00 14         [ 2] 4330 	ldw x,seedy 
      0017E2 CF 00 12         [ 2] 4331 	ldw seedx,x  
                                   4332 ; seedy=seedy^(seedy>>1)
      0017E5 90 54            [ 2] 4333 	srlw y 
      0017E7 90 9E            [ 1] 4334 	ld a,yh 
      0017E9 C8 00 14         [ 1] 4335 	xor a,seedy 
      0017EC C7 00 14         [ 1] 4336 	ld seedy,a  
      0017EF 90 9F            [ 1] 4337 	ld a,yl 
      0017F1 C8 00 15         [ 1] 4338 	xor a,seedy+1 
      0017F4 C7 00 15         [ 1] 4339 	ld seedy+1,a 
                                   4340 ; acc16>>3 
      0017F7 CE 00 0C         [ 2] 4341 	ldw x,acc16 
      0017FA 54               [ 2] 4342 	srlw x 
      0017FB 54               [ 2] 4343 	srlw x 
      0017FC 54               [ 2] 4344 	srlw x 
                                   4345 ; x=acc16^x 
      0017FD 9E               [ 1] 4346 	ld a,xh 
      0017FE C8 00 0C         [ 1] 4347 	xor a,acc16 
      001801 95               [ 1] 4348 	ld xh,a 
      001802 9F               [ 1] 4349 	ld a,xl 
      001803 C8 00 0D         [ 1] 4350 	xor a,acc8 
      001806 97               [ 1] 4351 	ld xl,a 
                                   4352 ; seedy=x^seedy 
      001807 C8 00 15         [ 1] 4353 	xor a,seedy+1
      00180A 97               [ 1] 4354 	ld xl,a 
      00180B 9E               [ 1] 4355 	ld a,xh 
      00180C C8 00 14         [ 1] 4356 	xor a,seedy
      00180F 95               [ 1] 4357 	ld xh,a 
      001810 CF 00 14         [ 2] 4358 	ldw seedy,x 
                                   4359 ; return seedy modulo expr + 1 
      001813 90 85            [ 2] 4360 	popw y 
      001815 65               [ 2] 4361 	divw x,y 
      001816 93               [ 1] 4362 	ldw x,y 
      001817 5C               [ 1] 4363 	incw x 
      001818                       4364 10$:
      001818 A6 84            [ 1] 4365 	ld a,#TK_INTGR
      00181A 81               [ 4] 4366 	ret 
                                   4367 
                                   4368 ;---------------------------------
                                   4369 ; BASIC: WORDS 
                                   4370 ; affiche la listes des mots du
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4371 ; dictionnaire ainsi que le nombre
                                   4372 ; de mots.
                                   4373 ;---------------------------------
                           000001  4374 	WLEN=1 ; word length
                           000002  4375 	LLEN=2 ; character sent to console
                           000003  4376 	WCNT=3 ; count words printed 
                           000003  4377 	VSIZE=3 
      00181B                       4378 words:
      00181B                       4379 	_vars VSIZE
      00181B 52 03            [ 2]    1     sub sp,#VSIZE 
      00181D 0F 02            [ 1] 4380 	clr (LLEN,sp)
      00181F 0F 03            [ 1] 4381 	clr (WCNT,sp)
      001821 90 AE 1E F6      [ 2] 4382 	ldw y,#kword_dict+2
      001825 93               [ 1] 4383 0$:	ldw x,y
      001826 F6               [ 1] 4384 	ld a,(x)
      001827 A4 0F            [ 1] 4385 	and a,#15 
      001829 6B 01            [ 1] 4386 	ld (WLEN,sp),a 
      00182B 0C 03            [ 1] 4387 	inc (WCNT,sp)
      00182D 5C               [ 1] 4388 1$:	incw x 
      00182E F6               [ 1] 4389 	ld a,(x)
      00182F CD 02 C1         [ 4] 4390 	call putc 
      001832 0C 02            [ 1] 4391 	inc (LLEN,sp)
      001834 0A 01            [ 1] 4392 	dec (WLEN,sp)
      001836 26 F5            [ 1] 4393 	jrne 1$
      001838 A6 46            [ 1] 4394 	ld a,#70
      00183A 11 02            [ 1] 4395 	cp a,(LLEN,sp)
      00183C 2B 09            [ 1] 4396 	jrmi 2$   
      00183E A6 20            [ 1] 4397 	ld a,#SPACE 
      001840 CD 02 C1         [ 4] 4398 	call putc 
      001843 0C 02            [ 1] 4399 	inc (LLEN,sp) 
      001845 20 07            [ 2] 4400 	jra 3$
      001847 A6 0D            [ 1] 4401 2$: ld a,#CR 
      001849 CD 02 C1         [ 4] 4402 	call putc 
      00184C 0F 02            [ 1] 4403 	clr (LLEN,sp)
      00184E 72 A2 00 02      [ 2] 4404 3$:	subw y,#2 
      001852 90 FE            [ 2] 4405 	ldw y,(y)
      001854 26 CF            [ 1] 4406 	jrne 0$ 
      001856 A6 0D            [ 1] 4407 	ld a,#CR 
      001858 CD 02 C1         [ 4] 4408 	call putc  
      00185B 5F               [ 1] 4409 	clrw x 
      00185C 7B 03            [ 1] 4410 	ld a,(WCNT,sp)
      00185E 97               [ 1] 4411 	ld xl,a 
      00185F CD 08 83         [ 4] 4412 	call print_int 
      001862 AE 18 6B         [ 2] 4413 	ldw x,#words_count_msg
      001865 CD 1F F4         [ 4] 4414 	call puts 
      001868                       4415 	_drop VSIZE 
      001868 5B 03            [ 2]    1     addw sp,#VSIZE 
      00186A 81               [ 4] 4416 	ret 
      00186B 20 77 6F 72 64 73 20  4417 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   4418 
                                   4419 
                                   4420 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4421 ; BASIC: TIMER expr 
                                   4422 ; initialize count down timer 
                                   4423 ;-----------------------------
      001881                       4424 set_timer:
      001881 CD 0B E1         [ 4] 4425 	call arg_list
      001884 A1 01            [ 1] 4426 	cp a,#1 
      001886 27 03            [ 1] 4427 	jreq 1$
      001888 CC 07 39         [ 2] 4428 	jp syntax_error
      00188B                       4429 1$: 
      00188B 85               [ 2] 4430 	popw x 
      00188C CF 00 10         [ 2] 4431 	ldw timer,x 
      00188F 81               [ 4] 4432 	ret 
                                   4433 
                                   4434 ;------------------------------
                                   4435 ; BASIC: TIMEOUT 
                                   4436 ; return state of timer 
                                   4437 ;------------------------------
      001890                       4438 timeout:
      001890 CE 00 10         [ 2] 4439 	ldw x,timer 
      001893                       4440 logical_complement:
      001893 53               [ 2] 4441 	cplw x 
      001894 A3 FF FF         [ 2] 4442 	cpw x,#-1
      001897 27 01            [ 1] 4443 	jreq 2$
      001899 5F               [ 1] 4444 	clrw x 
      00189A A6 84            [ 1] 4445 2$:	ld a,#TK_INTGR
      00189C 81               [ 4] 4446 	ret 
                                   4447 
                                   4448 ;--------------------------------
                                   4449 ; BASIC NOT(expr) 
                                   4450 ; return logical complement of expr
                                   4451 ;--------------------------------
      00189D                       4452 func_not:
      00189D CD 0B DC         [ 4] 4453 	call func_args  
      0018A0 A1 01            [ 1] 4454 	cp a,#1
      0018A2 27 03            [ 1] 4455 	jreq 1$
      0018A4 CC 07 39         [ 2] 4456 	jp syntax_error
      0018A7 85               [ 2] 4457 1$:	popw x 
      0018A8 20 E9            [ 2] 4458 	jra logical_complement
                                   4459 
                                   4460 
                                   4461 
                                   4462 ;-----------------------------------
                                   4463 ; BASIC: IWDGEN expr1 
                                   4464 ; enable independant watchdog timer
                                   4465 ; expr1 is delay in multiple of 62.5µsec
                                   4466 ; expr1 -> {1..16383}
                                   4467 ;-----------------------------------
      0018AA                       4468 enable_iwdg:
      0018AA CD 0B E1         [ 4] 4469 	call arg_list
      0018AD A1 01            [ 1] 4470 	cp a,#1 
      0018AF 27 03            [ 1] 4471 	jreq 1$
      0018B1 CC 07 39         [ 2] 4472 	jp syntax_error 
      0018B4 85               [ 2] 4473 1$: popw x 
      0018B5 4B 00            [ 1] 4474 	push #0
      0018B7 35 CC 50 E0      [ 1] 4475 	mov IWDG_KR,#IWDG_KEY_ENABLE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0018BB 9E               [ 1] 4476 	ld a,xh 
      0018BC A4 3F            [ 1] 4477 	and a,#0x3f
      0018BE 95               [ 1] 4478 	ld xh,a  
      0018BF A3 00 FF         [ 2] 4479 2$:	cpw x,#255
      0018C2 23 06            [ 2] 4480 	jrule 3$
      0018C4 0C 01            [ 1] 4481 	inc (1,sp)
      0018C6 98               [ 1] 4482 	rcf 
      0018C7 56               [ 2] 4483 	rrcw x 
      0018C8 20 F5            [ 2] 4484 	jra 2$
      0018CA 35 55 50 E0      [ 1] 4485 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0018CE 84               [ 1] 4486 	pop a  
      0018CF C7 50 E1         [ 1] 4487 	ld IWDG_PR,a 
      0018D2 9F               [ 1] 4488 	ld a,xl
      0018D3 4A               [ 1] 4489 	dec a 
      0018D4 35 55 50 E0      [ 1] 4490 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      0018D8 C7 50 E2         [ 1] 4491 	ld IWDG_RLR,a 
      0018DB 35 AA 50 E0      [ 1] 4492 	mov IWDG_KR,#IWDG_KEY_REFRESH
      0018DF 81               [ 4] 4493 	ret 
                                   4494 
                                   4495 
                                   4496 ;-----------------------------------
                                   4497 ; BASIC: IWDGREF  
                                   4498 ; refresh independant watchdog count down 
                                   4499 ; timer before it reset MCU. 
                                   4500 ;-----------------------------------
      0018E0                       4501 refresh_iwdg:
      0018E0 35 AA 50 E0      [ 1] 4502 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      0018E4 81               [ 4] 4503 	ret 
                                   4504 
                                   4505 
                                   4506 ;-------------------------------------
                                   4507 ; BASIC: LOG(expr)
                                   4508 ; return logarithm base 2 of expr 
                                   4509 ; this is the position of most significant
                                   4510 ; bit set. 
                                   4511 ; input: 
                                   4512 ; output:
                                   4513 ;   X     log2 
                                   4514 ;   A     TK_INTGR 
                                   4515 ;*********************************
      0018E5                       4516 log2:
      0018E5 CD 0B DC         [ 4] 4517 	call func_args 
      0018E8 A1 01            [ 1] 4518 	cp a,#1 
      0018EA 27 03            [ 1] 4519 	jreq 1$
      0018EC CC 07 39         [ 2] 4520 	jp syntax_error 
      0018EF 85               [ 2] 4521 1$: popw x 
      0018F0                       4522 leading_one:
      0018F0 5D               [ 2] 4523 	tnzw x 
      0018F1 27 0A            [ 1] 4524 	jreq 4$
      0018F3 A6 0F            [ 1] 4525 	ld a,#15 
      0018F5 59               [ 2] 4526 2$: rlcw x 
      0018F6 25 03            [ 1] 4527     jrc 3$
      0018F8 4A               [ 1] 4528 	dec a 
      0018F9 20 FA            [ 2] 4529 	jra 2$
      0018FB 5F               [ 1] 4530 3$: clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0018FC 97               [ 1] 4531     ld xl,a
      0018FD A6 84            [ 1] 4532 4$:	ld a,#TK_INTGR
      0018FF 81               [ 4] 4533 	ret 
                                   4534 
                                   4535 ;-----------------------------------
                                   4536 ; BASIC: BIT(expr) 
                                   4537 ; expr ->{0..15}
                                   4538 ; return 2^expr 
                                   4539 ; output:
                                   4540 ;    x    2^expr 
                                   4541 ;-----------------------------------
      001900                       4542 bitmask:
      001900 CD 0B DC         [ 4] 4543     call func_args 
      001903 A1 01            [ 1] 4544 	cp a,#1
      001905 27 03            [ 1] 4545 	jreq 1$
      001907 CC 07 39         [ 2] 4546 	jp syntax_error 
      00190A 85               [ 2] 4547 1$: popw x 
      00190B 9F               [ 1] 4548 	ld a,xl 
      00190C A4 0F            [ 1] 4549 	and a,#15
      00190E 5F               [ 1] 4550 	clrw x 
      00190F 5C               [ 1] 4551 	incw x 
      001910 4D               [ 1] 4552 2$: tnz a 
      001911 27 04            [ 1] 4553 	jreq 3$
      001913 58               [ 2] 4554 	slaw x 
      001914 4A               [ 1] 4555 	dec a 
      001915 20 F9            [ 2] 4556 	jra 2$ 
      001917 A6 84            [ 1] 4557 3$: ld a,#TK_INTGR
      001919 81               [ 4] 4558 	ret 
                                   4559 
                                   4560 ;------------------------------
                                   4561 ; BASIC: INVERT(expr)
                                   4562 ; 1's complement 
                                   4563 ;--------------------------------
      00191A                       4564 invert:
      00191A CD 0B DC         [ 4] 4565 	call func_args
      00191D A1 01            [ 1] 4566 	cp a,#1 
      00191F 27 03            [ 1] 4567 	jreq 1$
      001921 CC 07 39         [ 2] 4568 	jp syntax_error
      001924 85               [ 2] 4569 1$: popw x  
      001925 53               [ 2] 4570 	cplw x 
      001926 A6 84            [ 1] 4571 	ld a,#TK_INTGR 
      001928 81               [ 4] 4572 	ret 
                                   4573 
                                   4574 ;------------------------------
                                   4575 ; BASIC: DO 
                                   4576 ; initiate a DO ... UNTIL loop 
                                   4577 ;------------------------------
                           000003  4578 	DOLP_ADR=3 
                           000005  4579 	DOLP_INW=5
                           000004  4580 	VSIZE=4 
      001929                       4581 do_loop:
      001929 85               [ 2] 4582 	popw x 
      00192A                       4583 	_vars VSIZE 
      00192A 52 04            [ 2]    1     sub sp,#VSIZE 
      00192C 89               [ 2] 4584 	pushw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      00192D 90 CE 00 04      [ 2] 4585 	ldw y,basicptr 
      001931 17 03            [ 2] 4586 	ldw (DOLP_ADR,sp),y
      001933 90 CE 00 00      [ 2] 4587 	ldw y,in.w 
      001937 17 05            [ 2] 4588 	ldw (DOLP_INW,sp),y
      001939 72 5C 00 1D      [ 1] 4589 	inc loop_depth 
      00193D 81               [ 4] 4590 	ret 
                                   4591 
                                   4592 ;--------------------------------
                                   4593 ; BASIC: UNTIL expr 
                                   4594 ; loop if exprssion is false 
                                   4595 ; else terminate loop
                                   4596 ;--------------------------------
      00193E                       4597 until: 
      00193E 72 5D 00 1D      [ 1] 4598 	tnz loop_depth 
      001942 26 03            [ 1] 4599 	jrne 1$ 
      001944 CC 07 39         [ 2] 4600 	jp syntax_error 
      001947                       4601 1$: 
      001947 CD 0D 29         [ 4] 4602 	call relation 
      00194A A1 84            [ 1] 4603 	cp a,#TK_INTGR
      00194C 27 03            [ 1] 4604 	jreq 2$
      00194E CC 07 39         [ 2] 4605 	jp syntax_error
      001951                       4606 2$: 
      001951 5D               [ 2] 4607 	tnzw x 
      001952 26 10            [ 1] 4608 	jrne 9$
      001954 1E 03            [ 2] 4609 	ldw x,(DOLP_ADR,sp)
      001956 CF 00 04         [ 2] 4610 	ldw basicptr,x 
      001959 E6 02            [ 1] 4611 	ld a,(2,x)
      00195B C7 00 03         [ 1] 4612 	ld count,a 
      00195E 1E 05            [ 2] 4613 	ldw x,(DOLP_INW,sp)
      001960 CF 00 00         [ 2] 4614 	ldw in.w,x 
      001963 81               [ 4] 4615 	ret 
      001964                       4616 9$:	; remove loop data from stack  
      001964 85               [ 2] 4617 	popw x
      001965                       4618 	_drop VSIZE
      001965 5B 04            [ 2]    1     addw sp,#VSIZE 
      001967 72 5A 00 1D      [ 1] 4619 	dec loop_depth 
      00196B FC               [ 2] 4620 	jp (x)
                                   4621 
                                   4622 ;--------------------------
                                   4623 ; BASIC: PRTA...PRTI  
                                   4624 ;  return constant value 
                                   4625 ;  PORT  offset in GPIO
                                   4626 ;  array
                                   4627 ;---------------------------
      00196C                       4628 const_porta:
      00196C AE 00 00         [ 2] 4629 	ldw x,#0
      00196F A6 84            [ 1] 4630 	ld a,#TK_INTGR 
      001971 81               [ 4] 4631 	ret 
      001972                       4632 const_portb:
      001972 AE 00 01         [ 2] 4633 	ldw x,#1
      001975 A6 84            [ 1] 4634 	ld a,#TK_INTGR 
      001977 81               [ 4] 4635 	ret 
      001978                       4636 const_portc:
      001978 AE 00 02         [ 2] 4637 	ldw x,#2
      00197B A6 84            [ 1] 4638 	ld a,#TK_INTGR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      00197D 81               [ 4] 4639 	ret 
      00197E                       4640 const_portd:
      00197E AE 00 03         [ 2] 4641 	ldw x,#3
      001981 A6 84            [ 1] 4642 	ld a,#TK_INTGR 
      001983 81               [ 4] 4643 	ret 
      001984                       4644 const_porte:
      001984 AE 00 04         [ 2] 4645 	ldw x,#4
      001987 A6 84            [ 1] 4646 	ld a,#TK_INTGR 
      001989 81               [ 4] 4647 	ret 
      00198A                       4648 const_portf:
      00198A AE 00 05         [ 2] 4649 	ldw x,#5
      00198D A6 84            [ 1] 4650 	ld a,#TK_INTGR 
      00198F 81               [ 4] 4651 	ret 
      001990                       4652 const_portg:
      001990 AE 00 06         [ 2] 4653 	ldw x,#6
      001993 A6 84            [ 1] 4654 	ld a,#TK_INTGR 
      001995 81               [ 4] 4655 	ret 
      001996                       4656 const_porth:
      001996 AE 00 07         [ 2] 4657 	ldw x,#7
      001999 A6 84            [ 1] 4658 	ld a,#TK_INTGR 
      00199B 81               [ 4] 4659 	ret 
      00199C                       4660 const_porti:
      00199C AE 00 08         [ 2] 4661 	ldw x,#8
      00199F A6 84            [ 1] 4662 	ld a,#TK_INTGR 
      0019A1 81               [ 4] 4663 	ret 
                                   4664 
                                   4665 ;-------------------------------
                                   4666 ; following return constant 
                                   4667 ; related to GPIO register offset 
                                   4668 ;---------------------------------
      0019A2                       4669 const_odr:
      0019A2 A6 84            [ 1] 4670 	ld a,#TK_INTGR 
      0019A4 AE 00 00         [ 2] 4671 	ldw x,#GPIO_ODR
      0019A7 81               [ 4] 4672 	ret 
      0019A8                       4673 const_idr:
      0019A8 A6 84            [ 1] 4674 	ld a,#TK_INTGR 
      0019AA AE 00 01         [ 2] 4675 	ldw x,#GPIO_IDR
      0019AD 81               [ 4] 4676 	ret 
      0019AE                       4677 const_ddr:
      0019AE A6 84            [ 1] 4678 	ld a,#TK_INTGR 
      0019B0 AE 00 02         [ 2] 4679 	ldw x,#GPIO_DDR
      0019B3 81               [ 4] 4680 	ret 
      0019B4                       4681 const_cr1:
      0019B4 A6 84            [ 1] 4682 	ld a,#TK_INTGR 
      0019B6 AE 00 03         [ 2] 4683 	ldw x,#GPIO_CR1
      0019B9 81               [ 4] 4684 	ret 
      0019BA                       4685 const_cr2:
      0019BA A6 84            [ 1] 4686 	ld a,#TK_INTGR 
      0019BC AE 00 04         [ 2] 4687 	ldw x,#GPIO_CR2
      0019BF 81               [ 4] 4688 	ret 
                                   4689 ;-------------------------
                                   4690 ; BASIC: POUT 
                                   4691 ;  constant for port mode
                                   4692 ;  used by PMODE 
                                   4693 ;  to set pin as output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4694 ;------------------------
      0019C0                       4695 const_output:
      0019C0 A6 84            [ 1] 4696 	ld a,#TK_INTGR 
      0019C2 AE 00 01         [ 2] 4697 	ldw x,#OUTP
      0019C5 81               [ 4] 4698 	ret 
                                   4699 
                                   4700 ;-------------------------
                                   4701 ; BASIC: PINP 
                                   4702 ;  constant for port mode
                                   4703 ;  used by PMODE 
                                   4704 ;  to set pin as input
                                   4705 ;------------------------
      0019C6                       4706 const_input:
      0019C6 A6 84            [ 1] 4707 	ld a,#TK_INTGR 
      0019C8 AE 00 00         [ 2] 4708 	ldw x,#INP 
      0019CB 81               [ 4] 4709 	ret 
                                   4710 	
                                   4711 ;-----------------------
                                   4712 ; memory area constants
                                   4713 ;-----------------------
      0019CC                       4714 const_eeprom_base:
      0019CC A6 84            [ 1] 4715 	ld a,#TK_INTGR 
      0019CE AE 40 00         [ 2] 4716 	ldw x,#EEPROM_BASE 
      0019D1 81               [ 4] 4717 	ret 
                                   4718 
                                   4719 ;---------------------------
                                   4720 ; BASIC: DATA 
                                   4721 ; when the interpreter find 
                                   4722 ; a DATA line it skip it.
                                   4723 ;---------------------------
      0019D2                       4724 data:
      0019D2 55 00 03 00 01   [ 1] 4725 	mov in,count 
      0019D7 81               [ 4] 4726 	ret 
                                   4727 
                                   4728 ;---------------------------
                                   4729 ; BASIC: DATLN  *expr*
                                   4730 ; set DATA pointer at line# 
                                   4731 ; specified by *expr* 
                                   4732 ;---------------------------
      0019D8                       4733 data_line:
      0019D8 CD 0C E0         [ 4] 4734 	call expression
      0019DB A1 84            [ 1] 4735 	cp a,#TK_INTGR
      0019DD 27 03            [ 1] 4736 	jreq 1$
      0019DF CC 07 39         [ 2] 4737 	jp syntax_error  
      0019E2 4F               [ 1] 4738 1$: clr a 
      0019E3 CD 22 DC         [ 4] 4739 	call search_lineno
      0019E6 5D               [ 2] 4740 	tnzw x 
      0019E7 26 05            [ 1] 4741 	jrne 3$
      0019E9 A6 05            [ 1] 4742 2$:	ld a,#ERR_NO_LINE 
      0019EB CC 07 3B         [ 2] 4743 	jp tb_error
      0019EE                       4744 3$: ; check if valid data line 
      0019EE 90 93            [ 1] 4745     ldw y,x 
      0019F0 EE 04            [ 2] 4746 	ldw x,(4,x)
      0019F2 A3 19 D2         [ 2] 4747 	cpw x,#data 
      0019F5 26 F2            [ 1] 4748 	jrne 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      0019F7 90 CF 00 06      [ 2] 4749 	ldw data_ptr,y
      0019FB 90 E6 02         [ 1] 4750 	ld a,(2,y)
      0019FE C7 00 09         [ 1] 4751 	ld data_len,a 
      001A01 35 06 00 08      [ 1] 4752 	mov data_ofs,#FIRST_DATA_ITEM 
      001A05 81               [ 4] 4753 	ret
                                   4754 
                                   4755 ;---------------------------------
                                   4756 ; BASIC: RESTORE 
                                   4757 ; set data_ptr to first data line
                                   4758 ; if not DATA found pointer set to
                                   4759 ; zero 
                                   4760 ;---------------------------------
      001A06                       4761 restore:
      001A06 72 5F 00 06      [ 1] 4762 	clr data_ptr 
      001A0A 72 5F 00 07      [ 1] 4763 	clr data_ptr+1
      001A0E 72 5F 00 08      [ 1] 4764 	clr data_ofs 
      001A12 72 5F 00 09      [ 1] 4765 	clr data_len
      001A16 CE 00 19         [ 2] 4766 	ldw x,txtbgn
      001A19                       4767 data_search_loop: 	
      001A19 C3 00 1B         [ 2] 4768 	cpw x,txtend
      001A1C 24 1B            [ 1] 4769 	jruge 9$
      001A1E 90 93            [ 1] 4770 	ldw y,x 
      001A20 EE 04            [ 2] 4771 	ldw x,(4,x)
      001A22 1C 1E FC         [ 2] 4772 	addw x,#code_addr
      001A25 FE               [ 2] 4773 	ldw x,(x)
      001A26 A3 19 D2         [ 2] 4774 	cpw x,#data 
      001A29 26 1A            [ 1] 4775 	jrne try_next_line 
      001A2B 90 CF 00 06      [ 2] 4776 	ldw data_ptr,y 
      001A2F 90 E6 02         [ 1] 4777 	ld a,(2,y)
      001A32 C7 00 09         [ 1] 4778 	ld data_len,a 
      001A35 35 06 00 08      [ 1] 4779 	mov data_ofs,#FIRST_DATA_ITEM
      001A39 72 5D 00 09      [ 1] 4780 9$:	tnz data_len 
      001A3D 26 05            [ 1] 4781     jrne 10$
      001A3F A6 0C            [ 1] 4782 	ld a,#ERR_NO_DATA 
      001A41 CC 07 3B         [ 2] 4783 	jp tb_error 
      001A44 81               [ 4] 4784 10$:ret
      001A45                       4785 try_next_line:
      001A45 93               [ 1] 4786 	ldw x,y 
      001A46 E6 02            [ 1] 4787 	ld a,(2,x)
      001A48 C7 00 0D         [ 1] 4788 	ld acc8,a 
      001A4B 72 5F 00 0C      [ 1] 4789 	clr acc16 
      001A4F 72 BB 00 0C      [ 2] 4790 	addw x,acc16 
      001A53 20 C4            [ 2] 4791 	jra data_search_loop
                                   4792 
                                   4793 
                                   4794 ;---------------------------------
                                   4795 ; BASIC: READ 
                                   4796 ; return next data item | 0 
                                   4797 ;---------------------------------
                           000001  4798 	CTX_BPTR=1 
                           000003  4799 	CTX_IN=3 
                           000004  4800 	CTX_COUNT=4 
                           000005  4801 	XSAVE=5
                           000006  4802 	VSIZE=6
      001A55                       4803 read:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001A55                       4804 	_vars  VSIZE 
      001A55 52 06            [ 2]    1     sub sp,#VSIZE 
      001A57                       4805 read01:	
      001A57 C6 00 08         [ 1] 4806 	ld a,data_ofs
      001A5A C1 00 09         [ 1] 4807 	cp a,data_len 
      001A5D 27 37            [ 1] 4808 	jreq 2$ ; end of line  
      001A5F CD 0F 87         [ 4] 4809 	call save_context
      001A62 CE 00 06         [ 2] 4810 	ldw x,data_ptr 
      001A65 CF 00 04         [ 2] 4811 	ldw basicptr,x 
      001A68 55 00 08 00 01   [ 1] 4812 	mov in,data_ofs 
      001A6D 55 00 09 00 03   [ 1] 4813 	mov count,data_len  
      001A72 CD 0C E0         [ 4] 4814 	call expression 
      001A75 A1 84            [ 1] 4815 	cp a,#TK_INTGR 
      001A77 27 03            [ 1] 4816 	jreq 1$ 
      001A79 CC 07 39         [ 2] 4817 	jp syntax_error 
      001A7C                       4818 1$:
      001A7C 1F 05            [ 2] 4819 	ldw (XSAVE,SP),x
      001A7E CD 08 28         [ 4] 4820 	call next_token ; skip comma
      001A81 CE 00 04         [ 2] 4821 	ldw x,basicptr 
      001A84 CF 00 06         [ 2] 4822 	ldw data_ptr,x 
      001A87 55 00 01 00 08   [ 1] 4823 	mov data_ofs,in 
      001A8C CD 0F 97         [ 4] 4824 	call rest_context
      001A8F 1E 05            [ 2] 4825 	ldw x,(XSAVE,sp)
      001A91 A6 84            [ 1] 4826 	ld a,#TK_INTGR
      001A93                       4827 	_drop VSIZE 
      001A93 5B 06            [ 2]    1     addw sp,#VSIZE 
      001A95 81               [ 4] 4828 	ret 
      001A96                       4829 2$: ; end of line reached 
      001A96 90 CE 00 06      [ 2] 4830 	ldw y, data_ptr 
      001A9A 72 5F 00 06      [ 1] 4831 	clr data_ptr
      001A9E 72 5F 00 07      [ 1] 4832 	clr data_ptr+1   
      001AA2 72 5F 00 08      [ 1] 4833 	clr data_ofs 
      001AA6 72 5F 00 09      [ 1] 4834 	clr data_len 
      001AAA CD 1A 45         [ 4] 4835 	call try_next_line 
      001AAD 20 A8            [ 2] 4836 	jra read01
                                   4837 
                                   4838 
                                   4839 ;---------------------------------
                                   4840 ; BASIC: SPIEN clkdiv, 0|1  
                                   4841 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   4842 ; if clkdiv==-1 disable SPI
                                   4843 ; 0|1 -> disable|enable  
                                   4844 ;--------------------------------- 
                           000005  4845 SPI_CS_BIT=5
      001AAF                       4846 spi_enable:
      001AAF CD 0B E1         [ 4] 4847 	call arg_list 
      001AB2 A1 02            [ 1] 4848 	cp a,#2
      001AB4 27 03            [ 1] 4849 	jreq 1$
      001AB6 CC 07 39         [ 2] 4850 	jp syntax_error 
      001AB9                       4851 1$: 
      001AB9 72 12 50 C7      [ 1] 4852 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      001ABD 85               [ 2] 4853 	popw x  
      001ABE 5D               [ 2] 4854 	tnzw x 
      001ABF 27 21            [ 1] 4855 	jreq spi_disable 
      001AC1 85               [ 2] 4856 	popw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001AC2 A6 08            [ 1] 4857 	ld a,#(1<<SPI_CR1_BR)
      001AC4 42               [ 4] 4858 	mul x,a 
      001AC5 9F               [ 1] 4859 	ld a,xl 
      001AC6 C7 52 00         [ 1] 4860 	ld SPI_CR1,a 
                                   4861 ; configure ~CS on PE5 (D10 on CN8) as output. 
      001AC9 72 1A 50 14      [ 1] 4862 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      001ACD 72 1A 50 16      [ 1] 4863 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   4864 ; configure SPI as master mode 0.	
      001AD1 72 14 52 00      [ 1] 4865 	bset SPI_CR1,#SPI_CR1_MSTR
                                   4866 ; ~CS line controlled by sofware 	
      001AD5 72 12 52 01      [ 1] 4867 	bset SPI_CR2,#SPI_CR2_SSM 
      001AD9 72 10 52 01      [ 1] 4868     bset SPI_CR2,#SPI_CR2_SSI 
                                   4869 ; enable SPI
      001ADD 72 1C 52 00      [ 1] 4870 	bset SPI_CR1,#SPI_CR1_SPE 	
      001AE1 81               [ 4] 4871 	ret 
      001AE2                       4872 spi_disable:
      001AE2                       4873 	_drop #2; throw first argument.
      001AE2 5B 02            [ 2]    1     addw sp,##2 
                                   4874 ; wait spi idle 
      001AE4 A6 82            [ 1] 4875 1$:	ld a,#0x82 
      001AE6 C4 52 03         [ 1] 4876 	and a,SPI_SR
      001AE9 A1 02            [ 1] 4877 	cp a,#2 
      001AEB 26 F7            [ 1] 4878 	jrne 1$
      001AED 72 1D 52 00      [ 1] 4879 	bres SPI_CR1,#SPI_CR1_SPE
      001AF1 72 13 50 C7      [ 1] 4880 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      001AF5 72 1B 50 16      [ 1] 4881 	bres PE_DDR,#SPI_CS_BIT 
      001AF9 81               [ 4] 4882 	ret 
                                   4883 
      001AFA                       4884 spi_clear_error:
      001AFA A6 78            [ 1] 4885 	ld a,#0x78 
      001AFC C5 52 03         [ 1] 4886 	bcp a,SPI_SR 
      001AFF 27 04            [ 1] 4887 	jreq 1$
      001B01 72 5F 52 03      [ 1] 4888 	clr SPI_SR 
      001B05 81               [ 4] 4889 1$: ret 
                                   4890 
      001B06                       4891 spi_send_byte:
      001B06 88               [ 1] 4892 	push a 
      001B07 CD 1A FA         [ 4] 4893 	call spi_clear_error
      001B0A 84               [ 1] 4894 	pop a 
      001B0B 72 03 52 03 FB   [ 2] 4895 	btjf SPI_SR,#SPI_SR_TXE,.
      001B10 C7 52 04         [ 1] 4896 	ld SPI_DR,a
      001B13 72 01 52 03 FB   [ 2] 4897 	btjf SPI_SR,#SPI_SR_RXNE,.  
      001B18 C6 52 04         [ 1] 4898 	ld a,SPI_DR 
      001B1B 81               [ 4] 4899 	ret 
                                   4900 
      001B1C                       4901 spi_rcv_byte:
      001B1C A6 FF            [ 1] 4902 	ld a,#255
      001B1E 72 01 52 03 E3   [ 2] 4903 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      001B23 C6 52 04         [ 1] 4904 	ld a,SPI_DR 
      001B26 81               [ 4] 4905 	ret
                                   4906 
                                   4907 ;------------------------------
                                   4908 ; BASIC: SPIWR byte [,byte]
                                   4909 ; write 1 or more byte
                                   4910 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B27                       4911 spi_write:
      001B27 CD 0C E0         [ 4] 4912 	call expression
      001B2A A1 84            [ 1] 4913 	cp a,#TK_INTGR 
      001B2C 27 03            [ 1] 4914 	jreq 1$
      001B2E CC 07 39         [ 2] 4915 	jp syntax_error 
      001B31                       4916 1$:	
      001B31 9F               [ 1] 4917 	ld a,xl 
      001B32 CD 1B 06         [ 4] 4918 	call spi_send_byte 
      001B35 CD 08 28         [ 4] 4919 	call next_token 
      001B38 A1 09            [ 1] 4920 	cp a,#TK_COMMA 
      001B3A 26 02            [ 1] 4921 	jrne 2$ 
      001B3C 20 E9            [ 2] 4922 	jra spi_write 
      001B3E 4D               [ 1] 4923 2$:	tnz a 
      001B3F 27 05            [ 1] 4924 	jreq 3$
      001B41                       4925 	_unget_token  
      001B41 55 00 02 00 01   [ 1]    1      mov in,in.saved  
      001B46 81               [ 4] 4926 3$:	ret 
                                   4927 
                                   4928 
                                   4929 ;-------------------------------
                                   4930 ; BASIC: SPIRD 	
                                   4931 ; read one byte from SPI 
                                   4932 ;-------------------------------
      001B47                       4933 spi_read:
      001B47 CD 1B 1C         [ 4] 4934 	call spi_rcv_byte 
      001B4A 5F               [ 1] 4935 	clrw x 
      001B4B 97               [ 1] 4936 	ld xl,a 
      001B4C A6 84            [ 1] 4937 	ld a,#TK_INTGR 
      001B4E 81               [ 4] 4938 	ret 
                                   4939 
                                   4940 ;------------------------------
                                   4941 ; BASIC: SPISEL 0|1 
                                   4942 ; set state of ~CS line
                                   4943 ; 0|1 deselect|select  
                                   4944 ;------------------------------
      001B4F                       4945 spi_select:
      001B4F CD 08 28         [ 4] 4946 	call next_token 
      001B52 A1 84            [ 1] 4947 	cp a,#TK_INTGR 
      001B54 27 03            [ 1] 4948 	jreq 1$
      001B56 CC 07 39         [ 2] 4949 	jp syntax_error 
      001B59 5D               [ 2] 4950 1$: tnzw x  
      001B5A 27 05            [ 1] 4951 	jreq cs_high 
      001B5C 72 1B 50 14      [ 1] 4952 	bres PE_ODR,#SPI_CS_BIT
      001B60 81               [ 4] 4953 	ret 
      001B61                       4954 cs_high: 
      001B61 72 1A 50 14      [ 1] 4955 	bset PE_ODR,#SPI_CS_BIT
      001B65 81               [ 4] 4956 	ret 
                                   4957 
                                   4958 ;-------------------------------
                                   4959 ; BASIC: PAD 
                                   4960 ; Return pad buffer address.
                                   4961 ;------------------------------
      001B66                       4962 pad_ref:
      001B66 AE 16 E0         [ 2] 4963 	ldw x,#pad 
      001B69 B6 84            [ 1] 4964 	ld a,TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001B6B 81               [ 4] 4965 	ret 
                                   4966 
                                   4967 
                                   4968 ;------------------------------
                                   4969 ;      dictionary 
                                   4970 ; format:
                                   4971 ;   link:   2 bytes 
                                   4972 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   4973 ;   cmd_name: 16 byte max 
                                   4974 ;   cmd_index: 2 bytes 
                                   4975 ;------------------------------
                                   4976 	.macro _dict_entry len,name,cmd_idx 
                                   4977 	.word LINK 
                                   4978 	LINK=.
                                   4979 name:
                                   4980 	.byte len 	
                                   4981 	.ascii "name"
                                   4982 	.word cmd_idx 
                                   4983 	.endm 
                                   4984 
                           000000  4985 	LINK=0
                                   4986 ; respect alphabetic order for BASIC names from Z-A
                                   4987 ; this sort order is for a cleaner WORDS cmd output. 	
      001B6C                       4988 kword_end:
      001B6C                       4989 	_dict_entry,3+F_IFUNC,XOR,XOR_IDX;bit_xor
      001B6C 00 00                    1 	.word LINK 
                           001B6E     2 	LINK=.
      001B6E                          3 XOR:
      001B6E 43                       4 	.byte 3+F_IFUNC 	
      001B6F 58 4F 52                 5 	.ascii "XOR"
      001B72 00 C2                    6 	.word XOR_IDX 
      001B74                       4990 	_dict_entry,5,WRITE,WRITE_IDX;write  
      001B74 1B 6E                    1 	.word LINK 
                           001B76     2 	LINK=.
      001B76                          3 WRITE:
      001B76 05                       4 	.byte 5 	
      001B77 57 52 49 54 45           5 	.ascii "WRITE"
      001B7C 00 C0                    6 	.word WRITE_IDX 
      001B7E                       4991 	_dict_entry,5,WORDS,WORDS_IDX;words 
      001B7E 1B 76                    1 	.word LINK 
                           001B80     2 	LINK=.
      001B80                          3 WORDS:
      001B80 05                       4 	.byte 5 	
      001B81 57 4F 52 44 53           5 	.ascii "WORDS"
      001B86 00 BE                    6 	.word WORDS_IDX 
      001B88                       4992 	_dict_entry 4,WAIT,WAIT_IDX;wait 
      001B88 1B 80                    1 	.word LINK 
                           001B8A     2 	LINK=.
      001B8A                          3 WAIT:
      001B8A 04                       4 	.byte 4 	
      001B8B 57 41 49 54              5 	.ascii "WAIT"
      001B8F 00 BC                    6 	.word WAIT_IDX 
      001B91                       4993 	_dict_entry,3+F_IFUNC,USR,USR_IDX;usr
      001B91 1B 8A                    1 	.word LINK 
                           001B93     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001B93                          3 USR:
      001B93 43                       4 	.byte 3+F_IFUNC 	
      001B94 55 53 52                 5 	.ascii "USR"
      001B97 00 BA                    6 	.word USR_IDX 
      001B99                       4994 	_dict_entry,5,UNTIL,UNTIL_IDX;until 
      001B99 1B 93                    1 	.word LINK 
                           001B9B     2 	LINK=.
      001B9B                          3 UNTIL:
      001B9B 05                       4 	.byte 5 	
      001B9C 55 4E 54 49 4C           5 	.ascii "UNTIL"
      001BA1 00 B8                    6 	.word UNTIL_IDX 
      001BA3                       4995 	_dict_entry,6+F_IFUNC,UFLASH,UFLASH_IDX;uflash 
      001BA3 1B 9B                    1 	.word LINK 
                           001BA5     2 	LINK=.
      001BA5                          3 UFLASH:
      001BA5 46                       4 	.byte 6+F_IFUNC 	
      001BA6 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      001BAC 00 B6                    6 	.word UFLASH_IDX 
      001BAE                       4996 	_dict_entry,6+F_IFUNC,UBOUND,UBOUND_IDX;ubound
      001BAE 1B A5                    1 	.word LINK 
                           001BB0     2 	LINK=.
      001BB0                          3 UBOUND:
      001BB0 46                       4 	.byte 6+F_IFUNC 	
      001BB1 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      001BB7 00 B4                    6 	.word UBOUND_IDX 
      001BB9                       4997 	_dict_entry,4,TONE,TONE_IDX;tone  
      001BB9 1B B0                    1 	.word LINK 
                           001BBB     2 	LINK=.
      001BBB                          3 TONE:
      001BBB 04                       4 	.byte 4 	
      001BBC 54 4F 4E 45              5 	.ascii "TONE"
      001BC0 00 B2                    6 	.word TONE_IDX 
      001BC2                       4998 	_dict_entry,2,TO,TO_IDX;to
      001BC2 1B BB                    1 	.word LINK 
                           001BC4     2 	LINK=.
      001BC4                          3 TO:
      001BC4 02                       4 	.byte 2 	
      001BC5 54 4F                    5 	.ascii "TO"
      001BC7 00 B0                    6 	.word TO_IDX 
      001BC9                       4999 	_dict_entry,5,TIMER,TIMER_IDX;set_timer
      001BC9 1B C4                    1 	.word LINK 
                           001BCB     2 	LINK=.
      001BCB                          3 TIMER:
      001BCB 05                       4 	.byte 5 	
      001BCC 54 49 4D 45 52           5 	.ascii "TIMER"
      001BD1 00 AC                    6 	.word TIMER_IDX 
      001BD3                       5000 	_dict_entry,7+F_IFUNC,TIMEOUT,TMROUT_IDX;timeout 
      001BD3 1B CB                    1 	.word LINK 
                           001BD5     2 	LINK=.
      001BD5                          3 TIMEOUT:
      001BD5 47                       4 	.byte 7+F_IFUNC 	
      001BD6 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      001BDD 00 AE                    6 	.word TMROUT_IDX 
      001BDF                       5001 	_dict_entry,5+F_IFUNC,TICKS,TICKS_IDX;get_ticks
      001BDF 1B D5                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           001BE1     2 	LINK=.
      001BE1                          3 TICKS:
      001BE1 45                       4 	.byte 5+F_IFUNC 	
      001BE2 54 49 43 4B 53           5 	.ascii "TICKS"
      001BE7 00 AA                    6 	.word TICKS_IDX 
      001BE9                       5002 	_dict_entry,4,STOP,STOP_IDX;stop 
      001BE9 1B E1                    1 	.word LINK 
                           001BEB     2 	LINK=.
      001BEB                          3 STOP:
      001BEB 04                       4 	.byte 4 	
      001BEC 53 54 4F 50              5 	.ascii "STOP"
      001BF0 00 A8                    6 	.word STOP_IDX 
      001BF2                       5003 	_dict_entry,4,STEP,STEP_IDX;step 
      001BF2 1B EB                    1 	.word LINK 
                           001BF4     2 	LINK=.
      001BF4                          3 STEP:
      001BF4 04                       4 	.byte 4 	
      001BF5 53 54 45 50              5 	.ascii "STEP"
      001BF9 00 A6                    6 	.word STEP_IDX 
      001BFB                       5004 	_dict_entry,5,SPIWR,SPIWR_IDX;spi_write
      001BFB 1B F4                    1 	.word LINK 
                           001BFD     2 	LINK=.
      001BFD                          3 SPIWR:
      001BFD 05                       4 	.byte 5 	
      001BFE 53 50 49 57 52           5 	.ascii "SPIWR"
      001C03 00 A4                    6 	.word SPIWR_IDX 
      001C05                       5005 	_dict_entry,6,SPISEL,SPISEL_IDX;spi_select
      001C05 1B FD                    1 	.word LINK 
                           001C07     2 	LINK=.
      001C07                          3 SPISEL:
      001C07 06                       4 	.byte 6 	
      001C08 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      001C0E 00 A2                    6 	.word SPISEL_IDX 
      001C10                       5006 	_dict_entry,5+F_IFUNC,SPIRD,SPIRD_IDX; spi_read 
      001C10 1C 07                    1 	.word LINK 
                           001C12     2 	LINK=.
      001C12                          3 SPIRD:
      001C12 45                       4 	.byte 5+F_IFUNC 	
      001C13 53 50 49 52 44           5 	.ascii "SPIRD"
      001C18 00 9E                    6 	.word SPIRD_IDX 
      001C1A                       5007 	_dict_entry,5,SPIEN,SPIEN_IDX;spi_enable 
      001C1A 1C 12                    1 	.word LINK 
                           001C1C     2 	LINK=.
      001C1C                          3 SPIEN:
      001C1C 05                       4 	.byte 5 	
      001C1D 53 50 49 45 4E           5 	.ascii "SPIEN"
      001C22 00 A0                    6 	.word SPIEN_IDX 
      001C24                       5008 	_dict_entry,5,SLEEP,SLEEP_IDX;sleep 
      001C24 1C 1C                    1 	.word LINK 
                           001C26     2 	LINK=.
      001C26                          3 SLEEP:
      001C26 05                       4 	.byte 5 	
      001C27 53 4C 45 45 50           5 	.ascii "SLEEP"
      001C2C 00 9C                    6 	.word SLEEP_IDX 
      001C2E                       5009     _dict_entry,4,SHOW,SHOW_IDX;show 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001C2E 1C 26                    1 	.word LINK 
                           001C30     2 	LINK=.
      001C30                          3 SHOW:
      001C30 04                       4 	.byte 4 	
      001C31 53 48 4F 57              5 	.ascii "SHOW"
      001C35 00 98                    6 	.word SHOW_IDX 
      001C37                       5010 	_dict_entry 3,RUN,RUN_IDX;run
      001C37 1C 30                    1 	.word LINK 
                           001C39     2 	LINK=.
      001C39                          3 RUN:
      001C39 03                       4 	.byte 3 	
      001C3A 52 55 4E                 5 	.ascii "RUN"
      001C3D 00 96                    6 	.word RUN_IDX 
      001C3F                       5011 	_dict_entry,6+F_IFUNC,RSHIFT,RSHIFT_IDX;rshift
      001C3F 1C 39                    1 	.word LINK 
                           001C41     2 	LINK=.
      001C41                          3 RSHIFT:
      001C41 46                       4 	.byte 6+F_IFUNC 	
      001C42 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      001C48 00 94                    6 	.word RSHIFT_IDX 
      001C4A                       5012 	_dict_entry,3+F_IFUNC,RND,RND_IDX;random 
      001C4A 1C 41                    1 	.word LINK 
                           001C4C     2 	LINK=.
      001C4C                          3 RND:
      001C4C 43                       4 	.byte 3+F_IFUNC 	
      001C4D 52 4E 44                 5 	.ascii "RND"
      001C50 00 92                    6 	.word RND_IDX 
      001C52                       5013 	_dict_entry,6,RETURN,RET_IDX;return 
      001C52 1C 4C                    1 	.word LINK 
                           001C54     2 	LINK=.
      001C54                          3 RETURN:
      001C54 06                       4 	.byte 6 	
      001C55 52 45 54 55 52 4E        5 	.ascii "RETURN"
      001C5B 00 90                    6 	.word RET_IDX 
      001C5D                       5014 	_dict_entry,7,RESTORE,REST_IDX;restore 
      001C5D 1C 54                    1 	.word LINK 
                           001C5F     2 	LINK=.
      001C5F                          3 RESTORE:
      001C5F 07                       4 	.byte 7 	
      001C60 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      001C67 00 8E                    6 	.word REST_IDX 
      001C69                       5015 	_dict_entry 6,REMARK,REM_IDX;remark 
      001C69 1C 5F                    1 	.word LINK 
                           001C6B     2 	LINK=.
      001C6B                          3 REMARK:
      001C6B 06                       4 	.byte 6 	
      001C6C 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      001C72 00 8C                    6 	.word REM_IDX 
      001C74                       5016 	_dict_entry,6,REBOOT,RBT_IDX;cold_start
      001C74 1C 6B                    1 	.word LINK 
                           001C76     2 	LINK=.
      001C76                          3 REBOOT:
      001C76 06                       4 	.byte 6 	
      001C77 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      001C7D 00 8A                    6 	.word RBT_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001C7F                       5017 	_dict_entry,4+F_IFUNC,READ,READ_IDX;read  
      001C7F 1C 76                    1 	.word LINK 
                           001C81     2 	LINK=.
      001C81                          3 READ:
      001C81 44                       4 	.byte 4+F_IFUNC 	
      001C82 52 45 41 44              5 	.ascii "READ"
      001C86 00 88                    6 	.word READ_IDX 
      001C88                       5018 	_dict_entry,4+F_IFUNC,QKEY,QKEY_IDX;qkey  
      001C88 1C 81                    1 	.word LINK 
                           001C8A     2 	LINK=.
      001C8A                          3 QKEY:
      001C8A 44                       4 	.byte 4+F_IFUNC 	
      001C8B 51 4B 45 59              5 	.ascii "QKEY"
      001C8F 00 86                    6 	.word QKEY_IDX 
      001C91                       5019 	_dict_entry,4+F_IFUNC,PRTI,PRTI_IDX;const_porti 
      001C91 1C 8A                    1 	.word LINK 
                           001C93     2 	LINK=.
      001C93                          3 PRTI:
      001C93 44                       4 	.byte 4+F_IFUNC 	
      001C94 50 52 54 49              5 	.ascii "PRTI"
      001C98 00 84                    6 	.word PRTI_IDX 
      001C9A                       5020 	_dict_entry,4+F_IFUNC,PRTH,PRTH_IDX;const_porth 
      001C9A 1C 93                    1 	.word LINK 
                           001C9C     2 	LINK=.
      001C9C                          3 PRTH:
      001C9C 44                       4 	.byte 4+F_IFUNC 	
      001C9D 50 52 54 48              5 	.ascii "PRTH"
      001CA1 00 82                    6 	.word PRTH_IDX 
      001CA3                       5021 	_dict_entry,4+F_IFUNC,PRTG,PRTG_IDX;const_portg 
      001CA3 1C 9C                    1 	.word LINK 
                           001CA5     2 	LINK=.
      001CA5                          3 PRTG:
      001CA5 44                       4 	.byte 4+F_IFUNC 	
      001CA6 50 52 54 47              5 	.ascii "PRTG"
      001CAA 00 80                    6 	.word PRTG_IDX 
      001CAC                       5022 	_dict_entry,4+F_IFUNC,PRTF,PRTF_IDX;const_portf
      001CAC 1C A5                    1 	.word LINK 
                           001CAE     2 	LINK=.
      001CAE                          3 PRTF:
      001CAE 44                       4 	.byte 4+F_IFUNC 	
      001CAF 50 52 54 46              5 	.ascii "PRTF"
      001CB3 00 7E                    6 	.word PRTF_IDX 
      001CB5                       5023 	_dict_entry,4+F_IFUNC,PRTE,PRTE_IDX;const_porte
      001CB5 1C AE                    1 	.word LINK 
                           001CB7     2 	LINK=.
      001CB7                          3 PRTE:
      001CB7 44                       4 	.byte 4+F_IFUNC 	
      001CB8 50 52 54 45              5 	.ascii "PRTE"
      001CBC 00 7C                    6 	.word PRTE_IDX 
      001CBE                       5024 	_dict_entry,4+F_IFUNC,PRTD,PRTD_IDX;const_portd
      001CBE 1C B7                    1 	.word LINK 
                           001CC0     2 	LINK=.
      001CC0                          3 PRTD:
      001CC0 44                       4 	.byte 4+F_IFUNC 	
      001CC1 50 52 54 44              5 	.ascii "PRTD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001CC5 00 7A                    6 	.word PRTD_IDX 
      001CC7                       5025 	_dict_entry,4+F_IFUNC,PRTC,PRTC_IDX;const_portc
      001CC7 1C C0                    1 	.word LINK 
                           001CC9     2 	LINK=.
      001CC9                          3 PRTC:
      001CC9 44                       4 	.byte 4+F_IFUNC 	
      001CCA 50 52 54 43              5 	.ascii "PRTC"
      001CCE 00 78                    6 	.word PRTC_IDX 
      001CD0                       5026 	_dict_entry,4+F_IFUNC,PRTB,PRTB_IDX;const_portb
      001CD0 1C C9                    1 	.word LINK 
                           001CD2     2 	LINK=.
      001CD2                          3 PRTB:
      001CD2 44                       4 	.byte 4+F_IFUNC 	
      001CD3 50 52 54 42              5 	.ascii "PRTB"
      001CD7 00 76                    6 	.word PRTB_IDX 
      001CD9                       5027 	_dict_entry,4+F_IFUNC,PRTA,PRTA_IDX;const_porta 
      001CD9 1C D2                    1 	.word LINK 
                           001CDB     2 	LINK=.
      001CDB                          3 PRTA:
      001CDB 44                       4 	.byte 4+F_IFUNC 	
      001CDC 50 52 54 41              5 	.ascii "PRTA"
      001CE0 00 74                    6 	.word PRTA_IDX 
      001CE2                       5028 	_dict_entry 5,PRINT,PRT_IDX;print 
      001CE2 1C DB                    1 	.word LINK 
                           001CE4     2 	LINK=.
      001CE4                          3 PRINT:
      001CE4 05                       4 	.byte 5 	
      001CE5 50 52 49 4E 54           5 	.ascii "PRINT"
      001CEA 00 72                    6 	.word PRT_IDX 
      001CEC                       5029 	_dict_entry,4+F_IFUNC,POUT,POUT_IDX;const_output
      001CEC 1C E4                    1 	.word LINK 
                           001CEE     2 	LINK=.
      001CEE                          3 POUT:
      001CEE 44                       4 	.byte 4+F_IFUNC 	
      001CEF 50 4F 55 54              5 	.ascii "POUT"
      001CF3 00 70                    6 	.word POUT_IDX 
      001CF5                       5030 	_dict_entry,4,POKE,POKE_IDX;poke 
      001CF5 1C EE                    1 	.word LINK 
                           001CF7     2 	LINK=.
      001CF7                          3 POKE:
      001CF7 04                       4 	.byte 4 	
      001CF8 50 4F 4B 45              5 	.ascii "POKE"
      001CFC 00 6E                    6 	.word POKE_IDX 
      001CFE                       5031 	_dict_entry,5,PMODE,PMODE_IDX;pin_mode 
      001CFE 1C F7                    1 	.word LINK 
                           001D00     2 	LINK=.
      001D00                          3 PMODE:
      001D00 05                       4 	.byte 5 	
      001D01 50 4D 4F 44 45           5 	.ascii "PMODE"
      001D06 00 68                    6 	.word PMODE_IDX 
      001D08                       5032 	_dict_entry,4+F_IFUNC,PINP,PINP_IDX;const_input
      001D08 1D 00                    1 	.word LINK 
                           001D0A     2 	LINK=.
      001D0A                          3 PINP:
      001D0A 44                       4 	.byte 4+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001D0B 50 49 4E 50              5 	.ascii "PINP"
      001D0F 00 6C                    6 	.word PINP_IDX 
      001D11                       5033 	_dict_entry,4+F_IFUNC,PEEK,PEEK_IDX;peek 
      001D11 1D 0A                    1 	.word LINK 
                           001D13     2 	LINK=.
      001D13                          3 PEEK:
      001D13 44                       4 	.byte 4+F_IFUNC 	
      001D14 50 45 45 4B              5 	.ascii "PEEK"
      001D18 00 6A                    6 	.word PEEK_IDX 
      001D1A                       5034 	_dict_entry,5,PAUSE,PAUSE_IDX;pause 
      001D1A 1D 13                    1 	.word LINK 
                           001D1C     2 	LINK=.
      001D1C                          3 PAUSE:
      001D1C 05                       4 	.byte 5 	
      001D1D 50 41 55 53 45           5 	.ascii "PAUSE"
      001D22 00 66                    6 	.word PAUSE_IDX 
      001D24                       5035 	_dict_entry,3+F_IFUNC,PAD,PAD_IDX;pad_ref 
      001D24 1D 1C                    1 	.word LINK 
                           001D26     2 	LINK=.
      001D26                          3 PAD:
      001D26 43                       4 	.byte 3+F_IFUNC 	
      001D27 50 41 44                 5 	.ascii "PAD"
      001D2A 00 64                    6 	.word PAD_IDX 
      001D2C                       5036 	_dict_entry,2+F_IFUNC,OR,OR_IDX;bit_or
      001D2C 1D 26                    1 	.word LINK 
                           001D2E     2 	LINK=.
      001D2E                          3 OR:
      001D2E 42                       4 	.byte 2+F_IFUNC 	
      001D2F 4F 52                    5 	.ascii "OR"
      001D31 00 62                    6 	.word OR_IDX 
      001D33                       5037 	_dict_entry,3+F_IFUNC,ODR,ODR_IDX;const_odr 
      001D33 1D 2E                    1 	.word LINK 
                           001D35     2 	LINK=.
      001D35                          3 ODR:
      001D35 43                       4 	.byte 3+F_IFUNC 	
      001D36 4F 44 52                 5 	.ascii "ODR"
      001D39 00 60                    6 	.word ODR_IDX 
      001D3B                       5038 	_dict_entry,3+F_IFUNC,NOT,NOT_IDX;func_not 
      001D3B 1D 35                    1 	.word LINK 
                           001D3D     2 	LINK=.
      001D3D                          3 NOT:
      001D3D 43                       4 	.byte 3+F_IFUNC 	
      001D3E 4E 4F 54                 5 	.ascii "NOT"
      001D41 00 5E                    6 	.word NOT_IDX 
      001D43                       5039 	_dict_entry,4,NEXT,NEXT_IDX;next 
      001D43 1D 3D                    1 	.word LINK 
                           001D45     2 	LINK=.
      001D45                          3 NEXT:
      001D45 04                       4 	.byte 4 	
      001D46 4E 45 58 54              5 	.ascii "NEXT"
      001D4A 00 5A                    6 	.word NEXT_IDX 
      001D4C                       5040 	_dict_entry,3,NEW,NEW_IDX;new
      001D4C 1D 45                    1 	.word LINK 
                           001D4E     2 	LINK=.
      001D4E                          3 NEW:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001D4E 03                       4 	.byte 3 	
      001D4F 4E 45 57                 5 	.ascii "NEW"
      001D52 00 5C                    6 	.word NEW_IDX 
      001D54                       5041 	_dict_entry,6+F_IFUNC,MULDIV,MULDIV_IDX;muldiv 
      001D54 1D 4E                    1 	.word LINK 
                           001D56     2 	LINK=.
      001D56                          3 MULDIV:
      001D56 46                       4 	.byte 6+F_IFUNC 	
      001D57 4D 55 4C 44 49 56        5 	.ascii "MULDIV"
      001D5D 00 58                    6 	.word MULDIV_IDX 
      001D5F                       5042 	_dict_entry,6+F_IFUNC,LSHIFT,LSHIFT_IDX;lshift
      001D5F 1D 56                    1 	.word LINK 
                           001D61     2 	LINK=.
      001D61                          3 LSHIFT:
      001D61 46                       4 	.byte 6+F_IFUNC 	
      001D62 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      001D68 00 56                    6 	.word LSHIFT_IDX 
      001D6A                       5043 	_dict_entry,3+F_IFUNC,LOG,LOG_IDX;log2 
      001D6A 1D 61                    1 	.word LINK 
                           001D6C     2 	LINK=.
      001D6C                          3 LOG:
      001D6C 43                       4 	.byte 3+F_IFUNC 	
      001D6D 4C 4F 47                 5 	.ascii "LOG"
      001D70 00 54                    6 	.word LOG_IDX 
      001D72                       5044 	_dict_entry 4,LIST,LIST_IDX;list
      001D72 1D 6C                    1 	.word LINK 
                           001D74     2 	LINK=.
      001D74                          3 LIST:
      001D74 04                       4 	.byte 4 	
      001D75 4C 49 53 54              5 	.ascii "LIST"
      001D79 00 52                    6 	.word LIST_IDX 
      001D7B                       5045 	_dict_entry 3,LET,LET_IDX;let 
      001D7B 1D 74                    1 	.word LINK 
                           001D7D     2 	LINK=.
      001D7D                          3 LET:
      001D7D 03                       4 	.byte 3 	
      001D7E 4C 45 54                 5 	.ascii "LET"
      001D81 00 50                    6 	.word LET_IDX 
      001D83                       5046 	_dict_entry,3+F_IFUNC,KEY,KEY_IDX;key 
      001D83 1D 7D                    1 	.word LINK 
                           001D85     2 	LINK=.
      001D85                          3 KEY:
      001D85 43                       4 	.byte 3+F_IFUNC 	
      001D86 4B 45 59                 5 	.ascii "KEY"
      001D89 00 4E                    6 	.word KEY_IDX 
      001D8B                       5047 	_dict_entry,7,IWDGREF,IWDGREF_IDX;refresh_iwdg
      001D8B 1D 85                    1 	.word LINK 
                           001D8D     2 	LINK=.
      001D8D                          3 IWDGREF:
      001D8D 07                       4 	.byte 7 	
      001D8E 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      001D95 00 4C                    6 	.word IWDGREF_IDX 
      001D97                       5048 	_dict_entry,6,IWDGEN,IWDGEN_IDX;enable_iwdg
      001D97 1D 8D                    1 	.word LINK 
                           001D99     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001D99                          3 IWDGEN:
      001D99 06                       4 	.byte 6 	
      001D9A 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      001DA0 00 4A                    6 	.word IWDGEN_IDX 
      001DA2                       5049 	_dict_entry,6+F_IFUNC,INVERT,INVERT_IDX;invert 
      001DA2 1D 99                    1 	.word LINK 
                           001DA4     2 	LINK=.
      001DA4                          3 INVERT:
      001DA4 46                       4 	.byte 6+F_IFUNC 	
      001DA5 49 4E 56 45 52 54        5 	.ascii "INVERT"
      001DAB 00 48                    6 	.word INVERT_IDX 
      001DAD                       5050 	_dict_entry,5,INPUT,INPUT_IDX;input_var  
      001DAD 1D A4                    1 	.word LINK 
                           001DAF     2 	LINK=.
      001DAF                          3 INPUT:
      001DAF 05                       4 	.byte 5 	
      001DB0 49 4E 50 55 54           5 	.ascii "INPUT"
      001DB5 00 46                    6 	.word INPUT_IDX 
      001DB7                       5051 	_dict_entry,2,IF,IF_IDX;if 
      001DB7 1D AF                    1 	.word LINK 
                           001DB9     2 	LINK=.
      001DB9                          3 IF:
      001DB9 02                       4 	.byte 2 	
      001DBA 49 46                    5 	.ascii "IF"
      001DBC 00 44                    6 	.word IF_IDX 
      001DBE                       5052 	_dict_entry,3+F_IFUNC,IDR,IDR_IDX;const_idr 
      001DBE 1D B9                    1 	.word LINK 
                           001DC0     2 	LINK=.
      001DC0                          3 IDR:
      001DC0 43                       4 	.byte 3+F_IFUNC 	
      001DC1 49 44 52                 5 	.ascii "IDR"
      001DC4 00 42                    6 	.word IDR_IDX 
      001DC6                       5053 	_dict_entry,3,HEX,HEX_IDX;hex_base
      001DC6 1D C0                    1 	.word LINK 
                           001DC8     2 	LINK=.
      001DC8                          3 HEX:
      001DC8 03                       4 	.byte 3 	
      001DC9 48 45 58                 5 	.ascii "HEX"
      001DCC 00 40                    6 	.word HEX_IDX 
      001DCE                       5054 	_dict_entry,4+F_IFUNC,GPIO,GPIO_IDX;gpio 
      001DCE 1D C8                    1 	.word LINK 
                           001DD0     2 	LINK=.
      001DD0                          3 GPIO:
      001DD0 44                       4 	.byte 4+F_IFUNC 	
      001DD1 47 50 49 4F              5 	.ascii "GPIO"
      001DD5 00 3E                    6 	.word GPIO_IDX 
      001DD7                       5055 	_dict_entry,4,GOTO,GOTO_IDX;goto 
      001DD7 1D D0                    1 	.word LINK 
                           001DD9     2 	LINK=.
      001DD9                          3 GOTO:
      001DD9 04                       4 	.byte 4 	
      001DDA 47 4F 54 4F              5 	.ascii "GOTO"
      001DDE 00 3C                    6 	.word GOTO_IDX 
      001DE0                       5056 	_dict_entry,5,GOSUB,GOSUB_IDX;gosub 
      001DE0 1D D9                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                           001DE2     2 	LINK=.
      001DE2                          3 GOSUB:
      001DE2 05                       4 	.byte 5 	
      001DE3 47 4F 53 55 42           5 	.ascii "GOSUB"
      001DE8 00 3A                    6 	.word GOSUB_IDX 
      001DEA                       5057 	_dict_entry,4+F_IFUNC,FREE,FREE_IDX;free
      001DEA 1D E2                    1 	.word LINK 
                           001DEC     2 	LINK=.
      001DEC                          3 FREE:
      001DEC 44                       4 	.byte 4+F_IFUNC 	
      001DED 46 52 45 45              5 	.ascii "FREE"
      001DF1 00 9A                    6 	.word FREE_IDX 
      001DF3                       5058 	_dict_entry,3,FOR,FOR_IDX;for 
      001DF3 1D EC                    1 	.word LINK 
                           001DF5     2 	LINK=.
      001DF5                          3 FOR:
      001DF5 03                       4 	.byte 3 	
      001DF6 46 4F 52                 5 	.ascii "FOR"
      001DF9 00 38                    6 	.word FOR_IDX 
      001DFB                       5059 	_dict_entry,8,FLASHAPP,FLASHAPP_IDX ;flash_app 
      001DFB 1D F5                    1 	.word LINK 
                           001DFD     2 	LINK=.
      001DFD                          3 FLASHAPP:
      001DFD 08                       4 	.byte 8 	
      001DFE 46 4C 41 53 48 41 50     5 	.ascii "FLASHAPP"
             50
      001E06 00 36                    6 	.word FLASHAPP_IDX 
      001E08                       5060 	_dict_entry,4,FCPU,FCPU_IDX;fcpu 
      001E08 1D FD                    1 	.word LINK 
                           001E0A     2 	LINK=.
      001E0A                          3 FCPU:
      001E0A 04                       4 	.byte 4 	
      001E0B 46 43 50 55              5 	.ascii "FCPU"
      001E0F 00 34                    6 	.word FCPU_IDX 
      001E11                       5061 	_dict_entry,5,ERASE,ERASE_IDX; erase 
      001E11 1E 0A                    1 	.word LINK 
                           001E13     2 	LINK=.
      001E13                          3 ERASE:
      001E13 05                       4 	.byte 5 	
      001E14 45 52 41 53 45           5 	.ascii "ERASE"
      001E19 00 32                    6 	.word ERASE_IDX 
      001E1B                       5062 	_dict_entry,3,END,END_IDX;cmd_end  
      001E1B 1E 13                    1 	.word LINK 
                           001E1D     2 	LINK=.
      001E1D                          3 END:
      001E1D 03                       4 	.byte 3 	
      001E1E 45 4E 44                 5 	.ascii "END"
      001E21 00 30                    6 	.word END_IDX 
      001E23                       5063 	_dict_entry,6+F_IFUNC,EEPROM,EEPROM_IDX;const_eeprom_base   
      001E23 1E 1D                    1 	.word LINK 
                           001E25     2 	LINK=.
      001E25                          3 EEPROM:
      001E25 46                       4 	.byte 6+F_IFUNC 	
      001E26 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      001E2C 00 2E                    6 	.word EEPROM_IDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001E2E                       5064 	_dict_entry,4,EDIT,EDIT_IDX ; edit 
      001E2E 1E 25                    1 	.word LINK 
                           001E30     2 	LINK=.
      001E30                          3 EDIT:
      001E30 04                       4 	.byte 4 	
      001E31 45 44 49 54              5 	.ascii "EDIT"
      001E35 00 2C                    6 	.word EDIT_IDX 
      001E37                       5065 	_dict_entry,6+F_CMD,DWRITE,DWRITE_IDX;digital_write
      001E37 1E 30                    1 	.word LINK 
                           001E39     2 	LINK=.
      001E39                          3 DWRITE:
      001E39 06                       4 	.byte 6+F_CMD 	
      001E3A 44 57 52 49 54 45        5 	.ascii "DWRITE"
      001E40 00 2A                    6 	.word DWRITE_IDX 
      001E42                       5066 	_dict_entry,5+F_IFUNC,DREAD,DREAD_IDX;digital_read
      001E42 1E 39                    1 	.word LINK 
                           001E44     2 	LINK=.
      001E44                          3 DREAD:
      001E44 45                       4 	.byte 5+F_IFUNC 	
      001E45 44 52 45 41 44           5 	.ascii "DREAD"
      001E4A 00 28                    6 	.word DREAD_IDX 
      001E4C                       5067 	_dict_entry,2,DO,DO_IDX;do_loop
      001E4C 1E 44                    1 	.word LINK 
                           001E4E     2 	LINK=.
      001E4E                          3 DO:
      001E4E 02                       4 	.byte 2 	
      001E4F 44 4F                    5 	.ascii "DO"
      001E51 00 26                    6 	.word DO_IDX 
      001E53                       5068 	_dict_entry,3,DEC,DEC_IDX;dec_base
      001E53 1E 4E                    1 	.word LINK 
                           001E55     2 	LINK=.
      001E55                          3 DEC:
      001E55 03                       4 	.byte 3 	
      001E56 44 45 43                 5 	.ascii "DEC"
      001E59 00 24                    6 	.word DEC_IDX 
      001E5B                       5069 	_dict_entry,3+F_IFUNC,DDR,DDR_IDX;const_ddr 
      001E5B 1E 55                    1 	.word LINK 
                           001E5D     2 	LINK=.
      001E5D                          3 DDR:
      001E5D 43                       4 	.byte 3+F_IFUNC 	
      001E5E 44 44 52                 5 	.ascii "DDR"
      001E61 00 22                    6 	.word DDR_IDX 
      001E63                       5070 	_dict_entry,6,DATALN,DATALN_IDX;data_line  
      001E63 1E 5D                    1 	.word LINK 
                           001E65     2 	LINK=.
      001E65                          3 DATALN:
      001E65 06                       4 	.byte 6 	
      001E66 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      001E6C 00 20                    6 	.word DATALN_IDX 
      001E6E                       5071 	_dict_entry,4,DATA,DATA_IDX;data  
      001E6E 1E 65                    1 	.word LINK 
                           001E70     2 	LINK=.
      001E70                          3 DATA:
      001E70 04                       4 	.byte 4 	
      001E71 44 41 54 41              5 	.ascii "DATA"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001E75 00 1E                    6 	.word DATA_IDX 
      001E77                       5072 	_dict_entry,3+F_IFUNC,CRL,CRL_IDX;const_cr1 
      001E77 1E 70                    1 	.word LINK 
                           001E79     2 	LINK=.
      001E79                          3 CRL:
      001E79 43                       4 	.byte 3+F_IFUNC 	
      001E7A 43 52 4C                 5 	.ascii "CRL"
      001E7D 00 1C                    6 	.word CRL_IDX 
      001E7F                       5073 	_dict_entry,3+F_IFUNC,CRH,CRH_IDX;const_cr2 
      001E7F 1E 79                    1 	.word LINK 
                           001E81     2 	LINK=.
      001E81                          3 CRH:
      001E81 43                       4 	.byte 3+F_IFUNC 	
      001E82 43 52 48                 5 	.ascii "CRH"
      001E85 00 1A                    6 	.word CRH_IDX 
      001E87                       5074 	_dict_entry,4+F_CFUNC,CHAR,CHAR_IDX;char
      001E87 1E 81                    1 	.word LINK 
                           001E89     2 	LINK=.
      001E89                          3 CHAR:
      001E89 84                       4 	.byte 4+F_CFUNC 	
      001E8A 43 48 41 52              5 	.ascii "CHAR"
      001E8E 00 18                    6 	.word CHAR_IDX 
      001E90                       5075 	_dict_entry,3,BYE,BYE_IDX;bye 
      001E90 1E 89                    1 	.word LINK 
                           001E92     2 	LINK=.
      001E92                          3 BYE:
      001E92 03                       4 	.byte 3 	
      001E93 42 59 45                 5 	.ascii "BYE"
      001E96 00 16                    6 	.word BYE_IDX 
      001E98                       5076 	_dict_entry,5,BTOGL,BTOGL_IDX;bit_toggle
      001E98 1E 92                    1 	.word LINK 
                           001E9A     2 	LINK=.
      001E9A                          3 BTOGL:
      001E9A 05                       4 	.byte 5 	
      001E9B 42 54 4F 47 4C           5 	.ascii "BTOGL"
      001EA0 00 14                    6 	.word BTOGL_IDX 
      001EA2                       5077 	_dict_entry,5+F_IFUNC,BTEST,BTEST_IDX;bit_test 
      001EA2 1E 9A                    1 	.word LINK 
                           001EA4     2 	LINK=.
      001EA4                          3 BTEST:
      001EA4 45                       4 	.byte 5+F_IFUNC 	
      001EA5 42 54 45 53 54           5 	.ascii "BTEST"
      001EAA 00 12                    6 	.word BTEST_IDX 
      001EAC                       5078 	_dict_entry,4,BSET,BSET_IDX;bit_set 
      001EAC 1E A4                    1 	.word LINK 
                           001EAE     2 	LINK=.
      001EAE                          3 BSET:
      001EAE 04                       4 	.byte 4 	
      001EAF 42 53 45 54              5 	.ascii "BSET"
      001EB3 00 10                    6 	.word BSET_IDX 
      001EB5                       5079 	_dict_entry,4,BRES,BRES_IDX;bit_reset
      001EB5 1E AE                    1 	.word LINK 
                           001EB7     2 	LINK=.
      001EB7                          3 BRES:
      001EB7 04                       4 	.byte 4 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001EB8 42 52 45 53              5 	.ascii "BRES"
      001EBC 00 0E                    6 	.word BRES_IDX 
      001EBE                       5080 	_dict_entry,3+F_IFUNC,BIT,BIT_IDX;bitmask
      001EBE 1E B7                    1 	.word LINK 
                           001EC0     2 	LINK=.
      001EC0                          3 BIT:
      001EC0 43                       4 	.byte 3+F_IFUNC 	
      001EC1 42 49 54                 5 	.ascii "BIT"
      001EC4 00 0C                    6 	.word BIT_IDX 
      001EC6                       5081 	_dict_entry,3,AWU,AWU_IDX;awu 
      001EC6 1E C0                    1 	.word LINK 
                           001EC8     2 	LINK=.
      001EC8                          3 AWU:
      001EC8 03                       4 	.byte 3 	
      001EC9 41 57 55                 5 	.ascii "AWU"
      001ECC 00 0A                    6 	.word AWU_IDX 
      001ECE                       5082 	_dict_entry,3+F_IFUNC,ASC,ASC_IDX;ascii
      001ECE 1E C8                    1 	.word LINK 
                           001ED0     2 	LINK=.
      001ED0                          3 ASC:
      001ED0 43                       4 	.byte 3+F_IFUNC 	
      001ED1 41 53 43                 5 	.ascii "ASC"
      001ED4 00 08                    6 	.word ASC_IDX 
      001ED6                       5083 	_dict_entry,3+F_IFUNC,AND,AND_IDX;bit_and
      001ED6 1E D0                    1 	.word LINK 
                           001ED8     2 	LINK=.
      001ED8                          3 AND:
      001ED8 43                       4 	.byte 3+F_IFUNC 	
      001ED9 41 4E 44                 5 	.ascii "AND"
      001EDC 00 06                    6 	.word AND_IDX 
      001EDE                       5084 	_dict_entry,7+F_IFUNC,ADCREAD,ADCREAD_IDX;analog_read
      001EDE 1E D8                    1 	.word LINK 
                           001EE0     2 	LINK=.
      001EE0                          3 ADCREAD:
      001EE0 47                       4 	.byte 7+F_IFUNC 	
      001EE1 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      001EE8 00 04                    6 	.word ADCREAD_IDX 
      001EEA                       5085 	_dict_entry,5,ADCON,ADCON_IDX;power_adc 
      001EEA 1E E0                    1 	.word LINK 
                           001EEC     2 	LINK=.
      001EEC                          3 ADCON:
      001EEC 05                       4 	.byte 5 	
      001EED 41 44 43 4F 4E           5 	.ascii "ADCON"
      001EF2 00 02                    6 	.word ADCON_IDX 
      001EF4                       5086 kword_dict::
      001EF4                       5087 	_dict_entry,3+F_IFUNC,ABS,ABS_IDX ;abs
      001EF4 1E EC                    1 	.word LINK 
                           001EF6     2 	LINK=.
      001EF6                          3 ABS:
      001EF6 43                       4 	.byte 3+F_IFUNC 	
      001EF7 41 42 53                 5 	.ascii "ABS"
      001EFA 00 00                    6 	.word ABS_IDX 
                                   5088 
                                   5089 ;comands and fonctions address table 	
      001EFC                       5090 code_addr::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001EFC 16 9E 12 C7 13 03 16  5091 	.word abs,power_adc,analog_read,bit_and,ascii,awu,bitmask ; 0..7
             B2 15 8F 16 4F 19 00
      001F0A 10 52 10 42 10 73 10  5092 	.word bit_reset,bit_set,bit_test,bit_toggle,bye,char,const_cr2  ; 8..15
             63 16 28 15 7D 19 BA
      001F18 19 B4 19 D2 19 D8 19  5093 	.word const_cr1,data,data_line,const_ddr,dec_base,do_loop,digital_read,digital_write ;16..23 
             AE 0D C7 19 29 13 37
             13 67
      001F28 0E B7 19 CC 12 73 14  5094 	.word edit,const_eeprom_base,cmd_end,erase,fcpu,flash_app,for,gosub,goto,gpio ; 24..31 
             2F 17 2C 14 5C 10 CE
             11 D9 11 BE 15 CB
      001F3C 0D C2 19 A8 10 BA 0F  5095 	.word hex_base,const_idr,if,input_var,invert,enable_iwdg,refresh_iwdg,key ; 32..39 
             A7 19 1A 18 AA 18 E0
             15 B6
      001F4C 0D EF 0E 22 18 E5 16  5096 	.word let,list,log2,lshift,muldiv,next,new ; 40..47
             FA 0B 66 11 4E 13 EE
      001F5A 18 9D 19 A2 16 CA 1B  5097 	.word func_not,const_odr,bit_or,pad_ref,pause,pin_mode,peek,const_input ; 48..55
             66 16 3C 17 38 10 A9
             19 C6
      001F6A 10 9A 19 C0 0F 21 19  5098 	.word poke,const_output,print,const_porta,const_portb,const_portc,const_portd,const_porte ; 56..63
             6C 19 72 19 78 19 7E
             19 84
      001F7A 19 8A 19 90 19 96 19  5099 	.word const_portf,const_portg,const_porth,const_porti,qkey,read,cold_start,remark ; 64..71 
             9C 15 BE 1A 55 04 7E
             10 17
      001F8A 1A 06 11 F9 17 B4 17  5100 	.word restore,return, random,rshift,run,show,free ; 72..79
             13 12 17 0D 81 0D CC
      001F98 16 31 1B 47 1A AF 1B  5101 	.word sleep,spi_read,spi_enable,spi_select,spi_write,step,stop,get_ticks  ; 80..87
             4F 1B 27 11 27 13 A2
             16 98
      001FA8 18 81 18 90 10 F7 12  5102 	.word set_timer,timeout,to,tone,ubound,uflash,until,usr ; 88..95
             83 0D E5 15 F5 19 3E
             16 0B
      001FB8 10 1D 18 1B 15 46 16  5103 	.word wait,words,write,bit_xor ; 96..99
             E2
      001FC0 00 00                 5104 	.word 0 
                                   5105 
                                   5106 
                                   5107 
                                   5108 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;------------------------------
                                     19 ; This file is for functions 
                                     20 ; interfacing with VT100 terminal
                                     21 ; emulator.
                                     22 ; except for getc and putc which
                                     23 ; are in TinyBasic.asm 
                                     24 ; exported functions:
                                     25 ;   puts 
                                     26 ;   readln 
                                     27 ;   spaces 
                                     28 ;------------------------------
                                     29 
                                     30     .module TERMINAL
                                     31 
                                     32 ;    .nlist
                                     33 ;	.include "inc/nucleo_8s208.inc"
                                     34 ;	.include "inc/stm8s208.inc"
                                     35 ;	.include "inc/ascii.inc"
                                     36 ;	.include "inc/gen_macros.inc" 
                                     37 ;	.include "tbi_macros.inc" 
                                     38     .list 
                                     39 
                                     40 
                                     41     .area CODE 
                                     42 
                                     43 
                                     44 ;-----------------------------
                                     45 ;  constants replacing 
                                     46 ;  ANSI sequence received 
                                     47 ;  from terminal.
                                     48 ;  These are the ANSI sequences
                                     49 ;  accepted by function readln
                                     50 ;------------------------------
                           000080    51     ARROW_LEFT=128
                           000081    52     ARROW_RIGHT=129
                           000082    53     HOME=130
                           000083    54     KEY_END=131
                           000084    55     SUP=132 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                     56 
      001FC2 43 81 44 80 48 82 46    57 convert_table: .byte 'C',ARROW_RIGHT,'D',ARROW_LEFT,'H',HOME,'F',KEY_END,'3',SUP,0,0
             83 33 84 00 00
                                     58 
                                     59 ;--------------------------------
                                     60 ; receive ANSI ESC 
                                     61 ; sequence and convert it
                                     62 ; to a single character code 
                                     63 ; in range {128..255}
                                     64 ; This is called after receiving 
                                     65 ; ESC character. 
                                     66 ; ignored sequence return 0 
                                     67 ; output:
                                     68 ;   A    converted character 
                                     69 ;-------------------------------
      001FCE                         70 get_escape:
      001FCE CD 02 D1         [ 4]   71     call getc 
      001FD1 A1 5B            [ 1]   72     cp a,#'[ ; this character is expected after ESC 
      001FD3 27 02            [ 1]   73     jreq 1$
      001FD5 4F               [ 1]   74     clr a
      001FD6 81               [ 4]   75     ret
      001FD7 CD 02 D1         [ 4]   76 1$: call getc 
      001FDA AE 1F C2         [ 2]   77     ldw x,#convert_table
      001FDD                         78 2$:
      001FDD F1               [ 1]   79     cp a,(x)
      001FDE 27 08            [ 1]   80     jreq 4$
      001FE0 1C 00 02         [ 2]   81     addw x,#2
      001FE3 7D               [ 1]   82     tnz (x)
      001FE4 26 F7            [ 1]   83     jrne 2$
      001FE6 4F               [ 1]   84     clr a
      001FE7 81               [ 4]   85     ret 
      001FE8 5C               [ 1]   86 4$: incw x 
      001FE9 F6               [ 1]   87     ld a,(x)
      001FEA A1 84            [ 1]   88     cp a,#SUP
      001FEC 26 05            [ 1]   89     jrne 5$
      001FEE 88               [ 1]   90     push a 
      001FEF CD 02 D1         [ 4]   91     call getc
      001FF2 84               [ 1]   92     pop a 
      001FF3                         93 5$:
      001FF3 81               [ 4]   94     ret 
                                     95 
                                     96 
                                     97 ;-----------------------------
                                     98 ; send an ASCIZ string to UART1 
                                     99 ; input: 
                                    100 ;   x 		char * 
                                    101 ; output:
                                    102 ;   none 
                                    103 ;-------------------------------
      001FF4                        104 puts::
      001FF4 F6               [ 1]  105     ld a,(x)
      001FF5 27 06            [ 1]  106 	jreq 1$
      001FF7 CD 02 C1         [ 4]  107 	call putc 
      001FFA 5C               [ 1]  108 	incw x 
      001FFB 20 F7            [ 2]  109 	jra puts 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001FFD 81               [ 4]  110 1$:	ret 
                                    111 
                                    112 
                                    113 ;---------------------------
                                    114 ; delete character at left 
                                    115 ; of cursor on terminal 
                                    116 ; input:
                                    117 ;   none 
                                    118 ; output:
                                    119 ;	none 
                                    120 ;---------------------------
      001FFE                        121 bksp:
      001FFE A6 08            [ 1]  122 	ld a,#BS 
      002000 CD 02 C1         [ 4]  123 	call putc 
      002003 A6 20            [ 1]  124 	ld a,#SPACE 
      002005 CD 02 C1         [ 4]  125 	call putc 
      002008 A6 08            [ 1]  126 	ld a,#BS 
      00200A CD 02 C1         [ 4]  127 	call putc 
      00200D 81               [ 4]  128 	ret 
                                    129 ;---------------------------
                                    130 ; delete n character left of cursor 
                                    131 ; at terminal.
                                    132 ; input: 
                                    133 ;   A   number of characters to delete.
                                    134 ; output:
                                    135 ;    none 
                                    136 ;--------------------------	
      00200E                        137 delete_nchar:
      00200E 88               [ 1]  138 	push a 
      00200F 0D 01            [ 1]  139 0$:	tnz (1,sp)
      002011 27 07            [ 1]  140 	jreq 1$
      002013 CD 1F FE         [ 4]  141 	call bksp 
      002016 0A 01            [ 1]  142 	dec (1,sp)
      002018 20 F5            [ 2]  143 	jra 0$
      00201A 84               [ 1]  144 1$:	pop a 
      00201B 81               [ 4]  145 	ret
                                    146 
                                    147 ;--------------------------
                                    148 ; send ANSI escape sequence
                                    149 ; ANSI: ESC[
                                    150 ; note: ESC is ASCII 27
                                    151 ;       [   is ASCII 91  
                                    152 ;-------------------------- 
      00201C                        153 send_escape:
      00201C A6 1B            [ 1]  154 	ld a,#ESC 
      00201E CD 02 C1         [ 4]  155 	call putc 
      002021 A6 5B            [ 1]  156 	ld a,#'[
      002023 CD 02 C1         [ 4]  157 	call putc 
      002026 81               [ 4]  158 	ret 
                                    159 
                                    160 ;---------------------
                                    161 ;send ANSI parameter value
                                    162 ; ANSI parameter values are 
                                    163 ; sent as ASCII charater 
                                    164 ; not as binary number.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



                                    165 ; this routine 
                                    166 ; convert binary number to 
                                    167 ; ASCII string and send it.
                                    168 ; expected range {0..99}
                                    169 ; input: 
                                    170 ; 	A {0..99} 
                                    171 ; output:
                                    172 ;   none 
                                    173 ;---------------------
      002027                        174 send_parameter:
      002027 89               [ 2]  175 	pushw x 
      002028 5F               [ 1]  176 	clrw x 
      002029 97               [ 1]  177 	ld xl,a 
      00202A A6 0A            [ 1]  178 	ld a,#10 
      00202C 62               [ 2]  179 	div x,a 
      00202D 95               [ 1]  180 	ld xh,a 
      00202E 9F               [ 1]  181 	ld a,xl
      00202F 4D               [ 1]  182     tnz a 
      002030 27 0B            [ 1]  183     jreq 2$
      002032 A1 09            [ 1]  184 	cp a,#9 
      002034 23 02            [ 2]  185 	jrule 1$
      002036 A6 39            [ 1]  186 	ld a,#'9
      002038                        187 1$:
      002038 AB 30            [ 1]  188 	add a,#'0 
      00203A CD 02 C1         [ 4]  189 	call putc
      00203D 9E               [ 1]  190 2$:	ld a,xh 
      00203E AB 30            [ 1]  191 	add a,#'0
      002040 CD 02 C1         [ 4]  192 	call putc 
      002043 85               [ 2]  193 	popw x 
      002044 81               [ 4]  194 	ret 
                                    195 
                                    196 ;--------------------------
                                    197 ; move cursor left n character
                                    198 ; ANSI: ESC[PnD 
                                    199 ; 'Pn' est a numerical parameter
                                    200 ; specifying number of characters 
                                    201 ; displacement.
                                    202 ; input:
                                    203 ;   A     character count
                                    204 ; output:
                                    205 ;   none
                                    206 ;--------------------------
      002045                        207 move_left:
      002045 88               [ 1]  208 	push a 
      002046 CD 20 1C         [ 4]  209 	call send_escape
      002049 84               [ 1]  210     pop a
      00204A CD 20 27         [ 4]  211 	call send_parameter 
      00204D A6 44            [ 1]  212 	ld a,#'D 
      00204F CD 02 C1         [ 4]  213 	call putc 
      002052 81               [ 4]  214 	ret	
                                    215 
                                    216 
                                    217 ;--------------------------
                                    218 ; move cursor right n character 
                                    219 ; ANSI: ESC[PnC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    220 ; input:
                                    221 ;   A     character count
                                    222 ; output:
                                    223 ;   none
                                    224 ;--------------------------
      002053                        225 move_right:
      002053 88               [ 1]  226 	push a 
      002054 CD 20 1C         [ 4]  227 	call send_escape
      002057 84               [ 1]  228     pop a
      002058 CD 20 27         [ 4]  229 	call send_parameter 
      00205B A6 43            [ 1]  230 	ld a,#'C 
      00205D CD 02 C1         [ 4]  231 	call putc 
      002060 81               [ 4]  232 	ret 
                                    233 
                                    234 
                                    235 ;--------------------------
                                    236 ; print n spaces on terminal
                                    237 ; input:
                                    238 ;  X 		number of spaces 
                                    239 ; output:
                                    240 ;	none 
                                    241 ;---------------------------
      002061                        242 spaces::
      002061 A6 20            [ 1]  243 	ld a,#SPACE 
      002063 5D               [ 2]  244 1$:	tnzw x
      002064 27 06            [ 1]  245 	jreq 9$
      002066 CD 02 C1         [ 4]  246 	call putc 
      002069 5A               [ 2]  247 	decw x
      00206A 20 F7            [ 2]  248 	jra 1$
      00206C                        249 9$: 
      00206C 81               [ 4]  250 	ret 
                                    251 
                                    252 ;--------------------------
                                    253 ; insert character in text 
                                    254 ; line 
                                    255 ; input:
                                    256 ;   A       character to insert 
                                    257 ;   xl      line length
                                    258 ;   xh      insert position 
                                    259 ;   Y       line pointer 
                                    260 ; output:
                                    261 ;   Y       updated Y 
                                    262 ;-------------------------
                           000001   263 	IPOS=1
                           000002   264 	KCHAR=2 
                           000003   265     LLEN=3 
                           000003   266 	VSISE=3 
      00206D                        267 insert_char: 
      00206D                        268 	_vars VSIZE 
      00206D 52 06            [ 2]    1     sub sp,#VSIZE 
      00206F 6B 02            [ 1]  269     ld (KCHAR,sp),a 
      002071 9E               [ 1]  270     ld a,xh 
      002072 6B 01            [ 1]  271 	ld (IPOS,sp),a
      002074 9F               [ 1]  272     ld a,xl 
      002075 6B 03            [ 1]  273     ld (LLEN,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002077 93               [ 1]  274     ldw x,y
      002078 5C               [ 1]  275     incw x 
      002079 7B 03            [ 1]  276     ld a,(LLEN,sp)
      00207B 10 01            [ 1]  277     sub a,(IPOS,sp)
      00207D 4C               [ 1]  278     inc a 
      00207E C7 00 0D         [ 1]  279     ld acc8,a 
      002081 72 5F 00 0C      [ 1]  280     clr acc16
      002085 CD 03 C5         [ 4]  281     call move
      002088 90 AE 16 90      [ 2]  282     ldw y,#tib 
      00208C 7B 01            [ 1]  283     ld a,(IPOS,sp)
      00208E C7 00 0D         [ 1]  284     ld acc8,a 
      002091 72 B9 00 0C      [ 2]  285     addw y,acc16 
      002095 7B 02            [ 1]  286     ld a,(KCHAR,sp)
      002097 90 F7            [ 1]  287     ld (y),a
      002099 90 5C            [ 1]  288     incw y  
      00209B 7B 01            [ 1]  289     ld a,(IPOS,sp)
      00209D CD 20 45         [ 4]  290     call move_left
      0020A0 AE 16 90         [ 2]  291     ldw x,#tib 
      0020A3 CD 1F F4         [ 4]  292     call puts 
      0020A6 7B 03            [ 1]  293     ld a,(LLEN,sp)
      0020A8 10 01            [ 1]  294     sub a,(IPOS,sp) 
      0020AA CD 20 45         [ 4]  295     call move_left 
      0020AD                        296 	_drop VSIZE 
      0020AD 5B 06            [ 2]    1     addw sp,#VSIZE 
      0020AF 81               [ 4]  297 	ret 
                                    298 
                                    299 
                                    300 ;--------------------------
                                    301 ; delete character under cursor
                                    302 ; input:
                                    303 ;   A       line length   
                                    304 ;   xl      delete position
                                    305 ;   Y       line pointer 
                                    306 ;-------------------------
                           000001   307 	CPOS=1
                           000002   308 	LLEN=2
                           000002   309 	VSIZE=2
      0020B0                        310 delete_under:
      0020B0                        311 	_vars VSIZE 
      0020B0 52 02            [ 2]    1     sub sp,#VSIZE 
      0020B2 6B 02            [ 1]  312     ld (LLEN,sp),a 
      0020B4 9F               [ 1]  313     ld a,xl 
      0020B5 6B 01            [ 1]  314     ld (CPOS,sp),a 
      0020B7 93               [ 1]  315     ldw x,y ; move destination
      0020B8 90 5C            [ 1]  316     incw y  ; move source 
      0020BA 7B 02            [ 1]  317     ld a,(LLEN,sp)
      0020BC 10 01            [ 1]  318     sub a,(CPOS,sp)
      0020BE 4C               [ 1]  319     inc a ; move including zero at end.
      0020BF C7 00 0D         [ 1]  320     ld acc8,a 
      0020C2 72 5F 00 0C      [ 1]  321     clr acc16 
      0020C6 CD 03 C5         [ 4]  322 	call move 
      0020C9 90 AE 16 90      [ 2]  323     ldw y,#tib 
      0020CD 7B 01            [ 1]  324     ld a,(CPOS,sp)
      0020CF C7 00 0D         [ 1]  325     ld acc8,a 
      0020D2 72 B9 00 0C      [ 2]  326     addw y,acc16 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      0020D6 93               [ 1]  327     ldw x,y 
      0020D7 CD 1F F4         [ 4]  328     call puts 
      0020DA A6 20            [ 1]  329     ld a,#SPACE  
      0020DC CD 02 C1         [ 4]  330     call putc
      0020DF 7B 02            [ 1]  331     ld a,(LLEN,sp)
      0020E1 10 01            [ 1]  332     sub a,(CPOS,sp)
      0020E3 CD 20 45         [ 4]  333     call move_left 
      0020E6 0A 02            [ 1]  334     dec (LLEN,sp)
      0020E8                        335 	_drop VSIZE 
      0020E8 5B 02            [ 2]    1     addw sp,#VSIZE 
      0020EA 81               [ 4]  336 	ret 
                                    337 
                                    338 ;-----------------------------
                                    339 ; send ANSI sequence to delete
                                    340 ; whole line. Cursor position
                                    341 ; is not updated.
                                    342 ; ANSI: ESC[2K
                                    343 ; input:
                                    344 ;   none
                                    345 ; output:
                                    346 ;   none 
                                    347 ;-----------------------------
      0020EB                        348 delete_line:
      0020EB CD 20 1C         [ 4]  349     call send_escape
      0020EE A6 32            [ 1]  350 	ld a,#'2
      0020F0 CD 02 C1         [ 4]  351 	call putc 
      0020F3 A6 4B            [ 1]  352 	ld a,#'K 
      0020F5 CD 02 C1         [ 4]  353 	call putc 
      0020F8 81               [ 4]  354 	ret 
                                    355 
                                    356 
                                    357 
                                    358 ;------------------------------------
                                    359 ; read a line of text from terminal
                                    360 ;  touches de contrôle
                                    361 ;    BS   efface caractère à gauche 
                                    362 ;    ln+CTRL_E  edit ligne# 'ln' 
                                    363 ;    CTRL_R  répète dernière ligne saisie
                                    364 ;    CTRL_D  supprime ligne 
                                    365 ;    HOME  va au début de la ligne 
                                    366 ;    KEY_END  va à la fin de la ligne 
                                    367 ;    ARROW_LEFT  un caractère vers la gauche 
                                    368 ;    ARROW_RIGHT  un caractère vers la droite 
                                    369 ;    CTRL_O  commute entre insert/overwrite
                                    370 ; input:
                                    371 ;	none
                                    372 ; local variable on stack:
                                    373 ;	LL  line length
                                    374 ;   RXCHAR last received character 
                                    375 ; output:
                                    376 ;   text in tib  buffer
                                    377 ;   count  line length 
                                    378 ;------------------------------------
                                    379 	; local variables
                           000001   380 	LL_HB=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           000001   381 	RXCHAR = 1 ; last char received
                           000002   382 	LL = 2  ; accepted line length
                           000003   383 	CPOS=3  ; cursor position 
                           000004   384 	OVRWR=4 ; overwrite flag 
                           000004   385 	VSIZE=4 
      0020F9                        386 readln::
      0020F9                        387 	_vars VSIZE 
      0020F9 52 04            [ 2]    1     sub sp,#VSIZE 
      0020FB 5F               [ 1]  388 	clrw x 
      0020FC 1F 02            [ 2]  389 	ldw (LL,sp),x 
      0020FE 1F 03            [ 2]  390 	ldw (CPOS,sp),x 
      002100 03 04            [ 1]  391 	cpl (OVRWR,sp) ; default to overwrite mode 
      002102 90 AE 16 90      [ 2]  392  	ldw y,#tib ; input buffer
      002106                        393 readln_loop:
      002106 CD 02 D1         [ 4]  394 	call getc
      002109 6B 01            [ 1]  395 	ld (RXCHAR,sp),a
      00210B A1 1B            [ 1]  396     cp a,#ESC 
      00210D 26 05            [ 1]  397     jrne 0$
      00210F CD 1F CE         [ 4]  398     call get_escape 
      002112 6B 01            [ 1]  399     ld (RXCHAR,sp),a 
      002114 A1 0D            [ 1]  400 0$:	cp a,#CR
      002116 26 03            [ 1]  401 	jrne 1$
      002118 CC 22 A2         [ 2]  402 	jp readln_quit
      00211B A1 0A            [ 1]  403 1$:	cp a,#LF 
      00211D 26 03            [ 1]  404 	jrne 2$ 
      00211F CC 22 A2         [ 2]  405 	jp readln_quit
      002122                        406 2$:
      002122 A1 08            [ 1]  407 	cp a,#BS
      002124 26 12            [ 1]  408 	jrne 3$
                                    409 ; delete left 
      002126 0D 03            [ 1]  410     tnz (CPOS,sp)
      002128 27 DC            [ 1]  411     jreq readln_loop 
      00212A A6 01            [ 1]  412     ld a,#1 
      00212C CD 20 45         [ 4]  413     call move_left
      00212F 0A 03            [ 1]  414     dec (CPOS,sp)
      002131 90 5A            [ 2]  415     decw y 
      002133 7B 03            [ 1]  416     ld a,(CPOS,sp) 
      002135 CC 22 4E         [ 2]  417     jp 12$
      002138                        418 3$:
      002138 A1 04            [ 1]  419 	cp a,#CTRL_D
      00213A 26 1A            [ 1]  420 	jrne 4$
                                    421 ;delete line 
      00213C CD 20 EB         [ 4]  422 	call delete_line 
      00213F 7B 03            [ 1]  423     ld a,(CPOS,sp)
      002141 4C               [ 1]  424     inc a 
      002142 CD 20 45         [ 4]  425     call move_left 
      002145 A6 3E            [ 1]  426 	ld a,#'> 
      002147 CD 02 C1         [ 4]  427 	call putc 
      00214A 90 AE 16 90      [ 2]  428 	ldw y,#tib
      00214E 90 7F            [ 1]  429 	clr (y)
      002150 0F 02            [ 1]  430 	clr (LL,sp)
      002152 0F 03            [ 1]  431 	clr (CPOS,sp)
      002154 20 B0            [ 2]  432 	jra readln_loop
      002156                        433 4$:
      002156 A1 12            [ 1]  434 	cp a,#CTRL_R 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      002158 26 21            [ 1]  435 	jrne 5$
                                    436 ;reprint 
      00215A 0D 02            [ 1]  437 	tnz (LL,sp)
      00215C 26 A8            [ 1]  438 	jrne readln_loop
      00215E AE 16 90         [ 2]  439 	ldw x,#tib 
      002161 CD 03 9B         [ 4]  440 	call strlen 
      002164 90 AE 16 90      [ 2]  441 	ldw y,#tib 
      002168 27 9C            [ 1]  442 	jreq readln_loop
      00216A 6B 02            [ 1]  443 	ld (LL,sp),a 
      00216C 6B 03            [ 1]  444     ld (CPOS,sp),a
      00216E AE 16 90         [ 2]  445 	ldw x,#tib 
      002171 CD 1F F4         [ 4]  446 	call puts
      002174 0F 01            [ 1]  447 	clr (LL_HB,sp)
      002176 72 F9 01         [ 2]  448 	addw y,(LL_HB,sp)
      002179 20 8B            [ 2]  449 	jra readln_loop 
      00217B                        450 5$:
      00217B A1 05            [ 1]  451 	cp a,#CTRL_E 
      00217D 26 49            [ 1]  452 	jrne 6$
                                    453 ;edit line number 
      00217F AE 16 90         [ 2]  454 	ldw x,#tib 
      002182 CD 09 9B         [ 4]  455 	call atoi24
      002185 CE 00 0C         [ 2]  456 	ldw x,acc16
      002188 CD 22 DC         [ 4]  457 	call search_lineno
      00218B 5D               [ 2]  458 	tnzw x 
      00218C 26 0B            [ 1]  459 	jrne 51$
      00218E 0F 02            [ 1]  460 	clr (LL,sp)
      002190 90 AE 16 90      [ 2]  461 	ldw y,#tib
      002194 90 7F            [ 1]  462     clr (y) 	
      002196 CC 22 A2         [ 2]  463 	jp readln_quit  
      002199                        464 51$:
      002199 CF 00 04         [ 2]  465 	ldw basicptr,x
      00219C E6 02            [ 1]  466 	ld a,(2,x)
      00219E C7 00 03         [ 1]  467 	ld count,a 
      0021A1 90 AE 16 90      [ 2]  468 	ldw y,#tib 
      0021A5 CD 27 ED         [ 4]  469 	call decompile 
      0021A8 0F 01            [ 1]  470 	clr (LL_HB,sp)
      0021AA A6 0D            [ 1]  471 	ld a,#CR 
      0021AC CD 02 C1         [ 4]  472 	call putc 
      0021AF A6 3E            [ 1]  473 	ld a,#'>
      0021B1 CD 02 C1         [ 4]  474 	call putc
      0021B4 AE 16 90         [ 2]  475     ldw x,#tib  
      0021B7 CD 03 9B         [ 4]  476 	call strlen 
      0021BA 6B 02            [ 1]  477 	ld (LL,sp),a 
      0021BC CD 1F F4         [ 4]  478 	call puts 
      0021BF 90 93            [ 1]  479 	ldw y,x
      0021C1 7B 02            [ 1]  480     ld a,(LL,sp)
      0021C3 6B 03            [ 1]  481     ld (CPOS,sp),a  
      0021C5 CC 21 06         [ 2]  482 	jp readln_loop
      0021C8                        483 6$:
      0021C8 A1 81            [ 1]  484 	cp a,#ARROW_RIGHT
      0021CA 26 15            [ 1]  485    	jrne 7$ 
                                    486 ; right arrow
      0021CC 7B 03            [ 1]  487 	ld a,(CPOS,sp)
      0021CE 11 02            [ 1]  488     cp a,(LL,sp)
      0021D0 2B 03            [ 1]  489     jrmi 61$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      0021D2 CC 21 06         [ 2]  490     jp readln_loop 
      0021D5                        491 61$:
      0021D5 A6 01            [ 1]  492     ld a,#1 
      0021D7 CD 20 53         [ 4]  493 	call move_right 
      0021DA 0C 03            [ 1]  494 	inc (CPOS,sp)
      0021DC 90 5C            [ 1]  495     incw y 
      0021DE CC 21 06         [ 2]  496     jp readln_loop 
      0021E1 A1 80            [ 1]  497 7$: cp a,#ARROW_LEFT  
      0021E3 26 13            [ 1]  498 	jrne 8$
                                    499 ; left arrow 
      0021E5 0D 03            [ 1]  500 	tnz (CPOS,sp)
      0021E7 26 03            [ 1]  501 	jrne 71$
      0021E9 CC 21 06         [ 2]  502 	jp readln_loop
      0021EC                        503 71$:
      0021EC A6 01            [ 1]  504     ld a,#1 
      0021EE CD 20 45         [ 4]  505 	call move_left 
      0021F1 0A 03            [ 1]  506 	dec (CPOS,sp)
      0021F3 90 5A            [ 2]  507     decw y 
      0021F5 CC 21 06         [ 2]  508 	jp readln_loop 
      0021F8 A1 82            [ 1]  509 8$: cp a,#HOME  
      0021FA 26 0E            [ 1]  510 	jrne 9$
                                    511 ; HOME 
      0021FC 7B 03            [ 1]  512     ld a,(CPOS,sp)
      0021FE CD 20 45         [ 4]  513     call move_left 
      002201 0F 03            [ 1]  514 	clr (CPOS,sp)
      002203 90 AE 16 90      [ 2]  515     ldw y,#tib 
      002207 CC 21 06         [ 2]  516 	jp readln_loop  
      00220A A1 83            [ 1]  517 9$: cp a,#KEY_END  
      00220C 26 26            [ 1]  518 	jrne 10$
                                    519 ; KEY_END 
      00220E 7B 03            [ 1]  520 	ld a,(CPOS,sp)
      002210 11 02            [ 1]  521 	cp a,(LL,sp)
      002212 26 03            [ 1]  522 	jrne 91$
      002214 CC 21 06         [ 2]  523 	jp readln_loop 
      002217                        524 91$:
      002217 7B 02            [ 1]  525 	ld a,(LL,sp)
      002219 10 03            [ 1]  526 	sub a,(CPOS,sp)
      00221B CD 20 53         [ 4]  527 	call move_right 
      00221E 7B 02            [ 1]  528 	ld a,(LL,sp)
      002220 6B 03            [ 1]  529 	ld (CPOS,sp),a
      002222 90 AE 16 90      [ 2]  530     ldw y,#tib
      002226 72 5F 00 0C      [ 1]  531     clr acc16 
      00222A C7 00 0D         [ 1]  532     ld acc8,a 
      00222D 72 B9 00 0C      [ 2]  533     addw y,acc16  
      002231 CC 21 06         [ 2]  534 	jp readln_loop 
      002234 A1 0F            [ 1]  535 10$: cp a,#CTRL_O
      002236 26 0C            [ 1]  536 	jrne 11$ 
                                    537 ; toggle between insert/overwrite
      002238 03 04            [ 1]  538 	cpl (OVRWR,sp)
      00223A 90 89            [ 2]  539 	pushw y 
      00223C CD 12 7A         [ 4]  540 	call beep_1khz
      00223F 90 85            [ 2]  541 	popw y 
      002241 CC 21 06         [ 2]  542 	jp readln_loop 
      002244 A1 84            [ 1]  543 11$: cp a,#SUP 
      002246 26 11            [ 1]  544     jrne final_test 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



                                    545 ; del character under cursor 
      002248 7B 03            [ 1]  546     ld a,(CPOS,sp)
      00224A 11 02            [ 1]  547     cp a,(LL,sp)
      00224C 2A 08            [ 1]  548     jrpl 13$
      00224E                        549 12$:
      00224E 97               [ 1]  550     ld xl,a    ; cursor position 
      00224F 7B 02            [ 1]  551     ld a,(LL,sp)  ; line length
      002251 CD 20 B0         [ 4]  552     call delete_under
      002254 0A 02            [ 1]  553     dec (LLEN,sp)
      002256                        554 13$:
      002256 CC 21 06         [ 2]  555     jp readln_loop 
      002259                        556 final_test:
      002259 A1 20            [ 1]  557 	cp a,#SPACE
      00225B 2A 03            [ 1]  558 	jrpl accept_char
      00225D CC 21 06         [ 2]  559 	jp readln_loop
      002260                        560 accept_char:
      002260 A6 4F            [ 1]  561 	ld a,#TIB_SIZE-1
      002262 11 02            [ 1]  562 	cp a, (LL,sp)
      002264 2A 03            [ 1]  563 	jrpl 1$
      002266 CC 21 06         [ 2]  564 	jp readln_loop
      002269 0D 04            [ 1]  565 1$:	tnz (OVRWR,sp)
      00226B 26 18            [ 1]  566 	jrne overwrite
                                    567 ; insert mode 
      00226D 7B 03            [ 1]  568     ld a,(CPOS,sp)
      00226F 11 02            [ 1]  569     cp a,(LL,sp)
      002271 27 12            [ 1]  570     jreq overwrite
      002273 7B 02            [ 1]  571     ld a,(LL,sp)
      002275 97               [ 1]  572     ld xl,a 
      002276 7B 03            [ 1]  573     ld a,(CPOS,sp)
      002278 95               [ 1]  574     ld xh,a
      002279 7B 01            [ 1]  575     ld a,(RXCHAR,sp)
      00227B CD 20 6D         [ 4]  576     call insert_char
      00227E 0C 02            [ 1]  577     inc (LLEN,sp)
      002280 0C 03            [ 1]  578     inc (CPOS,sp)
      002282 CC 21 06         [ 2]  579     jp readln_loop 
      002285                        580 overwrite:
      002285 7B 01            [ 1]  581 	ld a,(RXCHAR,sp)
      002287 90 F7            [ 1]  582 	ld (y),a
      002289 90 5C            [ 1]  583     incw y
      00228B CD 02 C1         [ 4]  584     call putc 
      00228E 7B 03            [ 1]  585 	ld a,(CPOS,sp)
      002290 11 02            [ 1]  586 	cp a,(LL,sp)
      002292 2B 09            [ 1]  587 	jrmi 1$
      002294 90 7F            [ 1]  588 	clr (y)
      002296 0C 02            [ 1]  589 	inc (LL,sp)
      002298 0C 03            [ 1]  590     inc (CPOS,sp)
      00229A CC 21 06         [ 2]  591 	jp readln_loop 
      00229D                        592 1$:	
      00229D 0C 03            [ 1]  593 	inc (CPOS,sp)
      00229F CC 21 06         [ 2]  594 	jp readln_loop 
      0022A2                        595 readln_quit:
      0022A2 90 AE 16 90      [ 2]  596 	ldw y,#tib
      0022A6 0F 01            [ 1]  597     clr (LL_HB,sp) 
      0022A8 72 F9 01         [ 2]  598     addw y,(LL_HB,sp)
      0022AB 90 7F            [ 1]  599     clr (y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0022AD 7B 02            [ 1]  600 	ld a,(LL,sp)
      0022AF C7 00 03         [ 1]  601 	ld count,a 
      0022B2 A6 0D            [ 1]  602 	ld a,#CR
      0022B4 CD 02 C1         [ 4]  603 	call putc
      0022B7                        604 	_drop VSIZE 
      0022B7 5B 04            [ 2]    1     addw sp,#VSIZE 
      0022B9 81               [ 4]  605 	ret
                                    606 
                                    607 ;------------------------------
                                    608 ; print byte  in hexadecimal 
                                    609 ; on console
                                    610 ; input:
                                    611 ;    A		byte to print
                                    612 ;------------------------------
      0022BA                        613 print_hex::
      0022BA 88               [ 1]  614 	push a 
      0022BB 4E               [ 1]  615 	swap a 
      0022BC CD 22 D1         [ 4]  616 	call to_hex_char 
      0022BF CD 02 C1         [ 4]  617 	call putc 
      0022C2 7B 01            [ 1]  618     ld a,(1,sp) 
      0022C4 CD 22 D1         [ 4]  619 	call to_hex_char
      0022C7 CD 02 C1         [ 4]  620 	call putc
      0022CA A6 20            [ 1]  621 	ld a,#SPACE 
      0022CC CD 02 C1         [ 4]  622 	call putc 
      0022CF 84               [ 1]  623 	pop a 
      0022D0 81               [ 4]  624 	ret 
                                    625 
                                    626 ;----------------------------------
                                    627 ; convert to hexadecimal digit 
                                    628 ; input:
                                    629 ;   A       digit to convert 
                                    630 ; output:
                                    631 ;   A       hexdecimal character 
                                    632 ;----------------------------------
      0022D1                        633 to_hex_char::
      0022D1 A4 0F            [ 1]  634 	and a,#15 
      0022D3 A1 09            [ 1]  635 	cp a,#9 
      0022D5 23 02            [ 2]  636 	jrule 1$ 
      0022D7 AB 07            [ 1]  637 	add a,#7
      0022D9 AB 30            [ 1]  638 1$: add a,#'0 
      0022DB 81               [ 4]  639 	ret 
                                    640 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     20 ;;   compile BASIC source code to byte code
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 
                                     23 
                                     24     .module COMPILER 
                                     25 
                                     26 ;    .nlist
                                     27 ;	.include "inc/nucleo_8s208.inc"
                                     28 ;	.include "inc/stm8s208.inc"
                                     29 ;	.include "inc/ascii.inc"
                                     30 ;	.include "inc/gen_macros.inc" 
                                     31 ;	.include "tbi_macros.inc" 
                                     32 ;	.include "cmd_index.inc"
                                     33     .list 
                                     34 
                                     35 
                                     36     .area  CODE 
                                     37 
                                     38 ;-------------------------------------
                                     39 ; search text area for a line#
                                     40 ; input:
                                     41 ;   A           0 search from txbgn 
                                     42 ;			    1 search from basicptr 
                                     43 ;	X 			line# 
                                     44 ; output:
                                     45 ;   X 			addr of line | 0 
                                     46 ;   Y           line#|insert address if not found  
                                     47 ;-------------------------------------
                           000001    48 	LL=1 ; line length 
                           000002    49 	LB=2 ; line length low byte 
                           000002    50 	VSIZE=2 
      0022DC                         51 search_lineno::
      0022DC                         52 	_vars VSIZE
      0022DC 52 02            [ 2]    1     sub sp,#VSIZE 
      0022DE 0F 01            [ 1]   53 	clr (LL,sp)
      0022E0 90 CE 00 19      [ 2]   54 	ldw y,txtbgn
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0022E4 4D               [ 1]   55 	tnz a 
      0022E5 27 04            [ 1]   56 	jreq search_ln_loop
      0022E7 90 CE 00 04      [ 2]   57 	ldw y,basicptr 
      0022EB                         58 search_ln_loop:
      0022EB 90 C3 00 1B      [ 2]   59 	cpw y,txtend 
      0022EF 2A 10            [ 1]   60 	jrpl 8$
      0022F1 90 F3            [ 1]   61 	cpw x,(y)
      0022F3 27 0E            [ 1]   62 	jreq 9$
      0022F5 2B 0A            [ 1]   63 	jrmi 8$ 
      0022F7 90 E6 02         [ 1]   64 	ld a,(2,y)
      0022FA 6B 02            [ 1]   65 	ld (LB,sp),a 
      0022FC 72 F9 01         [ 2]   66 	addw y,(LL,sp)
      0022FF 20 EA            [ 2]   67 	jra search_ln_loop 
      002301                         68 8$: 
      002301 5F               [ 1]   69 	clrw x 	
      002302 51               [ 1]   70 	exgw x,y 
      002303                         71 9$: _drop VSIZE
      002303 5B 02            [ 2]    1     addw sp,#VSIZE 
      002305 51               [ 1]   72 	exgw x,y   
      002306 81               [ 4]   73 	ret 
                                     74 
                                     75 ;-------------------------------------
                                     76 ; delete line at addr
                                     77 ; input:
                                     78 ;   X 		addr of line i.e DEST for move 
                                     79 ;-------------------------------------
                           000001    80 	LLEN=1
                           000003    81 	SRC=3
                           000004    82 	VSIZE=4
      002307                         83 del_line: 
      002307                         84 	_vars VSIZE 
      002307 52 04            [ 2]    1     sub sp,#VSIZE 
      002309 E6 02            [ 1]   85 	ld a,(2,x) ; line length
      00230B 6B 02            [ 1]   86 	ld (LLEN+1,sp),a 
      00230D 0F 01            [ 1]   87 	clr (LLEN,sp)
      00230F 90 93            [ 1]   88 	ldw y,x  
      002311 72 F9 01         [ 2]   89 	addw y,(LLEN,sp) ;SRC  
      002314 17 03            [ 2]   90 	ldw (SRC,sp),y  ;save source 
      002316 90 CE 00 1B      [ 2]   91 	ldw y,txtend 
      00231A 72 F2 03         [ 2]   92 	subw y,(SRC,sp) ; y=count 
      00231D 90 CF 00 0C      [ 2]   93 	ldw acc16,y 
      002321 16 03            [ 2]   94 	ldw y,(SRC,sp)    ; source
      002323 CD 03 C5         [ 4]   95 	call move
      002326 90 CE 00 1B      [ 2]   96 	ldw y,txtend 
      00232A 72 F2 01         [ 2]   97 	subw y,(LLEN,sp)
      00232D 90 CF 00 1B      [ 2]   98 	ldw txtend,y  
      002331                         99 	_drop VSIZE     
      002331 5B 04            [ 2]    1     addw sp,#VSIZE 
      002333 81               [ 4]  100 	ret 
                                    101 
                                    102 ;---------------------------------------------
                                    103 ; create a gap in text area to 
                                    104 ; move new line in this gap
                                    105 ; input:
                                    106 ;    X 			addr gap start 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                    107 ;    Y 			gap length 
                                    108 ; output:
                                    109 ;    X 			addr gap start 
                                    110 ;--------------------------------------------
                           000001   111 	DEST=1
                           000003   112 	SRC=3
                           000005   113 	LEN=5
                           000006   114 	VSIZE=6 
      002334                        115 create_gap:
      002334                        116 	_vars VSIZE
      002334 52 06            [ 2]    1     sub sp,#VSIZE 
      002336 1F 03            [ 2]  117 	ldw (SRC,sp),x 
      002338 17 05            [ 2]  118 	ldw (LEN,sp),y 
      00233A 90 CF 00 0C      [ 2]  119 	ldw acc16,y 
      00233E 90 93            [ 1]  120 	ldw y,x ; SRC
      002340 72 BB 00 0C      [ 2]  121 	addw x,acc16  
      002344 1F 01            [ 2]  122 	ldw (DEST,sp),x 
                                    123 ;compute size to move 	
      002346 CE 00 1B         [ 2]  124 	ldw x,txtend 
      002349 72 F0 03         [ 2]  125 	subw x,(SRC,sp)
      00234C CF 00 0C         [ 2]  126 	ldw acc16,x ; size to move
      00234F 1E 01            [ 2]  127 	ldw x,(DEST,sp) 
      002351 CD 03 C5         [ 4]  128 	call move
      002354 CE 00 1B         [ 2]  129 	ldw x,txtend
      002357 72 FB 05         [ 2]  130 	addw x,(LEN,sp)
      00235A CF 00 1B         [ 2]  131 	ldw txtend,x
      00235D                        132 9$:	_drop VSIZE 
      00235D 5B 06            [ 2]    1     addw sp,#VSIZE 
      00235F 81               [ 4]  133 	ret 
                                    134 
                                    135 ;--------------------------------------------
                                    136 ; insert line in pad into text area 
                                    137 ; first search for already existing 
                                    138 ; replace existing 
                                    139 ; if new line empty delete existing one. 
                                    140 ; input:
                                    141 ;   ptr16		pointer to tokenized line  
                                    142 ; output:
                                    143 ;   none
                                    144 ;---------------------------------------------
                           000001   145 	DEST=1  ; text area insertion address 
                           000003   146 	SRC=3   ; str to insert address 
                           000005   147 	LINENO=5 ; line number 
                           000007   148 	LLEN=7 ; line length 
                           000008   149 	VSIZE=8  
      002360                        150 insert_line:
      002360                        151 	_vars VSIZE 
      002360 52 08            [ 2]    1     sub sp,#VSIZE 
      002362 CE 00 1B         [ 2]  152 	ldw x,txtend  
      002365 C3 00 19         [ 2]  153 	cpw x,txtbgn 
      002368 26 19            [ 1]  154 	jrne 0$
                                    155 ;first text line 
      00236A AE 00 02         [ 2]  156 	ldw x,#2 
      00236D 72 D6 00 17      [ 4]  157 	ld a,([ptr16],x)
      002371 A1 03            [ 1]  158 	cp a,#3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      002373 27 5A            [ 1]  159 	jreq insert_ln_exit
      002375 5F               [ 1]  160 	clrw x 
      002376 97               [ 1]  161 	ld xl,a
      002377 1F 07            [ 2]  162 	ldw (LLEN,sp),x 
      002379 CE 00 19         [ 2]  163 	ldw x,txtbgn
      00237C 1F 01            [ 2]  164 	ldw (DEST,sp),x 
      00237E CE 00 1B         [ 2]  165 	ldw x,txtend 
      002381 20 38            [ 2]  166 	jra 4$
      002383 72 CE 00 17      [ 5]  167 0$:	ldw x,[ptr16]
                                    168 ; line number
      002387 1F 05            [ 2]  169 	ldw (LINENO,sp),x 
      002389 AE 00 02         [ 2]  170 	ldw x,#2 
      00238C 72 D6 00 17      [ 4]  171 	ld a,([ptr16],x)
      002390 97               [ 1]  172 	ld xl,a
                                    173 ; line length
      002391 1F 07            [ 2]  174 	ldw (LLEN,sp),x
                                    175 ; check if that line number already exit 	
      002393 1E 05            [ 2]  176 	ldw x,(LINENO,sp)
      002395 4F               [ 1]  177 	clr a 
      002396 CD 22 DC         [ 4]  178 	call search_lineno 
      002399 5D               [ 2]  179 	tnzw x 
      00239A 26 04            [ 1]  180 	jrne 2$
                                    181 ; line doesn't exit
                                    182 ; it will be inserted at this point.  	
      00239C 17 01            [ 2]  183 	ldw (DEST,sp),y 
      00239E 20 05            [ 2]  184 	jra 3$
                                    185 ; line exit delete it.
                                    186 ; it will be replaced by new one 	
      0023A0 1F 01            [ 2]  187 2$: ldw (DEST,sp),x 
      0023A2 CD 23 07         [ 4]  188 	call del_line
      0023A5                        189 3$: 
                                    190 ; insert new line or leave if LLEN==3
                                    191 ; LLEN==3 means empty line 
      0023A5 A6 03            [ 1]  192 	ld a,#3
      0023A7 11 08            [ 1]  193 	cp a,(LLEN+1,sp)
      0023A9 27 24            [ 1]  194 	jreq insert_ln_exit ; empty line exit.
                                    195 ; if insertion point at txtend 
                                    196 ; move no need to create a gap 
      0023AB 1E 01            [ 2]  197 	ldw x,(DEST,sp)
      0023AD C3 00 1B         [ 2]  198 	cpw x,txtend 
      0023B0 27 09            [ 1]  199 	jreq 4$ 
                                    200 ; must create a gap
                                    201 ; at insertion point  
      0023B2 1E 01            [ 2]  202 	ldw x,(DEST,sp)
      0023B4 16 07            [ 2]  203 	ldw y,(LLEN,sp)
      0023B6 CD 23 34         [ 4]  204 	call create_gap
      0023B9 20 06            [ 2]  205 	jra 5$
      0023BB                        206 4$: 
      0023BB 72 FB 07         [ 2]  207 	addw x,(LLEN,sp)
      0023BE CF 00 1B         [ 2]  208 	ldw txtend,x 	 
                                    209 ; move new line in gap 
      0023C1 1E 07            [ 2]  210 5$:	ldw x,(LLEN,sp)
      0023C3 CF 00 0C         [ 2]  211 	ldw acc16,x 
      0023C6 90 AE 16 E0      [ 2]  212 	ldw y,#pad ;SRC 
      0023CA 1E 01            [ 2]  213 	ldw x,(DEST,sp) ; dest address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      0023CC CD 03 C5         [ 4]  214 	call move 
      0023CF                        215 insert_ln_exit:	
      0023CF                        216 	_drop VSIZE
      0023CF 5B 08            [ 2]    1     addw sp,#VSIZE 
      0023D1 81               [ 4]  217 	ret
                                    218 
                                    219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    220 ;; compiler routines        ;;
                                    221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    222 ;------------------------------------
                                    223 ; parse quoted string 
                                    224 ; input:
                                    225 ;   Y 	pointer to tib 
                                    226 ;   X   pointer to output buffer 
                                    227 ; output:
                                    228 ;	buffer   parsed string
                                    229 ;------------------------------------
                           000001   230 	PREV = 1
                           000002   231 	CURR =2
                           000002   232 	VSIZE=2
      0023D2                        233 parse_quote: 
      0023D2                        234 	_vars VSIZE 
      0023D2 52 02            [ 2]    1     sub sp,#VSIZE 
      0023D4 4F               [ 1]  235 	clr a
      0023D5 6B 01            [ 1]  236 1$:	ld (PREV,sp),a 
      0023D7                        237 2$:	
      0023D7 91 D6 00         [ 4]  238 	ld a,([in.w],y)
      0023DA 27 24            [ 1]  239 	jreq 6$
      0023DC 72 5C 00 01      [ 1]  240 	inc in 
      0023E0 6B 02            [ 1]  241 	ld (CURR,sp),a 
      0023E2 A6 5C            [ 1]  242 	ld a,#'\
      0023E4 11 01            [ 1]  243 	cp a, (PREV,sp)
      0023E6 26 0A            [ 1]  244 	jrne 3$
      0023E8 0F 01            [ 1]  245 	clr (PREV,sp)
      0023EA 7B 02            [ 1]  246 	ld a,(CURR,sp)
      0023EC AD 1C            [ 4]  247 	callr convert_escape
      0023EE F7               [ 1]  248 	ld (x),a 
      0023EF 5C               [ 1]  249 	incw x 
      0023F0 20 E5            [ 2]  250 	jra 2$
      0023F2                        251 3$:
      0023F2 7B 02            [ 1]  252 	ld a,(CURR,sp)
      0023F4 A1 5C            [ 1]  253 	cp a,#'\'
      0023F6 27 DD            [ 1]  254 	jreq 1$
      0023F8 A1 22            [ 1]  255 	cp a,#'"
      0023FA 27 04            [ 1]  256 	jreq 6$ 
      0023FC F7               [ 1]  257 	ld (x),a 
      0023FD 5C               [ 1]  258 	incw x 
      0023FE 20 D7            [ 2]  259 	jra 2$
      002400                        260 6$:
      002400 7F               [ 1]  261 	clr (x)
      002401 5C               [ 1]  262 	incw x 
      002402 90 93            [ 1]  263 	ldw y,x 
      002404 5F               [ 1]  264 	clrw x 
      002405 A6 02            [ 1]  265 	ld a,#TK_QSTR  
      002407                        266 	_drop VSIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      002407 5B 02            [ 2]    1     addw sp,#VSIZE 
      002409 81               [ 4]  267 	ret 
                                    268 
                                    269 ;---------------------------------------
                                    270 ; called by parse_quote
                                    271 ; subtitute escaped character 
                                    272 ; by their ASCII value .
                                    273 ; input:
                                    274 ;   A  character following '\'
                                    275 ; output:
                                    276 ;   A  substitued char or same if not valid.
                                    277 ;---------------------------------------
      00240A                        278 convert_escape:
      00240A 89               [ 2]  279 	pushw x 
      00240B AE 24 1F         [ 2]  280 	ldw x,#escaped 
      00240E F1               [ 1]  281 1$:	cp a,(x)
      00240F 27 06            [ 1]  282 	jreq 2$
      002411 7D               [ 1]  283 	tnz (x)
      002412 27 09            [ 1]  284 	jreq 3$
      002414 5C               [ 1]  285 	incw x 
      002415 20 F7            [ 2]  286 	jra 1$
      002417 1D 24 1F         [ 2]  287 2$: subw x,#escaped 
      00241A 9F               [ 1]  288 	ld a,xl 
      00241B AB 07            [ 1]  289 	add a,#7
      00241D 85               [ 2]  290 3$:	popw x 
      00241E 81               [ 4]  291 	ret 
                                    292 
      00241F 61 62 74 6E 76 66 72   293 escaped:: .asciz "abtnvfr"
             00
                                    294 
                                    295 ;-------------------------
                                    296 ; integer parser 
                                    297 ; input:
                                    298 ;   X 		point to output buffer  
                                    299 ;   Y 		point to tib 
                                    300 ;   A 	    first digit|'$' 
                                    301 ; output:  
                                    302 ;   X 		integer 
                                    303 ;   A 		TK_INTGR
                                    304 ;   acc24   24 bits integer 
                                    305 ;-------------------------
                           000001   306 	BASE=1
                           000002   307 	TCHAR=2 
                           000003   308 	XSAVE=3
                           000004   309 	VSIZE=4 
      002427                        310 parse_integer: ; { -- n }
      002427 89               [ 2]  311 	pushw x 	
      002428 4B 00            [ 1]  312 	push #0 ; TCHAR
      00242A 4B 0A            [ 1]  313 	push #10 ; BASE=10
      00242C A1 24            [ 1]  314 	cp a,#'$
      00242E 26 04            [ 1]  315 	jrne 2$ 
      002430                        316     _drop #1
      002430 5B 01            [ 2]    1     addw sp,##1 
      002432 4B 10            [ 1]  317 	push #16  ; BASE=16
      002434 F7               [ 1]  318 2$:	ld (x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002435 5C               [ 1]  319 	incw x 
      002436 91 D6 00         [ 4]  320 	ld a,([in.w],y)
      002439 72 5C 00 01      [ 1]  321 	inc in 
      00243D CD 09 8F         [ 4]  322 	call to_upper 
      002440 6B 02            [ 1]  323 	ld (TCHAR,sp),a 
      002442 CD 04 26         [ 4]  324 	call is_digit 
      002445 25 ED            [ 1]  325 	jrc 2$
      002447 A6 10            [ 1]  326 	ld a,#16 
      002449 11 01            [ 1]  327 	cp a,(BASE,sp)
      00244B 26 0A            [ 1]  328 	jrne 3$ 
      00244D 7B 02            [ 1]  329 	ld a,(TCHAR,sp)
      00244F A1 41            [ 1]  330 	cp a,#'A 
      002451 2B 04            [ 1]  331 	jrmi 3$ 
      002453 A1 47            [ 1]  332 	cp a,#'G 
      002455 2B DD            [ 1]  333 	jrmi 2$ 
      002457 72 5A 00 01      [ 1]  334 3$: dec in 	
      00245B 7F               [ 1]  335     clr (x)
      00245C 1E 03            [ 2]  336 	ldw x,(XSAVE,sp)
      00245E CD 09 9B         [ 4]  337 	call atoi24
      002461 90 93            [ 1]  338 	ldw y,x 
      002463 CE 00 0C         [ 2]  339 	ldw x,acc16 
      002466 A6 84            [ 1]  340 	ld a,#TK_INTGR
      002468 90 FF            [ 2]  341 	ldw (y),x 
      00246A 72 A9 00 02      [ 2]  342 	addw y,#2
      00246E                        343 	_drop VSIZE  
      00246E 5B 04            [ 2]    1     addw sp,#VSIZE 
      002470 81               [ 4]  344 	ret 	
                                    345 
                                    346 ;-------------------------
                                    347 ; binary integer parser
                                    348 ; build integer in acc24  
                                    349 ; input:
                                    350 ;   X 		point to output buffer  
                                    351 ;   Y 		point to tib 
                                    352 ;   A 	    '&' 
                                    353 ; output:  
                                    354 ;   buffer  TK_INTGR integer  
                                    355 ;   X 		int16 
                                    356 ;   A 		TK_INTGR
                                    357 ;   acc24    int24 
                                    358 ;-------------------------
                           000001   359 	BINARY=1 ; 24 bits integer 
                           000003   360 	VSIZE=3
      002471                        361 parse_binary: ; { -- n }
      002471 4B 00            [ 1]  362 	push #0
      002473 4B 00            [ 1]  363 	push #0
      002475 4B 00            [ 1]  364 	push #0
      002477                        365 2$:	
      002477 91 D6 00         [ 4]  366 	ld a,([in.w],y)
      00247A 72 5C 00 01      [ 1]  367 	inc in 
      00247E A1 30            [ 1]  368 	cp a,#'0 
      002480 27 06            [ 1]  369 	jreq 3$
      002482 A1 31            [ 1]  370 	cp a,#'1 
      002484 27 02            [ 1]  371 	jreq 3$ 
      002486 20 0B            [ 2]  372 	jra bin_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002488 A0 30            [ 1]  373 3$: sub a,#'0 
      00248A 46               [ 1]  374 	rrc a
      00248B 09 03            [ 1]  375 	rlc (BINARY+2,sp) 
      00248D 09 02            [ 1]  376 	rlc (BINARY+1,sp)
      00248F 09 01            [ 1]  377 	rlc (BINARY,sp) 
      002491 20 E4            [ 2]  378 	jra 2$  
      002493                        379 bin_exit:
      002493 72 5A 00 01      [ 1]  380 	dec in 
      002497 90 93            [ 1]  381 	ldw y,x
      002499 7B 01            [ 1]  382 	ld a,(BINARY,sp)
      00249B C7 00 0B         [ 1]  383 	ld acc24,a 
      00249E 1E 02            [ 2]  384 	ldw x,(BINARY+1,sp)
      0024A0 CF 00 0C         [ 2]  385 	ldw acc16,x
      0024A3 90 FF            [ 2]  386 	ldw (y),x 
      0024A5 72 A9 00 02      [ 2]  387 	addw y,#2  
      0024A9 A6 84            [ 1]  388 	ld a,#TK_INTGR 	
      0024AB                        389 	_drop VSIZE 
      0024AB 5B 03            [ 2]    1     addw sp,#VSIZE 
      0024AD 81               [ 4]  390 	ret
                                    391 
                                    392 ;---------------------------
                                    393 ;  token begin with a letter,
                                    394 ;  is keyword or variable. 	
                                    395 ; input:
                                    396 ;   X 		point to pad 
                                    397 ;   Y 		point to text
                                    398 ;   A 	    first letter  
                                    399 ; output:
                                    400 ;   X		exec_addr|var_addr 
                                    401 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                    402 ;   pad 	keyword|var_name  
                                    403 ;--------------------------  
                           000001   404 	XFIRST=1
                           000002   405 	VSIZE=2
      0024AE                        406 parse_keyword: 
      0024AE 89               [ 2]  407 	pushw x 
      0024AF                        408 kw_loop:	
      0024AF CD 09 8F         [ 4]  409 	call to_upper 
      0024B2 F7               [ 1]  410 	ld (x),a 
      0024B3 5C               [ 1]  411 	incw x 
      0024B4 91 D6 00         [ 4]  412 	ld a,([in.w],y)
      0024B7 72 5C 00 01      [ 1]  413 	inc in 
      0024BB CD 04 15         [ 4]  414 	call is_alpha 
      0024BE 25 EF            [ 1]  415 	jrc kw_loop
      0024C0 72 5A 00 01      [ 1]  416 	dec in   
      0024C4 7F               [ 1]  417 1$: clr (x)
      0024C5 1E 01            [ 2]  418 	ldw x,(XFIRST,sp) 
      0024C7 E6 01            [ 1]  419 	ld a,(1,x)
      0024C9 26 13            [ 1]  420 	jrne 2$
                                    421 ; one letter variable name 
      0024CB F6               [ 1]  422 	ld a,(x) 
      0024CC A0 41            [ 1]  423 	sub a,#'A 
      0024CE 48               [ 1]  424 	sll a 
      0024CF 88               [ 1]  425 	push a 
      0024D0 4B 00            [ 1]  426 	push #0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0024D2 AE 00 2C         [ 2]  427 	ldw x,#vars 
      0024D5 72 FB 01         [ 2]  428 	addw x,(1,sp) ; X=var address 
      0024D8                        429 	_drop 2 
      0024D8 5B 02            [ 2]    1     addw sp,#2 
      0024DA A6 85            [ 1]  430 	ld a,#TK_VAR 
      0024DC 20 0E            [ 2]  431 	jra 4$ 
      0024DE                        432 2$: ; check for keyword, otherwise syntax error.
      0024DE                        433 	_ldx_dict kword_dict ; dictionary entry point
      0024DE AE 1E F6         [ 2]    1     ldw x,#kword_dict+2
      0024E1 16 01            [ 2]  434 	ldw y,(XFIRST,sp) ; name to search for
      0024E3 CD 0B 82         [ 4]  435 	call search_dict
      0024E6 4D               [ 1]  436 	tnz a
      0024E7 26 03            [ 1]  437 	jrne 4$ 
      0024E9 CC 07 39         [ 2]  438 	jp syntax_error
      0024EC                        439 4$:	
      0024EC 16 01            [ 2]  440 	ldw y,(XFIRST,sp)
      0024EE A3 00 50         [ 2]  441 	cpw x,#LET_IDX 
      0024F1 27 0A            [ 1]  442 	jreq 5$  ; don't compile LET command 
      0024F3 90 F7            [ 1]  443 	ld (y),a 
      0024F5 90 5C            [ 1]  444 	incw y 
      0024F7 90 FF            [ 2]  445 	ldw (y),x
      0024F9 72 A9 00 02      [ 2]  446 	addw y,#2  
      0024FD                        447 5$:	_drop VSIZE 
      0024FD 5B 02            [ 2]    1     addw sp,#VSIZE 
      0024FF 81               [ 4]  448 	ret  	
                                    449 
                                    450 ;------------------------------------
                                    451 ; skip character c in text starting from 'in'
                                    452 ; input:
                                    453 ;	 y 		point to text buffer
                                    454 ;    a 		character to skip
                                    455 ; output:  
                                    456 ;	'in' ajusted to new position
                                    457 ;------------------------------------
                           000001   458 	C = 1 ; local var
      002500                        459 skip:
      002500 88               [ 1]  460 	push a
      002501 91 D6 00         [ 4]  461 1$:	ld a,([in.w],y)
      002504 27 0A            [ 1]  462 	jreq 2$
      002506 11 01            [ 1]  463 	cp a,(C,sp)
      002508 26 06            [ 1]  464 	jrne 2$
      00250A 72 5C 00 01      [ 1]  465 	inc in
      00250E 20 F1            [ 2]  466 	jra 1$
      002510                        467 2$: _drop 1 
      002510 5B 01            [ 2]    1     addw sp,#1 
      002512 81               [ 4]  468 	ret
                                    469 	
                                    470 
                                    471 ;------------------------------------
                                    472 ; scan text for next token
                                    473 ; input: 
                                    474 ;	X 		pointer to buffer where 
                                    475 ;	        token id and value are copied 
                                    476 ; use:
                                    477 ;	Y   pointer to text in tib 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                    478 ; output:
                                    479 ;   A       token attribute 
                                    480 ;   X 		token value
                                    481 ;   Y       updated position in output buffer   
                                    482 ;------------------------------------
                                    483 	; use to check special character 
                                    484 	.macro _case c t  
                                    485 	ld a,#c 
                                    486 	cp a,(TCHAR,sp) 
                                    487 	jrne t
                                    488 	.endm 
                                    489 
                           000001   490 	TCHAR=1
                           000002   491 	ATTRIB=2
                           000002   492 	VSIZE=2
      002513                        493 get_token:: 
      002513                        494 	_vars VSIZE
      002513 52 02            [ 2]    1     sub sp,#VSIZE 
                                    495 ;	ld a,in 
                                    496 ;	sub a,count
                                    497 ;   jrmi 0$
                                    498 ;	clr a 
                                    499 ;	ret 
      002515                        500 0$: 
      002515 90 AE 16 90      [ 2]  501 	ldw y,#tib    	
      002519 A6 20            [ 1]  502 	ld a,#SPACE
      00251B CD 25 00         [ 4]  503 	call skip
      00251E 55 00 01 00 02   [ 1]  504 	mov in.saved,in 
      002523 91 D6 00         [ 4]  505 	ld a,([in.w],y)
      002526 26 05            [ 1]  506 	jrne 1$
      002528 90 93            [ 1]  507 	ldw y,x 
      00252A CC 26 CF         [ 2]  508 	jp token_exit ; end of line 
      00252D 72 5C 00 01      [ 1]  509 1$:	inc in 
      002531 CD 09 8F         [ 4]  510 	call to_upper 
      002534 6B 01            [ 1]  511 	ld (TCHAR,sp),a 
                                    512 ; check for quoted string
      002536                        513 str_tst:  	
      002536                        514 	_case '"' nbr_tst
      002536 A6 22            [ 1]    1 	ld a,#'"' 
      002538 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00253A 26 0A            [ 1]    3 	jrne nbr_tst
      00253C A6 02            [ 1]  515 	ld a,#TK_QSTR
      00253E F7               [ 1]  516 	ld (x),a 
      00253F 5C               [ 1]  517 	incw x 
      002540 CD 23 D2         [ 4]  518 	call parse_quote
      002543 CC 26 CF         [ 2]  519 	jp token_exit
      002546                        520 nbr_tst:
                                    521 ; check for hexadecimal number 
      002546 A6 24            [ 1]  522 	ld a,#'$'
      002548 11 01            [ 1]  523 	cp a,(TCHAR,sp) 
      00254A 27 17            [ 1]  524 	jreq 1$
                                    525 ;check for binary number 
      00254C A6 26            [ 1]  526 	ld a,#'&
      00254E 11 01            [ 1]  527 	cp a,(TCHAR,sp)
      002550 26 0A            [ 1]  528 	jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      002552 A6 84            [ 1]  529 	ld a,#TK_INTGR
      002554 F7               [ 1]  530 	ld (x),a 
      002555 5C               [ 1]  531 	incw x 
      002556 CD 24 71         [ 4]  532 	call parse_binary ; expect binary integer 
      002559 CC 26 CF         [ 2]  533 	jp token_exit 
                                    534 ; check for decimal number 	
      00255C 7B 01            [ 1]  535 0$:	ld a,(TCHAR,sp)
      00255E CD 04 26         [ 4]  536 	call is_digit
      002561 24 0C            [ 1]  537 	jrnc 3$
      002563 A6 84            [ 1]  538 1$:	ld a,#TK_INTGR 
      002565 F7               [ 1]  539 	ld (x),a 
      002566 5C               [ 1]  540 	incw x 
      002567 7B 01            [ 1]  541 	ld a,(TCHAR,sp)
      002569 CD 24 27         [ 4]  542 	call parse_integer 
      00256C CC 26 CF         [ 2]  543 	jp token_exit 
      00256F                        544 3$: 
      00256F                        545 	_case '(' bkslsh_tst 
      00256F A6 28            [ 1]    1 	ld a,#'(' 
      002571 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002573 26 05            [ 1]    3 	jrne bkslsh_tst
      002575 A6 07            [ 1]  546 	ld a,#TK_LPAREN
      002577 CC 26 CB         [ 2]  547 	jp token_char   	
      00257A                        548 bkslsh_tst: ; character token 
      00257A                        549 	_case '\',rparnt_tst
      00257A A6 5C            [ 1]    1 	ld a,#'\' 
      00257C 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00257E 26 16            [ 1]    3 	jrne rparnt_tst
      002580 A6 03            [ 1]  550 	ld a,#TK_CHAR 
      002582 F7               [ 1]  551 	ld (x),a 
      002583 5C               [ 1]  552 	incw x 
      002584 91 D6 00         [ 4]  553 	ld a,([in.w],y)
      002587 F7               [ 1]  554 	ld (x),a 
      002588 5C               [ 1]  555 	incw x
      002589 90 93            [ 1]  556 	ldw y,x 	 
      00258B 72 5C 00 01      [ 1]  557 	inc in  
      00258F 5F               [ 1]  558 	clrw x 
      002590 97               [ 1]  559 	ld xl,a 
      002591 A6 03            [ 1]  560 	ld a,#TK_CHAR 
      002593 CC 26 CF         [ 2]  561 	jp token_exit 
      002596                        562 rparnt_tst:		
      002596                        563 	_case ')' colon_tst 
      002596 A6 29            [ 1]    1 	ld a,#')' 
      002598 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00259A 26 05            [ 1]    3 	jrne colon_tst
      00259C A6 08            [ 1]  564 	ld a,#TK_RPAREN 
      00259E CC 26 CB         [ 2]  565 	jp token_char
      0025A1                        566 colon_tst:
      0025A1                        567 	_case ':' comma_tst 
      0025A1 A6 3A            [ 1]    1 	ld a,#':' 
      0025A3 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025A5 26 05            [ 1]    3 	jrne comma_tst
      0025A7 A6 0B            [ 1]  568 	ld a,#TK_COLON 
      0025A9 CC 26 CB         [ 2]  569 	jp token_char  
      0025AC                        570 comma_tst:
      0025AC                        571 	_case COMMA sharp_tst 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



      0025AC A6 2C            [ 1]    1 	ld a,#COMMA 
      0025AE 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025B0 26 05            [ 1]    3 	jrne sharp_tst
      0025B2 A6 09            [ 1]  572 	ld a,#TK_COMMA
      0025B4 CC 26 CB         [ 2]  573 	jp token_char
      0025B7                        574 sharp_tst:
      0025B7                        575 	_case SHARP dash_tst 
      0025B7 A6 23            [ 1]    1 	ld a,#SHARP 
      0025B9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025BB 26 05            [ 1]    3 	jrne dash_tst
      0025BD A6 0A            [ 1]  576 	ld a,#TK_SHARP
      0025BF CC 26 CB         [ 2]  577 	jp token_char  	 	 
      0025C2                        578 dash_tst: 	
      0025C2                        579 	_case '-' at_tst 
      0025C2 A6 2D            [ 1]    1 	ld a,#'-' 
      0025C4 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025C6 26 05            [ 1]    3 	jrne at_tst
      0025C8 A6 11            [ 1]  580 	ld a,#TK_MINUS  
      0025CA CC 26 CB         [ 2]  581 	jp token_char 
      0025CD                        582 at_tst:
      0025CD                        583 	_case '@' qmark_tst 
      0025CD A6 40            [ 1]    1 	ld a,#'@' 
      0025CF 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025D1 26 05            [ 1]    3 	jrne qmark_tst
      0025D3 A6 06            [ 1]  584 	ld a,#TK_ARRAY 
      0025D5 CC 26 CB         [ 2]  585 	jp token_char
      0025D8                        586 qmark_tst:
      0025D8                        587 	_case '?' tick_tst 
      0025D8 A6 3F            [ 1]    1 	ld a,#'?' 
      0025DA 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025DC 26 12            [ 1]    3 	jrne tick_tst
      0025DE A6 80            [ 1]  588 	ld a,#TK_CMD  
      0025E0 F7               [ 1]  589 	ld (x),a 
      0025E1 5C               [ 1]  590 	incw x 
      0025E2 90 93            [ 1]  591 	ldw y,x 
      0025E4 AE 00 72         [ 2]  592 	ldw x,#PRT_IDX 
      0025E7 90 FF            [ 2]  593 	ldw (y),x 
      0025E9 72 A9 00 02      [ 2]  594 	addw y,#2
      0025ED CC 26 CF         [ 2]  595 	jp token_exit
      0025F0                        596 tick_tst: ; comment 
      0025F0                        597 	_case TICK plus_tst 
      0025F0 A6 27            [ 1]    1 	ld a,#TICK 
      0025F2 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      0025F4 26 35            [ 1]    3 	jrne plus_tst
      0025F6 A6 80            [ 1]  598 	ld a,#TK_CMD
      0025F8 F7               [ 1]  599 	ld (x),a 
      0025F9 5C               [ 1]  600 	incw x
      0025FA 90 AE 00 8C      [ 2]  601 	ldw y,#REM_IDX
      0025FE FF               [ 2]  602 	ldw (x),y 
      0025FF 1C 00 02         [ 2]  603 	addw x,#2  
      002602                        604 copy_comment:
      002602 90 AE 16 90      [ 2]  605 	ldw y,#tib 
      002606 72 B9 00 00      [ 2]  606 	addw y,in.w
      00260A 90 89            [ 2]  607 	pushw y
      00260C CD 03 B7         [ 4]  608 	call strcpy
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



      00260F 72 F2 01         [ 2]  609     subw y,(1,sp)
      002612 90 9F            [ 1]  610 	ld a,yl 
      002614 CB 00 01         [ 1]  611 	add a,in
      002617 C7 00 01         [ 1]  612 	ld in,a 
      00261A 1F 01            [ 2]  613 	ldw (1,sp),x
      00261C 72 F9 01         [ 2]  614 	addw y,(1,sp)
      00261F 90 5C            [ 1]  615 	incw y 
      002621                        616 	_drop 2 
      002621 5B 02            [ 2]    1     addw sp,#2 
      002623 AE 00 8C         [ 2]  617 	ldw x,#REM_IDX 
      002626 A6 80            [ 1]  618 	ld a,#TK_CMD 
      002628 CC 26 CF         [ 2]  619 	jp token_exit 
      00262B                        620 plus_tst:
      00262B                        621 	_case '+' star_tst 
      00262B A6 2B            [ 1]    1 	ld a,#'+' 
      00262D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00262F 26 05            [ 1]    3 	jrne star_tst
      002631 A6 10            [ 1]  622 	ld a,#TK_PLUS  
      002633 CC 26 CB         [ 2]  623 	jp token_char 
      002636                        624 star_tst:
      002636                        625 	_case '*' slash_tst 
      002636 A6 2A            [ 1]    1 	ld a,#'*' 
      002638 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00263A 26 05            [ 1]    3 	jrne slash_tst
      00263C A6 20            [ 1]  626 	ld a,#TK_MULT 
      00263E CC 26 CB         [ 2]  627 	jp token_char 
      002641                        628 slash_tst: 
      002641                        629 	_case '/' prcnt_tst 
      002641 A6 2F            [ 1]    1 	ld a,#'/' 
      002643 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002645 26 05            [ 1]    3 	jrne prcnt_tst
      002647 A6 21            [ 1]  630 	ld a,#TK_DIV 
      002649 CC 26 CB         [ 2]  631 	jp token_char 
      00264C                        632 prcnt_tst:
      00264C                        633 	_case '%' eql_tst 
      00264C A6 25            [ 1]    1 	ld a,#'%' 
      00264E 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002650 26 05            [ 1]    3 	jrne eql_tst
      002652 A6 22            [ 1]  634 	ld a,#TK_MOD
      002654 CC 26 CB         [ 2]  635 	jp token_char  
                                    636 ; 1 or 2 character tokens 	
      002657                        637 eql_tst:
      002657                        638 	_case '=' gt_tst 		
      002657 A6 3D            [ 1]    1 	ld a,#'=' 
      002659 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00265B 26 05            [ 1]    3 	jrne gt_tst
      00265D A6 32            [ 1]  639 	ld a,#TK_EQUAL
      00265F CC 26 CB         [ 2]  640 	jp token_char 
      002662                        641 gt_tst:
      002662                        642 	_case '>' lt_tst 
      002662 A6 3E            [ 1]    1 	ld a,#'>' 
      002664 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      002666 26 23            [ 1]    3 	jrne lt_tst
      002668 A6 31            [ 1]  643 	ld a,#TK_GT 
      00266A 6B 02            [ 1]  644 	ld (ATTRIB,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



      00266C 91 D6 00         [ 4]  645 	ld a,([in.w],y)
      00266F 72 5C 00 01      [ 1]  646 	inc in 
      002673 A1 3D            [ 1]  647 	cp a,#'=
      002675 26 04            [ 1]  648 	jrne 1$
      002677 A6 33            [ 1]  649 	ld a,#TK_GE 
      002679 20 50            [ 2]  650 	jra token_char  
      00267B A1 3C            [ 1]  651 1$: cp a,#'<
      00267D 26 04            [ 1]  652 	jrne 2$
      00267F A6 35            [ 1]  653 	ld a,#TK_NE 
      002681 20 48            [ 2]  654 	jra token_char 
      002683 72 5A 00 01      [ 1]  655 2$: dec in
      002687 7B 02            [ 1]  656 	ld a,(ATTRIB,sp)
      002689 20 40            [ 2]  657 	jra token_char 	 
      00268B                        658 lt_tst:
      00268B                        659 	_case '<' other
      00268B A6 3C            [ 1]    1 	ld a,#'<' 
      00268D 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      00268F 26 23            [ 1]    3 	jrne other
      002691 A6 34            [ 1]  660 	ld a,#TK_LT 
      002693 6B 02            [ 1]  661 	ld (ATTRIB,sp),a 
      002695 91 D6 00         [ 4]  662 	ld a,([in.w],y)
      002698 72 5C 00 01      [ 1]  663 	inc in 
      00269C A1 3D            [ 1]  664 	cp a,#'=
      00269E 26 04            [ 1]  665 	jrne 1$
      0026A0 A6 36            [ 1]  666 	ld a,#TK_LE 
      0026A2 20 27            [ 2]  667 	jra token_char 
      0026A4 A1 3E            [ 1]  668 1$: cp a,#'>
      0026A6 26 04            [ 1]  669 	jrne 2$
      0026A8 A6 35            [ 1]  670 	ld a,#TK_NE 
      0026AA 20 1F            [ 2]  671 	jra token_char 
      0026AC 72 5A 00 01      [ 1]  672 2$: dec in 
      0026B0 7B 02            [ 1]  673 	ld a,(ATTRIB,sp)
      0026B2 20 17            [ 2]  674 	jra token_char 	
      0026B4                        675 other: ; not a special character 	 
      0026B4 7B 01            [ 1]  676 	ld a,(TCHAR,sp)
      0026B6 CD 04 15         [ 4]  677 	call is_alpha 
      0026B9 25 03            [ 1]  678 	jrc 30$ 
      0026BB CC 07 39         [ 2]  679 	jp syntax_error 
      0026BE                        680 30$: 
      0026BE CD 24 AE         [ 4]  681 	call parse_keyword
      0026C1 A3 10 17         [ 2]  682 	cpw x,#remark 
      0026C4 26 09            [ 1]  683 	jrne token_exit 
      0026C6 90 93            [ 1]  684 	ldw y,x 
      0026C8 CC 26 02         [ 2]  685 	jp copy_comment 
      0026CB                        686 token_char:
      0026CB F7               [ 1]  687 	ld (x),a 
      0026CC 5C               [ 1]  688 	incw x
      0026CD 90 93            [ 1]  689 	ldw y,x 
      0026CF                        690 token_exit:
      0026CF                        691 	_drop VSIZE 
      0026CF 5B 02            [ 2]    1     addw sp,#VSIZE 
      0026D1 81               [ 4]  692 	ret
                                    693 
                                    694 
                                    695 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    696 ; create token list fromm text line 
                                    697 ; save this list in pad buffer 
                                    698 ;  compiled line format: 
                                    699 ;    line_no  2 bytes {0...32767}
                                    700 ;    count    1 byte  
                                    701 ;    tokens   variable length 
                                    702 ;   
                                    703 ; input:
                                    704 ;   none
                                    705 ; modified variables:
                                    706 ;   basicptr     token list buffer address 
                                    707 ;   in.w  		 3|count, i.e. index in buffer
                                    708 ;   count        length of line | 0  
                                    709 ;-----------------------------------
                           000001   710 	XSAVE=1
                           000002   711 	VSIZE=2
      0026D2                        712 compile::
      0026D2                        713 	_vars VSIZE 
      0026D2 52 02            [ 2]    1     sub sp,#VSIZE 
      0026D4 55 00 19 00 04   [ 1]  714 	mov basicptr,txtbgn
      0026D9 72 1A 00 20      [ 1]  715 	bset flags,#FCOMP 
      0026DD A6 00            [ 1]  716 	ld a,#0
      0026DF AE 00 00         [ 2]  717 	ldw x,#0
      0026E2 CF 16 E0         [ 2]  718 	ldw pad,x ; destination buffer 
      0026E5 C7 16 E2         [ 1]  719 	ld pad+2,a ; count 
      0026E8 AE 16 E3         [ 2]  720 	ldw x,#pad+3
      0026EB 72 5F 00 01      [ 1]  721 	clr in 
      0026EF CD 25 13         [ 4]  722 	call get_token
      0026F2 A1 84            [ 1]  723 	cp a,#TK_INTGR
      0026F4 26 11            [ 1]  724 	jrne 2$
      0026F6 A3 00 01         [ 2]  725 	cpw x,#1 
      0026F9 2A 05            [ 1]  726 	jrpl 1$
      0026FB A6 0A            [ 1]  727 	ld a,#ERR_BAD_VALUE
      0026FD CC 07 3B         [ 2]  728 	jp tb_error
      002700 CF 16 E0         [ 2]  729 1$:	ldw pad,x 
      002703 90 AE 16 E3      [ 2]  730 	ldw y,#pad+3 
      002707 90 A3 17 60      [ 2]  731 2$:	cpw y,#stack_full 
      00270B 25 05            [ 1]  732 	jrult 3$
      00270D A6 0F            [ 1]  733 	ld a,#ERR_BUF_FULL 
      00270F CC 07 3B         [ 2]  734 	jp tb_error 
      002712                        735 3$:	
      002712 93               [ 1]  736 	ldw x,y 
      002713 CD 25 13         [ 4]  737 	call get_token 
      002716 A1 00            [ 1]  738 	cp a,#TK_NONE 
      002718 26 ED            [ 1]  739 	jrne 2$ 
                                    740 ; compilation completed  
      00271A 72 A2 16 E0      [ 2]  741 	subw y,#pad
      00271E 90 9F            [ 1]  742     ld a,yl
      002720 AE 16 E0         [ 2]  743 	ldw x,#pad 
      002723 CF 00 17         [ 2]  744 	ldw ptr16,x 
      002726 E7 02            [ 1]  745 	ld (2,x),a 
      002728 FE               [ 2]  746 	ldw x,(x)
      002729 27 09            [ 1]  747 	jreq 10$
      00272B CD 23 60         [ 4]  748 	call insert_line
      00272E 72 5F 00 03      [ 1]  749 	clr  count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      002732 20 0F            [ 2]  750 	jra  11$ 
      002734                        751 10$: ; line# is zero 
      002734 CE 00 17         [ 2]  752 	ldw x,ptr16  
      002737 CF 00 04         [ 2]  753 	ldw basicptr,x 
      00273A E6 02            [ 1]  754 	ld a,(2,x)
      00273C C7 00 03         [ 1]  755 	ld count,a 
      00273F 35 03 00 01      [ 1]  756 	mov in,#3 
      002743                        757 11$:
      002743                        758 	_drop VSIZE 
      002743 5B 02            [ 2]    1     addw sp,#VSIZE 
      002745 72 1B 00 20      [ 1]  759 	bres flags,#FCOMP 
      002749 81               [ 4]  760 	ret 
                                    761 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;---------------------------------------
                                     20 ;  decompiler
                                     21 ;  decompile bytecode to text source
                                     22 ;  used by command LIST
                                     23 ;---------------------------------------
                                     24 
                                     25     .module DECOMPILER 
                                     26 
                                     27 ;    .nlist
                                     28 ;	.include "inc/nucleo_8s208.inc"
                                     29 ;	.include "inc/stm8s208.inc"
                                     30 ;	.include "inc/ascii.inc"
                                     31 ;	.include "inc/gen_macros.inc" 
                                     32 ;	.include "tbi_macros.inc" 
                                     33 ;	.include "cmd_index.inc"
                                     34     .list 
                                     35 
                                     36 
                                     37     .area  CODE 
                                     38 
                                     39 ;-------------------------
                                     40 ; copy command name to buffer  
                                     41 ; input:
                                     42 ;   X 	name address 
                                     43 ;   Y   destination buffer 
                                     44 ; output:
                                     45 ;   Y   point after name  
                                     46 ;--------------------------
      00274A                         47 cpy_cmd_name:
      00274A F6               [ 1]   48 	ld a,(x)
      00274B 5C               [ 1]   49 	incw x
      00274C A4 0F            [ 1]   50 	and a,#15  
      00274E 88               [ 1]   51 	push a 
      00274F 0D 01            [ 1]   52     tnz (1,sp) 
      002751 27 0A            [ 1]   53 	jreq 9$
      002753 F6               [ 1]   54 1$:	ld a,(x)
      002754 90 F7            [ 1]   55 	ld (y),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      002756 5C               [ 1]   56 	incw x
      002757 90 5C            [ 1]   57 	incw y 
      002759 0A 01            [ 1]   58 	dec (1,sp)	 
      00275B 26 F6            [ 1]   59 	jrne 1$
      00275D 84               [ 1]   60 9$: pop a 
      00275E 81               [ 4]   61 	ret	
                                     62 
                                     63 ;--------------------------
                                     64 ; add a space after letter or 
                                     65 ; digit.
                                     66 ; input:
                                     67 ;   Y     pointer to buffer 
                                     68 ; output:
                                     69 ;   Y    moved to end 
                                     70 ;--------------------------
      00275F                         71 add_space:
      00275F 90 5A            [ 2]   72 	decw y 
      002761 90 F6            [ 1]   73 	ld a,(y)
      002763 90 5C            [ 1]   74 	incw y
      002765 CD 04 2F         [ 4]   75 	call is_alnum 
      002768 24 06            [ 1]   76 	jrnc 1$
      00276A A6 20            [ 1]   77 	ld a,#SPACE 
      00276C 90 F7            [ 1]   78 	ld (y),a 
      00276E 90 5C            [ 1]   79 	incw y 
      002770 81               [ 4]   80 1$: ret 
                                     81 
                                     82 ;--------------------------
                                     83 ;  align text in buffer 
                                     84 ;  to tab_width padding 
                                     85 ;  left with  SPACE 
                                     86 ; input:
                                     87 ;   X      str*
                                     88 ;   A      str_length 
                                     89 ; output:
                                     90 ;   X      ajusted
                                     91 ;--------------------------
      002771                         92 right_align::
      002771 88               [ 1]   93 	push a 
      002772 7B 01            [ 1]   94 0$: ld a,(1,sp)
      002774 C1 00 21         [ 1]   95 	cp a,tab_width 
      002777 2A 08            [ 1]   96 	jrpl 1$
      002779 A6 20            [ 1]   97 	ld a,#SPACE 
      00277B 5A               [ 2]   98 	decw x
      00277C F7               [ 1]   99 	ld (x),a  
      00277D 0C 01            [ 1]  100 	inc (1,sp)
      00277F 20 F1            [ 2]  101 	jra 0$ 
      002781 84               [ 1]  102 1$: pop a 	
      002782 81               [ 4]  103 	ret 
                                    104 
                                    105 ;--------------------------
                                    106 ; print TK_QSTR
                                    107 ; converting control character
                                    108 ; to backslash sequence
                                    109 ; input:
                                    110 ;   X        char *
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



                                    111 ;   Y        dest. buffer 
                                    112 ; output:
                                    113 ;   X        moved forward 
                                    114 ;   Y        moved forward 
                                    115 ;-----------------------------
      002783                        116 cpy_quote:
      002783 A6 22            [ 1]  117 	ld a,#'"
      002785 90 F7            [ 1]  118 	ld (y),a 
      002787 90 5C            [ 1]  119 	incw y 
      002789 F6               [ 1]  120 1$:	ld a,(x)
      00278A 27 30            [ 1]  121 	jreq 9$
      00278C 5C               [ 1]  122 	incw x 
      00278D A1 20            [ 1]  123 	cp a,#SPACE 
      00278F 25 0E            [ 1]  124 	jrult 3$
      002791 90 F7            [ 1]  125 	ld (y),a
      002793 90 5C            [ 1]  126 	incw y 
      002795 A1 5C            [ 1]  127 	cp a,#'\ 
      002797 26 F0            [ 1]  128 	jrne 1$ 
      002799                        129 2$:
      002799 90 F7            [ 1]  130 	ld (y),a
      00279B 90 5C            [ 1]  131 	incw y  
      00279D 20 EA            [ 2]  132 	jra 1$
      00279F 88               [ 1]  133 3$: push a 
      0027A0 A6 5C            [ 1]  134 	ld a,#'\
      0027A2 90 F7            [ 1]  135 	ld (y),a 
      0027A4 90 5C            [ 1]  136 	incw y  
      0027A6 84               [ 1]  137 	pop a 
      0027A7 A0 07            [ 1]  138 	sub a,#7
      0027A9 C7 00 0D         [ 1]  139 	ld acc8,a 
      0027AC 72 5F 00 0C      [ 1]  140 	clr acc16
      0027B0 89               [ 2]  141 	pushw x
      0027B1 AE 24 1F         [ 2]  142 	ldw x,#escaped 
      0027B4 72 BB 00 0C      [ 2]  143 	addw x,acc16 
      0027B8 F6               [ 1]  144 	ld a,(x)
      0027B9 85               [ 2]  145 	popw x
      0027BA 20 DD            [ 2]  146 	jra 2$
      0027BC A6 22            [ 1]  147 9$: ld a,#'"
      0027BE 90 F7            [ 1]  148 	ld (y),a 
      0027C0 90 5C            [ 1]  149 	incw y  
      0027C2 5C               [ 1]  150 	incw x 
      0027C3 81               [ 4]  151 	ret
                                    152 
                                    153 ;--------------------------
                                    154 ; return variable name 
                                    155 ; from its address.
                                    156 ; input:
                                    157 ;   X    variable address
                                    158 ; output:
                                    159 ;   A     variable letter
                                    160 ;--------------------------
      0027C4                        161 var_name::
      0027C4 1D 00 2C         [ 2]  162 		subw x,#vars 
      0027C7 9F               [ 1]  163 		ld a,xl 
      0027C8 44               [ 1]  164 		srl a 
      0027C9 AB 41            [ 1]  165 		add a,#'A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



      0027CB 81               [ 4]  166 		ret 
                                    167 
                                    168 ;-----------------------------
                                    169 ; return cmd  idx from its 
                                    170 ; code address 
                                    171 ; input:
                                    172 ;   X      code address 
                                    173 ; output:
                                    174 ;   X      cmd_idx
                                    175 ;-----------------------------
      0027CC                        176 get_cmd_idx:
      0027CC 90 89            [ 2]  177 	pushw y
      0027CE 90 AE 1E FC      [ 2]  178 	ldw y,#code_addr 
      0027D2 90 CF 00 17      [ 2]  179 	ldw ptr16,y 
      0027D6 90 5F            [ 1]  180 	clrw y 
      0027D8 91 D3 17         [ 5]  181 1$:	cpw x,([ptr16],y)
      0027DB 27 0C            [ 1]  182 	jreq 3$ 
      0027DD 90 5C            [ 1]  183 	incw y 
      0027DF 91 D6 17         [ 4]  184 	ld a,([ptr16],y)
      0027E2 90 5C            [ 1]  185 	incw y
      0027E4 91 DA 17         [ 4]  186 	or a,([ptr16],y)	
      0027E7 26 EF            [ 1]  187 	jrne 1$
      0027E9 93               [ 1]  188 3$: ldw x,y 
      0027EA 90 85            [ 2]  189 	popw y 
      0027EC 81               [ 4]  190 	ret
                                    191 
                                    192 ;-------------------------------------
                                    193 ; decompile tokens list 
                                    194 ; to original text line 
                                    195 ; input:
                                    196 ;   [basicptr]  pointer at line 
                                    197 ;   Y           destination buffer
                                    198 ; output:
                                    199 ;   A           length 
                                    200 ;   Y           after string  
                                    201 ;------------------------------------
                           000001   202 	BASE_SAV=1
                           000002   203 	WIDTH_SAV=2
                           000003   204 	STR=3
                           000004   205 	VSIZE=4 
      0027ED                        206 decompile::
      0027ED                        207 	_vars VSIZE
      0027ED 52 04            [ 2]    1     sub sp,#VSIZE 
      0027EF C6 00 0A         [ 1]  208 	ld a,base
      0027F2 6B 01            [ 1]  209 	ld (BASE_SAV,sp),a  
      0027F4 C6 00 21         [ 1]  210 	ld a,tab_width 
      0027F7 6B 02            [ 1]  211 	ld (WIDTH_SAV,sp),a 
      0027F9 17 03            [ 2]  212 	ldw (STR,sp),y   
      0027FB 72 CE 00 04      [ 5]  213 	ldw x,[basicptr] ; line number 
      0027FF 35 0A 00 0A      [ 1]  214 	mov base,#10
      002803 35 05 00 21      [ 1]  215 	mov tab_width,#5
      002807 72 5F 00 0B      [ 1]  216 	clr acc24 
      00280B CF 00 0C         [ 2]  217 	ldw acc16,x
      00280E CD 08 9F         [ 4]  218 	call itoa  
      002811 CD 27 71         [ 4]  219 	call right_align 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      002814 88               [ 1]  220 	push a 
      002815 90 93            [ 1]  221 1$:	ldw y,x ; source
      002817 1E 04            [ 2]  222 	ldw x,(STR+1,sp) ; destination
      002819 CD 03 B7         [ 4]  223 	call strcpy 
      00281C 90 5F            [ 1]  224 	clrw y 
      00281E 84               [ 1]  225 	pop a 
      00281F 90 97            [ 1]  226 	ld yl,a 
      002821 72 F9 03         [ 2]  227 	addw y,(STR,sp)
      002824 A6 20            [ 1]  228 	ld a,#SPACE 
      002826 90 F7            [ 1]  229 	ld (y),a 
      002828 90 5C            [ 1]  230 	incw y 
      00282A 72 5F 00 21      [ 1]  231 	clr tab_width
      00282E AE 00 03         [ 2]  232 	ldw x,#3
      002831 CF 00 00         [ 2]  233 	ldw in.w,x 
      002834                        234 decomp_loop:
      002834 90 89            [ 2]  235 	pushw y
      002836 CD 08 28         [ 4]  236 	call next_token 
      002839 90 85            [ 2]  237 	popw y 
      00283B 4D               [ 1]  238 	tnz a  
      00283C 26 03            [ 1]  239 	jrne 1$
      00283E CC 29 20         [ 2]  240 	jp 20$
      002841 2A 75            [ 1]  241 1$:	jrpl 6$
                                    242 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST|TK_VAR|TK_INTGR
      002843 A1 85            [ 1]  243 	cp a,#TK_VAR 
      002845 26 0C            [ 1]  244 	jrne 3$
                                    245 ;; TK_VAR 
      002847 CD 27 5F         [ 4]  246 	call add_space  
      00284A CD 27 C4         [ 4]  247 	call var_name
      00284D 90 F7            [ 1]  248 	ld (y),a 
      00284F 90 5C            [ 1]  249 	incw y  
      002851 20 E1            [ 2]  250 	jra decomp_loop
      002853                        251 3$:
      002853 A1 84            [ 1]  252 	cp a,#TK_INTGR
      002855 26 22            [ 1]  253 	jrne 4$
                                    254 ;; TK_INTGR
      002857 CD 27 5F         [ 4]  255 	call add_space
      00285A 72 5F 00 0B      [ 1]  256 	clr acc24 
      00285E CF 00 0C         [ 2]  257 	ldw acc16,x 
      002861 90 89            [ 2]  258 	pushw y 
      002863 CD 08 9F         [ 4]  259 	call itoa  
      002866 16 01            [ 2]  260 	ldw y,(1,sp) 
      002868 88               [ 1]  261 	push a 
      002869 51               [ 1]  262 	exgw x,y 
      00286A CD 03 B7         [ 4]  263 	call strcpy 
      00286D 90 5F            [ 1]  264 	clrw y
      00286F 84               [ 1]  265 	pop a  
      002870 90 97            [ 1]  266 	ld yl,a 
      002872 72 F9 01         [ 2]  267 	addw y,(1,sp)
      002875                        268 	_drop 2 
      002875 5B 02            [ 2]    1     addw sp,#2 
      002877 20 BB            [ 2]  269 	jra decomp_loop
                                    270 ;; dictionary keyword 
      002879                        271 4$:	
      002879 CD 27 CC         [ 4]  272 	call get_cmd_idx 
      00287C A3 00 8C         [ 2]  273 	cpw x,#REM_IDX
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      00287F 26 22            [ 1]  274 	jrne 5$
      002881 CE 00 04         [ 2]  275 	ldw x,basicptr 
                                    276 ; copy comment to buffer 
      002884 CD 27 5F         [ 4]  277 	call add_space
      002887 A6 27            [ 1]  278 	ld a,#''
      002889 90 F7            [ 1]  279 	ld (y),a 
      00288B 90 5C            [ 1]  280 	incw y 
      00288D                        281 41$:
      00288D 72 D6 00 00      [ 4]  282 	ld a,([in.w],x)
      002891 72 5C 00 01      [ 1]  283 	inc in  
      002895 90 F7            [ 1]  284 	ld (y),a 
      002897 90 5C            [ 1]  285 	incw y 
      002899 C6 00 01         [ 1]  286 	ld a,in 
      00289C C1 00 03         [ 1]  287 	cp a,count 
      00289F 2B EC            [ 1]  288 	jrmi 41$
      0028A1 20 7D            [ 2]  289 	jra 20$  
      0028A3 A3 00 50         [ 2]  290 5$: cpw x,#LET_IDX 
      0028A6 27 8C            [ 1]  291 	jreq decomp_loop ; down display LET 	
                                    292 ; insert command name 
      0028A8 CD 27 5F         [ 4]  293 	call add_space  
      0028AB 90 89            [ 2]  294 	pushw y
      0028AD CD 29 5B         [ 4]  295 	call cmd_name
      0028B0 90 85            [ 2]  296 	popw y 
      0028B2 CD 27 4A         [ 4]  297 	call cpy_cmd_name
      0028B5 CC 28 34         [ 2]  298 	jp decomp_loop 
      0028B8                        299 6$:
      0028B8 A1 02            [ 1]  300 	cp a,#TK_QSTR 
      0028BA 26 06            [ 1]  301 	jrne 7$
                                    302 ;; TK_QSTR
      0028BC CD 27 83         [ 4]  303 	call cpy_quote  
      0028BF CC 28 34         [ 2]  304 	jp decomp_loop
      0028C2                        305 7$:
      0028C2 A1 03            [ 1]  306 	cp a,#TK_CHAR 
      0028C4 26 0E            [ 1]  307 	jrne 8$
                                    308 ;; TK_CHAR 
      0028C6 A6 5C            [ 1]  309 	ld a,#'\ 
      0028C8 90 F7            [ 1]  310 	ld (y),a 
      0028CA 90 5C            [ 1]  311 	incw y 
      0028CC 9F               [ 1]  312 	ld a,xl 
      0028CD 90 F7            [ 1]  313 	ld (y),a 
      0028CF 90 5C            [ 1]  314 	incw y 
      0028D1 CC 28 34         [ 2]  315 	jp decomp_loop
      0028D4 A1 0B            [ 1]  316 8$: cp a,#TK_COLON 
      0028D6 26 09            [ 1]  317 	jrne 9$
      0028D8 A6 3A            [ 1]  318 	ld a,#':
      0028DA                        319 81$:
      0028DA 90 F7            [ 1]  320 	ld (y),a 
      0028DC 90 5C            [ 1]  321 	incw y 
      0028DE                        322 82$:
      0028DE CC 28 34         [ 2]  323 	jp decomp_loop
      0028E1                        324 9$: 
      0028E1 A1 0A            [ 1]  325 	cp a,#TK_SHARP
      0028E3 22 0A            [ 1]  326 	jrugt 10$ 
      0028E5 A0 06            [ 1]  327 	sub a,#TK_ARRAY 
      0028E7 5F               [ 1]  328 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      0028E8 97               [ 1]  329 	ld xl,a
      0028E9 1C 29 36         [ 2]  330 	addw x,#single_char 
      0028EC F6               [ 1]  331 	ld a,(x)
      0028ED 20 EB            [ 2]  332 	jra 81$ 
      0028EF                        333 10$: 
      0028EF A1 11            [ 1]  334 	cp a,#TK_MINUS 
      0028F1 22 0A            [ 1]  335 	jrugt 11$
      0028F3 A0 10            [ 1]  336 	sub a,#TK_PLUS 
      0028F5 5F               [ 1]  337 	clrw x 
      0028F6 97               [ 1]  338 	ld xl,a 
      0028F7 1C 29 3B         [ 2]  339 	addw x,#add_char 
      0028FA F6               [ 1]  340 	ld a,(x)
      0028FB 20 DD            [ 2]  341 	jra 81$
      0028FD                        342 11$:
      0028FD A1 22            [ 1]  343     cp a,#TK_MOD 
      0028FF 22 0A            [ 1]  344 	jrugt 12$
      002901 A0 20            [ 1]  345 	sub a,#TK_MULT
      002903 5F               [ 1]  346 	clrw x 
      002904 97               [ 1]  347 	ld xl,a 
      002905 1C 29 3D         [ 2]  348 	addw x,#mul_char
      002908 F6               [ 1]  349 	ld a,(x)
      002909 20 CF            [ 2]  350 	jra 81$
      00290B                        351 12$:
      00290B A0 31            [ 1]  352 	sub a,#TK_GT  
      00290D 48               [ 1]  353 	sll a 
      00290E 5F               [ 1]  354 	clrw x 
      00290F 97               [ 1]  355 	ld xl,a 
      002910 1C 29 40         [ 2]  356 	addw x,#relop_str 
      002913 FE               [ 2]  357 	ldw x,(x)
      002914 F6               [ 1]  358 	ld a,(x)
      002915 5C               [ 1]  359 	incw x 
      002916 90 F7            [ 1]  360 	ld (y),a
      002918 90 5C            [ 1]  361 	incw y 
      00291A F6               [ 1]  362 	ld a,(x)
      00291B 26 BD            [ 1]  363 	jrne 81$
      00291D CC 28 34         [ 2]  364 	jp decomp_loop 
      002920                        365 20$: 
      002920 90 7F            [ 1]  366 	clr (y)
      002922 1E 03            [ 2]  367 	ldw x,(STR,sp)
      002924 7B 01            [ 1]  368 	ld a,(BASE_SAV,sp)
      002926 C7 00 0A         [ 1]  369 	ld base,a 
      002929 7B 02            [ 1]  370 	ld a,(WIDTH_SAV,sp)
      00292B C7 00 21         [ 1]  371 	ld tab_width,a
      00292E 72 F2 03         [ 2]  372 	subw y,(STR,sp) 
      002931 90 9F            [ 1]  373 	ld a,yl 
      002933                        374 	_drop VSIZE 
      002933 5B 04            [ 2]    1     addw sp,#VSIZE 
      002935 81               [ 4]  375 	ret 
                                    376 
      002936 40 28 29 2C 23         377 single_char: .byte '@','(',')',',','#'
      00293B 2B 2D                  378 add_char: .byte '+','-'
      00293D 2A 2F 25               379 mul_char: .byte '*','/','%'
      002940 29 4C 29 4E 29 50 29   380 relop_str: .word gt,equal,ge,lt,le,ne 
             53 29 55 29 58
      00294C 3E 00                  381 gt: .asciz ">"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      00294E 3D 00                  382 equal: .asciz "="
      002950 3E 3D 00               383 ge: .asciz ">="
      002953 3C 00                  384 lt: .asciz "<"
      002955 3C 3D 00               385 le: .asciz "<="
      002958 3C 3E 00               386 ne:  .asciz "<>"
                                    387 
                                    388 ;----------------------------------
                                    389 ; search in kword_dict name
                                    390 ; from its execution address 
                                    391 ; input:
                                    392 ;   X       	cmd_index 
                                    393 ; output:
                                    394 ;   X 			cstr*  | 0 
                                    395 ;--------------------------------
                           000001   396 	CMDX=1 
                           000003   397 	LINK=3 
                           000004   398 	VSIZE=4
      00295B                        399 cmd_name:
      00295B                        400 	_vars VSIZE 
      00295B 52 04            [ 2]    1     sub sp,#VSIZE 
      00295D 72 5F 00 0C      [ 1]  401 	clr acc16 
      002961 1F 01            [ 2]  402 	ldw (CMDX,sp),x  
      002963 AE 1E F4         [ 2]  403 	ldw x,#kword_dict	
      002966 1F 03            [ 2]  404 1$:	ldw (LINK,sp),x
      002968 E6 02            [ 1]  405 	ld a,(2,x)
      00296A A4 0F            [ 1]  406 	and a,#15 
      00296C C7 00 0D         [ 1]  407 	ld acc8,a 
      00296F 1C 00 03         [ 2]  408 	addw x,#3
      002972 72 BB 00 0C      [ 2]  409 	addw x,acc16
      002976 FE               [ 2]  410 	ldw x,(x) ; command index  
      002977 13 01            [ 2]  411 	cpw x,(CMDX,sp)
      002979 27 0A            [ 1]  412 	jreq 2$
      00297B 1E 03            [ 2]  413 	ldw x,(LINK,sp)
      00297D FE               [ 2]  414 	ldw x,(x) 
      00297E 1D 00 02         [ 2]  415 	subw x,#2  
      002981 26 E3            [ 1]  416 	jrne 1$
      002983 20 05            [ 2]  417 	jra 9$
      002985 1E 03            [ 2]  418 2$: ldw x,(LINK,sp)
      002987 1C 00 02         [ 2]  419 	addw x,#2 	
      00298A                        420 9$:	_drop VSIZE
      00298A 5B 04            [ 2]    1     addw sp,#VSIZE 
      00298C 81               [ 4]  421 	ret
                                    422 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020,2021,2022  
                                      3 ; This file is part of stm8_tbi 
                                      4 ;
                                      5 ;     stm8_tbi is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_tbi is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_tbi.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19     .module APP_SPACE
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;;  application space 
                                     23 ;;  *** must be last to be linked ***
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26     .area CODE 
      002A00                         27 	.bndry 128 ; align on FLASH block.
                                     28 ; space for user application  
      002A00                         29 app_space::
      002A00 42 43                   30 app_sign: .ascii "BC"  ; signature 
      002A02 00 1F                   31 app_size:  .word 31
      002A04                         32 app: 
                                     33 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     34 ;;  BASIC code demo 'BLINK.BAS' 
                                     35 ;; 10 do btogl $500a,32 pause 250 until qkey bres $500a,32 end 
                                     36 ;; byte code generated by compiler.
                                     37 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A04 00 0A 1F 80 00 26 80    38 .byte 0,10,31,128,0,38,128,0,20,132,80,10,9,132,0,32,128
             00 14 84 50 0A 09 84
             00 20 80
      002A15 00 64 84 00 FA 80 00    39 .byte 0,100,132,0,250,128,0,182,129,0,132,128,0,46
             B6 81 00 84 80 00 2E
                                     40 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        001EF6 R   |     ABS_IDX =  000000 
    ACC24   =  000007     |     ACK     =  000006     |   5 ADCON      001EEC R
    ADCON_ID=  000002     |   5 ADCREAD    001EE0 R   |     ADCREAD_=  000004 
    ADC_CR1 =  005401     |     ADC_CR1_=  000000     |     ADC_CR1_=  000001 
    ADC_CR1_=  000004     |     ADC_CR1_=  000005     |     ADC_CR1_=  000006 
    ADC_CR2 =  005402     |     ADC_CR2_=  000003     |     ADC_CR2_=  000004 
    ADC_CR2_=  000005     |     ADC_CR2_=  000006     |     ADC_CR2_=  000001 
    ADC_CR3 =  005403     |     ADC_CR3_=  000007     |     ADC_CR3_=  000006 
    ADC_CSR =  005400     |     ADC_CSR_=  000006     |     ADC_CSR_=  000004 
    ADC_CSR_=  000000     |     ADC_CSR_=  000001     |     ADC_CSR_=  000002 
    ADC_CSR_=  000003     |     ADC_CSR_=  000007     |     ADC_CSR_=  000005 
    ADC_DRH =  005404     |     ADC_DRL =  005405     |     ADC_TDRH=  005406 
    ADC_TDRL=  005407     |     ADDR    =  000001     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        001ED8 R   |     AND_IDX =  000006     |     AREG    =  000002 
    ARG_OFS =  000002     |     ARROW_LE=  000080     |     ARROW_RI=  000081 
  5 ASC        001ED0 R   |     ASC_IDX =  000008     |     ATTRIB  =  000002 
    AUTORUN_=  004000     |   5 AWU        001EC8 R   |   5 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_IDX =  00000A     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |     BASE    =  000001 
    BASE_SAV=  000001     |     BCNT    =  000001     |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
    BELL    =  000007     |     BINARY  =  000001     |   5 BIT        001EC0 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |     BIT_IDX =  00000C 
    BLOCK_SI=  000080     |     BOOT_ROM=  006000     |     BOOT_ROM=  007FFF 
    BPTR    =  00000B     |   5 BRES       001EB7 R   |     BRES_IDX=  00000E 
    BS      =  000008     |     BSAVE   =  000001     |   5 BSET       001EAE R
    BSET_IDX=  000010     |     BSIZE   =  000005     |   5 BTEST      001EA4 R
    BTEST_ID=  000012     |   5 BTOGL      001E9A R   |     BTOGL_ID=  000014 
    BTW     =  000001     |   5 BYE        001E92 R   |     BYE_IDX =  000016 
    C       =  000001     |     CAN     =  000018     |   5 CANT_DO    0014DB R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CCOMMA  =  000001     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       001E89 R   |     CHAR_IDX=  000018     |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |     CMDX    =  000001 
    CMD_END =  000002     |     CNT     =  000006     |     CNTR    =  000003 
    COMMA   =  00002C     |     CPOS    =  000003     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        001E81 R
    CRH_IDX =  00001A     |   5 CRL        001E79 R   |     CRL_IDX =  00001C 
    CTRL_A  =  000001     |     CTRL_B  =  000002     |     CTRL_C  =  000003 
    CTRL_D  =  000004     |     CTRL_E  =  000005     |     CTRL_F  =  000006 
    CTRL_G  =  000007     |     CTRL_H  =  000008     |     CTRL_I  =  000009 
    CTRL_J  =  00000A     |     CTRL_K  =  00000B     |     CTRL_L  =  00000C 
    CTRL_M  =  00000D     |     CTRL_N  =  00000E     |     CTRL_O  =  00000F 
    CTRL_P  =  000010     |     CTRL_Q  =  000011     |     CTRL_R  =  000012 
    CTRL_S  =  000013     |     CTRL_T  =  000014     |     CTRL_U  =  000015 
    CTRL_V  =  000016     |     CTRL_W  =  000017     |     CTRL_X  =  000018 
    CTRL_Y  =  000019     |     CTRL_Z  =  00001A     |     CTXT_SIZ=  000004 
    CTX_BPTR=  000001     |     CTX_COUN=  000004     |     CTX_IN  =  000003 
    CURR    =  000002     |     CVAR    =  000007     |     CX_BPTR =  000001 
    CX_CNT  =  000004     |     CX_IN   =  000003     |   5 DATA       001E70 R
  5 DATALN     001E65 R   |     DATALN_I=  000020     |     DATA_IDX=  00001E 
    DBG_A   =  000005     |     DBG_CC  =  000006     |     DBG_X   =  000003 
    DBG_Y   =  000001     |     DBL     =  000003     |     DBLDIVDN=  000006 
    DBLHI   =  000001     |     DBLLO   =  000003     |     DBL_SIZE=  000004 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   5 DDR        001E5D R   |     DDR_IDX =  000022 
    DEBUG   =  000000     |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
    DEBUG_PR=  000001     |   5 DEC        001E55 R   |     DEC_IDX =  000024 
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
    DIVDNDHI=  00000B     |     DIVDNDLO=  00000D     |     DIVISOR =  000001 
    DIVISR  =  000007     |     DIVSOR  =  000001     |     DLE     =  000010 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   5 DO         001E4E R
    DOLP_ADR=  000003     |     DOLP_INW=  000005     |     DO_IDX  =  000026 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]

Symbol Table

  5 DREAD      001E44 R   |     DREAD_ID=  000028     |   5 DWRITE     001E39 R
    DWRITE_I=  00002A     |   5 EDIT       001E30 R   |     EDIT_IDX=  00002C 
  5 EEPROM     001E25 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_I=  00002E     |     EEPROM_S=  000800     |     EM      =  000019 
  5 END        001E1D R   |     END_IDX =  000030     |     ENQ     =  000005 
    EOF     =  0000FF     |     EOT     =  000004     |   5 ERASE      001E13 R
    ERASE_ID=  000032     |     ERR_BAD_=  00000A     |     ERR_BUF_=  00000F 
    ERR_CMD_=  000007     |     ERR_DIV0=  000004     |     ERR_DUPL=  000008 
    ERR_MATH=  000003     |     ERR_MEM_=  000001     |     ERR_NONE=  000000 
    ERR_NOT_=  000009     |     ERR_NO_A=  00000B     |     ERR_NO_D=  00000C 
    ERR_NO_F=  00000E     |     ERR_NO_L=  000005     |     ERR_NO_P=  00000D 
    ERR_RUN_=  000006     |     ERR_SYNT=  000002     |     ESC     =  00001B 
    ETB     =  000017     |     ETX     =  000003     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |     FAUTORUN=  000006     |     FBREAK  =  000004 
    FCOMP   =  000005     |   5 FCPU       001E0A R   |     FCPU_IDX=  000034 
    FF      =  00000C     |     FHSE    =  7A1200     |     FHSI    =  F42400 
    FIRST   =  000001     |     FIRST_DA=  000006     |   5 FLASHAPP   001DFD R
    FLASHAPP=  000036     |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLOOP   =  000002     |     FLSI    =  01F400 
  5 FOR        001DF5 R   |     FOR_IDX =  000038     |   5 FREE       001DEC R
    FREE_IDX=  00009A     |     FRUN    =  000000     |     FS      =  00001C 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      001DE2 R   |     GOSUB_ID=  00003A 
  5 GOTO       001DD9 R   |     GOTO_IDX=  00003C     |   5 GPIO       001DD0 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_IDX=  00003E 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  5 HEX        001DC8 R   |     HEX_IDX =  000040     |     HOME    =  000082 
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]

Symbol Table

    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   5 IDR        001DC0 R   |     IDR_IDX =  000042 
  5 IF         001DB9 R   |     IF_IDX  =  000044     |     IN      =  000005 
    INCR    =  000001     |     INP     =  000000     |   5 INPUT      001DAF R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_ID=  000046     |     INPUT_PU=  000001     |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  5 INVERT     001DA4 R   |     INVERT_I=  000048     |     INW     =  000009 
    IPOS    =  000001     |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
  5 IWDGEN     001D99 R   |     IWDGEN_I=  00004A     |   5 IWDGREF    001D8D R
    IWDGREF_=  00004C     |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |     KCHAR   =  000002     |   5 KEY        001D85 R
    KEY_END =  000083     |     KEY_IDX =  00004E     |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        001D7D R
    LET_IDX =  000050     |     LF      =  00000A     |     LIMIT   =  000005 
    LINENO  =  000005     |     LINK    =  000003     |   5 LIST       001D74 R
    LIST_IDX=  000052     |     LL      =  000001     |     LLEN    =  000007 
    LL_HB   =  000001     |     LN_PTR  =  000005     |   5 LOG        001D6C R
    LOG_IDX =  000054     |   5 LSHIFT     001D61 R   |     LSHIFT_I=  000056 
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000002     |   5 MULDIV     001D56 R
    MULDIV_I=  000058     |     MULOP   =  000003     |     N1      =  000001 
    N2      =  000003     |     NAFR    =  004804     |     NAK     =  000015 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        001D4E R
    NEW_IDX =  00005C     |   5 NEXT       001D45 R   |     NEXT_IDX=  00005A 
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NLEN    =  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]

Symbol Table

    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   5 NOT        001D3D R
    NOT_IDX =  00005E     |   5 NO_APP     00151A R   |   5 NO_FLASH   000EE1 R
    NUBC    =  004802     |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  5 NonHandl   000000 R   |   5 ODR        001D35 R   |     ODR_IDX =  000060 
    ONOFF   =  000003     |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         001D2E R   |     OR_IDX  =  000062     |     OUTP    =  000001 
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |     OVFH    =  000001     |     OVFL    =  000002 
    OVRWR   =  000004     |     PA      =  000000     |   5 PAD        001D26 R
    PAD_IDX =  000064     |     PAD_SIZE=  000080     |   5 PAUSE      001D1C R
    PAUSE_ID=  000066     |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |   5 PEEK       001D13 R
    PEEK_IDX=  00006A     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       001D0A R   |     PINP_IDX=  00006C     |     PINVAL  =  000002 
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  5 PMODE      001D00 R   |     PMODE_ID=  000068     |   5 POKE       001CF7 R
    POKE_IDX=  00006E     |     PORT    =  000003     |   5 POUT       001CEE R
    POUT_IDX=  000070     |     PREV    =  000001     |   5 PRINT      001CE4 R
  5 PROG_SIZ   001530 R   |   5 PRTA       001CDB R   |     PRTA_IDX=  000074 
  5 PRTB       001CD2 R   |     PRTB_IDX=  000076     |   5 PRTC       001CC9 R
    PRTC_IDX=  000078     |   5 PRTD       001CC0 R   |     PRTD_IDX=  00007A 
  5 PRTE       001CB7 R   |     PRTE_IDX=  00007C     |   5 PRTF       001CAE R
    PRTF_IDX=  00007E     |   5 PRTG       001CA5 R   |     PRTG_IDX=  000080 
  5 PRTH       001C9C R   |     PRTH_IDX=  000082     |   5 PRTI       001C93 R
    PRTI_IDX=  000084     |     PRT_IDX =  000072     |     PSTR    =  000003 
  5 QKEY       001C8A R   |     QKEY_IDX=  000086     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |     RBT_IDX =  00008A 
  5 READ       001C81 R   |     READ_IDX=  000088     |   5 REBOOT     001C76 R
    REG     =  000001     |     REGA    =  000001     |     REGX    =  000003 
    REGY    =  000005     |     RELOP   =  000003     |   5 REMARK     001C6B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]

Symbol Table

    REM_IDX =  00008C     |   5 RESTORE    001C5F R   |     REST_IDX=  00008E 
    RETL1   =  000001     |   5 RETURN     001C54 R   |     RET_ADDR=  000003 
    RET_IDX =  000090     |     RET_INW =  000005     |   5 RND        001C4C R
    RND_IDX =  000092     |     ROP     =  004800     |     RS      =  00001E 
  5 RSHIFT     001C41 R   |     RSHIFT_I=  000094     |     RST_SR  =  0050B3 
  5 RUN        001C39 R   |   5 RUNNING    00055A R   |     RUN_IDX =  000096 
    RXCHAR  =  000001     |     RX_QUEUE=  000008     |     SAVEB   =  000002 
    SDIVSR  =  000005     |     SFR_BASE=  005000     |     SFR_END =  0057FF 
    SHARP   =  000023     |   5 SHOW       001C30 R   |     SHOW_IDX=  000098 
    SI      =  00000F     |     SIGN    =  000001     |     SKIP    =  000005 
  5 SLEEP      001C26 R   |     SLEEP_ID=  00009C     |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   5 SPIEN      001C1C R
    SPIEN_ID=  0000A0     |   5 SPIRD      001C12 R   |     SPIRD_ID=  00009E 
  5 SPISEL     001C07 R   |     SPISEL_I=  0000A2     |   5 SPIWR      001BFD R
    SPIWR_ID=  0000A4     |     SPI_CR1 =  005200     |     SPI_CR1_=  000003 
    SPI_CR1_=  000000     |     SPI_CR1_=  000001     |     SPI_CR1_=  000007 
    SPI_CR1_=  000002     |     SPI_CR1_=  000006     |     SPI_CR2 =  005201 
    SPI_CR2_=  000007     |     SPI_CR2_=  000006     |     SPI_CR2_=  000005 
    SPI_CR2_=  000004     |     SPI_CR2_=  000002     |     SPI_CR2_=  000000 
    SPI_CR2_=  000001     |     SPI_CRCP=  005205     |     SPI_CS_B=  000005 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_SR_B=  000007     |     SPI_SR_C=  000004 
    SPI_SR_M=  000005     |     SPI_SR_O=  000006     |     SPI_SR_R=  000000 
    SPI_SR_T=  000001     |     SPI_SR_W=  000003     |     SPI_TXCR=  005207 
    SQUOT   =  000006     |     SRC     =  000003     |     STACK_EM=  0017FF 
    STACK_SI=  0000A0     |   5 STEP       001BF4 R   |     STEP_IDX=  0000A6 
  5 STOP       001BEB R   |     STOP_IDX=  0000A8     |     STR     =  000003 
  5 STR_BYTE   00153F R   |     STX     =  000002     |     SUB     =  00001A 
    SUP     =  000084     |     SWIM_CSR=  007F80     |     SYN     =  000016 
    TAB     =  000009     |     TABW    =  000004     |     TAB_WIDT=  000004 
    TCHAR   =  000001     |     TEMP    =  000003     |     TIB_SIZE=  000050 
    TICK    =  000027     |   5 TICKS      001BE1 R   |     TICKS_ID=  0000AA 
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CLK=  00F424     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   5 TIMEOUT    001BD5 R   |   5 TIMER      001BCB R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]

Symbol Table

    TIMER_ID=  0000AC     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000006     |     TK_CFUNC=  000082     |     TK_CHAR =  000003 
    TK_CMD  =  000080     |     TK_COLON=  00000B     |     TK_COMMA=  000009 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LE   =  000036     |     TK_LPARE=  000007     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000008     |     TK_SHARP=  00000A 
    TK_VAR  =  000085     |     TMROUT_I=  0000AE     |   5 TO         001BC4 R
  5 TONE       001BBB R   |     TONE_IDX=  0000B2     |     TO_IDX  =  0000B0 
  5 Timer4Up   000040 R   |     U1      =  000001     |     U8      =  000003 
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART2   =  000001     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBC     =  004801 
  5 UBOUND     001BB0 R   |     UBOUND_I=  0000B4     |   5 UBTN_Han   000079 R
  5 UFLASH     001BA5 R   |     UFLASH_I=  0000B6     |   5 UNTIL      001B9B R
    UNTIL_ID=  0000B8     |     US      =  00001F     |   5 USER_ABO   00008C R
  5 USR        001B93 R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     USR_IDX =  0000BA     |   5 Uart1RxH   00000F R
  5 UserButt   000055 R   |     VAR_ADDR=  000006     |     VSISE   =  000003 
    VSIZ    =  000002     |     VSIZE   =  000004     |     VT      =  00000B 
  5 WAIT       001B8A R   |     WAIT_IDX=  0000BC     |     WCNT    =  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]

Symbol Table

    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   5 WORDS      001B80 R   |     WORDS_ID=  0000BE 
  5 WRITE      001B76 R   |     WRITE_ID=  0000C0     |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XFIRST  =  000001     |     XMASK   =  000001 
    XOFF    =  000013     |     XON     =  000011     |   5 XOR        001B6E R
    XOR_IDX =  0000C2     |     XREG    =  000003     |     XSAVE   =  000001 
    YSAVE   =  000004     |   5 abs        00169E R   |   1 acc16      00000C GR
  1 acc24      00000B GR  |   1 acc8       00000D GR  |   5 accept_c   002260 R
  5 add_char   00293B R   |   5 add_spac   00275F R   |   5 analog_r   001303 R
  5 app        002A04 R   |   5 app_sign   002A00 R   |   5 app_size   002A02 R
  5 app_spac   002A00 GR  |   5 arduino_   001794 R   |   5 arg_list   000BE1 R
  1 array_si   00001E R   |   5 ascii      00158F R   |   5 at_tst     0025CD R
  5 atoi24     00099B GR  |   5 atoi_exi   000A01 R   |   5 awu        00164F R
  5 awu02      001659 R   |   5 bad_port   0015F0 R   |   1 base       00000A GR
  1 basicptr   000004 GR  |   5 beep       001290 R   |   5 beep_1kh   00127A GR
  5 bin_exit   002493 R   |   5 bit_and    0016B2 R   |   5 bit_or     0016CA R
  5 bit_rese   001052 R   |   5 bit_set    001042 R   |   5 bit_test   001073 R
  5 bit_togg   001063 R   |   5 bit_xor    0016E2 R   |   5 bitmask    001900 R
  5 bkslsh_t   00257A R   |   5 bksp       001FFE R   |   5 block_er   0001B7 R
  5 break_po   0013D0 R   |   5 bye        001628 R   |   5 char       00157D R
  5 clear_ba   0005A3 R   |   5 clear_va   000407 R   |   5 clock_in   0000A7 R
  5 cmd_end    001273 R   |   5 cmd_line   0007C0 R   |   5 cmd_name   00295B R
  5 code_add   001EFC GR  |   5 cold_sta   00047E R   |   5 colon_ts   0025A1 R
  5 comma_ts   0025AC R   |   5 comp_msg   000718 R   |   5 compile    0026D2 GR
  5 const_cr   0019B4 R   |   5 const_cr   0019BA R   |   5 const_dd   0019AE R
  5 const_ee   0019CC R   |   5 const_id   0019A8 R   |   5 const_in   0019C6 R
  5 const_od   0019A2 R   |   5 const_ou   0019C0 R   |   5 const_po   00196C R
  5 const_po   001972 R   |   5 const_po   001978 R   |   5 const_po   00197E R
  5 const_po   001984 R   |   5 const_po   00198A R   |   5 const_po   001990 R
  5 const_po   001996 R   |   5 const_po   00199C R   |   5 convert_   00240A R
  5 convert_   001FC2 R   |   5 copy_com   002602 R   |   1 count      000003 GR
  5 cp_loop    000B90 R   |   5 cpy_cmd_   00274A R   |   5 cpy_quot   002783 R
  5 create_g   002334 R   |   5 cs_high    001B61 R   |   5 cstk_pro   000D9B R
  5 dash_tst   0025C2 R   |   5 data       0019D2 R   |   1 data_len   000009 R
  5 data_lin   0019D8 R   |   1 data_ofs   000008 R   |   1 data_ptr   000006 R
  5 data_sea   001A19 R   |   5 dbl_sign   000AEA R   |   5 dec_base   000DC7 R
  5 decomp_l   002834 R   |   5 decompil   0027ED GR  |   5 del_line   002307 R
  5 delete_l   0020EB R   |   5 delete_n   00200E R   |   5 delete_u   0020B0 R
  5 digital_   001337 R   |   5 digital_   001367 R   |   5 div32_16   000AF4 R
  5 divide     000B4B R   |   5 divu24_8   00090A R   |   5 dneg       000ADF R
  5 do_loop    001929 R   |   5 do_progr   0001AA R   |   5 edit       000EB7 R
  5 enable_i   0018AA R   |   5 eql_tst    002657 R   |   5 equal      00294E R
  5 erase      00142F R   |   5 erase_fl   0001D6 R   |   5 err_bad_   000683 R
  5 err_buf_   0006F9 R   |   5 err_cmd_   000647 R   |   5 err_div0   00060C R
  5 err_dupl   000661 R   |   5 err_math   0005F3 R   |   5 err_mem_   0005D8 R
  5 err_msg    0005B8 R   |   5 err_no_a   00068F R   |   5 err_no_d   0006C2 R
  5 err_no_f   0006E6 R   |   5 err_no_l   00061B R   |   5 err_no_p   0006D2 R
  5 err_not_   000672 R   |   5 err_run_   000631 R   |   5 err_synt   0005E5 R
  5 escaped    00241F GR  |   5 expect     000BCF R   |   5 expr_exi   000D26 R
  5 expressi   000CE0 R   |   5 factor     000C31 R   |   1 farptr     000016 R
  5 fcpu       00172C R   |   5 final_te   002259 R   |   5 first_li   000E64 R
  1 flags      000020 GR  |   5 flash_ap   00145C R   |   5 for        0010CE R
  5 free       000DCC R   |   1 free_ram   000064 R   |   5 func_arg   000BDC R
  5 func_not   00189D R   |   5 ge         002950 R   |   5 get_arra   000C0C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]

Symbol Table

  5 get_cmd_   0027CC R   |   5 get_esca   001FCE R   |   5 get_targ   001198 R
  5 get_tick   001698 R   |   5 get_toke   002513 GR  |   5 getc       0002D1 GR
  5 gosub      0011D9 R   |   5 goto       0011BE R   |   5 gpio       0015CB R
  5 gt         00294C R   |   5 gt_tst     002662 R   |   5 hex_base   000DC2 R
  5 hex_dump   00035E R   |   5 if         0010BA R   |   1 in         000001 GR
  1 in.saved   000002 GR  |   1 in.w       000000 GR  |   5 incr_far   001413 R
  5 input_ex   001014 R   |   5 input_lo   000FA9 R   |   5 input_va   000FA7 R
  5 insert_c   00206D R   |   5 insert_l   002360 R   |   5 insert_l   0023CF R
  5 interp_l   000801 R   |   5 interpre   0007DC R   |   5 invert     00191A R
  5 is_alnum   00042F GR  |   5 is_alpha   000415 GR  |   5 is_digit   000426 GR
  5 itoa       00089F GR  |   5 itoa_loo   0008C4 R   |   5 jp_to_ta   0011CC R
  5 key        0015B6 R   |   5 kw_loop    0024AF R   |   5 kword_di   001EF4 GR
  5 kword_en   001B6C R   |   5 le         002955 R   |   5 leading_   0018F0 R
  5 let        000DEF GR  |   5 let_arra   000DFD R   |   5 let_var    000E00 R
  5 lines_sk   000E67 R   |   5 list       000E22 R   |   5 list_exi   000EA9 R
  5 list_loo   000E87 R   |   5 log2       0018E5 R   |   5 logical_   001893 R
  5 long_div   000AC7 R   |   5 loop_bac   00117B R   |   1 loop_dep   00001D R
  5 loop_don   001190 R   |   5 lshift     0016FA R   |   5 lt         002953 R
  5 lt_tst     00268B R   |   5 modulo     000B61 R   |   5 move       0003C5 GR
  5 move_dow   0003E3 R   |   5 move_era   00013C R   |   5 move_exi   000404 R
  5 move_lef   002045 R   |   5 move_loo   0003E8 R   |   5 move_prg   000170 R
  5 move_rig   002053 R   |   5 move_up    0003D5 R   |   5 mul_char   00293D R
  5 muldiv     000B66 R   |   5 multiply   000A92 R   |   5 mulu24_8   000932 R
  5 nbr_tst    002546 R   |   5 ne         002958 R   |   5 neg_acc2   00096C R
  5 new        0013EE R   |   5 next       00114E R   |   5 next_lin   0007E4 R
  5 next_tok   000828 GR  |   5 no_match   000BA2 R   |   5 other      0026B4 R
  5 overwrit   002285 R   |   3 pad        0016E0 GR  |   5 pad_ref    001B66 R
  5 parse_bi   002471 R   |   5 parse_in   002427 R   |   5 parse_ke   0024AE R
  5 parse_qu   0023D2 R   |   5 pause      00163C R   |   5 pause02    001646 R
  5 peek       0010A9 R   |   5 pin_mode   001738 R   |   5 plus_tst   00262B R
  5 poke       00109A R   |   5 power_ad   0012C7 R   |   5 prcnt_ts   00264C R
  5 print      000F21 R   |   5 print_ex   000F7B R   |   5 print_he   0022BA GR
  5 print_in   000883 R   |   5 printxy    000A05 R   |   5 prog_siz   000E1A R
  5 program_   000150 R   |   5 program_   000170 R   |   5 prt_basi   000F01 R
  5 prt_loop   000F25 R   |   5 prt_tok    0002F0 R   |   5 prti24     000893 R
  1 ptr16      000017 GR  |   1 ptr8       000018 R   |   5 putc       0002C1 GR
  5 puts       001FF4 GR  |   5 qgetc      0002CA GR  |   5 qkey       0015BE GR
  5 qmark_ts   0025D8 R   |   5 qsign      001455 R   |   5 random     0017B4 R
  5 read       001A55 R   |   5 read01     001A57 R   |   5 readln     0020F9 GR
  5 readln_l   002106 R   |   5 readln_q   0022A2 R   |   5 refresh_   0018E0 R
  5 rel_exit   000D7E R   |   5 relation   000D29 R   |   5 relop_st   002940 R
  5 remark     001017 GR  |   5 reset_co   000F23 R   |   5 rest_con   000F97 R
  5 restore    001A06 R   |   5 return     0011F9 R   |   5 right_al   002771 GR
  5 row_alig   0013F8 R   |   5 row_eras   000115 R   |   5 row_eras   00013C R
  5 row_loop   000341 R   |   5 rparnt_t   002596 R   |   5 rshift     001713 R
  1 rsign      000060 R   |   1 rsize      000062 R   |   5 rt_msg     000706 R
  5 run        001217 R   |   5 run_app    00051D R   |   5 run_it     00124C R
  1 rx1_head   00002A R   |   1 rx1_queu   000022 R   |   1 rx1_tail   00002B R
  5 save_con   000F87 R   |   5 scan_blo   001421 R   |   5 search_d   000B82 GR
  5 search_e   000BCC R   |   5 search_l   0022DC GR  |   5 search_l   0022EB R
  5 search_n   000B86 R   |   1 seedx      000012 R   |   1 seedy      000014 R
  5 select_p   001784 R   |   5 send_esc   00201C R   |   5 send_par   002027 R
  5 set_time   001881 R   |   5 sharp_ts   0025B7 R   |   5 show       000D81 R
  5 show_row   00032F R   |   5 single_c   002936 R   |   5 skip       002500 R
  5 slash_ts   002641 R   |   5 sleep      001631 R   |   5 software   000438 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]

Symbol Table

  5 spaces     002061 GR  |   5 spi_clea   001AFA R   |   5 spi_disa   001AE2 R
  5 spi_enab   001AAF R   |   5 spi_rcv_   001B1C R   |   5 spi_read   001B47 R
  5 spi_sele   001B4F R   |   5 spi_send   001B06 R   |   5 spi_writ   001B27 R
  3 stack_fu   001760 GR  |   3 stack_un   001800 R   |   5 star_tst   002636 R
  5 step       001127 R   |   5 stop       0013A2 R   |   5 store_lo   00113B R
  5 str_matc   000BAF R   |   5 str_tst    002536 R   |   5 strcmp     0003A6 R
  5 strcpy     0003B7 GR  |   5 strlen     00039B GR  |   5 syntax_e   000739 GR
  1 tab_widt   000021 GR  |   5 tb_error   00073B GR  |   5 term       000C8E R
  5 term01     000C96 R   |   5 term_exi   000CDD R   |   3 tib        001690 GR
  5 tick_tst   0025F0 R   |   1 ticks      00000E R   |   5 timeout    001890 R
  1 timer      000010 GR  |   5 timer2_i   0000BD R   |   5 timer4_i   0000CA R
  5 tk_id      000729 R   |   5 to         0010F7 R   |   5 to_eepro   000193 R
  5 to_flash   0001A7 R   |   5 to_hex_c   0022D1 GR  |   5 to_upper   00098F GR
  5 token_ch   0026CB R   |   5 token_ex   0026CF R   |   5 token_ms   000327 R
  5 tone       001283 R   |   5 try_next   001A45 R   |   1 txtbgn     000019 GR
  1 txtend     00001B GR  |   5 uart1_ge   0002D1 GR  |   5 uart1_in   00027E R
  5 uart1_pu   0002C1 GR  |   5 uart1_qg   0002CA GR  |   5 uart1_se   00028E R
  5 ubound     000DE5 R   |   5 udiv32_1   000AB5 R   |   5 uflash     0015F5 R
  5 umstar     000A58 R   |   5 unlock_e   0000DF R   |   5 unlock_f   0000FA R
  5 until      00193E R   |   5 user_int   000068 R   |   5 usr        00160B R
  5 var_name   0027C4 GR  |   1 vars       00002C GR  |   5 wait       00101D R
  5 warm_ini   000585 R   |   5 warm_sta   0007BD R   |   5 words      00181B R
  5 words_co   00186B R   |   5 write      001546 R   |   5 write_bl   00025B R
  5 write_by   0001E1 R   |   5 write_ee   00021D R   |   5 write_ex   000256 R
  5 write_fl   000207 R   |   5 write_ro   000184 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     64   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   2A23   flags    0

