ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of PABasic 
                                      4 ;
                                      5 ;     PABasic is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     PABasic is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with PABasic.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 ;--------------------------------------
                                     19 ;   Implementation of Tiny BASIC
                                     20 ;   REF: https://en.wikipedia.org/wiki/Li-Chen_Wang#Palo_Alto_Tiny_BASIC
                                     21 ;   Palo Alto BASIC is 4th version of TinyBasic
                                     22 ;   DATE: 2019-12-17
                                     23 ;
                                     24 ;--------------------------------------------------
                                     25 
                                     26     .module STM8_TBI
                                     27 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/ascii.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        ;-------------------------------------------------------
                                        ;     ASCII control  values
                                        ;     CTRL_x   are VT100 keyboard values  
                                        ; REF: https://en.wikipedia.org/wiki/ASCII    
                                        ;-------------------------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/gen_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; free space on stack
                                            .macro _drop n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        	.include "tbi_macros.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of STM8_NUCLEO 
                                        ;
                                        ;     STM8_NUCLEO is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     STM8_NUCLEO is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with STM8_NUCLEO.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;--------------------------------------
                                 
                                 
                                                ; keyword types 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   constantes related to Arduino 
                                        ;   API mapping 
                                        ;-------------------------------------
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;       token attribute
                                        ;--------------------------------------
                                                ; bits 4:5 identify token group 
                                                ; 0x0n -> miscelinous 
                                                ; 0x1n -> +|- operators 
                                                ; 0x2n -> *|/|% operators
                                                ; 0x3n -> relational operators 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                                ; don't change these token values 
                                                ; values chosen to be used as a mask.
                                                ; bit 7   1 for dictionary words else 0 
                                                ; bits 6  always 0 
                                                ; bits 5:4 identify group 
                                                ; bits 3:0 token identifier inside group  
                                 
                                 
                                 
                                 
                                 
                                 
                                                ; token groups 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   error codes 
                                        ;--------------------------------------
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ;--------------------------------------
                                        ;   assembler flags 
                                        ;-------------------------------------
                                 
                                        
                                 
                                        
                                            .macro _usec_dly n 
                                            
                                            ; load X register with 
                                            ; entry point of dictionary
                                            ; before calling 'search_dict'
                                            .macro _ldx_dict dict_name
                                        
                                            ; reset BASIC pointer
                                            ; to beginning of last token
                                            ; parsed 
                                            .macro _unget_token 
                                        
                                        ;-------------------------------
                                        ;  macros used to help debugging
                                        ;-------------------------------
                                 
                                            .macro _dbg 
                                        
                                            .macro _nodbg
                                        
                                 
                                 
                                 
                                 
                                            .macro _dbg_save_regs 
                                        
                                            .macro _dbg_restore_regs 
                                        
                                            .macro _dbg_getc 
                                        
                                            .macro _dbg_putc 
                                        
                                            .macro _dbg_puts 
                                        
                                            .macro _dbg_prti24 
                                        
                                            .macro _dbg_prt_regs
                                        
                                            .macro _dbg_peek addr 
                                        
                                            .macro _dbg_parser_init 
                                        
                                            .macro _dbg_readln
                                        
                                            .macro _dbg_number
                                        
                                            .macro _dbg_nextword
                                        
                                            .macro _dbg_dots 
                                        
                                            .macro _dbg_trap
                                        
                                            .macro _dbg_mark n  
                                            
                                            .macro _dbg_prt_var var 
                                        
                                            .macro _dbg_show 
                                        
                                            ; software reset 
                                            .macro _swreset
                                     34     .list 
                                     35 
                                     36 ;_dbg 
                                     37 
                                     38 ;--------------------------------------
                                     39     .area DATA 
                                     40 ;--------------------------------------	
                                     41 
                           000050    42 	TIB_SIZE=80
                           000080    43     PAD_SIZE=128
                           0000A0    44 	STACK_SIZE=160
                           0017FF    45 	STACK_EMPTY=RAM_SIZE-1  
                           000000    46 	FRUN=0 ; flags run code in variable flags
                           000001    47 	FTRAP=1 ; inside trap handler 
                           000002    48 	FLOOP=2 ; FOR loop in preparation 
                           000003    49 	FSLEEP=3 ; halt produit par la commande SLEEP 
                           000004    50 	FBREAK=4 ; break point flag 
                           000005    51 	FCOMP=5  ; compiling flags 
                           000006    52 	FAUTORUN=6; auto start program running 
                                     53 
                           004000    54 	AUTORUN_NAME=0x4000 ; address in EEPROM where auto run file name is saved 
                                     55 
                           000006    56     FIRST_DATA_ITEM=6 ; first DATA item offset on line.
                                     57 
                           007FFF    58 	MAX_LINENO=0x7fff; BASIC maximum line number 
                                     59 
      000000                         60 in.w:  .blkb 1 ; parser position in text line high-byte 
      000001                         61 in:    .blkb 1 ; low byte of in.w 
      000002                         62 in.saved: .blkb 1 ; set by get_token before parsing next token, used by unget_token
      000003                         63 count: .blkb 1 ; current BASIC line length and tib text length  
      000004                         64 basicptr:  .blkb 2  ; point to current BASIC line address.
      000006                         65 data_ptr:  .blkw 1  ; point to DATA address
      000008                         66 data_ofs:  .blkb 1  ; index to next data item 
      000009                         67 data_len:  .blkb 1  ; length of data line 
      00000A                         68 base:  .blkb 1 ; nemeric base used to print integer 
      00000B                         69 acc24: .blkb 1 ; 24 bit accumulator upper-byte 
      00000C                         70 acc16: .blkb 1 ; 16 bit accumulator, acc24 high-byte
      00000D                         71 acc8:  .blkb 1 ;  8 bit accumulator, acc24 low-byte  
      00000E                         72 ticks: .blkw 1 ; milliseconds ticks counter (see Timer4UpdateHandler)
      000010                         73 timer: .blkw 1 ;  milliseconds count down timer 
      000012                         74 seedx: .blkw 1  ; xorshift 16 seed x  used by RND() function 
      000014                         75 seedy: .blkw 1  ; xorshift 16 seed y  used by RND() funcion
      000016                         76 farptr: .blkb 1 ; 24 bits pointer used by file system, upper-byte
      000017                         77 ptr16:  .blkb 1 ; 16 bits pointer , farptr high-byte 
      000018                         78 ptr8:   .blkb 1 ; 8 bits pointer, farptr low-byte  
      000019                         79 ffree: .blkb 3 ; flash free address ; file system free space pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



      00001C                         80 txtbgn: .blkw 1 ; tokenized BASIC text beginning address 
      00001E                         81 txtend: .blkw 1 ; tokenized BASIC text end address 
      000020                         82 loop_depth: .blkb 1 ; level of nested loop. Conformity check   
      000021                         83 array_size: .blkw 1 ; array size, free RAM left after BASIC code.  
      000023                         84 flags: .blkb 1 ; various boolean flags
      000024                         85 tab_width: .blkb 1 ; print colon width (default 4)
      000025                         86 rx_char: .blkb 1 ; last received character from UART1 
      000026                         87 vars: .blkw 26 ; BASIC variables A-Z, keep it as but last .
                                     88 ; keep 'free_ram' as last variable 
      00005A                         89 free_ram: ; from here RAM free for BASIC text 
                                     90 
                                     91 ;;-----------------------------------
                                     92     .area SSEG (ABS)
                                     93 ;; working buffers and stack at end of RAM. 	
                                     94 ;;-----------------------------------
      001690                         95     .org RAM_SIZE-STACK_SIZE-TIB_SIZE-PAD_SIZE 
      001690                         96 tib: .ds TIB_SIZE             ; transaction input buffer
      0016E0                         97 pad: .ds PAD_SIZE             ; working buffer
      001760                         98 stack_full: .ds STACK_SIZE   ; control stack 
      001800                         99 stack_unf: ; stack underflow ; control_stack bottom 
                                    100 
                                    101 ;;--------------------------------------
                                    102     .area HOME 
                                    103 ;; interrupt vector table at 0x8000
                                    104 ;;--------------------------------------
      000000 82 00 04 EF            105     int cold_start			; RESET vector 
                           000000   106 .if DEBUG
                                    107 	int TrapHandler 		;TRAP  software interrupt
                           000001   108 .else
      000004 82 00 00 00            109 	int NonHandledInterrupt ;TRAP  software interrupt
                                    110 .endif
      000008 82 00 00 00            111 	int NonHandledInterrupt ;int0 TLI   external top level interrupt
      00000C 82 00 00 01            112 	int AWUHandler          ;int1 AWU   auto wake up from halt
      000010 82 00 00 00            113 	int NonHandledInterrupt ;int2 CLK   clock controller
      000014 82 00 00 00            114 	int NonHandledInterrupt ;int3 EXTI0 gpio A external interrupts
      000018 82 00 00 00            115 	int NonHandledInterrupt ;int4 EXTI1 gpio B external interrupts
      00001C 82 00 00 00            116 	int NonHandledInterrupt ;int5 EXTI2 gpio C external interrupts
      000020 82 00 00 00            117 	int NonHandledInterrupt ;int6 EXTI3 gpio D external interrupts
      000024 82 00 00 4D            118 	int UserButtonHandler   ;int7 EXTI4 gpio E external interrupts
      000028 82 00 00 00            119 	int NonHandledInterrupt ;int8 beCAN RX interrupt
      00002C 82 00 00 00            120 	int NonHandledInterrupt ;int9 beCAN TX/ER/SC interrupt
      000030 82 00 00 00            121 	int NonHandledInterrupt ;int10 SPI End of transfer
      000034 82 00 00 00            122 	int NonHandledInterrupt ;int11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 00            123 	int NonHandledInterrupt ;int12 TIM1 capture/compare
      00003C 82 00 00 00            124 	int NonHandledInterrupt ;int13 TIM2 update /overflow
      000040 82 00 00 00            125 	int NonHandledInterrupt ;int14 TIM2 capture/compare
      000044 82 00 00 00            126 	int NonHandledInterrupt ;int15 TIM3 Update/overflow
      000048 82 00 00 00            127 	int NonHandledInterrupt ;int16 TIM3 Capture/compare
      00004C 82 00 00 00            128 	int NonHandledInterrupt ;int17 UART1 TX completed
      000050 82 00 00 0F            129 	int Uart1RxHandler		;int18 UART1 RX full ; user communication channel.
      000054 82 00 00 00            130 	int NonHandledInterrupt ;int19 I2C 
      000058 82 00 00 00            131 	int NonHandledInterrupt ;int20 UART1 TX completed
      00005C 82 00 00 00            132 	int NonHandledInterrupt ;int21 UART1 RX full
      000060 82 00 00 00            133 	int NonHandledInterrupt ;int22 ADC2 end of conversion
      000064 82 00 00 37            134 	int Timer4UpdateHandler	;int23 TIM4 update/overflow ; used as msec ticks counter
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



      000068 82 00 00 00            135 	int NonHandledInterrupt ;int24 flash writing EOP/WR_PG_DIS
      00006C 82 00 00 00            136 	int NonHandledInterrupt ;int25  not used
      000070 82 00 00 00            137 	int NonHandledInterrupt ;int26  not used
      000074 82 00 00 00            138 	int NonHandledInterrupt ;int27  not used
      000078 82 00 00 00            139 	int NonHandledInterrupt ;int28  not used
      00007C 82 00 00 00            140 	int NonHandledInterrupt ;int29  not used
                                    141 
                                    142 ;---------------------------------------
                                    143     .area CODE
                                    144 ;---------------------------------------
                           000000   145 .if DEBUG
                                    146 .asciz "STM8_TBI" ; I like to put module name here.
                                    147 .endif 
                                    148 
                                    149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    150 ; non handled interrupt 
                                    151 ; reset MCU
                                    152 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000000                        153 NonHandledInterrupt:
      000000 71                     154     .byte 0x71  ; invalid opcode reinitialize MCU
                                    155 
                                    156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    157 ; auto wakeup from halt
                                    158 ; at iret, program continue 
                                    159 ; after hatl instruction
                                    160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000001                        161 AWUHandler:
      000001 72 19 50 F0      [ 1]  162 	bres AWU_CSR,#AWU_CSR_AWUEN
      000005 55 00 3F 50 F1   [ 1]  163 	mov AWU_APR,0x3F
      00000A 72 5F 50 F2      [ 1]  164 	clr AWU_TBR 
      00000E 80               [11]  165 	iret
                                    166 
                                    167 ;--------------------------
                                    168 ; UART1 receive character
                                    169 ; CTRL-C (ASCII 3)
                                    170 ; cancel program execution
                                    171 ; and fall back to command line
                                    172 ;--------------------------
      00000F                        173 Uart1RxHandler:
      00000F 72 0B 52 30 FB   [ 2]  174 	btjf UART1_SR,#UART_SR_RXNE,.
      000014 C6 52 31         [ 1]  175 	ld a,UART1_DR 
      000017 A1 03            [ 1]  176 	cp a,#CTRL_C 
      000019 26 07            [ 1]  177 	jrne 1$
      00001B 72 5F 00 25      [ 1]  178 	clr rx_char 
      00001F CC 00 60         [ 2]  179 	jp user_interrupted
      000022                        180 1$:
      000022 A1 18            [ 1]  181 	cp a,#CAN ; CTRL_X 
      000024 26 03            [ 1]  182 	jrne 2$
      000026 CC 04 EF         [ 2]  183 	jp cold_start 	
      000029                        184 2$: 
      000029 A1 1A            [ 1]  185 	cp a,#CTRL_Z
      00002B 26 06            [ 1]  186 	jrne 3$
      00002D CD 05 B4         [ 4]  187 	call cancel_autorun 
      000030 CC 04 EF         [ 2]  188 	jp cold_start 
      000033 C7 00 25         [ 1]  189 3$:	ld rx_char,a 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



      000036 80               [11]  190 	iret 
                                    191 
                                    192 ;------------------------------------
                                    193 ; software interrupt handler  
                                    194 ;------------------------------------
                           000000   195 .if DEBUG 
                                    196 TrapHandler:
                                    197 	bset flags,#FTRAP 
                                    198 	call print_registers
                                    199 	call cmd_itf
                                    200 	bres flags,#FTRAP 	
                                    201 	iret
                                    202 .endif 
                                    203 
                                    204 ;------------------------------
                                    205 ; TIMER 4 is used to maintain 
                                    206 ; a milliseconds 'ticks' counter
                                    207 ; and decrement 'timer' varaiable
                                    208 ;--------------------------------
      000037                        209 Timer4UpdateHandler:
      000037 72 5F 53 42      [ 1]  210 	clr TIM4_SR 
      00003B CE 00 0E         [ 2]  211 	ldw x,ticks
      00003E 5C               [ 2]  212 	incw x
      00003F CF 00 0E         [ 2]  213 	ldw ticks,x 
      000042 CE 00 10         [ 2]  214 	ldw x,timer
      000045 5D               [ 2]  215 	tnzw x 
      000046 27 04            [ 1]  216 	jreq 1$
      000048 5A               [ 2]  217 	decw x 
      000049 CF 00 10         [ 2]  218 	ldw timer,x 
      00004C                        219 1$:	
      00004C 80               [11]  220 	iret 
                                    221 
                                    222 
                                    223 ;------------------------------------
                                    224 ; Triggered by pressing USER UserButton 
                                    225 ; on NUCLEO card.
                                    226 ; This is used to abort a progam lock 
                                    227 ; in infinite loop. 
                                    228 ;------------------------------------
      00004D                        229 UserButtonHandler:
                                    230 ; wait button release
      00004D 5F               [ 1]  231 	clrw x
      00004E 5A               [ 2]  232 1$: decw x 
      00004F 26 FD            [ 1]  233 	jrne 1$
      000051 72 09 50 15 F8   [ 2]  234 	btjf USR_BTN_PORT,#USR_BTN_BIT, 1$
                                    235 ; if MCU suspended by SLEEP resume program
      000056 72 07 00 23 05   [ 2]  236     btjf flags,#FSLEEP,2$
      00005B 72 17 00 23      [ 1]  237 	bres flags,#FSLEEP 
      00005F 80               [11]  238 	iret
      000060                        239 2$:	
      000060                        240 user_interrupted:
      000060 72 00 00 23 02   [ 2]  241     btjt flags,#FRUN,4$
      000065 20 13            [ 2]  242 	jra UBTN_Handler_exit 
      000067                        243 4$:	; program interrupted by user 
      000067 72 11 00 23      [ 1]  244 	bres flags,#FRUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      00006B AE 00 82         [ 2]  245 	ldw x,#USER_ABORT
      00006E CD 01 D7         [ 4]  246 	call puts 
      000071 CE 00 04         [ 2]  247 	ldw x,basicptr 
      000074 C6 00 01         [ 1]  248 	ld a,in 
      000077 CD 12 91         [ 4]  249 	call prt_basic_line
      00007A                        250 UBTN_Handler_exit:
      00007A AE 17 FF         [ 2]  251     ldw x,#STACK_EMPTY 
      00007D 94               [ 1]  252     ldw sp,x
      00007E 9A               [ 1]  253 	rim 
      00007F CC 08 1C         [ 2]  254 	jp warm_start
                                    255 
      000082 0A 50 72 6F 67 72 61   256 USER_ABORT: .asciz "\nProgram aborted by user.\n"
             6D 20 61 62 6F 72 74
             65 64 20 62 79 20 75
             73 65 72 2E 0A 00
                                    257 
                                    258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    259 ;    peripherals initialization
                                    260 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    261 
                                    262 ;----------------------------------------
                                    263 ; inialize MCU clock 
                                    264 ; input:
                                    265 ;   A 		source  HSI | 1 HSE 
                                    266 ;   XL      CLK_CKDIVR , clock divisor 
                                    267 ; output:
                                    268 ;   none 
                                    269 ;----------------------------------------
      00009D                        270 clock_init:	
      00009D C1 50 C3         [ 1]  271 	cp a,CLK_CMSR 
      0000A0 27 0C            [ 1]  272 	jreq 2$ ; no switching required 
                                    273 ; select clock source 
      0000A2 72 12 50 C5      [ 1]  274 	bset CLK_SWCR,#CLK_SWCR_SWEN
      0000A6 C7 50 C4         [ 1]  275 	ld CLK_SWR,a
      0000A9 C1 50 C3         [ 1]  276 1$:	cp a,CLK_CMSR
      0000AC 26 FB            [ 1]  277 	jrne 1$
      0000AE                        278 2$: 	
                                    279 ; HSI and cpu clock divisor 
      0000AE 9F               [ 1]  280 	ld a,xl 
      0000AF C7 50 C6         [ 1]  281 	ld CLK_CKDIVR,a  
      0000B2 81               [ 4]  282 	ret
                                    283 
                                    284 ;----------------------------------
                                    285 ; TIMER2 used as audio tone output 
                                    286 ; on port D:5.
                                    287 ; channel 1 configured as PWM mode 1 
                                    288 ;-----------------------------------  
                           00F424   289 TIM2_CLK_FREQ=62500
      0000B3                        290 timer2_init:
      0000B3 72 1A 50 C7      [ 1]  291 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM2 ; enable TIMER2 clock 
      0000B7 35 60 53 05      [ 1]  292  	mov TIM2_CCMR1,#(6<<TIM2_CCMR_OCM) ; PWM mode 1 
      0000BB 35 08 53 0C      [ 1]  293 	mov TIM2_PSCR,#8 ; 16Mhz/256=62500
      0000BF 81               [ 4]  294 	ret 
                                    295 
                                    296 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    297 ; TIM4 is configured to generate an 
                                    298 ; interrupt every millisecond 
                                    299 ;----------------------------------
      0000C0                        300 timer4_init:
      0000C0 72 18 50 C7      [ 1]  301 	bset CLK_PCKENR1,#CLK_PCKENR1_TIM4
      0000C4 35 07 53 45      [ 1]  302 	mov TIM4_PSCR,#7 ; prescale 128  
      0000C8 35 7D 53 46      [ 1]  303 	mov TIM4_ARR,#125 ; set for 1msec.
      0000CC 35 05 53 40      [ 1]  304 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D0 72 10 53 41      [ 1]  305 	bset TIM4_IER,#TIM4_IER_UIE
      0000D4 81               [ 4]  306 	ret
                                    307 
                                    308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    309 ;  routines to write to FLASH, EEPROM 
                                    310 ;  and OPTION 
                                    311 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    312 
                                    313 ;----------------------------------
                                    314 ; unlock EEPROM/OPT for writing/erasing
                                    315 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    316 ; input:
                                    317 ;  none
                                    318 ; output:
                                    319 ;  none 
                                    320 ;----------------------------------
      0000D5                        321 unlock_eeprom:
      0000D5 35 AE 50 64      [ 1]  322 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0000D9 35 56 50 64      [ 1]  323     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0000DD 72 07 50 5F FB   [ 2]  324 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0000E2 81               [ 4]  325 	ret
                                    326 
                                    327 ;----------------------------------
                                    328 ; unlock FLASH for writing/erasing
                                    329 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    330 ; input:
                                    331 ;  none
                                    332 ; output:
                                    333 ;  none
                                    334 ;----------------------------------
      0000E3                        335 unlock_flash:
      0000E3 35 56 50 62      [ 1]  336 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0000E7 35 AE 50 62      [ 1]  337 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0000EB 72 03 50 5F FB   [ 2]  338 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0000F0 81               [ 4]  339 	ret
                                    340 
                           000000   341 USE_BLOCK_ERASE=0 
                           000000   342 .if USE_BLOCK_ERASE 
                                    343 ; this code is copied to RAM 
                                    344 
                                    345 ;----------------------------
                                    346 ; erase block code must be 
                                    347 ; executed from RAM
                                    348 ;-----------------------------
                                    349 erase_start:
                                    350 	clr a 
                                    351     bset FLASH_CR2,#FLASH_CR2_ERASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    352     bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    353 	ldf [farptr],a
                                    354     inc farptr+2 
                                    355     ldf [farptr],a
                                    356     inc farptr+2 
                                    357     ldf [farptr],a
                                    358     inc farptr+2 
                                    359     ldf [farptr],a
                                    360 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
                                    361 	ret
                                    362 erase_end:
                                    363 
                                    364 ; copy erase_start in RAM 
                                    365 move_code_in_ram:
                                    366 	ldw x,#erase_end 
                                    367 	subw x,#erase_start
                                    368 	ldw acc16,x 
                                    369 	ldw x,#pad 
                                    370 	ldw y,#erase_start 
                                    371 	call move 
                                    372 	ret 
                                    373 
                                    374 ;-----------------------------------
                                    375 ; erase flash or EEPROM block 
                                    376 ; a block is 128 bytes 
                                    377 ; input:
                                    378 ;   farptr  address block begin
                                    379 ; output:
                                    380 ;   none
                                    381 ;--------------------------------------
                                    382 erase_block:
                                    383 	ldw x,farptr+1 
                                    384 	pushw x 
                                    385 	call move_code_in_ram 
                                    386 	popw x 
                                    387 	ldw farptr+1,x 
                                    388 	tnz farptr
                                    389 	jrne erase_flash 
                                    390 	ldw x,#FLASH_BASE 
                                    391 	cpw x,farptr+1 
                                    392 	jrpl erase_flash 
                                    393 ; erase eeprom block
                                    394 	call unlock_eeprom 
                                    395 	sim 
                                    396 	call pad   
                                    397 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
                                    398 	rim 
                                    399 	ret 
                                    400 ; erase flash block:
                                    401 erase_flash:
                                    402 	call unlock_flash 
                                    403 	bset FLASH_CR2,#FLASH_CR2_ERASE
                                    404 	bres FLASH_NCR2,#FLASH_CR2_ERASE
                                    405 	clr a 
                                    406 	sim 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    407 	call pad 
                                    408     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
                                    409 	rim 
                                    410 	ret 
                                    411 .endif ;;;; USE_BLOCK_ERASE ;;;;
                                    412 
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                    414 ; write a byte to FLASH or EEPROM/OPTION  
                                    415 ; input:
                                    416 ;    a  		byte to write
                                    417 ;    farptr  	address
                                    418 ;    x          farptr[x]
                                    419 ; output:
                                    420 ;    none
                                    421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    422 	; variables locales
                           000001   423 	BTW = 1   ; byte to write offset on stack
                           000002   424 	OPT = 2   ; OPTION flag offset on stack
                           000002   425 	VSIZE = 2
      0000F1                        426 write_byte:
      0000F1 90 89            [ 2]  427 	pushw y
      0000F3                        428 	_vars VSIZE
      0000F3 52 02            [ 2]    1     sub sp,#VSIZE 
      0000F5 6B 01            [ 1]  429 	ld (BTW,sp),a ; byte to write 
      0000F7 0F 02            [ 1]  430 	clr (OPT,sp)  ; OPTION flag
                                    431 ; put addr[15:0] in Y, for bounds check.
      0000F9 90 CE 00 17      [ 2]  432 	ldw y,farptr+1   ; Y=addr15:0
                                    433 ; check addr[23:16], if <> 0 then it is extened flash memory
      0000FD 72 5D 00 16      [ 1]  434 	tnz farptr 
      000101 26 14            [ 1]  435 	jrne write_flash
      000103 90 A3 26 00      [ 2]  436     cpw y,#user_space
      000107 24 0E            [ 1]  437     jruge write_flash
      000109 90 A3 40 00      [ 2]  438 	cpw y,#EEPROM_BASE  
      00010D 25 52            [ 1]  439     jrult write_exit
      00010F 90 A3 48 7F      [ 2]  440 	cpw y,#OPTION_END 
      000113 22 4C            [ 1]  441 	jrugt write_exit
      000115 20 16            [ 2]  442 	jra write_eeprom 
                                    443 ; write program memory
      000117                        444 write_flash:
      000117 CD 00 E3         [ 4]  445 	call unlock_flash 
      00011A 9B               [ 1]  446 1$:	sim 
      00011B 7B 01            [ 1]  447 	ld a,(BTW,sp)
      00011D 92 A7 00 16      [ 4]  448 	ldf ([farptr],x),a ; farptr[x]=A
      000121 72 05 50 5F FB   [ 2]  449 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000126 9A               [ 1]  450     rim 
      000127 72 13 50 5F      [ 1]  451     bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00012B 20 34            [ 2]  452     jra write_exit
                                    453 ; write eeprom and option
      00012D                        454 write_eeprom:
      00012D CD 00 D5         [ 4]  455 	call unlock_eeprom
                                    456 	; check for data eeprom or option eeprom
      000130 90 A3 48 00      [ 2]  457 	cpw y,#OPTION_BASE
      000134 2B 08            [ 1]  458 	jrmi 1$
      000136 90 A3 48 80      [ 2]  459 	cpw y,#OPTION_END+1
      00013A 2A 02            [ 1]  460 	jrpl 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00013C 03 02            [ 1]  461 	cpl (OPT,sp)
      00013E                        462 1$: 
      00013E 0D 02            [ 1]  463     tnz (OPT,sp)
      000140 27 08            [ 1]  464     jreq 2$
                                    465 	; pour modifier une option il faut modifier ces 2 bits
      000142 72 1E 50 5B      [ 1]  466     bset FLASH_CR2,#FLASH_CR2_OPT
      000146 72 1F 50 5C      [ 1]  467     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00014A                        468 2$: 
      00014A 7B 01            [ 1]  469     ld a,(BTW,sp)
      00014C 92 A7 00 16      [ 4]  470     ldf ([farptr],x),a
      000150 0D 02            [ 1]  471     tnz (OPT,sp)
      000152 27 08            [ 1]  472     jreq 3$
      000154 5C               [ 2]  473     incw x
      000155 7B 01            [ 1]  474     ld a,(BTW,sp)
      000157 43               [ 1]  475     cpl a
      000158 92 A7 00 16      [ 4]  476     ldf ([farptr],x),a
      00015C 72 05 50 5F FB   [ 2]  477 3$: btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      000161                        478 write_exit:
      000161                        479 	_drop VSIZE 
      000161 5B 02            [ 2]    1     addw sp,#VSIZE 
      000163 90 85            [ 2]  480 	popw y
      000165 81               [ 4]  481     ret
                                    482 
                                    483 ;--------------------------------------------
                                    484 ; write a data block to eeprom or flash 
                                    485 ; input:
                                    486 ;   Y        source address   
                                    487 ;   X        array index  destination  farptr[x]
                                    488 ;   BSIZE    block size bytes 
                                    489 ;   farptr   write address , byte* 
                                    490 ; output:
                                    491 ;	X 		after last byte written 
                                    492 ;   Y 		after last byte read 
                                    493 ;  farptr   point after block
                                    494 ;---------------------------------------------
      000166                        495 	_argofs 2 
                           000004     1     ARG_OFS=2+2 
      000166                        496 	_arg BSIZE 1  ; block size
                           000005     1     BSIZE=ARG_OFS+1 
                                    497 	; local var 
                           000001   498 	XSAVE=1 
                           000002   499 	VSIZE=2 
      000166                        500 write_block:
      000166                        501 	_vars VSIZE
      000166 52 02            [ 2]    1     sub sp,#VSIZE 
      000168 1F 01            [ 2]  502 	ldw (XSAVE,sp),x 
      00016A 1E 05            [ 2]  503 	ldw x,(BSIZE,sp) 
      00016C 27 13            [ 1]  504 	jreq 9$
      00016E 1E 01            [ 2]  505 1$:	ldw x,(XSAVE,sp)
      000170 90 F6            [ 1]  506 	ld a,(y)
      000172 CD 00 F1         [ 4]  507 	call write_byte 
      000175 5C               [ 2]  508 	incw x 
      000176 90 5C            [ 2]  509 	incw y 
      000178 1F 01            [ 2]  510 	ldw (XSAVE,sp),x
      00017A 1E 05            [ 2]  511 	ldw x,(BSIZE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00017C 5A               [ 2]  512 	decw x
      00017D 1F 05            [ 2]  513 	ldw (BSIZE,sp),x 
      00017F 26 ED            [ 1]  514 	jrne 1$
      000181                        515 9$:
      000181 1E 01            [ 2]  516 	ldw x,(XSAVE,sp)
      000183 CD 18 A3         [ 4]  517 	call incr_farptr
      000186                        518 	_drop VSIZE
      000186 5B 02            [ 2]    1     addw sp,#VSIZE 
      000188 81               [ 4]  519 	ret 
                                    520 
                                    521 
                                    522 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    523 ;;   UART1 subroutines
                                    524 ;;   used for user interface 
                                    525 ;;   communication channel.
                                    526 ;;   settings: 
                                    527 ;;		115200 8N1 no flow control
                                    528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    529 
                                    530 ;---------------------------------------------
                                    531 ; initialize UART1, 115200 8N1
                                    532 ; input:
                                    533 ;	none
                                    534 ; output:
                                    535 ;   none
                                    536 ;---------------------------------------------
      000189                        537 uart1_init:
      000189 72 1A 50 02      [ 1]  538     bset PA_DDR,#UART1_TX_PIN
      00018D 72 1A 50 03      [ 1]  539     bset PA_CR1,#UART1_TX_PIN 
      000191 72 1A 50 04      [ 1]  540     bset PA_CR2,#UART1_TX_PIN 
                                    541 ; enable UART1 clock
      000195 72 14 50 C7      [ 1]  542 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1	
      000199                        543 uart1_set_baud: 
                                    544 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    545 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000199 A6 E1            [ 1]  546 	ld a,#CLK_SWR_HSI
      00019B C1 50 C3         [ 1]  547 	cp a,CLK_CMSR 
      00019E 27 0A            [ 1]  548 	jreq 2$ 
      0001A0                        549 1$: ; 8 Mhz 	
      0001A0 35 05 52 33      [ 1]  550 	mov UART1_BRR2,#0x05 ; must be loaded first
      0001A4 35 04 52 32      [ 1]  551 	mov UART1_BRR1,#0x4
      0001A8 20 08            [ 2]  552 	jra 3$
      0001AA                        553 2$: ; 16 Mhz 	
      0001AA 35 0B 52 33      [ 1]  554 	mov UART1_BRR2,#0x0b ; must be loaded first
      0001AE 35 08 52 32      [ 1]  555 	mov UART1_BRR1,#0x08
      0001B2                        556 3$:
      0001B2 72 5F 52 31      [ 1]  557     clr UART1_DR
      0001B6 35 2C 52 35      [ 1]  558 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0001BA 72 10 52 35      [ 1]  559 	bset UART1_CR2,#UART_CR2_SBK
      0001BE 72 0D 52 30 FB   [ 2]  560     btjf UART1_SR,#UART_SR_TC,.
      0001C3 81               [ 4]  561     ret
                                    562 
                                    563 ;---------------------------------
                                    564 ; send character to UART1 
                                    565 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    566 ;   A 
                                    567 ; output:
                                    568 ;   none 
                                    569 ;--------------------------------	
      0001C4                        570 putc:
      0001C4 72 0F 52 30 FB   [ 2]  571 	btjf UART1_SR,#UART_SR_TXE,.
      0001C9 C7 52 31         [ 1]  572 	ld UART1_DR,a 
      0001CC 81               [ 4]  573 	ret 
                                    574 
                                    575 ;---------------------------------
                                    576 ; wait character from UART1 
                                    577 ; input:
                                    578 ;   none
                                    579 ; output:
                                    580 ;   A 			char  
                                    581 ;--------------------------------	
      0001CD                        582 getc:
      0001CD C6 00 25         [ 1]  583 	ld a,rx_char 
      0001D0 27 FB            [ 1]  584 	jreq getc 
      0001D2 72 5F 00 25      [ 1]  585 	clr rx_char 
      0001D6 81               [ 4]  586 	ret 
                                    587 
                                    588 ;-----------------------------
                                    589 ; send an ASCIZ string to UART1 
                                    590 ; input: 
                                    591 ;   x 		char * 
                                    592 ; output:
                                    593 ;   none 
                                    594 ;-------------------------------
      0001D7                        595 puts:
      0001D7 F6               [ 1]  596     ld a,(x)
      0001D8 27 06            [ 1]  597 	jreq 1$
      0001DA CD 01 C4         [ 4]  598 	call putc 
      0001DD 5C               [ 2]  599 	incw x 
      0001DE 20 F7            [ 2]  600 	jra puts 
      0001E0 81               [ 4]  601 1$:	ret 
                                    602 
                                    603 
                                    604 ;---------------------------
                                    605 ; delete character at left 
                                    606 ; of cursor on terminal 
                                    607 ; input:
                                    608 ;   none 
                                    609 ; output:
                                    610 ;	none 
                                    611 ;---------------------------
      0001E1                        612 bksp:
      0001E1 A6 08            [ 1]  613 	ld a,#BS 
      0001E3 CD 01 C4         [ 4]  614 	call putc 
      0001E6 A6 20            [ 1]  615 	ld a,#SPACE 
      0001E8 CD 01 C4         [ 4]  616 	call putc 
      0001EB A6 08            [ 1]  617 	ld a,#BS 
      0001ED CD 01 C4         [ 4]  618 	call putc 
      0001F0 81               [ 4]  619 	ret 
                                    620 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    621 ; delete n character left of cursor 
                                    622 ; at terminal.
                                    623 ; input: 
                                    624 ;   A   number of characters to delete.
                                    625 ; output:
                                    626 ;    none 
                                    627 ;--------------------------	
      0001F1                        628 delete:
      0001F1 88               [ 1]  629 	push a 
      0001F2 0D 01            [ 1]  630 0$:	tnz (1,sp)
      0001F4 27 07            [ 1]  631 	jreq 1$
      0001F6 CD 01 E1         [ 4]  632 	call bksp 
      0001F9 0A 01            [ 1]  633 	dec (1,sp)
      0001FB 20 F5            [ 2]  634 	jra 0$
      0001FD 84               [ 1]  635 1$:	pop a 
      0001FE 81               [ 4]  636 	ret
                                    637 
                                    638 ;--------------------------
                                    639 ; print n spaces on terminal
                                    640 ; input:
                                    641 ;  X 		number of spaces 
                                    642 ; output:
                                    643 ;	none 
                                    644 ;---------------------------
      0001FF                        645 spaces:
      0001FF A6 20            [ 1]  646 	ld a,#SPACE 
      000201 5D               [ 2]  647 1$:	tnzw x
      000202 27 06            [ 1]  648 	jreq 9$
      000204 CD 01 C4         [ 4]  649 	call putc 
      000207 5A               [ 2]  650 	decw x
      000208 20 F7            [ 2]  651 	jra 1$
      00020A                        652 9$: 
      00020A 81               [ 4]  653 	ret 
                                    654 
                                    655 ;----------------------
                                    656 ; print token id && value
                                    657 ; input:
                                    658 ;   A     token id 
                                    659 ;   X     token value 
                                    660 ;---------------------
                           000001   661 	BSAVE=1
                           000002   662 	AREG=2
                           000003   663 	XREG=3
                           000004   664 	VSIZE=4
      00020B                        665 prt_tok:
      00020B                        666 	_vars VSIZE 
      00020B 52 04            [ 2]    1     sub sp,#VSIZE 
      00020D 6B 02            [ 1]  667 	ld (AREG,sp),a 
      00020F 1F 03            [ 2]  668 	ldw (XREG,sp),x 
      000211 C6 00 0A         [ 1]  669 	ld a, base
      000214 6B 01            [ 1]  670 	ld (BSAVE,sp),a 
      000216 35 10 00 0A      [ 1]  671 	mov base,#16  
      00021A AE 02 42         [ 2]  672 	ldw x,#token_msg
      00021D CD 01 D7         [ 4]  673 	call puts 
      000220 5F               [ 1]  674 	clrw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000221 7B 02            [ 1]  675 	ld a,(AREG,sp)
      000223 97               [ 1]  676 	ld xl,a 
      000224 CD 09 24         [ 4]  677 	call print_int 
      000227 A6 20            [ 1]  678 	ld a,#SPACE
      000229 CD 01 C4         [ 4]  679 	call putc 
      00022C 1E 03            [ 2]  680 	ldw x,(XREG,sp)
      00022E CD 09 24         [ 4]  681 	call print_int 
      000231 A6 0D            [ 1]  682 	ld a,#CR 
      000233 CD 01 C4         [ 4]  683 	call putc 
      000236 7B 01            [ 1]  684 	ld a,(BSAVE,sp)
      000238 C7 00 0A         [ 1]  685 	ld base,a 
      00023B 7B 02            [ 1]  686 	ld a,(AREG,sp)
      00023D 1E 03            [ 2]  687 	ldw x,(XREG,sp)
      00023F                        688 	_drop VSIZE 
      00023F 5B 04            [ 2]    1     addw sp,#VSIZE 
      000241 81               [ 4]  689 	ret 
      000242 74 6F 6B 65 6E 3A 20   690 token_msg: .asciz "token: "
             00
                                    691 
                                    692 
                                    693 ;---------------------
                                    694 ; display n bytes row 
                                    695 ; from memory.
                                    696 ; input:
                                    697 ;   A   bytes to print 
                                    698 ;	X   start address 
                                    699 ; output:
                                    700 ;   X   address after last shown  
                                    701 ;---------------------
                           000001   702 	CNT=1 
                           000002   703 	ADR=2 
                           000003   704 	VSIZE=3 
      00024A                        705 show_row:
      00024A 4D               [ 1]  706 	tnz a 
      00024B 26 01            [ 1]  707 	jrne 1$
      00024D 81               [ 4]  708 	ret 
      00024E                        709 1$:	
      00024E 89               [ 2]  710 	pushw x  
      00024F 88               [ 1]  711 	push a 
      000250 35 04 00 24      [ 1]  712 	mov tab_width,#4 
      000254 CD 09 24         [ 4]  713 	call print_int 
      000257 A6 20            [ 1]  714 	ld a,#SPACE  
      000259 CD 01 C4         [ 4]  715 	call putc
      00025C                        716 row_loop:
      00025C 1E 02            [ 2]  717 	ldw x,(ADR,sp)
      00025E F6               [ 1]  718 	ld a,(x)
      00025F 5F               [ 1]  719 	clrw x 
      000260 97               [ 1]  720 	ld xl,a 
      000261 CD 09 24         [ 4]  721 	call print_int 
      000264 1E 02            [ 2]  722 	ldw x,(ADR,sp)
      000266 5C               [ 2]  723 	incw x 
      000267 1F 02            [ 2]  724 	ldw (ADR,sp),x 
      000269 0A 01            [ 1]  725 	dec (CNT,sp)
      00026B 26 EF            [ 1]  726 	jrne row_loop
      00026D                        727 	_drop VSIZE  		
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00026D 5B 03            [ 2]    1     addw sp,#VSIZE 
      00026F 35 04 00 24      [ 1]  728 	mov tab_width,#4
      000273 A6 0D            [ 1]  729 	ld a,#CR 
      000275 CD 01 C4         [ 4]  730 	call putc 
      000278 81               [ 4]  731 	ret 
                                    732 
                                    733 ;--------------------------
                                    734 ; print memory content 
                                    735 ; in hexadecimal format
                                    736 ;  input:
                                    737 ;    X    start address 
                                    738 ;    Y    count 
                                    739 ;--------------------------
                           000001   740 	BCNT=1
                           000003   741 	BASE=3
                           000004   742 	TABW=4
                           000004   743 	VSIZE=4   
      000279                        744 hex_dump:
      000279                        745 	_vars VSIZE
      000279 52 04            [ 2]    1     sub sp,#VSIZE 
      00027B C6 00 0A         [ 1]  746 	ld a,base
      00027E 6B 03            [ 1]  747 	ld (BASE,sp),a 
      000280 35 10 00 0A      [ 1]  748 	mov base,#16
      000284 C6 00 24         [ 1]  749 	ld a,tab_width 
      000287 6B 04            [ 1]  750 	ld (TABW,sp),a
      000289 A6 0D            [ 1]  751 	ld a,#CR 
      00028B CD 01 C4         [ 4]  752 	call putc 
      00028E 17 01            [ 2]  753 1$: ldw (BCNT,sp),y
      000290 A6 10            [ 1]  754 	ld a,#16
      000292 90 A3 00 10      [ 2]  755 	cpw y,#16
      000296 2A 02            [ 1]  756 	jrpl 2$
      000298 90 9F            [ 1]  757 	ld a,yl
      00029A                        758 2$: 	
      00029A CD 02 4A         [ 4]  759 	call show_row 
      00029D 16 01            [ 2]  760 	ldw y,(BCNT,sp) 
      00029F 72 A2 00 10      [ 2]  761 	subw y,#16 
      0002A3 90 A3 00 01      [ 2]  762 	cpw y,#1
      0002A7 2A E5            [ 1]  763 	jrpl 1$
      0002A9 7B 03            [ 1]  764 	ld a,(BASE,sp)
      0002AB C7 00 0A         [ 1]  765 	ld base,a
      0002AE 7B 04            [ 1]  766 	ld a,(TABW,sp)
      0002B0 C7 00 24         [ 1]  767 	ld tab_width,a 
      0002B3                        768 	_drop VSIZE
      0002B3 5B 04            [ 2]    1     addw sp,#VSIZE 
      0002B5 81               [ 4]  769 	ret 
                                    770 
                                    771 ;-------------------------------------
                                    772 ; retrun string length
                                    773 ; input:
                                    774 ;   X         .asciz  pointer 
                                    775 ; output:
                                    776 ;   X         length 
                                    777 ;-------------------------------------
      0002B6                        778 strlen:
      0002B6 90 93            [ 1]  779 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002B8 5F               [ 1]  780 	clrw x 
      0002B9 90 7D            [ 1]  781 1$:	tnz (y) 
      0002BB 27 05            [ 1]  782 	jreq 9$ 
      0002BD 5C               [ 2]  783 	incw x
      0002BE 90 5C            [ 2]  784 	incw y 
      0002C0 20 F7            [ 2]  785 	jra 1$ 
      0002C2 81               [ 4]  786 9$: ret 
                                    787 
                                    788 ;------------------------------------
                                    789 ; compare 2 strings
                                    790 ; input:
                                    791 ;   X 		char* first string 
                                    792 ;   Y       char* second string 
                                    793 ; output:
                                    794 ;   A 		0|1 
                                    795 ;-------------------------------------
      0002C3                        796 strcmp:
      0002C3 F6               [ 1]  797 	ld a,(x)
      0002C4 27 0B            [ 1]  798 	jreq 5$ 
      0002C6 90 F1            [ 1]  799 	cp a,(y) 
      0002C8 26 05            [ 1]  800 	jrne 4$ 
      0002CA 5C               [ 2]  801 	incw x 
      0002CB 90 5C            [ 2]  802 	incw y 
      0002CD 20 F4            [ 2]  803 	jra strcmp 
      0002CF                        804 4$: ; not same  
      0002CF 4F               [ 1]  805 	clr a 
      0002D0 81               [ 4]  806 	ret 
      0002D1                        807 5$: ; same 
      0002D1 A6 01            [ 1]  808 	ld a,#1 
      0002D3 81               [ 4]  809 	ret 
                                    810 
                                    811 
                                    812 ;---------------------------------------
                                    813 ;  copy src to dest 
                                    814 ; input:
                                    815 ;   X 		dest 
                                    816 ;   Y 		src 
                                    817 ; output: 
                                    818 ;   X 		dest 
                                    819 ;----------------------------------
      0002D4                        820 strcpy:
      0002D4 89               [ 2]  821 	pushw x 
      0002D5 90 F6            [ 1]  822 1$: ld a,(y)
      0002D7 27 06            [ 1]  823 	jreq 9$ 
      0002D9 F7               [ 1]  824 	ld (x),a 
      0002DA 5C               [ 2]  825 	incw x 
      0002DB 90 5C            [ 2]  826 	incw y 
      0002DD 20 F6            [ 2]  827 	jra 1$ 
      0002DF 7F               [ 1]  828 9$:	clr (x)
      0002E0 85               [ 2]  829 	popw x 
      0002E1 81               [ 4]  830 	ret 
                                    831 
                                    832 ;---------------------------------------
                                    833 ; move memory block 
                                    834 ; input:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    835 ;   X 		destination 
                                    836 ;   Y 	    source 
                                    837 ;   acc16	bytes count 
                                    838 ; output:
                                    839 ;   none 
                                    840 ;--------------------------------------
                           000001   841 	INCR=1 ; increament high byte 
                           000002   842 	LB=2 ; increament low byte 
                           000002   843 	VSIZE=2
      0002E2                        844 move:
      0002E2                        845 	_vars VSIZE 
      0002E2 52 02            [ 2]    1     sub sp,#VSIZE 
      0002E4 0F 01            [ 1]  846 	clr (INCR,sp)
      0002E6 0F 02            [ 1]  847 	clr (LB,sp)
      0002E8 90 89            [ 2]  848 	pushw y 
      0002EA 13 01            [ 2]  849 	cpw x,(1,sp) ; compare DEST to SRC 
      0002EC 90 85            [ 2]  850 	popw y 
      0002EE 27 31            [ 1]  851 	jreq move_exit ; x==y 
      0002F0 2B 0E            [ 1]  852 	jrmi move_down
      0002F2                        853 move_up: ; start from top address with incr=-1
      0002F2 72 BB 00 0C      [ 2]  854 	addw x,acc16
      0002F6 72 B9 00 0C      [ 2]  855 	addw y,acc16
      0002FA 03 01            [ 1]  856 	cpl (INCR,sp)
      0002FC 03 02            [ 1]  857 	cpl (LB,sp)   ; increment = -1 
      0002FE 20 05            [ 2]  858 	jra move_loop  
      000300                        859 move_down: ; start from bottom address with incr=1 
      000300 5A               [ 2]  860     decw x 
      000301 90 5A            [ 2]  861 	decw y
      000303 0C 02            [ 1]  862 	inc (LB,sp) ; incr=1 
      000305                        863 move_loop:	
      000305 C6 00 0C         [ 1]  864     ld a, acc16 
      000308 CA 00 0D         [ 1]  865 	or a, acc8
      00030B 27 14            [ 1]  866 	jreq move_exit 
      00030D 72 FB 01         [ 2]  867 	addw x,(INCR,sp)
      000310 72 F9 01         [ 2]  868 	addw y,(INCR,sp) 
      000313 90 F6            [ 1]  869 	ld a,(y)
      000315 F7               [ 1]  870 	ld (x),a 
      000316 89               [ 2]  871 	pushw x 
      000317 CE 00 0C         [ 2]  872 	ldw x,acc16 
      00031A 5A               [ 2]  873 	decw x 
      00031B CF 00 0C         [ 2]  874 	ldw acc16,x 
      00031E 85               [ 2]  875 	popw x 
      00031F 20 E4            [ 2]  876 	jra move_loop
      000321                        877 move_exit:
      000321                        878 	_drop VSIZE
      000321 5B 02            [ 2]    1     addw sp,#VSIZE 
      000323 81               [ 4]  879 	ret 	
                                    880 
                                    881 ;-------------------------------------
                                    882 ; search text area for a line#
                                    883 ; input:
                                    884 ;	X 			line# 
                                    885 ; output:
                                    886 ;   X 			addr of line | 0 
                                    887 ;   Y           line#|insert address if not found  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    888 ;-------------------------------------
                           000001   889 	LL=1 ; line length 
                           000002   890 	LB=2 ; line length low byte 
                           000002   891 	VSIZE=2 
      000324                        892 search_lineno:
      000324                        893 	_vars VSIZE
      000324 52 02            [ 2]    1     sub sp,#VSIZE 
      000326 0F 01            [ 1]  894 	clr (LL,sp)
      000328 90 CE 00 1C      [ 2]  895 	ldw y,txtbgn
      00032C                        896 search_ln_loop:
      00032C 90 C3 00 1E      [ 2]  897 	cpw y,txtend 
      000330 2A 10            [ 1]  898 	jrpl 8$
      000332 90 F3            [ 1]  899 	cpw x,(y)
      000334 27 0E            [ 1]  900 	jreq 9$
      000336 2B 0A            [ 1]  901 	jrmi 8$ 
      000338 90 E6 02         [ 1]  902 	ld a,(2,y)
      00033B 6B 02            [ 1]  903 	ld (LB,sp),a 
      00033D 72 F9 01         [ 2]  904 	addw y,(LL,sp)
      000340 20 EA            [ 2]  905 	jra search_ln_loop 
      000342                        906 8$: 
      000342 5F               [ 1]  907 	clrw x 	
      000343 51               [ 1]  908 	exgw x,y 
      000344                        909 9$: _drop VSIZE
      000344 5B 02            [ 2]    1     addw sp,#VSIZE 
      000346 51               [ 1]  910 	exgw x,y   
      000347 81               [ 4]  911 	ret 
                                    912 
                                    913 ;-------------------------------------
                                    914 ; delete line at addr
                                    915 ; input:
                                    916 ;   X 		addr of line i.e DEST for move 
                                    917 ;-------------------------------------
                           000001   918 	LLEN=1
                           000003   919 	SRC=3
                           000004   920 	VSIZE=4
      000348                        921 del_line: 
      000348                        922 	_vars VSIZE 
      000348 52 04            [ 2]    1     sub sp,#VSIZE 
      00034A E6 02            [ 1]  923 	ld a,(2,x) ; line length
      00034C 6B 02            [ 1]  924 	ld (LLEN+1,sp),a 
      00034E 0F 01            [ 1]  925 	clr (LLEN,sp)
      000350 90 93            [ 1]  926 	ldw y,x  
      000352 72 F9 01         [ 2]  927 	addw y,(LLEN,sp) ;SRC  
      000355 17 03            [ 2]  928 	ldw (SRC,sp),y  ;save source 
      000357 90 CE 00 1E      [ 2]  929 	ldw y,txtend 
      00035B 72 F2 03         [ 2]  930 	subw y,(SRC,sp) ; y=count 
      00035E 90 CF 00 0C      [ 2]  931 	ldw acc16,y 
      000362 16 03            [ 2]  932 	ldw y,(SRC,sp)    ; source
      000364 CD 02 E2         [ 4]  933 	call move
      000367 90 CE 00 1E      [ 2]  934 	ldw y,txtend 
      00036B 72 F2 01         [ 2]  935 	subw y,(LLEN,sp)
      00036E 90 CF 00 1E      [ 2]  936 	ldw txtend,y  
      000372                        937 	_drop VSIZE     
      000372 5B 04            [ 2]    1     addw sp,#VSIZE 
      000374 81               [ 4]  938 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    939 
                                    940 ;---------------------------------------------
                                    941 ; create a gap in text area to 
                                    942 ; move new line in this gap
                                    943 ; input:
                                    944 ;    X 			addr gap start 
                                    945 ;    Y 			gap length 
                                    946 ; output:
                                    947 ;    X 			addr gap start 
                                    948 ;--------------------------------------------
                           000001   949 	DEST=1
                           000003   950 	SRC=3
                           000005   951 	LEN=5
                           000006   952 	VSIZE=6 
      000375                        953 create_gap:
      000375                        954 	_vars VSIZE
      000375 52 06            [ 2]    1     sub sp,#VSIZE 
      000377 1F 03            [ 2]  955 	ldw (SRC,sp),x 
      000379 17 05            [ 2]  956 	ldw (LEN,sp),y 
      00037B 90 CF 00 0C      [ 2]  957 	ldw acc16,y 
      00037F 90 93            [ 1]  958 	ldw y,x ; SRC
      000381 72 BB 00 0C      [ 2]  959 	addw x,acc16  
      000385 1F 01            [ 2]  960 	ldw (DEST,sp),x 
                                    961 ;compute size to move 	
      000387 CE 00 1E         [ 2]  962 	ldw x,txtend 
      00038A 72 F0 03         [ 2]  963 	subw x,(SRC,sp)
      00038D CF 00 0C         [ 2]  964 	ldw acc16,x ; size to move
      000390 1E 01            [ 2]  965 	ldw x,(DEST,sp) 
      000392 CD 02 E2         [ 4]  966 	call move
      000395 CE 00 1E         [ 2]  967 	ldw x,txtend
      000398 72 FB 05         [ 2]  968 	addw x,(LEN,sp)
      00039B CF 00 1E         [ 2]  969 	ldw txtend,x
      00039E                        970 9$:	_drop VSIZE 
      00039E 5B 06            [ 2]    1     addw sp,#VSIZE 
      0003A0 81               [ 4]  971 	ret 
                                    972 
                                    973 ;--------------------------------------------
                                    974 ; insert line in pad into text area 
                                    975 ; first search for already existing 
                                    976 ; replace existing 
                                    977 ; if new line empty delete existing one. 
                                    978 ; input:
                                    979 ;   ptr16		pointer to tokenized line  
                                    980 ; output:
                                    981 ;   none
                                    982 ;---------------------------------------------
                           000001   983 	DEST=1  ; text area insertion address 
                           000003   984 	SRC=3   ; str to insert address 
                           000005   985 	LINENO=5 ; line number 
                           000007   986 	LLEN=7 ; line length 
                           000008   987 	VSIZE=8  
      0003A1                        988 insert_line:
      0003A1                        989 	_vars VSIZE 
      0003A1 52 08            [ 2]    1     sub sp,#VSIZE 
      0003A3 CE 00 1E         [ 2]  990 	ldw x,txtend  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003A6 C3 00 1C         [ 2]  991 	cpw x,txtbgn 
      0003A9 26 15            [ 1]  992 	jrne 0$
                                    993 ;first text line 
      0003AB AE 00 02         [ 2]  994 	ldw x,#2 
      0003AE 72 D6 00 17      [ 4]  995 	ld a,([ptr16],x)
      0003B2 5F               [ 1]  996 	clrw x 
      0003B3 97               [ 1]  997 	ld xl,a
      0003B4 1F 07            [ 2]  998 	ldw (LLEN,sp),x 
      0003B6 CE 00 1C         [ 2]  999 	ldw x,txtbgn
      0003B9 1F 01            [ 2] 1000 	ldw (DEST,sp),x 
      0003BB CE 00 1E         [ 2] 1001 	ldw x,txtend 
      0003BE 20 37            [ 2] 1002 	jra 4$
      0003C0 72 CE 00 17      [ 5] 1003 0$:	ldw x,[ptr16]
                                   1004 ; line number
      0003C4 1F 05            [ 2] 1005 	ldw (LINENO,sp),x 
      0003C6 AE 00 02         [ 2] 1006 	ldw x,#2 
      0003C9 72 D6 00 17      [ 4] 1007 	ld a,([ptr16],x)
      0003CD 97               [ 1] 1008 	ld xl,a
                                   1009 ; line length
      0003CE 1F 07            [ 2] 1010 	ldw (LLEN,sp),x
                                   1011 ; check if that line number already exit 	
      0003D0 1E 05            [ 2] 1012 	ldw x,(LINENO,sp)
      0003D2 CD 03 24         [ 4] 1013 	call search_lineno 
      0003D5 5D               [ 2] 1014 	tnzw x 
      0003D6 26 04            [ 1] 1015 	jrne 2$
                                   1016 ; line doesn't exit
                                   1017 ; it will be inserted at this point.  	
      0003D8 17 01            [ 2] 1018 	ldw (DEST,sp),y 
      0003DA 20 05            [ 2] 1019 	jra 3$
                                   1020 ; line exit delete it.
                                   1021 ; it will be replaced by new one 	
      0003DC 1F 01            [ 2] 1022 2$: ldw (DEST,sp),x 
      0003DE CD 03 48         [ 4] 1023 	call del_line
      0003E1                       1024 3$: 
                                   1025 ; insert new line or leave if LLEN==3
                                   1026 ; LLEN==3 means empty line 
      0003E1 A6 03            [ 1] 1027 	ld a,#3
      0003E3 11 08            [ 1] 1028 	cp a,(LLEN+1,sp)
      0003E5 27 24            [ 1] 1029 	jreq insert_ln_exit ; empty line exit.
                                   1030 ; if insertion point at txtend 
                                   1031 ; move no need to create a gap 
      0003E7 1E 01            [ 2] 1032 	ldw x,(DEST,sp)
      0003E9 C3 00 1E         [ 2] 1033 	cpw x,txtend 
      0003EC 27 09            [ 1] 1034 	jreq 4$ 
                                   1035 ; must create a gap
                                   1036 ; at insertion point  
      0003EE 1E 01            [ 2] 1037 	ldw x,(DEST,sp)
      0003F0 16 07            [ 2] 1038 	ldw y,(LLEN,sp)
      0003F2 CD 03 75         [ 4] 1039 	call create_gap
      0003F5 20 06            [ 2] 1040 	jra 5$
      0003F7                       1041 4$: 
      0003F7 72 FB 07         [ 2] 1042 	addw x,(LLEN,sp)
      0003FA CF 00 1E         [ 2] 1043 	ldw txtend,x 	 
                                   1044 ; move new line in gap 
      0003FD 1E 07            [ 2] 1045 5$:	ldw x,(LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0003FF CF 00 0C         [ 2] 1046 	ldw acc16,x 
      000402 90 AE 16 E0      [ 2] 1047 	ldw y,#pad ;SRC 
      000406 1E 01            [ 2] 1048 	ldw x,(DEST,sp) ; dest address 
      000408 CD 02 E2         [ 4] 1049 	call move 
      00040B                       1050 insert_ln_exit:	
      00040B                       1051 	_drop VSIZE
      00040B 5B 08            [ 2]    1     addw sp,#VSIZE 
      00040D 81               [ 4] 1052 	ret
                                   1053 
                                   1054 ;-----------------------------------
                                   1055 ; create token list fromm text line 
                                   1056 ; save this list in pad buffer 
                                   1057 ;  compiled line format: 
                                   1058 ;    line_no  2 bytes {0...32767}
                                   1059 ;    count    1 byte  
                                   1060 ;    tokens   variable length 
                                   1061 ;   
                                   1062 ; input:
                                   1063 ;   none
                                   1064 ; modified variables:
                                   1065 ;   basicptr     token list buffer address 
                                   1066 ;   in.w  		 3|count, i.e. index in buffer
                                   1067 ;   count        length of line | 0  
                                   1068 ;-----------------------------------
                           000001  1069 	XSAVE=1
                           000002  1070 	VSIZE=2
      00040E                       1071 compile:
      00040E                       1072 	_vars VSIZE 
      00040E 52 02            [ 2]    1     sub sp,#VSIZE 
      000410 72 1A 00 23      [ 1] 1073 	bset flags,#FCOMP 
      000414 A6 00            [ 1] 1074 	ld a,#0
      000416 AE 00 00         [ 2] 1075 	ldw x,#0
      000419 CF 16 E0         [ 2] 1076 	ldw pad,x ; destination buffer 
      00041C C7 16 E2         [ 1] 1077 	ld pad+2,a ; count 
      00041F AE 16 E3         [ 2] 1078 	ldw x,#pad+3
      000422 72 5F 00 01      [ 1] 1079 	clr in 
      000426 CD 0C 0A         [ 4] 1080 	call get_token
      000429 A1 84            [ 1] 1081 	cp a,#TK_INTGR
      00042B 26 11            [ 1] 1082 	jrne 2$
      00042D A3 00 01         [ 2] 1083 	cpw x,#1 
      000430 2A 05            [ 1] 1084 	jrpl 1$
      000432 A6 0A            [ 1] 1085 	ld a,#ERR_BAD_VALUE
      000434 CC 07 97         [ 2] 1086 	jp tb_error
      000437 CF 16 E0         [ 2] 1087 1$:	ldw pad,x 
      00043A 90 AE 16 E3      [ 2] 1088 	ldw y,#pad+3 
      00043E 90 A3 17 60      [ 2] 1089 2$:	cpw y,#stack_full 
      000442 25 05            [ 1] 1090 	jrult 3$
      000444 A6 0F            [ 1] 1091 	ld a,#ERR_BUF_FULL 
      000446 CC 07 97         [ 2] 1092 	jp tb_error 
      000449                       1093 3$:	
      000449 93               [ 1] 1094 	ldw x,y 
      00044A CD 0C 0A         [ 4] 1095 	call get_token 
      00044D A1 00            [ 1] 1096 	cp a,#TK_NONE 
      00044F 26 ED            [ 1] 1097 	jrne 2$ 
                                   1098 ; compilation completed  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000451 72 A2 16 E0      [ 2] 1099 	subw y,#pad
      000455 90 9F            [ 1] 1100     ld a,yl
      000457 AE 16 E0         [ 2] 1101 	ldw x,#pad 
      00045A CF 00 17         [ 2] 1102 	ldw ptr16,x 
      00045D E7 02            [ 1] 1103 	ld (2,x),a 
      00045F FE               [ 2] 1104 	ldw x,(x)
      000460 27 09            [ 1] 1105 	jreq 10$
      000462 CD 03 A1         [ 4] 1106 	call insert_line
      000465 72 5F 00 03      [ 1] 1107 	clr  count 
      000469 20 0F            [ 2] 1108 	jra  11$ 
      00046B                       1109 10$: ; line# is zero 
      00046B CE 00 17         [ 2] 1110 	ldw x,ptr16  
      00046E CF 00 04         [ 2] 1111 	ldw basicptr,x 
      000471 E6 02            [ 1] 1112 	ld a,(2,x)
      000473 C7 00 03         [ 1] 1113 	ld count,a 
      000476 35 03 00 01      [ 1] 1114 	mov in,#3 
      00047A                       1115 11$:
      00047A                       1116 	_drop VSIZE 
      00047A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00047C 72 1B 00 23      [ 1] 1117 	bres flags,#FCOMP 
      000480 81               [ 4] 1118 	ret 
                                   1119 
                                   1120 ;------------------------------------
                                   1121 ;  set all variables to zero 
                                   1122 ; input:
                                   1123 ;   none 
                                   1124 ; output:
                                   1125 ;	none
                                   1126 ;------------------------------------
      000481                       1127 clear_vars:
      000481 AE 00 26         [ 2] 1128 	ldw x,#vars 
      000484 90 AE 00 34      [ 2] 1129 	ldw y,#2*26 
      000488 7F               [ 1] 1130 1$:	clr (x)
      000489 5C               [ 2] 1131 	incw x 
      00048A 90 5A            [ 2] 1132 	decw y 
      00048C 26 FA            [ 1] 1133 	jrne 1$
      00048E 81               [ 4] 1134 	ret 
                                   1135 
                                   1136 ;-------------------------------------
                                   1137 ; check if A is a letter 
                                   1138 ; input:
                                   1139 ;   A 			character to test 
                                   1140 ; output:
                                   1141 ;   C flag      1 true, 0 false 
                                   1142 ;-------------------------------------
      00048F                       1143 is_alpha:
      00048F A1 41            [ 1] 1144 	cp a,#'A 
      000491 8C               [ 1] 1145 	ccf
      000492 24 0B            [ 1] 1146 	jrnc 9$ 
      000494 A1 5B            [ 1] 1147 	cp a,#'Z+1 
      000496 25 07            [ 1] 1148 	jrc 9$ 
      000498 A1 61            [ 1] 1149 	cp a,#'a 
      00049A 8C               [ 1] 1150 	ccf 
      00049B 24 02            [ 1] 1151 	jrnc 9$
      00049D A1 7B            [ 1] 1152 	cp a,#'z+1   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00049F 81               [ 4] 1153 9$: ret 	
                                   1154 
                                   1155 ;------------------------------------
                                   1156 ; check if character in {'0'..'9'}
                                   1157 ; input:
                                   1158 ;    A  character to test
                                   1159 ; output:
                                   1160 ;    Carry  0 not digit | 1 digit
                                   1161 ;------------------------------------
      0004A0                       1162 is_digit:
      0004A0 A1 30            [ 1] 1163 	cp a,#'0
      0004A2 25 03            [ 1] 1164 	jrc 1$
      0004A4 A1 3A            [ 1] 1165     cp a,#'9+1
      0004A6 8C               [ 1] 1166 	ccf 
      0004A7 8C               [ 1] 1167 1$:	ccf 
      0004A8 81               [ 4] 1168     ret
                                   1169 
                                   1170 ;-------------------------------------
                                   1171 ;  program initialization entry point 
                                   1172 ;-------------------------------------
                           000001  1173 	MAJOR=1
                           000000  1174 	MINOR=0
      0004A9 0A 0A 54 69 6E 79 20  1175 software: .asciz "\n\nTiny BASIC for STM8\nCopyright, Jacques Deschenes 2019,2020\nversion "
             42 41 53 49 43 20 66
             6F 72 20 53 54 4D 38
             0A 43 6F 70 79 72 69
             67 68 74 2C 20 4A 61
             63 71 75 65 73 20 44
             65 73 63 68 65 6E 65
             73 20 32 30 31 39 2C
             32 30 32 30 0A 76 65
             72 73 69 6F 6E 20 00
      0004EF                       1176 cold_start:
                                   1177 ;set stack 
      0004EF AE 17 FF         [ 2] 1178 	ldw x,#STACK_EMPTY
      0004F2 94               [ 1] 1179 	ldw sp,x   
                                   1180 ; clear all ram 
      0004F3 7F               [ 1] 1181 0$: clr (x)
      0004F4 5A               [ 2] 1182 	decw x 
      0004F5 26 FC            [ 1] 1183 	jrne 0$
                                   1184 ; activate pull up on all inputs 
      0004F7 A6 FF            [ 1] 1185 	ld a,#255 
      0004F9 C7 50 03         [ 1] 1186 	ld PA_CR1,a 
      0004FC C7 50 08         [ 1] 1187 	ld PB_CR1,a 
      0004FF C7 50 0D         [ 1] 1188 	ld PC_CR1,a 
      000502 C7 50 12         [ 1] 1189 	ld PD_CR1,a 
      000505 C7 50 17         [ 1] 1190 	ld PE_CR1,a 
      000508 C7 50 1C         [ 1] 1191 	ld PF_CR1,a 
      00050B C7 50 21         [ 1] 1192 	ld PG_CR1,a 
      00050E C7 50 2B         [ 1] 1193 	ld PI_CR1,a
                                   1194 ; set LD2 pin as output and turn it on
      000511 72 1A 50 0D      [ 1] 1195     bset PC_CR1,#LED2_BIT
      000515 72 1A 50 0E      [ 1] 1196     bset PC_CR2,#LED2_BIT
      000519 72 1A 50 0C      [ 1] 1197     bset PC_DDR,#LED2_BIT
      00051D 72 1A 50 0A      [ 1] 1198 	bset PC_ODR,#LED2_BIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1199 ; disable schmitt triggers on Arduino CN4 analog inputs
      000521 55 00 3F 54 07   [ 1] 1200 	mov ADC_TDRL,0x3f
                                   1201 ; disable peripherals clocks
                                   1202 ;	clr CLK_PCKENR1 
                                   1203 ;	clr CLK_PCKENR2
      000526 72 5F 50 F2      [ 1] 1204 	clr AWU_TBR 
      00052A 72 14 50 CA      [ 1] 1205 	bset CLK_PCKENR2,#CLK_PCKENR2_AWU ; enable LSI for AWU 
                                   1206 ; select internal clock no divisor: 16 Mhz 	
      00052E A6 E1            [ 1] 1207 	ld a,#CLK_SWR_HSI 
      000530 5F               [ 1] 1208 	clrw x  
      000531 CD 00 9D         [ 4] 1209     call clock_init 
      000534 CD 00 C0         [ 4] 1210 	call timer4_init
      000537 CD 00 B3         [ 4] 1211 	call timer2_init
                                   1212 ; UART1 at 115200 BAUD
      00053A CD 01 89         [ 4] 1213 	call uart1_init
                                   1214 ; activate PE_4 (user button interrupt)
      00053D 72 18 50 18      [ 1] 1215     bset PE_CR2,#USR_BTN_BIT 
                                   1216 ; display system information
      000541 AE 04 A9         [ 2] 1217 	ldw x,#software 
      000544 CD 01 D7         [ 4] 1218 	call puts 
      000547 A6 01            [ 1] 1219 	ld a,#MAJOR 
      000549 C7 00 0D         [ 1] 1220 	ld acc8,a 
      00054C 5F               [ 1] 1221 	clrw x 
      00054D CF 00 0B         [ 2] 1222 	ldw acc24,x 
      000550 A6 0A            [ 1] 1223 	ld a,#10 
      000552 CD 08 DC         [ 4] 1224 	call prti24 
      000555 A6 2E            [ 1] 1225 	ld a,#'.
      000557 CD 01 C4         [ 4] 1226 	call putc 
      00055A A6 00            [ 1] 1227 	ld a,#MINOR 
      00055C C7 00 0D         [ 1] 1228 	ld acc8,a 
      00055F 5F               [ 1] 1229 	clrw x 
      000560 CF 00 0B         [ 2] 1230 	ldw acc24,x 
      000563 A6 0A            [ 1] 1231 	ld a,#10 
      000565 CD 08 DC         [ 4] 1232 	call prti24 
      000568 A6 0D            [ 1] 1233 	ld a,#CR 
      00056A CD 01 C4         [ 4] 1234 	call putc 
      00056D CD 18 B1         [ 4] 1235 	call seek_fdrive 
      000570 9A               [ 1] 1236 	rim 
      000571 72 5C 00 15      [ 1] 1237 	inc seedy+1 
      000575 72 5C 00 13      [ 1] 1238 	inc seedx+1 
      000579 CD 06 01         [ 4] 1239 	call clear_basic
      00057C CD 11 77         [ 4] 1240 	call ubound 
                                   1241 ;	jra 2$	
                                   1242 ; 150 msec beep 
      00057F AE 00 96         [ 2] 1243 	ldw x,#150 
      000582 90 AE 03 E6      [ 2] 1244 	ldw y,#998 
      000586 CD 17 36         [ 4] 1245 	call beep  
      000589 72 1B 50 0A      [ 1] 1246 2$:	bres PC_ODR,#LED2_BIT	
      00058D CD 05 96         [ 4] 1247 	call warm_init
      000590 CD 05 C3         [ 4] 1248 	call load_autorun
      000593 CC 08 1F         [ 2] 1249     jp cmd_line  
                                   1250 
      000596                       1251 warm_init:
      000596 72 5F 00 23      [ 1] 1252 	clr flags 
      00059A 72 5F 00 20      [ 1] 1253 	clr loop_depth 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00059E 35 04 00 24      [ 1] 1254 	mov tab_width,#TAB_WIDTH 
      0005A2 35 0A 00 0A      [ 1] 1255 	mov base,#10 
      0005A6 AE 00 00         [ 2] 1256 	ldw x,#0 
      0005A9 CF 00 04         [ 2] 1257 	ldw basicptr,x 
      0005AC CF 00 00         [ 2] 1258 	ldw in.w,x 
      0005AF 72 5F 00 03      [ 1] 1259 	clr count
      0005B3 81               [ 4] 1260 	ret 
                                   1261 
                                   1262 ;--------------------------
                                   1263 ; called by tb_error when
                                   1264 ; flag FAUTORUN is set.
                                   1265 ; There is a bug in autorun 
                                   1266 ; program so cancel it.
                                   1267 ;---------------------------
      0005B4                       1268 cancel_autorun:
      0005B4 AE 40 00         [ 2] 1269 	ldw x,#AUTORUN_NAME 
      0005B7 CF 00 17         [ 2] 1270 	ldw farptr+1,x 
      0005BA 4F               [ 1] 1271 	clr a
      0005BB 5F               [ 1] 1272 	clrw x  
      0005BC C7 00 16         [ 1] 1273 	ld farptr,a 
      0005BF CD 00 F1         [ 4] 1274 	call write_byte 
      0005C2 81               [ 4] 1275 	ret 
                                   1276 
                                   1277 
                                   1278 ;--------------------------
                                   1279 ; if autorun file defined 
                                   1280 ; in eeprom address AUTORUN_NAME 
                                   1281 ; load and run it.
                                   1282 ;-------------------------
      0005C3                       1283 load_autorun:
      0005C3 90 AE 40 00      [ 2] 1284 	ldw y,#AUTORUN_NAME
      0005C7 90 F6            [ 1] 1285 	ld a,(y)
      0005C9 27 20            [ 1] 1286 	jreq 9$
      0005CB CD 19 0F         [ 4] 1287 	call search_file
      0005CE 25 05            [ 1] 1288 	jrc 2$ 
                                   1289 ; if file doesn't exit
      0005D0 CD 05 B4         [ 4] 1290 	call cancel_autorun
      0005D3 20 16            [ 2] 1291 	jra 9$ 
      0005D5 CD 1A 19         [ 4] 1292 2$:	call load_file
      0005D8 AE 40 00         [ 2] 1293 	ldw x,#AUTORUN_NAME 
      0005DB CD 01 D7         [ 4] 1294 	call puts
      0005DE AE 05 EC         [ 2] 1295 	ldw x,#autorun_msg 
      0005E1 CD 01 D7         [ 4] 1296 	call puts 
      0005E4 72 1C 00 23      [ 1] 1297 	bset flags,#FAUTORUN 
      0005E8 CC 16 FB         [ 2] 1298 	jp run_it    
      0005EB 81               [ 4] 1299 9$: ret 	
                                   1300 
      0005EC 20 6C 6F 61 64 65 64  1301 autorun_msg: .asciz " loaded and running\n"
             20 61 6E 64 20 72 75
             6E 6E 69 6E 67 0A 00
                                   1302 ;---------------------------
                                   1303 ; reset BASIC text variables 
                                   1304 ; and clear variables 
                                   1305 ;---------------------------
      000601                       1306 clear_basic:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000601 72 5F 00 03      [ 1] 1307 	clr count
      000605 72 5F 00 01      [ 1] 1308 	clr in  
      000609 AE 00 5A         [ 2] 1309 	ldw x,#free_ram 
      00060C CF 00 1C         [ 2] 1310 	ldw txtbgn,x 
      00060F CF 00 1E         [ 2] 1311 	ldw txtend,x 
      000612 CD 04 81         [ 4] 1312 	call clear_vars 
      000615 81               [ 4] 1313 	ret 
                                   1314 
                                   1315 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1316 ;;   Tiny BASIC error messages     ;;
                                   1317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000616                       1318 err_msg:
      000616 00 00 06 36 06 43 06  1319 	.word 0,err_mem_full, err_syntax, err_math_ovf, err_div0,err_no_line    
             51 06 6A 06 79
      000622 06 8F 06 A5 06 BF 06  1320 	.word err_run_only,err_cmd_only,err_duplicate,err_not_file,err_bad_value
             D0 06 E1
      00062C 06 ED 07 20 07 30 07  1321 	.word err_no_access,err_no_data,err_no_prog,err_no_fspace,err_buf_full    
             44 07 57
                                   1322 
      000636 4D 65 6D 6F 72 79 20  1323 err_mem_full: .asciz "Memory full\n" 
             66 75 6C 6C 0A 00
      000643 73 79 6E 74 61 78 20  1324 err_syntax: .asciz "syntax error\n" 
             65 72 72 6F 72 0A 00
      000651 6D 61 74 68 20 6F 70  1325 err_math_ovf: .asciz "math operation overflow\n"
             65 72 61 74 69 6F 6E
             20 6F 76 65 72 66 6C
             6F 77 0A 00
      00066A 64 69 76 69 73 69 6F  1326 err_div0: .asciz "division by 0\n" 
             6E 20 62 79 20 30 0A
             00
      000679 69 6E 76 61 6C 69 64  1327 err_no_line: .asciz "invalid line number.\n"
             20 6C 69 6E 65 20 6E
             75 6D 62 65 72 2E 0A
             00
      00068F 72 75 6E 20 74 69 6D  1328 err_run_only: .asciz "run time only usage.\n" 
             65 20 6F 6E 6C 79 20
             75 73 61 67 65 2E 0A
             00
      0006A5 63 6F 6D 6D 61 6E 64  1329 err_cmd_only: .asciz "command line only usage.\n"
             20 6C 69 6E 65 20 6F
             6E 6C 79 20 75 73 61
             67 65 2E 0A 00
      0006BF 64 75 70 6C 69 63 61  1330 err_duplicate: .asciz "duplicate name.\n"
             74 65 20 6E 61 6D 65
             2E 0A 00
      0006D0 46 69 6C 65 20 6E 6F  1331 err_not_file: .asciz "File not found.\n"
             74 20 66 6F 75 6E 64
             2E 0A 00
      0006E1 62 61 64 20 76 61 6C  1332 err_bad_value: .asciz "bad value.\n"
             75 65 2E 0A 00
      0006ED 46 69 6C 65 20 69 6E  1333 err_no_access: .asciz "File in extended memory, can't be run from there.\n" 
             20 65 78 74 65 6E 64
             65 64 20 6D 65 6D 6F
             72 79 2C 20 63 61 6E
             27 74 20 62 65 20 72
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



             75 6E 20 66 72 6F 6D
             20 74 68 65 72 65 2E
             0A 00
      000720 4E 6F 20 64 61 74 61  1334 err_no_data: .asciz "No data found.\n"
             20 66 6F 75 6E 64 2E
             0A 00
      000730 4E 6F 20 70 72 6F 67  1335 err_no_prog: .asciz "No program in RAM!\n"
             72 61 6D 20 69 6E 20
             52 41 4D 21 0A 00
      000744 46 69 6C 65 20 73 79  1336 err_no_fspace: .asciz "File system full.\n" 
             73 74 65 6D 20 66 75
             6C 6C 2E 0A 00
      000757 42 75 66 66 65 72 20  1337 err_buf_full: .asciz "Buffer full\n"
             66 75 6C 6C 0A 00
                                   1338 
      000764 72 75 6E 20 74 69 6D  1339 rt_msg: .asciz "run time error, "
             65 20 65 72 72 6F 72
             2C 20 00
      000775 63 6F 6D 70 69 6C 65  1340 comp_msg: .asciz "compile error, "
             20 65 72 72 6F 72 2C
             20 00
      000785 6C 61 73 74 20 74 6F  1341 tk_id: .asciz "last token id: "
             6B 65 6E 20 69 64 3A
             20 00
                                   1342 
      000795                       1343 syntax_error:
      000795 A6 02            [ 1] 1344 	ld a,#ERR_SYNTAX 
                                   1345 
      000797                       1346 tb_error:
      000797 72 0A 00 23 47   [ 2] 1347 	btjt flags,#FCOMP,1$
      00079C 88               [ 1] 1348 	push a 
      00079D AE 07 64         [ 2] 1349 	ldw x, #rt_msg 
      0007A0 CD 01 D7         [ 4] 1350 	call puts 
      0007A3 84               [ 1] 1351 	pop a 
      0007A4 AE 06 16         [ 2] 1352 	ldw x, #err_msg 
      0007A7 72 5F 00 0C      [ 1] 1353 	clr acc16 
      0007AB 48               [ 1] 1354 	sll a
      0007AC 72 59 00 0C      [ 1] 1355 	rlc acc16  
      0007B0 C7 00 0D         [ 1] 1356 	ld acc8, a 
      0007B3 72 BB 00 0C      [ 2] 1357 	addw x,acc16 
      0007B7 FE               [ 2] 1358 	ldw x,(x)
      0007B8 CD 01 D7         [ 4] 1359 	call puts
      0007BB CE 00 04         [ 2] 1360 	ldw x,basicptr
      0007BE C6 00 01         [ 1] 1361 	ld a,in 
      0007C1 CD 12 91         [ 4] 1362 	call prt_basic_line
      0007C4 AE 07 85         [ 2] 1363 	ldw x,#tk_id 
      0007C7 CD 01 D7         [ 4] 1364 	call puts 
      0007CA C6 00 02         [ 1] 1365 	ld a,in.saved 
      0007CD 5F               [ 1] 1366 	clrw x 
      0007CE 97               [ 1] 1367 	ld xl,a 
      0007CF 72 BB 00 04      [ 2] 1368 	addw x,basicptr 
      0007D3 F6               [ 1] 1369 	ld a,(x)
      0007D4 5F               [ 1] 1370 	clrw x 
      0007D5 97               [ 1] 1371 	ld xl,a 
      0007D6 CD 09 24         [ 4] 1372 	call print_int
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0007D9 72 0D 00 23 3A   [ 2] 1373 	btjf flags,#FAUTORUN ,6$
      0007DE CD 05 B4         [ 4] 1374 	call cancel_autorun  
      0007E1 20 35            [ 2] 1375 	jra 6$
      0007E3                       1376 1$:	
      0007E3 88               [ 1] 1377 	push a 
      0007E4 AE 07 75         [ 2] 1378 	ldw x,#comp_msg
      0007E7 CD 01 D7         [ 4] 1379 	call puts 
      0007EA 84               [ 1] 1380 	pop a 
      0007EB AE 06 16         [ 2] 1381 	ldw x, #err_msg 
      0007EE 72 5F 00 0C      [ 1] 1382 	clr acc16 
      0007F2 48               [ 1] 1383 	sll a
      0007F3 72 59 00 0C      [ 1] 1384 	rlc acc16  
      0007F7 C7 00 0D         [ 1] 1385 	ld acc8, a 
      0007FA 72 BB 00 0C      [ 2] 1386 	addw x,acc16 
      0007FE FE               [ 2] 1387 	ldw x,(x)
      0007FF CD 01 D7         [ 4] 1388 	call puts
      000802 AE 16 90         [ 2] 1389 	ldw x,#tib
      000805 CD 01 D7         [ 4] 1390 	call puts 
      000808 A6 0D            [ 1] 1391 	ld a,#CR 
      00080A CD 01 C4         [ 4] 1392 	call putc
      00080D CE 00 00         [ 2] 1393 	ldw x,in.w
      000810 CD 01 FF         [ 4] 1394 	call spaces
      000813 A6 5E            [ 1] 1395 	ld a,#'^
      000815 CD 01 C4         [ 4] 1396 	call putc 
      000818 AE 17 FF         [ 2] 1397 6$: ldw x,#STACK_EMPTY 
      00081B 94               [ 1] 1398     ldw sp,x
      00081C                       1399 warm_start:
      00081C CD 05 96         [ 4] 1400 	call warm_init
                                   1401 ;----------------------------
                                   1402 ;   BASIC interpreter
                                   1403 ;----------------------------
      00081F                       1404 cmd_line: ; user interface 
      00081F A6 0D            [ 1] 1405 	ld a,#CR 
      000821 CD 01 C4         [ 4] 1406 	call putc 
      000824 A6 3E            [ 1] 1407 	ld a,#'> 
      000826 CD 01 C4         [ 4] 1408 	call putc
      000829 CD 0A 55         [ 4] 1409 	call readln
      00082C 72 5D 00 03      [ 1] 1410 	tnz count 
      000830 27 ED            [ 1] 1411 	jreq cmd_line
      000832 CD 04 0E         [ 4] 1412 	call compile
                                   1413 ; if text begin with a line number
                                   1414 ; the compiler set count to zero    
                                   1415 ; so code is not interpreted
      000835 72 5D 00 03      [ 1] 1416 	tnz count 
      000839 27 E4            [ 1] 1417 	jreq cmd_line
                                   1418 
                                   1419 ; if direct command 
                                   1420 ; it's ready to interpret 
                                   1421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1422 ;; This is the interpreter loop
                                   1423 ;; for each BASIC code line. 
                                   1424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
      00083B                       1425 interpreter: 
      00083B C6 00 01         [ 1] 1426 	ld a,in 
      00083E C1 00 03         [ 1] 1427 	cp a,count 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000841 2B 1D            [ 1] 1428 	jrmi interp_loop
      000843                       1429 next_line:
      000843 72 01 00 23 D7   [ 2] 1430 	btjf flags, #FRUN, cmd_line
      000848 CE 00 04         [ 2] 1431 	ldw x,basicptr
      00084B 72 BB 00 00      [ 2] 1432 	addw x,in.w 
      00084F C3 00 1E         [ 2] 1433 	cpw x,txtend 
      000852 2A C8            [ 1] 1434 	jrpl warm_start
      000854 CF 00 04         [ 2] 1435 	ldw basicptr,x ; start of next line  
      000857 E6 02            [ 1] 1436 	ld a,(2,x)
      000859 C7 00 03         [ 1] 1437 	ld count,a 
      00085C 35 03 00 01      [ 1] 1438 	mov in,#3 ; skip first 3 bytes of line 
      000860                       1439 interp_loop: 
      000860 CD 08 87         [ 4] 1440 	call next_token
      000863 A1 00            [ 1] 1441 	cp a,#TK_NONE 
      000865 27 DC            [ 1] 1442 	jreq next_line 
      000867 A1 80            [ 1] 1443 	cp a,#TK_CMD
      000869 26 03            [ 1] 1444 	jrne 1$
      00086B FD               [ 4] 1445 	call (x) 
      00086C 20 F2            [ 2] 1446 	jra interp_loop 
      00086E                       1447 1$:	 
      00086E A1 85            [ 1] 1448 	cp a,#TK_VAR
      000870 26 05            [ 1] 1449 	jrne 2$
      000872 CD 11 AA         [ 4] 1450 	call let_var  
      000875 20 E9            [ 2] 1451 	jra interp_loop 
      000877                       1452 2$:	
      000877 A1 06            [ 1] 1453 	cp a,#TK_ARRAY 
      000879 26 05            [ 1] 1454 	jrne 3$
      00087B CD 11 A7         [ 4] 1455 	call let_array 
      00087E 20 E0            [ 2] 1456 	jra interp_loop
      000880                       1457 3$:	
      000880 A1 01            [ 1] 1458 	cp a,#TK_COLON 
      000882 27 DC            [ 1] 1459 	jreq interp_loop 
      000884 CC 07 95         [ 2] 1460 	jp syntax_error 
                                   1461 
                                   1462 		
                                   1463 ;--------------------------
                                   1464 ; extract next token from
                                   1465 ; token list 
                                   1466 ; basicptr -> base address 
                                   1467 ; in  -> offset in list array 
                                   1468 ; output:
                                   1469 ;   A 		token attribute
                                   1470 ;   X 		token value if there is one
                                   1471 ;----------------------------------------
      000887                       1472 next_token:
      000887 5F               [ 1] 1473 	clrw x 
      000888 C6 00 01         [ 1] 1474 	ld a,in 
      00088B C0 00 03         [ 1] 1475 	sub a,count ; don't replace sub by cp!  
      00088E 2B 01            [ 1] 1476 	jrmi 0$
      000890 81               [ 4] 1477 	ret  ; end of BASIC line 
      000891                       1478 0$: 
      000891 55 00 01 00 02   [ 1] 1479 	mov in.saved,in 
      000896 90 CE 00 04      [ 2] 1480 	ldw y,basicptr 
      00089A 91 D6 00         [ 4] 1481 	ld a,([in.w],y)
                                   1482 ;	jreq 9$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00089D 72 5C 00 01      [ 1] 1483 	inc in  
      0008A1 4D               [ 1] 1484 	tnz a 
      0008A2 2B 2B            [ 1] 1485 	jrmi 6$
      0008A4 A1 06            [ 1] 1486 	cp a,#TK_ARRAY
      0008A6 2A 33            [ 1] 1487 	jrpl 9$  ; no attribute for these
      0008A8 A1 01            [ 1] 1488 	cp a,#TK_COLON
      0008AA 27 2F            [ 1] 1489 	jreq 9$  
      0008AC                       1490 1$: ; 
      0008AC A1 03            [ 1] 1491 	cp a,#TK_CHAR
      0008AE 26 0B            [ 1] 1492 	jrne 2$
      0008B0 91 D6 00         [ 4] 1493 	ld a,([in.w],y)
      0008B3 72 5C 00 01      [ 1] 1494 	inc in 
      0008B7 41               [ 1] 1495 	exg a,xl  
      0008B8 A6 03            [ 1] 1496 	ld a,#TK_CHAR
      0008BA 81               [ 4] 1497 	ret
      0008BB A1 02            [ 1] 1498 2$:	cp a,#TK_QSTR 
      0008BD 26 1C            [ 1] 1499 	jrne 9$
      0008BF 93               [ 1] 1500 	ldw x,y 
      0008C0 72 BB 00 00      [ 2] 1501 	addw x,in.w ; pointer to string 
                                   1502 ; move pointer after string 
      0008C4 91 6D 00         [ 4] 1503 3$:	tnz ([in.w],y)
      0008C7 27 0E            [ 1] 1504 	jreq 8$
      0008C9 72 5C 00 01      [ 1] 1505 	inc in 
      0008CD 20 F5            [ 2] 1506 	jra 3$
      0008CF                       1507 6$: 
      0008CF 91 DE 00         [ 5] 1508 	ldw y,([in.w],y)
      0008D2 51               [ 1] 1509 	exgw x,y 
      0008D3 72 5C 00 01      [ 1] 1510 	inc in
      0008D7 72 5C 00 01      [ 1] 1511 8$:	inc in 
      0008DB                       1512 9$: 
      0008DB 81               [ 4] 1513 	ret	
                                   1514 
                                   1515 
                                   1516 
                                   1517 
                                   1518 ;------------------------------------
                                   1519 ; print integer in acc24 
                                   1520 ; input:
                                   1521 ;	acc24 		integer to print 
                                   1522 ;	A 			numerical base for conversion 
                                   1523 ;               if bit 7 is set add a space at print end.
                                   1524 ;   XL 			field width, 0 -> no fill.
                                   1525 ;  output:
                                   1526 ;    none 
                                   1527 ;------------------------------------
                           000001  1528 	WIDTH = 1
                           000002  1529 	BASE = 2
                           000003  1530 	ADD_SPACE=3 ; add a space after number 
                           000003  1531 	VSIZE = 3
      0008DC                       1532 prti24:
      0008DC                       1533 	_vars VSIZE 
      0008DC 52 03            [ 2]    1     sub sp,#VSIZE 
      0008DE 0F 03            [ 1] 1534 	clr (ADD_SPACE,sp)
      0008E0 A5 80            [ 1] 1535 	bcp a,#0x80 
      0008E2 27 02            [ 1] 1536 	jreq 0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0008E4 03 03            [ 1] 1537 	cpl (ADD_SPACE,sp)
      0008E6 A4 1F            [ 1] 1538 0$:	and a,#31 
      0008E8 6B 02            [ 1] 1539 	ld (BASE,sp),a
      0008EA 9F               [ 1] 1540 	ld a,xl
      0008EB 6B 01            [ 1] 1541 	ld (WIDTH,sp),a 
      0008ED 7B 02            [ 1] 1542 	ld a, (BASE,sp)  
      0008EF CD 09 89         [ 4] 1543     call itoa  ; conversion entier en  .asciz
      0008F2 7B 01            [ 1] 1544 1$: ld a,(WIDTH,sp)
      0008F4 27 1F            [ 1] 1545 	jreq 4$
      0008F6 C7 00 0D         [ 1] 1546 	ld acc8,a 
      0008F9 89               [ 2] 1547 	pushw x 
      0008FA CD 02 B6         [ 4] 1548 	call strlen 
      0008FD 9F               [ 1] 1549 	ld a,xl 
      0008FE 85               [ 2] 1550 	popw x 
      0008FF 31 00 0D         [ 3] 1551 	exg a,acc8 
      000902 C0 00 0D         [ 1] 1552 	sub a,acc8 
      000905 2B 0E            [ 1] 1553 	jrmi 4$
      000907 6B 01            [ 1] 1554 	ld (WIDTH,sp),a 
      000909 A6 20            [ 1] 1555 	ld  a,#SPACE
      00090B 0D 01            [ 1] 1556 3$: tnz (WIDTH,sp)
      00090D 27 06            [ 1] 1557 	jreq 4$
      00090F 5A               [ 2] 1558 	decw x 
      000910 F7               [ 1] 1559 	ld (x),a 
      000911 0A 01            [ 1] 1560 	dec (WIDTH,sp) 
      000913 20 F6            [ 2] 1561 	jra 3$
      000915                       1562 4$: 
      000915 CD 01 D7         [ 4] 1563 	call puts 
      000918 0D 03            [ 1] 1564 	tnz (ADD_SPACE,sp)
      00091A 27 05            [ 1] 1565 	jreq 5$
      00091C A6 20            [ 1] 1566     ld a,#SPACE 
      00091E CD 01 C4         [ 4] 1567 	call putc 
      000921                       1568 5$: _drop VSIZE 
      000921 5B 03            [ 2]    1     addw sp,#VSIZE 
      000923 81               [ 4] 1569     ret	
                                   1570 
                                   1571 ;-----------------------------------
                                   1572 ; print a 16 bit integer 
                                   1573 ; using variable 'base' as conversion
                                   1574 ; format.
                                   1575 ; input:
                                   1576 ;   X       integer to print 
                                   1577 ;   base    conversion base 
                                   1578 ; output:
                                   1579 ;   none 
                                   1580 ;-----------------------------------
                           000001  1581 	SIGN=1
                           000002  1582 	STRING=2
                                   1583 ;; 9 char on stack for string buffer	
                           00000A  1584 	STREND=2+8 
                           00000A  1585 	VSIZE=10
      000924                       1586 print_int: 
      000924                       1587 	_vars VSIZE 
      000924 52 0A            [ 2]    1     sub sp,#VSIZE 
      000926 0F 01            [ 1] 1588 	clr (SIGN,sp)
      000928 90 96            [ 1] 1589 	ldw y,sp 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00092A 72 A9 00 0A      [ 2] 1590 	addw y,#STREND  
      00092E 90 7F            [ 1] 1591 	clr (y)
      000930 C6 00 0A         [ 1] 1592 	ld a,base  
      000933 A1 0A            [ 1] 1593 	cp a,#10 
      000935 26 06            [ 1] 1594 	jrne 1$ 
      000937 5D               [ 2] 1595 	tnzw x 
      000938 2A 03            [ 1] 1596 	jrpl 1$ 
      00093A 03 01            [ 1] 1597 	cpl (SIGN,sp)
      00093C 50               [ 2] 1598 	negw x 	 
      00093D                       1599 1$:	
      00093D C6 00 0A         [ 1] 1600 	ld a,base 
      000940 62               [ 2] 1601 	div x,a 
      000941 AB 30            [ 1] 1602 	add a,#'0 
      000943 A1 3A            [ 1] 1603 	cp a,#'9+1 
      000945 2B 02            [ 1] 1604 	jrmi 2$ 
      000947 AB 07            [ 1] 1605 	add a,#7 
      000949 90 5A            [ 2] 1606 2$: decw y 
      00094B 90 F7            [ 1] 1607 	ld (y),a 
      00094D 5D               [ 2] 1608 	tnzw x 
      00094E 26 ED            [ 1] 1609 	jrne 1$ 
      000950 A6 10            [ 1] 1610 	ld a,#16 
      000952 C1 00 0A         [ 1] 1611 	cp a,base 
      000955 26 08            [ 1] 1612 	jrne 3$
      000957 A6 24            [ 1] 1613 	ld a,#'$
      000959 90 5A            [ 2] 1614 	decw y  
      00095B 90 F7            [ 1] 1615 	ld (y),a
      00095D 20 0A            [ 2] 1616 	jra 9$ 
      00095F 0D 01            [ 1] 1617 3$: tnz (SIGN,sp)
      000961 27 06            [ 1] 1618 	jreq 9$ 
      000963 A6 2D            [ 1] 1619 	ld a,#'-
      000965 90 5A            [ 2] 1620 	decw y  
      000967 90 F7            [ 1] 1621 	ld (y),a
      000969                       1622 9$:	
      000969 96               [ 1] 1623 	ldw x,sp 
      00096A 1C 00 0A         [ 2] 1624 	addw x,#STREND  
      00096D 90 89            [ 2] 1625 	pushw y
      00096F 72 F0 01         [ 2] 1626 	subw x,(1,sp)
      000972                       1627 	_drop 2 
      000972 5B 02            [ 2]    1     addw sp,#2 
      000974                       1628 10$:
      000974 9F               [ 1] 1629 	ld a,xl 
      000975 C1 00 24         [ 1] 1630 	cp a,tab_width
      000978 24 08            [ 1] 1631 	jruge 12$
      00097A A6 20            [ 1] 1632 	ld a,#SPACE 
      00097C CD 01 C4         [ 4] 1633 	call putc 
      00097F 5C               [ 2] 1634 	incw x 
      000980 20 F2            [ 2] 1635 	jra 10$ 
      000982                       1636 12$:
      000982 93               [ 1] 1637     ldw x,y 
      000983 CD 01 D7         [ 4] 1638 	call puts  
      000986                       1639 	_drop VSIZE 
      000986 5B 0A            [ 2]    1     addw sp,#VSIZE 
      000988 81               [ 4] 1640 	ret 
                                   1641 
                                   1642 ;------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1643 ; convert integer in acc24 to string
                                   1644 ; input:
                                   1645 ;   A	  	base
                                   1646 ;	acc24	integer to convert
                                   1647 ; output:
                                   1648 ;   X  		pointer to string
                                   1649 ;------------------------------------
                           000001  1650 	SIGN=1  ; integer sign 
                           000002  1651 	BASE=2  ; numeric base 
                           000002  1652 	VSIZE=2  ;locals size
      000989                       1653 itoa:
      000989 52 02            [ 2] 1654 	sub sp,#VSIZE
      00098B 6B 02            [ 1] 1655 	ld (BASE,sp), a  ; base
      00098D 0F 01            [ 1] 1656 	clr (SIGN,sp)    ; sign
      00098F A1 0A            [ 1] 1657 	cp a,#10
      000991 26 0A            [ 1] 1658 	jrne 1$
                                   1659 	; base 10 string display with negative sign if bit 23==1
      000993 72 0F 00 0B 05   [ 2] 1660 	btjf acc24,#7,1$
      000998 03 01            [ 1] 1661 	cpl (SIGN,sp)
      00099A CD 0A 32         [ 4] 1662 	call neg_acc24
      00099D                       1663 1$:
                                   1664 ; initialize string pointer 
      00099D AE 17 5F         [ 2] 1665 	ldw x,#pad+PAD_SIZE-1
      0009A0 7F               [ 1] 1666 	clr (x)
      0009A1                       1667 itoa_loop:
      0009A1 7B 02            [ 1] 1668     ld a,(BASE,sp)
      0009A3 CD 09 D0         [ 4] 1669     call divu24_8 ; acc24/A 
      0009A6 AB 30            [ 1] 1670     add a,#'0  ; remainder of division
      0009A8 A1 3A            [ 1] 1671     cp a,#'9+1
      0009AA 2B 02            [ 1] 1672     jrmi 2$
      0009AC AB 07            [ 1] 1673     add a,#7 
      0009AE 5A               [ 2] 1674 2$: decw x
      0009AF F7               [ 1] 1675     ld (x),a
                                   1676 	; if acc24==0 conversion done
      0009B0 C6 00 0B         [ 1] 1677 	ld a,acc24
      0009B3 CA 00 0C         [ 1] 1678 	or a,acc16
      0009B6 CA 00 0D         [ 1] 1679 	or a,acc8
      0009B9 26 E6            [ 1] 1680     jrne itoa_loop
                                   1681 	;conversion done, next add '$' or '-' as required
      0009BB 7B 02            [ 1] 1682 	ld a,(BASE,sp)
      0009BD A1 10            [ 1] 1683 	cp a,#16
      0009BF 27 08            [ 1] 1684 	jreq 8$
      0009C1 7B 01            [ 1] 1685 	ld a,(SIGN,sp)
      0009C3 27 08            [ 1] 1686     jreq 10$
      0009C5 A6 2D            [ 1] 1687     ld a,#'-
      0009C7 20 02            [ 2] 1688 	jra 9$ 
      0009C9 A6 24            [ 1] 1689 8$: ld a,#'$ 
      0009CB 5A               [ 2] 1690 9$: decw x
      0009CC F7               [ 1] 1691     ld (x),a
      0009CD                       1692 10$:
      0009CD 5B 02            [ 2] 1693 	addw sp,#VSIZE
      0009CF 81               [ 4] 1694 	ret
                                   1695 
                                   1696 ;-------------------------------------
                                   1697 ; divide uint24_t by uint8_t
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1698 ; used to convert uint24_t to string
                                   1699 ; input:
                                   1700 ;	acc24	dividend
                                   1701 ;   A 		divisor
                                   1702 ; output:
                                   1703 ;   acc24	quotient
                                   1704 ;   A		remainder
                                   1705 ;------------------------------------- 
                                   1706 ; offset  on sp of arguments and locals
                           000001  1707 	U8   = 1   ; divisor on stack
                           000001  1708 	VSIZE =1
      0009D0                       1709 divu24_8:
      0009D0 89               [ 2] 1710 	pushw x ; save x
      0009D1 88               [ 1] 1711 	push a 
                                   1712 	; ld dividend UU:MM bytes in X
      0009D2 C6 00 0B         [ 1] 1713 	ld a, acc24
      0009D5 95               [ 1] 1714 	ld xh,a
      0009D6 C6 00 0C         [ 1] 1715 	ld a,acc24+1
      0009D9 97               [ 1] 1716 	ld xl,a
      0009DA 7B 01            [ 1] 1717 	ld a,(U8,SP) ; divisor
      0009DC 62               [ 2] 1718 	div x,a ; UU:MM/U8
      0009DD 88               [ 1] 1719 	push a  ;save remainder
      0009DE 9E               [ 1] 1720 	ld a,xh
      0009DF C7 00 0B         [ 1] 1721 	ld acc24,a
      0009E2 9F               [ 1] 1722 	ld a,xl
      0009E3 C7 00 0C         [ 1] 1723 	ld acc24+1,a
      0009E6 84               [ 1] 1724 	pop a
      0009E7 95               [ 1] 1725 	ld xh,a
      0009E8 C6 00 0D         [ 1] 1726 	ld a,acc24+2
      0009EB 97               [ 1] 1727 	ld xl,a
      0009EC 7B 01            [ 1] 1728 	ld a,(U8,sp) ; divisor
      0009EE 62               [ 2] 1729 	div x,a  ; R:LL/U8
      0009EF 6B 01            [ 1] 1730 	ld (U8,sp),a ; save remainder
      0009F1 9F               [ 1] 1731 	ld a,xl
      0009F2 C7 00 0D         [ 1] 1732 	ld acc24+2,a
      0009F5 84               [ 1] 1733 	pop a
      0009F6 85               [ 2] 1734 	popw x
      0009F7 81               [ 4] 1735 	ret
                                   1736 
                                   1737 ;--------------------------------------
                                   1738 ; unsigned multiply uint24_t by uint8_t
                                   1739 ; use to convert numerical string to uint24_t
                                   1740 ; input:
                                   1741 ;	acc24	uint24_t 
                                   1742 ;   A		uint8_t
                                   1743 ; output:
                                   1744 ;   acc24   A*acc24
                                   1745 ;-------------------------------------
                                   1746 ; local variables offset  on sp
                           000003  1747 	U8   = 3   ; A pushed on stack
                           000002  1748 	OVFL = 2  ; multiplicaton overflow low byte
                           000001  1749 	OVFH = 1  ; multiplication overflow high byte
                           000003  1750 	VSIZE = 3
      0009F8                       1751 mulu24_8:
      0009F8 89               [ 2] 1752 	pushw x    ; save X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1753 	; local variables
      0009F9 88               [ 1] 1754 	push a     ; U8
      0009FA 5F               [ 1] 1755 	clrw x     ; initialize overflow to 0
      0009FB 89               [ 2] 1756 	pushw x    ; multiplication overflow
                                   1757 ; multiply low byte.
      0009FC C6 00 0D         [ 1] 1758 	ld a,acc24+2
      0009FF 97               [ 1] 1759 	ld xl,a
      000A00 7B 03            [ 1] 1760 	ld a,(U8,sp)
      000A02 42               [ 4] 1761 	mul x,a
      000A03 9F               [ 1] 1762 	ld a,xl
      000A04 C7 00 0D         [ 1] 1763 	ld acc24+2,a
      000A07 9E               [ 1] 1764 	ld a, xh
      000A08 6B 02            [ 1] 1765 	ld (OVFL,sp),a
                                   1766 ; multipy middle byte
      000A0A C6 00 0C         [ 1] 1767 	ld a,acc24+1
      000A0D 97               [ 1] 1768 	ld xl,a
      000A0E 7B 03            [ 1] 1769 	ld a, (U8,sp)
      000A10 42               [ 4] 1770 	mul x,a
                                   1771 ; add overflow to this partial product
      000A11 72 FB 01         [ 2] 1772 	addw x,(OVFH,sp)
      000A14 9F               [ 1] 1773 	ld a,xl
      000A15 C7 00 0C         [ 1] 1774 	ld acc24+1,a
      000A18 4F               [ 1] 1775 	clr a
      000A19 A9 00            [ 1] 1776 	adc a,#0
      000A1B 6B 01            [ 1] 1777 	ld (OVFH,sp),a
      000A1D 9E               [ 1] 1778 	ld a,xh
      000A1E 6B 02            [ 1] 1779 	ld (OVFL,sp),a
                                   1780 ; multiply most signficant byte	
      000A20 C6 00 0B         [ 1] 1781 	ld a, acc24
      000A23 97               [ 1] 1782 	ld xl, a
      000A24 7B 03            [ 1] 1783 	ld a, (U8,sp)
      000A26 42               [ 4] 1784 	mul x,a
      000A27 72 FB 01         [ 2] 1785 	addw x, (OVFH,sp)
      000A2A 9F               [ 1] 1786 	ld a, xl
      000A2B C7 00 0B         [ 1] 1787 	ld acc24,a
      000A2E 5B 03            [ 2] 1788     addw sp,#VSIZE
      000A30 85               [ 2] 1789 	popw x
      000A31 81               [ 4] 1790 	ret
                                   1791 
                                   1792 ;------------------------------------
                                   1793 ;  two's complement acc24
                                   1794 ;  input:
                                   1795 ;		acc24 variable
                                   1796 ;  output:
                                   1797 ;		acc24 variable
                                   1798 ;-------------------------------------
      000A32                       1799 neg_acc24:
      000A32 72 53 00 0D      [ 1] 1800 	cpl acc24+2
      000A36 72 53 00 0C      [ 1] 1801 	cpl acc24+1
      000A3A 72 53 00 0B      [ 1] 1802 	cpl acc24
      000A3E A6 01            [ 1] 1803 	ld a,#1
      000A40 CB 00 0D         [ 1] 1804 	add a,acc24+2
      000A43 C7 00 0D         [ 1] 1805 	ld acc24+2,a
      000A46 4F               [ 1] 1806 	clr a
      000A47 C9 00 0C         [ 1] 1807 	adc a,acc24+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000A4A C7 00 0C         [ 1] 1808 	ld acc24+1,a 
      000A4D 4F               [ 1] 1809 	clr a 
      000A4E C9 00 0B         [ 1] 1810 	adc a,acc24 
      000A51 C7 00 0B         [ 1] 1811 	ld acc24,a 
      000A54 81               [ 4] 1812 	ret
                                   1813 
                                   1814 
                                   1815 ;------------------------------------
                                   1816 ; read a line of text from terminal
                                   1817 ; input:
                                   1818 ;	none
                                   1819 ; local variable on stack:
                                   1820 ;	LL  line length
                                   1821 ;   RXCHAR last received character 
                                   1822 ; output:
                                   1823 ;   text in tib  buffer
                                   1824 ;   count  line length 
                                   1825 ;------------------------------------
                                   1826 	; local variables
                           000001  1827 	LL_HB=1
                           000001  1828 	RXCHAR = 1 ; last char received
                           000002  1829 	LL = 2  ; accepted line length
                           000002  1830 	VSIZE=2 
      000A55                       1831 readln:
      000A55 4B 00            [ 1] 1832 	push #0
      000A57 4B 00            [ 1] 1833 	push #0  
      000A59 90 AE 16 90      [ 2] 1834  	ldw y,#tib ; input buffer
      000A5D                       1835 readln_loop:
      000A5D CD 01 CD         [ 4] 1836 	call getc
      000A60 6B 01            [ 1] 1837 	ld (RXCHAR,sp),a
      000A62 A1 0D            [ 1] 1838 	cp a,#CR
      000A64 26 03            [ 1] 1839 	jrne 1$
      000A66 CC 0A D2         [ 2] 1840 	jp readln_quit
      000A69 A1 0A            [ 1] 1841 1$:	cp a,#LF 
      000A6B 27 65            [ 1] 1842 	jreq readln_quit
      000A6D A1 08            [ 1] 1843 	cp a,#BS
      000A6F 27 3D            [ 1] 1844 	jreq del_back
      000A71 A1 04            [ 1] 1845 	cp a,#CTRL_D
      000A73 27 2A            [ 1] 1846 	jreq del_ln
      000A75 A1 12            [ 1] 1847 	cp a,#CTRL_R 
      000A77 27 06            [ 1] 1848 	jreq reprint 
                                   1849 ;	cp a,#'[
                                   1850 ;	jreq ansi_seq
      000A79                       1851 final_test:
      000A79 A1 20            [ 1] 1852 	cp a,#SPACE
      000A7B 2A 40            [ 1] 1853 	jrpl accept_char
      000A7D 20 DE            [ 2] 1854 	jra readln_loop
      000A7F                       1855 ansi_seq:
                                   1856 ;	call getc
                                   1857 ;	cp a,#'C 
                                   1858 ;	jreq rigth_arrow
                                   1859 ;	cp a,#'D 
                                   1860 ;	jreq left_arrow 
                                   1861 ;	jra final_test
      000A7F                       1862 right_arrow:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1863 ;	ld a,#BSP 
                                   1864 ;	call putc 
                                   1865 ;	jra realn_loop 
      000A7F                       1866 left_arrow:
                                   1867 ;	jra readln_loop
      000A7F                       1868 reprint: 
      000A7F 0D 02            [ 1] 1869 	tnz (LL,sp)
      000A81 26 DA            [ 1] 1870 	jrne readln_loop
      000A83 AE 16 90         [ 2] 1871 	ldw x,#tib 
      000A86 CD 02 B6         [ 4] 1872 	call strlen 
      000A89 90 AE 16 90      [ 2] 1873 	ldw y,#tib 
      000A8D 9F               [ 1] 1874 	ld a,xl
      000A8E 27 CD            [ 1] 1875 	jreq readln_loop
      000A90 6B 02            [ 1] 1876 	ld (LL,sp),a 
      000A92 AE 16 90         [ 2] 1877 	ldw x,#tib 
      000A95 CD 01 D7         [ 4] 1878 	call puts
      000A98 0F 01            [ 1] 1879 	clr (LL_HB,sp)
      000A9A 72 F9 01         [ 2] 1880 	addw y,(LL_HB,sp)
      000A9D 20 BE            [ 2] 1881 	jra readln_loop 
      000A9F                       1882 del_ln:
      000A9F 7B 02            [ 1] 1883 	ld a,(LL,sp)
      000AA1 CD 01 F1         [ 4] 1884 	call delete
      000AA4 90 AE 16 90      [ 2] 1885 	ldw y,#tib
      000AA8 90 7F            [ 1] 1886 	clr (y)
      000AAA 0F 02            [ 1] 1887 	clr (LL,sp)
      000AAC 20 AF            [ 2] 1888 	jra readln_loop
      000AAE                       1889 del_back:
      000AAE 0D 02            [ 1] 1890     tnz (LL,sp)
      000AB0 27 AB            [ 1] 1891     jreq readln_loop
      000AB2 0A 02            [ 1] 1892     dec (LL,sp)
      000AB4 90 5A            [ 2] 1893     decw y
      000AB6 90 7F            [ 1] 1894     clr  (y)
      000AB8 CD 01 E1         [ 4] 1895     call bksp 
      000ABB 20 A0            [ 2] 1896     jra readln_loop	
      000ABD                       1897 accept_char:
      000ABD A6 4F            [ 1] 1898 	ld a,#TIB_SIZE-1
      000ABF 11 02            [ 1] 1899 	cp a, (LL,sp)
      000AC1 27 9A            [ 1] 1900 	jreq readln_loop
      000AC3 7B 01            [ 1] 1901 	ld a,(RXCHAR,sp)
      000AC5 90 F7            [ 1] 1902 	ld (y),a
      000AC7 0C 02            [ 1] 1903 	inc (LL,sp)
      000AC9 90 5C            [ 2] 1904 	incw y
      000ACB 90 7F            [ 1] 1905 	clr (y)
      000ACD CD 01 C4         [ 4] 1906 	call putc 
      000AD0 20 8B            [ 2] 1907 	jra readln_loop
      000AD2                       1908 readln_quit:
      000AD2 90 7F            [ 1] 1909 	clr (y)
      000AD4 7B 02            [ 1] 1910 	ld a,(LL,sp)
      000AD6 C7 00 03         [ 1] 1911 	ld count,a 
      000AD9 A6 0D            [ 1] 1912 	ld a,#CR
      000ADB CD 01 C4         [ 4] 1913 	call putc
      000ADE                       1914 	_drop VSIZE 
      000ADE 5B 02            [ 2]    1     addw sp,#VSIZE 
      000AE0 81               [ 4] 1915 	ret
                                   1916 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1917 
                                   1918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1919 ;; compiler routines        ;;
                                   1920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1921 ;------------------------------------
                                   1922 ; parse quoted string 
                                   1923 ; input:
                                   1924 ;   Y 	pointer to tib 
                                   1925 ;   X   pointer to output buffer 
                                   1926 ; output:
                                   1927 ;	buffer   parsed string
                                   1928 ;------------------------------------
                           000001  1929 	PREV = 1
                           000002  1930 	CURR =2
                           000002  1931 	VSIZE=2
      000AE1                       1932 parse_quote: 
      000AE1                       1933 	_vars VSIZE 
      000AE1 52 02            [ 2]    1     sub sp,#VSIZE 
      000AE3 4F               [ 1] 1934 	clr a
      000AE4 6B 01            [ 1] 1935 1$:	ld (PREV,sp),a 
      000AE6                       1936 2$:	
      000AE6 91 D6 00         [ 4] 1937 	ld a,([in.w],y)
      000AE9 27 24            [ 1] 1938 	jreq 6$
      000AEB 72 5C 00 01      [ 1] 1939 	inc in 
      000AEF 6B 02            [ 1] 1940 	ld (CURR,sp),a 
      000AF1 A6 5C            [ 1] 1941 	ld a,#'\
      000AF3 11 01            [ 1] 1942 	cp a, (PREV,sp)
      000AF5 26 0A            [ 1] 1943 	jrne 3$
      000AF7 0F 01            [ 1] 1944 	clr (PREV,sp)
      000AF9 7B 02            [ 1] 1945 	ld a,(CURR,sp)
      000AFB AD 1C            [ 4] 1946 	callr convert_escape
      000AFD F7               [ 1] 1947 	ld (x),a 
      000AFE 5C               [ 2] 1948 	incw x 
      000AFF 20 E5            [ 2] 1949 	jra 2$
      000B01                       1950 3$:
      000B01 7B 02            [ 1] 1951 	ld a,(CURR,sp)
      000B03 A1 5C            [ 1] 1952 	cp a,#'\'
      000B05 27 DD            [ 1] 1953 	jreq 1$
      000B07 A1 22            [ 1] 1954 	cp a,#'"
      000B09 27 04            [ 1] 1955 	jreq 6$ 
      000B0B F7               [ 1] 1956 	ld (x),a 
      000B0C 5C               [ 2] 1957 	incw x 
      000B0D 20 D7            [ 2] 1958 	jra 2$
      000B0F                       1959 6$:
      000B0F 7F               [ 1] 1960 	clr (x)
      000B10 5C               [ 2] 1961 	incw x 
      000B11 90 93            [ 1] 1962 	ldw y,x 
      000B13 5F               [ 1] 1963 	clrw x 
      000B14 A6 02            [ 1] 1964 	ld a,#TK_QSTR  
      000B16                       1965 	_drop VSIZE
      000B16 5B 02            [ 2]    1     addw sp,#VSIZE 
      000B18 81               [ 4] 1966 	ret 
                                   1967 
                                   1968 ;---------------------------------------
                                   1969 ; called by parse_quote
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1970 ; subtitute escaped character 
                                   1971 ; by their ASCII value .
                                   1972 ; input:
                                   1973 ;   A  character following '\'
                                   1974 ; output:
                                   1975 ;   A  substitued char or same if not valid.
                                   1976 ;---------------------------------------
      000B19                       1977 convert_escape:
      000B19 89               [ 2] 1978 	pushw x 
      000B1A AE 0B 2E         [ 2] 1979 	ldw x,#escaped 
      000B1D F1               [ 1] 1980 1$:	cp a,(x)
      000B1E 27 06            [ 1] 1981 	jreq 2$
      000B20 7D               [ 1] 1982 	tnz (x)
      000B21 27 09            [ 1] 1983 	jreq 3$
      000B23 5C               [ 2] 1984 	incw x 
      000B24 20 F7            [ 2] 1985 	jra 1$
      000B26 1D 0B 2E         [ 2] 1986 2$: subw x,#escaped 
      000B29 9F               [ 1] 1987 	ld a,xl 
      000B2A AB 07            [ 1] 1988 	add a,#7
      000B2C 85               [ 2] 1989 3$:	popw x 
      000B2D 81               [ 4] 1990 	ret 
                                   1991 
      000B2E 61 62 74 6E 76 66 72  1992 escaped: .asciz "abtnvfr"
             00
                                   1993 
                                   1994 ;-------------------------
                                   1995 ; integer parser 
                                   1996 ; input:
                                   1997 ;   X 		point to output buffer  
                                   1998 ;   Y 		point to tib 
                                   1999 ;   A 	    first digit|'$' 
                                   2000 ; output:  
                                   2001 ;   pad     number string 
                                   2002 ;   X 		integer 
                                   2003 ;   A 		TK_INTGR
                                   2004 ;-------------------------
                           000001  2005 	BASE=1
                           000002  2006 	TCHAR=2 
                           000003  2007 	XSAVE=3
                           000004  2008 	VSIZE=4 
      000B36                       2009 parse_integer: ; { -- n }
      000B36 89               [ 2] 2010 	pushw x 	
      000B37 4B 00            [ 1] 2011 	push #0 ; TCHAR
      000B39 4B 0A            [ 1] 2012 	push #10 ; BASE=10
      000B3B A1 24            [ 1] 2013 	cp a,#'$
      000B3D 26 04            [ 1] 2014 	jrne 2$ 
      000B3F                       2015     _drop #1
      000B3F 5B 01            [ 2]    1     addw sp,##1 
      000B41 4B 10            [ 1] 2016 	push #16  ; BASE=16
      000B43 F7               [ 1] 2017 2$:	ld (x),a 
      000B44 5C               [ 2] 2018 	incw x 
      000B45 91 D6 00         [ 4] 2019 	ld a,([in.w],y)
      000B48 72 5C 00 01      [ 1] 2020 	inc in 
      000B4C CD 0D C9         [ 4] 2021 	call to_upper 
      000B4F 6B 02            [ 1] 2022 	ld (TCHAR,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000B51 CD 04 A0         [ 4] 2023 	call is_digit 
      000B54 25 ED            [ 1] 2024 	jrc 2$
      000B56 A6 10            [ 1] 2025 	ld a,#16 
      000B58 11 01            [ 1] 2026 	cp a,(BASE,sp)
      000B5A 26 0A            [ 1] 2027 	jrne 3$ 
      000B5C 7B 02            [ 1] 2028 	ld a,(TCHAR,sp)
      000B5E A1 41            [ 1] 2029 	cp a,#'A 
      000B60 2B 04            [ 1] 2030 	jrmi 3$ 
      000B62 A1 47            [ 1] 2031 	cp a,#'G 
      000B64 2B DD            [ 1] 2032 	jrmi 2$ 
      000B66 72 5A 00 01      [ 1] 2033 3$: dec in 	
      000B6A 7F               [ 1] 2034     clr (x)
      000B6B 1E 03            [ 2] 2035 	ldw x,(XSAVE,sp)
      000B6D CD 0D D5         [ 4] 2036 	call atoi24
      000B70 90 93            [ 1] 2037 	ldw y,x 
      000B72 CE 00 0C         [ 2] 2038 	ldw x,acc16 
      000B75 A6 84            [ 1] 2039 	ld a,#TK_INTGR
      000B77 90 FF            [ 2] 2040 	ldw (y),x 
      000B79 72 A9 00 02      [ 2] 2041 	addw y,#2
      000B7D                       2042 	_drop VSIZE  
      000B7D 5B 04            [ 2]    1     addw sp,#VSIZE 
      000B7F 81               [ 4] 2043 	ret 	
                                   2044 
                                   2045 ;-------------------------
                                   2046 ; binary integer parser
                                   2047 ; build integer in acc24  
                                   2048 ; input:
                                   2049 ;   X 		point to output buffer  
                                   2050 ;   Y 		point to tib 
                                   2051 ;   A 	    '&' 
                                   2052 ; output:  
                                   2053 ;   buffer  TK_INTGR integer  
                                   2054 ;   X 		int16 
                                   2055 ;   A 		TK_INTGR
                                   2056 ;   acc24    int24 
                                   2057 ;-------------------------
                           000001  2058 	BINARY=1 ; 24 bits integer 
                           000003  2059 	VSIZE=3
      000B80                       2060 parse_binary: ; { -- n }
      000B80 4B 00            [ 1] 2061 	push #0
      000B82 4B 00            [ 1] 2062 	push #0
      000B84 4B 00            [ 1] 2063 	push #0
      000B86                       2064 2$:	
      000B86 91 D6 00         [ 4] 2065 	ld a,([in.w],y)
      000B89 72 5C 00 01      [ 1] 2066 	inc in 
      000B8D A1 30            [ 1] 2067 	cp a,#'0 
      000B8F 27 06            [ 1] 2068 	jreq 3$
      000B91 A1 31            [ 1] 2069 	cp a,#'1 
      000B93 27 02            [ 1] 2070 	jreq 3$ 
      000B95 20 0B            [ 2] 2071 	jra bin_exit 
      000B97 A0 30            [ 1] 2072 3$: sub a,#'0 
      000B99 46               [ 1] 2073 	rrc a
      000B9A 09 03            [ 1] 2074 	rlc (BINARY+2,sp) 
      000B9C 09 02            [ 1] 2075 	rlc (BINARY+1,sp)
      000B9E 09 01            [ 1] 2076 	rlc (BINARY,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000BA0 20 E4            [ 2] 2077 	jra 2$  
      000BA2                       2078 bin_exit:
      000BA2 72 5A 00 01      [ 1] 2079 	dec in 
      000BA6 90 93            [ 1] 2080 	ldw y,x
      000BA8 7B 01            [ 1] 2081 	ld a,(BINARY,sp)
      000BAA C7 00 0B         [ 1] 2082 	ld acc24,a 
      000BAD 1E 02            [ 2] 2083 	ldw x,(BINARY+1,sp)
      000BAF CF 00 0C         [ 2] 2084 	ldw acc16,x
      000BB2 90 FF            [ 2] 2085 	ldw (y),x 
      000BB4 72 A9 00 02      [ 2] 2086 	addw y,#2  
      000BB8 A6 84            [ 1] 2087 	ld a,#TK_INTGR 	
      000BBA                       2088 	_drop VSIZE 
      000BBA 5B 03            [ 2]    1     addw sp,#VSIZE 
      000BBC 81               [ 4] 2089 	ret
                                   2090 
                                   2091 ;---------------------------
                                   2092 ;  token begin with a letter,
                                   2093 ;  is keyword or variable. 	
                                   2094 ; input:
                                   2095 ;   X 		point to pad 
                                   2096 ;   Y 		point to text
                                   2097 ;   A 	    first letter  
                                   2098 ; output:
                                   2099 ;   X		exec_addr|var_addr 
                                   2100 ;   A 		TK_CMD|TK_IFUNC|TK_CFUNC  
                                   2101 ;   pad 	keyword|var_name  
                                   2102 ;--------------------------  
                           000001  2103 	XFIRST=1
                           000002  2104 	VSIZE=2
      000BBD                       2105 parse_keyword: 
      000BBD 89               [ 2] 2106 	pushw x 
      000BBE                       2107 kw_loop:	
      000BBE CD 0D C9         [ 4] 2108 	call to_upper 
      000BC1 F7               [ 1] 2109 	ld (x),a 
      000BC2 5C               [ 2] 2110 	incw x 
      000BC3 91 D6 00         [ 4] 2111 	ld a,([in.w],y)
      000BC6 72 5C 00 01      [ 1] 2112 	inc in 
      000BCA CD 04 8F         [ 4] 2113 	call is_alpha 
      000BCD 25 EF            [ 1] 2114 	jrc kw_loop
      000BCF 72 5A 00 01      [ 1] 2115 	dec in   
      000BD3 7F               [ 1] 2116 1$: clr (x)
      000BD4 1E 01            [ 2] 2117 	ldw x,(XFIRST,sp) 
      000BD6 E6 01            [ 1] 2118 	ld a,(1,x)
      000BD8 26 13            [ 1] 2119 	jrne 2$
                                   2120 ; one letter variable name 
      000BDA F6               [ 1] 2121 	ld a,(x) 
      000BDB A0 41            [ 1] 2122 	sub a,#'A 
      000BDD 48               [ 1] 2123 	sll a 
      000BDE 88               [ 1] 2124 	push a 
      000BDF 4B 00            [ 1] 2125 	push #0
      000BE1 AE 00 26         [ 2] 2126 	ldw x,#vars 
      000BE4 72 FB 01         [ 2] 2127 	addw x,(1,sp) ; X=var address 
      000BE7                       2128 	_drop 2 
      000BE7 5B 02            [ 2]    1     addw sp,#2 
      000BE9 A6 85            [ 1] 2129 	ld a,#TK_VAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000BEB 20 0E            [ 2] 2130 	jra 4$ 
      000BED                       2131 2$: ; check for keyword, otherwise syntax error.
      000BED                       2132 	_ldx_dict kword_dict ; dictionary entry point
      000BED AE 25 82         [ 2]    1     ldw x,#kword_dict+2
      000BF0 16 01            [ 2] 2133 	ldw y,(XFIRST,sp) ; name to search for
      000BF2 CD 0F 2F         [ 4] 2134 	call search_dict
      000BF5 4D               [ 1] 2135 	tnz a
      000BF6 26 03            [ 1] 2136 	jrne 4$ 
      000BF8 CC 07 95         [ 2] 2137 	jp syntax_error
      000BFB                       2138 4$:	
      000BFB 16 01            [ 2] 2139 	ldw y,(XFIRST,sp)
      000BFD 90 F7            [ 1] 2140 	ld (y),a 
      000BFF 90 5C            [ 2] 2141 	incw y 
      000C01 90 FF            [ 2] 2142 	ldw (y),x
      000C03 72 A9 00 02      [ 2] 2143 	addw y,#2  
      000C07                       2144 	_drop VSIZE 
      000C07 5B 02            [ 2]    1     addw sp,#VSIZE 
      000C09 81               [ 4] 2145 	ret  	
                                   2146 
                                   2147 
                                   2148 ;------------------------------------
                                   2149 ; scan text for next token
                                   2150 ; input: 
                                   2151 ;	X 		pointer to buffer where 
                                   2152 ;	        token id and value are copied 
                                   2153 ; use:
                                   2154 ;	Y   pointer to text in tib 
                                   2155 ; output:
                                   2156 ;   A       token attribute 
                                   2157 ;   X 		token value
                                   2158 ;   Y       updated position in output buffer   
                                   2159 ;------------------------------------
                                   2160 	; use to check special character 
                                   2161 	.macro _case c t  
                                   2162 	ld a,#c 
                                   2163 	cp a,(TCHAR,sp) 
                                   2164 	jrne t
                                   2165 	.endm 
                                   2166 
                           000001  2167 	TCHAR=1
                           000002  2168 	ATTRIB=2
                           000002  2169 	VSIZE=2
      000C0A                       2170 get_token: 
      000C0A                       2171 	_vars VSIZE
      000C0A 52 02            [ 2]    1     sub sp,#VSIZE 
                                   2172 ;	ld a,in 
                                   2173 ;	sub a,count
                                   2174 ;   jrmi 0$
                                   2175 ;	clr a 
                                   2176 ;	ret 
      000C0C                       2177 0$: 
      000C0C 90 AE 16 90      [ 2] 2178 	ldw y,#tib    	
      000C10 A6 20            [ 1] 2179 	ld a,#SPACE
      000C12 CD 0E 3F         [ 4] 2180 	call skip
      000C15 55 00 01 00 02   [ 1] 2181 	mov in.saved,in 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000C1A 91 D6 00         [ 4] 2182 	ld a,([in.w],y)
      000C1D 26 05            [ 1] 2183 	jrne 1$
      000C1F 90 93            [ 1] 2184 	ldw y,x 
      000C21 CC 0D C6         [ 2] 2185 	jp token_exit ; end of line 
      000C24 72 5C 00 01      [ 1] 2186 1$:	inc in 
      000C28 CD 0D C9         [ 4] 2187 	call to_upper 
      000C2B 6B 01            [ 1] 2188 	ld (TCHAR,sp),a 
                                   2189 ; check for quoted string
      000C2D                       2190 str_tst:  	
      000C2D                       2191 	_case '"' nbr_tst
      000C2D A6 22            [ 1]    1 	ld a,#'"' 
      000C2F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C31 26 0A            [ 1]    3 	jrne nbr_tst
      000C33 A6 02            [ 1] 2192 	ld a,#TK_QSTR
      000C35 F7               [ 1] 2193 	ld (x),a 
      000C36 5C               [ 2] 2194 	incw x 
      000C37 CD 0A E1         [ 4] 2195 	call parse_quote
      000C3A CC 0D C6         [ 2] 2196 	jp token_exit
      000C3D                       2197 nbr_tst:
                                   2198 ; check for hexadecimal number 
      000C3D A6 24            [ 1] 2199 	ld a,#'$'
      000C3F 11 01            [ 1] 2200 	cp a,(TCHAR,sp) 
      000C41 27 17            [ 1] 2201 	jreq 1$
                                   2202 ;check for binary number 
      000C43 A6 26            [ 1] 2203 	ld a,#'&
      000C45 11 01            [ 1] 2204 	cp a,(TCHAR,sp)
      000C47 26 0A            [ 1] 2205 	jrne 0$
      000C49 A6 84            [ 1] 2206 	ld a,#TK_INTGR
      000C4B F7               [ 1] 2207 	ld (x),a 
      000C4C 5C               [ 2] 2208 	incw x 
      000C4D CD 0B 80         [ 4] 2209 	call parse_binary ; expect binary integer 
      000C50 CC 0D C6         [ 2] 2210 	jp token_exit 
                                   2211 ; check for decimal number 	
      000C53 7B 01            [ 1] 2212 0$:	ld a,(TCHAR,sp)
      000C55 CD 04 A0         [ 4] 2213 	call is_digit
      000C58 24 0C            [ 1] 2214 	jrnc 3$
      000C5A A6 84            [ 1] 2215 1$:	ld a,#TK_INTGR 
      000C5C F7               [ 1] 2216 	ld (x),a 
      000C5D 5C               [ 2] 2217 	incw x 
      000C5E 7B 01            [ 1] 2218 	ld a,(TCHAR,sp)
      000C60 CD 0B 36         [ 4] 2219 	call parse_integer 
      000C63 CC 0D C6         [ 2] 2220 	jp token_exit 
      000C66                       2221 3$: 
      000C66                       2222 	_case '(' bkslsh_tst 
      000C66 A6 28            [ 1]    1 	ld a,#'(' 
      000C68 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C6A 26 05            [ 1]    3 	jrne bkslsh_tst
      000C6C A6 07            [ 1] 2223 	ld a,#TK_LPAREN
      000C6E CC 0D C2         [ 2] 2224 	jp token_char   	
      000C71                       2225 bkslsh_tst: ; character token 
      000C71                       2226 	_case '\',rparnt_tst
      000C71 A6 5C            [ 1]    1 	ld a,#'\' 
      000C73 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C75 26 16            [ 1]    3 	jrne rparnt_tst
      000C77 A6 03            [ 1] 2227 	ld a,#TK_CHAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000C79 F7               [ 1] 2228 	ld (x),a 
      000C7A 5C               [ 2] 2229 	incw x 
      000C7B 91 D6 00         [ 4] 2230 	ld a,([in.w],y)
      000C7E F7               [ 1] 2231 	ld (x),a 
      000C7F 5C               [ 2] 2232 	incw x
      000C80 90 93            [ 1] 2233 	ldw y,x 	 
      000C82 72 5C 00 01      [ 1] 2234 	inc in  
      000C86 5F               [ 1] 2235 	clrw x 
      000C87 97               [ 1] 2236 	ld xl,a 
      000C88 A6 03            [ 1] 2237 	ld a,#TK_CHAR 
      000C8A CC 0D C6         [ 2] 2238 	jp token_exit 
      000C8D                       2239 rparnt_tst:		
      000C8D                       2240 	_case ')' colon_tst 
      000C8D A6 29            [ 1]    1 	ld a,#')' 
      000C8F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C91 26 05            [ 1]    3 	jrne colon_tst
      000C93 A6 08            [ 1] 2241 	ld a,#TK_RPAREN 
      000C95 CC 0D C2         [ 2] 2242 	jp token_char
      000C98                       2243 colon_tst:
      000C98                       2244 	_case ':' comma_tst 
      000C98 A6 3A            [ 1]    1 	ld a,#':' 
      000C9A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000C9C 26 05            [ 1]    3 	jrne comma_tst
      000C9E A6 01            [ 1] 2245 	ld a,#TK_COLON 
      000CA0 CC 0D C2         [ 2] 2246 	jp token_char  
      000CA3                       2247 comma_tst:
      000CA3                       2248 	_case COMMA sharp_tst 
      000CA3 A6 2C            [ 1]    1 	ld a,#COMMA 
      000CA5 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CA7 26 05            [ 1]    3 	jrne sharp_tst
      000CA9 A6 09            [ 1] 2249 	ld a,#TK_COMMA
      000CAB CC 0D C2         [ 2] 2250 	jp token_char
      000CAE                       2251 sharp_tst:
      000CAE                       2252 	_case SHARP dash_tst 
      000CAE A6 23            [ 1]    1 	ld a,#SHARP 
      000CB0 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CB2 26 05            [ 1]    3 	jrne dash_tst
      000CB4 A6 0A            [ 1] 2253 	ld a,#TK_SHARP
      000CB6 CC 0D C2         [ 2] 2254 	jp token_char  	 	 
      000CB9                       2255 dash_tst: 	
      000CB9                       2256 	_case '-' at_tst 
      000CB9 A6 2D            [ 1]    1 	ld a,#'-' 
      000CBB 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CBD 26 05            [ 1]    3 	jrne at_tst
      000CBF A6 11            [ 1] 2257 	ld a,#TK_MINUS  
      000CC1 CC 0D C2         [ 2] 2258 	jp token_char 
      000CC4                       2259 at_tst:
      000CC4                       2260 	_case '@' qmark_tst 
      000CC4 A6 40            [ 1]    1 	ld a,#'@' 
      000CC6 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CC8 26 05            [ 1]    3 	jrne qmark_tst
      000CCA A6 06            [ 1] 2261 	ld a,#TK_ARRAY 
      000CCC CC 0D C2         [ 2] 2262 	jp token_char
      000CCF                       2263 qmark_tst:
      000CCF                       2264 	_case '?' tick_tst 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000CCF A6 3F            [ 1]    1 	ld a,#'?' 
      000CD1 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CD3 26 12            [ 1]    3 	jrne tick_tst
      000CD5 A6 80            [ 1] 2265 	ld a,#TK_CMD  
      000CD7 F7               [ 1] 2266 	ld (x),a 
      000CD8 5C               [ 2] 2267 	incw x 
      000CD9 90 93            [ 1] 2268 	ldw y,x 
      000CDB AE 13 C7         [ 2] 2269 	ldw x,#print 
      000CDE 90 FF            [ 2] 2270 	ldw (y),x 
      000CE0 72 A9 00 02      [ 2] 2271 	addw y,#2
      000CE4 CC 0D C6         [ 2] 2272 	jp token_exit
      000CE7                       2273 tick_tst: ; comment 
      000CE7                       2274 	_case TICK plus_tst 
      000CE7 A6 27            [ 1]    1 	ld a,#TICK 
      000CE9 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000CEB 26 35            [ 1]    3 	jrne plus_tst
      000CED A6 80            [ 1] 2275 	ld a,#TK_CMD
      000CEF F7               [ 1] 2276 	ld (x),a 
      000CF0 5C               [ 2] 2277 	incw x
      000CF1 90 AE 14 C4      [ 2] 2278 	ldw y,#remark
      000CF5 FF               [ 2] 2279 	ldw (x),y 
      000CF6 1C 00 02         [ 2] 2280 	addw x,#2  
      000CF9                       2281 copy_comment:
      000CF9 90 AE 16 90      [ 2] 2282 	ldw y,#tib 
      000CFD 72 B9 00 00      [ 2] 2283 	addw y,in.w
      000D01 90 89            [ 2] 2284 	pushw y
      000D03 CD 02 D4         [ 4] 2285 	call strcpy
      000D06 72 F2 01         [ 2] 2286     subw y,(1,sp)
      000D09 90 9F            [ 1] 2287 	ld a,yl 
      000D0B CB 00 01         [ 1] 2288 	add a,in
      000D0E C7 00 01         [ 1] 2289 	ld in,a 
      000D11 1F 01            [ 2] 2290 	ldw (1,sp),x
      000D13 72 F9 01         [ 2] 2291 	addw y,(1,sp)
      000D16 90 5C            [ 2] 2292 	incw y 
      000D18                       2293 	_drop 2 
      000D18 5B 02            [ 2]    1     addw sp,#2 
      000D1A AE 14 C4         [ 2] 2294 	ldw x,#remark 
      000D1D A6 80            [ 1] 2295 	ld a,#TK_CMD 
      000D1F CC 0D C6         [ 2] 2296 	jp token_exit 
      000D22                       2297 plus_tst:
      000D22                       2298 	_case '+' star_tst 
      000D22 A6 2B            [ 1]    1 	ld a,#'+' 
      000D24 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D26 26 05            [ 1]    3 	jrne star_tst
      000D28 A6 10            [ 1] 2299 	ld a,#TK_PLUS  
      000D2A CC 0D C2         [ 2] 2300 	jp token_char 
      000D2D                       2301 star_tst:
      000D2D                       2302 	_case '*' slash_tst 
      000D2D A6 2A            [ 1]    1 	ld a,#'*' 
      000D2F 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D31 26 05            [ 1]    3 	jrne slash_tst
      000D33 A6 20            [ 1] 2303 	ld a,#TK_MULT 
      000D35 CC 0D C2         [ 2] 2304 	jp token_char 
      000D38                       2305 slash_tst: 
      000D38                       2306 	_case '/' prcnt_tst 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000D38 A6 2F            [ 1]    1 	ld a,#'/' 
      000D3A 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D3C 26 05            [ 1]    3 	jrne prcnt_tst
      000D3E A6 21            [ 1] 2307 	ld a,#TK_DIV 
      000D40 CC 0D C2         [ 2] 2308 	jp token_char 
      000D43                       2309 prcnt_tst:
      000D43                       2310 	_case '%' eql_tst 
      000D43 A6 25            [ 1]    1 	ld a,#'%' 
      000D45 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D47 26 05            [ 1]    3 	jrne eql_tst
      000D49 A6 22            [ 1] 2311 	ld a,#TK_MOD
      000D4B CC 0D C2         [ 2] 2312 	jp token_char  
                                   2313 ; 1 or 2 character tokens 	
      000D4E                       2314 eql_tst:
      000D4E                       2315 	_case '=' gt_tst 		
      000D4E A6 3D            [ 1]    1 	ld a,#'=' 
      000D50 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D52 26 05            [ 1]    3 	jrne gt_tst
      000D54 A6 32            [ 1] 2316 	ld a,#TK_EQUAL
      000D56 CC 0D C2         [ 2] 2317 	jp token_char 
      000D59                       2318 gt_tst:
      000D59                       2319 	_case '>' lt_tst 
      000D59 A6 3E            [ 1]    1 	ld a,#'>' 
      000D5B 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D5D 26 23            [ 1]    3 	jrne lt_tst
      000D5F A6 31            [ 1] 2320 	ld a,#TK_GT 
      000D61 6B 02            [ 1] 2321 	ld (ATTRIB,sp),a 
      000D63 72 5C 00 01      [ 1] 2322 	inc in 
      000D67 91 D6 00         [ 4] 2323 	ld a,([in.w],y)
      000D6A A1 3D            [ 1] 2324 	cp a,#'=
      000D6C 26 04            [ 1] 2325 	jrne 1$
      000D6E A6 33            [ 1] 2326 	ld a,#TK_GE 
      000D70 20 50            [ 2] 2327 	jra token_char  
      000D72 A1 3C            [ 1] 2328 1$: cp a,#'<
      000D74 26 04            [ 1] 2329 	jrne 2$
      000D76 A6 35            [ 1] 2330 	ld a,#TK_NE 
      000D78 20 48            [ 2] 2331 	jra token_char 
      000D7A 72 5A 00 01      [ 1] 2332 2$: dec in
      000D7E 7B 02            [ 1] 2333 	ld a,(ATTRIB,sp)
      000D80 20 40            [ 2] 2334 	jra token_char 	 
      000D82                       2335 lt_tst:
      000D82                       2336 	_case '<' other
      000D82 A6 3C            [ 1]    1 	ld a,#'<' 
      000D84 11 01            [ 1]    2 	cp a,(TCHAR,sp) 
      000D86 26 23            [ 1]    3 	jrne other
      000D88 A6 34            [ 1] 2337 	ld a,#TK_LT 
      000D8A 6B 02            [ 1] 2338 	ld (ATTRIB,sp),a 
      000D8C 72 5C 00 01      [ 1] 2339 	inc in 
      000D90 91 D6 00         [ 4] 2340 	ld a,([in.w],y)
      000D93 A1 3D            [ 1] 2341 	cp a,#'=
      000D95 26 04            [ 1] 2342 	jrne 1$
      000D97 A6 36            [ 1] 2343 	ld a,#TK_LE 
      000D99 20 27            [ 2] 2344 	jra token_char 
      000D9B A1 3E            [ 1] 2345 1$: cp a,#'>
      000D9D 26 04            [ 1] 2346 	jrne 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000D9F A6 35            [ 1] 2347 	ld a,#TK_NE 
      000DA1 20 1F            [ 2] 2348 	jra token_char 
      000DA3 72 5A 00 01      [ 1] 2349 2$: dec in 
      000DA7 7B 02            [ 1] 2350 	ld a,(ATTRIB,sp)
      000DA9 20 17            [ 2] 2351 	jra token_char 	
      000DAB                       2352 other: ; not a special character 	 
      000DAB 7B 01            [ 1] 2353 	ld a,(TCHAR,sp)
      000DAD CD 04 8F         [ 4] 2354 	call is_alpha 
      000DB0 25 03            [ 1] 2355 	jrc 30$ 
      000DB2 CC 07 95         [ 2] 2356 	jp syntax_error 
      000DB5                       2357 30$: 
      000DB5 CD 0B BD         [ 4] 2358 	call parse_keyword
      000DB8 A3 14 C4         [ 2] 2359 	cpw x,#remark 
      000DBB 26 09            [ 1] 2360 	jrne token_exit 
      000DBD 90 93            [ 1] 2361 	ldw y,x 
      000DBF CC 0C F9         [ 2] 2362 	jp copy_comment 
      000DC2                       2363 token_char:
      000DC2 F7               [ 1] 2364 	ld (x),a 
      000DC3 5C               [ 2] 2365 	incw x
      000DC4 90 93            [ 1] 2366 	ldw y,x 
      000DC6                       2367 token_exit:
      000DC6                       2368 	_drop VSIZE 
      000DC6 5B 02            [ 2]    1     addw sp,#VSIZE 
      000DC8 81               [ 4] 2369 	ret
                                   2370 
                                   2371 
                                   2372 ;------------------------------------
                                   2373 ; convert alpha to uppercase
                                   2374 ; input:
                                   2375 ;    a  character to convert
                                   2376 ; output:
                                   2377 ;    a  uppercase character
                                   2378 ;------------------------------------
      000DC9                       2379 to_upper::
      000DC9 A1 61            [ 1] 2380 	cp a,#'a
      000DCB 2A 01            [ 1] 2381 	jrpl 1$
      000DCD 81               [ 4] 2382 0$:	ret
      000DCE A1 7A            [ 1] 2383 1$: cp a,#'z	
      000DD0 22 FB            [ 1] 2384 	jrugt 0$
      000DD2 A0 20            [ 1] 2385 	sub a,#32
      000DD4 81               [ 4] 2386 	ret
                                   2387 	
                                   2388 ;------------------------------------
                                   2389 ; convert pad content in integer
                                   2390 ; input:
                                   2391 ;    x		.asciz to convert
                                   2392 ; output:
                                   2393 ;    acc24      int24_t
                                   2394 ;------------------------------------
                                   2395 	; local variables
                           000001  2396 	SIGN=1 ; 1 byte, 
                           000002  2397 	BASE=2 ; 1 byte, numeric base used in conversion
                           000003  2398 	TEMP=3 ; 1 byte, temporary storage
                           000003  2399 	VSIZE=3 ; 3 bytes reserved for local storage
      000DD5                       2400 atoi24:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000DD5 89               [ 2] 2401 	pushw x 
      000DD6                       2402 	_vars VSIZE
      000DD6 52 03            [ 2]    1     sub sp,#VSIZE 
                                   2403 	; acc24=0 
      000DD8 72 5F 00 0B      [ 1] 2404 	clr acc24    
      000DDC 72 5F 00 0C      [ 1] 2405 	clr acc16
      000DE0 72 5F 00 0D      [ 1] 2406 	clr acc8 
      000DE4 0F 01            [ 1] 2407 	clr (SIGN,sp)
      000DE6 A6 0A            [ 1] 2408 	ld a,#10
      000DE8 6B 02            [ 1] 2409 	ld (BASE,sp),a ; default base decimal
      000DEA F6               [ 1] 2410 	ld a,(x)
      000DEB 27 47            [ 1] 2411 	jreq 9$  ; completed if 0
      000DED A1 2D            [ 1] 2412 	cp a,#'-
      000DEF 26 04            [ 1] 2413 	jrne 1$
      000DF1 03 01            [ 1] 2414 	cpl (SIGN,sp)
      000DF3 20 08            [ 2] 2415 	jra 2$
      000DF5 A1 24            [ 1] 2416 1$: cp a,#'$
      000DF7 26 06            [ 1] 2417 	jrne 3$
      000DF9 A6 10            [ 1] 2418 	ld a,#16
      000DFB 6B 02            [ 1] 2419 	ld (BASE,sp),a
      000DFD 5C               [ 2] 2420 2$:	incw x
      000DFE F6               [ 1] 2421 	ld a,(x)
      000DFF                       2422 3$:	
      000DFF A1 61            [ 1] 2423 	cp a,#'a
      000E01 2B 02            [ 1] 2424 	jrmi 4$
      000E03 A0 20            [ 1] 2425 	sub a,#32
      000E05 A1 30            [ 1] 2426 4$:	cp a,#'0
      000E07 2B 2B            [ 1] 2427 	jrmi 9$
      000E09 A0 30            [ 1] 2428 	sub a,#'0
      000E0B A1 0A            [ 1] 2429 	cp a,#10
      000E0D 2B 06            [ 1] 2430 	jrmi 5$
      000E0F A0 07            [ 1] 2431 	sub a,#7
      000E11 11 02            [ 1] 2432 	cp a,(BASE,sp)
      000E13 2A 1F            [ 1] 2433 	jrpl 9$
      000E15 6B 03            [ 1] 2434 5$:	ld (TEMP,sp),a
      000E17 7B 02            [ 1] 2435 	ld a,(BASE,sp)
      000E19 CD 09 F8         [ 4] 2436 	call mulu24_8
      000E1C 7B 03            [ 1] 2437 	ld a,(TEMP,sp)
      000E1E CB 00 0D         [ 1] 2438 	add a,acc24+2
      000E21 C7 00 0D         [ 1] 2439 	ld acc24+2,a
      000E24 4F               [ 1] 2440 	clr a
      000E25 C9 00 0C         [ 1] 2441 	adc a,acc24+1
      000E28 C7 00 0C         [ 1] 2442 	ld acc24+1,a
      000E2B 4F               [ 1] 2443 	clr a
      000E2C C9 00 0B         [ 1] 2444 	adc a,acc24
      000E2F C7 00 0B         [ 1] 2445 	ld acc24,a
      000E32 20 C9            [ 2] 2446 	jra 2$
      000E34 0D 01            [ 1] 2447 9$:	tnz (SIGN,sp)
      000E36 27 03            [ 1] 2448     jreq atoi_exit
      000E38 CD 0A 32         [ 4] 2449     call neg_acc24
      000E3B                       2450 atoi_exit: 
      000E3B                       2451 	_drop VSIZE
      000E3B 5B 03            [ 2]    1     addw sp,#VSIZE 
      000E3D 85               [ 2] 2452 	popw x ; restore x
      000E3E 81               [ 4] 2453 	ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2454 
                                   2455 
                                   2456 ;------------------------------------
                                   2457 ; skip character c in text starting from 'in'
                                   2458 ; input:
                                   2459 ;	 y 		point to text buffer
                                   2460 ;    a 		character to skip
                                   2461 ; output:  
                                   2462 ;	'in' ajusted to new position
                                   2463 ;------------------------------------
                           000001  2464 	C = 1 ; local var
      000E3F                       2465 skip:
      000E3F 88               [ 1] 2466 	push a
      000E40 91 D6 00         [ 4] 2467 1$:	ld a,([in.w],y)
      000E43 27 0A            [ 1] 2468 	jreq 2$
      000E45 11 01            [ 1] 2469 	cp a,(C,sp)
      000E47 26 06            [ 1] 2470 	jrne 2$
      000E49 72 5C 00 01      [ 1] 2471 	inc in
      000E4D 20 F1            [ 2] 2472 	jra 1$
      000E4F                       2473 2$: _drop 1 
      000E4F 5B 01            [ 2]    1     addw sp,#1 
      000E51 81               [ 4] 2474 	ret
                                   2475 	
                                   2476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2477 ;;   TINY BASIC  operators,
                                   2478 ;;   commands and functions 
                                   2479 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2480 
                                   2481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2482 ;;  Arithmetic operators
                                   2483 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2484 
                                   2485 ;--------------------------------
                                   2486 ;  add 2 integers
                                   2487 ;  input:
                                   2488 ;    N1     on cstack 
                                   2489 ;    N2     on cstack 
                                   2490 ;  output:
                                   2491 ;    X 		n2+n1 
                                   2492 ;--------------------------------
                                   2493 	;arugments on cstack 
      000E52                       2494 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000E52                       2495 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000E52                       2496 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000E52                       2497 add:
      000E52 1E 05            [ 2] 2498 	ldw x ,(N2,sp)
      000E54 72 FB 03         [ 2] 2499 	addw x,(N1,sp)
      000E57 1F 03            [ 2] 2500 	ldw (N1,sp),x 
      000E59 81               [ 4] 2501 	ret 
                                   2502 
                                   2503 ;--------------------------------
                                   2504 ;  substract 2 ntegers
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2505 ;  input:
                                   2506 ;    N1     on cstack 
                                   2507 ;    N2     on cstack 
                                   2508 ;  output:
                                   2509 ;    X 		n2+n1 
                                   2510 ;--------------------------------
      000E5A                       2511 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      000E5A                       2512 	_arg N1 1 
                           000003     1     N1=ARG_OFS+1 
      000E5A                       2513 	_arg N2 3 
                           000005     1     N2=ARG_OFS+3 
      000E5A                       2514 substract:
      000E5A 1E 05            [ 2] 2515 	ldw x,(N2,sp)
      000E5C 72 F0 03         [ 2] 2516 	subw x,(N1,sp)
      000E5F 81               [ 4] 2517 	ret 
                                   2518 
                                   2519 ;-------------------------------------
                                   2520 ; multiply 2 integers
                                   2521 ; product overflow is ignored unless
                                   2522 ; MATH_OVF assembler flag is set to 1
                                   2523 ; input:
                                   2524 ;  	N1      on cstack
                                   2525 ;   N2 		on cstack 
                                   2526 ; output:
                                   2527 ;	X        N1*N2 
                                   2528 ;-------------------------------------
                                   2529 	;arguments 
      000E60                       2530 	_argofs 3
                           000005     1     ARG_OFS=2+3 
      000E60                       2531 	_arg N1_HB 1
                           000006     1     N1_HB=ARG_OFS+1 
      000E60                       2532 	_arg N1_LB 2
                           000007     1     N1_LB=ARG_OFS+2 
      000E60                       2533 	_arg N2_HB 3
                           000008     1     N2_HB=ARG_OFS+3 
      000E60                       2534 	_arg N2_LB 4 
                           000009     1     N2_LB=ARG_OFS+4 
                                   2535    ; local variables 
                           000001  2536 	SIGN=1
                           000002  2537 	PROD=2
                           000003  2538 	VSIZE=3
      000E60                       2539 multiply:
      000E60                       2540 	_vars VSIZE 
      000E60 52 03            [ 2]    1     sub sp,#VSIZE 
      000E62 0F 01            [ 1] 2541 	clr (SIGN,sp)
      000E64 1E 06            [ 2] 2542 	ldw x,(N1_HB,sp)
      000E66 9E               [ 1] 2543 	ld a,xh  
      000E67 A5 80            [ 1] 2544 	bcp a,#0x80 
      000E69 27 05            [ 1] 2545 	jreq 2$
      000E6B 03 01            [ 1] 2546 	cpl (SIGN,sp)
      000E6D 50               [ 2] 2547 	negw x 
      000E6E 1F 06            [ 2] 2548 	ldw (N1_HB,sp),x 
      000E70 1E 08            [ 2] 2549 2$: ldw x,(N2_HB,sp)
      000E72 9E               [ 1] 2550 	ld a,xh  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E73 A5 80            [ 1] 2551 	bcp a,#0x80 
      000E75 27 05            [ 1] 2552 	jreq 3$
      000E77 03 01            [ 1] 2553 	cpl (SIGN,sp)
      000E79 50               [ 2] 2554 	negw x 
      000E7A 1F 08            [ 2] 2555 	ldw (N2_HB,sp),x 
                                   2556 ; N1_LB * N2_LB 	
      000E7C 7B 07            [ 1] 2557 3$:	ld a,(N1_LB,sp)
      000E7E 97               [ 1] 2558 	ld xl,a 
      000E7F 7B 09            [ 1] 2559 	ld a,(N2_LB,sp) 
      000E81 42               [ 4] 2560 	mul x,a 
                           000000  2561 .if MATH_OVF 	
                                   2562 	ld a,xh 
                                   2563 	bcp a,#0x80 
                                   2564 	jreq 4$ 
                                   2565 	ld a,#ERR_MATH_OVF 
                                   2566 	jp tb_error
                                   2567 .endif 	 
      000E82 1F 02            [ 2] 2568 4$:	ldw (PROD,sp),x
                                   2569 ; N1_LB * N2_HB	 
      000E84 7B 07            [ 1] 2570 	ld a,(N1_LB,sp) 
      000E86 97               [ 1] 2571 	ld xl,a 
      000E87 7B 08            [ 1] 2572 	ld a,(N2_HB,sp)
      000E89 42               [ 4] 2573 	mul x,a
      000E8A 9F               [ 1] 2574 	ld a,xl 
      000E8B 1B 02            [ 1] 2575 	add a,(PROD,sp)
                           000000  2576 .if MATH_OVF 	
                                   2577 	bcp a,#0x80 
                                   2578 	jreq 5$ 
                                   2579 	ld a,#ERR_MATH_OVF 
                                   2580 	jp tb_error
                                   2581 .endif 	 
      000E8D 6B 02            [ 1] 2582 5$:	ld (PROD,sp),a 
                                   2583 ; N1_HB * N2_LB 
      000E8F 7B 06            [ 1] 2584 	ld a,(N1_HB,sp)
      000E91 97               [ 1] 2585 	ld xl,a 
      000E92 7B 09            [ 1] 2586 	ld a,(N2_LB,sp)
      000E94 42               [ 4] 2587 	mul x,a 
      000E95 9F               [ 1] 2588 	ld a,xl 
      000E96 1B 02            [ 1] 2589 	add a,(PROD,sp)
                           000000  2590 .if MATH_OVF 	
                                   2591 	bcp a,#0x80 
                                   2592 	jreq 6$ 
                                   2593 	ld a,#ERR_MATH_OVF 
                                   2594 	jp tb_error
                                   2595 .endif 	 
      000E98 6B 02            [ 1] 2596 6$:	ld (PROD,sp),a 
                                   2597 ; N1_HB * N2_HB 	
                                   2598 ; it is pointless to multiply N1_HB*N2_HB 
                                   2599 ; as this product is over 65535 or 0 
                                   2600 ;
                                   2601 ; sign adjust product
      000E9A 0D 01            [ 1] 2602 	tnz (SIGN,sp)
      000E9C 27 05            [ 1] 2603 	jreq 7$
      000E9E 1E 02            [ 2] 2604 	ldw x, (PROD,sp)
      000EA0 50               [ 2] 2605 	negw x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000EA1 1F 02            [ 2] 2606 	ldw (PROD,sp),x  
      000EA3                       2607 7$: 
      000EA3 1E 02            [ 2] 2608 	ldw x,(PROD,sp) 
      000EA5                       2609 	_drop VSIZE 
      000EA5 5B 03            [ 2]    1     addw sp,#VSIZE 
      000EA7 81               [ 4] 2610 	ret
                                   2611 
                                   2612 ;----------------------------------
                                   2613 ;  euclidian divide n2/n1 
                                   2614 ; input:
                                   2615 ;    N2 	on cstack
                                   2616 ;    N1 	on cstack
                                   2617 ; output:
                                   2618 ;    X      n2/n1 
                                   2619 ;    Y      remainder 
                                   2620 ;----------------------------------
      000EA8                       2621 	_argofs 2
                           000004     1     ARG_OFS=2+2 
      000EA8                       2622 	_arg DIVISR 1
                           000005     1     DIVISR=ARG_OFS+1 
      000EA8                       2623 	_arg DIVIDND 3
                           000007     1     DIVIDND=ARG_OFS+3 
                                   2624 	; local variables
                           000001  2625 	SQUOT=1 ; sign quotient
                           000002  2626 	SDIVD=2 ; sign dividend  
                           000002  2627 	VSIZE=2
      000EA8                       2628 divide:
      000EA8                       2629 	_vars VSIZE 
      000EA8 52 02            [ 2]    1     sub sp,#VSIZE 
      000EAA 0F 01            [ 1] 2630 	clr (SQUOT,sp)
      000EAC 0F 02            [ 1] 2631 	clr (SDIVD,sp)
                                   2632 ; check for 0 divisor
      000EAE 1E 05            [ 2] 2633 	ldw x,(DIVISR,sp)
      000EB0 5D               [ 2] 2634 	tnzw x 
      000EB1 26 05            [ 1] 2635     jrne 0$
      000EB3 A6 04            [ 1] 2636 	ld a,#ERR_DIV0 
      000EB5 CC 07 97         [ 2] 2637 	jp tb_error 
                                   2638 ; check divisor sign 	
      000EB8 9E               [ 1] 2639 0$:	ld a,xh 
      000EB9 A5 80            [ 1] 2640 	bcp a,#0x80 
      000EBB 27 03            [ 1] 2641 	jreq 1$
      000EBD 03 01            [ 1] 2642 	cpl (SQUOT,sp)
      000EBF 50               [ 2] 2643 	negw x 
      000EC0 1F 05            [ 2] 2644 1$:	ldw (DIVISR,sp),x
                                   2645 ; check dividend sign 	 
      000EC2 1E 07            [ 2] 2646     ldw x,(DIVIDND,sp)
      000EC4 9E               [ 1] 2647 	ld a,xh 
      000EC5 A5 80            [ 1] 2648 	bcp a,#0x80 
      000EC7 27 05            [ 1] 2649 	jreq 2$ 
      000EC9 03 01            [ 1] 2650 	cpl (SQUOT,sp)
      000ECB 03 02            [ 1] 2651 	cpl (SDIVD,sp)
      000ECD 50               [ 2] 2652 	negw x 
      000ECE 16 05            [ 2] 2653 2$:	ldw y,(DIVISR,sp)
      000ED0 65               [ 2] 2654 	divw x,y
      000ED1 90 CF 00 0C      [ 2] 2655 	ldw acc16,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2656 ; if sign dividend is negative and remainder!=0 inc divisor 	 
      000ED5 0D 02            [ 1] 2657 	tnz (SDIVD,sp)
      000ED7 27 0B            [ 1] 2658 	jreq 7$
      000ED9 90 5D            [ 2] 2659 	tnzw y 
      000EDB 27 07            [ 1] 2660 	jreq 7$
      000EDD 5C               [ 2] 2661 	incw x
      000EDE 16 05            [ 2] 2662 	ldw y,(DIVISR,sp)
      000EE0 72 B2 00 0C      [ 2] 2663 	subw y,acc16
      000EE4 0D 01            [ 1] 2664 7$: tnz (SQUOT,sp)
      000EE6 27 01            [ 1] 2665 	jreq 9$ 	 
      000EE8 50               [ 2] 2666 8$:	negw x 
      000EE9                       2667 9$: 
      000EE9                       2668 	_drop VSIZE 
      000EE9 5B 02            [ 2]    1     addw sp,#VSIZE 
      000EEB 81               [ 4] 2669 	ret 
                                   2670 
                                   2671 
                                   2672 ;----------------------------------
                                   2673 ;  remainder resulting from euclidian 
                                   2674 ;  division of n2/n1 
                                   2675 ; input:
                                   2676 ;   N1 		cstack 
                                   2677 ;   N2      cstack
                                   2678 ; output:
                                   2679 ;   X       N2%N1 
                                   2680 ;----------------------------------
                           000003  2681 	N1=3
                           000005  2682 	N2=5
                           000004  2683 	VSIZE=4
      000EEC                       2684 modulo:
      000EEC 1E 03            [ 2] 2685 	Ldw x,(N1,sp)
      000EEE 16 05            [ 2] 2686 	ldw y,(N2,sp)
      000EF0                       2687 	_vars VSIZE 
      000EF0 52 04            [ 2]    1     sub sp,#VSIZE 
      000EF2 1F 01            [ 2] 2688 	ldw (1,sp),x 
      000EF4 17 03            [ 2] 2689 	ldw (3,sp),y 
      000EF6 CD 0E A8         [ 4] 2690 	call divide 
      000EF9 93               [ 1] 2691 	ldw x,y
      000EFA                       2692 	_drop VSIZE 
      000EFA 5B 04            [ 2]    1     addw sp,#VSIZE 
      000EFC 81               [ 4] 2693 	ret 
                                   2694 
                                   2695 
                                   2696 ;----------------------------------
                                   2697 ; search in kword_dict name
                                   2698 ; from its execution address 
                                   2699 ; input:
                                   2700 ;   X       	execution address 
                                   2701 ; output:
                                   2702 ;   X 			cstr*  | 0 
                                   2703 ;--------------------------------
                           000001  2704 	XADR=1 
                           000003  2705 	LINK=3 
                           000004  2706 	VSIZE=4
      000EFD                       2707 cmd_name:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000EFD                       2708 	_vars VSIZE 
      000EFD 52 04            [ 2]    1     sub sp,#VSIZE 
      000EFF 72 5F 00 0C      [ 1] 2709 	clr acc16 
      000F03 1F 01            [ 2] 2710 	ldw (XADR,sp),x  
      000F05 AE 25 80         [ 2] 2711 	ldw x,#kword_dict	
      000F08 1F 03            [ 2] 2712 1$:	ldw (LINK,sp),x
      000F0A E6 02            [ 1] 2713 	ld a,(2,x)
      000F0C A4 0F            [ 1] 2714 	and a,#15 
      000F0E C7 00 0D         [ 1] 2715 	ld acc8,a 
      000F11 1C 00 03         [ 2] 2716 	addw x,#3
      000F14 72 BB 00 0C      [ 2] 2717 	addw x,acc16
      000F18 FE               [ 2] 2718 	ldw x,(x) ; execution address 
      000F19 13 01            [ 2] 2719 	cpw x,(XADR,sp)
      000F1B 27 0A            [ 1] 2720 	jreq 2$
      000F1D 1E 03            [ 2] 2721 	ldw x,(LINK,sp)
      000F1F FE               [ 2] 2722 	ldw x,(x) 
      000F20 1D 00 02         [ 2] 2723 	subw x,#2  
      000F23 26 E3            [ 1] 2724 	jrne 1$
      000F25 20 05            [ 2] 2725 	jra 9$
      000F27 1E 03            [ 2] 2726 2$: ldw x,(LINK,sp)
      000F29 1C 00 02         [ 2] 2727 	addw x,#2 	
      000F2C                       2728 9$:	_drop VSIZE
      000F2C 5B 04            [ 2]    1     addw sp,#VSIZE 
      000F2E 81               [ 4] 2729 	ret
                                   2730 
                                   2731 
                                   2732 ;---------------------------------
                                   2733 ; dictionary search 
                                   2734 ; input:
                                   2735 ;	X 		dictionary entry point, name field  
                                   2736 ;   y		.asciz name to search 
                                   2737 ; output:
                                   2738 ;  A 		TK_CMD|TK_IFUNC|TK_NONE 
                                   2739 ;  X		execution address | 0 
                                   2740 ;---------------------------------
                           000001  2741 	NLEN=1 ; cmd length 
                           000002  2742 	XSAVE=2
                           000004  2743 	YSAVE=4
                           000005  2744 	VSIZE=5 
      000F2F                       2745 search_dict:
      000F2F                       2746 	_vars VSIZE 
      000F2F 52 05            [ 2]    1     sub sp,#VSIZE 
                                   2747 
      000F31 17 04            [ 2] 2748 	ldw (YSAVE,sp),y 
      000F33                       2749 search_next:
      000F33 1F 02            [ 2] 2750 	ldw (XSAVE,sp),x 
                                   2751 ; get name length in dictionary	
      000F35 F6               [ 1] 2752 	ld a,(x)
      000F36 A4 0F            [ 1] 2753 	and a,#0xf 
      000F38 6B 01            [ 1] 2754 	ld (NLEN,sp),a  
      000F3A 16 04            [ 2] 2755 	ldw y,(YSAVE,sp) ; name pointer 
      000F3C 5C               [ 2] 2756 	incw x 
      000F3D                       2757 cp_loop:
      000F3D 90 F6            [ 1] 2758 	ld a,(y)
      000F3F 27 1B            [ 1] 2759 	jreq str_match 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F41 0D 01            [ 1] 2760 	tnz (NLEN,sp)
      000F43 27 0A            [ 1] 2761 	jreq no_match  
      000F45 F1               [ 1] 2762 	cp a,(x)
      000F46 26 07            [ 1] 2763 	jrne no_match 
      000F48 90 5C            [ 2] 2764 	incw y 
      000F4A 5C               [ 2] 2765 	incw x
      000F4B 0A 01            [ 1] 2766 	dec (NLEN,sp)
      000F4D 20 EE            [ 2] 2767 	jra cp_loop 
      000F4F                       2768 no_match:
      000F4F 1E 02            [ 2] 2769 	ldw x,(XSAVE,sp) 
      000F51 1D 00 02         [ 2] 2770 	subw x,#2 ; move X to link field
      000F54 4B 00            [ 1] 2771 	push #TK_NONE 
      000F56 FE               [ 2] 2772 	ldw x,(x) ; next word link 
      000F57 84               [ 1] 2773 	pop a ; TK_NONE 
      000F58 27 1F            [ 1] 2774 	jreq search_exit  ; not found  
                                   2775 ;try next 
      000F5A 20 D7            [ 2] 2776 	jra search_next
      000F5C                       2777 str_match:
      000F5C 1E 02            [ 2] 2778 	ldw x,(XSAVE,sp)
      000F5E F6               [ 1] 2779 	ld a,(X)
      000F5F 6B 01            [ 1] 2780 	ld (NLEN,sp),a ; needed to test keyword type  
      000F61 A4 0F            [ 1] 2781 	and a,#0xf 
                                   2782 ; move x to procedure address field 	
      000F63 4C               [ 1] 2783 	inc a 
      000F64 C7 00 0D         [ 1] 2784 	ld acc8,a 
      000F67 72 5F 00 0C      [ 1] 2785 	clr acc16 
      000F6B 72 BB 00 0C      [ 2] 2786 	addw x,acc16 
      000F6F FE               [ 2] 2787 	ldw x,(x) ; routine entry point 
                                   2788 ;determine keyword type bits 7:6 
      000F70 7B 01            [ 1] 2789 	ld a,(NLEN,sp)
      000F72 4E               [ 1] 2790 	swap a 
      000F73 A4 0C            [ 1] 2791 	and a,#0xc
      000F75 44               [ 1] 2792 	srl a
      000F76 44               [ 1] 2793 	srl a 
      000F77 AB 80            [ 1] 2794 	add a,#128
      000F79                       2795 search_exit: 
      000F79                       2796 	_drop VSIZE 	 
      000F79 5B 05            [ 2]    1     addw sp,#VSIZE 
      000F7B 81               [ 4] 2797 	ret 
                                   2798 
                                   2799 ;---------------------
                                   2800 ; check if next token
                                   2801 ;  is of expected type 
                                   2802 ; input:
                                   2803 ;   A 		 expected token attribute
                                   2804 ;  ouput:
                                   2805 ;   none     if fail call syntax_error 
                                   2806 ;--------------------
      000F7C                       2807 expect:
      000F7C 88               [ 1] 2808 	push a 
      000F7D CD 08 87         [ 4] 2809 	call next_token 
      000F80 11 01            [ 1] 2810 	cp a,(1,sp)
      000F82 27 03            [ 1] 2811 	jreq 1$
      000F84 CC 07 95         [ 2] 2812 	jp syntax_error
      000F87 84               [ 1] 2813 1$: pop a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F88 81               [ 4] 2814 	ret 
                                   2815 
                                   2816 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2817 ; parse arguments list 
                                   2818 ; between ()
                                   2819 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F89                       2820 func_args:
      000F89 A6 07            [ 1] 2821 	ld a,#TK_LPAREN 
      000F8B CD 0F 7C         [ 4] 2822 	call expect 
                                   2823 ; expected to continue in arg_list 
                                   2824 ; caller must check for TK_RPAREN 
                                   2825 
                                   2826 ;-------------------------------
                                   2827 ; parse embedded BASIC routines 
                                   2828 ; arguments list.
                                   2829 ; arg_list::=  rel[','rel]*
                                   2830 ; all arguments are of integer type
                                   2831 ; and pushed on stack 
                                   2832 ; input:
                                   2833 ;   none
                                   2834 ; output:
                                   2835 ;   stack{n}   arguments pushed on stack
                                   2836 ;   A 	number of arguments pushed on stack  
                                   2837 ;--------------------------------
      000F8E                       2838 arg_list:
      000F8E 4B 00            [ 1] 2839 	push #0  
      000F90 CD 10 CB         [ 4] 2840 1$: call relation
      000F93 A1 00            [ 1] 2841 	cp a,#TK_NONE 
      000F95 27 20            [ 1] 2842 	jreq 5$
      000F97 A1 84            [ 1] 2843 	cp a,#TK_INTGR
      000F99 26 13            [ 1] 2844 	jrne 4$
      000F9B                       2845 3$: 
                                   2846 ; swap return address with argument
      000F9B 84               [ 1] 2847 	pop a ; arg_count
      000F9C 90 85            [ 2] 2848 	popw y ; return address 
      000F9E 89               [ 2] 2849 	pushw x ; new argument 
      000F9F 90 89            [ 2] 2850 	pushw y 
      000FA1 4C               [ 1] 2851     inc a
      000FA2 88               [ 1] 2852 	push a 
      000FA3 CD 08 87         [ 4] 2853 	call next_token 
      000FA6 A1 09            [ 1] 2854 	cp a,#TK_COMMA 
      000FA8 27 E6            [ 1] 2855 	jreq 1$ 
      000FAA A1 00            [ 1] 2856 	cp a,#TK_NONE 
      000FAC 27 09            [ 1] 2857 	jreq 5$ 
      000FAE A1 08            [ 1] 2858 4$:	cp a,#TK_RPAREN 
      000FB0 27 05            [ 1] 2859 	jreq 5$
      000FB2                       2860 	_unget_token 
      000FB2 55 00 02 00 01   [ 1]    1     mov in,in.saved
      000FB7 84               [ 1] 2861 5$:	pop a  
      000FB8 81               [ 4] 2862 	ret 
                                   2863 
                                   2864 ;--------------------------------
                                   2865 ;   BASIC commnands 
                                   2866 ;--------------------------------
                                   2867 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2868 ;--------------------------------
                                   2869 ;  arithmetic and relational 
                                   2870 ;  routines
                                   2871 ;  operators precedence
                                   2872 ;  highest to lowest
                                   2873 ;  operators on same row have 
                                   2874 ;  same precedence and are executed
                                   2875 ;  from left to right.
                                   2876 ;	'*','/','%'
                                   2877 ;   '-','+'
                                   2878 ;   '=','>','<','>=','<=','<>','><'
                                   2879 ;   '<>' and '><' are equivalent for not equal.
                                   2880 ;--------------------------------
                                   2881 
                                   2882 ;---------------------
                                   2883 ; return array element
                                   2884 ; address from @(expr)
                                   2885 ; input:
                                   2886 ;   A 		TK_ARRAY
                                   2887 ; output:
                                   2888 ;   A 		TK_INTGR
                                   2889 ;	X 		element address 
                                   2890 ;----------------------
      000FB9                       2891 get_array_element:
      000FB9 CD 0F 89         [ 4] 2892 	call func_args 
      000FBC A1 01            [ 1] 2893 	cp a,#1
      000FBE 27 03            [ 1] 2894 	jreq 1$
      000FC0 CC 07 95         [ 2] 2895 	jp syntax_error
      000FC3 85               [ 2] 2896 1$: popw x 
                                   2897 	; check for bounds 
      000FC4 C3 00 21         [ 2] 2898 	cpw x,array_size 
      000FC7 23 05            [ 2] 2899 	jrule 3$
                                   2900 ; bounds {1..array_size}	
      000FC9 A6 0A            [ 1] 2901 2$: ld a,#ERR_BAD_VALUE 
      000FCB CC 07 97         [ 2] 2902 	jp tb_error 
      000FCE 5D               [ 2] 2903 3$: tnzw  x
      000FCF 27 F8            [ 1] 2904 	jreq 2$ 
      000FD1 58               [ 2] 2905 	sllw x 
      000FD2 89               [ 2] 2906 	pushw x 
      000FD3 AE 16 90         [ 2] 2907 	ldw x,#tib
      000FD6 72 F0 01         [ 2] 2908 	subw x,(1,sp)
      000FD9                       2909 	_drop 2   
      000FD9 5B 02            [ 2]    1     addw sp,#2 
      000FDB A6 84            [ 1] 2910 	ld a,#TK_INTGR
      000FDD 81               [ 4] 2911 	ret 
                                   2912 
                                   2913 ;***********************************
                                   2914 ;   expression parse,execute 
                                   2915 ;***********************************
                                   2916 ;-----------------------------------
                                   2917 ; factor ::= ['+'|'-'|e]  var | @ |
                                   2918 ;			 integer | function |
                                   2919 ;			 '('relation')' 
                                   2920 ; output:
                                   2921 ;   A    token attribute 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2922 ;   X 	 integer
                                   2923 ; ---------------------------------
                           000001  2924 	NEG=1
                           000001  2925 	VSIZE=1
      000FDE                       2926 factor:
      000FDE                       2927 	_vars VSIZE 
      000FDE 52 01            [ 2]    1     sub sp,#VSIZE 
      000FE0 CD 08 87         [ 4] 2928 	call next_token
      000FE3 A1 02            [ 1] 2929 	cp a,#CMD_END 
      000FE5 25 4E            [ 1] 2930 	jrult 20$
      000FE7 6B 01            [ 1] 2931 1$:	ld (NEG,sp),a 
      000FE9 A4 30            [ 1] 2932 	and a,#TK_GRP_MASK
      000FEB A1 10            [ 1] 2933 	cp a,#TK_GRP_ADD 
      000FED 27 04            [ 1] 2934 	jreq 2$
      000FEF 7B 01            [ 1] 2935 	ld a,(NEG,sp)
      000FF1 20 03            [ 2] 2936 	jra 4$  
      000FF3                       2937 2$:	
      000FF3 CD 08 87         [ 4] 2938 	call next_token 
      000FF6                       2939 4$:	
      000FF6 A1 81            [ 1] 2940 	cp a,#TK_IFUNC 
      000FF8 26 03            [ 1] 2941 	jrne 5$ 
      000FFA FD               [ 4] 2942 	call (x) 
      000FFB 20 2F            [ 2] 2943 	jra 18$ 
      000FFD                       2944 5$:
      000FFD A1 84            [ 1] 2945 	cp a,#TK_INTGR
      000FFF 26 02            [ 1] 2946 	jrne 6$
      001001 20 29            [ 2] 2947 	jra 18$
      001003                       2948 6$:
      001003 A1 06            [ 1] 2949 	cp a,#TK_ARRAY
      001005 26 06            [ 1] 2950 	jrne 10$
      001007 CD 0F B9         [ 4] 2951 	call get_array_element
      00100A FE               [ 2] 2952 	ldw x,(x)
      00100B 20 1F            [ 2] 2953 	jra 18$ 
      00100D                       2954 10$:
      00100D A1 85            [ 1] 2955 	cp a,#TK_VAR 
      00100F 26 03            [ 1] 2956 	jrne 12$
      001011 FE               [ 2] 2957 	ldw x,(x)
      001012 20 18            [ 2] 2958 	jra 18$
      001014                       2959 12$:			
      001014 A1 07            [ 1] 2960 	cp a,#TK_LPAREN
      001016 26 0C            [ 1] 2961 	jrne 16$
      001018 CD 10 CB         [ 4] 2962 	call relation
      00101B 89               [ 2] 2963 	pushw x 
      00101C A6 08            [ 1] 2964 	ld a,#TK_RPAREN 
      00101E CD 0F 7C         [ 4] 2965 	call expect
      001021 85               [ 2] 2966 	popw x 
      001022 20 08            [ 2] 2967 	jra 18$	
      001024                       2968 16$:
      001024                       2969 	_unget_token
      001024 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001029 4F               [ 1] 2970 	clr a 
      00102A 20 09            [ 2] 2971 	jra 20$ 
      00102C                       2972 18$: 
      00102C A6 11            [ 1] 2973 	ld a,#TK_MINUS 
      00102E 11 01            [ 1] 2974 	cp a,(NEG,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001030 26 01            [ 1] 2975 	jrne 19$
      001032 50               [ 2] 2976 	negw x
      001033                       2977 19$:
      001033 A6 84            [ 1] 2978 	ld a,#TK_INTGR
      001035                       2979 20$:
      001035                       2980 	_drop VSIZE
      001035 5B 01            [ 2]    1     addw sp,#VSIZE 
      001037 81               [ 4] 2981 	ret
                                   2982 
                                   2983 ;-----------------------------------
                                   2984 ; term ::= factor [['*'|'/'|'%'] factor]* 
                                   2985 ; output:
                                   2986 ;   A    	token attribute 
                                   2987 ;	X		integer
                                   2988 ;-----------------------------------
                           000001  2989 	N1=1
                           000003  2990 	N2=3
                           000005  2991 	MULOP=5
                           000005  2992 	VSIZE=5
      001038                       2993 term:
      001038                       2994 	_vars VSIZE
      001038 52 05            [ 2]    1     sub sp,#VSIZE 
      00103A CD 0F DE         [ 4] 2995 	call factor
      00103D A1 02            [ 1] 2996 	cp a,#CMD_END
      00103F 25 43            [ 1] 2997 	jrult term_exit
      001041                       2998 term01:	 ; check for  operator 
      001041 1F 03            [ 2] 2999 	ldw (N2,sp),x  ; save first factor 
      001043 CD 08 87         [ 4] 3000 	call next_token
      001046 A1 02            [ 1] 3001 	cp a,#CMD_END
      001048 25 36            [ 1] 3002 	jrult 9$
      00104A 6B 05            [ 1] 3003 0$:	ld (MULOP,sp),a
      00104C A4 30            [ 1] 3004 	and a,#TK_GRP_MASK
      00104E A1 20            [ 1] 3005 	cp a,#TK_GRP_MULT
      001050 27 09            [ 1] 3006 	jreq 1$
      001052 7B 05            [ 1] 3007 	ld a,(MULOP,sp) 
      001054                       3008 	_unget_token 
      001054 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001059 20 25            [ 2] 3009 	jra 9$
      00105B                       3010 1$:	; got *|/|%
      00105B CD 0F DE         [ 4] 3011 	call factor
      00105E A1 84            [ 1] 3012 	cp a,#TK_INTGR
      001060 27 03            [ 1] 3013 	jreq 2$ 
      001062 CC 07 95         [ 2] 3014 	jp syntax_error
      001065 1F 01            [ 2] 3015 2$:	ldw (N1,sp),x  
      001067 7B 05            [ 1] 3016 	ld a,(MULOP,sp) 
      001069 A1 20            [ 1] 3017 	cp a,#TK_MULT 
      00106B 26 05            [ 1] 3018 	jrne 3$
      00106D CD 0E 60         [ 4] 3019 	call multiply 
      001070 20 CF            [ 2] 3020 	jra term01
      001072 A1 21            [ 1] 3021 3$: cp a,#TK_DIV 
      001074 26 05            [ 1] 3022 	jrne 4$ 
      001076 CD 0E A8         [ 4] 3023 	call divide 
      001079 20 C6            [ 2] 3024 	jra term01 
      00107B CD 0E EC         [ 4] 3025 4$: call modulo
      00107E 20 C1            [ 2] 3026 	jra term01 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001080 1E 03            [ 2] 3027 9$: ldw x,(N2,sp)  
      001082 A6 84            [ 1] 3028 	ld a,#TK_INTGR 	
      001084                       3029 term_exit:
      001084                       3030 	_drop VSIZE 
      001084 5B 05            [ 2]    1     addw sp,#VSIZE 
      001086 81               [ 4] 3031 	ret 
                                   3032 
                                   3033 ;-------------------------------
                                   3034 ;  expr ::= term [['+'|'-'] term]*
                                   3035 ;  result range {-32768..32767}
                                   3036 ;  output:
                                   3037 ;   A    token attribute 
                                   3038 ;   X	 integer   
                                   3039 ;-------------------------------
                           000001  3040 	N1=1 
                           000003  3041 	N2=3
                           000005  3042 	OP=5 
                           000005  3043 	VSIZE=5 
      001087                       3044 expression:
      001087                       3045 	_vars VSIZE 
      001087 52 05            [ 2]    1     sub sp,#VSIZE 
      001089 CD 10 38         [ 4] 3046 	call term
      00108C A1 02            [ 1] 3047 	cp a,#CMD_END 
      00108E 25 38            [ 1] 3048 	jrult expr_exit 
      001090 1F 03            [ 2] 3049 0$:	ldw (N2,sp),x 
      001092 CD 08 87         [ 4] 3050 	call next_token
      001095 A1 02            [ 1] 3051 	cp a,#CMD_END 
      001097 25 2B            [ 1] 3052 	jrult 9$ 
      001099 6B 05            [ 1] 3053 1$:	ld (OP,sp),a  
      00109B A4 30            [ 1] 3054 	and a,#TK_GRP_MASK
      00109D A1 10            [ 1] 3055 	cp a,#TK_GRP_ADD 
      00109F 27 07            [ 1] 3056 	jreq 2$ 
      0010A1                       3057 	_unget_token
      0010A1 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0010A6 20 1C            [ 2] 3058 	jra 9$
      0010A8                       3059 2$: 
      0010A8 CD 10 38         [ 4] 3060 	call term
      0010AB A1 84            [ 1] 3061 	cp a,#TK_INTGR 
      0010AD 27 03            [ 1] 3062 	jreq 3$
      0010AF CC 07 95         [ 2] 3063 	jp syntax_error
      0010B2 1F 01            [ 2] 3064 3$:	ldw (N1,sp),x 
      0010B4 7B 05            [ 1] 3065 	ld a,(OP,sp)
      0010B6 A1 10            [ 1] 3066 	cp a,#TK_PLUS 
      0010B8 26 05            [ 1] 3067 	jrne 4$
      0010BA CD 0E 52         [ 4] 3068 	call add 
      0010BD 20 D1            [ 2] 3069 	jra 0$ 
      0010BF CD 0E 5A         [ 4] 3070 4$:	call substract
      0010C2 20 CC            [ 2] 3071 	jra 0$
      0010C4 1E 03            [ 2] 3072 9$: ldw x,(N2,sp)
      0010C6 A6 84            [ 1] 3073 	ld a,#TK_INTGR	
      0010C8                       3074 expr_exit:
      0010C8                       3075 	_drop VSIZE 
      0010C8 5B 05            [ 2]    1     addw sp,#VSIZE 
      0010CA 81               [ 4] 3076 	ret 
                                   3077 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3078 ;---------------------------------------------
                                   3079 ; rel ::= expr rel_op expr
                                   3080 ; rel_op ::=  '=','<','>','>=','<=','<>','><'
                                   3081 ;  relation return 1 | 0  for true | false 
                                   3082 ;  output:
                                   3083 ;    A 		token attribute  
                                   3084 ;	 X		1|0
                                   3085 ;---------------------------------------------
                           000001  3086 	N1=1
                           000003  3087 	N2=3
                           000005  3088 	RELOP=5
                           000005  3089 	VSIZE=5 
      0010CB                       3090 relation: 
      0010CB                       3091 	_vars VSIZE
      0010CB 52 05            [ 2]    1     sub sp,#VSIZE 
      0010CD CD 10 87         [ 4] 3092 	call expression
      0010D0 A1 02            [ 1] 3093 	cp a,#CMD_END  
      0010D2 25 4B            [ 1] 3094 	jrult rel_exit 
                                   3095 	; expect rel_op or leave 
      0010D4 1F 03            [ 2] 3096 	ldw (N2,sp),x 
      0010D6 CD 08 87         [ 4] 3097 	call next_token 
      0010D9 A1 02            [ 1] 3098 	cp a,#CMD_END 
      0010DB 25 3E            [ 1] 3099 	jrult 9$
      0010DD                       3100 1$:	
      0010DD 6B 05            [ 1] 3101 	ld (RELOP,sp),a 
      0010DF A4 30            [ 1] 3102 	and a,#TK_GRP_MASK
      0010E1 A1 30            [ 1] 3103 	cp a,#TK_GRP_RELOP 
      0010E3 27 07            [ 1] 3104 	jreq 2$
      0010E5                       3105 	_unget_token  
      0010E5 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0010EA 20 2F            [ 2] 3106 	jra 9$
      0010EC                       3107 2$:	; expect another expression or error 
      0010EC CD 10 87         [ 4] 3108 	call expression
      0010EF A1 84            [ 1] 3109 	cp a,#TK_INTGR 
      0010F1 27 03            [ 1] 3110 	jreq 3$
      0010F3 CC 07 95         [ 2] 3111 	jp syntax_error 
      0010F6 1F 01            [ 2] 3112 3$:	ldw (N1,sp),x 
      0010F8 CD 0E 5A         [ 4] 3113 	call substract
      0010FB 26 06            [ 1] 3114 	jrne 4$
      0010FD 35 02 00 0D      [ 1] 3115 	mov acc8,#2 ; n1==n2
      001101 20 0C            [ 2] 3116 	jra 6$ 
      001103                       3117 4$: 
      001103 2C 06            [ 1] 3118 	jrsgt 5$  
      001105 35 04 00 0D      [ 1] 3119 	mov acc8,#4 ; n1<2 
      001109 20 04            [ 2] 3120 	jra 6$
      00110B                       3121 5$:
      00110B 35 01 00 0D      [ 1] 3122 	mov acc8,#1 ; n1>n2 
      00110F                       3123 6$:
      00110F 5F               [ 1] 3124 	clrw x 
      001110 C6 00 0D         [ 1] 3125 	ld a, acc8  
      001113 14 05            [ 1] 3126 	and a,(RELOP,sp)
      001115 4D               [ 1] 3127 	tnz a 
      001116 27 05            [ 1] 3128 	jreq 10$
      001118 5C               [ 2] 3129 	incw x 
      001119                       3130 7$:	 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001119 20 02            [ 2] 3131 	jra 10$  	
      00111B 1E 03            [ 2] 3132 9$: ldw x,(N2,sp)
      00111D                       3133 10$:
      00111D A6 84            [ 1] 3134 	ld a,#TK_INTGR
      00111F                       3135 rel_exit: 	 
      00111F                       3136 	_drop VSIZE
      00111F 5B 05            [ 2]    1     addw sp,#VSIZE 
      001121 81               [ 4] 3137 	ret 
                                   3138 
                                   3139 ;--------------------------------
                                   3140 ; BASIC: SHOW 
                                   3141 ; print stack content in hexadecimal bytes 
                                   3142 ; 16 bytes per row 
                                   3143 ;--------------------------------
      001122                       3144 show:
      001122 AE 11 3C         [ 2] 3145 	ldw x,#cstk_prompt
      001125 CD 01 D7         [ 4] 3146 	call puts 
      001128 96               [ 1] 3147 	ldw x,sp 
      001129 1C 00 03         [ 2] 3148 	addw x,#3 ; ignore return address
      00112C 90 AE 18 00      [ 2] 3149 	ldw y,#RAM_SIZE  
      001130 CF 00 0C         [ 2] 3150 	ldw acc16,x 
      001133 72 B2 00 0C      [ 2] 3151 	subw y,acc16
      001137 CD 02 79         [ 4] 3152 	call hex_dump
      00113A 4F               [ 1] 3153 	clr a 
      00113B 81               [ 4] 3154 	ret
                                   3155 
      00113C 0A 63 6F 6E 74 65 6E  3156 cstk_prompt: .asciz "\ncontent of stack from top to bottom:\n"
             74 20 6F 66 20 73 74
             61 63 6B 20 66 72 6F
             6D 20 74 6F 70 20 74
             6F 20 62 6F 74 74 6F
             6D 3A 0A 00
                                   3157 
                                   3158 
                                   3159 ;--------------------------------------------
                                   3160 ; BASIC: HEX 
                                   3161 ; select hexadecimal base for integer print
                                   3162 ;---------------------------------------------
      001163                       3163 hex_base:
      001163 35 10 00 0A      [ 1] 3164 	mov base,#16 
      001167 81               [ 4] 3165 	ret 
                                   3166 
                                   3167 ;--------------------------------------------
                                   3168 ; BASIC: DEC 
                                   3169 ; select decimal base for integer print
                                   3170 ;---------------------------------------------
      001168                       3171 dec_base:
      001168 35 0A 00 0A      [ 1] 3172 	mov base,#10
      00116C 81               [ 4] 3173 	ret 
                                   3174 
                                   3175 ;------------------------
                                   3176 ; BASIC: SIZE 
                                   3177 ; return free size in text area
                                   3178 ; output:
                                   3179 ;   A 		TK_INTGR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3180 ;   X 	    size integer
                                   3181 ;--------------------------
      00116D                       3182 size:
      00116D AE 16 90         [ 2] 3183 	ldw x,#tib 
      001170 72 B0 00 1E      [ 2] 3184 	subw x,txtend 
      001174 A6 84            [ 1] 3185 	ld a,#TK_INTGR
      001176 81               [ 4] 3186 	ret 
                                   3187 
                                   3188 
                                   3189 ;------------------------
                                   3190 ; BASIC: UBOUND  
                                   3191 ; return array variable size 
                                   3192 ; output:
                                   3193 ;   A 		TK_INTGR
                                   3194 ;   X 	    array size 
                                   3195 ;--------------------------
      001177                       3196 ubound:
      001177 AE 16 90         [ 2] 3197 	ldw x,#tib
      00117A 72 B0 00 1E      [ 2] 3198 	subw x,txtend 
      00117E 90 CE 00 04      [ 2] 3199 	ldw y,basicptr 
      001182 90 C3 00 1E      [ 2] 3200 	cpw y,txtend 
      001186 25 0A            [ 1] 3201 	jrult 1$
      001188 3B 00 03         [ 1] 3202 	push count 
      00118B 4B 00            [ 1] 3203 	push #0 
      00118D 72 F0 01         [ 2] 3204 	subw x,(1,sp)
      001190                       3205 	_drop 2 
      001190 5B 02            [ 2]    1     addw sp,#2 
      001192 54               [ 2] 3206 1$:	srlw x 
      001193 CF 00 21         [ 2] 3207 	ldw array_size,x
      001196 A6 84            [ 1] 3208 	ld a,#TK_INTGR
      001198 81               [ 4] 3209 	ret 
                                   3210 
                                   3211 ;-----------------------------
                                   3212 ; BASIC: LET var=expr 
                                   3213 ; variable assignement 
                                   3214 ; output:
                                   3215 ;   A 		TK_NONE 
                                   3216 ;-----------------------------
      001199                       3217 let:
      001199 CD 08 87         [ 4] 3218 	call next_token 
      00119C A1 85            [ 1] 3219 	cp a,#TK_VAR 
      00119E 27 0A            [ 1] 3220 	jreq let_var
      0011A0 A1 06            [ 1] 3221 	cp a,#TK_ARRAY 
      0011A2 27 03            [ 1] 3222 	jreq  let_array
      0011A4 CC 07 95         [ 2] 3223 	jp syntax_error
      0011A7                       3224 let_array:
      0011A7 CD 0F B9         [ 4] 3225 	call get_array_element
      0011AA                       3226 let_var:
      0011AA 89               [ 2] 3227 	pushw x  
      0011AB CD 08 87         [ 4] 3228 	call next_token 
      0011AE A1 32            [ 1] 3229 	cp a,#TK_EQUAL
      0011B0 27 03            [ 1] 3230 	jreq 1$
      0011B2 CC 07 95         [ 2] 3231 	jp syntax_error
      0011B5                       3232 1$:	
      0011B5 CD 10 CB         [ 4] 3233 	call relation   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0011B8 A1 84            [ 1] 3234 	cp a,#TK_INTGR 
      0011BA 27 03            [ 1] 3235 	jreq 2$
      0011BC CC 07 95         [ 2] 3236 	jp syntax_error
      0011BF                       3237 2$:	
      0011BF 90 93            [ 1] 3238 	ldw y,x 
      0011C1 85               [ 2] 3239 	popw x   
      0011C2 FF               [ 2] 3240 	ldw (x),y   
      0011C3 81               [ 4] 3241 	ret 
                                   3242 
                                   3243 ;----------------------------
                                   3244 ; BASIC: LIST [[start][,end]]
                                   3245 ; list program lines 
                                   3246 ; form start to end 
                                   3247 ; if empty argument list then 
                                   3248 ; list all.
                                   3249 ;----------------------------
                           000001  3250 	FIRST=1
                           000003  3251 	LAST=3 
                           000005  3252 	LN_PTR=5
                           000006  3253 	VSIZE=6 
      0011C4                       3254 list:
      0011C4 CE 00 1C         [ 2] 3255 	ldw x,txtbgn 
      0011C7 C3 00 1E         [ 2] 3256 	cpw x,txtend 
      0011CA 2B 01            [ 1] 3257 	jrmi 1$
      0011CC 81               [ 4] 3258 	ret 
      0011CD                       3259 1$:	
      0011CD                       3260 	_vars VSIZE
      0011CD 52 06            [ 2]    1     sub sp,#VSIZE 
      0011CF 1F 05            [ 2] 3261 	ldw (LN_PTR,sp),x 
      0011D1 FE               [ 2] 3262 	ldw x,(x) 
      0011D2 1F 01            [ 2] 3263 	ldw (FIRST,sp),x ; list from first line 
      0011D4 AE 7F FF         [ 2] 3264 	ldw x,#MAX_LINENO ; biggest line number 
      0011D7 1F 03            [ 2] 3265 	ldw (LAST,sp),x 
      0011D9 CD 0F 8E         [ 4] 3266 	call arg_list
      0011DC 4D               [ 1] 3267 	tnz a
      0011DD 27 31            [ 1] 3268 	jreq list_start 
      0011DF A1 02            [ 1] 3269 	cp a,#2 
      0011E1 27 07            [ 1] 3270 	jreq 4$
      0011E3 A1 01            [ 1] 3271 	cp a,#1 
      0011E5 27 06            [ 1] 3272 	jreq first_line 
      0011E7 CC 07 95         [ 2] 3273 	jp syntax_error 
      0011EA 85               [ 2] 3274 4$:	popw x 
      0011EB 1F 05            [ 2] 3275 	ldw (LAST+2,sp),x 
      0011ED                       3276 first_line:
      0011ED 85               [ 2] 3277 	popw x
      0011EE 1F 01            [ 2] 3278 	ldw (FIRST,sp),x 
      0011F0                       3279 lines_skip:
      0011F0 CE 00 1C         [ 2] 3280 	ldw x,txtbgn
      0011F3 1F 05            [ 2] 3281 2$:	ldw (LN_PTR,sp),x 
      0011F5 C3 00 1E         [ 2] 3282 	cpw x,txtend 
      0011F8 2A 3C            [ 1] 3283 	jrpl list_exit 
      0011FA FE               [ 2] 3284 	ldw x,(x) ;line# 
      0011FB 13 01            [ 2] 3285 	cpw x,(FIRST,sp)
      0011FD 2A 11            [ 1] 3286 	jrpl list_start 
      0011FF 1E 05            [ 2] 3287 	ldw x,(LN_PTR,sp) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001201 E6 02            [ 1] 3288 	ld a,(2,x)
      001203 C7 00 0D         [ 1] 3289 	ld acc8,a 
      001206 72 5F 00 0C      [ 1] 3290 	clr acc16 
      00120A 72 BB 00 0C      [ 2] 3291 	addw x,acc16
      00120E 20 E3            [ 2] 3292 	jra 2$ 
                                   3293 ; print loop
      001210                       3294 list_start:
      001210 1E 05            [ 2] 3295 	ldw x,(LN_PTR,sp)
      001212 E6 02            [ 1] 3296 3$:	ld a,(2,x) 
      001214 CD 12 91         [ 4] 3297 	call prt_basic_line
      001217 1E 05            [ 2] 3298 	ldw x,(LN_PTR,sp)
      001219 E6 02            [ 1] 3299 	ld a,(2,x)
      00121B C7 00 0D         [ 1] 3300 	ld acc8,a 
      00121E 72 5F 00 0C      [ 1] 3301 	clr acc16 
      001222 72 BB 00 0C      [ 2] 3302 	addw x,acc16
      001226 C3 00 1E         [ 2] 3303 	cpw x,txtend 
      001229 2A 0B            [ 1] 3304 	jrpl list_exit
      00122B 1F 05            [ 2] 3305 	ldw (LN_PTR,sp),x
      00122D FE               [ 2] 3306 	ldw x,(x)
      00122E 13 03            [ 2] 3307 	cpw x,(LAST,sp)  
      001230 2C 04            [ 1] 3308 	jrsgt list_exit 
      001232 1E 05            [ 2] 3309 	ldw x,(LN_PTR,sp)
      001234 20 DC            [ 2] 3310 	jra 3$
      001236                       3311 list_exit:
      001236                       3312 	_drop VSIZE 
      001236 5B 06            [ 2]    1     addw sp,#VSIZE 
      001238 81               [ 4] 3313 	ret
                                   3314 
                                   3315 ;-------------------------
                                   3316 ; print counted string 
                                   3317 ; input:
                                   3318 ;   X 	address of string
                                   3319 ;--------------------------
      001239                       3320 prt_cmd_name:
      001239 F6               [ 1] 3321 	ld a,(x)
      00123A 5C               [ 2] 3322 	incw x
      00123B A4 0F            [ 1] 3323 	and a,#15  
      00123D 88               [ 1] 3324 	push a 
      00123E 0D 01            [ 1] 3325 1$: tnz (1,sp) 
      001240 27 09            [ 1] 3326 	jreq 9$
      001242 F6               [ 1] 3327 	ld a,(x)
      001243 CD 01 C4         [ 4] 3328 	call putc 
      001246 5C               [ 2] 3329 	incw x
      001247 0A 01            [ 1] 3330 	dec (1,sp)	 
      001249 20 F3            [ 2] 3331 	jra 1$
      00124B 84               [ 1] 3332 9$: pop a 
      00124C 81               [ 4] 3333 	ret	
                                   3334 
                                   3335 ;--------------------------
                                   3336 ; print TK_QSTR
                                   3337 ; converting control character
                                   3338 ; to backslash sequence
                                   3339 ; input:
                                   3340 ;   X        char *
                                   3341 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00124D                       3342 prt_quote:
      00124D A6 22            [ 1] 3343 	ld a,#'"
      00124F CD 01 C4         [ 4] 3344 	call putc 
      001252 F6               [ 1] 3345 1$:	ld a,(x)
      001253 27 2D            [ 1] 3346 	jreq 9$
      001255 5C               [ 2] 3347 	incw x 
      001256 A1 20            [ 1] 3348 	cp a,#SPACE 
      001258 25 0C            [ 1] 3349 	jrult 3$
      00125A CD 01 C4         [ 4] 3350 	call putc
      00125D A1 5C            [ 1] 3351 	cp a,#'\ 
      00125F 26 F1            [ 1] 3352 	jrne 1$ 
      001261                       3353 2$:
      001261 CD 01 C4         [ 4] 3354 	call putc 
      001264 20 EC            [ 2] 3355 	jra 1$
      001266 88               [ 1] 3356 3$: push a 
      001267 A6 5C            [ 1] 3357 	ld a,#'\
      001269 CD 01 C4         [ 4] 3358 	call putc 
      00126C 84               [ 1] 3359 	pop a 
      00126D A0 07            [ 1] 3360 	sub a,#7
      00126F C7 00 0D         [ 1] 3361 	ld acc8,a 
      001272 72 5F 00 0C      [ 1] 3362 	clr acc16
      001276 90 AE 0B 2E      [ 2] 3363 	ldw y,#escaped 
      00127A 72 B9 00 0C      [ 2] 3364 	addw y,acc16 
      00127E 90 F6            [ 1] 3365 	ld a,(y)
      001280 20 DF            [ 2] 3366 	jra 2$
      001282 A6 22            [ 1] 3367 9$: ld a,#'"
      001284 CD 01 C4         [ 4] 3368 	call putc 
      001287 5C               [ 2] 3369 	incw x 
      001288 81               [ 4] 3370 	ret
                                   3371 
                                   3372 ;--------------------------
                                   3373 ; return variable name 
                                   3374 ; from its address.
                                   3375 ; input:
                                   3376 ;   X    variable address
                                   3377 ; output:
                                   3378 ;   A     variable letter
                                   3379 ;--------------------------
      001289                       3380 var_name:
      001289 1D 00 26         [ 2] 3381 		subw x,#vars 
      00128C 9F               [ 1] 3382 		ld a,xl 
      00128D 44               [ 1] 3383 		srl a 
      00128E AB 41            [ 1] 3384 		add a,#'A 
      001290 81               [ 4] 3385 		ret 
                                   3386 
                                   3387 
                                   3388 ;--------------------------
                                   3389 ; decompile line from token list 
                                   3390 ; input:
                                   3391 ;   A       stop at this position 
                                   3392 ;   X 		pointer at line
                                   3393 ; output:
                                   3394 ;   none 
                                   3395 ;--------------------------	
                           000001  3396 	BASE_SAV=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                           000002  3397 	WIDTH_SAV=2
                           000003  3398 	XSAVE=3
                           000005  3399 	LLEN=5
                           000005  3400 	VSIZE=5 
      001291                       3401 prt_basic_line:
      001291                       3402 	_vars VSIZE
      001291 52 05            [ 2]    1     sub sp,#VSIZE 
      001293 6B 05            [ 1] 3403 	ld (LLEN,sp),a  
      001295 C6 00 0A         [ 1] 3404 	ld a,base
      001298 6B 01            [ 1] 3405 	ld (BASE_SAV,sp),a  
      00129A C6 00 24         [ 1] 3406 	ld a,tab_width 
      00129D 6B 02            [ 1] 3407 	ld (WIDTH_SAV,sp),a 
      00129F CF 00 17         [ 2] 3408 	ldw ptr16,x
      0012A2 FE               [ 2] 3409 	ldw x,(x)
      0012A3 35 0A 00 0A      [ 1] 3410 	mov base,#10
      0012A7 35 05 00 24      [ 1] 3411 	mov tab_width,#5
      0012AB CD 09 24         [ 4] 3412 	call print_int ; print line number 
      0012AE A6 20            [ 1] 3413 	ld a,#SPACE 
      0012B0 CD 01 C4         [ 4] 3414 	call putc 
      0012B3 72 5F 00 24      [ 1] 3415 	clr tab_width
      0012B7 AE 00 03         [ 2] 3416 	ldw x,#3
      0012BA 9F               [ 1] 3417 1$:	ld a,xl 
      0012BB 11 05            [ 1] 3418 	cp a,(LLEN,sp)
      0012BD 2B 03            [ 1] 3419 	jrmi 2$
      0012BF CC 13 90         [ 2] 3420 	jp 20$
      0012C2                       3421 2$:	 
      0012C2 72 D6 00 17      [ 4] 3422 	ld a,([ptr16],x)
      0012C6 5C               [ 2] 3423 	incw x 
      0012C7 1F 03            [ 2] 3424 	ldw (XSAVE,sp),x 
      0012C9 72 DE 00 17      [ 5] 3425 	ldw x,([ptr16],x)
      0012CD 4D               [ 1] 3426 	tnz a 
      0012CE 2B 0A            [ 1] 3427 	jrmi 3$
      0012D0 A1 02            [ 1] 3428 	cp a,#TK_QSTR 
      0012D2 27 4B            [ 1] 3429 	jreq 6$
      0012D4 A1 03            [ 1] 3430 	cp a,#TK_CHAR 
      0012D6 27 57            [ 1] 3431 	jreq 7$
      0012D8 20 64            [ 2] 3432 	jra 8$
                                   3433 ;; TK_CMD|TK_IFUNC|TK_CFUNC|TK_CONST
      0012DA                       3434 3$:	
      0012DA A1 85            [ 1] 3435 	cp a,#TK_VAR 
      0012DC 27 34            [ 1] 3436 	jreq 4$
      0012DE A1 84            [ 1] 3437 	cp a,#TK_INTGR
      0012E0 27 38            [ 1] 3438 	jreq 5$
      0012E2 A3 14 C4         [ 2] 3439 	cpw x,#remark 
      0012E5 26 14            [ 1] 3440 	jrne 30$
      0012E7 A6 27            [ 1] 3441 	ld a,#''
      0012E9 CD 01 C4         [ 4] 3442 	call putc 
      0012EC 1E 03            [ 2] 3443 	ldw x,(XSAVE,sp)
      0012EE 1C 00 02         [ 2] 3444 	addw x,#2
      0012F1 72 BB 00 17      [ 2] 3445 	addw x,ptr16  
      0012F5 CD 01 D7         [ 4] 3446 	call puts 
      0012F8 CC 13 90         [ 2] 3447 	jp 20$ 
      0012FB                       3448 30$:
      0012FB A6 20            [ 1] 3449 	ld a,#SPACE 
      0012FD CD 01 C4         [ 4] 3450 	call putc 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001300 CD 0E FD         [ 4] 3451 	call cmd_name
      001303 CD 12 39         [ 4] 3452 	call prt_cmd_name
      001306 A6 20            [ 1] 3453 	ld a,#SPACE 
      001308 CD 01 C4         [ 4] 3454 	call putc 
      00130B                       3455 31$:
      00130B 1E 03            [ 2] 3456 	ldw x,(XSAVE,sp)
      00130D 1C 00 02         [ 2] 3457 	addw x,#2
      001310 20 A8            [ 2] 3458 	jra 1$
                                   3459 ;; TK_VAR 
      001312                       3460 4$:
                                   3461 ;	ld a,#SPACE 
                                   3462 ;	call putc 
      001312 CD 12 89         [ 4] 3463 	call var_name
      001315 CD 01 C4         [ 4] 3464 	call putc 
      001318 20 F1            [ 2] 3465 	jra 31$
                                   3466 ;; TK_INTGR
      00131A                       3467 5$:
                                   3468 ;	ld a,#SPACE 
                                   3469 ;	call putc
      00131A CD 09 24         [ 4] 3470 	call print_int 
      00131D 20 EC            [ 2] 3471 	jra 31$
                                   3472 ;; TK_QSTR
      00131F                       3473 6$:
      00131F 1E 03            [ 2] 3474 	ldw x,(XSAVE,sp)
      001321 72 BB 00 17      [ 2] 3475 	addw x,ptr16 
      001325 CD 12 4D         [ 4] 3476 	call prt_quote  
      001328 72 B0 00 17      [ 2] 3477 	subw x,ptr16  
      00132C CC 12 BA         [ 2] 3478 	jp 1$
                                   3479 ;; TK_CHAR 
      00132F                       3480 7$:
      00132F A6 5C            [ 1] 3481 	ld a,#'\ 
      001331 CD 01 C4         [ 4] 3482 	call putc 
      001334 9E               [ 1] 3483 	ld a,xh 
      001335 CD 01 C4         [ 4] 3484 	call putc 
      001338 1E 03            [ 2] 3485 	ldw x,(XSAVE,sp)
      00133A 5C               [ 2] 3486 	incw x 
      00133B CC 12 BA         [ 2] 3487 	jp 1$ 
      00133E A1 01            [ 1] 3488 8$: cp a,#TK_COLON 
      001340 26 0A            [ 1] 3489 	jrne 9$
      001342 A6 3A            [ 1] 3490 	ld a,#':
      001344                       3491 81$:
      001344 CD 01 C4         [ 4] 3492 	call putc
      001347                       3493 82$:
      001347 1E 03            [ 2] 3494 	ldw x,(XSAVE,sp)
      001349 CC 12 BA         [ 2] 3495 	jp 1$ 
      00134C                       3496 9$: 
      00134C A1 0A            [ 1] 3497 	cp a,#TK_SHARP
      00134E 22 0E            [ 1] 3498 	jrugt 10$ 
      001350 A0 06            [ 1] 3499 	sub a,#TK_ARRAY 
      001352 90 5F            [ 1] 3500 	clrw y 
      001354 90 97            [ 1] 3501 	ld yl,a
      001356 72 A9 13 A2      [ 2] 3502 	addw y,#single_char 
      00135A 90 F6            [ 1] 3503 	ld a,(y)
      00135C 20 E6            [ 2] 3504 	jra 81$ 
      00135E                       3505 10$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00135E A1 11            [ 1] 3506 	cp a,#TK_MINUS 
      001360 22 0E            [ 1] 3507 	jrugt 11$
      001362 A0 10            [ 1] 3508 	sub a,#TK_PLUS 
      001364 90 5F            [ 1] 3509 	clrw y 
      001366 90 97            [ 1] 3510 	ld yl,a 
      001368 72 A9 13 A7      [ 2] 3511 	addw y,#add_char 
      00136C 90 F6            [ 1] 3512 	ld a,(y)
      00136E 20 D4            [ 2] 3513 	jra 81$
      001370                       3514 11$:
      001370 A1 22            [ 1] 3515     cp a,#TK_MOD 
      001372 22 0E            [ 1] 3516 	jrugt 12$
      001374 A0 20            [ 1] 3517 	sub a,#TK_MULT
      001376 90 5F            [ 1] 3518 	clrw y 
      001378 90 97            [ 1] 3519 	ld yl,a 
      00137A 72 A9 13 A9      [ 2] 3520 	addw y,#mul_char
      00137E 90 F6            [ 1] 3521 	ld a,(y)
      001380 20 C2            [ 2] 3522 	jra 81$
      001382                       3523 12$:
      001382 A0 31            [ 1] 3524 	sub a,#TK_GT  
      001384 48               [ 1] 3525 	sll a 
      001385 5F               [ 1] 3526 	clrw x 
      001386 97               [ 1] 3527 	ld xl,a 
      001387 1C 13 AC         [ 2] 3528 	addw x,#relop_str 
      00138A FE               [ 2] 3529 	ldw x,(x)
      00138B CD 01 D7         [ 4] 3530 	call puts 
      00138E 20 B7            [ 2] 3531 	jra 82$
      001390                       3532 20$: 
      001390 A6 0D            [ 1] 3533 	ld a,#CR 
      001392 CD 01 C4         [ 4] 3534 	call putc
      001395 7B 02            [ 1] 3535 	ld a,(WIDTH_SAV,sp) 
      001397 C7 00 24         [ 1] 3536 	ld tab_width,a 
      00139A 7B 01            [ 1] 3537 	ld a,(BASE_SAV,sp) 
      00139C C7 00 0A         [ 1] 3538 	ld base,a
      00139F                       3539 	_drop VSIZE 
      00139F 5B 05            [ 2]    1     addw sp,#VSIZE 
      0013A1 81               [ 4] 3540 	ret 
                                   3541 
      0013A2 40 28 29 2C 23        3542 single_char: .byte '@','(',')',',','#'
      0013A7 2B 2D                 3543 add_char: .byte '+','-'
      0013A9 2A 2F 25              3544 mul_char: .byte '*','/','%'
      0013AC 13 B8 13 BA 13 BC 13  3545 relop_str: .word gt,equal,ge,lt,le,ne 
             BF 13 C1 13 C4
      0013B8 3E 00                 3546 gt: .asciz ">"
      0013BA 3D 00                 3547 equal: .asciz "="
      0013BC 3E 3D 00              3548 ge: .asciz ">="
      0013BF 3C 00                 3549 lt: .asciz "<"
      0013C1 3C 3D 00              3550 le: .asciz "<="
      0013C4 3C 3E 00              3551 ne:  .asciz "<>"
                                   3552 
                                   3553 
                                   3554 ;---------------------------------
                                   3555 ; BASIC: PRINT|? arg_list 
                                   3556 ; print values from argument list
                                   3557 ;----------------------------------
                           000001  3558 	COMMA=1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                           000001  3559 	VSIZE=1
      0013C7                       3560 print:
      0013C7 4B 00            [ 1] 3561 push #0 ; local variable COMMA 
      0013C9                       3562 reset_comma:
      0013C9 0F 01            [ 1] 3563 	clr (COMMA,sp)
      0013CB                       3564 prt_loop:
      0013CB CD 08 87         [ 4] 3565 	call next_token
      0013CE A1 02            [ 1] 3566 	cp a,#CMD_END 
      0013D0 25 5A            [ 1] 3567 	jrult print_exit ; colon or end of line 
      0013D2 A1 02            [ 1] 3568 	cp a,#TK_QSTR
      0013D4 27 12            [ 1] 3569 	jreq 1$
      0013D6 A1 03            [ 1] 3570 	cp a,#TK_CHAR 
      0013D8 27 13            [ 1] 3571 	jreq 2$ 
      0013DA A1 82            [ 1] 3572 	cp a,#TK_CFUNC 
      0013DC 27 15            [ 1] 3573 	jreq 3$
      0013DE A1 09            [ 1] 3574 	cp a,#TK_COMMA 
      0013E0 27 18            [ 1] 3575 	jreq 4$
      0013E2 A1 0A            [ 1] 3576 	cp a,#TK_SHARP 
      0013E4 27 1B            [ 1] 3577 	jreq 5$
      0013E6 20 2B            [ 2] 3578 	jra 7$ 
      0013E8                       3579 1$:	; print string 
      0013E8 CD 01 D7         [ 4] 3580 	call puts
      0013EB 20 DC            [ 2] 3581 	jra reset_comma
      0013ED                       3582 2$:	; print character 
      0013ED 9F               [ 1] 3583 	ld a,xl 
      0013EE CD 01 C4         [ 4] 3584 	call putc 
      0013F1 20 D6            [ 2] 3585 	jra reset_comma 
      0013F3                       3586 3$: ; print character function value  	
      0013F3 FD               [ 4] 3587 	call (x)
      0013F4 9F               [ 1] 3588 	ld a,xl 
      0013F5 CD 01 C4         [ 4] 3589 	call putc
      0013F8 20 CF            [ 2] 3590 	jra reset_comma 
      0013FA                       3591 4$: ; set comma state 
      0013FA A6 FF            [ 1] 3592 	ld a,#255 
      0013FC 6B 01            [ 1] 3593 	ld (COMMA,sp),a  
      0013FE CC 13 CB         [ 2] 3594 	jp prt_loop   
      001401                       3595 5$: ; # character must be followed by an integer   
      001401 CD 08 87         [ 4] 3596 	call next_token
      001404 A1 84            [ 1] 3597 	cp a,#TK_INTGR 
      001406 27 03            [ 1] 3598 	jreq 6$
      001408 CC 07 95         [ 2] 3599 	jp syntax_error 
      00140B                       3600 6$: ; set tab width
      00140B 9F               [ 1] 3601 	ld a,xl 
      00140C A4 0F            [ 1] 3602 	and a,#15 
      00140E C7 00 24         [ 1] 3603 	ld tab_width,a 
      001411 20 B6            [ 2] 3604 	jra reset_comma 
      001413                       3605 7$:	
      001413                       3606 	_unget_token
      001413 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001418 CD 10 CB         [ 4] 3607 	call relation 
      00141B A1 84            [ 1] 3608 	cp a,#TK_INTGR
      00141D 27 08            [ 1] 3609 	jreq 8$
      00141F                       3610 	_unget_token
      00141F 55 00 02 00 01   [ 1]    1     mov in,in.saved
      001424 CC 14 2C         [ 2] 3611 	jp print_exit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001427 CD 09 24         [ 4] 3612 8$: call print_int 
      00142A 20 9D            [ 2] 3613 	jra reset_comma 
      00142C                       3614 print_exit:
      00142C 0D 01            [ 1] 3615 	tnz (COMMA,sp)
      00142E 26 05            [ 1] 3616 	jrne 9$
      001430 A6 0D            [ 1] 3617 	ld a,#CR 
      001432 CD 01 C4         [ 4] 3618     call putc 
      001435                       3619 9$:	_drop VSIZE 
      001435 5B 01            [ 2]    1     addw sp,#VSIZE 
      001437 81               [ 4] 3620 	ret 
                                   3621 
      001438                       3622 print_type: 
                                   3623 
                                   3624 ;----------------------
                                   3625 ; 'save_context' and
                                   3626 ; 'rest_context' must be 
                                   3627 ; called at the same 
                                   3628 ; call stack depth 
                                   3629 ; i.e. SP must have the 
                                   3630 ; save value at  
                                   3631 ; entry point of both 
                                   3632 ; routine. 
                                   3633 ;---------------------
                           000004  3634 	CTXT_SIZE=4 ; size of saved data 
                                   3635 ;--------------------
                                   3636 ; save current BASIC
                                   3637 ; interpreter context 
                                   3638 ; on stack 
                                   3639 ;--------------------
      001438                       3640 	_argofs 0 
                           000002     1     ARG_OFS=2+0 
      001438                       3641 	_arg BPTR 1
                           000003     1     BPTR=ARG_OFS+1 
      001438                       3642 	_arg IN 3
                           000005     1     IN=ARG_OFS+3 
      001438                       3643 	_arg CNT 4
                           000006     1     CNT=ARG_OFS+4 
      001438                       3644 save_context:
      001438 CE 00 04         [ 2] 3645 	ldw x,basicptr 
      00143B 1F 03            [ 2] 3646 	ldw (BPTR,sp),x
      00143D C6 00 01         [ 1] 3647 	ld a,in 
      001440 6B 05            [ 1] 3648 	ld (IN,sp),a
      001442 C6 00 03         [ 1] 3649 	ld a,count 
      001445 6B 06            [ 1] 3650 	ld (CNT,sp),a  
      001447 81               [ 4] 3651 	ret
                                   3652 
                                   3653 ;-----------------------
                                   3654 ; restore previously saved 
                                   3655 ; BASIC interpreter context 
                                   3656 ; from stack 
                                   3657 ;-------------------------
      001448                       3658 rest_context:
      001448 1E 03            [ 2] 3659 	ldw x,(BPTR,sp)
      00144A CF 00 04         [ 2] 3660 	ldw basicptr,x 
      00144D 7B 05            [ 1] 3661 	ld a,(IN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00144F C7 00 01         [ 1] 3662 	ld in,a
      001452 7B 06            [ 1] 3663 	ld a,(CNT,sp)
      001454 C7 00 03         [ 1] 3664 	ld count,a  
      001457 81               [ 4] 3665 	ret
                                   3666 
                                   3667 
                                   3668 
                                   3669 ;------------------------------------------
                                   3670 ; BASIC: INPUT [string]var[,[string]var]
                                   3671 ; input value in variables 
                                   3672 ; [string] optionally can be used as prompt 
                                   3673 ;-----------------------------------------
                           000001  3674 	CX_BPTR=1
                           000003  3675 	CX_IN=3
                           000004  3676 	CX_CNT=4
                           000005  3677 	SKIP=5
                           000006  3678 	VAR_ADDR=6
                           000007  3679 	VSIZE=7
      001458                       3680 input_var:
      001458                       3681 	_vars VSIZE 
      001458 52 07            [ 2]    1     sub sp,#VSIZE 
      00145A                       3682 input_loop:
      00145A 0F 05            [ 1] 3683 	clr (SKIP,sp)
      00145C CD 08 87         [ 4] 3684 	call next_token 
      00145F A1 02            [ 1] 3685 	cp a,#TK_QSTR 
      001461 26 08            [ 1] 3686 	jrne 1$ 
      001463 CD 01 D7         [ 4] 3687 	call puts 
      001466 03 05            [ 1] 3688 	cpl (SKIP,sp)
      001468 CD 08 87         [ 4] 3689 	call next_token 
      00146B A1 85            [ 1] 3690 1$: cp a,#TK_VAR  
      00146D 27 03            [ 1] 3691 	jreq 2$ 
      00146F CC 07 95         [ 2] 3692 	jp syntax_error
      001472 1F 06            [ 2] 3693 2$:	ldw (VAR_ADDR,sp),x 
      001474 0D 05            [ 1] 3694 	tnz (SKIP,sp)
      001476 26 06            [ 1] 3695 	jrne 21$ 
      001478 CD 12 89         [ 4] 3696 	call var_name 
      00147B CD 01 C4         [ 4] 3697 	call putc   
      00147E                       3698 21$:
      00147E A6 3A            [ 1] 3699 	ld a,#':
      001480 CD 01 C4         [ 4] 3700 	call putc 
      001483 CD 14 38         [ 4] 3701 	call save_context 
      001486 72 5F 00 03      [ 1] 3702 	clr count  
      00148A CD 0A 55         [ 4] 3703 	call readln 
      00148D AE 16 90         [ 2] 3704 	ldw x,#tib 
      001490 3B 00 03         [ 1] 3705 	push count
      001493 4B 00            [ 1] 3706 	push #0 
      001495 72 FB 01         [ 2] 3707 	addw x,(1,sp)
      001498 5C               [ 2] 3708 	incw x 
      001499                       3709 	_drop 2 
      001499 5B 02            [ 2]    1     addw sp,#2 
      00149B 72 5F 00 01      [ 1] 3710 	clr in 
      00149F CD 0C 0A         [ 4] 3711 	call get_token
      0014A2 A1 84            [ 1] 3712 	cp a,#TK_INTGR
      0014A4 27 06            [ 1] 3713 	jreq 3$ 
      0014A6 CD 14 48         [ 4] 3714 	call rest_context 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0014A9 CC 07 95         [ 2] 3715 	jp syntax_error
      0014AC 16 06            [ 2] 3716 3$: ldw y,(VAR_ADDR,sp) 
      0014AE 90 FF            [ 2] 3717 	ldw (y),x 
      0014B0 CD 14 48         [ 4] 3718 	call rest_context
      0014B3 CD 08 87         [ 4] 3719 	call next_token 
      0014B6 A1 09            [ 1] 3720 	cp a,#TK_COMMA 
      0014B8 27 A0            [ 1] 3721 	jreq input_loop 
      0014BA A1 01            [ 1] 3722 	cp a,#TK_COLON 
      0014BC 23 03            [ 2] 3723     jrule input_exit 
      0014BE CC 07 95         [ 2] 3724 	jp syntax_error 
      0014C1                       3725 input_exit:
      0014C1                       3726 	_drop VSIZE 
      0014C1 5B 07            [ 2]    1     addw sp,#VSIZE 
      0014C3 81               [ 4] 3727 	ret 
                                   3728 
                                   3729 
                                   3730 ;---------------------
                                   3731 ; BASIC: REMARK | ' 
                                   3732 ; skip comment to end of line 
                                   3733 ;---------------------- 
      0014C4                       3734 remark:
      0014C4 55 00 03 00 01   [ 1] 3735 	mov in,count 
      0014C9 81               [ 4] 3736  	ret 
                                   3737 
                                   3738 
                                   3739 ;---------------------
                                   3740 ; BASIC: WAIT addr,mask[,xor_mask] 
                                   3741 ; read in loop 'addr'  
                                   3742 ; apply & 'mask' to value 
                                   3743 ; loop while result==0.  
                                   3744 ; 'xor_mask' is used to 
                                   3745 ; invert the wait logic.
                                   3746 ; i.e. loop while not 0.
                                   3747 ;---------------------
                           000001  3748 	XMASK=1 
                           000002  3749 	MASK=2
                           000003  3750 	ADDR=3
                           000004  3751 	VSIZE=4
      0014CA                       3752 wait: 
      0014CA                       3753 	_vars VSIZE
      0014CA 52 04            [ 2]    1     sub sp,#VSIZE 
      0014CC 0F 01            [ 1] 3754 	clr (XMASK,sp) 
      0014CE CD 0F 8E         [ 4] 3755 	call arg_list 
      0014D1 A1 02            [ 1] 3756 	cp a,#2
      0014D3 24 03            [ 1] 3757 	jruge 0$
      0014D5 CC 07 95         [ 2] 3758 	jp syntax_error 
      0014D8 A1 03            [ 1] 3759 0$:	cp a,#3
      0014DA 25 04            [ 1] 3760 	jrult 1$
      0014DC 85               [ 2] 3761 	popw x 
      0014DD 9F               [ 1] 3762 	ld a,xl
      0014DE 6B 01            [ 1] 3763 	ld (XMASK,sp),a 
      0014E0 85               [ 2] 3764 1$: popw x ; mask 
      0014E1 9F               [ 1] 3765 	ld a,xl 
      0014E2 6B 02            [ 1] 3766 	ld (MASK,sp),a 
      0014E4 85               [ 2] 3767 	popw x ; address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0014E5 F6               [ 1] 3768 2$:	ld a,(x)
      0014E6 14 02            [ 1] 3769 	and a,(MASK,sp)
      0014E8 18 01            [ 1] 3770 	xor a,(XMASK,sp)
      0014EA 27 F9            [ 1] 3771 	jreq 2$ 
      0014EC                       3772 	_drop VSIZE 
      0014EC 5B 04            [ 2]    1     addw sp,#VSIZE 
      0014EE 81               [ 4] 3773 	ret 
                                   3774 
                                   3775 ;---------------------
                                   3776 ; BASIC: BSET addr,mask
                                   3777 ; set bits at 'addr' corresponding 
                                   3778 ; to those of 'mask' that are at 1.
                                   3779 ; arguments:
                                   3780 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3781 ;   mask        mask|addr
                                   3782 ; output:
                                   3783 ;	none 
                                   3784 ;--------------------------
      0014EF                       3785 bit_set:
      0014EF CD 0F 8E         [ 4] 3786 	call arg_list 
      0014F2 A1 02            [ 1] 3787 	cp a,#2	 
      0014F4 27 03            [ 1] 3788 	jreq 1$ 
      0014F6 CC 07 95         [ 2] 3789 	jp syntax_error
      0014F9                       3790 1$: 
      0014F9 85               [ 2] 3791 	popw x ; mask 
      0014FA 9F               [ 1] 3792 	ld a,xl 
      0014FB 85               [ 2] 3793 	popw x ; addr  
      0014FC FA               [ 1] 3794 	or a,(x)
      0014FD F7               [ 1] 3795 	ld (x),a
      0014FE 81               [ 4] 3796 	ret 
                                   3797 
                                   3798 ;---------------------
                                   3799 ; BASIC: BRES addr,mask
                                   3800 ; reset bits at 'addr' corresponding 
                                   3801 ; to those of 'mask' that are at 1.
                                   3802 ; arguments:
                                   3803 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3804 ;   mask	    ~mask&*addr  
                                   3805 ; output:
                                   3806 ;	none 
                                   3807 ;--------------------------
      0014FF                       3808 bit_reset:
      0014FF CD 0F 8E         [ 4] 3809 	call arg_list 
      001502 A1 02            [ 1] 3810 	cp a,#2  
      001504 27 03            [ 1] 3811 	jreq 1$ 
      001506 CC 07 95         [ 2] 3812 	jp syntax_error
      001509                       3813 1$: 
      001509 85               [ 2] 3814 	popw x ; mask 
      00150A 9F               [ 1] 3815 	ld a,xl 
      00150B 43               [ 1] 3816 	cpl a 
      00150C 85               [ 2] 3817 	popw x ; addr  
      00150D F4               [ 1] 3818 	and a,(x)
      00150E F7               [ 1] 3819 	ld (x),a 
      00150F 81               [ 4] 3820 	ret 
                                   3821 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3822 ;---------------------
                                   3823 ; BASIC: BTOGL addr,mask
                                   3824 ; toggle bits at 'addr' corresponding 
                                   3825 ; to those of 'mask' that are at 1.
                                   3826 ; arguments:
                                   3827 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3828 ;   mask	    mask^*addr  
                                   3829 ; output:
                                   3830 ;	none 
                                   3831 ;--------------------------
      001510                       3832 bit_toggle:
      001510 CD 0F 8E         [ 4] 3833 	call arg_list 
      001513 A1 02            [ 1] 3834 	cp a,#2 
      001515 27 03            [ 1] 3835 	jreq 1$ 
      001517 CC 07 95         [ 2] 3836 	jp syntax_error
      00151A 85               [ 2] 3837 1$: popw x ; mask 
      00151B 9F               [ 1] 3838 	ld a,xl 
      00151C 85               [ 2] 3839 	popw x ; addr  
      00151D F8               [ 1] 3840 	xor a,(x)
      00151E F7               [ 1] 3841 	ld (x),a 
      00151F 81               [ 4] 3842 	ret 
                                   3843 
                                   3844 
                                   3845 ;---------------------
                                   3846 ; BASIC: BTEST(addr,bit)
                                   3847 ; return bit value at 'addr' 
                                   3848 ; bit is in range {0..7}.
                                   3849 ; arguments:
                                   3850 ; 	addr 		memory address RAM|PERIPHERAL 
                                   3851 ;   bit 	    bit position {0..7}  
                                   3852 ; output:
                                   3853 ;	none 
                                   3854 ;--------------------------
      001520                       3855 bit_test:
      001520 CD 0F 89         [ 4] 3856 	call func_args 
      001523 A1 02            [ 1] 3857 	cp a,#2
      001525 27 03            [ 1] 3858 	jreq 0$
      001527 CC 07 95         [ 2] 3859 	jp syntax_error
      00152A                       3860 0$:	
      00152A 85               [ 2] 3861 	popw x 
      00152B 9F               [ 1] 3862 	ld a,xl 
      00152C A4 07            [ 1] 3863 	and a,#7
      00152E 88               [ 1] 3864 	push a   
      00152F A6 01            [ 1] 3865 	ld a,#1 
      001531 0D 01            [ 1] 3866 1$: tnz (1,sp)
      001533 27 05            [ 1] 3867 	jreq 2$
      001535 48               [ 1] 3868 	sll a 
      001536 0A 01            [ 1] 3869 	dec (1,sp)
      001538 20 F7            [ 2] 3870 	jra 1$
      00153A                       3871 2$: _drop 1 
      00153A 5B 01            [ 2]    1     addw sp,#1 
      00153C 85               [ 2] 3872 	popw x 
      00153D F4               [ 1] 3873 	and a,(x)
      00153E 27 02            [ 1] 3874 	jreq 3$
      001540 A6 01            [ 1] 3875 	ld a,#1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001542 5F               [ 1] 3876 3$:	clrw x 
      001543 97               [ 1] 3877 	ld xl,a 
      001544 A6 84            [ 1] 3878 	ld a,#TK_INTGR
      001546 81               [ 4] 3879 	ret
                                   3880 
                                   3881 
                                   3882 ;--------------------
                                   3883 ; BASIC: POKE addr,byte
                                   3884 ; put a byte at addr 
                                   3885 ;--------------------
      001547                       3886 poke:
      001547 CD 0F 8E         [ 4] 3887 	call arg_list 
      00154A A1 02            [ 1] 3888 	cp a,#2
      00154C 27 03            [ 1] 3889 	jreq 1$
      00154E CC 07 95         [ 2] 3890 	jp syntax_error
      001551                       3891 1$:	
      001551 85               [ 2] 3892 	popw x  
      001552 9F               [ 1] 3893     ld a,xl 
      001553 85               [ 2] 3894 	popw x 
      001554 F7               [ 1] 3895 	ld (x),a 
      001555 81               [ 4] 3896 	ret 
                                   3897 
                                   3898 ;-----------------------
                                   3899 ; BASIC: PEEK(addr)
                                   3900 ; get the byte at addr 
                                   3901 ; input:
                                   3902 ;	none 
                                   3903 ; output:
                                   3904 ;	X 		value 
                                   3905 ;-----------------------
      001556                       3906 peek:
      001556 CD 0F 89         [ 4] 3907 	call func_args
      001559 A1 01            [ 1] 3908 	cp a,#1
      00155B 27 03            [ 1] 3909 	jreq 1$
      00155D CC 07 95         [ 2] 3910 	jp syntax_error
      001560 85               [ 2] 3911 1$:	popw x 
      001561 F6               [ 1] 3912 	ld a,(x)
      001562 5F               [ 1] 3913 	clrw x 
      001563 97               [ 1] 3914 	ld xl,a 
      001564 A6 84            [ 1] 3915 	ld a,#TK_INTGR
      001566 81               [ 4] 3916 	ret 
                                   3917 
                                   3918 ;----------------------------
                                   3919 ; BASIC: XPEEK(page,addr)
                                   3920 ; read extended memory byte
                                   3921 ; page in range {0,1,2}
                                   3922 ;----------------------------
      001567                       3923 xpeek:
      001567 CD 0F 89         [ 4] 3924 	call func_args 
      00156A A1 02            [ 1] 3925 	cp a,#2 
      00156C 27 03            [ 1] 3926 	jreq 1$
      00156E CC 07 95         [ 2] 3927 	jp syntax_error
      001571                       3928 1$: 
      001571 85               [ 2] 3929 	popw x  
      001572 CF 00 17         [ 2] 3930 	ldw farptr+1,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001575 85               [ 2] 3931 	popw x 
      001576 9F               [ 1] 3932 	ld a,xl 
      001577 C7 00 16         [ 1] 3933 	ld farptr,a 
      00157A 5F               [ 1] 3934 	clrw x
      00157B 92 BC 00 16      [ 5] 3935 	ldf a,[farptr]
      00157F 97               [ 1] 3936 	ld xl,a 
      001580 A6 84            [ 1] 3937 	ld a,#TK_INTGR 
      001582 81               [ 4] 3938 	ret 
                                   3939 
                                   3940 ;---------------------------
                                   3941 ; BASIC IF expr : instructions
                                   3942 ; evaluate expr and if true 
                                   3943 ; execute instructions on same line. 
                                   3944 ;----------------------------
      001583                       3945 if: 
      001583 CD 10 CB         [ 4] 3946 	call relation 
      001586 A1 84            [ 1] 3947 	cp a,#TK_INTGR
      001588 27 03            [ 1] 3948 	jreq 1$ 
      00158A CC 07 95         [ 2] 3949 	jp syntax_error
      00158D 4F               [ 1] 3950 1$:	clr a 
      00158E 5D               [ 2] 3951 	tnzw x 
      00158F 26 05            [ 1] 3952 	jrne 9$  
                                   3953 ;skip to next line
      001591 55 00 03 00 01   [ 1] 3954 	mov in,count
      001596 81               [ 4] 3955 9$:	ret 
                                   3956 
                                   3957 ;------------------------
                                   3958 ; BASIC: FOR var=expr 
                                   3959 ; set variable to expression 
                                   3960 ; leave variable address 
                                   3961 ; on stack and set
                                   3962 ; FLOOP bit in 'flags'
                                   3963 ;-----------------
                           000001  3964 	RETL1=1 ; return address  
                           000003  3965 	FSTEP=3  ; variable increment
                           000005  3966 	LIMIT=5 ; loop limit 
                           000007  3967 	CVAR=7   ; control variable 
                           000009  3968 	INW=9   ;  in.w saved
                           00000B  3969 	BPTR=11 ; baseptr saved
                           00000A  3970 	VSIZE=10  
      001597                       3971 for: ; { -- var_addr }
      001597 85               [ 2] 3972 	popw x ; call return address 
      001598                       3973 	_vars VSIZE 
      001598 52 0A            [ 2]    1     sub sp,#VSIZE 
      00159A 89               [ 2] 3974 	pushw x  ; RETL1 
      00159B A6 85            [ 1] 3975 	ld a,#TK_VAR 
      00159D CD 0F 7C         [ 4] 3976 	call expect
      0015A0 1F 07            [ 2] 3977 	ldw (CVAR,sp),x  ; control variable 
      0015A2 CD 11 AA         [ 4] 3978 	call let_var 
      0015A5 72 14 00 23      [ 1] 3979 	bset flags,#FLOOP 
                                   3980 ; open space on stack for loop data 
      0015A9 5F               [ 1] 3981 	clrw x 
      0015AA 1F 0B            [ 2] 3982 	ldw (BPTR,sp),x 
      0015AC 1F 09            [ 2] 3983 	ldw (INW,sp),x 
      0015AE CD 08 87         [ 4] 3984 	call next_token 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0015B1 A1 80            [ 1] 3985 	cp a,#TK_CMD 
      0015B3 27 03            [ 1] 3986 	jreq 1$
      0015B5 CC 07 95         [ 2] 3987 	jp syntax_error
      0015B8                       3988 1$:  
      0015B8 A3 15 C0         [ 2] 3989 	cpw x,#to 
      0015BB 27 03            [ 1] 3990 	jreq to
      0015BD CC 07 95         [ 2] 3991 	jp syntax_error 
                                   3992 
                                   3993 ;-----------------------------------
                                   3994 ; BASIC: TO expr 
                                   3995 ; second part of FOR loop initilization
                                   3996 ; leave limit on stack and set 
                                   3997 ; FTO bit in 'flags'
                                   3998 ;-----------------------------------
      0015C0                       3999 to: ; { var_addr -- var_addr limit step }
      0015C0 72 04 00 23 03   [ 2] 4000 	btjt flags,#FLOOP,1$
      0015C5 CC 07 95         [ 2] 4001 	jp syntax_error
      0015C8 CD 10 CB         [ 4] 4002 1$: call relation  
      0015CB A1 84            [ 1] 4003 	cp a,#TK_INTGR 
      0015CD 27 03            [ 1] 4004 	jreq 2$ 
      0015CF CC 07 95         [ 2] 4005 	jp syntax_error
      0015D2 1F 05            [ 2] 4006 2$: ldw (LIMIT,sp),x
                                   4007 ;	ldw x,in.w 
      0015D4 CD 08 87         [ 4] 4008 	call next_token
      0015D7 A1 00            [ 1] 4009 	cp a,#TK_NONE  
      0015D9 27 0E            [ 1] 4010 	jreq 4$ 
      0015DB A1 80            [ 1] 4011 	cp a,#TK_CMD
      0015DD 26 05            [ 1] 4012 	jrne 3$
      0015DF A3 15 F0         [ 2] 4013 	cpw x,#step 
      0015E2 27 0C            [ 1] 4014 	jreq step
      0015E4                       4015 3$:	
      0015E4                       4016 	_unget_token   	 
      0015E4 55 00 02 00 01   [ 1]    1     mov in,in.saved
      0015E9                       4017 4$:	
      0015E9 AE 00 01         [ 2] 4018 	ldw x,#1   ; default step  
      0015EC 1F 03            [ 2] 4019 	ldw (FSTEP,sp),x 
      0015EE 20 14            [ 2] 4020 	jra store_loop_addr 
                                   4021 
                                   4022 
                                   4023 ;----------------------------------
                                   4024 ; BASIC: STEP expr 
                                   4025 ; optional third par of FOR loop
                                   4026 ; initialization. 	
                                   4027 ;------------------------------------
      0015F0                       4028 step: ; {var limit -- var limit step}
      0015F0 72 04 00 23 03   [ 2] 4029 	btjt flags,#FLOOP,1$
      0015F5 CC 07 95         [ 2] 4030 	jp syntax_error
      0015F8 CD 10 CB         [ 4] 4031 1$: call relation
      0015FB A1 84            [ 1] 4032 	cp a,#TK_INTGR
      0015FD 27 03            [ 1] 4033 	jreq 2$
      0015FF CC 07 95         [ 2] 4034 	jp syntax_error
      001602 1F 03            [ 2] 4035 2$:	ldw (FSTEP,sp),x ; step
                                   4036 ; leave loop back entry point on cstack 
                                   4037 ; cstack is 1 call deep from interpreter
      001604                       4038 store_loop_addr:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001604 CE 00 04         [ 2] 4039 	ldw x,basicptr  
      001607 1F 0B            [ 2] 4040 	ldw (BPTR,sp),x 
      001609 CE 00 00         [ 2] 4041 	ldw x,in.w 
      00160C 1F 09            [ 2] 4042 	ldw (INW,sp),x   
      00160E 72 15 00 23      [ 1] 4043 	bres flags,#FLOOP 
      001612 72 5C 00 20      [ 1] 4044 	inc loop_depth  
      001616 81               [ 4] 4045 	ret 
                                   4046 
                                   4047 ;--------------------------------
                                   4048 ; BASIC: NEXT var 
                                   4049 ; FOR loop control 
                                   4050 ; increment variable with step 
                                   4051 ; and compare with limit 
                                   4052 ; loop if threshold not crossed.
                                   4053 ; else stack. 
                                   4054 ; and decrement 'loop_depth' 
                                   4055 ;--------------------------------
      001617                       4056 next: ; {var limit step retl1 -- [var limit step ] }
      001617 72 5D 00 20      [ 1] 4057 	tnz loop_depth 
      00161B 26 03            [ 1] 4058 	jrne 1$ 
      00161D CC 07 95         [ 2] 4059 	jp syntax_error 
      001620                       4060 1$: 
      001620 A6 85            [ 1] 4061 	ld a,#TK_VAR 
      001622 CD 0F 7C         [ 4] 4062 	call expect
                                   4063 ; check for good variable after NEXT 	 
      001625 13 07            [ 2] 4064 	cpw x,(CVAR,sp)
      001627 27 03            [ 1] 4065 	jreq 2$  
      001629 CC 07 95         [ 2] 4066 	jp syntax_error ; not the good one 
      00162C                       4067 2$: ; increment variable 
      00162C FE               [ 2] 4068 	ldw x,(x)  ; get var value 
      00162D 72 FB 03         [ 2] 4069 	addw x,(FSTEP,sp) ; var+step 
      001630 16 07            [ 2] 4070 	ldw y,(CVAR,sp)
      001632 90 FF            [ 2] 4071 	ldw (y),x ; save var new value 
                                   4072 ; check sign of STEP  
      001634 A6 80            [ 1] 4073 	ld a,#0x80
      001636 15 03            [ 1] 4074 	bcp a,(FSTEP,sp)
      001638 2A 06            [ 1] 4075 	jrpl 4$
                                   4076 ;negative step 
      00163A 13 05            [ 2] 4077 	cpw x,(LIMIT,sp)
      00163C 2F 1B            [ 1] 4078 	jrslt loop_done
      00163E 20 04            [ 2] 4079 	jra loop_back 
      001640                       4080 4$: ; positive step
      001640 13 05            [ 2] 4081 	cpw x,(LIMIT,sp)
      001642 2C 15            [ 1] 4082 	jrsgt loop_done
      001644                       4083 loop_back:
      001644 1E 0B            [ 2] 4084 	ldw x,(BPTR,sp)
      001646 CF 00 04         [ 2] 4085 	ldw basicptr,x 
      001649 72 01 00 23 05   [ 2] 4086 	btjf flags,#FRUN,1$ 
      00164E E6 02            [ 1] 4087 	ld a,(2,x)
      001650 C7 00 03         [ 1] 4088 	ld count,a
      001653 1E 09            [ 2] 4089 1$:	ldw x,(INW,sp)
      001655 CF 00 00         [ 2] 4090 	ldw in.w,x 
      001658 81               [ 4] 4091 	ret 
      001659                       4092 loop_done:
                                   4093 	; remove loop data from stack  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001659 85               [ 2] 4094 	popw x
      00165A                       4095 	_drop VSIZE 
      00165A 5B 0A            [ 2]    1     addw sp,#VSIZE 
      00165C 72 5A 00 20      [ 1] 4096 	dec loop_depth 
                                   4097 ;	pushw x 
                                   4098 ;	ret 
      001660 FC               [ 2] 4099 	jp (x)
                                   4100 
                                   4101 ;----------------------------
                                   4102 ; called by goto/gosub
                                   4103 ; to get target line number 
                                   4104 ;---------------------------
      001661                       4105 get_target_line:
      001661 CD 10 CB         [ 4] 4106 	call relation 
      001664 A1 84            [ 1] 4107 	cp a,#TK_INTGR
      001666 27 03            [ 1] 4108 	jreq 1$
      001668 CC 07 95         [ 2] 4109 	jp syntax_error
      00166B CD 03 24         [ 4] 4110 1$:	call search_lineno  
      00166E 5D               [ 2] 4111 	tnzw x 
      00166F 26 05            [ 1] 4112 	jrne 2$ 
      001671 A6 05            [ 1] 4113 	ld a,#ERR_NO_LINE 
      001673 CC 07 97         [ 2] 4114 	jp tb_error 
      001676 81               [ 4] 4115 2$:	ret 
                                   4116 
                                   4117 ;------------------------
                                   4118 ; BASIC: GOTO line# 
                                   4119 ; jump to line# 
                                   4120 ; here cstack is 2 call deep from interpreter 
                                   4121 ;------------------------
      001677                       4122 goto:
      001677 72 00 00 23 06   [ 2] 4123 	btjt flags,#FRUN,0$ 
      00167C A6 06            [ 1] 4124 	ld a,#ERR_RUN_ONLY
      00167E CC 07 97         [ 2] 4125 	jp tb_error 
      001681 81               [ 4] 4126 	ret 
      001682 CD 16 61         [ 4] 4127 0$:	call get_target_line
      001685                       4128 jp_to_target:
      001685 CF 00 04         [ 2] 4129 	ldw basicptr,x 
      001688 E6 02            [ 1] 4130 	ld a,(2,x)
      00168A C7 00 03         [ 1] 4131 	ld count,a 
      00168D 35 03 00 01      [ 1] 4132 	mov in,#3 
      001691 81               [ 4] 4133 	ret 
                                   4134 
                                   4135 
                                   4136 ;--------------------
                                   4137 ; BASIC: GOSUB line#
                                   4138 ; basic subroutine call
                                   4139 ; actual line# and basicptr 
                                   4140 ; are saved on cstack
                                   4141 ; here cstack is 2 call deep from interpreter 
                                   4142 ;--------------------
                           000003  4143 	RET_ADDR=3
                           000005  4144 	RET_INW=5
                           000004  4145 	VSIZE=4  
      001692                       4146 gosub:
      001692 72 00 00 23 06   [ 2] 4147 	btjt flags,#FRUN,0$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001697 A6 06            [ 1] 4148 	ld a,#ERR_RUN_ONLY
      001699 CC 07 97         [ 2] 4149 	jp tb_error 
      00169C 81               [ 4] 4150 	ret 
      00169D 85               [ 2] 4151 0$:	popw x 
      00169E                       4152 	_vars VSIZE  
      00169E 52 04            [ 2]    1     sub sp,#VSIZE 
      0016A0 89               [ 2] 4153 	pushw x 
      0016A1 CE 00 04         [ 2] 4154 	ldw x,basicptr
      0016A4 1F 03            [ 2] 4155 	ldw (RET_ADDR,sp),x 
      0016A6 CD 16 61         [ 4] 4156 	call get_target_line  
      0016A9 89               [ 2] 4157 	pushw x 
      0016AA CE 00 00         [ 2] 4158 	ldw x,in.w 
      0016AD 1F 07            [ 2] 4159 	ldw (RET_INW+2,sp),x
      0016AF 85               [ 2] 4160 	popw x 
      0016B0 20 D3            [ 2] 4161 	jra jp_to_target
                                   4162 
                                   4163 ;------------------------
                                   4164 ; BASIC: RETURN 
                                   4165 ; exit from a subroutine 
                                   4166 ; 
                                   4167 ;------------------------
      0016B2                       4168 return:
      0016B2 72 00 00 23 05   [ 2] 4169 	btjt flags,#FRUN,0$ 
      0016B7 A6 06            [ 1] 4170 	ld a,#ERR_RUN_ONLY
      0016B9 CC 07 97         [ 2] 4171 	jp tb_error 
      0016BC                       4172 0$:	
      0016BC 1E 03            [ 2] 4173 	ldw x,(RET_ADDR,sp) 
      0016BE CF 00 04         [ 2] 4174 	ldw basicptr,x
      0016C1 E6 02            [ 1] 4175 	ld a,(2,x)
      0016C3 C7 00 03         [ 1] 4176 	ld count,a  
      0016C6 1E 05            [ 2] 4177 	ldw x,(RET_INW,sp)
      0016C8 CF 00 00         [ 2] 4178 	ldw in.w,x 
      0016CB 85               [ 2] 4179 	popw x 
      0016CC                       4180 	_drop VSIZE 
      0016CC 5B 04            [ 2]    1     addw sp,#VSIZE 
      0016CE 89               [ 2] 4181 	pushw x
      0016CF 81               [ 4] 4182 	ret  
                                   4183 
                                   4184 
                                   4185 ;----------------------------------
                                   4186 ; BASIC: RUN
                                   4187 ; run BASIC program in RAM
                                   4188 ;----------------------------------- 
      0016D0                       4189 run: 
      0016D0 72 01 00 23 02   [ 2] 4190 	btjf flags,#FRUN,0$  
      0016D5 4F               [ 1] 4191 	clr a 
      0016D6 81               [ 4] 4192 	ret
      0016D7                       4193 0$: 
      0016D7 72 09 00 23 12   [ 2] 4194 	btjf flags,#FBREAK,1$
      0016DC                       4195 	_drop 2 
      0016DC 5B 02            [ 2]    1     addw sp,#2 
      0016DE CD 14 48         [ 4] 4196 	call rest_context
      0016E1                       4197 	_drop CTXT_SIZE 
      0016E1 5B 04            [ 2]    1     addw sp,#CTXT_SIZE 
      0016E3 72 19 00 23      [ 1] 4198 	bres flags,#FBREAK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0016E7 72 10 00 23      [ 1] 4199 	bset flags,#FRUN 
      0016EB CC 08 3B         [ 2] 4200 	jp interpreter 
      0016EE CE 00 1C         [ 2] 4201 1$:	ldw x,txtbgn
      0016F1 C3 00 1E         [ 2] 4202 	cpw x,txtend 
      0016F4 2B 05            [ 1] 4203 	jrmi run_it 
      0016F6 A6 0D            [ 1] 4204 	ld a,#ERR_NO_PROG
      0016F8 CC 07 97         [ 2] 4205 	jp tb_error
                                   4206 
      0016FB                       4207 run_it:	 
      0016FB CD 11 77         [ 4] 4208     call ubound 
      0016FE                       4209 	_drop 2 ; drop return address 
      0016FE 5B 02            [ 2]    1     addw sp,#2 
                                   4210 ; clear data pointer 
      001700 5F               [ 1] 4211 	clrw x 
      001701 CF 00 06         [ 2] 4212 	ldw data_ptr,x 
      001704 72 5F 00 08      [ 1] 4213 	clr data_ofs 
      001708 72 5F 00 09      [ 1] 4214 	clr data_len 
                                   4215 ; initialize BASIC pointer 
      00170C CE 00 1C         [ 2] 4216 	ldw x,txtbgn 
      00170F CF 00 04         [ 2] 4217 	ldw basicptr,x 
      001712 E6 02            [ 1] 4218 	ld a,(2,x)
      001714 C7 00 03         [ 1] 4219 	ld count,a
      001717 35 03 00 01      [ 1] 4220 	mov in,#3	
      00171B 72 10 00 23      [ 1] 4221 	bset flags,#FRUN 
      00171F CC 08 3B         [ 2] 4222 	jp interpreter 
                                   4223 
                                   4224 
                                   4225 ;----------------------
                                   4226 ; BASIC: END
                                   4227 ; end running program
                                   4228 ;---------------------- 
      001722                       4229 cmd_end: 
                                   4230 ; clean stack 
      001722 AE 17 FF         [ 2] 4231 	ldw x,#STACK_EMPTY
      001725 94               [ 1] 4232 	ldw sp,x 
      001726 CC 08 1C         [ 2] 4233 	jp warm_start
                                   4234 
                                   4235 
                                   4236 ;-----------------------
                                   4237 ; BASIC: TONE expr1,expr2
                                   4238 ; used TIMER2 channel 1
                                   4239 ; to produce a tone 
                                   4240 ; arguments:
                                   4241 ;    expr1   frequency 
                                   4242 ;    expr2   duration msec.
                                   4243 ;---------------------------
      001729                       4244 tone:
      001729 CD 0F 8E         [ 4] 4245 	call arg_list 
      00172C A1 02            [ 1] 4246 	cp a,#2 
      00172E 27 03            [ 1] 4247 	jreq 1$
      001730 CC 07 95         [ 2] 4248 	jp syntax_error 
      001733                       4249 1$: 
      001733 85               [ 2] 4250 	popw x ; duration
      001734 90 85            [ 2] 4251 	popw y ; frequency 
      001736                       4252 beep:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      001736 89               [ 2] 4253 	pushw x 
      001737 AE F4 24         [ 2] 4254 	ldw x,#TIM2_CLK_FREQ
      00173A 65               [ 2] 4255 	divw x,y 
                                   4256 ; round to nearest integer 
      00173B 90 A3 7A 12      [ 2] 4257 	cpw y,#TIM2_CLK_FREQ/2
      00173F 2B 01            [ 1] 4258 	jrmi 2$
      001741 5C               [ 2] 4259 	incw x 
      001742                       4260 2$:	 
      001742 9E               [ 1] 4261 	ld a,xh 
      001743 C7 53 0D         [ 1] 4262 	ld TIM2_ARRH,a 
      001746 9F               [ 1] 4263 	ld a,xl 
      001747 C7 53 0E         [ 1] 4264 	ld TIM2_ARRL,a 
                                   4265 ; 50% duty cycle 
      00174A 8C               [ 1] 4266 	ccf 
      00174B 56               [ 2] 4267 	rrcw x 
      00174C 9E               [ 1] 4268 	ld a,xh 
      00174D C7 53 0F         [ 1] 4269 	ld TIM2_CCR1H,a 
      001750 9F               [ 1] 4270 	ld a,xl
      001751 C7 53 10         [ 1] 4271 	ld TIM2_CCR1L,a
      001754 72 10 53 08      [ 1] 4272 	bset TIM2_CCER1,#TIM2_CCER1_CC1E
      001758 72 10 53 00      [ 1] 4273 	bset TIM2_CR1,#TIM2_CR1_CEN
      00175C 72 10 53 04      [ 1] 4274 	bset TIM2_EGR,#TIM2_EGR_UG
      001760 85               [ 2] 4275 	popw x 
      001761 CF 00 10         [ 2] 4276 	ldw timer,x 
      001764 CE 00 10         [ 2] 4277 3$: ldw x,timer 	
      001767 26 FB            [ 1] 4278 	jrne 3$ 
      001769 72 11 53 08      [ 1] 4279 	bres TIM2_CCER1,#TIM2_CCER1_CC1E
      00176D 72 11 53 00      [ 1] 4280 	bres TIM2_CR1,#TIM2_CR1_CEN 
      001771 81               [ 4] 4281 	ret 
                                   4282 
                                   4283 ;-------------------------------
                                   4284 ; BASIC: ADCON 0|1 [,divisor]  
                                   4285 ; disable/enanble ADC 
                                   4286 ;-------------------------------
                           000003  4287 	ONOFF=3 
                           000001  4288 	DIVSOR=1
                           000004  4289 	VSIZE=4 
      001772                       4290 power_adc:
      001772 CD 0F 8E         [ 4] 4291 	call arg_list 
      001775 A1 02            [ 1] 4292 	cp a,#2	
      001777 27 0B            [ 1] 4293 	jreq 1$
      001779 A1 01            [ 1] 4294 	cp a,#1 
      00177B 27 03            [ 1] 4295 	jreq 0$ 
      00177D CC 07 95         [ 2] 4296 	jp syntax_error 
      001780 AE 00 00         [ 2] 4297 0$: ldw x,#0
      001783 89               [ 2] 4298 	pushw x  ; divisor 
      001784 1E 03            [ 2] 4299 1$: ldw x,(ONOFF,sp)
      001786 5D               [ 2] 4300 	tnzw x 
      001787 27 1A            [ 1] 4301 	jreq 2$ 
      001789 1E 01            [ 2] 4302 	ldw x,(DIVSOR,sp) ; divisor 
      00178B 9F               [ 1] 4303 	ld a,xl
      00178C A4 07            [ 1] 4304 	and a,#7
      00178E 4E               [ 1] 4305 	swap a 
      00178F C7 54 01         [ 1] 4306 	ld ADC_CR1,a
      001792 72 16 50 CA      [ 1] 4307 	bset CLK_PCKENR2,#CLK_PCKENR2_ADC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001796 72 10 54 01      [ 1] 4308 	bset ADC_CR1,#ADC_CR1_ADON 
      00179A                       4309 	_usec_dly 7 
      00179A AE 00 1B         [ 2]    1     ldw x,#(16*7-2)/4
      00179D 5A               [ 2]    2     decw x
      00179E 9D               [ 1]    3     nop 
      00179F 26 FA            [ 1]    4     jrne .-4
      0017A1 20 08            [ 2] 4310 	jra 3$
      0017A3 72 11 54 01      [ 1] 4311 2$: bres ADC_CR1,#ADC_CR1_ADON
      0017A7 72 17 50 CA      [ 1] 4312 	bres CLK_PCKENR2,#CLK_PCKENR2_ADC
      0017AB                       4313 3$:	_drop VSIZE 
      0017AB 5B 04            [ 2]    1     addw sp,#VSIZE 
      0017AD 81               [ 4] 4314 	ret
                                   4315 
                                   4316 ;-----------------------------
                                   4317 ; BASIC: ADCREAD (channel)
                                   4318 ; read adc channel {0..5}
                                   4319 ; output:
                                   4320 ;   A 		TK_INTGR 
                                   4321 ;   X 		value 
                                   4322 ;-----------------------------
      0017AE                       4323 analog_read:
      0017AE CD 0F 89         [ 4] 4324 	call func_args 
      0017B1 A1 01            [ 1] 4325 	cp a,#1 
      0017B3 27 03            [ 1] 4326 	jreq 1$
      0017B5 CC 07 95         [ 2] 4327 	jp syntax_error
      0017B8 85               [ 2] 4328 1$: popw x 
      0017B9 A3 00 05         [ 2] 4329 	cpw x,#5 
      0017BC 23 05            [ 2] 4330 	jrule 2$
      0017BE A6 0A            [ 1] 4331 	ld a,#ERR_BAD_VALUE
      0017C0 CC 07 97         [ 2] 4332 	jp tb_error 
      0017C3 9F               [ 1] 4333 2$: ld a,xl
      0017C4 C7 00 0D         [ 1] 4334 	ld acc8,a 
      0017C7 A6 05            [ 1] 4335 	ld a,#5
      0017C9 C0 00 0D         [ 1] 4336 	sub a,acc8 
      0017CC C7 54 00         [ 1] 4337 	ld ADC_CSR,a
      0017CF 72 16 54 02      [ 1] 4338 	bset ADC_CR2,#ADC_CR2_ALIGN
      0017D3 72 10 54 01      [ 1] 4339 	bset ADC_CR1,#ADC_CR1_ADON
      0017D7 72 0F 54 00 FB   [ 2] 4340 	btjf ADC_CSR,#ADC_CSR_EOC,.
      0017DC CE 54 04         [ 2] 4341 	ldw x,ADC_DRH
      0017DF A6 84            [ 1] 4342 	ld a,#TK_INTGR
      0017E1 81               [ 4] 4343 	ret 
                                   4344 
                                   4345 ;-----------------------
                                   4346 ; BASIC: DREAD(pin)
                                   4347 ; Arduino pins 
                                   4348 ; read state of a digital pin 
                                   4349 ; pin# {0..15}
                                   4350 ; output:
                                   4351 ;    A 		TK_INTGR
                                   4352 ;    X      0|1 
                                   4353 ;-------------------------
                           000001  4354 	PINNO=1
                           000001  4355 	VSIZE=1
      0017E2                       4356 digital_read:
      0017E2                       4357 	_vars VSIZE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0017E2 52 01            [ 2]    1     sub sp,#VSIZE 
      0017E4 CD 0F 89         [ 4] 4358 	call func_args
      0017E7 A1 01            [ 1] 4359 	cp a,#1
      0017E9 27 03            [ 1] 4360 	jreq 1$
      0017EB CC 07 95         [ 2] 4361 	jp syntax_error
      0017EE 85               [ 2] 4362 1$: popw x 
      0017EF A3 00 0F         [ 2] 4363 	cpw x,#15 
      0017F2 23 05            [ 2] 4364 	jrule 2$
      0017F4 A6 0A            [ 1] 4365 	ld a,#ERR_BAD_VALUE
      0017F6 CC 07 97         [ 2] 4366 	jp tb_error 
      0017F9 CD 1D C7         [ 4] 4367 2$:	call select_pin 
      0017FC 6B 01            [ 1] 4368 	ld (PINNO,sp),a
      0017FE E6 01            [ 1] 4369 	ld a,(GPIO_IDR,x)
      001800 0D 01            [ 1] 4370 	tnz (PINNO,sp)
      001802 27 05            [ 1] 4371 	jreq 8$
      001804 44               [ 1] 4372 3$: srl a 
      001805 0A 01            [ 1] 4373 	dec (PINNO,sp)
      001807 26 FB            [ 1] 4374 	jrne 3$ 
      001809 A4 01            [ 1] 4375 8$: and a,#1 
      00180B 5F               [ 1] 4376 	clrw x 
      00180C 97               [ 1] 4377 	ld xl,a 
      00180D A6 84            [ 1] 4378 	ld a,#TK_INTGR
      00180F                       4379 	_drop VSIZE
      00180F 5B 01            [ 2]    1     addw sp,#VSIZE 
      001811 81               [ 4] 4380 	ret
                                   4381 
                                   4382 ;-----------------------
                                   4383 ; BASIC: DWRITE pin,0|1
                                   4384 ; Arduino pins 
                                   4385 ; write to a digital pin 
                                   4386 ; pin# {0..15}
                                   4387 ; output:
                                   4388 ;    A 		TK_INTGR
                                   4389 ;    X      0|1 
                                   4390 ;-------------------------
                           000001  4391 	PINNO=1
                           000002  4392 	PINVAL=2
                           000002  4393 	VSIZE=2
      001812                       4394 digital_write:
      001812                       4395 	_vars VSIZE 
      001812 52 02            [ 2]    1     sub sp,#VSIZE 
      001814 CD 0F 8E         [ 4] 4396 	call arg_list  
      001817 A1 02            [ 1] 4397 	cp a,#2 
      001819 27 03            [ 1] 4398 	jreq 1$
      00181B CC 07 95         [ 2] 4399 	jp syntax_error
      00181E 85               [ 2] 4400 1$: popw x 
      00181F 9F               [ 1] 4401 	ld a,xl 
      001820 6B 02            [ 1] 4402 	ld (PINVAL,sp),a
      001822 85               [ 2] 4403 	popw x 
      001823 A3 00 0F         [ 2] 4404 	cpw x,#15 
      001826 23 05            [ 2] 4405 	jrule 2$
      001828 A6 0A            [ 1] 4406 	ld a,#ERR_BAD_VALUE
      00182A CC 07 97         [ 2] 4407 	jp tb_error 
      00182D CD 1D C7         [ 4] 4408 2$:	call select_pin 
      001830 6B 01            [ 1] 4409 	ld (PINNO,sp),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001832 A6 01            [ 1] 4410 	ld a,#1
      001834 0D 01            [ 1] 4411 	tnz (PINNO,sp)
      001836 27 05            [ 1] 4412 	jreq 4$
      001838 48               [ 1] 4413 3$: sll a
      001839 0A 01            [ 1] 4414 	dec (PINNO,sp)
      00183B 26 FB            [ 1] 4415 	jrne 3$
      00183D 0D 02            [ 1] 4416 4$: tnz (PINVAL,sp)
      00183F 26 05            [ 1] 4417 	jrne 5$
      001841 43               [ 1] 4418 	cpl a 
      001842 E4 00            [ 1] 4419 	and a,(GPIO_ODR,x)
      001844 20 02            [ 2] 4420 	jra 8$
      001846 EA 00            [ 1] 4421 5$: or a,(GPIO_ODR,x)
      001848 E7 00            [ 1] 4422 8$: ld (GPIO_ODR,x),a 
      00184A                       4423 	_drop VSIZE 
      00184A 5B 02            [ 2]    1     addw sp,#VSIZE 
      00184C 81               [ 4] 4424 	ret
                                   4425 
                                   4426 
                                   4427 ;-----------------------
                                   4428 ; BASIC: STOP
                                   4429 ; stop progam execution  
                                   4430 ; without resetting pointers 
                                   4431 ; the program is resumed
                                   4432 ; with RUN 
                                   4433 ;-------------------------
      00184D                       4434 stop:
      00184D 72 00 00 23 02   [ 2] 4435 	btjt flags,#FRUN,2$
      001852 4F               [ 1] 4436 	clr a
      001853 81               [ 4] 4437 	ret 
      001854                       4438 2$:	 
                                   4439 ; create space on cstack to save context 
      001854 AE 18 7B         [ 2] 4440 	ldw x,#break_point 
      001857 CD 01 D7         [ 4] 4441 	call puts 
      00185A                       4442 	_drop 2 ;drop return address 
      00185A 5B 02            [ 2]    1     addw sp,#2 
      00185C                       4443 	_vars CTXT_SIZE ; context size 
      00185C 52 04            [ 2]    1     sub sp,#CTXT_SIZE 
      00185E CD 14 38         [ 4] 4444 	call save_context 
      001861 AE 16 90         [ 2] 4445 	ldw x,#tib 
      001864 CF 00 04         [ 2] 4446 	ldw basicptr,x
      001867 7F               [ 1] 4447 	clr (x)
      001868 72 5F 00 03      [ 1] 4448 	clr count  
      00186C 5F               [ 1] 4449 	clrw x 
      00186D CF 00 00         [ 2] 4450 	ldw in.w,x
      001870 72 11 00 23      [ 1] 4451 	bres flags,#FRUN 
      001874 72 18 00 23      [ 1] 4452 	bset flags,#FBREAK
      001878 CC 08 3B         [ 2] 4453 	jp interpreter 
      00187B 0A 62 72 65 61 6B 20  4454 break_point: .asciz "\nbreak point, RUN to resume.\n"
             70 6F 69 6E 74 2C 20
             52 55 4E 20 74 6F 20
             72 65 73 75 6D 65 2E
             0A 00
                                   4455 
                                   4456 ;-----------------------
                                   4457 ; BASIC: NEW
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4458 ; from command line only 
                                   4459 ; free program memory
                                   4460 ; and clear variables 
                                   4461 ;------------------------
      001899                       4462 new: 
      001899 72 01 00 23 01   [ 2] 4463 	btjf flags,#FRUN,0$ 
      00189E 81               [ 4] 4464 	ret 
      00189F                       4465 0$:	
      00189F CD 06 01         [ 4] 4466 	call clear_basic 
      0018A2 81               [ 4] 4467 	ret 
                                   4468 	 
                                   4469 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4470 ;  file system routines
                                   4471 ;  MCU flash memory from
                                   4472 ;  0x10000-0x27fff is 
                                   4473 ;  used to store BASIC 
                                   4474 ;  program files. 
                                   4475 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4476 
                                   4477 ;--------------------
                                   4478 ; input:
                                   4479 ;   X     increment 
                                   4480 ; output:
                                   4481 ;   farptr  incremented 
                                   4482 ;---------------------
      0018A3                       4483 incr_farptr:
      0018A3 72 BB 00 17      [ 2] 4484 	addw x,farptr+1 
      0018A7 24 04            [ 1] 4485 	jrnc 1$
      0018A9 72 5C 00 16      [ 1] 4486 	inc farptr 
      0018AD CF 00 17         [ 2] 4487 1$:	ldw farptr+1,x  
      0018B0 81               [ 4] 4488 	ret 
                                   4489 
                                   4490 ;------------------------------
                                   4491 ; extended flash memory used as FLASH_DRIVE 
                                   4492 ; seek end of used flash drive   
                                   4493 ; starting at 0x10000 address.
                                   4494 ; 4 consecutives 0 bytes signal free space. 
                                   4495 ; input:
                                   4496 ;	none
                                   4497 ; output:
                                   4498 ;   ffree     free_addr| 0 if memory full.
                                   4499 ;------------------------------
      0018B1                       4500 seek_fdrive:
                                   4501 ; start scan at 0x10000 address 
      0018B1 A6 01            [ 1] 4502 	ld a,#1
      0018B3 C7 00 16         [ 1] 4503 	ld farptr,a 
      0018B6 5F               [ 1] 4504 	clrw x 
      0018B7 CF 00 17         [ 2] 4505 	ldw farptr+1,x 
      0018BA                       4506 1$:
      0018BA AE 00 03         [ 2] 4507 	ldw x,#3  
      0018BD 92 AF 00 16      [ 5] 4508 2$:	ldf a,([farptr],x) 
      0018C1 26 05            [ 1] 4509 	jrne 3$
      0018C3 5A               [ 2] 4510 	decw x
      0018C4 2A F7            [ 1] 4511 	jrpl 2$
      0018C6 20 19            [ 2] 4512 	jra 4$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      0018C8 5C               [ 2] 4513 3$:	incw x 
      0018C9 CD 18 A3         [ 4] 4514 	call incr_farptr
      0018CC AE 02 7F         [ 2] 4515 	ldw x,#0x27f 
      0018CF C3 00 16         [ 2] 4516 	cpw x,farptr
      0018D2 2A E6            [ 1] 4517 	jrpl 1$
                                   4518 ; drive full 
      0018D4 72 5F 00 19      [ 1] 4519 	clr ffree 
      0018D8 72 5F 00 1A      [ 1] 4520 	clr ffree+1 
      0018DC 72 5F 00 1B      [ 1] 4521 	clr ffree+2 
      0018E0 81               [ 4] 4522 	ret
      0018E1                       4523 4$: ; copy farptr to ffree	 
      0018E1 CE 00 16         [ 2] 4524 	ldw x,farptr 
      0018E4 C6 00 18         [ 1] 4525 	ld a,farptr+2 
      0018E7 CF 00 19         [ 2] 4526 	ldw ffree,x 
      0018EA C7 00 1B         [ 1] 4527 	ld ffree+2,a  
      0018ED 81               [ 4] 4528 	ret 
                                   4529 
                                   4530 ;-----------------------
                                   4531 ; compare file name 
                                   4532 ; with name pointed by Y  
                                   4533 ; input:
                                   4534 ;   farptr   file name 
                                   4535 ;   Y        target name 
                                   4536 ; output:
                                   4537 ;   farptr 	 at file_name
                                   4538 ;   X 		 farptr[x] point at size field  
                                   4539 ;   Carry    0|1 no match|match  
                                   4540 ;----------------------
      0018EE                       4541 cmp_name:
      0018EE 5F               [ 1] 4542 	clrw x
      0018EF 92 AF 00 16      [ 5] 4543 1$:	ldf a,([farptr],x)
      0018F3 90 F1            [ 1] 4544 	cp a,(y)
      0018F5 26 08            [ 1] 4545 	jrne 4$
      0018F7 4D               [ 1] 4546 	tnz a 
      0018F8 27 12            [ 1] 4547 	jreq 9$ 
      0018FA 5C               [ 2] 4548     incw x 
      0018FB 90 5C            [ 2] 4549 	incw y 
      0018FD 20 F0            [ 2] 4550 	jra 1$
      0018FF                       4551 4$: ;no match 
      0018FF 4D               [ 1] 4552 	tnz a 
      001900 27 07            [ 1] 4553 	jreq 5$
      001902 5C               [ 2] 4554 	incw x 
      001903 92 AF 00 16      [ 5] 4555 	ldf a,([farptr],x)
      001907 20 F6            [ 2] 4556 	jra 4$  
      001909 5C               [ 2] 4557 5$:	incw x ; farptr[x] point at 'size' field 
      00190A 98               [ 1] 4558 	rcf 
      00190B 81               [ 4] 4559 	ret
      00190C                       4560 9$: ; match  
      00190C 5C               [ 2] 4561 	incw x  ; farptr[x] at 'size' field 
      00190D 99               [ 1] 4562 	scf 
      00190E 81               [ 4] 4563 	ret 
                                   4564 
                                   4565 ;-----------------------
                                   4566 ; search file in 
                                   4567 ; flash memory 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4568 ; input:
                                   4569 ;   Y       file name  
                                   4570 ; output:
                                   4571 ;   farptr  addr at name|0
                                   4572 ;-----------------------
                           000001  4573 	FSIZE=1
                           000003  4574 	YSAVE=3
                           000004  4575 	VSIZE=4 
      00190F                       4576 search_file: 
      00190F                       4577 	_vars VSIZE
      00190F 52 04            [ 2]    1     sub sp,#VSIZE 
      001911 17 03            [ 2] 4578 	ldw (YSAVE,sp),y  
      001913 5F               [ 1] 4579 	clrw x 
      001914 CF 00 17         [ 2] 4580 	ldw farptr+1,x 
      001917 35 01 00 16      [ 1] 4581 	mov farptr,#1
      00191B                       4582 1$:	
                                   4583 ; check if farptr is after any file 
                                   4584 ; if  0 then so.
      00191B 92 BC 00 16      [ 5] 4585 	ldf a,[farptr]
      00191F 27 25            [ 1] 4586 	jreq 6$
      001921 5F               [ 1] 4587 2$: clrw x 	
      001922 16 03            [ 2] 4588 	ldw y,(YSAVE,sp) 
      001924 CD 18 EE         [ 4] 4589 	call cmp_name
      001927 25 2D            [ 1] 4590 	jrc 9$
      001929 92 AF 00 16      [ 5] 4591 	ldf a,([farptr],x)
      00192D 6B 01            [ 1] 4592 	ld (FSIZE,sp),a 
      00192F 5C               [ 2] 4593 	incw x 
      001930 92 AF 00 16      [ 5] 4594 	ldf a,([farptr],x)
      001934 6B 02            [ 1] 4595 	ld (FSIZE+1,sp),a 
      001936 5C               [ 2] 4596 	incw x 
      001937 72 FB 01         [ 2] 4597 	addw x,(FSIZE,sp) ; count to skip 
      00193A 5C               [ 2] 4598 	incw x ; skip over EOF marker 
      00193B CD 18 A3         [ 4] 4599 	call incr_farptr ; now at next file 'name_field'
      00193E AE 02 80         [ 2] 4600 	ldw x,#0x280
      001941 C3 00 16         [ 2] 4601 	cpw x,farptr 
      001944 2A D5            [ 1] 4602 	jrpl 1$
      001946                       4603 6$: ; file not found 
      001946 72 5F 00 16      [ 1] 4604 	clr farptr
      00194A 72 5F 00 17      [ 1] 4605 	clr farptr+1 
      00194E 72 5F 00 18      [ 1] 4606 	clr farptr+2 
      001952                       4607 	_drop VSIZE 
      001952 5B 04            [ 2]    1     addw sp,#VSIZE 
      001954 98               [ 1] 4608 	rcf
      001955 81               [ 4] 4609 	ret
      001956                       4610 9$: ; file found  farptr[0] at 'name_field',farptr[x] at 'file_size' 
      001956                       4611 	_drop VSIZE 
      001956 5B 04            [ 2]    1     addw sp,#VSIZE 
      001958 99               [ 1] 4612 	scf 	
      001959 81               [ 4] 4613 	ret
                                   4614 
                                   4615 
                                   4616 ;--------------------------------
                                   4617 ; BASIC: SAVE "name" 
                                   4618 ; save text program in 
                                   4619 ; flash memory used as 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                   4620 ;--------------------------------
                           000001  4621 	BSIZE=1
                           000003  4622 	NAMEPTR=3
                           000004  4623 	VSIZE=4
      00195A                       4624 save:
      00195A 72 01 00 23 05   [ 2] 4625 	btjf flags,#FRUN,0$ 
      00195F A6 07            [ 1] 4626 	ld a,#ERR_CMD_ONLY 
      001961 CC 07 97         [ 2] 4627 	jp tb_error
      001964                       4628 0$:	 
      001964 CE 00 1E         [ 2] 4629 	ldw x,txtend 
      001967 72 B0 00 1C      [ 2] 4630 	subw x,txtbgn
      00196B 26 05            [ 1] 4631 	jrne 1$
                                   4632 ; nothing to save 
      00196D A6 0D            [ 1] 4633 	ld a,#ERR_NO_PROG
      00196F CC 07 97         [ 2] 4634 	jp tb_error 	
      001972                       4635 1$:	
      001972                       4636 	_vars VSIZE 
      001972 52 04            [ 2]    1     sub sp,#VSIZE 
      001974 1F 01            [ 2] 4637 	ldw (BSIZE,sp),x 
      001976 CD 08 87         [ 4] 4638 	call next_token	
      001979 A1 02            [ 1] 4639 	cp a,#TK_QSTR
      00197B 27 03            [ 1] 4640 	jreq 2$
      00197D CC 07 95         [ 2] 4641 	jp syntax_error
      001980                       4642 2$: 
      001980 1F 03            [ 2] 4643 	ldw (NAMEPTR,sp),x  
      001982 55 00 03 00 01   [ 1] 4644 	mov in,count 
                                   4645 ; check if enough free space 
      001987 CD 02 B6         [ 4] 4646 	call strlen 
      00198A 1C 00 03         [ 2] 4647 	addw x,#3 
      00198D 72 FB 01         [ 2] 4648 	addw x,(BSIZE,sp)
      001990 72 5D 00 19      [ 1] 4649 	tnz ffree 
      001994 26 0B            [ 1] 4650 	jrne 21$
      001996 72 B0 00 1A      [ 2] 4651 	subw x,ffree+1 
      00199A 23 05            [ 2] 4652 	jrule 21$
      00199C A6 0E            [ 1] 4653 	ld a,#ERR_NO_FSPACE  
      00199E CC 07 97         [ 2] 4654 	jp tb_error
      0019A1                       4655 21$: 
                                   4656 ; check for existing file of that name 
      0019A1 16 03            [ 2] 4657 	ldw y,(NAMEPTR,sp)	
      0019A3 CD 19 0F         [ 4] 4658 	call search_file 
      0019A6 24 05            [ 1] 4659 	jrnc 3$ 
      0019A8 A6 08            [ 1] 4660 	ld a,#ERR_DUPLICATE 
      0019AA CC 07 97         [ 2] 4661 	jp tb_error 
      0019AD                       4662 3$:	;** write file name to flash **
      0019AD CE 00 19         [ 2] 4663 	ldw x,ffree 
      0019B0 C6 00 1B         [ 1] 4664 	ld a,ffree+2 
      0019B3 CF 00 16         [ 2] 4665 	ldw farptr,x 
      0019B6 C7 00 18         [ 1] 4666 	ld farptr+2,a 
      0019B9 1E 03            [ 2] 4667 	ldw x,(NAMEPTR,sp)  
      0019BB CD 02 B6         [ 4] 4668 	call strlen 
      0019BE 5C               [ 2] 4669 	incw  x
      0019BF 1F 01            [ 2] 4670 	ldw (BSIZE,sp),x  
      0019C1 5F               [ 1] 4671 	clrw x   
      0019C2 16 03            [ 2] 4672 	ldw y,(NAMEPTR,sp)
      0019C4 CD 01 66         [ 4] 4673 	call write_block  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4674 ;** write file length after name **
      0019C7 CE 00 1E         [ 2] 4675 	ldw x,txtend 
      0019CA 72 B0 00 1C      [ 2] 4676 	subw x,txtbgn
      0019CE 1F 01            [ 2] 4677 	ldw (BSIZE,sp),x 
      0019D0 5F               [ 1] 4678 	clrw x 
      0019D1 7B 01            [ 1] 4679 	ld a,(BSIZE,sp)
      0019D3 CD 00 F1         [ 4] 4680 	call write_byte 
      0019D6 5C               [ 2] 4681 	incw x 
      0019D7 7B 02            [ 1] 4682 	ld a,(BSIZE+1,sp)
      0019D9 CD 00 F1         [ 4] 4683 	call write_byte
      0019DC 5C               [ 2] 4684 	incw x  
      0019DD CD 18 A3         [ 4] 4685 	call incr_farptr ; move farptr after SIZE field 
                                   4686 ;** write BASIC text **
                                   4687 ; copy BSIZE, stack:{... bsize -- ... bsize bsize }	
      0019E0 1E 01            [ 2] 4688 	ldw x,(BSIZE,sp)
      0019E2 89               [ 2] 4689 	pushw x ; write_block argument 
      0019E3 5F               [ 1] 4690 	clrw x 
      0019E4 90 CE 00 1C      [ 2] 4691 	ldw y,txtbgn  ; BASIC text to save 
      0019E8 CD 01 66         [ 4] 4692 	call write_block 
      0019EB                       4693 	_drop 2 ;  drop write_block argument  
      0019EB 5B 02            [ 2]    1     addw sp,#2 
                                   4694 ; write end of file marker 
      0019ED AE 00 01         [ 2] 4695 	ldw x,#1
      0019F0 A6 FF            [ 1] 4696 	ld a,#EOF  
      0019F2 CD 00 F1         [ 4] 4697 	call write_byte 
      0019F5 CD 18 A3         [ 4] 4698 	call incr_farptr
                                   4699 ; save farptr in ffree
      0019F8 CE 00 16         [ 2] 4700 	ldw x,farptr 
      0019FB C6 00 18         [ 1] 4701 	ld a,farptr+2 
      0019FE CF 00 19         [ 2] 4702 	ldw ffree,x 
      001A01 C7 00 1B         [ 1] 4703 	ld ffree+2,a
                                   4704 ;write 4 zero bytes as an end of all files marker 
      001A04 5F               [ 1] 4705     clrw x 
      001A05 4B 04            [ 1] 4706 	push #4 
      001A07                       4707 4$:
      001A07 4F               [ 1] 4708 	clr a 
      001A08 CD 00 F1         [ 4] 4709 	call write_byte 
      001A0B 5C               [ 2] 4710 	incw x 
      001A0C 0A 01            [ 1] 4711 	dec (1,sp)
      001A0E 26 F7            [ 1] 4712 	jrne 4$
      001A10 84               [ 1] 4713 5$: pop a 
                                   4714 ; display saved size  
      001A11 1E 01            [ 2] 4715 	ldw x,(BSIZE,sp) 
      001A13 CD 09 24         [ 4] 4716 	call print_int 
      001A16                       4717 	_drop VSIZE 
      001A16 5B 04            [ 2]    1     addw sp,#VSIZE 
      001A18 81               [ 4] 4718 	ret 
                                   4719 
                                   4720 ;----------------------
                                   4721 ; load file in RAM memory
                                   4722 ; input:
                                   4723 ;    farptr point at file size 
                                   4724 ; output:
                                   4725 ;   y point after BASIC program in RAM.
                                   4726 ;------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001A19                       4727 load_file:
      001A19 CD 18 A3         [ 4] 4728 	call incr_farptr  
      001A1C CD 06 01         [ 4] 4729 	call clear_basic  
      001A1F 5F               [ 1] 4730 	clrw x
      001A20 92 AF 00 16      [ 5] 4731 	ldf a,([farptr],x)
      001A24 90 95            [ 1] 4732 	ld yh,a 
      001A26 5C               [ 2] 4733 	incw x  
      001A27 92 AF 00 16      [ 5] 4734 	ldf a,([farptr],x)
      001A2B 5C               [ 2] 4735 	incw x 
      001A2C 90 97            [ 1] 4736 	ld yl,a 
      001A2E 72 B9 00 1C      [ 2] 4737 	addw y,txtbgn
      001A32 90 CF 00 1E      [ 2] 4738 	ldw txtend,y
      001A36 90 CE 00 1C      [ 2] 4739 	ldw y,txtbgn
      001A3A                       4740 3$:	; load BASIC text 	
      001A3A 92 AF 00 16      [ 5] 4741 	ldf a,([farptr],x)
      001A3E 90 F7            [ 1] 4742 	ld (y),a 
      001A40 5C               [ 2] 4743 	incw x 
      001A41 90 5C            [ 2] 4744 	incw y 
      001A43 90 C3 00 1E      [ 2] 4745 	cpw y,txtend 
      001A47 2B F1            [ 1] 4746 	jrmi 3$
      001A49 81               [ 4] 4747 	ret 
                                   4748 
                                   4749 ;------------------------
                                   4750 ; BASIC: LOAD "file" 
                                   4751 ; load file to RAM 
                                   4752 ; for execution 
                                   4753 ;------------------------
      001A4A                       4754 load:
      001A4A 72 01 00 23 07   [ 2] 4755 	btjf flags,#FRUN,0$ 
      001A4F 27 05            [ 1] 4756 	jreq 0$ 
      001A51 A6 07            [ 1] 4757 	ld a,#ERR_CMD_ONLY 
      001A53 CC 07 97         [ 2] 4758 	jp tb_error 
      001A56                       4759 0$:	
      001A56 CD 08 87         [ 4] 4760 	call next_token 
      001A59 A1 02            [ 1] 4761 	cp a,#TK_QSTR
      001A5B 27 03            [ 1] 4762 	jreq 1$
      001A5D CC 07 95         [ 2] 4763 	jp syntax_error 
      001A60 90 93            [ 1] 4764 1$:	ldw y,x 
      001A62 CD 19 0F         [ 4] 4765 	call search_file 
      001A65 25 05            [ 1] 4766 	jrc 2$ 
      001A67 A6 09            [ 1] 4767 	ld a,#ERR_NOT_FILE
      001A69 CC 07 97         [ 2] 4768 	jp tb_error  
      001A6C                       4769 2$:
      001A6C CD 1A 19         [ 4] 4770 	call load_file
                                   4771 ; print loaded size 	 
      001A6F CE 00 1E         [ 2] 4772 	ldw x,txtend 
      001A72 72 B0 00 1C      [ 2] 4773 	subw x,txtbgn
      001A76 CD 09 24         [ 4] 4774 	call print_int 
      001A79 81               [ 4] 4775 	ret 
                                   4776 
                                   4777 ;-----------------------------------
                                   4778 ; BASIC: FORGET ["file_name"] 
                                   4779 ; erase file_name and all others 
                                   4780 ; after it. 
                                   4781 ; without argument erase all files 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                   4782 ;-----------------------------------
      001A7A                       4783 forget:
      001A7A CD 08 87         [ 4] 4784 	call next_token 
      001A7D A1 00            [ 1] 4785 	cp a,#TK_NONE 
      001A7F 27 20            [ 1] 4786 	jreq 3$ 
      001A81 A1 02            [ 1] 4787 	cp a,#TK_QSTR
      001A83 27 03            [ 1] 4788 	jreq 1$
      001A85 CC 07 95         [ 2] 4789 	jp syntax_error
      001A88 90 93            [ 1] 4790 1$: ldw y,x 
      001A8A 55 00 03 00 01   [ 1] 4791 	mov in,count 
      001A8F CD 19 0F         [ 4] 4792 	call search_file
      001A92 25 05            [ 1] 4793 	jrc 2$
      001A94 A6 09            [ 1] 4794 	ld a,#ERR_NOT_FILE 
      001A96 CC 07 97         [ 2] 4795 	jp tb_error 
      001A99                       4796 2$: 
      001A99 CE 00 16         [ 2] 4797 	ldw x,farptr
      001A9C C6 00 18         [ 1] 4798 	ld a,farptr+2
      001A9F 20 0A            [ 2] 4799 	jra 4$ 
      001AA1                       4800 3$: ; forget all files 
      001AA1 AE 01 00         [ 2] 4801 	ldw x,#0x100
      001AA4 4F               [ 1] 4802 	clr a 
      001AA5 CF 00 16         [ 2] 4803 	ldw farptr,x 
      001AA8 C7 00 18         [ 1] 4804 	ld farptr+2,a 
      001AAB                       4805 4$:
      001AAB CF 00 19         [ 2] 4806 	ldw ffree,x 
      001AAE C7 00 1B         [ 1] 4807 	ld ffree+2,a 
      001AB1 4B 04            [ 1] 4808 	push #4
      001AB3 5F               [ 1] 4809 	clrw x 
      001AB4                       4810 5$: 
      001AB4 4F               [ 1] 4811 	clr a  
      001AB5 CD 00 F1         [ 4] 4812 	call write_byte 
      001AB8 5C               [ 2] 4813 	incw x 
      001AB9 0A 01            [ 1] 4814 	dec (1,sp)
      001ABB 26 F7            [ 1] 4815 	jrne 5$	
      001ABD 84               [ 1] 4816 6$: pop a 
      001ABE 81               [ 4] 4817 	ret 
                                   4818 
                                   4819 ;----------------------
                                   4820 ; BASIC: DIR 
                                   4821 ; list saved files 
                                   4822 ;----------------------
                           000001  4823 	COUNT=1 ; files counter 
                           000002  4824 	VSIZE=2 
      001ABF                       4825 directory:
      001ABF                       4826 	_vars VSIZE 
      001ABF 52 02            [ 2]    1     sub sp,#VSIZE 
      001AC1 5F               [ 1] 4827 	clrw x 
      001AC2 1F 01            [ 2] 4828 	ldw (COUNT,sp),x 
      001AC4 CF 00 17         [ 2] 4829 	ldw farptr+1,x 
      001AC7 35 01 00 16      [ 1] 4830 	mov farptr,#1 
      001ACB                       4831 dir_loop:
      001ACB 5F               [ 1] 4832 	clrw x 
      001ACC 92 AF 00 16      [ 5] 4833 	ldf a,([farptr],x)
      001AD0 27 39            [ 1] 4834 	jreq 8$ 
      001AD2                       4835 1$: ;name loop 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001AD2 92 AF 00 16      [ 5] 4836 	ldf a,([farptr],x)
      001AD6 27 06            [ 1] 4837 	jreq 2$ 
      001AD8 CD 01 C4         [ 4] 4838 	call putc 
      001ADB 5C               [ 2] 4839 	incw x 
      001ADC 20 F4            [ 2] 4840 	jra 1$
      001ADE 5C               [ 2] 4841 2$: incw x ; skip ending 0. 
      001ADF A6 20            [ 1] 4842 	ld a,#SPACE 
      001AE1 CD 01 C4         [ 4] 4843 	call putc 
                                   4844 ; get file size 	
      001AE4 92 AF 00 16      [ 5] 4845 	ldf a,([farptr],x)
      001AE8 90 95            [ 1] 4846 	ld yh,a 
      001AEA 5C               [ 2] 4847 	incw x 
      001AEB 92 AF 00 16      [ 5] 4848 	ldf a,([farptr],x)
      001AEF 5C               [ 2] 4849 	incw x 
      001AF0 90 97            [ 1] 4850 	ld yl,a 
      001AF2 90 89            [ 2] 4851 	pushw y 
      001AF4 72 FB 01         [ 2] 4852 	addw x,(1,sp)
      001AF7 5C               [ 2] 4853 	incw x ; skip EOF marker 
                                   4854 ; skip to next file 
      001AF8 CD 18 A3         [ 4] 4855 	call incr_farptr 
                                   4856 ; print file size 
      001AFB 85               [ 2] 4857 	popw x ; file size 
      001AFC CD 09 24         [ 4] 4858 	call print_int 
      001AFF A6 0D            [ 1] 4859 	ld a,#CR 
      001B01 CD 01 C4         [ 4] 4860 	call putc
      001B04 1E 01            [ 2] 4861 	ldw x,(COUNT,sp)
      001B06 5C               [ 2] 4862 	incw x
      001B07 1F 01            [ 2] 4863 	ldw (COUNT,sp),x  
      001B09 20 C0            [ 2] 4864 	jra dir_loop 
      001B0B                       4865 8$: ; print number of files 
      001B0B 1E 01            [ 2] 4866 	ldw x,(COUNT,sp)
      001B0D CD 09 24         [ 4] 4867 	call print_int 
      001B10 AE 1B 40         [ 2] 4868 	ldw x,#file_count 
      001B13 CD 01 D7         [ 4] 4869 	call puts  
                                   4870 ; print drive free space 	
      001B16 A6 FF            [ 1] 4871 	ld a,#0xff 
      001B18 C0 00 1B         [ 1] 4872 	sub a,ffree+2 
      001B1B C7 00 0D         [ 1] 4873 	ld acc8,a 
      001B1E A6 7F            [ 1] 4874 	ld a,#0x7f 
      001B20 C2 00 1A         [ 1] 4875 	sbc a,ffree+1 
      001B23 C7 00 0C         [ 1] 4876 	ld acc16,a 
      001B26 A6 02            [ 1] 4877 	ld a,#2 
      001B28 C2 00 19         [ 1] 4878 	sbc a,ffree 
      001B2B C7 00 0B         [ 1] 4879 	ld acc24,a 
      001B2E 5F               [ 1] 4880 	clrw x  
      001B2F A6 06            [ 1] 4881 	ld a,#6 
      001B31 97               [ 1] 4882 	ld xl,a 
      001B32 A6 0A            [ 1] 4883 	ld a,#10 
      001B34 CD 08 DC         [ 4] 4884 	call prti24 
      001B37 AE 1B 48         [ 2] 4885 	ldw x,#drive_free
      001B3A CD 01 D7         [ 4] 4886 	call puts 
      001B3D                       4887 	_drop VSIZE 
      001B3D 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B3F 81               [ 4] 4888 	ret
      001B40 20 66 69 6C 65 73 0A  4889 file_count: .asciz " files\n"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



             00
      001B48 20 62 79 74 65 73 20  4890 drive_free: .asciz " bytes free\n" 
             66 72 65 65 0A 00
                                   4891 
                                   4892 ;---------------------
                                   4893 ; BASIC: WRITE expr1,expr2[,expr]* 
                                   4894 ; write 1 or more byte to FLASH or EEPROM
                                   4895 ; starting at address  
                                   4896 ; input:
                                   4897 ;   expr1  	is address 
                                   4898 ;   expr2,...,exprn   are bytes to write
                                   4899 ; output:
                                   4900 ;   none 
                                   4901 ;---------------------
                           000001  4902 	ADDR=1
                           000002  4903 	VSIZ=2 
      001B55                       4904 write:
      001B55                       4905 	_vars VSIZE 
      001B55 52 02            [ 2]    1     sub sp,#VSIZE 
      001B57 72 5F 00 16      [ 1] 4906 	clr farptr ; expect 16 bits address 
      001B5B CD 10 87         [ 4] 4907 	call expression
      001B5E A1 84            [ 1] 4908 	cp a,#TK_INTGR 
      001B60 27 03            [ 1] 4909 	jreq 0$
      001B62 CC 07 95         [ 2] 4910 	jp syntax_error
      001B65 1F 01            [ 2] 4911 0$: ldw (ADDR,sp),x 
      001B67 CD 08 87         [ 4] 4912 	call next_token 
      001B6A A1 09            [ 1] 4913 	cp a,#TK_COMMA 
      001B6C 27 02            [ 1] 4914 	jreq 1$ 
      001B6E 20 19            [ 2] 4915 	jra 9$ 
      001B70 CD 10 87         [ 4] 4916 1$:	call expression
      001B73 A1 84            [ 1] 4917 	cp a,#TK_INTGR
      001B75 27 03            [ 1] 4918 	jreq 2$
      001B77 CC 07 95         [ 2] 4919 	jp syntax_error
      001B7A 9F               [ 1] 4920 2$:	ld a,xl 
      001B7B 1E 01            [ 2] 4921 	ldw x,(ADDR,sp) 
      001B7D CF 00 17         [ 2] 4922 	ldw farptr+1,x 
      001B80 5F               [ 1] 4923 	clrw x 
      001B81 CD 00 F1         [ 4] 4924 	call write_byte
      001B84 1E 01            [ 2] 4925 	ldw x,(ADDR,sp)
      001B86 5C               [ 2] 4926 	incw x 
      001B87 20 DC            [ 2] 4927 	jra 0$ 
      001B89                       4928 9$:
      001B89                       4929 	_drop VSIZE
      001B89 5B 02            [ 2]    1     addw sp,#VSIZE 
      001B8B 81               [ 4] 4930 	ret 
                                   4931 
                                   4932 
                                   4933 ;---------------------
                                   4934 ;BASIC: CHAR(expr)
                                   4935 ; évaluate expression 
                                   4936 ; and take the 7 least 
                                   4937 ; bits as ASCII character
                                   4938 ;---------------------
      001B8C                       4939 char:
      001B8C CD 0F 89         [ 4] 4940 	call func_args 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001B8F A1 01            [ 1] 4941 	cp a,#1
      001B91 27 03            [ 1] 4942 	jreq 1$
      001B93 CC 07 95         [ 2] 4943 	jp syntax_error
      001B96 85               [ 2] 4944 1$:	popw x 
      001B97 9F               [ 1] 4945 	ld a,xl 
      001B98 A4 7F            [ 1] 4946 	and a,#0x7f 
      001B9A 97               [ 1] 4947 	ld xl,a
      001B9B A6 03            [ 1] 4948 	ld a,#TK_CHAR
      001B9D 81               [ 4] 4949 	ret
                                   4950 
                                   4951 ;---------------------
                                   4952 ; BASIC: ASC(string|char)
                                   4953 ; extract first character 
                                   4954 ; of string argument 
                                   4955 ; return it as TK_INTGR 
                                   4956 ;---------------------
      001B9E                       4957 ascii:
      001B9E A6 07            [ 1] 4958 	ld a,#TK_LPAREN
      001BA0 CD 0F 7C         [ 4] 4959 	call expect 
      001BA3 CD 08 87         [ 4] 4960 	call next_token 
      001BA6 A1 02            [ 1] 4961 	cp a,#TK_QSTR 
      001BA8 27 07            [ 1] 4962 	jreq 1$
      001BAA A1 03            [ 1] 4963 	cp a,#TK_CHAR 
      001BAC 27 06            [ 1] 4964 	jreq 2$ 
      001BAE CC 07 95         [ 2] 4965 	jp syntax_error
      001BB1                       4966 1$: 
      001BB1 F6               [ 1] 4967 	ld a,(x) 
      001BB2 5F               [ 1] 4968 	clrw x
      001BB3 97               [ 1] 4969 	ld xl,a 
      001BB4                       4970 2$: 
      001BB4 89               [ 2] 4971 	pushw x 
      001BB5 A6 08            [ 1] 4972 	ld a,#TK_RPAREN 
      001BB7 CD 0F 7C         [ 4] 4973 	call expect
      001BBA 85               [ 2] 4974 	popw x 
      001BBB A6 84            [ 1] 4975 	ld a,#TK_INTGR 
      001BBD 81               [ 4] 4976 	ret 
                                   4977 
                                   4978 ;---------------------
                                   4979 ;BASIC: KEY
                                   4980 ; wait for a character 
                                   4981 ; received from STDIN 
                                   4982 ; input:
                                   4983 ;	none 
                                   4984 ; output:
                                   4985 ;	X 		ASCII character 
                                   4986 ;---------------------
      001BBE                       4987 key:
      001BBE CD 01 CD         [ 4] 4988 	call getc 
      001BC1 5F               [ 1] 4989 	clrw x 
      001BC2 97               [ 1] 4990 	ld xl,a 
      001BC3 A6 84            [ 1] 4991 	ld a,#TK_INTGR
      001BC5 81               [ 4] 4992 	ret
                                   4993 
                                   4994 ;----------------------
                                   4995 ; BASIC: QKEY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   4996 ; Return true if there 
                                   4997 ; is a character in 
                                   4998 ; waiting in STDIN 
                                   4999 ; input:
                                   5000 ;  none 
                                   5001 ; output:
                                   5002 ;   X 		0|-1 
                                   5003 ;-----------------------
      001BC6                       5004 qkey:: 
      001BC6 5F               [ 1] 5005 	clrw x 
      001BC7 72 5D 00 25      [ 1] 5006 	tnz rx_char
      001BCB 27 01            [ 1] 5007 	jreq 9$ 
      001BCD 53               [ 2] 5008 	cplw x 
      001BCE A6 84            [ 1] 5009 9$: ld a,#TK_INTGR
      001BD0 81               [ 4] 5010 	ret 
                                   5011 
                                   5012 ;---------------------
                                   5013 ; BASIC: GPIO(expr,reg)
                                   5014 ; return gpio address 
                                   5015 ; expr {0..8}
                                   5016 ; input:
                                   5017 ;   none 
                                   5018 ; output:
                                   5019 ;   X 		gpio register address
                                   5020 ;----------------------------
                           000003  5021 	PORT=3
                           000001  5022 	REG=1 
                           000004  5023 	VSIZE=4 
      001BD1                       5024 gpio:
      001BD1 CD 0F 89         [ 4] 5025 	call func_args 
      001BD4 A1 02            [ 1] 5026 	cp a,#2
      001BD6 27 03            [ 1] 5027 	jreq 1$
      001BD8 CC 07 95         [ 2] 5028 	jp syntax_error  
      001BDB                       5029 1$:	
      001BDB 1E 03            [ 2] 5030 	ldw x,(PORT,sp)
      001BDD 2B 17            [ 1] 5031 	jrmi bad_port
      001BDF A3 00 09         [ 2] 5032 	cpw x,#9
      001BE2 2A 12            [ 1] 5033 	jrpl bad_port
      001BE4 A6 05            [ 1] 5034 	ld a,#5
      001BE6 42               [ 4] 5035 	mul x,a
      001BE7 1C 50 00         [ 2] 5036 	addw x,#GPIO_BASE 
      001BEA 1F 03            [ 2] 5037 	ldw (PORT,sp),x  
      001BEC 1E 01            [ 2] 5038 	ldw x,(REG,sp) 
      001BEE 72 FB 03         [ 2] 5039 	addw x,(PORT,sp)
      001BF1 A6 84            [ 1] 5040 	ld a,#TK_INTGR
      001BF3                       5041 	_drop VSIZE 
      001BF3 5B 04            [ 2]    1     addw sp,#VSIZE 
      001BF5 81               [ 4] 5042 	ret
      001BF6                       5043 bad_port:
      001BF6 A6 0A            [ 1] 5044 	ld a,#ERR_BAD_VALUE
      001BF8 CC 07 97         [ 2] 5045 	jp tb_error
                                   5046 
                                   5047 
                                   5048 ;-------------------------
                                   5049 ; BASIC: UFLASH 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                   5050 ; return user flash address
                                   5051 ; input:
                                   5052 ;  none 
                                   5053 ; output:
                                   5054 ;	A		TK_INTGR
                                   5055 ;   X 		user address 
                                   5056 ;---------------------------
      001BFB                       5057 uflash:
      001BFB AE 26 00         [ 2] 5058 	ldw x,#user_space 
      001BFE A6 84            [ 1] 5059 	ld a,#TK_INTGR 
      001C00 81               [ 4] 5060 	ret 
                                   5061 
                                   5062 
                                   5063 ;---------------------
                                   5064 ; BASIC: USR(addr[,arg])
                                   5065 ; execute a function written 
                                   5066 ; in binary code.
                                   5067 ; binary fonction should 
                                   5068 ; return token attribute in A 
                                   5069 ; and value in X. 
                                   5070 ; input:
                                   5071 ;   addr	routine address 
                                   5072 ;   arg 	is an optional argument 
                                   5073 ; output:
                                   5074 ;   A 		token attribute 
                                   5075 ;   X       returned value 
                                   5076 ;---------------------
      001C01                       5077 usr:
      001C01 90 89            [ 2] 5078 	pushw y 	
      001C03 CD 0F 89         [ 4] 5079 	call func_args 
      001C06 A1 01            [ 1] 5080 	cp a,#1 
      001C08 27 07            [ 1] 5081 	jreq 2$
      001C0A A1 02            [ 1] 5082 	cp a,#2
      001C0C 27 03            [ 1] 5083 	jreq 2$  
      001C0E CC 07 95         [ 2] 5084 	jp syntax_error 
      001C11 90 85            [ 2] 5085 2$: popw y  ; arg|addr 
      001C13 A1 01            [ 1] 5086 	cp a,#1
      001C15 27 02            [ 1] 5087 	jreq 3$
      001C17 85               [ 2] 5088 	popw x ; addr
      001C18 51               [ 1] 5089 	exgw x,y 
      001C19 90 FD            [ 4] 5090 3$: call (y)
      001C1B 90 85            [ 2] 5091 	popw y 
      001C1D 81               [ 4] 5092 	ret 
                                   5093 
                                   5094 ;------------------------------
                                   5095 ; BASIC: BYE 
                                   5096 ; halt mcu in its lowest power mode 
                                   5097 ; wait for reset or external interrupt
                                   5098 ; do a cold start on wakeup.
                                   5099 ;------------------------------
      001C1E                       5100 bye:
      001C1E 72 0D 52 30 FB   [ 2] 5101 	btjf UART1_SR,#UART_SR_TC,.
      001C23 8E               [10] 5102 	halt
      001C24 CC 04 EF         [ 2] 5103 	jp cold_start  
                                   5104 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                   5105 ;----------------------------------
                                   5106 ; BASIC: AUTORUN ["file_name"] 
                                   5107 ; record in eeprom at adrress AUTORUN_NAME
                                   5108 ; the name of file to load and execute
                                   5109 ; at startup. 
                                   5110 ; empty string delete autorun name 
                                   5111 ; no argument display autorun name  
                                   5112 ; input:
                                   5113 ;   file_name   file to execute 
                                   5114 ; output:
                                   5115 ;   none
                                   5116 ;-----------------------------------
      001C27                       5117 autorun: 
      001C27 72 01 00 23 07   [ 2] 5118 	btjf flags,#FRUN,0$ 
      001C2C 27 05            [ 1] 5119 	jreq 0$ 
      001C2E A6 07            [ 1] 5120 	ld a,#ERR_CMD_ONLY 
      001C30 CC 07 97         [ 2] 5121 	jp tb_error 
      001C33                       5122 0$:	
      001C33 CD 08 87         [ 4] 5123 	call next_token
      001C36 26 08            [ 1] 5124 	jrne 1$
      001C38 AE 40 00         [ 2] 5125 	ldw x,#AUTORUN_NAME
      001C3B CD 01 D7         [ 4] 5126 	call puts 
      001C3E 4F               [ 1] 5127 	clr a 
      001C3F 81               [ 4] 5128 	ret 
      001C40                       5129 1$:
      001C40 A1 02            [ 1] 5130 	cp a,#TK_QSTR
      001C42 27 03            [ 1] 5131 	jreq 2$
      001C44 CC 07 95         [ 2] 5132 	jp syntax_error 
      001C47                       5133 2$:	
      001C47 7D               [ 1] 5134 	tnz (x) 
      001C48 26 09            [ 1] 5135 	jrne 3$
                                   5136 ; empty string, delete autorun 	
      001C4A CD 05 B4         [ 4] 5137 	call cancel_autorun
      001C4D 55 00 03 00 01   [ 1] 5138 	mov in,count 
      001C52 81               [ 4] 5139 	ret 
      001C53 89               [ 2] 5140 3$:	pushw x 
      001C54 90 93            [ 1] 5141 	ldw y,x  
      001C56 CD 19 0F         [ 4] 5142 	call search_file 
      001C59 25 05            [ 1] 5143 	jrc 4$ 
      001C5B A6 09            [ 1] 5144 	ld a,#ERR_NOT_FILE
      001C5D CC 07 97         [ 2] 5145 	jp tb_error  
      001C60                       5146 4$: 
      001C60 55 00 03 00 01   [ 1] 5147 	mov in,count 
      001C65 72 5F 00 16      [ 1] 5148 	clr farptr 
      001C69 AE 40 00         [ 2] 5149 	ldw x,#AUTORUN_NAME
      001C6C CF 00 17         [ 2] 5150 	ldw farptr+1,x 
      001C6F 1E 01            [ 2] 5151 	ldw x,(1,sp)  
      001C71 CD 02 B6         [ 4] 5152 	call strlen  ; return length in X 
      001C74 5C               [ 2] 5153 	incw x 
      001C75 90 85            [ 2] 5154 	popw y 
      001C77 89               [ 2] 5155 	pushw x 
      001C78 5F               [ 1] 5156 	clrw x 
      001C79 CD 01 66         [ 4] 5157 	call write_block 
      001C7C                       5158 	_drop 2 
      001C7C 5B 02            [ 2]    1     addw sp,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001C7E 81               [ 4] 5159 	ret 
                                   5160 
                                   5161 ;----------------------------------
                                   5162 ; BASIC: SLEEP 
                                   5163 ; halt mcu until reset or external
                                   5164 ; interrupt.
                                   5165 ; Resume progam after SLEEP command
                                   5166 ;----------------------------------
      001C7F                       5167 sleep:
      001C7F 72 0D 52 30 FB   [ 2] 5168 	btjf UART1_SR,#UART_SR_TC,.
      001C84 72 16 00 23      [ 1] 5169 	bset flags,#FSLEEP
      001C88 8E               [10] 5170 	halt 
      001C89 81               [ 4] 5171 	ret 
                                   5172 
                                   5173 ;-------------------------------
                                   5174 ; BASIC: PAUSE expr 
                                   5175 ; suspend execution for n msec.
                                   5176 ; input:
                                   5177 ;	none
                                   5178 ; output:
                                   5179 ;	none 
                                   5180 ;------------------------------
      001C8A                       5181 pause:
      001C8A CD 10 87         [ 4] 5182 	call expression
      001C8D A1 84            [ 1] 5183 	cp a,#TK_INTGR
      001C8F 27 03            [ 1] 5184 	jreq pause02 
      001C91 CC 07 95         [ 2] 5185 	jp syntax_error
      001C94                       5186 pause02: 
      001C94 5D               [ 2] 5187 1$: tnzw x 
      001C95 27 04            [ 1] 5188 	jreq 2$
      001C97 8F               [10] 5189 	wfi 
      001C98 5A               [ 2] 5190 	decw x 
      001C99 26 F9            [ 1] 5191 	jrne 1$
      001C9B 4F               [ 1] 5192 2$:	clr a 
      001C9C 81               [ 4] 5193 	ret 
                                   5194 
                                   5195 ;------------------------------
                                   5196 ; BASIC: AWU expr
                                   5197 ; halt mcu for 'expr' milliseconds
                                   5198 ; use Auto wakeup peripheral
                                   5199 ; all oscillators stopped except LSI
                                   5200 ; range: 1ms - 511ms
                                   5201 ; input:
                                   5202 ;  none
                                   5203 ; output:
                                   5204 ;  none:
                                   5205 ;------------------------------
      001C9D                       5206 awu:
      001C9D CD 10 87         [ 4] 5207   call expression
      001CA0 A1 84            [ 1] 5208   cp a,#TK_INTGR
      001CA2 27 03            [ 1] 5209   jreq awu02
      001CA4 CC 07 95         [ 2] 5210   jp syntax_error
      001CA7                       5211 awu02:
      001CA7 A3 14 00         [ 2] 5212   cpw x,#5120
      001CAA 2B 0C            [ 1] 5213   jrmi 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001CAC 35 0F 50 F2      [ 1] 5214   mov AWU_TBR,#15 
      001CB0 A6 1E            [ 1] 5215   ld a,#30
      001CB2 62               [ 2] 5216   div x,a
      001CB3 A6 10            [ 1] 5217   ld a,#16
      001CB5 62               [ 2] 5218   div x,a 
      001CB6 20 1E            [ 2] 5219   jra 4$
      001CB8                       5220 1$: 
      001CB8 A3 08 00         [ 2] 5221   cpw x,#2048
      001CBB 2B 09            [ 1] 5222   jrmi 2$ 
      001CBD 35 0E 50 F2      [ 1] 5223   mov AWU_TBR,#14
      001CC1 A6 50            [ 1] 5224   ld a,#80
      001CC3 62               [ 2] 5225   div x,a 
      001CC4 20 10            [ 2] 5226   jra 4$   
      001CC6                       5227 2$:
      001CC6 35 07 50 F2      [ 1] 5228   mov AWU_TBR,#7
      001CCA                       5229 3$:  
                                   5230 ; while X > 64  divide by 2 and increment AWU_TBR 
      001CCA A3 00 40         [ 2] 5231   cpw x,#64 
      001CCD 23 07            [ 2] 5232   jrule 4$ 
      001CCF 72 5C 50 F2      [ 1] 5233   inc AWU_TBR 
      001CD3 54               [ 2] 5234   srlw x 
      001CD4 20 F4            [ 2] 5235   jra 3$ 
      001CD6                       5236 4$:
      001CD6 9F               [ 1] 5237   ld a, xl
      001CD7 4A               [ 1] 5238   dec a 
      001CD8 27 01            [ 1] 5239   jreq 5$
      001CDA 4A               [ 1] 5240   dec a 	
      001CDB                       5241 5$: 
      001CDB A4 3E            [ 1] 5242   and a,#0x3e 
      001CDD C7 50 F1         [ 1] 5243   ld AWU_APR,a 
      001CE0 72 18 50 F0      [ 1] 5244   bset AWU_CSR,#AWU_CSR_AWUEN
      001CE4 8E               [10] 5245   halt 
                                   5246 
      001CE5 81               [ 4] 5247   ret 
                                   5248 
                                   5249 ;------------------------------
                                   5250 ; BASIC: TICKS
                                   5251 ; return msec ticks counter value 
                                   5252 ; input:
                                   5253 ; 	none 
                                   5254 ; output:
                                   5255 ;	X 		TK_INTGR
                                   5256 ;-------------------------------
      001CE6                       5257 get_ticks:
      001CE6 CE 00 0E         [ 2] 5258 	ldw x,ticks 
      001CE9 A6 84            [ 1] 5259 	ld a,#TK_INTGR
      001CEB 81               [ 4] 5260 	ret 
                                   5261 
                                   5262 
                                   5263 
                                   5264 ;------------------------------
                                   5265 ; BASIC: ABS(expr)
                                   5266 ; return absolute value of expr.
                                   5267 ; input:
                                   5268 ;   none
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   5269 ; output:
                                   5270 ;   X     	positive integer
                                   5271 ;-------------------------------
      001CEC                       5272 abs:
      001CEC CD 0F 89         [ 4] 5273 	call func_args 
      001CEF A1 01            [ 1] 5274 	cp a,#1 
      001CF1 27 03            [ 1] 5275 	jreq 0$ 
      001CF3 CC 07 95         [ 2] 5276 	jp syntax_error
      001CF6                       5277 0$:  
      001CF6 85               [ 2] 5278     popw x   
      001CF7 9E               [ 1] 5279 	ld a,xh 
      001CF8 A5 80            [ 1] 5280 	bcp a,#0x80 
      001CFA 27 01            [ 1] 5281 	jreq 2$ 
      001CFC 50               [ 2] 5282 	negw x 
      001CFD A6 84            [ 1] 5283 2$: ld a,#TK_INTGR 
      001CFF 81               [ 4] 5284 	ret 
                                   5285 
                                   5286 ;------------------------------
                                   5287 ; BASIC: AND(expr1,expr2)
                                   5288 ; Apply bit AND relation between
                                   5289 ; the 2 arguments, i.e expr1 & expr2 
                                   5290 ; output:
                                   5291 ; 	A 		TK_INTGR
                                   5292 ;   X 		result 
                                   5293 ;------------------------------
      001D00                       5294 bit_and:
      001D00 CD 0F 89         [ 4] 5295 	call func_args 
      001D03 A1 02            [ 1] 5296 	cp a,#2
      001D05 27 03            [ 1] 5297 	jreq 1$
      001D07 CC 07 95         [ 2] 5298 	jp syntax_error 
      001D0A 85               [ 2] 5299 1$:	popw x 
      001D0B 9E               [ 1] 5300 	ld a,xh 
      001D0C 14 01            [ 1] 5301 	and a,(1,sp)
      001D0E 95               [ 1] 5302 	ld xh,a 
      001D0F 9F               [ 1] 5303 	ld a,xl
      001D10 14 02            [ 1] 5304 	and a,(2,sp)
      001D12 97               [ 1] 5305 	ld xl,a 
      001D13                       5306 	_drop 2 
      001D13 5B 02            [ 2]    1     addw sp,#2 
      001D15 A6 84            [ 1] 5307 	ld a,#TK_INTGR
      001D17 81               [ 4] 5308 	ret
                                   5309 
                                   5310 ;------------------------------
                                   5311 ; BASIC: OR(expr1,expr2)
                                   5312 ; Apply bit OR relation between
                                   5313 ; the 2 arguments, i.e expr1 | expr2 
                                   5314 ; output:
                                   5315 ; 	A 		TK_INTGR
                                   5316 ;   X 		result 
                                   5317 ;------------------------------
      001D18                       5318 bit_or:
      001D18 CD 0F 89         [ 4] 5319 	call func_args 
      001D1B A1 02            [ 1] 5320 	cp a,#2
      001D1D 27 03            [ 1] 5321 	jreq 1$
      001D1F CC 07 95         [ 2] 5322 	jp syntax_error 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001D22                       5323 1$: 
      001D22 85               [ 2] 5324 	popw x 
      001D23 9E               [ 1] 5325 	ld a,xh 
      001D24 1A 01            [ 1] 5326 	or a,(1,sp)
      001D26 95               [ 1] 5327 	ld xh,a 
      001D27 9F               [ 1] 5328 	ld a,xl 
      001D28 1A 02            [ 1] 5329 	or a,(2,sp)
      001D2A 97               [ 1] 5330 	ld xl,a 
      001D2B                       5331 	_drop 2 
      001D2B 5B 02            [ 2]    1     addw sp,#2 
      001D2D A6 84            [ 1] 5332 	ld a,#TK_INTGR 
      001D2F 81               [ 4] 5333 	ret
                                   5334 
                                   5335 ;------------------------------
                                   5336 ; BASIC: XOR(expr1,expr2)
                                   5337 ; Apply bit XOR relation between
                                   5338 ; the 2 arguments, i.e expr1 ^ expr2 
                                   5339 ; output:
                                   5340 ; 	A 		TK_INTGR
                                   5341 ;   X 		result 
                                   5342 ;------------------------------
      001D30                       5343 bit_xor:
      001D30 CD 0F 89         [ 4] 5344 	call func_args 
      001D33 A1 02            [ 1] 5345 	cp a,#2
      001D35 27 03            [ 1] 5346 	jreq 1$
      001D37 CC 07 95         [ 2] 5347 	jp syntax_error 
      001D3A                       5348 1$: 
      001D3A 85               [ 2] 5349 	popw x 
      001D3B 9E               [ 1] 5350 	ld a,xh 
      001D3C 18 01            [ 1] 5351 	xor a,(1,sp)
      001D3E 95               [ 1] 5352 	ld xh,a 
      001D3F 9F               [ 1] 5353 	ld a,xl 
      001D40 18 02            [ 1] 5354 	xor a,(2,sp)
      001D42 97               [ 1] 5355 	ld xl,a 
      001D43                       5356 	_drop 2 
      001D43 5B 02            [ 2]    1     addw sp,#2 
      001D45 A6 84            [ 1] 5357 	ld a,#TK_INTGR 
      001D47 81               [ 4] 5358 	ret 
                                   5359 
                                   5360 ;------------------------------
                                   5361 ; BASIC: LSHIFT(expr1,expr2)
                                   5362 ; logical shift left expr1 by 
                                   5363 ; expr2 bits 
                                   5364 ; output:
                                   5365 ; 	A 		TK_INTGR
                                   5366 ;   X 		result 
                                   5367 ;------------------------------
      001D48                       5368 lshift:
      001D48 CD 0F 89         [ 4] 5369 	call func_args
      001D4B A1 02            [ 1] 5370 	cp a,#2 
      001D4D 27 03            [ 1] 5371 	jreq 1$
      001D4F CC 07 95         [ 2] 5372 	jp syntax_error
      001D52 90 85            [ 2] 5373 1$: popw y   
      001D54 85               [ 2] 5374 	popw x 
      001D55 90 5D            [ 2] 5375 	tnzw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001D57 27 05            [ 1] 5376 	jreq 4$
      001D59 58               [ 2] 5377 2$:	sllw x 
      001D5A 90 5A            [ 2] 5378 	decw y 
      001D5C 26 FB            [ 1] 5379 	jrne 2$
      001D5E                       5380 4$:  
      001D5E A6 84            [ 1] 5381 	ld a,#TK_INTGR
      001D60 81               [ 4] 5382 	ret
                                   5383 
                                   5384 ;------------------------------
                                   5385 ; BASIC: RSHIFT(expr1,expr2)
                                   5386 ; logical shift right expr1 by 
                                   5387 ; expr2 bits.
                                   5388 ; output:
                                   5389 ; 	A 		TK_INTGR
                                   5390 ;   X 		result 
                                   5391 ;------------------------------
      001D61                       5392 rshift:
      001D61 CD 0F 89         [ 4] 5393 	call func_args
      001D64 A1 02            [ 1] 5394 	cp a,#2 
      001D66 27 03            [ 1] 5395 	jreq 1$
      001D68 CC 07 95         [ 2] 5396 	jp syntax_error
      001D6B 90 85            [ 2] 5397 1$: popw y  
      001D6D 85               [ 2] 5398 	popw x
      001D6E 90 5D            [ 2] 5399 	tnzw y 
      001D70 27 05            [ 1] 5400 	jreq 4$
      001D72 54               [ 2] 5401 2$:	srlw x 
      001D73 90 5A            [ 2] 5402 	decw y 
      001D75 26 FB            [ 1] 5403 	jrne 2$
      001D77                       5404 4$:  
      001D77 A6 84            [ 1] 5405 	ld a,#TK_INTGR
      001D79 81               [ 4] 5406 	ret
                                   5407 
                                   5408 ;--------------------------
                                   5409 ; BASIC: FCPU integer
                                   5410 ; set CPU frequency 
                                   5411 ;-------------------------- 
                                   5412 
      001D7A                       5413 fcpu:
      001D7A A6 84            [ 1] 5414 	ld a,#TK_INTGR
      001D7C CD 0F 7C         [ 4] 5415 	call expect 
      001D7F 9F               [ 1] 5416 	ld a,xl 
      001D80 A4 07            [ 1] 5417 	and a,#7 
      001D82 C7 50 C6         [ 1] 5418 	ld CLK_CKDIVR,a 
      001D85 81               [ 4] 5419 	ret 
                                   5420 
                                   5421 ;------------------------------
                                   5422 ; BASIC: PMODE pin#, mode 
                                   5423 ; Arduino pin. 
                                   5424 ; define pin as input or output
                                   5425 ; pin#: {0..15}
                                   5426 ; mode: INPUT|OUTPUT  
                                   5427 ;------------------------------
                           000001  5428 	PINNO=1
                           000001  5429 	VSIZE=1
      001D86                       5430 pin_mode:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001D86                       5431 	_vars VSIZE 
      001D86 52 01            [ 2]    1     sub sp,#VSIZE 
      001D88 CD 0F 8E         [ 4] 5432 	call arg_list 
      001D8B A1 02            [ 1] 5433 	cp a,#2 
      001D8D 27 03            [ 1] 5434 	jreq 1$
      001D8F CC 07 95         [ 2] 5435 	jp syntax_error 
      001D92 90 85            [ 2] 5436 1$: popw y ; mode 
      001D94 85               [ 2] 5437 	popw x ; Dx pin 
      001D95 CD 1D C7         [ 4] 5438 	call select_pin 
      001D98 6B 01            [ 1] 5439 	ld (PINNO,sp),a  
      001D9A A6 01            [ 1] 5440 	ld a,#1 
      001D9C 0D 01            [ 1] 5441 	tnz (PINNO,sp)
      001D9E 27 0B            [ 1] 5442 	jreq 4$
      001DA0 48               [ 1] 5443 2$:	sll a 
      001DA1 0A 01            [ 1] 5444 	dec (PINNO,sp)
      001DA3 26 FB            [ 1] 5445 	jrne 2$ 
      001DA5 6B 01            [ 1] 5446 	ld (PINNO,sp),a
      001DA7 EA 03            [ 1] 5447 	or a,(GPIO_CR1,x) ;if input->pull-up else push-pull 
      001DA9 E7 03            [ 1] 5448 	ld (GPIO_CR1,x),a 
      001DAB 90 A3 00 01      [ 2] 5449 4$:	cpw y,#OUTP 
      001DAF 27 07            [ 1] 5450 	jreq 6$
                                   5451 ; input mode
      001DB1 7B 01            [ 1] 5452 	ld a,(PINNO,sp)
      001DB3 43               [ 1] 5453 	cpl a 
      001DB4 E4 02            [ 1] 5454 	and a,(GPIO_DDR,x)	; bit==0 for input. 
      001DB6 20 0A            [ 2] 5455 	jra 9$
      001DB8                       5456 6$: ;output mode  
      001DB8 7B 01            [ 1] 5457 	ld a,(PINNO,sp)
      001DBA EA 04            [ 1] 5458 	or a,(GPIO_CR2,x) ;port speed 10 Mhz 
      001DBC E7 04            [ 1] 5459 	ld (GPIO_CR2,x),a 
      001DBE 7B 01            [ 1] 5460 	ld a,(PINNO,sp)
      001DC0 EA 02            [ 1] 5461 	or a,(GPIO_DDR,x) ; bit==1 for output 
      001DC2 E7 02            [ 1] 5462 9$:	ld (GPIO_DDR,x),a 
      001DC4                       5463 	_drop VSIZE 
      001DC4 5B 01            [ 2]    1     addw sp,#VSIZE 
      001DC6 81               [ 4] 5464 	ret
                                   5465 
                                   5466 ;------------------------
                                   5467 ; select Arduino pin 
                                   5468 ; input:
                                   5469 ;   X 	 {0..15} Arduino Dx 
                                   5470 ; output:
                                   5471 ;   A     stm8s208 pin 
                                   5472 ;   X     base address s208 GPIO port 
                                   5473 ;---------------------------
      001DC7                       5474 select_pin:
      001DC7 58               [ 2] 5475 	sllw x 
      001DC8 1C 1D D7         [ 2] 5476 	addw x,#arduino_to_8s208 
      001DCB FE               [ 2] 5477 	ldw x,(x)
      001DCC 9F               [ 1] 5478 	ld a,xl 
      001DCD 88               [ 1] 5479 	push a 
      001DCE 5E               [ 1] 5480 	swapw x 
      001DCF A6 05            [ 1] 5481 	ld a,#5 
      001DD1 42               [ 4] 5482 	mul x,a 
      001DD2 1C 50 00         [ 2] 5483 	addw x,#GPIO_BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001DD5 84               [ 1] 5484 	pop a 
      001DD6 81               [ 4] 5485 	ret 
                                   5486 ; translation from Arduino D0..D15 to stm8s208rb 
      001DD7                       5487 arduino_to_8s208:
      001DD7 03 06                 5488 .byte 3,6 ; D0 
      001DD9 03 05                 5489 .byte 3,5 ; D1 
      001DDB 04 00                 5490 .byte 4,0 ; D2 
      001DDD 02 01                 5491 .byte 2,1 ; D3
      001DDF 06 00                 5492 .byte 6,0 ; D4
      001DE1 02 02                 5493 .byte 2,2 ; D5
      001DE3 02 03                 5494 .byte 2,3 ; D6
      001DE5 03 01                 5495 .byte 3,1 ; D7
      001DE7 03 03                 5496 .byte 3,3 ; D8
      001DE9 02 04                 5497 .byte 2,4 ; D9
      001DEB 04 05                 5498 .byte 4,5 ; D10
      001DED 02 06                 5499 .byte 2,6 ; D11
      001DEF 02 07                 5500 .byte 2,7 ; D12
      001DF1 02 05                 5501 .byte 2,5 ; D13
      001DF3 04 02                 5502 .byte 4,2 ; D14
      001DF5 04 01                 5503 .byte 4,1 ; D15
                                   5504 
                                   5505 
                                   5506 ;------------------------------
                                   5507 ; BASIC: RND(expr)
                                   5508 ; return random number 
                                   5509 ; between 1 and expr inclusive
                                   5510 ; xorshift16 ref: http://b2d-f9r.blogspot.com/2010/08/16-bit-xorshift-rng-now-with-more.html
                                   5511 ; input:
                                   5512 ; 	none 
                                   5513 ; output:
                                   5514 ;	X 		random positive integer 
                                   5515 ;------------------------------
      001DF7                       5516 random:
      001DF7 CD 0F 89         [ 4] 5517 	call func_args 
      001DFA A1 01            [ 1] 5518 	cp a,#1
      001DFC 27 03            [ 1] 5519 	jreq 1$
      001DFE CC 07 95         [ 2] 5520 	jp syntax_error
      001E01                       5521 1$:  
      001E01 A6 80            [ 1] 5522 	ld a,#0x80 
      001E03 15 01            [ 1] 5523 	bcp a,(1,sp)
      001E05 27 05            [ 1] 5524 	jreq 2$
      001E07 A6 0A            [ 1] 5525 	ld a,#ERR_BAD_VALUE
      001E09 CC 07 97         [ 2] 5526 	jp tb_error
      001E0C                       5527 2$: 
                                   5528 ; acc16=(x<<5)^x 
      001E0C CE 00 12         [ 2] 5529 	ldw x,seedx 
      001E0F 58               [ 2] 5530 	sllw x 
      001E10 58               [ 2] 5531 	sllw x 
      001E11 58               [ 2] 5532 	sllw x 
      001E12 58               [ 2] 5533 	sllw x 
      001E13 58               [ 2] 5534 	sllw x 
      001E14 9E               [ 1] 5535 	ld a,xh 
      001E15 C8 00 12         [ 1] 5536 	xor a,seedx 
      001E18 C7 00 0C         [ 1] 5537 	ld acc16,a 
      001E1B 9F               [ 1] 5538 	ld a,xl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001E1C C8 00 13         [ 1] 5539 	xor a,seedx+1 
      001E1F C7 00 0D         [ 1] 5540 	ld acc8,a 
                                   5541 ; seedx=seedy 
      001E22 CE 00 14         [ 2] 5542 	ldw x,seedy 
      001E25 CF 00 12         [ 2] 5543 	ldw seedx,x  
                                   5544 ; seedy=seedy^(seedy>>1)
      001E28 90 54            [ 2] 5545 	srlw y 
      001E2A 90 9E            [ 1] 5546 	ld a,yh 
      001E2C C8 00 14         [ 1] 5547 	xor a,seedy 
      001E2F C7 00 14         [ 1] 5548 	ld seedy,a  
      001E32 90 9F            [ 1] 5549 	ld a,yl 
      001E34 C8 00 15         [ 1] 5550 	xor a,seedy+1 
      001E37 C7 00 15         [ 1] 5551 	ld seedy+1,a 
                                   5552 ; acc16>>3 
      001E3A CE 00 0C         [ 2] 5553 	ldw x,acc16 
      001E3D 54               [ 2] 5554 	srlw x 
      001E3E 54               [ 2] 5555 	srlw x 
      001E3F 54               [ 2] 5556 	srlw x 
                                   5557 ; x=acc16^x 
      001E40 9E               [ 1] 5558 	ld a,xh 
      001E41 C8 00 0C         [ 1] 5559 	xor a,acc16 
      001E44 95               [ 1] 5560 	ld xh,a 
      001E45 9F               [ 1] 5561 	ld a,xl 
      001E46 C8 00 0D         [ 1] 5562 	xor a,acc8 
      001E49 97               [ 1] 5563 	ld xl,a 
                                   5564 ; seedy=x^seedy 
      001E4A C8 00 15         [ 1] 5565 	xor a,seedy+1
      001E4D 97               [ 1] 5566 	ld xl,a 
      001E4E 9E               [ 1] 5567 	ld a,xh 
      001E4F C8 00 14         [ 1] 5568 	xor a,seedy
      001E52 95               [ 1] 5569 	ld xh,a 
      001E53 CF 00 14         [ 2] 5570 	ldw seedy,x 
                                   5571 ; return seedy modulo expr + 1 
      001E56 90 85            [ 2] 5572 	popw y 
      001E58 65               [ 2] 5573 	divw x,y 
      001E59 93               [ 1] 5574 	ldw x,y 
      001E5A 5C               [ 2] 5575 	incw x 
      001E5B                       5576 10$:
      001E5B A6 84            [ 1] 5577 	ld a,#TK_INTGR
      001E5D 81               [ 4] 5578 	ret 
                                   5579 
                                   5580 ;---------------------------------
                                   5581 ; BASIC: WORDS 
                                   5582 ; affiche la listes des mots du
                                   5583 ; dictionnaire ainsi que le nombre
                                   5584 ; de mots.
                                   5585 ;---------------------------------
                           000001  5586 	WLEN=1 ; word length
                           000002  5587 	LLEN=2 ; character sent to console
                           000003  5588 	WCNT=3 ; count words printed 
                           000003  5589 	VSIZE=3 
      001E5E                       5590 words:
      001E5E                       5591 	_vars VSIZE
      001E5E 52 03            [ 2]    1     sub sp,#VSIZE 
      001E60 0F 02            [ 1] 5592 	clr (LLEN,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001E62 0F 03            [ 1] 5593 	clr (WCNT,sp)
      001E64 90 AE 25 82      [ 2] 5594 	ldw y,#kword_dict+2
      001E68 93               [ 1] 5595 0$:	ldw x,y
      001E69 F6               [ 1] 5596 	ld a,(x)
      001E6A A4 0F            [ 1] 5597 	and a,#15 
      001E6C 6B 01            [ 1] 5598 	ld (WLEN,sp),a 
      001E6E 0C 03            [ 1] 5599 	inc (WCNT,sp)
      001E70 5C               [ 2] 5600 1$:	incw x 
      001E71 F6               [ 1] 5601 	ld a,(x)
      001E72 CD 01 C4         [ 4] 5602 	call putc 
      001E75 0C 02            [ 1] 5603 	inc (LLEN,sp)
      001E77 0A 01            [ 1] 5604 	dec (WLEN,sp)
      001E79 26 F5            [ 1] 5605 	jrne 1$
      001E7B A6 46            [ 1] 5606 	ld a,#70
      001E7D 11 02            [ 1] 5607 	cp a,(LLEN,sp)
      001E7F 2B 09            [ 1] 5608 	jrmi 2$   
      001E81 A6 20            [ 1] 5609 	ld a,#SPACE 
      001E83 CD 01 C4         [ 4] 5610 	call putc 
      001E86 0C 02            [ 1] 5611 	inc (LLEN,sp) 
      001E88 20 07            [ 2] 5612 	jra 3$
      001E8A A6 0D            [ 1] 5613 2$: ld a,#CR 
      001E8C CD 01 C4         [ 4] 5614 	call putc 
      001E8F 0F 02            [ 1] 5615 	clr (LLEN,sp)
      001E91 72 A2 00 02      [ 2] 5616 3$:	subw y,#2 
      001E95 90 FE            [ 2] 5617 	ldw y,(y)
      001E97 26 CF            [ 1] 5618 	jrne 0$ 
      001E99 A6 0D            [ 1] 5619 	ld a,#CR 
      001E9B CD 01 C4         [ 4] 5620 	call putc  
      001E9E 5F               [ 1] 5621 	clrw x 
      001E9F 7B 03            [ 1] 5622 	ld a,(WCNT,sp)
      001EA1 97               [ 1] 5623 	ld xl,a 
      001EA2 CD 09 24         [ 4] 5624 	call print_int 
      001EA5 AE 1E AE         [ 2] 5625 	ldw x,#words_count_msg
      001EA8 CD 01 D7         [ 4] 5626 	call puts 
      001EAB                       5627 	_drop VSIZE 
      001EAB 5B 03            [ 2]    1     addw sp,#VSIZE 
      001EAD 81               [ 4] 5628 	ret 
      001EAE 20 77 6F 72 64 73 20  5629 words_count_msg: .asciz " words in dictionary\n"
             69 6E 20 64 69 63 74
             69 6F 6E 61 72 79 0A
             00
                                   5630 
                                   5631 
                                   5632 ;-----------------------------
                                   5633 ; BASIC: TIMER expr 
                                   5634 ; initialize count down timer 
                                   5635 ;-----------------------------
      001EC4                       5636 set_timer:
      001EC4 CD 0F 8E         [ 4] 5637 	call arg_list
      001EC7 A1 01            [ 1] 5638 	cp a,#1 
      001EC9 27 03            [ 1] 5639 	jreq 1$
      001ECB CC 07 95         [ 2] 5640 	jp syntax_error
      001ECE                       5641 1$: 
      001ECE 85               [ 2] 5642 	popw x 
      001ECF CF 00 10         [ 2] 5643 	ldw timer,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001ED2 81               [ 4] 5644 	ret 
                                   5645 
                                   5646 ;------------------------------
                                   5647 ; BASIC: TIMEOUT 
                                   5648 ; return state of timer 
                                   5649 ;------------------------------
      001ED3                       5650 timeout:
      001ED3 CE 00 10         [ 2] 5651 	ldw x,timer 
      001ED6                       5652 logical_complement:
      001ED6 53               [ 2] 5653 	cplw x 
      001ED7 A3 FF FF         [ 2] 5654 	cpw x,#-1
      001EDA 27 01            [ 1] 5655 	jreq 2$
      001EDC 5F               [ 1] 5656 	clrw x 
      001EDD A6 84            [ 1] 5657 2$:	ld a,#TK_INTGR
      001EDF 81               [ 4] 5658 	ret 
                                   5659 
                                   5660 ;--------------------------------
                                   5661 ; BASIC NOT(expr) 
                                   5662 ; return logical complement of expr
                                   5663 ;--------------------------------
      001EE0                       5664 func_not:
      001EE0 CD 0F 89         [ 4] 5665 	call func_args  
      001EE3 A1 01            [ 1] 5666 	cp a,#1
      001EE5 27 03            [ 1] 5667 	jreq 1$
      001EE7 CC 07 95         [ 2] 5668 	jp syntax_error
      001EEA 85               [ 2] 5669 1$:	popw x 
      001EEB 20 E9            [ 2] 5670 	jra logical_complement
                                   5671 
                                   5672 
                                   5673 
                                   5674 ;-----------------------------------
                                   5675 ; BASIC: IWDGEN expr1 
                                   5676 ; enable independant watchdog timer
                                   5677 ; expr1 is delay in multiple of 62.5µsec
                                   5678 ; expr1 -> {1..16383}
                                   5679 ;-----------------------------------
      001EED                       5680 enable_iwdg:
      001EED CD 0F 8E         [ 4] 5681 	call arg_list
      001EF0 A1 01            [ 1] 5682 	cp a,#1 
      001EF2 27 03            [ 1] 5683 	jreq 1$
      001EF4 CC 07 95         [ 2] 5684 	jp syntax_error 
      001EF7 85               [ 2] 5685 1$: popw x 
      001EF8 4B 00            [ 1] 5686 	push #0
      001EFA 35 CC 50 E0      [ 1] 5687 	mov IWDG_KR,#IWDG_KEY_ENABLE
      001EFE 9E               [ 1] 5688 	ld a,xh 
      001EFF A4 3F            [ 1] 5689 	and a,#0x3f
      001F01 95               [ 1] 5690 	ld xh,a  
      001F02 A3 00 FF         [ 2] 5691 2$:	cpw x,#255
      001F05 23 06            [ 2] 5692 	jrule 3$
      001F07 0C 01            [ 1] 5693 	inc (1,sp)
      001F09 98               [ 1] 5694 	rcf 
      001F0A 56               [ 2] 5695 	rrcw x 
      001F0B 20 F5            [ 2] 5696 	jra 2$
      001F0D 35 55 50 E0      [ 1] 5697 3$:	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001F11 84               [ 1] 5698 	pop a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      001F12 C7 50 E1         [ 1] 5699 	ld IWDG_PR,a 
      001F15 9F               [ 1] 5700 	ld a,xl
      001F16 4A               [ 1] 5701 	dec a 
      001F17 35 55 50 E0      [ 1] 5702 	mov IWDG_KR,#IWDG_KEY_ACCESS 
      001F1B C7 50 E2         [ 1] 5703 	ld IWDG_RLR,a 
      001F1E 35 AA 50 E0      [ 1] 5704 	mov IWDG_KR,#IWDG_KEY_REFRESH
      001F22 81               [ 4] 5705 	ret 
                                   5706 
                                   5707 
                                   5708 ;-----------------------------------
                                   5709 ; BASIC: IWDGREF  
                                   5710 ; refresh independant watchdog count down 
                                   5711 ; timer before it reset MCU. 
                                   5712 ;-----------------------------------
      001F23                       5713 refresh_iwdg:
      001F23 35 AA 50 E0      [ 1] 5714 	mov IWDG_KR,#IWDG_KEY_REFRESH 
      001F27 81               [ 4] 5715 	ret 
                                   5716 
                                   5717 
                                   5718 ;-------------------------------------
                                   5719 ; BASIC: LOG(expr)
                                   5720 ; return logarithm base 2 of expr 
                                   5721 ; this is the position of most significant
                                   5722 ; bit set. 
                                   5723 ; input: 
                                   5724 ; output:
                                   5725 ;   X     log2 
                                   5726 ;   A     TK_INTGR 
                                   5727 ;*********************************
      001F28                       5728 log2:
      001F28 CD 0F 89         [ 4] 5729 	call func_args 
      001F2B A1 01            [ 1] 5730 	cp a,#1 
      001F2D 27 03            [ 1] 5731 	jreq 1$
      001F2F CC 07 95         [ 2] 5732 	jp syntax_error 
      001F32 85               [ 2] 5733 1$: popw x 
      001F33                       5734 leading_one:
      001F33 5D               [ 2] 5735 	tnzw x 
      001F34 27 0A            [ 1] 5736 	jreq 4$
      001F36 A6 0F            [ 1] 5737 	ld a,#15 
      001F38 59               [ 2] 5738 2$: rlcw x 
      001F39 25 03            [ 1] 5739     jrc 3$
      001F3B 4A               [ 1] 5740 	dec a 
      001F3C 20 FA            [ 2] 5741 	jra 2$
      001F3E 5F               [ 1] 5742 3$: clrw x 
      001F3F 97               [ 1] 5743     ld xl,a
      001F40 A6 84            [ 1] 5744 4$:	ld a,#TK_INTGR
      001F42 81               [ 4] 5745 	ret 
                                   5746 
                                   5747 ;-----------------------------------
                                   5748 ; BASIC: BIT(expr) 
                                   5749 ; expr ->{0..15}
                                   5750 ; return 2^expr 
                                   5751 ; output:
                                   5752 ;    x    2^expr 
                                   5753 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001F43                       5754 bitmask:
      001F43 CD 0F 89         [ 4] 5755     call func_args 
      001F46 A1 01            [ 1] 5756 	cp a,#1
      001F48 27 03            [ 1] 5757 	jreq 1$
      001F4A CC 07 95         [ 2] 5758 	jp syntax_error 
      001F4D 85               [ 2] 5759 1$: popw x 
      001F4E 9F               [ 1] 5760 	ld a,xl 
      001F4F A4 0F            [ 1] 5761 	and a,#15
      001F51 5F               [ 1] 5762 	clrw x 
      001F52 5C               [ 2] 5763 	incw x 
      001F53 4D               [ 1] 5764 2$: tnz a 
      001F54 27 04            [ 1] 5765 	jreq 3$
      001F56 58               [ 2] 5766 	slaw x 
      001F57 4A               [ 1] 5767 	dec a 
      001F58 20 F9            [ 2] 5768 	jra 2$ 
      001F5A A6 84            [ 1] 5769 3$: ld a,#TK_INTGR
      001F5C 81               [ 4] 5770 	ret 
                                   5771 
                                   5772 ;------------------------------
                                   5773 ; BASIC: INVERT(expr)
                                   5774 ; 1's complement 
                                   5775 ;--------------------------------
      001F5D                       5776 invert:
      001F5D CD 0F 89         [ 4] 5777 	call func_args
      001F60 A1 01            [ 1] 5778 	cp a,#1 
      001F62 27 03            [ 1] 5779 	jreq 1$
      001F64 CC 07 95         [ 2] 5780 	jp syntax_error
      001F67 85               [ 2] 5781 1$: popw x  
      001F68 53               [ 2] 5782 	cplw x 
      001F69 A6 84            [ 1] 5783 	ld a,#TK_INTGR 
      001F6B 81               [ 4] 5784 	ret 
                                   5785 
                                   5786 ;------------------------------
                                   5787 ; BASIC: DO 
                                   5788 ; initiate a DO ... UNTIL loop 
                                   5789 ;------------------------------
                           000003  5790 	DOLP_ADR=3 
                           000005  5791 	DOLP_INW=5
                           000004  5792 	VSIZE=4 
      001F6C                       5793 do_loop:
      001F6C 85               [ 2] 5794 	popw x 
      001F6D                       5795 	_vars VSIZE 
      001F6D 52 04            [ 2]    1     sub sp,#VSIZE 
      001F6F 89               [ 2] 5796 	pushw x 
      001F70 90 CE 00 04      [ 2] 5797 	ldw y,basicptr 
      001F74 17 03            [ 2] 5798 	ldw (DOLP_ADR,sp),y
      001F76 90 CE 00 00      [ 2] 5799 	ldw y,in.w 
      001F7A 17 05            [ 2] 5800 	ldw (DOLP_INW,sp),y
      001F7C 72 5C 00 20      [ 1] 5801 	inc loop_depth 
      001F80 81               [ 4] 5802 	ret 
                                   5803 
                                   5804 ;--------------------------------
                                   5805 ; BASIC: UNTIL expr 
                                   5806 ; loop if exprssion is false 
                                   5807 ; else terminate loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   5808 ;--------------------------------
      001F81                       5809 until: 
      001F81 72 5D 00 20      [ 1] 5810 	tnz loop_depth 
      001F85 26 03            [ 1] 5811 	jrne 1$ 
      001F87 CC 07 95         [ 2] 5812 	jp syntax_error 
      001F8A                       5813 1$: 
      001F8A CD 10 CB         [ 4] 5814 	call relation 
      001F8D A1 84            [ 1] 5815 	cp a,#TK_INTGR
      001F8F 27 03            [ 1] 5816 	jreq 2$
      001F91 CC 07 95         [ 2] 5817 	jp syntax_error
      001F94                       5818 2$: 
      001F94 5D               [ 2] 5819 	tnzw x 
      001F95 26 10            [ 1] 5820 	jrne 9$
      001F97 1E 03            [ 2] 5821 	ldw x,(DOLP_ADR,sp)
      001F99 CF 00 04         [ 2] 5822 	ldw basicptr,x 
      001F9C E6 02            [ 1] 5823 	ld a,(2,x)
      001F9E C7 00 03         [ 1] 5824 	ld count,a 
      001FA1 1E 05            [ 2] 5825 	ldw x,(DOLP_INW,sp)
      001FA3 CF 00 00         [ 2] 5826 	ldw in.w,x 
      001FA6 81               [ 4] 5827 	ret 
      001FA7                       5828 9$:	; remove loop data from stack  
      001FA7 85               [ 2] 5829 	popw x
      001FA8                       5830 	_drop VSIZE
      001FA8 5B 04            [ 2]    1     addw sp,#VSIZE 
      001FAA 72 5A 00 20      [ 1] 5831 	dec loop_depth 
      001FAE FC               [ 2] 5832 	jp (x)
                                   5833 
                                   5834 ;--------------------------
                                   5835 ; BASIC: PRTA...PRTI  
                                   5836 ;  return constant value 
                                   5837 ;  PORT  offset in GPIO
                                   5838 ;  array
                                   5839 ;---------------------------
      001FAF                       5840 const_porta:
      001FAF AE 00 00         [ 2] 5841 	ldw x,#0
      001FB2 A6 84            [ 1] 5842 	ld a,#TK_INTGR 
      001FB4 81               [ 4] 5843 	ret 
      001FB5                       5844 const_portb:
      001FB5 AE 00 01         [ 2] 5845 	ldw x,#1
      001FB8 A6 84            [ 1] 5846 	ld a,#TK_INTGR 
      001FBA 81               [ 4] 5847 	ret 
      001FBB                       5848 const_portc:
      001FBB AE 00 02         [ 2] 5849 	ldw x,#2
      001FBE A6 84            [ 1] 5850 	ld a,#TK_INTGR 
      001FC0 81               [ 4] 5851 	ret 
      001FC1                       5852 const_portd:
      001FC1 AE 00 03         [ 2] 5853 	ldw x,#3
      001FC4 A6 84            [ 1] 5854 	ld a,#TK_INTGR 
      001FC6 81               [ 4] 5855 	ret 
      001FC7                       5856 const_porte:
      001FC7 AE 00 04         [ 2] 5857 	ldw x,#4
      001FCA A6 84            [ 1] 5858 	ld a,#TK_INTGR 
      001FCC 81               [ 4] 5859 	ret 
      001FCD                       5860 const_portf:
      001FCD AE 00 05         [ 2] 5861 	ldw x,#5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001FD0 A6 84            [ 1] 5862 	ld a,#TK_INTGR 
      001FD2 81               [ 4] 5863 	ret 
      001FD3                       5864 const_portg:
      001FD3 AE 00 06         [ 2] 5865 	ldw x,#6
      001FD6 A6 84            [ 1] 5866 	ld a,#TK_INTGR 
      001FD8 81               [ 4] 5867 	ret 
      001FD9                       5868 const_porth:
      001FD9 AE 00 07         [ 2] 5869 	ldw x,#7
      001FDC A6 84            [ 1] 5870 	ld a,#TK_INTGR 
      001FDE 81               [ 4] 5871 	ret 
      001FDF                       5872 const_porti:
      001FDF AE 00 08         [ 2] 5873 	ldw x,#8
      001FE2 A6 84            [ 1] 5874 	ld a,#TK_INTGR 
      001FE4 81               [ 4] 5875 	ret 
                                   5876 
                                   5877 ;-------------------------------
                                   5878 ; following return constant 
                                   5879 ; related to GPIO register offset 
                                   5880 ;---------------------------------
      001FE5                       5881 const_odr:
      001FE5 A6 84            [ 1] 5882 	ld a,#TK_INTGR 
      001FE7 AE 00 00         [ 2] 5883 	ldw x,#GPIO_ODR
      001FEA 81               [ 4] 5884 	ret 
      001FEB                       5885 const_idr:
      001FEB A6 84            [ 1] 5886 	ld a,#TK_INTGR 
      001FED AE 00 01         [ 2] 5887 	ldw x,#GPIO_IDR
      001FF0 81               [ 4] 5888 	ret 
      001FF1                       5889 const_ddr:
      001FF1 A6 84            [ 1] 5890 	ld a,#TK_INTGR 
      001FF3 AE 00 02         [ 2] 5891 	ldw x,#GPIO_DDR
      001FF6 81               [ 4] 5892 	ret 
      001FF7                       5893 const_cr1:
      001FF7 A6 84            [ 1] 5894 	ld a,#TK_INTGR 
      001FF9 AE 00 03         [ 2] 5895 	ldw x,#GPIO_CR1
      001FFC 81               [ 4] 5896 	ret 
      001FFD                       5897 const_cr2:
      001FFD A6 84            [ 1] 5898 	ld a,#TK_INTGR 
      001FFF AE 00 04         [ 2] 5899 	ldw x,#GPIO_CR2
      002002 81               [ 4] 5900 	ret 
                                   5901 ;-------------------------
                                   5902 ;  constant for port mode
                                   5903 ;  used by PMODE 
                                   5904 ;  input or output
                                   5905 ;------------------------
      002003                       5906 const_output:
      002003 A6 84            [ 1] 5907 	ld a,#TK_INTGR 
      002005 AE 00 01         [ 2] 5908 	ldw x,#OUTP
      002008 81               [ 4] 5909 	ret 
      002009                       5910 const_input:
      002009 A6 84            [ 1] 5911 	ld a,#TK_INTGR 
      00200B AE 00 00         [ 2] 5912 	ldw x,#INP 
      00200E 81               [ 4] 5913 	ret 
                                   5914 ;-----------------------
                                   5915 ; memory area constants
                                   5916 ;-----------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      00200F                       5917 const_eeprom_base:
      00200F A6 84            [ 1] 5918 	ld a,#TK_INTGR 
      002011 AE 40 00         [ 2] 5919 	ldw x,#EEPROM_BASE 
      002014 81               [ 4] 5920 	ret 
                                   5921 
                                   5922 ;---------------------------
                                   5923 ; BASIC: DATA 
                                   5924 ; when the interpreter find 
                                   5925 ; a DATA line it skip it.
                                   5926 ;---------------------------
      002015                       5927 data:
      002015 55 00 03 00 01   [ 1] 5928 	mov in,count 
      00201A 81               [ 4] 5929 	ret 
                                   5930 
                                   5931 ;---------------------------
                                   5932 ; BASIC: DATLN  *expr*
                                   5933 ; set DATA pointer at line# 
                                   5934 ; specified by *expr* 
                                   5935 ;---------------------------
      00201B                       5936 data_line:
      00201B CD 10 87         [ 4] 5937 	call expression
      00201E A1 84            [ 1] 5938 	cp a,#TK_INTGR
      002020 27 03            [ 1] 5939 	jreq 1$
      002022 CC 07 95         [ 2] 5940 	jp syntax_error 
      002025 CD 03 24         [ 4] 5941 1$: call search_lineno
      002028 5D               [ 2] 5942 	tnzw x 
      002029 26 05            [ 1] 5943 	jrne 3$
      00202B A6 05            [ 1] 5944 2$:	ld a,#ERR_NO_LINE 
      00202D CC 07 97         [ 2] 5945 	jp tb_error
      002030                       5946 3$: ; check if valid data line 
      002030 90 93            [ 1] 5947     ldw y,x 
      002032 EE 04            [ 2] 5948 	ldw x,(4,x)
      002034 A3 20 15         [ 2] 5949 	cpw x,#data 
      002037 26 F2            [ 1] 5950 	jrne 2$ 
      002039 90 CF 00 06      [ 2] 5951 	ldw data_ptr,y
      00203D 90 E6 02         [ 1] 5952 	ld a,(2,y)
      002040 C7 00 09         [ 1] 5953 	ld data_len,a 
      002043 35 06 00 08      [ 1] 5954 	mov data_ofs,#FIRST_DATA_ITEM 
      002047 81               [ 4] 5955 	ret
                                   5956 
                                   5957 ;---------------------------------
                                   5958 ; BASIC: RESTORE 
                                   5959 ; set data_ptr to first data line
                                   5960 ; if not DATA found pointer set to
                                   5961 ; zero 
                                   5962 ;---------------------------------
      002048                       5963 restore:
      002048 72 5F 00 06      [ 1] 5964 	clr data_ptr 
      00204C 72 5F 00 07      [ 1] 5965 	clr data_ptr+1
      002050 72 5F 00 08      [ 1] 5966 	clr data_ofs 
      002054 72 5F 00 09      [ 1] 5967 	clr data_len
      002058 CE 00 1C         [ 2] 5968 	ldw x,txtbgn
      00205B                       5969 data_search_loop: 	
      00205B C3 00 1E         [ 2] 5970 	cpw x,txtend
      00205E 24 17            [ 1] 5971 	jruge 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



      002060 90 93            [ 1] 5972 	ldw y,x 
      002062 EE 04            [ 2] 5973 	ldw x,(4,x)
      002064 A3 20 15         [ 2] 5974 	cpw x,#data 
      002067 26 1A            [ 1] 5975 	jrne try_next_line 
      002069 90 CF 00 06      [ 2] 5976 	ldw data_ptr,y 
      00206D 90 E6 02         [ 1] 5977 	ld a,(2,y)
      002070 C7 00 09         [ 1] 5978 	ld data_len,a 
      002073 35 06 00 08      [ 1] 5979 	mov data_ofs,#FIRST_DATA_ITEM
      002077 72 5D 00 09      [ 1] 5980 9$:	tnz data_len 
      00207B 26 05            [ 1] 5981     jrne 10$
      00207D A6 0C            [ 1] 5982 	ld a,#ERR_NO_DATA 
      00207F CC 07 97         [ 2] 5983 	jp tb_error 
      002082 81               [ 4] 5984 10$:ret
      002083                       5985 try_next_line:
      002083 93               [ 1] 5986 	ldw x,y 
      002084 E6 02            [ 1] 5987 	ld a,(2,x)
      002086 C7 00 0D         [ 1] 5988 	ld acc8,a 
      002089 72 5F 00 0C      [ 1] 5989 	clr acc16 
      00208D 72 BB 00 0C      [ 2] 5990 	addw x,acc16 
      002091 20 C8            [ 2] 5991 	jra data_search_loop
                                   5992 
                                   5993 
                                   5994 ;---------------------------------
                                   5995 ; BASIC: READ 
                                   5996 ; return next data item | 0 
                                   5997 ;---------------------------------
                           000001  5998 	CTX_BPTR=1 
                           000003  5999 	CTX_IN=3 
                           000004  6000 	CTX_COUNT=4 
                           000005  6001 	XSAVE=5
                           000006  6002 	VSIZE=6
      002093                       6003 read:
      002093                       6004 	_vars  VSIZE 
      002093 52 06            [ 2]    1     sub sp,#VSIZE 
      002095                       6005 read01:	
      002095 C6 00 08         [ 1] 6006 	ld a,data_ofs
      002098 C1 00 09         [ 1] 6007 	cp a,data_len 
      00209B 27 37            [ 1] 6008 	jreq 2$ ; end of line  
      00209D CD 14 38         [ 4] 6009 	call save_context
      0020A0 CE 00 06         [ 2] 6010 	ldw x,data_ptr 
      0020A3 CF 00 04         [ 2] 6011 	ldw basicptr,x 
      0020A6 55 00 08 00 01   [ 1] 6012 	mov in,data_ofs 
      0020AB 55 00 09 00 03   [ 1] 6013 	mov count,data_len  
      0020B0 CD 10 87         [ 4] 6014 	call expression 
      0020B3 A1 84            [ 1] 6015 	cp a,#TK_INTGR 
      0020B5 27 03            [ 1] 6016 	jreq 1$ 
      0020B7 CC 07 95         [ 2] 6017 	jp syntax_error 
      0020BA                       6018 1$:
      0020BA 1F 05            [ 2] 6019 	ldw (XSAVE,SP),x
      0020BC CD 08 87         [ 4] 6020 	call next_token ; skip comma
      0020BF CE 00 04         [ 2] 6021 	ldw x,basicptr 
      0020C2 CF 00 06         [ 2] 6022 	ldw data_ptr,x 
      0020C5 55 00 01 00 08   [ 1] 6023 	mov data_ofs,in 
      0020CA CD 14 48         [ 4] 6024 	call rest_context
      0020CD 1E 05            [ 2] 6025 	ldw x,(XSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



      0020CF A6 84            [ 1] 6026 	ld a,#TK_INTGR
      0020D1                       6027 	_drop VSIZE 
      0020D1 5B 06            [ 2]    1     addw sp,#VSIZE 
      0020D3 81               [ 4] 6028 	ret 
      0020D4                       6029 2$: ; end of line reached 
      0020D4 90 CE 00 06      [ 2] 6030 	ldw y, data_ptr 
      0020D8 72 5F 00 06      [ 1] 6031 	clr data_ptr
      0020DC 72 5F 00 07      [ 1] 6032 	clr data_ptr+1   
      0020E0 72 5F 00 08      [ 1] 6033 	clr data_ofs 
      0020E4 72 5F 00 09      [ 1] 6034 	clr data_len 
      0020E8 CD 20 83         [ 4] 6035 	call try_next_line 
      0020EB 20 A8            [ 2] 6036 	jra read01
                                   6037 
                                   6038 
                                   6039 ;---------------------------------
                                   6040 ; BASIC: SPIEN clkdiv, 0|1  
                                   6041 ; clkdiv -> {0..7} Fspi=Fclk/2^(n+1)
                                   6042 ; if clkdiv==-1 disable SPI
                                   6043 ; 0|1 -> disable|enable  
                                   6044 ;--------------------------------- 
                           000005  6045 SPI_CS_BIT=5
      0020ED                       6046 spi_enable:
      0020ED CD 0F 8E         [ 4] 6047 	call arg_list 
      0020F0 A1 02            [ 1] 6048 	cp a,#2
      0020F2 27 03            [ 1] 6049 	jreq 1$
      0020F4 CC 07 95         [ 2] 6050 	jp syntax_error 
      0020F7                       6051 1$: 
      0020F7 72 12 50 C7      [ 1] 6052 	bset CLK_PCKENR1,#CLK_PCKENR1_SPI ; enable clock signal 
      0020FB 85               [ 2] 6053 	popw x  
      0020FC 5D               [ 2] 6054 	tnzw x 
      0020FD 27 21            [ 1] 6055 	jreq spi_disable 
      0020FF 85               [ 2] 6056 	popw x 
      002100 A6 08            [ 1] 6057 	ld a,#(1<<SPI_CR1_BR)
      002102 42               [ 4] 6058 	mul x,a 
      002103 9F               [ 1] 6059 	ld a,xl 
      002104 C7 52 00         [ 1] 6060 	ld SPI_CR1,a 
                                   6061 ; configure ~CS on PE5 (D10 on CN8) as output. 
      002107 72 1A 50 14      [ 1] 6062 	bset PE_ODR,#SPI_CS_BIT	; set ~CS high  
      00210B 72 1A 50 16      [ 1] 6063 	bset PE_DDR,#SPI_CS_BIT  ; pin as output 
                                   6064 ; configure SPI as master mode 0.	
      00210F 72 14 52 00      [ 1] 6065 	bset SPI_CR1,#SPI_CR1_MSTR
                                   6066 ; ~CS line controlled by sofware 	
      002113 72 12 52 01      [ 1] 6067 	bset SPI_CR2,#SPI_CR2_SSM 
      002117 72 10 52 01      [ 1] 6068     bset SPI_CR2,#SPI_CR2_SSI 
                                   6069 ; enable SPI
      00211B 72 1C 52 00      [ 1] 6070 	bset SPI_CR1,#SPI_CR1_SPE 	
      00211F 81               [ 4] 6071 	ret 
      002120                       6072 spi_disable:
      002120                       6073 	_drop #2; throw first argument.
      002120 5B 02            [ 2]    1     addw sp,##2 
                                   6074 ; wait spi idle 
      002122 A6 82            [ 1] 6075 1$:	ld a,#0x82 
      002124 C4 52 03         [ 1] 6076 	and a,SPI_SR
      002127 A1 02            [ 1] 6077 	cp a,#2 
      002129 26 F7            [ 1] 6078 	jrne 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



      00212B 72 1D 52 00      [ 1] 6079 	bres SPI_CR1,#SPI_CR1_SPE
      00212F 72 13 50 C7      [ 1] 6080 	bres CLK_PCKENR1,#CLK_PCKENR1_SPI 
      002133 72 1B 50 16      [ 1] 6081 	bres PE_DDR,#SPI_CS_BIT 
      002137 81               [ 4] 6082 	ret 
                                   6083 
      002138                       6084 spi_clear_error:
      002138 A6 78            [ 1] 6085 	ld a,#0x78 
      00213A C5 52 03         [ 1] 6086 	bcp a,SPI_SR 
      00213D 27 04            [ 1] 6087 	jreq 1$
      00213F 72 5F 52 03      [ 1] 6088 	clr SPI_SR 
      002143 81               [ 4] 6089 1$: ret 
                                   6090 
      002144                       6091 spi_send_byte:
      002144 88               [ 1] 6092 	push a 
      002145 CD 21 38         [ 4] 6093 	call spi_clear_error
      002148 84               [ 1] 6094 	pop a 
      002149 72 03 52 03 FB   [ 2] 6095 	btjf SPI_SR,#SPI_SR_TXE,.
      00214E C7 52 04         [ 1] 6096 	ld SPI_DR,a
      002151 72 01 52 03 FB   [ 2] 6097 	btjf SPI_SR,#SPI_SR_RXNE,.  
      002156 C6 52 04         [ 1] 6098 	ld a,SPI_DR 
      002159 81               [ 4] 6099 	ret 
                                   6100 
      00215A                       6101 spi_rcv_byte:
      00215A A6 FF            [ 1] 6102 	ld a,#255
      00215C 72 01 52 03 E3   [ 2] 6103 	btjf SPI_SR,#SPI_SR_RXNE,spi_send_byte 
      002161 C6 52 04         [ 1] 6104 	ld a,SPI_DR 
      002164 81               [ 4] 6105 	ret
                                   6106 
                                   6107 ;------------------------------
                                   6108 ; BASIC: SPIWR byte [,byte]
                                   6109 ; write 1 or more byte
                                   6110 ;------------------------------
      002165                       6111 spi_write:
      002165 CD 10 87         [ 4] 6112 	call expression
      002168 A1 84            [ 1] 6113 	cp a,#TK_INTGR 
      00216A 27 03            [ 1] 6114 	jreq 1$
      00216C CC 07 95         [ 2] 6115 	jp syntax_error 
      00216F                       6116 1$:	
      00216F 9F               [ 1] 6117 	ld a,xl 
      002170 CD 21 44         [ 4] 6118 	call spi_send_byte 
      002173 CD 08 87         [ 4] 6119 	call next_token 
      002176 A1 09            [ 1] 6120 	cp a,#TK_COMMA 
      002178 26 02            [ 1] 6121 	jrne 2$ 
      00217A 20 E9            [ 2] 6122 	jra spi_write 
      00217C 4D               [ 1] 6123 2$:	tnz a 
      00217D 27 05            [ 1] 6124 	jreq 3$
      00217F                       6125 	_unget_token  
      00217F 55 00 02 00 01   [ 1]    1     mov in,in.saved
      002184 81               [ 4] 6126 3$:	ret 
                                   6127 
                                   6128 
                                   6129 ;-------------------------------
                                   6130 ; BASIC: SPIRD 	
                                   6131 ; read one byte from SPI 
                                   6132 ;-------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



      002185                       6133 spi_read:
      002185 CD 21 5A         [ 4] 6134 	call spi_rcv_byte 
      002188 5F               [ 1] 6135 	clrw x 
      002189 97               [ 1] 6136 	ld xl,a 
      00218A A6 84            [ 1] 6137 	ld a,#TK_INTGR 
      00218C 81               [ 4] 6138 	ret 
                                   6139 
                                   6140 ;------------------------------
                                   6141 ; BASIC: SPISEL 0|1 
                                   6142 ; set state of ~CS line
                                   6143 ; 0|1 deselect|select  
                                   6144 ;------------------------------
      00218D                       6145 spi_select:
      00218D CD 08 87         [ 4] 6146 	call next_token 
      002190 A1 84            [ 1] 6147 	cp a,#TK_INTGR 
      002192 27 03            [ 1] 6148 	jreq 1$
      002194 CC 07 95         [ 2] 6149 	jp syntax_error 
      002197 5D               [ 2] 6150 1$: tnzw x  
      002198 27 05            [ 1] 6151 	jreq cs_high 
      00219A 72 1B 50 14      [ 1] 6152 	bres PE_ODR,#SPI_CS_BIT
      00219E 81               [ 4] 6153 	ret 
      00219F                       6154 cs_high: 
      00219F 72 1A 50 14      [ 1] 6155 	bset PE_ODR,#SPI_CS_BIT
      0021A3 81               [ 4] 6156 	ret 
                                   6157 
                                   6158 
                                   6159 ;------------------------------
                                   6160 ; BASIC: FILERX
                                   6161 ; Use to receive a BASIC program
                                   6162 ; from the PC using XMODEM 
                                   6163 ; protocol. The file is store in
                                   6164 ; Each line received is compiled
                                   6165 ; then stored in RAM. When reception 
                                   6166 ; is completed with success  the 
                                   6167 ; program is ready to be executed 
                                   6168 ; or save as local file.
                                   6169 ;--------------------------------
      0021A4                       6170 file_receive:
      0021A4 72 01 00 23 05   [ 2] 6171 	btjf flags,#FRUN,1$
      0021A9 A6 07            [ 1] 6172 	ld a,#ERR_CMD_ONLY
      0021AB CC 07 97         [ 2] 6173 	jp tb_error 
      0021AE                       6174 1$:	
      0021AE CD 06 01         [ 4] 6175 	call clear_basic
      0021B1 CE 00 1C         [ 2] 6176 	ldw x, txtbgn
      0021B4 CD 00 00         [ 4] 6177 	call xreceive 
      0021B7 72 BB 00 1C      [ 2] 6178 	addw x,txtbgn 
      0021BB CF 00 1E         [ 2] 6179 	ldw txtend,x 
      0021BE CD 09 24         [ 4] 6180 	call print_int 
      0021C1 AE 21 C8         [ 2] 6181 	ldw x,#fsize_msg 
      0021C4 CD 01 D7         [ 4] 6182 	call puts 
      0021C7 81               [ 4] 6183 	ret 
      0021C8 20 62 79 74 65 73 20  6184 fsize_msg: .asciz " bytes received\n"
             72 65 63 65 69 76 65
             64 0A 00
                                   6185 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                   6186 ;------------------------------
                                   6187 ; BASIC: FILETX "file_name" 
                                   6188 ; Transmit the program in RAM 
                                   6189 ; To the PC using XMODEM protocol.
                                   6190 ; The file transmitted as source 
                                   6191 ; file not tokenized. 
                                   6192 ;-------------------------------
      0021D9                       6193 file_transmit:
                                   6194 
      0021D9 81               [ 4] 6195 	ret 
                                   6196 
                                   6197 
                                   6198 ;------------------------------
                                   6199 ;      dictionary 
                                   6200 ; format:
                                   6201 ;   link:   2 bytes 
                                   6202 ;   name_length+flags:  1 byte, bits 0:4 lenght,5:8 flags  
                                   6203 ;   cmd_name: 16 byte max 
                                   6204 ;   code_address: 2 bytes 
                                   6205 ;------------------------------
                                   6206 	.macro _dict_entry len,name,cmd 
                                   6207 	.word LINK 
                                   6208 	LINK=.
                                   6209 name:
                                   6210 	.byte len 	
                                   6211 	.ascii "name"
                                   6212 	.word cmd 
                                   6213 	.endm 
                                   6214 
                           000000  6215 	LINK=0
                                   6216 ; respect alphabetic order for BASIC names from Z-A
                                   6217 ; this sort order is for a cleaner WORDS cmd output. 	
      0021DA                       6218 kword_end:
      0021DA                       6219 	_dict_entry,5+F_IFUNC,XPEEK,xpeek 
      0021DA 00 00                    1 	.word LINK 
                           0021DC     2 	LINK=.
      0021DC                          3 XPEEK:
      0021DC 45                       4 	.byte 5+F_IFUNC 	
      0021DD 58 50 45 45 4B           5 	.ascii "XPEEK"
      0021E2 15 67                    6 	.word xpeek 
      0021E4                       6220 	_dict_entry,3+F_IFUNC,XOR,bit_xor
      0021E4 21 DC                    1 	.word LINK 
                           0021E6     2 	LINK=.
      0021E6                          3 XOR:
      0021E6 43                       4 	.byte 3+F_IFUNC 	
      0021E7 58 4F 52                 5 	.ascii "XOR"
      0021EA 1D 30                    6 	.word bit_xor 
      0021EC                       6221 	_dict_entry,5,WRITE,write  
      0021EC 21 E6                    1 	.word LINK 
                           0021EE     2 	LINK=.
      0021EE                          3 WRITE:
      0021EE 05                       4 	.byte 5 	
      0021EF 57 52 49 54 45           5 	.ascii "WRITE"
      0021F4 1B 55                    6 	.word write 
      0021F6                       6222 	_dict_entry,5,WORDS,words 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      0021F6 21 EE                    1 	.word LINK 
                           0021F8     2 	LINK=.
      0021F8                          3 WORDS:
      0021F8 05                       4 	.byte 5 	
      0021F9 57 4F 52 44 53           5 	.ascii "WORDS"
      0021FE 1E 5E                    6 	.word words 
      002200                       6223 	_dict_entry 4,WAIT,wait 
      002200 21 F8                    1 	.word LINK 
                           002202     2 	LINK=.
      002202                          3 WAIT:
      002202 04                       4 	.byte 4 	
      002203 57 41 49 54              5 	.ascii "WAIT"
      002207 14 CA                    6 	.word wait 
      002209                       6224 	_dict_entry,3+F_IFUNC,USR,usr
      002209 22 02                    1 	.word LINK 
                           00220B     2 	LINK=.
      00220B                          3 USR:
      00220B 43                       4 	.byte 3+F_IFUNC 	
      00220C 55 53 52                 5 	.ascii "USR"
      00220F 1C 01                    6 	.word usr 
      002211                       6225 	_dict_entry,5,UNTIL,until 
      002211 22 0B                    1 	.word LINK 
                           002213     2 	LINK=.
      002213                          3 UNTIL:
      002213 05                       4 	.byte 5 	
      002214 55 4E 54 49 4C           5 	.ascii "UNTIL"
      002219 1F 81                    6 	.word until 
      00221B                       6226 	_dict_entry,6+F_IFUNC,UFLASH,uflash 
      00221B 22 13                    1 	.word LINK 
                           00221D     2 	LINK=.
      00221D                          3 UFLASH:
      00221D 46                       4 	.byte 6+F_IFUNC 	
      00221E 55 46 4C 41 53 48        5 	.ascii "UFLASH"
      002224 1B FB                    6 	.word uflash 
      002226                       6227 	_dict_entry,6+F_IFUNC,UBOUND,ubound 
      002226 22 1D                    1 	.word LINK 
                           002228     2 	LINK=.
      002228                          3 UBOUND:
      002228 46                       4 	.byte 6+F_IFUNC 	
      002229 55 42 4F 55 4E 44        5 	.ascii "UBOUND"
      00222F 11 77                    6 	.word ubound 
      002231                       6228 	_dict_entry,4,TONE,tone  
      002231 22 28                    1 	.word LINK 
                           002233     2 	LINK=.
      002233                          3 TONE:
      002233 04                       4 	.byte 4 	
      002234 54 4F 4E 45              5 	.ascii "TONE"
      002238 17 29                    6 	.word tone 
      00223A                       6229 	_dict_entry,2,TO,to
      00223A 22 33                    1 	.word LINK 
                           00223C     2 	LINK=.
      00223C                          3 TO:
      00223C 02                       4 	.byte 2 	
      00223D 54 4F                    5 	.ascii "TO"
      00223F 15 C0                    6 	.word to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      002241                       6230 	_dict_entry,7+F_IFUNC,TIMEOUT,timeout 
      002241 22 3C                    1 	.word LINK 
                           002243     2 	LINK=.
      002243                          3 TIMEOUT:
      002243 47                       4 	.byte 7+F_IFUNC 	
      002244 54 49 4D 45 4F 55 54     5 	.ascii "TIMEOUT"
      00224B 1E D3                    6 	.word timeout 
      00224D                       6231 	_dict_entry,5,TIMER,set_timer
      00224D 22 43                    1 	.word LINK 
                           00224F     2 	LINK=.
      00224F                          3 TIMER:
      00224F 05                       4 	.byte 5 	
      002250 54 49 4D 45 52           5 	.ascii "TIMER"
      002255 1E C4                    6 	.word set_timer 
      002257                       6232 	_dict_entry,5+F_IFUNC,TICKS,get_ticks
      002257 22 4F                    1 	.word LINK 
                           002259     2 	LINK=.
      002259                          3 TICKS:
      002259 45                       4 	.byte 5+F_IFUNC 	
      00225A 54 49 43 4B 53           5 	.ascii "TICKS"
      00225F 1C E6                    6 	.word get_ticks 
      002261                       6233 	_dict_entry,4,STOP,stop 
      002261 22 59                    1 	.word LINK 
                           002263     2 	LINK=.
      002263                          3 STOP:
      002263 04                       4 	.byte 4 	
      002264 53 54 4F 50              5 	.ascii "STOP"
      002268 18 4D                    6 	.word stop 
      00226A                       6234 	_dict_entry,4,STEP,step 
      00226A 22 63                    1 	.word LINK 
                           00226C     2 	LINK=.
      00226C                          3 STEP:
      00226C 04                       4 	.byte 4 	
      00226D 53 54 45 50              5 	.ascii "STEP"
      002271 15 F0                    6 	.word step 
      002273                       6235 	_dict_entry,5,SPIWR,spi_write
      002273 22 6C                    1 	.word LINK 
                           002275     2 	LINK=.
      002275                          3 SPIWR:
      002275 05                       4 	.byte 5 	
      002276 53 50 49 57 52           5 	.ascii "SPIWR"
      00227B 21 65                    6 	.word spi_write 
      00227D                       6236 	_dict_entry,6,SPISEL,spi_select
      00227D 22 75                    1 	.word LINK 
                           00227F     2 	LINK=.
      00227F                          3 SPISEL:
      00227F 06                       4 	.byte 6 	
      002280 53 50 49 53 45 4C        5 	.ascii "SPISEL"
      002286 21 8D                    6 	.word spi_select 
      002288                       6237 	_dict_entry,5,SPIEN,spi_enable 
      002288 22 7F                    1 	.word LINK 
                           00228A     2 	LINK=.
      00228A                          3 SPIEN:
      00228A 05                       4 	.byte 5 	
      00228B 53 50 49 45 4E           5 	.ascii "SPIEN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      002290 20 ED                    6 	.word spi_enable 
      002292                       6238 	_dict_entry,5+F_IFUNC,SPIRD, spi_read 
      002292 22 8A                    1 	.word LINK 
                           002294     2 	LINK=.
      002294                          3 SPIRD:
      002294 45                       4 	.byte 5+F_IFUNC 	
      002295 53 50 49 52 44           5 	.ascii "SPIRD"
      00229A 21 85                    6 	.word spi_read 
      00229C                       6239 	_dict_entry,5,SLEEP,sleep 
      00229C 22 94                    1 	.word LINK 
                           00229E     2 	LINK=.
      00229E                          3 SLEEP:
      00229E 05                       4 	.byte 5 	
      00229F 53 4C 45 45 50           5 	.ascii "SLEEP"
      0022A4 1C 7F                    6 	.word sleep 
      0022A6                       6240 	_dict_entry,4+F_IFUNC,SIZE,size
      0022A6 22 9E                    1 	.word LINK 
                           0022A8     2 	LINK=.
      0022A8                          3 SIZE:
      0022A8 44                       4 	.byte 4+F_IFUNC 	
      0022A9 53 49 5A 45              5 	.ascii "SIZE"
      0022AD 11 6D                    6 	.word size 
      0022AF                       6241     _dict_entry,4,SHOW,show 
      0022AF 22 A8                    1 	.word LINK 
                           0022B1     2 	LINK=.
      0022B1                          3 SHOW:
      0022B1 04                       4 	.byte 4 	
      0022B2 53 48 4F 57              5 	.ascii "SHOW"
      0022B6 11 22                    6 	.word show 
      0022B8                       6242 	_dict_entry,4,SAVE,save
      0022B8 22 B1                    1 	.word LINK 
                           0022BA     2 	LINK=.
      0022BA                          3 SAVE:
      0022BA 04                       4 	.byte 4 	
      0022BB 53 41 56 45              5 	.ascii "SAVE"
      0022BF 19 5A                    6 	.word save 
      0022C1                       6243 	_dict_entry 3,RUN,run
      0022C1 22 BA                    1 	.word LINK 
                           0022C3     2 	LINK=.
      0022C3                          3 RUN:
      0022C3 03                       4 	.byte 3 	
      0022C4 52 55 4E                 5 	.ascii "RUN"
      0022C7 16 D0                    6 	.word run 
      0022C9                       6244 	_dict_entry,6+F_IFUNC,RSHIFT,rshift
      0022C9 22 C3                    1 	.word LINK 
                           0022CB     2 	LINK=.
      0022CB                          3 RSHIFT:
      0022CB 46                       4 	.byte 6+F_IFUNC 	
      0022CC 52 53 48 49 46 54        5 	.ascii "RSHIFT"
      0022D2 1D 61                    6 	.word rshift 
      0022D4                       6245 	_dict_entry,3+F_IFUNC,RND,random 
      0022D4 22 CB                    1 	.word LINK 
                           0022D6     2 	LINK=.
      0022D6                          3 RND:
      0022D6 43                       4 	.byte 3+F_IFUNC 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0022D7 52 4E 44                 5 	.ascii "RND"
      0022DA 1D F7                    6 	.word random 
      0022DC                       6246 	_dict_entry,6,RETURN,return 
      0022DC 22 D6                    1 	.word LINK 
                           0022DE     2 	LINK=.
      0022DE                          3 RETURN:
      0022DE 06                       4 	.byte 6 	
      0022DF 52 45 54 55 52 4E        5 	.ascii "RETURN"
      0022E5 16 B2                    6 	.word return 
      0022E7                       6247 	_dict_entry,7,RESTORE,restore 
      0022E7 22 DE                    1 	.word LINK 
                           0022E9     2 	LINK=.
      0022E9                          3 RESTORE:
      0022E9 07                       4 	.byte 7 	
      0022EA 52 45 53 54 4F 52 45     5 	.ascii "RESTORE"
      0022F1 20 48                    6 	.word restore 
      0022F3                       6248 	_dict_entry 6,REMARK,remark 
      0022F3 22 E9                    1 	.word LINK 
                           0022F5     2 	LINK=.
      0022F5                          3 REMARK:
      0022F5 06                       4 	.byte 6 	
      0022F6 52 45 4D 41 52 4B        5 	.ascii "REMARK"
      0022FC 14 C4                    6 	.word remark 
      0022FE                       6249 	_dict_entry,6,REBOOT,cold_start
      0022FE 22 F5                    1 	.word LINK 
                           002300     2 	LINK=.
      002300                          3 REBOOT:
      002300 06                       4 	.byte 6 	
      002301 52 45 42 4F 4F 54        5 	.ascii "REBOOT"
      002307 04 EF                    6 	.word cold_start 
      002309                       6250 	_dict_entry,4+F_IFUNC,READ,read  
      002309 23 00                    1 	.word LINK 
                           00230B     2 	LINK=.
      00230B                          3 READ:
      00230B 44                       4 	.byte 4+F_IFUNC 	
      00230C 52 45 41 44              5 	.ascii "READ"
      002310 20 93                    6 	.word read 
      002312                       6251 	_dict_entry,4+F_IFUNC,QKEY,qkey  
      002312 23 0B                    1 	.word LINK 
                           002314     2 	LINK=.
      002314                          3 QKEY:
      002314 44                       4 	.byte 4+F_IFUNC 	
      002315 51 4B 45 59              5 	.ascii "QKEY"
      002319 1B C6                    6 	.word qkey 
      00231B                       6252 	_dict_entry,4+F_IFUNC,PRTI,const_porti 
      00231B 23 14                    1 	.word LINK 
                           00231D     2 	LINK=.
      00231D                          3 PRTI:
      00231D 44                       4 	.byte 4+F_IFUNC 	
      00231E 50 52 54 49              5 	.ascii "PRTI"
      002322 1F DF                    6 	.word const_porti 
      002324                       6253 	_dict_entry,4+F_IFUNC,PRTH,const_porth 
      002324 23 1D                    1 	.word LINK 
                           002326     2 	LINK=.
      002326                          3 PRTH:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



      002326 44                       4 	.byte 4+F_IFUNC 	
      002327 50 52 54 48              5 	.ascii "PRTH"
      00232B 1F D9                    6 	.word const_porth 
      00232D                       6254 	_dict_entry,4+F_IFUNC,PRTG,const_portg 
      00232D 23 26                    1 	.word LINK 
                           00232F     2 	LINK=.
      00232F                          3 PRTG:
      00232F 44                       4 	.byte 4+F_IFUNC 	
      002330 50 52 54 47              5 	.ascii "PRTG"
      002334 1F D3                    6 	.word const_portg 
      002336                       6255 	_dict_entry,4+F_IFUNC,PRTF,const_portf
      002336 23 2F                    1 	.word LINK 
                           002338     2 	LINK=.
      002338                          3 PRTF:
      002338 44                       4 	.byte 4+F_IFUNC 	
      002339 50 52 54 46              5 	.ascii "PRTF"
      00233D 1F CD                    6 	.word const_portf 
      00233F                       6256 	_dict_entry,4+F_IFUNC,PRTE,const_porte
      00233F 23 38                    1 	.word LINK 
                           002341     2 	LINK=.
      002341                          3 PRTE:
      002341 44                       4 	.byte 4+F_IFUNC 	
      002342 50 52 54 45              5 	.ascii "PRTE"
      002346 1F C7                    6 	.word const_porte 
      002348                       6257 	_dict_entry,4+F_IFUNC,PRTD,const_portd
      002348 23 41                    1 	.word LINK 
                           00234A     2 	LINK=.
      00234A                          3 PRTD:
      00234A 44                       4 	.byte 4+F_IFUNC 	
      00234B 50 52 54 44              5 	.ascii "PRTD"
      00234F 1F C1                    6 	.word const_portd 
      002351                       6258 	_dict_entry,4+F_IFUNC,PRTC,const_portc
      002351 23 4A                    1 	.word LINK 
                           002353     2 	LINK=.
      002353                          3 PRTC:
      002353 44                       4 	.byte 4+F_IFUNC 	
      002354 50 52 54 43              5 	.ascii "PRTC"
      002358 1F BB                    6 	.word const_portc 
      00235A                       6259 	_dict_entry,4+F_IFUNC,PRTB,const_portb
      00235A 23 53                    1 	.word LINK 
                           00235C     2 	LINK=.
      00235C                          3 PRTB:
      00235C 44                       4 	.byte 4+F_IFUNC 	
      00235D 50 52 54 42              5 	.ascii "PRTB"
      002361 1F B5                    6 	.word const_portb 
      002363                       6260 	_dict_entry,4+F_IFUNC,PRTA,const_porta 
      002363 23 5C                    1 	.word LINK 
                           002365     2 	LINK=.
      002365                          3 PRTA:
      002365 44                       4 	.byte 4+F_IFUNC 	
      002366 50 52 54 41              5 	.ascii "PRTA"
      00236A 1F AF                    6 	.word const_porta 
      00236C                       6261 	_dict_entry 5,PRINT,print 
      00236C 23 65                    1 	.word LINK 
                           00236E     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00236E                          3 PRINT:
      00236E 05                       4 	.byte 5 	
      00236F 50 52 49 4E 54           5 	.ascii "PRINT"
      002374 13 C7                    6 	.word print 
      002376                       6262 	_dict_entry,4+F_IFUNC,POUT,const_output
      002376 23 6E                    1 	.word LINK 
                           002378     2 	LINK=.
      002378                          3 POUT:
      002378 44                       4 	.byte 4+F_IFUNC 	
      002379 50 4F 55 54              5 	.ascii "POUT"
      00237D 20 03                    6 	.word const_output 
      00237F                       6263 	_dict_entry,4,POKE,poke 
      00237F 23 78                    1 	.word LINK 
                           002381     2 	LINK=.
      002381                          3 POKE:
      002381 04                       4 	.byte 4 	
      002382 50 4F 4B 45              5 	.ascii "POKE"
      002386 15 47                    6 	.word poke 
      002388                       6264 	_dict_entry,4+F_IFUNC,PINP,const_input
      002388 23 81                    1 	.word LINK 
                           00238A     2 	LINK=.
      00238A                          3 PINP:
      00238A 44                       4 	.byte 4+F_IFUNC 	
      00238B 50 49 4E 50              5 	.ascii "PINP"
      00238F 20 09                    6 	.word const_input 
      002391                       6265 	_dict_entry,4+F_IFUNC,PEEK,peek 
      002391 23 8A                    1 	.word LINK 
                           002393     2 	LINK=.
      002393                          3 PEEK:
      002393 44                       4 	.byte 4+F_IFUNC 	
      002394 50 45 45 4B              5 	.ascii "PEEK"
      002398 15 56                    6 	.word peek 
      00239A                       6266 	_dict_entry,5,PMODE,pin_mode 
      00239A 23 93                    1 	.word LINK 
                           00239C     2 	LINK=.
      00239C                          3 PMODE:
      00239C 05                       4 	.byte 5 	
      00239D 50 4D 4F 44 45           5 	.ascii "PMODE"
      0023A2 1D 86                    6 	.word pin_mode 
      0023A4                       6267 	_dict_entry,5,PAUSE,pause 
      0023A4 23 9C                    1 	.word LINK 
                           0023A6     2 	LINK=.
      0023A6                          3 PAUSE:
      0023A6 05                       4 	.byte 5 	
      0023A7 50 41 55 53 45           5 	.ascii "PAUSE"
      0023AC 1C 8A                    6 	.word pause 
      0023AE                       6268 	_dict_entry,2+F_IFUNC,OR,bit_or
      0023AE 23 A6                    1 	.word LINK 
                           0023B0     2 	LINK=.
      0023B0                          3 OR:
      0023B0 42                       4 	.byte 2+F_IFUNC 	
      0023B1 4F 52                    5 	.ascii "OR"
      0023B3 1D 18                    6 	.word bit_or 
      0023B5                       6269 	_dict_entry,3+F_IFUNC,ODR,const_odr 
      0023B5 23 B0                    1 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



                           0023B7     2 	LINK=.
      0023B7                          3 ODR:
      0023B7 43                       4 	.byte 3+F_IFUNC 	
      0023B8 4F 44 52                 5 	.ascii "ODR"
      0023BB 1F E5                    6 	.word const_odr 
      0023BD                       6270 	_dict_entry,3+F_IFUNC,NOT,func_not 
      0023BD 23 B7                    1 	.word LINK 
                           0023BF     2 	LINK=.
      0023BF                          3 NOT:
      0023BF 43                       4 	.byte 3+F_IFUNC 	
      0023C0 4E 4F 54                 5 	.ascii "NOT"
      0023C3 1E E0                    6 	.word func_not 
      0023C5                       6271 	_dict_entry,3,NEW,new
      0023C5 23 BF                    1 	.word LINK 
                           0023C7     2 	LINK=.
      0023C7                          3 NEW:
      0023C7 03                       4 	.byte 3 	
      0023C8 4E 45 57                 5 	.ascii "NEW"
      0023CB 18 99                    6 	.word new 
      0023CD                       6272 	_dict_entry,4,NEXT,next 
      0023CD 23 C7                    1 	.word LINK 
                           0023CF     2 	LINK=.
      0023CF                          3 NEXT:
      0023CF 04                       4 	.byte 4 	
      0023D0 4E 45 58 54              5 	.ascii "NEXT"
      0023D4 16 17                    6 	.word next 
      0023D6                       6273 	_dict_entry,6+F_IFUNC,LSHIFT,lshift
      0023D6 23 CF                    1 	.word LINK 
                           0023D8     2 	LINK=.
      0023D8                          3 LSHIFT:
      0023D8 46                       4 	.byte 6+F_IFUNC 	
      0023D9 4C 53 48 49 46 54        5 	.ascii "LSHIFT"
      0023DF 1D 48                    6 	.word lshift 
      0023E1                       6274 	_dict_entry,3+F_IFUNC,LOG,log2 
      0023E1 23 D8                    1 	.word LINK 
                           0023E3     2 	LINK=.
      0023E3                          3 LOG:
      0023E3 43                       4 	.byte 3+F_IFUNC 	
      0023E4 4C 4F 47                 5 	.ascii "LOG"
      0023E7 1F 28                    6 	.word log2 
      0023E9                       6275 	_dict_entry,4,LOAD,load 
      0023E9 23 E3                    1 	.word LINK 
                           0023EB     2 	LINK=.
      0023EB                          3 LOAD:
      0023EB 04                       4 	.byte 4 	
      0023EC 4C 4F 41 44              5 	.ascii "LOAD"
      0023F0 1A 4A                    6 	.word load 
      0023F2                       6276 	_dict_entry 4,LIST,list
      0023F2 23 EB                    1 	.word LINK 
                           0023F4     2 	LINK=.
      0023F4                          3 LIST:
      0023F4 04                       4 	.byte 4 	
      0023F5 4C 49 53 54              5 	.ascii "LIST"
      0023F9 11 C4                    6 	.word list 
      0023FB                       6277 	_dict_entry 3,LET,let 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0023FB 23 F4                    1 	.word LINK 
                           0023FD     2 	LINK=.
      0023FD                          3 LET:
      0023FD 03                       4 	.byte 3 	
      0023FE 4C 45 54                 5 	.ascii "LET"
      002401 11 99                    6 	.word let 
      002403                       6278 	_dict_entry,3+F_IFUNC,KEY,key 
      002403 23 FD                    1 	.word LINK 
                           002405     2 	LINK=.
      002405                          3 KEY:
      002405 43                       4 	.byte 3+F_IFUNC 	
      002406 4B 45 59                 5 	.ascii "KEY"
      002409 1B BE                    6 	.word key 
      00240B                       6279 	_dict_entry,7,IWDGREF,refresh_iwdg
      00240B 24 05                    1 	.word LINK 
                           00240D     2 	LINK=.
      00240D                          3 IWDGREF:
      00240D 07                       4 	.byte 7 	
      00240E 49 57 44 47 52 45 46     5 	.ascii "IWDGREF"
      002415 1F 23                    6 	.word refresh_iwdg 
      002417                       6280 	_dict_entry,6,IWDGEN,enable_iwdg
      002417 24 0D                    1 	.word LINK 
                           002419     2 	LINK=.
      002419                          3 IWDGEN:
      002419 06                       4 	.byte 6 	
      00241A 49 57 44 47 45 4E        5 	.ascii "IWDGEN"
      002420 1E ED                    6 	.word enable_iwdg 
      002422                       6281 	_dict_entry,6+F_IFUNC,INVERT,invert 
      002422 24 19                    1 	.word LINK 
                           002424     2 	LINK=.
      002424                          3 INVERT:
      002424 46                       4 	.byte 6+F_IFUNC 	
      002425 49 4E 56 45 52 54        5 	.ascii "INVERT"
      00242B 1F 5D                    6 	.word invert 
      00242D                       6282 	_dict_entry,5,INPUT,input_var  
      00242D 24 24                    1 	.word LINK 
                           00242F     2 	LINK=.
      00242F                          3 INPUT:
      00242F 05                       4 	.byte 5 	
      002430 49 4E 50 55 54           5 	.ascii "INPUT"
      002435 14 58                    6 	.word input_var 
      002437                       6283 	_dict_entry,2,IF,if 
      002437 24 2F                    1 	.word LINK 
                           002439     2 	LINK=.
      002439                          3 IF:
      002439 02                       4 	.byte 2 	
      00243A 49 46                    5 	.ascii "IF"
      00243C 15 83                    6 	.word if 
      00243E                       6284 	_dict_entry,3+F_IFUNC,IDR,const_idr 
      00243E 24 39                    1 	.word LINK 
                           002440     2 	LINK=.
      002440                          3 IDR:
      002440 43                       4 	.byte 3+F_IFUNC 	
      002441 49 44 52                 5 	.ascii "IDR"
      002444 1F EB                    6 	.word const_idr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002446                       6285 	_dict_entry,3,HEX,hex_base
      002446 24 40                    1 	.word LINK 
                           002448     2 	LINK=.
      002448                          3 HEX:
      002448 03                       4 	.byte 3 	
      002449 48 45 58                 5 	.ascii "HEX"
      00244C 11 63                    6 	.word hex_base 
      00244E                       6286 	_dict_entry,4+F_IFUNC,GPIO,gpio 
      00244E 24 48                    1 	.word LINK 
                           002450     2 	LINK=.
      002450                          3 GPIO:
      002450 44                       4 	.byte 4+F_IFUNC 	
      002451 47 50 49 4F              5 	.ascii "GPIO"
      002455 1B D1                    6 	.word gpio 
      002457                       6287 	_dict_entry,4,GOTO,goto 
      002457 24 50                    1 	.word LINK 
                           002459     2 	LINK=.
      002459                          3 GOTO:
      002459 04                       4 	.byte 4 	
      00245A 47 4F 54 4F              5 	.ascii "GOTO"
      00245E 16 77                    6 	.word goto 
      002460                       6288 	_dict_entry,5,GOSUB,gosub 
      002460 24 59                    1 	.word LINK 
                           002462     2 	LINK=.
      002462                          3 GOSUB:
      002462 05                       4 	.byte 5 	
      002463 47 4F 53 55 42           5 	.ascii "GOSUB"
      002468 16 92                    6 	.word gosub 
      00246A                       6289 	_dict_entry,6,FORGET,forget 
      00246A 24 62                    1 	.word LINK 
                           00246C     2 	LINK=.
      00246C                          3 FORGET:
      00246C 06                       4 	.byte 6 	
      00246D 46 4F 52 47 45 54        5 	.ascii "FORGET"
      002473 1A 7A                    6 	.word forget 
      002475                       6290 	_dict_entry,3,FOR,for 
      002475 24 6C                    1 	.word LINK 
                           002477     2 	LINK=.
      002477                          3 FOR:
      002477 03                       4 	.byte 3 	
      002478 46 4F 52                 5 	.ascii "FOR"
      00247B 15 97                    6 	.word for 
      00247D                       6291 	_dict_entry,6,FILETX,file_transmit
      00247D 24 77                    1 	.word LINK 
                           00247F     2 	LINK=.
      00247F                          3 FILETX:
      00247F 06                       4 	.byte 6 	
      002480 46 49 4C 45 54 58        5 	.ascii "FILETX"
      002486 21 D9                    6 	.word file_transmit 
      002488                       6292 	_dict_entry,6,FILERX,file_receive 
      002488 24 7F                    1 	.word LINK 
                           00248A     2 	LINK=.
      00248A                          3 FILERX:
      00248A 06                       4 	.byte 6 	
      00248B 46 49 4C 45 52 58        5 	.ascii "FILERX"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002491 21 A4                    6 	.word file_receive 
      002493                       6293 	_dict_entry,4,FCPU,fcpu 
      002493 24 8A                    1 	.word LINK 
                           002495     2 	LINK=.
      002495                          3 FCPU:
      002495 04                       4 	.byte 4 	
      002496 46 43 50 55              5 	.ascii "FCPU"
      00249A 1D 7A                    6 	.word fcpu 
      00249C                       6294 	_dict_entry,6+F_IFUNC,EEPROM,const_eeprom_base   
      00249C 24 95                    1 	.word LINK 
                           00249E     2 	LINK=.
      00249E                          3 EEPROM:
      00249E 46                       4 	.byte 6+F_IFUNC 	
      00249F 45 45 50 52 4F 4D        5 	.ascii "EEPROM"
      0024A5 20 0F                    6 	.word const_eeprom_base 
      0024A7                       6295 	_dict_entry,3,END,cmd_end  
      0024A7 24 9E                    1 	.word LINK 
                           0024A9     2 	LINK=.
      0024A9                          3 END:
      0024A9 03                       4 	.byte 3 	
      0024AA 45 4E 44                 5 	.ascii "END"
      0024AD 17 22                    6 	.word cmd_end 
      0024AF                       6296 	_dict_entry,6+F_CMD,DWRITE,digital_write
      0024AF 24 A9                    1 	.word LINK 
                           0024B1     2 	LINK=.
      0024B1                          3 DWRITE:
      0024B1 06                       4 	.byte 6+F_CMD 	
      0024B2 44 57 52 49 54 45        5 	.ascii "DWRITE"
      0024B8 18 12                    6 	.word digital_write 
      0024BA                       6297 	_dict_entry,5+F_IFUNC,DREAD,digital_read
      0024BA 24 B1                    1 	.word LINK 
                           0024BC     2 	LINK=.
      0024BC                          3 DREAD:
      0024BC 45                       4 	.byte 5+F_IFUNC 	
      0024BD 44 52 45 41 44           5 	.ascii "DREAD"
      0024C2 17 E2                    6 	.word digital_read 
      0024C4                       6298 	_dict_entry,2,DO,do_loop
      0024C4 24 BC                    1 	.word LINK 
                           0024C6     2 	LINK=.
      0024C6                          3 DO:
      0024C6 02                       4 	.byte 2 	
      0024C7 44 4F                    5 	.ascii "DO"
      0024C9 1F 6C                    6 	.word do_loop 
      0024CB                       6299 	_dict_entry,3,DIR,directory 
      0024CB 24 C6                    1 	.word LINK 
                           0024CD     2 	LINK=.
      0024CD                          3 DIR:
      0024CD 03                       4 	.byte 3 	
      0024CE 44 49 52                 5 	.ascii "DIR"
      0024D1 1A BF                    6 	.word directory 
      0024D3                       6300 	_dict_entry,3,DEC,dec_base
      0024D3 24 CD                    1 	.word LINK 
                           0024D5     2 	LINK=.
      0024D5                          3 DEC:
      0024D5 03                       4 	.byte 3 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0024D6 44 45 43                 5 	.ascii "DEC"
      0024D9 11 68                    6 	.word dec_base 
      0024DB                       6301 	_dict_entry,3+F_IFUNC,DDR,const_ddr 
      0024DB 24 D5                    1 	.word LINK 
                           0024DD     2 	LINK=.
      0024DD                          3 DDR:
      0024DD 43                       4 	.byte 3+F_IFUNC 	
      0024DE 44 44 52                 5 	.ascii "DDR"
      0024E1 1F F1                    6 	.word const_ddr 
      0024E3                       6302 	_dict_entry,6,DATALN,data_line  
      0024E3 24 DD                    1 	.word LINK 
                           0024E5     2 	LINK=.
      0024E5                          3 DATALN:
      0024E5 06                       4 	.byte 6 	
      0024E6 44 41 54 41 4C 4E        5 	.ascii "DATALN"
      0024EC 20 1B                    6 	.word data_line 
      0024EE                       6303 	_dict_entry,4,DATA,data  
      0024EE 24 E5                    1 	.word LINK 
                           0024F0     2 	LINK=.
      0024F0                          3 DATA:
      0024F0 04                       4 	.byte 4 	
      0024F1 44 41 54 41              5 	.ascii "DATA"
      0024F5 20 15                    6 	.word data 
      0024F7                       6304 	_dict_entry,3+F_IFUNC,CRL,const_cr1 
      0024F7 24 F0                    1 	.word LINK 
                           0024F9     2 	LINK=.
      0024F9                          3 CRL:
      0024F9 43                       4 	.byte 3+F_IFUNC 	
      0024FA 43 52 4C                 5 	.ascii "CRL"
      0024FD 1F F7                    6 	.word const_cr1 
      0024FF                       6305 	_dict_entry,3+F_IFUNC,CRH,const_cr2 
      0024FF 24 F9                    1 	.word LINK 
                           002501     2 	LINK=.
      002501                          3 CRH:
      002501 43                       4 	.byte 3+F_IFUNC 	
      002502 43 52 48                 5 	.ascii "CRH"
      002505 1F FD                    6 	.word const_cr2 
      002507                       6306 	_dict_entry,4+F_CFUNC,CHAR,char
      002507 25 01                    1 	.word LINK 
                           002509     2 	LINK=.
      002509                          3 CHAR:
      002509 84                       4 	.byte 4+F_CFUNC 	
      00250A 43 48 41 52              5 	.ascii "CHAR"
      00250E 1B 8C                    6 	.word char 
      002510                       6307 	_dict_entry,3,BYE,bye 
      002510 25 09                    1 	.word LINK 
                           002512     2 	LINK=.
      002512                          3 BYE:
      002512 03                       4 	.byte 3 	
      002513 42 59 45                 5 	.ascii "BYE"
      002516 1C 1E                    6 	.word bye 
      002518                       6308 	_dict_entry,5,BTOGL,bit_toggle
      002518 25 12                    1 	.word LINK 
                           00251A     2 	LINK=.
      00251A                          3 BTOGL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      00251A 05                       4 	.byte 5 	
      00251B 42 54 4F 47 4C           5 	.ascii "BTOGL"
      002520 15 10                    6 	.word bit_toggle 
      002522                       6309 	_dict_entry,5+F_IFUNC,BTEST,bit_test 
      002522 25 1A                    1 	.word LINK 
                           002524     2 	LINK=.
      002524                          3 BTEST:
      002524 45                       4 	.byte 5+F_IFUNC 	
      002525 42 54 45 53 54           5 	.ascii "BTEST"
      00252A 15 20                    6 	.word bit_test 
      00252C                       6310 	_dict_entry,4,BSET,bit_set 
      00252C 25 24                    1 	.word LINK 
                           00252E     2 	LINK=.
      00252E                          3 BSET:
      00252E 04                       4 	.byte 4 	
      00252F 42 53 45 54              5 	.ascii "BSET"
      002533 14 EF                    6 	.word bit_set 
      002535                       6311 	_dict_entry,4,BRES,bit_reset
      002535 25 2E                    1 	.word LINK 
                           002537     2 	LINK=.
      002537                          3 BRES:
      002537 04                       4 	.byte 4 	
      002538 42 52 45 53              5 	.ascii "BRES"
      00253C 14 FF                    6 	.word bit_reset 
      00253E                       6312 	_dict_entry,3+F_IFUNC,BIT,bitmask
      00253E 25 37                    1 	.word LINK 
                           002540     2 	LINK=.
      002540                          3 BIT:
      002540 43                       4 	.byte 3+F_IFUNC 	
      002541 42 49 54                 5 	.ascii "BIT"
      002544 1F 43                    6 	.word bitmask 
      002546                       6313 	_dict_entry,3,AWU,awu 
      002546 25 40                    1 	.word LINK 
                           002548     2 	LINK=.
      002548                          3 AWU:
      002548 03                       4 	.byte 3 	
      002549 41 57 55                 5 	.ascii "AWU"
      00254C 1C 9D                    6 	.word awu 
      00254E                       6314 	_dict_entry,7,AUTORUN,autorun
      00254E 25 48                    1 	.word LINK 
                           002550     2 	LINK=.
      002550                          3 AUTORUN:
      002550 07                       4 	.byte 7 	
      002551 41 55 54 4F 52 55 4E     5 	.ascii "AUTORUN"
      002558 1C 27                    6 	.word autorun 
      00255A                       6315 	_dict_entry,3+F_IFUNC,ASC,ascii
      00255A 25 50                    1 	.word LINK 
                           00255C     2 	LINK=.
      00255C                          3 ASC:
      00255C 43                       4 	.byte 3+F_IFUNC 	
      00255D 41 53 43                 5 	.ascii "ASC"
      002560 1B 9E                    6 	.word ascii 
      002562                       6316 	_dict_entry,3+F_IFUNC,AND,bit_and
      002562 25 5C                    1 	.word LINK 
                           002564     2 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



      002564                          3 AND:
      002564 43                       4 	.byte 3+F_IFUNC 	
      002565 41 4E 44                 5 	.ascii "AND"
      002568 1D 00                    6 	.word bit_and 
      00256A                       6317 	_dict_entry,7+F_IFUNC,ADCREAD,analog_read
      00256A 25 64                    1 	.word LINK 
                           00256C     2 	LINK=.
      00256C                          3 ADCREAD:
      00256C 47                       4 	.byte 7+F_IFUNC 	
      00256D 41 44 43 52 45 41 44     5 	.ascii "ADCREAD"
      002574 17 AE                    6 	.word analog_read 
      002576                       6318 	_dict_entry,5,ADCON,power_adc 
      002576 25 6C                    1 	.word LINK 
                           002578     2 	LINK=.
      002578                          3 ADCON:
      002578 05                       4 	.byte 5 	
      002579 41 44 43 4F 4E           5 	.ascii "ADCON"
      00257E 17 72                    6 	.word power_adc 
      002580                       6319 kword_dict:
      002580                       6320 	_dict_entry,3+F_IFUNC,ABS,abs
      002580 25 78                    1 	.word LINK 
                           002582     2 	LINK=.
      002582                          3 ABS:
      002582 43                       4 	.byte 3+F_IFUNC 	
      002583 41 42 53                 5 	.ascii "ABS"
      002586 1C EC                    6 	.word abs 
                                   6321 	
                                   6322 
      002600                       6323 	.bndry 128 ; align on FLASH block.
                                   6324 ; free space for user application  
      002600                       6325 user_space:
                                   6326 ; USR() function test
      002600 89               [ 2] 6327 	pushw x 
      002601 72 1A 50 0A      [ 1] 6328 	bset PC_ODR,#5 
      002605 85               [ 2] 6329 	popw x 
      002606 CD 1C 94         [ 4] 6330 	call pause02 
      002609 72 1B 50 0A      [ 1] 6331 	bres PC_ODR,#5 
      00260D 81               [ 4] 6332 	ret
                                   6333 
                                   6334 	.area FLASH_DRIVE (ABS)
      010000                       6335 	.org 0x10000
      010000                       6336 fdrive:
                                   6337 ;.byte 0,0,0,0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   5 ABS        002582 R   |     ACK     =  000006 
  5 ADCON      002578 R   |   5 ADCREAD    00256C R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDR    =  000001     |     ADD_SPAC=  000003     |     ADR     =  000002 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  5 AND        002564 R   |     AREG    =  000002     |     ARG_OFS =  000002 
  5 ASC        00255C R   |     ATTRIB  =  000002     |   5 AUTORUN    002550 R
    AUTORUN_=  004000     |   5 AWU        002548 R   |   5 AWUHandl   000001 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
    B19200  =  000003     |     B1_MASK =  000002     |     B230400 =  000007 
    B2400   =  000000     |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
    B4_MASK =  000010     |     B57600  =  000005     |     B5_MASK =  000020 
    B6_MASK =  000040     |     B7_MASK =  000080     |     B921600 =  000009 
    B9600   =  000002     |     BASE    =  000002     |     BASE_SAV=  000001 
    BCNT    =  000001     |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00000F     |     BELL    =  000007 
    BINARY  =  000001     |   5 BIT        002540 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |     BPTR    =  00000B     |   5 BRES       002537 R
    BS      =  000008     |     BSAVE   =  000001     |   5 BSET       00252E R
    BSIZE   =  000001     |   5 BTEST      002524 R   |   5 BTOGL      00251A R
    BTW     =  000001     |   5 BYE        002512 R   |     C       =  000001 
    CAN     =  000018     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELL_SIZ=  000002 
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  5 CHAR       002509 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]

Symbol Table

    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |     CMD_END =  000002     |     CNT     =  000006 
    COMMA   =  000001     |     COUNT   =  000001     |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |     CR      =  00000D     |   5 CRH        002501 R
  5 CRL        0024F9 R   |     CTRL_A  =  000001     |     CTRL_B  =  000002 
    CTRL_C  =  000003     |     CTRL_D  =  000004     |     CTRL_E  =  000005 
    CTRL_F  =  000006     |     CTRL_G  =  000007     |     CTRL_H  =  000008 
    CTRL_I  =  000009     |     CTRL_J  =  00000A     |     CTRL_K  =  00000B 
    CTRL_L  =  00000C     |     CTRL_M  =  00000D     |     CTRL_N  =  00000E 
    CTRL_O  =  00000F     |     CTRL_P  =  000010     |     CTRL_Q  =  000011 
    CTRL_R  =  000012     |     CTRL_S  =  000013     |     CTRL_T  =  000014 
    CTRL_U  =  000015     |     CTRL_V  =  000016     |     CTRL_W  =  000017 
    CTRL_X  =  000018     |     CTRL_Y  =  000019     |     CTRL_Z  =  00001A 
    CTXT_SIZ=  000004     |     CTX_BPTR=  000001     |     CTX_COUN=  000004 
    CTX_IN  =  000003     |     CURR    =  000002     |     CVAR    =  000007 
    CX_BPTR =  000001     |     CX_CNT  =  000004     |     CX_IN   =  000003 
  5 DATA       0024F0 R   |   5 DATALN     0024E5 R   |     DBG_A   =  000005 
    DBG_CC  =  000006     |     DBG_X   =  000003     |     DBG_Y   =  000001 
    DC1     =  000011     |     DC2     =  000012     |     DC3     =  000013 
    DC4     =  000014     |   5 DDR        0024DD R   |     DEBUG   =  000000 
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   5 DEC        0024D5 R
    DEST    =  000001     |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  5 DIR        0024CD R   |     DIVIDND =  000007     |     DIVISR  =  000005 
    DIVSOR  =  000001     |     DLE     =  000010     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   5 DO         0024C6 R   |     DOLP_ADR=  000003 
    DOLP_INW=  000005     |   5 DREAD      0024BC R   |   5 DWRITE     0024B1 R
  5 EEPROM     00249E R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |     EM      =  000019     |   5 END        0024A9 R
    ENQ     =  000005     |     EOF     =  0000FF     |     EOT     =  000004 
    ERR_BAD_=  00000A     |     ERR_BUF_=  00000F     |     ERR_CMD_=  000007 
    ERR_DIV0=  000004     |     ERR_DUPL=  000008     |     ERR_MATH=  000003 
    ERR_MEM_=  000001     |     ERR_NONE=  000000     |     ERR_NOT_=  000009 
    ERR_NO_A=  00000B     |     ERR_NO_D=  00000C     |     ERR_NO_F=  00000E 
    ERR_NO_L=  000005     |     ERR_NO_P=  00000D     |     ERR_RUN_=  000006 
    ERR_SYNT=  000002     |     ESC     =  00001B     |     ETB     =  000017 
    ETX     =  000003     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]

Symbol Table

    FAUTORUN=  000006     |     FBREAK  =  000004     |     FCOMP   =  000005 
  5 FCPU       002495 R   |     FF      =  00000C     |     FHSE    =  7A1200 
    FHSI    =  F42400     |   5 FILERX     00248A R   |   5 FILETX     00247F R
    FIRST   =  000001     |     FIRST_DA=  000006     |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLOOP   =  000002 
    FLSI    =  01F400     |   5 FOR        002477 R   |   5 FORGET     00246C R
    FRUN    =  000000     |     FS      =  00001C     |     FSIZE   =  000001 
    FSLEEP  =  000003     |     FSTEP   =  000003     |     FTRAP   =  000001 
    F_CFUNC =  000080     |     F_CMD   =  000000     |     F_CONST =  0000C0 
    F_IFUNC =  000040     |   5 GOSUB      002462 R   |   5 GOTO       002459 R
  5 GPIO       002450 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |     GS      =  00001D 
  5 HEX        002448 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   5 IDR        002440 R
  5 IF         002439 R   |     IN      =  000005     |     INCR    =  000001 
    INP     =  000000     |   5 INPUT      00242F R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   5 INVERT     002424 R   |     INW     =  000009 
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |   5 IWDGEN     002419 R
  5 IWDGREF    00240D R   |     IWDG_KEY=  000055     |     IWDG_KEY=  0000CC 
    IWDG_KEY=  0000AA     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   5 KEY        002405 R   |     LAST    =  000003 
    LB      =  000002     |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |     LEN     =  000005     |   5 LET        0023FD R
    LF      =  00000A     |     LIMIT   =  000005     |     LINENO  =  000005 
  5 LINK    =  002582 R   |   5 LIST       0023F4 R   |     LL      =  000002 
    LLEN    =  000002     |     LL_HB   =  000001     |     LN_PTR  =  000005 
  5 LOAD       0023EB R   |   5 LOG        0023E3 R   |   5 LSHIFT     0023D8 R
    MAJOR   =  000001     |     MASK    =  000002     |     MATH_OVF=  000000 
    MAX_LINE=  007FFF     |     MINOR   =  000000     |     MULOP   =  000005 
    N1      =  000001     |     N1_HB   =  000006     |     N1_LB   =  000007 
    N2      =  000003     |     N2_HB   =  000008     |     N2_LB   =  000009 
    NAFR    =  004804     |     NAK     =  000015     |     NAMEPTR =  000003 
    NCLKOPT =  004808     |     NEG     =  000001     |   5 NEW        0023C7 R
  5 NEXT       0023CF R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NLEN    =  000001     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  5 NOT        0023BF R   |     NUBC    =  004802     |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   5 NonHandl   000000 R   |   5 ODR        0023B7 R
    ONOFF   =  000003     |     OP      =  000005     |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  5 OR         0023B0 R   |     OUTP    =  000001     |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
    OVFH    =  000001     |     OVFL    =  000002     |     PA      =  000000 
    PAD_SIZE=  000080     |   5 PAUSE      0023A6 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]

Symbol Table

    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
  5 PEEK       002393 R   |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PINNO   =  000001 
  5 PINP       00238A R   |     PINVAL  =  000002     |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   5 PMODE      00239C R
  5 POKE       002381 R   |     PORT    =  000003     |   5 POUT       002378 R
    PREV    =  000001     |   5 PRINT      00236E R   |     PROD    =  000002 
  5 PRTA       002365 R   |   5 PRTB       00235C R   |   5 PRTC       002353 R
  5 PRTD       00234A R   |   5 PRTE       002341 R   |   5 PRTF       002338 R
  5 PRTG       00232F R   |   5 PRTH       002326 R   |   5 PRTI       00231D R
  5 QKEY       002314 R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   5 READ       00230B R   |   5 REBOOT     002300 R
    REG     =  000001     |     RELOP   =  000005     |   5 REMARK     0022F5 R
  5 RESTORE    0022E9 R   |     RETL1   =  000001     |   5 RETURN     0022DE R
    RET_ADDR=  000003     |     RET_INW =  000005     |   5 RND        0022D6 R
    ROP     =  004800     |     RS      =  00001E     |   5 RSHIFT     0022CB R
    RST_SR  =  0050B3     |   5 RUN        0022C3 R   |     RXCHAR  =  000001 
  5 SAVE       0022BA R   |     SDIVD   =  000002     |     SFR_BASE=  005000 
    SFR_END =  0057FF     |     SHARP   =  000023     |   5 SHOW       0022B1 R
    SI      =  00000F     |     SIGN    =  000001     |   5 SIZE       0022A8 R
    SKIP    =  000005     |   5 SLEEP      00229E R   |     SO      =  00000E 
    SOH     =  000001     |     SPACE   =  000020     |   5 SPIEN      00228A R
  5 SPIRD      002294 R   |   5 SPISEL     00227F R   |   5 SPIWR      002275 R
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_CS_B=  000005     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_SR_B=  000007     |     SPI_SR_C=  000004     |     SPI_SR_M=  000005 
    SPI_SR_O=  000006     |     SPI_SR_R=  000000     |     SPI_SR_T=  000001 
    SPI_SR_W=  000003     |     SPI_TXCR=  005207     |     SQUOT   =  000001 
    SRC     =  000003     |     STACK_EM=  0017FF     |     STACK_SI=  0000A0 
  5 STEP       00226C R   |   5 STOP       002263 R   |     STREND  =  00000A 
    STRING  =  000002     |     STX     =  000002     |     SUB     =  00001A 
    SWIM_CSR=  007F80     |     SYN     =  000016     |     TAB     =  000009 
    TABW    =  000004     |     TAB_WIDT=  000004     |     TCHAR   =  000001 
    TEMP    =  000003     |     TIB_SIZE=  000050     |     TICK    =  000027 
  5 TICKS      002259 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CLK=  00F424     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   5 TIMEOUT    002243 R
  5 TIMER      00224F R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
    TK_ARRAY=  000006     |     TK_CFUNC=  000082     |     TK_CHAR =  000003 
    TK_CMD  =  000080     |     TK_COLON=  000001     |     TK_COMMA=  000009 
    TK_CONST=  000083     |     TK_DIV  =  000021     |     TK_EQUAL=  000032 
    TK_GE   =  000033     |     TK_GRP_A=  000010     |     TK_GRP_M=  000030 
    TK_GRP_M=  000000     |     TK_GRP_M=  000020     |     TK_GRP_R=  000030 
    TK_GT   =  000031     |     TK_IFUNC=  000081     |     TK_INTGR=  000084 
    TK_LE   =  000036     |     TK_LPARE=  000007     |     TK_LT   =  000034 
    TK_MINUS=  000011     |     TK_MOD  =  000022     |     TK_MULT =  000020 
    TK_NE   =  000035     |     TK_NONE =  000000     |     TK_PLUS =  000010 
    TK_QSTR =  000002     |     TK_RPARE=  000008     |     TK_SHARP=  00000A 
    TK_VAR  =  000085     |   5 TO         00223C R   |   5 TONE       002233 R
  5 Timer4Up   000037 R   |     U8      =  000003     |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   5 UBOUND     002228 R   |   5 UBTN_Han   00007A R
  5 UFLASH     00221D R   |   5 UNTIL      002213 R   |     US      =  00001F 
  5 USER_ABO   000082 R   |     USE_BLOC=  000000     |   5 USR        00220B R
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
  5 Uart1RxH   00000F R   |   5 UserButt   00004D R   |     VAR_ADDR=  000006 
    VSIZ    =  000002     |     VSIZE   =  000006     |     VT      =  00000B 
  5 WAIT       002202 R   |     WCNT    =  000003     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |     WIDTH   =  000001     |     WIDTH_SA=  000002 
    WLEN    =  000001     |   5 WORDS      0021F8 R   |   5 WRITE      0021EE R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     XADR    =  000001 
    XFIRST  =  000001     |     XMASK   =  000001     |     XOFF    =  000013 
    XON     =  000011     |   5 XOR        0021E6 R   |   5 XPEEK      0021DC R
    XREG    =  000003     |     XSAVE   =  000005     |     YSAVE   =  000003 
  5 abs        001CEC R   |   1 acc16      00000C R   |   1 acc24      00000B R
  1 acc8       00000D R   |   5 accept_c   000ABD R   |   5 add        000E52 R
  5 add_char   0013A7 R   |   5 analog_r   0017AE R   |   5 ansi_seq   000A7F R
  5 arduino_   001DD7 R   |   5 arg_list   000F8E R   |   1 array_si   000021 R
  5 ascii      001B9E R   |   5 at_tst     000CC4 R   |   5 atoi24     000DD5 R
  5 atoi_exi   000E3B R   |   5 autorun    001C27 R   |   5 autorun_   0005EC R
  5 awu        001C9D R   |   5 awu02      001CA7 R   |   5 bad_port   001BF6 R
  1 base       00000A R   |   1 basicptr   000004 R   |   5 beep       001736 R
  5 bin_exit   000BA2 R   |   5 bit_and    001D00 R   |   5 bit_or     001D18 R
  5 bit_rese   0014FF R   |   5 bit_set    0014EF R   |   5 bit_test   001520 R
  5 bit_togg   001510 R   |   5 bit_xor    001D30 R   |   5 bitmask    001F43 R
  5 bkslsh_t   000C71 R   |   5 bksp       0001E1 R   |   5 break_po   00187B R
  5 bye        001C1E R   |   5 cancel_a   0005B4 R   |   5 char       001B8C R
  5 clear_ba   000601 R   |   5 clear_va   000481 R   |   5 clock_in   00009D R
  5 cmd_end    001722 R   |   5 cmd_line   00081F R   |   5 cmd_name   000EFD R
  5 cmp_name   0018EE R   |   5 cold_sta   0004EF R   |   5 colon_ts   000C98 R
  5 comma_ts   000CA3 R   |   5 comp_msg   000775 R   |   5 compile    00040E R
  5 const_cr   001FF7 R   |   5 const_cr   001FFD R   |   5 const_dd   001FF1 R
  5 const_ee   00200F R   |   5 const_id   001FEB R   |   5 const_in   002009 R
  5 const_od   001FE5 R   |   5 const_ou   002003 R   |   5 const_po   001FAF R
  5 const_po   001FB5 R   |   5 const_po   001FBB R   |   5 const_po   001FC1 R
  5 const_po   001FC7 R   |   5 const_po   001FCD R   |   5 const_po   001FD3 R
  5 const_po   001FD9 R   |   5 const_po   001FDF R   |   5 convert_   000B19 R
  5 copy_com   000CF9 R   |   1 count      000003 R   |   5 cp_loop    000F3D R
  5 create_g   000375 R   |   5 cs_high    00219F R   |   5 cstk_pro   00113C R
  5 dash_tst   000CB9 R   |   5 data       002015 R   |   1 data_len   000009 R
  5 data_lin   00201B R   |   1 data_ofs   000008 R   |   1 data_ptr   000006 R
  5 data_sea   00205B R   |   5 dec_base   001168 R   |   5 del_back   000AAE R
  5 del_line   000348 R   |   5 del_ln     000A9F R   |   5 delete     0001F1 R
  5 digital_   0017E2 R   |   5 digital_   001812 R   |   5 dir_loop   001ACB R
  5 director   001ABF R   |   5 divide     000EA8 R   |   5 divu24_8   0009D0 R
  5 do_loop    001F6C R   |   5 drive_fr   001B48 R   |   5 enable_i   001EED R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

  5 eql_tst    000D4E R   |   5 equal      0013BA R   |   5 err_bad_   0006E1 R
  5 err_buf_   000757 R   |   5 err_cmd_   0006A5 R   |   5 err_div0   00066A R
  5 err_dupl   0006BF R   |   5 err_math   000651 R   |   5 err_mem_   000636 R
  5 err_msg    000616 R   |   5 err_no_a   0006ED R   |   5 err_no_d   000720 R
  5 err_no_f   000744 R   |   5 err_no_l   000679 R   |   5 err_no_p   000730 R
  5 err_not_   0006D0 R   |   5 err_run_   00068F R   |   5 err_synt   000643 R
  5 escaped    000B2E R   |   5 expect     000F7C R   |   5 expr_exi   0010C8 R
  5 expressi   001087 R   |   5 factor     000FDE R   |   1 farptr     000016 R
  5 fcpu       001D7A R   |   7 fdrive     010000 R   |   1 ffree      000019 R
  5 file_cou   001B40 R   |   5 file_rec   0021A4 R   |   5 file_tra   0021D9 R
  5 final_te   000A79 R   |   5 first_li   0011ED R   |   1 flags      000023 R
  5 for        001597 R   |   5 forget     001A7A R   |   1 free_ram   00005A R
  5 fsize_ms   0021C8 R   |   5 func_arg   000F89 R   |   5 func_not   001EE0 R
  5 ge         0013BC R   |   5 get_arra   000FB9 R   |   5 get_targ   001661 R
  5 get_tick   001CE6 R   |   5 get_toke   000C0A R   |   5 getc       0001CD R
  5 gosub      001692 R   |   5 goto       001677 R   |   5 gpio       001BD1 R
  5 gt         0013B8 R   |   5 gt_tst     000D59 R   |   5 hex_base   001163 R
  5 hex_dump   000279 R   |   5 if         001583 R   |   1 in         000001 R
  1 in.saved   000002 R   |   1 in.w       000000 R   |   5 incr_far   0018A3 R
  5 input_ex   0014C1 R   |   5 input_lo   00145A R   |   5 input_va   001458 R
  5 insert_l   0003A1 R   |   5 insert_l   00040B R   |   5 interp_l   000860 R
  5 interpre   00083B R   |   5 invert     001F5D R   |   5 is_alpha   00048F R
  5 is_digit   0004A0 R   |   5 itoa       000989 R   |   5 itoa_loo   0009A1 R
  5 jp_to_ta   001685 R   |   5 key        001BBE R   |   5 kw_loop    000BBE R
  5 kword_di   002580 R   |   5 kword_en   0021DA R   |   5 le         0013C1 R
  5 leading_   001F33 R   |   5 left_arr   000A7F R   |   5 let        001199 R
  5 let_arra   0011A7 R   |   5 let_var    0011AA R   |   5 lines_sk   0011F0 R
  5 list       0011C4 R   |   5 list_exi   001236 R   |   5 list_sta   001210 R
  5 load       001A4A R   |   5 load_aut   0005C3 R   |   5 load_fil   001A19 R
  5 log2       001F28 R   |   5 logical_   001ED6 R   |   5 loop_bac   001644 R
  1 loop_dep   000020 R   |   5 loop_don   001659 R   |   5 lshift     001D48 R
  5 lt         0013BF R   |   5 lt_tst     000D82 R   |   5 modulo     000EEC R
  5 move       0002E2 R   |   5 move_dow   000300 R   |   5 move_exi   000321 R
  5 move_loo   000305 R   |   5 move_up    0002F2 R   |   5 mul_char   0013A9 R
  5 multiply   000E60 R   |   5 mulu24_8   0009F8 R   |   5 nbr_tst    000C3D R
  5 ne         0013C4 R   |   5 neg_acc2   000A32 R   |   5 new        001899 R
  5 next       001617 R   |   5 next_lin   000843 R   |   5 next_tok   000887 R
  5 no_match   000F4F R   |   5 other      000DAB R   |   3 pad        0016E0 R
  5 parse_bi   000B80 R   |   5 parse_in   000B36 R   |   5 parse_ke   000BBD R
  5 parse_qu   000AE1 R   |   5 pause      001C8A R   |   5 pause02    001C94 R
  5 peek       001556 R   |   5 pin_mode   001D86 R   |   5 plus_tst   000D22 R
  5 poke       001547 R   |   5 power_ad   001772 R   |   5 prcnt_ts   000D43 R
  5 print      0013C7 R   |   5 print_ex   00142C R   |   5 print_in   000924 R
  5 print_ty   001438 R   |   5 prt_basi   001291 R   |   5 prt_cmd_   001239 R
  5 prt_loop   0013CB R   |   5 prt_quot   00124D R   |   5 prt_tok    00020B R
  5 prti24     0008DC R   |   1 ptr16      000017 R   |   1 ptr8       000018 R
  5 putc       0001C4 R   |   5 puts       0001D7 R   |   5 qkey       001BC6 GR
  5 qmark_ts   000CCF R   |   5 random     001DF7 R   |   5 read       002093 R
  5 read01     002095 R   |   5 readln     000A55 R   |   5 readln_l   000A5D R
  5 readln_q   000AD2 R   |   5 refresh_   001F23 R   |   5 rel_exit   00111F R
  5 relation   0010CB R   |   5 relop_st   0013AC R   |   5 remark     0014C4 R
  5 reprint    000A7F R   |   5 reset_co   0013C9 R   |   5 rest_con   001448 R
  5 restore    002048 R   |   5 return     0016B2 R   |   5 right_ar   000A7F R
  5 row_loop   00025C R   |   5 rparnt_t   000C8D R   |   5 rshift     001D61 R
  5 rt_msg     000764 R   |   5 run        0016D0 R   |   5 run_it     0016FB R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

  1 rx_char    000025 R   |   5 save       00195A R   |   5 save_con   001438 R
  5 search_d   000F2F R   |   5 search_e   000F79 R   |   5 search_f   00190F R
  5 search_l   000324 R   |   5 search_l   00032C R   |   5 search_n   000F33 R
  1 seedx      000012 R   |   1 seedy      000014 R   |   5 seek_fdr   0018B1 R
  5 select_p   001DC7 R   |   5 set_time   001EC4 R   |   5 sharp_ts   000CAE R
  5 show       001122 R   |   5 show_row   00024A R   |   5 single_c   0013A2 R
  5 size       00116D R   |   5 skip       000E3F R   |   5 slash_ts   000D38 R
  5 sleep      001C7F R   |   5 software   0004A9 R   |   5 spaces     0001FF R
  5 spi_clea   002138 R   |   5 spi_disa   002120 R   |   5 spi_enab   0020ED R
  5 spi_rcv_   00215A R   |   5 spi_read   002185 R   |   5 spi_sele   00218D R
  5 spi_send   002144 R   |   5 spi_writ   002165 R   |   3 stack_fu   001760 R
  3 stack_un   001800 R   |   5 star_tst   000D2D R   |   5 step       0015F0 R
  5 stop       00184D R   |   5 store_lo   001604 R   |   5 str_matc   000F5C R
  5 str_tst    000C2D R   |   5 strcmp     0002C3 R   |   5 strcpy     0002D4 R
  5 strlen     0002B6 R   |   5 substrac   000E5A R   |   5 syntax_e   000795 R
  1 tab_widt   000024 R   |   5 tb_error   000797 R   |   5 term       001038 R
  5 term01     001041 R   |   5 term_exi   001084 R   |   3 tib        001690 R
  5 tick_tst   000CE7 R   |   1 ticks      00000E R   |   5 timeout    001ED3 R
  1 timer      000010 R   |   5 timer2_i   0000B3 R   |   5 timer4_i   0000C0 R
  5 tk_id      000785 R   |   5 to         0015C0 R   |   5 to_upper   000DC9 GR
  5 token_ch   000DC2 R   |   5 token_ex   000DC6 R   |   5 token_ms   000242 R
  5 tone       001729 R   |   5 try_next   002083 R   |   1 txtbgn     00001C R
  1 txtend     00001E R   |   5 uart1_in   000189 R   |   5 uart1_se   000199 R
  5 ubound     001177 R   |   5 uflash     001BFB R   |   5 unlock_e   0000D5 R
  5 unlock_f   0000E3 R   |   5 until      001F81 R   |   5 user_int   000060 R
  5 user_spa   002600 R   |   5 usr        001C01 R   |   5 var_name   001289 R
  1 vars       000026 R   |   5 wait       0014CA R   |   5 warm_ini   000596 R
  5 warm_sta   00081C R   |   5 words      001E5E R   |   5 words_co   001EAE R
  5 write      001B55 R   |   5 write_bl   000166 R   |   5 write_by   0000F1 R
  5 write_ee   00012D R   |   5 write_ex   000161 R   |   5 write_fl   000117 R
  5 xpeek      001567 R   |     xreceive   ****** GX

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size     5A   flags    0
   2 SSEG       size      0   flags    8
   3 SSEG0      size    170   flags    8
   4 HOME       size     80   flags    0
   5 CODE       size   260E   flags    0
   6 FLASH_DR   size      0   flags    8
   7 FLASH_DR   size      0   flags    8

